../Src/Protocols/Communication/Core/TemplateCommunicationProtocol.hpp:63:9:uint8_t TemplateCommunicationProtocol<H>::GetID(void*, bool*) [with H = FDCAN_HandleTypeDef]	16	static
c:\st\stm32cubeide_1.10.1\stm32cubeide\plugins\com.st.stm32cube.ide.mcu.externaltools.gnu-tools-for-stm32.10.3-2021.10.win32_1.0.0.202111181127\tools\arm-none-eabi\include\c++\10.3.1\bits\stl_vector.h:343:7:std::_Vector_base<_Tp, _Alloc>::pointer std::_Vector_base<_Tp, _Alloc>::_M_allocate(std::size_t) [with _Tp = unsigned char; _Alloc = std::allocator<unsigned char>]	8	static
../Src/Protocols/Communication/FDCAN/CANProtocol.cpp:13:1:CANProtocol::CANProtocol()	0	static
../Src/Protocols/Communication/FDCAN/CANProtocol.cpp:134:10:uint32_t CANProtocol::GetProtocolLength(uint16_t)	0	static
c:\st\stm32cubeide_1.10.1\stm32cubeide\plugins\com.st.stm32cube.ide.mcu.externaltools.gnu-tools-for-stm32.10.3-2021.10.win32_1.0.0.202111181127\tools\arm-none-eabi\include\c++\10.3.1\bits\stl_vector.h:333:7:std::_Vector_base<_Tp, _Alloc>::~_Vector_base() [with _Tp = unsigned char; _Alloc = std::allocator<unsigned char>]	8	static
c:\st\stm32cubeide_1.10.1\stm32cubeide\plugins\com.st.stm32cube.ide.mcu.externaltools.gnu-tools-for-stm32.10.3-2021.10.win32_1.0.0.202111181127\tools\arm-none-eabi\include\c++\10.3.1\bits\stl_vector.h:1815:7:void std::vector<_Tp, _Alloc>::_M_move_assign(std::vector<_Tp, _Alloc>&&, std::true_type) [with _Tp = unsigned char; _Alloc = std::allocator<unsigned char>]	32	static
../Src/Protocols/Communication/Core/TemplateCommunicationProtocol.hpp:47:4:H* TemplateCommunicationProtocol<H>::GetInterface(uint8_t, bool*) [with H = FDCAN_HandleTypeDef]	16	static
../Src/Protocols/Communication/FDCAN/CANProtocol.cpp:47:19:HAL_StatusTypeDef CANProtocol::ConfigureFilters(uint8_t)	24	static
../Src/Protocols/Communication/FDCAN/CANProtocol.cpp:60:19:virtual HAL_StatusTypeDef CANProtocol::ActivateReception(uint8_t)	16	static
../Src/Protocols/Communication/FDCAN/CANProtocol.cpp:73:19:HAL_StatusTypeDef CANProtocol::Start(uint8_t)	16	static
c:\st\stm32cubeide_1.10.1\stm32cubeide\plugins\com.st.stm32cube.ide.mcu.externaltools.gnu-tools-for-stm32.10.3-2021.10.win32_1.0.0.202111181127\tools\arm-none-eabi\include\c++\10.3.1\bits\vector.tcc:426:7:) [with _Args = {FDCAN_HandleTypeDef* const&}; _Tp = FDCAN_HandleTypeDef*; _Alloc = std::allocator<FDCAN_HandleTypeDef*>]	40	static
c:\st\stm32cubeide_1.10.1\stm32cubeide\plugins\com.st.stm32cube.ide.mcu.externaltools.gnu-tools-for-stm32.10.3-2021.10.win32_1.0.0.202111181127\tools\arm-none-eabi\include\c++\10.3.1\bits\stl_vector.h:1187:7:void std::vector<_Tp, _Alloc>::push_back(const value_type&) [with _Tp = FDCAN_HandleTypeDef*; _Alloc = std::allocator<FDCAN_HandleTypeDef*>]	8	static
../Src/Protocols/Communication/Core/TemplateCommunicationProtocol.hpp:33:6:void TemplateCommunicationProtocol<H>::AddInterface(uint8_t, H*) [with H = FDCAN_HandleTypeDef]	16	static
c:\st\stm32cubeide_1.10.1\stm32cubeide\plugins\com.st.stm32cube.ide.mcu.externaltools.gnu-tools-for-stm32.10.3-2021.10.win32_1.0.0.202111181127\tools\arm-none-eabi\include\c++\10.3.1\bits\vector.tcc:426:7:) [with _Args = {const FDCAN_TxHeaderTypeDef&}; _Tp = FDCAN_TxHeaderTypeDef; _Alloc = std::allocator<FDCAN_TxHeaderTypeDef>]	40	static
../Src/Protocols/Communication/FDCAN/CANProtocol.cpp:23:6:virtual void CANProtocol::AddInterface(uint8_t, FDCAN_HandleTypeDef*)	72	static
c:\st\stm32cubeide_1.10.1\stm32cubeide\plugins\com.st.stm32cube.ide.mcu.externaltools.gnu-tools-for-stm32.10.3-2021.10.win32_1.0.0.202111181127\tools\arm-none-eabi\include\c++\10.3.1\bits\stl_vector.h:1756:7:std::vector<_Tp, _Alloc>::size_type std::vector<_Tp, _Alloc>::_M_check_len(std::vector<_Tp, _Alloc>::size_type, const char*) const [with _Tp = unsigned char; _Alloc = std::allocator<unsigned char>]	8	static
c:\st\stm32cubeide_1.10.1\stm32cubeide\plugins\com.st.stm32cube.ide.mcu.externaltools.gnu-tools-for-stm32.10.3-2021.10.win32_1.0.0.202111181127\tools\arm-none-eabi\include\c++\10.3.1\bits\stl_algobase.h:415:2:static _Tp* std::__copy_move<_IsMove, true, std::random_access_iterator_tag>::__copy_m(const _Tp*, const _Tp*, _Tp*) [with _Tp = unsigned char; bool _IsMove = false]	8	static
../Src/Protocols/Communication/FDCAN/CANProtocol.cpp:163:15:virtual MessageHeader CANProtocol::DecodeProtocol(uint8_t, std::vector<unsigned char>, uint16_t*, bool*)	48	static
c:\st\stm32cubeide_1.10.1\stm32cubeide\plugins\com.st.stm32cube.ide.mcu.externaltools.gnu-tools-for-stm32.10.3-2021.10.win32_1.0.0.202111181127\tools\arm-none-eabi\include\c++\10.3.1\bits\stl_algobase.h:415:2:static _Tp* std::__copy_move<_IsMove, true, std::random_access_iterator_tag>::__copy_m(const _Tp*, const _Tp*, _Tp*) [with _Tp = unsigned char; bool _IsMove = true]	8	static
../Src/Protocols/Communication/FDCAN/CANProtocol.cpp:110:22:std::vector<unsigned char> CANProtocol::CodeProtocol(MessageHeader, FDCAN_TxHeaderTypeDef*)	40	static
../Src/Protocols/Communication/FDCAN/CANProtocol.cpp:86:19:virtual HAL_StatusTypeDef CANProtocol::Send(MessageHeader)	104	static
