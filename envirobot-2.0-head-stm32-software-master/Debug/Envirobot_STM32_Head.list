
Envirobot_STM32_Head.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ae84  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000678  0801b128  0801b128  0001c128  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801b7a0  0801b7a0  0001c7a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   0000000c  0801b7a8  0801b7a8  0001c7a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  0801b7b4  0801b7b4  0001c7b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  24000000  0801b7bc  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00009524  2400007c  0801b838  0001d07c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240095a0  0801b838  0001d5a0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001d07c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00336f61  00000000  00000000  0001d0aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00010daf  00000000  00000000  0035400b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 0006902c  00000000  00000000  00364dba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003d08  00000000  00000000  003cdde8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000b468  00000000  00000000  003d1af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00012b8f  00000000  00000000  003dcf58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0008208b  00000000  00000000  003efae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    002385c9  00000000  00000000  00471b72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  006aa13b  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000d1b0  00000000  00000000  006aa180  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000007d  00000000  00000000  006b7330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400007c 	.word	0x2400007c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801b10c 	.word	0x0801b10c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000080 	.word	0x24000080
 80002dc:	0801b10c 	.word	0x0801b10c

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <__aeabi_drsub>:
 80002f4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f8:	e002      	b.n	8000300 <__adddf3>
 80002fa:	bf00      	nop

080002fc <__aeabi_dsub>:
 80002fc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000300 <__adddf3>:
 8000300:	b530      	push	{r4, r5, lr}
 8000302:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000306:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800030a:	ea94 0f05 	teq	r4, r5
 800030e:	bf08      	it	eq
 8000310:	ea90 0f02 	teqeq	r0, r2
 8000314:	bf1f      	itttt	ne
 8000316:	ea54 0c00 	orrsne.w	ip, r4, r0
 800031a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000322:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000326:	f000 80e2 	beq.w	80004ee <__adddf3+0x1ee>
 800032a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000332:	bfb8      	it	lt
 8000334:	426d      	neglt	r5, r5
 8000336:	dd0c      	ble.n	8000352 <__adddf3+0x52>
 8000338:	442c      	add	r4, r5
 800033a:	ea80 0202 	eor.w	r2, r0, r2
 800033e:	ea81 0303 	eor.w	r3, r1, r3
 8000342:	ea82 0000 	eor.w	r0, r2, r0
 8000346:	ea83 0101 	eor.w	r1, r3, r1
 800034a:	ea80 0202 	eor.w	r2, r0, r2
 800034e:	ea81 0303 	eor.w	r3, r1, r3
 8000352:	2d36      	cmp	r5, #54	@ 0x36
 8000354:	bf88      	it	hi
 8000356:	bd30      	pophi	{r4, r5, pc}
 8000358:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800035c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000360:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000364:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x70>
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000374:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000378:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800037c:	d002      	beq.n	8000384 <__adddf3+0x84>
 800037e:	4252      	negs	r2, r2
 8000380:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000384:	ea94 0f05 	teq	r4, r5
 8000388:	f000 80a7 	beq.w	80004da <__adddf3+0x1da>
 800038c:	f1a4 0401 	sub.w	r4, r4, #1
 8000390:	f1d5 0e20 	rsbs	lr, r5, #32
 8000394:	db0d      	blt.n	80003b2 <__adddf3+0xb2>
 8000396:	fa02 fc0e 	lsl.w	ip, r2, lr
 800039a:	fa22 f205 	lsr.w	r2, r2, r5
 800039e:	1880      	adds	r0, r0, r2
 80003a0:	f141 0100 	adc.w	r1, r1, #0
 80003a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a8:	1880      	adds	r0, r0, r2
 80003aa:	fa43 f305 	asr.w	r3, r3, r5
 80003ae:	4159      	adcs	r1, r3
 80003b0:	e00e      	b.n	80003d0 <__adddf3+0xd0>
 80003b2:	f1a5 0520 	sub.w	r5, r5, #32
 80003b6:	f10e 0e20 	add.w	lr, lr, #32
 80003ba:	2a01      	cmp	r2, #1
 80003bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003c0:	bf28      	it	cs
 80003c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c6:	fa43 f305 	asr.w	r3, r3, r5
 80003ca:	18c0      	adds	r0, r0, r3
 80003cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d4:	d507      	bpl.n	80003e6 <__adddf3+0xe6>
 80003d6:	f04f 0e00 	mov.w	lr, #0
 80003da:	f1dc 0c00 	rsbs	ip, ip, #0
 80003de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003ea:	d31b      	bcc.n	8000424 <__adddf3+0x124>
 80003ec:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003f0:	d30c      	bcc.n	800040c <__adddf3+0x10c>
 80003f2:	0849      	lsrs	r1, r1, #1
 80003f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003fc:	f104 0401 	add.w	r4, r4, #1
 8000400:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000404:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000408:	f080 809a 	bcs.w	8000540 <__adddf3+0x240>
 800040c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000410:	bf08      	it	eq
 8000412:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000416:	f150 0000 	adcs.w	r0, r0, #0
 800041a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041e:	ea41 0105 	orr.w	r1, r1, r5
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000428:	4140      	adcs	r0, r0
 800042a:	eb41 0101 	adc.w	r1, r1, r1
 800042e:	3c01      	subs	r4, #1
 8000430:	bf28      	it	cs
 8000432:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000436:	d2e9      	bcs.n	800040c <__adddf3+0x10c>
 8000438:	f091 0f00 	teq	r1, #0
 800043c:	bf04      	itt	eq
 800043e:	4601      	moveq	r1, r0
 8000440:	2000      	moveq	r0, #0
 8000442:	fab1 f381 	clz	r3, r1
 8000446:	bf08      	it	eq
 8000448:	3320      	addeq	r3, #32
 800044a:	f1a3 030b 	sub.w	r3, r3, #11
 800044e:	f1b3 0220 	subs.w	r2, r3, #32
 8000452:	da0c      	bge.n	800046e <__adddf3+0x16e>
 8000454:	320c      	adds	r2, #12
 8000456:	dd08      	ble.n	800046a <__adddf3+0x16a>
 8000458:	f102 0c14 	add.w	ip, r2, #20
 800045c:	f1c2 020c 	rsb	r2, r2, #12
 8000460:	fa01 f00c 	lsl.w	r0, r1, ip
 8000464:	fa21 f102 	lsr.w	r1, r1, r2
 8000468:	e00c      	b.n	8000484 <__adddf3+0x184>
 800046a:	f102 0214 	add.w	r2, r2, #20
 800046e:	bfd8      	it	le
 8000470:	f1c2 0c20 	rsble	ip, r2, #32
 8000474:	fa01 f102 	lsl.w	r1, r1, r2
 8000478:	fa20 fc0c 	lsr.w	ip, r0, ip
 800047c:	bfdc      	itt	le
 800047e:	ea41 010c 	orrle.w	r1, r1, ip
 8000482:	4090      	lslle	r0, r2
 8000484:	1ae4      	subs	r4, r4, r3
 8000486:	bfa2      	ittt	ge
 8000488:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800048c:	4329      	orrge	r1, r5
 800048e:	bd30      	popge	{r4, r5, pc}
 8000490:	ea6f 0404 	mvn.w	r4, r4
 8000494:	3c1f      	subs	r4, #31
 8000496:	da1c      	bge.n	80004d2 <__adddf3+0x1d2>
 8000498:	340c      	adds	r4, #12
 800049a:	dc0e      	bgt.n	80004ba <__adddf3+0x1ba>
 800049c:	f104 0414 	add.w	r4, r4, #20
 80004a0:	f1c4 0220 	rsb	r2, r4, #32
 80004a4:	fa20 f004 	lsr.w	r0, r0, r4
 80004a8:	fa01 f302 	lsl.w	r3, r1, r2
 80004ac:	ea40 0003 	orr.w	r0, r0, r3
 80004b0:	fa21 f304 	lsr.w	r3, r1, r4
 80004b4:	ea45 0103 	orr.w	r1, r5, r3
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	f1c4 040c 	rsb	r4, r4, #12
 80004be:	f1c4 0220 	rsb	r2, r4, #32
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 f304 	lsl.w	r3, r1, r4
 80004ca:	ea40 0003 	orr.w	r0, r0, r3
 80004ce:	4629      	mov	r1, r5
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	fa21 f004 	lsr.w	r0, r1, r4
 80004d6:	4629      	mov	r1, r5
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	f094 0f00 	teq	r4, #0
 80004de:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004e2:	bf06      	itte	eq
 80004e4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e8:	3401      	addeq	r4, #1
 80004ea:	3d01      	subne	r5, #1
 80004ec:	e74e      	b.n	800038c <__adddf3+0x8c>
 80004ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f2:	bf18      	it	ne
 80004f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f8:	d029      	beq.n	800054e <__adddf3+0x24e>
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	d005      	beq.n	8000512 <__adddf3+0x212>
 8000506:	ea54 0c00 	orrs.w	ip, r4, r0
 800050a:	bf04      	itt	eq
 800050c:	4619      	moveq	r1, r3
 800050e:	4610      	moveq	r0, r2
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea91 0f03 	teq	r1, r3
 8000516:	bf1e      	ittt	ne
 8000518:	2100      	movne	r1, #0
 800051a:	2000      	movne	r0, #0
 800051c:	bd30      	popne	{r4, r5, pc}
 800051e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000522:	d105      	bne.n	8000530 <__adddf3+0x230>
 8000524:	0040      	lsls	r0, r0, #1
 8000526:	4149      	adcs	r1, r1
 8000528:	bf28      	it	cs
 800052a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052e:	bd30      	pop	{r4, r5, pc}
 8000530:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000534:	bf3c      	itt	cc
 8000536:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800053a:	bd30      	popcc	{r4, r5, pc}
 800053c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000540:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000544:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000548:	f04f 0000 	mov.w	r0, #0
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000552:	bf1a      	itte	ne
 8000554:	4619      	movne	r1, r3
 8000556:	4610      	movne	r0, r2
 8000558:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800055c:	bf1c      	itt	ne
 800055e:	460b      	movne	r3, r1
 8000560:	4602      	movne	r2, r0
 8000562:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000566:	bf06      	itte	eq
 8000568:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800056c:	ea91 0f03 	teqeq	r1, r3
 8000570:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	bf00      	nop

08000578 <__aeabi_ui2d>:
 8000578:	f090 0f00 	teq	r0, #0
 800057c:	bf04      	itt	eq
 800057e:	2100      	moveq	r1, #0
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000588:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800058c:	f04f 0500 	mov.w	r5, #0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e750      	b.n	8000438 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_i2d>:
 8000598:	f090 0f00 	teq	r0, #0
 800059c:	bf04      	itt	eq
 800059e:	2100      	moveq	r1, #0
 80005a0:	4770      	bxeq	lr
 80005a2:	b530      	push	{r4, r5, lr}
 80005a4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ac:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005b0:	bf48      	it	mi
 80005b2:	4240      	negmi	r0, r0
 80005b4:	f04f 0100 	mov.w	r1, #0
 80005b8:	e73e      	b.n	8000438 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_f2d>:
 80005bc:	0042      	lsls	r2, r0, #1
 80005be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005ca:	bf1f      	itttt	ne
 80005cc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005d0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d8:	4770      	bxne	lr
 80005da:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005de:	bf08      	it	eq
 80005e0:	4770      	bxeq	lr
 80005e2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e6:	bf04      	itt	eq
 80005e8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005ec:	4770      	bxeq	lr
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005fc:	e71c      	b.n	8000438 <__adddf3+0x138>
 80005fe:	bf00      	nop

08000600 <__aeabi_ul2d>:
 8000600:	ea50 0201 	orrs.w	r2, r0, r1
 8000604:	bf08      	it	eq
 8000606:	4770      	bxeq	lr
 8000608:	b530      	push	{r4, r5, lr}
 800060a:	f04f 0500 	mov.w	r5, #0
 800060e:	e00a      	b.n	8000626 <__aeabi_l2d+0x16>

08000610 <__aeabi_l2d>:
 8000610:	ea50 0201 	orrs.w	r2, r0, r1
 8000614:	bf08      	it	eq
 8000616:	4770      	bxeq	lr
 8000618:	b530      	push	{r4, r5, lr}
 800061a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061e:	d502      	bpl.n	8000626 <__aeabi_l2d+0x16>
 8000620:	4240      	negs	r0, r0
 8000622:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000626:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800062a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000632:	f43f aed8 	beq.w	80003e6 <__adddf3+0xe6>
 8000636:	f04f 0203 	mov.w	r2, #3
 800063a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063e:	bf18      	it	ne
 8000640:	3203      	addne	r2, #3
 8000642:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000646:	bf18      	it	ne
 8000648:	3203      	addne	r2, #3
 800064a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064e:	f1c2 0320 	rsb	r3, r2, #32
 8000652:	fa00 fc03 	lsl.w	ip, r0, r3
 8000656:	fa20 f002 	lsr.w	r0, r0, r2
 800065a:	fa01 fe03 	lsl.w	lr, r1, r3
 800065e:	ea40 000e 	orr.w	r0, r0, lr
 8000662:	fa21 f102 	lsr.w	r1, r1, r2
 8000666:	4414      	add	r4, r2
 8000668:	e6bd      	b.n	80003e6 <__adddf3+0xe6>
 800066a:	bf00      	nop

0800066c <__aeabi_uldivmod>:
 800066c:	b953      	cbnz	r3, 8000684 <__aeabi_uldivmod+0x18>
 800066e:	b94a      	cbnz	r2, 8000684 <__aeabi_uldivmod+0x18>
 8000670:	2900      	cmp	r1, #0
 8000672:	bf08      	it	eq
 8000674:	2800      	cmpeq	r0, #0
 8000676:	bf1c      	itt	ne
 8000678:	f04f 31ff 	movne.w	r1, #4294967295
 800067c:	f04f 30ff 	movne.w	r0, #4294967295
 8000680:	f000 b96a 	b.w	8000958 <__aeabi_idiv0>
 8000684:	f1ad 0c08 	sub.w	ip, sp, #8
 8000688:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800068c:	f000 f806 	bl	800069c <__udivmoddi4>
 8000690:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000694:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000698:	b004      	add	sp, #16
 800069a:	4770      	bx	lr

0800069c <__udivmoddi4>:
 800069c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006a0:	9d08      	ldr	r5, [sp, #32]
 80006a2:	460c      	mov	r4, r1
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d14e      	bne.n	8000746 <__udivmoddi4+0xaa>
 80006a8:	4694      	mov	ip, r2
 80006aa:	458c      	cmp	ip, r1
 80006ac:	4686      	mov	lr, r0
 80006ae:	fab2 f282 	clz	r2, r2
 80006b2:	d962      	bls.n	800077a <__udivmoddi4+0xde>
 80006b4:	b14a      	cbz	r2, 80006ca <__udivmoddi4+0x2e>
 80006b6:	f1c2 0320 	rsb	r3, r2, #32
 80006ba:	4091      	lsls	r1, r2
 80006bc:	fa20 f303 	lsr.w	r3, r0, r3
 80006c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80006c4:	4319      	orrs	r1, r3
 80006c6:	fa00 fe02 	lsl.w	lr, r0, r2
 80006ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006ce:	fa1f f68c 	uxth.w	r6, ip
 80006d2:	fbb1 f4f7 	udiv	r4, r1, r7
 80006d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80006da:	fb07 1114 	mls	r1, r7, r4, r1
 80006de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006e2:	fb04 f106 	mul.w	r1, r4, r6
 80006e6:	4299      	cmp	r1, r3
 80006e8:	d90a      	bls.n	8000700 <__udivmoddi4+0x64>
 80006ea:	eb1c 0303 	adds.w	r3, ip, r3
 80006ee:	f104 30ff 	add.w	r0, r4, #4294967295
 80006f2:	f080 8112 	bcs.w	800091a <__udivmoddi4+0x27e>
 80006f6:	4299      	cmp	r1, r3
 80006f8:	f240 810f 	bls.w	800091a <__udivmoddi4+0x27e>
 80006fc:	3c02      	subs	r4, #2
 80006fe:	4463      	add	r3, ip
 8000700:	1a59      	subs	r1, r3, r1
 8000702:	fa1f f38e 	uxth.w	r3, lr
 8000706:	fbb1 f0f7 	udiv	r0, r1, r7
 800070a:	fb07 1110 	mls	r1, r7, r0, r1
 800070e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000712:	fb00 f606 	mul.w	r6, r0, r6
 8000716:	429e      	cmp	r6, r3
 8000718:	d90a      	bls.n	8000730 <__udivmoddi4+0x94>
 800071a:	eb1c 0303 	adds.w	r3, ip, r3
 800071e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000722:	f080 80fc 	bcs.w	800091e <__udivmoddi4+0x282>
 8000726:	429e      	cmp	r6, r3
 8000728:	f240 80f9 	bls.w	800091e <__udivmoddi4+0x282>
 800072c:	4463      	add	r3, ip
 800072e:	3802      	subs	r0, #2
 8000730:	1b9b      	subs	r3, r3, r6
 8000732:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000736:	2100      	movs	r1, #0
 8000738:	b11d      	cbz	r5, 8000742 <__udivmoddi4+0xa6>
 800073a:	40d3      	lsrs	r3, r2
 800073c:	2200      	movs	r2, #0
 800073e:	e9c5 3200 	strd	r3, r2, [r5]
 8000742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000746:	428b      	cmp	r3, r1
 8000748:	d905      	bls.n	8000756 <__udivmoddi4+0xba>
 800074a:	b10d      	cbz	r5, 8000750 <__udivmoddi4+0xb4>
 800074c:	e9c5 0100 	strd	r0, r1, [r5]
 8000750:	2100      	movs	r1, #0
 8000752:	4608      	mov	r0, r1
 8000754:	e7f5      	b.n	8000742 <__udivmoddi4+0xa6>
 8000756:	fab3 f183 	clz	r1, r3
 800075a:	2900      	cmp	r1, #0
 800075c:	d146      	bne.n	80007ec <__udivmoddi4+0x150>
 800075e:	42a3      	cmp	r3, r4
 8000760:	d302      	bcc.n	8000768 <__udivmoddi4+0xcc>
 8000762:	4290      	cmp	r0, r2
 8000764:	f0c0 80f0 	bcc.w	8000948 <__udivmoddi4+0x2ac>
 8000768:	1a86      	subs	r6, r0, r2
 800076a:	eb64 0303 	sbc.w	r3, r4, r3
 800076e:	2001      	movs	r0, #1
 8000770:	2d00      	cmp	r5, #0
 8000772:	d0e6      	beq.n	8000742 <__udivmoddi4+0xa6>
 8000774:	e9c5 6300 	strd	r6, r3, [r5]
 8000778:	e7e3      	b.n	8000742 <__udivmoddi4+0xa6>
 800077a:	2a00      	cmp	r2, #0
 800077c:	f040 8090 	bne.w	80008a0 <__udivmoddi4+0x204>
 8000780:	eba1 040c 	sub.w	r4, r1, ip
 8000784:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000788:	fa1f f78c 	uxth.w	r7, ip
 800078c:	2101      	movs	r1, #1
 800078e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000792:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000796:	fb08 4416 	mls	r4, r8, r6, r4
 800079a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800079e:	fb07 f006 	mul.w	r0, r7, r6
 80007a2:	4298      	cmp	r0, r3
 80007a4:	d908      	bls.n	80007b8 <__udivmoddi4+0x11c>
 80007a6:	eb1c 0303 	adds.w	r3, ip, r3
 80007aa:	f106 34ff 	add.w	r4, r6, #4294967295
 80007ae:	d202      	bcs.n	80007b6 <__udivmoddi4+0x11a>
 80007b0:	4298      	cmp	r0, r3
 80007b2:	f200 80cd 	bhi.w	8000950 <__udivmoddi4+0x2b4>
 80007b6:	4626      	mov	r6, r4
 80007b8:	1a1c      	subs	r4, r3, r0
 80007ba:	fa1f f38e 	uxth.w	r3, lr
 80007be:	fbb4 f0f8 	udiv	r0, r4, r8
 80007c2:	fb08 4410 	mls	r4, r8, r0, r4
 80007c6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80007ca:	fb00 f707 	mul.w	r7, r0, r7
 80007ce:	429f      	cmp	r7, r3
 80007d0:	d908      	bls.n	80007e4 <__udivmoddi4+0x148>
 80007d2:	eb1c 0303 	adds.w	r3, ip, r3
 80007d6:	f100 34ff 	add.w	r4, r0, #4294967295
 80007da:	d202      	bcs.n	80007e2 <__udivmoddi4+0x146>
 80007dc:	429f      	cmp	r7, r3
 80007de:	f200 80b0 	bhi.w	8000942 <__udivmoddi4+0x2a6>
 80007e2:	4620      	mov	r0, r4
 80007e4:	1bdb      	subs	r3, r3, r7
 80007e6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007ea:	e7a5      	b.n	8000738 <__udivmoddi4+0x9c>
 80007ec:	f1c1 0620 	rsb	r6, r1, #32
 80007f0:	408b      	lsls	r3, r1
 80007f2:	fa22 f706 	lsr.w	r7, r2, r6
 80007f6:	431f      	orrs	r7, r3
 80007f8:	fa20 fc06 	lsr.w	ip, r0, r6
 80007fc:	fa04 f301 	lsl.w	r3, r4, r1
 8000800:	ea43 030c 	orr.w	r3, r3, ip
 8000804:	40f4      	lsrs	r4, r6
 8000806:	fa00 f801 	lsl.w	r8, r0, r1
 800080a:	0c38      	lsrs	r0, r7, #16
 800080c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000810:	fbb4 fef0 	udiv	lr, r4, r0
 8000814:	fa1f fc87 	uxth.w	ip, r7
 8000818:	fb00 441e 	mls	r4, r0, lr, r4
 800081c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000820:	fb0e f90c 	mul.w	r9, lr, ip
 8000824:	45a1      	cmp	r9, r4
 8000826:	fa02 f201 	lsl.w	r2, r2, r1
 800082a:	d90a      	bls.n	8000842 <__udivmoddi4+0x1a6>
 800082c:	193c      	adds	r4, r7, r4
 800082e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000832:	f080 8084 	bcs.w	800093e <__udivmoddi4+0x2a2>
 8000836:	45a1      	cmp	r9, r4
 8000838:	f240 8081 	bls.w	800093e <__udivmoddi4+0x2a2>
 800083c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000840:	443c      	add	r4, r7
 8000842:	eba4 0409 	sub.w	r4, r4, r9
 8000846:	fa1f f983 	uxth.w	r9, r3
 800084a:	fbb4 f3f0 	udiv	r3, r4, r0
 800084e:	fb00 4413 	mls	r4, r0, r3, r4
 8000852:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000856:	fb03 fc0c 	mul.w	ip, r3, ip
 800085a:	45a4      	cmp	ip, r4
 800085c:	d907      	bls.n	800086e <__udivmoddi4+0x1d2>
 800085e:	193c      	adds	r4, r7, r4
 8000860:	f103 30ff 	add.w	r0, r3, #4294967295
 8000864:	d267      	bcs.n	8000936 <__udivmoddi4+0x29a>
 8000866:	45a4      	cmp	ip, r4
 8000868:	d965      	bls.n	8000936 <__udivmoddi4+0x29a>
 800086a:	3b02      	subs	r3, #2
 800086c:	443c      	add	r4, r7
 800086e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000872:	fba0 9302 	umull	r9, r3, r0, r2
 8000876:	eba4 040c 	sub.w	r4, r4, ip
 800087a:	429c      	cmp	r4, r3
 800087c:	46ce      	mov	lr, r9
 800087e:	469c      	mov	ip, r3
 8000880:	d351      	bcc.n	8000926 <__udivmoddi4+0x28a>
 8000882:	d04e      	beq.n	8000922 <__udivmoddi4+0x286>
 8000884:	b155      	cbz	r5, 800089c <__udivmoddi4+0x200>
 8000886:	ebb8 030e 	subs.w	r3, r8, lr
 800088a:	eb64 040c 	sbc.w	r4, r4, ip
 800088e:	fa04 f606 	lsl.w	r6, r4, r6
 8000892:	40cb      	lsrs	r3, r1
 8000894:	431e      	orrs	r6, r3
 8000896:	40cc      	lsrs	r4, r1
 8000898:	e9c5 6400 	strd	r6, r4, [r5]
 800089c:	2100      	movs	r1, #0
 800089e:	e750      	b.n	8000742 <__udivmoddi4+0xa6>
 80008a0:	f1c2 0320 	rsb	r3, r2, #32
 80008a4:	fa20 f103 	lsr.w	r1, r0, r3
 80008a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80008ac:	fa24 f303 	lsr.w	r3, r4, r3
 80008b0:	4094      	lsls	r4, r2
 80008b2:	430c      	orrs	r4, r1
 80008b4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008b8:	fa00 fe02 	lsl.w	lr, r0, r2
 80008bc:	fa1f f78c 	uxth.w	r7, ip
 80008c0:	fbb3 f0f8 	udiv	r0, r3, r8
 80008c4:	fb08 3110 	mls	r1, r8, r0, r3
 80008c8:	0c23      	lsrs	r3, r4, #16
 80008ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008ce:	fb00 f107 	mul.w	r1, r0, r7
 80008d2:	4299      	cmp	r1, r3
 80008d4:	d908      	bls.n	80008e8 <__udivmoddi4+0x24c>
 80008d6:	eb1c 0303 	adds.w	r3, ip, r3
 80008da:	f100 36ff 	add.w	r6, r0, #4294967295
 80008de:	d22c      	bcs.n	800093a <__udivmoddi4+0x29e>
 80008e0:	4299      	cmp	r1, r3
 80008e2:	d92a      	bls.n	800093a <__udivmoddi4+0x29e>
 80008e4:	3802      	subs	r0, #2
 80008e6:	4463      	add	r3, ip
 80008e8:	1a5b      	subs	r3, r3, r1
 80008ea:	b2a4      	uxth	r4, r4
 80008ec:	fbb3 f1f8 	udiv	r1, r3, r8
 80008f0:	fb08 3311 	mls	r3, r8, r1, r3
 80008f4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008f8:	fb01 f307 	mul.w	r3, r1, r7
 80008fc:	42a3      	cmp	r3, r4
 80008fe:	d908      	bls.n	8000912 <__udivmoddi4+0x276>
 8000900:	eb1c 0404 	adds.w	r4, ip, r4
 8000904:	f101 36ff 	add.w	r6, r1, #4294967295
 8000908:	d213      	bcs.n	8000932 <__udivmoddi4+0x296>
 800090a:	42a3      	cmp	r3, r4
 800090c:	d911      	bls.n	8000932 <__udivmoddi4+0x296>
 800090e:	3902      	subs	r1, #2
 8000910:	4464      	add	r4, ip
 8000912:	1ae4      	subs	r4, r4, r3
 8000914:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000918:	e739      	b.n	800078e <__udivmoddi4+0xf2>
 800091a:	4604      	mov	r4, r0
 800091c:	e6f0      	b.n	8000700 <__udivmoddi4+0x64>
 800091e:	4608      	mov	r0, r1
 8000920:	e706      	b.n	8000730 <__udivmoddi4+0x94>
 8000922:	45c8      	cmp	r8, r9
 8000924:	d2ae      	bcs.n	8000884 <__udivmoddi4+0x1e8>
 8000926:	ebb9 0e02 	subs.w	lr, r9, r2
 800092a:	eb63 0c07 	sbc.w	ip, r3, r7
 800092e:	3801      	subs	r0, #1
 8000930:	e7a8      	b.n	8000884 <__udivmoddi4+0x1e8>
 8000932:	4631      	mov	r1, r6
 8000934:	e7ed      	b.n	8000912 <__udivmoddi4+0x276>
 8000936:	4603      	mov	r3, r0
 8000938:	e799      	b.n	800086e <__udivmoddi4+0x1d2>
 800093a:	4630      	mov	r0, r6
 800093c:	e7d4      	b.n	80008e8 <__udivmoddi4+0x24c>
 800093e:	46d6      	mov	lr, sl
 8000940:	e77f      	b.n	8000842 <__udivmoddi4+0x1a6>
 8000942:	4463      	add	r3, ip
 8000944:	3802      	subs	r0, #2
 8000946:	e74d      	b.n	80007e4 <__udivmoddi4+0x148>
 8000948:	4606      	mov	r6, r0
 800094a:	4623      	mov	r3, r4
 800094c:	4608      	mov	r0, r1
 800094e:	e70f      	b.n	8000770 <__udivmoddi4+0xd4>
 8000950:	3e02      	subs	r6, #2
 8000952:	4463      	add	r3, ip
 8000954:	e730      	b.n	80007b8 <__udivmoddi4+0x11c>
 8000956:	bf00      	nop

08000958 <__aeabi_idiv0>:
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop

0800095c <_Z14TrajectoryTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TrajectoryTask */
void TrajectoryTask(void *argument)
{
 800095c:	b508      	push	{r3, lr}
  for(;;)
  {
#ifdef USE_MOTION_GENERATOR
	  motion_generator.Spin();
#else
	  osDelay(1000);
 800095e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000962:	f00b fd7d 	bl	800c460 <osDelay>
  for(;;)
 8000966:	e7fa      	b.n	800095e <_Z14TrajectoryTaskPv+0x2>

08000968 <_Z17CommunicationTaskPv>:
{
  /* USER CODE BEGIN CommunicationTask */
  /* Infinite loop */
  for(;;)
  {
	  communication.Spin();
 8000968:	4c02      	ldr	r4, [pc, #8]	@ (8000974 <_Z17CommunicationTaskPv+0xc>)
{
 800096a:	b508      	push	{r3, lr}
	  communication.Spin();
 800096c:	4620      	mov	r0, r4
 800096e:	f00e ffad 	bl	800f8cc <_ZN13Communication4SpinEv>
  for(;;)
 8000972:	e7fb      	b.n	800096c <_Z17CommunicationTaskPv+0x4>
 8000974:	24001664 	.word	0x24001664

08000978 <_Z8LEDsTaskPv>:
  /* USER CODE BEGIN LEDsTask */
  /* Infinite loop */
  for(;;)
  {
#ifdef USE_LEDS
	  leds.Spin();
 8000978:	4c02      	ldr	r4, [pc, #8]	@ (8000984 <_Z8LEDsTaskPv+0xc>)
{
 800097a:	b508      	push	{r3, lr}
	  leds.Spin();
 800097c:	4620      	mov	r0, r4
 800097e:	f013 f8b6 	bl	8013aee <_ZN4LEDS4SpinEv>
  for(;;)
 8000982:	e7fb      	b.n	800097c <_Z8LEDsTaskPv+0x4>
 8000984:	24000148 	.word	0x24000148

08000988 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE5GetIDEPvPb>:
 * @param input pointer: the hardware interface handle pointer
 * @param output success: whether successful
 * @return the interface ID associated to the input handle
 */
template<typename H>
uint8_t TemplateCommunicationProtocol<H>::GetID(void* pointer, bool* success) {
 8000988:	b4f0      	push	{r4, r5, r6, r7}
 800098a:	e9d0 350e 	ldrd	r3, r5, [r0, #56]	@ 0x38
	uint8_t index = 0;
	for (H* interface : interfaces) {
 800098e:	2400      	movs	r4, #0
 8000990:	429d      	cmp	r5, r3
 8000992:	461e      	mov	r6, r3
 8000994:	d103      	bne.n	800099e <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE5GetIDEPvPb+0x16>
		if (interface == pointer)
			return GetIDFromIndex(index, success);
		index += 1;
	}
	*success = false;
 8000996:	2000      	movs	r0, #0
	return 0;
}
 8000998:	bcf0      	pop	{r4, r5, r6, r7}
	*success = false;
 800099a:	7010      	strb	r0, [r2, #0]
}
 800099c:	4770      	bx	lr
		if (interface == pointer)
 800099e:	6836      	ldr	r6, [r6, #0]
 80009a0:	3304      	adds	r3, #4
 80009a2:	1c67      	adds	r7, r4, #1
 80009a4:	428e      	cmp	r6, r1
 80009a6:	d103      	bne.n	80009b0 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE5GetIDEPvPb+0x28>
			return GetIDFromIndex(index, success);
 80009a8:	b2e1      	uxtb	r1, r4
}
 80009aa:	bcf0      	pop	{r4, r5, r6, r7}
			return GetIDFromIndex(index, success);
 80009ac:	f014 beeb 	b.w	8015786 <_ZN21CommunicationProtocol14GetIDFromIndexEhPb>
 80009b0:	463c      	mov	r4, r7
 80009b2:	e7ed      	b.n	8000990 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE5GetIDEPvPb+0x8>

080009b4 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE5GetIDEPvPb>:
uint8_t TemplateCommunicationProtocol<H>::GetID(void* pointer, bool* success) {
 80009b4:	b4f0      	push	{r4, r5, r6, r7}
 80009b6:	e9d0 350e 	ldrd	r3, r5, [r0, #56]	@ 0x38
	for (H* interface : interfaces) {
 80009ba:	2400      	movs	r4, #0
 80009bc:	429d      	cmp	r5, r3
 80009be:	461e      	mov	r6, r3
 80009c0:	d103      	bne.n	80009ca <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE5GetIDEPvPb+0x16>
	*success = false;
 80009c2:	2000      	movs	r0, #0
}
 80009c4:	bcf0      	pop	{r4, r5, r6, r7}
	*success = false;
 80009c6:	7010      	strb	r0, [r2, #0]
}
 80009c8:	4770      	bx	lr
		if (interface == pointer)
 80009ca:	6836      	ldr	r6, [r6, #0]
 80009cc:	3304      	adds	r3, #4
 80009ce:	1c67      	adds	r7, r4, #1
 80009d0:	428e      	cmp	r6, r1
 80009d2:	d103      	bne.n	80009dc <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE5GetIDEPvPb+0x28>
			return GetIDFromIndex(index, success);
 80009d4:	b2e1      	uxtb	r1, r4
}
 80009d6:	bcf0      	pop	{r4, r5, r6, r7}
			return GetIDFromIndex(index, success);
 80009d8:	f014 bed5 	b.w	8015786 <_ZN21CommunicationProtocol14GetIDFromIndexEhPb>
 80009dc:	463c      	mov	r4, r7
 80009de:	e7ed      	b.n	80009bc <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE5GetIDEPvPb+0x8>

080009e0 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>:
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80009e0:	0089      	lsls	r1, r1, #2
 80009e2:	f019 bee7 	b.w	801a7b4 <_ZdlPvj>

080009e6 <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>:
 80009e6:	0109      	lsls	r1, r1, #4
 80009e8:	f019 bee4 	b.w	801a7b4 <_ZdlPvj>

080009ec <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>:
      _GLIBCXX20_CONSTEXPR
      pointer
      _M_allocate(size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80009ec:	2800      	cmp	r0, #0
      _M_allocate(size_t __n)
 80009ee:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80009f0:	d006      	beq.n	8000a00 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0x14>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80009f2:	da01      	bge.n	80009f8 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0xc>
	    std::__throw_bad_alloc();
 80009f4:	f019 ffb2 	bl	801a95c <_ZSt17__throw_bad_allocv>
      }
 80009f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80009fc:	f019 beff 	b.w	801a7fe <_Znwj>
 8000a00:	bd08      	pop	{r3, pc}

08000a02 <_Z11SensorsTaskPv>:
void SensorsTask(void *argument)
 8000a02:	b508      	push	{r3, lr}
 8000a04:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a08:	f00b fd2a 	bl	800c460 <osDelay>
 8000a0c:	e7fa      	b.n	8000a04 <_Z11SensorsTaskPv+0x2>
	...

08000a10 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8000a10:	b513      	push	{r0, r1, r4, lr}
 8000a12:	4601      	mov	r1, r0
	uint8_t ID = communication.GetID((void*) huart, &success);
 8000a14:	f10d 0207 	add.w	r2, sp, #7
 8000a18:	480a      	ldr	r0, [pc, #40]	@ (8000a44 <HAL_UART_ErrorCallback+0x34>)
 8000a1a:	f00e fa65 	bl	800eee8 <_ZN13Communication5GetIDEPvPb>
	if (!success) {return;}
 8000a1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	uint8_t ID = communication.GetID((void*) huart, &success);
 8000a22:	4604      	mov	r4, r0
	if (!success) {return;}
 8000a24:	b15b      	cbz	r3, 8000a3e <HAL_UART_ErrorCallback+0x2e>
	uint16_t* buffer_index = communication.GetBufferIndex(ID, &success);
 8000a26:	4601      	mov	r1, r0
 8000a28:	f10d 0207 	add.w	r2, sp, #7
 8000a2c:	4805      	ldr	r0, [pc, #20]	@ (8000a44 <HAL_UART_ErrorCallback+0x34>)
 8000a2e:	f00e fa7a 	bl	800ef26 <_ZN13Communication14GetBufferIndexEhPb>
	*buffer_index = 0; // resets the buffer index to the DMA pointer
 8000a32:	2300      	movs	r3, #0
	communication.ActivateReception(ID);
 8000a34:	4621      	mov	r1, r4
	*buffer_index = 0; // resets the buffer index to the DMA pointer
 8000a36:	8003      	strh	r3, [r0, #0]
	communication.ActivateReception(ID);
 8000a38:	4802      	ldr	r0, [pc, #8]	@ (8000a44 <HAL_UART_ErrorCallback+0x34>)
 8000a3a:	f00e fa8f 	bl	800ef5c <_ZN13Communication17ActivateReceptionEh>
}
 8000a3e:	b002      	add	sp, #8
 8000a40:	bd10      	pop	{r4, pc}
 8000a42:	bf00      	nop
 8000a44:	24001664 	.word	0x24001664

08000a48 <HAL_FDCAN_ErrorCallback>:
void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan) {
 8000a48:	b507      	push	{r0, r1, r2, lr}
 8000a4a:	4601      	mov	r1, r0
	uint8_t ID = communication.GetID((void*) hfdcan, &success);
 8000a4c:	f10d 0207 	add.w	r2, sp, #7
 8000a50:	4806      	ldr	r0, [pc, #24]	@ (8000a6c <HAL_FDCAN_ErrorCallback+0x24>)
 8000a52:	f00e fa49 	bl	800eee8 <_ZN13Communication5GetIDEPvPb>
	if (!success) {return;}
 8000a56:	f89d 3007 	ldrb.w	r3, [sp, #7]
	uint8_t ID = communication.GetID((void*) hfdcan, &success);
 8000a5a:	4601      	mov	r1, r0
	if (!success) {return;}
 8000a5c:	b113      	cbz	r3, 8000a64 <HAL_FDCAN_ErrorCallback+0x1c>
	communication.ActivateReception(ID);
 8000a5e:	4803      	ldr	r0, [pc, #12]	@ (8000a6c <HAL_FDCAN_ErrorCallback+0x24>)
 8000a60:	f00e fa7c 	bl	800ef5c <_ZN13Communication17ActivateReceptionEh>
}
 8000a64:	b003      	add	sp, #12
 8000a66:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a6a:	bf00      	nop
 8000a6c:	24001664 	.word	0x24001664

08000a70 <_Z18SystemClock_Configv>:
{
 8000a70:	b510      	push	{r4, lr}
 8000a72:	b09e      	sub	sp, #120	@ 0x78
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a74:	224c      	movs	r2, #76	@ 0x4c
 8000a76:	2100      	movs	r1, #0
 8000a78:	a80b      	add	r0, sp, #44	@ 0x2c
 8000a7a:	f01a fa11 	bl	801aea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a7e:	2220      	movs	r2, #32
 8000a80:	2100      	movs	r1, #0
 8000a82:	a803      	add	r0, sp, #12
 8000a84:	f01a fa0c 	bl	801aea0 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a88:	2002      	movs	r0, #2
 8000a8a:	f006 f959 	bl	8006d40 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a8e:	2300      	movs	r3, #0
 8000a90:	9300      	str	r3, [sp, #0]
 8000a92:	4b3a      	ldr	r3, [pc, #232]	@ (8000b7c <_Z18SystemClock_Configv+0x10c>)
 8000a94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a96:	f022 0201 	bic.w	r2, r2, #1
 8000a9a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	9300      	str	r3, [sp, #0]
 8000aa4:	4b36      	ldr	r3, [pc, #216]	@ (8000b80 <_Z18SystemClock_Configv+0x110>)
 8000aa6:	699a      	ldr	r2, [r3, #24]
 8000aa8:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000aac:	619a      	str	r2, [r3, #24]
 8000aae:	699a      	ldr	r2, [r3, #24]
 8000ab0:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8000ab4:	9200      	str	r2, [sp, #0]
 8000ab6:	9a00      	ldr	r2, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ab8:	699a      	ldr	r2, [r3, #24]
 8000aba:	0492      	lsls	r2, r2, #18
 8000abc:	d5fc      	bpl.n	8000ab8 <_Z18SystemClock_Configv+0x48>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abe:	4a31      	ldr	r2, [pc, #196]	@ (8000b84 <_Z18SystemClock_Configv+0x114>)
 8000ac0:	f8d2 10f4 	ldr.w	r1, [r2, #244]	@ 0xf4
 8000ac4:	f041 0102 	orr.w	r1, r1, #2
 8000ac8:	f8c2 10f4 	str.w	r1, [r2, #244]	@ 0xf4
 8000acc:	f8d2 10f4 	ldr.w	r1, [r2, #244]	@ 0xf4
 8000ad0:	f001 0102 	and.w	r1, r1, #2
 8000ad4:	9101      	str	r1, [sp, #4]
 8000ad6:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ad8:	2100      	movs	r1, #0
 8000ada:	9102      	str	r1, [sp, #8]
 8000adc:	6999      	ldr	r1, [r3, #24]
 8000ade:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8000ae2:	6199      	str	r1, [r3, #24]
 8000ae4:	699b      	ldr	r3, [r3, #24]
 8000ae6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000aea:	9302      	str	r3, [sp, #8]
 8000aec:	4b23      	ldr	r3, [pc, #140]	@ (8000b7c <_Z18SystemClock_Configv+0x10c>)
 8000aee:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000af0:	f041 0101 	orr.w	r1, r1, #1
 8000af4:	62d9      	str	r1, [r3, #44]	@ 0x2c
 8000af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000af8:	4921      	ldr	r1, [pc, #132]	@ (8000b80 <_Z18SystemClock_Configv+0x110>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	9302      	str	r3, [sp, #8]
 8000b00:	9b02      	ldr	r3, [sp, #8]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b02:	698b      	ldr	r3, [r1, #24]
 8000b04:	049b      	lsls	r3, r3, #18
 8000b06:	d5fc      	bpl.n	8000b02 <_Z18SystemClock_Configv+0x92>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000b08:	6a93      	ldr	r3, [r2, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b0a:	2001      	movs	r0, #1
  RCC_OscInitStruct.PLL.PLLR = 4;
 8000b0c:	2404      	movs	r4, #4
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b0e:	f04f 0c0c 	mov.w	ip, #12
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000b12:	f023 0303 	bic.w	r3, r3, #3
 8000b16:	f043 0302 	orr.w	r3, r3, #2
 8000b1a:	6293      	str	r3, [r2, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b1c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000b20:	2250      	movs	r2, #80	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b22:	e9cd 030b 	strd	r0, r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b26:	2302      	movs	r3, #2
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b28:	a80b      	add	r0, sp, #44	@ 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b2a:	e9cd 3314 	strd	r3, r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000b2e:	9316      	str	r3, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b30:	e9cd 2317 	strd	r2, r3, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 8000b34:	2318      	movs	r3, #24
 8000b36:	e9cd 3419 	strd	r3, r4, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e9cd c31b 	strd	ip, r3, [sp, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b40:	931d      	str	r3, [sp, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b42:	f006 f927 	bl	8006d94 <HAL_RCC_OscConfig>
 8000b46:	b108      	cbz	r0, 8000b4c <_Z18SystemClock_Configv+0xdc>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b48:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <_Z18SystemClock_Configv+0xda>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b4c:	223f      	movs	r2, #63	@ 0x3f
 8000b4e:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b50:	2108      	movs	r1, #8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b52:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b54:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b56:	e9cd 2303 	strd	r2, r3, [sp, #12]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b5a:	2340      	movs	r3, #64	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b5c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b60:	e9cd 1306 	strd	r1, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b64:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b66:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b68:	e9cd 2309 	strd	r2, r3, [sp, #36]	@ 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b6c:	f006 fd46 	bl	80075fc <HAL_RCC_ClockConfig>
 8000b70:	b108      	cbz	r0, 8000b76 <_Z18SystemClock_Configv+0x106>
 8000b72:	b672      	cpsid	i
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <_Z18SystemClock_Configv+0x104>
}
 8000b76:	b01e      	add	sp, #120	@ 0x78
 8000b78:	bd10      	pop	{r4, pc}
 8000b7a:	bf00      	nop
 8000b7c:	58000400 	.word	0x58000400
 8000b80:	58024800 	.word	0x58024800
 8000b84:	58024400 	.word	0x58024400

08000b88 <_Z24PeriphCommonClock_Configv>:
{
 8000b88:	b500      	push	{lr}
 8000b8a:	b0b1      	sub	sp, #196	@ 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b8c:	22a0      	movs	r2, #160	@ 0xa0
 8000b8e:	2100      	movs	r1, #0
 8000b90:	a808      	add	r0, sp, #32
 8000b92:	f01a f985 	bl	801aea0 <memset>
  PeriphClkInitStruct.PLL2.PLL2M = 3;
 8000b96:	f44f 2308 	mov.w	r3, #557056	@ 0x88000
 8000b9a:	2203      	movs	r2, #3
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000b9c:	2119      	movs	r1, #25
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b9e:	a801      	add	r0, sp, #4
  PeriphClkInitStruct.PLL2.PLL2M = 3;
 8000ba0:	e9cd 3201 	strd	r3, r2, [sp, #4]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	e9cd 1303 	strd	r1, r3, [sp, #12]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000baa:	21c0      	movs	r1, #192	@ 0xc0
  PeriphClkInitStruct.PLL3.PLL3M = 2;
 8000bac:	930a      	str	r3, [sp, #40]	@ 0x28
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000bae:	9107      	str	r1, [sp, #28]
  PeriphClkInitStruct.PLL3.PLL3N = 40;
 8000bb0:	2128      	movs	r1, #40	@ 0x28
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000bb2:	e9cd 3305 	strd	r3, r3, [sp, #20]
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000bb6:	e9cd 130b 	strd	r1, r3, [sp, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3R = 3;
 8000bba:	e9cd 320d 	strd	r3, r2, [sp, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000bbe:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000bc2:	930f      	str	r3, [sp, #60]	@ 0x3c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8000bc4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000bc8:	931c      	str	r3, [sp, #112]	@ 0x70
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8000bca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bce:	9329      	str	r3, [sp, #164]	@ 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bd0:	f006 ffda 	bl	8007b88 <HAL_RCCEx_PeriphCLKConfig>
 8000bd4:	b108      	cbz	r0, 8000bda <_Z24PeriphCommonClock_Configv+0x52>
 8000bd6:	b672      	cpsid	i
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <_Z24PeriphCommonClock_Configv+0x50>
}
 8000bda:	b031      	add	sp, #196	@ 0xc4
 8000bdc:	f85d fb04 	ldr.w	pc, [sp], #4

08000be0 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM5) {
 8000be0:	6802      	ldr	r2, [r0, #0]
 8000be2:	4b09      	ldr	r3, [pc, #36]	@ (8000c08 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000be4:	429a      	cmp	r2, r3
{
 8000be6:	b510      	push	{r4, lr}
 8000be8:	4604      	mov	r4, r0
  if (htim->Instance == TIM5) {
 8000bea:	d101      	bne.n	8000bf0 <HAL_TIM_PeriodElapsedCallback+0x10>
    HAL_IncTick();
 8000bec:	f002 fc3a 	bl	8003464 <HAL_IncTick>
  if (hardware_delay.AssignedTimer(htim)) {
 8000bf0:	4621      	mov	r1, r4
 8000bf2:	4806      	ldr	r0, [pc, #24]	@ (8000c0c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000bf4:	f012 fe56 	bl	80138a4 <_ZN13HardwareDelay13AssignedTimerEP17TIM_HandleTypeDef>
 8000bf8:	b120      	cbz	r0, 8000c04 <HAL_TIM_PeriodElapsedCallback+0x24>
    hardware_delay.TriggeredDelay();
 8000bfa:	4804      	ldr	r0, [pc, #16]	@ (8000c0c <HAL_TIM_PeriodElapsedCallback+0x2c>)
}
 8000bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hardware_delay.TriggeredDelay();
 8000c00:	f012 bebf 	b.w	8013982 <_ZN13HardwareDelay14TriggeredDelayEv>
}
 8000c04:	bd10      	pop	{r4, pc}
 8000c06:	bf00      	nop
 8000c08:	40000c00 	.word	0x40000c00
 8000c0c:	240001ec 	.word	0x240001ec

08000c10 <Error_Handler>:
 8000c10:	b672      	cpsid	i
  while (1)
 8000c12:	e7fe      	b.n	8000c12 <Error_Handler+0x2>

08000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8000c14:	b510      	push	{r4, lr}
 8000c16:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8000c18:	6800      	ldr	r0, [r0, #0]
      _GLIBCXX20_CONSTEXPR
      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
 8000c1a:	b118      	cbz	r0, 8000c24 <_ZNSt12_Vector_baseIhSaIhEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8000c1c:	68a1      	ldr	r1, [r4, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8000c1e:	1a09      	subs	r1, r1, r0
 8000c20:	f019 fdc8 	bl	801a7b4 <_ZdlPvj>
      }
 8000c24:	4620      	mov	r0, r4
 8000c26:	bd10      	pop	{r4, pc}

08000c28 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>:
       *
       *  Whether the allocator is moved depends on the allocator traits.
       */
      _GLIBCXX20_CONSTEXPR
      vector&
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8000c28:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 8000c2a:	680d      	ldr	r5, [r1, #0]
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8000c2c:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 8000c2e:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 8000c30:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 8000c34:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 8000c36:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8000c38:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 8000c3a:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 8000c3c:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8000c3e:	688d      	ldr	r5, [r1, #8]
 8000c40:	6085      	str	r5, [r0, #8]
      }
 8000c42:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 8000c44:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 8000c46:	e9c1 3300 	strd	r3, r3, [r1]
 8000c4a:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 8000c4e:	f7ff ffe1 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	constexpr bool __move_storage =
	  _Alloc_traits::_S_propagate_on_move_assign()
	  || _Alloc_traits::_S_always_equal();
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
	return *this;
      }
 8000c52:	b005      	add	sp, #20
 8000c54:	bd30      	pop	{r4, r5, pc}

08000c56 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>:
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8000c56:	b510      	push	{r4, lr}
 8000c58:	4604      	mov	r4, r0
 8000c5a:	4610      	mov	r0, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000c5c:	e9d4 2300 	ldrd	r2, r3, [r4]
      {
	if (max_size() - size() < __n)
 8000c60:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000c64:	1a9b      	subs	r3, r3, r2
	if (max_size() - size() < __n)
 8000c66:	1ae2      	subs	r2, r4, r3
 8000c68:	428a      	cmp	r2, r1
 8000c6a:	d201      	bcs.n	8000c70 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x1a>
	  __throw_length_error(__N(__s));
 8000c6c:	f019 fe7c 	bl	801a968 <_ZSt20__throw_length_errorPKc>
 8000c70:	4299      	cmp	r1, r3
 8000c72:	bf38      	it	cc
 8000c74:	4619      	movcc	r1, r3
 8000c76:	185b      	adds	r3, r3, r1
 8000c78:	d204      	bcs.n	8000c84 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x2e>
 8000c7a:	42a3      	cmp	r3, r4
 8000c7c:	bf28      	it	cs
 8000c7e:	4623      	movcs	r3, r4
 8000c80:	4618      	mov	r0, r3

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
      }
 8000c82:	bd10      	pop	{r4, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8000c84:	4620      	mov	r0, r4
 8000c86:	e7fc      	b.n	8000c82 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x2c>

08000c88 <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 8000c88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000c8c:	e9d0 8a00 	ldrd	r8, sl, [r0]
 8000c90:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 8000c92:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000c96:	ebaa 0208 	sub.w	r2, sl, r8
 8000c9a:	4607      	mov	r7, r0
 8000c9c:	4689      	mov	r9, r1
	if (max_size() - size() < __n)
 8000c9e:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000ca2:	ea4f 04a2 	mov.w	r4, r2, asr #2
	if (max_size() - size() < __n)
 8000ca6:	d102      	bne.n	8000cae <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8000ca8:	481f      	ldr	r0, [pc, #124]	@ (8000d28 <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa0>)
 8000caa:	f019 fe5d 	bl	801a968 <_ZSt20__throw_length_errorPKc>
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8000cae:	45c2      	cmp	sl, r8
 8000cb0:	bf14      	ite	ne
 8000cb2:	4622      	movne	r2, r4
 8000cb4:	2201      	moveq	r2, #1
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8000cb6:	eba1 0508 	sub.w	r5, r1, r8
 8000cba:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8000cbc:	d22f      	bcs.n	8000d1e <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x96>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8000cbe:	b384      	cbz	r4, 8000d22 <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8000cc0:	429c      	cmp	r4, r3
 8000cc2:	bf28      	it	cs
 8000cc4:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8000cc6:	00a0      	lsls	r0, r4, #2
 8000cc8:	f019 fd99 	bl	801a7fe <_Znwj>
 8000ccc:	4606      	mov	r6, r0
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8000cce:	f8db 3000 	ldr.w	r3, [fp]
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result,
		   [[__maybe_unused__]] allocator<_Up>& __alloc) noexcept
    {
      ptrdiff_t __count = __last - __first;
      if (__count > 0)
 8000cd2:	2d00      	cmp	r5, #0
 8000cd4:	5173      	str	r3, [r6, r5]
 8000cd6:	dd04      	ble.n	8000ce2 <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x5a>
	      __gnu_cxx::__normal_iterator<_Tp*, void> __out(__result);
	      __out = std::__relocate_a_1(__first, __last, __out, __alloc);
	      return __out.base();
	    }
#endif
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8000cd8:	462a      	mov	r2, r5
 8000cda:	4641      	mov	r1, r8
 8000cdc:	4630      	mov	r0, r6
 8000cde:	f01a f8c5 	bl	801ae6c <memmove>
      ptrdiff_t __count = __last - __first;
 8000ce2:	ebaa 0a09 	sub.w	sl, sl, r9
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
 8000ce6:	3504      	adds	r5, #4
      if (__count > 0)
 8000ce8:	f1ba 0f00 	cmp.w	sl, #0
 8000cec:	4435      	add	r5, r6
 8000cee:	dd04      	ble.n	8000cfa <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x72>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8000cf0:	4652      	mov	r2, sl
 8000cf2:	4649      	mov	r1, r9
 8000cf4:	4628      	mov	r0, r5
 8000cf6:	f01a f9b1 	bl	801b05c <memcpy>
	}
      return __result + __count;
 8000cfa:	4455      	add	r5, sl
	if (__p)
 8000cfc:	f1b8 0f00 	cmp.w	r8, #0
 8000d00:	d006      	beq.n	8000d10 <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x88>
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
 8000d02:	68b9      	ldr	r1, [r7, #8]
 8000d04:	4640      	mov	r0, r8
 8000d06:	eba1 0108 	sub.w	r1, r1, r8
 8000d0a:	1089      	asrs	r1, r1, #2
 8000d0c:	f7ff fe68 	bl	80009e0 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
 8000d10:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8000d14:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8000d18:	60be      	str	r6, [r7, #8]
    }
 8000d1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8000d1e:	461c      	mov	r4, r3
 8000d20:	e7d1      	b.n	8000cc6 <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8000d22:	4626      	mov	r6, r4
 8000d24:	e7d3      	b.n	8000cce <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
 8000d26:	bf00      	nop
 8000d28:	0801b17a 	.word	0x0801b17a

08000d2c <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE12AddInterfaceEhPS0_>:
void TemplateCommunicationProtocol<H>::AddInterface(uint8_t ID, H* interface) {
 8000d2c:	b513      	push	{r0, r1, r4, lr}
 8000d2e:	4604      	mov	r4, r0
 8000d30:	9201      	str	r2, [sp, #4]
	AddInterfaceID(ID);
 8000d32:	f014 fcc3 	bl	80156bc <_ZN21CommunicationProtocol14AddInterfaceIDEh>
	AddInterfaceBuffer();
 8000d36:	4620      	mov	r0, r4
 8000d38:	f014 fe5a 	bl	80159f0 <_ZN21CommunicationProtocol18AddInterfaceBufferEv>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8000d3c:	e9d4 130f 	ldrd	r1, r3, [r4, #60]	@ 0x3c
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d005      	beq.n	8000d50 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE12AddInterfaceEhPS0_+0x24>
 8000d44:	9b01      	ldr	r3, [sp, #4]
 8000d46:	f841 3b04 	str.w	r3, [r1], #4
	    ++this->_M_impl._M_finish;
 8000d4a:	63e1      	str	r1, [r4, #60]	@ 0x3c
}
 8000d4c:	b002      	add	sp, #8
 8000d4e:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), __x);
 8000d50:	aa01      	add	r2, sp, #4
 8000d52:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8000d56:	f7ff ff97 	bl	8000c88 <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
 8000d5a:	e7f7      	b.n	8000d4c <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE12AddInterfaceEhPS0_+0x20>

08000d5c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
    struct __copy_move<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
	_GLIBCXX20_CONSTEXPR
	static _Tp*
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8000d5c:	b510      	push	{r4, lr}
					       is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::value, "type must be assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
 8000d5e:	1a0c      	subs	r4, r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8000d60:	4613      	mov	r3, r2
	  if (_Num)
 8000d62:	d005      	beq.n	8000d70 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x14>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8000d64:	4601      	mov	r1, r0
 8000d66:	4622      	mov	r2, r4
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f01a f87f 	bl	801ae6c <memmove>
 8000d6e:	4603      	mov	r3, r0
	  return __result + _Num;
	}
 8000d70:	1918      	adds	r0, r3, r4
 8000d72:	bd10      	pop	{r4, pc}

08000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>:
      vector(const vector& __x)
 8000d74:	b570      	push	{r4, r5, r6, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000d76:	e9d1 3600 	ldrd	r3, r6, [r1]
      vector(const vector& __x)
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	460d      	mov	r5, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000d7e:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000d80:	2300      	movs	r3, #0
 8000d82:	e9c0 3300 	strd	r3, r3, [r0]
 8000d86:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8000d88:	4630      	mov	r0, r6
 8000d8a:	f7ff fe2f 	bl	80009ec <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8000d8e:	4406      	add	r6, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8000d90:	4602      	mov	r2, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8000d92:	60a6      	str	r6, [r4, #8]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8000d94:	e9c4 0000 	strd	r0, r0, [r4]
      if (std::is_constant_evaluated())
	return std::__copy_move<_IsMove, false, _Category>::
	  __copy_m(__first, __last, __result);
#endif
      return std::__copy_move<_IsMove, __memcpyable<_OI, _II>::__value,
			      _Category>::__copy_m(__first, __last, __result);
 8000d98:	e9d5 0100 	ldrd	r0, r1, [r5]
 8000d9c:	f7ff ffde 	bl	8000d5c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	this->_M_impl._M_finish =
 8000da0:	6060      	str	r0, [r4, #4]
      }
 8000da2:	4620      	mov	r0, r4
 8000da4:	bd70      	pop	{r4, r5, r6, pc}
	...

08000da8 <HAL_FDCAN_RxFifo0Callback>:
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 8000da8:	07cb      	lsls	r3, r1, #31
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8000daa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000dae:	4604      	mov	r4, r0
 8000db0:	b0a3      	sub	sp, #140	@ 0x8c
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 8000db2:	d512      	bpl.n	8000dda <HAL_FDCAN_RxFifo0Callback+0x32>
	    HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData);
 8000db4:	ab12      	add	r3, sp, #72	@ 0x48
 8000db6:	aa08      	add	r2, sp, #32
 8000db8:	2140      	movs	r1, #64	@ 0x40
 8000dba:	f005 f807 	bl	8005dcc <HAL_FDCAN_GetRxMessage>
		ID = communication.GetID((void*) hfdcan, &success);
 8000dbe:	f10d 0207 	add.w	r2, sp, #7
 8000dc2:	4621      	mov	r1, r4
 8000dc4:	482c      	ldr	r0, [pc, #176]	@ (8000e78 <HAL_FDCAN_RxFifo0Callback+0xd0>)
 8000dc6:	f00e f88f 	bl	800eee8 <_ZN13Communication5GetIDEPvPb>
		if (!success) {communication.ActivateReception(ID); return;}
 8000dca:	f89d 3007 	ldrb.w	r3, [sp, #7]
		ID = communication.GetID((void*) hfdcan, &success);
 8000dce:	4606      	mov	r6, r0
		if (!success) {communication.ActivateReception(ID); return;}
 8000dd0:	b933      	cbnz	r3, 8000de0 <HAL_FDCAN_RxFifo0Callback+0x38>
 8000dd2:	4601      	mov	r1, r0
 8000dd4:	4828      	ldr	r0, [pc, #160]	@ (8000e78 <HAL_FDCAN_RxFifo0Callback+0xd0>)
 8000dd6:	f00e f8c1 	bl	800ef5c <_ZN13Communication17ActivateReceptionEh>
}
 8000dda:	b023      	add	sp, #140	@ 0x8c
 8000ddc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8000de0:	2040      	movs	r0, #64	@ 0x40
	    uint8_t target_address = (uint8_t) RxHeader.Identifier;
 8000de2:	f89d 8020 	ldrb.w	r8, [sp, #32]
 8000de6:	f7ff fe01 	bl	80009ec <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8000dea:	ab12      	add	r3, sp, #72	@ 0x48
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8000dec:	f100 0740 	add.w	r7, r0, #64	@ 0x40
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8000df0:	4605      	mov	r5, r0
 8000df2:	4604      	mov	r4, r0
 8000df4:	f10d 0c88 	add.w	ip, sp, #136	@ 0x88
 8000df8:	9002      	str	r0, [sp, #8]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8000dfa:	9704      	str	r7, [sp, #16]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	3408      	adds	r4, #8
 8000e00:	ca03      	ldmia	r2!, {r0, r1}
 8000e02:	4562      	cmp	r2, ip
 8000e04:	f844 0c08 	str.w	r0, [r4, #-8]
 8000e08:	f844 1c04 	str.w	r1, [r4, #-4]
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	d1f5      	bne.n	8000dfc <HAL_FDCAN_RxFifo0Callback+0x54>
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8000e10:	4a1a      	ldr	r2, [pc, #104]	@ (8000e7c <HAL_FDCAN_RxFifo0Callback+0xd4>)
 8000e12:	2101      	movs	r1, #1
 8000e14:	a802      	add	r0, sp, #8
	  this->_M_impl._M_finish =
 8000e16:	9703      	str	r7, [sp, #12]
 8000e18:	f7ff ff1d 	bl	8000c56 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8000e1c:	4681      	mov	r9, r0
      pointer __new_start(this->_M_allocate(__len));
 8000e1e:	f7ff fde5 	bl	80009ec <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8000e22:	462a      	mov	r2, r5
 8000e24:	4603      	mov	r3, r0
 8000e26:	4604      	mov	r4, r0
 8000e28:	f803 8b01 	strb.w	r8, [r3], #1
 8000e2c:	f852 1b04 	ldr.w	r1, [r2], #4
 8000e30:	42ba      	cmp	r2, r7
 8000e32:	f843 1b04 	str.w	r1, [r3], #4
 8000e36:	d1f9      	bne.n	8000e2c <HAL_FDCAN_RxFifo0Callback+0x84>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8000e38:	4628      	mov	r0, r5
 8000e3a:	2140      	movs	r1, #64	@ 0x40
 8000e3c:	f019 fcba 	bl	801a7b4 <_ZdlPvj>
      return __result + __count;
 8000e40:	f104 0341 	add.w	r3, r4, #65	@ 0x41
      this->_M_impl._M_start = __new_start;
 8000e44:	9402      	str	r4, [sp, #8]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8000e46:	444c      	add	r4, r9
		communication.Process(ID, received_data, &success);
 8000e48:	a902      	add	r1, sp, #8
 8000e4a:	a805      	add	r0, sp, #20
      this->_M_impl._M_finish = __new_finish;
 8000e4c:	9303      	str	r3, [sp, #12]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8000e4e:	9404      	str	r4, [sp, #16]
 8000e50:	f7ff ff90 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8000e54:	f10d 0307 	add.w	r3, sp, #7
 8000e58:	aa05      	add	r2, sp, #20
 8000e5a:	4631      	mov	r1, r6
 8000e5c:	4806      	ldr	r0, [pc, #24]	@ (8000e78 <HAL_FDCAN_RxFifo0Callback+0xd0>)
 8000e5e:	f012 fca1 	bl	80137a4 <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb>
      }
 8000e62:	a805      	add	r0, sp, #20
 8000e64:	f7ff fed6 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		communication.ActivateReception(ID);
 8000e68:	4631      	mov	r1, r6
 8000e6a:	4803      	ldr	r0, [pc, #12]	@ (8000e78 <HAL_FDCAN_RxFifo0Callback+0xd0>)
 8000e6c:	f00e f876 	bl	800ef5c <_ZN13Communication17ActivateReceptionEh>
 8000e70:	a802      	add	r0, sp, #8
 8000e72:	f7ff fecf 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8000e76:	e7b0      	b.n	8000dda <HAL_FDCAN_RxFifo0Callback+0x32>
 8000e78:	24001664 	.word	0x24001664
 8000e7c:	0801b17a 	.word	0x0801b17a

08000e80 <_ZNSt6vectorIhSaIhEEC1IN9__gnu_cxx17__normal_iteratorIPhS1_EEvEET_S7_RKS0_>:
	vector(_InputIterator __first, _InputIterator __last,
 8000e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000e82:	2300      	movs	r3, #0

      // Called by constructors to check initial size.
      static _GLIBCXX20_CONSTEXPR size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8000e84:	1a57      	subs	r7, r2, r1
	vector(_InputIterator __first, _InputIterator __last,
 8000e86:	4604      	mov	r4, r0
 8000e88:	460d      	mov	r5, r1
 8000e8a:	4616      	mov	r6, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000e8c:	6083      	str	r3, [r0, #8]
 8000e8e:	e9c0 3300 	strd	r3, r3, [r0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8000e92:	d502      	bpl.n	8000e9a <_ZNSt6vectorIhSaIhEEC1IN9__gnu_cxx17__normal_iteratorIPhS1_EEvEET_S7_RKS0_+0x1a>
	  __throw_length_error(
 8000e94:	4808      	ldr	r0, [pc, #32]	@ (8000eb8 <_ZNSt6vectorIhSaIhEEC1IN9__gnu_cxx17__normal_iteratorIPhS1_EEvEET_S7_RKS0_+0x38>)
 8000e96:	f019 fd67 	bl	801a968 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8000e9a:	4638      	mov	r0, r7
 8000e9c:	f7ff fda6 	bl	80009ec <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8000ea0:	4407      	add	r7, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	6020      	str	r0, [r4, #0]
			      _Category>::__copy_m(__first, __last, __result);
 8000ea6:	4631      	mov	r1, r6
 8000ea8:	4628      	mov	r0, r5
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8000eaa:	60a7      	str	r7, [r4, #8]
 8000eac:	f7ff ff56 	bl	8000d5c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	  this->_M_impl._M_finish =
 8000eb0:	6060      	str	r0, [r4, #4]
	}
 8000eb2:	4620      	mov	r0, r4
 8000eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	0801b194 	.word	0x0801b194

08000ebc <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>:
      vector(initializer_list<value_type> __l,
 8000ebc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000ebe:	ab02      	add	r3, sp, #8
 8000ec0:	4604      	mov	r4, r0
 8000ec2:	460e      	mov	r6, r1
      constexpr initializer_list() noexcept
      : _M_array(0), _M_len(0) { }

      // Number of elements.
      constexpr size_type
      size() const noexcept { return _M_len; }
 8000ec4:	4615      	mov	r5, r2
      constexpr const_iterator
      begin() const noexcept { return _M_array; }

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8000ec6:	188f      	adds	r7, r1, r2
 8000ec8:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000ecc:	2300      	movs	r3, #0
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8000ece:	429a      	cmp	r2, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000ed0:	6083      	str	r3, [r0, #8]
 8000ed2:	e9c0 3300 	strd	r3, r3, [r0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8000ed6:	da02      	bge.n	8000ede <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_+0x22>
	  __throw_length_error(
 8000ed8:	4808      	ldr	r0, [pc, #32]	@ (8000efc <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_+0x40>)
 8000eda:	f019 fd45 	bl	801a968 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8000ede:	4610      	mov	r0, r2
 8000ee0:	f7ff fd84 	bl	80009ec <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8000ee4:	4405      	add	r5, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	6020      	str	r0, [r4, #0]
 8000eea:	4639      	mov	r1, r7
 8000eec:	4630      	mov	r0, r6
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8000eee:	60a5      	str	r5, [r4, #8]
 8000ef0:	f7ff ff34 	bl	8000d5c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	  this->_M_impl._M_finish =
 8000ef4:	6060      	str	r0, [r4, #4]
      }
 8000ef6:	4620      	mov	r0, r4
 8000ef8:	b003      	add	sp, #12
 8000efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000efc:	0801b194 	.word	0x0801b194

08000f00 <main>:
{
 8000f00:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f04f 0814 	mov.w	r8, #20
{
 8000f08:	b0b7      	sub	sp, #220	@ 0xdc
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f0a:	4dd6      	ldr	r5, [pc, #856]	@ (8001264 <main+0x364>)
  HAL_Init();
 8000f0c:	f002 fa7c 	bl	8003408 <HAL_Init>
  SystemClock_Config();
 8000f10:	f7ff fdae 	bl	8000a70 <_Z18SystemClock_Configv>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2400      	movs	r4, #0
  PeriphCommonClock_Config();
 8000f16:	f7ff fe37 	bl	8000b88 <_Z24PeriphCommonClock_Configv>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1a:	4642      	mov	r2, r8
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	a82f      	add	r0, sp, #188	@ 0xbc
 8000f20:	f019 ffbe 	bl	801aea0 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f24:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  HAL_GPIO_WritePin(GPIOE, EN_CM4_Pin|nBT_CM4_Pin|nWL_CM4_Pin, GPIO_PIN_SET);
 8000f28:	2201      	movs	r2, #1
 8000f2a:	2134      	movs	r1, #52	@ 0x34
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f2c:	f043 0310 	orr.w	r3, r3, #16
  HAL_GPIO_WritePin(GPIOE, EN_CM4_Pin|nBT_CM4_Pin|nWL_CM4_Pin, GPIO_PIN_SET);
 8000f30:	48cd      	ldr	r0, [pc, #820]	@ (8001268 <main+0x368>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000f32:	2711      	movs	r7, #17
  GPIO_InitStruct.Pin = PG_CM4_Pin;
 8000f34:	f04f 0b08 	mov.w	fp, #8
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f38:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3c:	2601      	movs	r6, #1
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f3e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  GPIO_InitStruct.Pin = nRST_IMU_Pin;
 8000f42:	f04f 0a02 	mov.w	sl, #2
  GPIO_InitStruct.Pin = WAKE_4G_Pin;
 8000f46:	f04f 0910 	mov.w	r9, #16
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f4a:	f003 0310 	and.w	r3, r3, #16
 8000f4e:	9306      	str	r3, [sp, #24]
 8000f50:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f52:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000f56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f5a:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000f5e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f66:	9307      	str	r3, [sp, #28]
 8000f68:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000f6e:	f043 0301 	orr.w	r3, r3, #1
 8000f72:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000f76:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	9308      	str	r3, [sp, #32]
 8000f80:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f82:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000f86:	f043 0304 	orr.w	r3, r3, #4
 8000f8a:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000f8e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000f92:	f003 0304 	and.w	r3, r3, #4
 8000f96:	9309      	str	r3, [sp, #36]	@ 0x24
 8000f98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000f9e:	f043 0302 	orr.w	r3, r3, #2
 8000fa2:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000fa6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000faa:	f003 0302 	and.w	r3, r3, #2
 8000fae:	930a      	str	r3, [sp, #40]	@ 0x28
 8000fb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fb2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000fb6:	f043 0308 	orr.w	r3, r3, #8
 8000fba:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000fbe:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000fc2:	f003 0308 	and.w	r3, r3, #8
 8000fc6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000fc8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  HAL_GPIO_WritePin(GPIOE, EN_CM4_Pin|nBT_CM4_Pin|nWL_CM4_Pin, GPIO_PIN_SET);
 8000fca:	f005 fae3 	bl	8006594 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, STOP_CM4_Pin|LED_STATUS_Pin|LED_ACTIVITY_Pin|LED_FAULT_Pin
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f64f 0140 	movw	r1, #63552	@ 0xf840
 8000fd4:	48a4      	ldr	r0, [pc, #656]	@ (8001268 <main+0x368>)
 8000fd6:	f005 fadd 	bl	8006594 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(nRST_IMU_GPIO_Port, nRST_IMU_Pin, GPIO_PIN_SET);
 8000fda:	2201      	movs	r2, #1
 8000fdc:	2102      	movs	r1, #2
 8000fde:	48a3      	ldr	r0, [pc, #652]	@ (800126c <main+0x36c>)
 8000fe0:	f005 fad8 	bl	8006594 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(WDISABLE_4G_GPIO_Port, WDISABLE_4G_Pin, GPIO_PIN_SET);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	2120      	movs	r1, #32
 8000fe8:	48a1      	ldr	r0, [pc, #644]	@ (8001270 <main+0x370>)
 8000fea:	f005 fad3 	bl	8006594 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PERST_4G_GPIO_Port, PERST_4G_Pin, GPIO_PIN_SET);
 8000fee:	2201      	movs	r2, #1
 8000ff0:	2102      	movs	r1, #2
 8000ff2:	48a0      	ldr	r0, [pc, #640]	@ (8001274 <main+0x374>)
 8000ff4:	f005 face 	bl	8006594 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED_USER3_Pin|LED_UART_CM4_Pin, GPIO_PIN_RESET);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8000ffe:	489d      	ldr	r0, [pc, #628]	@ (8001274 <main+0x374>)
 8001000:	f005 fac8 	bl	8006594 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, SW_OUTPUT_Pin|SW_OVERWRITE_Pin|LED_UART_BACK_Pin|LED_FDCAN2_Pin
 8001004:	2200      	movs	r2, #0
 8001006:	f44f 614f 	mov.w	r1, #3312	@ 0xcf0
 800100a:	489b      	ldr	r0, [pc, #620]	@ (8001278 <main+0x378>)
 800100c:	f005 fac2 	bl	8006594 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001010:	2334      	movs	r3, #52	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001012:	a92f      	add	r1, sp, #188	@ 0xbc
 8001014:	4894      	ldr	r0, [pc, #592]	@ (8001268 <main+0x368>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001016:	e9cd 372f 	strd	r3, r7, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800101e:	f005 f9a9 	bl	8006374 <HAL_GPIO_Init>
  HAL_GPIO_Init(PG_CM4_GPIO_Port, &GPIO_InitStruct);
 8001022:	a92f      	add	r1, sp, #188	@ 0xbc
 8001024:	4890      	ldr	r0, [pc, #576]	@ (8001268 <main+0x368>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	9431      	str	r4, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001028:	e9cd b42f 	strd	fp, r4, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(PG_CM4_GPIO_Port, &GPIO_InitStruct);
 800102c:	f005 f9a2 	bl	8006374 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001030:	f64f 0340 	movw	r3, #63552	@ 0xf840
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001034:	a92f      	add	r1, sp, #188	@ 0xbc
 8001036:	488c      	ldr	r0, [pc, #560]	@ (8001268 <main+0x368>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001038:	e9cd 362f 	strd	r3, r6, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103c:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001040:	f005 f998 	bl	8006374 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DRDY_IMU_Pin|SD_PRESENCE_Pin;
 8001044:	f248 0301 	movw	r3, #32769	@ 0x8001
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001048:	a92f      	add	r1, sp, #188	@ 0xbc
 800104a:	4888      	ldr	r0, [pc, #544]	@ (800126c <main+0x36c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	9431      	str	r4, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800104e:	e9cd 342f 	strd	r3, r4, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001052:	f005 f98f 	bl	8006374 <HAL_GPIO_Init>
  HAL_GPIO_Init(nRST_IMU_GPIO_Port, &GPIO_InitStruct);
 8001056:	a92f      	add	r1, sp, #188	@ 0xbc
 8001058:	4884      	ldr	r0, [pc, #528]	@ (800126c <main+0x36c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800105a:	e9cd a72f 	strd	sl, r7, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  HAL_GPIO_Init(nRST_IMU_GPIO_Port, &GPIO_InitStruct);
 8001062:	f005 f987 	bl	8006374 <HAL_GPIO_Init>
  HAL_GPIO_Init(WAKE_4G_GPIO_Port, &GPIO_InitStruct);
 8001066:	a92f      	add	r1, sp, #188	@ 0xbc
 8001068:	4881      	ldr	r0, [pc, #516]	@ (8001270 <main+0x370>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800106a:	9631      	str	r6, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800106c:	e9cd 942f 	strd	r9, r4, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(WAKE_4G_GPIO_Port, &GPIO_InitStruct);
 8001070:	f005 f980 	bl	8006374 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = WDISABLE_4G_Pin;
 8001074:	2320      	movs	r3, #32
  HAL_GPIO_Init(WDISABLE_4G_GPIO_Port, &GPIO_InitStruct);
 8001076:	a92f      	add	r1, sp, #188	@ 0xbc
 8001078:	487d      	ldr	r0, [pc, #500]	@ (8001270 <main+0x370>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800107a:	e9cd 372f 	strd	r3, r7, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  HAL_GPIO_Init(WDISABLE_4G_GPIO_Port, &GPIO_InitStruct);
 8001082:	f005 f977 	bl	8006374 <HAL_GPIO_Init>
  HAL_GPIO_Init(PERST_4G_GPIO_Port, &GPIO_InitStruct);
 8001086:	a92f      	add	r1, sp, #188	@ 0xbc
 8001088:	487a      	ldr	r0, [pc, #488]	@ (8001274 <main+0x374>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800108a:	e9cd a72f 	strd	sl, r7, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108e:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001092:	f44f 1a88 	mov.w	sl, #1114112	@ 0x110000
  HAL_GPIO_Init(PERST_4G_GPIO_Port, &GPIO_InitStruct);
 8001096:	f005 f96d 	bl	8006374 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800109a:	2324      	movs	r3, #36	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109c:	a92f      	add	r1, sp, #188	@ 0xbc
 800109e:	4875      	ldr	r0, [pc, #468]	@ (8001274 <main+0x374>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	9431      	str	r4, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010a2:	e9cd 3a2f 	strd	r3, sl, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a6:	f005 f965 	bl	8006374 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_USER3_Pin|LED_UART_CM4_Pin;
 80010aa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ae:	a92f      	add	r1, sp, #188	@ 0xbc
 80010b0:	4870      	ldr	r0, [pc, #448]	@ (8001274 <main+0x374>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b2:	e9cd 362f 	strd	r3, r6, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ba:	f005 f95b 	bl	8006374 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SW_OUTPUT_Pin|SW_OVERWRITE_Pin|LED_UART_BACK_Pin|LED_FDCAN2_Pin
 80010be:	f44f 634f 	mov.w	r3, #3312	@ 0xcf0
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010c2:	a92f      	add	r1, sp, #188	@ 0xbc
 80010c4:	486c      	ldr	r0, [pc, #432]	@ (8001278 <main+0x378>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c6:	e9cd 362f 	strd	r3, r6, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ce:	f005 f951 	bl	8006374 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SW_INPUT_Pin;
 80010d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  HAL_GPIO_Init(SW_INPUT_GPIO_Port, &GPIO_InitStruct);
 80010d6:	a92f      	add	r1, sp, #188	@ 0xbc
 80010d8:	4867      	ldr	r0, [pc, #412]	@ (8001278 <main+0x378>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	9431      	str	r4, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010dc:	e9cd 342f 	strd	r3, r4, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(SW_INPUT_GPIO_Port, &GPIO_InitStruct);
 80010e0:	f005 f948 	bl	8006374 <HAL_GPIO_Init>
  HAL_GPIO_Init(LED_RS485_GPIO_Port, &GPIO_InitStruct);
 80010e4:	a92f      	add	r1, sp, #188	@ 0xbc
 80010e6:	4864      	ldr	r0, [pc, #400]	@ (8001278 <main+0x378>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	9431      	str	r4, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010ea:	e9cd ba2f 	strd	fp, sl, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(LED_RS485_GPIO_Port, &GPIO_InitStruct);
 80010ee:	f005 f941 	bl	8006374 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010f2:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80010f6:	4622      	mov	r2, r4
 80010f8:	2105      	movs	r1, #5
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010fa:	4333      	orrs	r3, r6
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80010fc:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010fe:	f8c5 30d8 	str.w	r3, [r5, #216]	@ 0xd8
 8001102:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
 8001106:	4033      	ands	r3, r6
 8001108:	9304      	str	r3, [sp, #16]
 800110a:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800110c:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
 8001110:	f043 0302 	orr.w	r3, r3, #2
 8001114:	f8c5 30d8 	str.w	r3, [r5, #216]	@ 0xd8
 8001118:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
  hadc1.Instance = ADC1;
 800111c:	4d57      	ldr	r5, [pc, #348]	@ (800127c <main+0x37c>)
  __HAL_RCC_DMA2_CLK_ENABLE();
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	9305      	str	r3, [sp, #20]
 8001124:	9b05      	ldr	r3, [sp, #20]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001126:	f002 ffb1 	bl	800408c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800112a:	200b      	movs	r0, #11
 800112c:	f002 ffbe 	bl	80040ac <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001130:	4622      	mov	r2, r4
 8001132:	2105      	movs	r1, #5
 8001134:	200c      	movs	r0, #12
 8001136:	f002 ffa9 	bl	800408c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800113a:	200c      	movs	r0, #12
 800113c:	f002 ffb6 	bl	80040ac <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001140:	4622      	mov	r2, r4
 8001142:	2105      	movs	r1, #5
 8001144:	200d      	movs	r0, #13
 8001146:	f002 ffa1 	bl	800408c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800114a:	200d      	movs	r0, #13
 800114c:	f002 ffae 	bl	80040ac <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001150:	4622      	mov	r2, r4
 8001152:	2105      	movs	r1, #5
 8001154:	200e      	movs	r0, #14
 8001156:	f002 ff99 	bl	800408c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800115a:	200e      	movs	r0, #14
 800115c:	f002 ffa6 	bl	80040ac <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8001160:	4622      	mov	r2, r4
 8001162:	2105      	movs	r1, #5
 8001164:	200f      	movs	r0, #15
 8001166:	f002 ff91 	bl	800408c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800116a:	200f      	movs	r0, #15
 800116c:	f002 ff9e 	bl	80040ac <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001170:	4622      	mov	r2, r4
 8001172:	2105      	movs	r1, #5
 8001174:	4648      	mov	r0, r9
 8001176:	f002 ff89 	bl	800408c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800117a:	4648      	mov	r0, r9
 800117c:	f002 ff96 	bl	80040ac <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001180:	4622      	mov	r2, r4
 8001182:	2105      	movs	r1, #5
 8001184:	4638      	mov	r0, r7
 8001186:	f002 ff81 	bl	800408c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800118a:	4638      	mov	r0, r7
 800118c:	f002 ff8e 	bl	80040ac <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8001190:	4622      	mov	r2, r4
 8001192:	2105      	movs	r1, #5
 8001194:	202f      	movs	r0, #47	@ 0x2f
 8001196:	f002 ff79 	bl	800408c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800119a:	202f      	movs	r0, #47	@ 0x2f
 800119c:	f002 ff86 	bl	80040ac <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80011a0:	4622      	mov	r2, r4
 80011a2:	2105      	movs	r1, #5
 80011a4:	2038      	movs	r0, #56	@ 0x38
 80011a6:	f002 ff71 	bl	800408c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011aa:	2038      	movs	r0, #56	@ 0x38
 80011ac:	f002 ff7e 	bl	80040ac <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80011b0:	4622      	mov	r2, r4
 80011b2:	2105      	movs	r1, #5
 80011b4:	2039      	movs	r0, #57	@ 0x39
 80011b6:	f002 ff69 	bl	800408c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80011ba:	2039      	movs	r0, #57	@ 0x39
 80011bc:	f002 ff76 	bl	80040ac <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80011c0:	4622      	mov	r2, r4
 80011c2:	2105      	movs	r1, #5
 80011c4:	203a      	movs	r0, #58	@ 0x3a
 80011c6:	f002 ff61 	bl	800408c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80011ca:	203a      	movs	r0, #58	@ 0x3a
 80011cc:	f002 ff6e 	bl	80040ac <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80011d0:	4622      	mov	r2, r4
 80011d2:	2105      	movs	r1, #5
 80011d4:	203b      	movs	r0, #59	@ 0x3b
 80011d6:	f002 ff59 	bl	800408c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80011da:	203b      	movs	r0, #59	@ 0x3b
 80011dc:	f002 ff66 	bl	80040ac <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 80011e0:	4622      	mov	r2, r4
 80011e2:	2105      	movs	r1, #5
 80011e4:	203c      	movs	r0, #60	@ 0x3c
 80011e6:	f002 ff51 	bl	800408c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80011ea:	203c      	movs	r0, #60	@ 0x3c
 80011ec:	f002 ff5e 	bl	80040ac <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 80011f0:	4622      	mov	r2, r4
 80011f2:	2105      	movs	r1, #5
 80011f4:	2044      	movs	r0, #68	@ 0x44
 80011f6:	f002 ff49 	bl	800408c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80011fa:	2044      	movs	r0, #68	@ 0x44
 80011fc:	f002 ff56 	bl	80040ac <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8001200:	4622      	mov	r2, r4
 8001202:	2105      	movs	r1, #5
 8001204:	2045      	movs	r0, #69	@ 0x45
 8001206:	f002 ff41 	bl	800408c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800120a:	2045      	movs	r0, #69	@ 0x45
 800120c:	f002 ff4e 	bl	80040ac <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8001210:	4622      	mov	r2, r4
 8001212:	2105      	movs	r1, #5
 8001214:	2046      	movs	r0, #70	@ 0x46
 8001216:	f002 ff39 	bl	800408c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800121a:	2046      	movs	r0, #70	@ 0x46
 800121c:	f002 ff46 	bl	80040ac <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 8001220:	4621      	mov	r1, r4
 8001222:	221c      	movs	r2, #28
 8001224:	a82f      	add	r0, sp, #188	@ 0xbc
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001226:	2704      	movs	r7, #4
  ADC_MultiModeTypeDef multimode = {0};
 8001228:	942d      	str	r4, [sp, #180]	@ 0xb4
 800122a:	e9cd 442b 	strd	r4, r4, [sp, #172]	@ 0xac
  ADC_ChannelConfTypeDef sConfig = {0};
 800122e:	f019 fe37 	bl	801aea0 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8001232:	4913      	ldr	r1, [pc, #76]	@ (8001280 <main+0x380>)
 8001234:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001238:	4628      	mov	r0, r5
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800123a:	612f      	str	r7, [r5, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800123c:	82ac      	strh	r4, [r5, #20]
  hadc1.Init.NbrOfConversion = 1;
 800123e:	61ae      	str	r6, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001240:	772c      	strb	r4, [r5, #28]
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001242:	636c      	str	r4, [r5, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001244:	f885 4038 	strb.w	r4, [r5, #56]	@ 0x38
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8001248:	e9c5 1300 	strd	r1, r3, [r5]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800124c:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001250:	e9c5 4409 	strd	r4, r4, [r5, #36]	@ 0x24
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001254:	e9c5 440b 	strd	r4, r4, [r5, #44]	@ 0x2c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001258:	f002 fc9e 	bl	8003b98 <HAL_ADC_Init>
 800125c:	b190      	cbz	r0, 8001284 <main+0x384>
 800125e:	b672      	cpsid	i
  while (1)
 8001260:	e7fe      	b.n	8001260 <main+0x360>
 8001262:	bf00      	nop
 8001264:	58024400 	.word	0x58024400
 8001268:	58021000 	.word	0x58021000
 800126c:	58020000 	.word	0x58020000
 8001270:	58020800 	.word	0x58020800
 8001274:	58020400 	.word	0x58020400
 8001278:	58020c00 	.word	0x58020c00
 800127c:	24002700 	.word	0x24002700
 8001280:	40022000 	.word	0x40022000
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001284:	902b      	str	r0, [sp, #172]	@ 0xac
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001286:	a92b      	add	r1, sp, #172	@ 0xac
 8001288:	4628      	mov	r0, r5
 800128a:	f002 fe05 	bl	8003e98 <HAL_ADCEx_MultiModeConfigChannel>
 800128e:	b108      	cbz	r0, 8001294 <main+0x394>
 8001290:	b672      	cpsid	i
  while (1)
 8001292:	e7fe      	b.n	8001292 <main+0x392>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001294:	4aa5      	ldr	r2, [pc, #660]	@ (800152c <main+0x62c>)
 8001296:	2306      	movs	r3, #6
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001298:	2403      	movs	r4, #3
  sConfig.OffsetSignedSaturation = DISABLE;
 800129a:	f88d 00d5 	strb.w	r0, [sp, #213]	@ 0xd5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800129e:	a92f      	add	r1, sp, #188	@ 0xbc
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012a0:	e9cd 232f 	strd	r2, r3, [sp, #188]	@ 0xbc
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012a4:	f240 73ff 	movw	r3, #2047	@ 0x7ff
  sConfig.Offset = 0;
 80012a8:	e9cd 7033 	strd	r7, r0, [sp, #204]	@ 0xcc
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ac:	4628      	mov	r0, r5
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012ae:	e9cd 4331 	strd	r4, r3, [sp, #196]	@ 0xc4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012b2:	f002 f931 	bl	8003518 <HAL_ADC_ConfigChannel>
 80012b6:	4602      	mov	r2, r0
 80012b8:	b108      	cbz	r0, 80012be <main+0x3be>
 80012ba:	b672      	cpsid	i
  while (1)
 80012bc:	e7fe      	b.n	80012bc <main+0x3bc>
  hfdcan1.Instance = FDCAN1;
 80012be:	489c      	ldr	r0, [pc, #624]	@ (8001530 <main+0x630>)
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 80012c0:	f04f 090a 	mov.w	r9, #10
  hfdcan1.Instance = FDCAN1;
 80012c4:	4b9b      	ldr	r3, [pc, #620]	@ (8001534 <main+0x634>)
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 80012c6:	2512      	movs	r5, #18
  hfdcan1.Init.NominalTimeSeg1 = 79;
 80012c8:	f04f 0b4f 	mov.w	fp, #79	@ 0x4f
  hfdcan1.Init.DataTimeSeg1 = 21;
 80012cc:	f04f 0a15 	mov.w	sl, #21
  hfdcan1.Instance = FDCAN1;
 80012d0:	6003      	str	r3, [r0, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80012d2:	f44f 7340 	mov.w	r3, #768	@ 0x300
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80012d6:	8202      	strh	r2, [r0, #16]
  hfdcan1.Init.ProtocolException = DISABLE;
 80012d8:	7482      	strb	r2, [r0, #18]
  hfdcan1.Init.ExtFiltersNbr = 0;
 80012da:	63c2      	str	r2, [r0, #60]	@ 0x3c
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_64;
 80012dc:	6685      	str	r5, [r0, #104]	@ 0x68
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80012de:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hfdcan1.Init.StdFiltersNbr = 0;
 80012e2:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80012e6:	e9c0 2712 	strd	r2, r7, [r0, #72]	@ 0x48
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80012ea:	e9c0 2714 	strd	r2, r7, [r0, #80]	@ 0x50
  hfdcan1.Init.TxBuffersNbr = 0;
 80012ee:	e9c0 2216 	strd	r2, r2, [r0, #88]	@ 0x58
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80012f2:	e9c0 9218 	strd	r9, r2, [r0, #96]	@ 0x60
  hfdcan1.Init.NominalSyncJumpWidth = 20;
 80012f6:	e9c0 6805 	strd	r6, r8, [r0, #20]
  hfdcan1.Init.NominalTimeSeg2 = 20;
 80012fa:	e9c0 b807 	strd	fp, r8, [r0, #28]
  hfdcan1.Init.DataSyncJumpWidth = 3;
 80012fe:	e9c0 6409 	strd	r6, r4, [r0, #36]	@ 0x24
  hfdcan1.Init.DataTimeSeg2 = 3;
 8001302:	e9c0 a40b 	strd	sl, r4, [r0, #44]	@ 0x2c
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 8001306:	e9c0 9510 	strd	r9, r5, [r0, #64]	@ 0x40
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800130a:	f004 fba5 	bl	8005a58 <HAL_FDCAN_Init>
 800130e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001312:	4602      	mov	r2, r0
 8001314:	b108      	cbz	r0, 800131a <main+0x41a>
 8001316:	b672      	cpsid	i
  while (1)
 8001318:	e7fe      	b.n	8001318 <main+0x418>
  hfdcan2.Instance = FDCAN2;
 800131a:	4887      	ldr	r0, [pc, #540]	@ (8001538 <main+0x638>)
 800131c:	4987      	ldr	r1, [pc, #540]	@ (800153c <main+0x63c>)
  hfdcan2.Init.AutoRetransmission = DISABLE;
 800131e:	8202      	strh	r2, [r0, #16]
  hfdcan2.Instance = FDCAN2;
 8001320:	6001      	str	r1, [r0, #0]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001322:	7482      	strb	r2, [r0, #18]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001324:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hfdcan2.Init.MessageRAMOffset = 360;
 8001328:	f44f 73b4 	mov.w	r3, #360	@ 0x168
  hfdcan2.Init.NominalSyncJumpWidth = 20;
 800132c:	e9c0 6805 	strd	r6, r8, [r0, #20]
  hfdcan2.Init.NominalTimeSeg2 = 20;
 8001330:	e9c0 b807 	strd	fp, r8, [r0, #28]
  hfdcan2.Init.DataSyncJumpWidth = 3;
 8001334:	e9c0 6409 	strd	r6, r4, [r0, #36]	@ 0x24
  hfdcan2.Init.DataTimeSeg2 = 3;
 8001338:	e9c0 a40b 	strd	sl, r4, [r0, #44]	@ 0x2c
  hfdcan2.Init.StdFiltersNbr = 0;
 800133c:	e9c0 320d 	strd	r3, r2, [r0, #52]	@ 0x34
  hfdcan2.Init.RxFifo0ElmtsNbr = 10;
 8001340:	e9c0 290f 	strd	r2, r9, [r0, #60]	@ 0x3c
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8001344:	e9c0 5211 	strd	r5, r2, [r0, #68]	@ 0x44
  hfdcan2.Init.RxBuffersNbr = 0;
 8001348:	e9c0 7213 	strd	r7, r2, [r0, #76]	@ 0x4c
  hfdcan2.Init.TxEventsNbr = 0;
 800134c:	e9c0 7215 	strd	r7, r2, [r0, #84]	@ 0x54
  hfdcan2.Init.TxFifoQueueElmtsNbr = 10;
 8001350:	e9c0 2917 	strd	r2, r9, [r0, #92]	@ 0x5c
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_64;
 8001354:	e9c0 2519 	strd	r2, r5, [r0, #100]	@ 0x64
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001358:	f004 fb7e 	bl	8005a58 <HAL_FDCAN_Init>
 800135c:	b108      	cbz	r0, 8001362 <main+0x462>
 800135e:	b672      	cpsid	i
  while (1)
 8001360:	e7fe      	b.n	8001360 <main+0x460>
  hi2c1.Instance = I2C1;
 8001362:	4c77      	ldr	r4, [pc, #476]	@ (8001540 <main+0x640>)
  hi2c1.Init.Timing = 0x307075B1;
 8001364:	4b77      	ldr	r3, [pc, #476]	@ (8001544 <main+0x644>)
 8001366:	4d78      	ldr	r5, [pc, #480]	@ (8001548 <main+0x648>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001368:	6220      	str	r0, [r4, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800136a:	e9c4 0602 	strd	r0, r6, [r4, #8]
  hi2c1.Init.OwnAddress2 = 0;
 800136e:	e9c4 0004 	strd	r0, r0, [r4, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001372:	e9c4 0006 	strd	r0, r0, [r4, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001376:	4620      	mov	r0, r4
  hi2c1.Init.Timing = 0x307075B1;
 8001378:	e9c4 3500 	strd	r3, r5, [r4]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800137c:	f005 fa94 	bl	80068a8 <HAL_I2C_Init>
 8001380:	4601      	mov	r1, r0
 8001382:	b108      	cbz	r0, 8001388 <main+0x488>
 8001384:	b672      	cpsid	i
  while (1)
 8001386:	e7fe      	b.n	8001386 <main+0x486>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001388:	4620      	mov	r0, r4
 800138a:	f005 fc7f 	bl	8006c8c <HAL_I2CEx_ConfigAnalogFilter>
 800138e:	4601      	mov	r1, r0
 8001390:	b108      	cbz	r0, 8001396 <main+0x496>
 8001392:	b672      	cpsid	i
  while (1)
 8001394:	e7fe      	b.n	8001394 <main+0x494>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001396:	4620      	mov	r0, r4
 8001398:	f005 fca6 	bl	8006ce8 <HAL_I2CEx_ConfigDigitalFilter>
 800139c:	b108      	cbz	r0, 80013a2 <main+0x4a2>
 800139e:	b672      	cpsid	i
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <main+0x4a0>
  hi2c4.Instance = I2C4;
 80013a2:	4c6a      	ldr	r4, [pc, #424]	@ (800154c <main+0x64c>)
 80013a4:	4b6a      	ldr	r3, [pc, #424]	@ (8001550 <main+0x650>)
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013a6:	6220      	str	r0, [r4, #32]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013a8:	e9c4 0602 	strd	r0, r6, [r4, #8]
  hi2c4.Init.OwnAddress2 = 0;
 80013ac:	e9c4 0004 	strd	r0, r0, [r4, #16]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013b0:	e9c4 0006 	strd	r0, r0, [r4, #24]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80013b4:	4620      	mov	r0, r4
  hi2c4.Init.Timing = 0x307075B1;
 80013b6:	e9c4 3500 	strd	r3, r5, [r4]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80013ba:	f005 fa75 	bl	80068a8 <HAL_I2C_Init>
 80013be:	4601      	mov	r1, r0
 80013c0:	b108      	cbz	r0, 80013c6 <main+0x4c6>
 80013c2:	b672      	cpsid	i
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <main+0x4c4>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013c6:	4620      	mov	r0, r4
 80013c8:	f005 fc60 	bl	8006c8c <HAL_I2CEx_ConfigAnalogFilter>
 80013cc:	b108      	cbz	r0, 80013d2 <main+0x4d2>
 80013ce:	b672      	cpsid	i
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <main+0x4d0>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80013d2:	2100      	movs	r1, #0
 80013d4:	485d      	ldr	r0, [pc, #372]	@ (800154c <main+0x64c>)
 80013d6:	f005 fc87 	bl	8006ce8 <HAL_I2CEx_ConfigDigitalFilter>
 80013da:	b108      	cbz	r0, 80013e0 <main+0x4e0>
 80013dc:	b672      	cpsid	i
  while (1)
 80013de:	e7fe      	b.n	80013de <main+0x4de>
  huart1.Instance = USART1;
 80013e0:	4c5c      	ldr	r4, [pc, #368]	@ (8001554 <main+0x654>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013e2:	250c      	movs	r5, #12
  huart1.Init.BaudRate = 115200;
 80013e4:	4b5c      	ldr	r3, [pc, #368]	@ (8001558 <main+0x658>)
 80013e6:	f44f 36e1 	mov.w	r6, #115200	@ 0x1c200
  huart1.Init.Parity = UART_PARITY_NONE;
 80013ea:	6120      	str	r0, [r4, #16]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013ec:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013f0:	e9c4 5005 	strd	r5, r0, [r4, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013f4:	e9c4 0007 	strd	r0, r0, [r4, #28]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013f8:	e9c4 0009 	strd	r0, r0, [r4, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013fc:	4620      	mov	r0, r4
  huart1.Init.BaudRate = 115200;
 80013fe:	e9c4 3600 	strd	r3, r6, [r4]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001402:	f00a faa2 	bl	800b94a <HAL_UART_Init>
 8001406:	4601      	mov	r1, r0
 8001408:	b108      	cbz	r0, 800140e <main+0x50e>
 800140a:	b672      	cpsid	i
  while (1)
 800140c:	e7fe      	b.n	800140c <main+0x50c>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800140e:	4620      	mov	r0, r4
 8001410:	f00a fbb4 	bl	800bb7c <HAL_UARTEx_SetTxFifoThreshold>
 8001414:	4601      	mov	r1, r0
 8001416:	b108      	cbz	r0, 800141c <main+0x51c>
 8001418:	b672      	cpsid	i
  while (1)
 800141a:	e7fe      	b.n	800141a <main+0x51a>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800141c:	4620      	mov	r0, r4
 800141e:	f00a fbd2 	bl	800bbc6 <HAL_UARTEx_SetRxFifoThreshold>
 8001422:	b108      	cbz	r0, 8001428 <main+0x528>
 8001424:	b672      	cpsid	i
  while (1)
 8001426:	e7fe      	b.n	8001426 <main+0x526>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001428:	4620      	mov	r0, r4
 800142a:	f00a fb88 	bl	800bb3e <HAL_UARTEx_DisableFifoMode>
 800142e:	b108      	cbz	r0, 8001434 <main+0x534>
 8001430:	b672      	cpsid	i
  while (1)
 8001432:	e7fe      	b.n	8001432 <main+0x532>
  huart2.Instance = USART2;
 8001434:	4c49      	ldr	r4, [pc, #292]	@ (800155c <main+0x65c>)
 8001436:	4b4a      	ldr	r3, [pc, #296]	@ (8001560 <main+0x660>)
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001438:	62a0      	str	r0, [r4, #40]	@ 0x28
  huart2.Init.StopBits = UART_STOPBITS_1;
 800143a:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800143e:	e9c4 0504 	strd	r0, r5, [r4, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001442:	e9c4 0006 	strd	r0, r0, [r4, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001446:	e9c4 0008 	strd	r0, r0, [r4, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800144a:	4620      	mov	r0, r4
  huart2.Init.BaudRate = 115200;
 800144c:	e9c4 3600 	strd	r3, r6, [r4]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001450:	f00a fa7b 	bl	800b94a <HAL_UART_Init>
 8001454:	4601      	mov	r1, r0
 8001456:	b108      	cbz	r0, 800145c <main+0x55c>
 8001458:	b672      	cpsid	i
  while (1)
 800145a:	e7fe      	b.n	800145a <main+0x55a>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800145c:	4620      	mov	r0, r4
 800145e:	f00a fb8d 	bl	800bb7c <HAL_UARTEx_SetTxFifoThreshold>
 8001462:	4601      	mov	r1, r0
 8001464:	b108      	cbz	r0, 800146a <main+0x56a>
 8001466:	b672      	cpsid	i
  while (1)
 8001468:	e7fe      	b.n	8001468 <main+0x568>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800146a:	4620      	mov	r0, r4
 800146c:	f00a fbab 	bl	800bbc6 <HAL_UARTEx_SetRxFifoThreshold>
 8001470:	b108      	cbz	r0, 8001476 <main+0x576>
 8001472:	b672      	cpsid	i
  while (1)
 8001474:	e7fe      	b.n	8001474 <main+0x574>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001476:	4620      	mov	r0, r4
 8001478:	f00a fb61 	bl	800bb3e <HAL_UARTEx_DisableFifoMode>
 800147c:	4603      	mov	r3, r0
 800147e:	b108      	cbz	r0, 8001484 <main+0x584>
 8001480:	b672      	cpsid	i
  while (1)
 8001482:	e7fe      	b.n	8001482 <main+0x582>
  huart3.Instance = USART3;
 8001484:	4837      	ldr	r0, [pc, #220]	@ (8001564 <main+0x664>)
  if (HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8001486:	4619      	mov	r1, r3
  huart3.Instance = USART3;
 8001488:	4a37      	ldr	r2, [pc, #220]	@ (8001568 <main+0x668>)
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800148a:	6283      	str	r3, [r0, #40]	@ 0x28
  huart3.Init.BaudRate = 115200;
 800148c:	e9c0 2600 	strd	r2, r6, [r0]
  if (HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8001490:	461a      	mov	r2, r3
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001492:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001496:	e9c0 3504 	strd	r3, r5, [r0, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800149a:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800149e:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80014a2:	f00a fb05 	bl	800bab0 <HAL_RS485Ex_Init>
 80014a6:	b108      	cbz	r0, 80014ac <main+0x5ac>
 80014a8:	b672      	cpsid	i
  while (1)
 80014aa:	e7fe      	b.n	80014aa <main+0x5aa>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014ac:	2100      	movs	r1, #0
 80014ae:	482d      	ldr	r0, [pc, #180]	@ (8001564 <main+0x664>)
 80014b0:	f00a fb64 	bl	800bb7c <HAL_UARTEx_SetTxFifoThreshold>
 80014b4:	4601      	mov	r1, r0
 80014b6:	b108      	cbz	r0, 80014bc <main+0x5bc>
 80014b8:	b672      	cpsid	i
  while (1)
 80014ba:	e7fe      	b.n	80014ba <main+0x5ba>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014bc:	4829      	ldr	r0, [pc, #164]	@ (8001564 <main+0x664>)
 80014be:	f00a fb82 	bl	800bbc6 <HAL_UARTEx_SetRxFifoThreshold>
 80014c2:	b108      	cbz	r0, 80014c8 <main+0x5c8>
 80014c4:	b672      	cpsid	i
  while (1)
 80014c6:	e7fe      	b.n	80014c6 <main+0x5c6>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80014c8:	4826      	ldr	r0, [pc, #152]	@ (8001564 <main+0x664>)
 80014ca:	f00a fb38 	bl	800bb3e <HAL_UARTEx_DisableFifoMode>
 80014ce:	b108      	cbz	r0, 80014d4 <main+0x5d4>
 80014d0:	b672      	cpsid	i
  while (1)
 80014d2:	e7fe      	b.n	80014d2 <main+0x5d2>
  huart6.Instance = USART6;
 80014d4:	4c25      	ldr	r4, [pc, #148]	@ (800156c <main+0x66c>)
  huart6.Init.BaudRate = 115200;
 80014d6:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80014da:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8001570 <main+0x670>
  huart6.Init.Parity = UART_PARITY_NONE;
 80014de:	6120      	str	r0, [r4, #16]
  huart6.Init.BaudRate = 115200;
 80014e0:	e9c4 a300 	strd	sl, r3, [r4]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80014e4:	230c      	movs	r3, #12
  huart6.Init.StopBits = UART_STOPBITS_1;
 80014e6:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ea:	e9c4 3005 	strd	r3, r0, [r4, #20]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ee:	e9c4 0007 	strd	r0, r0, [r4, #28]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014f2:	e9c4 0009 	strd	r0, r0, [r4, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80014f6:	4620      	mov	r0, r4
 80014f8:	f00a fa27 	bl	800b94a <HAL_UART_Init>
 80014fc:	4601      	mov	r1, r0
 80014fe:	b108      	cbz	r0, 8001504 <main+0x604>
 8001500:	b672      	cpsid	i
  while (1)
 8001502:	e7fe      	b.n	8001502 <main+0x602>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001504:	4620      	mov	r0, r4
 8001506:	f00a fb39 	bl	800bb7c <HAL_UARTEx_SetTxFifoThreshold>
 800150a:	4601      	mov	r1, r0
 800150c:	b108      	cbz	r0, 8001512 <main+0x612>
 800150e:	b672      	cpsid	i
  while (1)
 8001510:	e7fe      	b.n	8001510 <main+0x610>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001512:	4620      	mov	r0, r4
 8001514:	f00a fb57 	bl	800bbc6 <HAL_UARTEx_SetRxFifoThreshold>
 8001518:	b108      	cbz	r0, 800151e <main+0x61e>
 800151a:	b672      	cpsid	i
  while (1)
 800151c:	e7fe      	b.n	800151c <main+0x61c>
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 800151e:	4620      	mov	r0, r4
 8001520:	f00a fb0d 	bl	800bb3e <HAL_UARTEx_DisableFifoMode>
 8001524:	4604      	mov	r4, r0
 8001526:	b328      	cbz	r0, 8001574 <main+0x674>
 8001528:	b672      	cpsid	i
  while (1)
 800152a:	e7fe      	b.n	800152a <main+0x62a>
 800152c:	4b840000 	.word	0x4b840000
 8001530:	240025fc 	.word	0x240025fc
 8001534:	4000a000 	.word	0x4000a000
 8001538:	2400255c 	.word	0x2400255c
 800153c:	4000a400 	.word	0x4000a400
 8001540:	24002510 	.word	0x24002510
 8001544:	40005400 	.word	0x40005400
 8001548:	307075b1 	.word	0x307075b1
 800154c:	240024c4 	.word	0x240024c4
 8001550:	58001c00 	.word	0x58001c00
 8001554:	24002080 	.word	0x24002080
 8001558:	40011000 	.word	0x40011000
 800155c:	24001ff0 	.word	0x24001ff0
 8001560:	40004400 	.word	0x40004400
 8001564:	24001f60 	.word	0x24001f60
 8001568:	40004800 	.word	0x40004800
 800156c:	24001ed0 	.word	0x24001ed0
 8001570:	40011400 	.word	0x40011400
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001574:	4601      	mov	r1, r0
 8001576:	2210      	movs	r2, #16
 8001578:	a82f      	add	r0, sp, #188	@ 0xbc
  htim4.Instance = TIM4;
 800157a:	4da5      	ldr	r5, [pc, #660]	@ (8001810 <main+0x910>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800157c:	f019 fc90 	bl	801aea0 <memset>
  htim4.Init.Prescaler = 60000;
 8001580:	f8df 92c0 	ldr.w	r9, [pc, #704]	@ 8001844 <main+0x944>
 8001584:	f64e 2360 	movw	r3, #60000	@ 0xea60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001588:	ae2b      	add	r6, sp, #172	@ 0xac
 800158a:	942b      	str	r4, [sp, #172]	@ 0xac
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800158c:	4628      	mov	r0, r5
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158e:	60ac      	str	r4, [r5, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001590:	61ac      	str	r4, [r5, #24]
  htim4.Init.Prescaler = 60000;
 8001592:	e9c5 9300 	strd	r9, r3, [r5]
  htim4.Init.Period = 65535;
 8001596:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800159a:	e9c6 4401 	strd	r4, r4, [r6, #4]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800159e:	e9c5 3403 	strd	r3, r4, [r5, #12]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80015a2:	f008 ff87 	bl	800a4b4 <HAL_TIM_Base_Init>
 80015a6:	b108      	cbz	r0, 80015ac <main+0x6ac>
 80015a8:	b672      	cpsid	i
  while (1)
 80015aa:	e7fe      	b.n	80015aa <main+0x6aa>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80015b0:	a92f      	add	r1, sp, #188	@ 0xbc
 80015b2:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015b4:	932f      	str	r3, [sp, #188]	@ 0xbc
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80015b6:	f009 f8d1 	bl	800a75c <HAL_TIM_ConfigClockSource>
 80015ba:	b108      	cbz	r0, 80015c0 <main+0x6c0>
 80015bc:	b672      	cpsid	i
  while (1)
 80015be:	e7fe      	b.n	80015be <main+0x6be>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c0:	902b      	str	r0, [sp, #172]	@ 0xac
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015c2:	4631      	mov	r1, r6
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015c4:	902d      	str	r0, [sp, #180]	@ 0xb4
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015c6:	4628      	mov	r0, r5
 80015c8:	f009 fa2c 	bl	800aa24 <HAL_TIMEx_MasterConfigSynchronization>
 80015cc:	b108      	cbz	r0, 80015d2 <main+0x6d2>
 80015ce:	b672      	cpsid	i
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <main+0x6d0>
  ADC_ChannelConfTypeDef sConfig = {0};
 80015d2:	221c      	movs	r2, #28
 80015d4:	2100      	movs	r1, #0
 80015d6:	a82f      	add	r0, sp, #188	@ 0xbc
  hadc3.Instance = ADC3;
 80015d8:	4c8e      	ldr	r4, [pc, #568]	@ (8001814 <main+0x914>)
  ADC_ChannelConfTypeDef sConfig = {0};
 80015da:	f019 fc61 	bl	801aea0 <memset>
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 80015de:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80015e2:	f8df e264 	ldr.w	lr, [pc, #612]	@ 8001848 <main+0x948>
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015e6:	f04f 0808 	mov.w	r8, #8
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015ea:	2504      	movs	r5, #4
  hadc3.Init.NbrOfConversion = 1;
 80015ec:	2201      	movs	r2, #1
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80015ee:	4620      	mov	r0, r4
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015f0:	6125      	str	r5, [r4, #16]
  hadc3.Init.NbrOfConversion = 1;
 80015f2:	61a2      	str	r2, [r4, #24]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 80015f4:	e9c4 e300 	strd	lr, r3, [r4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	e9c4 8302 	strd	r8, r3, [r4, #8]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80015fe:	82a3      	strh	r3, [r4, #20]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001600:	7723      	strb	r3, [r4, #28]
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001602:	6363      	str	r3, [r4, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001604:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001608:	e9c4 3309 	strd	r3, r3, [r4, #36]	@ 0x24
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800160c:	e9c4 330b 	strd	r3, r3, [r4, #44]	@ 0x2c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001610:	f002 fac2 	bl	8003b98 <HAL_ADC_Init>
 8001614:	b108      	cbz	r0, 800161a <main+0x71a>
 8001616:	b672      	cpsid	i
  while (1)
 8001618:	e7fe      	b.n	8001618 <main+0x718>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800161a:	2306      	movs	r3, #6
 800161c:	4f7e      	ldr	r7, [pc, #504]	@ (8001818 <main+0x918>)
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800161e:	f04f 0c03 	mov.w	ip, #3
  sConfig.OffsetSignedSaturation = DISABLE;
 8001622:	f88d 00d5 	strb.w	r0, [sp, #213]	@ 0xd5
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001626:	a92f      	add	r1, sp, #188	@ 0xbc
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001628:	e9cd 732f 	strd	r7, r3, [sp, #188]	@ 0xbc
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800162c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
  sConfig.Offset = 0;
 8001630:	e9cd 5033 	strd	r5, r0, [sp, #204]	@ 0xcc
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001634:	4620      	mov	r0, r4
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001636:	e9cd c331 	strd	ip, r3, [sp, #196]	@ 0xc4
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800163a:	f001 ff6d 	bl	8003518 <HAL_ADC_ConfigChannel>
 800163e:	b108      	cbz	r0, 8001644 <main+0x744>
 8001640:	b672      	cpsid	i
  while (1)
 8001642:	e7fe      	b.n	8001642 <main+0x742>
  huart4.Instance = UART4;
 8001644:	4c75      	ldr	r4, [pc, #468]	@ (800181c <main+0x91c>)
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001646:	250c      	movs	r5, #12
  huart4.Init.BaudRate = 115200;
 8001648:	4b75      	ldr	r3, [pc, #468]	@ (8001820 <main+0x920>)
 800164a:	f44f 37e1 	mov.w	r7, #115200	@ 0x1c200
  huart4.Init.Parity = UART_PARITY_NONE;
 800164e:	6120      	str	r0, [r4, #16]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001650:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001654:	e9c4 5005 	strd	r5, r0, [r4, #20]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001658:	e9c4 0007 	strd	r0, r0, [r4, #28]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800165c:	e9c4 0009 	strd	r0, r0, [r4, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001660:	4620      	mov	r0, r4
  huart4.Init.BaudRate = 115200;
 8001662:	e9c4 3700 	strd	r3, r7, [r4]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001666:	f00a f970 	bl	800b94a <HAL_UART_Init>
 800166a:	4601      	mov	r1, r0
 800166c:	b108      	cbz	r0, 8001672 <main+0x772>
 800166e:	b672      	cpsid	i
  while (1)
 8001670:	e7fe      	b.n	8001670 <main+0x770>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001672:	4620      	mov	r0, r4
 8001674:	f00a fa82 	bl	800bb7c <HAL_UARTEx_SetTxFifoThreshold>
 8001678:	4601      	mov	r1, r0
 800167a:	b108      	cbz	r0, 8001680 <main+0x780>
 800167c:	b672      	cpsid	i
  while (1)
 800167e:	e7fe      	b.n	800167e <main+0x77e>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001680:	4620      	mov	r0, r4
 8001682:	f00a faa0 	bl	800bbc6 <HAL_UARTEx_SetRxFifoThreshold>
 8001686:	b108      	cbz	r0, 800168c <main+0x78c>
 8001688:	b672      	cpsid	i
  while (1)
 800168a:	e7fe      	b.n	800168a <main+0x78a>
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800168c:	4620      	mov	r0, r4
 800168e:	f00a fa56 	bl	800bb3e <HAL_UARTEx_DisableFifoMode>
 8001692:	b108      	cbz	r0, 8001698 <main+0x798>
 8001694:	b672      	cpsid	i
  while (1)
 8001696:	e7fe      	b.n	8001696 <main+0x796>
  huart8.Instance = UART8;
 8001698:	4c62      	ldr	r4, [pc, #392]	@ (8001824 <main+0x924>)
 800169a:	4b63      	ldr	r3, [pc, #396]	@ (8001828 <main+0x928>)
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800169c:	62a0      	str	r0, [r4, #40]	@ 0x28
  huart8.Init.StopBits = UART_STOPBITS_1;
 800169e:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80016a2:	e9c4 0504 	strd	r0, r5, [r4, #16]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a6:	e9c4 0006 	strd	r0, r0, [r4, #24]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016aa:	e9c4 0008 	strd	r0, r0, [r4, #32]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80016ae:	4620      	mov	r0, r4
  huart8.Init.BaudRate = 115200;
 80016b0:	e9c4 3700 	strd	r3, r7, [r4]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80016b4:	f00a f949 	bl	800b94a <HAL_UART_Init>
 80016b8:	4601      	mov	r1, r0
 80016ba:	b108      	cbz	r0, 80016c0 <main+0x7c0>
 80016bc:	b672      	cpsid	i
  while (1)
 80016be:	e7fe      	b.n	80016be <main+0x7be>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016c0:	4620      	mov	r0, r4
 80016c2:	f00a fa5b 	bl	800bb7c <HAL_UARTEx_SetTxFifoThreshold>
 80016c6:	4601      	mov	r1, r0
 80016c8:	b108      	cbz	r0, 80016ce <main+0x7ce>
 80016ca:	b672      	cpsid	i
  while (1)
 80016cc:	e7fe      	b.n	80016cc <main+0x7cc>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016ce:	4620      	mov	r0, r4
 80016d0:	f00a fa79 	bl	800bbc6 <HAL_UARTEx_SetRxFifoThreshold>
 80016d4:	b108      	cbz	r0, 80016da <main+0x7da>
 80016d6:	b672      	cpsid	i
  while (1)
 80016d8:	e7fe      	b.n	80016d8 <main+0x7d8>
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 80016da:	4620      	mov	r0, r4
 80016dc:	f00a fa2f 	bl	800bb3e <HAL_UARTEx_DisableFifoMode>
 80016e0:	b108      	cbz	r0, 80016e6 <main+0x7e6>
 80016e2:	b672      	cpsid	i
  while (1)
 80016e4:	e7fe      	b.n	80016e4 <main+0x7e4>
  huart7.Instance = UART7;
 80016e6:	4c51      	ldr	r4, [pc, #324]	@ (800182c <main+0x92c>)
  huart7.Init.BaudRate = 115200;
 80016e8:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80016ec:	4950      	ldr	r1, [pc, #320]	@ (8001830 <main+0x930>)
  huart7.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80016ee:	200c      	movs	r0, #12
 80016f0:	f44f 7240 	mov.w	r2, #768	@ 0x300
  huart7.Init.BaudRate = 115200;
 80016f4:	e9c4 1300 	strd	r1, r3, [r4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80016f8:	2300      	movs	r3, #0
  huart7.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80016fa:	e9c4 0205 	strd	r0, r2, [r4, #20]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80016fe:	4620      	mov	r0, r4
  huart7.Init.Parity = UART_PARITY_NONE;
 8001700:	6123      	str	r3, [r4, #16]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001702:	e9c4 3302 	strd	r3, r3, [r4, #8]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001706:	e9c4 3307 	strd	r3, r3, [r4, #28]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800170a:	e9c4 3309 	strd	r3, r3, [r4, #36]	@ 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800170e:	f00a f91c 	bl	800b94a <HAL_UART_Init>
 8001712:	4601      	mov	r1, r0
 8001714:	b108      	cbz	r0, 800171a <main+0x81a>
 8001716:	b672      	cpsid	i
  while (1)
 8001718:	e7fe      	b.n	8001718 <main+0x818>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800171a:	4620      	mov	r0, r4
 800171c:	f00a fa2e 	bl	800bb7c <HAL_UARTEx_SetTxFifoThreshold>
 8001720:	4601      	mov	r1, r0
 8001722:	b108      	cbz	r0, 8001728 <main+0x828>
 8001724:	b672      	cpsid	i
  while (1)
 8001726:	e7fe      	b.n	8001726 <main+0x826>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001728:	4620      	mov	r0, r4
 800172a:	f00a fa4c 	bl	800bbc6 <HAL_UARTEx_SetRxFifoThreshold>
 800172e:	b108      	cbz	r0, 8001734 <main+0x834>
 8001730:	b672      	cpsid	i
  while (1)
 8001732:	e7fe      	b.n	8001732 <main+0x832>
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001734:	4620      	mov	r0, r4
 8001736:	f00a fa02 	bl	800bb3e <HAL_UARTEx_DisableFifoMode>
 800173a:	4603      	mov	r3, r0
 800173c:	b108      	cbz	r0, 8001742 <main+0x842>
 800173e:	b672      	cpsid	i
  while (1)
 8001740:	e7fe      	b.n	8001740 <main+0x840>
  hsd1.Instance = SDMMC1;
 8001742:	483c      	ldr	r0, [pc, #240]	@ (8001834 <main+0x934>)
 8001744:	4a3c      	ldr	r2, [pc, #240]	@ (8001838 <main+0x938>)
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001746:	6083      	str	r3, [r0, #8]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001748:	e9c0 2300 	strd	r2, r3, [r0]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800174c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001750:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hsd1.Init.ClockDiv = 4;
 8001754:	2304      	movs	r3, #4
 8001756:	6143      	str	r3, [r0, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8001758:	f008 fa03 	bl	8009b62 <HAL_SD_Init>
 800175c:	4605      	mov	r5, r0
 800175e:	b108      	cbz	r0, 8001764 <main+0x864>
 8001760:	b672      	cpsid	i
  while (1)
 8001762:	e7fe      	b.n	8001762 <main+0x862>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001764:	af28      	add	r7, sp, #160	@ 0xa0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001766:	4601      	mov	r1, r0
 8001768:	2210      	movs	r2, #16
 800176a:	4630      	mov	r0, r6
 800176c:	f019 fb98 	bl	801aea0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001770:	221c      	movs	r2, #28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001772:	9528      	str	r5, [sp, #160]	@ 0xa0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001774:	4629      	mov	r1, r5
 8001776:	a82f      	add	r0, sp, #188	@ 0xbc
  htim3.Instance = TIM3;
 8001778:	4c30      	ldr	r4, [pc, #192]	@ (800183c <main+0x93c>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800177a:	e9c7 5501 	strd	r5, r5, [r7, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800177e:	f019 fb8f 	bl	801aea0 <memset>
  htim3.Init.Prescaler = 10;
 8001782:	230a      	movs	r3, #10
 8001784:	4a2e      	ldr	r2, [pc, #184]	@ (8001840 <main+0x940>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001786:	4620      	mov	r0, r4
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001788:	60a5      	str	r5, [r4, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800178a:	61a5      	str	r5, [r4, #24]
  htim3.Init.Prescaler = 10;
 800178c:	e9c4 2300 	strd	r2, r3, [r4]
  htim3.Init.Period = 255;
 8001790:	23ff      	movs	r3, #255	@ 0xff
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001792:	e9c4 3503 	strd	r3, r5, [r4, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001796:	f008 fe8d 	bl	800a4b4 <HAL_TIM_Base_Init>
 800179a:	b108      	cbz	r0, 80017a0 <main+0x8a0>
 800179c:	b672      	cpsid	i
  while (1)
 800179e:	e7fe      	b.n	800179e <main+0x89e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017a4:	4631      	mov	r1, r6
 80017a6:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017a8:	932b      	str	r3, [sp, #172]	@ 0xac
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017aa:	f008 ffd7 	bl	800a75c <HAL_TIM_ConfigClockSource>
 80017ae:	b108      	cbz	r0, 80017b4 <main+0x8b4>
 80017b0:	b672      	cpsid	i
  while (1)
 80017b2:	e7fe      	b.n	80017b2 <main+0x8b2>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017b4:	4620      	mov	r0, r4
 80017b6:	f008 fead 	bl	800a514 <HAL_TIM_PWM_Init>
 80017ba:	b108      	cbz	r0, 80017c0 <main+0x8c0>
 80017bc:	b672      	cpsid	i
  while (1)
 80017be:	e7fe      	b.n	80017be <main+0x8be>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c0:	9028      	str	r0, [sp, #160]	@ 0xa0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017c2:	4639      	mov	r1, r7
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c4:	902a      	str	r0, [sp, #168]	@ 0xa8
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017c6:	4620      	mov	r0, r4
 80017c8:	f009 f92c 	bl	800aa24 <HAL_TIMEx_MasterConfigSynchronization>
 80017cc:	4602      	mov	r2, r0
 80017ce:	b108      	cbz	r0, 80017d4 <main+0x8d4>
 80017d0:	b672      	cpsid	i
  while (1)
 80017d2:	e7fe      	b.n	80017d2 <main+0x8d2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017d4:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017d6:	9033      	str	r0, [sp, #204]	@ 0xcc
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017d8:	a92f      	add	r1, sp, #188	@ 0xbc
  sConfigOC.Pulse = 0;
 80017da:	e9cd 302f 	strd	r3, r0, [sp, #188]	@ 0xbc
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80017de:	2302      	movs	r3, #2
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017e0:	4620      	mov	r0, r4
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80017e2:	9331      	str	r3, [sp, #196]	@ 0xc4
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017e4:	f008 ff10 	bl	800a608 <HAL_TIM_PWM_ConfigChannel>
 80017e8:	b108      	cbz	r0, 80017ee <main+0x8ee>
 80017ea:	b672      	cpsid	i
  while (1)
 80017ec:	e7fe      	b.n	80017ec <main+0x8ec>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017ee:	2204      	movs	r2, #4
 80017f0:	a92f      	add	r1, sp, #188	@ 0xbc
 80017f2:	4812      	ldr	r0, [pc, #72]	@ (800183c <main+0x93c>)
 80017f4:	f008 ff08 	bl	800a608 <HAL_TIM_PWM_ConfigChannel>
 80017f8:	b108      	cbz	r0, 80017fe <main+0x8fe>
 80017fa:	b672      	cpsid	i
  while (1)
 80017fc:	e7fe      	b.n	80017fc <main+0x8fc>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017fe:	2208      	movs	r2, #8
 8001800:	a92f      	add	r1, sp, #188	@ 0xbc
 8001802:	480e      	ldr	r0, [pc, #56]	@ (800183c <main+0x93c>)
 8001804:	f008 ff00 	bl	800a608 <HAL_TIM_PWM_ConfigChannel>
 8001808:	4605      	mov	r5, r0
 800180a:	b1f8      	cbz	r0, 800184c <main+0x94c>
 800180c:	b672      	cpsid	i
  while (1)
 800180e:	e7fe      	b.n	800180e <main+0x90e>
 8001810:	240022c0 	.word	0x240022c0
 8001814:	2400269c 	.word	0x2400269c
 8001818:	cfb80000 	.word	0xcfb80000
 800181c:	24002230 	.word	0x24002230
 8001820:	40004c00 	.word	0x40004c00
 8001824:	24002110 	.word	0x24002110
 8001828:	40007c00 	.word	0x40007c00
 800182c:	240021a0 	.word	0x240021a0
 8001830:	40007800 	.word	0x40007800
 8001834:	24002358 	.word	0x24002358
 8001838:	52007000 	.word	0x52007000
 800183c:	2400230c 	.word	0x2400230c
 8001840:	40000400 	.word	0x40000400
 8001844:	40000800 	.word	0x40000800
 8001848:	58026000 	.word	0x58026000
  HAL_TIM_MspPostInit(&htim3);
 800184c:	48d0      	ldr	r0, [pc, #832]	@ (8001b90 <main+0xc90>)
  leds.AddLED(LED_UART_RS485, GPIO {LED_RS485_GPIO_Port, LED_RS485_Pin});
 800184e:	f04f 0a08 	mov.w	sl, #8
  HAL_TIM_MspPostInit(&htim3);
 8001852:	f000 fffb 	bl	800284c <HAL_TIM_MspPostInit>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8001856:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800185a:	4629      	mov	r1, r5
 800185c:	48cd      	ldr	r0, [pc, #820]	@ (8001b94 <main+0xc94>)
  leds.Init(&registers);
 800185e:	4cce      	ldr	r4, [pc, #824]	@ (8001b98 <main+0xc98>)
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8001860:	f002 fac6 	bl	8003df0 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8001864:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001868:	4629      	mov	r1, r5
 800186a:	48cc      	ldr	r0, [pc, #816]	@ (8001b9c <main+0xc9c>)
  leds.AddLED(LED_UART_CM4, GPIO {LED_UART_CM4_GPIO_Port, LED_UART_CM4_Pin});
 800186c:	f44f 6b00 	mov.w	fp, #2048	@ 0x800
  HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8001870:	f002 fabe 	bl	8003df0 <HAL_ADCEx_Calibration_Start>
  registers.Init();
 8001874:	48ca      	ldr	r0, [pc, #808]	@ (8001ba0 <main+0xca0>)
 8001876:	f016 fc5e 	bl	8018136 <_ZN9Registers4InitEv>
  leds.Init(&registers);
 800187a:	49c9      	ldr	r1, [pc, #804]	@ (8001ba0 <main+0xca0>)
 800187c:	4620      	mov	r0, r4
  leds.AddLED(LED_UART_RS485, GPIO {LED_RS485_GPIO_Port, LED_RS485_Pin});
 800187e:	f8df 8360 	ldr.w	r8, [pc, #864]	@ 8001be0 <main+0xce0>
  leds.Init(&registers);
 8001882:	f012 f927 	bl	8013ad4 <_ZN4LEDS4InitEP9Registers>
  registers.Init(); 																registers.AddBaseRegisters();
 8001886:	48c6      	ldr	r0, [pc, #792]	@ (8001ba0 <main+0xca0>)
 8001888:	f016 fc55 	bl	8018136 <_ZN9Registers4InitEv>
 800188c:	48c4      	ldr	r0, [pc, #784]	@ (8001ba0 <main+0xca0>)
 800188e:	f016 fd07 	bl	80182a0 <_ZN9Registers16AddBaseRegistersEv>
  communication.Init(&registers, &services, &subscribers, &leds);					communication.AddRegisters();
 8001892:	4bc4      	ldr	r3, [pc, #784]	@ (8001ba4 <main+0xca4>)
 8001894:	4ac4      	ldr	r2, [pc, #784]	@ (8001ba8 <main+0xca8>)
 8001896:	49c2      	ldr	r1, [pc, #776]	@ (8001ba0 <main+0xca0>)
 8001898:	48c4      	ldr	r0, [pc, #784]	@ (8001bac <main+0xcac>)
 800189a:	9400      	str	r4, [sp, #0]
 800189c:	f00d fae5 	bl	800ee6a <_ZN13Communication4InitEP9RegistersP8ServicesP17MasterSubscribersP4LEDS>
 80018a0:	48c2      	ldr	r0, [pc, #776]	@ (8001bac <main+0xcac>)
 80018a2:	f00d fddf 	bl	800f464 <_ZN13Communication12AddRegistersEv>
  services.Init(&registers, &communication, &leds);
 80018a6:	4623      	mov	r3, r4
 80018a8:	4ac0      	ldr	r2, [pc, #768]	@ (8001bac <main+0xcac>)
 80018aa:	49bd      	ldr	r1, [pc, #756]	@ (8001ba0 <main+0xca0>)
 80018ac:	48be      	ldr	r0, [pc, #760]	@ (8001ba8 <main+0xca8>)
 80018ae:	f017 fb25 	bl	8018efc <_ZN8Services4InitEP9RegistersP13CommunicationP4LEDS>
  publishers.Init(&registers, &communication); 										publishers.AddRegisters();
 80018b2:	4abe      	ldr	r2, [pc, #760]	@ (8001bac <main+0xcac>)
 80018b4:	49ba      	ldr	r1, [pc, #744]	@ (8001ba0 <main+0xca0>)
 80018b6:	48be      	ldr	r0, [pc, #760]	@ (8001bb0 <main+0xcb0>)
 80018b8:	f014 ff52 	bl	8016760 <_ZN10Publishers4InitEP9RegistersP13Communication>
 80018bc:	48bc      	ldr	r0, [pc, #752]	@ (8001bb0 <main+0xcb0>)
 80018be:	f015 fc47 	bl	8017150 <_ZN10Publishers12AddRegistersEv>
  subscribers.Init(&registers, &leds);												subscribers.AddRegisters();
 80018c2:	4622      	mov	r2, r4
 80018c4:	49b6      	ldr	r1, [pc, #728]	@ (8001ba0 <main+0xca0>)
 80018c6:	48b7      	ldr	r0, [pc, #732]	@ (8001ba4 <main+0xca4>)
 80018c8:	f017 fcaa 	bl	8019220 <_ZN17MasterSubscribers4InitEP9RegistersP4LEDS>
 80018cc:	48b5      	ldr	r0, [pc, #724]	@ (8001ba4 <main+0xca4>)
 80018ce:	f017 ff3b 	bl	8019748 <_ZN17MasterSubscribers12AddRegistersEv>
  sensors.Init(&registers, &publishers, &hardware_delay, &leds);					sensors.AddRegisters();
 80018d2:	4bb8      	ldr	r3, [pc, #736]	@ (8001bb4 <main+0xcb4>)
 80018d4:	4ab6      	ldr	r2, [pc, #728]	@ (8001bb0 <main+0xcb0>)
 80018d6:	49b2      	ldr	r1, [pc, #712]	@ (8001ba0 <main+0xca0>)
 80018d8:	48b7      	ldr	r0, [pc, #732]	@ (8001bb8 <main+0xcb8>)
 80018da:	9400      	str	r4, [sp, #0]
 80018dc:	f016 fed7 	bl	801868e <_ZN7Sensors4InitEP9RegistersP10PublishersP13HardwareDelayP4LEDS>
 80018e0:	48b5      	ldr	r0, [pc, #724]	@ (8001bb8 <main+0xcb8>)
 80018e2:	f017 f99d 	bl	8018c20 <_ZN7Sensors12AddRegistersEv>
  leds.Init(&registers);															leds.AddRegisters();
 80018e6:	49ae      	ldr	r1, [pc, #696]	@ (8001ba0 <main+0xca0>)
 80018e8:	4620      	mov	r0, r4
  leds.AddLED(LED_UART_CM4, GPIO {LED_UART_CM4_GPIO_Port, LED_UART_CM4_Pin});
 80018ea:	f8df 92f8 	ldr.w	r9, [pc, #760]	@ 8001be4 <main+0xce4>
  leds.Init(&registers);															leds.AddRegisters();
 80018ee:	f012 f8f1 	bl	8013ad4 <_ZN4LEDS4InitEP9Registers>
 80018f2:	4620      	mov	r0, r4
 80018f4:	f012 fd4a 	bl	801438c <_ZN4LEDS12AddRegistersEv>
  motion_generator.Init(&registers, &publishers, &services, &leds);					motion_generator.AddRegisters();
 80018f8:	4bab      	ldr	r3, [pc, #684]	@ (8001ba8 <main+0xca8>)
 80018fa:	4aad      	ldr	r2, [pc, #692]	@ (8001bb0 <main+0xcb0>)
 80018fc:	49a8      	ldr	r1, [pc, #672]	@ (8001ba0 <main+0xca0>)
 80018fe:	48af      	ldr	r0, [pc, #700]	@ (8001bbc <main+0xcbc>)
 8001900:	9400      	str	r4, [sp, #0]
 8001902:	f013 fe21 	bl	8015548 <_ZN15MotionGenerator4InitEP9RegistersP10PublishersP8ServicesP4LEDS>
 8001906:	48ad      	ldr	r0, [pc, #692]	@ (8001bbc <main+0xcbc>)
 8001908:	f013 fbe8 	bl	80150dc <_ZN15MotionGenerator12AddRegistersEv>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); 			// R LED
 800190c:	4629      	mov	r1, r5
 800190e:	48a0      	ldr	r0, [pc, #640]	@ (8001b90 <main+0xc90>)
 8001910:	f008 ffd0 	bl	800a8b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); 			// G LED
 8001914:	2104      	movs	r1, #4
 8001916:	489e      	ldr	r0, [pc, #632]	@ (8001b90 <main+0xc90>)
 8001918:	f008 ffcc 	bl	800a8b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); 			// B LED
 800191c:	2108      	movs	r1, #8
 800191e:	489c      	ldr	r0, [pc, #624]	@ (8001b90 <main+0xc90>)
 8001920:	f008 ffc8 	bl	800a8b4 <HAL_TIM_PWM_Start>
  leds.AddLED(LED_UART_RS485, GPIO {LED_RS485_GPIO_Port, LED_RS485_Pin});
 8001924:	f8ad a05c 	strh.w	sl, [sp, #92]	@ 0x5c
 8001928:	4642      	mov	r2, r8
 800192a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800192c:	2104      	movs	r1, #4
 800192e:	4620      	mov	r0, r4
 8001930:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
 8001934:	f012 fe5a 	bl	80145ec <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_UART_BACK, GPIO {LED_UART_BACK_GPIO_Port, LED_UART_BACK_Pin});
 8001938:	2310      	movs	r3, #16
 800193a:	4642      	mov	r2, r8
 800193c:	2103      	movs	r1, #3
 800193e:	4620      	mov	r0, r4
 8001940:	f8ad 3064 	strh.w	r3, [sp, #100]	@ 0x64
 8001944:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8001946:	f8cd 8060 	str.w	r8, [sp, #96]	@ 0x60
 800194a:	f012 fe4f 	bl	80145ec <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_CANFD2, GPIO {LED_FDCAN2_GPIO_Port, LED_FDCAN2_Pin});
 800194e:	2320      	movs	r3, #32
 8001950:	4642      	mov	r2, r8
 8001952:	2101      	movs	r1, #1
 8001954:	4620      	mov	r0, r4
 8001956:	f8ad 306c 	strh.w	r3, [sp, #108]	@ 0x6c
 800195a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800195c:	f8cd 8068 	str.w	r8, [sp, #104]	@ 0x68
 8001960:	f012 fe44 	bl	80145ec <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_CANFD1, GPIO {LED_FDCAN1_GPIO_Port, LED_FDCAN1_Pin});
 8001964:	2340      	movs	r3, #64	@ 0x40
 8001966:	4642      	mov	r2, r8
 8001968:	4629      	mov	r1, r5
 800196a:	4620      	mov	r0, r4
 800196c:	f8ad 3074 	strh.w	r3, [sp, #116]	@ 0x74
 8001970:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8001972:	f8cd 8070 	str.w	r8, [sp, #112]	@ 0x70
 8001976:	f012 fe39 	bl	80145ec <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_UART_CM4, GPIO {LED_UART_CM4_GPIO_Port, LED_UART_CM4_Pin});
 800197a:	f8ad b07c 	strh.w	fp, [sp, #124]	@ 0x7c
  leds.AddLED(LED_STATUS, GPIO {LED_STATUS_GPIO_Port, LED_STATUS_Pin});
 800197e:	f508 6880 	add.w	r8, r8, #1024	@ 0x400
  leds.AddLED(LED_UART_CM4, GPIO {LED_UART_CM4_GPIO_Port, LED_UART_CM4_Pin});
 8001982:	464a      	mov	r2, r9
 8001984:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8001986:	2102      	movs	r1, #2
 8001988:	4620      	mov	r0, r4
 800198a:	f8cd 9078 	str.w	r9, [sp, #120]	@ 0x78
 800198e:	f012 fe2d 	bl	80145ec <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_STATUS, GPIO {LED_STATUS_GPIO_Port, LED_STATUS_Pin});
 8001992:	f8ad b084 	strh.w	fp, [sp, #132]	@ 0x84
 8001996:	4642      	mov	r2, r8
 8001998:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800199a:	2107      	movs	r1, #7
 800199c:	4620      	mov	r0, r4
 800199e:	f8cd 8080 	str.w	r8, [sp, #128]	@ 0x80
 80019a2:	f012 fe23 	bl	80145ec <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_ACTIVITY, GPIO {LED_ACTIVITY_GPIO_Port, LED_ACTIVITY_Pin});
 80019a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019aa:	4642      	mov	r2, r8
 80019ac:	4651      	mov	r1, sl
 80019ae:	f8ad 308c 	strh.w	r3, [sp, #140]	@ 0x8c
 80019b2:	4620      	mov	r0, r4
 80019b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80019b6:	f8cd 8088 	str.w	r8, [sp, #136]	@ 0x88
 80019ba:	f012 fe17 	bl	80145ec <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_FAULT, GPIO {LED_FAULT_GPIO_Port, LED_FAULT_Pin});
 80019be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019c2:	4642      	mov	r2, r8
 80019c4:	2109      	movs	r1, #9
 80019c6:	4620      	mov	r0, r4
 80019c8:	f8ad 3094 	strh.w	r3, [sp, #148]	@ 0x94
 80019cc:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80019ce:	f8cd 8090 	str.w	r8, [sp, #144]	@ 0x90
 80019d2:	f012 fe0b 	bl	80145ec <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_USER1, GPIO {LED_USER1_GPIO_Port, LED_USER1_Pin});
 80019d6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80019da:	4642      	mov	r2, r8
 80019dc:	210a      	movs	r1, #10
 80019de:	4620      	mov	r0, r4
 80019e0:	f8ad 309c 	strh.w	r3, [sp, #156]	@ 0x9c
 80019e4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80019e6:	f8cd 8098 	str.w	r8, [sp, #152]	@ 0x98
 80019ea:	f012 fdff 	bl	80145ec <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_USER2, GPIO {LED_USER2_GPIO_Port, LED_USER2_Pin});
 80019ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80019f2:	f8cd 80a0 	str.w	r8, [sp, #160]	@ 0xa0
 80019f6:	210b      	movs	r1, #11
 80019f8:	4620      	mov	r0, r4
 80019fa:	f8ad 30a4 	strh.w	r3, [sp, #164]	@ 0xa4
  leds.ConfigureTimings(LED_CANFD1, std::vector<uint8_t>{1}, 2);
 80019fe:	f10d 0848 	add.w	r8, sp, #72	@ 0x48
  leds.AddLED(LED_USER2, GPIO {LED_USER2_GPIO_Port, LED_USER2_Pin});
 8001a02:	e897 000c 	ldmia.w	r7, {r2, r3}
 8001a06:	f012 fdf1 	bl	80145ec <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_USER3, GPIO {LED_USER3_GPIO_Port, LED_USER3_Pin});
 8001a0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  leds.ConfigureTimings(LED_CANFD1, std::vector<uint8_t>{1}, 2);
 8001a0e:	af14      	add	r7, sp, #80	@ 0x50
  leds.AddLED(LED_USER3, GPIO {LED_USER3_GPIO_Port, LED_USER3_Pin});
 8001a10:	f8cd 90ac 	str.w	r9, [sp, #172]	@ 0xac
 8001a14:	f8ad 30b0 	strh.w	r3, [sp, #176]	@ 0xb0
 8001a18:	210c      	movs	r1, #12
 8001a1a:	4620      	mov	r0, r4
  leds.ConfigureTimings(LED_UART_BACK, std::vector<uint8_t>{1}, 2);
 8001a1c:	f10d 090c 	add.w	r9, sp, #12
  leds.AddLED(LED_USER3, GPIO {LED_USER3_GPIO_Port, LED_USER3_Pin});
 8001a20:	e896 000c 	ldmia.w	r6, {r2, r3}
  leds.ConfigureTimings(LED_CANFD1, std::vector<uint8_t>{1}, 2);
 8001a24:	2601      	movs	r6, #1
  leds.AddLED(LED_USER3, GPIO {LED_USER3_GPIO_Port, LED_USER3_Pin});
 8001a26:	f012 fde1 	bl	80145ec <_ZN4LEDS6AddLEDEh4GPIO>
  leds.ConfigureTimings(LED_CANFD1, std::vector<uint8_t>{1}, 2);
 8001a2a:	463b      	mov	r3, r7
 8001a2c:	4641      	mov	r1, r8
 8001a2e:	4632      	mov	r2, r6
 8001a30:	a82f      	add	r0, sp, #188	@ 0xbc
 8001a32:	f88d 6048 	strb.w	r6, [sp, #72]	@ 0x48
 8001a36:	e9cd 860c 	strd	r8, r6, [sp, #48]	@ 0x30
 8001a3a:	f7ff fa3f 	bl	8000ebc <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8001a3e:	2302      	movs	r3, #2
 8001a40:	aa2f      	add	r2, sp, #188	@ 0xbc
 8001a42:	4629      	mov	r1, r5
 8001a44:	4620      	mov	r0, r4
 8001a46:	f012 fe14 	bl	8014672 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
      }
 8001a4a:	a82f      	add	r0, sp, #188	@ 0xbc
 8001a4c:	f7ff f8e2 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
  leds.ConfigureTimings(LED_CANFD2, std::vector<uint8_t>{1}, 2);
 8001a50:	463b      	mov	r3, r7
 8001a52:	4632      	mov	r2, r6
 8001a54:	4641      	mov	r1, r8
 8001a56:	a82f      	add	r0, sp, #188	@ 0xbc
 8001a58:	f88d 6048 	strb.w	r6, [sp, #72]	@ 0x48
 8001a5c:	e9cd 860e 	strd	r8, r6, [sp, #56]	@ 0x38
 8001a60:	f7ff fa2c 	bl	8000ebc <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8001a64:	2302      	movs	r3, #2
 8001a66:	aa2f      	add	r2, sp, #188	@ 0xbc
 8001a68:	4631      	mov	r1, r6
 8001a6a:	4620      	mov	r0, r4
 8001a6c:	f012 fe01 	bl	8014672 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
 8001a70:	a82f      	add	r0, sp, #188	@ 0xbc
 8001a72:	f7ff f8cf 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
  leds.ConfigureTimings(LED_UART_CM4, std::vector<uint8_t>{1}, 2);
 8001a76:	463b      	mov	r3, r7
 8001a78:	4632      	mov	r2, r6
 8001a7a:	4641      	mov	r1, r8
 8001a7c:	a82f      	add	r0, sp, #188	@ 0xbc
 8001a7e:	f88d 6048 	strb.w	r6, [sp, #72]	@ 0x48
 8001a82:	e9cd 8610 	strd	r8, r6, [sp, #64]	@ 0x40
 8001a86:	f7ff fa19 	bl	8000ebc <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	aa2f      	add	r2, sp, #188	@ 0xbc
 8001a8e:	4620      	mov	r0, r4
 8001a90:	4619      	mov	r1, r3
 8001a92:	f012 fdee 	bl	8014672 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
 8001a96:	a82f      	add	r0, sp, #188	@ 0xbc
 8001a98:	f7ff f8bc 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
  leds.ConfigureTimings(LED_UART_BACK, std::vector<uint8_t>{1}, 2);
 8001a9c:	463b      	mov	r3, r7
 8001a9e:	a82f      	add	r0, sp, #188	@ 0xbc
 8001aa0:	f88d 600c 	strb.w	r6, [sp, #12]
 8001aa4:	e9cd 9612 	strd	r9, r6, [sp, #72]	@ 0x48
 8001aa8:	e898 0006 	ldmia.w	r8, {r1, r2}
 8001aac:	f7ff fa06 	bl	8000ebc <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	aa2f      	add	r2, sp, #188	@ 0xbc
 8001ab4:	2103      	movs	r1, #3
 8001ab6:	4620      	mov	r0, r4
 8001ab8:	f012 fddb 	bl	8014672 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
 8001abc:	a82f      	add	r0, sp, #188	@ 0xbc
 8001abe:	f7ff f8a9 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
  leds.ConfigureTimings(LED_UART_RS485, std::vector<uint8_t>{1}, 2);
 8001ac2:	eb0d 030a 	add.w	r3, sp, sl
 8001ac6:	a82f      	add	r0, sp, #188	@ 0xbc
 8001ac8:	f88d 6008 	strb.w	r6, [sp, #8]
 8001acc:	e9cd 3614 	strd	r3, r6, [sp, #80]	@ 0x50
 8001ad0:	464b      	mov	r3, r9
 8001ad2:	e897 0006 	ldmia.w	r7, {r1, r2}
 8001ad6:	f7ff f9f1 	bl	8000ebc <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8001ada:	2302      	movs	r3, #2
 8001adc:	aa2f      	add	r2, sp, #188	@ 0xbc
 8001ade:	2104      	movs	r1, #4
 8001ae0:	4620      	mov	r0, r4
 8001ae2:	f012 fdc6 	bl	8014672 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
 8001ae6:	a82f      	add	r0, sp, #188	@ 0xbc
 8001ae8:	f7ff f894 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
  leds.AddRGBLED(LED_RGB, const_cast<uint32_t*>(&(TIM3->CCR1)), const_cast<uint32_t*>(&(TIM3->CCR2)), const_cast<uint32_t*>(&(TIM3->CCR3)));
 8001aec:	4b34      	ldr	r3, [pc, #208]	@ (8001bc0 <main+0xcc0>)
 8001aee:	4a35      	ldr	r2, [pc, #212]	@ (8001bc4 <main+0xcc4>)
 8001af0:	210d      	movs	r1, #13
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	4620      	mov	r0, r4
 8001af6:	3b04      	subs	r3, #4
 8001af8:	f012 fb7c 	bl	80141f4 <_ZN4LEDS9AddRGBLEDEhPmS0_S0_>
  leds.TestLEDs();
 8001afc:	4620      	mov	r0, r4
 8001afe:	f012 fcda 	bl	80144b6 <_ZN4LEDS8TestLEDsEv>
  StartupLEDS(&leds);
 8001b02:	4620      	mov	r0, r4
 8001b04:	f00c fe26 	bl	800e754 <_Z11StartupLEDSP4LEDS>
  communication.SetModuleAddress(STM32_HEAD);
 8001b08:	4631      	mov	r1, r6
 8001b0a:	4828      	ldr	r0, [pc, #160]	@ (8001bac <main+0xcac>)
 8001b0c:	f00d fa39 	bl	800ef82 <_ZN13Communication16SetModuleAddressEh>
  protocol_uart.SetProtocolPayloadMaxLength(256);
 8001b10:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b14:	482c      	ldr	r0, [pc, #176]	@ (8001bc8 <main+0xcc8>)
 8001b16:	f013 fe5d 	bl	80157d4 <_ZN21CommunicationProtocol27SetProtocolPayloadMaxLengthEt>
  protocol_uart.AddInterface(UART_CM4, &huart1);
 8001b1a:	4a2c      	ldr	r2, [pc, #176]	@ (8001bcc <main+0xccc>)
 8001b1c:	2102      	movs	r1, #2
 8001b1e:	482a      	ldr	r0, [pc, #168]	@ (8001bc8 <main+0xcc8>)
 8001b20:	f7ff f904 	bl	8000d2c <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE12AddInterfaceEhPS0_>
  protocol_uart.AddInterface(UART_BACK, &huart6);
 8001b24:	4a2a      	ldr	r2, [pc, #168]	@ (8001bd0 <main+0xcd0>)
 8001b26:	2103      	movs	r1, #3
 8001b28:	4827      	ldr	r0, [pc, #156]	@ (8001bc8 <main+0xcc8>)
 8001b2a:	f7ff f8ff 	bl	8000d2c <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE12AddInterfaceEhPS0_>
  protocol_uart.AddInterface(UART_PIC, &huart2);
 8001b2e:	4a29      	ldr	r2, [pc, #164]	@ (8001bd4 <main+0xcd4>)
 8001b30:	2105      	movs	r1, #5
 8001b32:	4825      	ldr	r0, [pc, #148]	@ (8001bc8 <main+0xcc8>)
 8001b34:	f7ff f8fa 	bl	8000d2c <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE12AddInterfaceEhPS0_>
  communication.AddProtocol(&protocol_uart);
 8001b38:	4923      	ldr	r1, [pc, #140]	@ (8001bc8 <main+0xcc8>)
 8001b3a:	481c      	ldr	r0, [pc, #112]	@ (8001bac <main+0xcac>)
 8001b3c:	f00d faf0 	bl	800f120 <_ZN13Communication11AddProtocolEP21CommunicationProtocol>
  communication.ActivateReception(UART_CM4);
 8001b40:	2102      	movs	r1, #2
 8001b42:	481a      	ldr	r0, [pc, #104]	@ (8001bac <main+0xcac>)
 8001b44:	f00d fa0a 	bl	800ef5c <_ZN13Communication17ActivateReceptionEh>
  communication.ActivateReception(UART_BACK);
 8001b48:	2103      	movs	r1, #3
 8001b4a:	4818      	ldr	r0, [pc, #96]	@ (8001bac <main+0xcac>)
 8001b4c:	f00d fa06 	bl	800ef5c <_ZN13Communication17ActivateReceptionEh>
  communication.ActivateReception(UART_PIC);
 8001b50:	2105      	movs	r1, #5
 8001b52:	4816      	ldr	r0, [pc, #88]	@ (8001bac <main+0xcac>)
 8001b54:	f00d fa02 	bl	800ef5c <_ZN13Communication17ActivateReceptionEh>
  protocol_canfd.SetProtocolPayloadMaxLength(62);
 8001b58:	213e      	movs	r1, #62	@ 0x3e
 8001b5a:	481f      	ldr	r0, [pc, #124]	@ (8001bd8 <main+0xcd8>)
 8001b5c:	f013 fe3a 	bl	80157d4 <_ZN21CommunicationProtocol27SetProtocolPayloadMaxLengthEt>
  protocol_canfd.AddInterface(CANFD1, &hfdcan1);
 8001b60:	4a1e      	ldr	r2, [pc, #120]	@ (8001bdc <main+0xcdc>)
 8001b62:	4629      	mov	r1, r5
 8001b64:	481c      	ldr	r0, [pc, #112]	@ (8001bd8 <main+0xcd8>)
 8001b66:	f014 f8d1 	bl	8015d0c <_ZN11CANProtocol12AddInterfaceEhP19FDCAN_HandleTypeDef>
  protocol_canfd.ConfigureFilters(CANFD1);
 8001b6a:	4629      	mov	r1, r5
 8001b6c:	481a      	ldr	r0, [pc, #104]	@ (8001bd8 <main+0xcd8>)
 8001b6e:	f014 f82c 	bl	8015bca <_ZN11CANProtocol16ConfigureFiltersEh>
  protocol_canfd.ActivateReception(CANFD1);
 8001b72:	4629      	mov	r1, r5
 8001b74:	4818      	ldr	r0, [pc, #96]	@ (8001bd8 <main+0xcd8>)
 8001b76:	f014 f83b 	bl	8015bf0 <_ZN11CANProtocol17ActivateReceptionEh>
  protocol_canfd.Start(CANFD1);
 8001b7a:	4629      	mov	r1, r5
 8001b7c:	4816      	ldr	r0, [pc, #88]	@ (8001bd8 <main+0xcd8>)
 8001b7e:	f014 f848 	bl	8015c12 <_ZN11CANProtocol5StartEh>
  communication.AddProtocol(&protocol_canfd);
 8001b82:	4915      	ldr	r1, [pc, #84]	@ (8001bd8 <main+0xcd8>)
 8001b84:	4809      	ldr	r0, [pc, #36]	@ (8001bac <main+0xcac>)
 8001b86:	f00d facb 	bl	800f120 <_ZN13Communication11AddProtocolEP21CommunicationProtocol>
  communication.ActivateReception(CANFD1);
 8001b8a:	4629      	mov	r1, r5
 8001b8c:	e02c      	b.n	8001be8 <main+0xce8>
 8001b8e:	bf00      	nop
 8001b90:	2400230c 	.word	0x2400230c
 8001b94:	24002700 	.word	0x24002700
 8001b98:	24000148 	.word	0x24000148
 8001b9c:	2400269c 	.word	0x2400269c
 8001ba0:	24001780 	.word	0x24001780
 8001ba4:	240016a0 	.word	0x240016a0
 8001ba8:	24000220 	.word	0x24000220
 8001bac:	24001664 	.word	0x24001664
 8001bb0:	24000208 	.word	0x24000208
 8001bb4:	240001ec 	.word	0x240001ec
 8001bb8:	24000180 	.word	0x24000180
 8001bbc:	240000e0 	.word	0x240000e0
 8001bc0:	4000043c 	.word	0x4000043c
 8001bc4:	40000434 	.word	0x40000434
 8001bc8:	24001718 	.word	0x24001718
 8001bcc:	24002080 	.word	0x24002080
 8001bd0:	24001ed0 	.word	0x24001ed0
 8001bd4:	24001ff0 	.word	0x24001ff0
 8001bd8:	240016c4 	.word	0x240016c4
 8001bdc:	240025fc 	.word	0x240025fc
 8001be0:	58020c00 	.word	0x58020c00
 8001be4:	58020400 	.word	0x58020400
 8001be8:	4814      	ldr	r0, [pc, #80]	@ (8001c3c <main+0xd3c>)
 8001bea:	f00d f9b7 	bl	800ef5c <_ZN13Communication17ActivateReceptionEh>
  user.Init();
 8001bee:	4814      	ldr	r0, [pc, #80]	@ (8001c40 <main+0xd40>)
 8001bf0:	f018 f90b 	bl	8019e0a <_ZN4User4InitEv>
  osKernelInitialize();
 8001bf4:	f00a fba8 	bl	800c348 <osKernelInitialize>
  TrajectoryHandle = osThreadNew(TrajectoryTask, NULL, &Trajectory_attributes);
 8001bf8:	4a12      	ldr	r2, [pc, #72]	@ (8001c44 <main+0xd44>)
 8001bfa:	4629      	mov	r1, r5
 8001bfc:	4812      	ldr	r0, [pc, #72]	@ (8001c48 <main+0xd48>)
 8001bfe:	f00a fbd1 	bl	800c3a4 <osThreadNew>
 8001c02:	4b12      	ldr	r3, [pc, #72]	@ (8001c4c <main+0xd4c>)
  SensorsHandle = osThreadNew(SensorsTask, NULL, &Sensors_attributes);
 8001c04:	4a12      	ldr	r2, [pc, #72]	@ (8001c50 <main+0xd50>)
 8001c06:	4629      	mov	r1, r5
  TrajectoryHandle = osThreadNew(TrajectoryTask, NULL, &Trajectory_attributes);
 8001c08:	6018      	str	r0, [r3, #0]
  SensorsHandle = osThreadNew(SensorsTask, NULL, &Sensors_attributes);
 8001c0a:	4812      	ldr	r0, [pc, #72]	@ (8001c54 <main+0xd54>)
 8001c0c:	f00a fbca 	bl	800c3a4 <osThreadNew>
 8001c10:	4b11      	ldr	r3, [pc, #68]	@ (8001c58 <main+0xd58>)
  CommunicationHandle = osThreadNew(CommunicationTask, NULL, &Communication_attributes);
 8001c12:	4a12      	ldr	r2, [pc, #72]	@ (8001c5c <main+0xd5c>)
 8001c14:	4629      	mov	r1, r5
  SensorsHandle = osThreadNew(SensorsTask, NULL, &Sensors_attributes);
 8001c16:	6018      	str	r0, [r3, #0]
  CommunicationHandle = osThreadNew(CommunicationTask, NULL, &Communication_attributes);
 8001c18:	4811      	ldr	r0, [pc, #68]	@ (8001c60 <main+0xd60>)
 8001c1a:	f00a fbc3 	bl	800c3a4 <osThreadNew>
 8001c1e:	4b11      	ldr	r3, [pc, #68]	@ (8001c64 <main+0xd64>)
  LEDsHandle = osThreadNew(LEDsTask, NULL, &LEDs_attributes);
 8001c20:	4a11      	ldr	r2, [pc, #68]	@ (8001c68 <main+0xd68>)
 8001c22:	4629      	mov	r1, r5
  CommunicationHandle = osThreadNew(CommunicationTask, NULL, &Communication_attributes);
 8001c24:	6018      	str	r0, [r3, #0]
  LEDsHandle = osThreadNew(LEDsTask, NULL, &LEDs_attributes);
 8001c26:	4811      	ldr	r0, [pc, #68]	@ (8001c6c <main+0xd6c>)
 8001c28:	f00a fbbc 	bl	800c3a4 <osThreadNew>
 8001c2c:	4b10      	ldr	r3, [pc, #64]	@ (8001c70 <main+0xd70>)
 8001c2e:	6018      	str	r0, [r3, #0]
  user.AddOSThreads();
 8001c30:	4803      	ldr	r0, [pc, #12]	@ (8001c40 <main+0xd40>)
 8001c32:	f018 f8eb 	bl	8019e0c <_ZN4User12AddOSThreadsEv>
  osKernelStart();
 8001c36:	f00a fb99 	bl	800c36c <osKernelStart>
  while (1)
 8001c3a:	e7fe      	b.n	8001c3a <main+0xd3a>
 8001c3c:	24001664 	.word	0x24001664
 8001c40:	24000098 	.word	0x24000098
 8001c44:	0801b330 	.word	0x0801b330
 8001c48:	0800095d 	.word	0x0800095d
 8001c4c:	2400183c 	.word	0x2400183c
 8001c50:	0801b30c 	.word	0x0801b30c
 8001c54:	08000a03 	.word	0x08000a03
 8001c58:	24001838 	.word	0x24001838
 8001c5c:	0801b2e8 	.word	0x0801b2e8
 8001c60:	08000969 	.word	0x08000969
 8001c64:	24001834 	.word	0x24001834
 8001c68:	0801b2c4 	.word	0x0801b2c4
 8001c6c:	08000979 	.word	0x08000979
 8001c70:	24001830 	.word	0x24001830

08001c74 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8001c74:	b510      	push	{r4, lr}
	  if (_Num)
 8001c76:	1a0c      	subs	r4, r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8001c78:	4613      	mov	r3, r2
	  if (_Num)
 8001c7a:	d005      	beq.n	8001c88 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x14>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8001c7c:	4601      	mov	r1, r0
 8001c7e:	4622      	mov	r2, r4
 8001c80:	4618      	mov	r0, r3
 8001c82:	f019 f8f3 	bl	801ae6c <memmove>
 8001c86:	4603      	mov	r3, r0
	}
 8001c88:	1918      	adds	r0, r3, r4
 8001c8a:	bd10      	pop	{r4, pc}

08001c8c <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c90:	b08b      	sub	sp, #44	@ 0x2c
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001c92:	2300      	movs	r3, #0
 8001c94:	460c      	mov	r4, r1
	ID = communication.GetID((void*) huart, &success);
 8001c96:	4601      	mov	r1, r0
 8001c98:	f10d 020f 	add.w	r2, sp, #15
 8001c9c:	4852      	ldr	r0, [pc, #328]	@ (8001de8 <HAL_UARTEx_RxEventCallback+0x15c>)
 8001c9e:	9306      	str	r3, [sp, #24]
 8001ca0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001ca4:	f00d f920 	bl	800eee8 <_ZN13Communication5GetIDEPvPb>
	if (!success) {return;}
 8001ca8:	f89d 300f 	ldrb.w	r3, [sp, #15]
	ID = communication.GetID((void*) huart, &success);
 8001cac:	4605      	mov	r5, r0
	if (!success) {return;}
 8001cae:	b1a3      	cbz	r3, 8001cda <HAL_UARTEx_RxEventCallback+0x4e>
	std::vector<uint8_t>* buffer = communication.GetBuffer(ID, &success);
 8001cb0:	4601      	mov	r1, r0
 8001cb2:	f10d 020f 	add.w	r2, sp, #15
 8001cb6:	484c      	ldr	r0, [pc, #304]	@ (8001de8 <HAL_UARTEx_RxEventCallback+0x15c>)
 8001cb8:	f00d f92a 	bl	800ef10 <_ZN13Communication9GetBufferEhPb>
	uint16_t* buffer_index = communication.GetBufferIndex(ID, &success);
 8001cbc:	f10d 020f 	add.w	r2, sp, #15
	std::vector<uint8_t>* buffer = communication.GetBuffer(ID, &success);
 8001cc0:	4607      	mov	r7, r0
	uint16_t* buffer_index = communication.GetBufferIndex(ID, &success);
 8001cc2:	4629      	mov	r1, r5
 8001cc4:	4848      	ldr	r0, [pc, #288]	@ (8001de8 <HAL_UARTEx_RxEventCallback+0x15c>)
 8001cc6:	f00d f92e 	bl	800ef26 <_ZN13Communication14GetBufferIndexEhPb>
	if (!success) {communication.ActivateReception(ID); return;}
 8001cca:	f89d 300f 	ldrb.w	r3, [sp, #15]
	uint16_t* buffer_index = communication.GetBufferIndex(ID, &success);
 8001cce:	4680      	mov	r8, r0
	if (!success) {communication.ActivateReception(ID); return;}
 8001cd0:	b94b      	cbnz	r3, 8001ce6 <HAL_UARTEx_RxEventCallback+0x5a>
	communication.ActivateReception(ID);
 8001cd2:	4629      	mov	r1, r5
 8001cd4:	4844      	ldr	r0, [pc, #272]	@ (8001de8 <HAL_UARTEx_RxEventCallback+0x15c>)
 8001cd6:	f00d f941 	bl	800ef5c <_ZN13Communication17ActivateReceptionEh>
      }
 8001cda:	a804      	add	r0, sp, #16
 8001cdc:	f7fe ff9a 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 8001ce0:	b00b      	add	sp, #44	@ 0x2c
 8001ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (Size == *buffer_index) {communication.ActivateReception(ID); return;}
 8001ce6:	8801      	ldrh	r1, [r0, #0]
 8001ce8:	42a1      	cmp	r1, r4
 8001cea:	d0f2      	beq.n	8001cd2 <HAL_UARTEx_RxEventCallback+0x46>
      : _M_current(__i) { }
 8001cec:	683a      	ldr	r2, [r7, #0]
		received_data = std::vector<uint8_t>(buffer->begin() + *buffer_index, buffer->begin() + Size);
 8001cee:	ab03      	add	r3, sp, #12
      { return __normal_iterator(_M_current + __n); }
 8001cf0:	4411      	add	r1, r2
	if (Size > *buffer_index)
 8001cf2:	d228      	bcs.n	8001d46 <HAL_UARTEx_RxEventCallback+0xba>
		received_data = std::vector<uint8_t>(buffer->begin() + *buffer_index, buffer->begin() + Size);
 8001cf4:	4422      	add	r2, r4
 8001cf6:	a807      	add	r0, sp, #28
 8001cf8:	f7ff f8c2 	bl	8000e80 <_ZNSt6vectorIhSaIhEEC1IN9__gnu_cxx17__normal_iteratorIPhS1_EEvEET_S7_RKS0_>
 8001cfc:	a804      	add	r0, sp, #16
 8001cfe:	a907      	add	r1, sp, #28
 8001d00:	f7fe ff92 	bl	8000c28 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 8001d04:	a807      	add	r0, sp, #28
 8001d06:	f7fe ff85 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	uint16_t processed_length = communication.Process(ID, received_data, &success);
 8001d0a:	a904      	add	r1, sp, #16
 8001d0c:	a807      	add	r0, sp, #28
 8001d0e:	f7ff f831 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8001d12:	f10d 030f 	add.w	r3, sp, #15
 8001d16:	aa07      	add	r2, sp, #28
 8001d18:	4629      	mov	r1, r5
 8001d1a:	4833      	ldr	r0, [pc, #204]	@ (8001de8 <HAL_UARTEx_RxEventCallback+0x15c>)
 8001d1c:	f011 fd42 	bl	80137a4 <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb>
 8001d20:	4604      	mov	r4, r0
 8001d22:	a807      	add	r0, sp, #28
 8001d24:	f7fe ff76 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	*buffer_index += processed_length;
 8001d28:	f8b8 3000 	ldrh.w	r3, [r8]
 8001d2c:	18e0      	adds	r0, r4, r3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001d2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d32:	b280      	uxth	r0, r0
 8001d34:	1a9b      	subs	r3, r3, r2
 8001d36:	f8a8 0000 	strh.w	r0, [r8]
	if (*buffer_index >= buffer->size())
 8001d3a:	4298      	cmp	r0, r3
		*buffer_index -= buffer->size();
 8001d3c:	bf24      	itt	cs
 8001d3e:	1ac0      	subcs	r0, r0, r3
 8001d40:	f8a8 0000 	strhcs.w	r0, [r8]
 8001d44:	e7c5      	b.n	8001cd2 <HAL_UARTEx_RxEventCallback+0x46>
		received_data = std::vector<uint8_t>(buffer->begin() + *buffer_index, buffer->end());
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	a807      	add	r0, sp, #28
 8001d4a:	f7ff f899 	bl	8000e80 <_ZNSt6vectorIhSaIhEEC1IN9__gnu_cxx17__normal_iteratorIPhS1_EEvEET_S7_RKS0_>
 8001d4e:	a907      	add	r1, sp, #28
 8001d50:	a804      	add	r0, sp, #16
 8001d52:	f7fe ff69 	bl	8000c28 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8001d56:	a807      	add	r0, sp, #28
 8001d58:	f7fe ff5c 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      : _M_current(__i) { }
 8001d5c:	f8d7 9000 	ldr.w	r9, [r7]
      { return __normal_iterator(_M_current + __n); }
 8001d60:	eb09 0b04 	add.w	fp, r9, r4
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __position, _ForwardIterator __first,
		      _ForwardIterator __last, std::forward_iterator_tag)
      {
	if (__first != __last)
 8001d64:	45cb      	cmp	fp, r9
 8001d66:	d0d0      	beq.n	8001d0a <HAL_UARTEx_RxEventCallback+0x7e>
	  {
	    const size_type __n = std::distance(__first, __last);
	    if (size_type(this->_M_impl._M_end_of_storage
 8001d68:	9b06      	ldr	r3, [sp, #24]
      : _M_current(__i) { }
 8001d6a:	e9dd a604 	ldrd	sl, r6, [sp, #16]
			  - this->_M_impl._M_finish) >= __n)
 8001d6e:	1b9a      	subs	r2, r3, r6
	    if (size_type(this->_M_impl._M_end_of_storage
 8001d70:	42a2      	cmp	r2, r4
 8001d72:	d310      	bcc.n	8001d96 <HAL_UARTEx_RxEventCallback+0x10a>
			      _Category>::__copy_m(__first, __last, __result);
 8001d74:	4632      	mov	r2, r6
 8001d76:	4659      	mov	r1, fp
 8001d78:	4648      	mov	r0, r9
 8001d7a:	f7fe ffef 	bl	8000d5c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		    std::advance(__mid, __elems_after);
		    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
		    std::__uninitialized_copy_a(__mid, __last,
						this->_M_impl._M_finish,
						_M_get_Tp_allocator());
		    this->_M_impl._M_finish += __n - __elems_after;
 8001d7e:	1932      	adds	r2, r6, r4
 8001d80:	4631      	mov	r1, r6
 8001d82:	4630      	mov	r0, r6
 8001d84:	9205      	str	r2, [sp, #20]
 8001d86:	f7ff ff75 	bl	8001c74 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8001d8a:	4632      	mov	r2, r6
 8001d8c:	4649      	mov	r1, r9
 8001d8e:	4648      	mov	r0, r9
 8001d90:	f7fe ffe4 	bl	8000d5c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8001d94:	e7b9      	b.n	8001d0a <HAL_UARTEx_RxEventCallback+0x7e>
		// reachable.
		pointer __old_start = this->_M_impl._M_start;
		pointer __old_finish = this->_M_impl._M_finish;

		const size_type __len =
		  _M_check_len(__n, "vector::_M_range_insert");
 8001d96:	4621      	mov	r1, r4
 8001d98:	4a14      	ldr	r2, [pc, #80]	@ (8001dec <HAL_UARTEx_RxEventCallback+0x160>)
 8001d9a:	a804      	add	r0, sp, #16
 8001d9c:	9301      	str	r3, [sp, #4]
 8001d9e:	f7fe ff5a 	bl	8000c56 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8001da2:	9000      	str	r0, [sp, #0]
		pointer __new_start(this->_M_allocate(__len));
 8001da4:	f7fe fe22 	bl	80009ec <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
 8001da8:	4631      	mov	r1, r6
 8001daa:	4602      	mov	r2, r0
 8001dac:	4604      	mov	r4, r0
 8001dae:	4650      	mov	r0, sl
 8001db0:	f7ff ff60 	bl	8001c74 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8001db4:	4659      	mov	r1, fp
 8001db6:	4602      	mov	r2, r0
 8001db8:	4648      	mov	r0, r9
 8001dba:	f7fe ffcf 	bl	8000d5c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8001dbe:	4631      	mov	r1, r6
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	4630      	mov	r0, r6
 8001dc4:	f7ff ff56 	bl	8001c74 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8001dc8:	4606      	mov	r6, r0
	if (__p)
 8001dca:	f1ba 0f00 	cmp.w	sl, #0
 8001dce:	d005      	beq.n	8001ddc <HAL_UARTEx_RxEventCallback+0x150>
 8001dd0:	9b01      	ldr	r3, [sp, #4]
 8001dd2:	4650      	mov	r0, sl
 8001dd4:	eba3 010a 	sub.w	r1, r3, sl
 8001dd8:	f018 fcec 	bl	801a7b4 <_ZdlPvj>
		_GLIBCXX_ASAN_ANNOTATE_REINIT;
		_M_deallocate(__old_start,
			      this->_M_impl._M_end_of_storage - __old_start);
		this->_M_impl._M_start = __new_start;
		this->_M_impl._M_finish = __new_finish;
		this->_M_impl._M_end_of_storage = __new_start + __len;
 8001ddc:	9b00      	ldr	r3, [sp, #0]
		this->_M_impl._M_finish = __new_finish;
 8001dde:	e9cd 4604 	strd	r4, r6, [sp, #16]
		this->_M_impl._M_end_of_storage = __new_start + __len;
 8001de2:	441c      	add	r4, r3
 8001de4:	9406      	str	r4, [sp, #24]
 8001de6:	e790      	b.n	8001d0a <HAL_UARTEx_RxEventCallback+0x7e>
 8001de8:	24001664 	.word	0x24001664
 8001dec:	0801b1c5 	.word	0x0801b1c5

08001df0 <_ZN4LEDSD1Ev>:
    uint16_t G_address;
    uint16_t B_address;
};

// LEDS class used to control the LED
class LEDS {
 8001df0:	b570      	push	{r4, r5, r6, lr}
 8001df2:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8001df4:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
	if (__p)
 8001df6:	b118      	cbz	r0, 8001e00 <_ZN4LEDSD1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001df8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001dfa:	1a09      	subs	r1, r1, r0
 8001dfc:	f018 fcda 	bl	801a7b4 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8001e00:	6a20      	ldr	r0, [r4, #32]
	if (__p)
 8001e02:	b120      	cbz	r0, 8001e0e <_ZN4LEDSD1Ev+0x1e>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001e04:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001e06:	1a09      	subs	r1, r1, r0
 8001e08:	1109      	asrs	r1, r1, #4
 8001e0a:	f7fe fdec 	bl	80009e6 <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001e0e:	6960      	ldr	r0, [r4, #20]
	if (__p)
 8001e10:	b120      	cbz	r0, 8001e1c <_ZN4LEDSD1Ev+0x2c>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001e12:	69e1      	ldr	r1, [r4, #28]
 8001e14:	1a09      	subs	r1, r1, r0
 8001e16:	1109      	asrs	r1, r1, #4
 8001e18:	f7fe fde5 	bl	80009e6 <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001e1c:	e9d4 5602 	ldrd	r5, r6, [r4, #8]
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
 8001e20:	42ae      	cmp	r6, r5
 8001e22:	d107      	bne.n	8001e34 <_ZN4LEDSD1Ev+0x44>
	_M_deallocate(_M_impl._M_start,
 8001e24:	68a0      	ldr	r0, [r4, #8]
	if (__p)
 8001e26:	b118      	cbz	r0, 8001e30 <_ZN4LEDSD1Ev+0x40>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001e28:	6921      	ldr	r1, [r4, #16]
 8001e2a:	1a09      	subs	r1, r1, r0
 8001e2c:	f018 fcc2 	bl	801a7b4 <_ZdlPvj>
 8001e30:	4620      	mov	r0, r4
 8001e32:	bd70      	pop	{r4, r5, r6, pc}
      }
 8001e34:	f105 0010 	add.w	r0, r5, #16
 8001e38:	3520      	adds	r5, #32
 8001e3a:	f7fe feeb 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8001e3e:	e7ef      	b.n	8001e20 <_ZN4LEDSD1Ev+0x30>

08001e40 <_ZN13CommunicationD1Ev>:

	std::vector<uint8_t> data; // TODO, set as the register type with template
};

// Communication Class to communication with other modules
class Communication {
 8001e40:	b570      	push	{r4, r5, r6, lr}
 8001e42:	4604      	mov	r4, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001e44:	e9d0 560c 	ldrd	r5, r6, [r0, #48]	@ 0x30
 8001e48:	42ae      	cmp	r6, r5
 8001e4a:	d112      	bne.n	8001e72 <_ZN13CommunicationD1Ev+0x32>
	_M_deallocate(_M_impl._M_start,
 8001e4c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
	if (__p)
 8001e4e:	b118      	cbz	r0, 8001e58 <_ZN13CommunicationD1Ev+0x18>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001e50:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8001e52:	1a09      	subs	r1, r1, r0
 8001e54:	f018 fcae 	bl	801a7b4 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8001e58:	6a60      	ldr	r0, [r4, #36]	@ 0x24
	if (__p)
 8001e5a:	b120      	cbz	r0, 8001e66 <_ZN13CommunicationD1Ev+0x26>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001e5c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8001e5e:	1a09      	subs	r1, r1, r0
 8001e60:	1089      	asrs	r1, r1, #2
 8001e62:	f7fe fdbd 	bl	80009e0 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
      }
 8001e66:	f104 0018 	add.w	r0, r4, #24
 8001e6a:	f7fe fed3 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8001e6e:	4620      	mov	r0, r4
 8001e70:	bd70      	pop	{r4, r5, r6, pc}
 8001e72:	1d28      	adds	r0, r5, #4
 8001e74:	3514      	adds	r5, #20
 8001e76:	f7fe fecd 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8001e7a:	e7e5      	b.n	8001e48 <_ZN13CommunicationD1Ev+0x8>

08001e7c <_ZN17MasterSubscribersD1Ev>:
	std::vector<SubscriberInterface> interfaces;    // interfaces associated to remote_registers (index by index)
	std::vector<uint8_t> filters;					// list of module address filters
};

// MasterSubscribers class used to receive published data from other modules
class MasterSubscribers {
 8001e7c:	b570      	push	{r4, r5, r6, lr}
 8001e7e:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8001e80:	6980      	ldr	r0, [r0, #24]
	if (__p)
 8001e82:	b120      	cbz	r0, 8001e8e <_ZN17MasterSubscribersD1Ev+0x12>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001e84:	6a21      	ldr	r1, [r4, #32]
 8001e86:	1a09      	subs	r1, r1, r0
 8001e88:	1089      	asrs	r1, r1, #2
 8001e8a:	f7fe fda9 	bl	80009e0 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001e8e:	e9d4 5603 	ldrd	r5, r6, [r4, #12]
 8001e92:	42ae      	cmp	r6, r5
 8001e94:	d107      	bne.n	8001ea6 <_ZN17MasterSubscribersD1Ev+0x2a>
	_M_deallocate(_M_impl._M_start,
 8001e96:	68e0      	ldr	r0, [r4, #12]
	if (__p)
 8001e98:	b118      	cbz	r0, 8001ea2 <_ZN17MasterSubscribersD1Ev+0x26>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001e9a:	6961      	ldr	r1, [r4, #20]
 8001e9c:	1a09      	subs	r1, r1, r0
 8001e9e:	f018 fc89 	bl	801a7b4 <_ZdlPvj>
 8001ea2:	4620      	mov	r0, r4
 8001ea4:	bd70      	pop	{r4, r5, r6, pc}
      }
 8001ea6:	f105 001c 	add.w	r0, r5, #28
 8001eaa:	f7fe feb3 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	_M_deallocate(_M_impl._M_start,
 8001eae:	6928      	ldr	r0, [r5, #16]
	if (__p)
 8001eb0:	b118      	cbz	r0, 8001eba <_ZN17MasterSubscribersD1Ev+0x3e>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001eb2:	69a9      	ldr	r1, [r5, #24]
 8001eb4:	1a09      	subs	r1, r1, r0
 8001eb6:	f018 fc7d 	bl	801a7b4 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8001eba:	6868      	ldr	r0, [r5, #4]
	if (__p)
 8001ebc:	b118      	cbz	r0, 8001ec6 <_ZN17MasterSubscribersD1Ev+0x4a>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001ebe:	68e9      	ldr	r1, [r5, #12]
 8001ec0:	1a09      	subs	r1, r1, r0
 8001ec2:	f018 fc77 	bl	801a7b4 <_ZdlPvj>
 8001ec6:	3528      	adds	r5, #40	@ 0x28
 8001ec8:	e7e3      	b.n	8001e92 <_ZN17MasterSubscribersD1Ev+0x16>

08001eca <_ZN9RegistersD1Ev>:
	bool (*write)(void*, uint16_t, T*, uint16_t);	// write callback
	bool (*read)(void*, uint16_t, T**, uint16_t*);	// read callback
};

// Registers class used to interface memory addresses to memory pointers and / or callbacks
class Registers {
 8001eca:	b510      	push	{r4, lr}
 8001ecc:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8001ece:	f8d0 00a4 	ldr.w	r0, [r0, #164]	@ 0xa4
	if (__p)
 8001ed2:	b128      	cbz	r0, 8001ee0 <_ZN9RegistersD1Ev+0x16>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001ed4:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 8001ed8:	1a09      	subs	r1, r1, r0
 8001eda:	1109      	asrs	r1, r1, #4
 8001edc:	f7fe fd83 	bl	80009e6 <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001ee0:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
	if (__p)
 8001ee4:	b128      	cbz	r0, 8001ef2 <_ZN9RegistersD1Ev+0x28>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001ee6:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 8001eea:	1a09      	subs	r1, r1, r0
 8001eec:	1109      	asrs	r1, r1, #4
 8001eee:	f7fe fd7a 	bl	80009e6 <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001ef2:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
	if (__p)
 8001ef6:	b128      	cbz	r0, 8001f04 <_ZN9RegistersD1Ev+0x3a>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001ef8:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8001efc:	1a09      	subs	r1, r1, r0
 8001efe:	1109      	asrs	r1, r1, #4
 8001f00:	f7fe fd71 	bl	80009e6 <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001f04:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
	if (__p)
 8001f08:	b128      	cbz	r0, 8001f16 <_ZN9RegistersD1Ev+0x4c>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001f0a:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 8001f0e:	1a09      	subs	r1, r1, r0
 8001f10:	1109      	asrs	r1, r1, #4
 8001f12:	f7fe fd68 	bl	80009e6 <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001f16:	6f60      	ldr	r0, [r4, #116]	@ 0x74
	if (__p)
 8001f18:	b120      	cbz	r0, 8001f24 <_ZN9RegistersD1Ev+0x5a>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001f1a:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8001f1c:	1a09      	subs	r1, r1, r0
 8001f1e:	1109      	asrs	r1, r1, #4
 8001f20:	f7fe fd61 	bl	80009e6 <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001f24:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
	if (__p)
 8001f26:	b120      	cbz	r0, 8001f32 <_ZN9RegistersD1Ev+0x68>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001f28:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8001f2a:	1a09      	subs	r1, r1, r0
 8001f2c:	1109      	asrs	r1, r1, #4
 8001f2e:	f7fe fd5a 	bl	80009e6 <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001f32:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
	if (__p)
 8001f34:	b120      	cbz	r0, 8001f40 <_ZN9RegistersD1Ev+0x76>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001f36:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8001f38:	1a09      	subs	r1, r1, r0
 8001f3a:	1109      	asrs	r1, r1, #4
 8001f3c:	f7fe fd53 	bl	80009e6 <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001f40:	6d20      	ldr	r0, [r4, #80]	@ 0x50
	if (__p)
 8001f42:	b120      	cbz	r0, 8001f4e <_ZN9RegistersD1Ev+0x84>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001f44:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8001f46:	1a09      	subs	r1, r1, r0
 8001f48:	1109      	asrs	r1, r1, #4
 8001f4a:	f7fe fd4c 	bl	80009e6 <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001f4e:	6c60      	ldr	r0, [r4, #68]	@ 0x44
	if (__p)
 8001f50:	b120      	cbz	r0, 8001f5c <_ZN9RegistersD1Ev+0x92>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001f52:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8001f54:	1a09      	subs	r1, r1, r0
 8001f56:	1109      	asrs	r1, r1, #4
 8001f58:	f7fe fd45 	bl	80009e6 <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001f5c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
	if (__p)
 8001f5e:	b120      	cbz	r0, 8001f6a <_ZN9RegistersD1Ev+0xa0>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001f60:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8001f62:	1a09      	subs	r1, r1, r0
 8001f64:	1109      	asrs	r1, r1, #4
 8001f66:	f7fe fd3e 	bl	80009e6 <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001f6a:	6860      	ldr	r0, [r4, #4]
	if (__p)
 8001f6c:	b120      	cbz	r0, 8001f78 <_ZN9RegistersD1Ev+0xae>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001f6e:	68e1      	ldr	r1, [r4, #12]
 8001f70:	1a09      	subs	r1, r1, r0
 8001f72:	1109      	asrs	r1, r1, #4
 8001f74:	f7fe fd37 	bl	80009e6 <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
 8001f78:	4620      	mov	r0, r4
 8001f7a:	bd10      	pop	{r4, pc}

08001f7c <_ZNSt6vectorI9PublisherSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8001f7c:	b570      	push	{r4, r5, r6, lr}
 8001f7e:	4604      	mov	r4, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001f80:	e9d0 5600 	ldrd	r5, r6, [r0]
 8001f84:	42ae      	cmp	r6, r5
 8001f86:	d107      	bne.n	8001f98 <_ZNSt6vectorI9PublisherSaIS0_EED1Ev+0x1c>
	_M_deallocate(_M_impl._M_start,
 8001f88:	6820      	ldr	r0, [r4, #0]
	if (__p)
 8001f8a:	b118      	cbz	r0, 8001f94 <_ZNSt6vectorI9PublisherSaIS0_EED1Ev+0x18>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001f8c:	68a1      	ldr	r1, [r4, #8]
 8001f8e:	1a09      	subs	r1, r1, r0
 8001f90:	f018 fc10 	bl	801a7b4 <_ZdlPvj>
      }
 8001f94:	4620      	mov	r0, r4
 8001f96:	bd70      	pop	{r4, r5, r6, pc}
	_M_deallocate(_M_impl._M_start,
 8001f98:	6968      	ldr	r0, [r5, #20]
	if (__p)
 8001f9a:	b120      	cbz	r0, 8001fa6 <_ZNSt6vectorI9PublisherSaIS0_EED1Ev+0x2a>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001f9c:	69e9      	ldr	r1, [r5, #28]
 8001f9e:	1a09      	subs	r1, r1, r0
 8001fa0:	1089      	asrs	r1, r1, #2
 8001fa2:	f7fe fd1d 	bl	80009e0 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001fa6:	68a8      	ldr	r0, [r5, #8]
	if (__p)
 8001fa8:	b118      	cbz	r0, 8001fb2 <_ZNSt6vectorI9PublisherSaIS0_EED1Ev+0x36>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001faa:	6929      	ldr	r1, [r5, #16]
 8001fac:	1a09      	subs	r1, r1, r0
 8001fae:	f018 fc01 	bl	801a7b4 <_ZdlPvj>
 8001fb2:	3520      	adds	r5, #32
 8001fb4:	e7e6      	b.n	8001f84 <_ZNSt6vectorI9PublisherSaIS0_EED1Ev+0x8>

08001fb6 <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8001fb6:	b570      	push	{r4, r5, r6, lr}
 8001fb8:	4604      	mov	r4, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001fba:	e9d0 5600 	ldrd	r5, r6, [r0]
 8001fbe:	42ae      	cmp	r6, r5
 8001fc0:	d107      	bne.n	8001fd2 <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev+0x1c>
	_M_deallocate(_M_impl._M_start,
 8001fc2:	6820      	ldr	r0, [r4, #0]
	if (__p)
 8001fc4:	b118      	cbz	r0, 8001fce <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev+0x18>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001fc6:	68a1      	ldr	r1, [r4, #8]
 8001fc8:	1a09      	subs	r1, r1, r0
 8001fca:	f018 fbf3 	bl	801a7b4 <_ZdlPvj>
      }
 8001fce:	4620      	mov	r0, r4
 8001fd0:	bd70      	pop	{r4, r5, r6, pc}
 8001fd2:	4628      	mov	r0, r5
 8001fd4:	350c      	adds	r5, #12
 8001fd6:	f7fe fe1d 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8001fda:	e7f0      	b.n	8001fbe <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev+0x8>

08001fdc <_ZN21CommunicationProtocolD1Ev>:
	uint8_t target_address;
	uint8_t source_address;
};

// CommunicationProtocol class used as a basis to derive custom Protocols
class CommunicationProtocol {
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800200c <_ZN21CommunicationProtocolD1Ev+0x30>)
 8001fde:	b510      	push	{r4, lr}
 8001fe0:	4604      	mov	r4, r0
 8001fe2:	6003      	str	r3, [r0, #0]
	_M_deallocate(_M_impl._M_start,
 8001fe4:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
	if (__p)
 8001fe6:	b118      	cbz	r0, 8001ff0 <_ZN21CommunicationProtocolD1Ev+0x14>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001fe8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001fea:	1a09      	subs	r1, r1, r0
 8001fec:	f018 fbe2 	bl	801a7b4 <_ZdlPvj>
 8001ff0:	f104 0020 	add.w	r0, r4, #32
 8001ff4:	f7ff ffdf 	bl	8001fb6 <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev>
      }
 8001ff8:	f104 0010 	add.w	r0, r4, #16
 8001ffc:	f7fe fe0a 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8002000:	1d20      	adds	r0, r4, #4
 8002002:	f7ff ffd8 	bl	8001fb6 <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev>
 8002006:	4620      	mov	r0, r4
 8002008:	bd10      	pop	{r4, pc}
 800200a:	bf00      	nop
 800200c:	0801b448 	.word	0x0801b448

08002010 <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8002010:	b510      	push	{r4, lr}
 8002012:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8002014:	6800      	ldr	r0, [r0, #0]
	if (__p)
 8002016:	b120      	cbz	r0, 8002022 <_ZNSt12_Vector_baseIfSaIfEED1Ev+0x12>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002018:	68a1      	ldr	r1, [r4, #8]
 800201a:	1a09      	subs	r1, r1, r0
 800201c:	1089      	asrs	r1, r1, #2
 800201e:	f7fe fcdf 	bl	80009e0 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
      }
 8002022:	4620      	mov	r0, r4
 8002024:	bd10      	pop	{r4, pc}

08002026 <_ZNSt12_Vector_baseI9I2CAccessSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8002026:	b510      	push	{r4, lr}
 8002028:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 800202a:	6800      	ldr	r0, [r0, #0]
	if (__p)
 800202c:	b118      	cbz	r0, 8002036 <_ZNSt12_Vector_baseI9I2CAccessSaIS0_EED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800202e:	68a1      	ldr	r1, [r4, #8]
 8002030:	1a09      	subs	r1, r1, r0
 8002032:	f018 fbbf 	bl	801a7b4 <_ZdlPvj>
      }
 8002036:	4620      	mov	r0, r4
 8002038:	bd10      	pop	{r4, pc}

0800203a <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800203a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800203e:	4604      	mov	r4, r0
 8002040:	460f      	mov	r7, r1
	  for (; __first != __last; ++__first)
 8002042:	42bc      	cmp	r4, r7
 8002044:	d101      	bne.n	800204a <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_+0x10>
	    std::_Destroy(std::__addressof(*__first));
	}
 8002046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800204a:	e9d4 5803 	ldrd	r5, r8, [r4, #12]
	  for (; __first != __last; ++__first)
 800204e:	45a8      	cmp	r8, r5
 8002050:	d107      	bne.n	8002062 <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_+0x28>
	_M_deallocate(_M_impl._M_start,
 8002052:	68e0      	ldr	r0, [r4, #12]
	if (__p)
 8002054:	b118      	cbz	r0, 800205e <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_+0x24>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002056:	6961      	ldr	r1, [r4, #20]
 8002058:	1a09      	subs	r1, r1, r0
 800205a:	f018 fbab 	bl	801a7b4 <_ZdlPvj>
 800205e:	3418      	adds	r4, #24
 8002060:	e7ef      	b.n	8002042 <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_+0x8>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002062:	e9d5 6905 	ldrd	r6, r9, [r5, #20]
 8002066:	45b1      	cmp	r9, r6
 8002068:	d107      	bne.n	800207a <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_+0x40>
	_M_deallocate(_M_impl._M_start,
 800206a:	6968      	ldr	r0, [r5, #20]
	if (__p)
 800206c:	b118      	cbz	r0, 8002076 <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_+0x3c>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800206e:	69e9      	ldr	r1, [r5, #28]
 8002070:	1a09      	subs	r1, r1, r0
 8002072:	f018 fb9f 	bl	801a7b4 <_ZdlPvj>
 8002076:	3528      	adds	r5, #40	@ 0x28
 8002078:	e7e9      	b.n	800204e <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_+0x14>
      }
 800207a:	f106 000c 	add.w	r0, r6, #12
 800207e:	3618      	adds	r6, #24
 8002080:	f7ff ffd1 	bl	8002026 <_ZNSt12_Vector_baseI9I2CAccessSaIS0_EED1Ev>
 8002084:	e7ef      	b.n	8002066 <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_+0x2c>

08002086 <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002086:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002088:	4604      	mov	r4, r0
 800208a:	460e      	mov	r6, r1
	  for (; __first != __last; ++__first)
 800208c:	42b4      	cmp	r4, r6
 800208e:	d100      	bne.n	8002092 <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_+0xc>
	}
 8002090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002092:	e9d4 571c 	ldrd	r5, r7, [r4, #112]	@ 0x70
	  for (; __first != __last; ++__first)
 8002096:	42af      	cmp	r7, r5
 8002098:	d118      	bne.n	80020cc <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_+0x46>
	_M_deallocate(_M_impl._M_start,
 800209a:	6f20      	ldr	r0, [r4, #112]	@ 0x70
	if (__p)
 800209c:	b118      	cbz	r0, 80020a6 <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_+0x20>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800209e:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 80020a0:	1a09      	subs	r1, r1, r0
 80020a2:	f018 fb87 	bl	801a7b4 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 80020a6:	6e60      	ldr	r0, [r4, #100]	@ 0x64
	if (__p)
 80020a8:	b120      	cbz	r0, 80020b4 <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_+0x2e>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80020aa:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 80020ac:	1a09      	subs	r1, r1, r0
 80020ae:	1089      	asrs	r1, r1, #2
 80020b0:	f7fe fc96 	bl	80009e0 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 80020b4:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	@ 0x58
 80020b8:	f7ff ffbf 	bl	800203a <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_>
	_M_deallocate(_M_impl._M_start,
 80020bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
	if (__p)
 80020be:	b118      	cbz	r0, 80020c8 <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_+0x42>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80020c0:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 80020c2:	1a09      	subs	r1, r1, r0
 80020c4:	f018 fb76 	bl	801a7b4 <_ZdlPvj>
	  for (; __first != __last; ++__first)
 80020c8:	347c      	adds	r4, #124	@ 0x7c
 80020ca:	e7df      	b.n	800208c <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_+0x6>
      }
 80020cc:	f105 0014 	add.w	r0, r5, #20
 80020d0:	3520      	adds	r5, #32
 80020d2:	f7ff ffa8 	bl	8002026 <_ZNSt12_Vector_baseI9I2CAccessSaIS0_EED1Ev>
 80020d6:	e7de      	b.n	8002096 <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_+0x10>

080020d8 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80020d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80020dc:	e9d0 8a00 	ldrd	r8, sl, [r0]
 80020e0:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 80020e2:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80020e6:	ebaa 0208 	sub.w	r2, sl, r8
 80020ea:	4607      	mov	r7, r0
 80020ec:	4689      	mov	r9, r1
	if (max_size() - size() < __n)
 80020ee:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80020f2:	ea4f 04a2 	mov.w	r4, r2, asr #2
	if (max_size() - size() < __n)
 80020f6:	d102      	bne.n	80020fe <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 80020f8:	481f      	ldr	r0, [pc, #124]	@ (8002178 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa0>)
 80020fa:	f018 fc35 	bl	801a968 <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 80020fe:	45c2      	cmp	sl, r8
 8002100:	bf14      	ite	ne
 8002102:	4622      	movne	r2, r4
 8002104:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 8002106:	eba1 0508 	sub.w	r5, r1, r8
 800210a:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800210c:	d22f      	bcs.n	800216e <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x96>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800210e:	b384      	cbz	r4, 8002172 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8002110:	429c      	cmp	r4, r3
 8002112:	bf28      	it	cs
 8002114:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8002116:	00a0      	lsls	r0, r4, #2
 8002118:	f018 fb71 	bl	801a7fe <_Znwj>
 800211c:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800211e:	f8db 3000 	ldr.w	r3, [fp]
      if (__count > 0)
 8002122:	2d00      	cmp	r5, #0
 8002124:	5173      	str	r3, [r6, r5]
 8002126:	dd04      	ble.n	8002132 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x5a>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8002128:	462a      	mov	r2, r5
 800212a:	4641      	mov	r1, r8
 800212c:	4630      	mov	r0, r6
 800212e:	f018 fe9d 	bl	801ae6c <memmove>
      ptrdiff_t __count = __last - __first;
 8002132:	ebaa 0a09 	sub.w	sl, sl, r9
	      ++__new_finish;
 8002136:	3504      	adds	r5, #4
      if (__count > 0)
 8002138:	f1ba 0f00 	cmp.w	sl, #0
 800213c:	4435      	add	r5, r6
 800213e:	dd04      	ble.n	800214a <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x72>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8002140:	4652      	mov	r2, sl
 8002142:	4649      	mov	r1, r9
 8002144:	4628      	mov	r0, r5
 8002146:	f018 ff89 	bl	801b05c <memcpy>
      return __result + __count;
 800214a:	4455      	add	r5, sl
	if (__p)
 800214c:	f1b8 0f00 	cmp.w	r8, #0
 8002150:	d006      	beq.n	8002160 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x88>
		    this->_M_impl._M_end_of_storage - __old_start);
 8002152:	68b9      	ldr	r1, [r7, #8]
 8002154:	4640      	mov	r0, r8
 8002156:	eba1 0108 	sub.w	r1, r1, r8
 800215a:	1089      	asrs	r1, r1, #2
 800215c:	f7fe fc40 	bl	80009e0 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
      this->_M_impl._M_finish = __new_finish;
 8002160:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8002164:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8002168:	60be      	str	r6, [r7, #8]
    }
 800216a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800216e:	461c      	mov	r4, r3
 8002170:	e7d1      	b.n	8002116 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8002172:	4626      	mov	r6, r4
 8002174:	e7d3      	b.n	800211e <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
 8002176:	bf00      	nop
 8002178:	0801b17a 	.word	0x0801b17a

0800217c <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12AddInterfaceEhPS0_>:
void TemplateCommunicationProtocol<H>::AddInterface(uint8_t ID, H* interface) {
 800217c:	b513      	push	{r0, r1, r4, lr}
 800217e:	4604      	mov	r4, r0
 8002180:	9201      	str	r2, [sp, #4]
	AddInterfaceID(ID);
 8002182:	f013 fa9b 	bl	80156bc <_ZN21CommunicationProtocol14AddInterfaceIDEh>
	AddInterfaceBuffer();
 8002186:	4620      	mov	r0, r4
 8002188:	f013 fc32 	bl	80159f0 <_ZN21CommunicationProtocol18AddInterfaceBufferEv>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800218c:	e9d4 130f 	ldrd	r1, r3, [r4, #60]	@ 0x3c
 8002190:	4299      	cmp	r1, r3
 8002192:	d005      	beq.n	80021a0 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12AddInterfaceEhPS0_+0x24>
 8002194:	9b01      	ldr	r3, [sp, #4]
 8002196:	f841 3b04 	str.w	r3, [r1], #4
	    ++this->_M_impl._M_finish;
 800219a:	63e1      	str	r1, [r4, #60]	@ 0x3c
}
 800219c:	b002      	add	sp, #8
 800219e:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), __x);
 80021a0:	aa01      	add	r2, sp, #4
 80021a2:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 80021a6:	f7ff ff97 	bl	80020d8 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
 80021aa:	e7f7      	b.n	800219c <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12AddInterfaceEhPS0_+0x20>

080021ac <_GLOBAL__sub_I_hadc1>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80021ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
Registers registers;
 80021b0:	4c1f      	ldr	r4, [pc, #124]	@ (8002230 <_GLOBAL__sub_I_hadc1+0x84>)
}
 80021b2:	b087      	sub	sp, #28
MasterSubscribers subscribers;
 80021b4:	4d1f      	ldr	r5, [pc, #124]	@ (8002234 <_GLOBAL__sub_I_hadc1+0x88>)
Registers registers;
 80021b6:	4620      	mov	r0, r4
Communication communication;
 80021b8:	4e1f      	ldr	r6, [pc, #124]	@ (8002238 <_GLOBAL__sub_I_hadc1+0x8c>)
Registers registers;
 80021ba:	f015 ff7b 	bl	80180b4 <_ZN9RegistersC1Ev>
UARTProtocol protocol_uart;
 80021be:	481f      	ldr	r0, [pc, #124]	@ (800223c <_GLOBAL__sub_I_hadc1+0x90>)
 80021c0:	f014 f896 	bl	80162f0 <_ZN12UARTProtocolC1Ev>
CANProtocol protocol_canfd;
 80021c4:	481e      	ldr	r0, [pc, #120]	@ (8002240 <_GLOBAL__sub_I_hadc1+0x94>)
 80021c6:	f013 fc77 	bl	8015ab8 <_ZN11CANProtocolC1Ev>
Services services;
 80021ca:	4f1e      	ldr	r7, [pc, #120]	@ (8002244 <_GLOBAL__sub_I_hadc1+0x98>)
MasterSubscribers subscribers;
 80021cc:	4628      	mov	r0, r5
Publishers publishers;
 80021ce:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 8002258 <_GLOBAL__sub_I_hadc1+0xac>
MasterSubscribers subscribers;
 80021d2:	f017 f81d 	bl	8019210 <_ZN17MasterSubscribersC1Ev>
Communication communication;
 80021d6:	4630      	mov	r0, r6
 80021d8:	f00c fe3a 	bl	800ee50 <_ZN13CommunicationC1Ev>
HardwareDelay hardware_delay(&htim4);
 80021dc:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 800225c <_GLOBAL__sub_I_hadc1+0xb0>
Services services;
 80021e0:	4638      	mov	r0, r7
Sensors sensors;
 80021e2:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8002260 <_GLOBAL__sub_I_hadc1+0xb4>
Services services;
 80021e6:	f016 feb0 	bl	8018f4a <_ZN8ServicesC1Ev>
Publishers publishers;
 80021ea:	4640      	mov	r0, r8
 80021ec:	f014 fc9f 	bl	8016b2e <_ZN10PublishersC1Ev>
LEDS leds;
 80021f0:	f8df b070 	ldr.w	fp, [pc, #112]	@ 8002264 <_GLOBAL__sub_I_hadc1+0xb8>
HardwareDelay hardware_delay(&htim4);
 80021f4:	4914      	ldr	r1, [pc, #80]	@ (8002248 <_GLOBAL__sub_I_hadc1+0x9c>)
 80021f6:	4648      	mov	r0, r9
 80021f8:	f011 fb33 	bl	8013862 <_ZN13HardwareDelayC1EP17TIM_HandleTypeDef>
Sensors sensors;
 80021fc:	4650      	mov	r0, sl
 80021fe:	f016 fa13 	bl	8018628 <_ZN7SensorsC1Ev>
LEDS leds;
 8002202:	4658      	mov	r0, fp
 8002204:	f011 fc58 	bl	8013ab8 <_ZN4LEDSC1Ev>
MotionGenerator motion_generator;
 8002208:	4810      	ldr	r0, [pc, #64]	@ (800224c <_GLOBAL__sub_I_hadc1+0xa0>)
 800220a:	f012 fc37 	bl	8014a7c <_ZN15MotionGeneratorC1Ev>
PlatformSensors platform_sensors;
 800220e:	4810      	ldr	r0, [pc, #64]	@ (8002250 <_GLOBAL__sub_I_hadc1+0xa4>)
 8002210:	f00c fb36 	bl	800e880 <_ZN15PlatformSensorsC1Ev>
User user(&registers, &subscribers, &communication, &services, &publishers, &hardware_delay, &sensors, &leds);
 8002214:	4633      	mov	r3, r6
 8002216:	462a      	mov	r2, r5
 8002218:	4621      	mov	r1, r4
 800221a:	9700      	str	r7, [sp, #0]
 800221c:	480d      	ldr	r0, [pc, #52]	@ (8002254 <_GLOBAL__sub_I_hadc1+0xa8>)
 800221e:	e9cd ab03 	strd	sl, fp, [sp, #12]
 8002222:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8002226:	f017 fde1 	bl	8019dec <_ZN4UserC1EP9RegistersP17MasterSubscribersP13CommunicationP8ServicesP10PublishersP13HardwareDelayP7SensorsP4LEDS>
}
 800222a:	b007      	add	sp, #28
 800222c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002230:	24001780 	.word	0x24001780
 8002234:	240016a0 	.word	0x240016a0
 8002238:	24001664 	.word	0x24001664
 800223c:	24001718 	.word	0x24001718
 8002240:	240016c4 	.word	0x240016c4
 8002244:	24000220 	.word	0x24000220
 8002248:	240022c0 	.word	0x240022c0
 800224c:	240000e0 	.word	0x240000e0
 8002250:	240000b8 	.word	0x240000b8
 8002254:	24000098 	.word	0x24000098
 8002258:	24000208 	.word	0x24000208
 800225c:	240001ec 	.word	0x240001ec
 8002260:	24000180 	.word	0x24000180
 8002264:	24000148 	.word	0x24000148

08002268 <_GLOBAL__sub_D_hadc1>:
 8002268:	b510      	push	{r4, lr}
      }
 800226a:	4832      	ldr	r0, [pc, #200]	@ (8002334 <_GLOBAL__sub_D_hadc1+0xcc>)
 800226c:	f7ff fed0 	bl	8002010 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8002270:	4831      	ldr	r0, [pc, #196]	@ (8002338 <_GLOBAL__sub_D_hadc1+0xd0>)
 8002272:	f7ff fecd 	bl	8002010 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
	_M_deallocate(_M_impl._M_start,
 8002276:	4c31      	ldr	r4, [pc, #196]	@ (800233c <_GLOBAL__sub_D_hadc1+0xd4>)
      }
 8002278:	4831      	ldr	r0, [pc, #196]	@ (8002340 <_GLOBAL__sub_D_hadc1+0xd8>)
 800227a:	f7ff fec9 	bl	8002010 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
LEDS leds;
 800227e:	4831      	ldr	r0, [pc, #196]	@ (8002344 <_GLOBAL__sub_D_hadc1+0xdc>)
 8002280:	f7ff fdb6 	bl	8001df0 <_ZN4LEDSD1Ev>
	_M_deallocate(_M_impl._M_start,
 8002284:	6d20      	ldr	r0, [r4, #80]	@ 0x50
	if (__p)
 8002286:	b118      	cbz	r0, 8002290 <_GLOBAL__sub_D_hadc1+0x28>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002288:	6da1      	ldr	r1, [r4, #88]	@ 0x58
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800228a:	1a09      	subs	r1, r1, r0
 800228c:	f018 fa92 	bl	801a7b4 <_ZdlPvj>
      }
 8002290:	482d      	ldr	r0, [pc, #180]	@ (8002348 <_GLOBAL__sub_D_hadc1+0xe0>)
 8002292:	f7ff febd 	bl	8002010 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
	__destroy(__first, __last);
 8002296:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 800229a:	f7ff fef4 	bl	8002086 <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_>
	_M_deallocate(_M_impl._M_start,
 800229e:	6920      	ldr	r0, [r4, #16]
	if (__p)
 80022a0:	b118      	cbz	r0, 80022aa <_GLOBAL__sub_D_hadc1+0x42>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80022a2:	69a1      	ldr	r1, [r4, #24]
 80022a4:	1a09      	subs	r1, r1, r0
 80022a6:	f018 fa85 	bl	801a7b4 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 80022aa:	4b28      	ldr	r3, [pc, #160]	@ (800234c <_GLOBAL__sub_D_hadc1+0xe4>)
 80022ac:	6918      	ldr	r0, [r3, #16]
	if (__p)
 80022ae:	b118      	cbz	r0, 80022b8 <_GLOBAL__sub_D_hadc1+0x50>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80022b0:	6999      	ldr	r1, [r3, #24]
 80022b2:	1a09      	subs	r1, r1, r0
 80022b4:	f018 fa7e 	bl	801a7b4 <_ZdlPvj>
	std::vector<PublishInterface> interfaces; 	// links interfaces to the publisher
	std::vector<Topic> topics;					// topics of the publisher
};

// Publishers class used to broadcast registers on the bus
class Publishers {
 80022b8:	4825      	ldr	r0, [pc, #148]	@ (8002350 <_GLOBAL__sub_D_hadc1+0xe8>)
 80022ba:	f7ff fe5f 	bl	8001f7c <_ZNSt6vectorI9PublisherSaIS0_EED1Ev>
#include <stm32h7xx_hal.h>

#include "Protocols/Communication/Core/TemplateCommunicationProtocol.hpp"

// CANProtocol class used to interface with every CANFD interface
class CANProtocol : public TemplateCommunicationProtocol<FDCAN_HandleTypeDef> {
 80022be:	4c25      	ldr	r4, [pc, #148]	@ (8002354 <_GLOBAL__sub_D_hadc1+0xec>)
Communication communication;
 80022c0:	4825      	ldr	r0, [pc, #148]	@ (8002358 <_GLOBAL__sub_D_hadc1+0xf0>)
 80022c2:	f7ff fdbd 	bl	8001e40 <_ZN13CommunicationD1Ev>
MasterSubscribers subscribers;
 80022c6:	4825      	ldr	r0, [pc, #148]	@ (800235c <_GLOBAL__sub_D_hadc1+0xf4>)
 80022c8:	f7ff fdd8 	bl	8001e7c <_ZN17MasterSubscribersD1Ev>
 80022cc:	4b24      	ldr	r3, [pc, #144]	@ (8002360 <_GLOBAL__sub_D_hadc1+0xf8>)
	_M_deallocate(_M_impl._M_start,
 80022ce:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 80022d0:	6023      	str	r3, [r4, #0]
	if (__p)
 80022d2:	b118      	cbz	r0, 80022dc <_GLOBAL__sub_D_hadc1+0x74>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80022d4:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80022d6:	1a09      	subs	r1, r1, r0
 80022d8:	f018 fa6c 	bl	801a7b4 <_ZdlPvj>
class TemplateCommunicationProtocol : public CommunicationProtocol {
 80022dc:	4b21      	ldr	r3, [pc, #132]	@ (8002364 <_GLOBAL__sub_D_hadc1+0xfc>)
	_M_deallocate(_M_impl._M_start,
 80022de:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80022e0:	6023      	str	r3, [r4, #0]
	if (__p)
 80022e2:	b120      	cbz	r0, 80022ee <_GLOBAL__sub_D_hadc1+0x86>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80022e4:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80022e6:	1a09      	subs	r1, r1, r0
 80022e8:	1089      	asrs	r1, r1, #2
 80022ea:	f7fe fb79 	bl	80009e0 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
#include "Protocols/Communication/Core/TemplateCommunicationProtocol.hpp"

#include "Definitions/CommunicationDefinition.h"

// UARTProtocol class used to interface with every UART interface
class UARTProtocol : public TemplateCommunicationProtocol<UART_HandleTypeDef> {
 80022ee:	4c1e      	ldr	r4, [pc, #120]	@ (8002368 <_GLOBAL__sub_D_hadc1+0x100>)
 80022f0:	4818      	ldr	r0, [pc, #96]	@ (8002354 <_GLOBAL__sub_D_hadc1+0xec>)
 80022f2:	f7ff fe73 	bl	8001fdc <_ZN21CommunicationProtocolD1Ev>
 80022f6:	4b1d      	ldr	r3, [pc, #116]	@ (800236c <_GLOBAL__sub_D_hadc1+0x104>)
 80022f8:	4620      	mov	r0, r4
 80022fa:	f840 3b5c 	str.w	r3, [r0], #92
      }
 80022fe:	f7fe fc89 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8002302:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8002306:	f7fe fc85 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 800230a:	f104 0044 	add.w	r0, r4, #68	@ 0x44
 800230e:	f7fe fc81 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8002312:	4b17      	ldr	r3, [pc, #92]	@ (8002370 <_GLOBAL__sub_D_hadc1+0x108>)
	_M_deallocate(_M_impl._M_start,
 8002314:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8002316:	6023      	str	r3, [r4, #0]
	if (__p)
 8002318:	b120      	cbz	r0, 8002324 <_GLOBAL__sub_D_hadc1+0xbc>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800231a:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800231c:	1a09      	subs	r1, r1, r0
 800231e:	1089      	asrs	r1, r1, #2
 8002320:	f7fe fb5e 	bl	80009e0 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
 8002324:	4810      	ldr	r0, [pc, #64]	@ (8002368 <_GLOBAL__sub_D_hadc1+0x100>)
 8002326:	f7ff fe59 	bl	8001fdc <_ZN21CommunicationProtocolD1Ev>
Registers registers;
 800232a:	4812      	ldr	r0, [pc, #72]	@ (8002374 <_GLOBAL__sub_D_hadc1+0x10c>)
 800232c:	f7ff fdcd 	bl	8001eca <_ZN9RegistersD1Ev>
}
 8002330:	bd10      	pop	{r4, pc}
 8002332:	bf00      	nop
 8002334:	24000130 	.word	0x24000130
 8002338:	24000110 	.word	0x24000110
 800233c:	24000180 	.word	0x24000180
 8002340:	24000104 	.word	0x24000104
 8002344:	24000148 	.word	0x24000148
 8002348:	2400019c 	.word	0x2400019c
 800234c:	240001ec 	.word	0x240001ec
 8002350:	24000214 	.word	0x24000214
 8002354:	240016c4 	.word	0x240016c4
 8002358:	24001664 	.word	0x24001664
 800235c:	240016a0 	.word	0x240016a0
 8002360:	0801b47c 	.word	0x0801b47c
 8002364:	0801b288 	.word	0x0801b288
 8002368:	24001718 	.word	0x24001718
 800236c:	0801b4b8 	.word	0x0801b4b8
 8002370:	0801b26c 	.word	0x0801b26c
 8002374:	24001780 	.word	0x24001780

08002378 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002378:	b500      	push	{lr}
 800237a:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800237c:	4b0a      	ldr	r3, [pc, #40]	@ (80023a8 <HAL_MspInit+0x30>)
 800237e:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8002382:	f042 0202 	orr.w	r2, r2, #2
 8002386:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 800238a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	9301      	str	r3, [sp, #4]
 8002394:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002396:	2200      	movs	r2, #0
 8002398:	210f      	movs	r1, #15
 800239a:	f06f 0001 	mvn.w	r0, #1
 800239e:	f001 fe75 	bl	800408c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023a2:	b003      	add	sp, #12
 80023a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80023a8:	58024400 	.word	0x58024400

080023ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80023ac:	b500      	push	{lr}
 80023ae:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b0:	2300      	movs	r3, #0
 80023b2:	9303      	str	r3, [sp, #12]
 80023b4:	9304      	str	r3, [sp, #16]
 80023b6:	9305      	str	r3, [sp, #20]
 80023b8:	9306      	str	r3, [sp, #24]
 80023ba:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 80023bc:	6803      	ldr	r3, [r0, #0]
 80023be:	4a1c      	ldr	r2, [pc, #112]	@ (8002430 <HAL_ADC_MspInit+0x84>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d005      	beq.n	80023d0 <HAL_ADC_MspInit+0x24>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC3)
 80023c4:	4a1b      	ldr	r2, [pc, #108]	@ (8002434 <HAL_ADC_MspInit+0x88>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d024      	beq.n	8002414 <HAL_ADC_MspInit+0x68>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80023ca:	b009      	add	sp, #36	@ 0x24
 80023cc:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC12_CLK_ENABLE();
 80023d0:	4b19      	ldr	r3, [pc, #100]	@ (8002438 <HAL_ADC_MspInit+0x8c>)
 80023d2:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 80023d6:	f042 0220 	orr.w	r2, r2, #32
 80023da:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 80023de:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 80023e2:	f002 0220 	and.w	r2, r2, #32
 80023e6:	9200      	str	r2, [sp, #0]
 80023e8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80023ee:	f042 0201 	orr.w	r2, r2, #1
 80023f2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80023f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	9301      	str	r3, [sp, #4]
 8002400:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002402:	2310      	movs	r3, #16
 8002404:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002406:	2303      	movs	r3, #3
 8002408:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800240a:	a903      	add	r1, sp, #12
 800240c:	480b      	ldr	r0, [pc, #44]	@ (800243c <HAL_ADC_MspInit+0x90>)
 800240e:	f003 ffb1 	bl	8006374 <HAL_GPIO_Init>
 8002412:	e7da      	b.n	80023ca <HAL_ADC_MspInit+0x1e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002414:	4b08      	ldr	r3, [pc, #32]	@ (8002438 <HAL_ADC_MspInit+0x8c>)
 8002416:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800241a:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800241e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002426:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800242a:	9302      	str	r3, [sp, #8]
 800242c:	9b02      	ldr	r3, [sp, #8]
}
 800242e:	e7cc      	b.n	80023ca <HAL_ADC_MspInit+0x1e>
 8002430:	40022000 	.word	0x40022000
 8002434:	58026000 	.word	0x58026000
 8002438:	58024400 	.word	0x58024400
 800243c:	58020000 	.word	0x58020000

08002440 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002440:	b500      	push	{lr}
 8002442:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002444:	2300      	movs	r3, #0
 8002446:	9305      	str	r3, [sp, #20]
 8002448:	9306      	str	r3, [sp, #24]
 800244a:	9307      	str	r3, [sp, #28]
 800244c:	9308      	str	r3, [sp, #32]
 800244e:	9309      	str	r3, [sp, #36]	@ 0x24
  if(hfdcan->Instance==FDCAN1)
 8002450:	6803      	ldr	r3, [r0, #0]
 8002452:	4a3b      	ldr	r2, [pc, #236]	@ (8002540 <HAL_FDCAN_MspInit+0x100>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d005      	beq.n	8002464 <HAL_FDCAN_MspInit+0x24>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
  else if(hfdcan->Instance==FDCAN2)
 8002458:	4a3a      	ldr	r2, [pc, #232]	@ (8002544 <HAL_FDCAN_MspInit+0x104>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d039      	beq.n	80024d2 <HAL_FDCAN_MspInit+0x92>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 800245e:	b00b      	add	sp, #44	@ 0x2c
 8002460:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002464:	4a38      	ldr	r2, [pc, #224]	@ (8002548 <HAL_FDCAN_MspInit+0x108>)
 8002466:	6813      	ldr	r3, [r2, #0]
 8002468:	3301      	adds	r3, #1
 800246a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800246c:	2b01      	cmp	r3, #1
 800246e:	d022      	beq.n	80024b6 <HAL_FDCAN_MspInit+0x76>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002470:	4b36      	ldr	r3, [pc, #216]	@ (800254c <HAL_FDCAN_MspInit+0x10c>)
 8002472:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002476:	f042 0201 	orr.w	r2, r2, #1
 800247a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800247e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	9302      	str	r3, [sp, #8]
 8002488:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800248a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800248e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002490:	2302      	movs	r3, #2
 8002492:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002494:	2303      	movs	r3, #3
 8002496:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002498:	2309      	movs	r3, #9
 800249a:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800249c:	a905      	add	r1, sp, #20
 800249e:	482c      	ldr	r0, [pc, #176]	@ (8002550 <HAL_FDCAN_MspInit+0x110>)
 80024a0:	f003 ff68 	bl	8006374 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 80024a4:	2200      	movs	r2, #0
 80024a6:	2105      	movs	r1, #5
 80024a8:	2013      	movs	r0, #19
 80024aa:	f001 fdef 	bl	800408c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80024ae:	2013      	movs	r0, #19
 80024b0:	f001 fdfc 	bl	80040ac <HAL_NVIC_EnableIRQ>
 80024b4:	e7d3      	b.n	800245e <HAL_FDCAN_MspInit+0x1e>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80024b6:	4b25      	ldr	r3, [pc, #148]	@ (800254c <HAL_FDCAN_MspInit+0x10c>)
 80024b8:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 80024bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024c0:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
 80024c4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80024c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024cc:	9301      	str	r3, [sp, #4]
 80024ce:	9b01      	ldr	r3, [sp, #4]
 80024d0:	e7ce      	b.n	8002470 <HAL_FDCAN_MspInit+0x30>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80024d2:	4a1d      	ldr	r2, [pc, #116]	@ (8002548 <HAL_FDCAN_MspInit+0x108>)
 80024d4:	6813      	ldr	r3, [r2, #0]
 80024d6:	3301      	adds	r3, #1
 80024d8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d021      	beq.n	8002522 <HAL_FDCAN_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024de:	4b1b      	ldr	r3, [pc, #108]	@ (800254c <HAL_FDCAN_MspInit+0x10c>)
 80024e0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80024e4:	f042 0202 	orr.w	r2, r2, #2
 80024e8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80024ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	9304      	str	r3, [sp, #16]
 80024f6:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80024f8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80024fc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fe:	2302      	movs	r3, #2
 8002500:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002502:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002504:	2309      	movs	r3, #9
 8002506:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002508:	a905      	add	r1, sp, #20
 800250a:	4812      	ldr	r0, [pc, #72]	@ (8002554 <HAL_FDCAN_MspInit+0x114>)
 800250c:	f003 ff32 	bl	8006374 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 5, 0);
 8002510:	2200      	movs	r2, #0
 8002512:	2105      	movs	r1, #5
 8002514:	2014      	movs	r0, #20
 8002516:	f001 fdb9 	bl	800408c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 800251a:	2014      	movs	r0, #20
 800251c:	f001 fdc6 	bl	80040ac <HAL_NVIC_EnableIRQ>
}
 8002520:	e79d      	b.n	800245e <HAL_FDCAN_MspInit+0x1e>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002522:	4b0a      	ldr	r3, [pc, #40]	@ (800254c <HAL_FDCAN_MspInit+0x10c>)
 8002524:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 8002528:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800252c:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
 8002530:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002534:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002538:	9303      	str	r3, [sp, #12]
 800253a:	9b03      	ldr	r3, [sp, #12]
 800253c:	e7cf      	b.n	80024de <HAL_FDCAN_MspInit+0x9e>
 800253e:	bf00      	nop
 8002540:	4000a000 	.word	0x4000a000
 8002544:	4000a400 	.word	0x4000a400
 8002548:	24002764 	.word	0x24002764
 800254c:	58024400 	.word	0x58024400
 8002550:	58020000 	.word	0x58020000
 8002554:	58020400 	.word	0x58020400

08002558 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002558:	b570      	push	{r4, r5, r6, lr}
 800255a:	b0b8      	sub	sp, #224	@ 0xe0
 800255c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800255e:	2100      	movs	r1, #0
 8002560:	9133      	str	r1, [sp, #204]	@ 0xcc
 8002562:	9134      	str	r1, [sp, #208]	@ 0xd0
 8002564:	9135      	str	r1, [sp, #212]	@ 0xd4
 8002566:	9136      	str	r1, [sp, #216]	@ 0xd8
 8002568:	9137      	str	r1, [sp, #220]	@ 0xdc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800256a:	22bc      	movs	r2, #188	@ 0xbc
 800256c:	a804      	add	r0, sp, #16
 800256e:	f018 fc97 	bl	801aea0 <memset>
  if(hi2c->Instance==I2C1)
 8002572:	6823      	ldr	r3, [r4, #0]
 8002574:	4a52      	ldr	r2, [pc, #328]	@ (80026c0 <HAL_I2C_MspInit+0x168>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d004      	beq.n	8002584 <HAL_I2C_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C4)
 800257a:	4a52      	ldr	r2, [pc, #328]	@ (80026c4 <HAL_I2C_MspInit+0x16c>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d06c      	beq.n	800265a <HAL_I2C_MspInit+0x102>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8002580:	b038      	add	sp, #224	@ 0xe0
 8002582:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002584:	2308      	movs	r3, #8
 8002586:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002588:	a804      	add	r0, sp, #16
 800258a:	f005 fafd 	bl	8007b88 <HAL_RCCEx_PeriphCLKConfig>
 800258e:	2800      	cmp	r0, #0
 8002590:	d15a      	bne.n	8002648 <HAL_I2C_MspInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002592:	4e4d      	ldr	r6, [pc, #308]	@ (80026c8 <HAL_I2C_MspInit+0x170>)
 8002594:	f8d6 30e0 	ldr.w	r3, [r6, #224]	@ 0xe0
 8002598:	f043 0302 	orr.w	r3, r3, #2
 800259c:	f8c6 30e0 	str.w	r3, [r6, #224]	@ 0xe0
 80025a0:	f8d6 30e0 	ldr.w	r3, [r6, #224]	@ 0xe0
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025ac:	23c0      	movs	r3, #192	@ 0xc0
 80025ae:	9333      	str	r3, [sp, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025b0:	2312      	movs	r3, #18
 80025b2:	9334      	str	r3, [sp, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b4:	2500      	movs	r5, #0
 80025b6:	9535      	str	r5, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b8:	9536      	str	r5, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025ba:	2304      	movs	r3, #4
 80025bc:	9337      	str	r3, [sp, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025be:	a933      	add	r1, sp, #204	@ 0xcc
 80025c0:	4842      	ldr	r0, [pc, #264]	@ (80026cc <HAL_I2C_MspInit+0x174>)
 80025c2:	f003 fed7 	bl	8006374 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025c6:	f8d6 30e8 	ldr.w	r3, [r6, #232]	@ 0xe8
 80025ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80025ce:	f8c6 30e8 	str.w	r3, [r6, #232]	@ 0xe8
 80025d2:	f8d6 30e8 	ldr.w	r3, [r6, #232]	@ 0xe8
 80025d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025da:	9301      	str	r3, [sp, #4]
 80025dc:	9b01      	ldr	r3, [sp, #4]
    hdma_i2c1_tx.Instance = DMA2_Stream0;
 80025de:	483c      	ldr	r0, [pc, #240]	@ (80026d0 <HAL_I2C_MspInit+0x178>)
 80025e0:	4b3c      	ldr	r3, [pc, #240]	@ (80026d4 <HAL_I2C_MspInit+0x17c>)
 80025e2:	6003      	str	r3, [r0, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 80025e4:	2322      	movs	r3, #34	@ 0x22
 80025e6:	6043      	str	r3, [r0, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025e8:	2340      	movs	r3, #64	@ 0x40
 80025ea:	6083      	str	r3, [r0, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025ec:	60c5      	str	r5, [r0, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025f2:	6103      	str	r3, [r0, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025f4:	6145      	str	r5, [r0, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025f6:	6185      	str	r5, [r0, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80025f8:	61c5      	str	r5, [r0, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80025fa:	6205      	str	r5, [r0, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025fc:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80025fe:	f001 ff6b 	bl	80044d8 <HAL_DMA_Init>
 8002602:	bb20      	cbnz	r0, 800264e <HAL_I2C_MspInit+0xf6>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8002604:	4b32      	ldr	r3, [pc, #200]	@ (80026d0 <HAL_I2C_MspInit+0x178>)
 8002606:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002608:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_i2c1_rx.Instance = DMA2_Stream1;
 800260a:	4833      	ldr	r0, [pc, #204]	@ (80026d8 <HAL_I2C_MspInit+0x180>)
 800260c:	4b33      	ldr	r3, [pc, #204]	@ (80026dc <HAL_I2C_MspInit+0x184>)
 800260e:	6003      	str	r3, [r0, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8002610:	2321      	movs	r3, #33	@ 0x21
 8002612:	6043      	str	r3, [r0, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002614:	2300      	movs	r3, #0
 8002616:	6083      	str	r3, [r0, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002618:	60c3      	str	r3, [r0, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800261a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800261e:	6102      	str	r2, [r0, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002620:	6143      	str	r3, [r0, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002622:	6183      	str	r3, [r0, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002624:	61c3      	str	r3, [r0, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002626:	6203      	str	r3, [r0, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002628:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800262a:	f001 ff55 	bl	80044d8 <HAL_DMA_Init>
 800262e:	b988      	cbnz	r0, 8002654 <HAL_I2C_MspInit+0xfc>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8002630:	4b29      	ldr	r3, [pc, #164]	@ (80026d8 <HAL_I2C_MspInit+0x180>)
 8002632:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8002634:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002636:	2200      	movs	r2, #0
 8002638:	2105      	movs	r1, #5
 800263a:	201f      	movs	r0, #31
 800263c:	f001 fd26 	bl	800408c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002640:	201f      	movs	r0, #31
 8002642:	f001 fd33 	bl	80040ac <HAL_NVIC_EnableIRQ>
 8002646:	e79b      	b.n	8002580 <HAL_I2C_MspInit+0x28>
      Error_Handler();
 8002648:	f7fe fae2 	bl	8000c10 <Error_Handler>
 800264c:	e7a1      	b.n	8002592 <HAL_I2C_MspInit+0x3a>
      Error_Handler();
 800264e:	f7fe fadf 	bl	8000c10 <Error_Handler>
 8002652:	e7d7      	b.n	8002604 <HAL_I2C_MspInit+0xac>
      Error_Handler();
 8002654:	f7fe fadc 	bl	8000c10 <Error_Handler>
 8002658:	e7ea      	b.n	8002630 <HAL_I2C_MspInit+0xd8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800265a:	2310      	movs	r3, #16
 800265c:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800265e:	eb0d 0003 	add.w	r0, sp, r3
 8002662:	f005 fa91 	bl	8007b88 <HAL_RCCEx_PeriphCLKConfig>
 8002666:	bb38      	cbnz	r0, 80026b8 <HAL_I2C_MspInit+0x160>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002668:	4c17      	ldr	r4, [pc, #92]	@ (80026c8 <HAL_I2C_MspInit+0x170>)
 800266a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800266e:	f043 0302 	orr.w	r3, r3, #2
 8002672:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8002676:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	9302      	str	r3, [sp, #8]
 8002680:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002682:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002686:	9333      	str	r3, [sp, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002688:	2312      	movs	r3, #18
 800268a:	9334      	str	r3, [sp, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268c:	2300      	movs	r3, #0
 800268e:	9335      	str	r3, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002690:	9336      	str	r3, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 8002692:	2306      	movs	r3, #6
 8002694:	9337      	str	r3, [sp, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002696:	a933      	add	r1, sp, #204	@ 0xcc
 8002698:	480c      	ldr	r0, [pc, #48]	@ (80026cc <HAL_I2C_MspInit+0x174>)
 800269a:	f003 fe6b 	bl	8006374 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 800269e:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
 80026a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026a6:	f8c4 30f4 	str.w	r3, [r4, #244]	@ 0xf4
 80026aa:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
 80026ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026b2:	9303      	str	r3, [sp, #12]
 80026b4:	9b03      	ldr	r3, [sp, #12]
}
 80026b6:	e763      	b.n	8002580 <HAL_I2C_MspInit+0x28>
      Error_Handler();
 80026b8:	f7fe faaa 	bl	8000c10 <Error_Handler>
 80026bc:	e7d4      	b.n	8002668 <HAL_I2C_MspInit+0x110>
 80026be:	bf00      	nop
 80026c0:	40005400 	.word	0x40005400
 80026c4:	58001c00 	.word	0x58001c00
 80026c8:	58024400 	.word	0x58024400
 80026cc:	58020400 	.word	0x58020400
 80026d0:	2400244c 	.word	0x2400244c
 80026d4:	40020410 	.word	0x40020410
 80026d8:	240023d4 	.word	0x240023d4
 80026dc:	40020428 	.word	0x40020428

080026e0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80026e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80026e4:	b0b9      	sub	sp, #228	@ 0xe4
 80026e6:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e8:	2100      	movs	r1, #0
 80026ea:	9133      	str	r1, [sp, #204]	@ 0xcc
 80026ec:	9134      	str	r1, [sp, #208]	@ 0xd0
 80026ee:	9135      	str	r1, [sp, #212]	@ 0xd4
 80026f0:	9136      	str	r1, [sp, #216]	@ 0xd8
 80026f2:	9137      	str	r1, [sp, #220]	@ 0xdc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026f4:	22bc      	movs	r2, #188	@ 0xbc
 80026f6:	a804      	add	r0, sp, #16
 80026f8:	f018 fbd2 	bl	801aea0 <memset>
  if(hsd->Instance==SDMMC1)
 80026fc:	6822      	ldr	r2, [r4, #0]
 80026fe:	4b34      	ldr	r3, [pc, #208]	@ (80027d0 <HAL_SD_MspInit+0xf0>)
 8002700:	429a      	cmp	r2, r3
 8002702:	d002      	beq.n	800270a <HAL_SD_MspInit+0x2a>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002704:	b039      	add	sp, #228	@ 0xe4
 8002706:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 800270a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800270e:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002710:	a804      	add	r0, sp, #16
 8002712:	f005 fa39 	bl	8007b88 <HAL_RCCEx_PeriphCLKConfig>
 8002716:	2800      	cmp	r0, #0
 8002718:	d157      	bne.n	80027ca <HAL_SD_MspInit+0xea>
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800271a:	4b2e      	ldr	r3, [pc, #184]	@ (80027d4 <HAL_SD_MspInit+0xf4>)
 800271c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8002720:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002724:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8002728:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800272c:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 8002730:	9201      	str	r2, [sp, #4]
 8002732:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002734:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002738:	f042 0204 	orr.w	r2, r2, #4
 800273c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002740:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002744:	f002 0204 	and.w	r2, r2, #4
 8002748:	9202      	str	r2, [sp, #8]
 800274a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800274c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002750:	f042 0208 	orr.w	r2, r2, #8
 8002754:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800275c:	f003 0308 	and.w	r3, r3, #8
 8002760:	9303      	str	r3, [sp, #12]
 8002762:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002764:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002768:	9333      	str	r3, [sp, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276a:	2602      	movs	r6, #2
 800276c:	9634      	str	r6, [sp, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800276e:	f04f 0801 	mov.w	r8, #1
 8002772:	f8cd 80d4 	str.w	r8, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002776:	2503      	movs	r5, #3
 8002778:	9536      	str	r5, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800277a:	240c      	movs	r4, #12
 800277c:	9437      	str	r4, [sp, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800277e:	f8df 905c 	ldr.w	r9, [pc, #92]	@ 80027dc <HAL_SD_MspInit+0xfc>
 8002782:	a933      	add	r1, sp, #204	@ 0xcc
 8002784:	4648      	mov	r0, r9
 8002786:	f003 fdf5 	bl	8006374 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800278a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800278e:	9333      	str	r3, [sp, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002790:	9634      	str	r6, [sp, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002792:	2700      	movs	r7, #0
 8002794:	9735      	str	r7, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002796:	9536      	str	r5, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002798:	9437      	str	r4, [sp, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800279a:	a933      	add	r1, sp, #204	@ 0xcc
 800279c:	4648      	mov	r0, r9
 800279e:	f003 fde9 	bl	8006374 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80027a2:	2304      	movs	r3, #4
 80027a4:	9333      	str	r3, [sp, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a6:	9634      	str	r6, [sp, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027a8:	f8cd 80d4 	str.w	r8, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ac:	9536      	str	r5, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80027ae:	9437      	str	r4, [sp, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027b0:	a933      	add	r1, sp, #204	@ 0xcc
 80027b2:	4809      	ldr	r0, [pc, #36]	@ (80027d8 <HAL_SD_MspInit+0xf8>)
 80027b4:	f003 fdde 	bl	8006374 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 80027b8:	463a      	mov	r2, r7
 80027ba:	2105      	movs	r1, #5
 80027bc:	2031      	movs	r0, #49	@ 0x31
 80027be:	f001 fc65 	bl	800408c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80027c2:	2031      	movs	r0, #49	@ 0x31
 80027c4:	f001 fc72 	bl	80040ac <HAL_NVIC_EnableIRQ>
}
 80027c8:	e79c      	b.n	8002704 <HAL_SD_MspInit+0x24>
      Error_Handler();
 80027ca:	f7fe fa21 	bl	8000c10 <Error_Handler>
 80027ce:	e7a4      	b.n	800271a <HAL_SD_MspInit+0x3a>
 80027d0:	52007000 	.word	0x52007000
 80027d4:	58024400 	.word	0x58024400
 80027d8:	58020c00 	.word	0x58020c00
 80027dc:	58020800 	.word	0x58020800

080027e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027e0:	b500      	push	{lr}
 80027e2:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM3)
 80027e4:	6803      	ldr	r3, [r0, #0]
 80027e6:	4a16      	ldr	r2, [pc, #88]	@ (8002840 <HAL_TIM_Base_MspInit+0x60>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d005      	beq.n	80027f8 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 80027ec:	4a15      	ldr	r2, [pc, #84]	@ (8002844 <HAL_TIM_Base_MspInit+0x64>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d010      	beq.n	8002814 <HAL_TIM_Base_MspInit+0x34>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80027f2:	b003      	add	sp, #12
 80027f4:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027f8:	4b13      	ldr	r3, [pc, #76]	@ (8002848 <HAL_TIM_Base_MspInit+0x68>)
 80027fa:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80027fe:	f042 0202 	orr.w	r2, r2, #2
 8002802:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8002806:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	9b00      	ldr	r3, [sp, #0]
 8002812:	e7ee      	b.n	80027f2 <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002814:	4b0c      	ldr	r3, [pc, #48]	@ (8002848 <HAL_TIM_Base_MspInit+0x68>)
 8002816:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800281a:	f042 0204 	orr.w	r2, r2, #4
 800281e:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8002822:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002826:	f003 0304 	and.w	r3, r3, #4
 800282a:	9301      	str	r3, [sp, #4]
 800282c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800282e:	2200      	movs	r2, #0
 8002830:	2105      	movs	r1, #5
 8002832:	201e      	movs	r0, #30
 8002834:	f001 fc2a 	bl	800408c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002838:	201e      	movs	r0, #30
 800283a:	f001 fc37 	bl	80040ac <HAL_NVIC_EnableIRQ>
}
 800283e:	e7d8      	b.n	80027f2 <HAL_TIM_Base_MspInit+0x12>
 8002840:	40000400 	.word	0x40000400
 8002844:	40000800 	.word	0x40000800
 8002848:	58024400 	.word	0x58024400

0800284c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800284c:	b510      	push	{r4, lr}
 800284e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002850:	2300      	movs	r3, #0
 8002852:	9303      	str	r3, [sp, #12]
 8002854:	9304      	str	r3, [sp, #16]
 8002856:	9305      	str	r3, [sp, #20]
 8002858:	9306      	str	r3, [sp, #24]
 800285a:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM3)
 800285c:	6802      	ldr	r2, [r0, #0]
 800285e:	4b19      	ldr	r3, [pc, #100]	@ (80028c4 <HAL_TIM_MspPostInit+0x78>)
 8002860:	429a      	cmp	r2, r3
 8002862:	d001      	beq.n	8002868 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002864:	b008      	add	sp, #32
 8002866:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002868:	4b17      	ldr	r3, [pc, #92]	@ (80028c8 <HAL_TIM_MspPostInit+0x7c>)
 800286a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800286e:	f042 0201 	orr.w	r2, r2, #1
 8002872:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002876:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800287a:	f002 0201 	and.w	r2, r2, #1
 800287e:	9201      	str	r2, [sp, #4]
 8002880:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002882:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002886:	f042 0202 	orr.w	r2, r2, #2
 800288a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800288e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	9302      	str	r3, [sp, #8]
 8002898:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin;
 800289a:	23c0      	movs	r3, #192	@ 0xc0
 800289c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289e:	2402      	movs	r4, #2
 80028a0:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028a2:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a4:	a903      	add	r1, sp, #12
 80028a6:	4809      	ldr	r0, [pc, #36]	@ (80028cc <HAL_TIM_MspPostInit+0x80>)
 80028a8:	f003 fd64 	bl	8006374 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LED_B_Pin;
 80028ac:	2301      	movs	r3, #1
 80028ae:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b0:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b2:	2300      	movs	r3, #0
 80028b4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028b8:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 80028ba:	a903      	add	r1, sp, #12
 80028bc:	4804      	ldr	r0, [pc, #16]	@ (80028d0 <HAL_TIM_MspPostInit+0x84>)
 80028be:	f003 fd59 	bl	8006374 <HAL_GPIO_Init>
}
 80028c2:	e7cf      	b.n	8002864 <HAL_TIM_MspPostInit+0x18>
 80028c4:	40000400 	.word	0x40000400
 80028c8:	58024400 	.word	0x58024400
 80028cc:	58020000 	.word	0x58020000
 80028d0:	58020400 	.word	0x58020400

080028d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028d6:	b0c5      	sub	sp, #276	@ 0x114
 80028d8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028da:	2100      	movs	r1, #0
 80028dc:	913f      	str	r1, [sp, #252]	@ 0xfc
 80028de:	9140      	str	r1, [sp, #256]	@ 0x100
 80028e0:	9141      	str	r1, [sp, #260]	@ 0x104
 80028e2:	9142      	str	r1, [sp, #264]	@ 0x108
 80028e4:	9143      	str	r1, [sp, #268]	@ 0x10c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028e6:	22bc      	movs	r2, #188	@ 0xbc
 80028e8:	a810      	add	r0, sp, #64	@ 0x40
 80028ea:	f018 fad9 	bl	801aea0 <memset>
  if(huart->Instance==UART4)
 80028ee:	6823      	ldr	r3, [r4, #0]
 80028f0:	4a7b      	ldr	r2, [pc, #492]	@ (8002ae0 <HAL_UART_MspInit+0x20c>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d019      	beq.n	800292a <HAL_UART_MspInit+0x56>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(huart->Instance==UART7)
 80028f6:	4a7b      	ldr	r2, [pc, #492]	@ (8002ae4 <HAL_UART_MspInit+0x210>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	f000 8082 	beq.w	8002a02 <HAL_UART_MspInit+0x12e>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
  else if(huart->Instance==UART8)
 80028fe:	4a7a      	ldr	r2, [pc, #488]	@ (8002ae8 <HAL_UART_MspInit+0x214>)
 8002900:	4293      	cmp	r3, r2
 8002902:	f000 8111 	beq.w	8002b28 <HAL_UART_MspInit+0x254>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
  else if(huart->Instance==USART1)
 8002906:	4a79      	ldr	r2, [pc, #484]	@ (8002aec <HAL_UART_MspInit+0x218>)
 8002908:	4293      	cmp	r3, r2
 800290a:	f000 817a 	beq.w	8002c02 <HAL_UART_MspInit+0x32e>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 800290e:	4a78      	ldr	r2, [pc, #480]	@ (8002af0 <HAL_UART_MspInit+0x21c>)
 8002910:	4293      	cmp	r3, r2
 8002912:	f000 81e4 	beq.w	8002cde <HAL_UART_MspInit+0x40a>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8002916:	4a77      	ldr	r2, [pc, #476]	@ (8002af4 <HAL_UART_MspInit+0x220>)
 8002918:	4293      	cmp	r3, r2
 800291a:	f000 826b 	beq.w	8002df4 <HAL_UART_MspInit+0x520>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 800291e:	4a76      	ldr	r2, [pc, #472]	@ (8002af8 <HAL_UART_MspInit+0x224>)
 8002920:	4293      	cmp	r3, r2
 8002922:	f000 82ec 	beq.w	8002efe <HAL_UART_MspInit+0x62a>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002926:	b045      	add	sp, #276	@ 0x114
 8002928:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800292a:	2302      	movs	r3, #2
 800292c:	9310      	str	r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800292e:	a810      	add	r0, sp, #64	@ 0x40
 8002930:	f005 f92a 	bl	8007b88 <HAL_RCCEx_PeriphCLKConfig>
 8002934:	2800      	cmp	r0, #0
 8002936:	d15b      	bne.n	80029f0 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_UART4_CLK_ENABLE();
 8002938:	4b70      	ldr	r3, [pc, #448]	@ (8002afc <HAL_UART_MspInit+0x228>)
 800293a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800293e:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8002942:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8002946:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800294a:	f402 2200 	and.w	r2, r2, #524288	@ 0x80000
 800294e:	9201      	str	r2, [sp, #4]
 8002950:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002952:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002956:	f042 0208 	orr.w	r2, r2, #8
 800295a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800295e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002962:	f003 0308 	and.w	r3, r3, #8
 8002966:	9302      	str	r3, [sp, #8]
 8002968:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = RX4_GNSS_Pin|TX4_GNSS_Pin;
 800296a:	2303      	movs	r3, #3
 800296c:	933f      	str	r3, [sp, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296e:	2302      	movs	r3, #2
 8002970:	9340      	str	r3, [sp, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002972:	2500      	movs	r5, #0
 8002974:	9541      	str	r5, [sp, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002976:	9542      	str	r5, [sp, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002978:	2308      	movs	r3, #8
 800297a:	9343      	str	r3, [sp, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800297c:	a93f      	add	r1, sp, #252	@ 0xfc
 800297e:	4860      	ldr	r0, [pc, #384]	@ (8002b00 <HAL_UART_MspInit+0x22c>)
 8002980:	f003 fcf8 	bl	8006374 <HAL_GPIO_Init>
    hdma_uart4_tx.Instance = DMA2_Stream2;
 8002984:	485f      	ldr	r0, [pc, #380]	@ (8002b04 <HAL_UART_MspInit+0x230>)
 8002986:	4b60      	ldr	r3, [pc, #384]	@ (8002b08 <HAL_UART_MspInit+0x234>)
 8002988:	6003      	str	r3, [r0, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 800298a:	2340      	movs	r3, #64	@ 0x40
 800298c:	6043      	str	r3, [r0, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800298e:	6083      	str	r3, [r0, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002990:	60c5      	str	r5, [r0, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002992:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002996:	6103      	str	r3, [r0, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002998:	6145      	str	r5, [r0, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800299a:	6185      	str	r5, [r0, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800299c:	61c5      	str	r5, [r0, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800299e:	6205      	str	r5, [r0, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029a0:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80029a2:	f001 fd99 	bl	80044d8 <HAL_DMA_Init>
 80029a6:	bb30      	cbnz	r0, 80029f6 <HAL_UART_MspInit+0x122>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80029a8:	4b56      	ldr	r3, [pc, #344]	@ (8002b04 <HAL_UART_MspInit+0x230>)
 80029aa:	67a3      	str	r3, [r4, #120]	@ 0x78
 80029ac:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_uart4_rx.Instance = DMA2_Stream3;
 80029ae:	4857      	ldr	r0, [pc, #348]	@ (8002b0c <HAL_UART_MspInit+0x238>)
 80029b0:	4b57      	ldr	r3, [pc, #348]	@ (8002b10 <HAL_UART_MspInit+0x23c>)
 80029b2:	6003      	str	r3, [r0, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 80029b4:	233f      	movs	r3, #63	@ 0x3f
 80029b6:	6043      	str	r3, [r0, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029b8:	2300      	movs	r3, #0
 80029ba:	6083      	str	r3, [r0, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029bc:	60c3      	str	r3, [r0, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029c2:	6102      	str	r2, [r0, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029c4:	6143      	str	r3, [r0, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029c6:	6183      	str	r3, [r0, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80029c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029cc:	61c2      	str	r2, [r0, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80029ce:	6203      	str	r3, [r0, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029d0:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80029d2:	f001 fd81 	bl	80044d8 <HAL_DMA_Init>
 80029d6:	b988      	cbnz	r0, 80029fc <HAL_UART_MspInit+0x128>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80029d8:	4b4c      	ldr	r3, [pc, #304]	@ (8002b0c <HAL_UART_MspInit+0x238>)
 80029da:	67e3      	str	r3, [r4, #124]	@ 0x7c
 80029dc:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80029de:	2200      	movs	r2, #0
 80029e0:	2105      	movs	r1, #5
 80029e2:	2034      	movs	r0, #52	@ 0x34
 80029e4:	f001 fb52 	bl	800408c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80029e8:	2034      	movs	r0, #52	@ 0x34
 80029ea:	f001 fb5f 	bl	80040ac <HAL_NVIC_EnableIRQ>
 80029ee:	e79a      	b.n	8002926 <HAL_UART_MspInit+0x52>
      Error_Handler();
 80029f0:	f7fe f90e 	bl	8000c10 <Error_Handler>
 80029f4:	e7a0      	b.n	8002938 <HAL_UART_MspInit+0x64>
      Error_Handler();
 80029f6:	f7fe f90b 	bl	8000c10 <Error_Handler>
 80029fa:	e7d5      	b.n	80029a8 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 80029fc:	f7fe f908 	bl	8000c10 <Error_Handler>
 8002a00:	e7ea      	b.n	80029d8 <HAL_UART_MspInit+0x104>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8002a02:	2302      	movs	r3, #2
 8002a04:	9310      	str	r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a06:	a810      	add	r0, sp, #64	@ 0x40
 8002a08:	f005 f8be 	bl	8007b88 <HAL_RCCEx_PeriphCLKConfig>
 8002a0c:	2800      	cmp	r0, #0
 8002a0e:	d15d      	bne.n	8002acc <HAL_UART_MspInit+0x1f8>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002a10:	4b3a      	ldr	r3, [pc, #232]	@ (8002afc <HAL_UART_MspInit+0x228>)
 8002a12:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002a16:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002a1a:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8002a1e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002a22:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002a26:	9203      	str	r2, [sp, #12]
 8002a28:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a2a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002a2e:	f042 0210 	orr.w	r2, r2, #16
 8002a32:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a3a:	f003 0310 	and.w	r3, r3, #16
 8002a3e:	9304      	str	r3, [sp, #16]
 8002a40:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = RX7_4G_Pin|TX7_4G_Pin|RTS7_4G_Pin|CTS7_4G_Pin;
 8002a42:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8002a46:	933f      	str	r3, [sp, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a48:	2302      	movs	r3, #2
 8002a4a:	9340      	str	r3, [sp, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4c:	2500      	movs	r5, #0
 8002a4e:	9541      	str	r5, [sp, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a50:	9542      	str	r5, [sp, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8002a52:	2307      	movs	r3, #7
 8002a54:	9343      	str	r3, [sp, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a56:	a93f      	add	r1, sp, #252	@ 0xfc
 8002a58:	482e      	ldr	r0, [pc, #184]	@ (8002b14 <HAL_UART_MspInit+0x240>)
 8002a5a:	f003 fc8b 	bl	8006374 <HAL_GPIO_Init>
    hdma_uart7_tx.Instance = DMA2_Stream4;
 8002a5e:	482e      	ldr	r0, [pc, #184]	@ (8002b18 <HAL_UART_MspInit+0x244>)
 8002a60:	4b2e      	ldr	r3, [pc, #184]	@ (8002b1c <HAL_UART_MspInit+0x248>)
 8002a62:	6003      	str	r3, [r0, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 8002a64:	2350      	movs	r3, #80	@ 0x50
 8002a66:	6043      	str	r3, [r0, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a68:	2340      	movs	r3, #64	@ 0x40
 8002a6a:	6083      	str	r3, [r0, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a6c:	60c5      	str	r5, [r0, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a72:	6103      	str	r3, [r0, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a74:	6145      	str	r5, [r0, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a76:	6185      	str	r5, [r0, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 8002a78:	61c5      	str	r5, [r0, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a7a:	6205      	str	r5, [r0, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a7c:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 8002a7e:	f001 fd2b 	bl	80044d8 <HAL_DMA_Init>
 8002a82:	bb30      	cbnz	r0, 8002ad2 <HAL_UART_MspInit+0x1fe>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart7_tx);
 8002a84:	4b24      	ldr	r3, [pc, #144]	@ (8002b18 <HAL_UART_MspInit+0x244>)
 8002a86:	67a3      	str	r3, [r4, #120]	@ 0x78
 8002a88:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_uart7_rx.Instance = DMA2_Stream5;
 8002a8a:	4825      	ldr	r0, [pc, #148]	@ (8002b20 <HAL_UART_MspInit+0x24c>)
 8002a8c:	4b25      	ldr	r3, [pc, #148]	@ (8002b24 <HAL_UART_MspInit+0x250>)
 8002a8e:	6003      	str	r3, [r0, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 8002a90:	234f      	movs	r3, #79	@ 0x4f
 8002a92:	6043      	str	r3, [r0, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a94:	2300      	movs	r3, #0
 8002a96:	6083      	str	r3, [r0, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a98:	60c3      	str	r3, [r0, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a9a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a9e:	6102      	str	r2, [r0, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002aa0:	6143      	str	r3, [r0, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002aa2:	6183      	str	r3, [r0, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 8002aa4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002aa8:	61c2      	str	r2, [r0, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002aaa:	6203      	str	r3, [r0, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002aac:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8002aae:	f001 fd13 	bl	80044d8 <HAL_DMA_Init>
 8002ab2:	b988      	cbnz	r0, 8002ad8 <HAL_UART_MspInit+0x204>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 8002ab4:	4b1a      	ldr	r3, [pc, #104]	@ (8002b20 <HAL_UART_MspInit+0x24c>)
 8002ab6:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8002ab8:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8002aba:	2200      	movs	r2, #0
 8002abc:	2105      	movs	r1, #5
 8002abe:	2052      	movs	r0, #82	@ 0x52
 8002ac0:	f001 fae4 	bl	800408c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8002ac4:	2052      	movs	r0, #82	@ 0x52
 8002ac6:	f001 faf1 	bl	80040ac <HAL_NVIC_EnableIRQ>
 8002aca:	e72c      	b.n	8002926 <HAL_UART_MspInit+0x52>
      Error_Handler();
 8002acc:	f7fe f8a0 	bl	8000c10 <Error_Handler>
 8002ad0:	e79e      	b.n	8002a10 <HAL_UART_MspInit+0x13c>
      Error_Handler();
 8002ad2:	f7fe f89d 	bl	8000c10 <Error_Handler>
 8002ad6:	e7d5      	b.n	8002a84 <HAL_UART_MspInit+0x1b0>
      Error_Handler();
 8002ad8:	f7fe f89a 	bl	8000c10 <Error_Handler>
 8002adc:	e7ea      	b.n	8002ab4 <HAL_UART_MspInit+0x1e0>
 8002ade:	bf00      	nop
 8002ae0:	40004c00 	.word	0x40004c00
 8002ae4:	40007800 	.word	0x40007800
 8002ae8:	40007c00 	.word	0x40007c00
 8002aec:	40011000 	.word	0x40011000
 8002af0:	40004400 	.word	0x40004400
 8002af4:	40004800 	.word	0x40004800
 8002af8:	40011400 	.word	0x40011400
 8002afc:	58024400 	.word	0x58024400
 8002b00:	58020c00 	.word	0x58020c00
 8002b04:	24001e58 	.word	0x24001e58
 8002b08:	40020440 	.word	0x40020440
 8002b0c:	24001de0 	.word	0x24001de0
 8002b10:	40020458 	.word	0x40020458
 8002b14:	58021000 	.word	0x58021000
 8002b18:	24001d68 	.word	0x24001d68
 8002b1c:	40020470 	.word	0x40020470
 8002b20:	24001cf0 	.word	0x24001cf0
 8002b24:	40020488 	.word	0x40020488
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8002b28:	2302      	movs	r3, #2
 8002b2a:	9310      	str	r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b2c:	a810      	add	r0, sp, #64	@ 0x40
 8002b2e:	f005 f82b 	bl	8007b88 <HAL_RCCEx_PeriphCLKConfig>
 8002b32:	2800      	cmp	r0, #0
 8002b34:	d15c      	bne.n	8002bf0 <HAL_UART_MspInit+0x31c>
    __HAL_RCC_UART8_CLK_ENABLE();
 8002b36:	4ba0      	ldr	r3, [pc, #640]	@ (8002db8 <HAL_UART_MspInit+0x4e4>)
 8002b38:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002b3c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002b40:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8002b44:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002b48:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002b4c:	9205      	str	r2, [sp, #20]
 8002b4e:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b50:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002b54:	f042 0210 	orr.w	r2, r2, #16
 8002b58:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b60:	f003 0310 	and.w	r3, r3, #16
 8002b64:	9306      	str	r3, [sp, #24]
 8002b66:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = RX8_EXT_Pin|TX8_EXT_Pin;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	933f      	str	r3, [sp, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	9340      	str	r3, [sp, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b70:	2500      	movs	r5, #0
 8002b72:	9541      	str	r5, [sp, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b74:	9542      	str	r5, [sp, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002b76:	2308      	movs	r3, #8
 8002b78:	9343      	str	r3, [sp, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b7a:	a93f      	add	r1, sp, #252	@ 0xfc
 8002b7c:	488f      	ldr	r0, [pc, #572]	@ (8002dbc <HAL_UART_MspInit+0x4e8>)
 8002b7e:	f003 fbf9 	bl	8006374 <HAL_GPIO_Init>
    hdma_uart8_tx.Instance = DMA2_Stream6;
 8002b82:	488f      	ldr	r0, [pc, #572]	@ (8002dc0 <HAL_UART_MspInit+0x4ec>)
 8002b84:	4b8f      	ldr	r3, [pc, #572]	@ (8002dc4 <HAL_UART_MspInit+0x4f0>)
 8002b86:	6003      	str	r3, [r0, #0]
    hdma_uart8_tx.Init.Request = DMA_REQUEST_UART8_TX;
 8002b88:	2352      	movs	r3, #82	@ 0x52
 8002b8a:	6043      	str	r3, [r0, #4]
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b8c:	2340      	movs	r3, #64	@ 0x40
 8002b8e:	6083      	str	r3, [r0, #8]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b90:	60c5      	str	r5, [r0, #12]
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b96:	6103      	str	r3, [r0, #16]
    hdma_uart8_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b98:	6145      	str	r5, [r0, #20]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b9a:	6185      	str	r5, [r0, #24]
    hdma_uart8_tx.Init.Mode = DMA_NORMAL;
 8002b9c:	61c5      	str	r5, [r0, #28]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b9e:	6205      	str	r5, [r0, #32]
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ba0:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 8002ba2:	f001 fc99 	bl	80044d8 <HAL_DMA_Init>
 8002ba6:	bb30      	cbnz	r0, 8002bf6 <HAL_UART_MspInit+0x322>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart8_tx);
 8002ba8:	4b85      	ldr	r3, [pc, #532]	@ (8002dc0 <HAL_UART_MspInit+0x4ec>)
 8002baa:	67a3      	str	r3, [r4, #120]	@ 0x78
 8002bac:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_uart8_rx.Instance = DMA2_Stream7;
 8002bae:	4886      	ldr	r0, [pc, #536]	@ (8002dc8 <HAL_UART_MspInit+0x4f4>)
 8002bb0:	4b86      	ldr	r3, [pc, #536]	@ (8002dcc <HAL_UART_MspInit+0x4f8>)
 8002bb2:	6003      	str	r3, [r0, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 8002bb4:	2351      	movs	r3, #81	@ 0x51
 8002bb6:	6043      	str	r3, [r0, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	6083      	str	r3, [r0, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bbc:	60c3      	str	r3, [r0, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002bbe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002bc2:	6102      	str	r2, [r0, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bc4:	6143      	str	r3, [r0, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bc6:	6183      	str	r3, [r0, #24]
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 8002bc8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002bcc:	61c2      	str	r2, [r0, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002bce:	6203      	str	r3, [r0, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bd0:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8002bd2:	f001 fc81 	bl	80044d8 <HAL_DMA_Init>
 8002bd6:	b988      	cbnz	r0, 8002bfc <HAL_UART_MspInit+0x328>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 8002bd8:	4b7b      	ldr	r3, [pc, #492]	@ (8002dc8 <HAL_UART_MspInit+0x4f4>)
 8002bda:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8002bdc:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 8002bde:	2200      	movs	r2, #0
 8002be0:	2105      	movs	r1, #5
 8002be2:	2053      	movs	r0, #83	@ 0x53
 8002be4:	f001 fa52 	bl	800408c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8002be8:	2053      	movs	r0, #83	@ 0x53
 8002bea:	f001 fa5f 	bl	80040ac <HAL_NVIC_EnableIRQ>
 8002bee:	e69a      	b.n	8002926 <HAL_UART_MspInit+0x52>
      Error_Handler();
 8002bf0:	f7fe f80e 	bl	8000c10 <Error_Handler>
 8002bf4:	e79f      	b.n	8002b36 <HAL_UART_MspInit+0x262>
      Error_Handler();
 8002bf6:	f7fe f80b 	bl	8000c10 <Error_Handler>
 8002bfa:	e7d5      	b.n	8002ba8 <HAL_UART_MspInit+0x2d4>
      Error_Handler();
 8002bfc:	f7fe f808 	bl	8000c10 <Error_Handler>
 8002c00:	e7ea      	b.n	8002bd8 <HAL_UART_MspInit+0x304>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c02:	2301      	movs	r3, #1
 8002c04:	9310      	str	r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c06:	a810      	add	r0, sp, #64	@ 0x40
 8002c08:	f004 ffbe 	bl	8007b88 <HAL_RCCEx_PeriphCLKConfig>
 8002c0c:	2800      	cmp	r0, #0
 8002c0e:	d15d      	bne.n	8002ccc <HAL_UART_MspInit+0x3f8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c10:	4b69      	ldr	r3, [pc, #420]	@ (8002db8 <HAL_UART_MspInit+0x4e4>)
 8002c12:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8002c16:	f042 0210 	orr.w	r2, r2, #16
 8002c1a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8002c1e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8002c22:	f002 0210 	and.w	r2, r2, #16
 8002c26:	9207      	str	r2, [sp, #28]
 8002c28:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c2a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002c2e:	f042 0201 	orr.w	r2, r2, #1
 8002c32:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	9308      	str	r3, [sp, #32]
 8002c40:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Pin = TX1_FRONT_Pin|RX1_FRONT_Pin;
 8002c42:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002c46:	933f      	str	r3, [sp, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c48:	2302      	movs	r3, #2
 8002c4a:	9340      	str	r3, [sp, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4c:	2500      	movs	r5, #0
 8002c4e:	9541      	str	r5, [sp, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c50:	9542      	str	r5, [sp, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c52:	2307      	movs	r3, #7
 8002c54:	9343      	str	r3, [sp, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c56:	a93f      	add	r1, sp, #252	@ 0xfc
 8002c58:	485d      	ldr	r0, [pc, #372]	@ (8002dd0 <HAL_UART_MspInit+0x4fc>)
 8002c5a:	f003 fb8b 	bl	8006374 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Stream0;
 8002c5e:	485d      	ldr	r0, [pc, #372]	@ (8002dd4 <HAL_UART_MspInit+0x500>)
 8002c60:	4b5d      	ldr	r3, [pc, #372]	@ (8002dd8 <HAL_UART_MspInit+0x504>)
 8002c62:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002c64:	232a      	movs	r3, #42	@ 0x2a
 8002c66:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c68:	2340      	movs	r3, #64	@ 0x40
 8002c6a:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c6c:	60c5      	str	r5, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c72:	6103      	str	r3, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c74:	6145      	str	r5, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c76:	6185      	str	r5, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002c78:	61c5      	str	r5, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002c7a:	6205      	str	r5, [r0, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c7c:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002c7e:	f001 fc2b 	bl	80044d8 <HAL_DMA_Init>
 8002c82:	bb30      	cbnz	r0, 8002cd2 <HAL_UART_MspInit+0x3fe>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002c84:	4b53      	ldr	r3, [pc, #332]	@ (8002dd4 <HAL_UART_MspInit+0x500>)
 8002c86:	67a3      	str	r3, [r4, #120]	@ 0x78
 8002c88:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_usart1_rx.Instance = DMA1_Stream1;
 8002c8a:	4854      	ldr	r0, [pc, #336]	@ (8002ddc <HAL_UART_MspInit+0x508>)
 8002c8c:	4b54      	ldr	r3, [pc, #336]	@ (8002de0 <HAL_UART_MspInit+0x50c>)
 8002c8e:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002c90:	2329      	movs	r3, #41	@ 0x29
 8002c92:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c94:	2300      	movs	r3, #0
 8002c96:	6083      	str	r3, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c98:	60c3      	str	r3, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c9a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c9e:	6102      	str	r2, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ca0:	6143      	str	r3, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ca2:	6183      	str	r3, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002ca4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ca8:	61c2      	str	r2, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002caa:	6203      	str	r3, [r0, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cac:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002cae:	f001 fc13 	bl	80044d8 <HAL_DMA_Init>
 8002cb2:	b988      	cbnz	r0, 8002cd8 <HAL_UART_MspInit+0x404>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002cb4:	4b49      	ldr	r3, [pc, #292]	@ (8002ddc <HAL_UART_MspInit+0x508>)
 8002cb6:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8002cb8:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002cba:	2200      	movs	r2, #0
 8002cbc:	2105      	movs	r1, #5
 8002cbe:	2025      	movs	r0, #37	@ 0x25
 8002cc0:	f001 f9e4 	bl	800408c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002cc4:	2025      	movs	r0, #37	@ 0x25
 8002cc6:	f001 f9f1 	bl	80040ac <HAL_NVIC_EnableIRQ>
 8002cca:	e62c      	b.n	8002926 <HAL_UART_MspInit+0x52>
      Error_Handler();
 8002ccc:	f7fd ffa0 	bl	8000c10 <Error_Handler>
 8002cd0:	e79e      	b.n	8002c10 <HAL_UART_MspInit+0x33c>
      Error_Handler();
 8002cd2:	f7fd ff9d 	bl	8000c10 <Error_Handler>
 8002cd6:	e7d5      	b.n	8002c84 <HAL_UART_MspInit+0x3b0>
      Error_Handler();
 8002cd8:	f7fd ff9a 	bl	8000c10 <Error_Handler>
 8002cdc:	e7ea      	b.n	8002cb4 <HAL_UART_MspInit+0x3e0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002cde:	2302      	movs	r3, #2
 8002ce0:	9310      	str	r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ce2:	a810      	add	r0, sp, #64	@ 0x40
 8002ce4:	f004 ff50 	bl	8007b88 <HAL_RCCEx_PeriphCLKConfig>
 8002ce8:	2800      	cmp	r0, #0
 8002cea:	d15c      	bne.n	8002da6 <HAL_UART_MspInit+0x4d2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cec:	4b32      	ldr	r3, [pc, #200]	@ (8002db8 <HAL_UART_MspInit+0x4e4>)
 8002cee:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002cf2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002cf6:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8002cfa:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002cfe:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8002d02:	9209      	str	r2, [sp, #36]	@ 0x24
 8002d04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d06:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002d0a:	f042 0201 	orr.w	r2, r2, #1
 8002d0e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8002d1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pin = TX2_RADIO_Pin|RX2_RADIO_Pin;
 8002d1e:	230c      	movs	r3, #12
 8002d20:	933f      	str	r3, [sp, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d22:	2302      	movs	r3, #2
 8002d24:	9340      	str	r3, [sp, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d26:	2500      	movs	r5, #0
 8002d28:	9541      	str	r5, [sp, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d2a:	9542      	str	r5, [sp, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d2c:	2307      	movs	r3, #7
 8002d2e:	9343      	str	r3, [sp, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d30:	a93f      	add	r1, sp, #252	@ 0xfc
 8002d32:	4827      	ldr	r0, [pc, #156]	@ (8002dd0 <HAL_UART_MspInit+0x4fc>)
 8002d34:	f003 fb1e 	bl	8006374 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream2;
 8002d38:	482a      	ldr	r0, [pc, #168]	@ (8002de4 <HAL_UART_MspInit+0x510>)
 8002d3a:	4b2b      	ldr	r3, [pc, #172]	@ (8002de8 <HAL_UART_MspInit+0x514>)
 8002d3c:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002d3e:	232c      	movs	r3, #44	@ 0x2c
 8002d40:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d42:	2340      	movs	r3, #64	@ 0x40
 8002d44:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d46:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d4c:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d4e:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d50:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002d52:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d54:	6205      	str	r5, [r0, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d56:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002d58:	f001 fbbe 	bl	80044d8 <HAL_DMA_Init>
 8002d5c:	bb30      	cbnz	r0, 8002dac <HAL_UART_MspInit+0x4d8>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002d5e:	4b21      	ldr	r3, [pc, #132]	@ (8002de4 <HAL_UART_MspInit+0x510>)
 8002d60:	67a3      	str	r3, [r4, #120]	@ 0x78
 8002d62:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_usart2_rx.Instance = DMA1_Stream3;
 8002d64:	4821      	ldr	r0, [pc, #132]	@ (8002dec <HAL_UART_MspInit+0x518>)
 8002d66:	4b22      	ldr	r3, [pc, #136]	@ (8002df0 <HAL_UART_MspInit+0x51c>)
 8002d68:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002d6a:	232b      	movs	r3, #43	@ 0x2b
 8002d6c:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	6083      	str	r3, [r0, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d72:	60c3      	str	r3, [r0, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d74:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d78:	6102      	str	r2, [r0, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d7a:	6143      	str	r3, [r0, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d7c:	6183      	str	r3, [r0, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002d7e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d82:	61c2      	str	r2, [r0, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d84:	6203      	str	r3, [r0, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d86:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002d88:	f001 fba6 	bl	80044d8 <HAL_DMA_Init>
 8002d8c:	b988      	cbnz	r0, 8002db2 <HAL_UART_MspInit+0x4de>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002d8e:	4b17      	ldr	r3, [pc, #92]	@ (8002dec <HAL_UART_MspInit+0x518>)
 8002d90:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8002d92:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002d94:	2200      	movs	r2, #0
 8002d96:	2105      	movs	r1, #5
 8002d98:	2026      	movs	r0, #38	@ 0x26
 8002d9a:	f001 f977 	bl	800408c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002d9e:	2026      	movs	r0, #38	@ 0x26
 8002da0:	f001 f984 	bl	80040ac <HAL_NVIC_EnableIRQ>
 8002da4:	e5bf      	b.n	8002926 <HAL_UART_MspInit+0x52>
      Error_Handler();
 8002da6:	f7fd ff33 	bl	8000c10 <Error_Handler>
 8002daa:	e79f      	b.n	8002cec <HAL_UART_MspInit+0x418>
      Error_Handler();
 8002dac:	f7fd ff30 	bl	8000c10 <Error_Handler>
 8002db0:	e7d5      	b.n	8002d5e <HAL_UART_MspInit+0x48a>
      Error_Handler();
 8002db2:	f7fd ff2d 	bl	8000c10 <Error_Handler>
 8002db6:	e7ea      	b.n	8002d8e <HAL_UART_MspInit+0x4ba>
 8002db8:	58024400 	.word	0x58024400
 8002dbc:	58021000 	.word	0x58021000
 8002dc0:	24001c78 	.word	0x24001c78
 8002dc4:	400204a0 	.word	0x400204a0
 8002dc8:	24001c00 	.word	0x24001c00
 8002dcc:	400204b8 	.word	0x400204b8
 8002dd0:	58020000 	.word	0x58020000
 8002dd4:	24001b88 	.word	0x24001b88
 8002dd8:	40020010 	.word	0x40020010
 8002ddc:	24001b10 	.word	0x24001b10
 8002de0:	40020028 	.word	0x40020028
 8002de4:	24001a98 	.word	0x24001a98
 8002de8:	40020040 	.word	0x40020040
 8002dec:	24001a20 	.word	0x24001a20
 8002df0:	40020058 	.word	0x40020058
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002df4:	2302      	movs	r3, #2
 8002df6:	9310      	str	r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002df8:	a810      	add	r0, sp, #64	@ 0x40
 8002dfa:	f004 fec5 	bl	8007b88 <HAL_RCCEx_PeriphCLKConfig>
 8002dfe:	2800      	cmp	r0, #0
 8002e00:	d174      	bne.n	8002eec <HAL_UART_MspInit+0x618>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e02:	4b75      	ldr	r3, [pc, #468]	@ (8002fd8 <HAL_UART_MspInit+0x704>)
 8002e04:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002e08:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002e0c:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8002e10:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002e14:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8002e18:	920b      	str	r2, [sp, #44]	@ 0x2c
 8002e1a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e1c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002e20:	f042 0202 	orr.w	r2, r2, #2
 8002e24:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002e28:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002e2c:	f002 0202 	and.w	r2, r2, #2
 8002e30:	920c      	str	r2, [sp, #48]	@ 0x30
 8002e32:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e34:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002e38:	f042 0208 	orr.w	r2, r2, #8
 8002e3c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e44:	f003 0308 	and.w	r3, r3, #8
 8002e48:	930d      	str	r3, [sp, #52]	@ 0x34
 8002e4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
    GPIO_InitStruct.Pin = DE3_RS485_Pin;
 8002e4c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002e50:	933f      	str	r3, [sp, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e52:	2702      	movs	r7, #2
 8002e54:	9740      	str	r7, [sp, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e56:	2500      	movs	r5, #0
 8002e58:	9541      	str	r5, [sp, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e5a:	9542      	str	r5, [sp, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e5c:	2607      	movs	r6, #7
 8002e5e:	9643      	str	r6, [sp, #268]	@ 0x10c
    HAL_GPIO_Init(DE3_RS485_GPIO_Port, &GPIO_InitStruct);
 8002e60:	a93f      	add	r1, sp, #252	@ 0xfc
 8002e62:	485e      	ldr	r0, [pc, #376]	@ (8002fdc <HAL_UART_MspInit+0x708>)
 8002e64:	f003 fa86 	bl	8006374 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TX3_RS485_Pin|RX3_RS485_Pin;
 8002e68:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002e6c:	933f      	str	r3, [sp, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e6e:	9740      	str	r7, [sp, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e70:	9541      	str	r5, [sp, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e72:	9542      	str	r5, [sp, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e74:	9643      	str	r6, [sp, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e76:	a93f      	add	r1, sp, #252	@ 0xfc
 8002e78:	4859      	ldr	r0, [pc, #356]	@ (8002fe0 <HAL_UART_MspInit+0x70c>)
 8002e7a:	f003 fa7b 	bl	8006374 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream4;
 8002e7e:	4859      	ldr	r0, [pc, #356]	@ (8002fe4 <HAL_UART_MspInit+0x710>)
 8002e80:	4b59      	ldr	r3, [pc, #356]	@ (8002fe8 <HAL_UART_MspInit+0x714>)
 8002e82:	6003      	str	r3, [r0, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002e84:	232e      	movs	r3, #46	@ 0x2e
 8002e86:	6043      	str	r3, [r0, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e88:	2340      	movs	r3, #64	@ 0x40
 8002e8a:	6083      	str	r3, [r0, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e8c:	60c5      	str	r5, [r0, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e92:	6103      	str	r3, [r0, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e94:	6145      	str	r5, [r0, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e96:	6185      	str	r5, [r0, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002e98:	61c5      	str	r5, [r0, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002e9a:	6205      	str	r5, [r0, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e9c:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002e9e:	f001 fb1b 	bl	80044d8 <HAL_DMA_Init>
 8002ea2:	bb30      	cbnz	r0, 8002ef2 <HAL_UART_MspInit+0x61e>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002ea4:	4b4f      	ldr	r3, [pc, #316]	@ (8002fe4 <HAL_UART_MspInit+0x710>)
 8002ea6:	67a3      	str	r3, [r4, #120]	@ 0x78
 8002ea8:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_usart3_rx.Instance = DMA1_Stream5;
 8002eaa:	4850      	ldr	r0, [pc, #320]	@ (8002fec <HAL_UART_MspInit+0x718>)
 8002eac:	4b50      	ldr	r3, [pc, #320]	@ (8002ff0 <HAL_UART_MspInit+0x71c>)
 8002eae:	6003      	str	r3, [r0, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002eb0:	232d      	movs	r3, #45	@ 0x2d
 8002eb2:	6043      	str	r3, [r0, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	6083      	str	r3, [r0, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002eb8:	60c3      	str	r3, [r0, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002eba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ebe:	6102      	str	r2, [r0, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ec0:	6143      	str	r3, [r0, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ec2:	6183      	str	r3, [r0, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002ec4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ec8:	61c2      	str	r2, [r0, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002eca:	6203      	str	r3, [r0, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ecc:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002ece:	f001 fb03 	bl	80044d8 <HAL_DMA_Init>
 8002ed2:	b988      	cbnz	r0, 8002ef8 <HAL_UART_MspInit+0x624>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002ed4:	4b45      	ldr	r3, [pc, #276]	@ (8002fec <HAL_UART_MspInit+0x718>)
 8002ed6:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8002ed8:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002eda:	2200      	movs	r2, #0
 8002edc:	2105      	movs	r1, #5
 8002ede:	2027      	movs	r0, #39	@ 0x27
 8002ee0:	f001 f8d4 	bl	800408c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002ee4:	2027      	movs	r0, #39	@ 0x27
 8002ee6:	f001 f8e1 	bl	80040ac <HAL_NVIC_EnableIRQ>
 8002eea:	e51c      	b.n	8002926 <HAL_UART_MspInit+0x52>
      Error_Handler();
 8002eec:	f7fd fe90 	bl	8000c10 <Error_Handler>
 8002ef0:	e787      	b.n	8002e02 <HAL_UART_MspInit+0x52e>
      Error_Handler();
 8002ef2:	f7fd fe8d 	bl	8000c10 <Error_Handler>
 8002ef6:	e7d5      	b.n	8002ea4 <HAL_UART_MspInit+0x5d0>
      Error_Handler();
 8002ef8:	f7fd fe8a 	bl	8000c10 <Error_Handler>
 8002efc:	e7ea      	b.n	8002ed4 <HAL_UART_MspInit+0x600>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002efe:	2301      	movs	r3, #1
 8002f00:	9310      	str	r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f02:	a810      	add	r0, sp, #64	@ 0x40
 8002f04:	f004 fe40 	bl	8007b88 <HAL_RCCEx_PeriphCLKConfig>
 8002f08:	2800      	cmp	r0, #0
 8002f0a:	d15c      	bne.n	8002fc6 <HAL_UART_MspInit+0x6f2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002f0c:	4b32      	ldr	r3, [pc, #200]	@ (8002fd8 <HAL_UART_MspInit+0x704>)
 8002f0e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8002f12:	f042 0220 	orr.w	r2, r2, #32
 8002f16:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8002f1a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8002f1e:	f002 0220 	and.w	r2, r2, #32
 8002f22:	920e      	str	r2, [sp, #56]	@ 0x38
 8002f24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f26:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002f2a:	f042 0204 	orr.w	r2, r2, #4
 8002f2e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002f32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f36:	f003 0304 	and.w	r3, r3, #4
 8002f3a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8002f3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
    GPIO_InitStruct.Pin = TX6_BACK_Pin|RX6_BACK_Pin;
 8002f3e:	23c0      	movs	r3, #192	@ 0xc0
 8002f40:	933f      	str	r3, [sp, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f42:	2302      	movs	r3, #2
 8002f44:	9340      	str	r3, [sp, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f46:	2500      	movs	r5, #0
 8002f48:	9541      	str	r5, [sp, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f4a:	9542      	str	r5, [sp, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8002f4c:	2307      	movs	r3, #7
 8002f4e:	9343      	str	r3, [sp, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f50:	a93f      	add	r1, sp, #252	@ 0xfc
 8002f52:	4828      	ldr	r0, [pc, #160]	@ (8002ff4 <HAL_UART_MspInit+0x720>)
 8002f54:	f003 fa0e 	bl	8006374 <HAL_GPIO_Init>
    hdma_usart6_tx.Instance = DMA1_Stream6;
 8002f58:	4827      	ldr	r0, [pc, #156]	@ (8002ff8 <HAL_UART_MspInit+0x724>)
 8002f5a:	4b28      	ldr	r3, [pc, #160]	@ (8002ffc <HAL_UART_MspInit+0x728>)
 8002f5c:	6003      	str	r3, [r0, #0]
    hdma_usart6_tx.Init.Request = DMA_REQUEST_USART6_TX;
 8002f5e:	2348      	movs	r3, #72	@ 0x48
 8002f60:	6043      	str	r3, [r0, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f62:	2340      	movs	r3, #64	@ 0x40
 8002f64:	6083      	str	r3, [r0, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f66:	60c5      	str	r5, [r0, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f6c:	6103      	str	r3, [r0, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f6e:	6145      	str	r5, [r0, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f70:	6185      	str	r5, [r0, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8002f72:	61c5      	str	r5, [r0, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f74:	6205      	str	r5, [r0, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f76:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8002f78:	f001 faae 	bl	80044d8 <HAL_DMA_Init>
 8002f7c:	bb30      	cbnz	r0, 8002fcc <HAL_UART_MspInit+0x6f8>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8002f7e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ff8 <HAL_UART_MspInit+0x724>)
 8002f80:	67a3      	str	r3, [r4, #120]	@ 0x78
 8002f82:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_usart6_rx.Instance = DMA1_Stream7;
 8002f84:	481e      	ldr	r0, [pc, #120]	@ (8003000 <HAL_UART_MspInit+0x72c>)
 8002f86:	4b1f      	ldr	r3, [pc, #124]	@ (8003004 <HAL_UART_MspInit+0x730>)
 8002f88:	6003      	str	r3, [r0, #0]
    hdma_usart6_rx.Init.Request = DMA_REQUEST_USART6_RX;
 8002f8a:	2347      	movs	r3, #71	@ 0x47
 8002f8c:	6043      	str	r3, [r0, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	6083      	str	r3, [r0, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f92:	60c3      	str	r3, [r0, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f94:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f98:	6102      	str	r2, [r0, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f9a:	6143      	str	r3, [r0, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f9c:	6183      	str	r3, [r0, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8002f9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002fa2:	61c2      	str	r2, [r0, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002fa4:	6203      	str	r3, [r0, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fa6:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002fa8:	f001 fa96 	bl	80044d8 <HAL_DMA_Init>
 8002fac:	b988      	cbnz	r0, 8002fd2 <HAL_UART_MspInit+0x6fe>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8002fae:	4b14      	ldr	r3, [pc, #80]	@ (8003000 <HAL_UART_MspInit+0x72c>)
 8002fb0:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8002fb2:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	2105      	movs	r1, #5
 8002fb8:	2047      	movs	r0, #71	@ 0x47
 8002fba:	f001 f867 	bl	800408c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002fbe:	2047      	movs	r0, #71	@ 0x47
 8002fc0:	f001 f874 	bl	80040ac <HAL_NVIC_EnableIRQ>
}
 8002fc4:	e4af      	b.n	8002926 <HAL_UART_MspInit+0x52>
      Error_Handler();
 8002fc6:	f7fd fe23 	bl	8000c10 <Error_Handler>
 8002fca:	e79f      	b.n	8002f0c <HAL_UART_MspInit+0x638>
      Error_Handler();
 8002fcc:	f7fd fe20 	bl	8000c10 <Error_Handler>
 8002fd0:	e7d5      	b.n	8002f7e <HAL_UART_MspInit+0x6aa>
      Error_Handler();
 8002fd2:	f7fd fe1d 	bl	8000c10 <Error_Handler>
 8002fd6:	e7ea      	b.n	8002fae <HAL_UART_MspInit+0x6da>
 8002fd8:	58024400 	.word	0x58024400
 8002fdc:	58020400 	.word	0x58020400
 8002fe0:	58020c00 	.word	0x58020c00
 8002fe4:	240019a8 	.word	0x240019a8
 8002fe8:	40020070 	.word	0x40020070
 8002fec:	24001930 	.word	0x24001930
 8002ff0:	40020088 	.word	0x40020088
 8002ff4:	58020800 	.word	0x58020800
 8002ff8:	240018b8 	.word	0x240018b8
 8002ffc:	400200a0 	.word	0x400200a0
 8003000:	24001840 	.word	0x24001840
 8003004:	400200b8 	.word	0x400200b8

08003008 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM5 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003008:	280f      	cmp	r0, #15
 800300a:	d901      	bls.n	8003010 <HAL_InitTick+0x8>
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 800300c:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim5);
  }

  /* Return function status */
  return HAL_ERROR;
}
 800300e:	4770      	bx	lr
{
 8003010:	b510      	push	{r4, lr}
 8003012:	b08a      	sub	sp, #40	@ 0x28
 8003014:	4604      	mov	r4, r0
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0U);
 8003016:	2200      	movs	r2, #0
 8003018:	4601      	mov	r1, r0
 800301a:	2032      	movs	r0, #50	@ 0x32
 800301c:	f001 f836 	bl	800408c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003020:	2032      	movs	r0, #50	@ 0x32
 8003022:	f001 f843 	bl	80040ac <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8003026:	4b1a      	ldr	r3, [pc, #104]	@ (8003090 <HAL_InitTick+0x88>)
 8003028:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM5_CLK_ENABLE();
 800302a:	4b1a      	ldr	r3, [pc, #104]	@ (8003094 <HAL_InitTick+0x8c>)
 800302c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8003030:	f042 0208 	orr.w	r2, r2, #8
 8003034:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8003038:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800303c:	f003 0308 	and.w	r3, r3, #8
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	9b00      	ldr	r3, [sp, #0]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003044:	a901      	add	r1, sp, #4
 8003046:	a802      	add	r0, sp, #8
 8003048:	f004 fc68 	bl	800791c <HAL_RCC_GetClockConfig>
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800304c:	9b07      	ldr	r3, [sp, #28]
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800304e:	b9bb      	cbnz	r3, 8003080 <HAL_InitTick+0x78>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003050:	f004 fc40 	bl	80078d4 <HAL_RCC_GetPCLK1Freq>
 8003054:	4603      	mov	r3, r0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003056:	4a10      	ldr	r2, [pc, #64]	@ (8003098 <HAL_InitTick+0x90>)
 8003058:	fba2 2303 	umull	r2, r3, r2, r3
 800305c:	0c9b      	lsrs	r3, r3, #18
 800305e:	3b01      	subs	r3, #1
  htim5.Instance = TIM5;
 8003060:	480e      	ldr	r0, [pc, #56]	@ (800309c <HAL_InitTick+0x94>)
 8003062:	4a0f      	ldr	r2, [pc, #60]	@ (80030a0 <HAL_InitTick+0x98>)
 8003064:	6002      	str	r2, [r0, #0]
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8003066:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800306a:	60c2      	str	r2, [r0, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 800306c:	6043      	str	r3, [r0, #4]
  htim5.Init.ClockDivision = 0;
 800306e:	2300      	movs	r3, #0
 8003070:	6103      	str	r3, [r0, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003072:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8003074:	f007 fa1e 	bl	800a4b4 <HAL_TIM_Base_Init>
 8003078:	b130      	cbz	r0, 8003088 <HAL_InitTick+0x80>
  return HAL_ERROR;
 800307a:	2001      	movs	r0, #1
}
 800307c:	b00a      	add	sp, #40	@ 0x28
 800307e:	bd10      	pop	{r4, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003080:	f004 fc28 	bl	80078d4 <HAL_RCC_GetPCLK1Freq>
 8003084:	0043      	lsls	r3, r0, #1
 8003086:	e7e6      	b.n	8003056 <HAL_InitTick+0x4e>
    return HAL_TIM_Base_Start_IT(&htim5);
 8003088:	4804      	ldr	r0, [pc, #16]	@ (800309c <HAL_InitTick+0x94>)
 800308a:	f007 f85d 	bl	800a148 <HAL_TIM_Base_Start_IT>
 800308e:	e7f5      	b.n	800307c <HAL_InitTick+0x74>
 8003090:	2400000c 	.word	0x2400000c
 8003094:	58024400 	.word	0x58024400
 8003098:	431bde83 	.word	0x431bde83
 800309c:	24002768 	.word	0x24002768
 80030a0:	40000c00 	.word	0x40000c00

080030a4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030a4:	e7fe      	b.n	80030a4 <NMI_Handler>

080030a6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030a6:	e7fe      	b.n	80030a6 <HardFault_Handler>

080030a8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030a8:	e7fe      	b.n	80030a8 <MemManage_Handler>

080030aa <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030aa:	e7fe      	b.n	80030aa <BusFault_Handler>

080030ac <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030ac:	e7fe      	b.n	80030ac <UsageFault_Handler>

080030ae <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030ae:	4770      	bx	lr

080030b0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80030b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80030b2:	4802      	ldr	r0, [pc, #8]	@ (80030bc <DMA1_Stream0_IRQHandler+0xc>)
 80030b4:	f002 f806 	bl	80050c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80030b8:	bd08      	pop	{r3, pc}
 80030ba:	bf00      	nop
 80030bc:	24001b88 	.word	0x24001b88

080030c0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80030c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80030c2:	4802      	ldr	r0, [pc, #8]	@ (80030cc <DMA1_Stream1_IRQHandler+0xc>)
 80030c4:	f001 fffe 	bl	80050c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80030c8:	bd08      	pop	{r3, pc}
 80030ca:	bf00      	nop
 80030cc:	24001b10 	.word	0x24001b10

080030d0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80030d0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80030d2:	4802      	ldr	r0, [pc, #8]	@ (80030dc <DMA1_Stream2_IRQHandler+0xc>)
 80030d4:	f001 fff6 	bl	80050c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80030d8:	bd08      	pop	{r3, pc}
 80030da:	bf00      	nop
 80030dc:	24001a98 	.word	0x24001a98

080030e0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80030e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80030e2:	4802      	ldr	r0, [pc, #8]	@ (80030ec <DMA1_Stream3_IRQHandler+0xc>)
 80030e4:	f001 ffee 	bl	80050c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80030e8:	bd08      	pop	{r3, pc}
 80030ea:	bf00      	nop
 80030ec:	24001a20 	.word	0x24001a20

080030f0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80030f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80030f2:	4802      	ldr	r0, [pc, #8]	@ (80030fc <DMA1_Stream4_IRQHandler+0xc>)
 80030f4:	f001 ffe6 	bl	80050c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80030f8:	bd08      	pop	{r3, pc}
 80030fa:	bf00      	nop
 80030fc:	240019a8 	.word	0x240019a8

08003100 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003100:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003102:	4802      	ldr	r0, [pc, #8]	@ (800310c <DMA1_Stream5_IRQHandler+0xc>)
 8003104:	f001 ffde 	bl	80050c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003108:	bd08      	pop	{r3, pc}
 800310a:	bf00      	nop
 800310c:	24001930 	.word	0x24001930

08003110 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003110:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8003112:	4802      	ldr	r0, [pc, #8]	@ (800311c <DMA1_Stream6_IRQHandler+0xc>)
 8003114:	f001 ffd6 	bl	80050c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003118:	bd08      	pop	{r3, pc}
 800311a:	bf00      	nop
 800311c:	240018b8 	.word	0x240018b8

08003120 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8003120:	b508      	push	{r3, lr}
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8003122:	4802      	ldr	r0, [pc, #8]	@ (800312c <FDCAN1_IT0_IRQHandler+0xc>)
 8003124:	f002 ff98 	bl	8006058 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8003128:	bd08      	pop	{r3, pc}
 800312a:	bf00      	nop
 800312c:	240025fc 	.word	0x240025fc

08003130 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8003130:	b508      	push	{r3, lr}
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8003132:	4802      	ldr	r0, [pc, #8]	@ (800313c <FDCAN2_IT0_IRQHandler+0xc>)
 8003134:	f002 ff90 	bl	8006058 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8003138:	bd08      	pop	{r3, pc}
 800313a:	bf00      	nop
 800313c:	2400255c 	.word	0x2400255c

08003140 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003140:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003142:	4802      	ldr	r0, [pc, #8]	@ (800314c <TIM4_IRQHandler+0xc>)
 8003144:	f007 f866 	bl	800a214 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003148:	bd08      	pop	{r3, pc}
 800314a:	bf00      	nop
 800314c:	240022c0 	.word	0x240022c0

08003150 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003150:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003152:	4802      	ldr	r0, [pc, #8]	@ (800315c <I2C1_EV_IRQHandler+0xc>)
 8003154:	f003 fd92 	bl	8006c7c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003158:	bd08      	pop	{r3, pc}
 800315a:	bf00      	nop
 800315c:	24002510 	.word	0x24002510

08003160 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003160:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003162:	4802      	ldr	r0, [pc, #8]	@ (800316c <USART1_IRQHandler+0xc>)
 8003164:	f007 fdc6 	bl	800acf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003168:	bd08      	pop	{r3, pc}
 800316a:	bf00      	nop
 800316c:	24002080 	.word	0x24002080

08003170 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003170:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003172:	4802      	ldr	r0, [pc, #8]	@ (800317c <USART2_IRQHandler+0xc>)
 8003174:	f007 fdbe 	bl	800acf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003178:	bd08      	pop	{r3, pc}
 800317a:	bf00      	nop
 800317c:	24001ff0 	.word	0x24001ff0

08003180 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003180:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003182:	4802      	ldr	r0, [pc, #8]	@ (800318c <USART3_IRQHandler+0xc>)
 8003184:	f007 fdb6 	bl	800acf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003188:	bd08      	pop	{r3, pc}
 800318a:	bf00      	nop
 800318c:	24001f60 	.word	0x24001f60

08003190 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8003190:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003192:	4802      	ldr	r0, [pc, #8]	@ (800319c <DMA1_Stream7_IRQHandler+0xc>)
 8003194:	f001 ff96 	bl	80050c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8003198:	bd08      	pop	{r3, pc}
 800319a:	bf00      	nop
 800319c:	24001840 	.word	0x24001840

080031a0 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80031a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80031a2:	4802      	ldr	r0, [pc, #8]	@ (80031ac <SDMMC1_IRQHandler+0xc>)
 80031a4:	f006 fd3e 	bl	8009c24 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80031a8:	bd08      	pop	{r3, pc}
 80031aa:	bf00      	nop
 80031ac:	24002358 	.word	0x24002358

080031b0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80031b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80031b2:	4802      	ldr	r0, [pc, #8]	@ (80031bc <TIM5_IRQHandler+0xc>)
 80031b4:	f007 f82e 	bl	800a214 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80031b8:	bd08      	pop	{r3, pc}
 80031ba:	bf00      	nop
 80031bc:	24002768 	.word	0x24002768

080031c0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80031c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80031c2:	4802      	ldr	r0, [pc, #8]	@ (80031cc <UART4_IRQHandler+0xc>)
 80031c4:	f007 fd96 	bl	800acf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80031c8:	bd08      	pop	{r3, pc}
 80031ca:	bf00      	nop
 80031cc:	24002230 	.word	0x24002230

080031d0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80031d0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80031d2:	4802      	ldr	r0, [pc, #8]	@ (80031dc <DMA2_Stream0_IRQHandler+0xc>)
 80031d4:	f001 ff76 	bl	80050c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80031d8:	bd08      	pop	{r3, pc}
 80031da:	bf00      	nop
 80031dc:	2400244c 	.word	0x2400244c

080031e0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80031e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80031e2:	4802      	ldr	r0, [pc, #8]	@ (80031ec <DMA2_Stream1_IRQHandler+0xc>)
 80031e4:	f001 ff6e 	bl	80050c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80031e8:	bd08      	pop	{r3, pc}
 80031ea:	bf00      	nop
 80031ec:	240023d4 	.word	0x240023d4

080031f0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80031f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80031f2:	4802      	ldr	r0, [pc, #8]	@ (80031fc <DMA2_Stream2_IRQHandler+0xc>)
 80031f4:	f001 ff66 	bl	80050c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80031f8:	bd08      	pop	{r3, pc}
 80031fa:	bf00      	nop
 80031fc:	24001e58 	.word	0x24001e58

08003200 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003200:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003202:	4802      	ldr	r0, [pc, #8]	@ (800320c <DMA2_Stream3_IRQHandler+0xc>)
 8003204:	f001 ff5e 	bl	80050c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003208:	bd08      	pop	{r3, pc}
 800320a:	bf00      	nop
 800320c:	24001de0 	.word	0x24001de0

08003210 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8003210:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8003212:	4802      	ldr	r0, [pc, #8]	@ (800321c <DMA2_Stream4_IRQHandler+0xc>)
 8003214:	f001 ff56 	bl	80050c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8003218:	bd08      	pop	{r3, pc}
 800321a:	bf00      	nop
 800321c:	24001d68 	.word	0x24001d68

08003220 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8003220:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8003222:	4802      	ldr	r0, [pc, #8]	@ (800322c <DMA2_Stream5_IRQHandler+0xc>)
 8003224:	f001 ff4e 	bl	80050c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8003228:	bd08      	pop	{r3, pc}
 800322a:	bf00      	nop
 800322c:	24001cf0 	.word	0x24001cf0

08003230 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003230:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_tx);
 8003232:	4802      	ldr	r0, [pc, #8]	@ (800323c <DMA2_Stream6_IRQHandler+0xc>)
 8003234:	f001 ff46 	bl	80050c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003238:	bd08      	pop	{r3, pc}
 800323a:	bf00      	nop
 800323c:	24001c78 	.word	0x24001c78

08003240 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003240:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8003242:	4802      	ldr	r0, [pc, #8]	@ (800324c <DMA2_Stream7_IRQHandler+0xc>)
 8003244:	f001 ff3e 	bl	80050c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003248:	bd08      	pop	{r3, pc}
 800324a:	bf00      	nop
 800324c:	24001c00 	.word	0x24001c00

08003250 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003250:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003252:	4802      	ldr	r0, [pc, #8]	@ (800325c <USART6_IRQHandler+0xc>)
 8003254:	f007 fd4e 	bl	800acf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003258:	bd08      	pop	{r3, pc}
 800325a:	bf00      	nop
 800325c:	24001ed0 	.word	0x24001ed0

08003260 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8003260:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8003262:	4802      	ldr	r0, [pc, #8]	@ (800326c <UART7_IRQHandler+0xc>)
 8003264:	f007 fd46 	bl	800acf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8003268:	bd08      	pop	{r3, pc}
 800326a:	bf00      	nop
 800326c:	240021a0 	.word	0x240021a0

08003270 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8003270:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8003272:	4802      	ldr	r0, [pc, #8]	@ (800327c <UART8_IRQHandler+0xc>)
 8003274:	f007 fd3e 	bl	800acf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8003278:	bd08      	pop	{r3, pc}
 800327a:	bf00      	nop
 800327c:	24002110 	.word	0x24002110

08003280 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8003280:	2001      	movs	r0, #1
 8003282:	4770      	bx	lr

08003284 <_kill>:

int _kill(int pid, int sig)
{
 8003284:	b508      	push	{r3, lr}
	errno = EINVAL;
 8003286:	f017 febd 	bl	801b004 <__errno>
 800328a:	2316      	movs	r3, #22
 800328c:	6003      	str	r3, [r0, #0]
	return -1;
}
 800328e:	f04f 30ff 	mov.w	r0, #4294967295
 8003292:	bd08      	pop	{r3, pc}

08003294 <_exit>:

void _exit (int status)
{
 8003294:	b508      	push	{r3, lr}
	_kill(status, -1);
 8003296:	f04f 31ff 	mov.w	r1, #4294967295
 800329a:	f7ff fff3 	bl	8003284 <_kill>
	while (1) {}		/* Make sure we hang here */
 800329e:	e7fe      	b.n	800329e <_exit+0xa>

080032a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032a0:	b510      	push	{r4, lr}
 80032a2:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032a4:	4a0c      	ldr	r2, [pc, #48]	@ (80032d8 <_sbrk+0x38>)
 80032a6:	490d      	ldr	r1, [pc, #52]	@ (80032dc <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032a8:	480d      	ldr	r0, [pc, #52]	@ (80032e0 <_sbrk+0x40>)
 80032aa:	6800      	ldr	r0, [r0, #0]
 80032ac:	b140      	cbz	r0, 80032c0 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032ae:	480c      	ldr	r0, [pc, #48]	@ (80032e0 <_sbrk+0x40>)
 80032b0:	6800      	ldr	r0, [r0, #0]
 80032b2:	4403      	add	r3, r0
 80032b4:	1a52      	subs	r2, r2, r1
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d806      	bhi.n	80032c8 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80032ba:	4a09      	ldr	r2, [pc, #36]	@ (80032e0 <_sbrk+0x40>)
 80032bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80032be:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80032c0:	4807      	ldr	r0, [pc, #28]	@ (80032e0 <_sbrk+0x40>)
 80032c2:	4c08      	ldr	r4, [pc, #32]	@ (80032e4 <_sbrk+0x44>)
 80032c4:	6004      	str	r4, [r0, #0]
 80032c6:	e7f2      	b.n	80032ae <_sbrk+0xe>
    errno = ENOMEM;
 80032c8:	f017 fe9c 	bl	801b004 <__errno>
 80032cc:	230c      	movs	r3, #12
 80032ce:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80032d0:	f04f 30ff 	mov.w	r0, #4294967295
 80032d4:	e7f3      	b.n	80032be <_sbrk+0x1e>
 80032d6:	bf00      	nop
 80032d8:	24080000 	.word	0x24080000
 80032dc:	00000400 	.word	0x00000400
 80032e0:	240027b4 	.word	0x240027b4
 80032e4:	240095a0 	.word	0x240095a0

080032e8 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80032e8:	4a27      	ldr	r2, [pc, #156]	@ (8003388 <SystemInit+0xa0>)
 80032ea:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80032ee:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80032f2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80032f6:	4b25      	ldr	r3, [pc, #148]	@ (800338c <SystemInit+0xa4>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 030f 	and.w	r3, r3, #15
 80032fe:	2b06      	cmp	r3, #6
 8003300:	d806      	bhi.n	8003310 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003302:	4a22      	ldr	r2, [pc, #136]	@ (800338c <SystemInit+0xa4>)
 8003304:	6813      	ldr	r3, [r2, #0]
 8003306:	f023 030f 	bic.w	r3, r3, #15
 800330a:	f043 0307 	orr.w	r3, r3, #7
 800330e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003310:	4b1f      	ldr	r3, [pc, #124]	@ (8003390 <SystemInit+0xa8>)
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	f042 0201 	orr.w	r2, r2, #1
 8003318:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800331a:	2200      	movs	r2, #0
 800331c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800331e:	6819      	ldr	r1, [r3, #0]
 8003320:	4a1c      	ldr	r2, [pc, #112]	@ (8003394 <SystemInit+0xac>)
 8003322:	400a      	ands	r2, r1
 8003324:	601a      	str	r2, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003326:	4b19      	ldr	r3, [pc, #100]	@ (800338c <SystemInit+0xa4>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f013 0f08 	tst.w	r3, #8
 800332e:	d006      	beq.n	800333e <SystemInit+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003330:	4a16      	ldr	r2, [pc, #88]	@ (800338c <SystemInit+0xa4>)
 8003332:	6813      	ldr	r3, [r2, #0]
 8003334:	f023 030f 	bic.w	r3, r3, #15
 8003338:	f043 0307 	orr.w	r3, r3, #7
 800333c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800333e:	4b14      	ldr	r3, [pc, #80]	@ (8003390 <SystemInit+0xa8>)
 8003340:	2200      	movs	r2, #0
 8003342:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003344:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003346:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003348:	4913      	ldr	r1, [pc, #76]	@ (8003398 <SystemInit+0xb0>)
 800334a:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800334c:	4913      	ldr	r1, [pc, #76]	@ (800339c <SystemInit+0xb4>)
 800334e:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003350:	4913      	ldr	r1, [pc, #76]	@ (80033a0 <SystemInit+0xb8>)
 8003352:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003354:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003356:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003358:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800335a:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800335c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800335e:	6819      	ldr	r1, [r3, #0]
 8003360:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 8003364:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003366:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003368:	4b0e      	ldr	r3, [pc, #56]	@ (80033a4 <SystemInit+0xbc>)
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	4b0e      	ldr	r3, [pc, #56]	@ (80033a8 <SystemInit+0xc0>)
 800336e:	4013      	ands	r3, r2
 8003370:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003374:	d203      	bcs.n	800337e <SystemInit+0x96>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003376:	4b0d      	ldr	r3, [pc, #52]	@ (80033ac <SystemInit+0xc4>)
 8003378:	2201      	movs	r2, #1
 800337a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800337e:	4b0c      	ldr	r3, [pc, #48]	@ (80033b0 <SystemInit+0xc8>)
 8003380:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8003384:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003386:	4770      	bx	lr
 8003388:	e000ed00 	.word	0xe000ed00
 800338c:	52002000 	.word	0x52002000
 8003390:	58024400 	.word	0x58024400
 8003394:	eaf6ed7f 	.word	0xeaf6ed7f
 8003398:	02020200 	.word	0x02020200
 800339c:	01ff0000 	.word	0x01ff0000
 80033a0:	01010280 	.word	0x01010280
 80033a4:	5c001000 	.word	0x5c001000
 80033a8:	ffff0000 	.word	0xffff0000
 80033ac:	51008000 	.word	0x51008000
 80033b0:	52004000 	.word	0x52004000

080033b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80033b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80033ec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80033b8:	f7ff ff96 	bl	80032e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033bc:	480c      	ldr	r0, [pc, #48]	@ (80033f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80033be:	490d      	ldr	r1, [pc, #52]	@ (80033f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80033c0:	4a0d      	ldr	r2, [pc, #52]	@ (80033f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80033c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033c4:	e002      	b.n	80033cc <LoopCopyDataInit>

080033c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033ca:	3304      	adds	r3, #4

080033cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033d0:	d3f9      	bcc.n	80033c6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033d2:	4a0a      	ldr	r2, [pc, #40]	@ (80033fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80033d4:	4c0a      	ldr	r4, [pc, #40]	@ (8003400 <LoopFillZerobss+0x22>)
  movs r3, #0
 80033d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033d8:	e001      	b.n	80033de <LoopFillZerobss>

080033da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033dc:	3204      	adds	r2, #4

080033de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033e0:	d3fb      	bcc.n	80033da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80033e2:	f017 fe15 	bl	801b010 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033e6:	f7fd fd8b 	bl	8000f00 <main>
  bx  lr
 80033ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80033ec:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80033f0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80033f4:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 80033f8:	0801b7bc 	.word	0x0801b7bc
  ldr r2, =_sbss
 80033fc:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 8003400:	240095a0 	.word	0x240095a0

08003404 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003404:	e7fe      	b.n	8003404 <ADC3_IRQHandler>
	...

08003408 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003408:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800340a:	2003      	movs	r0, #3
 800340c:	f000 fe2c 	bl	8004068 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003410:	f003 fffa 	bl	8007408 <HAL_RCC_GetSysClockFreq>
 8003414:	490f      	ldr	r1, [pc, #60]	@ (8003454 <HAL_Init+0x4c>)
 8003416:	698b      	ldr	r3, [r1, #24]
 8003418:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800341c:	4a0e      	ldr	r2, [pc, #56]	@ (8003458 <HAL_Init+0x50>)
 800341e:	5cd3      	ldrb	r3, [r2, r3]
 8003420:	f003 031f 	and.w	r3, r3, #31
 8003424:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003426:	698b      	ldr	r3, [r1, #24]
 8003428:	f003 030f 	and.w	r3, r3, #15
 800342c:	5cd3      	ldrb	r3, [r2, r3]
 800342e:	f003 031f 	and.w	r3, r3, #31
 8003432:	fa20 f303 	lsr.w	r3, r0, r3
 8003436:	4a09      	ldr	r2, [pc, #36]	@ (800345c <HAL_Init+0x54>)
 8003438:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800343a:	4b09      	ldr	r3, [pc, #36]	@ (8003460 <HAL_Init+0x58>)
 800343c:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800343e:	2000      	movs	r0, #0
 8003440:	f7ff fde2 	bl	8003008 <HAL_InitTick>
 8003444:	b110      	cbz	r0, 800344c <HAL_Init+0x44>
  {
    return HAL_ERROR;
 8003446:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 8003448:	4620      	mov	r0, r4
 800344a:	bd10      	pop	{r4, pc}
 800344c:	4604      	mov	r4, r0
  HAL_MspInit();
 800344e:	f7fe ff93 	bl	8002378 <HAL_MspInit>
  return HAL_OK;
 8003452:	e7f9      	b.n	8003448 <HAL_Init+0x40>
 8003454:	58024400 	.word	0x58024400
 8003458:	0801b354 	.word	0x0801b354
 800345c:	24000000 	.word	0x24000000
 8003460:	24000004 	.word	0x24000004

08003464 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8003464:	4b03      	ldr	r3, [pc, #12]	@ (8003474 <HAL_IncTick+0x10>)
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	4a03      	ldr	r2, [pc, #12]	@ (8003478 <HAL_IncTick+0x14>)
 800346a:	6811      	ldr	r1, [r2, #0]
 800346c:	440b      	add	r3, r1
 800346e:	6013      	str	r3, [r2, #0]
}
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	24000008 	.word	0x24000008
 8003478:	240027b8 	.word	0x240027b8

0800347c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800347c:	4b01      	ldr	r3, [pc, #4]	@ (8003484 <HAL_GetTick+0x8>)
 800347e:	6818      	ldr	r0, [r3, #0]
}
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	240027b8 	.word	0x240027b8

08003488 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003488:	b538      	push	{r3, r4, r5, lr}
 800348a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800348c:	f7ff fff6 	bl	800347c <HAL_GetTick>
 8003490:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003492:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003496:	d002      	beq.n	800349e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8003498:	4b04      	ldr	r3, [pc, #16]	@ (80034ac <HAL_Delay+0x24>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800349e:	f7ff ffed 	bl	800347c <HAL_GetTick>
 80034a2:	1b40      	subs	r0, r0, r5
 80034a4:	42a0      	cmp	r0, r4
 80034a6:	d3fa      	bcc.n	800349e <HAL_Delay+0x16>
  {
  }
}
 80034a8:	bd38      	pop	{r3, r4, r5, pc}
 80034aa:	bf00      	nop
 80034ac:	24000008 	.word	0x24000008

080034b0 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80034b0:	4b01      	ldr	r3, [pc, #4]	@ (80034b8 <HAL_GetREVID+0x8>)
 80034b2:	6818      	ldr	r0, [r3, #0]
}
 80034b4:	0c00      	lsrs	r0, r0, #16
 80034b6:	4770      	bx	lr
 80034b8:	5c001000 	.word	0x5c001000

080034bc <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80034bc:	b410      	push	{r4}
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80034be:	3030      	adds	r0, #48	@ 0x30
 80034c0:	0a0b      	lsrs	r3, r1, #8
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	f003 030c 	and.w	r3, r3, #12

  MODIFY_REG(*preg,
 80034c8:	58c4      	ldr	r4, [r0, r3]
 80034ca:	f001 011f 	and.w	r1, r1, #31
 80034ce:	f04f 0c1f 	mov.w	ip, #31
 80034d2:	fa0c fc01 	lsl.w	ip, ip, r1
 80034d6:	ea24 0c0c 	bic.w	ip, r4, ip
 80034da:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80034de:	408a      	lsls	r2, r1
 80034e0:	ea4c 0202 	orr.w	r2, ip, r2
 80034e4:	50c2      	str	r2, [r0, r3]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80034e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80034ec:	b410      	push	{r4}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80034ee:	3014      	adds	r0, #20
 80034f0:	0e4b      	lsrs	r3, r1, #25
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	f003 0304 	and.w	r3, r3, #4

  MODIFY_REG(*preg,
 80034f8:	58c4      	ldr	r4, [r0, r3]
 80034fa:	f3c1 5104 	ubfx	r1, r1, #20, #5
 80034fe:	f04f 0c07 	mov.w	ip, #7
 8003502:	fa0c fc01 	lsl.w	ip, ip, r1
 8003506:	ea24 0c0c 	bic.w	ip, r4, ip
 800350a:	408a      	lsls	r2, r1
 800350c:	ea4c 0202 	orr.w	r2, ip, r2
 8003510:	50c2      	str	r2, [r0, r3]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003512:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003516:	4770      	bx	lr

08003518 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003518:	b570      	push	{r4, r5, r6, lr}
 800351a:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800351c:	2300      	movs	r3, #0
 800351e:	9301      	str	r3, [sp, #4]
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003520:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 8003524:	2b01      	cmp	r3, #1
 8003526:	f000 8224 	beq.w	8003972 <HAL_ADC_ConfigChannel+0x45a>
 800352a:	4604      	mov	r4, r0
 800352c:	460d      	mov	r5, r1
 800352e:	2301      	movs	r3, #1
 8003530:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003534:	6802      	ldr	r2, [r0, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003536:	6893      	ldr	r3, [r2, #8]
 8003538:	f013 0f04 	tst.w	r3, #4
 800353c:	d009      	beq.n	8003552 <HAL_ADC_ConfigChannel+0x3a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800353e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8003540:	f043 0320 	orr.w	r3, r3, #32
 8003544:	6543      	str	r3, [r0, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003546:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003548:	2300      	movs	r3, #0
 800354a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 800354e:	b002      	add	sp, #8
 8003550:	bd70      	pop	{r4, r5, r6, pc}
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003552:	680b      	ldr	r3, [r1, #0]
 8003554:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8003558:	2900      	cmp	r1, #0
 800355a:	d13c      	bne.n	80035d6 <HAL_ADC_ConfigChannel+0xbe>
 800355c:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8003560:	2101      	movs	r1, #1
 8003562:	4099      	lsls	r1, r3
 8003564:	69d3      	ldr	r3, [r2, #28]
 8003566:	430b      	orrs	r3, r1
 8003568:	61d3      	str	r3, [r2, #28]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800356a:	682a      	ldr	r2, [r5, #0]
 800356c:	6869      	ldr	r1, [r5, #4]
 800356e:	6820      	ldr	r0, [r4, #0]
 8003570:	f7ff ffa4 	bl	80034bc <LL_ADC_REG_SetSequencerRanks>
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003574:	6820      	ldr	r0, [r4, #0]
 8003576:	6883      	ldr	r3, [r0, #8]
 8003578:	f013 0304 	ands.w	r3, r3, #4
 800357c:	d000      	beq.n	8003580 <HAL_ADC_ConfigChannel+0x68>
 800357e:	2301      	movs	r3, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003580:	6882      	ldr	r2, [r0, #8]
 8003582:	f012 0208 	ands.w	r2, r2, #8
 8003586:	d000      	beq.n	800358a <HAL_ADC_ConfigChannel+0x72>
 8003588:	2201      	movs	r2, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800358a:	ea52 0603 	orrs.w	r6, r2, r3
 800358e:	d02e      	beq.n	80035ee <HAL_ADC_ConfigChannel+0xd6>
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003590:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003592:	6893      	ldr	r3, [r2, #8]
 8003594:	f013 0f01 	tst.w	r3, #1
 8003598:	f040 81e7 	bne.w	800396a <HAL_ADC_ConfigChannel+0x452>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800359c:	682b      	ldr	r3, [r5, #0]
 800359e:	68e8      	ldr	r0, [r5, #12]
  MODIFY_REG(ADCx->DIFSEL,
 80035a0:	f8d2 10c0 	ldr.w	r1, [r2, #192]	@ 0xc0
 80035a4:	f3c3 0613 	ubfx	r6, r3, #0, #20
 80035a8:	ea21 0106 	bic.w	r1, r1, r6
 80035ac:	f000 0618 	and.w	r6, r0, #24
 80035b0:	48ae      	ldr	r0, [pc, #696]	@ (800386c <HAL_ADC_ConfigChannel+0x354>)
 80035b2:	40f0      	lsrs	r0, r6
 80035b4:	4003      	ands	r3, r0
 80035b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035ba:	430b      	orrs	r3, r1
 80035bc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80035c0:	68ea      	ldr	r2, [r5, #12]
 80035c2:	4bab      	ldr	r3, [pc, #684]	@ (8003870 <HAL_ADC_ConfigChannel+0x358>)
 80035c4:	429a      	cmp	r2, r3
 80035c6:	f000 80a1 	beq.w	800370c <HAL_ADC_ConfigChannel+0x1f4>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80035ca:	682b      	ldr	r3, [r5, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f2c0 8153 	blt.w	8003878 <HAL_ADC_ConfigChannel+0x360>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035d2:	2000      	movs	r0, #0
 80035d4:	e7b8      	b.n	8003548 <HAL_ADC_ConfigChannel+0x30>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d6:	fa93 f3a3 	rbit	r3, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80035da:	b133      	cbz	r3, 80035ea <HAL_ADC_ConfigChannel+0xd2>
  {
    return 32U;
  }
  return __builtin_clz(value);
 80035dc:	fab3 f383 	clz	r3, r3
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80035e0:	f003 031f 	and.w	r3, r3, #31
 80035e4:	2101      	movs	r1, #1
 80035e6:	4099      	lsls	r1, r3
 80035e8:	e7bc      	b.n	8003564 <HAL_ADC_ConfigChannel+0x4c>
    return 32U;
 80035ea:	2320      	movs	r3, #32
 80035ec:	e7f8      	b.n	80035e0 <HAL_ADC_ConfigChannel+0xc8>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80035ee:	68aa      	ldr	r2, [r5, #8]
 80035f0:	6829      	ldr	r1, [r5, #0]
 80035f2:	f7ff ff7b 	bl	80034ec <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80035f6:	4b9f      	ldr	r3, [pc, #636]	@ (8003874 <HAL_ADC_ConfigChannel+0x35c>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80035fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003602:	d00b      	beq.n	800361c <HAL_ADC_ConfigChannel+0x104>
 8003604:	6822      	ldr	r2, [r4, #0]
 8003606:	68d3      	ldr	r3, [r2, #12]
 8003608:	f013 0f10 	tst.w	r3, #16
 800360c:	d13b      	bne.n	8003686 <HAL_ADC_ConfigChannel+0x16e>
 800360e:	696b      	ldr	r3, [r5, #20]
 8003610:	68d2      	ldr	r2, [r2, #12]
 8003612:	f3c2 0282 	ubfx	r2, r2, #2, #3
 8003616:	0052      	lsls	r2, r2, #1
 8003618:	4093      	lsls	r3, r2
 800361a:	e006      	b.n	800362a <HAL_ADC_ConfigChannel+0x112>
 800361c:	696b      	ldr	r3, [r5, #20]
 800361e:	6822      	ldr	r2, [r4, #0]
 8003620:	68d2      	ldr	r2, [r2, #12]
 8003622:	f3c2 0282 	ubfx	r2, r2, #2, #3
 8003626:	0052      	lsls	r2, r2, #1
 8003628:	4093      	lsls	r3, r2
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800362a:	6929      	ldr	r1, [r5, #16]
 800362c:	2904      	cmp	r1, #4
 800362e:	d038      	beq.n	80036a2 <HAL_ADC_ConfigChannel+0x18a>
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003630:	6822      	ldr	r2, [r4, #0]
 8003632:	6828      	ldr	r0, [r5, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003634:	f102 0c60 	add.w	ip, r2, #96	@ 0x60
    MODIFY_REG(*preg,
 8003638:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
 800363c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003640:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8003644:	4303      	orrs	r3, r0
 8003646:	4313      	orrs	r3, r2
 8003648:	f84c 3021 	str.w	r3, [ip, r1, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800364c:	6823      	ldr	r3, [r4, #0]
 800364e:	6928      	ldr	r0, [r5, #16]
 8003650:	7e6a      	ldrb	r2, [r5, #25]
 8003652:	2a01      	cmp	r2, #1
 8003654:	d01f      	beq.n	8003696 <HAL_ADC_ConfigChannel+0x17e>
 8003656:	4631      	mov	r1, r6
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003658:	3360      	adds	r3, #96	@ 0x60
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800365a:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 800365e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003662:	430a      	orrs	r2, r1
 8003664:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003668:	6821      	ldr	r1, [r4, #0]
 800366a:	692a      	ldr	r2, [r5, #16]
 800366c:	7e2b      	ldrb	r3, [r5, #24]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d014      	beq.n	800369c <HAL_ADC_ConfigChannel+0x184>
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003672:	690b      	ldr	r3, [r1, #16]
 8003674:	f423 43f0 	bic.w	r3, r3, #30720	@ 0x7800
 8003678:	f002 021f 	and.w	r2, r2, #31
 800367c:	fa06 f202 	lsl.w	r2, r6, r2
 8003680:	4313      	orrs	r3, r2
 8003682:	610b      	str	r3, [r1, #16]
}
 8003684:	e784      	b.n	8003590 <HAL_ADC_ConfigChannel+0x78>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003686:	696b      	ldr	r3, [r5, #20]
 8003688:	68d2      	ldr	r2, [r2, #12]
 800368a:	0892      	lsrs	r2, r2, #2
 800368c:	f002 0204 	and.w	r2, r2, #4
 8003690:	0052      	lsls	r2, r2, #1
 8003692:	4093      	lsls	r3, r2
 8003694:	e7c9      	b.n	800362a <HAL_ADC_ConfigChannel+0x112>
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003696:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800369a:	e7dd      	b.n	8003658 <HAL_ADC_ConfigChannel+0x140>
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800369c:	f44f 6600 	mov.w	r6, #2048	@ 0x800
 80036a0:	e7e7      	b.n	8003672 <HAL_ADC_ConfigChannel+0x15a>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80036a2:	6822      	ldr	r2, [r4, #0]
 80036a4:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 80036a6:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
 80036aa:	6829      	ldr	r1, [r5, #0]
 80036ac:	ebb3 6f81 	cmp.w	r3, r1, lsl #26
 80036b0:	d01d      	beq.n	80036ee <HAL_ADC_ConfigChannel+0x1d6>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80036b2:	6822      	ldr	r2, [r4, #0]
 80036b4:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 80036b6:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
 80036ba:	6829      	ldr	r1, [r5, #0]
 80036bc:	ebb3 6f81 	cmp.w	r3, r1, lsl #26
 80036c0:	d01a      	beq.n	80036f8 <HAL_ADC_ConfigChannel+0x1e0>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80036c2:	6822      	ldr	r2, [r4, #0]
 80036c4:	6e93      	ldr	r3, [r2, #104]	@ 0x68
 80036c6:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
 80036ca:	6829      	ldr	r1, [r5, #0]
 80036cc:	ebb3 6f81 	cmp.w	r3, r1, lsl #26
 80036d0:	d017      	beq.n	8003702 <HAL_ADC_ConfigChannel+0x1ea>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80036d2:	6822      	ldr	r2, [r4, #0]
 80036d4:	6ed3      	ldr	r3, [r2, #108]	@ 0x6c
 80036d6:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
 80036da:	6829      	ldr	r1, [r5, #0]
 80036dc:	ebb3 6f81 	cmp.w	r3, r1, lsl #26
 80036e0:	f47f af56 	bne.w	8003590 <HAL_ADC_ConfigChannel+0x78>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80036e4:	6ed3      	ldr	r3, [r2, #108]	@ 0x6c
 80036e6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80036ea:	66d3      	str	r3, [r2, #108]	@ 0x6c
 80036ec:	e750      	b.n	8003590 <HAL_ADC_ConfigChannel+0x78>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80036ee:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 80036f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80036f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80036f6:	e7dc      	b.n	80036b2 <HAL_ADC_ConfigChannel+0x19a>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80036f8:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 80036fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80036fe:	6653      	str	r3, [r2, #100]	@ 0x64
 8003700:	e7df      	b.n	80036c2 <HAL_ADC_ConfigChannel+0x1aa>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003702:	6e93      	ldr	r3, [r2, #104]	@ 0x68
 8003704:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003708:	6693      	str	r3, [r2, #104]	@ 0x68
 800370a:	e7e2      	b.n	80036d2 <HAL_ADC_ConfigChannel+0x1ba>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800370c:	6820      	ldr	r0, [r4, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800370e:	682b      	ldr	r3, [r5, #0]
 8003710:	f3c3 0613 	ubfx	r6, r3, #0, #20
 8003714:	bb3e      	cbnz	r6, 8003766 <HAL_ADC_ConfigChannel+0x24e>
 8003716:	0e9a      	lsrs	r2, r3, #26
 8003718:	3201      	adds	r2, #1
 800371a:	f002 021f 	and.w	r2, r2, #31
 800371e:	2a09      	cmp	r2, #9
 8003720:	bf8c      	ite	hi
 8003722:	2200      	movhi	r2, #0
 8003724:	2201      	movls	r2, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003726:	2a00      	cmp	r2, #0
 8003728:	d055      	beq.n	80037d6 <HAL_ADC_ConfigChannel+0x2be>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800372a:	bb5e      	cbnz	r6, 8003784 <HAL_ADC_ConfigChannel+0x26c>
 800372c:	0e99      	lsrs	r1, r3, #26
 800372e:	3101      	adds	r1, #1
 8003730:	0689      	lsls	r1, r1, #26
 8003732:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 8003736:	bb8e      	cbnz	r6, 800379c <HAL_ADC_ConfigChannel+0x284>
 8003738:	ea4f 6c93 	mov.w	ip, r3, lsr #26
 800373c:	f10c 0c01 	add.w	ip, ip, #1
 8003740:	f00c 0c1f 	and.w	ip, ip, #31
 8003744:	2201      	movs	r2, #1
 8003746:	fa02 f20c 	lsl.w	r2, r2, ip
 800374a:	4311      	orrs	r1, r2
 800374c:	bbae      	cbnz	r6, 80037ba <HAL_ADC_ConfigChannel+0x2a2>
 800374e:	0e9b      	lsrs	r3, r3, #26
 8003750:	3301      	adds	r3, #1
 8003752:	f003 031f 	and.w	r3, r3, #31
 8003756:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800375a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800375c:	4319      	orrs	r1, r3
 800375e:	68aa      	ldr	r2, [r5, #8]
 8003760:	f7ff fec4 	bl	80034ec <LL_ADC_SetChannelSamplingTime>
 8003764:	e731      	b.n	80035ca <HAL_ADC_ConfigChannel+0xb2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003766:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 800376a:	b14a      	cbz	r2, 8003780 <HAL_ADC_ConfigChannel+0x268>
  return __builtin_clz(value);
 800376c:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003770:	3201      	adds	r2, #1
 8003772:	f002 021f 	and.w	r2, r2, #31
 8003776:	2a09      	cmp	r2, #9
 8003778:	bf8c      	ite	hi
 800377a:	2200      	movhi	r2, #0
 800377c:	2201      	movls	r2, #1
 800377e:	e7d2      	b.n	8003726 <HAL_ADC_ConfigChannel+0x20e>
    return 32U;
 8003780:	2220      	movs	r2, #32
 8003782:	e7f5      	b.n	8003770 <HAL_ADC_ConfigChannel+0x258>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003784:	fa93 f1a3 	rbit	r1, r3
  if (value == 0U)
 8003788:	b131      	cbz	r1, 8003798 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800378a:	fab1 f181 	clz	r1, r1
 800378e:	3101      	adds	r1, #1
 8003790:	0689      	lsls	r1, r1, #26
 8003792:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 8003796:	e7ce      	b.n	8003736 <HAL_ADC_ConfigChannel+0x21e>
    return 32U;
 8003798:	2120      	movs	r1, #32
 800379a:	e7f8      	b.n	800378e <HAL_ADC_ConfigChannel+0x276>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379c:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 80037a0:	b14a      	cbz	r2, 80037b6 <HAL_ADC_ConfigChannel+0x29e>
  return __builtin_clz(value);
 80037a2:	fab2 f282 	clz	r2, r2
 80037a6:	3201      	adds	r2, #1
 80037a8:	f002 021f 	and.w	r2, r2, #31
 80037ac:	f04f 0c01 	mov.w	ip, #1
 80037b0:	fa0c f202 	lsl.w	r2, ip, r2
 80037b4:	e7c9      	b.n	800374a <HAL_ADC_ConfigChannel+0x232>
    return 32U;
 80037b6:	2220      	movs	r2, #32
 80037b8:	e7f5      	b.n	80037a6 <HAL_ADC_ConfigChannel+0x28e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ba:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80037be:	b143      	cbz	r3, 80037d2 <HAL_ADC_ConfigChannel+0x2ba>
  return __builtin_clz(value);
 80037c0:	fab3 f383 	clz	r3, r3
 80037c4:	3301      	adds	r3, #1
 80037c6:	f003 031f 	and.w	r3, r3, #31
 80037ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80037ce:	051b      	lsls	r3, r3, #20
 80037d0:	e7c4      	b.n	800375c <HAL_ADC_ConfigChannel+0x244>
    return 32U;
 80037d2:	2320      	movs	r3, #32
 80037d4:	e7f6      	b.n	80037c4 <HAL_ADC_ConfigChannel+0x2ac>
 80037d6:	b9e6      	cbnz	r6, 8003812 <HAL_ADC_ConfigChannel+0x2fa>
 80037d8:	0e99      	lsrs	r1, r3, #26
 80037da:	3101      	adds	r1, #1
 80037dc:	0689      	lsls	r1, r1, #26
 80037de:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 80037e2:	bb16      	cbnz	r6, 800382a <HAL_ADC_ConfigChannel+0x312>
 80037e4:	ea4f 6c93 	mov.w	ip, r3, lsr #26
 80037e8:	f10c 0c01 	add.w	ip, ip, #1
 80037ec:	f00c 0c1f 	and.w	ip, ip, #31
 80037f0:	2201      	movs	r2, #1
 80037f2:	fa02 f20c 	lsl.w	r2, r2, ip
 80037f6:	4311      	orrs	r1, r2
 80037f8:	bb36      	cbnz	r6, 8003848 <HAL_ADC_ConfigChannel+0x330>
 80037fa:	0e9b      	lsrs	r3, r3, #26
 80037fc:	3301      	adds	r3, #1
 80037fe:	f003 031f 	and.w	r3, r3, #31
 8003802:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003806:	3b1e      	subs	r3, #30
 8003808:	051b      	lsls	r3, r3, #20
 800380a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800380e:	4319      	orrs	r1, r3
 8003810:	e7a5      	b.n	800375e <HAL_ADC_ConfigChannel+0x246>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003812:	fa93 f1a3 	rbit	r1, r3
  if (value == 0U)
 8003816:	b131      	cbz	r1, 8003826 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8003818:	fab1 f181 	clz	r1, r1
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800381c:	3101      	adds	r1, #1
 800381e:	0689      	lsls	r1, r1, #26
 8003820:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 8003824:	e7dd      	b.n	80037e2 <HAL_ADC_ConfigChannel+0x2ca>
    return 32U;
 8003826:	2120      	movs	r1, #32
 8003828:	e7f8      	b.n	800381c <HAL_ADC_ConfigChannel+0x304>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382a:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 800382e:	b14a      	cbz	r2, 8003844 <HAL_ADC_ConfigChannel+0x32c>
  return __builtin_clz(value);
 8003830:	fab2 f282 	clz	r2, r2
 8003834:	3201      	adds	r2, #1
 8003836:	f002 021f 	and.w	r2, r2, #31
 800383a:	f04f 0c01 	mov.w	ip, #1
 800383e:	fa0c f202 	lsl.w	r2, ip, r2
 8003842:	e7d8      	b.n	80037f6 <HAL_ADC_ConfigChannel+0x2de>
    return 32U;
 8003844:	2220      	movs	r2, #32
 8003846:	e7f5      	b.n	8003834 <HAL_ADC_ConfigChannel+0x31c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003848:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800384c:	b15b      	cbz	r3, 8003866 <HAL_ADC_ConfigChannel+0x34e>
  return __builtin_clz(value);
 800384e:	fab3 f383 	clz	r3, r3
 8003852:	3301      	adds	r3, #1
 8003854:	f003 031f 	and.w	r3, r3, #31
 8003858:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800385c:	3b1e      	subs	r3, #30
 800385e:	051b      	lsls	r3, r3, #20
 8003860:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003864:	e7d3      	b.n	800380e <HAL_ADC_ConfigChannel+0x2f6>
    return 32U;
 8003866:	2320      	movs	r3, #32
 8003868:	e7f3      	b.n	8003852 <HAL_ADC_ConfigChannel+0x33a>
 800386a:	bf00      	nop
 800386c:	000fffff 	.word	0x000fffff
 8003870:	47ff0000 	.word	0x47ff0000
 8003874:	5c001000 	.word	0x5c001000
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003878:	6822      	ldr	r2, [r4, #0]
 800387a:	493f      	ldr	r1, [pc, #252]	@ (8003978 <HAL_ADC_ConfigChannel+0x460>)
 800387c:	483f      	ldr	r0, [pc, #252]	@ (800397c <HAL_ADC_ConfigChannel+0x464>)
 800387e:	4282      	cmp	r2, r0
 8003880:	bf18      	it	ne
 8003882:	428a      	cmpne	r2, r1
 8003884:	bf0c      	ite	eq
 8003886:	2101      	moveq	r1, #1
 8003888:	2100      	movne	r1, #0
 800388a:	d118      	bne.n	80038be <HAL_ADC_ConfigChannel+0x3a6>
 800388c:	4e3c      	ldr	r6, [pc, #240]	@ (8003980 <HAL_ADC_ConfigChannel+0x468>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800388e:	68b5      	ldr	r5, [r6, #8]
 8003890:	f005 7ce0 	and.w	ip, r5, #29360128	@ 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003894:	b1a9      	cbz	r1, 80038c2 <HAL_ADC_ConfigChannel+0x3aa>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003896:	4938      	ldr	r1, [pc, #224]	@ (8003978 <HAL_ADC_ConfigChannel+0x460>)
 8003898:	6888      	ldr	r0, [r1, #8]
 800389a:	f010 0001 	ands.w	r0, r0, #1
 800389e:	d000      	beq.n	80038a2 <HAL_ADC_ConfigChannel+0x38a>
 80038a0:	2001      	movs	r0, #1
 80038a2:	4936      	ldr	r1, [pc, #216]	@ (800397c <HAL_ADC_ConfigChannel+0x464>)
 80038a4:	6889      	ldr	r1, [r1, #8]
 80038a6:	f011 0101 	ands.w	r1, r1, #1
 80038aa:	d000      	beq.n	80038ae <HAL_ADC_ConfigChannel+0x396>
 80038ac:	2101      	movs	r1, #1
 80038ae:	4301      	orrs	r1, r0
 80038b0:	d00c      	beq.n	80038cc <HAL_ADC_ConfigChannel+0x3b4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038b2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80038b4:	f043 0320 	orr.w	r3, r3, #32
 80038b8:	6563      	str	r3, [r4, #84]	@ 0x54
          tmp_hal_status = HAL_ERROR;
 80038ba:	2001      	movs	r0, #1
 80038bc:	e644      	b.n	8003548 <HAL_ADC_ConfigChannel+0x30>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038be:	4e31      	ldr	r6, [pc, #196]	@ (8003984 <HAL_ADC_ConfigChannel+0x46c>)
 80038c0:	e7e5      	b.n	800388e <HAL_ADC_ConfigChannel+0x376>
 80038c2:	4931      	ldr	r1, [pc, #196]	@ (8003988 <HAL_ADC_ConfigChannel+0x470>)
 80038c4:	6889      	ldr	r1, [r1, #8]
 80038c6:	f011 0f01 	tst.w	r1, #1
 80038ca:	d1f2      	bne.n	80038b2 <HAL_ADC_ConfigChannel+0x39a>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80038cc:	492f      	ldr	r1, [pc, #188]	@ (800398c <HAL_ADC_ConfigChannel+0x474>)
 80038ce:	428b      	cmp	r3, r1
 80038d0:	d007      	beq.n	80038e2 <HAL_ADC_ConfigChannel+0x3ca>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80038d2:	492f      	ldr	r1, [pc, #188]	@ (8003990 <HAL_ADC_ConfigChannel+0x478>)
 80038d4:	428b      	cmp	r3, r1
 80038d6:	d026      	beq.n	8003926 <HAL_ADC_ConfigChannel+0x40e>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80038d8:	492e      	ldr	r1, [pc, #184]	@ (8003994 <HAL_ADC_ConfigChannel+0x47c>)
 80038da:	428b      	cmp	r3, r1
 80038dc:	d034      	beq.n	8003948 <HAL_ADC_ConfigChannel+0x430>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038de:	2000      	movs	r0, #0
 80038e0:	e632      	b.n	8003548 <HAL_ADC_ConfigChannel+0x30>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80038e2:	f415 0f00 	tst.w	r5, #8388608	@ 0x800000
 80038e6:	d1f4      	bne.n	80038d2 <HAL_ADC_ConfigChannel+0x3ba>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038e8:	4b27      	ldr	r3, [pc, #156]	@ (8003988 <HAL_ADC_ConfigChannel+0x470>)
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d001      	beq.n	80038f2 <HAL_ADC_ConfigChannel+0x3da>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038ee:	2000      	movs	r0, #0
 80038f0:	e62a      	b.n	8003548 <HAL_ADC_ConfigChannel+0x30>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80038f2:	f44c 0300 	orr.w	r3, ip, #8388608	@ 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80038f6:	68b2      	ldr	r2, [r6, #8]
 80038f8:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 80038fc:	4313      	orrs	r3, r2
 80038fe:	60b3      	str	r3, [r6, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003900:	4b25      	ldr	r3, [pc, #148]	@ (8003998 <HAL_ADC_ConfigChannel+0x480>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	099b      	lsrs	r3, r3, #6
 8003906:	4a25      	ldr	r2, [pc, #148]	@ (800399c <HAL_ADC_ConfigChannel+0x484>)
 8003908:	fba2 2303 	umull	r2, r3, r2, r3
 800390c:	099b      	lsrs	r3, r3, #6
 800390e:	3301      	adds	r3, #1
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	9301      	str	r3, [sp, #4]
              while (wait_loop_index != 0UL)
 8003914:	e002      	b.n	800391c <HAL_ADC_ConfigChannel+0x404>
                wait_loop_index--;
 8003916:	9b01      	ldr	r3, [sp, #4]
 8003918:	3b01      	subs	r3, #1
 800391a:	9301      	str	r3, [sp, #4]
              while (wait_loop_index != 0UL)
 800391c:	9b01      	ldr	r3, [sp, #4]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1f9      	bne.n	8003916 <HAL_ADC_ConfigChannel+0x3fe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003922:	2000      	movs	r0, #0
 8003924:	e610      	b.n	8003548 <HAL_ADC_ConfigChannel+0x30>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003926:	f015 7f80 	tst.w	r5, #16777216	@ 0x1000000
 800392a:	d1d5      	bne.n	80038d8 <HAL_ADC_ConfigChannel+0x3c0>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800392c:	4b16      	ldr	r3, [pc, #88]	@ (8003988 <HAL_ADC_ConfigChannel+0x470>)
 800392e:	429a      	cmp	r2, r3
 8003930:	d001      	beq.n	8003936 <HAL_ADC_ConfigChannel+0x41e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003932:	2000      	movs	r0, #0
 8003934:	e608      	b.n	8003548 <HAL_ADC_ConfigChannel+0x30>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003936:	f04c 7380 	orr.w	r3, ip, #16777216	@ 0x1000000
 800393a:	68b2      	ldr	r2, [r6, #8]
 800393c:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8003940:	4313      	orrs	r3, r2
 8003942:	60b3      	str	r3, [r6, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003944:	2000      	movs	r0, #0
}
 8003946:	e5ff      	b.n	8003548 <HAL_ADC_ConfigChannel+0x30>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003948:	f415 0f80 	tst.w	r5, #4194304	@ 0x400000
 800394c:	d10f      	bne.n	800396e <HAL_ADC_ConfigChannel+0x456>
            if (ADC_VREFINT_INSTANCE(hadc))
 800394e:	4b0e      	ldr	r3, [pc, #56]	@ (8003988 <HAL_ADC_ConfigChannel+0x470>)
 8003950:	429a      	cmp	r2, r3
 8003952:	d001      	beq.n	8003958 <HAL_ADC_ConfigChannel+0x440>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003954:	2000      	movs	r0, #0
 8003956:	e5f7      	b.n	8003548 <HAL_ADC_ConfigChannel+0x30>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003958:	f44c 0380 	orr.w	r3, ip, #4194304	@ 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800395c:	68b2      	ldr	r2, [r6, #8]
 800395e:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8003962:	4313      	orrs	r3, r2
 8003964:	60b3      	str	r3, [r6, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003966:	2000      	movs	r0, #0
}
 8003968:	e5ee      	b.n	8003548 <HAL_ADC_ConfigChannel+0x30>
 800396a:	2000      	movs	r0, #0
 800396c:	e5ec      	b.n	8003548 <HAL_ADC_ConfigChannel+0x30>
 800396e:	2000      	movs	r0, #0
 8003970:	e5ea      	b.n	8003548 <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 8003972:	2002      	movs	r0, #2
 8003974:	e5eb      	b.n	800354e <HAL_ADC_ConfigChannel+0x36>
 8003976:	bf00      	nop
 8003978:	40022000 	.word	0x40022000
 800397c:	40022100 	.word	0x40022100
 8003980:	40022300 	.word	0x40022300
 8003984:	58026300 	.word	0x58026300
 8003988:	58026000 	.word	0x58026000
 800398c:	cb840000 	.word	0xcb840000
 8003990:	c7520000 	.word	0xc7520000
 8003994:	cfb80000 	.word	0xcfb80000
 8003998:	24000004 	.word	0x24000004
 800399c:	053e2d63 	.word	0x053e2d63

080039a0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80039a0:	b538      	push	{r3, r4, r5, lr}
 80039a2:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80039a4:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80039a6:	6893      	ldr	r3, [r2, #8]
 80039a8:	f013 0302 	ands.w	r3, r3, #2
 80039ac:	d000      	beq.n	80039b0 <ADC_Disable+0x10>
 80039ae:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80039b0:	6891      	ldr	r1, [r2, #8]
 80039b2:	f011 0f01 	tst.w	r1, #1
 80039b6:	d037      	beq.n	8003a28 <ADC_Disable+0x88>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d137      	bne.n	8003a2c <ADC_Disable+0x8c>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80039bc:	6893      	ldr	r3, [r2, #8]
 80039be:	f003 030d 	and.w	r3, r3, #13
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d009      	beq.n	80039da <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039c6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80039c8:	f043 0310 	orr.w	r3, r3, #16
 80039cc:	6563      	str	r3, [r4, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039ce:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80039d0:	f043 0301 	orr.w	r3, r3, #1
 80039d4:	65a3      	str	r3, [r4, #88]	@ 0x58

      return HAL_ERROR;
 80039d6:	2001      	movs	r0, #1
 80039d8:	e027      	b.n	8003a2a <ADC_Disable+0x8a>
  MODIFY_REG(ADCx->CR,
 80039da:	6891      	ldr	r1, [r2, #8]
 80039dc:	4b14      	ldr	r3, [pc, #80]	@ (8003a30 <ADC_Disable+0x90>)
 80039de:	400b      	ands	r3, r1
 80039e0:	f043 0302 	orr.w	r3, r3, #2
 80039e4:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80039e6:	6823      	ldr	r3, [r4, #0]
 80039e8:	2203      	movs	r2, #3
 80039ea:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80039ec:	f7ff fd46 	bl	800347c <HAL_GetTick>
 80039f0:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039f2:	6823      	ldr	r3, [r4, #0]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f013 0f01 	tst.w	r3, #1
 80039fa:	d013      	beq.n	8003a24 <ADC_Disable+0x84>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80039fc:	f7ff fd3e 	bl	800347c <HAL_GetTick>
 8003a00:	1b40      	subs	r0, r0, r5
 8003a02:	2802      	cmp	r0, #2
 8003a04:	d9f5      	bls.n	80039f2 <ADC_Disable+0x52>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a06:	6823      	ldr	r3, [r4, #0]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f013 0f01 	tst.w	r3, #1
 8003a0e:	d0f0      	beq.n	80039f2 <ADC_Disable+0x52>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a10:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003a12:	f043 0310 	orr.w	r3, r3, #16
 8003a16:	6563      	str	r3, [r4, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a18:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003a1a:	f043 0301 	orr.w	r3, r3, #1
 8003a1e:	65a3      	str	r3, [r4, #88]	@ 0x58

          return HAL_ERROR;
 8003a20:	2001      	movs	r0, #1
 8003a22:	e002      	b.n	8003a2a <ADC_Disable+0x8a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a24:	2000      	movs	r0, #0
 8003a26:	e000      	b.n	8003a2a <ADC_Disable+0x8a>
 8003a28:	2000      	movs	r0, #0
}
 8003a2a:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8003a2c:	2000      	movs	r0, #0
 8003a2e:	e7fc      	b.n	8003a2a <ADC_Disable+0x8a>
 8003a30:	7fffffc0 	.word	0x7fffffc0

08003a34 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003a34:	b538      	push	{r3, r4, r5, lr}
 8003a36:	4604      	mov	r4, r0
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003a38:	6803      	ldr	r3, [r0, #0]
 8003a3a:	494f      	ldr	r1, [pc, #316]	@ (8003b78 <ADC_ConfigureBoostMode+0x144>)
 8003a3c:	4a4f      	ldr	r2, [pc, #316]	@ (8003b7c <ADC_ConfigureBoostMode+0x148>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	bf18      	it	ne
 8003a42:	428b      	cmpne	r3, r1
 8003a44:	d123      	bne.n	8003a8e <ADC_ConfigureBoostMode+0x5a>
 8003a46:	4b4e      	ldr	r3, [pc, #312]	@ (8003b80 <ADC_ConfigureBoostMode+0x14c>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 8003a4e:	bf14      	ite	ne
 8003a50:	2301      	movne	r3, #1
 8003a52:	2300      	moveq	r3, #0
 8003a54:	b34b      	cbz	r3, 8003aaa <ADC_ConfigureBoostMode+0x76>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003a56:	f003 ff1b 	bl	8007890 <HAL_RCC_GetHCLKFreq>
 8003a5a:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8003a5c:	6863      	ldr	r3, [r4, #4]
 8003a5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a62:	d01c      	beq.n	8003a9e <ADC_ConfigureBoostMode+0x6a>
 8003a64:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a68:	d01d      	beq.n	8003aa6 <ADC_ConfigureBoostMode+0x72>
 8003a6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a6e:	d016      	beq.n	8003a9e <ADC_ConfigureBoostMode+0x6a>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003a70:	f7ff fd1e 	bl	80034b0 <HAL_GetREVID>
 8003a74:	f241 0303 	movw	r3, #4099	@ 0x1003
 8003a78:	4298      	cmp	r0, r3
 8003a7a:	d857      	bhi.n	8003b2c <ADC_ConfigureBoostMode+0xf8>
  {
    if (freq > 20000000UL)
 8003a7c:	4b41      	ldr	r3, [pc, #260]	@ (8003b84 <ADC_ConfigureBoostMode+0x150>)
 8003a7e:	429d      	cmp	r5, r3
 8003a80:	d94e      	bls.n	8003b20 <ADC_ConfigureBoostMode+0xec>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003a82:	6822      	ldr	r2, [r4, #0]
 8003a84:	6893      	ldr	r3, [r2, #8]
 8003a86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a8a:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003a8c:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003a8e:	4b3e      	ldr	r3, [pc, #248]	@ (8003b88 <ADC_ConfigureBoostMode+0x154>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 8003a96:	bf14      	ite	ne
 8003a98:	2301      	movne	r3, #1
 8003a9a:	2300      	moveq	r3, #0
 8003a9c:	e7da      	b.n	8003a54 <ADC_ConfigureBoostMode+0x20>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003a9e:	0c1b      	lsrs	r3, r3, #16
 8003aa0:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 8003aa4:	e7e4      	b.n	8003a70 <ADC_ConfigureBoostMode+0x3c>
        freq /= 4UL;
 8003aa6:	0885      	lsrs	r5, r0, #2
        break;
 8003aa8:	e7e2      	b.n	8003a70 <ADC_ConfigureBoostMode+0x3c>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003aaa:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003aae:	f005 f859 	bl	8008b64 <HAL_RCCEx_GetPeriphCLKFreq>
 8003ab2:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8003ab4:	6863      	ldr	r3, [r4, #4]
 8003ab6:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003aba:	d02d      	beq.n	8003b18 <ADC_ConfigureBoostMode+0xe4>
 8003abc:	d822      	bhi.n	8003b04 <ADC_ConfigureBoostMode+0xd0>
 8003abe:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003ac2:	d027      	beq.n	8003b14 <ADC_ConfigureBoostMode+0xe0>
 8003ac4:	d904      	bls.n	8003ad0 <ADC_ConfigureBoostMode+0x9c>
 8003ac6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003aca:	d1d1      	bne.n	8003a70 <ADC_ConfigureBoostMode+0x3c>
        freq /= 32UL;
 8003acc:	0945      	lsrs	r5, r0, #5
        break;
 8003ace:	e7cf      	b.n	8003a70 <ADC_ConfigureBoostMode+0x3c>
    switch (hadc->Init.ClockPrescaler)
 8003ad0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ad4:	d00d      	beq.n	8003af2 <ADC_ConfigureBoostMode+0xbe>
 8003ad6:	d906      	bls.n	8003ae6 <ADC_ConfigureBoostMode+0xb2>
 8003ad8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003adc:	d009      	beq.n	8003af2 <ADC_ConfigureBoostMode+0xbe>
 8003ade:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003ae2:	d006      	beq.n	8003af2 <ADC_ConfigureBoostMode+0xbe>
 8003ae4:	e7c4      	b.n	8003a70 <ADC_ConfigureBoostMode+0x3c>
 8003ae6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003aea:	d002      	beq.n	8003af2 <ADC_ConfigureBoostMode+0xbe>
 8003aec:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003af0:	d104      	bne.n	8003afc <ADC_ConfigureBoostMode+0xc8>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003af2:	0c9b      	lsrs	r3, r3, #18
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 8003afa:	e7b9      	b.n	8003a70 <ADC_ConfigureBoostMode+0x3c>
    switch (hadc->Init.ClockPrescaler)
 8003afc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b00:	d0f7      	beq.n	8003af2 <ADC_ConfigureBoostMode+0xbe>
 8003b02:	e7b5      	b.n	8003a70 <ADC_ConfigureBoostMode+0x3c>
 8003b04:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003b08:	d008      	beq.n	8003b1c <ADC_ConfigureBoostMode+0xe8>
 8003b0a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003b0e:	d1af      	bne.n	8003a70 <ADC_ConfigureBoostMode+0x3c>
        freq /= 256UL;
 8003b10:	0a05      	lsrs	r5, r0, #8
        break;
 8003b12:	e7ad      	b.n	8003a70 <ADC_ConfigureBoostMode+0x3c>
        freq /= 16UL;
 8003b14:	0905      	lsrs	r5, r0, #4
        break;
 8003b16:	e7ab      	b.n	8003a70 <ADC_ConfigureBoostMode+0x3c>
        freq /= 64UL;
 8003b18:	0985      	lsrs	r5, r0, #6
        break;
 8003b1a:	e7a9      	b.n	8003a70 <ADC_ConfigureBoostMode+0x3c>
        freq /= 128UL;
 8003b1c:	09c5      	lsrs	r5, r0, #7
        break;
 8003b1e:	e7a7      	b.n	8003a70 <ADC_ConfigureBoostMode+0x3c>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003b20:	6822      	ldr	r2, [r4, #0]
 8003b22:	6893      	ldr	r3, [r2, #8]
 8003b24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b28:	6093      	str	r3, [r2, #8]
 8003b2a:	e7af      	b.n	8003a8c <ADC_ConfigureBoostMode+0x58>
    if (freq <= 6250000UL)
 8003b2c:	4b17      	ldr	r3, [pc, #92]	@ (8003b8c <ADC_ConfigureBoostMode+0x158>)
 8003b2e:	429d      	cmp	r5, r3
 8003b30:	d805      	bhi.n	8003b3e <ADC_ConfigureBoostMode+0x10a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003b32:	6822      	ldr	r2, [r4, #0]
 8003b34:	6893      	ldr	r3, [r2, #8]
 8003b36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b3a:	6093      	str	r3, [r2, #8]
 8003b3c:	e7a6      	b.n	8003a8c <ADC_ConfigureBoostMode+0x58>
    else if (freq <= 12500000UL)
 8003b3e:	4b14      	ldr	r3, [pc, #80]	@ (8003b90 <ADC_ConfigureBoostMode+0x15c>)
 8003b40:	429d      	cmp	r5, r3
 8003b42:	d807      	bhi.n	8003b54 <ADC_ConfigureBoostMode+0x120>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003b44:	6822      	ldr	r2, [r4, #0]
 8003b46:	6893      	ldr	r3, [r2, #8]
 8003b48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b50:	6093      	str	r3, [r2, #8]
 8003b52:	e79b      	b.n	8003a8c <ADC_ConfigureBoostMode+0x58>
    else if (freq <= 25000000UL)
 8003b54:	4b0f      	ldr	r3, [pc, #60]	@ (8003b94 <ADC_ConfigureBoostMode+0x160>)
 8003b56:	429d      	cmp	r5, r3
 8003b58:	d807      	bhi.n	8003b6a <ADC_ConfigureBoostMode+0x136>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003b5a:	6822      	ldr	r2, [r4, #0]
 8003b5c:	6893      	ldr	r3, [r2, #8]
 8003b5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b66:	6093      	str	r3, [r2, #8]
 8003b68:	e790      	b.n	8003a8c <ADC_ConfigureBoostMode+0x58>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003b6a:	6822      	ldr	r2, [r4, #0]
 8003b6c:	6893      	ldr	r3, [r2, #8]
 8003b6e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8003b72:	6093      	str	r3, [r2, #8]
}
 8003b74:	e78a      	b.n	8003a8c <ADC_ConfigureBoostMode+0x58>
 8003b76:	bf00      	nop
 8003b78:	40022000 	.word	0x40022000
 8003b7c:	40022100 	.word	0x40022100
 8003b80:	40022300 	.word	0x40022300
 8003b84:	01312d00 	.word	0x01312d00
 8003b88:	58026300 	.word	0x58026300
 8003b8c:	00bebc21 	.word	0x00bebc21
 8003b90:	017d7841 	.word	0x017d7841
 8003b94:	02faf081 	.word	0x02faf081

08003b98 <HAL_ADC_Init>:
{
 8003b98:	b530      	push	{r4, r5, lr}
 8003b9a:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8003ba0:	2800      	cmp	r0, #0
 8003ba2:	f000 810a 	beq.w	8003dba <HAL_ADC_Init+0x222>
 8003ba6:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ba8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8003baa:	b1eb      	cbz	r3, 8003be8 <HAL_ADC_Init+0x50>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003bac:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	f012 5f00 	tst.w	r2, #536870912	@ 0x20000000
 8003bb4:	d003      	beq.n	8003bbe <HAL_ADC_Init+0x26>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003bb6:	6899      	ldr	r1, [r3, #8]
 8003bb8:	4a81      	ldr	r2, [pc, #516]	@ (8003dc0 <HAL_ADC_Init+0x228>)
 8003bba:	400a      	ands	r2, r1
 8003bbc:	609a      	str	r2, [r3, #8]
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003bbe:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003bc0:	689a      	ldr	r2, [r3, #8]
 8003bc2:	f012 5f80 	tst.w	r2, #268435456	@ 0x10000000
 8003bc6:	d11c      	bne.n	8003c02 <HAL_ADC_Init+0x6a>
  MODIFY_REG(ADCx->CR,
 8003bc8:	6899      	ldr	r1, [r3, #8]
 8003bca:	4a7e      	ldr	r2, [pc, #504]	@ (8003dc4 <HAL_ADC_Init+0x22c>)
 8003bcc:	400a      	ands	r2, r1
 8003bce:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003bd2:	609a      	str	r2, [r3, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003bd4:	4b7c      	ldr	r3, [pc, #496]	@ (8003dc8 <HAL_ADC_Init+0x230>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	099b      	lsrs	r3, r3, #6
 8003bda:	4a7c      	ldr	r2, [pc, #496]	@ (8003dcc <HAL_ADC_Init+0x234>)
 8003bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003be0:	099b      	lsrs	r3, r3, #6
 8003be2:	3301      	adds	r3, #1
 8003be4:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003be6:	e009      	b.n	8003bfc <HAL_ADC_Init+0x64>
    HAL_ADC_MspInit(hadc);
 8003be8:	f7fe fbe0 	bl	80023ac <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003bec:	2300      	movs	r3, #0
 8003bee:	65a3      	str	r3, [r4, #88]	@ 0x58
    hadc->Lock = HAL_UNLOCKED;
 8003bf0:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
 8003bf4:	e7da      	b.n	8003bac <HAL_ADC_Init+0x14>
      wait_loop_index--;
 8003bf6:	9b01      	ldr	r3, [sp, #4]
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003bfc:	9b01      	ldr	r3, [sp, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1f9      	bne.n	8003bf6 <HAL_ADC_Init+0x5e>
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c02:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003c04:	6893      	ldr	r3, [r2, #8]
 8003c06:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8003c0a:	f040 8099 	bne.w	8003d40 <HAL_ADC_Init+0x1a8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c0e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003c10:	f043 0310 	orr.w	r3, r3, #16
 8003c14:	6563      	str	r3, [r4, #84]	@ 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c16:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003c18:	f043 0301 	orr.w	r3, r3, #1
 8003c1c:	65a3      	str	r3, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 8003c1e:	2501      	movs	r5, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c20:	6893      	ldr	r3, [r2, #8]
 8003c22:	f013 0304 	ands.w	r3, r3, #4
 8003c26:	d000      	beq.n	8003c2a <HAL_ADC_Init+0x92>
 8003c28:	2301      	movs	r3, #1
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c2a:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8003c2c:	f011 0f10 	tst.w	r1, #16
 8003c30:	f040 80bb 	bne.w	8003daa <HAL_ADC_Init+0x212>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f040 80b8 	bne.w	8003daa <HAL_ADC_Init+0x212>
    ADC_STATE_CLR_SET(hadc->State,
 8003c3a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003c3c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003c40:	f043 0302 	orr.w	r3, r3, #2
 8003c44:	6563      	str	r3, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c46:	6893      	ldr	r3, [r2, #8]
 8003c48:	f013 0f01 	tst.w	r3, #1
 8003c4c:	d11e      	bne.n	8003c8c <HAL_ADC_Init+0xf4>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c4e:	4960      	ldr	r1, [pc, #384]	@ (8003dd0 <HAL_ADC_Init+0x238>)
 8003c50:	4b60      	ldr	r3, [pc, #384]	@ (8003dd4 <HAL_ADC_Init+0x23c>)
 8003c52:	429a      	cmp	r2, r3
 8003c54:	bf18      	it	ne
 8003c56:	428a      	cmpne	r2, r1
 8003c58:	bf0c      	ite	eq
 8003c5a:	2201      	moveq	r2, #1
 8003c5c:	2200      	movne	r2, #0
 8003c5e:	d171      	bne.n	8003d44 <HAL_ADC_Init+0x1ac>
 8003c60:	6889      	ldr	r1, [r1, #8]
 8003c62:	f011 0101 	ands.w	r1, r1, #1
 8003c66:	d000      	beq.n	8003c6a <HAL_ADC_Init+0xd2>
 8003c68:	2101      	movs	r1, #1
 8003c6a:	4b5a      	ldr	r3, [pc, #360]	@ (8003dd4 <HAL_ADC_Init+0x23c>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f013 0301 	ands.w	r3, r3, #1
 8003c72:	d000      	beq.n	8003c76 <HAL_ADC_Init+0xde>
 8003c74:	2301      	movs	r3, #1
 8003c76:	430b      	orrs	r3, r1
 8003c78:	d108      	bne.n	8003c8c <HAL_ADC_Init+0xf4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003c7a:	2a00      	cmp	r2, #0
 8003c7c:	d068      	beq.n	8003d50 <HAL_ADC_Init+0x1b8>
 8003c7e:	4956      	ldr	r1, [pc, #344]	@ (8003dd8 <HAL_ADC_Init+0x240>)
 8003c80:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003c82:	688a      	ldr	r2, [r1, #8]
 8003c84:	f422 127c 	bic.w	r2, r2, #4128768	@ 0x3f0000
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	608b      	str	r3, [r1, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003c8c:	f7ff fc10 	bl	80034b0 <HAL_GetREVID>
 8003c90:	f241 0303 	movw	r3, #4099	@ 0x1003
 8003c94:	4298      	cmp	r0, r3
 8003c96:	d902      	bls.n	8003c9e <HAL_ADC_Init+0x106>
 8003c98:	68a3      	ldr	r3, [r4, #8]
 8003c9a:	2b10      	cmp	r3, #16
 8003c9c:	d05a      	beq.n	8003d54 <HAL_ADC_Init+0x1bc>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003c9e:	7d62      	ldrb	r2, [r4, #21]
                  hadc->Init.Overrun                                                    |
 8003ca0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003ca2:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                  hadc->Init.Resolution                                                 |
 8003ca6:	68a2      	ldr	r2, [r4, #8]
                  hadc->Init.Overrun                                                    |
 8003ca8:	4313      	orrs	r3, r2
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003caa:	7f22      	ldrb	r2, [r4, #28]
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003cac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003cb0:	7f22      	ldrb	r2, [r4, #28]
 8003cb2:	2a01      	cmp	r2, #1
 8003cb4:	d059      	beq.n	8003d6a <HAL_ADC_Init+0x1d2>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003cb6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003cb8:	b122      	cbz	r2, 8003cc4 <HAL_ADC_Init+0x12c>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003cba:	f402 7278 	and.w	r2, r2, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003cbe:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8003cc0:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003cc2:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003cc4:	6821      	ldr	r1, [r4, #0]
 8003cc6:	68c8      	ldr	r0, [r1, #12]
 8003cc8:	4a44      	ldr	r2, [pc, #272]	@ (8003ddc <HAL_ADC_Init+0x244>)
 8003cca:	4002      	ands	r2, r0
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	60ca      	str	r2, [r1, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003cd0:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003cd2:	688a      	ldr	r2, [r1, #8]
 8003cd4:	f012 0204 	ands.w	r2, r2, #4
 8003cd8:	d000      	beq.n	8003cdc <HAL_ADC_Init+0x144>
 8003cda:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003cdc:	688b      	ldr	r3, [r1, #8]
 8003cde:	f013 0308 	ands.w	r3, r3, #8
 8003ce2:	d000      	beq.n	8003ce6 <HAL_ADC_Init+0x14e>
 8003ce4:	2301      	movs	r3, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	d11b      	bne.n	8003d22 <HAL_ADC_Init+0x18a>
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003cea:	7d22      	ldrb	r2, [r4, #20]
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003cec:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
      tmpCFGR = (
 8003cee:	ea43 3282 	orr.w	r2, r3, r2, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003cf2:	68c8      	ldr	r0, [r1, #12]
 8003cf4:	4b3a      	ldr	r3, [pc, #232]	@ (8003de0 <HAL_ADC_Init+0x248>)
 8003cf6:	4003      	ands	r3, r0
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	60cb      	str	r3, [r1, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8003cfc:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d037      	beq.n	8003d74 <HAL_ADC_Init+0x1dc>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003d04:	6822      	ldr	r2, [r4, #0]
 8003d06:	6913      	ldr	r3, [r2, #16]
 8003d08:	f023 0301 	bic.w	r3, r3, #1
 8003d0c:	6113      	str	r3, [r2, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003d0e:	6822      	ldr	r2, [r4, #0]
 8003d10:	6913      	ldr	r3, [r2, #16]
 8003d12:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003d16:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003d18:	430b      	orrs	r3, r1
 8003d1a:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 8003d1c:	4620      	mov	r0, r4
 8003d1e:	f7ff fe89 	bl	8003a34 <ADC_ConfigureBoostMode>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003d22:	68e3      	ldr	r3, [r4, #12]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d037      	beq.n	8003d98 <HAL_ADC_Init+0x200>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003d28:	6822      	ldr	r2, [r4, #0]
 8003d2a:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8003d2c:	f023 030f 	bic.w	r3, r3, #15
 8003d30:	6313      	str	r3, [r2, #48]	@ 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003d32:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003d34:	f023 0303 	bic.w	r3, r3, #3
 8003d38:	f043 0301 	orr.w	r3, r3, #1
 8003d3c:	6563      	str	r3, [r4, #84]	@ 0x54
 8003d3e:	e039      	b.n	8003db4 <HAL_ADC_Init+0x21c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d40:	2500      	movs	r5, #0
 8003d42:	e76d      	b.n	8003c20 <HAL_ADC_Init+0x88>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d44:	4b27      	ldr	r3, [pc, #156]	@ (8003de4 <HAL_ADC_Init+0x24c>)
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f013 0f01 	tst.w	r3, #1
 8003d4c:	d19e      	bne.n	8003c8c <HAL_ADC_Init+0xf4>
 8003d4e:	e794      	b.n	8003c7a <HAL_ADC_Init+0xe2>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003d50:	4925      	ldr	r1, [pc, #148]	@ (8003de8 <HAL_ADC_Init+0x250>)
 8003d52:	e795      	b.n	8003c80 <HAL_ADC_Init+0xe8>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003d54:	7d61      	ldrb	r1, [r4, #21]
                  hadc->Init.Overrun                                                    |
 8003d56:	6b22      	ldr	r2, [r4, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003d58:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
                  hadc->Init.Overrun                                                    |
 8003d5c:	4313      	orrs	r3, r2
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003d5e:	7f22      	ldrb	r2, [r4, #28]
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003d60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003d64:	f043 030c 	orr.w	r3, r3, #12
 8003d68:	e7a2      	b.n	8003cb0 <HAL_ADC_Init+0x118>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003d6a:	6a22      	ldr	r2, [r4, #32]
 8003d6c:	3a01      	subs	r2, #1
 8003d6e:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8003d72:	e7a0      	b.n	8003cb6 <HAL_ADC_Init+0x11e>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003d74:	6820      	ldr	r0, [r4, #0]
 8003d76:	6902      	ldr	r2, [r0, #16]
 8003d78:	4b1c      	ldr	r3, [pc, #112]	@ (8003dec <HAL_ADC_Init+0x254>)
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003d7e:	1e51      	subs	r1, r2, #1
 8003d80:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003d82:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003d86:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	f043 0301 	orr.w	r3, r3, #1
 8003d94:	6103      	str	r3, [r0, #16]
 8003d96:	e7ba      	b.n	8003d0e <HAL_ADC_Init+0x176>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003d98:	6821      	ldr	r1, [r4, #0]
 8003d9a:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8003d9c:	f023 030f 	bic.w	r3, r3, #15
 8003da0:	69a2      	ldr	r2, [r4, #24]
 8003da2:	3a01      	subs	r2, #1
 8003da4:	4313      	orrs	r3, r2
 8003da6:	630b      	str	r3, [r1, #48]	@ 0x30
 8003da8:	e7c3      	b.n	8003d32 <HAL_ADC_Init+0x19a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003daa:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003dac:	f043 0310 	orr.w	r3, r3, #16
 8003db0:	6563      	str	r3, [r4, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 8003db2:	2501      	movs	r5, #1
}
 8003db4:	4628      	mov	r0, r5
 8003db6:	b003      	add	sp, #12
 8003db8:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8003dba:	2501      	movs	r5, #1
 8003dbc:	e7fa      	b.n	8003db4 <HAL_ADC_Init+0x21c>
 8003dbe:	bf00      	nop
 8003dc0:	5fffffc0 	.word	0x5fffffc0
 8003dc4:	6fffffc0 	.word	0x6fffffc0
 8003dc8:	24000004 	.word	0x24000004
 8003dcc:	053e2d63 	.word	0x053e2d63
 8003dd0:	40022000 	.word	0x40022000
 8003dd4:	40022100 	.word	0x40022100
 8003dd8:	40022300 	.word	0x40022300
 8003ddc:	fff0c003 	.word	0xfff0c003
 8003de0:	ffffbffc 	.word	0xffffbffc
 8003de4:	58026000 	.word	0x58026000
 8003de8:	58026300 	.word	0x58026300
 8003dec:	fc00f81e 	.word	0xfc00f81e

08003df0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003df0:	b570      	push	{r4, r5, r6, lr}
 8003df2:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003df4:	2300      	movs	r3, #0
 8003df6:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003df8:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d043      	beq.n	8003e88 <HAL_ADCEx_Calibration_Start+0x98>
 8003e00:	4604      	mov	r4, r0
 8003e02:	460d      	mov	r5, r1
 8003e04:	4616      	mov	r6, r2
 8003e06:	2301      	movs	r3, #1
 8003e08:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003e0c:	f7ff fdc8 	bl	80039a0 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003e10:	2800      	cmp	r0, #0
 8003e12:	d130      	bne.n	8003e76 <HAL_ADCEx_Calibration_Start+0x86>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e14:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003e16:	4b1d      	ldr	r3, [pc, #116]	@ (8003e8c <HAL_ADCEx_Calibration_Start+0x9c>)
 8003e18:	4013      	ands	r3, r2
 8003e1a:	f043 0302 	orr.w	r3, r3, #2
 8003e1e:	6563      	str	r3, [r4, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8003e20:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003e22:	688a      	ldr	r2, [r1, #8]
 8003e24:	4b1a      	ldr	r3, [pc, #104]	@ (8003e90 <HAL_ADCEx_Calibration_Start+0xa0>)
 8003e26:	4013      	ands	r3, r2
 8003e28:	f405 3580 	and.w	r5, r5, #65536	@ 0x10000
 8003e2c:	f006 4680 	and.w	r6, r6, #1073741824	@ 0x40000000
 8003e30:	ea45 0206 	orr.w	r2, r5, r6
 8003e34:	4313      	orrs	r3, r2
 8003e36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003e3a:	608b      	str	r3, [r1, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003e3c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	db06      	blt.n	8003e52 <HAL_ADCEx_Calibration_Start+0x62>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e44:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003e46:	f023 0303 	bic.w	r3, r3, #3
 8003e4a:	f043 0301 	orr.w	r3, r3, #1
 8003e4e:	6563      	str	r3, [r4, #84]	@ 0x54
 8003e50:	e015      	b.n	8003e7e <HAL_ADCEx_Calibration_Start+0x8e>
      wait_loop_index++;
 8003e52:	9b01      	ldr	r3, [sp, #4]
 8003e54:	3301      	adds	r3, #1
 8003e56:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003e58:	9a01      	ldr	r2, [sp, #4]
 8003e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8003e94 <HAL_ADCEx_Calibration_Start+0xa4>)
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d3ed      	bcc.n	8003e3c <HAL_ADCEx_Calibration_Start+0x4c>
        ADC_STATE_CLR_SET(hadc->State,
 8003e60:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003e62:	f023 0312 	bic.w	r3, r3, #18
 8003e66:	f043 0310 	orr.w	r3, r3, #16
 8003e6a:	6563      	str	r3, [r4, #84]	@ 0x54
        __HAL_UNLOCK(hadc);
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_ERROR;
 8003e72:	2001      	movs	r0, #1
 8003e74:	e006      	b.n	8003e84 <HAL_ADCEx_Calibration_Start+0x94>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e76:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003e78:	f043 0310 	orr.w	r3, r3, #16
 8003e7c:	6563      	str	r3, [r4, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e7e:	2300      	movs	r3, #0
 8003e80:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8003e84:	b002      	add	sp, #8
 8003e86:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hadc);
 8003e88:	2002      	movs	r0, #2
 8003e8a:	e7fb      	b.n	8003e84 <HAL_ADCEx_Calibration_Start+0x94>
 8003e8c:	ffffeefd 	.word	0xffffeefd
 8003e90:	3ffeffc0 	.word	0x3ffeffc0
 8003e94:	25c3f800 	.word	0x25c3f800

08003e98 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e98:	f890 2050 	ldrb.w	r2, [r0, #80]	@ 0x50
 8003e9c:	2a01      	cmp	r2, #1
 8003e9e:	f000 8096 	beq.w	8003fce <HAL_ADCEx_MultiModeConfigChannel+0x136>
{
 8003ea2:	b430      	push	{r4, r5}
 8003ea4:	b09a      	sub	sp, #104	@ 0x68
 8003ea6:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f880 2050 	strb.w	r2, [r0, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003eae:	2200      	movs	r2, #0
 8003eb0:	9216      	str	r2, [sp, #88]	@ 0x58
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003eb2:	9217      	str	r2, [sp, #92]	@ 0x5c

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003eb4:	6800      	ldr	r0, [r0, #0]
 8003eb6:	4a47      	ldr	r2, [pc, #284]	@ (8003fd4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003eb8:	4290      	cmp	r0, r2
 8003eba:	d036      	beq.n	8003f2a <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	9201      	str	r2, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 8003ec0:	9a01      	ldr	r2, [sp, #4]
 8003ec2:	2a00      	cmp	r2, #0
 8003ec4:	d035      	beq.n	8003f32 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ec6:	6892      	ldr	r2, [r2, #8]
 8003ec8:	f012 0204 	ands.w	r2, r2, #4
 8003ecc:	d000      	beq.n	8003ed0 <HAL_ADCEx_MultiModeConfigChannel+0x38>
 8003ece:	2201      	movs	r2, #1
 8003ed0:	6884      	ldr	r4, [r0, #8]
 8003ed2:	f014 0f04 	tst.w	r4, #4
 8003ed6:	d16b      	bne.n	8003fb0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003ed8:	2a00      	cmp	r2, #0
 8003eda:	d169      	bne.n	8003fb0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003edc:	4c3d      	ldr	r4, [pc, #244]	@ (8003fd4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003ede:	4a3e      	ldr	r2, [pc, #248]	@ (8003fd8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003ee0:	4290      	cmp	r0, r2
 8003ee2:	bf18      	it	ne
 8003ee4:	42a0      	cmpne	r0, r4
 8003ee6:	d12d      	bne.n	8003f44 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003ee8:	f502 7200 	add.w	r2, r2, #512	@ 0x200

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003eec:	6808      	ldr	r0, [r1, #0]
 8003eee:	2800      	cmp	r0, #0
 8003ef0:	d039      	beq.n	8003f66 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003ef2:	6890      	ldr	r0, [r2, #8]
 8003ef4:	f420 4040 	bic.w	r0, r0, #49152	@ 0xc000
 8003ef8:	684c      	ldr	r4, [r1, #4]
 8003efa:	4320      	orrs	r0, r4
 8003efc:	6090      	str	r0, [r2, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003efe:	6818      	ldr	r0, [r3, #0]
 8003f00:	4d34      	ldr	r5, [pc, #208]	@ (8003fd4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003f02:	4c35      	ldr	r4, [pc, #212]	@ (8003fd8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003f04:	42a0      	cmp	r0, r4
 8003f06:	bf18      	it	ne
 8003f08:	42a8      	cmpne	r0, r5
 8003f0a:	d11d      	bne.n	8003f48 <HAL_ADCEx_MultiModeConfigChannel+0xb0>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f0c:	68ac      	ldr	r4, [r5, #8]
 8003f0e:	f014 0401 	ands.w	r4, r4, #1
 8003f12:	d000      	beq.n	8003f16 <HAL_ADCEx_MultiModeConfigChannel+0x7e>
 8003f14:	2401      	movs	r4, #1
 8003f16:	4830      	ldr	r0, [pc, #192]	@ (8003fd8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003f18:	6880      	ldr	r0, [r0, #8]
 8003f1a:	f010 0001 	ands.w	r0, r0, #1
 8003f1e:	d000      	beq.n	8003f22 <HAL_ADCEx_MultiModeConfigChannel+0x8a>
 8003f20:	2001      	movs	r0, #1
 8003f22:	4320      	orrs	r0, r4
 8003f24:	d015      	beq.n	8003f52 <HAL_ADCEx_MultiModeConfigChannel+0xba>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f26:	2000      	movs	r0, #0
 8003f28:	e047      	b.n	8003fba <HAL_ADCEx_MultiModeConfigChannel+0x122>
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003f2a:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8003f2e:	9201      	str	r2, [sp, #4]
 8003f30:	e7c6      	b.n	8003ec0 <HAL_ADCEx_MultiModeConfigChannel+0x28>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f32:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003f34:	f042 0220 	orr.w	r2, r2, #32
 8003f38:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hadc);
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003f40:	2001      	movs	r0, #1
 8003f42:	e03d      	b.n	8003fc0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003f44:	4a25      	ldr	r2, [pc, #148]	@ (8003fdc <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003f46:	e7d1      	b.n	8003eec <HAL_ADCEx_MultiModeConfigChannel+0x54>
 8003f48:	4825      	ldr	r0, [pc, #148]	@ (8003fe0 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003f4a:	6880      	ldr	r0, [r0, #8]
 8003f4c:	f010 0f01 	tst.w	r0, #1
 8003f50:	d139      	bne.n	8003fc6 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003f52:	6894      	ldr	r4, [r2, #8]
 8003f54:	4823      	ldr	r0, [pc, #140]	@ (8003fe4 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003f56:	4020      	ands	r0, r4
 8003f58:	680c      	ldr	r4, [r1, #0]
 8003f5a:	6889      	ldr	r1, [r1, #8]
 8003f5c:	4321      	orrs	r1, r4
 8003f5e:	4308      	orrs	r0, r1
 8003f60:	6090      	str	r0, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f62:	2000      	movs	r0, #0
 8003f64:	e029      	b.n	8003fba <HAL_ADCEx_MultiModeConfigChannel+0x122>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003f66:	6891      	ldr	r1, [r2, #8]
 8003f68:	f421 4140 	bic.w	r1, r1, #49152	@ 0xc000
 8003f6c:	6091      	str	r1, [r2, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f6e:	6819      	ldr	r1, [r3, #0]
 8003f70:	4c18      	ldr	r4, [pc, #96]	@ (8003fd4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003f72:	4819      	ldr	r0, [pc, #100]	@ (8003fd8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003f74:	4281      	cmp	r1, r0
 8003f76:	bf18      	it	ne
 8003f78:	42a1      	cmpne	r1, r4
 8003f7a:	d10e      	bne.n	8003f9a <HAL_ADCEx_MultiModeConfigChannel+0x102>
 8003f7c:	68a0      	ldr	r0, [r4, #8]
 8003f7e:	f010 0001 	ands.w	r0, r0, #1
 8003f82:	d000      	beq.n	8003f86 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8003f84:	2001      	movs	r0, #1
 8003f86:	4914      	ldr	r1, [pc, #80]	@ (8003fd8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003f88:	6889      	ldr	r1, [r1, #8]
 8003f8a:	f011 0101 	ands.w	r1, r1, #1
 8003f8e:	d000      	beq.n	8003f92 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003f90:	2101      	movs	r1, #1
 8003f92:	4301      	orrs	r1, r0
 8003f94:	d006      	beq.n	8003fa4 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f96:	2000      	movs	r0, #0
 8003f98:	e00f      	b.n	8003fba <HAL_ADCEx_MultiModeConfigChannel+0x122>
 8003f9a:	4911      	ldr	r1, [pc, #68]	@ (8003fe0 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003f9c:	6889      	ldr	r1, [r1, #8]
 8003f9e:	f011 0f01 	tst.w	r1, #1
 8003fa2:	d112      	bne.n	8003fca <HAL_ADCEx_MultiModeConfigChannel+0x132>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003fa4:	6890      	ldr	r0, [r2, #8]
 8003fa6:	490f      	ldr	r1, [pc, #60]	@ (8003fe4 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003fa8:	4001      	ands	r1, r0
 8003faa:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fac:	2000      	movs	r0, #0
 8003fae:	e004      	b.n	8003fba <HAL_ADCEx_MultiModeConfigChannel+0x122>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fb0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003fb2:	f042 0220 	orr.w	r2, r2, #32
 8003fb6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003fb8:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8003fc0:	b01a      	add	sp, #104	@ 0x68
 8003fc2:	bc30      	pop	{r4, r5}
 8003fc4:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fc6:	2000      	movs	r0, #0
 8003fc8:	e7f7      	b.n	8003fba <HAL_ADCEx_MultiModeConfigChannel+0x122>
 8003fca:	2000      	movs	r0, #0
 8003fcc:	e7f5      	b.n	8003fba <HAL_ADCEx_MultiModeConfigChannel+0x122>
  __HAL_LOCK(hadc);
 8003fce:	2002      	movs	r0, #2
}
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	40022000 	.word	0x40022000
 8003fd8:	40022100 	.word	0x40022100
 8003fdc:	58026300 	.word	0x58026300
 8003fe0:	58026000 	.word	0x58026000
 8003fe4:	fffff0e0 	.word	0xfffff0e0

08003fe8 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8003fe8:	2800      	cmp	r0, #0
 8003fea:	db07      	blt.n	8003ffc <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fec:	f000 021f 	and.w	r2, r0, #31
 8003ff0:	0940      	lsrs	r0, r0, #5
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	4093      	lsls	r3, r2
 8003ff6:	4a02      	ldr	r2, [pc, #8]	@ (8004000 <__NVIC_EnableIRQ+0x18>)
 8003ff8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	e000e100 	.word	0xe000e100

08004004 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8004004:	2800      	cmp	r0, #0
 8004006:	db04      	blt.n	8004012 <__NVIC_SetPriority+0xe>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004008:	0109      	lsls	r1, r1, #4
 800400a:	b2c9      	uxtb	r1, r1
 800400c:	4b04      	ldr	r3, [pc, #16]	@ (8004020 <__NVIC_SetPriority+0x1c>)
 800400e:	5419      	strb	r1, [r3, r0]
 8004010:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004012:	f000 000f 	and.w	r0, r0, #15
 8004016:	0109      	lsls	r1, r1, #4
 8004018:	b2c9      	uxtb	r1, r1
 800401a:	4b02      	ldr	r3, [pc, #8]	@ (8004024 <__NVIC_SetPriority+0x20>)
 800401c:	5419      	strb	r1, [r3, r0]
  }
}
 800401e:	4770      	bx	lr
 8004020:	e000e400 	.word	0xe000e400
 8004024:	e000ed14 	.word	0xe000ed14

08004028 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004028:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800402a:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800402e:	f1c0 0c07 	rsb	ip, r0, #7
 8004032:	f1bc 0f04 	cmp.w	ip, #4
 8004036:	bf28      	it	cs
 8004038:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800403c:	1d03      	adds	r3, r0, #4
 800403e:	2b06      	cmp	r3, #6
 8004040:	d90f      	bls.n	8004062 <NVIC_EncodePriority+0x3a>
 8004042:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004044:	f04f 3eff 	mov.w	lr, #4294967295
 8004048:	fa0e f00c 	lsl.w	r0, lr, ip
 800404c:	ea21 0100 	bic.w	r1, r1, r0
 8004050:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004052:	fa0e fe03 	lsl.w	lr, lr, r3
 8004056:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 800405a:	ea41 0002 	orr.w	r0, r1, r2
 800405e:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004062:	2300      	movs	r3, #0
 8004064:	e7ee      	b.n	8004044 <NVIC_EncodePriority+0x1c>
	...

08004068 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004068:	4906      	ldr	r1, [pc, #24]	@ (8004084 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 800406a:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800406c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004070:	041b      	lsls	r3, r3, #16
 8004072:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004074:	0200      	lsls	r0, r0, #8
 8004076:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800407a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800407c:	4a02      	ldr	r2, [pc, #8]	@ (8004088 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800407e:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8004080:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004082:	4770      	bx	lr
 8004084:	e000ed00 	.word	0xe000ed00
 8004088:	05fa0000 	.word	0x05fa0000

0800408c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800408c:	b510      	push	{r4, lr}
 800408e:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004090:	4b05      	ldr	r3, [pc, #20]	@ (80040a8 <HAL_NVIC_SetPriority+0x1c>)
 8004092:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004094:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8004098:	f7ff ffc6 	bl	8004028 <NVIC_EncodePriority>
 800409c:	4601      	mov	r1, r0
 800409e:	4620      	mov	r0, r4
 80040a0:	f7ff ffb0 	bl	8004004 <__NVIC_SetPriority>
}
 80040a4:	bd10      	pop	{r4, pc}
 80040a6:	bf00      	nop
 80040a8:	e000ed00 	.word	0xe000ed00

080040ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040ac:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040ae:	f7ff ff9b 	bl	8003fe8 <__NVIC_EnableIRQ>
}
 80040b2:	bd08      	pop	{r3, pc}

080040b4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040b4:	b4f0      	push	{r4, r5, r6, r7}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040b6:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80040b8:	6804      	ldr	r4, [r0, #0]
 80040ba:	4e66      	ldr	r6, [pc, #408]	@ (8004254 <DMA_SetConfig+0x1a0>)
 80040bc:	4d66      	ldr	r5, [pc, #408]	@ (8004258 <DMA_SetConfig+0x1a4>)
 80040be:	42ac      	cmp	r4, r5
 80040c0:	bf18      	it	ne
 80040c2:	42b4      	cmpne	r4, r6
 80040c4:	d042      	beq.n	800414c <DMA_SetConfig+0x98>
 80040c6:	3518      	adds	r5, #24
 80040c8:	42ac      	cmp	r4, r5
 80040ca:	d03f      	beq.n	800414c <DMA_SetConfig+0x98>
 80040cc:	3518      	adds	r5, #24
 80040ce:	42ac      	cmp	r4, r5
 80040d0:	d03c      	beq.n	800414c <DMA_SetConfig+0x98>
 80040d2:	3518      	adds	r5, #24
 80040d4:	42ac      	cmp	r4, r5
 80040d6:	d039      	beq.n	800414c <DMA_SetConfig+0x98>
 80040d8:	3518      	adds	r5, #24
 80040da:	42ac      	cmp	r4, r5
 80040dc:	d036      	beq.n	800414c <DMA_SetConfig+0x98>
 80040de:	3518      	adds	r5, #24
 80040e0:	42ac      	cmp	r4, r5
 80040e2:	d033      	beq.n	800414c <DMA_SetConfig+0x98>
 80040e4:	3518      	adds	r5, #24
 80040e6:	42ac      	cmp	r4, r5
 80040e8:	d030      	beq.n	800414c <DMA_SetConfig+0x98>
 80040ea:	f505 7556 	add.w	r5, r5, #856	@ 0x358
 80040ee:	42ac      	cmp	r4, r5
 80040f0:	d02c      	beq.n	800414c <DMA_SetConfig+0x98>
 80040f2:	3518      	adds	r5, #24
 80040f4:	42ac      	cmp	r4, r5
 80040f6:	d029      	beq.n	800414c <DMA_SetConfig+0x98>
 80040f8:	3518      	adds	r5, #24
 80040fa:	42ac      	cmp	r4, r5
 80040fc:	d026      	beq.n	800414c <DMA_SetConfig+0x98>
 80040fe:	3518      	adds	r5, #24
 8004100:	42ac      	cmp	r4, r5
 8004102:	d023      	beq.n	800414c <DMA_SetConfig+0x98>
 8004104:	3518      	adds	r5, #24
 8004106:	42ac      	cmp	r4, r5
 8004108:	d020      	beq.n	800414c <DMA_SetConfig+0x98>
 800410a:	3518      	adds	r5, #24
 800410c:	42ac      	cmp	r4, r5
 800410e:	d01d      	beq.n	800414c <DMA_SetConfig+0x98>
 8004110:	3518      	adds	r5, #24
 8004112:	42ac      	cmp	r4, r5
 8004114:	d01a      	beq.n	800414c <DMA_SetConfig+0x98>
 8004116:	3518      	adds	r5, #24
 8004118:	42ac      	cmp	r4, r5
 800411a:	d017      	beq.n	800414c <DMA_SetConfig+0x98>
 800411c:	4d4f      	ldr	r5, [pc, #316]	@ (800425c <DMA_SetConfig+0x1a8>)
 800411e:	42ac      	cmp	r4, r5
 8004120:	d014      	beq.n	800414c <DMA_SetConfig+0x98>
 8004122:	3514      	adds	r5, #20
 8004124:	42ac      	cmp	r4, r5
 8004126:	d011      	beq.n	800414c <DMA_SetConfig+0x98>
 8004128:	3514      	adds	r5, #20
 800412a:	42ac      	cmp	r4, r5
 800412c:	d00e      	beq.n	800414c <DMA_SetConfig+0x98>
 800412e:	3514      	adds	r5, #20
 8004130:	42ac      	cmp	r4, r5
 8004132:	d00b      	beq.n	800414c <DMA_SetConfig+0x98>
 8004134:	3514      	adds	r5, #20
 8004136:	42ac      	cmp	r4, r5
 8004138:	d008      	beq.n	800414c <DMA_SetConfig+0x98>
 800413a:	3514      	adds	r5, #20
 800413c:	42ac      	cmp	r4, r5
 800413e:	d005      	beq.n	800414c <DMA_SetConfig+0x98>
 8004140:	3514      	adds	r5, #20
 8004142:	42ac      	cmp	r4, r5
 8004144:	d002      	beq.n	800414c <DMA_SetConfig+0x98>
 8004146:	3514      	adds	r5, #20
 8004148:	42ac      	cmp	r4, r5
 800414a:	d107      	bne.n	800415c <DMA_SetConfig+0xa8>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800414c:	6e44      	ldr	r4, [r0, #100]	@ 0x64
 800414e:	6e85      	ldr	r5, [r0, #104]	@ 0x68
 8004150:	6065      	str	r5, [r4, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004152:	6ec4      	ldr	r4, [r0, #108]	@ 0x6c
 8004154:	b114      	cbz	r4, 800415c <DMA_SetConfig+0xa8>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004156:	6f04      	ldr	r4, [r0, #112]	@ 0x70
 8004158:	6f45      	ldr	r5, [r0, #116]	@ 0x74
 800415a:	6065      	str	r5, [r4, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800415c:	6804      	ldr	r4, [r0, #0]
 800415e:	4e3d      	ldr	r6, [pc, #244]	@ (8004254 <DMA_SetConfig+0x1a0>)
 8004160:	4d3d      	ldr	r5, [pc, #244]	@ (8004258 <DMA_SetConfig+0x1a4>)
 8004162:	42ac      	cmp	r4, r5
 8004164:	bf18      	it	ne
 8004166:	42b4      	cmpne	r4, r6
 8004168:	d052      	beq.n	8004210 <DMA_SetConfig+0x15c>
 800416a:	3518      	adds	r5, #24
 800416c:	42ac      	cmp	r4, r5
 800416e:	d04f      	beq.n	8004210 <DMA_SetConfig+0x15c>
 8004170:	3518      	adds	r5, #24
 8004172:	42ac      	cmp	r4, r5
 8004174:	d04c      	beq.n	8004210 <DMA_SetConfig+0x15c>
 8004176:	3518      	adds	r5, #24
 8004178:	42ac      	cmp	r4, r5
 800417a:	d049      	beq.n	8004210 <DMA_SetConfig+0x15c>
 800417c:	3518      	adds	r5, #24
 800417e:	42ac      	cmp	r4, r5
 8004180:	d046      	beq.n	8004210 <DMA_SetConfig+0x15c>
 8004182:	3518      	adds	r5, #24
 8004184:	42ac      	cmp	r4, r5
 8004186:	d043      	beq.n	8004210 <DMA_SetConfig+0x15c>
 8004188:	3518      	adds	r5, #24
 800418a:	42ac      	cmp	r4, r5
 800418c:	d040      	beq.n	8004210 <DMA_SetConfig+0x15c>
 800418e:	f505 7556 	add.w	r5, r5, #856	@ 0x358
 8004192:	42ac      	cmp	r4, r5
 8004194:	d03c      	beq.n	8004210 <DMA_SetConfig+0x15c>
 8004196:	3518      	adds	r5, #24
 8004198:	42ac      	cmp	r4, r5
 800419a:	d039      	beq.n	8004210 <DMA_SetConfig+0x15c>
 800419c:	3518      	adds	r5, #24
 800419e:	42ac      	cmp	r4, r5
 80041a0:	d036      	beq.n	8004210 <DMA_SetConfig+0x15c>
 80041a2:	3518      	adds	r5, #24
 80041a4:	42ac      	cmp	r4, r5
 80041a6:	d033      	beq.n	8004210 <DMA_SetConfig+0x15c>
 80041a8:	3518      	adds	r5, #24
 80041aa:	42ac      	cmp	r4, r5
 80041ac:	d030      	beq.n	8004210 <DMA_SetConfig+0x15c>
 80041ae:	3518      	adds	r5, #24
 80041b0:	42ac      	cmp	r4, r5
 80041b2:	d02d      	beq.n	8004210 <DMA_SetConfig+0x15c>
 80041b4:	3518      	adds	r5, #24
 80041b6:	42ac      	cmp	r4, r5
 80041b8:	d02a      	beq.n	8004210 <DMA_SetConfig+0x15c>
 80041ba:	3518      	adds	r5, #24
 80041bc:	42ac      	cmp	r4, r5
 80041be:	d027      	beq.n	8004210 <DMA_SetConfig+0x15c>

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80041c0:	4e26      	ldr	r6, [pc, #152]	@ (800425c <DMA_SetConfig+0x1a8>)
 80041c2:	4d27      	ldr	r5, [pc, #156]	@ (8004260 <DMA_SetConfig+0x1ac>)
 80041c4:	42ac      	cmp	r4, r5
 80041c6:	bf18      	it	ne
 80041c8:	42b4      	cmpne	r4, r6
 80041ca:	d011      	beq.n	80041f0 <DMA_SetConfig+0x13c>
 80041cc:	4d25      	ldr	r5, [pc, #148]	@ (8004264 <DMA_SetConfig+0x1b0>)
 80041ce:	42ac      	cmp	r4, r5
 80041d0:	d00e      	beq.n	80041f0 <DMA_SetConfig+0x13c>
 80041d2:	3514      	adds	r5, #20
 80041d4:	42ac      	cmp	r4, r5
 80041d6:	d00b      	beq.n	80041f0 <DMA_SetConfig+0x13c>
 80041d8:	3514      	adds	r5, #20
 80041da:	42ac      	cmp	r4, r5
 80041dc:	d008      	beq.n	80041f0 <DMA_SetConfig+0x13c>
 80041de:	3514      	adds	r5, #20
 80041e0:	42ac      	cmp	r4, r5
 80041e2:	d005      	beq.n	80041f0 <DMA_SetConfig+0x13c>
 80041e4:	3514      	adds	r5, #20
 80041e6:	42ac      	cmp	r4, r5
 80041e8:	d002      	beq.n	80041f0 <DMA_SetConfig+0x13c>
 80041ea:	3514      	adds	r5, #20
 80041ec:	42ac      	cmp	r4, r5
 80041ee:	d124      	bne.n	800423a <DMA_SetConfig+0x186>
  {
    /* Clear all flags */
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80041f0:	6dc4      	ldr	r4, [r0, #92]	@ 0x5c
 80041f2:	f004 051f 	and.w	r5, r4, #31
 80041f6:	2401      	movs	r4, #1
 80041f8:	40ac      	lsls	r4, r5
 80041fa:	607c      	str	r4, [r7, #4]

    /* Configure DMA Channel data length */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80041fc:	6804      	ldr	r4, [r0, #0]
 80041fe:	6063      	str	r3, [r4, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004200:	6883      	ldr	r3, [r0, #8]
 8004202:	2b40      	cmp	r3, #64	@ 0x40
 8004204:	d020      	beq.n	8004248 <DMA_SetConfig+0x194>
    }
    /* Memory to Peripheral */
    else
    {
      /* Configure DMA Channel source address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004206:	6803      	ldr	r3, [r0, #0]
 8004208:	6099      	str	r1, [r3, #8]

      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800420a:	6803      	ldr	r3, [r0, #0]
 800420c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800420e:	e014      	b.n	800423a <DMA_SetConfig+0x186>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004210:	6dc4      	ldr	r4, [r0, #92]	@ 0x5c
 8004212:	f004 0c1f 	and.w	ip, r4, #31
 8004216:	243f      	movs	r4, #63	@ 0x3f
 8004218:	fa04 f40c 	lsl.w	r4, r4, ip
 800421c:	60bc      	str	r4, [r7, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800421e:	6805      	ldr	r5, [r0, #0]
 8004220:	682c      	ldr	r4, [r5, #0]
 8004222:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
 8004226:	602c      	str	r4, [r5, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004228:	6804      	ldr	r4, [r0, #0]
 800422a:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800422c:	6883      	ldr	r3, [r0, #8]
 800422e:	2b40      	cmp	r3, #64	@ 0x40
 8004230:	d005      	beq.n	800423e <DMA_SetConfig+0x18a>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004232:	6803      	ldr	r3, [r0, #0]
 8004234:	6099      	str	r1, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004236:	6803      	ldr	r3, [r0, #0]
 8004238:	60da      	str	r2, [r3, #12]
}
 800423a:	bcf0      	pop	{r4, r5, r6, r7}
 800423c:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800423e:	6803      	ldr	r3, [r0, #0]
 8004240:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004242:	6803      	ldr	r3, [r0, #0]
 8004244:	60d9      	str	r1, [r3, #12]
 8004246:	e7f8      	b.n	800423a <DMA_SetConfig+0x186>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004248:	6803      	ldr	r3, [r0, #0]
 800424a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800424c:	6803      	ldr	r3, [r0, #0]
 800424e:	60d9      	str	r1, [r3, #12]
 8004250:	e7f3      	b.n	800423a <DMA_SetConfig+0x186>
 8004252:	bf00      	nop
 8004254:	40020010 	.word	0x40020010
 8004258:	40020028 	.word	0x40020028
 800425c:	58025408 	.word	0x58025408
 8004260:	5802541c 	.word	0x5802541c
 8004264:	58025430 	.word	0x58025430

08004268 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004268:	6803      	ldr	r3, [r0, #0]
 800426a:	4927      	ldr	r1, [pc, #156]	@ (8004308 <DMA_CalcBaseAndBitshift+0xa0>)
 800426c:	4a27      	ldr	r2, [pc, #156]	@ (800430c <DMA_CalcBaseAndBitshift+0xa4>)
 800426e:	4293      	cmp	r3, r2
 8004270:	bf18      	it	ne
 8004272:	428b      	cmpne	r3, r1
 8004274:	d02f      	beq.n	80042d6 <DMA_CalcBaseAndBitshift+0x6e>
 8004276:	3218      	adds	r2, #24
 8004278:	4293      	cmp	r3, r2
 800427a:	d02c      	beq.n	80042d6 <DMA_CalcBaseAndBitshift+0x6e>
 800427c:	3218      	adds	r2, #24
 800427e:	4293      	cmp	r3, r2
 8004280:	d029      	beq.n	80042d6 <DMA_CalcBaseAndBitshift+0x6e>
 8004282:	3218      	adds	r2, #24
 8004284:	4293      	cmp	r3, r2
 8004286:	d026      	beq.n	80042d6 <DMA_CalcBaseAndBitshift+0x6e>
 8004288:	3218      	adds	r2, #24
 800428a:	4293      	cmp	r3, r2
 800428c:	d023      	beq.n	80042d6 <DMA_CalcBaseAndBitshift+0x6e>
 800428e:	3218      	adds	r2, #24
 8004290:	4293      	cmp	r3, r2
 8004292:	d020      	beq.n	80042d6 <DMA_CalcBaseAndBitshift+0x6e>
 8004294:	3218      	adds	r2, #24
 8004296:	4293      	cmp	r3, r2
 8004298:	d01d      	beq.n	80042d6 <DMA_CalcBaseAndBitshift+0x6e>
 800429a:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 800429e:	4293      	cmp	r3, r2
 80042a0:	d019      	beq.n	80042d6 <DMA_CalcBaseAndBitshift+0x6e>
 80042a2:	3218      	adds	r2, #24
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d016      	beq.n	80042d6 <DMA_CalcBaseAndBitshift+0x6e>
 80042a8:	3218      	adds	r2, #24
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d013      	beq.n	80042d6 <DMA_CalcBaseAndBitshift+0x6e>
 80042ae:	3218      	adds	r2, #24
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d010      	beq.n	80042d6 <DMA_CalcBaseAndBitshift+0x6e>
 80042b4:	3218      	adds	r2, #24
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d00d      	beq.n	80042d6 <DMA_CalcBaseAndBitshift+0x6e>
 80042ba:	3218      	adds	r2, #24
 80042bc:	4293      	cmp	r3, r2
 80042be:	d00a      	beq.n	80042d6 <DMA_CalcBaseAndBitshift+0x6e>
 80042c0:	3218      	adds	r2, #24
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d007      	beq.n	80042d6 <DMA_CalcBaseAndBitshift+0x6e>
 80042c6:	3218      	adds	r2, #24
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d004      	beq.n	80042d6 <DMA_CalcBaseAndBitshift+0x6e>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80042cc:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80042d0:	6583      	str	r3, [r0, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
}
 80042d2:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 80042d4:	4770      	bx	lr
{
 80042d6:	b410      	push	{r4}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80042d8:	b2d9      	uxtb	r1, r3
 80042da:	3910      	subs	r1, #16
 80042dc:	4a0c      	ldr	r2, [pc, #48]	@ (8004310 <DMA_CalcBaseAndBitshift+0xa8>)
 80042de:	fba2 4201 	umull	r4, r2, r2, r1
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80042e2:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80042e6:	4c0b      	ldr	r4, [pc, #44]	@ (8004314 <DMA_CalcBaseAndBitshift+0xac>)
 80042e8:	5ca2      	ldrb	r2, [r4, r2]
 80042ea:	65c2      	str	r2, [r0, #92]	@ 0x5c
    if (stream_number > 3U)
 80042ec:	295f      	cmp	r1, #95	@ 0x5f
 80042ee:	d907      	bls.n	8004300 <DMA_CalcBaseAndBitshift+0x98>
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80042f0:	4a09      	ldr	r2, [pc, #36]	@ (8004318 <DMA_CalcBaseAndBitshift+0xb0>)
 80042f2:	401a      	ands	r2, r3
 80042f4:	3204      	adds	r2, #4
 80042f6:	6582      	str	r2, [r0, #88]	@ 0x58
}
 80042f8:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 80042fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042fe:	4770      	bx	lr
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004300:	4a05      	ldr	r2, [pc, #20]	@ (8004318 <DMA_CalcBaseAndBitshift+0xb0>)
 8004302:	401a      	ands	r2, r3
 8004304:	6582      	str	r2, [r0, #88]	@ 0x58
 8004306:	e7f7      	b.n	80042f8 <DMA_CalcBaseAndBitshift+0x90>
 8004308:	40020010 	.word	0x40020010
 800430c:	40020028 	.word	0x40020028
 8004310:	aaaaaaab 	.word	0xaaaaaaab
 8004314:	0801b364 	.word	0x0801b364
 8004318:	fffffc00 	.word	0xfffffc00

0800431c <DMA_CheckFifoParam>:
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800431c:	6983      	ldr	r3, [r0, #24]
 800431e:	b99b      	cbnz	r3, 8004348 <DMA_CheckFifoParam+0x2c>
  {
    switch (hdma->Init.FIFOThreshold)
 8004320:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8004322:	2b01      	cmp	r3, #1
 8004324:	d00a      	beq.n	800433c <DMA_CheckFifoParam+0x20>
 8004326:	2b02      	cmp	r3, #2
 8004328:	d002      	beq.n	8004330 <DMA_CheckFifoParam+0x14>
 800432a:	b10b      	cbz	r3, 8004330 <DMA_CheckFifoParam+0x14>
 800432c:	2000      	movs	r0, #0
 800432e:	4770      	bx	lr
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004330:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8004332:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8004336:	d12a      	bne.n	800438e <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8004338:	2000      	movs	r0, #0
 800433a:	4770      	bx	lr
          status = HAL_ERROR;
        }
        break;

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800433c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800433e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004342:	d026      	beq.n	8004392 <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8004344:	2000      	movs	r0, #0
 8004346:	4770      	bx	lr
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004348:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800434c:	d00a      	beq.n	8004364 <DMA_CheckFifoParam+0x48>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800434e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8004350:	2b02      	cmp	r3, #2
 8004352:	d926      	bls.n	80043a2 <DMA_CheckFifoParam+0x86>
 8004354:	2b03      	cmp	r3, #3
 8004356:	d126      	bne.n	80043a6 <DMA_CheckFifoParam+0x8a>
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;

      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004358:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800435a:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800435e:	d124      	bne.n	80043aa <DMA_CheckFifoParam+0x8e>
  HAL_StatusTypeDef status = HAL_OK;
 8004360:	2000      	movs	r0, #0
 8004362:	4770      	bx	lr
    switch (hdma->Init.FIFOThreshold)
 8004364:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8004366:	2b03      	cmp	r3, #3
 8004368:	d803      	bhi.n	8004372 <DMA_CheckFifoParam+0x56>
 800436a:	e8df f003 	tbb	[pc, r3]
 800436e:	0414      	.short	0x0414
 8004370:	0a14      	.short	0x0a14
 8004372:	2000      	movs	r0, #0
 8004374:	4770      	bx	lr
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004376:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8004378:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800437c:	d10d      	bne.n	800439a <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 800437e:	2000      	movs	r0, #0
 8004380:	4770      	bx	lr
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004382:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8004384:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004388:	d009      	beq.n	800439e <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 800438a:	2000      	movs	r0, #0
 800438c:	4770      	bx	lr
          status = HAL_ERROR;
 800438e:	2001      	movs	r0, #1
 8004390:	4770      	bx	lr
          status = HAL_ERROR;
 8004392:	2001      	movs	r0, #1
 8004394:	4770      	bx	lr
        status = HAL_ERROR;
 8004396:	2001      	movs	r0, #1
 8004398:	4770      	bx	lr
          status = HAL_ERROR;
 800439a:	2001      	movs	r0, #1
 800439c:	4770      	bx	lr
          status = HAL_ERROR;
 800439e:	2001      	movs	r0, #1
 80043a0:	4770      	bx	lr
        status = HAL_ERROR;
 80043a2:	2001      	movs	r0, #1
 80043a4:	4770      	bx	lr
    switch (hdma->Init.FIFOThreshold)
 80043a6:	2000      	movs	r0, #0
 80043a8:	4770      	bx	lr
        {
          status = HAL_ERROR;
 80043aa:	2001      	movs	r0, #1
        break;
    }
  }

  return status;
}
 80043ac:	4770      	bx	lr
	...

080043b0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80043b0:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80043b2:	4921      	ldr	r1, [pc, #132]	@ (8004438 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80043b4:	4a21      	ldr	r2, [pc, #132]	@ (800443c <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	bf18      	it	ne
 80043ba:	428b      	cmpne	r3, r1
 80043bc:	d027      	beq.n	800440e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043be:	3214      	adds	r2, #20
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d024      	beq.n	800440e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043c4:	3214      	adds	r2, #20
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d021      	beq.n	800440e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043ca:	3214      	adds	r2, #20
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d01e      	beq.n	800440e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043d0:	3214      	adds	r2, #20
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d01b      	beq.n	800440e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043d6:	3214      	adds	r2, #20
 80043d8:	4293      	cmp	r3, r2
 80043da:	d018      	beq.n	800440e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043dc:	3214      	adds	r2, #20
 80043de:	4293      	cmp	r3, r2
 80043e0:	d015      	beq.n	800440e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80043e2:	b2da      	uxtb	r2, r3
 80043e4:	3a10      	subs	r2, #16
 80043e6:	4916      	ldr	r1, [pc, #88]	@ (8004440 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 80043e8:	fba1 1202 	umull	r1, r2, r1, r2
 80043ec:	0912      	lsrs	r2, r2, #4

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80043ee:	4915      	ldr	r1, [pc, #84]	@ (8004444 <DMA_CalcDMAMUXChannelBaseAndMask+0x94>)
 80043f0:	4419      	add	r1, r3
 80043f2:	29a8      	cmp	r1, #168	@ 0xa8
 80043f4:	d91e      	bls.n	8004434 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80043f6:	4b14      	ldr	r3, [pc, #80]	@ (8004448 <DMA_CalcDMAMUXChannelBaseAndMask+0x98>)
 80043f8:	4413      	add	r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	6603      	str	r3, [r0, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80043fe:	4b13      	ldr	r3, [pc, #76]	@ (800444c <DMA_CalcDMAMUXChannelBaseAndMask+0x9c>)
 8004400:	6643      	str	r3, [r0, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004402:	f002 021f 	and.w	r2, r2, #31
 8004406:	2301      	movs	r3, #1
 8004408:	4093      	lsls	r3, r2
 800440a:	6683      	str	r3, [r0, #104]	@ 0x68
  }
}
 800440c:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800440e:	b2db      	uxtb	r3, r3
 8004410:	3b08      	subs	r3, #8
 8004412:	4a0f      	ldr	r2, [pc, #60]	@ (8004450 <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 8004414:	fba2 2303 	umull	r2, r3, r2, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004418:	4a0e      	ldr	r2, [pc, #56]	@ (8004454 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
 800441a:	eb02 1213 	add.w	r2, r2, r3, lsr #4
 800441e:	0092      	lsls	r2, r2, #2
 8004420:	6602      	str	r2, [r0, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004422:	4a0d      	ldr	r2, [pc, #52]	@ (8004458 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8004424:	6642      	str	r2, [r0, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004426:	f3c3 1304 	ubfx	r3, r3, #4, #5
 800442a:	2201      	movs	r2, #1
 800442c:	fa02 f303 	lsl.w	r3, r2, r3
 8004430:	6683      	str	r3, [r0, #104]	@ 0x68
 8004432:	4770      	bx	lr
      stream_number += 8U;
 8004434:	3208      	adds	r2, #8
 8004436:	e7de      	b.n	80043f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x46>
 8004438:	58025408 	.word	0x58025408
 800443c:	5802541c 	.word	0x5802541c
 8004440:	aaaaaaab 	.word	0xaaaaaaab
 8004444:	bffdfbf0 	.word	0xbffdfbf0
 8004448:	10008200 	.word	0x10008200
 800444c:	40020880 	.word	0x40020880
 8004450:	cccccccd 	.word	0xcccccccd
 8004454:	16009600 	.word	0x16009600
 8004458:	58025880 	.word	0x58025880

0800445c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800445c:	7901      	ldrb	r1, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800445e:	1e4a      	subs	r2, r1, #1
 8004460:	2a07      	cmp	r2, #7
 8004462:	d82b      	bhi.n	80044bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x60>
{
 8004464:	b430      	push	{r4, r5}
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004466:	6803      	ldr	r3, [r0, #0]
 8004468:	4d15      	ldr	r5, [pc, #84]	@ (80044c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x64>)
 800446a:	4c16      	ldr	r4, [pc, #88]	@ (80044c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>)
 800446c:	42a3      	cmp	r3, r4
 800446e:	bf18      	it	ne
 8004470:	42ab      	cmpne	r3, r5
 8004472:	d018      	beq.n	80044a6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8004474:	3414      	adds	r4, #20
 8004476:	42a3      	cmp	r3, r4
 8004478:	d015      	beq.n	80044a6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 800447a:	3414      	adds	r4, #20
 800447c:	42a3      	cmp	r3, r4
 800447e:	d012      	beq.n	80044a6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8004480:	3414      	adds	r4, #20
 8004482:	42a3      	cmp	r3, r4
 8004484:	d00f      	beq.n	80044a6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8004486:	3414      	adds	r4, #20
 8004488:	42a3      	cmp	r3, r4
 800448a:	d00c      	beq.n	80044a6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 800448c:	3414      	adds	r4, #20
 800448e:	42a3      	cmp	r3, r4
 8004490:	d009      	beq.n	80044a6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8004492:	3414      	adds	r4, #20
 8004494:	42a3      	cmp	r3, r4
 8004496:	d006      	beq.n	80044a6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004498:	4b0b      	ldr	r3, [pc, #44]	@ (80044c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>)
 800449a:	440b      	add	r3, r1
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	66c3      	str	r3, [r0, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80044a0:	4b0a      	ldr	r3, [pc, #40]	@ (80044cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>)
 80044a2:	6703      	str	r3, [r0, #112]	@ 0x70
 80044a4:	e005      	b.n	80044b2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x56>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80044a6:	4b0a      	ldr	r3, [pc, #40]	@ (80044d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x74>)
 80044a8:	440b      	add	r3, r1
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	66c3      	str	r3, [r0, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80044ae:	4b09      	ldr	r3, [pc, #36]	@ (80044d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x78>)
 80044b0:	6703      	str	r3, [r0, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80044b2:	2301      	movs	r3, #1
 80044b4:	4093      	lsls	r3, r2
 80044b6:	6743      	str	r3, [r0, #116]	@ 0x74
  }
}
 80044b8:	bc30      	pop	{r4, r5}
 80044ba:	4770      	bx	lr
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	58025408 	.word	0x58025408
 80044c4:	5802541c 	.word	0x5802541c
 80044c8:	1000823f 	.word	0x1000823f
 80044cc:	40020940 	.word	0x40020940
 80044d0:	1600963f 	.word	0x1600963f
 80044d4:	58025940 	.word	0x58025940

080044d8 <HAL_DMA_Init>:
{
 80044d8:	b570      	push	{r4, r5, r6, lr}
 80044da:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80044dc:	f7fe ffce 	bl	800347c <HAL_GetTick>
  if(hdma == NULL)
 80044e0:	2c00      	cmp	r4, #0
 80044e2:	f000 81b6 	beq.w	8004852 <HAL_DMA_Init+0x37a>
 80044e6:	4605      	mov	r5, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80044e8:	6823      	ldr	r3, [r4, #0]
 80044ea:	4953      	ldr	r1, [pc, #332]	@ (8004638 <HAL_DMA_Init+0x160>)
 80044ec:	4a53      	ldr	r2, [pc, #332]	@ (800463c <HAL_DMA_Init+0x164>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	bf18      	it	ne
 80044f2:	428b      	cmpne	r3, r1
 80044f4:	bf0c      	ite	eq
 80044f6:	2101      	moveq	r1, #1
 80044f8:	2100      	movne	r1, #0
 80044fa:	d050      	beq.n	800459e <HAL_DMA_Init+0xc6>
 80044fc:	3218      	adds	r2, #24
 80044fe:	4293      	cmp	r3, r2
 8004500:	d04d      	beq.n	800459e <HAL_DMA_Init+0xc6>
 8004502:	3218      	adds	r2, #24
 8004504:	4293      	cmp	r3, r2
 8004506:	d04a      	beq.n	800459e <HAL_DMA_Init+0xc6>
 8004508:	3218      	adds	r2, #24
 800450a:	4293      	cmp	r3, r2
 800450c:	d047      	beq.n	800459e <HAL_DMA_Init+0xc6>
 800450e:	3218      	adds	r2, #24
 8004510:	4293      	cmp	r3, r2
 8004512:	d044      	beq.n	800459e <HAL_DMA_Init+0xc6>
 8004514:	3218      	adds	r2, #24
 8004516:	4293      	cmp	r3, r2
 8004518:	d041      	beq.n	800459e <HAL_DMA_Init+0xc6>
 800451a:	3218      	adds	r2, #24
 800451c:	4293      	cmp	r3, r2
 800451e:	d03e      	beq.n	800459e <HAL_DMA_Init+0xc6>
 8004520:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004524:	4293      	cmp	r3, r2
 8004526:	d03a      	beq.n	800459e <HAL_DMA_Init+0xc6>
 8004528:	3218      	adds	r2, #24
 800452a:	4293      	cmp	r3, r2
 800452c:	d037      	beq.n	800459e <HAL_DMA_Init+0xc6>
 800452e:	3218      	adds	r2, #24
 8004530:	4293      	cmp	r3, r2
 8004532:	d034      	beq.n	800459e <HAL_DMA_Init+0xc6>
 8004534:	3218      	adds	r2, #24
 8004536:	4293      	cmp	r3, r2
 8004538:	d031      	beq.n	800459e <HAL_DMA_Init+0xc6>
 800453a:	3218      	adds	r2, #24
 800453c:	4293      	cmp	r3, r2
 800453e:	d02e      	beq.n	800459e <HAL_DMA_Init+0xc6>
 8004540:	3218      	adds	r2, #24
 8004542:	4293      	cmp	r3, r2
 8004544:	d02b      	beq.n	800459e <HAL_DMA_Init+0xc6>
 8004546:	3218      	adds	r2, #24
 8004548:	4293      	cmp	r3, r2
 800454a:	d028      	beq.n	800459e <HAL_DMA_Init+0xc6>
 800454c:	3218      	adds	r2, #24
 800454e:	4293      	cmp	r3, r2
 8004550:	d025      	beq.n	800459e <HAL_DMA_Init+0xc6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004552:	493b      	ldr	r1, [pc, #236]	@ (8004640 <HAL_DMA_Init+0x168>)
 8004554:	4a3b      	ldr	r2, [pc, #236]	@ (8004644 <HAL_DMA_Init+0x16c>)
 8004556:	4293      	cmp	r3, r2
 8004558:	bf18      	it	ne
 800455a:	428b      	cmpne	r3, r1
 800455c:	f000 8131 	beq.w	80047c2 <HAL_DMA_Init+0x2ea>
 8004560:	4a39      	ldr	r2, [pc, #228]	@ (8004648 <HAL_DMA_Init+0x170>)
 8004562:	4293      	cmp	r3, r2
 8004564:	f000 812d 	beq.w	80047c2 <HAL_DMA_Init+0x2ea>
 8004568:	3214      	adds	r2, #20
 800456a:	4293      	cmp	r3, r2
 800456c:	f000 8129 	beq.w	80047c2 <HAL_DMA_Init+0x2ea>
 8004570:	3214      	adds	r2, #20
 8004572:	4293      	cmp	r3, r2
 8004574:	f000 8125 	beq.w	80047c2 <HAL_DMA_Init+0x2ea>
 8004578:	3214      	adds	r2, #20
 800457a:	4293      	cmp	r3, r2
 800457c:	f000 8121 	beq.w	80047c2 <HAL_DMA_Init+0x2ea>
 8004580:	3214      	adds	r2, #20
 8004582:	4293      	cmp	r3, r2
 8004584:	f000 811d 	beq.w	80047c2 <HAL_DMA_Init+0x2ea>
 8004588:	3214      	adds	r2, #20
 800458a:	4293      	cmp	r3, r2
 800458c:	f000 8119 	beq.w	80047c2 <HAL_DMA_Init+0x2ea>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004590:	2340      	movs	r3, #64	@ 0x40
 8004592:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004594:	2303      	movs	r3, #3
 8004596:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 800459a:	2001      	movs	r0, #1
 800459c:	e04a      	b.n	8004634 <HAL_DMA_Init+0x15c>
    hdma->State = HAL_DMA_STATE_BUSY;
 800459e:	2202      	movs	r2, #2
 80045a0:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 80045a4:	2200      	movs	r2, #0
 80045a6:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
    __HAL_DMA_DISABLE(hdma);
 80045aa:	bb79      	cbnz	r1, 800460c <HAL_DMA_Init+0x134>
 80045ac:	4a27      	ldr	r2, [pc, #156]	@ (800464c <HAL_DMA_Init+0x174>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d02c      	beq.n	800460c <HAL_DMA_Init+0x134>
 80045b2:	3218      	adds	r2, #24
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d029      	beq.n	800460c <HAL_DMA_Init+0x134>
 80045b8:	3218      	adds	r2, #24
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d026      	beq.n	800460c <HAL_DMA_Init+0x134>
 80045be:	3218      	adds	r2, #24
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d023      	beq.n	800460c <HAL_DMA_Init+0x134>
 80045c4:	3218      	adds	r2, #24
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d020      	beq.n	800460c <HAL_DMA_Init+0x134>
 80045ca:	3218      	adds	r2, #24
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d01d      	beq.n	800460c <HAL_DMA_Init+0x134>
 80045d0:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d019      	beq.n	800460c <HAL_DMA_Init+0x134>
 80045d8:	3218      	adds	r2, #24
 80045da:	4293      	cmp	r3, r2
 80045dc:	d016      	beq.n	800460c <HAL_DMA_Init+0x134>
 80045de:	3218      	adds	r2, #24
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d013      	beq.n	800460c <HAL_DMA_Init+0x134>
 80045e4:	3218      	adds	r2, #24
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d010      	beq.n	800460c <HAL_DMA_Init+0x134>
 80045ea:	3218      	adds	r2, #24
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d00d      	beq.n	800460c <HAL_DMA_Init+0x134>
 80045f0:	3218      	adds	r2, #24
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d00a      	beq.n	800460c <HAL_DMA_Init+0x134>
 80045f6:	3218      	adds	r2, #24
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d007      	beq.n	800460c <HAL_DMA_Init+0x134>
 80045fc:	3218      	adds	r2, #24
 80045fe:	4293      	cmp	r3, r2
 8004600:	d004      	beq.n	800460c <HAL_DMA_Init+0x134>
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	f022 0201 	bic.w	r2, r2, #1
 8004608:	601a      	str	r2, [r3, #0]
 800460a:	e003      	b.n	8004614 <HAL_DMA_Init+0x13c>
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	f022 0201 	bic.w	r2, r2, #1
 8004612:	601a      	str	r2, [r3, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004614:	6823      	ldr	r3, [r4, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	f012 0f01 	tst.w	r2, #1
 800461c:	d018      	beq.n	8004650 <HAL_DMA_Init+0x178>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800461e:	f7fe ff2d 	bl	800347c <HAL_GetTick>
 8004622:	1b43      	subs	r3, r0, r5
 8004624:	2b05      	cmp	r3, #5
 8004626:	d9f5      	bls.n	8004614 <HAL_DMA_Init+0x13c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004628:	2320      	movs	r3, #32
 800462a:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 800462c:	2303      	movs	r3, #3
 800462e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        return HAL_ERROR;
 8004632:	2001      	movs	r0, #1
}
 8004634:	bd70      	pop	{r4, r5, r6, pc}
 8004636:	bf00      	nop
 8004638:	40020010 	.word	0x40020010
 800463c:	40020028 	.word	0x40020028
 8004640:	58025408 	.word	0x58025408
 8004644:	5802541c 	.word	0x5802541c
 8004648:	58025430 	.word	0x58025430
 800464c:	40020040 	.word	0x40020040
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004650:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004652:	4981      	ldr	r1, [pc, #516]	@ (8004858 <HAL_DMA_Init+0x380>)
 8004654:	4011      	ands	r1, r2
    registerValue |=  hdma->Init.Direction           |
 8004656:	68a2      	ldr	r2, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004658:	68e0      	ldr	r0, [r4, #12]
    registerValue |=  hdma->Init.Direction           |
 800465a:	4302      	orrs	r2, r0
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800465c:	6920      	ldr	r0, [r4, #16]
 800465e:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004660:	6960      	ldr	r0, [r4, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004662:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004664:	69a0      	ldr	r0, [r4, #24]
 8004666:	4302      	orrs	r2, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 8004668:	69e0      	ldr	r0, [r4, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800466a:	4302      	orrs	r2, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 800466c:	6a20      	ldr	r0, [r4, #32]
 800466e:	4302      	orrs	r2, r0
    registerValue |=  hdma->Init.Direction           |
 8004670:	430a      	orrs	r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004672:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004674:	2904      	cmp	r1, #4
 8004676:	f000 8099 	beq.w	80047ac <HAL_DMA_Init+0x2d4>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800467a:	4978      	ldr	r1, [pc, #480]	@ (800485c <HAL_DMA_Init+0x384>)
 800467c:	6808      	ldr	r0, [r1, #0]
 800467e:	4978      	ldr	r1, [pc, #480]	@ (8004860 <HAL_DMA_Init+0x388>)
 8004680:	4001      	ands	r1, r0
 8004682:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8004686:	d311      	bcc.n	80046ac <HAL_DMA_Init+0x1d4>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004688:	6861      	ldr	r1, [r4, #4]
 800468a:	f1a1 0529 	sub.w	r5, r1, #41	@ 0x29
 800468e:	f1a1 003f 	sub.w	r0, r1, #63	@ 0x3f
 8004692:	2803      	cmp	r0, #3
 8004694:	bf88      	it	hi
 8004696:	2d05      	cmphi	r5, #5
 8004698:	d906      	bls.n	80046a8 <HAL_DMA_Init+0x1d0>
 800469a:	f1a1 0047 	sub.w	r0, r1, #71	@ 0x47
 800469e:	2801      	cmp	r0, #1
 80046a0:	d902      	bls.n	80046a8 <HAL_DMA_Init+0x1d0>
 80046a2:	394f      	subs	r1, #79	@ 0x4f
 80046a4:	2903      	cmp	r1, #3
 80046a6:	d801      	bhi.n	80046ac <HAL_DMA_Init+0x1d4>
        registerValue |= DMA_SxCR_TRBUFF;
 80046a8:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80046ac:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80046ae:	6826      	ldr	r6, [r4, #0]
 80046b0:	6975      	ldr	r5, [r6, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80046b2:	f025 0507 	bic.w	r5, r5, #7
    registerValue |= hdma->Init.FIFOMode;
 80046b6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80046b8:	431d      	orrs	r5, r3
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046ba:	2b04      	cmp	r3, #4
 80046bc:	d108      	bne.n	80046d0 <HAL_DMA_Init+0x1f8>
      registerValue |= hdma->Init.FIFOThreshold;
 80046be:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80046c0:	431d      	orrs	r5, r3
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80046c2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80046c4:	b123      	cbz	r3, 80046d0 <HAL_DMA_Init+0x1f8>
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80046c6:	4620      	mov	r0, r4
 80046c8:	f7ff fe28 	bl	800431c <DMA_CheckFifoParam>
 80046cc:	2800      	cmp	r0, #0
 80046ce:	d172      	bne.n	80047b6 <HAL_DMA_Init+0x2de>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80046d0:	6175      	str	r5, [r6, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80046d2:	4620      	mov	r0, r4
 80046d4:	f7ff fdc8 	bl	8004268 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80046d8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80046da:	f003 021f 	and.w	r2, r3, #31
 80046de:	233f      	movs	r3, #63	@ 0x3f
 80046e0:	4093      	lsls	r3, r2
 80046e2:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80046e4:	6823      	ldr	r3, [r4, #0]
 80046e6:	495f      	ldr	r1, [pc, #380]	@ (8004864 <HAL_DMA_Init+0x38c>)
 80046e8:	4a5f      	ldr	r2, [pc, #380]	@ (8004868 <HAL_DMA_Init+0x390>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	bf18      	it	ne
 80046ee:	428b      	cmpne	r3, r1
 80046f0:	d042      	beq.n	8004778 <HAL_DMA_Init+0x2a0>
 80046f2:	3218      	adds	r2, #24
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d03f      	beq.n	8004778 <HAL_DMA_Init+0x2a0>
 80046f8:	3218      	adds	r2, #24
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d03c      	beq.n	8004778 <HAL_DMA_Init+0x2a0>
 80046fe:	3218      	adds	r2, #24
 8004700:	4293      	cmp	r3, r2
 8004702:	d039      	beq.n	8004778 <HAL_DMA_Init+0x2a0>
 8004704:	3218      	adds	r2, #24
 8004706:	4293      	cmp	r3, r2
 8004708:	d036      	beq.n	8004778 <HAL_DMA_Init+0x2a0>
 800470a:	3218      	adds	r2, #24
 800470c:	4293      	cmp	r3, r2
 800470e:	d033      	beq.n	8004778 <HAL_DMA_Init+0x2a0>
 8004710:	3218      	adds	r2, #24
 8004712:	4293      	cmp	r3, r2
 8004714:	d030      	beq.n	8004778 <HAL_DMA_Init+0x2a0>
 8004716:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 800471a:	4293      	cmp	r3, r2
 800471c:	d02c      	beq.n	8004778 <HAL_DMA_Init+0x2a0>
 800471e:	3218      	adds	r2, #24
 8004720:	4293      	cmp	r3, r2
 8004722:	d029      	beq.n	8004778 <HAL_DMA_Init+0x2a0>
 8004724:	3218      	adds	r2, #24
 8004726:	4293      	cmp	r3, r2
 8004728:	d026      	beq.n	8004778 <HAL_DMA_Init+0x2a0>
 800472a:	3218      	adds	r2, #24
 800472c:	4293      	cmp	r3, r2
 800472e:	d023      	beq.n	8004778 <HAL_DMA_Init+0x2a0>
 8004730:	3218      	adds	r2, #24
 8004732:	4293      	cmp	r3, r2
 8004734:	d020      	beq.n	8004778 <HAL_DMA_Init+0x2a0>
 8004736:	3218      	adds	r2, #24
 8004738:	4293      	cmp	r3, r2
 800473a:	d01d      	beq.n	8004778 <HAL_DMA_Init+0x2a0>
 800473c:	3218      	adds	r2, #24
 800473e:	4293      	cmp	r3, r2
 8004740:	d01a      	beq.n	8004778 <HAL_DMA_Init+0x2a0>
 8004742:	3218      	adds	r2, #24
 8004744:	4293      	cmp	r3, r2
 8004746:	d017      	beq.n	8004778 <HAL_DMA_Init+0x2a0>
 8004748:	4a48      	ldr	r2, [pc, #288]	@ (800486c <HAL_DMA_Init+0x394>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d014      	beq.n	8004778 <HAL_DMA_Init+0x2a0>
 800474e:	3214      	adds	r2, #20
 8004750:	4293      	cmp	r3, r2
 8004752:	d011      	beq.n	8004778 <HAL_DMA_Init+0x2a0>
 8004754:	3214      	adds	r2, #20
 8004756:	4293      	cmp	r3, r2
 8004758:	d00e      	beq.n	8004778 <HAL_DMA_Init+0x2a0>
 800475a:	3214      	adds	r2, #20
 800475c:	4293      	cmp	r3, r2
 800475e:	d00b      	beq.n	8004778 <HAL_DMA_Init+0x2a0>
 8004760:	3214      	adds	r2, #20
 8004762:	4293      	cmp	r3, r2
 8004764:	d008      	beq.n	8004778 <HAL_DMA_Init+0x2a0>
 8004766:	3214      	adds	r2, #20
 8004768:	4293      	cmp	r3, r2
 800476a:	d005      	beq.n	8004778 <HAL_DMA_Init+0x2a0>
 800476c:	3214      	adds	r2, #20
 800476e:	4293      	cmp	r3, r2
 8004770:	d002      	beq.n	8004778 <HAL_DMA_Init+0x2a0>
 8004772:	3214      	adds	r2, #20
 8004774:	4293      	cmp	r3, r2
 8004776:	d113      	bne.n	80047a0 <HAL_DMA_Init+0x2c8>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004778:	4620      	mov	r0, r4
 800477a:	f7ff fe19 	bl	80043b0 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800477e:	68a3      	ldr	r3, [r4, #8]
 8004780:	2b80      	cmp	r3, #128	@ 0x80
 8004782:	d059      	beq.n	8004838 <HAL_DMA_Init+0x360>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004784:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004786:	7922      	ldrb	r2, [r4, #4]
 8004788:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800478a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800478c:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 800478e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004790:	6863      	ldr	r3, [r4, #4]
 8004792:	3b01      	subs	r3, #1
 8004794:	2b07      	cmp	r3, #7
 8004796:	d952      	bls.n	800483e <HAL_DMA_Init+0x366>
      hdma->DMAmuxRequestGen = 0U;
 8004798:	2300      	movs	r3, #0
 800479a:	66e3      	str	r3, [r4, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800479c:	6723      	str	r3, [r4, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800479e:	6763      	str	r3, [r4, #116]	@ 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047a0:	2000      	movs	r0, #0
 80047a2:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80047a4:	2301      	movs	r3, #1
 80047a6:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 80047aa:	e743      	b.n	8004634 <HAL_DMA_Init+0x15c>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80047ac:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80047ae:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80047b0:	4301      	orrs	r1, r0
 80047b2:	430a      	orrs	r2, r1
 80047b4:	e761      	b.n	800467a <HAL_DMA_Init+0x1a2>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80047b6:	2340      	movs	r3, #64	@ 0x40
 80047b8:	6563      	str	r3, [r4, #84]	@ 0x54
          hdma->State = HAL_DMA_STATE_READY;
 80047ba:	2001      	movs	r0, #1
 80047bc:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
          return HAL_ERROR;
 80047c0:	e738      	b.n	8004634 <HAL_DMA_Init+0x15c>
    hdma->State = HAL_DMA_STATE_BUSY;
 80047c2:	2202      	movs	r2, #2
 80047c4:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 80047c8:	2200      	movs	r2, #0
 80047ca:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80047ce:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80047d0:	4927      	ldr	r1, [pc, #156]	@ (8004870 <HAL_DMA_Init+0x398>)
 80047d2:	4011      	ands	r1, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80047d4:	68a2      	ldr	r2, [r4, #8]
 80047d6:	2a40      	cmp	r2, #64	@ 0x40
 80047d8:	d02c      	beq.n	8004834 <HAL_DMA_Init+0x35c>
 80047da:	2a80      	cmp	r2, #128	@ 0x80
 80047dc:	d027      	beq.n	800482e <HAL_DMA_Init+0x356>
 80047de:	2200      	movs	r2, #0
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80047e0:	68e0      	ldr	r0, [r4, #12]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80047e2:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80047e6:	6920      	ldr	r0, [r4, #16]
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80047e8:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80047ec:	6960      	ldr	r0, [r4, #20]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80047ee:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80047f2:	69a0      	ldr	r0, [r4, #24]
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80047f4:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80047f8:	69e0      	ldr	r0, [r4, #28]
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80047fa:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80047fe:	6a20      	ldr	r0, [r4, #32]
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004800:	ea42 1210 	orr.w	r2, r2, r0, lsr #4
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004804:	430a      	orrs	r2, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004806:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004808:	6822      	ldr	r2, [r4, #0]
 800480a:	4b1a      	ldr	r3, [pc, #104]	@ (8004874 <HAL_DMA_Init+0x39c>)
 800480c:	4413      	add	r3, r2
 800480e:	4a1a      	ldr	r2, [pc, #104]	@ (8004878 <HAL_DMA_Init+0x3a0>)
 8004810:	fba2 2303 	umull	r2, r3, r2, r3
 8004814:	091b      	lsrs	r3, r3, #4
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	65e3      	str	r3, [r4, #92]	@ 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800481a:	4620      	mov	r0, r4
 800481c:	f7ff fd24 	bl	8004268 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004820:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004822:	f002 011f 	and.w	r1, r2, #31
 8004826:	2201      	movs	r2, #1
 8004828:	408a      	lsls	r2, r1
 800482a:	6042      	str	r2, [r0, #4]
 800482c:	e75a      	b.n	80046e4 <HAL_DMA_Init+0x20c>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800482e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004832:	e7d5      	b.n	80047e0 <HAL_DMA_Init+0x308>
 8004834:	2210      	movs	r2, #16
 8004836:	e7d3      	b.n	80047e0 <HAL_DMA_Init+0x308>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004838:	2300      	movs	r3, #0
 800483a:	6063      	str	r3, [r4, #4]
 800483c:	e7a2      	b.n	8004784 <HAL_DMA_Init+0x2ac>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800483e:	4620      	mov	r0, r4
 8004840:	f7ff fe0c 	bl	800445c <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004844:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8004846:	2200      	movs	r2, #0
 8004848:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800484a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800484c:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 800484e:	605a      	str	r2, [r3, #4]
 8004850:	e7a6      	b.n	80047a0 <HAL_DMA_Init+0x2c8>
    return HAL_ERROR;
 8004852:	2001      	movs	r0, #1
 8004854:	e6ee      	b.n	8004634 <HAL_DMA_Init+0x15c>
 8004856:	bf00      	nop
 8004858:	fe10803f 	.word	0xfe10803f
 800485c:	5c001000 	.word	0x5c001000
 8004860:	ffff0000 	.word	0xffff0000
 8004864:	40020010 	.word	0x40020010
 8004868:	40020028 	.word	0x40020028
 800486c:	58025408 	.word	0x58025408
 8004870:	fffe000f 	.word	0xfffe000f
 8004874:	a7fdabf8 	.word	0xa7fdabf8
 8004878:	cccccccd 	.word	0xcccccccd

0800487c <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 800487c:	2800      	cmp	r0, #0
 800487e:	f000 813e 	beq.w	8004afe <HAL_DMA_Start_IT+0x282>
{
 8004882:	b570      	push	{r4, r5, r6, lr}
 8004884:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8004886:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 800488a:	2801      	cmp	r0, #1
 800488c:	f000 8139 	beq.w	8004b02 <HAL_DMA_Start_IT+0x286>
 8004890:	2001      	movs	r0, #1
 8004892:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8004896:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 800489a:	b2c0      	uxtb	r0, r0
 800489c:	2801      	cmp	r0, #1
 800489e:	d007      	beq.n	80048b0 <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80048a0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80048a4:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 80048a6:	2300      	movs	r3, #0
 80048a8:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    status = HAL_ERROR;
 80048ac:	2001      	movs	r0, #1
}
 80048ae:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80048b0:	2002      	movs	r0, #2
 80048b2:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048b6:	2000      	movs	r0, #0
 80048b8:	6560      	str	r0, [r4, #84]	@ 0x54
    __HAL_DMA_DISABLE(hdma);
 80048ba:	6820      	ldr	r0, [r4, #0]
 80048bc:	4e92      	ldr	r6, [pc, #584]	@ (8004b08 <HAL_DMA_Start_IT+0x28c>)
 80048be:	4d93      	ldr	r5, [pc, #588]	@ (8004b0c <HAL_DMA_Start_IT+0x290>)
 80048c0:	42a8      	cmp	r0, r5
 80048c2:	bf18      	it	ne
 80048c4:	42b0      	cmpne	r0, r6
 80048c6:	d02f      	beq.n	8004928 <HAL_DMA_Start_IT+0xac>
 80048c8:	3518      	adds	r5, #24
 80048ca:	42a8      	cmp	r0, r5
 80048cc:	d02c      	beq.n	8004928 <HAL_DMA_Start_IT+0xac>
 80048ce:	3518      	adds	r5, #24
 80048d0:	42a8      	cmp	r0, r5
 80048d2:	d029      	beq.n	8004928 <HAL_DMA_Start_IT+0xac>
 80048d4:	3518      	adds	r5, #24
 80048d6:	42a8      	cmp	r0, r5
 80048d8:	d026      	beq.n	8004928 <HAL_DMA_Start_IT+0xac>
 80048da:	3518      	adds	r5, #24
 80048dc:	42a8      	cmp	r0, r5
 80048de:	d023      	beq.n	8004928 <HAL_DMA_Start_IT+0xac>
 80048e0:	3518      	adds	r5, #24
 80048e2:	42a8      	cmp	r0, r5
 80048e4:	d020      	beq.n	8004928 <HAL_DMA_Start_IT+0xac>
 80048e6:	3518      	adds	r5, #24
 80048e8:	42a8      	cmp	r0, r5
 80048ea:	d01d      	beq.n	8004928 <HAL_DMA_Start_IT+0xac>
 80048ec:	f505 7556 	add.w	r5, r5, #856	@ 0x358
 80048f0:	42a8      	cmp	r0, r5
 80048f2:	d019      	beq.n	8004928 <HAL_DMA_Start_IT+0xac>
 80048f4:	3518      	adds	r5, #24
 80048f6:	42a8      	cmp	r0, r5
 80048f8:	d016      	beq.n	8004928 <HAL_DMA_Start_IT+0xac>
 80048fa:	3518      	adds	r5, #24
 80048fc:	42a8      	cmp	r0, r5
 80048fe:	d013      	beq.n	8004928 <HAL_DMA_Start_IT+0xac>
 8004900:	3518      	adds	r5, #24
 8004902:	42a8      	cmp	r0, r5
 8004904:	d010      	beq.n	8004928 <HAL_DMA_Start_IT+0xac>
 8004906:	3518      	adds	r5, #24
 8004908:	42a8      	cmp	r0, r5
 800490a:	d00d      	beq.n	8004928 <HAL_DMA_Start_IT+0xac>
 800490c:	3518      	adds	r5, #24
 800490e:	42a8      	cmp	r0, r5
 8004910:	d00a      	beq.n	8004928 <HAL_DMA_Start_IT+0xac>
 8004912:	3518      	adds	r5, #24
 8004914:	42a8      	cmp	r0, r5
 8004916:	d007      	beq.n	8004928 <HAL_DMA_Start_IT+0xac>
 8004918:	3518      	adds	r5, #24
 800491a:	42a8      	cmp	r0, r5
 800491c:	d004      	beq.n	8004928 <HAL_DMA_Start_IT+0xac>
 800491e:	6805      	ldr	r5, [r0, #0]
 8004920:	f025 0501 	bic.w	r5, r5, #1
 8004924:	6005      	str	r5, [r0, #0]
 8004926:	e003      	b.n	8004930 <HAL_DMA_Start_IT+0xb4>
 8004928:	6805      	ldr	r5, [r0, #0]
 800492a:	f025 0501 	bic.w	r5, r5, #1
 800492e:	6005      	str	r5, [r0, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004930:	4620      	mov	r0, r4
 8004932:	f7ff fbbf 	bl	80040b4 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004936:	6823      	ldr	r3, [r4, #0]
 8004938:	4973      	ldr	r1, [pc, #460]	@ (8004b08 <HAL_DMA_Start_IT+0x28c>)
 800493a:	4a74      	ldr	r2, [pc, #464]	@ (8004b0c <HAL_DMA_Start_IT+0x290>)
 800493c:	4293      	cmp	r3, r2
 800493e:	bf18      	it	ne
 8004940:	428b      	cmpne	r3, r1
 8004942:	d038      	beq.n	80049b6 <HAL_DMA_Start_IT+0x13a>
 8004944:	3218      	adds	r2, #24
 8004946:	4293      	cmp	r3, r2
 8004948:	d035      	beq.n	80049b6 <HAL_DMA_Start_IT+0x13a>
 800494a:	3218      	adds	r2, #24
 800494c:	4293      	cmp	r3, r2
 800494e:	d032      	beq.n	80049b6 <HAL_DMA_Start_IT+0x13a>
 8004950:	3218      	adds	r2, #24
 8004952:	4293      	cmp	r3, r2
 8004954:	d02f      	beq.n	80049b6 <HAL_DMA_Start_IT+0x13a>
 8004956:	3218      	adds	r2, #24
 8004958:	4293      	cmp	r3, r2
 800495a:	d02c      	beq.n	80049b6 <HAL_DMA_Start_IT+0x13a>
 800495c:	3218      	adds	r2, #24
 800495e:	4293      	cmp	r3, r2
 8004960:	d029      	beq.n	80049b6 <HAL_DMA_Start_IT+0x13a>
 8004962:	3218      	adds	r2, #24
 8004964:	4293      	cmp	r3, r2
 8004966:	d026      	beq.n	80049b6 <HAL_DMA_Start_IT+0x13a>
 8004968:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 800496c:	4293      	cmp	r3, r2
 800496e:	d022      	beq.n	80049b6 <HAL_DMA_Start_IT+0x13a>
 8004970:	3218      	adds	r2, #24
 8004972:	4293      	cmp	r3, r2
 8004974:	d01f      	beq.n	80049b6 <HAL_DMA_Start_IT+0x13a>
 8004976:	3218      	adds	r2, #24
 8004978:	4293      	cmp	r3, r2
 800497a:	d01c      	beq.n	80049b6 <HAL_DMA_Start_IT+0x13a>
 800497c:	3218      	adds	r2, #24
 800497e:	4293      	cmp	r3, r2
 8004980:	d019      	beq.n	80049b6 <HAL_DMA_Start_IT+0x13a>
 8004982:	3218      	adds	r2, #24
 8004984:	4293      	cmp	r3, r2
 8004986:	d016      	beq.n	80049b6 <HAL_DMA_Start_IT+0x13a>
 8004988:	3218      	adds	r2, #24
 800498a:	4293      	cmp	r3, r2
 800498c:	d013      	beq.n	80049b6 <HAL_DMA_Start_IT+0x13a>
 800498e:	3218      	adds	r2, #24
 8004990:	4293      	cmp	r3, r2
 8004992:	d010      	beq.n	80049b6 <HAL_DMA_Start_IT+0x13a>
 8004994:	3218      	adds	r2, #24
 8004996:	4293      	cmp	r3, r2
 8004998:	d00d      	beq.n	80049b6 <HAL_DMA_Start_IT+0x13a>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	f022 020e 	bic.w	r2, r2, #14
 80049a0:	f042 020a 	orr.w	r2, r2, #10
 80049a4:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80049a6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80049a8:	b193      	cbz	r3, 80049d0 <HAL_DMA_Start_IT+0x154>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80049aa:	6822      	ldr	r2, [r4, #0]
 80049ac:	6813      	ldr	r3, [r2, #0]
 80049ae:	f043 0304 	orr.w	r3, r3, #4
 80049b2:	6013      	str	r3, [r2, #0]
 80049b4:	e00c      	b.n	80049d0 <HAL_DMA_Start_IT+0x154>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	f022 021e 	bic.w	r2, r2, #30
 80049bc:	f042 0216 	orr.w	r2, r2, #22
 80049c0:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80049c2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80049c4:	b123      	cbz	r3, 80049d0 <HAL_DMA_Start_IT+0x154>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80049c6:	6822      	ldr	r2, [r4, #0]
 80049c8:	6813      	ldr	r3, [r2, #0]
 80049ca:	f043 0308 	orr.w	r3, r3, #8
 80049ce:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80049d0:	6823      	ldr	r3, [r4, #0]
 80049d2:	494d      	ldr	r1, [pc, #308]	@ (8004b08 <HAL_DMA_Start_IT+0x28c>)
 80049d4:	4a4d      	ldr	r2, [pc, #308]	@ (8004b0c <HAL_DMA_Start_IT+0x290>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	bf18      	it	ne
 80049da:	428b      	cmpne	r3, r1
 80049dc:	d042      	beq.n	8004a64 <HAL_DMA_Start_IT+0x1e8>
 80049de:	3218      	adds	r2, #24
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d03f      	beq.n	8004a64 <HAL_DMA_Start_IT+0x1e8>
 80049e4:	3218      	adds	r2, #24
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d03c      	beq.n	8004a64 <HAL_DMA_Start_IT+0x1e8>
 80049ea:	3218      	adds	r2, #24
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d039      	beq.n	8004a64 <HAL_DMA_Start_IT+0x1e8>
 80049f0:	3218      	adds	r2, #24
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d036      	beq.n	8004a64 <HAL_DMA_Start_IT+0x1e8>
 80049f6:	3218      	adds	r2, #24
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d033      	beq.n	8004a64 <HAL_DMA_Start_IT+0x1e8>
 80049fc:	3218      	adds	r2, #24
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d030      	beq.n	8004a64 <HAL_DMA_Start_IT+0x1e8>
 8004a02:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d02c      	beq.n	8004a64 <HAL_DMA_Start_IT+0x1e8>
 8004a0a:	3218      	adds	r2, #24
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d029      	beq.n	8004a64 <HAL_DMA_Start_IT+0x1e8>
 8004a10:	3218      	adds	r2, #24
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d026      	beq.n	8004a64 <HAL_DMA_Start_IT+0x1e8>
 8004a16:	3218      	adds	r2, #24
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d023      	beq.n	8004a64 <HAL_DMA_Start_IT+0x1e8>
 8004a1c:	3218      	adds	r2, #24
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d020      	beq.n	8004a64 <HAL_DMA_Start_IT+0x1e8>
 8004a22:	3218      	adds	r2, #24
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d01d      	beq.n	8004a64 <HAL_DMA_Start_IT+0x1e8>
 8004a28:	3218      	adds	r2, #24
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d01a      	beq.n	8004a64 <HAL_DMA_Start_IT+0x1e8>
 8004a2e:	3218      	adds	r2, #24
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d017      	beq.n	8004a64 <HAL_DMA_Start_IT+0x1e8>
 8004a34:	4a36      	ldr	r2, [pc, #216]	@ (8004b10 <HAL_DMA_Start_IT+0x294>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d014      	beq.n	8004a64 <HAL_DMA_Start_IT+0x1e8>
 8004a3a:	3214      	adds	r2, #20
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d011      	beq.n	8004a64 <HAL_DMA_Start_IT+0x1e8>
 8004a40:	3214      	adds	r2, #20
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d00e      	beq.n	8004a64 <HAL_DMA_Start_IT+0x1e8>
 8004a46:	3214      	adds	r2, #20
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d00b      	beq.n	8004a64 <HAL_DMA_Start_IT+0x1e8>
 8004a4c:	3214      	adds	r2, #20
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d008      	beq.n	8004a64 <HAL_DMA_Start_IT+0x1e8>
 8004a52:	3214      	adds	r2, #20
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d005      	beq.n	8004a64 <HAL_DMA_Start_IT+0x1e8>
 8004a58:	3214      	adds	r2, #20
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d002      	beq.n	8004a64 <HAL_DMA_Start_IT+0x1e8>
 8004a5e:	3214      	adds	r2, #20
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d10e      	bne.n	8004a82 <HAL_DMA_Start_IT+0x206>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004a64:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 8004a6c:	d003      	beq.n	8004a76 <HAL_DMA_Start_IT+0x1fa>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a74:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 8004a76:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8004a78:	b11b      	cbz	r3, 8004a82 <HAL_DMA_Start_IT+0x206>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a80:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8004a82:	6823      	ldr	r3, [r4, #0]
 8004a84:	4920      	ldr	r1, [pc, #128]	@ (8004b08 <HAL_DMA_Start_IT+0x28c>)
 8004a86:	4a21      	ldr	r2, [pc, #132]	@ (8004b0c <HAL_DMA_Start_IT+0x290>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	bf18      	it	ne
 8004a8c:	428b      	cmpne	r3, r1
 8004a8e:	d030      	beq.n	8004af2 <HAL_DMA_Start_IT+0x276>
 8004a90:	3218      	adds	r2, #24
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d02d      	beq.n	8004af2 <HAL_DMA_Start_IT+0x276>
 8004a96:	3218      	adds	r2, #24
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d02a      	beq.n	8004af2 <HAL_DMA_Start_IT+0x276>
 8004a9c:	3218      	adds	r2, #24
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d027      	beq.n	8004af2 <HAL_DMA_Start_IT+0x276>
 8004aa2:	3218      	adds	r2, #24
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d024      	beq.n	8004af2 <HAL_DMA_Start_IT+0x276>
 8004aa8:	3218      	adds	r2, #24
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d021      	beq.n	8004af2 <HAL_DMA_Start_IT+0x276>
 8004aae:	3218      	adds	r2, #24
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d01e      	beq.n	8004af2 <HAL_DMA_Start_IT+0x276>
 8004ab4:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d01a      	beq.n	8004af2 <HAL_DMA_Start_IT+0x276>
 8004abc:	3218      	adds	r2, #24
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d017      	beq.n	8004af2 <HAL_DMA_Start_IT+0x276>
 8004ac2:	3218      	adds	r2, #24
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d014      	beq.n	8004af2 <HAL_DMA_Start_IT+0x276>
 8004ac8:	3218      	adds	r2, #24
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d011      	beq.n	8004af2 <HAL_DMA_Start_IT+0x276>
 8004ace:	3218      	adds	r2, #24
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d00e      	beq.n	8004af2 <HAL_DMA_Start_IT+0x276>
 8004ad4:	3218      	adds	r2, #24
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d00b      	beq.n	8004af2 <HAL_DMA_Start_IT+0x276>
 8004ada:	3218      	adds	r2, #24
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d008      	beq.n	8004af2 <HAL_DMA_Start_IT+0x276>
 8004ae0:	3218      	adds	r2, #24
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d005      	beq.n	8004af2 <HAL_DMA_Start_IT+0x276>
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	f042 0201 	orr.w	r2, r2, #1
 8004aec:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004aee:	2000      	movs	r0, #0
 8004af0:	e6dd      	b.n	80048ae <HAL_DMA_Start_IT+0x32>
    __HAL_DMA_ENABLE(hdma);
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	f042 0201 	orr.w	r2, r2, #1
 8004af8:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004afa:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8004afc:	e6d7      	b.n	80048ae <HAL_DMA_Start_IT+0x32>
    return HAL_ERROR;
 8004afe:	2001      	movs	r0, #1
}
 8004b00:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8004b02:	2002      	movs	r0, #2
 8004b04:	e6d3      	b.n	80048ae <HAL_DMA_Start_IT+0x32>
 8004b06:	bf00      	nop
 8004b08:	40020010 	.word	0x40020010
 8004b0c:	40020028 	.word	0x40020028
 8004b10:	58025408 	.word	0x58025408

08004b14 <HAL_DMA_Abort>:
{
 8004b14:	b570      	push	{r4, r5, r6, lr}
 8004b16:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004b18:	f7fe fcb0 	bl	800347c <HAL_GetTick>
  if(hdma == NULL)
 8004b1c:	2c00      	cmp	r4, #0
 8004b1e:	f000 8191 	beq.w	8004e44 <HAL_DMA_Abort+0x330>
 8004b22:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b24:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d006      	beq.n	8004b3c <HAL_DMA_Abort+0x28>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b2e:	2380      	movs	r3, #128	@ 0x80
 8004b30:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8004b32:	2300      	movs	r3, #0
 8004b34:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8004b38:	2001      	movs	r0, #1
}
 8004b3a:	bd70      	pop	{r4, r5, r6, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b3c:	6823      	ldr	r3, [r4, #0]
 8004b3e:	498c      	ldr	r1, [pc, #560]	@ (8004d70 <HAL_DMA_Abort+0x25c>)
 8004b40:	4a8c      	ldr	r2, [pc, #560]	@ (8004d74 <HAL_DMA_Abort+0x260>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	bf18      	it	ne
 8004b46:	428b      	cmpne	r3, r1
 8004b48:	d030      	beq.n	8004bac <HAL_DMA_Abort+0x98>
 8004b4a:	3218      	adds	r2, #24
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d02d      	beq.n	8004bac <HAL_DMA_Abort+0x98>
 8004b50:	3218      	adds	r2, #24
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d02a      	beq.n	8004bac <HAL_DMA_Abort+0x98>
 8004b56:	3218      	adds	r2, #24
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d027      	beq.n	8004bac <HAL_DMA_Abort+0x98>
 8004b5c:	3218      	adds	r2, #24
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d024      	beq.n	8004bac <HAL_DMA_Abort+0x98>
 8004b62:	3218      	adds	r2, #24
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d021      	beq.n	8004bac <HAL_DMA_Abort+0x98>
 8004b68:	3218      	adds	r2, #24
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d01e      	beq.n	8004bac <HAL_DMA_Abort+0x98>
 8004b6e:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d01a      	beq.n	8004bac <HAL_DMA_Abort+0x98>
 8004b76:	3218      	adds	r2, #24
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d017      	beq.n	8004bac <HAL_DMA_Abort+0x98>
 8004b7c:	3218      	adds	r2, #24
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d014      	beq.n	8004bac <HAL_DMA_Abort+0x98>
 8004b82:	3218      	adds	r2, #24
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d011      	beq.n	8004bac <HAL_DMA_Abort+0x98>
 8004b88:	3218      	adds	r2, #24
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d00e      	beq.n	8004bac <HAL_DMA_Abort+0x98>
 8004b8e:	3218      	adds	r2, #24
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d00b      	beq.n	8004bac <HAL_DMA_Abort+0x98>
 8004b94:	3218      	adds	r2, #24
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d008      	beq.n	8004bac <HAL_DMA_Abort+0x98>
 8004b9a:	3218      	adds	r2, #24
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d005      	beq.n	8004bac <HAL_DMA_Abort+0x98>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	f022 020e 	bic.w	r2, r2, #14
 8004ba6:	601a      	str	r2, [r3, #0]
      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004ba8:	6826      	ldr	r6, [r4, #0]
 8004baa:	e009      	b.n	8004bc0 <HAL_DMA_Abort+0xac>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	f022 021e 	bic.w	r2, r2, #30
 8004bb2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004bb4:	6822      	ldr	r2, [r4, #0]
 8004bb6:	6953      	ldr	r3, [r2, #20]
 8004bb8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bbc:	6153      	str	r3, [r2, #20]
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004bbe:	6826      	ldr	r6, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004bc0:	6823      	ldr	r3, [r4, #0]
 8004bc2:	496b      	ldr	r1, [pc, #428]	@ (8004d70 <HAL_DMA_Abort+0x25c>)
 8004bc4:	4a6b      	ldr	r2, [pc, #428]	@ (8004d74 <HAL_DMA_Abort+0x260>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	bf18      	it	ne
 8004bca:	428b      	cmpne	r3, r1
 8004bcc:	d042      	beq.n	8004c54 <HAL_DMA_Abort+0x140>
 8004bce:	3218      	adds	r2, #24
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d03f      	beq.n	8004c54 <HAL_DMA_Abort+0x140>
 8004bd4:	3218      	adds	r2, #24
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d03c      	beq.n	8004c54 <HAL_DMA_Abort+0x140>
 8004bda:	3218      	adds	r2, #24
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d039      	beq.n	8004c54 <HAL_DMA_Abort+0x140>
 8004be0:	3218      	adds	r2, #24
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d036      	beq.n	8004c54 <HAL_DMA_Abort+0x140>
 8004be6:	3218      	adds	r2, #24
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d033      	beq.n	8004c54 <HAL_DMA_Abort+0x140>
 8004bec:	3218      	adds	r2, #24
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d030      	beq.n	8004c54 <HAL_DMA_Abort+0x140>
 8004bf2:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d02c      	beq.n	8004c54 <HAL_DMA_Abort+0x140>
 8004bfa:	3218      	adds	r2, #24
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d029      	beq.n	8004c54 <HAL_DMA_Abort+0x140>
 8004c00:	3218      	adds	r2, #24
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d026      	beq.n	8004c54 <HAL_DMA_Abort+0x140>
 8004c06:	3218      	adds	r2, #24
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d023      	beq.n	8004c54 <HAL_DMA_Abort+0x140>
 8004c0c:	3218      	adds	r2, #24
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d020      	beq.n	8004c54 <HAL_DMA_Abort+0x140>
 8004c12:	3218      	adds	r2, #24
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d01d      	beq.n	8004c54 <HAL_DMA_Abort+0x140>
 8004c18:	3218      	adds	r2, #24
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d01a      	beq.n	8004c54 <HAL_DMA_Abort+0x140>
 8004c1e:	3218      	adds	r2, #24
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d017      	beq.n	8004c54 <HAL_DMA_Abort+0x140>
 8004c24:	4a54      	ldr	r2, [pc, #336]	@ (8004d78 <HAL_DMA_Abort+0x264>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d014      	beq.n	8004c54 <HAL_DMA_Abort+0x140>
 8004c2a:	3214      	adds	r2, #20
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d011      	beq.n	8004c54 <HAL_DMA_Abort+0x140>
 8004c30:	3214      	adds	r2, #20
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d00e      	beq.n	8004c54 <HAL_DMA_Abort+0x140>
 8004c36:	3214      	adds	r2, #20
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d00b      	beq.n	8004c54 <HAL_DMA_Abort+0x140>
 8004c3c:	3214      	adds	r2, #20
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d008      	beq.n	8004c54 <HAL_DMA_Abort+0x140>
 8004c42:	3214      	adds	r2, #20
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d005      	beq.n	8004c54 <HAL_DMA_Abort+0x140>
 8004c48:	3214      	adds	r2, #20
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d002      	beq.n	8004c54 <HAL_DMA_Abort+0x140>
 8004c4e:	3214      	adds	r2, #20
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d104      	bne.n	8004c5e <HAL_DMA_Abort+0x14a>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004c54:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8004c56:	6813      	ldr	r3, [r2, #0]
 8004c58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c5c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8004c5e:	6823      	ldr	r3, [r4, #0]
 8004c60:	4943      	ldr	r1, [pc, #268]	@ (8004d70 <HAL_DMA_Abort+0x25c>)
 8004c62:	4a44      	ldr	r2, [pc, #272]	@ (8004d74 <HAL_DMA_Abort+0x260>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	bf18      	it	ne
 8004c68:	428b      	cmpne	r3, r1
 8004c6a:	d02f      	beq.n	8004ccc <HAL_DMA_Abort+0x1b8>
 8004c6c:	3218      	adds	r2, #24
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d02c      	beq.n	8004ccc <HAL_DMA_Abort+0x1b8>
 8004c72:	3218      	adds	r2, #24
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d029      	beq.n	8004ccc <HAL_DMA_Abort+0x1b8>
 8004c78:	3218      	adds	r2, #24
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d026      	beq.n	8004ccc <HAL_DMA_Abort+0x1b8>
 8004c7e:	3218      	adds	r2, #24
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d023      	beq.n	8004ccc <HAL_DMA_Abort+0x1b8>
 8004c84:	3218      	adds	r2, #24
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d020      	beq.n	8004ccc <HAL_DMA_Abort+0x1b8>
 8004c8a:	3218      	adds	r2, #24
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d01d      	beq.n	8004ccc <HAL_DMA_Abort+0x1b8>
 8004c90:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d019      	beq.n	8004ccc <HAL_DMA_Abort+0x1b8>
 8004c98:	3218      	adds	r2, #24
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d016      	beq.n	8004ccc <HAL_DMA_Abort+0x1b8>
 8004c9e:	3218      	adds	r2, #24
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d013      	beq.n	8004ccc <HAL_DMA_Abort+0x1b8>
 8004ca4:	3218      	adds	r2, #24
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d010      	beq.n	8004ccc <HAL_DMA_Abort+0x1b8>
 8004caa:	3218      	adds	r2, #24
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d00d      	beq.n	8004ccc <HAL_DMA_Abort+0x1b8>
 8004cb0:	3218      	adds	r2, #24
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d00a      	beq.n	8004ccc <HAL_DMA_Abort+0x1b8>
 8004cb6:	3218      	adds	r2, #24
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d007      	beq.n	8004ccc <HAL_DMA_Abort+0x1b8>
 8004cbc:	3218      	adds	r2, #24
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d004      	beq.n	8004ccc <HAL_DMA_Abort+0x1b8>
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	f022 0201 	bic.w	r2, r2, #1
 8004cc8:	601a      	str	r2, [r3, #0]
 8004cca:	e003      	b.n	8004cd4 <HAL_DMA_Abort+0x1c0>
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	f022 0201 	bic.w	r2, r2, #1
 8004cd2:	601a      	str	r2, [r3, #0]
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004cd4:	6833      	ldr	r3, [r6, #0]
 8004cd6:	f013 0f01 	tst.w	r3, #1
 8004cda:	d00e      	beq.n	8004cfa <HAL_DMA_Abort+0x1e6>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004cdc:	f7fe fbce 	bl	800347c <HAL_GetTick>
 8004ce0:	1b43      	subs	r3, r0, r5
 8004ce2:	2b05      	cmp	r3, #5
 8004ce4:	d9f6      	bls.n	8004cd4 <HAL_DMA_Abort+0x1c0>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ce6:	2320      	movs	r3, #32
 8004ce8:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8004cea:	2303      	movs	r3, #3
 8004cec:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        return HAL_ERROR;
 8004cf6:	2001      	movs	r0, #1
 8004cf8:	e71f      	b.n	8004b3a <HAL_DMA_Abort+0x26>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004cfa:	6823      	ldr	r3, [r4, #0]
 8004cfc:	491c      	ldr	r1, [pc, #112]	@ (8004d70 <HAL_DMA_Abort+0x25c>)
 8004cfe:	4a1d      	ldr	r2, [pc, #116]	@ (8004d74 <HAL_DMA_Abort+0x260>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	bf18      	it	ne
 8004d04:	428b      	cmpne	r3, r1
 8004d06:	d039      	beq.n	8004d7c <HAL_DMA_Abort+0x268>
 8004d08:	3218      	adds	r2, #24
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d036      	beq.n	8004d7c <HAL_DMA_Abort+0x268>
 8004d0e:	3218      	adds	r2, #24
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d033      	beq.n	8004d7c <HAL_DMA_Abort+0x268>
 8004d14:	3218      	adds	r2, #24
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d030      	beq.n	8004d7c <HAL_DMA_Abort+0x268>
 8004d1a:	3218      	adds	r2, #24
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d02d      	beq.n	8004d7c <HAL_DMA_Abort+0x268>
 8004d20:	3218      	adds	r2, #24
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d02a      	beq.n	8004d7c <HAL_DMA_Abort+0x268>
 8004d26:	3218      	adds	r2, #24
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d027      	beq.n	8004d7c <HAL_DMA_Abort+0x268>
 8004d2c:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d023      	beq.n	8004d7c <HAL_DMA_Abort+0x268>
 8004d34:	3218      	adds	r2, #24
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d020      	beq.n	8004d7c <HAL_DMA_Abort+0x268>
 8004d3a:	3218      	adds	r2, #24
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d01d      	beq.n	8004d7c <HAL_DMA_Abort+0x268>
 8004d40:	3218      	adds	r2, #24
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d01a      	beq.n	8004d7c <HAL_DMA_Abort+0x268>
 8004d46:	3218      	adds	r2, #24
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d017      	beq.n	8004d7c <HAL_DMA_Abort+0x268>
 8004d4c:	3218      	adds	r2, #24
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d014      	beq.n	8004d7c <HAL_DMA_Abort+0x268>
 8004d52:	3218      	adds	r2, #24
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d011      	beq.n	8004d7c <HAL_DMA_Abort+0x268>
 8004d58:	3218      	adds	r2, #24
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d00e      	beq.n	8004d7c <HAL_DMA_Abort+0x268>
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d5e:	6da1      	ldr	r1, [r4, #88]	@ 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004d60:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004d62:	f003 021f 	and.w	r2, r3, #31
 8004d66:	2301      	movs	r3, #1
 8004d68:	4093      	lsls	r3, r2
 8004d6a:	604b      	str	r3, [r1, #4]
 8004d6c:	e00d      	b.n	8004d8a <HAL_DMA_Abort+0x276>
 8004d6e:	bf00      	nop
 8004d70:	40020010 	.word	0x40020010
 8004d74:	40020028 	.word	0x40020028
 8004d78:	58025408 	.word	0x58025408
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d7c:	6da1      	ldr	r1, [r4, #88]	@ 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d7e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004d80:	f003 021f 	and.w	r2, r3, #31
 8004d84:	233f      	movs	r3, #63	@ 0x3f
 8004d86:	4093      	lsls	r3, r2
 8004d88:	608b      	str	r3, [r1, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d8a:	6823      	ldr	r3, [r4, #0]
 8004d8c:	492e      	ldr	r1, [pc, #184]	@ (8004e48 <HAL_DMA_Abort+0x334>)
 8004d8e:	4a2f      	ldr	r2, [pc, #188]	@ (8004e4c <HAL_DMA_Abort+0x338>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	bf18      	it	ne
 8004d94:	428b      	cmpne	r3, r1
 8004d96:	d042      	beq.n	8004e1e <HAL_DMA_Abort+0x30a>
 8004d98:	3218      	adds	r2, #24
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d03f      	beq.n	8004e1e <HAL_DMA_Abort+0x30a>
 8004d9e:	3218      	adds	r2, #24
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d03c      	beq.n	8004e1e <HAL_DMA_Abort+0x30a>
 8004da4:	3218      	adds	r2, #24
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d039      	beq.n	8004e1e <HAL_DMA_Abort+0x30a>
 8004daa:	3218      	adds	r2, #24
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d036      	beq.n	8004e1e <HAL_DMA_Abort+0x30a>
 8004db0:	3218      	adds	r2, #24
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d033      	beq.n	8004e1e <HAL_DMA_Abort+0x30a>
 8004db6:	3218      	adds	r2, #24
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d030      	beq.n	8004e1e <HAL_DMA_Abort+0x30a>
 8004dbc:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d02c      	beq.n	8004e1e <HAL_DMA_Abort+0x30a>
 8004dc4:	3218      	adds	r2, #24
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d029      	beq.n	8004e1e <HAL_DMA_Abort+0x30a>
 8004dca:	3218      	adds	r2, #24
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d026      	beq.n	8004e1e <HAL_DMA_Abort+0x30a>
 8004dd0:	3218      	adds	r2, #24
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d023      	beq.n	8004e1e <HAL_DMA_Abort+0x30a>
 8004dd6:	3218      	adds	r2, #24
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d020      	beq.n	8004e1e <HAL_DMA_Abort+0x30a>
 8004ddc:	3218      	adds	r2, #24
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d01d      	beq.n	8004e1e <HAL_DMA_Abort+0x30a>
 8004de2:	3218      	adds	r2, #24
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d01a      	beq.n	8004e1e <HAL_DMA_Abort+0x30a>
 8004de8:	3218      	adds	r2, #24
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d017      	beq.n	8004e1e <HAL_DMA_Abort+0x30a>
 8004dee:	4a18      	ldr	r2, [pc, #96]	@ (8004e50 <HAL_DMA_Abort+0x33c>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d014      	beq.n	8004e1e <HAL_DMA_Abort+0x30a>
 8004df4:	3214      	adds	r2, #20
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d011      	beq.n	8004e1e <HAL_DMA_Abort+0x30a>
 8004dfa:	3214      	adds	r2, #20
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d00e      	beq.n	8004e1e <HAL_DMA_Abort+0x30a>
 8004e00:	3214      	adds	r2, #20
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d00b      	beq.n	8004e1e <HAL_DMA_Abort+0x30a>
 8004e06:	3214      	adds	r2, #20
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d008      	beq.n	8004e1e <HAL_DMA_Abort+0x30a>
 8004e0c:	3214      	adds	r2, #20
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d005      	beq.n	8004e1e <HAL_DMA_Abort+0x30a>
 8004e12:	3214      	adds	r2, #20
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d002      	beq.n	8004e1e <HAL_DMA_Abort+0x30a>
 8004e18:	3214      	adds	r2, #20
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d10b      	bne.n	8004e36 <HAL_DMA_Abort+0x322>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004e20:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 8004e22:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8004e24:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8004e26:	b133      	cbz	r3, 8004e36 <HAL_DMA_Abort+0x322>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e2e:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e30:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8004e32:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 8004e34:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8004e36:	2301      	movs	r3, #1
 8004e38:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8004e3c:	2000      	movs	r0, #0
 8004e3e:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  return HAL_OK;
 8004e42:	e67a      	b.n	8004b3a <HAL_DMA_Abort+0x26>
    return HAL_ERROR;
 8004e44:	2001      	movs	r0, #1
 8004e46:	e678      	b.n	8004b3a <HAL_DMA_Abort+0x26>
 8004e48:	40020010 	.word	0x40020010
 8004e4c:	40020028 	.word	0x40020028
 8004e50:	58025408 	.word	0x58025408

08004e54 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8004e54:	2800      	cmp	r0, #0
 8004e56:	f000 8128 	beq.w	80050aa <HAL_DMA_Abort_IT+0x256>
{
 8004e5a:	b508      	push	{r3, lr}
 8004e5c:	4602      	mov	r2, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e5e:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d003      	beq.n	8004e70 <HAL_DMA_Abort_IT+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e68:	2380      	movs	r3, #128	@ 0x80
 8004e6a:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8004e6c:	2001      	movs	r0, #1
}
 8004e6e:	bd08      	pop	{r3, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e70:	6803      	ldr	r3, [r0, #0]
 8004e72:	4890      	ldr	r0, [pc, #576]	@ (80050b4 <HAL_DMA_Abort_IT+0x260>)
 8004e74:	4990      	ldr	r1, [pc, #576]	@ (80050b8 <HAL_DMA_Abort_IT+0x264>)
 8004e76:	428b      	cmp	r3, r1
 8004e78:	bf18      	it	ne
 8004e7a:	4283      	cmpne	r3, r0
 8004e7c:	bf0c      	ite	eq
 8004e7e:	2001      	moveq	r0, #1
 8004e80:	2000      	movne	r0, #0
 8004e82:	d065      	beq.n	8004f50 <HAL_DMA_Abort_IT+0xfc>
 8004e84:	3118      	adds	r1, #24
 8004e86:	428b      	cmp	r3, r1
 8004e88:	d062      	beq.n	8004f50 <HAL_DMA_Abort_IT+0xfc>
 8004e8a:	3118      	adds	r1, #24
 8004e8c:	428b      	cmp	r3, r1
 8004e8e:	d05f      	beq.n	8004f50 <HAL_DMA_Abort_IT+0xfc>
 8004e90:	3118      	adds	r1, #24
 8004e92:	428b      	cmp	r3, r1
 8004e94:	d05c      	beq.n	8004f50 <HAL_DMA_Abort_IT+0xfc>
 8004e96:	3118      	adds	r1, #24
 8004e98:	428b      	cmp	r3, r1
 8004e9a:	d059      	beq.n	8004f50 <HAL_DMA_Abort_IT+0xfc>
 8004e9c:	3118      	adds	r1, #24
 8004e9e:	428b      	cmp	r3, r1
 8004ea0:	d056      	beq.n	8004f50 <HAL_DMA_Abort_IT+0xfc>
 8004ea2:	3118      	adds	r1, #24
 8004ea4:	428b      	cmp	r3, r1
 8004ea6:	d053      	beq.n	8004f50 <HAL_DMA_Abort_IT+0xfc>
 8004ea8:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8004eac:	428b      	cmp	r3, r1
 8004eae:	d04f      	beq.n	8004f50 <HAL_DMA_Abort_IT+0xfc>
 8004eb0:	3118      	adds	r1, #24
 8004eb2:	428b      	cmp	r3, r1
 8004eb4:	d04c      	beq.n	8004f50 <HAL_DMA_Abort_IT+0xfc>
 8004eb6:	3118      	adds	r1, #24
 8004eb8:	428b      	cmp	r3, r1
 8004eba:	d049      	beq.n	8004f50 <HAL_DMA_Abort_IT+0xfc>
 8004ebc:	3118      	adds	r1, #24
 8004ebe:	428b      	cmp	r3, r1
 8004ec0:	d046      	beq.n	8004f50 <HAL_DMA_Abort_IT+0xfc>
 8004ec2:	3118      	adds	r1, #24
 8004ec4:	428b      	cmp	r3, r1
 8004ec6:	d043      	beq.n	8004f50 <HAL_DMA_Abort_IT+0xfc>
 8004ec8:	3118      	adds	r1, #24
 8004eca:	428b      	cmp	r3, r1
 8004ecc:	d040      	beq.n	8004f50 <HAL_DMA_Abort_IT+0xfc>
 8004ece:	3118      	adds	r1, #24
 8004ed0:	428b      	cmp	r3, r1
 8004ed2:	d03d      	beq.n	8004f50 <HAL_DMA_Abort_IT+0xfc>
 8004ed4:	3118      	adds	r1, #24
 8004ed6:	428b      	cmp	r3, r1
 8004ed8:	d03a      	beq.n	8004f50 <HAL_DMA_Abort_IT+0xfc>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004eda:	6819      	ldr	r1, [r3, #0]
 8004edc:	f021 010e 	bic.w	r1, r1, #14
 8004ee0:	6019      	str	r1, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 8004ee2:	6813      	ldr	r3, [r2, #0]
 8004ee4:	4873      	ldr	r0, [pc, #460]	@ (80050b4 <HAL_DMA_Abort_IT+0x260>)
 8004ee6:	4974      	ldr	r1, [pc, #464]	@ (80050b8 <HAL_DMA_Abort_IT+0x264>)
 8004ee8:	428b      	cmp	r3, r1
 8004eea:	bf18      	it	ne
 8004eec:	4283      	cmpne	r3, r0
 8004eee:	d06a      	beq.n	8004fc6 <HAL_DMA_Abort_IT+0x172>
 8004ef0:	4972      	ldr	r1, [pc, #456]	@ (80050bc <HAL_DMA_Abort_IT+0x268>)
 8004ef2:	428b      	cmp	r3, r1
 8004ef4:	d067      	beq.n	8004fc6 <HAL_DMA_Abort_IT+0x172>
 8004ef6:	3118      	adds	r1, #24
 8004ef8:	428b      	cmp	r3, r1
 8004efa:	d064      	beq.n	8004fc6 <HAL_DMA_Abort_IT+0x172>
 8004efc:	3118      	adds	r1, #24
 8004efe:	428b      	cmp	r3, r1
 8004f00:	d061      	beq.n	8004fc6 <HAL_DMA_Abort_IT+0x172>
 8004f02:	3118      	adds	r1, #24
 8004f04:	428b      	cmp	r3, r1
 8004f06:	d05e      	beq.n	8004fc6 <HAL_DMA_Abort_IT+0x172>
 8004f08:	3118      	adds	r1, #24
 8004f0a:	428b      	cmp	r3, r1
 8004f0c:	d05b      	beq.n	8004fc6 <HAL_DMA_Abort_IT+0x172>
 8004f0e:	3118      	adds	r1, #24
 8004f10:	428b      	cmp	r3, r1
 8004f12:	d058      	beq.n	8004fc6 <HAL_DMA_Abort_IT+0x172>
 8004f14:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8004f18:	428b      	cmp	r3, r1
 8004f1a:	d054      	beq.n	8004fc6 <HAL_DMA_Abort_IT+0x172>
 8004f1c:	3118      	adds	r1, #24
 8004f1e:	428b      	cmp	r3, r1
 8004f20:	d051      	beq.n	8004fc6 <HAL_DMA_Abort_IT+0x172>
 8004f22:	3118      	adds	r1, #24
 8004f24:	428b      	cmp	r3, r1
 8004f26:	d04e      	beq.n	8004fc6 <HAL_DMA_Abort_IT+0x172>
 8004f28:	3118      	adds	r1, #24
 8004f2a:	428b      	cmp	r3, r1
 8004f2c:	d04b      	beq.n	8004fc6 <HAL_DMA_Abort_IT+0x172>
 8004f2e:	3118      	adds	r1, #24
 8004f30:	428b      	cmp	r3, r1
 8004f32:	d048      	beq.n	8004fc6 <HAL_DMA_Abort_IT+0x172>
 8004f34:	3118      	adds	r1, #24
 8004f36:	428b      	cmp	r3, r1
 8004f38:	d045      	beq.n	8004fc6 <HAL_DMA_Abort_IT+0x172>
 8004f3a:	3118      	adds	r1, #24
 8004f3c:	428b      	cmp	r3, r1
 8004f3e:	d042      	beq.n	8004fc6 <HAL_DMA_Abort_IT+0x172>
 8004f40:	3118      	adds	r1, #24
 8004f42:	428b      	cmp	r3, r1
 8004f44:	d03f      	beq.n	8004fc6 <HAL_DMA_Abort_IT+0x172>
 8004f46:	6819      	ldr	r1, [r3, #0]
 8004f48:	f021 0101 	bic.w	r1, r1, #1
 8004f4c:	6019      	str	r1, [r3, #0]
 8004f4e:	e03e      	b.n	8004fce <HAL_DMA_Abort_IT+0x17a>
      hdma->State = HAL_DMA_STATE_ABORT;
 8004f50:	2104      	movs	r1, #4
 8004f52:	f882 1035 	strb.w	r1, [r2, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8004f56:	bb80      	cbnz	r0, 8004fba <HAL_DMA_Abort_IT+0x166>
 8004f58:	4a58      	ldr	r2, [pc, #352]	@ (80050bc <HAL_DMA_Abort_IT+0x268>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d02d      	beq.n	8004fba <HAL_DMA_Abort_IT+0x166>
 8004f5e:	3218      	adds	r2, #24
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d02a      	beq.n	8004fba <HAL_DMA_Abort_IT+0x166>
 8004f64:	3218      	adds	r2, #24
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d027      	beq.n	8004fba <HAL_DMA_Abort_IT+0x166>
 8004f6a:	3218      	adds	r2, #24
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d024      	beq.n	8004fba <HAL_DMA_Abort_IT+0x166>
 8004f70:	3218      	adds	r2, #24
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d021      	beq.n	8004fba <HAL_DMA_Abort_IT+0x166>
 8004f76:	3218      	adds	r2, #24
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d01e      	beq.n	8004fba <HAL_DMA_Abort_IT+0x166>
 8004f7c:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d01a      	beq.n	8004fba <HAL_DMA_Abort_IT+0x166>
 8004f84:	3218      	adds	r2, #24
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d017      	beq.n	8004fba <HAL_DMA_Abort_IT+0x166>
 8004f8a:	3218      	adds	r2, #24
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d014      	beq.n	8004fba <HAL_DMA_Abort_IT+0x166>
 8004f90:	3218      	adds	r2, #24
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d011      	beq.n	8004fba <HAL_DMA_Abort_IT+0x166>
 8004f96:	3218      	adds	r2, #24
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d00e      	beq.n	8004fba <HAL_DMA_Abort_IT+0x166>
 8004f9c:	3218      	adds	r2, #24
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d00b      	beq.n	8004fba <HAL_DMA_Abort_IT+0x166>
 8004fa2:	3218      	adds	r2, #24
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d008      	beq.n	8004fba <HAL_DMA_Abort_IT+0x166>
 8004fa8:	3218      	adds	r2, #24
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d005      	beq.n	8004fba <HAL_DMA_Abort_IT+0x166>
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	f022 0201 	bic.w	r2, r2, #1
 8004fb4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004fb6:	2000      	movs	r0, #0
 8004fb8:	e759      	b.n	8004e6e <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	f022 0201 	bic.w	r2, r2, #1
 8004fc0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004fc2:	2000      	movs	r0, #0
      __HAL_DMA_DISABLE(hdma);
 8004fc4:	e753      	b.n	8004e6e <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 8004fc6:	6819      	ldr	r1, [r3, #0]
 8004fc8:	f021 0101 	bic.w	r1, r1, #1
 8004fcc:	6019      	str	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004fce:	6813      	ldr	r3, [r2, #0]
 8004fd0:	4838      	ldr	r0, [pc, #224]	@ (80050b4 <HAL_DMA_Abort_IT+0x260>)
 8004fd2:	4939      	ldr	r1, [pc, #228]	@ (80050b8 <HAL_DMA_Abort_IT+0x264>)
 8004fd4:	428b      	cmp	r3, r1
 8004fd6:	bf18      	it	ne
 8004fd8:	4283      	cmpne	r3, r0
 8004fda:	d042      	beq.n	8005062 <HAL_DMA_Abort_IT+0x20e>
 8004fdc:	3118      	adds	r1, #24
 8004fde:	428b      	cmp	r3, r1
 8004fe0:	d03f      	beq.n	8005062 <HAL_DMA_Abort_IT+0x20e>
 8004fe2:	3118      	adds	r1, #24
 8004fe4:	428b      	cmp	r3, r1
 8004fe6:	d03c      	beq.n	8005062 <HAL_DMA_Abort_IT+0x20e>
 8004fe8:	3118      	adds	r1, #24
 8004fea:	428b      	cmp	r3, r1
 8004fec:	d039      	beq.n	8005062 <HAL_DMA_Abort_IT+0x20e>
 8004fee:	3118      	adds	r1, #24
 8004ff0:	428b      	cmp	r3, r1
 8004ff2:	d036      	beq.n	8005062 <HAL_DMA_Abort_IT+0x20e>
 8004ff4:	3118      	adds	r1, #24
 8004ff6:	428b      	cmp	r3, r1
 8004ff8:	d033      	beq.n	8005062 <HAL_DMA_Abort_IT+0x20e>
 8004ffa:	3118      	adds	r1, #24
 8004ffc:	428b      	cmp	r3, r1
 8004ffe:	d030      	beq.n	8005062 <HAL_DMA_Abort_IT+0x20e>
 8005000:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8005004:	428b      	cmp	r3, r1
 8005006:	d02c      	beq.n	8005062 <HAL_DMA_Abort_IT+0x20e>
 8005008:	3118      	adds	r1, #24
 800500a:	428b      	cmp	r3, r1
 800500c:	d029      	beq.n	8005062 <HAL_DMA_Abort_IT+0x20e>
 800500e:	3118      	adds	r1, #24
 8005010:	428b      	cmp	r3, r1
 8005012:	d026      	beq.n	8005062 <HAL_DMA_Abort_IT+0x20e>
 8005014:	3118      	adds	r1, #24
 8005016:	428b      	cmp	r3, r1
 8005018:	d023      	beq.n	8005062 <HAL_DMA_Abort_IT+0x20e>
 800501a:	3118      	adds	r1, #24
 800501c:	428b      	cmp	r3, r1
 800501e:	d020      	beq.n	8005062 <HAL_DMA_Abort_IT+0x20e>
 8005020:	3118      	adds	r1, #24
 8005022:	428b      	cmp	r3, r1
 8005024:	d01d      	beq.n	8005062 <HAL_DMA_Abort_IT+0x20e>
 8005026:	3118      	adds	r1, #24
 8005028:	428b      	cmp	r3, r1
 800502a:	d01a      	beq.n	8005062 <HAL_DMA_Abort_IT+0x20e>
 800502c:	3118      	adds	r1, #24
 800502e:	428b      	cmp	r3, r1
 8005030:	d017      	beq.n	8005062 <HAL_DMA_Abort_IT+0x20e>
 8005032:	4923      	ldr	r1, [pc, #140]	@ (80050c0 <HAL_DMA_Abort_IT+0x26c>)
 8005034:	428b      	cmp	r3, r1
 8005036:	d014      	beq.n	8005062 <HAL_DMA_Abort_IT+0x20e>
 8005038:	3114      	adds	r1, #20
 800503a:	428b      	cmp	r3, r1
 800503c:	d011      	beq.n	8005062 <HAL_DMA_Abort_IT+0x20e>
 800503e:	3114      	adds	r1, #20
 8005040:	428b      	cmp	r3, r1
 8005042:	d00e      	beq.n	8005062 <HAL_DMA_Abort_IT+0x20e>
 8005044:	3114      	adds	r1, #20
 8005046:	428b      	cmp	r3, r1
 8005048:	d00b      	beq.n	8005062 <HAL_DMA_Abort_IT+0x20e>
 800504a:	3114      	adds	r1, #20
 800504c:	428b      	cmp	r3, r1
 800504e:	d008      	beq.n	8005062 <HAL_DMA_Abort_IT+0x20e>
 8005050:	3114      	adds	r1, #20
 8005052:	428b      	cmp	r3, r1
 8005054:	d005      	beq.n	8005062 <HAL_DMA_Abort_IT+0x20e>
 8005056:	3114      	adds	r1, #20
 8005058:	428b      	cmp	r3, r1
 800505a:	d002      	beq.n	8005062 <HAL_DMA_Abort_IT+0x20e>
 800505c:	3114      	adds	r1, #20
 800505e:	428b      	cmp	r3, r1
 8005060:	d117      	bne.n	8005092 <HAL_DMA_Abort_IT+0x23e>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005062:	6e11      	ldr	r1, [r2, #96]	@ 0x60
 8005064:	680b      	ldr	r3, [r1, #0]
 8005066:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800506a:	600b      	str	r3, [r1, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800506c:	6d90      	ldr	r0, [r2, #88]	@ 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800506e:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8005070:	f003 011f 	and.w	r1, r3, #31
 8005074:	2301      	movs	r3, #1
 8005076:	408b      	lsls	r3, r1
 8005078:	6043      	str	r3, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800507a:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 800507c:	6e91      	ldr	r1, [r2, #104]	@ 0x68
 800507e:	6059      	str	r1, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8005080:	6ed3      	ldr	r3, [r2, #108]	@ 0x6c
 8005082:	b133      	cbz	r3, 8005092 <HAL_DMA_Abort_IT+0x23e>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005084:	6819      	ldr	r1, [r3, #0]
 8005086:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 800508a:	6019      	str	r1, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800508c:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800508e:	6f51      	ldr	r1, [r2, #116]	@ 0x74
 8005090:	6059      	str	r1, [r3, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8005092:	2301      	movs	r3, #1
 8005094:	f882 3035 	strb.w	r3, [r2, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8005098:	2300      	movs	r3, #0
 800509a:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
      if(hdma->XferAbortCallback != NULL)
 800509e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80050a0:	b12b      	cbz	r3, 80050ae <HAL_DMA_Abort_IT+0x25a>
        hdma->XferAbortCallback(hdma);
 80050a2:	4610      	mov	r0, r2
 80050a4:	4798      	blx	r3
  return HAL_OK;
 80050a6:	2000      	movs	r0, #0
 80050a8:	e6e1      	b.n	8004e6e <HAL_DMA_Abort_IT+0x1a>
    return HAL_ERROR;
 80050aa:	2001      	movs	r0, #1
}
 80050ac:	4770      	bx	lr
  return HAL_OK;
 80050ae:	2000      	movs	r0, #0
 80050b0:	e6dd      	b.n	8004e6e <HAL_DMA_Abort_IT+0x1a>
 80050b2:	bf00      	nop
 80050b4:	40020010 	.word	0x40020010
 80050b8:	40020028 	.word	0x40020028
 80050bc:	40020040 	.word	0x40020040
 80050c0:	58025408 	.word	0x58025408

080050c4 <HAL_DMA_IRQHandler>:
{
 80050c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050c6:	b083      	sub	sp, #12
 80050c8:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 80050ca:	2300      	movs	r3, #0
 80050cc:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80050ce:	4b7d      	ldr	r3, [pc, #500]	@ (80052c4 <HAL_DMA_IRQHandler+0x200>)
 80050d0:	681d      	ldr	r5, [r3, #0]
 80050d2:	4b7d      	ldr	r3, [pc, #500]	@ (80052c8 <HAL_DMA_IRQHandler+0x204>)
 80050d4:	fba3 3505 	umull	r3, r5, r3, r5
 80050d8:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050da:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr_dma  = regs_dma->ISR;
 80050dc:	683e      	ldr	r6, [r7, #0]
  tmpisr_bdma = regs_bdma->ISR;
 80050de:	f8d7 c000 	ldr.w	ip, [r7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80050e2:	6803      	ldr	r3, [r0, #0]
 80050e4:	4979      	ldr	r1, [pc, #484]	@ (80052cc <HAL_DMA_IRQHandler+0x208>)
 80050e6:	487a      	ldr	r0, [pc, #488]	@ (80052d0 <HAL_DMA_IRQHandler+0x20c>)
 80050e8:	4283      	cmp	r3, r0
 80050ea:	bf18      	it	ne
 80050ec:	428b      	cmpne	r3, r1
 80050ee:	bf0c      	ite	eq
 80050f0:	2001      	moveq	r0, #1
 80050f2:	2000      	movne	r0, #0
 80050f4:	d061      	beq.n	80051ba <HAL_DMA_IRQHandler+0xf6>
 80050f6:	4a77      	ldr	r2, [pc, #476]	@ (80052d4 <HAL_DMA_IRQHandler+0x210>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d05e      	beq.n	80051ba <HAL_DMA_IRQHandler+0xf6>
 80050fc:	3218      	adds	r2, #24
 80050fe:	4293      	cmp	r3, r2
 8005100:	d05b      	beq.n	80051ba <HAL_DMA_IRQHandler+0xf6>
 8005102:	3218      	adds	r2, #24
 8005104:	4293      	cmp	r3, r2
 8005106:	d058      	beq.n	80051ba <HAL_DMA_IRQHandler+0xf6>
 8005108:	3218      	adds	r2, #24
 800510a:	4293      	cmp	r3, r2
 800510c:	d055      	beq.n	80051ba <HAL_DMA_IRQHandler+0xf6>
 800510e:	3218      	adds	r2, #24
 8005110:	4293      	cmp	r3, r2
 8005112:	d052      	beq.n	80051ba <HAL_DMA_IRQHandler+0xf6>
 8005114:	3218      	adds	r2, #24
 8005116:	4293      	cmp	r3, r2
 8005118:	d04f      	beq.n	80051ba <HAL_DMA_IRQHandler+0xf6>
 800511a:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 800511e:	4293      	cmp	r3, r2
 8005120:	d04b      	beq.n	80051ba <HAL_DMA_IRQHandler+0xf6>
 8005122:	3218      	adds	r2, #24
 8005124:	4293      	cmp	r3, r2
 8005126:	d048      	beq.n	80051ba <HAL_DMA_IRQHandler+0xf6>
 8005128:	3218      	adds	r2, #24
 800512a:	4293      	cmp	r3, r2
 800512c:	d045      	beq.n	80051ba <HAL_DMA_IRQHandler+0xf6>
 800512e:	3218      	adds	r2, #24
 8005130:	4293      	cmp	r3, r2
 8005132:	d042      	beq.n	80051ba <HAL_DMA_IRQHandler+0xf6>
 8005134:	3218      	adds	r2, #24
 8005136:	4293      	cmp	r3, r2
 8005138:	d03f      	beq.n	80051ba <HAL_DMA_IRQHandler+0xf6>
 800513a:	3218      	adds	r2, #24
 800513c:	4293      	cmp	r3, r2
 800513e:	d03c      	beq.n	80051ba <HAL_DMA_IRQHandler+0xf6>
 8005140:	3218      	adds	r2, #24
 8005142:	4293      	cmp	r3, r2
 8005144:	d039      	beq.n	80051ba <HAL_DMA_IRQHandler+0xf6>
 8005146:	3218      	adds	r2, #24
 8005148:	4293      	cmp	r3, r2
 800514a:	d036      	beq.n	80051ba <HAL_DMA_IRQHandler+0xf6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800514c:	4962      	ldr	r1, [pc, #392]	@ (80052d8 <HAL_DMA_IRQHandler+0x214>)
 800514e:	4a63      	ldr	r2, [pc, #396]	@ (80052dc <HAL_DMA_IRQHandler+0x218>)
 8005150:	4293      	cmp	r3, r2
 8005152:	bf18      	it	ne
 8005154:	428b      	cmpne	r3, r1
 8005156:	d012      	beq.n	800517e <HAL_DMA_IRQHandler+0xba>
 8005158:	4a61      	ldr	r2, [pc, #388]	@ (80052e0 <HAL_DMA_IRQHandler+0x21c>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d00f      	beq.n	800517e <HAL_DMA_IRQHandler+0xba>
 800515e:	3214      	adds	r2, #20
 8005160:	4293      	cmp	r3, r2
 8005162:	d00c      	beq.n	800517e <HAL_DMA_IRQHandler+0xba>
 8005164:	3214      	adds	r2, #20
 8005166:	4293      	cmp	r3, r2
 8005168:	d009      	beq.n	800517e <HAL_DMA_IRQHandler+0xba>
 800516a:	3214      	adds	r2, #20
 800516c:	4293      	cmp	r3, r2
 800516e:	d006      	beq.n	800517e <HAL_DMA_IRQHandler+0xba>
 8005170:	3214      	adds	r2, #20
 8005172:	4293      	cmp	r3, r2
 8005174:	d003      	beq.n	800517e <HAL_DMA_IRQHandler+0xba>
 8005176:	3214      	adds	r2, #20
 8005178:	4293      	cmp	r3, r2
 800517a:	f040 8261 	bne.w	8005640 <HAL_DMA_IRQHandler+0x57c>
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800517e:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005180:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8005182:	f001 011f 	and.w	r1, r1, #31
 8005186:	2004      	movs	r0, #4
 8005188:	4088      	lsls	r0, r1
 800518a:	ea10 0f0c 	tst.w	r0, ip
 800518e:	f000 82a7 	beq.w	80056e0 <HAL_DMA_IRQHandler+0x61c>
 8005192:	f012 0f04 	tst.w	r2, #4
 8005196:	f000 82a3 	beq.w	80056e0 <HAL_DMA_IRQHandler+0x61c>
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800519a:	6078      	str	r0, [r7, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800519c:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 80051a0:	f000 825a 	beq.w	8005658 <HAL_DMA_IRQHandler+0x594>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80051a4:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 80051a8:	f040 8250 	bne.w	800564c <HAL_DMA_IRQHandler+0x588>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80051ac:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	f000 8246 	beq.w	8005640 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferM1HalfCpltCallback(hdma);
 80051b4:	4620      	mov	r0, r4
 80051b6:	4798      	blx	r3
 80051b8:	e242      	b.n	8005640 <HAL_DMA_IRQHandler+0x57c>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80051ba:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80051bc:	f002 011f 	and.w	r1, r2, #31
 80051c0:	2208      	movs	r2, #8
 80051c2:	408a      	lsls	r2, r1
 80051c4:	4232      	tst	r2, r6
 80051c6:	d041      	beq.n	800524c <HAL_DMA_IRQHandler+0x188>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80051c8:	bb70      	cbnz	r0, 8005228 <HAL_DMA_IRQHandler+0x164>
 80051ca:	4a42      	ldr	r2, [pc, #264]	@ (80052d4 <HAL_DMA_IRQHandler+0x210>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d02b      	beq.n	8005228 <HAL_DMA_IRQHandler+0x164>
 80051d0:	3218      	adds	r2, #24
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d028      	beq.n	8005228 <HAL_DMA_IRQHandler+0x164>
 80051d6:	3218      	adds	r2, #24
 80051d8:	4293      	cmp	r3, r2
 80051da:	d025      	beq.n	8005228 <HAL_DMA_IRQHandler+0x164>
 80051dc:	3218      	adds	r2, #24
 80051de:	4293      	cmp	r3, r2
 80051e0:	d022      	beq.n	8005228 <HAL_DMA_IRQHandler+0x164>
 80051e2:	3218      	adds	r2, #24
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d01f      	beq.n	8005228 <HAL_DMA_IRQHandler+0x164>
 80051e8:	3218      	adds	r2, #24
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d01c      	beq.n	8005228 <HAL_DMA_IRQHandler+0x164>
 80051ee:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d018      	beq.n	8005228 <HAL_DMA_IRQHandler+0x164>
 80051f6:	3218      	adds	r2, #24
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d015      	beq.n	8005228 <HAL_DMA_IRQHandler+0x164>
 80051fc:	3218      	adds	r2, #24
 80051fe:	4293      	cmp	r3, r2
 8005200:	d012      	beq.n	8005228 <HAL_DMA_IRQHandler+0x164>
 8005202:	3218      	adds	r2, #24
 8005204:	4293      	cmp	r3, r2
 8005206:	d00f      	beq.n	8005228 <HAL_DMA_IRQHandler+0x164>
 8005208:	3218      	adds	r2, #24
 800520a:	4293      	cmp	r3, r2
 800520c:	d00c      	beq.n	8005228 <HAL_DMA_IRQHandler+0x164>
 800520e:	3218      	adds	r2, #24
 8005210:	4293      	cmp	r3, r2
 8005212:	d009      	beq.n	8005228 <HAL_DMA_IRQHandler+0x164>
 8005214:	3218      	adds	r2, #24
 8005216:	4293      	cmp	r3, r2
 8005218:	d006      	beq.n	8005228 <HAL_DMA_IRQHandler+0x164>
 800521a:	3218      	adds	r2, #24
 800521c:	4293      	cmp	r3, r2
 800521e:	d003      	beq.n	8005228 <HAL_DMA_IRQHandler+0x164>
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8005226:	e002      	b.n	800522e <HAL_DMA_IRQHandler+0x16a>
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800522e:	b16a      	cbz	r2, 800524c <HAL_DMA_IRQHandler+0x188>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	f022 0204 	bic.w	r2, r2, #4
 8005236:	601a      	str	r2, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005238:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800523a:	f003 021f 	and.w	r2, r3, #31
 800523e:	2308      	movs	r3, #8
 8005240:	4093      	lsls	r3, r2
 8005242:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005244:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005246:	f043 0301 	orr.w	r3, r3, #1
 800524a:	6563      	str	r3, [r4, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800524c:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800524e:	f002 021f 	and.w	r2, r2, #31
 8005252:	fa26 f302 	lsr.w	r3, r6, r2
 8005256:	f013 0f01 	tst.w	r3, #1
 800525a:	d047      	beq.n	80052ec <HAL_DMA_IRQHandler+0x228>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800525c:	6823      	ldr	r3, [r4, #0]
 800525e:	481b      	ldr	r0, [pc, #108]	@ (80052cc <HAL_DMA_IRQHandler+0x208>)
 8005260:	491b      	ldr	r1, [pc, #108]	@ (80052d0 <HAL_DMA_IRQHandler+0x20c>)
 8005262:	428b      	cmp	r3, r1
 8005264:	bf18      	it	ne
 8005266:	4283      	cmpne	r3, r0
 8005268:	d03c      	beq.n	80052e4 <HAL_DMA_IRQHandler+0x220>
 800526a:	3118      	adds	r1, #24
 800526c:	428b      	cmp	r3, r1
 800526e:	d039      	beq.n	80052e4 <HAL_DMA_IRQHandler+0x220>
 8005270:	3118      	adds	r1, #24
 8005272:	428b      	cmp	r3, r1
 8005274:	d036      	beq.n	80052e4 <HAL_DMA_IRQHandler+0x220>
 8005276:	3118      	adds	r1, #24
 8005278:	428b      	cmp	r3, r1
 800527a:	d033      	beq.n	80052e4 <HAL_DMA_IRQHandler+0x220>
 800527c:	3118      	adds	r1, #24
 800527e:	428b      	cmp	r3, r1
 8005280:	d030      	beq.n	80052e4 <HAL_DMA_IRQHandler+0x220>
 8005282:	3118      	adds	r1, #24
 8005284:	428b      	cmp	r3, r1
 8005286:	d02d      	beq.n	80052e4 <HAL_DMA_IRQHandler+0x220>
 8005288:	3118      	adds	r1, #24
 800528a:	428b      	cmp	r3, r1
 800528c:	d02a      	beq.n	80052e4 <HAL_DMA_IRQHandler+0x220>
 800528e:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8005292:	428b      	cmp	r3, r1
 8005294:	d026      	beq.n	80052e4 <HAL_DMA_IRQHandler+0x220>
 8005296:	3118      	adds	r1, #24
 8005298:	428b      	cmp	r3, r1
 800529a:	d023      	beq.n	80052e4 <HAL_DMA_IRQHandler+0x220>
 800529c:	3118      	adds	r1, #24
 800529e:	428b      	cmp	r3, r1
 80052a0:	d020      	beq.n	80052e4 <HAL_DMA_IRQHandler+0x220>
 80052a2:	3118      	adds	r1, #24
 80052a4:	428b      	cmp	r3, r1
 80052a6:	d01d      	beq.n	80052e4 <HAL_DMA_IRQHandler+0x220>
 80052a8:	3118      	adds	r1, #24
 80052aa:	428b      	cmp	r3, r1
 80052ac:	d01a      	beq.n	80052e4 <HAL_DMA_IRQHandler+0x220>
 80052ae:	3118      	adds	r1, #24
 80052b0:	428b      	cmp	r3, r1
 80052b2:	d017      	beq.n	80052e4 <HAL_DMA_IRQHandler+0x220>
 80052b4:	3118      	adds	r1, #24
 80052b6:	428b      	cmp	r3, r1
 80052b8:	d014      	beq.n	80052e4 <HAL_DMA_IRQHandler+0x220>
 80052ba:	3118      	adds	r1, #24
 80052bc:	428b      	cmp	r3, r1
 80052be:	d011      	beq.n	80052e4 <HAL_DMA_IRQHandler+0x220>
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	e013      	b.n	80052ec <HAL_DMA_IRQHandler+0x228>
 80052c4:	24000004 	.word	0x24000004
 80052c8:	1b4e81b5 	.word	0x1b4e81b5
 80052cc:	40020010 	.word	0x40020010
 80052d0:	40020028 	.word	0x40020028
 80052d4:	40020040 	.word	0x40020040
 80052d8:	58025408 	.word	0x58025408
 80052dc:	5802541c 	.word	0x5802541c
 80052e0:	58025430 	.word	0x58025430
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80052ea:	d13b      	bne.n	8005364 <HAL_DMA_IRQHandler+0x2a0>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80052ec:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80052ee:	f003 031f 	and.w	r3, r3, #31
 80052f2:	2204      	movs	r2, #4
 80052f4:	fa02 f303 	lsl.w	r3, r2, r3
 80052f8:	4233      	tst	r3, r6
 80052fa:	d03f      	beq.n	800537c <HAL_DMA_IRQHandler+0x2b8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80052fc:	6822      	ldr	r2, [r4, #0]
 80052fe:	4896      	ldr	r0, [pc, #600]	@ (8005558 <HAL_DMA_IRQHandler+0x494>)
 8005300:	4996      	ldr	r1, [pc, #600]	@ (800555c <HAL_DMA_IRQHandler+0x498>)
 8005302:	428a      	cmp	r2, r1
 8005304:	bf18      	it	ne
 8005306:	4282      	cmpne	r2, r0
 8005308:	d034      	beq.n	8005374 <HAL_DMA_IRQHandler+0x2b0>
 800530a:	3118      	adds	r1, #24
 800530c:	428a      	cmp	r2, r1
 800530e:	d031      	beq.n	8005374 <HAL_DMA_IRQHandler+0x2b0>
 8005310:	3118      	adds	r1, #24
 8005312:	428a      	cmp	r2, r1
 8005314:	d02e      	beq.n	8005374 <HAL_DMA_IRQHandler+0x2b0>
 8005316:	3118      	adds	r1, #24
 8005318:	428a      	cmp	r2, r1
 800531a:	d02b      	beq.n	8005374 <HAL_DMA_IRQHandler+0x2b0>
 800531c:	3118      	adds	r1, #24
 800531e:	428a      	cmp	r2, r1
 8005320:	d028      	beq.n	8005374 <HAL_DMA_IRQHandler+0x2b0>
 8005322:	3118      	adds	r1, #24
 8005324:	428a      	cmp	r2, r1
 8005326:	d025      	beq.n	8005374 <HAL_DMA_IRQHandler+0x2b0>
 8005328:	3118      	adds	r1, #24
 800532a:	428a      	cmp	r2, r1
 800532c:	d022      	beq.n	8005374 <HAL_DMA_IRQHandler+0x2b0>
 800532e:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8005332:	428a      	cmp	r2, r1
 8005334:	d01e      	beq.n	8005374 <HAL_DMA_IRQHandler+0x2b0>
 8005336:	3118      	adds	r1, #24
 8005338:	428a      	cmp	r2, r1
 800533a:	d01b      	beq.n	8005374 <HAL_DMA_IRQHandler+0x2b0>
 800533c:	3118      	adds	r1, #24
 800533e:	428a      	cmp	r2, r1
 8005340:	d018      	beq.n	8005374 <HAL_DMA_IRQHandler+0x2b0>
 8005342:	3118      	adds	r1, #24
 8005344:	428a      	cmp	r2, r1
 8005346:	d015      	beq.n	8005374 <HAL_DMA_IRQHandler+0x2b0>
 8005348:	3118      	adds	r1, #24
 800534a:	428a      	cmp	r2, r1
 800534c:	d012      	beq.n	8005374 <HAL_DMA_IRQHandler+0x2b0>
 800534e:	3118      	adds	r1, #24
 8005350:	428a      	cmp	r2, r1
 8005352:	d00f      	beq.n	8005374 <HAL_DMA_IRQHandler+0x2b0>
 8005354:	3118      	adds	r1, #24
 8005356:	428a      	cmp	r2, r1
 8005358:	d00c      	beq.n	8005374 <HAL_DMA_IRQHandler+0x2b0>
 800535a:	3118      	adds	r1, #24
 800535c:	428a      	cmp	r2, r1
 800535e:	d009      	beq.n	8005374 <HAL_DMA_IRQHandler+0x2b0>
 8005360:	6813      	ldr	r3, [r2, #0]
 8005362:	e00b      	b.n	800537c <HAL_DMA_IRQHandler+0x2b8>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005364:	2301      	movs	r3, #1
 8005366:	4093      	lsls	r3, r2
 8005368:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800536a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800536c:	f043 0302 	orr.w	r3, r3, #2
 8005370:	6563      	str	r3, [r4, #84]	@ 0x54
 8005372:	e7bb      	b.n	80052ec <HAL_DMA_IRQHandler+0x228>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005374:	6812      	ldr	r2, [r2, #0]
 8005376:	f012 0f02 	tst.w	r2, #2
 800537a:	d13d      	bne.n	80053f8 <HAL_DMA_IRQHandler+0x334>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800537c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800537e:	f003 031f 	and.w	r3, r3, #31
 8005382:	2210      	movs	r2, #16
 8005384:	fa02 f303 	lsl.w	r3, r2, r3
 8005388:	4233      	tst	r3, r6
 800538a:	d05f      	beq.n	800544c <HAL_DMA_IRQHandler+0x388>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800538c:	6822      	ldr	r2, [r4, #0]
 800538e:	4872      	ldr	r0, [pc, #456]	@ (8005558 <HAL_DMA_IRQHandler+0x494>)
 8005390:	4972      	ldr	r1, [pc, #456]	@ (800555c <HAL_DMA_IRQHandler+0x498>)
 8005392:	428a      	cmp	r2, r1
 8005394:	bf18      	it	ne
 8005396:	4282      	cmpne	r2, r0
 8005398:	d034      	beq.n	8005404 <HAL_DMA_IRQHandler+0x340>
 800539a:	3118      	adds	r1, #24
 800539c:	428a      	cmp	r2, r1
 800539e:	d031      	beq.n	8005404 <HAL_DMA_IRQHandler+0x340>
 80053a0:	3118      	adds	r1, #24
 80053a2:	428a      	cmp	r2, r1
 80053a4:	d02e      	beq.n	8005404 <HAL_DMA_IRQHandler+0x340>
 80053a6:	3118      	adds	r1, #24
 80053a8:	428a      	cmp	r2, r1
 80053aa:	d02b      	beq.n	8005404 <HAL_DMA_IRQHandler+0x340>
 80053ac:	3118      	adds	r1, #24
 80053ae:	428a      	cmp	r2, r1
 80053b0:	d028      	beq.n	8005404 <HAL_DMA_IRQHandler+0x340>
 80053b2:	3118      	adds	r1, #24
 80053b4:	428a      	cmp	r2, r1
 80053b6:	d025      	beq.n	8005404 <HAL_DMA_IRQHandler+0x340>
 80053b8:	3118      	adds	r1, #24
 80053ba:	428a      	cmp	r2, r1
 80053bc:	d022      	beq.n	8005404 <HAL_DMA_IRQHandler+0x340>
 80053be:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 80053c2:	428a      	cmp	r2, r1
 80053c4:	d01e      	beq.n	8005404 <HAL_DMA_IRQHandler+0x340>
 80053c6:	3118      	adds	r1, #24
 80053c8:	428a      	cmp	r2, r1
 80053ca:	d01b      	beq.n	8005404 <HAL_DMA_IRQHandler+0x340>
 80053cc:	3118      	adds	r1, #24
 80053ce:	428a      	cmp	r2, r1
 80053d0:	d018      	beq.n	8005404 <HAL_DMA_IRQHandler+0x340>
 80053d2:	3118      	adds	r1, #24
 80053d4:	428a      	cmp	r2, r1
 80053d6:	d015      	beq.n	8005404 <HAL_DMA_IRQHandler+0x340>
 80053d8:	3118      	adds	r1, #24
 80053da:	428a      	cmp	r2, r1
 80053dc:	d012      	beq.n	8005404 <HAL_DMA_IRQHandler+0x340>
 80053de:	3118      	adds	r1, #24
 80053e0:	428a      	cmp	r2, r1
 80053e2:	d00f      	beq.n	8005404 <HAL_DMA_IRQHandler+0x340>
 80053e4:	3118      	adds	r1, #24
 80053e6:	428a      	cmp	r2, r1
 80053e8:	d00c      	beq.n	8005404 <HAL_DMA_IRQHandler+0x340>
 80053ea:	3118      	adds	r1, #24
 80053ec:	428a      	cmp	r2, r1
 80053ee:	d009      	beq.n	8005404 <HAL_DMA_IRQHandler+0x340>
 80053f0:	6812      	ldr	r2, [r2, #0]
 80053f2:	f3c2 0280 	ubfx	r2, r2, #2, #1
 80053f6:	e008      	b.n	800540a <HAL_DMA_IRQHandler+0x346>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80053f8:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80053fa:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80053fc:	f043 0304 	orr.w	r3, r3, #4
 8005400:	6563      	str	r3, [r4, #84]	@ 0x54
 8005402:	e7bb      	b.n	800537c <HAL_DMA_IRQHandler+0x2b8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005404:	6812      	ldr	r2, [r2, #0]
 8005406:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 800540a:	b1fa      	cbz	r2, 800544c <HAL_DMA_IRQHandler+0x388>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800540c:	60bb      	str	r3, [r7, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800540e:	6823      	ldr	r3, [r4, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8005416:	d00d      	beq.n	8005434 <HAL_DMA_IRQHandler+0x370>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 800541e:	d104      	bne.n	800542a <HAL_DMA_IRQHandler+0x366>
            if(hdma->XferHalfCpltCallback != NULL)
 8005420:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005422:	b19b      	cbz	r3, 800544c <HAL_DMA_IRQHandler+0x388>
              hdma->XferHalfCpltCallback(hdma);
 8005424:	4620      	mov	r0, r4
 8005426:	4798      	blx	r3
 8005428:	e010      	b.n	800544c <HAL_DMA_IRQHandler+0x388>
            if(hdma->XferM1HalfCpltCallback != NULL)
 800542a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800542c:	b173      	cbz	r3, 800544c <HAL_DMA_IRQHandler+0x388>
              hdma->XferM1HalfCpltCallback(hdma);
 800542e:	4620      	mov	r0, r4
 8005430:	4798      	blx	r3
 8005432:	e00b      	b.n	800544c <HAL_DMA_IRQHandler+0x388>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800543a:	d103      	bne.n	8005444 <HAL_DMA_IRQHandler+0x380>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	f022 0208 	bic.w	r2, r2, #8
 8005442:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8005444:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005446:	b10b      	cbz	r3, 800544c <HAL_DMA_IRQHandler+0x388>
            hdma->XferHalfCpltCallback(hdma);
 8005448:	4620      	mov	r0, r4
 800544a:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800544c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800544e:	f003 031f 	and.w	r3, r3, #31
 8005452:	2220      	movs	r2, #32
 8005454:	fa02 f303 	lsl.w	r3, r2, r3
 8005458:	4233      	tst	r3, r6
 800545a:	f000 8093 	beq.w	8005584 <HAL_DMA_IRQHandler+0x4c0>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800545e:	6822      	ldr	r2, [r4, #0]
 8005460:	483d      	ldr	r0, [pc, #244]	@ (8005558 <HAL_DMA_IRQHandler+0x494>)
 8005462:	493e      	ldr	r1, [pc, #248]	@ (800555c <HAL_DMA_IRQHandler+0x498>)
 8005464:	428a      	cmp	r2, r1
 8005466:	bf18      	it	ne
 8005468:	4282      	cmpne	r2, r0
 800546a:	d02e      	beq.n	80054ca <HAL_DMA_IRQHandler+0x406>
 800546c:	3118      	adds	r1, #24
 800546e:	428a      	cmp	r2, r1
 8005470:	d02b      	beq.n	80054ca <HAL_DMA_IRQHandler+0x406>
 8005472:	3118      	adds	r1, #24
 8005474:	428a      	cmp	r2, r1
 8005476:	d028      	beq.n	80054ca <HAL_DMA_IRQHandler+0x406>
 8005478:	3118      	adds	r1, #24
 800547a:	428a      	cmp	r2, r1
 800547c:	d025      	beq.n	80054ca <HAL_DMA_IRQHandler+0x406>
 800547e:	3118      	adds	r1, #24
 8005480:	428a      	cmp	r2, r1
 8005482:	d022      	beq.n	80054ca <HAL_DMA_IRQHandler+0x406>
 8005484:	3118      	adds	r1, #24
 8005486:	428a      	cmp	r2, r1
 8005488:	d01f      	beq.n	80054ca <HAL_DMA_IRQHandler+0x406>
 800548a:	3118      	adds	r1, #24
 800548c:	428a      	cmp	r2, r1
 800548e:	d01c      	beq.n	80054ca <HAL_DMA_IRQHandler+0x406>
 8005490:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8005494:	428a      	cmp	r2, r1
 8005496:	d018      	beq.n	80054ca <HAL_DMA_IRQHandler+0x406>
 8005498:	3118      	adds	r1, #24
 800549a:	428a      	cmp	r2, r1
 800549c:	d015      	beq.n	80054ca <HAL_DMA_IRQHandler+0x406>
 800549e:	3118      	adds	r1, #24
 80054a0:	428a      	cmp	r2, r1
 80054a2:	d012      	beq.n	80054ca <HAL_DMA_IRQHandler+0x406>
 80054a4:	3118      	adds	r1, #24
 80054a6:	428a      	cmp	r2, r1
 80054a8:	d00f      	beq.n	80054ca <HAL_DMA_IRQHandler+0x406>
 80054aa:	3118      	adds	r1, #24
 80054ac:	428a      	cmp	r2, r1
 80054ae:	d00c      	beq.n	80054ca <HAL_DMA_IRQHandler+0x406>
 80054b0:	3118      	adds	r1, #24
 80054b2:	428a      	cmp	r2, r1
 80054b4:	d009      	beq.n	80054ca <HAL_DMA_IRQHandler+0x406>
 80054b6:	3118      	adds	r1, #24
 80054b8:	428a      	cmp	r2, r1
 80054ba:	d006      	beq.n	80054ca <HAL_DMA_IRQHandler+0x406>
 80054bc:	3118      	adds	r1, #24
 80054be:	428a      	cmp	r2, r1
 80054c0:	d003      	beq.n	80054ca <HAL_DMA_IRQHandler+0x406>
 80054c2:	6812      	ldr	r2, [r2, #0]
 80054c4:	f3c2 0240 	ubfx	r2, r2, #1, #1
 80054c8:	e002      	b.n	80054d0 <HAL_DMA_IRQHandler+0x40c>
 80054ca:	6812      	ldr	r2, [r2, #0]
 80054cc:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80054d0:	2a00      	cmp	r2, #0
 80054d2:	d057      	beq.n	8005584 <HAL_DMA_IRQHandler+0x4c0>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80054d4:	60bb      	str	r3, [r7, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 80054d6:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	2b04      	cmp	r3, #4
 80054de:	d00e      	beq.n	80054fe <HAL_DMA_IRQHandler+0x43a>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80054e0:	6823      	ldr	r3, [r4, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 80054e8:	d03a      	beq.n	8005560 <HAL_DMA_IRQHandler+0x49c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 80054f0:	d12d      	bne.n	800554e <HAL_DMA_IRQHandler+0x48a>
            if(hdma->XferM1CpltCallback != NULL)
 80054f2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d045      	beq.n	8005584 <HAL_DMA_IRQHandler+0x4c0>
              hdma->XferM1CpltCallback(hdma);
 80054f8:	4620      	mov	r0, r4
 80054fa:	4798      	blx	r3
 80054fc:	e042      	b.n	8005584 <HAL_DMA_IRQHandler+0x4c0>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80054fe:	6822      	ldr	r2, [r4, #0]
 8005500:	6813      	ldr	r3, [r2, #0]
 8005502:	f023 0316 	bic.w	r3, r3, #22
 8005506:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005508:	6822      	ldr	r2, [r4, #0]
 800550a:	6953      	ldr	r3, [r2, #20]
 800550c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005510:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005512:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005514:	b1bb      	cbz	r3, 8005546 <HAL_DMA_IRQHandler+0x482>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005516:	6822      	ldr	r2, [r4, #0]
 8005518:	6813      	ldr	r3, [r2, #0]
 800551a:	f023 0308 	bic.w	r3, r3, #8
 800551e:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005520:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005522:	f003 021f 	and.w	r2, r3, #31
 8005526:	233f      	movs	r3, #63	@ 0x3f
 8005528:	4093      	lsls	r3, r2
 800552a:	60bb      	str	r3, [r7, #8]
          hdma->State = HAL_DMA_STATE_READY;
 800552c:	2301      	movs	r3, #1
 800552e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8005532:	2300      	movs	r3, #0
 8005534:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
          if(hdma->XferAbortCallback != NULL)
 8005538:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800553a:	2b00      	cmp	r3, #0
 800553c:	f000 8080 	beq.w	8005640 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferAbortCallback(hdma);
 8005540:	4620      	mov	r0, r4
 8005542:	4798      	blx	r3
          return;
 8005544:	e07c      	b.n	8005640 <HAL_DMA_IRQHandler+0x57c>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005546:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8005548:	2b00      	cmp	r3, #0
 800554a:	d1e4      	bne.n	8005516 <HAL_DMA_IRQHandler+0x452>
 800554c:	e7e8      	b.n	8005520 <HAL_DMA_IRQHandler+0x45c>
            if(hdma->XferCpltCallback != NULL)
 800554e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005550:	b1c3      	cbz	r3, 8005584 <HAL_DMA_IRQHandler+0x4c0>
              hdma->XferCpltCallback(hdma);
 8005552:	4620      	mov	r0, r4
 8005554:	4798      	blx	r3
 8005556:	e015      	b.n	8005584 <HAL_DMA_IRQHandler+0x4c0>
 8005558:	40020010 	.word	0x40020010
 800555c:	40020028 	.word	0x40020028
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8005566:	d109      	bne.n	800557c <HAL_DMA_IRQHandler+0x4b8>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	f022 0210 	bic.w	r2, r2, #16
 800556e:	601a      	str	r2, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8005570:	2301      	movs	r3, #1
 8005572:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
            __HAL_UNLOCK(hdma);
 8005576:	2300      	movs	r3, #0
 8005578:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
          if(hdma->XferCpltCallback != NULL)
 800557c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800557e:	b10b      	cbz	r3, 8005584 <HAL_DMA_IRQHandler+0x4c0>
            hdma->XferCpltCallback(hdma);
 8005580:	4620      	mov	r0, r4
 8005582:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005584:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005586:	2b00      	cmp	r3, #0
 8005588:	d05a      	beq.n	8005640 <HAL_DMA_IRQHandler+0x57c>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800558a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800558c:	f013 0f01 	tst.w	r3, #1
 8005590:	d052      	beq.n	8005638 <HAL_DMA_IRQHandler+0x574>
        hdma->State = HAL_DMA_STATE_ABORT;
 8005592:	2304      	movs	r3, #4
 8005594:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_DMA_DISABLE(hdma);
 8005598:	6823      	ldr	r3, [r4, #0]
 800559a:	4996      	ldr	r1, [pc, #600]	@ (80057f4 <HAL_DMA_IRQHandler+0x730>)
 800559c:	4a96      	ldr	r2, [pc, #600]	@ (80057f8 <HAL_DMA_IRQHandler+0x734>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	bf18      	it	ne
 80055a2:	428b      	cmpne	r3, r1
 80055a4:	d02f      	beq.n	8005606 <HAL_DMA_IRQHandler+0x542>
 80055a6:	3218      	adds	r2, #24
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d02c      	beq.n	8005606 <HAL_DMA_IRQHandler+0x542>
 80055ac:	3218      	adds	r2, #24
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d029      	beq.n	8005606 <HAL_DMA_IRQHandler+0x542>
 80055b2:	3218      	adds	r2, #24
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d026      	beq.n	8005606 <HAL_DMA_IRQHandler+0x542>
 80055b8:	3218      	adds	r2, #24
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d023      	beq.n	8005606 <HAL_DMA_IRQHandler+0x542>
 80055be:	3218      	adds	r2, #24
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d020      	beq.n	8005606 <HAL_DMA_IRQHandler+0x542>
 80055c4:	3218      	adds	r2, #24
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d01d      	beq.n	8005606 <HAL_DMA_IRQHandler+0x542>
 80055ca:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d019      	beq.n	8005606 <HAL_DMA_IRQHandler+0x542>
 80055d2:	3218      	adds	r2, #24
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d016      	beq.n	8005606 <HAL_DMA_IRQHandler+0x542>
 80055d8:	3218      	adds	r2, #24
 80055da:	4293      	cmp	r3, r2
 80055dc:	d013      	beq.n	8005606 <HAL_DMA_IRQHandler+0x542>
 80055de:	3218      	adds	r2, #24
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d010      	beq.n	8005606 <HAL_DMA_IRQHandler+0x542>
 80055e4:	3218      	adds	r2, #24
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d00d      	beq.n	8005606 <HAL_DMA_IRQHandler+0x542>
 80055ea:	3218      	adds	r2, #24
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d00a      	beq.n	8005606 <HAL_DMA_IRQHandler+0x542>
 80055f0:	3218      	adds	r2, #24
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d007      	beq.n	8005606 <HAL_DMA_IRQHandler+0x542>
 80055f6:	3218      	adds	r2, #24
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d004      	beq.n	8005606 <HAL_DMA_IRQHandler+0x542>
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	f022 0201 	bic.w	r2, r2, #1
 8005602:	601a      	str	r2, [r3, #0]
 8005604:	e003      	b.n	800560e <HAL_DMA_IRQHandler+0x54a>
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	f022 0201 	bic.w	r2, r2, #1
 800560c:	601a      	str	r2, [r3, #0]
          if (++count > timeout)
 800560e:	9b01      	ldr	r3, [sp, #4]
 8005610:	3301      	adds	r3, #1
 8005612:	9301      	str	r3, [sp, #4]
 8005614:	42ab      	cmp	r3, r5
 8005616:	d804      	bhi.n	8005622 <HAL_DMA_IRQHandler+0x55e>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005618:	6823      	ldr	r3, [r4, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f013 0f01 	tst.w	r3, #1
 8005620:	d1f5      	bne.n	800560e <HAL_DMA_IRQHandler+0x54a>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005622:	6823      	ldr	r3, [r4, #0]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f013 0f01 	tst.w	r3, #1
 800562a:	d00b      	beq.n	8005644 <HAL_DMA_IRQHandler+0x580>
          hdma->State = HAL_DMA_STATE_ERROR;
 800562c:	2303      	movs	r3, #3
 800562e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8005632:	2300      	movs	r3, #0
 8005634:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      if(hdma->XferErrorCallback != NULL)
 8005638:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800563a:	b10b      	cbz	r3, 8005640 <HAL_DMA_IRQHandler+0x57c>
        hdma->XferErrorCallback(hdma);
 800563c:	4620      	mov	r0, r4
 800563e:	4798      	blx	r3
}
 8005640:	b003      	add	sp, #12
 8005642:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hdma->State = HAL_DMA_STATE_READY;
 8005644:	2301      	movs	r3, #1
 8005646:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
 800564a:	e7f2      	b.n	8005632 <HAL_DMA_IRQHandler+0x56e>
          if(hdma->XferHalfCpltCallback != NULL)
 800564c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800564e:	2b00      	cmp	r3, #0
 8005650:	d0f6      	beq.n	8005640 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferHalfCpltCallback(hdma);
 8005652:	4620      	mov	r0, r4
 8005654:	4798      	blx	r3
 8005656:	e7f3      	b.n	8005640 <HAL_DMA_IRQHandler+0x57c>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005658:	f012 0f20 	tst.w	r2, #32
 800565c:	d13a      	bne.n	80056d4 <HAL_DMA_IRQHandler+0x610>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800565e:	6823      	ldr	r3, [r4, #0]
 8005660:	4964      	ldr	r1, [pc, #400]	@ (80057f4 <HAL_DMA_IRQHandler+0x730>)
 8005662:	4a65      	ldr	r2, [pc, #404]	@ (80057f8 <HAL_DMA_IRQHandler+0x734>)
 8005664:	4293      	cmp	r3, r2
 8005666:	bf18      	it	ne
 8005668:	428b      	cmpne	r3, r1
 800566a:	d02f      	beq.n	80056cc <HAL_DMA_IRQHandler+0x608>
 800566c:	3218      	adds	r2, #24
 800566e:	4293      	cmp	r3, r2
 8005670:	d02c      	beq.n	80056cc <HAL_DMA_IRQHandler+0x608>
 8005672:	3218      	adds	r2, #24
 8005674:	4293      	cmp	r3, r2
 8005676:	d029      	beq.n	80056cc <HAL_DMA_IRQHandler+0x608>
 8005678:	3218      	adds	r2, #24
 800567a:	4293      	cmp	r3, r2
 800567c:	d026      	beq.n	80056cc <HAL_DMA_IRQHandler+0x608>
 800567e:	3218      	adds	r2, #24
 8005680:	4293      	cmp	r3, r2
 8005682:	d023      	beq.n	80056cc <HAL_DMA_IRQHandler+0x608>
 8005684:	3218      	adds	r2, #24
 8005686:	4293      	cmp	r3, r2
 8005688:	d020      	beq.n	80056cc <HAL_DMA_IRQHandler+0x608>
 800568a:	3218      	adds	r2, #24
 800568c:	4293      	cmp	r3, r2
 800568e:	d01d      	beq.n	80056cc <HAL_DMA_IRQHandler+0x608>
 8005690:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8005694:	4293      	cmp	r3, r2
 8005696:	d019      	beq.n	80056cc <HAL_DMA_IRQHandler+0x608>
 8005698:	3218      	adds	r2, #24
 800569a:	4293      	cmp	r3, r2
 800569c:	d016      	beq.n	80056cc <HAL_DMA_IRQHandler+0x608>
 800569e:	3218      	adds	r2, #24
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d013      	beq.n	80056cc <HAL_DMA_IRQHandler+0x608>
 80056a4:	3218      	adds	r2, #24
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d010      	beq.n	80056cc <HAL_DMA_IRQHandler+0x608>
 80056aa:	3218      	adds	r2, #24
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d00d      	beq.n	80056cc <HAL_DMA_IRQHandler+0x608>
 80056b0:	3218      	adds	r2, #24
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d00a      	beq.n	80056cc <HAL_DMA_IRQHandler+0x608>
 80056b6:	3218      	adds	r2, #24
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d007      	beq.n	80056cc <HAL_DMA_IRQHandler+0x608>
 80056bc:	3218      	adds	r2, #24
 80056be:	4293      	cmp	r3, r2
 80056c0:	d004      	beq.n	80056cc <HAL_DMA_IRQHandler+0x608>
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	f022 0204 	bic.w	r2, r2, #4
 80056c8:	601a      	str	r2, [r3, #0]
 80056ca:	e003      	b.n	80056d4 <HAL_DMA_IRQHandler+0x610>
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	f022 0208 	bic.w	r2, r2, #8
 80056d2:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 80056d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d0b2      	beq.n	8005640 <HAL_DMA_IRQHandler+0x57c>
          hdma->XferHalfCpltCallback(hdma);
 80056da:	4620      	mov	r0, r4
 80056dc:	4798      	blx	r3
 80056de:	e7af      	b.n	8005640 <HAL_DMA_IRQHandler+0x57c>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80056e0:	2002      	movs	r0, #2
 80056e2:	4088      	lsls	r0, r1
 80056e4:	ea10 0f0c 	tst.w	r0, ip
 80056e8:	d060      	beq.n	80057ac <HAL_DMA_IRQHandler+0x6e8>
 80056ea:	f012 0f02 	tst.w	r2, #2
 80056ee:	d05d      	beq.n	80057ac <HAL_DMA_IRQHandler+0x6e8>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80056f0:	6078      	str	r0, [r7, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80056f2:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 80056f6:	d00e      	beq.n	8005716 <HAL_DMA_IRQHandler+0x652>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80056f8:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 80056fc:	d105      	bne.n	800570a <HAL_DMA_IRQHandler+0x646>
          if(hdma->XferM1CpltCallback != NULL)
 80056fe:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8005700:	2b00      	cmp	r3, #0
 8005702:	d09d      	beq.n	8005640 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferM1CpltCallback(hdma);
 8005704:	4620      	mov	r0, r4
 8005706:	4798      	blx	r3
 8005708:	e79a      	b.n	8005640 <HAL_DMA_IRQHandler+0x57c>
          if(hdma->XferCpltCallback != NULL)
 800570a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800570c:	2b00      	cmp	r3, #0
 800570e:	d097      	beq.n	8005640 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferCpltCallback(hdma);
 8005710:	4620      	mov	r0, r4
 8005712:	4798      	blx	r3
 8005714:	e794      	b.n	8005640 <HAL_DMA_IRQHandler+0x57c>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005716:	f012 0f20 	tst.w	r2, #32
 800571a:	d140      	bne.n	800579e <HAL_DMA_IRQHandler+0x6da>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800571c:	6823      	ldr	r3, [r4, #0]
 800571e:	4935      	ldr	r1, [pc, #212]	@ (80057f4 <HAL_DMA_IRQHandler+0x730>)
 8005720:	4a35      	ldr	r2, [pc, #212]	@ (80057f8 <HAL_DMA_IRQHandler+0x734>)
 8005722:	4293      	cmp	r3, r2
 8005724:	bf18      	it	ne
 8005726:	428b      	cmpne	r3, r1
 8005728:	d02f      	beq.n	800578a <HAL_DMA_IRQHandler+0x6c6>
 800572a:	3218      	adds	r2, #24
 800572c:	4293      	cmp	r3, r2
 800572e:	d02c      	beq.n	800578a <HAL_DMA_IRQHandler+0x6c6>
 8005730:	3218      	adds	r2, #24
 8005732:	4293      	cmp	r3, r2
 8005734:	d029      	beq.n	800578a <HAL_DMA_IRQHandler+0x6c6>
 8005736:	3218      	adds	r2, #24
 8005738:	4293      	cmp	r3, r2
 800573a:	d026      	beq.n	800578a <HAL_DMA_IRQHandler+0x6c6>
 800573c:	3218      	adds	r2, #24
 800573e:	4293      	cmp	r3, r2
 8005740:	d023      	beq.n	800578a <HAL_DMA_IRQHandler+0x6c6>
 8005742:	3218      	adds	r2, #24
 8005744:	4293      	cmp	r3, r2
 8005746:	d020      	beq.n	800578a <HAL_DMA_IRQHandler+0x6c6>
 8005748:	3218      	adds	r2, #24
 800574a:	4293      	cmp	r3, r2
 800574c:	d01d      	beq.n	800578a <HAL_DMA_IRQHandler+0x6c6>
 800574e:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8005752:	4293      	cmp	r3, r2
 8005754:	d019      	beq.n	800578a <HAL_DMA_IRQHandler+0x6c6>
 8005756:	3218      	adds	r2, #24
 8005758:	4293      	cmp	r3, r2
 800575a:	d016      	beq.n	800578a <HAL_DMA_IRQHandler+0x6c6>
 800575c:	3218      	adds	r2, #24
 800575e:	4293      	cmp	r3, r2
 8005760:	d013      	beq.n	800578a <HAL_DMA_IRQHandler+0x6c6>
 8005762:	3218      	adds	r2, #24
 8005764:	4293      	cmp	r3, r2
 8005766:	d010      	beq.n	800578a <HAL_DMA_IRQHandler+0x6c6>
 8005768:	3218      	adds	r2, #24
 800576a:	4293      	cmp	r3, r2
 800576c:	d00d      	beq.n	800578a <HAL_DMA_IRQHandler+0x6c6>
 800576e:	3218      	adds	r2, #24
 8005770:	4293      	cmp	r3, r2
 8005772:	d00a      	beq.n	800578a <HAL_DMA_IRQHandler+0x6c6>
 8005774:	3218      	adds	r2, #24
 8005776:	4293      	cmp	r3, r2
 8005778:	d007      	beq.n	800578a <HAL_DMA_IRQHandler+0x6c6>
 800577a:	3218      	adds	r2, #24
 800577c:	4293      	cmp	r3, r2
 800577e:	d004      	beq.n	800578a <HAL_DMA_IRQHandler+0x6c6>
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	f022 020a 	bic.w	r2, r2, #10
 8005786:	601a      	str	r2, [r3, #0]
 8005788:	e003      	b.n	8005792 <HAL_DMA_IRQHandler+0x6ce>
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	f022 0214 	bic.w	r2, r2, #20
 8005790:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8005792:	2301      	movs	r3, #1
 8005794:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8005798:	2300      	movs	r3, #0
 800579a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 800579e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f43f af4d 	beq.w	8005640 <HAL_DMA_IRQHandler+0x57c>
          hdma->XferCpltCallback(hdma);
 80057a6:	4620      	mov	r0, r4
 80057a8:	4798      	blx	r3
 80057aa:	e749      	b.n	8005640 <HAL_DMA_IRQHandler+0x57c>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80057ac:	2008      	movs	r0, #8
 80057ae:	fa00 f101 	lsl.w	r1, r0, r1
 80057b2:	ea11 0f0c 	tst.w	r1, ip
 80057b6:	f43f af43 	beq.w	8005640 <HAL_DMA_IRQHandler+0x57c>
 80057ba:	f012 0f08 	tst.w	r2, #8
 80057be:	f43f af3f 	beq.w	8005640 <HAL_DMA_IRQHandler+0x57c>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	f022 020e 	bic.w	r2, r2, #14
 80057c8:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80057ca:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80057cc:	f003 031f 	and.w	r3, r3, #31
 80057d0:	2201      	movs	r2, #1
 80057d2:	fa02 f303 	lsl.w	r3, r2, r3
 80057d6:	607b      	str	r3, [r7, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80057d8:	6562      	str	r2, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_READY;
 80057da:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 80057de:	2300      	movs	r3, #0
 80057e0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      if (hdma->XferErrorCallback != NULL)
 80057e4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	f43f af2a 	beq.w	8005640 <HAL_DMA_IRQHandler+0x57c>
        hdma->XferErrorCallback(hdma);
 80057ec:	4620      	mov	r0, r4
 80057ee:	4798      	blx	r3
  }
 80057f0:	e726      	b.n	8005640 <HAL_DMA_IRQHandler+0x57c>
 80057f2:	bf00      	nop
 80057f4:	40020010 	.word	0x40020010
 80057f8:	40020028 	.word	0x40020028

080057fc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80057fc:	b430      	push	{r4, r5}
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80057fe:	6b41      	ldr	r1, [r0, #52]	@ 0x34

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005800:	6804      	ldr	r4, [r0, #0]
 8005802:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8005806:	4a6f      	ldr	r2, [pc, #444]	@ (80059c4 <FDCAN_CalcultateRamBlockAddresses+0x1c8>)
 8005808:	4013      	ands	r3, r2
 800580a:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 800580e:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005812:	6804      	ldr	r4, [r0, #0]
 8005814:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8005818:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 800581c:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 800581e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8005822:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005826:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8005828:	440b      	add	r3, r1
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800582a:	6804      	ldr	r4, [r0, #0]
 800582c:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 8005830:	4011      	ands	r1, r2
 8005832:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 8005836:	f8c4 1088 	str.w	r1, [r4, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800583a:	6804      	ldr	r4, [r0, #0]
 800583c:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 8005840:	f421 01fe 	bic.w	r1, r1, #8323072	@ 0x7f0000
 8005844:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 8005846:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800584a:	f8c4 1088 	str.w	r1, [r4, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800584e:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8005850:	eb03 0341 	add.w	r3, r3, r1, lsl #1
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005854:	6804      	ldr	r4, [r0, #0]
 8005856:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 800585a:	4011      	ands	r1, r2
 800585c:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 8005860:	f8c4 10a0 	str.w	r1, [r4, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005864:	6804      	ldr	r4, [r0, #0]
 8005866:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 800586a:	f421 01fe 	bic.w	r1, r1, #8323072	@ 0x7f0000
 800586e:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8005870:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8005874:	f8c4 10a0 	str.w	r1, [r4, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005878:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 800587a:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800587c:	fb04 3301 	mla	r3, r4, r1, r3
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005880:	6804      	ldr	r4, [r0, #0]
 8005882:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 8005886:	4011      	ands	r1, r2
 8005888:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 800588c:	f8c4 10b0 	str.w	r1, [r4, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005890:	6804      	ldr	r4, [r0, #0]
 8005892:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 8005896:	f421 01fe 	bic.w	r1, r1, #8323072	@ 0x7f0000
 800589a:	6c85      	ldr	r5, [r0, #72]	@ 0x48
 800589c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80058a0:	f8c4 10b0 	str.w	r1, [r4, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80058a4:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 80058a6:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
 80058a8:	fb04 3301 	mla	r3, r4, r1, r3
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80058ac:	6804      	ldr	r4, [r0, #0]
 80058ae:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 80058b2:	4011      	ands	r1, r2
 80058b4:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 80058b8:	f8c4 10ac 	str.w	r1, [r4, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80058bc:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 80058be:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 80058c0:	fb04 3301 	mla	r3, r4, r1, r3
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80058c4:	6804      	ldr	r4, [r0, #0]
 80058c6:	f8d4 10f0 	ldr.w	r1, [r4, #240]	@ 0xf0
 80058ca:	4011      	ands	r1, r2
 80058cc:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 80058d0:	f8c4 10f0 	str.w	r1, [r4, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80058d4:	6804      	ldr	r4, [r0, #0]
 80058d6:	f8d4 10f0 	ldr.w	r1, [r4, #240]	@ 0xf0
 80058da:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
 80058de:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 80058e0:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80058e4:	f8c4 10f0 	str.w	r1, [r4, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80058e8:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 80058ea:	eb03 0341 	add.w	r3, r3, r1, lsl #1
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80058ee:	6804      	ldr	r4, [r0, #0]
 80058f0:	f8d4 10c0 	ldr.w	r1, [r4, #192]	@ 0xc0
 80058f4:	400a      	ands	r2, r1
 80058f6:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
 80058fa:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80058fe:	6802      	ldr	r2, [r0, #0]
 8005900:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8005904:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8005908:	6dc1      	ldr	r1, [r0, #92]	@ 0x5c
 800590a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800590e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005912:	6802      	ldr	r2, [r0, #0]
 8005914:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8005918:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800591c:	6e01      	ldr	r1, [r0, #96]	@ 0x60
 800591e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005922:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005926:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8005928:	4a27      	ldr	r2, [pc, #156]	@ (80059c8 <FDCAN_CalcultateRamBlockAddresses+0x1cc>)
 800592a:	441a      	add	r2, r3
 800592c:	0092      	lsls	r2, r2, #2
 800592e:	66c2      	str	r2, [r0, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005930:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8005932:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005936:	6703      	str	r3, [r0, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005938:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 800593a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800593e:	6743      	str	r3, [r0, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005940:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8005942:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8005944:	fb04 f101 	mul.w	r1, r4, r1
 8005948:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800594c:	6783      	str	r3, [r0, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800594e:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8005950:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
 8005952:	fb04 f101 	mul.w	r1, r4, r1
 8005956:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800595a:	67c3      	str	r3, [r0, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800595c:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 800595e:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8005960:	fb04 f101 	mul.w	r1, r4, r1
 8005964:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8005968:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800596c:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 800596e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005972:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005976:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 8005978:	6dc4      	ldr	r4, [r0, #92]	@ 0x5c
 800597a:	fb01 fc04 	mul.w	ip, r1, r4
 800597e:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 8005982:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005986:	6e04      	ldr	r4, [r0, #96]	@ 0x60
 8005988:	fb04 f101 	mul.w	r1, r4, r1
 800598c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8005990:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005994:	490d      	ldr	r1, [pc, #52]	@ (80059cc <FDCAN_CalcultateRamBlockAddresses+0x1d0>)
 8005996:	428b      	cmp	r3, r1
 8005998:	d90d      	bls.n	80059b6 <FDCAN_CalcultateRamBlockAddresses+0x1ba>
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800599a:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 800599e:	f043 0320 	orr.w	r3, r3, #32
 80059a2:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80059a6:	2303      	movs	r3, #3
 80059a8:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98

    return HAL_ERROR;
 80059ac:	2001      	movs	r0, #1
 80059ae:	e007      	b.n	80059c0 <FDCAN_CalcultateRamBlockAddresses+0x1c4>
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80059b0:	2300      	movs	r3, #0
 80059b2:	f842 3b04 	str.w	r3, [r2], #4
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80059b6:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d8f8      	bhi.n	80059b0 <FDCAN_CalcultateRamBlockAddresses+0x1b4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80059be:	2000      	movs	r0, #0
}
 80059c0:	bc30      	pop	{r4, r5}
 80059c2:	4770      	bx	lr
 80059c4:	ffff0003 	.word	0xffff0003
 80059c8:	10002b00 	.word	0x10002b00
 80059cc:	4000d3fc 	.word	0x4000d3fc

080059d0 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 80059d0:	b570      	push	{r4, r5, r6, lr}
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80059d2:	684c      	ldr	r4, [r1, #4]
 80059d4:	b9f4      	cbnz	r4, 8005a14 <FDCAN_CopyMessageToRAM+0x44>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80059d6:	690d      	ldr	r5, [r1, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80059d8:	688c      	ldr	r4, [r1, #8]
                   FDCAN_STANDARD_ID |
 80059da:	4325      	orrs	r5, r4
                   (pTxHeader->Identifier << 18));
 80059dc:	680c      	ldr	r4, [r1, #0]
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80059de:	ea45 4584 	orr.w	r5, r5, r4, lsl #18
                   pTxHeader->TxFrameType |
                   pTxHeader->Identifier);
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80059e2:	6a0e      	ldr	r6, [r1, #32]
                 pTxHeader->TxEventFifoControl |
 80059e4:	69cc      	ldr	r4, [r1, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80059e6:	ea44 6406 	orr.w	r4, r4, r6, lsl #24
                 pTxHeader->FDFormat |
 80059ea:	698e      	ldr	r6, [r1, #24]
                 pTxHeader->TxEventFifoControl |
 80059ec:	4334      	orrs	r4, r6
                 pTxHeader->BitRateSwitch |
 80059ee:	694e      	ldr	r6, [r1, #20]
                 pTxHeader->FDFormat |
 80059f0:	4334      	orrs	r4, r6
                 pTxHeader->DataLength);
 80059f2:	68ce      	ldr	r6, [r1, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80059f4:	4334      	orrs	r4, r6

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80059f6:	f8d0 6084 	ldr.w	r6, [r0, #132]	@ 0x84
 80059fa:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80059fc:	fb00 f303 	mul.w	r3, r0, r3
 8005a00:	eb06 0e83 	add.w	lr, r6, r3, lsl #2

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8005a04:	f846 5023 	str.w	r5, [r6, r3, lsl #2]
  TxAddress++;
  *TxAddress = TxElementW2;
 8005a08:	f8ce 4004 	str.w	r4, [lr, #4]
  TxAddress++;
 8005a0c:	f10e 0e08 	add.w	lr, lr, #8

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8005a10:	2000      	movs	r0, #0
 8005a12:	e019      	b.n	8005a48 <FDCAN_CopyMessageToRAM+0x78>
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005a14:	690c      	ldr	r4, [r1, #16]
                   pTxHeader->TxFrameType |
 8005a16:	688d      	ldr	r5, [r1, #8]
                   FDCAN_EXTENDED_ID |
 8005a18:	4325      	orrs	r5, r4
                   pTxHeader->Identifier);
 8005a1a:	680c      	ldr	r4, [r1, #0]
                   pTxHeader->TxFrameType |
 8005a1c:	4325      	orrs	r5, r4
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005a1e:	f045 4580 	orr.w	r5, r5, #1073741824	@ 0x40000000
 8005a22:	e7de      	b.n	80059e2 <FDCAN_CopyMessageToRAM+0x12>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8005a24:	eb02 0c00 	add.w	ip, r2, r0
 8005a28:	f89c 4003 	ldrb.w	r4, [ip, #3]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8005a2c:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8005a30:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8005a32:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8005a36:	f89c 4001 	ldrb.w	r4, [ip, #1]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8005a3a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
                  (uint32_t)pTxData[ByteCounter]);
 8005a3e:	5c14      	ldrb	r4, [r2, r0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8005a40:	4323      	orrs	r3, r4
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8005a42:	f84e 3b04 	str.w	r3, [lr], #4
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8005a46:	3004      	adds	r0, #4
 8005a48:	89cb      	ldrh	r3, [r1, #14]
 8005a4a:	4c02      	ldr	r4, [pc, #8]	@ (8005a54 <FDCAN_CopyMessageToRAM+0x84>)
 8005a4c:	5ce3      	ldrb	r3, [r4, r3]
 8005a4e:	4283      	cmp	r3, r0
 8005a50:	d8e8      	bhi.n	8005a24 <FDCAN_CopyMessageToRAM+0x54>
    TxAddress++;
  }
}
 8005a52:	bd70      	pop	{r4, r5, r6, pc}
 8005a54:	0801b36c 	.word	0x0801b36c

08005a58 <HAL_FDCAN_Init>:
{
 8005a58:	b530      	push	{r4, r5, lr}
 8005a5a:	b095      	sub	sp, #84	@ 0x54
 8005a5c:	4604      	mov	r4, r0
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8005a5e:	224c      	movs	r2, #76	@ 0x4c
 8005a60:	49a0      	ldr	r1, [pc, #640]	@ (8005ce4 <HAL_FDCAN_Init+0x28c>)
 8005a62:	a801      	add	r0, sp, #4
 8005a64:	f015 fafa 	bl	801b05c <memcpy>
  if (hfdcan == NULL)
 8005a68:	2c00      	cmp	r4, #0
 8005a6a:	f000 8138 	beq.w	8005cde <HAL_FDCAN_Init+0x286>
  if (hfdcan->Instance == FDCAN1)
 8005a6e:	6823      	ldr	r3, [r4, #0]
 8005a70:	4a9d      	ldr	r2, [pc, #628]	@ (8005ce8 <HAL_FDCAN_Init+0x290>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d020      	beq.n	8005ab8 <HAL_FDCAN_Init+0x60>
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005a76:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
 8005a7a:	b30b      	cbz	r3, 8005ac0 <HAL_FDCAN_Init+0x68>
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005a7c:	6822      	ldr	r2, [r4, #0]
 8005a7e:	6993      	ldr	r3, [r2, #24]
 8005a80:	f023 0310 	bic.w	r3, r3, #16
 8005a84:	6193      	str	r3, [r2, #24]
  tickstart = HAL_GetTick();
 8005a86:	f7fd fcf9 	bl	800347c <HAL_GetTick>
 8005a8a:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005a8c:	6823      	ldr	r3, [r4, #0]
 8005a8e:	699a      	ldr	r2, [r3, #24]
 8005a90:	f012 0f08 	tst.w	r2, #8
 8005a94:	d01a      	beq.n	8005acc <HAL_FDCAN_Init+0x74>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005a96:	f7fd fcf1 	bl	800347c <HAL_GetTick>
 8005a9a:	1b43      	subs	r3, r0, r5
 8005a9c:	2b0a      	cmp	r3, #10
 8005a9e:	d9f5      	bls.n	8005a8c <HAL_FDCAN_Init+0x34>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005aa0:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8005aa4:	f043 0301 	orr.w	r3, r3, #1
 8005aa8:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005aac:	2303      	movs	r3, #3
 8005aae:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
      return HAL_ERROR;
 8005ab2:	2001      	movs	r0, #1
}
 8005ab4:	b015      	add	sp, #84	@ 0x54
 8005ab6:	bd30      	pop	{r4, r5, pc}
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8005ab8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005abc:	6063      	str	r3, [r4, #4]
 8005abe:	e7da      	b.n	8005a76 <HAL_FDCAN_Init+0x1e>
    hfdcan->Lock = HAL_UNLOCKED;
 8005ac0:	f884 3099 	strb.w	r3, [r4, #153]	@ 0x99
    HAL_FDCAN_MspInit(hfdcan);
 8005ac4:	4620      	mov	r0, r4
 8005ac6:	f7fc fcbb 	bl	8002440 <HAL_FDCAN_MspInit>
 8005aca:	e7d7      	b.n	8005a7c <HAL_FDCAN_Init+0x24>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005acc:	699a      	ldr	r2, [r3, #24]
 8005ace:	f042 0201 	orr.w	r2, r2, #1
 8005ad2:	619a      	str	r2, [r3, #24]
  tickstart = HAL_GetTick();
 8005ad4:	f7fd fcd2 	bl	800347c <HAL_GetTick>
 8005ad8:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005ada:	6823      	ldr	r3, [r4, #0]
 8005adc:	699a      	ldr	r2, [r3, #24]
 8005ade:	f012 0f01 	tst.w	r2, #1
 8005ae2:	d10f      	bne.n	8005b04 <HAL_FDCAN_Init+0xac>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005ae4:	f7fd fcca 	bl	800347c <HAL_GetTick>
 8005ae8:	1b40      	subs	r0, r0, r5
 8005aea:	280a      	cmp	r0, #10
 8005aec:	d9f5      	bls.n	8005ada <HAL_FDCAN_Init+0x82>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005aee:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8005af2:	f043 0301 	orr.w	r3, r3, #1
 8005af6:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005afa:	2303      	movs	r3, #3
 8005afc:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
      return HAL_ERROR;
 8005b00:	2001      	movs	r0, #1
 8005b02:	e7d7      	b.n	8005ab4 <HAL_FDCAN_Init+0x5c>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005b04:	699a      	ldr	r2, [r3, #24]
 8005b06:	f042 0202 	orr.w	r2, r2, #2
 8005b0a:	619a      	str	r2, [r3, #24]
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005b0c:	7c23      	ldrb	r3, [r4, #16]
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d040      	beq.n	8005b94 <HAL_FDCAN_Init+0x13c>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005b12:	6822      	ldr	r2, [r4, #0]
 8005b14:	6993      	ldr	r3, [r2, #24]
 8005b16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b1a:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005b1c:	7c63      	ldrb	r3, [r4, #17]
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d03e      	beq.n	8005ba0 <HAL_FDCAN_Init+0x148>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005b22:	6822      	ldr	r2, [r4, #0]
 8005b24:	6993      	ldr	r3, [r2, #24]
 8005b26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b2a:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005b2c:	7ca3      	ldrb	r3, [r4, #18]
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d03c      	beq.n	8005bac <HAL_FDCAN_Init+0x154>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005b32:	6822      	ldr	r2, [r4, #0]
 8005b34:	6993      	ldr	r3, [r2, #24]
 8005b36:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005b3a:	6193      	str	r3, [r2, #24]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005b3c:	6822      	ldr	r2, [r4, #0]
 8005b3e:	6993      	ldr	r3, [r2, #24]
 8005b40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b44:	68a1      	ldr	r1, [r4, #8]
 8005b46:	430b      	orrs	r3, r1
 8005b48:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005b4a:	6822      	ldr	r2, [r4, #0]
 8005b4c:	6993      	ldr	r3, [r2, #24]
 8005b4e:	f023 03a4 	bic.w	r3, r3, #164	@ 0xa4
 8005b52:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005b54:	6822      	ldr	r2, [r4, #0]
 8005b56:	6913      	ldr	r3, [r2, #16]
 8005b58:	f023 0310 	bic.w	r3, r3, #16
 8005b5c:	6113      	str	r3, [r2, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005b5e:	68e3      	ldr	r3, [r4, #12]
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d029      	beq.n	8005bb8 <HAL_FDCAN_Init+0x160>
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d02c      	beq.n	8005bc2 <HAL_FDCAN_Init+0x16a>
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	f000 809b 	beq.w	8005ca4 <HAL_FDCAN_Init+0x24c>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005b6e:	6822      	ldr	r2, [r4, #0]
 8005b70:	6993      	ldr	r3, [r2, #24]
 8005b72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b76:	6193      	str	r3, [r2, #24]
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005b78:	6822      	ldr	r2, [r4, #0]
 8005b7a:	6913      	ldr	r3, [r2, #16]
 8005b7c:	f043 0310 	orr.w	r3, r3, #16
 8005b80:	6113      	str	r3, [r2, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005b82:	68e3      	ldr	r3, [r4, #12]
 8005b84:	2b03      	cmp	r3, #3
 8005b86:	d11c      	bne.n	8005bc2 <HAL_FDCAN_Init+0x16a>
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005b88:	6822      	ldr	r2, [r4, #0]
 8005b8a:	6993      	ldr	r3, [r2, #24]
 8005b8c:	f043 0320 	orr.w	r3, r3, #32
 8005b90:	6193      	str	r3, [r2, #24]
 8005b92:	e016      	b.n	8005bc2 <HAL_FDCAN_Init+0x16a>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005b94:	6822      	ldr	r2, [r4, #0]
 8005b96:	6993      	ldr	r3, [r2, #24]
 8005b98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b9c:	6193      	str	r3, [r2, #24]
 8005b9e:	e7bd      	b.n	8005b1c <HAL_FDCAN_Init+0xc4>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005ba0:	6822      	ldr	r2, [r4, #0]
 8005ba2:	6993      	ldr	r3, [r2, #24]
 8005ba4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005ba8:	6193      	str	r3, [r2, #24]
 8005baa:	e7bf      	b.n	8005b2c <HAL_FDCAN_Init+0xd4>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005bac:	6822      	ldr	r2, [r4, #0]
 8005bae:	6993      	ldr	r3, [r2, #24]
 8005bb0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005bb4:	6193      	str	r3, [r2, #24]
 8005bb6:	e7c1      	b.n	8005b3c <HAL_FDCAN_Init+0xe4>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005bb8:	6822      	ldr	r2, [r4, #0]
 8005bba:	6993      	ldr	r3, [r2, #24]
 8005bbc:	f043 0304 	orr.w	r3, r3, #4
 8005bc0:	6193      	str	r3, [r2, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005bc2:	69a3      	ldr	r3, [r4, #24]
 8005bc4:	1e5a      	subs	r2, r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005bc6:	69e3      	ldr	r3, [r4, #28]
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005bcc:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005bd0:	6a22      	ldr	r2, [r4, #32]
 8005bd2:	3a01      	subs	r2, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005bd4:	4313      	orrs	r3, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005bd6:	6962      	ldr	r2, [r4, #20]
 8005bd8:	3a01      	subs	r2, #1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005bda:	6821      	ldr	r1, [r4, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005bdc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005be0:	61cb      	str	r3, [r1, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005be2:	68a3      	ldr	r3, [r4, #8]
 8005be4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005be8:	d062      	beq.n	8005cb0 <HAL_FDCAN_Init+0x258>
  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8005bea:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8005bec:	b133      	cbz	r3, 8005bfc <HAL_FDCAN_Init+0x1a4>
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005bee:	6822      	ldr	r2, [r4, #0]
 8005bf0:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8005bf4:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8005bf6:	430b      	orrs	r3, r1
 8005bf8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8005bfc:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005bfe:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8005c00:	42d3      	cmn	r3, r2
 8005c02:	d00d      	beq.n	8005c20 <HAL_FDCAN_Init+0x1c8>
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8005c04:	6821      	ldr	r1, [r4, #0]
 8005c06:	f8d1 30c8 	ldr.w	r3, [r1, #200]	@ 0xc8
 8005c0a:	f023 0307 	bic.w	r3, r3, #7
 8005c0e:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 8005c10:	a814      	add	r0, sp, #80	@ 0x50
 8005c12:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005c16:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	f8c1 30c8 	str.w	r3, [r1, #200]	@ 0xc8
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8005c20:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005c22:	b16b      	cbz	r3, 8005c40 <HAL_FDCAN_Init+0x1e8>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8005c24:	6821      	ldr	r1, [r4, #0]
 8005c26:	f8d1 30bc 	ldr.w	r3, [r1, #188]	@ 0xbc
 8005c2a:	f023 0307 	bic.w	r3, r3, #7
 8005c2e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8005c30:	a814      	add	r0, sp, #80	@ 0x50
 8005c32:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005c36:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	f8c1 30bc 	str.w	r3, [r1, #188]	@ 0xbc
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8005c40:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8005c42:	b173      	cbz	r3, 8005c62 <HAL_FDCAN_Init+0x20a>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8005c44:	6821      	ldr	r1, [r4, #0]
 8005c46:	f8d1 30bc 	ldr.w	r3, [r1, #188]	@ 0xbc
 8005c4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c4e:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 8005c50:	a814      	add	r0, sp, #80	@ 0x50
 8005c52:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005c56:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8005c5a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8005c5e:	f8c1 30bc 	str.w	r3, [r1, #188]	@ 0xbc
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005c62:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8005c64:	b173      	cbz	r3, 8005c84 <HAL_FDCAN_Init+0x22c>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8005c66:	6821      	ldr	r1, [r4, #0]
 8005c68:	f8d1 30bc 	ldr.w	r3, [r1, #188]	@ 0xbc
 8005c6c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005c70:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005c72:	a814      	add	r0, sp, #80	@ 0x50
 8005c74:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005c78:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8005c7c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005c80:	f8c1 30bc 	str.w	r3, [r1, #188]	@ 0xbc
  if (hfdcan->Instance == FDCAN1)
 8005c84:	6822      	ldr	r2, [r4, #0]
 8005c86:	4b18      	ldr	r3, [pc, #96]	@ (8005ce8 <HAL_FDCAN_Init+0x290>)
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d022      	beq.n	8005cd2 <HAL_FDCAN_Init+0x27a>
  hfdcan->LatestTxFifoQRequest = 0U;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005c92:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005c96:	2301      	movs	r3, #1
 8005c98:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005c9c:	4620      	mov	r0, r4
 8005c9e:	f7ff fdad 	bl	80057fc <FDCAN_CalcultateRamBlockAddresses>
  return status;
 8005ca2:	e707      	b.n	8005ab4 <HAL_FDCAN_Init+0x5c>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005ca4:	6822      	ldr	r2, [r4, #0]
 8005ca6:	6993      	ldr	r3, [r2, #24]
 8005ca8:	f043 0320 	orr.w	r3, r3, #32
 8005cac:	6193      	str	r3, [r2, #24]
 8005cae:	e788      	b.n	8005bc2 <HAL_FDCAN_Init+0x16a>
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005cb0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005cb2:	3b01      	subs	r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005cb4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005cb6:	3a01      	subs	r2, #1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005cb8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005cbc:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8005cbe:	3a01      	subs	r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005cc0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005cc4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005cc6:	3a01      	subs	r2, #1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005cc8:	6821      	ldr	r1, [r4, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005cca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005cce:	60cb      	str	r3, [r1, #12]
 8005cd0:	e78b      	b.n	8005bea <HAL_FDCAN_Init+0x192>
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005cd2:	6862      	ldr	r2, [r4, #4]
 8005cd4:	6893      	ldr	r3, [r2, #8]
 8005cd6:	f023 0303 	bic.w	r3, r3, #3
 8005cda:	6093      	str	r3, [r2, #8]
 8005cdc:	e7d6      	b.n	8005c8c <HAL_FDCAN_Init+0x234>
    return HAL_ERROR;
 8005cde:	2001      	movs	r0, #1
 8005ce0:	e6e8      	b.n	8005ab4 <HAL_FDCAN_Init+0x5c>
 8005ce2:	bf00      	nop
 8005ce4:	0801b128 	.word	0x0801b128
 8005ce8:	4000a000 	.word	0x4000a000

08005cec <HAL_FDCAN_ConfigGlobalFilter>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005cec:	f890 c098 	ldrb.w	ip, [r0, #152]	@ 0x98
 8005cf0:	fa5f fc8c 	uxtb.w	ip, ip
 8005cf4:	f1bc 0f01 	cmp.w	ip, #1
 8005cf8:	d007      	beq.n	8005d0a <HAL_FDCAN_ConfigGlobalFilter+0x1e>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005cfa:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8005cfe:	f043 0304 	orr.w	r3, r3, #4
 8005d02:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
    return HAL_ERROR;
 8005d06:	2001      	movs	r0, #1
}
 8005d08:	4770      	bx	lr
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8005d0a:	0092      	lsls	r2, r2, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8005d0c:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8005d10:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8005d14:	6801      	ldr	r1, [r0, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8005d16:	9a00      	ldr	r2, [sp, #0]
 8005d18:	431a      	orrs	r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8005d1a:	f8c1 2080 	str.w	r2, [r1, #128]	@ 0x80
    return HAL_OK;
 8005d1e:	2000      	movs	r0, #0
 8005d20:	4770      	bx	lr

08005d22 <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005d22:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d007      	beq.n	8005d3c <HAL_FDCAN_Start+0x1a>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005d2c:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8005d30:	f043 0304 	orr.w	r3, r3, #4
 8005d34:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
    return HAL_ERROR;
 8005d38:	2001      	movs	r0, #1
}
 8005d3a:	4770      	bx	lr
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005d42:	6802      	ldr	r2, [r0, #0]
 8005d44:	6993      	ldr	r3, [r2, #24]
 8005d46:	f023 0301 	bic.w	r3, r3, #1
 8005d4a:	6193      	str	r3, [r2, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
    return HAL_OK;
 8005d52:	4618      	mov	r0, r3
 8005d54:	4770      	bx	lr

08005d56 <HAL_FDCAN_AddMessageToTxFifoQ>:
{
 8005d56:	b538      	push	{r3, r4, r5, lr}
 8005d58:	4604      	mov	r4, r0
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005d5a:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d12b      	bne.n	8005dbc <HAL_FDCAN_AddMessageToTxFifoQ+0x66>
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8005d64:	6803      	ldr	r3, [r0, #0]
 8005d66:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8005d6a:	f010 5f7c 	tst.w	r0, #1056964608	@ 0x3f000000
 8005d6e:	d00c      	beq.n	8005d8a <HAL_FDCAN_AddMessageToTxFifoQ+0x34>
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8005d70:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8005d74:	f410 1f00 	tst.w	r0, #2097152	@ 0x200000
 8005d78:	d00f      	beq.n	8005d9a <HAL_FDCAN_AddMessageToTxFifoQ+0x44>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8005d7a:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8005d7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005d82:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
      return HAL_ERROR;
 8005d86:	2001      	movs	r0, #1
 8005d88:	e01f      	b.n	8005dca <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005d8a:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8005d8e:	f043 0320 	orr.w	r3, r3, #32
 8005d92:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
      return HAL_ERROR;
 8005d96:	2001      	movs	r0, #1
 8005d98:	e017      	b.n	8005dca <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8005d9a:	f8d3 50c4 	ldr.w	r5, [r3, #196]	@ 0xc4
 8005d9e:	f3c5 4504 	ubfx	r5, r5, #16, #5
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8005da2:	462b      	mov	r3, r5
 8005da4:	4620      	mov	r0, r4
 8005da6:	f7ff fe13 	bl	80059d0 <FDCAN_CopyMessageToRAM>
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8005daa:	6822      	ldr	r2, [r4, #0]
 8005dac:	2301      	movs	r3, #1
 8005dae:	40ab      	lsls	r3, r5
 8005db0:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8005db4:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
    return HAL_OK;
 8005db8:	2000      	movs	r0, #0
 8005dba:	e006      	b.n	8005dca <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005dbc:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8005dc0:	f043 0308 	orr.w	r3, r3, #8
 8005dc4:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
    return HAL_ERROR;
 8005dc8:	2001      	movs	r0, #1
}
 8005dca:	bd38      	pop	{r3, r4, r5, pc}

08005dcc <HAL_FDCAN_GetRxMessage>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005dcc:	f890 c098 	ldrb.w	ip, [r0, #152]	@ 0x98
 8005dd0:	fa5f fc8c 	uxtb.w	ip, ip
  if (state == HAL_FDCAN_STATE_BUSY)
 8005dd4:	f1bc 0f02 	cmp.w	ip, #2
 8005dd8:	f040 80db 	bne.w	8005f92 <HAL_FDCAN_GetRxMessage+0x1c6>
{
 8005ddc:	b570      	push	{r4, r5, r6, lr}
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005dde:	2940      	cmp	r1, #64	@ 0x40
 8005de0:	d00c      	beq.n	8005dfc <HAL_FDCAN_GetRxMessage+0x30>
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005de2:	2941      	cmp	r1, #65	@ 0x41
 8005de4:	d03b      	beq.n	8005e5e <HAL_FDCAN_GetRxMessage+0x92>
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8005de6:	6d04      	ldr	r4, [r0, #80]	@ 0x50
 8005de8:	428c      	cmp	r4, r1
 8005dea:	d869      	bhi.n	8005ec0 <HAL_FDCAN_GetRxMessage+0xf4>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005dec:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8005df0:	f043 0320 	orr.w	r3, r3, #32
 8005df4:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
        return HAL_ERROR;
 8005df8:	2001      	movs	r0, #1
 8005dfa:	e0bd      	b.n	8005f78 <HAL_FDCAN_GetRxMessage+0x1ac>
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8005dfc:	6804      	ldr	r4, [r0, #0]
 8005dfe:	f8d4 50a0 	ldr.w	r5, [r4, #160]	@ 0xa0
 8005e02:	f415 0ffe 	tst.w	r5, #8323072	@ 0x7f0000
 8005e06:	d00c      	beq.n	8005e22 <HAL_FDCAN_GetRxMessage+0x56>
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005e08:	f8d4 50a4 	ldr.w	r5, [r4, #164]	@ 0xa4
 8005e0c:	f015 0f7f 	tst.w	r5, #127	@ 0x7f
 8005e10:	d10f      	bne.n	8005e32 <HAL_FDCAN_GetRxMessage+0x66>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005e12:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8005e16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e1a:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
        return HAL_ERROR;
 8005e1e:	2001      	movs	r0, #1
 8005e20:	e0aa      	b.n	8005f78 <HAL_FDCAN_GetRxMessage+0x1ac>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005e22:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8005e26:	f043 0320 	orr.w	r3, r3, #32
 8005e2a:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
        return HAL_ERROR;
 8005e2e:	2001      	movs	r0, #1
 8005e30:	e0a2      	b.n	8005f78 <HAL_FDCAN_GetRxMessage+0x1ac>
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8005e32:	f8d4 50a4 	ldr.w	r5, [r4, #164]	@ 0xa4
 8005e36:	f3c5 6600 	ubfx	r6, r5, #24, #1
 8005e3a:	f015 7f80 	tst.w	r5, #16777216	@ 0x1000000
 8005e3e:	d002      	beq.n	8005e46 <HAL_FDCAN_GetRxMessage+0x7a>
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005e40:	f8d4 50a0 	ldr.w	r5, [r4, #160]	@ 0xa0
  uint32_t GetIndex = 0;
 8005e44:	2600      	movs	r6, #0
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005e46:	f8d4 40a4 	ldr.w	r4, [r4, #164]	@ 0xa4
 8005e4a:	f3c4 2405 	ubfx	r4, r4, #8, #6
 8005e4e:	4426      	add	r6, r4
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8005e50:	6f45      	ldr	r5, [r0, #116]	@ 0x74
 8005e52:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8005e54:	fb06 f404 	mul.w	r4, r6, r4
 8005e58:	eb05 0e84 	add.w	lr, r5, r4, lsl #2
 8005e5c:	e037      	b.n	8005ece <HAL_FDCAN_GetRxMessage+0x102>
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8005e5e:	6804      	ldr	r4, [r0, #0]
 8005e60:	f8d4 50b0 	ldr.w	r5, [r4, #176]	@ 0xb0
 8005e64:	f415 0ffe 	tst.w	r5, #8323072	@ 0x7f0000
 8005e68:	d00c      	beq.n	8005e84 <HAL_FDCAN_GetRxMessage+0xb8>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005e6a:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 8005e6e:	f015 0f7f 	tst.w	r5, #127	@ 0x7f
 8005e72:	d10f      	bne.n	8005e94 <HAL_FDCAN_GetRxMessage+0xc8>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005e74:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8005e78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e7c:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
        return HAL_ERROR;
 8005e80:	2001      	movs	r0, #1
 8005e82:	e079      	b.n	8005f78 <HAL_FDCAN_GetRxMessage+0x1ac>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005e84:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8005e88:	f043 0320 	orr.w	r3, r3, #32
 8005e8c:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
        return HAL_ERROR;
 8005e90:	2001      	movs	r0, #1
 8005e92:	e071      	b.n	8005f78 <HAL_FDCAN_GetRxMessage+0x1ac>
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8005e94:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 8005e98:	f3c5 6600 	ubfx	r6, r5, #24, #1
 8005e9c:	f015 7f80 	tst.w	r5, #16777216	@ 0x1000000
 8005ea0:	d002      	beq.n	8005ea8 <HAL_FDCAN_GetRxMessage+0xdc>
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005ea2:	f8d4 50b0 	ldr.w	r5, [r4, #176]	@ 0xb0
  uint32_t GetIndex = 0;
 8005ea6:	2600      	movs	r6, #0
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005ea8:	f8d4 40b4 	ldr.w	r4, [r4, #180]	@ 0xb4
 8005eac:	f3c4 2405 	ubfx	r4, r4, #8, #6
 8005eb0:	4426      	add	r6, r4
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8005eb2:	6f85      	ldr	r5, [r0, #120]	@ 0x78
 8005eb4:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
 8005eb6:	fb06 f404 	mul.w	r4, r6, r4
 8005eba:	eb05 0e84 	add.w	lr, r5, r4, lsl #2
 8005ebe:	e006      	b.n	8005ece <HAL_FDCAN_GetRxMessage+0x102>
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8005ec0:	6fc5      	ldr	r5, [r0, #124]	@ 0x7c
 8005ec2:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8005ec4:	fb01 f404 	mul.w	r4, r1, r4
 8005ec8:	eb05 0e84 	add.w	lr, r5, r4, lsl #2
  uint32_t GetIndex = 0;
 8005ecc:	2600      	movs	r6, #0
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005ece:	f8de 4000 	ldr.w	r4, [lr]
 8005ed2:	f004 4480 	and.w	r4, r4, #1073741824	@ 0x40000000
 8005ed6:	6054      	str	r4, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005ed8:	bb64      	cbnz	r4, 8005f34 <HAL_FDCAN_GetRxMessage+0x168>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8005eda:	f8de 4000 	ldr.w	r4, [lr]
 8005ede:	f3c4 448a 	ubfx	r4, r4, #18, #11
 8005ee2:	6014      	str	r4, [r2, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005ee4:	f8de 4000 	ldr.w	r4, [lr]
 8005ee8:	f004 5400 	and.w	r4, r4, #536870912	@ 0x20000000
 8005eec:	6094      	str	r4, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8005eee:	f8de 4000 	ldr.w	r4, [lr]
 8005ef2:	f004 4400 	and.w	r4, r4, #2147483648	@ 0x80000000
 8005ef6:	6114      	str	r4, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005ef8:	f8be 4004 	ldrh.w	r4, [lr, #4]
 8005efc:	61d4      	str	r4, [r2, #28]
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8005efe:	f8de 4004 	ldr.w	r4, [lr, #4]
 8005f02:	f404 2470 	and.w	r4, r4, #983040	@ 0xf0000
 8005f06:	60d4      	str	r4, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005f08:	f8de 4004 	ldr.w	r4, [lr, #4]
 8005f0c:	f404 1480 	and.w	r4, r4, #1048576	@ 0x100000
 8005f10:	6154      	str	r4, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005f12:	f8de 4004 	ldr.w	r4, [lr, #4]
 8005f16:	f404 1400 	and.w	r4, r4, #2097152	@ 0x200000
 8005f1a:	6194      	str	r4, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8005f1c:	f89e 4007 	ldrb.w	r4, [lr, #7]
 8005f20:	f004 047f 	and.w	r4, r4, #127	@ 0x7f
 8005f24:	6214      	str	r4, [r2, #32]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8005f26:	f8de 4004 	ldr.w	r4, [lr, #4]
 8005f2a:	0fe4      	lsrs	r4, r4, #31
 8005f2c:	6254      	str	r4, [r2, #36]	@ 0x24
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8005f2e:	f04f 0c00 	mov.w	ip, #0
 8005f32:	e00c      	b.n	8005f4e <HAL_FDCAN_GetRxMessage+0x182>
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005f34:	f8de 4000 	ldr.w	r4, [lr]
 8005f38:	f024 4460 	bic.w	r4, r4, #3758096384	@ 0xe0000000
 8005f3c:	6014      	str	r4, [r2, #0]
 8005f3e:	e7d1      	b.n	8005ee4 <HAL_FDCAN_GetRxMessage+0x118>
      pRxData[ByteCounter] = pData[ByteCounter];
 8005f40:	eb0e 040c 	add.w	r4, lr, ip
 8005f44:	7a24      	ldrb	r4, [r4, #8]
 8005f46:	f803 400c 	strb.w	r4, [r3, ip]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8005f4a:	f10c 0c01 	add.w	ip, ip, #1
 8005f4e:	89d4      	ldrh	r4, [r2, #14]
 8005f50:	4d14      	ldr	r5, [pc, #80]	@ (8005fa4 <HAL_FDCAN_GetRxMessage+0x1d8>)
 8005f52:	5d2c      	ldrb	r4, [r5, r4]
 8005f54:	4564      	cmp	r4, ip
 8005f56:	d8f3      	bhi.n	8005f40 <HAL_FDCAN_GetRxMessage+0x174>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005f58:	2940      	cmp	r1, #64	@ 0x40
 8005f5a:	d009      	beq.n	8005f70 <HAL_FDCAN_GetRxMessage+0x1a4>
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005f5c:	2941      	cmp	r1, #65	@ 0x41
 8005f5e:	d00c      	beq.n	8005f7a <HAL_FDCAN_GetRxMessage+0x1ae>
      if (RxLocation < FDCAN_RX_BUFFER32)
 8005f60:	291f      	cmp	r1, #31
 8005f62:	d80e      	bhi.n	8005f82 <HAL_FDCAN_GetRxMessage+0x1b6>
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8005f64:	6802      	ldr	r2, [r0, #0]
 8005f66:	2301      	movs	r3, #1
 8005f68:	408b      	lsls	r3, r1
 8005f6a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
 8005f6e:	e002      	b.n	8005f76 <HAL_FDCAN_GetRxMessage+0x1aa>
      hfdcan->Instance->RXF0A = GetIndex;
 8005f70:	6803      	ldr	r3, [r0, #0]
 8005f72:	f8c3 60a8 	str.w	r6, [r3, #168]	@ 0xa8
    return HAL_OK;
 8005f76:	2000      	movs	r0, #0
}
 8005f78:	bd70      	pop	{r4, r5, r6, pc}
      hfdcan->Instance->RXF1A = GetIndex;
 8005f7a:	6803      	ldr	r3, [r0, #0]
 8005f7c:	f8c3 60b8 	str.w	r6, [r3, #184]	@ 0xb8
 8005f80:	e7f9      	b.n	8005f76 <HAL_FDCAN_GetRxMessage+0x1aa>
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8005f82:	f001 011f 	and.w	r1, r1, #31
 8005f86:	6802      	ldr	r2, [r0, #0]
 8005f88:	2301      	movs	r3, #1
 8005f8a:	408b      	lsls	r3, r1
 8005f8c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8005f90:	e7f1      	b.n	8005f76 <HAL_FDCAN_GetRxMessage+0x1aa>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005f92:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8005f96:	f043 0308 	orr.w	r3, r3, #8
 8005f9a:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
    return HAL_ERROR;
 8005f9e:	2001      	movs	r0, #1
}
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	0801b36c 	.word	0x0801b36c

08005fa8 <HAL_FDCAN_ActivateNotification>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005fa8:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005fac:	3b01      	subs	r3, #1
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d907      	bls.n	8005fc4 <HAL_FDCAN_ActivateNotification+0x1c>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005fb4:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8005fb8:	f043 0302 	orr.w	r3, r3, #2
 8005fbc:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
    return HAL_ERROR;
 8005fc0:	2001      	movs	r0, #1
}
 8005fc2:	4770      	bx	lr
{
 8005fc4:	b410      	push	{r4}
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8005fc6:	6803      	ldr	r3, [r0, #0]
 8005fc8:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
 8005fca:	420c      	tst	r4, r1
 8005fcc:	d124      	bne.n	8006018 <HAL_FDCAN_ActivateNotification+0x70>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8005fce:	6ddc      	ldr	r4, [r3, #92]	@ 0x5c
 8005fd0:	f044 0401 	orr.w	r4, r4, #1
 8005fd4:	65dc      	str	r4, [r3, #92]	@ 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8005fd6:	f411 7f00 	tst.w	r1, #512	@ 0x200
 8005fda:	d005      	beq.n	8005fe8 <HAL_FDCAN_ActivateNotification+0x40>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005fdc:	6804      	ldr	r4, [r0, #0]
 8005fde:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005fe8:	f411 6f80 	tst.w	r1, #1024	@ 0x400
 8005fec:	d005      	beq.n	8005ffa <HAL_FDCAN_ActivateNotification+0x52>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8005fee:	6804      	ldr	r4, [r0, #0]
 8005ff0:	f8d4 30e4 	ldr.w	r3, [r4, #228]	@ 0xe4
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	f8c4 30e4 	str.w	r3, [r4, #228]	@ 0xe4
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8005ffa:	6800      	ldr	r0, [r0, #0]
 8005ffc:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8005ffe:	4a0c      	ldr	r2, [pc, #48]	@ (8006030 <HAL_FDCAN_ActivateNotification+0x88>)
 8006000:	400a      	ands	r2, r1
 8006002:	4313      	orrs	r3, r2
 8006004:	6543      	str	r3, [r0, #84]	@ 0x54
 8006006:	4a0b      	ldr	r2, [pc, #44]	@ (8006034 <HAL_FDCAN_ActivateNotification+0x8c>)
 8006008:	6953      	ldr	r3, [r2, #20]
 800600a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800600e:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 8006010:	2000      	movs	r0, #0
}
 8006012:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006016:	4770      	bx	lr
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8006018:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
 800601a:	ea31 0404 	bics.w	r4, r1, r4
 800601e:	d002      	beq.n	8006026 <HAL_FDCAN_ActivateNotification+0x7e>
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8006020:	2403      	movs	r4, #3
 8006022:	65dc      	str	r4, [r3, #92]	@ 0x5c
 8006024:	e7d7      	b.n	8005fd6 <HAL_FDCAN_ActivateNotification+0x2e>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8006026:	6ddc      	ldr	r4, [r3, #92]	@ 0x5c
 8006028:	f044 0402 	orr.w	r4, r4, #2
 800602c:	65dc      	str	r4, [r3, #92]	@ 0x5c
 800602e:	e7d2      	b.n	8005fd6 <HAL_FDCAN_ActivateNotification+0x2e>
 8006030:	3fcfffff 	.word	0x3fcfffff
 8006034:	4000a800 	.word	0x4000a800

08006038 <HAL_FDCAN_ClockCalibrationCallback>:
}
 8006038:	4770      	bx	lr

0800603a <HAL_FDCAN_TxEventFifoCallback>:
}
 800603a:	4770      	bx	lr

0800603c <HAL_FDCAN_RxFifo1Callback>:
}
 800603c:	4770      	bx	lr

0800603e <HAL_FDCAN_TxFifoEmptyCallback>:
}
 800603e:	4770      	bx	lr

08006040 <HAL_FDCAN_TxBufferCompleteCallback>:
}
 8006040:	4770      	bx	lr

08006042 <HAL_FDCAN_TxBufferAbortCallback>:
}
 8006042:	4770      	bx	lr

08006044 <HAL_FDCAN_RxBufferNewMessageCallback>:
}
 8006044:	4770      	bx	lr

08006046 <HAL_FDCAN_TimestampWraparoundCallback>:
}
 8006046:	4770      	bx	lr

08006048 <HAL_FDCAN_TimeoutOccurredCallback>:
}
 8006048:	4770      	bx	lr

0800604a <HAL_FDCAN_HighPriorityMessageCallback>:
}
 800604a:	4770      	bx	lr

0800604c <HAL_FDCAN_ErrorStatusCallback>:
}
 800604c:	4770      	bx	lr

0800604e <HAL_FDCAN_TT_ScheduleSyncCallback>:
}
 800604e:	4770      	bx	lr

08006050 <HAL_FDCAN_TT_TimeMarkCallback>:
}
 8006050:	4770      	bx	lr

08006052 <HAL_FDCAN_TT_StopWatchCallback>:
}
 8006052:	4770      	bx	lr

08006054 <HAL_FDCAN_TT_GlobalTimeCallback>:
}
 8006054:	4770      	bx	lr
	...

08006058 <HAL_FDCAN_IRQHandler>:
{
 8006058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800605c:	b083      	sub	sp, #12
 800605e:	4604      	mov	r4, r0
  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8006060:	4bb0      	ldr	r3, [pc, #704]	@ (8006324 <HAL_FDCAN_IRQHandler+0x2cc>)
 8006062:	691a      	ldr	r2, [r3, #16]
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	079b      	lsls	r3, r3, #30
 8006068:	ea03 7382 	and.w	r3, r3, r2, lsl #30
 800606c:	9301      	str	r3, [sp, #4]
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800606e:	6803      	ldr	r3, [r0, #0]
 8006070:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006072:	f402 4a70 	and.w	sl, r2, #61440	@ 0xf000
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006076:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006078:	ea0a 0a02 	and.w	sl, sl, r2
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800607c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800607e:	f002 090f 	and.w	r9, r2, #15
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006082:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006084:	ea09 0902 	and.w	r9, r9, r2
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8006088:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800608a:	f002 08f0 	and.w	r8, r2, #240	@ 0xf0
  RxFifo1ITs &= hfdcan->Instance->IE;
 800608e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006090:	ea08 0802 	and.w	r8, r8, r2
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8006094:	6d1e      	ldr	r6, [r3, #80]	@ 0x50
 8006096:	f006 5671 	and.w	r6, r6, #1010827264	@ 0x3c400000
  Errors &= hfdcan->Instance->IE;
 800609a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800609c:	4016      	ands	r6, r2
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800609e:	6d1f      	ldr	r7, [r3, #80]	@ 0x50
 80060a0:	f007 7760 	and.w	r7, r7, #58720256	@ 0x3800000
  ErrorStatusITs &= hfdcan->Instance->IE;
 80060a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80060a6:	4017      	ands	r7, r2
  itsourceIE = hfdcan->Instance->IE;
 80060a8:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
  itflagIR = hfdcan->Instance->IR;
 80060aa:	f8d3 b050 	ldr.w	fp, [r3, #80]	@ 0x50
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80060ae:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80060b2:	d002      	beq.n	80060ba <HAL_FDCAN_IRQHandler+0x62>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80060b4:	f41b 7f80 	tst.w	fp, #256	@ 0x100
 80060b8:	d164      	bne.n	8006184 <HAL_FDCAN_IRQHandler+0x12c>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80060ba:	f415 6f80 	tst.w	r5, #1024	@ 0x400
 80060be:	d002      	beq.n	80060c6 <HAL_FDCAN_IRQHandler+0x6e>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80060c0:	f41b 6f80 	tst.w	fp, #1024	@ 0x400
 80060c4:	d167      	bne.n	8006196 <HAL_FDCAN_IRQHandler+0x13e>
  if (ClkCalibrationITs != 0U)
 80060c6:	9b01      	ldr	r3, [sp, #4]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d174      	bne.n	80061b6 <HAL_FDCAN_IRQHandler+0x15e>
  if (TxEventFifoITs != 0U)
 80060cc:	f1ba 0f00 	cmp.w	sl, #0
 80060d0:	d17c      	bne.n	80061cc <HAL_FDCAN_IRQHandler+0x174>
  if (RxFifo0ITs != 0U)
 80060d2:	f1b9 0f00 	cmp.w	r9, #0
 80060d6:	f040 8085 	bne.w	80061e4 <HAL_FDCAN_IRQHandler+0x18c>
  if (RxFifo1ITs != 0U)
 80060da:	f1b8 0f00 	cmp.w	r8, #0
 80060de:	f040 808d 	bne.w	80061fc <HAL_FDCAN_IRQHandler+0x1a4>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80060e2:	f415 6f00 	tst.w	r5, #2048	@ 0x800
 80060e6:	d003      	beq.n	80060f0 <HAL_FDCAN_IRQHandler+0x98>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80060e8:	f41b 6f00 	tst.w	fp, #2048	@ 0x800
 80060ec:	f040 8092 	bne.w	8006214 <HAL_FDCAN_IRQHandler+0x1bc>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 80060f0:	f415 7f00 	tst.w	r5, #512	@ 0x200
 80060f4:	d003      	beq.n	80060fe <HAL_FDCAN_IRQHandler+0xa6>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80060f6:	f41b 7f00 	tst.w	fp, #512	@ 0x200
 80060fa:	f040 8096 	bne.w	800622a <HAL_FDCAN_IRQHandler+0x1d2>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 80060fe:	f415 2f00 	tst.w	r5, #524288	@ 0x80000
 8006102:	d003      	beq.n	800610c <HAL_FDCAN_IRQHandler+0xb4>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8006104:	f41b 2f00 	tst.w	fp, #524288	@ 0x80000
 8006108:	f040 809f 	bne.w	800624a <HAL_FDCAN_IRQHandler+0x1f2>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800610c:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8006110:	d003      	beq.n	800611a <HAL_FDCAN_IRQHandler+0xc2>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8006112:	f41b 3f80 	tst.w	fp, #65536	@ 0x10000
 8006116:	f040 80a3 	bne.w	8006260 <HAL_FDCAN_IRQHandler+0x208>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800611a:	f415 2f80 	tst.w	r5, #262144	@ 0x40000
 800611e:	d003      	beq.n	8006128 <HAL_FDCAN_IRQHandler+0xd0>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8006120:	f41b 2f80 	tst.w	fp, #262144	@ 0x40000
 8006124:	f040 80a7 	bne.w	8006276 <HAL_FDCAN_IRQHandler+0x21e>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8006128:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
 800612c:	d00f      	beq.n	800614e <HAL_FDCAN_IRQHandler+0xf6>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800612e:	f41b 3f00 	tst.w	fp, #131072	@ 0x20000
 8006132:	d00c      	beq.n	800614e <HAL_FDCAN_IRQHandler+0xf6>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8006134:	6823      	ldr	r3, [r4, #0]
 8006136:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800613a:	651a      	str	r2, [r3, #80]	@ 0x50
 800613c:	4b79      	ldr	r3, [pc, #484]	@ (8006324 <HAL_FDCAN_IRQHandler+0x2cc>)
 800613e:	2200      	movs	r2, #0
 8006140:	611a      	str	r2, [r3, #16]
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006142:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8006146:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800614a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
  if (ErrorStatusITs != 0U)
 800614e:	2f00      	cmp	r7, #0
 8006150:	f040 809c 	bne.w	800628c <HAL_FDCAN_IRQHandler+0x234>
  if (Errors != 0U)
 8006154:	b14e      	cbz	r6, 800616a <HAL_FDCAN_IRQHandler+0x112>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006156:	6823      	ldr	r3, [r4, #0]
 8006158:	651e      	str	r6, [r3, #80]	@ 0x50
 800615a:	0fb2      	lsrs	r2, r6, #30
 800615c:	4b71      	ldr	r3, [pc, #452]	@ (8006324 <HAL_FDCAN_IRQHandler+0x2cc>)
 800615e:	611a      	str	r2, [r3, #16]
    hfdcan->ErrorCode |= Errors;
 8006160:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8006164:	4333      	orrs	r3, r6
 8006166:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
  if (hfdcan->Instance == FDCAN1)
 800616a:	6822      	ldr	r2, [r4, #0]
 800616c:	4b6e      	ldr	r3, [pc, #440]	@ (8006328 <HAL_FDCAN_IRQHandler+0x2d0>)
 800616e:	429a      	cmp	r2, r3
 8006170:	f000 8096 	beq.w	80062a0 <HAL_FDCAN_IRQHandler+0x248>
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006174:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8006178:	2b00      	cmp	r3, #0
 800617a:	f040 80f7 	bne.w	800636c <HAL_FDCAN_IRQHandler+0x314>
}
 800617e:	b003      	add	sp, #12
 8006180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8006184:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006188:	651a      	str	r2, [r3, #80]	@ 0x50
 800618a:	4b66      	ldr	r3, [pc, #408]	@ (8006324 <HAL_FDCAN_IRQHandler+0x2cc>)
 800618c:	2200      	movs	r2, #0
 800618e:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8006190:	f7ff ff5b 	bl	800604a <HAL_FDCAN_HighPriorityMessageCallback>
 8006194:	e791      	b.n	80060ba <HAL_FDCAN_IRQHandler+0x62>
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8006196:	6823      	ldr	r3, [r4, #0]
 8006198:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800619c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80061a0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80061a4:	6518      	str	r0, [r3, #80]	@ 0x50
 80061a6:	4b5f      	ldr	r3, [pc, #380]	@ (8006324 <HAL_FDCAN_IRQHandler+0x2cc>)
 80061a8:	2000      	movs	r0, #0
 80061aa:	6118      	str	r0, [r3, #16]
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80061ac:	4011      	ands	r1, r2
 80061ae:	4620      	mov	r0, r4
 80061b0:	f7ff ff47 	bl	8006042 <HAL_FDCAN_TxBufferAbortCallback>
 80061b4:	e787      	b.n	80060c6 <HAL_FDCAN_IRQHandler+0x6e>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80061b6:	6823      	ldr	r3, [r4, #0]
 80061b8:	2200      	movs	r2, #0
 80061ba:	651a      	str	r2, [r3, #80]	@ 0x50
 80061bc:	9901      	ldr	r1, [sp, #4]
 80061be:	0f8a      	lsrs	r2, r1, #30
 80061c0:	4b58      	ldr	r3, [pc, #352]	@ (8006324 <HAL_FDCAN_IRQHandler+0x2cc>)
 80061c2:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80061c4:	4620      	mov	r0, r4
 80061c6:	f7ff ff37 	bl	8006038 <HAL_FDCAN_ClockCalibrationCallback>
 80061ca:	e77f      	b.n	80060cc <HAL_FDCAN_IRQHandler+0x74>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80061cc:	6823      	ldr	r3, [r4, #0]
 80061ce:	f8c3 a050 	str.w	sl, [r3, #80]	@ 0x50
 80061d2:	ea4f 729a 	mov.w	r2, sl, lsr #30
 80061d6:	4b53      	ldr	r3, [pc, #332]	@ (8006324 <HAL_FDCAN_IRQHandler+0x2cc>)
 80061d8:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80061da:	4651      	mov	r1, sl
 80061dc:	4620      	mov	r0, r4
 80061de:	f7ff ff2c 	bl	800603a <HAL_FDCAN_TxEventFifoCallback>
 80061e2:	e776      	b.n	80060d2 <HAL_FDCAN_IRQHandler+0x7a>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80061e4:	6823      	ldr	r3, [r4, #0]
 80061e6:	f8c3 9050 	str.w	r9, [r3, #80]	@ 0x50
 80061ea:	ea4f 7299 	mov.w	r2, r9, lsr #30
 80061ee:	4b4d      	ldr	r3, [pc, #308]	@ (8006324 <HAL_FDCAN_IRQHandler+0x2cc>)
 80061f0:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80061f2:	4649      	mov	r1, r9
 80061f4:	4620      	mov	r0, r4
 80061f6:	f7fa fdd7 	bl	8000da8 <HAL_FDCAN_RxFifo0Callback>
 80061fa:	e76e      	b.n	80060da <HAL_FDCAN_IRQHandler+0x82>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80061fc:	6823      	ldr	r3, [r4, #0]
 80061fe:	f8c3 8050 	str.w	r8, [r3, #80]	@ 0x50
 8006202:	ea4f 7298 	mov.w	r2, r8, lsr #30
 8006206:	4b47      	ldr	r3, [pc, #284]	@ (8006324 <HAL_FDCAN_IRQHandler+0x2cc>)
 8006208:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800620a:	4641      	mov	r1, r8
 800620c:	4620      	mov	r0, r4
 800620e:	f7ff ff15 	bl	800603c <HAL_FDCAN_RxFifo1Callback>
 8006212:	e766      	b.n	80060e2 <HAL_FDCAN_IRQHandler+0x8a>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8006214:	6823      	ldr	r3, [r4, #0]
 8006216:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800621a:	651a      	str	r2, [r3, #80]	@ 0x50
 800621c:	4b41      	ldr	r3, [pc, #260]	@ (8006324 <HAL_FDCAN_IRQHandler+0x2cc>)
 800621e:	2200      	movs	r2, #0
 8006220:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8006222:	4620      	mov	r0, r4
 8006224:	f7ff ff0b 	bl	800603e <HAL_FDCAN_TxFifoEmptyCallback>
 8006228:	e762      	b.n	80060f0 <HAL_FDCAN_IRQHandler+0x98>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800622a:	6823      	ldr	r3, [r4, #0]
 800622c:	f8d3 10d8 	ldr.w	r1, [r3, #216]	@ 0xd8
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8006230:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8006234:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8006238:	6518      	str	r0, [r3, #80]	@ 0x50
 800623a:	4b3a      	ldr	r3, [pc, #232]	@ (8006324 <HAL_FDCAN_IRQHandler+0x2cc>)
 800623c:	2000      	movs	r0, #0
 800623e:	6118      	str	r0, [r3, #16]
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8006240:	4011      	ands	r1, r2
 8006242:	4620      	mov	r0, r4
 8006244:	f7ff fefc 	bl	8006040 <HAL_FDCAN_TxBufferCompleteCallback>
 8006248:	e759      	b.n	80060fe <HAL_FDCAN_IRQHandler+0xa6>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 800624a:	6823      	ldr	r3, [r4, #0]
 800624c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8006250:	651a      	str	r2, [r3, #80]	@ 0x50
 8006252:	4b34      	ldr	r3, [pc, #208]	@ (8006324 <HAL_FDCAN_IRQHandler+0x2cc>)
 8006254:	2200      	movs	r2, #0
 8006256:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8006258:	4620      	mov	r0, r4
 800625a:	f7ff fef3 	bl	8006044 <HAL_FDCAN_RxBufferNewMessageCallback>
 800625e:	e755      	b.n	800610c <HAL_FDCAN_IRQHandler+0xb4>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8006260:	6823      	ldr	r3, [r4, #0]
 8006262:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8006266:	651a      	str	r2, [r3, #80]	@ 0x50
 8006268:	4b2e      	ldr	r3, [pc, #184]	@ (8006324 <HAL_FDCAN_IRQHandler+0x2cc>)
 800626a:	2200      	movs	r2, #0
 800626c:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800626e:	4620      	mov	r0, r4
 8006270:	f7ff fee9 	bl	8006046 <HAL_FDCAN_TimestampWraparoundCallback>
 8006274:	e751      	b.n	800611a <HAL_FDCAN_IRQHandler+0xc2>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8006276:	6823      	ldr	r3, [r4, #0]
 8006278:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800627c:	651a      	str	r2, [r3, #80]	@ 0x50
 800627e:	4b29      	ldr	r3, [pc, #164]	@ (8006324 <HAL_FDCAN_IRQHandler+0x2cc>)
 8006280:	2200      	movs	r2, #0
 8006282:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8006284:	4620      	mov	r0, r4
 8006286:	f7ff fedf 	bl	8006048 <HAL_FDCAN_TimeoutOccurredCallback>
 800628a:	e74d      	b.n	8006128 <HAL_FDCAN_IRQHandler+0xd0>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800628c:	6823      	ldr	r3, [r4, #0]
 800628e:	651f      	str	r7, [r3, #80]	@ 0x50
 8006290:	0fba      	lsrs	r2, r7, #30
 8006292:	4b24      	ldr	r3, [pc, #144]	@ (8006324 <HAL_FDCAN_IRQHandler+0x2cc>)
 8006294:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006296:	4639      	mov	r1, r7
 8006298:	4620      	mov	r0, r4
 800629a:	f7ff fed7 	bl	800604c <HAL_FDCAN_ErrorStatusCallback>
 800629e:	e759      	b.n	8006154 <HAL_FDCAN_IRQHandler+0xfc>
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80062a0:	6863      	ldr	r3, [r4, #4]
 80062a2:	689a      	ldr	r2, [r3, #8]
 80062a4:	f012 0f03 	tst.w	r2, #3
 80062a8:	f43f af64 	beq.w	8006174 <HAL_FDCAN_IRQHandler+0x11c>
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80062ac:	6a19      	ldr	r1, [r3, #32]
 80062ae:	f001 010f 	and.w	r1, r1, #15
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80062b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80062b4:	6a18      	ldr	r0, [r3, #32]
 80062b6:	f000 0830 	and.w	r8, r0, #48	@ 0x30
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80062ba:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80062bc:	ea08 0800 	and.w	r8, r8, r0
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80062c0:	6a1f      	ldr	r7, [r3, #32]
 80062c2:	f407 77c0 	and.w	r7, r7, #384	@ 0x180
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80062c6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80062c8:	4007      	ands	r7, r0
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 80062ca:	6a1e      	ldr	r6, [r3, #32]
 80062cc:	f406 46fc 	and.w	r6, r6, #32256	@ 0x7e00
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80062d0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80062d2:	4006      	ands	r6, r0
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80062d4:	6a1d      	ldr	r5, [r3, #32]
 80062d6:	f405 25f0 	and.w	r5, r5, #491520	@ 0x78000
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 80062da:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80062dc:	4005      	ands	r5, r0
      itsourceTTIE = hfdcan->ttcan->TTIE;
 80062de:	f8d3 9024 	ldr.w	r9, [r3, #36]	@ 0x24
      itflagTTIR = hfdcan->ttcan->TTIR;
 80062e2:	f8d3 a020 	ldr.w	sl, [r3, #32]
      if (TTSchedSyncITs != 0U)
 80062e6:	4011      	ands	r1, r2
 80062e8:	d120      	bne.n	800632c <HAL_FDCAN_IRQHandler+0x2d4>
      if (TTTimeMarkITs != 0U)
 80062ea:	f1b8 0f00 	cmp.w	r8, #0
 80062ee:	d122      	bne.n	8006336 <HAL_FDCAN_IRQHandler+0x2de>
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 80062f0:	f019 0f40 	tst.w	r9, #64	@ 0x40
 80062f4:	d002      	beq.n	80062fc <HAL_FDCAN_IRQHandler+0x2a4>
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 80062f6:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 80062fa:	d124      	bne.n	8006346 <HAL_FDCAN_IRQHandler+0x2ee>
      if (TTGlobTimeITs != 0U)
 80062fc:	bb7f      	cbnz	r7, 800635e <HAL_FDCAN_IRQHandler+0x306>
      if (TTDistErrors != 0U)
 80062fe:	b136      	cbz	r6, 800630e <HAL_FDCAN_IRQHandler+0x2b6>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8006300:	6863      	ldr	r3, [r4, #4]
 8006302:	621e      	str	r6, [r3, #32]
        hfdcan->ErrorCode |= TTDistErrors;
 8006304:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8006308:	4333      	orrs	r3, r6
 800630a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
      if (TTFatalErrors != 0U)
 800630e:	2d00      	cmp	r5, #0
 8006310:	f43f af30 	beq.w	8006174 <HAL_FDCAN_IRQHandler+0x11c>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8006314:	6863      	ldr	r3, [r4, #4]
 8006316:	621d      	str	r5, [r3, #32]
        hfdcan->ErrorCode |= TTFatalErrors;
 8006318:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 800631c:	432b      	orrs	r3, r5
 800631e:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 8006322:	e727      	b.n	8006174 <HAL_FDCAN_IRQHandler+0x11c>
 8006324:	4000a800 	.word	0x4000a800
 8006328:	4000a000 	.word	0x4000a000
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 800632c:	6219      	str	r1, [r3, #32]
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 800632e:	4620      	mov	r0, r4
 8006330:	f7ff fe8d 	bl	800604e <HAL_FDCAN_TT_ScheduleSyncCallback>
 8006334:	e7d9      	b.n	80062ea <HAL_FDCAN_IRQHandler+0x292>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8006336:	6863      	ldr	r3, [r4, #4]
 8006338:	f8c3 8020 	str.w	r8, [r3, #32]
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 800633c:	4641      	mov	r1, r8
 800633e:	4620      	mov	r0, r4
 8006340:	f7ff fe86 	bl	8006050 <HAL_FDCAN_TT_TimeMarkCallback>
 8006344:	e7d4      	b.n	80062f0 <HAL_FDCAN_IRQHandler+0x298>
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8006346:	6863      	ldr	r3, [r4, #4]
 8006348:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 800634a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 800634c:	2040      	movs	r0, #64	@ 0x40
 800634e:	6218      	str	r0, [r3, #32]
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8006350:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8006354:	0c09      	lsrs	r1, r1, #16
 8006356:	4620      	mov	r0, r4
 8006358:	f7ff fe7b 	bl	8006052 <HAL_FDCAN_TT_StopWatchCallback>
 800635c:	e7ce      	b.n	80062fc <HAL_FDCAN_IRQHandler+0x2a4>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 800635e:	6863      	ldr	r3, [r4, #4]
 8006360:	621f      	str	r7, [r3, #32]
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8006362:	4639      	mov	r1, r7
 8006364:	4620      	mov	r0, r4
 8006366:	f7ff fe75 	bl	8006054 <HAL_FDCAN_TT_GlobalTimeCallback>
 800636a:	e7c8      	b.n	80062fe <HAL_FDCAN_IRQHandler+0x2a6>
    HAL_FDCAN_ErrorCallback(hfdcan);
 800636c:	4620      	mov	r0, r4
 800636e:	f7fa fb6b 	bl	8000a48 <HAL_FDCAN_ErrorCallback>
}
 8006372:	e704      	b.n	800617e <HAL_FDCAN_IRQHandler+0x126>

08006374 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006376:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8006378:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800637a:	e06b      	b.n	8006454 <HAL_GPIO_Init+0xe0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800637c:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800637e:	005e      	lsls	r6, r3, #1
 8006380:	2403      	movs	r4, #3
 8006382:	40b4      	lsls	r4, r6
 8006384:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006388:	68cc      	ldr	r4, [r1, #12]
 800638a:	40b4      	lsls	r4, r6
 800638c:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800638e:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006390:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006392:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006396:	684c      	ldr	r4, [r1, #4]
 8006398:	f3c4 1400 	ubfx	r4, r4, #4, #1
 800639c:	409c      	lsls	r4, r3
 800639e:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 80063a0:	6044      	str	r4, [r0, #4]
 80063a2:	e069      	b.n	8006478 <HAL_GPIO_Init+0x104>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80063a4:	08dd      	lsrs	r5, r3, #3
 80063a6:	3508      	adds	r5, #8
 80063a8:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80063ac:	f003 0c07 	and.w	ip, r3, #7
 80063b0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80063b4:	f04f 0e0f 	mov.w	lr, #15
 80063b8:	fa0e fe0c 	lsl.w	lr, lr, ip
 80063bc:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80063c0:	690c      	ldr	r4, [r1, #16]
 80063c2:	fa04 f40c 	lsl.w	r4, r4, ip
 80063c6:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 80063ca:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 80063ce:	e06b      	b.n	80064a8 <HAL_GPIO_Init+0x134>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80063d0:	2409      	movs	r4, #9
 80063d2:	e000      	b.n	80063d6 <HAL_GPIO_Init+0x62>
 80063d4:	2400      	movs	r4, #0
 80063d6:	fa04 f40e 	lsl.w	r4, r4, lr
 80063da:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80063dc:	f10c 0c02 	add.w	ip, ip, #2
 80063e0:	4d69      	ldr	r5, [pc, #420]	@ (8006588 <HAL_GPIO_Init+0x214>)
 80063e2:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80063e6:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
 80063ea:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80063ec:	43d4      	mvns	r4, r2
 80063ee:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80063f2:	684f      	ldr	r7, [r1, #4]
 80063f4:	f417 1f80 	tst.w	r7, #1048576	@ 0x100000
 80063f8:	d001      	beq.n	80063fe <HAL_GPIO_Init+0x8a>
        {
          temp |= iocurrent;
 80063fa:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80063fe:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 8006402:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8006404:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8006406:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800640a:	684f      	ldr	r7, [r1, #4]
 800640c:	f417 1f00 	tst.w	r7, #2097152	@ 0x200000
 8006410:	d001      	beq.n	8006416 <HAL_GPIO_Init+0xa2>
        {
          temp |= iocurrent;
 8006412:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8006416:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 800641a:	606e      	str	r6, [r5, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800641c:	f8d5 5084 	ldr.w	r5, [r5, #132]	@ 0x84
        temp &= ~(iocurrent);
 8006420:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006424:	684f      	ldr	r7, [r1, #4]
 8006426:	f417 3f00 	tst.w	r7, #131072	@ 0x20000
 800642a:	d001      	beq.n	8006430 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 800642c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006430:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 8006434:	f8c5 6084 	str.w	r6, [r5, #132]	@ 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006438:	f8d5 5080 	ldr.w	r5, [r5, #128]	@ 0x80
        temp &= ~(iocurrent);
 800643c:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800643e:	684e      	ldr	r6, [r1, #4]
 8006440:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
 8006444:	d001      	beq.n	800644a <HAL_GPIO_Init+0xd6>
        {
          temp |= iocurrent;
 8006446:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800644a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800644e:	f8c2 4080 	str.w	r4, [r2, #128]	@ 0x80
      }
    }

    position++;
 8006452:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006454:	680a      	ldr	r2, [r1, #0]
 8006456:	fa32 f403 	lsrs.w	r4, r2, r3
 800645a:	f000 8092 	beq.w	8006582 <HAL_GPIO_Init+0x20e>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800645e:	f04f 0c01 	mov.w	ip, #1
 8006462:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00U)
 8006466:	ea1c 0202 	ands.w	r2, ip, r2
 800646a:	d0f2      	beq.n	8006452 <HAL_GPIO_Init+0xde>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800646c:	684c      	ldr	r4, [r1, #4]
 800646e:	f004 0403 	and.w	r4, r4, #3
 8006472:	3c01      	subs	r4, #1
 8006474:	2c01      	cmp	r4, #1
 8006476:	d981      	bls.n	800637c <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006478:	684c      	ldr	r4, [r1, #4]
 800647a:	f004 0403 	and.w	r4, r4, #3
 800647e:	2c03      	cmp	r4, #3
 8006480:	d00c      	beq.n	800649c <HAL_GPIO_Init+0x128>
      temp = GPIOx->PUPDR;
 8006482:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006484:	005d      	lsls	r5, r3, #1
 8006486:	f04f 0c03 	mov.w	ip, #3
 800648a:	fa0c fc05 	lsl.w	ip, ip, r5
 800648e:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006492:	688c      	ldr	r4, [r1, #8]
 8006494:	40ac      	lsls	r4, r5
 8006496:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->PUPDR = temp;
 800649a:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800649c:	684c      	ldr	r4, [r1, #4]
 800649e:	f004 0403 	and.w	r4, r4, #3
 80064a2:	2c02      	cmp	r4, #2
 80064a4:	f43f af7e 	beq.w	80063a4 <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 80064a8:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80064aa:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80064ae:	f04f 0c03 	mov.w	ip, #3
 80064b2:	fa0c fc0e 	lsl.w	ip, ip, lr
 80064b6:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80064ba:	684c      	ldr	r4, [r1, #4]
 80064bc:	f004 0403 	and.w	r4, r4, #3
 80064c0:	fa04 f40e 	lsl.w	r4, r4, lr
 80064c4:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 80064c8:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80064ca:	684c      	ldr	r4, [r1, #4]
 80064cc:	f414 3f40 	tst.w	r4, #196608	@ 0x30000
 80064d0:	d0bf      	beq.n	8006452 <HAL_GPIO_Init+0xde>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064d2:	4c2e      	ldr	r4, [pc, #184]	@ (800658c <HAL_GPIO_Init+0x218>)
 80064d4:	f8d4 50f4 	ldr.w	r5, [r4, #244]	@ 0xf4
 80064d8:	f045 0502 	orr.w	r5, r5, #2
 80064dc:	f8c4 50f4 	str.w	r5, [r4, #244]	@ 0xf4
 80064e0:	f8d4 40f4 	ldr.w	r4, [r4, #244]	@ 0xf4
 80064e4:	f004 0402 	and.w	r4, r4, #2
 80064e8:	9401      	str	r4, [sp, #4]
 80064ea:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80064ec:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 80064f0:	f10c 0502 	add.w	r5, ip, #2
 80064f4:	4c24      	ldr	r4, [pc, #144]	@ (8006588 <HAL_GPIO_Init+0x214>)
 80064f6:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80064fa:	f003 0e03 	and.w	lr, r3, #3
 80064fe:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8006502:	240f      	movs	r4, #15
 8006504:	fa04 f40e 	lsl.w	r4, r4, lr
 8006508:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800650c:	4c20      	ldr	r4, [pc, #128]	@ (8006590 <HAL_GPIO_Init+0x21c>)
 800650e:	42a0      	cmp	r0, r4
 8006510:	f43f af60 	beq.w	80063d4 <HAL_GPIO_Init+0x60>
 8006514:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8006518:	42a0      	cmp	r0, r4
 800651a:	d022      	beq.n	8006562 <HAL_GPIO_Init+0x1ee>
 800651c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8006520:	42a0      	cmp	r0, r4
 8006522:	d020      	beq.n	8006566 <HAL_GPIO_Init+0x1f2>
 8006524:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8006528:	42a0      	cmp	r0, r4
 800652a:	d01e      	beq.n	800656a <HAL_GPIO_Init+0x1f6>
 800652c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8006530:	42a0      	cmp	r0, r4
 8006532:	d01c      	beq.n	800656e <HAL_GPIO_Init+0x1fa>
 8006534:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8006538:	42a0      	cmp	r0, r4
 800653a:	d01a      	beq.n	8006572 <HAL_GPIO_Init+0x1fe>
 800653c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8006540:	42a0      	cmp	r0, r4
 8006542:	d018      	beq.n	8006576 <HAL_GPIO_Init+0x202>
 8006544:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8006548:	42a0      	cmp	r0, r4
 800654a:	d016      	beq.n	800657a <HAL_GPIO_Init+0x206>
 800654c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8006550:	42a0      	cmp	r0, r4
 8006552:	d014      	beq.n	800657e <HAL_GPIO_Init+0x20a>
 8006554:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8006558:	42a0      	cmp	r0, r4
 800655a:	f43f af39 	beq.w	80063d0 <HAL_GPIO_Init+0x5c>
 800655e:	240a      	movs	r4, #10
 8006560:	e739      	b.n	80063d6 <HAL_GPIO_Init+0x62>
 8006562:	2401      	movs	r4, #1
 8006564:	e737      	b.n	80063d6 <HAL_GPIO_Init+0x62>
 8006566:	2402      	movs	r4, #2
 8006568:	e735      	b.n	80063d6 <HAL_GPIO_Init+0x62>
 800656a:	2403      	movs	r4, #3
 800656c:	e733      	b.n	80063d6 <HAL_GPIO_Init+0x62>
 800656e:	2404      	movs	r4, #4
 8006570:	e731      	b.n	80063d6 <HAL_GPIO_Init+0x62>
 8006572:	2405      	movs	r4, #5
 8006574:	e72f      	b.n	80063d6 <HAL_GPIO_Init+0x62>
 8006576:	2406      	movs	r4, #6
 8006578:	e72d      	b.n	80063d6 <HAL_GPIO_Init+0x62>
 800657a:	2407      	movs	r4, #7
 800657c:	e72b      	b.n	80063d6 <HAL_GPIO_Init+0x62>
 800657e:	2408      	movs	r4, #8
 8006580:	e729      	b.n	80063d6 <HAL_GPIO_Init+0x62>
  }
}
 8006582:	b003      	add	sp, #12
 8006584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006586:	bf00      	nop
 8006588:	58000400 	.word	0x58000400
 800658c:	58024400 	.word	0x58024400
 8006590:	58020000 	.word	0x58020000

08006594 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006594:	b10a      	cbz	r2, 800659a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006596:	6181      	str	r1, [r0, #24]
 8006598:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800659a:	0409      	lsls	r1, r1, #16
 800659c:	6181      	str	r1, [r0, #24]
  }
}
 800659e:	4770      	bx	lr

080065a0 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80065a0:	6803      	ldr	r3, [r0, #0]
 80065a2:	699a      	ldr	r2, [r3, #24]
 80065a4:	f012 0f02 	tst.w	r2, #2
 80065a8:	d001      	beq.n	80065ae <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 80065aa:	2200      	movs	r2, #0
 80065ac:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065ae:	6803      	ldr	r3, [r0, #0]
 80065b0:	699a      	ldr	r2, [r3, #24]
 80065b2:	f012 0f01 	tst.w	r2, #1
 80065b6:	d103      	bne.n	80065c0 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80065b8:	699a      	ldr	r2, [r3, #24]
 80065ba:	f042 0201 	orr.w	r2, r2, #1
 80065be:	619a      	str	r2, [r3, #24]
  }
}
 80065c0:	4770      	bx	lr

080065c2 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80065c2:	b410      	push	{r4}
 80065c4:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80065c6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80065ca:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80065ce:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80065d0:	4321      	orrs	r1, r4
 80065d2:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80065d6:	6802      	ldr	r2, [r0, #0]
 80065d8:	6853      	ldr	r3, [r2, #4]
 80065da:	0d64      	lsrs	r4, r4, #21
 80065dc:	f404 6480 	and.w	r4, r4, #1024	@ 0x400
 80065e0:	f044 747f 	orr.w	r4, r4, #66846720	@ 0x3fc0000
 80065e4:	f444 3458 	orr.w	r4, r4, #221184	@ 0x36000
 80065e8:	f444 747f 	orr.w	r4, r4, #1020	@ 0x3fc
 80065ec:	f044 0403 	orr.w	r4, r4, #3
 80065f0:	ea23 0304 	bic.w	r3, r3, r4
 80065f4:	430b      	orrs	r3, r1
 80065f6:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80065f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065fc:	4770      	bx	lr

080065fe <I2C_IsErrorOccurred>:
{
 80065fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006602:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 8006604:	6803      	ldr	r3, [r0, #0]
 8006606:	699f      	ldr	r7, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006608:	f017 0710 	ands.w	r7, r7, #16
 800660c:	d04e      	beq.n	80066ac <I2C_IsErrorOccurred+0xae>
 800660e:	460e      	mov	r6, r1
 8006610:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006612:	2210      	movs	r2, #16
 8006614:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8006616:	2500      	movs	r5, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006618:	6823      	ldr	r3, [r4, #0]
 800661a:	6998      	ldr	r0, [r3, #24]
 800661c:	f010 0f20 	tst.w	r0, #32
 8006620:	d13d      	bne.n	800669e <I2C_IsErrorOccurred+0xa0>
 8006622:	2d00      	cmp	r5, #0
 8006624:	d13b      	bne.n	800669e <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 8006626:	f1b6 3fff 	cmp.w	r6, #4294967295
 800662a:	d0f5      	beq.n	8006618 <I2C_IsErrorOccurred+0x1a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800662c:	f7fc ff26 	bl	800347c <HAL_GetTick>
 8006630:	eba0 0008 	sub.w	r0, r0, r8
 8006634:	42b0      	cmp	r0, r6
 8006636:	d801      	bhi.n	800663c <I2C_IsErrorOccurred+0x3e>
 8006638:	2e00      	cmp	r6, #0
 800663a:	d1ed      	bne.n	8006618 <I2C_IsErrorOccurred+0x1a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800663c:	6821      	ldr	r1, [r4, #0]
 800663e:	684a      	ldr	r2, [r1, #4]
 8006640:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
          tmp2 = hi2c->Mode;
 8006644:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 8006648:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800664a:	6988      	ldr	r0, [r1, #24]
 800664c:	f410 4f00 	tst.w	r0, #32768	@ 0x8000
 8006650:	d004      	beq.n	800665c <I2C_IsErrorOccurred+0x5e>
              (tmp2 != HAL_I2C_MODE_SLAVE))
 8006652:	3b20      	subs	r3, #32
 8006654:	bf18      	it	ne
 8006656:	2301      	movne	r3, #1
              (tmp1 != I2C_CR2_STOP) && \
 8006658:	b902      	cbnz	r2, 800665c <I2C_IsErrorOccurred+0x5e>
 800665a:	b9c3      	cbnz	r3, 800668e <I2C_IsErrorOccurred+0x90>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800665c:	6823      	ldr	r3, [r4, #0]
 800665e:	699b      	ldr	r3, [r3, #24]
 8006660:	f013 0f20 	tst.w	r3, #32
 8006664:	d1d8      	bne.n	8006618 <I2C_IsErrorOccurred+0x1a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006666:	f7fc ff09 	bl	800347c <HAL_GetTick>
 800666a:	eba0 0008 	sub.w	r0, r0, r8
 800666e:	2819      	cmp	r0, #25
 8006670:	d9f4      	bls.n	800665c <I2C_IsErrorOccurred+0x5e>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006672:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8006674:	f043 0320 	orr.w	r3, r3, #32
 8006678:	6463      	str	r3, [r4, #68]	@ 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800667a:	2320      	movs	r3, #32
 800667c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006680:	2300      	movs	r3, #0
 8006682:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
              __HAL_UNLOCK(hi2c);
 8006686:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
              status = HAL_ERROR;
 800668a:	2501      	movs	r5, #1
 800668c:	e7e6      	b.n	800665c <I2C_IsErrorOccurred+0x5e>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800668e:	684b      	ldr	r3, [r1, #4]
 8006690:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006694:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 8006696:	f7fc fef1 	bl	800347c <HAL_GetTick>
 800669a:	4680      	mov	r8, r0
 800669c:	e7de      	b.n	800665c <I2C_IsErrorOccurred+0x5e>
    if (status == HAL_OK)
 800669e:	2d00      	cmp	r5, #0
 80066a0:	d140      	bne.n	8006724 <I2C_IsErrorOccurred+0x126>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066a2:	2220      	movs	r2, #32
 80066a4:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 80066a6:	2704      	movs	r7, #4
    status = HAL_ERROR;
 80066a8:	2501      	movs	r5, #1
 80066aa:	e000      	b.n	80066ae <I2C_IsErrorOccurred+0xb0>
  HAL_StatusTypeDef status = HAL_OK;
 80066ac:	2500      	movs	r5, #0
  itflag = hi2c->Instance->ISR;
 80066ae:	6822      	ldr	r2, [r4, #0]
 80066b0:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80066b2:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80066b6:	d005      	beq.n	80066c4 <I2C_IsErrorOccurred+0xc6>
    error_code |= HAL_I2C_ERROR_BERR;
 80066b8:	f047 0701 	orr.w	r7, r7, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80066bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80066c0:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 80066c2:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80066c4:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80066c8:	d006      	beq.n	80066d8 <I2C_IsErrorOccurred+0xda>
    error_code |= HAL_I2C_ERROR_OVR;
 80066ca:	f047 0708 	orr.w	r7, r7, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80066ce:	6822      	ldr	r2, [r4, #0]
 80066d0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80066d4:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 80066d6:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80066d8:	f413 7f00 	tst.w	r3, #512	@ 0x200
 80066dc:	d024      	beq.n	8006728 <I2C_IsErrorOccurred+0x12a>
    error_code |= HAL_I2C_ERROR_ARLO;
 80066de:	f047 0702 	orr.w	r7, r7, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80066e2:	6823      	ldr	r3, [r4, #0]
 80066e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80066e8:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 80066ea:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 80066ec:	4620      	mov	r0, r4
 80066ee:	f7ff ff57 	bl	80065a0 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80066f2:	6822      	ldr	r2, [r4, #0]
 80066f4:	6853      	ldr	r3, [r2, #4]
 80066f6:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 80066fa:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 80066fe:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8006702:	f023 0301 	bic.w	r3, r3, #1
 8006706:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8006708:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800670a:	433b      	orrs	r3, r7
 800670c:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800670e:	2320      	movs	r3, #32
 8006710:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006714:	2300      	movs	r3, #0
 8006716:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 800671a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800671e:	4628      	mov	r0, r5
 8006720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    error_code |= HAL_I2C_ERROR_AF;
 8006724:	2704      	movs	r7, #4
 8006726:	e7c2      	b.n	80066ae <I2C_IsErrorOccurred+0xb0>
  if (status != HAL_OK)
 8006728:	2d00      	cmp	r5, #0
 800672a:	d0f8      	beq.n	800671e <I2C_IsErrorOccurred+0x120>
 800672c:	e7de      	b.n	80066ec <I2C_IsErrorOccurred+0xee>

0800672e <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800672e:	b570      	push	{r4, r5, r6, lr}
 8006730:	4604      	mov	r4, r0
 8006732:	460d      	mov	r5, r1
 8006734:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006736:	6823      	ldr	r3, [r4, #0]
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	f013 0f02 	tst.w	r3, #2
 800673e:	d11d      	bne.n	800677c <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006740:	4632      	mov	r2, r6
 8006742:	4629      	mov	r1, r5
 8006744:	4620      	mov	r0, r4
 8006746:	f7ff ff5a 	bl	80065fe <I2C_IsErrorOccurred>
 800674a:	b9c8      	cbnz	r0, 8006780 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 800674c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006750:	d0f1      	beq.n	8006736 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006752:	f7fc fe93 	bl	800347c <HAL_GetTick>
 8006756:	1b80      	subs	r0, r0, r6
 8006758:	42a8      	cmp	r0, r5
 800675a:	d801      	bhi.n	8006760 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800675c:	2d00      	cmp	r5, #0
 800675e:	d1ea      	bne.n	8006736 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006760:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8006762:	f043 0320 	orr.w	r3, r3, #32
 8006766:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006768:	2320      	movs	r3, #32
 800676a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800676e:	2300      	movs	r3, #0
 8006770:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 8006774:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return HAL_ERROR;
 8006778:	2001      	movs	r0, #1
 800677a:	e000      	b.n	800677e <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 800677c:	2000      	movs	r0, #0
}
 800677e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8006780:	2001      	movs	r0, #1
 8006782:	e7fc      	b.n	800677e <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08006784 <I2C_WaitOnFlagUntilTimeout>:
{
 8006784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006788:	4606      	mov	r6, r0
 800678a:	4688      	mov	r8, r1
 800678c:	4617      	mov	r7, r2
 800678e:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006790:	6834      	ldr	r4, [r6, #0]
 8006792:	69a4      	ldr	r4, [r4, #24]
 8006794:	ea38 0404 	bics.w	r4, r8, r4
 8006798:	bf0c      	ite	eq
 800679a:	2401      	moveq	r4, #1
 800679c:	2400      	movne	r4, #0
 800679e:	42bc      	cmp	r4, r7
 80067a0:	d118      	bne.n	80067d4 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80067a2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80067a6:	d0f3      	beq.n	8006790 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067a8:	f7fc fe68 	bl	800347c <HAL_GetTick>
 80067ac:	9b06      	ldr	r3, [sp, #24]
 80067ae:	1ac0      	subs	r0, r0, r3
 80067b0:	42a8      	cmp	r0, r5
 80067b2:	d801      	bhi.n	80067b8 <I2C_WaitOnFlagUntilTimeout+0x34>
 80067b4:	2d00      	cmp	r5, #0
 80067b6:	d1eb      	bne.n	8006790 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067b8:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 80067ba:	f043 0320 	orr.w	r3, r3, #32
 80067be:	6473      	str	r3, [r6, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80067c0:	2320      	movs	r3, #32
 80067c2:	f886 3041 	strb.w	r3, [r6, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80067c6:	2300      	movs	r3, #0
 80067c8:	f886 3042 	strb.w	r3, [r6, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 80067cc:	f886 3040 	strb.w	r3, [r6, #64]	@ 0x40
        return HAL_ERROR;
 80067d0:	2001      	movs	r0, #1
 80067d2:	e000      	b.n	80067d6 <I2C_WaitOnFlagUntilTimeout+0x52>
  return HAL_OK;
 80067d4:	2000      	movs	r0, #0
}
 80067d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080067dc <I2C_RequestMemoryWrite>:
{
 80067dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067e0:	b082      	sub	sp, #8
 80067e2:	4604      	mov	r4, r0
 80067e4:	4690      	mov	r8, r2
 80067e6:	461d      	mov	r5, r3
 80067e8:	9e08      	ldr	r6, [sp, #32]
 80067ea:	9f09      	ldr	r7, [sp, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80067ec:	4b19      	ldr	r3, [pc, #100]	@ (8006854 <I2C_RequestMemoryWrite+0x78>)
 80067ee:	9300      	str	r3, [sp, #0]
 80067f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80067f4:	b2ea      	uxtb	r2, r5
 80067f6:	f7ff fee4 	bl	80065c2 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067fa:	463a      	mov	r2, r7
 80067fc:	4631      	mov	r1, r6
 80067fe:	4620      	mov	r0, r4
 8006800:	f7ff ff95 	bl	800672e <I2C_WaitOnTXISFlagUntilTimeout>
 8006804:	b9f8      	cbnz	r0, 8006846 <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006806:	2d01      	cmp	r5, #1
 8006808:	d10e      	bne.n	8006828 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800680a:	6823      	ldr	r3, [r4, #0]
 800680c:	fa5f f288 	uxtb.w	r2, r8
 8006810:	629a      	str	r2, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006812:	9700      	str	r7, [sp, #0]
 8006814:	4633      	mov	r3, r6
 8006816:	2200      	movs	r2, #0
 8006818:	2180      	movs	r1, #128	@ 0x80
 800681a:	4620      	mov	r0, r4
 800681c:	f7ff ffb2 	bl	8006784 <I2C_WaitOnFlagUntilTimeout>
 8006820:	b9a8      	cbnz	r0, 800684e <I2C_RequestMemoryWrite+0x72>
}
 8006822:	b002      	add	sp, #8
 8006824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006828:	6823      	ldr	r3, [r4, #0]
 800682a:	ea4f 2218 	mov.w	r2, r8, lsr #8
 800682e:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006830:	463a      	mov	r2, r7
 8006832:	4631      	mov	r1, r6
 8006834:	4620      	mov	r0, r4
 8006836:	f7ff ff7a 	bl	800672e <I2C_WaitOnTXISFlagUntilTimeout>
 800683a:	b930      	cbnz	r0, 800684a <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800683c:	6823      	ldr	r3, [r4, #0]
 800683e:	fa5f f288 	uxtb.w	r2, r8
 8006842:	629a      	str	r2, [r3, #40]	@ 0x28
 8006844:	e7e5      	b.n	8006812 <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 8006846:	2001      	movs	r0, #1
 8006848:	e7eb      	b.n	8006822 <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 800684a:	2001      	movs	r0, #1
 800684c:	e7e9      	b.n	8006822 <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 800684e:	2001      	movs	r0, #1
 8006850:	e7e7      	b.n	8006822 <I2C_RequestMemoryWrite+0x46>
 8006852:	bf00      	nop
 8006854:	80002000 	.word	0x80002000

08006858 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8006858:	b570      	push	{r4, r5, r6, lr}
 800685a:	4605      	mov	r5, r0
 800685c:	460c      	mov	r4, r1
 800685e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006860:	682b      	ldr	r3, [r5, #0]
 8006862:	699b      	ldr	r3, [r3, #24]
 8006864:	f013 0f20 	tst.w	r3, #32
 8006868:	d11a      	bne.n	80068a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800686a:	4632      	mov	r2, r6
 800686c:	4621      	mov	r1, r4
 800686e:	4628      	mov	r0, r5
 8006870:	f7ff fec5 	bl	80065fe <I2C_IsErrorOccurred>
 8006874:	b9b0      	cbnz	r0, 80068a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006876:	f7fc fe01 	bl	800347c <HAL_GetTick>
 800687a:	1b80      	subs	r0, r0, r6
 800687c:	42a0      	cmp	r0, r4
 800687e:	d801      	bhi.n	8006884 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8006880:	2c00      	cmp	r4, #0
 8006882:	d1ed      	bne.n	8006860 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006884:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8006886:	f043 0320 	orr.w	r3, r3, #32
 800688a:	646b      	str	r3, [r5, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800688c:	2320      	movs	r3, #32
 800688e:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006892:	2300      	movs	r3, #0
 8006894:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006898:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
      return HAL_ERROR;
 800689c:	2001      	movs	r0, #1
}
 800689e:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80068a0:	2000      	movs	r0, #0
 80068a2:	e7fc      	b.n	800689e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 80068a4:	2001      	movs	r0, #1
 80068a6:	e7fa      	b.n	800689e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

080068a8 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80068a8:	2800      	cmp	r0, #0
 80068aa:	d057      	beq.n	800695c <HAL_I2C_Init+0xb4>
{
 80068ac:	b510      	push	{r4, lr}
 80068ae:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80068b0:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d041      	beq.n	800693c <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80068b8:	2324      	movs	r3, #36	@ 0x24
 80068ba:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 80068be:	6822      	ldr	r2, [r4, #0]
 80068c0:	6813      	ldr	r3, [r2, #0]
 80068c2:	f023 0301 	bic.w	r3, r3, #1
 80068c6:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80068c8:	6863      	ldr	r3, [r4, #4]
 80068ca:	6822      	ldr	r2, [r4, #0]
 80068cc:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80068d0:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80068d2:	6822      	ldr	r2, [r4, #0]
 80068d4:	6893      	ldr	r3, [r2, #8]
 80068d6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80068da:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80068dc:	68e3      	ldr	r3, [r4, #12]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d031      	beq.n	8006946 <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80068e2:	68a3      	ldr	r3, [r4, #8]
 80068e4:	6822      	ldr	r2, [r4, #0]
 80068e6:	f443 4304 	orr.w	r3, r3, #33792	@ 0x8400
 80068ea:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80068ec:	68e3      	ldr	r3, [r4, #12]
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	d02f      	beq.n	8006952 <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80068f2:	6822      	ldr	r2, [r4, #0]
 80068f4:	6851      	ldr	r1, [r2, #4]
 80068f6:	4b1a      	ldr	r3, [pc, #104]	@ (8006960 <HAL_I2C_Init+0xb8>)
 80068f8:	430b      	orrs	r3, r1
 80068fa:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80068fc:	6822      	ldr	r2, [r4, #0]
 80068fe:	68d3      	ldr	r3, [r2, #12]
 8006900:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006904:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006906:	6923      	ldr	r3, [r4, #16]
 8006908:	6962      	ldr	r2, [r4, #20]
 800690a:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800690c:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800690e:	6822      	ldr	r2, [r4, #0]
 8006910:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006914:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006916:	69e3      	ldr	r3, [r4, #28]
 8006918:	6a21      	ldr	r1, [r4, #32]
 800691a:	6822      	ldr	r2, [r4, #0]
 800691c:	430b      	orrs	r3, r1
 800691e:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8006920:	6822      	ldr	r2, [r4, #0]
 8006922:	6813      	ldr	r3, [r2, #0]
 8006924:	f043 0301 	orr.w	r3, r3, #1
 8006928:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800692a:	2000      	movs	r0, #0
 800692c:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800692e:	2320      	movs	r3, #32
 8006930:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006934:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006936:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 800693a:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800693c:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8006940:	f7fb fe0a 	bl	8002558 <HAL_I2C_MspInit>
 8006944:	e7b8      	b.n	80068b8 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006946:	68a3      	ldr	r3, [r4, #8]
 8006948:	6822      	ldr	r2, [r4, #0]
 800694a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800694e:	6093      	str	r3, [r2, #8]
 8006950:	e7cc      	b.n	80068ec <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006952:	6823      	ldr	r3, [r4, #0]
 8006954:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006958:	605a      	str	r2, [r3, #4]
 800695a:	e7ca      	b.n	80068f2 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 800695c:	2001      	movs	r0, #1
}
 800695e:	4770      	bx	lr
 8006960:	02008000 	.word	0x02008000

08006964 <HAL_I2C_Mem_Write>:
{
 8006964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006968:	b083      	sub	sp, #12
 800696a:	460d      	mov	r5, r1
 800696c:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8006970:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006972:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 8006976:	b2c9      	uxtb	r1, r1
 8006978:	2920      	cmp	r1, #32
 800697a:	f040 80bc 	bne.w	8006af6 <HAL_I2C_Mem_Write+0x192>
 800697e:	4604      	mov	r4, r0
 8006980:	4690      	mov	r8, r2
 8006982:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8006984:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006986:	f1ba 0f00 	cmp.w	sl, #0
 800698a:	bf18      	it	ne
 800698c:	2b00      	cmpne	r3, #0
 800698e:	d016      	beq.n	80069be <HAL_I2C_Mem_Write+0x5a>
    __HAL_LOCK(hi2c);
 8006990:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8006994:	2b01      	cmp	r3, #1
 8006996:	f000 80b2 	beq.w	8006afe <HAL_I2C_Mem_Write+0x19a>
 800699a:	f04f 0b01 	mov.w	fp, #1
 800699e:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 80069a2:	f7fc fd6b 	bl	800347c <HAL_GetTick>
 80069a6:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80069a8:	9000      	str	r0, [sp, #0]
 80069aa:	2319      	movs	r3, #25
 80069ac:	465a      	mov	r2, fp
 80069ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80069b2:	4620      	mov	r0, r4
 80069b4:	f7ff fee6 	bl	8006784 <I2C_WaitOnFlagUntilTimeout>
 80069b8:	b130      	cbz	r0, 80069c8 <HAL_I2C_Mem_Write+0x64>
      return HAL_ERROR;
 80069ba:	2001      	movs	r0, #1
 80069bc:	e09c      	b.n	8006af8 <HAL_I2C_Mem_Write+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80069be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80069c2:	6443      	str	r3, [r0, #68]	@ 0x44
      return  HAL_ERROR;
 80069c4:	2001      	movs	r0, #1
 80069c6:	e097      	b.n	8006af8 <HAL_I2C_Mem_Write+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80069c8:	2321      	movs	r3, #33	@ 0x21
 80069ca:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80069ce:	2340      	movs	r3, #64	@ 0x40
 80069d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069d4:	2300      	movs	r3, #0
 80069d6:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 80069d8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80069da:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 80069dc:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80069e0:	6363      	str	r3, [r4, #52]	@ 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80069e2:	9601      	str	r6, [sp, #4]
 80069e4:	9700      	str	r7, [sp, #0]
 80069e6:	464b      	mov	r3, r9
 80069e8:	4642      	mov	r2, r8
 80069ea:	4629      	mov	r1, r5
 80069ec:	4620      	mov	r0, r4
 80069ee:	f7ff fef5 	bl	80067dc <I2C_RequestMemoryWrite>
 80069f2:	b970      	cbnz	r0, 8006a12 <HAL_I2C_Mem_Write+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80069f4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	2bff      	cmp	r3, #255	@ 0xff
 80069fa:	d90f      	bls.n	8006a1c <HAL_I2C_Mem_Write+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80069fc:	22ff      	movs	r2, #255	@ 0xff
 80069fe:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006a00:	2300      	movs	r3, #0
 8006a02:	9300      	str	r3, [sp, #0]
 8006a04:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006a08:	4629      	mov	r1, r5
 8006a0a:	4620      	mov	r0, r4
 8006a0c:	f7ff fdd9 	bl	80065c2 <I2C_TransferConfig>
 8006a10:	e021      	b.n	8006a56 <HAL_I2C_Mem_Write+0xf2>
      __HAL_UNLOCK(hi2c);
 8006a12:	2300      	movs	r3, #0
 8006a14:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8006a18:	4658      	mov	r0, fp
 8006a1a:	e06d      	b.n	8006af8 <HAL_I2C_Mem_Write+0x194>
      hi2c->XferSize = hi2c->XferCount;
 8006a1c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8006a1e:	b292      	uxth	r2, r2
 8006a20:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006a22:	2300      	movs	r3, #0
 8006a24:	9300      	str	r3, [sp, #0]
 8006a26:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006a2a:	b2d2      	uxtb	r2, r2
 8006a2c:	4629      	mov	r1, r5
 8006a2e:	4620      	mov	r0, r4
 8006a30:	f7ff fdc7 	bl	80065c2 <I2C_TransferConfig>
 8006a34:	e00f      	b.n	8006a56 <HAL_I2C_Mem_Write+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 8006a36:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8006a38:	b292      	uxth	r2, r2
 8006a3a:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	9300      	str	r3, [sp, #0]
 8006a40:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006a44:	b2d2      	uxtb	r2, r2
 8006a46:	4629      	mov	r1, r5
 8006a48:	4620      	mov	r0, r4
 8006a4a:	f7ff fdba 	bl	80065c2 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8006a4e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d033      	beq.n	8006abe <HAL_I2C_Mem_Write+0x15a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a56:	4632      	mov	r2, r6
 8006a58:	4639      	mov	r1, r7
 8006a5a:	4620      	mov	r0, r4
 8006a5c:	f7ff fe67 	bl	800672e <I2C_WaitOnTXISFlagUntilTimeout>
 8006a60:	2800      	cmp	r0, #0
 8006a62:	d14e      	bne.n	8006b02 <HAL_I2C_Mem_Write+0x19e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006a64:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006a66:	6823      	ldr	r3, [r4, #0]
 8006a68:	7812      	ldrb	r2, [r2, #0]
 8006a6a:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8006a6c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006a6e:	3301      	adds	r3, #1
 8006a70:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8006a72:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	3b01      	subs	r3, #1
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8006a7c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8006a7e:	3b01      	subs	r3, #1
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006a84:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8006a86:	b292      	uxth	r2, r2
 8006a88:	2a00      	cmp	r2, #0
 8006a8a:	d0e0      	beq.n	8006a4e <HAL_I2C_Mem_Write+0xea>
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d1de      	bne.n	8006a4e <HAL_I2C_Mem_Write+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006a90:	9600      	str	r6, [sp, #0]
 8006a92:	463b      	mov	r3, r7
 8006a94:	2200      	movs	r2, #0
 8006a96:	2180      	movs	r1, #128	@ 0x80
 8006a98:	4620      	mov	r0, r4
 8006a9a:	f7ff fe73 	bl	8006784 <I2C_WaitOnFlagUntilTimeout>
 8006a9e:	bb90      	cbnz	r0, 8006b06 <HAL_I2C_Mem_Write+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006aa0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	2bff      	cmp	r3, #255	@ 0xff
 8006aa6:	d9c6      	bls.n	8006a36 <HAL_I2C_Mem_Write+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006aa8:	22ff      	movs	r2, #255	@ 0xff
 8006aaa:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006aac:	2300      	movs	r3, #0
 8006aae:	9300      	str	r3, [sp, #0]
 8006ab0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006ab4:	4629      	mov	r1, r5
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	f7ff fd83 	bl	80065c2 <I2C_TransferConfig>
 8006abc:	e7c7      	b.n	8006a4e <HAL_I2C_Mem_Write+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006abe:	4632      	mov	r2, r6
 8006ac0:	4639      	mov	r1, r7
 8006ac2:	4620      	mov	r0, r4
 8006ac4:	f7ff fec8 	bl	8006858 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006ac8:	b9f8      	cbnz	r0, 8006b0a <HAL_I2C_Mem_Write+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006aca:	6823      	ldr	r3, [r4, #0]
 8006acc:	2220      	movs	r2, #32
 8006ace:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8006ad0:	6821      	ldr	r1, [r4, #0]
 8006ad2:	684b      	ldr	r3, [r1, #4]
 8006ad4:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8006ad8:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8006adc:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8006ae0:	f023 0301 	bic.w	r3, r3, #1
 8006ae4:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006ae6:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006aea:	2300      	movs	r3, #0
 8006aec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8006af0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    return HAL_OK;
 8006af4:	e000      	b.n	8006af8 <HAL_I2C_Mem_Write+0x194>
    return HAL_BUSY;
 8006af6:	2002      	movs	r0, #2
}
 8006af8:	b003      	add	sp, #12
 8006afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8006afe:	2002      	movs	r0, #2
 8006b00:	e7fa      	b.n	8006af8 <HAL_I2C_Mem_Write+0x194>
        return HAL_ERROR;
 8006b02:	2001      	movs	r0, #1
 8006b04:	e7f8      	b.n	8006af8 <HAL_I2C_Mem_Write+0x194>
          return HAL_ERROR;
 8006b06:	2001      	movs	r0, #1
 8006b08:	e7f6      	b.n	8006af8 <HAL_I2C_Mem_Write+0x194>
      return HAL_ERROR;
 8006b0a:	2001      	movs	r0, #1
 8006b0c:	e7f4      	b.n	8006af8 <HAL_I2C_Mem_Write+0x194>
	...

08006b10 <HAL_I2C_IsDeviceReady>:
{
 8006b10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b14:	b085      	sub	sp, #20
 8006b16:	461d      	mov	r5, r3
  __IO uint32_t I2C_Trials = 0UL;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b1c:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	2b20      	cmp	r3, #32
 8006b24:	f040 809c 	bne.w	8006c60 <HAL_I2C_IsDeviceReady+0x150>
 8006b28:	4606      	mov	r6, r0
 8006b2a:	4689      	mov	r9, r1
 8006b2c:	4690      	mov	r8, r2
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006b2e:	6803      	ldr	r3, [r0, #0]
 8006b30:	699b      	ldr	r3, [r3, #24]
 8006b32:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8006b36:	f040 8095 	bne.w	8006c64 <HAL_I2C_IsDeviceReady+0x154>
    __HAL_LOCK(hi2c);
 8006b3a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	f000 8092 	beq.w	8006c68 <HAL_I2C_IsDeviceReady+0x158>
 8006b44:	2301      	movs	r3, #1
 8006b46:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b4a:	2324      	movs	r3, #36	@ 0x24
 8006b4c:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b50:	2300      	movs	r3, #0
 8006b52:	6443      	str	r3, [r0, #68]	@ 0x44
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8006b54:	68f3      	ldr	r3, [r6, #12]
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d010      	beq.n	8006b7c <HAL_I2C_IsDeviceReady+0x6c>
 8006b5a:	f3c9 0309 	ubfx	r3, r9, #0, #10
 8006b5e:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8006b62:	6832      	ldr	r2, [r6, #0]
 8006b64:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 8006b66:	f7fc fc89 	bl	800347c <HAL_GetTick>
 8006b6a:	4607      	mov	r7, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b6c:	6832      	ldr	r2, [r6, #0]
 8006b6e:	6993      	ldr	r3, [r2, #24]
 8006b70:	f3c3 1c40 	ubfx	ip, r3, #5, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006b74:	6993      	ldr	r3, [r2, #24]
 8006b76:	f3c3 1300 	ubfx	r3, r3, #4, #1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006b7a:	e00b      	b.n	8006b94 <HAL_I2C_IsDeviceReady+0x84>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8006b7c:	f3c9 0209 	ubfx	r2, r9, #0, #10
 8006b80:	4b3d      	ldr	r3, [pc, #244]	@ (8006c78 <HAL_I2C_IsDeviceReady+0x168>)
 8006b82:	4313      	orrs	r3, r2
 8006b84:	e7ed      	b.n	8006b62 <HAL_I2C_IsDeviceReady+0x52>
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b86:	6833      	ldr	r3, [r6, #0]
 8006b88:	699c      	ldr	r4, [r3, #24]
 8006b8a:	f3c4 1c40 	ubfx	ip, r4, #5, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006b8e:	699b      	ldr	r3, [r3, #24]
 8006b90:	f3c3 1300 	ubfx	r3, r3, #4, #1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006b94:	ea5c 0c03 	orrs.w	ip, ip, r3
 8006b98:	d117      	bne.n	8006bca <HAL_I2C_IsDeviceReady+0xba>
        if (Timeout != HAL_MAX_DELAY)
 8006b9a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006b9e:	d0f2      	beq.n	8006b86 <HAL_I2C_IsDeviceReady+0x76>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006ba0:	f7fc fc6c 	bl	800347c <HAL_GetTick>
 8006ba4:	1bc0      	subs	r0, r0, r7
 8006ba6:	42a8      	cmp	r0, r5
 8006ba8:	d801      	bhi.n	8006bae <HAL_I2C_IsDeviceReady+0x9e>
 8006baa:	2d00      	cmp	r5, #0
 8006bac:	d1eb      	bne.n	8006b86 <HAL_I2C_IsDeviceReady+0x76>
            hi2c->State = HAL_I2C_STATE_READY;
 8006bae:	2320      	movs	r3, #32
 8006bb0:	f886 3041 	strb.w	r3, [r6, #65]	@ 0x41
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006bb4:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 8006bb6:	f043 0320 	orr.w	r3, r3, #32
 8006bba:	6473      	str	r3, [r6, #68]	@ 0x44
            __HAL_UNLOCK(hi2c);
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	f886 3040 	strb.w	r3, [r6, #64]	@ 0x40
            return HAL_ERROR;
 8006bc2:	2001      	movs	r0, #1
}
 8006bc4:	b005      	add	sp, #20
 8006bc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8006bca:	6833      	ldr	r3, [r6, #0]
 8006bcc:	699b      	ldr	r3, [r3, #24]
 8006bce:	f013 0f10 	tst.w	r3, #16
 8006bd2:	d023      	beq.n	8006c1c <HAL_I2C_IsDeviceReady+0x10c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006bd4:	9700      	str	r7, [sp, #0]
 8006bd6:	462b      	mov	r3, r5
 8006bd8:	2200      	movs	r2, #0
 8006bda:	2120      	movs	r1, #32
 8006bdc:	4630      	mov	r0, r6
 8006bde:	f7ff fdd1 	bl	8006784 <I2C_WaitOnFlagUntilTimeout>
 8006be2:	2800      	cmp	r0, #0
 8006be4:	d144      	bne.n	8006c70 <HAL_I2C_IsDeviceReady+0x160>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006be6:	6833      	ldr	r3, [r6, #0]
 8006be8:	2210      	movs	r2, #16
 8006bea:	61da      	str	r2, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006bec:	6833      	ldr	r3, [r6, #0]
 8006bee:	2220      	movs	r2, #32
 8006bf0:	61da      	str	r2, [r3, #28]
      if (I2C_Trials == Trials)
 8006bf2:	9b03      	ldr	r3, [sp, #12]
 8006bf4:	4543      	cmp	r3, r8
 8006bf6:	d022      	beq.n	8006c3e <HAL_I2C_IsDeviceReady+0x12e>
      I2C_Trials++;
 8006bf8:	9b03      	ldr	r3, [sp, #12]
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	9303      	str	r3, [sp, #12]
    } while (I2C_Trials < Trials);
 8006bfe:	9b03      	ldr	r3, [sp, #12]
 8006c00:	4543      	cmp	r3, r8
 8006c02:	d3a7      	bcc.n	8006b54 <HAL_I2C_IsDeviceReady+0x44>
    hi2c->State = HAL_I2C_STATE_READY;
 8006c04:	2320      	movs	r3, #32
 8006c06:	f886 3041 	strb.w	r3, [r6, #65]	@ 0x41
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c0a:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 8006c0c:	f043 0320 	orr.w	r3, r3, #32
 8006c10:	6473      	str	r3, [r6, #68]	@ 0x44
    __HAL_UNLOCK(hi2c);
 8006c12:	2300      	movs	r3, #0
 8006c14:	f886 3040 	strb.w	r3, [r6, #64]	@ 0x40
    return HAL_ERROR;
 8006c18:	2001      	movs	r0, #1
 8006c1a:	e7d3      	b.n	8006bc4 <HAL_I2C_IsDeviceReady+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006c1c:	9700      	str	r7, [sp, #0]
 8006c1e:	462b      	mov	r3, r5
 8006c20:	2200      	movs	r2, #0
 8006c22:	2120      	movs	r1, #32
 8006c24:	4630      	mov	r0, r6
 8006c26:	f7ff fdad 	bl	8006784 <I2C_WaitOnFlagUntilTimeout>
 8006c2a:	b9f8      	cbnz	r0, 8006c6c <HAL_I2C_IsDeviceReady+0x15c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c2c:	6832      	ldr	r2, [r6, #0]
 8006c2e:	2320      	movs	r3, #32
 8006c30:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 8006c32:	f886 3041 	strb.w	r3, [r6, #65]	@ 0x41
        __HAL_UNLOCK(hi2c);
 8006c36:	2300      	movs	r3, #0
 8006c38:	f886 3040 	strb.w	r3, [r6, #64]	@ 0x40
        return HAL_OK;
 8006c3c:	e7c2      	b.n	8006bc4 <HAL_I2C_IsDeviceReady+0xb4>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006c3e:	6832      	ldr	r2, [r6, #0]
 8006c40:	6853      	ldr	r3, [r2, #4]
 8006c42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006c46:	6053      	str	r3, [r2, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006c48:	9700      	str	r7, [sp, #0]
 8006c4a:	462b      	mov	r3, r5
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	2120      	movs	r1, #32
 8006c50:	4630      	mov	r0, r6
 8006c52:	f7ff fd97 	bl	8006784 <I2C_WaitOnFlagUntilTimeout>
 8006c56:	b968      	cbnz	r0, 8006c74 <HAL_I2C_IsDeviceReady+0x164>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c58:	6833      	ldr	r3, [r6, #0]
 8006c5a:	2220      	movs	r2, #32
 8006c5c:	61da      	str	r2, [r3, #28]
 8006c5e:	e7cb      	b.n	8006bf8 <HAL_I2C_IsDeviceReady+0xe8>
    return HAL_BUSY;
 8006c60:	2002      	movs	r0, #2
 8006c62:	e7af      	b.n	8006bc4 <HAL_I2C_IsDeviceReady+0xb4>
      return HAL_BUSY;
 8006c64:	2002      	movs	r0, #2
 8006c66:	e7ad      	b.n	8006bc4 <HAL_I2C_IsDeviceReady+0xb4>
    __HAL_LOCK(hi2c);
 8006c68:	2002      	movs	r0, #2
 8006c6a:	e7ab      	b.n	8006bc4 <HAL_I2C_IsDeviceReady+0xb4>
          return HAL_ERROR;
 8006c6c:	2001      	movs	r0, #1
 8006c6e:	e7a9      	b.n	8006bc4 <HAL_I2C_IsDeviceReady+0xb4>
          return HAL_ERROR;
 8006c70:	2001      	movs	r0, #1
 8006c72:	e7a7      	b.n	8006bc4 <HAL_I2C_IsDeviceReady+0xb4>
          return HAL_ERROR;
 8006c74:	2001      	movs	r0, #1
 8006c76:	e7a5      	b.n	8006bc4 <HAL_I2C_IsDeviceReady+0xb4>
 8006c78:	02002000 	.word	0x02002000

08006c7c <HAL_I2C_EV_IRQHandler>:
{
 8006c7c:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006c7e:	6803      	ldr	r3, [r0, #0]
 8006c80:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006c82:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8006c84:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8006c86:	b103      	cbz	r3, 8006c8a <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 8006c88:	4798      	blx	r3
}
 8006c8a:	bd08      	pop	{r3, pc}

08006c8c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006c8c:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c8e:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8006c92:	b2d2      	uxtb	r2, r2
 8006c94:	2a20      	cmp	r2, #32
 8006c96:	d123      	bne.n	8006ce0 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c98:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8006c9c:	2a01      	cmp	r2, #1
 8006c9e:	d021      	beq.n	8006ce4 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ca6:	2224      	movs	r2, #36	@ 0x24
 8006ca8:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006cac:	6800      	ldr	r0, [r0, #0]
 8006cae:	6802      	ldr	r2, [r0, #0]
 8006cb0:	f022 0201 	bic.w	r2, r2, #1
 8006cb4:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006cb6:	6818      	ldr	r0, [r3, #0]
 8006cb8:	6802      	ldr	r2, [r0, #0]
 8006cba:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006cbe:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006cc0:	6818      	ldr	r0, [r3, #0]
 8006cc2:	6802      	ldr	r2, [r0, #0]
 8006cc4:	4311      	orrs	r1, r2
 8006cc6:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006cc8:	6819      	ldr	r1, [r3, #0]
 8006cca:	680a      	ldr	r2, [r1, #0]
 8006ccc:	f042 0201 	orr.w	r2, r2, #1
 8006cd0:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cd2:	2220      	movs	r2, #32
 8006cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cd8:	2000      	movs	r0, #0
 8006cda:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 8006cde:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8006ce0:	2002      	movs	r0, #2
 8006ce2:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8006ce4:	2002      	movs	r0, #2
  }
}
 8006ce6:	4770      	bx	lr

08006ce8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006ce8:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cea:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8006cee:	b2d2      	uxtb	r2, r2
 8006cf0:	2a20      	cmp	r2, #32
 8006cf2:	d121      	bne.n	8006d38 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cf4:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8006cf8:	2a01      	cmp	r2, #1
 8006cfa:	d01f      	beq.n	8006d3c <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d02:	2224      	movs	r2, #36	@ 0x24
 8006d04:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d08:	6800      	ldr	r0, [r0, #0]
 8006d0a:	6802      	ldr	r2, [r0, #0]
 8006d0c:	f022 0201 	bic.w	r2, r2, #1
 8006d10:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006d12:	6818      	ldr	r0, [r3, #0]
 8006d14:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006d16:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006d1a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006d1e:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d20:	6819      	ldr	r1, [r3, #0]
 8006d22:	680a      	ldr	r2, [r1, #0]
 8006d24:	f042 0201 	orr.w	r2, r2, #1
 8006d28:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d2a:	2220      	movs	r2, #32
 8006d2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d30:	2000      	movs	r0, #0
 8006d32:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 8006d36:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8006d38:	2002      	movs	r0, #2
 8006d3a:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8006d3c:	2002      	movs	r0, #2
  }
}
 8006d3e:	4770      	bx	lr

08006d40 <HAL_PWREx_ConfigSupply>:
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006d40:	4b13      	ldr	r3, [pc, #76]	@ (8006d90 <HAL_PWREx_ConfigSupply+0x50>)
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	f013 0f04 	tst.w	r3, #4
 8006d48:	d107      	bne.n	8006d5a <HAL_PWREx_ConfigSupply+0x1a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006d4a:	4b11      	ldr	r3, [pc, #68]	@ (8006d90 <HAL_PWREx_ConfigSupply+0x50>)
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	f003 0307 	and.w	r3, r3, #7
 8006d52:	4283      	cmp	r3, r0
 8006d54:	d01a      	beq.n	8006d8c <HAL_PWREx_ConfigSupply+0x4c>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006d56:	2001      	movs	r0, #1
 8006d58:	4770      	bx	lr
{
 8006d5a:	b510      	push	{r4, lr}
      return HAL_OK;
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006d5c:	4a0c      	ldr	r2, [pc, #48]	@ (8006d90 <HAL_PWREx_ConfigSupply+0x50>)
 8006d5e:	68d3      	ldr	r3, [r2, #12]
 8006d60:	f023 0307 	bic.w	r3, r3, #7
 8006d64:	4303      	orrs	r3, r0
 8006d66:	60d3      	str	r3, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006d68:	f7fc fb88 	bl	800347c <HAL_GetTick>
 8006d6c:	4604      	mov	r4, r0

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006d6e:	4b08      	ldr	r3, [pc, #32]	@ (8006d90 <HAL_PWREx_ConfigSupply+0x50>)
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8006d76:	d107      	bne.n	8006d88 <HAL_PWREx_ConfigSupply+0x48>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006d78:	f7fc fb80 	bl	800347c <HAL_GetTick>
 8006d7c:	1b00      	subs	r0, r0, r4
 8006d7e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006d82:	d9f4      	bls.n	8006d6e <HAL_PWREx_ConfigSupply+0x2e>
    {
      return HAL_ERROR;
 8006d84:	2001      	movs	r0, #1
 8006d86:	e000      	b.n	8006d8a <HAL_PWREx_ConfigSupply+0x4a>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006d88:	2000      	movs	r0, #0
}
 8006d8a:	bd10      	pop	{r4, pc}
      return HAL_OK;
 8006d8c:	2000      	movs	r0, #0
}
 8006d8e:	4770      	bx	lr
 8006d90:	58024800 	.word	0x58024800

08006d94 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d94:	2800      	cmp	r0, #0
 8006d96:	f000 8318 	beq.w	80073ca <HAL_RCC_OscConfig+0x636>
{
 8006d9a:	b538      	push	{r3, r4, r5, lr}
 8006d9c:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d9e:	6803      	ldr	r3, [r0, #0]
 8006da0:	f013 0f01 	tst.w	r3, #1
 8006da4:	d025      	beq.n	8006df2 <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006da6:	4a94      	ldr	r2, [pc, #592]	@ (8006ff8 <HAL_RCC_OscConfig+0x264>)
 8006da8:	6913      	ldr	r3, [r2, #16]
 8006daa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006dae:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006db0:	2b10      	cmp	r3, #16
 8006db2:	d015      	beq.n	8006de0 <HAL_RCC_OscConfig+0x4c>
 8006db4:	2b18      	cmp	r3, #24
 8006db6:	d00f      	beq.n	8006dd8 <HAL_RCC_OscConfig+0x44>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006db8:	6863      	ldr	r3, [r4, #4]
 8006dba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006dbe:	d03f      	beq.n	8006e40 <HAL_RCC_OscConfig+0xac>
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d153      	bne.n	8006e6c <HAL_RCC_OscConfig+0xd8>
 8006dc4:	4b8c      	ldr	r3, [pc, #560]	@ (8006ff8 <HAL_RCC_OscConfig+0x264>)
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006dcc:	601a      	str	r2, [r3, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006dd4:	601a      	str	r2, [r3, #0]
 8006dd6:	e038      	b.n	8006e4a <HAL_RCC_OscConfig+0xb6>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006dd8:	f002 0203 	and.w	r2, r2, #3
 8006ddc:	2a02      	cmp	r2, #2
 8006dde:	d1eb      	bne.n	8006db8 <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006de0:	4b85      	ldr	r3, [pc, #532]	@ (8006ff8 <HAL_RCC_OscConfig+0x264>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8006de8:	d003      	beq.n	8006df2 <HAL_RCC_OscConfig+0x5e>
 8006dea:	6863      	ldr	r3, [r4, #4]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f000 82ee 	beq.w	80073ce <HAL_RCC_OscConfig+0x63a>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006df2:	6823      	ldr	r3, [r4, #0]
 8006df4:	f013 0f02 	tst.w	r3, #2
 8006df8:	f000 80a1 	beq.w	8006f3e <HAL_RCC_OscConfig+0x1aa>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006dfc:	4a7e      	ldr	r2, [pc, #504]	@ (8006ff8 <HAL_RCC_OscConfig+0x264>)
 8006dfe:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006e00:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006e02:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 8006e06:	d05a      	beq.n	8006ebe <HAL_RCC_OscConfig+0x12a>
 8006e08:	2b18      	cmp	r3, #24
 8006e0a:	d055      	beq.n	8006eb8 <HAL_RCC_OscConfig+0x124>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006e0c:	68e3      	ldr	r3, [r4, #12]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	f000 80de 	beq.w	8006fd0 <HAL_RCC_OscConfig+0x23c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006e14:	4978      	ldr	r1, [pc, #480]	@ (8006ff8 <HAL_RCC_OscConfig+0x264>)
 8006e16:	680a      	ldr	r2, [r1, #0]
 8006e18:	f022 0219 	bic.w	r2, r2, #25
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e20:	f7fc fb2c 	bl	800347c <HAL_GetTick>
 8006e24:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e26:	4b74      	ldr	r3, [pc, #464]	@ (8006ff8 <HAL_RCC_OscConfig+0x264>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f013 0f04 	tst.w	r3, #4
 8006e2e:	f040 80ad 	bne.w	8006f8c <HAL_RCC_OscConfig+0x1f8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e32:	f7fc fb23 	bl	800347c <HAL_GetTick>
 8006e36:	1b40      	subs	r0, r0, r5
 8006e38:	2802      	cmp	r0, #2
 8006e3a:	d9f4      	bls.n	8006e26 <HAL_RCC_OscConfig+0x92>
          {
            return HAL_TIMEOUT;
 8006e3c:	2003      	movs	r0, #3
 8006e3e:	e2cd      	b.n	80073dc <HAL_RCC_OscConfig+0x648>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e40:	4a6d      	ldr	r2, [pc, #436]	@ (8006ff8 <HAL_RCC_OscConfig+0x264>)
 8006e42:	6813      	ldr	r3, [r2, #0]
 8006e44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e48:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e4a:	6863      	ldr	r3, [r4, #4]
 8006e4c:	b32b      	cbz	r3, 8006e9a <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 8006e4e:	f7fc fb15 	bl	800347c <HAL_GetTick>
 8006e52:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e54:	4b68      	ldr	r3, [pc, #416]	@ (8006ff8 <HAL_RCC_OscConfig+0x264>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8006e5c:	d1c9      	bne.n	8006df2 <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e5e:	f7fc fb0d 	bl	800347c <HAL_GetTick>
 8006e62:	1b40      	subs	r0, r0, r5
 8006e64:	2864      	cmp	r0, #100	@ 0x64
 8006e66:	d9f5      	bls.n	8006e54 <HAL_RCC_OscConfig+0xc0>
            return HAL_TIMEOUT;
 8006e68:	2003      	movs	r0, #3
 8006e6a:	e2b7      	b.n	80073dc <HAL_RCC_OscConfig+0x648>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006e70:	d009      	beq.n	8006e86 <HAL_RCC_OscConfig+0xf2>
 8006e72:	4b61      	ldr	r3, [pc, #388]	@ (8006ff8 <HAL_RCC_OscConfig+0x264>)
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006e7a:	601a      	str	r2, [r3, #0]
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006e82:	601a      	str	r2, [r3, #0]
 8006e84:	e7e1      	b.n	8006e4a <HAL_RCC_OscConfig+0xb6>
 8006e86:	4b5c      	ldr	r3, [pc, #368]	@ (8006ff8 <HAL_RCC_OscConfig+0x264>)
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006e8e:	601a      	str	r2, [r3, #0]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006e96:	601a      	str	r2, [r3, #0]
 8006e98:	e7d7      	b.n	8006e4a <HAL_RCC_OscConfig+0xb6>
        tickstart = HAL_GetTick();
 8006e9a:	f7fc faef 	bl	800347c <HAL_GetTick>
 8006e9e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006ea0:	4b55      	ldr	r3, [pc, #340]	@ (8006ff8 <HAL_RCC_OscConfig+0x264>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8006ea8:	d0a3      	beq.n	8006df2 <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006eaa:	f7fc fae7 	bl	800347c <HAL_GetTick>
 8006eae:	1b40      	subs	r0, r0, r5
 8006eb0:	2864      	cmp	r0, #100	@ 0x64
 8006eb2:	d9f5      	bls.n	8006ea0 <HAL_RCC_OscConfig+0x10c>
            return HAL_TIMEOUT;
 8006eb4:	2003      	movs	r0, #3
 8006eb6:	e291      	b.n	80073dc <HAL_RCC_OscConfig+0x648>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006eb8:	f012 0f03 	tst.w	r2, #3
 8006ebc:	d1a6      	bne.n	8006e0c <HAL_RCC_OscConfig+0x78>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ebe:	4b4e      	ldr	r3, [pc, #312]	@ (8006ff8 <HAL_RCC_OscConfig+0x264>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f013 0f04 	tst.w	r3, #4
 8006ec6:	d003      	beq.n	8006ed0 <HAL_RCC_OscConfig+0x13c>
 8006ec8:	68e3      	ldr	r3, [r4, #12]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	f000 8281 	beq.w	80073d2 <HAL_RCC_OscConfig+0x63e>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006ed0:	4a49      	ldr	r2, [pc, #292]	@ (8006ff8 <HAL_RCC_OscConfig+0x264>)
 8006ed2:	6813      	ldr	r3, [r2, #0]
 8006ed4:	f023 0319 	bic.w	r3, r3, #25
 8006ed8:	68e1      	ldr	r1, [r4, #12]
 8006eda:	430b      	orrs	r3, r1
 8006edc:	6013      	str	r3, [r2, #0]
          tickstart = HAL_GetTick();
 8006ede:	f7fc facd 	bl	800347c <HAL_GetTick>
 8006ee2:	4605      	mov	r5, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ee4:	4b44      	ldr	r3, [pc, #272]	@ (8006ff8 <HAL_RCC_OscConfig+0x264>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f013 0f04 	tst.w	r3, #4
 8006eec:	d106      	bne.n	8006efc <HAL_RCC_OscConfig+0x168>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006eee:	f7fc fac5 	bl	800347c <HAL_GetTick>
 8006ef2:	1b40      	subs	r0, r0, r5
 8006ef4:	2802      	cmp	r0, #2
 8006ef6:	d9f5      	bls.n	8006ee4 <HAL_RCC_OscConfig+0x150>
              return HAL_TIMEOUT;
 8006ef8:	2003      	movs	r0, #3
 8006efa:	e26f      	b.n	80073dc <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006efc:	f7fc fad8 	bl	80034b0 <HAL_GetREVID>
 8006f00:	f241 0303 	movw	r3, #4099	@ 0x1003
 8006f04:	4298      	cmp	r0, r3
 8006f06:	d812      	bhi.n	8006f2e <HAL_RCC_OscConfig+0x19a>
 8006f08:	6922      	ldr	r2, [r4, #16]
 8006f0a:	2a40      	cmp	r2, #64	@ 0x40
 8006f0c:	d007      	beq.n	8006f1e <HAL_RCC_OscConfig+0x18a>
 8006f0e:	493a      	ldr	r1, [pc, #232]	@ (8006ff8 <HAL_RCC_OscConfig+0x264>)
 8006f10:	684b      	ldr	r3, [r1, #4]
 8006f12:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006f16:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8006f1a:	604b      	str	r3, [r1, #4]
 8006f1c:	e00f      	b.n	8006f3e <HAL_RCC_OscConfig+0x1aa>
 8006f1e:	4a36      	ldr	r2, [pc, #216]	@ (8006ff8 <HAL_RCC_OscConfig+0x264>)
 8006f20:	6853      	ldr	r3, [r2, #4]
 8006f22:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006f26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f2a:	6053      	str	r3, [r2, #4]
 8006f2c:	e007      	b.n	8006f3e <HAL_RCC_OscConfig+0x1aa>
 8006f2e:	4a32      	ldr	r2, [pc, #200]	@ (8006ff8 <HAL_RCC_OscConfig+0x264>)
 8006f30:	6853      	ldr	r3, [r2, #4]
 8006f32:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8006f36:	6921      	ldr	r1, [r4, #16]
 8006f38:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006f3c:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006f3e:	6823      	ldr	r3, [r4, #0]
 8006f40:	f013 0f10 	tst.w	r3, #16
 8006f44:	f000 8088 	beq.w	8007058 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f48:	4a2b      	ldr	r2, [pc, #172]	@ (8006ff8 <HAL_RCC_OscConfig+0x264>)
 8006f4a:	6913      	ldr	r3, [r2, #16]
 8006f4c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006f50:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006f52:	2b08      	cmp	r3, #8
 8006f54:	d056      	beq.n	8007004 <HAL_RCC_OscConfig+0x270>
 8006f56:	2b18      	cmp	r3, #24
 8006f58:	d050      	beq.n	8006ffc <HAL_RCC_OscConfig+0x268>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006f5a:	69e3      	ldr	r3, [r4, #28]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	f000 80b8 	beq.w	80070d2 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006f62:	4a25      	ldr	r2, [pc, #148]	@ (8006ff8 <HAL_RCC_OscConfig+0x264>)
 8006f64:	6813      	ldr	r3, [r2, #0]
 8006f66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f6c:	f7fc fa86 	bl	800347c <HAL_GetTick>
 8006f70:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006f72:	4b21      	ldr	r3, [pc, #132]	@ (8006ff8 <HAL_RCC_OscConfig+0x264>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8006f7a:	f040 8088 	bne.w	800708e <HAL_RCC_OscConfig+0x2fa>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006f7e:	f7fc fa7d 	bl	800347c <HAL_GetTick>
 8006f82:	1b40      	subs	r0, r0, r5
 8006f84:	2802      	cmp	r0, #2
 8006f86:	d9f4      	bls.n	8006f72 <HAL_RCC_OscConfig+0x1de>
          {
            return HAL_TIMEOUT;
 8006f88:	2003      	movs	r0, #3
 8006f8a:	e227      	b.n	80073dc <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f8c:	f7fc fa90 	bl	80034b0 <HAL_GetREVID>
 8006f90:	f241 0303 	movw	r3, #4099	@ 0x1003
 8006f94:	4298      	cmp	r0, r3
 8006f96:	d812      	bhi.n	8006fbe <HAL_RCC_OscConfig+0x22a>
 8006f98:	6922      	ldr	r2, [r4, #16]
 8006f9a:	2a40      	cmp	r2, #64	@ 0x40
 8006f9c:	d007      	beq.n	8006fae <HAL_RCC_OscConfig+0x21a>
 8006f9e:	4916      	ldr	r1, [pc, #88]	@ (8006ff8 <HAL_RCC_OscConfig+0x264>)
 8006fa0:	684b      	ldr	r3, [r1, #4]
 8006fa2:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006fa6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8006faa:	604b      	str	r3, [r1, #4]
 8006fac:	e7c7      	b.n	8006f3e <HAL_RCC_OscConfig+0x1aa>
 8006fae:	4a12      	ldr	r2, [pc, #72]	@ (8006ff8 <HAL_RCC_OscConfig+0x264>)
 8006fb0:	6853      	ldr	r3, [r2, #4]
 8006fb2:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006fb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006fba:	6053      	str	r3, [r2, #4]
 8006fbc:	e7bf      	b.n	8006f3e <HAL_RCC_OscConfig+0x1aa>
 8006fbe:	4a0e      	ldr	r2, [pc, #56]	@ (8006ff8 <HAL_RCC_OscConfig+0x264>)
 8006fc0:	6853      	ldr	r3, [r2, #4]
 8006fc2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8006fc6:	6921      	ldr	r1, [r4, #16]
 8006fc8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006fcc:	6053      	str	r3, [r2, #4]
 8006fce:	e7b6      	b.n	8006f3e <HAL_RCC_OscConfig+0x1aa>
        __HAL_RCC_HSI_DISABLE();
 8006fd0:	4a09      	ldr	r2, [pc, #36]	@ (8006ff8 <HAL_RCC_OscConfig+0x264>)
 8006fd2:	6813      	ldr	r3, [r2, #0]
 8006fd4:	f023 0301 	bic.w	r3, r3, #1
 8006fd8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006fda:	f7fc fa4f 	bl	800347c <HAL_GetTick>
 8006fde:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006fe0:	4b05      	ldr	r3, [pc, #20]	@ (8006ff8 <HAL_RCC_OscConfig+0x264>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f013 0f04 	tst.w	r3, #4
 8006fe8:	d0a9      	beq.n	8006f3e <HAL_RCC_OscConfig+0x1aa>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006fea:	f7fc fa47 	bl	800347c <HAL_GetTick>
 8006fee:	1b40      	subs	r0, r0, r5
 8006ff0:	2802      	cmp	r0, #2
 8006ff2:	d9f5      	bls.n	8006fe0 <HAL_RCC_OscConfig+0x24c>
            return HAL_TIMEOUT;
 8006ff4:	2003      	movs	r0, #3
 8006ff6:	e1f1      	b.n	80073dc <HAL_RCC_OscConfig+0x648>
 8006ff8:	58024400 	.word	0x58024400
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006ffc:	f002 0203 	and.w	r2, r2, #3
 8007000:	2a01      	cmp	r2, #1
 8007002:	d1aa      	bne.n	8006f5a <HAL_RCC_OscConfig+0x1c6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007004:	4ba1      	ldr	r3, [pc, #644]	@ (800728c <HAL_RCC_OscConfig+0x4f8>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800700c:	d003      	beq.n	8007016 <HAL_RCC_OscConfig+0x282>
 800700e:	69e3      	ldr	r3, [r4, #28]
 8007010:	2b80      	cmp	r3, #128	@ 0x80
 8007012:	f040 81e0 	bne.w	80073d6 <HAL_RCC_OscConfig+0x642>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007016:	f7fc fa4b 	bl	80034b0 <HAL_GetREVID>
 800701a:	f241 0303 	movw	r3, #4099	@ 0x1003
 800701e:	4298      	cmp	r0, r3
 8007020:	d812      	bhi.n	8007048 <HAL_RCC_OscConfig+0x2b4>
 8007022:	6a22      	ldr	r2, [r4, #32]
 8007024:	2a20      	cmp	r2, #32
 8007026:	d007      	beq.n	8007038 <HAL_RCC_OscConfig+0x2a4>
 8007028:	4998      	ldr	r1, [pc, #608]	@ (800728c <HAL_RCC_OscConfig+0x4f8>)
 800702a:	684b      	ldr	r3, [r1, #4]
 800702c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007030:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8007034:	604b      	str	r3, [r1, #4]
 8007036:	e00f      	b.n	8007058 <HAL_RCC_OscConfig+0x2c4>
 8007038:	4a94      	ldr	r2, [pc, #592]	@ (800728c <HAL_RCC_OscConfig+0x4f8>)
 800703a:	6853      	ldr	r3, [r2, #4]
 800703c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007040:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007044:	6053      	str	r3, [r2, #4]
 8007046:	e007      	b.n	8007058 <HAL_RCC_OscConfig+0x2c4>
 8007048:	4a90      	ldr	r2, [pc, #576]	@ (800728c <HAL_RCC_OscConfig+0x4f8>)
 800704a:	68d3      	ldr	r3, [r2, #12]
 800704c:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8007050:	6a21      	ldr	r1, [r4, #32]
 8007052:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007056:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007058:	6823      	ldr	r3, [r4, #0]
 800705a:	f013 0f08 	tst.w	r3, #8
 800705e:	d060      	beq.n	8007122 <HAL_RCC_OscConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007060:	6963      	ldr	r3, [r4, #20]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d049      	beq.n	80070fa <HAL_RCC_OscConfig+0x366>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007066:	4a89      	ldr	r2, [pc, #548]	@ (800728c <HAL_RCC_OscConfig+0x4f8>)
 8007068:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 800706a:	f043 0301 	orr.w	r3, r3, #1
 800706e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007070:	f7fc fa04 	bl	800347c <HAL_GetTick>
 8007074:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007076:	4b85      	ldr	r3, [pc, #532]	@ (800728c <HAL_RCC_OscConfig+0x4f8>)
 8007078:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800707a:	f013 0f02 	tst.w	r3, #2
 800707e:	d150      	bne.n	8007122 <HAL_RCC_OscConfig+0x38e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007080:	f7fc f9fc 	bl	800347c <HAL_GetTick>
 8007084:	1b40      	subs	r0, r0, r5
 8007086:	2802      	cmp	r0, #2
 8007088:	d9f5      	bls.n	8007076 <HAL_RCC_OscConfig+0x2e2>
        {
          return HAL_TIMEOUT;
 800708a:	2003      	movs	r0, #3
 800708c:	e1a6      	b.n	80073dc <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800708e:	f7fc fa0f 	bl	80034b0 <HAL_GetREVID>
 8007092:	f241 0303 	movw	r3, #4099	@ 0x1003
 8007096:	4298      	cmp	r0, r3
 8007098:	d812      	bhi.n	80070c0 <HAL_RCC_OscConfig+0x32c>
 800709a:	6a22      	ldr	r2, [r4, #32]
 800709c:	2a20      	cmp	r2, #32
 800709e:	d007      	beq.n	80070b0 <HAL_RCC_OscConfig+0x31c>
 80070a0:	497a      	ldr	r1, [pc, #488]	@ (800728c <HAL_RCC_OscConfig+0x4f8>)
 80070a2:	684b      	ldr	r3, [r1, #4]
 80070a4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80070a8:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 80070ac:	604b      	str	r3, [r1, #4]
 80070ae:	e7d3      	b.n	8007058 <HAL_RCC_OscConfig+0x2c4>
 80070b0:	4a76      	ldr	r2, [pc, #472]	@ (800728c <HAL_RCC_OscConfig+0x4f8>)
 80070b2:	6853      	ldr	r3, [r2, #4]
 80070b4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80070b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80070bc:	6053      	str	r3, [r2, #4]
 80070be:	e7cb      	b.n	8007058 <HAL_RCC_OscConfig+0x2c4>
 80070c0:	4a72      	ldr	r2, [pc, #456]	@ (800728c <HAL_RCC_OscConfig+0x4f8>)
 80070c2:	68d3      	ldr	r3, [r2, #12]
 80070c4:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 80070c8:	6a21      	ldr	r1, [r4, #32]
 80070ca:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80070ce:	60d3      	str	r3, [r2, #12]
 80070d0:	e7c2      	b.n	8007058 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_CSI_DISABLE();
 80070d2:	4a6e      	ldr	r2, [pc, #440]	@ (800728c <HAL_RCC_OscConfig+0x4f8>)
 80070d4:	6813      	ldr	r3, [r2, #0]
 80070d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80070da:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80070dc:	f7fc f9ce 	bl	800347c <HAL_GetTick>
 80070e0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80070e2:	4b6a      	ldr	r3, [pc, #424]	@ (800728c <HAL_RCC_OscConfig+0x4f8>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80070ea:	d0b5      	beq.n	8007058 <HAL_RCC_OscConfig+0x2c4>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80070ec:	f7fc f9c6 	bl	800347c <HAL_GetTick>
 80070f0:	1b40      	subs	r0, r0, r5
 80070f2:	2802      	cmp	r0, #2
 80070f4:	d9f5      	bls.n	80070e2 <HAL_RCC_OscConfig+0x34e>
            return HAL_TIMEOUT;
 80070f6:	2003      	movs	r0, #3
 80070f8:	e170      	b.n	80073dc <HAL_RCC_OscConfig+0x648>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80070fa:	4a64      	ldr	r2, [pc, #400]	@ (800728c <HAL_RCC_OscConfig+0x4f8>)
 80070fc:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 80070fe:	f023 0301 	bic.w	r3, r3, #1
 8007102:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007104:	f7fc f9ba 	bl	800347c <HAL_GetTick>
 8007108:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800710a:	4b60      	ldr	r3, [pc, #384]	@ (800728c <HAL_RCC_OscConfig+0x4f8>)
 800710c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800710e:	f013 0f02 	tst.w	r3, #2
 8007112:	d006      	beq.n	8007122 <HAL_RCC_OscConfig+0x38e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007114:	f7fc f9b2 	bl	800347c <HAL_GetTick>
 8007118:	1b40      	subs	r0, r0, r5
 800711a:	2802      	cmp	r0, #2
 800711c:	d9f5      	bls.n	800710a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800711e:	2003      	movs	r0, #3
 8007120:	e15c      	b.n	80073dc <HAL_RCC_OscConfig+0x648>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007122:	6823      	ldr	r3, [r4, #0]
 8007124:	f013 0f20 	tst.w	r3, #32
 8007128:	d029      	beq.n	800717e <HAL_RCC_OscConfig+0x3ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800712a:	69a3      	ldr	r3, [r4, #24]
 800712c:	b19b      	cbz	r3, 8007156 <HAL_RCC_OscConfig+0x3c2>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800712e:	4a57      	ldr	r2, [pc, #348]	@ (800728c <HAL_RCC_OscConfig+0x4f8>)
 8007130:	6813      	ldr	r3, [r2, #0]
 8007132:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007136:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007138:	f7fc f9a0 	bl	800347c <HAL_GetTick>
 800713c:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800713e:	4b53      	ldr	r3, [pc, #332]	@ (800728c <HAL_RCC_OscConfig+0x4f8>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8007146:	d11a      	bne.n	800717e <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007148:	f7fc f998 	bl	800347c <HAL_GetTick>
 800714c:	1b40      	subs	r0, r0, r5
 800714e:	2802      	cmp	r0, #2
 8007150:	d9f5      	bls.n	800713e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007152:	2003      	movs	r0, #3
 8007154:	e142      	b.n	80073dc <HAL_RCC_OscConfig+0x648>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007156:	4a4d      	ldr	r2, [pc, #308]	@ (800728c <HAL_RCC_OscConfig+0x4f8>)
 8007158:	6813      	ldr	r3, [r2, #0]
 800715a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800715e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007160:	f7fc f98c 	bl	800347c <HAL_GetTick>
 8007164:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007166:	4b49      	ldr	r3, [pc, #292]	@ (800728c <HAL_RCC_OscConfig+0x4f8>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 800716e:	d006      	beq.n	800717e <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007170:	f7fc f984 	bl	800347c <HAL_GetTick>
 8007174:	1b40      	subs	r0, r0, r5
 8007176:	2802      	cmp	r0, #2
 8007178:	d9f5      	bls.n	8007166 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800717a:	2003      	movs	r0, #3
 800717c:	e12e      	b.n	80073dc <HAL_RCC_OscConfig+0x648>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800717e:	6823      	ldr	r3, [r4, #0]
 8007180:	f013 0f04 	tst.w	r3, #4
 8007184:	d121      	bne.n	80071ca <HAL_RCC_OscConfig+0x436>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007186:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007188:	2b00      	cmp	r3, #0
 800718a:	f000 8126 	beq.w	80073da <HAL_RCC_OscConfig+0x646>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800718e:	4a3f      	ldr	r2, [pc, #252]	@ (800728c <HAL_RCC_OscConfig+0x4f8>)
 8007190:	6912      	ldr	r2, [r2, #16]
 8007192:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8007196:	2a18      	cmp	r2, #24
 8007198:	f000 80ee 	beq.w	8007378 <HAL_RCC_OscConfig+0x5e4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800719c:	2b02      	cmp	r3, #2
 800719e:	d079      	beq.n	8007294 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071a0:	4a3a      	ldr	r2, [pc, #232]	@ (800728c <HAL_RCC_OscConfig+0x4f8>)
 80071a2:	6813      	ldr	r3, [r2, #0]
 80071a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80071a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071aa:	f7fc f967 	bl	800347c <HAL_GetTick>
 80071ae:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80071b0:	4b36      	ldr	r3, [pc, #216]	@ (800728c <HAL_RCC_OscConfig+0x4f8>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80071b8:	f000 80dc 	beq.w	8007374 <HAL_RCC_OscConfig+0x5e0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071bc:	f7fc f95e 	bl	800347c <HAL_GetTick>
 80071c0:	1b00      	subs	r0, r0, r4
 80071c2:	2802      	cmp	r0, #2
 80071c4:	d9f4      	bls.n	80071b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80071c6:	2003      	movs	r0, #3
 80071c8:	e108      	b.n	80073dc <HAL_RCC_OscConfig+0x648>
    PWR->CR1 |= PWR_CR1_DBP;
 80071ca:	4a31      	ldr	r2, [pc, #196]	@ (8007290 <HAL_RCC_OscConfig+0x4fc>)
 80071cc:	6813      	ldr	r3, [r2, #0]
 80071ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071d2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80071d4:	f7fc f952 	bl	800347c <HAL_GetTick>
 80071d8:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071da:	4b2d      	ldr	r3, [pc, #180]	@ (8007290 <HAL_RCC_OscConfig+0x4fc>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80071e2:	d106      	bne.n	80071f2 <HAL_RCC_OscConfig+0x45e>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80071e4:	f7fc f94a 	bl	800347c <HAL_GetTick>
 80071e8:	1b40      	subs	r0, r0, r5
 80071ea:	2864      	cmp	r0, #100	@ 0x64
 80071ec:	d9f5      	bls.n	80071da <HAL_RCC_OscConfig+0x446>
        return HAL_TIMEOUT;
 80071ee:	2003      	movs	r0, #3
 80071f0:	e0f4      	b.n	80073dc <HAL_RCC_OscConfig+0x648>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80071f2:	68a3      	ldr	r3, [r4, #8]
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d00a      	beq.n	800720e <HAL_RCC_OscConfig+0x47a>
 80071f8:	bb0b      	cbnz	r3, 800723e <HAL_RCC_OscConfig+0x4aa>
 80071fa:	4b24      	ldr	r3, [pc, #144]	@ (800728c <HAL_RCC_OscConfig+0x4f8>)
 80071fc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80071fe:	f022 0201 	bic.w	r2, r2, #1
 8007202:	671a      	str	r2, [r3, #112]	@ 0x70
 8007204:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007206:	f022 0204 	bic.w	r2, r2, #4
 800720a:	671a      	str	r2, [r3, #112]	@ 0x70
 800720c:	e004      	b.n	8007218 <HAL_RCC_OscConfig+0x484>
 800720e:	4a1f      	ldr	r2, [pc, #124]	@ (800728c <HAL_RCC_OscConfig+0x4f8>)
 8007210:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8007212:	f043 0301 	orr.w	r3, r3, #1
 8007216:	6713      	str	r3, [r2, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007218:	68a3      	ldr	r3, [r4, #8]
 800721a:	b333      	cbz	r3, 800726a <HAL_RCC_OscConfig+0x4d6>
      tickstart = HAL_GetTick();
 800721c:	f7fc f92e 	bl	800347c <HAL_GetTick>
 8007220:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007222:	4b1a      	ldr	r3, [pc, #104]	@ (800728c <HAL_RCC_OscConfig+0x4f8>)
 8007224:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007226:	f013 0f02 	tst.w	r3, #2
 800722a:	d1ac      	bne.n	8007186 <HAL_RCC_OscConfig+0x3f2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800722c:	f7fc f926 	bl	800347c <HAL_GetTick>
 8007230:	1b40      	subs	r0, r0, r5
 8007232:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007236:	4298      	cmp	r0, r3
 8007238:	d9f3      	bls.n	8007222 <HAL_RCC_OscConfig+0x48e>
          return HAL_TIMEOUT;
 800723a:	2003      	movs	r0, #3
 800723c:	e0ce      	b.n	80073dc <HAL_RCC_OscConfig+0x648>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800723e:	2b05      	cmp	r3, #5
 8007240:	d009      	beq.n	8007256 <HAL_RCC_OscConfig+0x4c2>
 8007242:	4b12      	ldr	r3, [pc, #72]	@ (800728c <HAL_RCC_OscConfig+0x4f8>)
 8007244:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007246:	f022 0201 	bic.w	r2, r2, #1
 800724a:	671a      	str	r2, [r3, #112]	@ 0x70
 800724c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800724e:	f022 0204 	bic.w	r2, r2, #4
 8007252:	671a      	str	r2, [r3, #112]	@ 0x70
 8007254:	e7e0      	b.n	8007218 <HAL_RCC_OscConfig+0x484>
 8007256:	4b0d      	ldr	r3, [pc, #52]	@ (800728c <HAL_RCC_OscConfig+0x4f8>)
 8007258:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800725a:	f042 0204 	orr.w	r2, r2, #4
 800725e:	671a      	str	r2, [r3, #112]	@ 0x70
 8007260:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007262:	f042 0201 	orr.w	r2, r2, #1
 8007266:	671a      	str	r2, [r3, #112]	@ 0x70
 8007268:	e7d6      	b.n	8007218 <HAL_RCC_OscConfig+0x484>
      tickstart = HAL_GetTick();
 800726a:	f7fc f907 	bl	800347c <HAL_GetTick>
 800726e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007270:	4b06      	ldr	r3, [pc, #24]	@ (800728c <HAL_RCC_OscConfig+0x4f8>)
 8007272:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007274:	f013 0f02 	tst.w	r3, #2
 8007278:	d085      	beq.n	8007186 <HAL_RCC_OscConfig+0x3f2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800727a:	f7fc f8ff 	bl	800347c <HAL_GetTick>
 800727e:	1b40      	subs	r0, r0, r5
 8007280:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007284:	4298      	cmp	r0, r3
 8007286:	d9f3      	bls.n	8007270 <HAL_RCC_OscConfig+0x4dc>
          return HAL_TIMEOUT;
 8007288:	2003      	movs	r0, #3
 800728a:	e0a7      	b.n	80073dc <HAL_RCC_OscConfig+0x648>
 800728c:	58024400 	.word	0x58024400
 8007290:	58024800 	.word	0x58024800
        __HAL_RCC_PLL_DISABLE();
 8007294:	4a59      	ldr	r2, [pc, #356]	@ (80073fc <HAL_RCC_OscConfig+0x668>)
 8007296:	6813      	ldr	r3, [r2, #0]
 8007298:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800729c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800729e:	f7fc f8ed 	bl	800347c <HAL_GetTick>
 80072a2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80072a4:	4b55      	ldr	r3, [pc, #340]	@ (80073fc <HAL_RCC_OscConfig+0x668>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80072ac:	d006      	beq.n	80072bc <HAL_RCC_OscConfig+0x528>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072ae:	f7fc f8e5 	bl	800347c <HAL_GetTick>
 80072b2:	1b40      	subs	r0, r0, r5
 80072b4:	2802      	cmp	r0, #2
 80072b6:	d9f5      	bls.n	80072a4 <HAL_RCC_OscConfig+0x510>
            return HAL_TIMEOUT;
 80072b8:	2003      	movs	r0, #3
 80072ba:	e08f      	b.n	80073dc <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80072bc:	4b4f      	ldr	r3, [pc, #316]	@ (80073fc <HAL_RCC_OscConfig+0x668>)
 80072be:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80072c0:	4a4f      	ldr	r2, [pc, #316]	@ (8007400 <HAL_RCC_OscConfig+0x66c>)
 80072c2:	400a      	ands	r2, r1
 80072c4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80072c6:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80072c8:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80072cc:	430a      	orrs	r2, r1
 80072ce:	629a      	str	r2, [r3, #40]	@ 0x28
 80072d0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80072d2:	3a01      	subs	r2, #1
 80072d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80072da:	3901      	subs	r1, #1
 80072dc:	0249      	lsls	r1, r1, #9
 80072de:	b289      	uxth	r1, r1
 80072e0:	430a      	orrs	r2, r1
 80072e2:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80072e4:	3901      	subs	r1, #1
 80072e6:	0409      	lsls	r1, r1, #16
 80072e8:	f401 01fe 	and.w	r1, r1, #8323072	@ 0x7f0000
 80072ec:	430a      	orrs	r2, r1
 80072ee:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80072f0:	3901      	subs	r1, #1
 80072f2:	0609      	lsls	r1, r1, #24
 80072f4:	f001 41fe 	and.w	r1, r1, #2130706432	@ 0x7f000000
 80072f8:	430a      	orrs	r2, r1
 80072fa:	631a      	str	r2, [r3, #48]	@ 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 80072fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072fe:	f022 0201 	bic.w	r2, r2, #1
 8007302:	62da      	str	r2, [r3, #44]	@ 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007304:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8007306:	4a3f      	ldr	r2, [pc, #252]	@ (8007404 <HAL_RCC_OscConfig+0x670>)
 8007308:	400a      	ands	r2, r1
 800730a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800730c:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8007310:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007312:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007314:	f022 020c 	bic.w	r2, r2, #12
 8007318:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800731a:	430a      	orrs	r2, r1
 800731c:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800731e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007320:	f022 0202 	bic.w	r2, r2, #2
 8007324:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007326:	430a      	orrs	r2, r1
 8007328:	62da      	str	r2, [r3, #44]	@ 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800732a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800732c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007330:	62da      	str	r2, [r3, #44]	@ 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007334:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007338:	62da      	str	r2, [r3, #44]	@ 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800733a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800733c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8007340:	62da      	str	r2, [r3, #44]	@ 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8007342:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007344:	f042 0201 	orr.w	r2, r2, #1
 8007348:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8007350:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007352:	f7fc f893 	bl	800347c <HAL_GetTick>
 8007356:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007358:	4b28      	ldr	r3, [pc, #160]	@ (80073fc <HAL_RCC_OscConfig+0x668>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8007360:	d106      	bne.n	8007370 <HAL_RCC_OscConfig+0x5dc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007362:	f7fc f88b 	bl	800347c <HAL_GetTick>
 8007366:	1b00      	subs	r0, r0, r4
 8007368:	2802      	cmp	r0, #2
 800736a:	d9f5      	bls.n	8007358 <HAL_RCC_OscConfig+0x5c4>
            return HAL_TIMEOUT;
 800736c:	2003      	movs	r0, #3
 800736e:	e035      	b.n	80073dc <HAL_RCC_OscConfig+0x648>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8007370:	2000      	movs	r0, #0
 8007372:	e033      	b.n	80073dc <HAL_RCC_OscConfig+0x648>
 8007374:	2000      	movs	r0, #0
 8007376:	e031      	b.n	80073dc <HAL_RCC_OscConfig+0x648>
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007378:	4a20      	ldr	r2, [pc, #128]	@ (80073fc <HAL_RCC_OscConfig+0x668>)
 800737a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800737c:	6b10      	ldr	r0, [r2, #48]	@ 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800737e:	2b01      	cmp	r3, #1
 8007380:	d02d      	beq.n	80073de <HAL_RCC_OscConfig+0x64a>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007382:	f001 0303 	and.w	r3, r1, #3
 8007386:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007388:	4293      	cmp	r3, r2
 800738a:	d12a      	bne.n	80073e2 <HAL_RCC_OscConfig+0x64e>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800738c:	f3c1 1105 	ubfx	r1, r1, #4, #6
 8007390:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007392:	4299      	cmp	r1, r3
 8007394:	d127      	bne.n	80073e6 <HAL_RCC_OscConfig+0x652>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007396:	f3c0 0208 	ubfx	r2, r0, #0, #9
 800739a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800739c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800739e:	429a      	cmp	r2, r3
 80073a0:	d123      	bne.n	80073ea <HAL_RCC_OscConfig+0x656>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80073a2:	f3c0 2246 	ubfx	r2, r0, #9, #7
 80073a6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80073a8:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d11f      	bne.n	80073ee <HAL_RCC_OscConfig+0x65a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80073ae:	f3c0 4206 	ubfx	r2, r0, #16, #7
 80073b2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80073b4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d11b      	bne.n	80073f2 <HAL_RCC_OscConfig+0x65e>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80073ba:	f3c0 6006 	ubfx	r0, r0, #24, #7
 80073be:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80073c0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80073c2:	4298      	cmp	r0, r3
 80073c4:	d117      	bne.n	80073f6 <HAL_RCC_OscConfig+0x662>
  return HAL_OK;
 80073c6:	2000      	movs	r0, #0
 80073c8:	e008      	b.n	80073dc <HAL_RCC_OscConfig+0x648>
    return HAL_ERROR;
 80073ca:	2001      	movs	r0, #1
}
 80073cc:	4770      	bx	lr
        return HAL_ERROR;
 80073ce:	2001      	movs	r0, #1
 80073d0:	e004      	b.n	80073dc <HAL_RCC_OscConfig+0x648>
        return HAL_ERROR;
 80073d2:	2001      	movs	r0, #1
 80073d4:	e002      	b.n	80073dc <HAL_RCC_OscConfig+0x648>
        return HAL_ERROR;
 80073d6:	2001      	movs	r0, #1
 80073d8:	e000      	b.n	80073dc <HAL_RCC_OscConfig+0x648>
  return HAL_OK;
 80073da:	2000      	movs	r0, #0
}
 80073dc:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 80073de:	2001      	movs	r0, #1
 80073e0:	e7fc      	b.n	80073dc <HAL_RCC_OscConfig+0x648>
 80073e2:	2001      	movs	r0, #1
 80073e4:	e7fa      	b.n	80073dc <HAL_RCC_OscConfig+0x648>
 80073e6:	2001      	movs	r0, #1
 80073e8:	e7f8      	b.n	80073dc <HAL_RCC_OscConfig+0x648>
 80073ea:	2001      	movs	r0, #1
 80073ec:	e7f6      	b.n	80073dc <HAL_RCC_OscConfig+0x648>
 80073ee:	2001      	movs	r0, #1
 80073f0:	e7f4      	b.n	80073dc <HAL_RCC_OscConfig+0x648>
 80073f2:	2001      	movs	r0, #1
 80073f4:	e7f2      	b.n	80073dc <HAL_RCC_OscConfig+0x648>
 80073f6:	2001      	movs	r0, #1
 80073f8:	e7f0      	b.n	80073dc <HAL_RCC_OscConfig+0x648>
 80073fa:	bf00      	nop
 80073fc:	58024400 	.word	0x58024400
 8007400:	fffffc0c 	.word	0xfffffc0c
 8007404:	ffff0007 	.word	0xffff0007

08007408 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007408:	4b74      	ldr	r3, [pc, #464]	@ (80075dc <HAL_RCC_GetSysClockFreq+0x1d4>)
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007410:	2b10      	cmp	r3, #16
 8007412:	f000 80de 	beq.w	80075d2 <HAL_RCC_GetSysClockFreq+0x1ca>
 8007416:	2b18      	cmp	r3, #24
 8007418:	d00f      	beq.n	800743a <HAL_RCC_GetSysClockFreq+0x32>
 800741a:	b10b      	cbz	r3, 8007420 <HAL_RCC_GetSysClockFreq+0x18>
 800741c:	4870      	ldr	r0, [pc, #448]	@ (80075e0 <HAL_RCC_GetSysClockFreq+0x1d8>)
 800741e:	4770      	bx	lr
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007420:	4b6e      	ldr	r3, [pc, #440]	@ (80075dc <HAL_RCC_GetSysClockFreq+0x1d4>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f013 0f20 	tst.w	r3, #32
 8007428:	f000 80d5 	beq.w	80075d6 <HAL_RCC_GetSysClockFreq+0x1ce>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800742c:	4b6b      	ldr	r3, [pc, #428]	@ (80075dc <HAL_RCC_GetSysClockFreq+0x1d4>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007434:	486b      	ldr	r0, [pc, #428]	@ (80075e4 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8007436:	40d8      	lsrs	r0, r3
 8007438:	4770      	bx	lr
{
 800743a:	b410      	push	{r4}
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800743c:	4b67      	ldr	r3, [pc, #412]	@ (80075dc <HAL_RCC_GetSysClockFreq+0x1d4>)
 800743e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007440:	f002 0203 	and.w	r2, r2, #3
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007444:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8007446:	f3c4 1005 	ubfx	r0, r4, #4, #6
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800744a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800744c:	f001 0101 	and.w	r1, r1, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007450:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007452:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8007456:	fb01 f303 	mul.w	r3, r1, r3
 800745a:	ee07 3a90 	vmov	s15, r3
 800745e:	eef8 7a67 	vcvt.f32.u32	s15, s15

    if (pllm != 0U)
 8007462:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
 8007466:	f000 8094 	beq.w	8007592 <HAL_RCC_GetSysClockFreq+0x18a>
    {
      switch (pllsource)
 800746a:	2a01      	cmp	r2, #1
 800746c:	d066      	beq.n	800753c <HAL_RCC_GetSysClockFreq+0x134>
 800746e:	2a02      	cmp	r2, #2
 8007470:	f000 8092 	beq.w	8007598 <HAL_RCC_GetSysClockFreq+0x190>
 8007474:	b1e2      	cbz	r2, 80074b0 <HAL_RCC_GetSysClockFreq+0xa8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007476:	ee07 0a10 	vmov	s14, r0
 800747a:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800747e:	ed9f 6a5a 	vldr	s12, [pc, #360]	@ 80075e8 <HAL_RCC_GetSysClockFreq+0x1e0>
 8007482:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007486:	4b55      	ldr	r3, [pc, #340]	@ (80075dc <HAL_RCC_GetSysClockFreq+0x1d4>)
 8007488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800748a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800748e:	ee06 3a90 	vmov	s13, r3
 8007492:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007496:	ed9f 6a55 	vldr	s12, [pc, #340]	@ 80075ec <HAL_RCC_GetSysClockFreq+0x1e4>
 800749a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800749e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074aa:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 80074ae:	e061      	b.n	8007574 <HAL_RCC_GetSysClockFreq+0x16c>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074b0:	4b4a      	ldr	r3, [pc, #296]	@ (80075dc <HAL_RCC_GetSysClockFreq+0x1d4>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f013 0f20 	tst.w	r3, #32
 80074b8:	d023      	beq.n	8007502 <HAL_RCC_GetSysClockFreq+0xfa>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80074ba:	4948      	ldr	r1, [pc, #288]	@ (80075dc <HAL_RCC_GetSysClockFreq+0x1d4>)
 80074bc:	680a      	ldr	r2, [r1, #0]
 80074be:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80074c2:	4b48      	ldr	r3, [pc, #288]	@ (80075e4 <HAL_RCC_GetSysClockFreq+0x1dc>)
 80074c4:	40d3      	lsrs	r3, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80074c6:	ee07 3a10 	vmov	s14, r3
 80074ca:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80074ce:	ee07 0a10 	vmov	s14, r0
 80074d2:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 80074d6:	ee86 7a86 	vdiv.f32	s14, s13, s12
 80074da:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 80074dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074e0:	ee06 3a90 	vmov	s13, r3
 80074e4:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80074e8:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 80075ec <HAL_RCC_GetSysClockFreq+0x1e4>
 80074ec:	ee67 7a86 	vmul.f32	s15, s15, s12
 80074f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007500:	e038      	b.n	8007574 <HAL_RCC_GetSysClockFreq+0x16c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007502:	ee07 0a10 	vmov	s14, r0
 8007506:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800750a:	ed9f 6a39 	vldr	s12, [pc, #228]	@ 80075f0 <HAL_RCC_GetSysClockFreq+0x1e8>
 800750e:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007512:	4b32      	ldr	r3, [pc, #200]	@ (80075dc <HAL_RCC_GetSysClockFreq+0x1d4>)
 8007514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800751a:	ee06 3a90 	vmov	s13, r3
 800751e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007522:	ed9f 6a32 	vldr	s12, [pc, #200]	@ 80075ec <HAL_RCC_GetSysClockFreq+0x1e4>
 8007526:	ee67 7a86 	vmul.f32	s15, s15, s12
 800752a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800752e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007536:	ee27 7a27 	vmul.f32	s14, s14, s15
 800753a:	e01b      	b.n	8007574 <HAL_RCC_GetSysClockFreq+0x16c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800753c:	ee07 0a10 	vmov	s14, r0
 8007540:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007544:	ed9f 6a28 	vldr	s12, [pc, #160]	@ 80075e8 <HAL_RCC_GetSysClockFreq+0x1e0>
 8007548:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800754c:	4b23      	ldr	r3, [pc, #140]	@ (80075dc <HAL_RCC_GetSysClockFreq+0x1d4>)
 800754e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007554:	ee06 3a90 	vmov	s13, r3
 8007558:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800755c:	ed9f 6a23 	vldr	s12, [pc, #140]	@ 80075ec <HAL_RCC_GetSysClockFreq+0x1e4>
 8007560:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007564:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007568:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800756c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007570:	ee27 7a27 	vmul.f32	s14, s14, s15
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007574:	4b19      	ldr	r3, [pc, #100]	@ (80075dc <HAL_RCC_GetSysClockFreq+0x1d4>)
 8007576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007578:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800757c:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800757e:	ee07 3a90 	vmov	s15, r3
 8007582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007586:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800758a:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 800758e:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8007592:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007596:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007598:	ee07 0a10 	vmov	s14, r0
 800759c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80075a0:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 80075f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80075a4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80075a8:	4b0c      	ldr	r3, [pc, #48]	@ (80075dc <HAL_RCC_GetSysClockFreq+0x1d4>)
 80075aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075b0:	ee06 3a90 	vmov	s13, r3
 80075b4:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80075b8:	ed9f 6a0c 	vldr	s12, [pc, #48]	@ 80075ec <HAL_RCC_GetSysClockFreq+0x1e4>
 80075bc:	ee67 7a86 	vmul.f32	s15, s15, s12
 80075c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075cc:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 80075d0:	e7d0      	b.n	8007574 <HAL_RCC_GetSysClockFreq+0x16c>
    sysclockfreq = HSE_VALUE;
 80075d2:	4809      	ldr	r0, [pc, #36]	@ (80075f8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80075d4:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 80075d6:	4803      	ldr	r0, [pc, #12]	@ (80075e4 <HAL_RCC_GetSysClockFreq+0x1dc>)
}
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	58024400 	.word	0x58024400
 80075e0:	003d0900 	.word	0x003d0900
 80075e4:	03d09000 	.word	0x03d09000
 80075e8:	4a742400 	.word	0x4a742400
 80075ec:	39000000 	.word	0x39000000
 80075f0:	4c742400 	.word	0x4c742400
 80075f4:	4bb71b00 	.word	0x4bb71b00
 80075f8:	016e3600 	.word	0x016e3600

080075fc <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80075fc:	2800      	cmp	r0, #0
 80075fe:	f000 8132 	beq.w	8007866 <HAL_RCC_ClockConfig+0x26a>
{
 8007602:	b570      	push	{r4, r5, r6, lr}
 8007604:	460d      	mov	r5, r1
 8007606:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007608:	4b9b      	ldr	r3, [pc, #620]	@ (8007878 <HAL_RCC_ClockConfig+0x27c>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f003 030f 	and.w	r3, r3, #15
 8007610:	428b      	cmp	r3, r1
 8007612:	d20b      	bcs.n	800762c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007614:	4a98      	ldr	r2, [pc, #608]	@ (8007878 <HAL_RCC_ClockConfig+0x27c>)
 8007616:	6813      	ldr	r3, [r2, #0]
 8007618:	f023 030f 	bic.w	r3, r3, #15
 800761c:	430b      	orrs	r3, r1
 800761e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007620:	6813      	ldr	r3, [r2, #0]
 8007622:	f003 030f 	and.w	r3, r3, #15
 8007626:	428b      	cmp	r3, r1
 8007628:	f040 811f 	bne.w	800786a <HAL_RCC_ClockConfig+0x26e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800762c:	6823      	ldr	r3, [r4, #0]
 800762e:	f013 0f04 	tst.w	r3, #4
 8007632:	d00c      	beq.n	800764e <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007634:	6922      	ldr	r2, [r4, #16]
 8007636:	4b91      	ldr	r3, [pc, #580]	@ (800787c <HAL_RCC_ClockConfig+0x280>)
 8007638:	699b      	ldr	r3, [r3, #24]
 800763a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800763e:	429a      	cmp	r2, r3
 8007640:	d905      	bls.n	800764e <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007642:	498e      	ldr	r1, [pc, #568]	@ (800787c <HAL_RCC_ClockConfig+0x280>)
 8007644:	698b      	ldr	r3, [r1, #24]
 8007646:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800764a:	431a      	orrs	r2, r3
 800764c:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800764e:	6823      	ldr	r3, [r4, #0]
 8007650:	f013 0f08 	tst.w	r3, #8
 8007654:	d00c      	beq.n	8007670 <HAL_RCC_ClockConfig+0x74>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007656:	6962      	ldr	r2, [r4, #20]
 8007658:	4b88      	ldr	r3, [pc, #544]	@ (800787c <HAL_RCC_ClockConfig+0x280>)
 800765a:	69db      	ldr	r3, [r3, #28]
 800765c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007660:	429a      	cmp	r2, r3
 8007662:	d905      	bls.n	8007670 <HAL_RCC_ClockConfig+0x74>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007664:	4985      	ldr	r1, [pc, #532]	@ (800787c <HAL_RCC_ClockConfig+0x280>)
 8007666:	69cb      	ldr	r3, [r1, #28]
 8007668:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800766c:	431a      	orrs	r2, r3
 800766e:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007670:	6823      	ldr	r3, [r4, #0]
 8007672:	f013 0f10 	tst.w	r3, #16
 8007676:	d00c      	beq.n	8007692 <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007678:	69a2      	ldr	r2, [r4, #24]
 800767a:	4b80      	ldr	r3, [pc, #512]	@ (800787c <HAL_RCC_ClockConfig+0x280>)
 800767c:	69db      	ldr	r3, [r3, #28]
 800767e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007682:	429a      	cmp	r2, r3
 8007684:	d905      	bls.n	8007692 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007686:	497d      	ldr	r1, [pc, #500]	@ (800787c <HAL_RCC_ClockConfig+0x280>)
 8007688:	69cb      	ldr	r3, [r1, #28]
 800768a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800768e:	431a      	orrs	r2, r3
 8007690:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007692:	6823      	ldr	r3, [r4, #0]
 8007694:	f013 0f20 	tst.w	r3, #32
 8007698:	d00c      	beq.n	80076b4 <HAL_RCC_ClockConfig+0xb8>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800769a:	69e2      	ldr	r2, [r4, #28]
 800769c:	4b77      	ldr	r3, [pc, #476]	@ (800787c <HAL_RCC_ClockConfig+0x280>)
 800769e:	6a1b      	ldr	r3, [r3, #32]
 80076a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d905      	bls.n	80076b4 <HAL_RCC_ClockConfig+0xb8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80076a8:	4974      	ldr	r1, [pc, #464]	@ (800787c <HAL_RCC_ClockConfig+0x280>)
 80076aa:	6a0b      	ldr	r3, [r1, #32]
 80076ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076b0:	431a      	orrs	r2, r3
 80076b2:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076b4:	6823      	ldr	r3, [r4, #0]
 80076b6:	f013 0f02 	tst.w	r3, #2
 80076ba:	d00c      	beq.n	80076d6 <HAL_RCC_ClockConfig+0xda>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80076bc:	68e2      	ldr	r2, [r4, #12]
 80076be:	4b6f      	ldr	r3, [pc, #444]	@ (800787c <HAL_RCC_ClockConfig+0x280>)
 80076c0:	699b      	ldr	r3, [r3, #24]
 80076c2:	f003 030f 	and.w	r3, r3, #15
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d905      	bls.n	80076d6 <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076ca:	496c      	ldr	r1, [pc, #432]	@ (800787c <HAL_RCC_ClockConfig+0x280>)
 80076cc:	698b      	ldr	r3, [r1, #24]
 80076ce:	f023 030f 	bic.w	r3, r3, #15
 80076d2:	431a      	orrs	r2, r3
 80076d4:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80076d6:	6823      	ldr	r3, [r4, #0]
 80076d8:	f013 0f01 	tst.w	r3, #1
 80076dc:	d041      	beq.n	8007762 <HAL_RCC_ClockConfig+0x166>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80076de:	4a67      	ldr	r2, [pc, #412]	@ (800787c <HAL_RCC_ClockConfig+0x280>)
 80076e0:	6993      	ldr	r3, [r2, #24]
 80076e2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80076e6:	68a1      	ldr	r1, [r4, #8]
 80076e8:	430b      	orrs	r3, r1
 80076ea:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076ec:	6863      	ldr	r3, [r4, #4]
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	d00a      	beq.n	8007708 <HAL_RCC_ClockConfig+0x10c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80076f2:	2b03      	cmp	r3, #3
 80076f4:	d027      	beq.n	8007746 <HAL_RCC_ClockConfig+0x14a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d02c      	beq.n	8007754 <HAL_RCC_ClockConfig+0x158>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80076fa:	4a60      	ldr	r2, [pc, #384]	@ (800787c <HAL_RCC_ClockConfig+0x280>)
 80076fc:	6812      	ldr	r2, [r2, #0]
 80076fe:	f012 0f04 	tst.w	r2, #4
 8007702:	d106      	bne.n	8007712 <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 8007704:	2001      	movs	r0, #1
 8007706:	e0ad      	b.n	8007864 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007708:	6812      	ldr	r2, [r2, #0]
 800770a:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800770e:	f000 80ae 	beq.w	800786e <HAL_RCC_ClockConfig+0x272>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007712:	495a      	ldr	r1, [pc, #360]	@ (800787c <HAL_RCC_ClockConfig+0x280>)
 8007714:	690a      	ldr	r2, [r1, #16]
 8007716:	f022 0207 	bic.w	r2, r2, #7
 800771a:	4313      	orrs	r3, r2
 800771c:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 800771e:	f7fb fead 	bl	800347c <HAL_GetTick>
 8007722:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007724:	4b55      	ldr	r3, [pc, #340]	@ (800787c <HAL_RCC_ClockConfig+0x280>)
 8007726:	691b      	ldr	r3, [r3, #16]
 8007728:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800772c:	6862      	ldr	r2, [r4, #4]
 800772e:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8007732:	d016      	beq.n	8007762 <HAL_RCC_ClockConfig+0x166>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007734:	f7fb fea2 	bl	800347c <HAL_GetTick>
 8007738:	1b80      	subs	r0, r0, r6
 800773a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800773e:	4298      	cmp	r0, r3
 8007740:	d9f0      	bls.n	8007724 <HAL_RCC_ClockConfig+0x128>
            return HAL_TIMEOUT;
 8007742:	2003      	movs	r0, #3
 8007744:	e08e      	b.n	8007864 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007746:	4a4d      	ldr	r2, [pc, #308]	@ (800787c <HAL_RCC_ClockConfig+0x280>)
 8007748:	6812      	ldr	r2, [r2, #0]
 800774a:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800774e:	d1e0      	bne.n	8007712 <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 8007750:	2001      	movs	r0, #1
 8007752:	e087      	b.n	8007864 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007754:	4a49      	ldr	r2, [pc, #292]	@ (800787c <HAL_RCC_ClockConfig+0x280>)
 8007756:	6812      	ldr	r2, [r2, #0]
 8007758:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800775c:	d1d9      	bne.n	8007712 <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 800775e:	2001      	movs	r0, #1
 8007760:	e080      	b.n	8007864 <HAL_RCC_ClockConfig+0x268>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007762:	6823      	ldr	r3, [r4, #0]
 8007764:	f013 0f02 	tst.w	r3, #2
 8007768:	d00c      	beq.n	8007784 <HAL_RCC_ClockConfig+0x188>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800776a:	68e2      	ldr	r2, [r4, #12]
 800776c:	4b43      	ldr	r3, [pc, #268]	@ (800787c <HAL_RCC_ClockConfig+0x280>)
 800776e:	699b      	ldr	r3, [r3, #24]
 8007770:	f003 030f 	and.w	r3, r3, #15
 8007774:	429a      	cmp	r2, r3
 8007776:	d205      	bcs.n	8007784 <HAL_RCC_ClockConfig+0x188>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007778:	4940      	ldr	r1, [pc, #256]	@ (800787c <HAL_RCC_ClockConfig+0x280>)
 800777a:	698b      	ldr	r3, [r1, #24]
 800777c:	f023 030f 	bic.w	r3, r3, #15
 8007780:	431a      	orrs	r2, r3
 8007782:	618a      	str	r2, [r1, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007784:	4b3c      	ldr	r3, [pc, #240]	@ (8007878 <HAL_RCC_ClockConfig+0x27c>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 030f 	and.w	r3, r3, #15
 800778c:	42ab      	cmp	r3, r5
 800778e:	d90a      	bls.n	80077a6 <HAL_RCC_ClockConfig+0x1aa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007790:	4a39      	ldr	r2, [pc, #228]	@ (8007878 <HAL_RCC_ClockConfig+0x27c>)
 8007792:	6813      	ldr	r3, [r2, #0]
 8007794:	f023 030f 	bic.w	r3, r3, #15
 8007798:	432b      	orrs	r3, r5
 800779a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800779c:	6813      	ldr	r3, [r2, #0]
 800779e:	f003 030f 	and.w	r3, r3, #15
 80077a2:	42ab      	cmp	r3, r5
 80077a4:	d165      	bne.n	8007872 <HAL_RCC_ClockConfig+0x276>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80077a6:	6823      	ldr	r3, [r4, #0]
 80077a8:	f013 0f04 	tst.w	r3, #4
 80077ac:	d00c      	beq.n	80077c8 <HAL_RCC_ClockConfig+0x1cc>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80077ae:	6922      	ldr	r2, [r4, #16]
 80077b0:	4b32      	ldr	r3, [pc, #200]	@ (800787c <HAL_RCC_ClockConfig+0x280>)
 80077b2:	699b      	ldr	r3, [r3, #24]
 80077b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d205      	bcs.n	80077c8 <HAL_RCC_ClockConfig+0x1cc>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80077bc:	492f      	ldr	r1, [pc, #188]	@ (800787c <HAL_RCC_ClockConfig+0x280>)
 80077be:	698b      	ldr	r3, [r1, #24]
 80077c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077c4:	431a      	orrs	r2, r3
 80077c6:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077c8:	6823      	ldr	r3, [r4, #0]
 80077ca:	f013 0f08 	tst.w	r3, #8
 80077ce:	d00c      	beq.n	80077ea <HAL_RCC_ClockConfig+0x1ee>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80077d0:	6962      	ldr	r2, [r4, #20]
 80077d2:	4b2a      	ldr	r3, [pc, #168]	@ (800787c <HAL_RCC_ClockConfig+0x280>)
 80077d4:	69db      	ldr	r3, [r3, #28]
 80077d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80077da:	429a      	cmp	r2, r3
 80077dc:	d205      	bcs.n	80077ea <HAL_RCC_ClockConfig+0x1ee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80077de:	4927      	ldr	r1, [pc, #156]	@ (800787c <HAL_RCC_ClockConfig+0x280>)
 80077e0:	69cb      	ldr	r3, [r1, #28]
 80077e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077e6:	431a      	orrs	r2, r3
 80077e8:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077ea:	6823      	ldr	r3, [r4, #0]
 80077ec:	f013 0f10 	tst.w	r3, #16
 80077f0:	d00c      	beq.n	800780c <HAL_RCC_ClockConfig+0x210>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80077f2:	69a2      	ldr	r2, [r4, #24]
 80077f4:	4b21      	ldr	r3, [pc, #132]	@ (800787c <HAL_RCC_ClockConfig+0x280>)
 80077f6:	69db      	ldr	r3, [r3, #28]
 80077f8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d205      	bcs.n	800780c <HAL_RCC_ClockConfig+0x210>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007800:	491e      	ldr	r1, [pc, #120]	@ (800787c <HAL_RCC_ClockConfig+0x280>)
 8007802:	69cb      	ldr	r3, [r1, #28]
 8007804:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8007808:	431a      	orrs	r2, r3
 800780a:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800780c:	6823      	ldr	r3, [r4, #0]
 800780e:	f013 0f20 	tst.w	r3, #32
 8007812:	d00c      	beq.n	800782e <HAL_RCC_ClockConfig+0x232>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007814:	69e2      	ldr	r2, [r4, #28]
 8007816:	4b19      	ldr	r3, [pc, #100]	@ (800787c <HAL_RCC_ClockConfig+0x280>)
 8007818:	6a1b      	ldr	r3, [r3, #32]
 800781a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800781e:	429a      	cmp	r2, r3
 8007820:	d205      	bcs.n	800782e <HAL_RCC_ClockConfig+0x232>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007822:	4916      	ldr	r1, [pc, #88]	@ (800787c <HAL_RCC_ClockConfig+0x280>)
 8007824:	6a0b      	ldr	r3, [r1, #32]
 8007826:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800782a:	431a      	orrs	r2, r3
 800782c:	620a      	str	r2, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800782e:	f7ff fdeb 	bl	8007408 <HAL_RCC_GetSysClockFreq>
 8007832:	4912      	ldr	r1, [pc, #72]	@ (800787c <HAL_RCC_ClockConfig+0x280>)
 8007834:	698b      	ldr	r3, [r1, #24]
 8007836:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800783a:	4a11      	ldr	r2, [pc, #68]	@ (8007880 <HAL_RCC_ClockConfig+0x284>)
 800783c:	5cd3      	ldrb	r3, [r2, r3]
 800783e:	f003 031f 	and.w	r3, r3, #31
 8007842:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007844:	698b      	ldr	r3, [r1, #24]
 8007846:	f003 030f 	and.w	r3, r3, #15
 800784a:	5cd3      	ldrb	r3, [r2, r3]
 800784c:	f003 031f 	and.w	r3, r3, #31
 8007850:	fa20 f303 	lsr.w	r3, r0, r3
 8007854:	4a0b      	ldr	r2, [pc, #44]	@ (8007884 <HAL_RCC_ClockConfig+0x288>)
 8007856:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8007858:	4b0b      	ldr	r3, [pc, #44]	@ (8007888 <HAL_RCC_ClockConfig+0x28c>)
 800785a:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 800785c:	4b0b      	ldr	r3, [pc, #44]	@ (800788c <HAL_RCC_ClockConfig+0x290>)
 800785e:	6818      	ldr	r0, [r3, #0]
 8007860:	f7fb fbd2 	bl	8003008 <HAL_InitTick>
}
 8007864:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8007866:	2001      	movs	r0, #1
}
 8007868:	4770      	bx	lr
      return HAL_ERROR;
 800786a:	2001      	movs	r0, #1
 800786c:	e7fa      	b.n	8007864 <HAL_RCC_ClockConfig+0x268>
          return HAL_ERROR;
 800786e:	2001      	movs	r0, #1
 8007870:	e7f8      	b.n	8007864 <HAL_RCC_ClockConfig+0x268>
      return HAL_ERROR;
 8007872:	2001      	movs	r0, #1
 8007874:	e7f6      	b.n	8007864 <HAL_RCC_ClockConfig+0x268>
 8007876:	bf00      	nop
 8007878:	52002000 	.word	0x52002000
 800787c:	58024400 	.word	0x58024400
 8007880:	0801b354 	.word	0x0801b354
 8007884:	24000000 	.word	0x24000000
 8007888:	24000004 	.word	0x24000004
 800788c:	2400000c 	.word	0x2400000c

08007890 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007890:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007892:	f7ff fdb9 	bl	8007408 <HAL_RCC_GetSysClockFreq>
 8007896:	4a0b      	ldr	r2, [pc, #44]	@ (80078c4 <HAL_RCC_GetHCLKFreq+0x34>)
 8007898:	6993      	ldr	r3, [r2, #24]
 800789a:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800789e:	490a      	ldr	r1, [pc, #40]	@ (80078c8 <HAL_RCC_GetHCLKFreq+0x38>)
 80078a0:	5ccb      	ldrb	r3, [r1, r3]
 80078a2:	f003 031f 	and.w	r3, r3, #31
 80078a6:	fa20 f303 	lsr.w	r3, r0, r3
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80078aa:	6992      	ldr	r2, [r2, #24]
 80078ac:	f002 020f 	and.w	r2, r2, #15
 80078b0:	5c88      	ldrb	r0, [r1, r2]
 80078b2:	f000 001f 	and.w	r0, r0, #31
 80078b6:	fa23 f000 	lsr.w	r0, r3, r0
 80078ba:	4a04      	ldr	r2, [pc, #16]	@ (80078cc <HAL_RCC_GetHCLKFreq+0x3c>)
 80078bc:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80078be:	4a04      	ldr	r2, [pc, #16]	@ (80078d0 <HAL_RCC_GetHCLKFreq+0x40>)
 80078c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 80078c2:	bd08      	pop	{r3, pc}
 80078c4:	58024400 	.word	0x58024400
 80078c8:	0801b354 	.word	0x0801b354
 80078cc:	24000000 	.word	0x24000000
 80078d0:	24000004 	.word	0x24000004

080078d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80078d4:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80078d6:	f7ff ffdb 	bl	8007890 <HAL_RCC_GetHCLKFreq>
 80078da:	4b05      	ldr	r3, [pc, #20]	@ (80078f0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80078dc:	69db      	ldr	r3, [r3, #28]
 80078de:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80078e2:	4a04      	ldr	r2, [pc, #16]	@ (80078f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80078e4:	5cd3      	ldrb	r3, [r2, r3]
 80078e6:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80078ea:	40d8      	lsrs	r0, r3
 80078ec:	bd08      	pop	{r3, pc}
 80078ee:	bf00      	nop
 80078f0:	58024400 	.word	0x58024400
 80078f4:	0801b354 	.word	0x0801b354

080078f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80078f8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80078fa:	f7ff ffc9 	bl	8007890 <HAL_RCC_GetHCLKFreq>
 80078fe:	4b05      	ldr	r3, [pc, #20]	@ (8007914 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8007900:	69db      	ldr	r3, [r3, #28]
 8007902:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8007906:	4a04      	ldr	r2, [pc, #16]	@ (8007918 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007908:	5cd3      	ldrb	r3, [r2, r3]
 800790a:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800790e:	40d8      	lsrs	r0, r3
 8007910:	bd08      	pop	{r3, pc}
 8007912:	bf00      	nop
 8007914:	58024400 	.word	0x58024400
 8007918:	0801b354 	.word	0x0801b354

0800791c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800791c:	233f      	movs	r3, #63	@ 0x3f
 800791e:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007920:	4b11      	ldr	r3, [pc, #68]	@ (8007968 <HAL_RCC_GetClockConfig+0x4c>)
 8007922:	691a      	ldr	r2, [r3, #16]
 8007924:	f002 0207 	and.w	r2, r2, #7
 8007928:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800792a:	699a      	ldr	r2, [r3, #24]
 800792c:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 8007930:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007932:	699a      	ldr	r2, [r3, #24]
 8007934:	f002 020f 	and.w	r2, r2, #15
 8007938:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800793a:	699a      	ldr	r2, [r3, #24]
 800793c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8007940:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007942:	69da      	ldr	r2, [r3, #28]
 8007944:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8007948:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800794a:	69da      	ldr	r2, [r3, #28]
 800794c:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8007950:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007952:	6a1b      	ldr	r3, [r3, #32]
 8007954:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007958:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800795a:	4b04      	ldr	r3, [pc, #16]	@ (800796c <HAL_RCC_GetClockConfig+0x50>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f003 030f 	and.w	r3, r3, #15
 8007962:	600b      	str	r3, [r1, #0]
}
 8007964:	4770      	bx	lr
 8007966:	bf00      	nop
 8007968:	58024400 	.word	0x58024400
 800796c:	52002000 	.word	0x52002000

08007970 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007970:	4b40      	ldr	r3, [pc, #256]	@ (8007a74 <RCCEx_PLL2_Config+0x104>)
 8007972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007974:	f003 0303 	and.w	r3, r3, #3
 8007978:	2b03      	cmp	r3, #3
 800797a:	d079      	beq.n	8007a70 <RCCEx_PLL2_Config+0x100>
{
 800797c:	b570      	push	{r4, r5, r6, lr}
 800797e:	4605      	mov	r5, r0
 8007980:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007982:	4a3c      	ldr	r2, [pc, #240]	@ (8007a74 <RCCEx_PLL2_Config+0x104>)
 8007984:	6813      	ldr	r3, [r2, #0]
 8007986:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800798a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800798c:	f7fb fd76 	bl	800347c <HAL_GetTick>
 8007990:	4604      	mov	r4, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007992:	4b38      	ldr	r3, [pc, #224]	@ (8007a74 <RCCEx_PLL2_Config+0x104>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 800799a:	d006      	beq.n	80079aa <RCCEx_PLL2_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800799c:	f7fb fd6e 	bl	800347c <HAL_GetTick>
 80079a0:	1b03      	subs	r3, r0, r4
 80079a2:	2b02      	cmp	r3, #2
 80079a4:	d9f5      	bls.n	8007992 <RCCEx_PLL2_Config+0x22>
      {
        return HAL_TIMEOUT;
 80079a6:	2003      	movs	r0, #3

  }


  return status;
}
 80079a8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80079aa:	4b32      	ldr	r3, [pc, #200]	@ (8007a74 <RCCEx_PLL2_Config+0x104>)
 80079ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80079ae:	f422 327c 	bic.w	r2, r2, #258048	@ 0x3f000
 80079b2:	6829      	ldr	r1, [r5, #0]
 80079b4:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 80079b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80079ba:	686a      	ldr	r2, [r5, #4]
 80079bc:	3a01      	subs	r2, #1
 80079be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079c2:	68a9      	ldr	r1, [r5, #8]
 80079c4:	3901      	subs	r1, #1
 80079c6:	0249      	lsls	r1, r1, #9
 80079c8:	b289      	uxth	r1, r1
 80079ca:	430a      	orrs	r2, r1
 80079cc:	68e9      	ldr	r1, [r5, #12]
 80079ce:	3901      	subs	r1, #1
 80079d0:	0409      	lsls	r1, r1, #16
 80079d2:	f401 01fe 	and.w	r1, r1, #8323072	@ 0x7f0000
 80079d6:	430a      	orrs	r2, r1
 80079d8:	6929      	ldr	r1, [r5, #16]
 80079da:	3901      	subs	r1, #1
 80079dc:	0609      	lsls	r1, r1, #24
 80079de:	f001 41fe 	and.w	r1, r1, #2130706432	@ 0x7f000000
 80079e2:	430a      	orrs	r2, r1
 80079e4:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80079e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079e8:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 80079ec:	6969      	ldr	r1, [r5, #20]
 80079ee:	430a      	orrs	r2, r1
 80079f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80079f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079f4:	f022 0220 	bic.w	r2, r2, #32
 80079f8:	69a9      	ldr	r1, [r5, #24]
 80079fa:	430a      	orrs	r2, r1
 80079fc:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 80079fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a00:	f022 0210 	bic.w	r2, r2, #16
 8007a04:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007a06:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8007a08:	4a1b      	ldr	r2, [pc, #108]	@ (8007a78 <RCCEx_PLL2_Config+0x108>)
 8007a0a:	400a      	ands	r2, r1
 8007a0c:	69e9      	ldr	r1, [r5, #28]
 8007a0e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8007a12:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007a14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a16:	f042 0210 	orr.w	r2, r2, #16
 8007a1a:	62da      	str	r2, [r3, #44]	@ 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8007a1c:	b9c6      	cbnz	r6, 8007a50 <RCCEx_PLL2_Config+0xe0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007a1e:	461a      	mov	r2, r3
 8007a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a22:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007a26:	62d3      	str	r3, [r2, #44]	@ 0x2c
    __HAL_RCC_PLL2_ENABLE();
 8007a28:	4a12      	ldr	r2, [pc, #72]	@ (8007a74 <RCCEx_PLL2_Config+0x104>)
 8007a2a:	6813      	ldr	r3, [r2, #0]
 8007a2c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007a30:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8007a32:	f7fb fd23 	bl	800347c <HAL_GetTick>
 8007a36:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007a38:	4b0e      	ldr	r3, [pc, #56]	@ (8007a74 <RCCEx_PLL2_Config+0x104>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8007a40:	d114      	bne.n	8007a6c <RCCEx_PLL2_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007a42:	f7fb fd1b 	bl	800347c <HAL_GetTick>
 8007a46:	1b00      	subs	r0, r0, r4
 8007a48:	2802      	cmp	r0, #2
 8007a4a:	d9f5      	bls.n	8007a38 <RCCEx_PLL2_Config+0xc8>
        return HAL_TIMEOUT;
 8007a4c:	2003      	movs	r0, #3
 8007a4e:	e7ab      	b.n	80079a8 <RCCEx_PLL2_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 8007a50:	2e01      	cmp	r6, #1
 8007a52:	d005      	beq.n	8007a60 <RCCEx_PLL2_Config+0xf0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007a54:	4a07      	ldr	r2, [pc, #28]	@ (8007a74 <RCCEx_PLL2_Config+0x104>)
 8007a56:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007a58:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007a5c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007a5e:	e7e3      	b.n	8007a28 <RCCEx_PLL2_Config+0xb8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007a60:	4a04      	ldr	r2, [pc, #16]	@ (8007a74 <RCCEx_PLL2_Config+0x104>)
 8007a62:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007a64:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a68:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007a6a:	e7dd      	b.n	8007a28 <RCCEx_PLL2_Config+0xb8>
  return status;
 8007a6c:	2000      	movs	r0, #0
 8007a6e:	e79b      	b.n	80079a8 <RCCEx_PLL2_Config+0x38>
    return HAL_ERROR;
 8007a70:	2001      	movs	r0, #1
}
 8007a72:	4770      	bx	lr
 8007a74:	58024400 	.word	0x58024400
 8007a78:	ffff0007 	.word	0xffff0007

08007a7c <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007a7c:	4b40      	ldr	r3, [pc, #256]	@ (8007b80 <RCCEx_PLL3_Config+0x104>)
 8007a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a80:	f003 0303 	and.w	r3, r3, #3
 8007a84:	2b03      	cmp	r3, #3
 8007a86:	d079      	beq.n	8007b7c <RCCEx_PLL3_Config+0x100>
{
 8007a88:	b570      	push	{r4, r5, r6, lr}
 8007a8a:	4605      	mov	r5, r0
 8007a8c:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007a8e:	4a3c      	ldr	r2, [pc, #240]	@ (8007b80 <RCCEx_PLL3_Config+0x104>)
 8007a90:	6813      	ldr	r3, [r2, #0]
 8007a92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a98:	f7fb fcf0 	bl	800347c <HAL_GetTick>
 8007a9c:	4604      	mov	r4, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007a9e:	4b38      	ldr	r3, [pc, #224]	@ (8007b80 <RCCEx_PLL3_Config+0x104>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8007aa6:	d006      	beq.n	8007ab6 <RCCEx_PLL3_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007aa8:	f7fb fce8 	bl	800347c <HAL_GetTick>
 8007aac:	1b03      	subs	r3, r0, r4
 8007aae:	2b02      	cmp	r3, #2
 8007ab0:	d9f5      	bls.n	8007a9e <RCCEx_PLL3_Config+0x22>
      {
        return HAL_TIMEOUT;
 8007ab2:	2003      	movs	r0, #3

  }


  return status;
}
 8007ab4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007ab6:	4b32      	ldr	r3, [pc, #200]	@ (8007b80 <RCCEx_PLL3_Config+0x104>)
 8007ab8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007aba:	f022 727c 	bic.w	r2, r2, #66060288	@ 0x3f00000
 8007abe:	6829      	ldr	r1, [r5, #0]
 8007ac0:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8007ac4:	629a      	str	r2, [r3, #40]	@ 0x28
 8007ac6:	686a      	ldr	r2, [r5, #4]
 8007ac8:	3a01      	subs	r2, #1
 8007aca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ace:	68a9      	ldr	r1, [r5, #8]
 8007ad0:	3901      	subs	r1, #1
 8007ad2:	0249      	lsls	r1, r1, #9
 8007ad4:	b289      	uxth	r1, r1
 8007ad6:	430a      	orrs	r2, r1
 8007ad8:	68e9      	ldr	r1, [r5, #12]
 8007ada:	3901      	subs	r1, #1
 8007adc:	0409      	lsls	r1, r1, #16
 8007ade:	f401 01fe 	and.w	r1, r1, #8323072	@ 0x7f0000
 8007ae2:	430a      	orrs	r2, r1
 8007ae4:	6929      	ldr	r1, [r5, #16]
 8007ae6:	3901      	subs	r1, #1
 8007ae8:	0609      	lsls	r1, r1, #24
 8007aea:	f001 41fe 	and.w	r1, r1, #2130706432	@ 0x7f000000
 8007aee:	430a      	orrs	r2, r1
 8007af0:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007af2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007af4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007af8:	6969      	ldr	r1, [r5, #20]
 8007afa:	430a      	orrs	r2, r1
 8007afc:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007afe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b00:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007b04:	69a9      	ldr	r1, [r5, #24]
 8007b06:	430a      	orrs	r2, r1
 8007b08:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007b0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b0c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007b10:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007b12:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8007b14:	4a1b      	ldr	r2, [pc, #108]	@ (8007b84 <RCCEx_PLL3_Config+0x108>)
 8007b16:	400a      	ands	r2, r1
 8007b18:	69e9      	ldr	r1, [r5, #28]
 8007b1a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8007b1e:	645a      	str	r2, [r3, #68]	@ 0x44
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007b20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b22:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007b26:	62da      	str	r2, [r3, #44]	@ 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8007b28:	b9c6      	cbnz	r6, 8007b5c <RCCEx_PLL3_Config+0xe0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b2e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007b32:	62d3      	str	r3, [r2, #44]	@ 0x2c
    __HAL_RCC_PLL3_ENABLE();
 8007b34:	4a12      	ldr	r2, [pc, #72]	@ (8007b80 <RCCEx_PLL3_Config+0x104>)
 8007b36:	6813      	ldr	r3, [r2, #0]
 8007b38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b3c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8007b3e:	f7fb fc9d 	bl	800347c <HAL_GetTick>
 8007b42:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007b44:	4b0e      	ldr	r3, [pc, #56]	@ (8007b80 <RCCEx_PLL3_Config+0x104>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8007b4c:	d114      	bne.n	8007b78 <RCCEx_PLL3_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007b4e:	f7fb fc95 	bl	800347c <HAL_GetTick>
 8007b52:	1b00      	subs	r0, r0, r4
 8007b54:	2802      	cmp	r0, #2
 8007b56:	d9f5      	bls.n	8007b44 <RCCEx_PLL3_Config+0xc8>
        return HAL_TIMEOUT;
 8007b58:	2003      	movs	r0, #3
 8007b5a:	e7ab      	b.n	8007ab4 <RCCEx_PLL3_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 8007b5c:	2e01      	cmp	r6, #1
 8007b5e:	d005      	beq.n	8007b6c <RCCEx_PLL3_Config+0xf0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007b60:	4a07      	ldr	r2, [pc, #28]	@ (8007b80 <RCCEx_PLL3_Config+0x104>)
 8007b62:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007b64:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007b68:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007b6a:	e7e3      	b.n	8007b34 <RCCEx_PLL3_Config+0xb8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007b6c:	4a04      	ldr	r2, [pc, #16]	@ (8007b80 <RCCEx_PLL3_Config+0x104>)
 8007b6e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007b70:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007b74:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007b76:	e7dd      	b.n	8007b34 <RCCEx_PLL3_Config+0xb8>
  return status;
 8007b78:	2000      	movs	r0, #0
 8007b7a:	e79b      	b.n	8007ab4 <RCCEx_PLL3_Config+0x38>
    return HAL_ERROR;
 8007b7c:	2001      	movs	r0, #1
}
 8007b7e:	4770      	bx	lr
 8007b80:	58024400 	.word	0x58024400
 8007b84:	ffff0007 	.word	0xffff0007

08007b88 <HAL_RCCEx_PeriphCLKConfig>:
{
 8007b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b8a:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007b8c:	6803      	ldr	r3, [r0, #0]
 8007b8e:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8007b92:	d030      	beq.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8007b94:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8007b96:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007b9a:	d026      	beq.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x62>
 8007b9c:	d80e      	bhi.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x34>
 8007b9e:	b1eb      	cbz	r3, 8007bdc <HAL_RCCEx_PeriphCLKConfig+0x54>
 8007ba0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ba4:	d107      	bne.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007ba6:	2102      	movs	r1, #2
 8007ba8:	3004      	adds	r0, #4
 8007baa:	f7ff fee1 	bl	8007970 <RCCEx_PLL2_Config>
 8007bae:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007bb0:	b145      	cbz	r5, 8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8007bb2:	462e      	mov	r6, r5
 8007bb4:	e021      	b.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8007bb6:	2601      	movs	r6, #1
 8007bb8:	4635      	mov	r5, r6
 8007bba:	e01e      	b.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x72>
 8007bbc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007bc0:	d109      	bne.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8007bc2:	2500      	movs	r5, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007bc4:	4a95      	ldr	r2, [pc, #596]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007bc6:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8007bc8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007bcc:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8007bce:	430b      	orrs	r3, r1
 8007bd0:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007bd2:	2600      	movs	r6, #0
 8007bd4:	e011      	b.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8007bd6:	2601      	movs	r6, #1
 8007bd8:	4635      	mov	r5, r6
 8007bda:	e00e      	b.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bdc:	4a8f      	ldr	r2, [pc, #572]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007bde:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007be0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007be4:	62d3      	str	r3, [r2, #44]	@ 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007be6:	2500      	movs	r5, #0
 8007be8:	e7ec      	b.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007bea:	2102      	movs	r1, #2
 8007bec:	3024      	adds	r0, #36	@ 0x24
 8007bee:	f7ff ff45 	bl	8007a7c <RCCEx_PLL3_Config>
 8007bf2:	4605      	mov	r5, r0
      break;
 8007bf4:	e7dc      	b.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x28>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007bf6:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007bf8:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007bfa:	6823      	ldr	r3, [r4, #0]
 8007bfc:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8007c00:	d014      	beq.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0xa4>
    switch(PeriphClkInit->Sai1ClockSelection)
 8007c02:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007c04:	2b04      	cmp	r3, #4
 8007c06:	d830      	bhi.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007c08:	e8df f003 	tbb	[pc, r3]
 8007c0c:	08282203 	.word	0x08282203
 8007c10:	08          	.byte	0x08
 8007c11:	00          	.byte	0x00
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c12:	4a82      	ldr	r2, [pc, #520]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007c14:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007c16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if(ret == HAL_OK)
 8007c1c:	bb45      	cbnz	r5, 8007c70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007c1e:	4a7f      	ldr	r2, [pc, #508]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007c20:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8007c22:	f023 0307 	bic.w	r3, r3, #7
 8007c26:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8007c28:	430b      	orrs	r3, r1
 8007c2a:	6513      	str	r3, [r2, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007c2c:	6823      	ldr	r3, [r4, #0]
 8007c2e:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8007c32:	d02f      	beq.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai23ClockSelection)
 8007c34:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007c36:	2b80      	cmp	r3, #128	@ 0x80
 8007c38:	d049      	beq.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x146>
 8007c3a:	d81e      	bhi.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0xf2>
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d040      	beq.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
 8007c40:	2b40      	cmp	r3, #64	@ 0x40
 8007c42:	d117      	bne.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0xec>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c44:	2100      	movs	r1, #0
 8007c46:	1d20      	adds	r0, r4, #4
 8007c48:	f7ff fe92 	bl	8007970 <RCCEx_PLL2_Config>
 8007c4c:	4605      	mov	r5, r0
      break;
 8007c4e:	e019      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c50:	2100      	movs	r1, #0
 8007c52:	1d20      	adds	r0, r4, #4
 8007c54:	f7ff fe8c 	bl	8007970 <RCCEx_PLL2_Config>
 8007c58:	4605      	mov	r5, r0
      break;
 8007c5a:	e7df      	b.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x94>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007c5c:	2100      	movs	r1, #0
 8007c5e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007c62:	f7ff ff0b 	bl	8007a7c <RCCEx_PLL3_Config>
 8007c66:	4605      	mov	r5, r0
      break;
 8007c68:	e7d8      	b.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch(PeriphClkInit->Sai1ClockSelection)
 8007c6a:	2601      	movs	r6, #1
 8007c6c:	4635      	mov	r5, r6
 8007c6e:	e7dd      	b.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8007c70:	462e      	mov	r6, r5
 8007c72:	e7db      	b.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0xa4>
    switch(PeriphClkInit->Sai23ClockSelection)
 8007c74:	2601      	movs	r6, #1
 8007c76:	4635      	mov	r5, r6
 8007c78:	e00c      	b.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8007c7a:	2bc0      	cmp	r3, #192	@ 0xc0
 8007c7c:	d002      	beq.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8007c7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c82:	d11b      	bne.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x134>
    if(ret == HAL_OK)
 8007c84:	bb55      	cbnz	r5, 8007cdc <HAL_RCCEx_PeriphCLKConfig+0x154>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007c86:	4a65      	ldr	r2, [pc, #404]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007c88:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8007c8a:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 8007c8e:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8007c90:	430b      	orrs	r3, r1
 8007c92:	6513      	str	r3, [r2, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007c94:	6823      	ldr	r3, [r4, #0]
 8007c96:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8007c9a:	d045      	beq.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    switch(PeriphClkInit->Sai4AClockSelection)
 8007c9c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 8007ca0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ca4:	d038      	beq.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8007ca6:	d81e      	bhi.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8007ca8:	b383      	cbz	r3, 8007d0c <HAL_RCCEx_PeriphCLKConfig+0x184>
 8007caa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007cae:	d117      	bne.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007cb0:	2100      	movs	r1, #0
 8007cb2:	1d20      	adds	r0, r4, #4
 8007cb4:	f7ff fe5c 	bl	8007970 <RCCEx_PLL2_Config>
 8007cb8:	4605      	mov	r5, r0
      break;
 8007cba:	e01a      	b.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x16a>
    switch(PeriphClkInit->Sai23ClockSelection)
 8007cbc:	2601      	movs	r6, #1
 8007cbe:	4635      	mov	r5, r6
 8007cc0:	e7e8      	b.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cc2:	4a56      	ldr	r2, [pc, #344]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007cc4:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007cc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007cca:	62d3      	str	r3, [r2, #44]	@ 0x2c
      break;
 8007ccc:	e7da      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007cce:	2100      	movs	r1, #0
 8007cd0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007cd4:	f7ff fed2 	bl	8007a7c <RCCEx_PLL3_Config>
 8007cd8:	4605      	mov	r5, r0
      break;
 8007cda:	e7d3      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8007cdc:	462e      	mov	r6, r5
 8007cde:	e7d9      	b.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai4AClockSelection)
 8007ce0:	2601      	movs	r6, #1
 8007ce2:	4635      	mov	r5, r6
 8007ce4:	e020      	b.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 8007ce6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007cea:	d002      	beq.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8007cec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007cf0:	d109      	bne.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    if(ret == HAL_OK)
 8007cf2:	b9c5      	cbnz	r5, 8007d26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007cf4:	4a49      	ldr	r2, [pc, #292]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007cf6:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8007cf8:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 8007cfc:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
 8007d00:	430b      	orrs	r3, r1
 8007d02:	6593      	str	r3, [r2, #88]	@ 0x58
 8007d04:	e010      	b.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    switch(PeriphClkInit->Sai4AClockSelection)
 8007d06:	2601      	movs	r6, #1
 8007d08:	4635      	mov	r5, r6
 8007d0a:	e00d      	b.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d0c:	4a43      	ldr	r2, [pc, #268]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007d0e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007d10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d14:	62d3      	str	r3, [r2, #44]	@ 0x2c
      break;
 8007d16:	e7ec      	b.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x16a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007d18:	2100      	movs	r1, #0
 8007d1a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007d1e:	f7ff fead 	bl	8007a7c <RCCEx_PLL3_Config>
 8007d22:	4605      	mov	r5, r0
      break;
 8007d24:	e7e5      	b.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8007d26:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007d28:	6823      	ldr	r3, [r4, #0]
 8007d2a:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8007d2e:	d023      	beq.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    switch(PeriphClkInit->Sai4BClockSelection)
 8007d30:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
 8007d34:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007d38:	d041      	beq.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x236>
 8007d3a:	d80d      	bhi.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d038      	beq.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007d40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d44:	d105      	bne.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d46:	2100      	movs	r1, #0
 8007d48:	1d20      	adds	r0, r4, #4
 8007d4a:	f7ff fe11 	bl	8007970 <RCCEx_PLL2_Config>
 8007d4e:	4605      	mov	r5, r0
      break;
 8007d50:	e008      	b.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    switch(PeriphClkInit->Sai4BClockSelection)
 8007d52:	2601      	movs	r6, #1
 8007d54:	4635      	mov	r5, r6
 8007d56:	e00f      	b.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8007d58:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007d5c:	d002      	beq.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007d5e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007d62:	d123      	bne.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x224>
    if(ret == HAL_OK)
 8007d64:	2d00      	cmp	r5, #0
 8007d66:	d131      	bne.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x244>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007d68:	4a2c      	ldr	r2, [pc, #176]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007d6a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8007d6c:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8007d70:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 8007d74:	430b      	orrs	r3, r1
 8007d76:	6593      	str	r3, [r2, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007d78:	6823      	ldr	r3, [r4, #0]
 8007d7a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8007d7e:	d02e      	beq.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x256>
    switch(PeriphClkInit->QspiClockSelection)
 8007d80:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8007d82:	2b20      	cmp	r3, #32
 8007d84:	d03f      	beq.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8007d86:	d826      	bhi.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8007d88:	b133      	cbz	r3, 8007d98 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8007d8a:	2b10      	cmp	r3, #16
 8007d8c:	d120      	bne.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x248>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d8e:	4a23      	ldr	r2, [pc, #140]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007d90:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007d92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d96:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if(ret == HAL_OK)
 8007d98:	2d00      	cmp	r5, #0
 8007d9a:	d13a      	bne.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x28a>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007d9c:	4a1f      	ldr	r2, [pc, #124]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007d9e:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8007da0:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8007da4:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007da6:	430b      	orrs	r3, r1
 8007da8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007daa:	e018      	b.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x256>
    switch(PeriphClkInit->Sai4BClockSelection)
 8007dac:	2601      	movs	r6, #1
 8007dae:	4635      	mov	r5, r6
 8007db0:	e7e2      	b.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007db2:	4a1a      	ldr	r2, [pc, #104]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007db4:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007db6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007dba:	62d3      	str	r3, [r2, #44]	@ 0x2c
      break;
 8007dbc:	e7d2      	b.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007dbe:	2100      	movs	r1, #0
 8007dc0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007dc4:	f7ff fe5a 	bl	8007a7c <RCCEx_PLL3_Config>
 8007dc8:	4605      	mov	r5, r0
      break;
 8007dca:	e7cb      	b.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007dcc:	462e      	mov	r6, r5
 8007dce:	e7d3      	b.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    switch(PeriphClkInit->QspiClockSelection)
 8007dd0:	2601      	movs	r6, #1
 8007dd2:	4635      	mov	r5, r6
 8007dd4:	e003      	b.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x256>
 8007dd6:	2b30      	cmp	r3, #48	@ 0x30
 8007dd8:	d0de      	beq.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8007dda:	2601      	movs	r6, #1
 8007ddc:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007dde:	6823      	ldr	r3, [r4, #0]
 8007de0:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8007de4:	d02b      	beq.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    switch(PeriphClkInit->Spi123ClockSelection)
 8007de6:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8007de8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007dec:	d04c      	beq.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8007dee:	d817      	bhi.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d043      	beq.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8007df4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007df8:	d10d      	bne.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x28e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007dfa:	2100      	movs	r1, #0
 8007dfc:	1d20      	adds	r0, r4, #4
 8007dfe:	f7ff fdb7 	bl	8007970 <RCCEx_PLL2_Config>
 8007e02:	4605      	mov	r5, r0
      break;
 8007e04:	e012      	b.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007e06:	2102      	movs	r1, #2
 8007e08:	1d20      	adds	r0, r4, #4
 8007e0a:	f7ff fdb1 	bl	8007970 <RCCEx_PLL2_Config>
 8007e0e:	4605      	mov	r5, r0
      break;
 8007e10:	e7c2      	b.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8007e12:	462e      	mov	r6, r5
 8007e14:	e7e3      	b.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x256>
    switch(PeriphClkInit->Spi123ClockSelection)
 8007e16:	2601      	movs	r6, #1
 8007e18:	4635      	mov	r5, r6
 8007e1a:	e010      	b.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8007e1c:	58024400 	.word	0x58024400
 8007e20:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007e24:	d002      	beq.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8007e26:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e2a:	d124      	bne.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    if(ret == HAL_OK)
 8007e2c:	2d00      	cmp	r5, #0
 8007e2e:	d132      	bne.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007e30:	4a75      	ldr	r2, [pc, #468]	@ (8008008 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007e32:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8007e34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e38:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8007e3a:	430b      	orrs	r3, r1
 8007e3c:	6513      	str	r3, [r2, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007e3e:	6823      	ldr	r3, [r4, #0]
 8007e40:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8007e44:	d037      	beq.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    switch(PeriphClkInit->Spi45ClockSelection)
 8007e46:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8007e48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e4c:	d051      	beq.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8007e4e:	d827      	bhi.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8007e50:	b13b      	cbz	r3, 8007e62 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007e52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e56:	d120      	bne.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x312>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007e58:	2101      	movs	r1, #1
 8007e5a:	1d20      	adds	r0, r4, #4
 8007e5c:	f7ff fd88 	bl	8007970 <RCCEx_PLL2_Config>
 8007e60:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007e62:	2d00      	cmp	r5, #0
 8007e64:	d14c      	bne.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x378>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007e66:	4a68      	ldr	r2, [pc, #416]	@ (8008008 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007e68:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8007e6a:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8007e6e:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8007e70:	430b      	orrs	r3, r1
 8007e72:	6513      	str	r3, [r2, #80]	@ 0x50
 8007e74:	e01f      	b.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    switch(PeriphClkInit->Spi123ClockSelection)
 8007e76:	2601      	movs	r6, #1
 8007e78:	4635      	mov	r5, r6
 8007e7a:	e7e0      	b.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e7c:	4a62      	ldr	r2, [pc, #392]	@ (8008008 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007e7e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007e80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e84:	62d3      	str	r3, [r2, #44]	@ 0x2c
      break;
 8007e86:	e7d1      	b.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007e88:	2100      	movs	r1, #0
 8007e8a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007e8e:	f7ff fdf5 	bl	8007a7c <RCCEx_PLL3_Config>
 8007e92:	4605      	mov	r5, r0
      break;
 8007e94:	e7ca      	b.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8007e96:	462e      	mov	r6, r5
 8007e98:	e7d1      	b.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    switch(PeriphClkInit->Spi45ClockSelection)
 8007e9a:	2601      	movs	r6, #1
 8007e9c:	4635      	mov	r5, r6
 8007e9e:	e00a      	b.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8007ea0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007ea4:	d0dd      	beq.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007ea6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007eaa:	d0da      	beq.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007eac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007eb0:	d0d7      	beq.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007eb2:	2601      	movs	r6, #1
 8007eb4:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007eb6:	6823      	ldr	r3, [r4, #0]
 8007eb8:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8007ebc:	d030      	beq.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x398>
    switch(PeriphClkInit->Spi6ClockSelection)
 8007ebe:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
 8007ec2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ec6:	d044      	beq.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 8007ec8:	d81f      	bhi.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007eca:	b13b      	cbz	r3, 8007edc <HAL_RCCEx_PeriphCLKConfig+0x354>
 8007ecc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ed0:	d118      	bne.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x37c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007ed2:	2101      	movs	r1, #1
 8007ed4:	1d20      	adds	r0, r4, #4
 8007ed6:	f7ff fd4b 	bl	8007970 <RCCEx_PLL2_Config>
 8007eda:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007edc:	2d00      	cmp	r5, #0
 8007ede:	d13f      	bne.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007ee0:	4a49      	ldr	r2, [pc, #292]	@ (8008008 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007ee2:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8007ee4:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 8007ee8:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 8007eec:	430b      	orrs	r3, r1
 8007eee:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ef0:	e016      	b.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x398>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007ef2:	2101      	movs	r1, #1
 8007ef4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007ef8:	f7ff fdc0 	bl	8007a7c <RCCEx_PLL3_Config>
 8007efc:	4605      	mov	r5, r0
      break;
 8007efe:	e7b0      	b.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007f00:	462e      	mov	r6, r5
 8007f02:	e7d8      	b.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    switch(PeriphClkInit->Spi6ClockSelection)
 8007f04:	2601      	movs	r6, #1
 8007f06:	4635      	mov	r5, r6
 8007f08:	e00a      	b.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8007f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f0e:	d0e5      	beq.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x354>
 8007f10:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007f14:	d0e2      	beq.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x354>
 8007f16:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007f1a:	d0df      	beq.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x354>
 8007f1c:	2601      	movs	r6, #1
 8007f1e:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007f20:	6823      	ldr	r3, [r4, #0]
 8007f22:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8007f26:	d009      	beq.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    switch(PeriphClkInit->FdcanClockSelection)
 8007f28:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8007f2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f2e:	d019      	beq.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 8007f30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f34:	d024      	beq.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007f36:	b1d3      	cbz	r3, 8007f6e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007f38:	2601      	movs	r6, #1
 8007f3a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007f3c:	6823      	ldr	r3, [r4, #0]
 8007f3e:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8007f42:	d032      	beq.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x422>
    switch(PeriphClkInit->FmcClockSelection)
 8007f44:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007f46:	2b03      	cmp	r3, #3
 8007f48:	d859      	bhi.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007f4a:	e8df f003 	tbb	[pc, r3]
 8007f4e:	2126      	.short	0x2126
 8007f50:	2652      	.short	0x2652
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007f52:	2101      	movs	r1, #1
 8007f54:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007f58:	f7ff fd90 	bl	8007a7c <RCCEx_PLL3_Config>
 8007f5c:	4605      	mov	r5, r0
      break;
 8007f5e:	e7bd      	b.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x354>
 8007f60:	462e      	mov	r6, r5
 8007f62:	e7dd      	b.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x398>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f64:	4a28      	ldr	r2, [pc, #160]	@ (8008008 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007f66:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007f68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f6c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if(ret == HAL_OK)
 8007f6e:	b96d      	cbnz	r5, 8007f8c <HAL_RCCEx_PeriphCLKConfig+0x404>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007f70:	4a25      	ldr	r2, [pc, #148]	@ (8008008 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007f72:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8007f74:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8007f78:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8007f7a:	430b      	orrs	r3, r1
 8007f7c:	6513      	str	r3, [r2, #80]	@ 0x50
 8007f7e:	e7dd      	b.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007f80:	2101      	movs	r1, #1
 8007f82:	1d20      	adds	r0, r4, #4
 8007f84:	f7ff fcf4 	bl	8007970 <RCCEx_PLL2_Config>
 8007f88:	4605      	mov	r5, r0
      break;
 8007f8a:	e7f0      	b.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007f8c:	462e      	mov	r6, r5
 8007f8e:	e7d5      	b.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f90:	4a1d      	ldr	r2, [pc, #116]	@ (8008008 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007f92:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007f94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f98:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if(ret == HAL_OK)
 8007f9a:	bb9d      	cbnz	r5, 8008004 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007f9c:	4a1a      	ldr	r2, [pc, #104]	@ (8008008 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007f9e:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8007fa0:	f023 0303 	bic.w	r3, r3, #3
 8007fa4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007fa6:	430b      	orrs	r3, r1
 8007fa8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007faa:	6823      	ldr	r3, [r4, #0]
 8007fac:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8007fb0:	d12c      	bne.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x484>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007fb2:	6823      	ldr	r3, [r4, #0]
 8007fb4:	f013 0f01 	tst.w	r3, #1
 8007fb8:	f000 80a3 	beq.w	8008102 <HAL_RCCEx_PeriphCLKConfig+0x57a>
    switch(PeriphClkInit->Usart16ClockSelection)
 8007fbc:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8007fbe:	2b28      	cmp	r3, #40	@ 0x28
 8007fc0:	f200 809d 	bhi.w	80080fe <HAL_RCCEx_PeriphCLKConfig+0x576>
 8007fc4:	e8df f003 	tbb	[pc, r3]
 8007fc8:	9b9b9b8b 	.word	0x9b9b9b8b
 8007fcc:	9b9b9b9b 	.word	0x9b9b9b9b
 8007fd0:	9b9b9b86 	.word	0x9b9b9b86
 8007fd4:	9b9b9b9b 	.word	0x9b9b9b9b
 8007fd8:	9b9b9b94 	.word	0x9b9b9b94
 8007fdc:	9b9b9b9b 	.word	0x9b9b9b9b
 8007fe0:	9b9b9b8b 	.word	0x9b9b9b8b
 8007fe4:	9b9b9b9b 	.word	0x9b9b9b9b
 8007fe8:	9b9b9b8b 	.word	0x9b9b9b8b
 8007fec:	9b9b9b9b 	.word	0x9b9b9b9b
 8007ff0:	8b          	.byte	0x8b
 8007ff1:	00          	.byte	0x00
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007ff2:	2102      	movs	r1, #2
 8007ff4:	1d20      	adds	r0, r4, #4
 8007ff6:	f7ff fcbb 	bl	8007970 <RCCEx_PLL2_Config>
 8007ffa:	4605      	mov	r5, r0
      break;
 8007ffc:	e7cd      	b.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x412>
    switch(PeriphClkInit->FmcClockSelection)
 8007ffe:	2601      	movs	r6, #1
 8008000:	4635      	mov	r5, r6
 8008002:	e7d2      	b.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x422>
 8008004:	462e      	mov	r6, r5
 8008006:	e7d0      	b.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x422>
 8008008:	58024400 	.word	0x58024400
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800800c:	4a8f      	ldr	r2, [pc, #572]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800800e:	6813      	ldr	r3, [r2, #0]
 8008010:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008014:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8008016:	f7fb fa31 	bl	800347c <HAL_GetTick>
 800801a:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800801c:	4b8b      	ldr	r3, [pc, #556]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8008024:	d105      	bne.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008026:	f7fb fa29 	bl	800347c <HAL_GetTick>
 800802a:	1bc0      	subs	r0, r0, r7
 800802c:	2864      	cmp	r0, #100	@ 0x64
 800802e:	d9f5      	bls.n	800801c <HAL_RCCEx_PeriphCLKConfig+0x494>
        ret = HAL_TIMEOUT;
 8008030:	2503      	movs	r5, #3
    if(ret == HAL_OK)
 8008032:	2d00      	cmp	r5, #0
 8008034:	d14a      	bne.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0x544>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008036:	4b86      	ldr	r3, [pc, #536]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800803a:	f8d4 20b0 	ldr.w	r2, [r4, #176]	@ 0xb0
 800803e:	4053      	eors	r3, r2
 8008040:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8008044:	d00c      	beq.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008046:	4b82      	ldr	r3, [pc, #520]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008048:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800804a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800804e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008050:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8008054:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008056:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008058:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800805c:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 800805e:	671a      	str	r2, [r3, #112]	@ 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008060:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 8008064:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008068:	d015      	beq.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x50e>
      if(ret == HAL_OK)
 800806a:	bb8d      	cbnz	r5, 80080d0 <HAL_RCCEx_PeriphCLKConfig+0x548>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800806c:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 8008070:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8008074:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8008078:	d01e      	beq.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x530>
 800807a:	4a75      	ldr	r2, [pc, #468]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800807c:	6913      	ldr	r3, [r2, #16]
 800807e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008082:	6113      	str	r3, [r2, #16]
 8008084:	4972      	ldr	r1, [pc, #456]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008086:	6f0b      	ldr	r3, [r1, #112]	@ 0x70
 8008088:	f8d4 20b0 	ldr.w	r2, [r4, #176]	@ 0xb0
 800808c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8008090:	4313      	orrs	r3, r2
 8008092:	670b      	str	r3, [r1, #112]	@ 0x70
 8008094:	e78d      	b.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x42a>
        tickstart = HAL_GetTick();
 8008096:	f7fb f9f1 	bl	800347c <HAL_GetTick>
 800809a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800809c:	4b6c      	ldr	r3, [pc, #432]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800809e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080a0:	f013 0f02 	tst.w	r3, #2
 80080a4:	d1e1      	bne.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080a6:	f7fb f9e9 	bl	800347c <HAL_GetTick>
 80080aa:	1bc0      	subs	r0, r0, r7
 80080ac:	f241 3388 	movw	r3, #5000	@ 0x1388
 80080b0:	4298      	cmp	r0, r3
 80080b2:	d9f3      	bls.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x514>
            ret = HAL_TIMEOUT;
 80080b4:	2503      	movs	r5, #3
 80080b6:	e7d8      	b.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80080b8:	4865      	ldr	r0, [pc, #404]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80080ba:	6902      	ldr	r2, [r0, #16]
 80080bc:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 80080c0:	4964      	ldr	r1, [pc, #400]	@ (8008254 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80080c2:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 80080c6:	4313      	orrs	r3, r2
 80080c8:	6103      	str	r3, [r0, #16]
 80080ca:	e7db      	b.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      status = ret;
 80080cc:	462e      	mov	r6, r5
 80080ce:	e770      	b.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x42a>
        status = ret;
 80080d0:	462e      	mov	r6, r5
 80080d2:	e76e      	b.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80080d4:	2101      	movs	r1, #1
 80080d6:	1d20      	adds	r0, r4, #4
 80080d8:	f7ff fc4a 	bl	8007970 <RCCEx_PLL2_Config>
 80080dc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80080de:	b9e5      	cbnz	r5, 800811a <HAL_RCCEx_PeriphCLKConfig+0x592>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80080e0:	4a5b      	ldr	r2, [pc, #364]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80080e2:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80080e4:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 80080e8:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 80080ea:	430b      	orrs	r3, r1
 80080ec:	6553      	str	r3, [r2, #84]	@ 0x54
 80080ee:	e008      	b.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x57a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80080f0:	2101      	movs	r1, #1
 80080f2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80080f6:	f7ff fcc1 	bl	8007a7c <RCCEx_PLL3_Config>
 80080fa:	4605      	mov	r5, r0
      break;
 80080fc:	e7ef      	b.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x556>
    switch(PeriphClkInit->Usart16ClockSelection)
 80080fe:	2601      	movs	r6, #1
 8008100:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008102:	6823      	ldr	r3, [r4, #0]
 8008104:	f013 0f02 	tst.w	r3, #2
 8008108:	d016      	beq.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800810a:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800810c:	2b05      	cmp	r3, #5
 800810e:	d827      	bhi.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
 8008110:	e8df f003 	tbb	[pc, r3]
 8008114:	0a1f050a 	.word	0x0a1f050a
 8008118:	0a0a      	.short	0x0a0a
 800811a:	462e      	mov	r6, r5
 800811c:	e7f1      	b.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x57a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800811e:	2101      	movs	r1, #1
 8008120:	1d20      	adds	r0, r4, #4
 8008122:	f7ff fc25 	bl	8007970 <RCCEx_PLL2_Config>
 8008126:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008128:	b9ed      	cbnz	r5, 8008166 <HAL_RCCEx_PeriphCLKConfig+0x5de>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800812a:	4a49      	ldr	r2, [pc, #292]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800812c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800812e:	f023 0307 	bic.w	r3, r3, #7
 8008132:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8008134:	430b      	orrs	r3, r1
 8008136:	6553      	str	r3, [r2, #84]	@ 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008138:	6823      	ldr	r3, [r4, #0]
 800813a:	f013 0f04 	tst.w	r3, #4
 800813e:	d022      	beq.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008140:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8008144:	2b05      	cmp	r3, #5
 8008146:	d843      	bhi.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8008148:	e8df f003 	tbb	[pc, r3]
 800814c:	143b0f14 	.word	0x143b0f14
 8008150:	1414      	.short	0x1414
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008152:	2101      	movs	r1, #1
 8008154:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008158:	f7ff fc90 	bl	8007a7c <RCCEx_PLL3_Config>
 800815c:	4605      	mov	r5, r0
      break;
 800815e:	e7e3      	b.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008160:	2601      	movs	r6, #1
 8008162:	4635      	mov	r5, r6
 8008164:	e7e8      	b.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
 8008166:	462e      	mov	r6, r5
 8008168:	e7e6      	b.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800816a:	2101      	movs	r1, #1
 800816c:	1d20      	adds	r0, r4, #4
 800816e:	f7ff fbff 	bl	8007970 <RCCEx_PLL2_Config>
 8008172:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008174:	bb7d      	cbnz	r5, 80081d6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008176:	4a36      	ldr	r2, [pc, #216]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008178:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800817a:	f023 0307 	bic.w	r3, r3, #7
 800817e:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 8008182:	430b      	orrs	r3, r1
 8008184:	6593      	str	r3, [r2, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008186:	6823      	ldr	r3, [r4, #0]
 8008188:	f013 0f20 	tst.w	r3, #32
 800818c:	d033      	beq.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800818e:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 8008192:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008196:	d04c      	beq.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8008198:	d822      	bhi.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x658>
 800819a:	b13b      	cbz	r3, 80081ac <HAL_RCCEx_PeriphCLKConfig+0x624>
 800819c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80081a0:	d11b      	bne.n	80081da <HAL_RCCEx_PeriphCLKConfig+0x652>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80081a2:	2100      	movs	r1, #0
 80081a4:	1d20      	adds	r0, r4, #4
 80081a6:	f7ff fbe3 	bl	8007970 <RCCEx_PLL2_Config>
 80081aa:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80081ac:	2d00      	cmp	r5, #0
 80081ae:	d147      	bne.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80081b0:	4a27      	ldr	r2, [pc, #156]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80081b2:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80081b4:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 80081b8:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
 80081bc:	430b      	orrs	r3, r1
 80081be:	6553      	str	r3, [r2, #84]	@ 0x54
 80081c0:	e019      	b.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80081c2:	2101      	movs	r1, #1
 80081c4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80081c8:	f7ff fc58 	bl	8007a7c <RCCEx_PLL3_Config>
 80081cc:	4605      	mov	r5, r0
      break;
 80081ce:	e7d1      	b.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80081d0:	2601      	movs	r6, #1
 80081d2:	4635      	mov	r5, r6
 80081d4:	e7d7      	b.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
 80081d6:	462e      	mov	r6, r5
 80081d8:	e7d5      	b.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80081da:	2601      	movs	r6, #1
 80081dc:	4635      	mov	r5, r6
 80081de:	e00a      	b.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80081e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081e4:	d0e2      	beq.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x624>
 80081e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80081ea:	d0df      	beq.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x624>
 80081ec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80081f0:	d0dc      	beq.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x624>
 80081f2:	2601      	movs	r6, #1
 80081f4:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80081f6:	6823      	ldr	r3, [r4, #0]
 80081f8:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80081fc:	d037      	beq.n	800826e <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80081fe:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8008202:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008206:	d052      	beq.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x726>
 8008208:	d826      	bhi.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 800820a:	b13b      	cbz	r3, 800821c <HAL_RCCEx_PeriphCLKConfig+0x694>
 800820c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008210:	d118      	bne.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008212:	2100      	movs	r1, #0
 8008214:	1d20      	adds	r0, r4, #4
 8008216:	f7ff fbab 	bl	8007970 <RCCEx_PLL2_Config>
 800821a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800821c:	2d00      	cmp	r5, #0
 800821e:	d14d      	bne.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x734>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008220:	4a0b      	ldr	r2, [pc, #44]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008222:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8008224:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8008228:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
 800822c:	430b      	orrs	r3, r1
 800822e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008230:	e01d      	b.n	800826e <HAL_RCCEx_PeriphCLKConfig+0x6e6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008232:	2102      	movs	r1, #2
 8008234:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008238:	f7ff fc20 	bl	8007a7c <RCCEx_PLL3_Config>
 800823c:	4605      	mov	r5, r0
      break;
 800823e:	e7b5      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x624>
 8008240:	462e      	mov	r6, r5
 8008242:	e7d8      	b.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008244:	2601      	movs	r6, #1
 8008246:	4635      	mov	r5, r6
 8008248:	e011      	b.n	800826e <HAL_RCCEx_PeriphCLKConfig+0x6e6>
 800824a:	bf00      	nop
 800824c:	58024800 	.word	0x58024800
 8008250:	58024400 	.word	0x58024400
 8008254:	00ffffcf 	.word	0x00ffffcf
 8008258:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800825c:	d0de      	beq.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x694>
 800825e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008262:	d0db      	beq.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x694>
 8008264:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008268:	d0d8      	beq.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x694>
 800826a:	2601      	movs	r6, #1
 800826c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800826e:	6823      	ldr	r3, [r4, #0]
 8008270:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008274:	d032      	beq.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x754>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008276:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 800827a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800827e:	f000 809d 	beq.w	80083bc <HAL_RCCEx_PeriphCLKConfig+0x834>
 8008282:	d820      	bhi.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8008284:	b13b      	cbz	r3, 8008296 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8008286:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800828a:	d119      	bne.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x738>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800828c:	2100      	movs	r1, #0
 800828e:	1d20      	adds	r0, r4, #4
 8008290:	f7ff fb6e 	bl	8007970 <RCCEx_PLL2_Config>
 8008294:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008296:	2d00      	cmp	r5, #0
 8008298:	f040 8097 	bne.w	80083ca <HAL_RCCEx_PeriphCLKConfig+0x842>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800829c:	4aa5      	ldr	r2, [pc, #660]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800829e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80082a0:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80082a4:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 80082a8:	430b      	orrs	r3, r1
 80082aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80082ac:	e016      	b.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x754>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80082ae:	2102      	movs	r1, #2
 80082b0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80082b4:	f7ff fbe2 	bl	8007a7c <RCCEx_PLL3_Config>
 80082b8:	4605      	mov	r5, r0
      break;
 80082ba:	e7af      	b.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x694>
 80082bc:	462e      	mov	r6, r5
 80082be:	e7d6      	b.n	800826e <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80082c0:	2601      	movs	r6, #1
 80082c2:	4635      	mov	r5, r6
 80082c4:	e00a      	b.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x754>
 80082c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80082ca:	d0e4      	beq.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 80082cc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80082d0:	d0e1      	beq.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 80082d2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80082d6:	d0de      	beq.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 80082d8:	2601      	movs	r6, #1
 80082da:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80082dc:	6823      	ldr	r3, [r4, #0]
 80082de:	f013 0f08 	tst.w	r3, #8
 80082e2:	d00c      	beq.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x776>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80082e4:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80082e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082ec:	d06f      	beq.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0x846>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80082ee:	4a91      	ldr	r2, [pc, #580]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 80082f0:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80082f2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80082f6:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 80082fa:	430b      	orrs	r3, r1
 80082fc:	6553      	str	r3, [r2, #84]	@ 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80082fe:	6823      	ldr	r3, [r4, #0]
 8008300:	f013 0f10 	tst.w	r3, #16
 8008304:	d00c      	beq.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0x798>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008306:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 800830a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800830e:	d067      	beq.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x858>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008310:	4a88      	ldr	r2, [pc, #544]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8008312:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8008314:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008318:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800831c:	430b      	orrs	r3, r1
 800831e:	6593      	str	r3, [r2, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008320:	6823      	ldr	r3, [r4, #0]
 8008322:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8008326:	d00b      	beq.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    switch(PeriphClkInit->AdcClockSelection)
 8008328:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 800832c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008330:	d06e      	beq.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8008332:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008336:	d061      	beq.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x874>
 8008338:	2b00      	cmp	r3, #0
 800833a:	d05a      	beq.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
 800833c:	2601      	movs	r6, #1
 800833e:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008340:	6823      	ldr	r3, [r4, #0]
 8008342:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8008346:	d00c      	beq.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x7da>
    switch(PeriphClkInit->UsbClockSelection)
 8008348:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800834c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008350:	d076      	beq.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8008352:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008356:	d069      	beq.n	800842c <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 8008358:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800835c:	d061      	beq.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x89a>
 800835e:	2601      	movs	r6, #1
 8008360:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008362:	6823      	ldr	r3, [r4, #0]
 8008364:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8008368:	d007      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    switch(PeriphClkInit->SdmmcClockSelection)
 800836a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800836c:	2b00      	cmp	r3, #0
 800836e:	d070      	beq.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
 8008370:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008374:	d07b      	beq.n	800846e <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8008376:	2601      	movs	r6, #1
 8008378:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800837a:	6823      	ldr	r3, [r4, #0]
 800837c:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8008380:	d17d      	bne.n	800847e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008382:	6823      	ldr	r3, [r4, #0]
 8008384:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8008388:	f000 8086 	beq.w	8008498 <HAL_RCCEx_PeriphCLKConfig+0x910>
    switch(PeriphClkInit->RngClockSelection)
 800838c:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800838e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008392:	f000 80c6 	beq.w	8008522 <HAL_RCCEx_PeriphCLKConfig+0x99a>
 8008396:	d97c      	bls.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8008398:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800839c:	d003      	beq.n	80083a6 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 800839e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80083a2:	f040 80bc 	bne.w	800851e <HAL_RCCEx_PeriphCLKConfig+0x996>
    if(ret == HAL_OK)
 80083a6:	2d00      	cmp	r5, #0
 80083a8:	f040 80c1 	bne.w	800852e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80083ac:	4a61      	ldr	r2, [pc, #388]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 80083ae:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80083b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083b4:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 80083b6:	430b      	orrs	r3, r1
 80083b8:	6553      	str	r3, [r2, #84]	@ 0x54
 80083ba:	e06d      	b.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0x910>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80083bc:	2102      	movs	r1, #2
 80083be:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80083c2:	f7ff fb5b 	bl	8007a7c <RCCEx_PLL3_Config>
 80083c6:	4605      	mov	r5, r0
      break;
 80083c8:	e765      	b.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 80083ca:	462e      	mov	r6, r5
 80083cc:	e786      	b.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x754>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80083ce:	2102      	movs	r1, #2
 80083d0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80083d4:	f7ff fb52 	bl	8007a7c <RCCEx_PLL3_Config>
 80083d8:	2800      	cmp	r0, #0
 80083da:	d088      	beq.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0x766>
          status = HAL_ERROR;
 80083dc:	2601      	movs	r6, #1
 80083de:	e786      	b.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0x766>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80083e0:	2102      	movs	r1, #2
 80083e2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80083e6:	f7ff fb49 	bl	8007a7c <RCCEx_PLL3_Config>
 80083ea:	2800      	cmp	r0, #0
 80083ec:	d090      	beq.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x788>
        status = HAL_ERROR;
 80083ee:	2601      	movs	r6, #1
 80083f0:	e78e      	b.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x788>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80083f2:	2100      	movs	r1, #0
 80083f4:	1d20      	adds	r0, r4, #4
 80083f6:	f7ff fabb 	bl	8007970 <RCCEx_PLL2_Config>
 80083fa:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80083fc:	b97d      	cbnz	r5, 800841e <HAL_RCCEx_PeriphCLKConfig+0x896>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80083fe:	4a4d      	ldr	r2, [pc, #308]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8008400:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8008402:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8008406:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 800840a:	430b      	orrs	r3, r1
 800840c:	6593      	str	r3, [r2, #88]	@ 0x58
 800840e:	e797      	b.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008410:	2102      	movs	r1, #2
 8008412:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008416:	f7ff fb31 	bl	8007a7c <RCCEx_PLL3_Config>
 800841a:	4605      	mov	r5, r0
      break;
 800841c:	e7ee      	b.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x874>
 800841e:	462e      	mov	r6, r5
 8008420:	e78e      	b.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008422:	4a44      	ldr	r2, [pc, #272]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8008424:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8008426:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800842a:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if(ret == HAL_OK)
 800842c:	b97d      	cbnz	r5, 800844e <HAL_RCCEx_PeriphCLKConfig+0x8c6>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800842e:	4a41      	ldr	r2, [pc, #260]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8008430:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8008432:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008436:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 800843a:	430b      	orrs	r3, r1
 800843c:	6553      	str	r3, [r2, #84]	@ 0x54
 800843e:	e790      	b.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x7da>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008440:	2101      	movs	r1, #1
 8008442:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008446:	f7ff fb19 	bl	8007a7c <RCCEx_PLL3_Config>
 800844a:	4605      	mov	r5, r0
      break;
 800844c:	e7ee      	b.n	800842c <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 800844e:	462e      	mov	r6, r5
 8008450:	e787      	b.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x7da>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008452:	4a38      	ldr	r2, [pc, #224]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8008454:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8008456:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800845a:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if(ret == HAL_OK)
 800845c:	b96d      	cbnz	r5, 800847a <HAL_RCCEx_PeriphCLKConfig+0x8f2>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800845e:	4a35      	ldr	r2, [pc, #212]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8008460:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8008462:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008466:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8008468:	430b      	orrs	r3, r1
 800846a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800846c:	e785      	b.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x7f2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800846e:	2102      	movs	r1, #2
 8008470:	1d20      	adds	r0, r4, #4
 8008472:	f7ff fa7d 	bl	8007970 <RCCEx_PLL2_Config>
 8008476:	4605      	mov	r5, r0
      break;
 8008478:	e7f0      	b.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x8d4>
 800847a:	462e      	mov	r6, r5
 800847c:	e77d      	b.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800847e:	2102      	movs	r1, #2
 8008480:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008484:	f7ff fafa 	bl	8007a7c <RCCEx_PLL3_Config>
 8008488:	2800      	cmp	r0, #0
 800848a:	f43f af7a 	beq.w	8008382 <HAL_RCCEx_PeriphCLKConfig+0x7fa>
      status=HAL_ERROR;
 800848e:	2601      	movs	r6, #1
 8008490:	e777      	b.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0x7fa>
    switch(PeriphClkInit->RngClockSelection)
 8008492:	2b00      	cmp	r3, #0
 8008494:	d087      	beq.n	80083a6 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8008496:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008498:	6823      	ldr	r3, [r4, #0]
 800849a:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800849e:	d006      	beq.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0x926>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80084a0:	4a24      	ldr	r2, [pc, #144]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 80084a2:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80084a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80084a8:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 80084aa:	430b      	orrs	r3, r1
 80084ac:	6513      	str	r3, [r2, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80084ae:	6823      	ldr	r3, [r4, #0]
 80084b0:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80084b4:	d007      	beq.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x93e>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80084b6:	4a1f      	ldr	r2, [pc, #124]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 80084b8:	6913      	ldr	r3, [r2, #16]
 80084ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80084be:	f8d4 10b4 	ldr.w	r1, [r4, #180]	@ 0xb4
 80084c2:	430b      	orrs	r3, r1
 80084c4:	6113      	str	r3, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80084c6:	6823      	ldr	r3, [r4, #0]
 80084c8:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 80084cc:	d006      	beq.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x954>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80084ce:	4a19      	ldr	r2, [pc, #100]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 80084d0:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80084d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80084d6:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 80084d8:	430b      	orrs	r3, r1
 80084da:	6513      	str	r3, [r2, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80084dc:	6823      	ldr	r3, [r4, #0]
 80084de:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80084e2:	d009      	beq.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x970>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80084e4:	4b13      	ldr	r3, [pc, #76]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 80084e6:	691a      	ldr	r2, [r3, #16]
 80084e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80084ec:	611a      	str	r2, [r3, #16]
 80084ee:	691a      	ldr	r2, [r3, #16]
 80084f0:	f8d4 10b8 	ldr.w	r1, [r4, #184]	@ 0xb8
 80084f4:	430a      	orrs	r2, r1
 80084f6:	611a      	str	r2, [r3, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80084f8:	6823      	ldr	r3, [r4, #0]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	db1c      	blt.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80084fe:	6823      	ldr	r3, [r4, #0]
 8008500:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8008504:	d007      	beq.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x98e>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008506:	4a0b      	ldr	r2, [pc, #44]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8008508:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800850a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800850e:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 8008512:	430b      	orrs	r3, r1
 8008514:	6553      	str	r3, [r2, #84]	@ 0x54
  if (status == HAL_OK)
 8008516:	b106      	cbz	r6, 800851a <HAL_RCCEx_PeriphCLKConfig+0x992>
  return HAL_ERROR;
 8008518:	2601      	movs	r6, #1
}
 800851a:	4630      	mov	r0, r6
 800851c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PeriphClkInit->RngClockSelection)
 800851e:	2601      	movs	r6, #1
 8008520:	e7ba      	b.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0x910>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008522:	4a04      	ldr	r2, [pc, #16]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8008524:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8008526:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800852a:	62d3      	str	r3, [r2, #44]	@ 0x2c
      break;
 800852c:	e73b      	b.n	80083a6 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 800852e:	462e      	mov	r6, r5
 8008530:	e7b2      	b.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8008532:	bf00      	nop
 8008534:	58024400 	.word	0x58024400
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008538:	4a03      	ldr	r2, [pc, #12]	@ (8008548 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800853a:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800853c:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8008540:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8008542:	430b      	orrs	r3, r1
 8008544:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008546:	e7da      	b.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0x976>
 8008548:	58024400 	.word	0x58024400

0800854c <HAL_RCCEx_GetD3PCLK1Freq>:
{
 800854c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800854e:	f7ff f99f 	bl	8007890 <HAL_RCC_GetHCLKFreq>
 8008552:	4b05      	ldr	r3, [pc, #20]	@ (8008568 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8008554:	6a1b      	ldr	r3, [r3, #32]
 8008556:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800855a:	4a04      	ldr	r2, [pc, #16]	@ (800856c <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800855c:	5cd3      	ldrb	r3, [r2, r3]
 800855e:	f003 031f 	and.w	r3, r3, #31
}
 8008562:	40d8      	lsrs	r0, r3
 8008564:	bd08      	pop	{r3, pc}
 8008566:	bf00      	nop
 8008568:	58024400 	.word	0x58024400
 800856c:	0801b354 	.word	0x0801b354

08008570 <HAL_RCCEx_GetPLL2ClockFreq>:
{
 8008570:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008572:	4b78      	ldr	r3, [pc, #480]	@ (8008754 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8008574:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008576:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8008578:	f3c4 3c05 	ubfx	ip, r4, #12, #6
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800857c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800857e:	f3c1 1100 	ubfx	r1, r1, #4, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008584:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8008588:	fb01 f303 	mul.w	r3, r1, r3
  if (pll2m != 0U)
 800858c:	f414 3f7c 	tst.w	r4, #258048	@ 0x3f000
 8008590:	f000 80db 	beq.w	800874a <HAL_RCCEx_GetPLL2ClockFreq+0x1da>
 8008594:	f002 0203 	and.w	r2, r2, #3
 8008598:	ee07 3a90 	vmov	s15, r3
 800859c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 80085a0:	2a01      	cmp	r2, #1
 80085a2:	d066      	beq.n	8008672 <HAL_RCCEx_GetPLL2ClockFreq+0x102>
 80085a4:	2a02      	cmp	r2, #2
 80085a6:	f000 80b3 	beq.w	8008710 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80085aa:	b1e2      	cbz	r2, 80085e6 <HAL_RCCEx_GetPLL2ClockFreq+0x76>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80085ac:	ee07 ca10 	vmov	s14, ip
 80085b0:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80085b4:	ed9f 6a68 	vldr	s12, [pc, #416]	@ 8008758 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 80085b8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80085bc:	4b65      	ldr	r3, [pc, #404]	@ (8008754 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80085be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085c4:	ee06 3a90 	vmov	s13, r3
 80085c8:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80085cc:	ed9f 6a63 	vldr	s12, [pc, #396]	@ 800875c <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 80085d0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80085d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085e0:	ee27 7a27 	vmul.f32	s14, s14, s15
      break;
 80085e4:	e061      	b.n	80086aa <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085e6:	4b5b      	ldr	r3, [pc, #364]	@ (8008754 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f013 0f20 	tst.w	r3, #32
 80085ee:	d023      	beq.n	8008638 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80085f0:	4958      	ldr	r1, [pc, #352]	@ (8008754 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80085f2:	680a      	ldr	r2, [r1, #0]
 80085f4:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80085f8:	4b59      	ldr	r3, [pc, #356]	@ (8008760 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>)
 80085fa:	40d3      	lsrs	r3, r2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80085fc:	ee07 3a10 	vmov	s14, r3
 8008600:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008604:	ee07 ca10 	vmov	s14, ip
 8008608:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 800860c:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8008610:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 8008612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008616:	ee06 3a90 	vmov	s13, r3
 800861a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800861e:	ed9f 6a4f 	vldr	s12, [pc, #316]	@ 800875c <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8008622:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800862a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800862e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008632:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008636:	e038      	b.n	80086aa <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008638:	ee07 ca10 	vmov	s14, ip
 800863c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008640:	ed9f 6a48 	vldr	s12, [pc, #288]	@ 8008764 <HAL_RCCEx_GetPLL2ClockFreq+0x1f4>
 8008644:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008648:	4b42      	ldr	r3, [pc, #264]	@ (8008754 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800864a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800864c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008650:	ee06 3a90 	vmov	s13, r3
 8008654:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8008658:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 800875c <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 800865c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008660:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008664:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008668:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800866c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008670:	e01b      	b.n	80086aa <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008672:	ee07 ca10 	vmov	s14, ip
 8008676:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800867a:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8008758 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 800867e:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008682:	4b34      	ldr	r3, [pc, #208]	@ (8008754 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8008684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800868a:	ee06 3a90 	vmov	s13, r3
 800868e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8008692:	ed9f 6a32 	vldr	s12, [pc, #200]	@ 800875c <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8008696:	ee67 7a86 	vmul.f32	s15, s15, s12
 800869a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800869e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086a6:	ee27 7a27 	vmul.f32	s14, s14, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80086aa:	4a2a      	ldr	r2, [pc, #168]	@ (8008754 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80086ac:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80086ae:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80086b2:	ee07 3a90 	vmov	s15, r3
 80086b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086c2:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80086c6:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 80086ca:	ed80 6a00 	vstr	s12, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80086ce:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80086d0:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80086d4:	ee07 3a90 	vmov	s15, r3
 80086d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086e0:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80086e4:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 80086e8:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80086ec:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80086ee:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80086f2:	ee07 3a90 	vmov	s15, r3
 80086f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086fe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008702:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8008706:	edc0 6a02 	vstr	s13, [r0, #8]
}
 800870a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800870e:	4770      	bx	lr
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008710:	ee07 ca10 	vmov	s14, ip
 8008714:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008718:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8008768 <HAL_RCCEx_GetPLL2ClockFreq+0x1f8>
 800871c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008720:	4b0c      	ldr	r3, [pc, #48]	@ (8008754 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8008722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008728:	ee06 3a90 	vmov	s13, r3
 800872c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8008730:	ed9f 6a0a 	vldr	s12, [pc, #40]	@ 800875c <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8008734:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008738:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800873c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008740:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008744:	ee27 7a27 	vmul.f32	s14, s14, s15
      break;
 8008748:	e7af      	b.n	80086aa <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800874a:	2300      	movs	r3, #0
 800874c:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800874e:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008750:	6083      	str	r3, [r0, #8]
}
 8008752:	e7da      	b.n	800870a <HAL_RCCEx_GetPLL2ClockFreq+0x19a>
 8008754:	58024400 	.word	0x58024400
 8008758:	4a742400 	.word	0x4a742400
 800875c:	39000000 	.word	0x39000000
 8008760:	03d09000 	.word	0x03d09000
 8008764:	4c742400 	.word	0x4c742400
 8008768:	4bb71b00 	.word	0x4bb71b00

0800876c <HAL_RCCEx_GetPLL3ClockFreq>:
{
 800876c:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800876e:	4b78      	ldr	r3, [pc, #480]	@ (8008950 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8008770:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008772:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8008774:	f3c4 5c05 	ubfx	ip, r4, #20, #6
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008778:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800877a:	f3c1 2100 	ubfx	r1, r1, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800877e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008780:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8008784:	fb01 f303 	mul.w	r3, r1, r3
  if (pll3m != 0U)
 8008788:	f014 7f7c 	tst.w	r4, #66060288	@ 0x3f00000
 800878c:	f000 80db 	beq.w	8008946 <HAL_RCCEx_GetPLL3ClockFreq+0x1da>
 8008790:	f002 0203 	and.w	r2, r2, #3
 8008794:	ee07 3a90 	vmov	s15, r3
 8008798:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 800879c:	2a01      	cmp	r2, #1
 800879e:	d066      	beq.n	800886e <HAL_RCCEx_GetPLL3ClockFreq+0x102>
 80087a0:	2a02      	cmp	r2, #2
 80087a2:	f000 80b3 	beq.w	800890c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80087a6:	b1e2      	cbz	r2, 80087e2 <HAL_RCCEx_GetPLL3ClockFreq+0x76>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80087a8:	ee07 ca10 	vmov	s14, ip
 80087ac:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80087b0:	ed9f 6a68 	vldr	s12, [pc, #416]	@ 8008954 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 80087b4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80087b8:	4b65      	ldr	r3, [pc, #404]	@ (8008950 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80087ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087c0:	ee06 3a90 	vmov	s13, r3
 80087c4:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80087c8:	ed9f 6a63 	vldr	s12, [pc, #396]	@ 8008958 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 80087cc:	ee67 7a86 	vmul.f32	s15, s15, s12
 80087d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087dc:	ee27 7a27 	vmul.f32	s14, s14, s15
      break;
 80087e0:	e061      	b.n	80088a6 <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087e2:	4b5b      	ldr	r3, [pc, #364]	@ (8008950 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f013 0f20 	tst.w	r3, #32
 80087ea:	d023      	beq.n	8008834 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80087ec:	4958      	ldr	r1, [pc, #352]	@ (8008950 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80087ee:	680a      	ldr	r2, [r1, #0]
 80087f0:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80087f4:	4b59      	ldr	r3, [pc, #356]	@ (800895c <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>)
 80087f6:	40d3      	lsrs	r3, r2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80087f8:	ee07 3a10 	vmov	s14, r3
 80087fc:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008800:	ee07 ca10 	vmov	s14, ip
 8008804:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8008808:	ee86 7a86 	vdiv.f32	s14, s13, s12
 800880c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800880e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008812:	ee06 3a90 	vmov	s13, r3
 8008816:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800881a:	ed9f 6a4f 	vldr	s12, [pc, #316]	@ 8008958 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 800881e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008822:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008826:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800882a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800882e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008832:	e038      	b.n	80088a6 <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008834:	ee07 ca10 	vmov	s14, ip
 8008838:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800883c:	ed9f 6a48 	vldr	s12, [pc, #288]	@ 8008960 <HAL_RCCEx_GetPLL3ClockFreq+0x1f4>
 8008840:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008844:	4b42      	ldr	r3, [pc, #264]	@ (8008950 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8008846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008848:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800884c:	ee06 3a90 	vmov	s13, r3
 8008850:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8008854:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8008958 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8008858:	ee67 7a86 	vmul.f32	s15, s15, s12
 800885c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008860:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008864:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008868:	ee27 7a27 	vmul.f32	s14, s14, s15
 800886c:	e01b      	b.n	80088a6 <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800886e:	ee07 ca10 	vmov	s14, ip
 8008872:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008876:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8008954 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 800887a:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800887e:	4b34      	ldr	r3, [pc, #208]	@ (8008950 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8008880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008886:	ee06 3a90 	vmov	s13, r3
 800888a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800888e:	ed9f 6a32 	vldr	s12, [pc, #200]	@ 8008958 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8008892:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800889a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800889e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088a2:	ee27 7a27 	vmul.f32	s14, s14, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80088a6:	4a2a      	ldr	r2, [pc, #168]	@ (8008950 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80088a8:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80088aa:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80088ae:	ee07 3a90 	vmov	s15, r3
 80088b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088be:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80088c2:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 80088c6:	ed80 6a00 	vstr	s12, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80088ca:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80088cc:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80088d0:	ee07 3a90 	vmov	s15, r3
 80088d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088dc:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80088e0:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 80088e4:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80088e8:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80088ea:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80088ee:	ee07 3a90 	vmov	s15, r3
 80088f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088fa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80088fe:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8008902:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8008906:	f85d 4b04 	ldr.w	r4, [sp], #4
 800890a:	4770      	bx	lr
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800890c:	ee07 ca10 	vmov	s14, ip
 8008910:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008914:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8008964 <HAL_RCCEx_GetPLL3ClockFreq+0x1f8>
 8008918:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800891c:	4b0c      	ldr	r3, [pc, #48]	@ (8008950 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800891e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008924:	ee06 3a90 	vmov	s13, r3
 8008928:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800892c:	ed9f 6a0a 	vldr	s12, [pc, #40]	@ 8008958 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8008930:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008934:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008938:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800893c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008940:	ee27 7a27 	vmul.f32	s14, s14, s15
      break;
 8008944:	e7af      	b.n	80088a6 <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008946:	2300      	movs	r3, #0
 8008948:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800894a:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800894c:	6083      	str	r3, [r0, #8]
}
 800894e:	e7da      	b.n	8008906 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>
 8008950:	58024400 	.word	0x58024400
 8008954:	4a742400 	.word	0x4a742400
 8008958:	39000000 	.word	0x39000000
 800895c:	03d09000 	.word	0x03d09000
 8008960:	4c742400 	.word	0x4c742400
 8008964:	4bb71b00 	.word	0x4bb71b00

08008968 <HAL_RCCEx_GetPLL1ClockFreq>:
{
 8008968:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800896a:	4b78      	ldr	r3, [pc, #480]	@ (8008b4c <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 800896c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800896e:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8008970:	f3c4 1c05 	ubfx	ip, r4, #4, #6
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008974:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008976:	f001 0101 	and.w	r1, r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800897a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800897c:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8008980:	fb01 f303 	mul.w	r3, r1, r3
  if (pll1m != 0U)
 8008984:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
 8008988:	f000 80db 	beq.w	8008b42 <HAL_RCCEx_GetPLL1ClockFreq+0x1da>
 800898c:	f002 0203 	and.w	r2, r2, #3
 8008990:	ee07 3a90 	vmov	s15, r3
 8008994:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8008998:	2a01      	cmp	r2, #1
 800899a:	d066      	beq.n	8008a6a <HAL_RCCEx_GetPLL1ClockFreq+0x102>
 800899c:	2a02      	cmp	r2, #2
 800899e:	f000 80b3 	beq.w	8008b08 <HAL_RCCEx_GetPLL1ClockFreq+0x1a0>
 80089a2:	b1e2      	cbz	r2, 80089de <HAL_RCCEx_GetPLL1ClockFreq+0x76>
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80089a4:	ee07 ca10 	vmov	s14, ip
 80089a8:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80089ac:	ed9f 6a68 	vldr	s12, [pc, #416]	@ 8008b50 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 80089b0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80089b4:	4b65      	ldr	r3, [pc, #404]	@ (8008b4c <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 80089b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089bc:	ee06 3a90 	vmov	s13, r3
 80089c0:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80089c4:	ed9f 6a63 	vldr	s12, [pc, #396]	@ 8008b54 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 80089c8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80089cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089d8:	ee27 7a27 	vmul.f32	s14, s14, s15
      break;
 80089dc:	e061      	b.n	8008aa2 <HAL_RCCEx_GetPLL1ClockFreq+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089de:	4b5b      	ldr	r3, [pc, #364]	@ (8008b4c <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f013 0f20 	tst.w	r3, #32
 80089e6:	d023      	beq.n	8008a30 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80089e8:	4958      	ldr	r1, [pc, #352]	@ (8008b4c <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 80089ea:	680a      	ldr	r2, [r1, #0]
 80089ec:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80089f0:	4b59      	ldr	r3, [pc, #356]	@ (8008b58 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>)
 80089f2:	40d3      	lsrs	r3, r2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80089f4:	ee07 3a10 	vmov	s14, r3
 80089f8:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80089fc:	ee07 ca10 	vmov	s14, ip
 8008a00:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8008a04:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8008a08:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8008a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a0e:	ee06 3a90 	vmov	s13, r3
 8008a12:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8008a16:	ed9f 6a4f 	vldr	s12, [pc, #316]	@ 8008b54 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8008a1a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008a1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008a2e:	e038      	b.n	8008aa2 <HAL_RCCEx_GetPLL1ClockFreq+0x13a>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008a30:	ee07 ca10 	vmov	s14, ip
 8008a34:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008a38:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 8008b50 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8008a3c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008a40:	4b42      	ldr	r3, [pc, #264]	@ (8008b4c <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8008a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a48:	ee06 3a90 	vmov	s13, r3
 8008a4c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8008a50:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8008b54 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8008a54:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008a58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008a68:	e01b      	b.n	8008aa2 <HAL_RCCEx_GetPLL1ClockFreq+0x13a>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008a6a:	ee07 ca10 	vmov	s14, ip
 8008a6e:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008a72:	ed9f 6a3a 	vldr	s12, [pc, #232]	@ 8008b5c <HAL_RCCEx_GetPLL1ClockFreq+0x1f4>
 8008a76:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008a7a:	4b34      	ldr	r3, [pc, #208]	@ (8008b4c <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8008a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a82:	ee06 3a90 	vmov	s13, r3
 8008a86:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8008a8a:	ed9f 6a32 	vldr	s12, [pc, #200]	@ 8008b54 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8008a8e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a9e:	ee27 7a27 	vmul.f32	s14, s14, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008aa2:	4a2a      	ldr	r2, [pc, #168]	@ (8008b4c <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8008aa4:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8008aa6:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008aaa:	ee07 3a90 	vmov	s15, r3
 8008aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ab2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aba:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8008abe:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8008ac2:	ed80 6a00 	vstr	s12, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8008ac6:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8008ac8:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8008acc:	ee07 3a90 	vmov	s15, r3
 8008ad0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ad4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ad8:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8008adc:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8008ae0:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008ae4:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8008ae6:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8008aea:	ee07 3a90 	vmov	s15, r3
 8008aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008af6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008afa:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8008afe:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8008b02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b06:	4770      	bx	lr
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008b08:	ee07 ca10 	vmov	s14, ip
 8008b0c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008b10:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8008b60 <HAL_RCCEx_GetPLL1ClockFreq+0x1f8>
 8008b14:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008b18:	4b0c      	ldr	r3, [pc, #48]	@ (8008b4c <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8008b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b20:	ee06 3a90 	vmov	s13, r3
 8008b24:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8008b28:	ed9f 6a0a 	vldr	s12, [pc, #40]	@ 8008b54 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8008b2c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008b30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b34:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b3c:	ee27 7a27 	vmul.f32	s14, s14, s15
      break;
 8008b40:	e7af      	b.n	8008aa2 <HAL_RCCEx_GetPLL1ClockFreq+0x13a>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008b42:	2300      	movs	r3, #0
 8008b44:	6003      	str	r3, [r0, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008b46:	6043      	str	r3, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008b48:	6083      	str	r3, [r0, #8]
}
 8008b4a:	e7da      	b.n	8008b02 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>
 8008b4c:	58024400 	.word	0x58024400
 8008b50:	4c742400 	.word	0x4c742400
 8008b54:	39000000 	.word	0x39000000
 8008b58:	03d09000 	.word	0x03d09000
 8008b5c:	4a742400 	.word	0x4a742400
 8008b60:	4bb71b00 	.word	0x4bb71b00

08008b64 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 8008b64:	b500      	push	{lr}
 8008b66:	b08b      	sub	sp, #44	@ 0x2c
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008b68:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8008b6c:	d020      	beq.n	8008bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008b6e:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8008b72:	d071      	beq.n	8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008b74:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
 8008b78:	f000 80c8 	beq.w	8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008b7c:	f5b0 6f00 	cmp.w	r0, #2048	@ 0x800
 8008b80:	f000 8121 	beq.w	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008b84:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8008b88:	f000 8182 	beq.w	8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008b8c:	f5b0 2f00 	cmp.w	r0, #524288	@ 0x80000
 8008b90:	f000 81db 	beq.w	8008f4a <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008b94:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008b98:	f000 821f 	beq.w	8008fda <HAL_RCCEx_GetPeriphCLKFreq+0x476>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008b9c:	f5b0 4f80 	cmp.w	r0, #16384	@ 0x4000
 8008ba0:	f000 8239 	beq.w	8009016 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008ba4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8008ba8:	f000 8284 	beq.w	80090b4 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
      frequency = 0;
 8008bac:	2000      	movs	r0, #0
 8008bae:	e2b2      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008bb0:	4b95      	ldr	r3, [pc, #596]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008bb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bb4:	f003 0307 	and.w	r3, r3, #7
      switch (saiclocksource)
 8008bb8:	2b04      	cmp	r3, #4
 8008bba:	f200 82a3 	bhi.w	8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8008bbe:	e8df f003 	tbb	[pc, r3]
 8008bc2:	1005      	.short	0x1005
 8008bc4:	031b      	.short	0x031b
 8008bc6:	26          	.byte	0x26
 8008bc7:	00          	.byte	0x00
 8008bc8:	4890      	ldr	r0, [pc, #576]	@ (8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8008bca:	e2a4      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008bcc:	4b8e      	ldr	r3, [pc, #568]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008bce:	6818      	ldr	r0, [r3, #0]
 8008bd0:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8008bd4:	f000 829f 	beq.w	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008bd8:	a807      	add	r0, sp, #28
 8008bda:	f7ff fec5 	bl	8008968 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8008bde:	9808      	ldr	r0, [sp, #32]
 8008be0:	e299      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008be2:	4b89      	ldr	r3, [pc, #548]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008be4:	6818      	ldr	r0, [r3, #0]
 8008be6:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8008bea:	f000 8294 	beq.w	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bee:	a804      	add	r0, sp, #16
 8008bf0:	f7ff fcbe 	bl	8008570 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008bf4:	9804      	ldr	r0, [sp, #16]
 8008bf6:	e28e      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008bf8:	4b83      	ldr	r3, [pc, #524]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008bfa:	6818      	ldr	r0, [r3, #0]
 8008bfc:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8008c00:	f000 8289 	beq.w	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c04:	a801      	add	r0, sp, #4
 8008c06:	f7ff fdb1 	bl	800876c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008c0a:	9801      	ldr	r0, [sp, #4]
 8008c0c:	e283      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008c0e:	4a7e      	ldr	r2, [pc, #504]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008c10:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8008c12:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008c16:	6812      	ldr	r2, [r2, #0]
 8008c18:	f012 0f04 	tst.w	r2, #4
 8008c1c:	d007      	beq.n	8008c2e <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 8008c1e:	b933      	cbnz	r3, 8008c2e <HAL_RCCEx_GetPeriphCLKFreq+0xca>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008c20:	4b79      	ldr	r3, [pc, #484]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008c28:	4879      	ldr	r0, [pc, #484]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 8008c2a:	40d8      	lsrs	r0, r3
 8008c2c:	e273      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008c2e:	4a76      	ldr	r2, [pc, #472]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008c30:	6812      	ldr	r2, [r2, #0]
 8008c32:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8008c36:	d003      	beq.n	8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8008c38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c3c:	f000 8264 	beq.w	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c40:	4a71      	ldr	r2, [pc, #452]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008c42:	6812      	ldr	r2, [r2, #0]
 8008c44:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8008c48:	f000 8260 	beq.w	800910c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008c4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c50:	f000 825e 	beq.w	8009110 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>
            frequency = 0;
 8008c54:	2000      	movs	r0, #0
 8008c56:	e25e      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8008c58:	4b6b      	ldr	r3, [pc, #428]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008c5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c5c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
      switch (saiclocksource)
 8008c60:	2b80      	cmp	r3, #128	@ 0x80
 8008c62:	d033      	beq.n	8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8008c64:	d915      	bls.n	8008c92 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 8008c66:	2bc0      	cmp	r3, #192	@ 0xc0
 8008c68:	f000 8254 	beq.w	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 8008c6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c70:	d11f      	bne.n	8008cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x14e>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008c72:	4a65      	ldr	r2, [pc, #404]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008c74:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8008c76:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008c7a:	6812      	ldr	r2, [r2, #0]
 8008c7c:	f012 0f04 	tst.w	r2, #4
 8008c80:	d02f      	beq.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8008c82:	bb73      	cbnz	r3, 8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008c84:	4b60      	ldr	r3, [pc, #384]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008c8c:	4860      	ldr	r0, [pc, #384]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 8008c8e:	40d8      	lsrs	r0, r3
 8008c90:	e241      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (saiclocksource)
 8008c92:	b183      	cbz	r3, 8008cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8008c94:	2b40      	cmp	r3, #64	@ 0x40
 8008c96:	d10a      	bne.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c98:	4b5b      	ldr	r3, [pc, #364]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008c9a:	6818      	ldr	r0, [r3, #0]
 8008c9c:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8008ca0:	f000 8239 	beq.w	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ca4:	a804      	add	r0, sp, #16
 8008ca6:	f7ff fc63 	bl	8008570 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008caa:	9804      	ldr	r0, [sp, #16]
 8008cac:	e233      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = 0;
 8008cae:	2000      	movs	r0, #0
 8008cb0:	e231      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 8008cb2:	2000      	movs	r0, #0
 8008cb4:	e22f      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008cb6:	4b54      	ldr	r3, [pc, #336]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008cb8:	6818      	ldr	r0, [r3, #0]
 8008cba:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8008cbe:	f000 822a 	beq.w	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008cc2:	a807      	add	r0, sp, #28
 8008cc4:	f7ff fe50 	bl	8008968 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008cc8:	9808      	ldr	r0, [sp, #32]
 8008cca:	e224      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008ccc:	4b4e      	ldr	r3, [pc, #312]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008cce:	6818      	ldr	r0, [r3, #0]
 8008cd0:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8008cd4:	f000 821f 	beq.w	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cd8:	a801      	add	r0, sp, #4
 8008cda:	f7ff fd47 	bl	800876c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008cde:	9801      	ldr	r0, [sp, #4]
 8008ce0:	e219      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ce2:	4a49      	ldr	r2, [pc, #292]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008ce4:	6812      	ldr	r2, [r2, #0]
 8008ce6:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8008cea:	d003      	beq.n	8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8008cec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008cf0:	f000 8214 	beq.w	800911c <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008cf4:	4a44      	ldr	r2, [pc, #272]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008cf6:	6812      	ldr	r2, [r2, #0]
 8008cf8:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8008cfc:	f000 8210 	beq.w	8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
 8008d00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d04:	f000 820e 	beq.w	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
            frequency = 0;
 8008d08:	2000      	movs	r0, #0
 8008d0a:	e204      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008d0c:	4b3e      	ldr	r3, [pc, #248]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d10:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
      switch (saiclocksource)
 8008d14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008d18:	d035      	beq.n	8008d86 <HAL_RCCEx_GetPeriphCLKFreq+0x222>
 8008d1a:	d916      	bls.n	8008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008d1c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008d20:	f000 8202 	beq.w	8009128 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8008d24:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008d28:	d120      	bne.n	8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008d2a:	4a37      	ldr	r2, [pc, #220]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008d2c:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8008d2e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d32:	6812      	ldr	r2, [r2, #0]
 8008d34:	f012 0f04 	tst.w	r2, #4
 8008d38:	d030      	beq.n	8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 8008d3a:	bb7b      	cbnz	r3, 8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x238>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008d3c:	4b32      	ldr	r3, [pc, #200]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008d44:	4832      	ldr	r0, [pc, #200]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 8008d46:	40d8      	lsrs	r0, r3
 8008d48:	e1e5      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (saiclocksource)
 8008d4a:	b18b      	cbz	r3, 8008d70 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 8008d4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008d50:	d10a      	bne.n	8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d52:	4b2d      	ldr	r3, [pc, #180]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008d54:	6818      	ldr	r0, [r3, #0]
 8008d56:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8008d5a:	f000 81dc 	beq.w	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d5e:	a804      	add	r0, sp, #16
 8008d60:	f7ff fc06 	bl	8008570 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d64:	9804      	ldr	r0, [sp, #16]
 8008d66:	e1d6      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = 0;
 8008d68:	2000      	movs	r0, #0
 8008d6a:	e1d4      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 8008d6c:	2000      	movs	r0, #0
 8008d6e:	e1d2      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008d70:	4b25      	ldr	r3, [pc, #148]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008d72:	6818      	ldr	r0, [r3, #0]
 8008d74:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8008d78:	f000 81cd 	beq.w	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d7c:	a807      	add	r0, sp, #28
 8008d7e:	f7ff fdf3 	bl	8008968 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d82:	9808      	ldr	r0, [sp, #32]
 8008d84:	e1c7      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d86:	4b20      	ldr	r3, [pc, #128]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008d88:	6818      	ldr	r0, [r3, #0]
 8008d8a:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8008d8e:	f000 81c2 	beq.w	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d92:	a801      	add	r0, sp, #4
 8008d94:	f7ff fcea 	bl	800876c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008d98:	9801      	ldr	r0, [sp, #4]
 8008d9a:	e1bc      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d9c:	4a1a      	ldr	r2, [pc, #104]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008d9e:	6812      	ldr	r2, [r2, #0]
 8008da0:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8008da4:	d003      	beq.n	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
 8008da6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008daa:	f000 81bf 	beq.w	800912c <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008dae:	4a16      	ldr	r2, [pc, #88]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008db0:	6812      	ldr	r2, [r2, #0]
 8008db2:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8008db6:	f000 81bb 	beq.w	8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8008dba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008dbe:	f000 81b9 	beq.w	8009134 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>
            frequency = 0;
 8008dc2:	2000      	movs	r0, #0
 8008dc4:	e1a7      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008dc6:	4b10      	ldr	r3, [pc, #64]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dca:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
      switch (saiclocksource)
 8008dce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008dd2:	d03d      	beq.n	8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
 8008dd4:	d91e      	bls.n	8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>
 8008dd6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008dda:	f000 81ad 	beq.w	8009138 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8008dde:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008de2:	d128      	bne.n	8008e36 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008de4:	4a08      	ldr	r2, [pc, #32]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008de6:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8008de8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008dec:	6812      	ldr	r2, [r2, #0]
 8008dee:	f012 0f04 	tst.w	r2, #4
 8008df2:	d038      	beq.n	8008e66 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d136      	bne.n	8008e66 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008df8:	4b03      	ldr	r3, [pc, #12]	@ (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008e00:	4803      	ldr	r0, [pc, #12]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 8008e02:	40d8      	lsrs	r0, r3
 8008e04:	e187      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 8008e06:	bf00      	nop
 8008e08:	58024400 	.word	0x58024400
 8008e0c:	00bb8000 	.word	0x00bb8000
 8008e10:	03d09000 	.word	0x03d09000
      switch (saiclocksource)
 8008e14:	b18b      	cbz	r3, 8008e3a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8008e16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008e1a:	d10a      	bne.n	8008e32 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e1c:	4b99      	ldr	r3, [pc, #612]	@ (8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008e1e:	6818      	ldr	r0, [r3, #0]
 8008e20:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8008e24:	f000 8177 	beq.w	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e28:	a804      	add	r0, sp, #16
 8008e2a:	f7ff fba1 	bl	8008570 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e2e:	9804      	ldr	r0, [sp, #16]
 8008e30:	e171      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = 0;
 8008e32:	2000      	movs	r0, #0
 8008e34:	e16f      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 8008e36:	2000      	movs	r0, #0
 8008e38:	e16d      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e3a:	4b92      	ldr	r3, [pc, #584]	@ (8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008e3c:	6818      	ldr	r0, [r3, #0]
 8008e3e:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8008e42:	f000 8168 	beq.w	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e46:	a807      	add	r0, sp, #28
 8008e48:	f7ff fd8e 	bl	8008968 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e4c:	9808      	ldr	r0, [sp, #32]
 8008e4e:	e162      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e50:	4b8c      	ldr	r3, [pc, #560]	@ (8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008e52:	6818      	ldr	r0, [r3, #0]
 8008e54:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8008e58:	f000 815d 	beq.w	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e5c:	a801      	add	r0, sp, #4
 8008e5e:	f7ff fc85 	bl	800876c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008e62:	9801      	ldr	r0, [sp, #4]
 8008e64:	e157      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e66:	4a87      	ldr	r2, [pc, #540]	@ (8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008e68:	6812      	ldr	r2, [r2, #0]
 8008e6a:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8008e6e:	d003      	beq.n	8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8008e70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e74:	f000 8162 	beq.w	800913c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008e78:	4a82      	ldr	r2, [pc, #520]	@ (8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008e7a:	6812      	ldr	r2, [r2, #0]
 8008e7c:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8008e80:	f000 815e 	beq.w	8009140 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
 8008e84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e88:	f000 815c 	beq.w	8009144 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
            frequency = 0;
 8008e8c:	2000      	movs	r0, #0
 8008e8e:	e142      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008e90:	4b7c      	ldr	r3, [pc, #496]	@ (8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008e92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e94:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
      switch (srcclk)
 8008e98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e9c:	d035      	beq.n	8008f0a <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 8008e9e:	d916      	bls.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 8008ea0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008ea4:	f000 8150 	beq.w	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8008ea8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008eac:	d120      	bne.n	8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008eae:	4a75      	ldr	r2, [pc, #468]	@ (8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008eb0:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8008eb2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008eb6:	6812      	ldr	r2, [r2, #0]
 8008eb8:	f012 0f04 	tst.w	r2, #4
 8008ebc:	d030      	beq.n	8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8008ebe:	bb7b      	cbnz	r3, 8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008ec0:	4b70      	ldr	r3, [pc, #448]	@ (8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008ec8:	486f      	ldr	r0, [pc, #444]	@ (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008eca:	40d8      	lsrs	r0, r3
 8008ecc:	e123      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (srcclk)
 8008ece:	b18b      	cbz	r3, 8008ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8008ed0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ed4:	d10a      	bne.n	8008eec <HAL_RCCEx_GetPeriphCLKFreq+0x388>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ed6:	4b6b      	ldr	r3, [pc, #428]	@ (8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008ed8:	6818      	ldr	r0, [r3, #0]
 8008eda:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8008ede:	f000 811a 	beq.w	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ee2:	a804      	add	r0, sp, #16
 8008ee4:	f7ff fb44 	bl	8008570 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008ee8:	9804      	ldr	r0, [sp, #16]
 8008eea:	e114      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = 0;
 8008eec:	2000      	movs	r0, #0
 8008eee:	e112      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 8008ef0:	2000      	movs	r0, #0
 8008ef2:	e110      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008ef4:	4b63      	ldr	r3, [pc, #396]	@ (8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008ef6:	6818      	ldr	r0, [r3, #0]
 8008ef8:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8008efc:	f000 810b 	beq.w	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f00:	a807      	add	r0, sp, #28
 8008f02:	f7ff fd31 	bl	8008968 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f06:	9808      	ldr	r0, [sp, #32]
 8008f08:	e105      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f0a:	4b5e      	ldr	r3, [pc, #376]	@ (8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008f0c:	6818      	ldr	r0, [r3, #0]
 8008f0e:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8008f12:	f000 8100 	beq.w	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f16:	a801      	add	r0, sp, #4
 8008f18:	f7ff fc28 	bl	800876c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008f1c:	9801      	ldr	r0, [sp, #4]
 8008f1e:	e0fa      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f20:	4a58      	ldr	r2, [pc, #352]	@ (8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008f22:	6812      	ldr	r2, [r2, #0]
 8008f24:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8008f28:	d003      	beq.n	8008f32 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8008f2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f2e:	f000 810d 	beq.w	800914c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f32:	4a54      	ldr	r2, [pc, #336]	@ (8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008f34:	6812      	ldr	r2, [r2, #0]
 8008f36:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8008f3a:	f000 8109 	beq.w	8009150 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
 8008f3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f42:	f000 8107 	beq.w	8009154 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
            frequency = 0;
 8008f46:	2000      	movs	r0, #0
 8008f48:	e0e5      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008f4a:	4b4e      	ldr	r3, [pc, #312]	@ (8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f4e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
      switch (srcclk)
 8008f52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f56:	d010      	beq.n	8008f7a <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 8008f58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f5c:	d018      	beq.n	8008f90 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
 8008f5e:	b10b      	cbz	r3, 8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x400>
 8008f60:	2000      	movs	r0, #0
 8008f62:	e0d8      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f64:	4b47      	ldr	r3, [pc, #284]	@ (8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008f66:	6818      	ldr	r0, [r3, #0]
 8008f68:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8008f6c:	f000 80d3 	beq.w	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f70:	a804      	add	r0, sp, #16
 8008f72:	f7ff fafd 	bl	8008570 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f76:	9804      	ldr	r0, [sp, #16]
 8008f78:	e0cd      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f7a:	4b42      	ldr	r3, [pc, #264]	@ (8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008f7c:	6818      	ldr	r0, [r3, #0]
 8008f7e:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8008f82:	f000 80c8 	beq.w	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f86:	a801      	add	r0, sp, #4
 8008f88:	f7ff fbf0 	bl	800876c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008f8c:	9803      	ldr	r0, [sp, #12]
 8008f8e:	e0c2      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008f90:	4a3c      	ldr	r2, [pc, #240]	@ (8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008f92:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8008f94:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f98:	6812      	ldr	r2, [r2, #0]
 8008f9a:	f012 0f04 	tst.w	r2, #4
 8008f9e:	d007      	beq.n	8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
 8008fa0:	b933      	cbnz	r3, 8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008fa2:	4b38      	ldr	r3, [pc, #224]	@ (8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008faa:	4837      	ldr	r0, [pc, #220]	@ (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008fac:	40d8      	lsrs	r0, r3
 8008fae:	e0b2      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008fb0:	4a34      	ldr	r2, [pc, #208]	@ (8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008fb2:	6812      	ldr	r2, [r2, #0]
 8008fb4:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8008fb8:	d003      	beq.n	8008fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
 8008fba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008fbe:	f000 80cb 	beq.w	8009158 <HAL_RCCEx_GetPeriphCLKFreq+0x5f4>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008fc2:	4a30      	ldr	r2, [pc, #192]	@ (8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008fc4:	6812      	ldr	r2, [r2, #0]
 8008fc6:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8008fca:	f000 80c7 	beq.w	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
 8008fce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008fd2:	f000 80c5 	beq.w	8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
            frequency = 0;
 8008fd6:	2000      	movs	r0, #0
 8008fd8:	e09d      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008fda:	4b2a      	ldr	r3, [pc, #168]	@ (8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      switch (srcclk)
 8008fde:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 8008fe2:	d002      	beq.n	8008fea <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 8008fe4:	b963      	cbnz	r3, 8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x49c>
 8008fe6:	2000      	movs	r0, #0
 8008fe8:	e095      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008fea:	4b26      	ldr	r3, [pc, #152]	@ (8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008fec:	6818      	ldr	r0, [r3, #0]
 8008fee:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8008ff2:	f000 8090 	beq.w	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ff6:	a807      	add	r0, sp, #28
 8008ff8:	f7ff fcb6 	bl	8008968 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ffc:	9808      	ldr	r0, [sp, #32]
 8008ffe:	e08a      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009000:	4b20      	ldr	r3, [pc, #128]	@ (8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8009002:	6818      	ldr	r0, [r3, #0]
 8009004:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8009008:	f000 8085 	beq.w	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800900c:	a804      	add	r0, sp, #16
 800900e:	f7ff faaf 	bl	8008570 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009012:	9806      	ldr	r0, [sp, #24]
 8009014:	e07f      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8009016:	4b1b      	ldr	r3, [pc, #108]	@ (8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8009018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800901a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
      switch (srcclk)
 800901e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009022:	d035      	beq.n	8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
 8009024:	d815      	bhi.n	8009052 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 8009026:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800902a:	d021      	beq.n	8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
 800902c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009030:	d109      	bne.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009032:	4b14      	ldr	r3, [pc, #80]	@ (8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8009034:	6818      	ldr	r0, [r3, #0]
 8009036:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800903a:	d06c      	beq.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800903c:	a801      	add	r0, sp, #4
 800903e:	f7ff fb95 	bl	800876c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009042:	9802      	ldr	r0, [sp, #8]
 8009044:	e067      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (srcclk)
 8009046:	b913      	cbnz	r3, 800904e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009048:	f7ff fa80 	bl	800854c <HAL_RCCEx_GetD3PCLK1Freq>
          break;
 800904c:	e063      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (srcclk)
 800904e:	2000      	movs	r0, #0
 8009050:	e061      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 8009052:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009056:	d026      	beq.n	80090a6 <HAL_RCCEx_GetPeriphCLKFreq+0x542>
 8009058:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800905c:	d106      	bne.n	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x508>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800905e:	4b09      	ldr	r3, [pc, #36]	@ (8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8009060:	6818      	ldr	r0, [r3, #0]
 8009062:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8009066:	d056      	beq.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = HSE_VALUE;
 8009068:	4808      	ldr	r0, [pc, #32]	@ (800908c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800906a:	e054      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (srcclk)
 800906c:	2000      	movs	r0, #0
 800906e:	e052      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009070:	4b04      	ldr	r3, [pc, #16]	@ (8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8009072:	6818      	ldr	r0, [r3, #0]
 8009074:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8009078:	d04d      	beq.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800907a:	a804      	add	r0, sp, #16
 800907c:	f7ff fa78 	bl	8008570 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009080:	9805      	ldr	r0, [sp, #20]
 8009082:	e048      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 8009084:	58024400 	.word	0x58024400
 8009088:	03d09000 	.word	0x03d09000
 800908c:	016e3600 	.word	0x016e3600
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009090:	4b34      	ldr	r3, [pc, #208]	@ (8009164 <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 8009092:	6818      	ldr	r0, [r3, #0]
 8009094:	f010 0004 	ands.w	r0, r0, #4
 8009098:	d03d      	beq.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80090a0:	4831      	ldr	r0, [pc, #196]	@ (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 80090a2:	40d8      	lsrs	r0, r3
 80090a4:	e037      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80090a6:	4b2f      	ldr	r3, [pc, #188]	@ (8009164 <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 80090a8:	6818      	ldr	r0, [r3, #0]
 80090aa:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 80090ae:	d032      	beq.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = CSI_VALUE;
 80090b0:	482e      	ldr	r0, [pc, #184]	@ (800916c <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 80090b2:	e030      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80090b4:	4b2b      	ldr	r3, [pc, #172]	@ (8009164 <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 80090b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090b8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
      switch (srcclk)
 80090bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80090c0:	d00c      	beq.n	80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80090c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090c6:	d013      	beq.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>
 80090c8:	b10b      	cbz	r3, 80090ce <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 80090ca:	2000      	movs	r0, #0
  return frequency;
 80090cc:	e023      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80090ce:	4b25      	ldr	r3, [pc, #148]	@ (8009164 <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 80090d0:	6818      	ldr	r0, [r3, #0]
 80090d2:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 80090d6:	d01e      	beq.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = HSE_VALUE;
 80090d8:	4825      	ldr	r0, [pc, #148]	@ (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 80090da:	e01c      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80090dc:	4b21      	ldr	r3, [pc, #132]	@ (8009164 <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 80090de:	6818      	ldr	r0, [r3, #0]
 80090e0:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 80090e4:	d017      	beq.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80090e6:	a807      	add	r0, sp, #28
 80090e8:	f7ff fc3e 	bl	8008968 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80090ec:	9808      	ldr	r0, [sp, #32]
 80090ee:	e012      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80090f0:	4b1c      	ldr	r3, [pc, #112]	@ (8009164 <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 80090f2:	6818      	ldr	r0, [r3, #0]
 80090f4:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 80090f8:	d00d      	beq.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090fa:	a804      	add	r0, sp, #16
 80090fc:	f7ff fa38 	bl	8008570 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009100:	9805      	ldr	r0, [sp, #20]
 8009102:	e008      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = 0;
 8009104:	2000      	movs	r0, #0
 8009106:	e006      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = CSI_VALUE;
 8009108:	4818      	ldr	r0, [pc, #96]	@ (800916c <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 800910a:	e004      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = 0;
 800910c:	2000      	movs	r0, #0
 800910e:	e002      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = HSE_VALUE;
 8009110:	4817      	ldr	r0, [pc, #92]	@ (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 8009112:	e000      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (saiclocksource)
 8009114:	4817      	ldr	r0, [pc, #92]	@ (8009174 <HAL_RCCEx_GetPeriphCLKFreq+0x610>)
}
 8009116:	b00b      	add	sp, #44	@ 0x2c
 8009118:	f85d fb04 	ldr.w	pc, [sp], #4
            frequency = CSI_VALUE;
 800911c:	4813      	ldr	r0, [pc, #76]	@ (800916c <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 800911e:	e7fa      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = 0;
 8009120:	2000      	movs	r0, #0
 8009122:	e7f8      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = HSE_VALUE;
 8009124:	4812      	ldr	r0, [pc, #72]	@ (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 8009126:	e7f6      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (saiclocksource)
 8009128:	4812      	ldr	r0, [pc, #72]	@ (8009174 <HAL_RCCEx_GetPeriphCLKFreq+0x610>)
 800912a:	e7f4      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = CSI_VALUE;
 800912c:	480f      	ldr	r0, [pc, #60]	@ (800916c <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 800912e:	e7f2      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = 0;
 8009130:	2000      	movs	r0, #0
 8009132:	e7f0      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = HSE_VALUE;
 8009134:	480e      	ldr	r0, [pc, #56]	@ (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 8009136:	e7ee      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (saiclocksource)
 8009138:	480e      	ldr	r0, [pc, #56]	@ (8009174 <HAL_RCCEx_GetPeriphCLKFreq+0x610>)
 800913a:	e7ec      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = CSI_VALUE;
 800913c:	480b      	ldr	r0, [pc, #44]	@ (800916c <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 800913e:	e7ea      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = 0;
 8009140:	2000      	movs	r0, #0
 8009142:	e7e8      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = HSE_VALUE;
 8009144:	480a      	ldr	r0, [pc, #40]	@ (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 8009146:	e7e6      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (srcclk)
 8009148:	480a      	ldr	r0, [pc, #40]	@ (8009174 <HAL_RCCEx_GetPeriphCLKFreq+0x610>)
 800914a:	e7e4      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = CSI_VALUE;
 800914c:	4807      	ldr	r0, [pc, #28]	@ (800916c <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 800914e:	e7e2      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = 0;
 8009150:	2000      	movs	r0, #0
 8009152:	e7e0      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = HSE_VALUE;
 8009154:	4806      	ldr	r0, [pc, #24]	@ (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 8009156:	e7de      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = CSI_VALUE;
 8009158:	4804      	ldr	r0, [pc, #16]	@ (800916c <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 800915a:	e7dc      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = 0;
 800915c:	2000      	movs	r0, #0
 800915e:	e7da      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = HSE_VALUE;
 8009160:	4803      	ldr	r0, [pc, #12]	@ (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 8009162:	e7d8      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 8009164:	58024400 	.word	0x58024400
 8009168:	03d09000 	.word	0x03d09000
 800916c:	003d0900 	.word	0x003d0900
 8009170:	016e3600 	.word	0x016e3600
 8009174:	00bb8000 	.word	0x00bb8000

08009178 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009178:	b570      	push	{r4, r5, r6, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 800917e:	2300      	movs	r3, #0
 8009180:	9301      	str	r3, [sp, #4]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009182:	6800      	ldr	r0, [r0, #0]
 8009184:	f002 fde4 	bl	800bd50 <SDMMC_CmdGoIdleState>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009188:	4605      	mov	r5, r0
 800918a:	b110      	cbz	r0, 8009192 <SD_PowerON+0x1a>
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
}
 800918c:	4628      	mov	r0, r5
 800918e:	b002      	add	sp, #8
 8009190:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009192:	6820      	ldr	r0, [r4, #0]
 8009194:	f003 f8b4 	bl	800c300 <SDMMC_CmdOperCond>
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8009198:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 800919c:	d007      	beq.n	80091ae <SD_PowerON+0x36>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800919e:	2301      	movs	r3, #1
 80091a0:	63e3      	str	r3, [r4, #60]	@ 0x3c
  if (hsd->SdCard.CardVersion == CARD_V2_X)
 80091a2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	d00b      	beq.n	80091c0 <SD_PowerON+0x48>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80091a8:	462e      	mov	r6, r5
 80091aa:	4628      	mov	r0, r5
 80091ac:	e014      	b.n	80091d8 <SD_PowerON+0x60>
    hsd->SdCard.CardVersion = CARD_V1_X;
 80091ae:	2300      	movs	r3, #0
 80091b0:	63e3      	str	r3, [r4, #60]	@ 0x3c
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80091b2:	6820      	ldr	r0, [r4, #0]
 80091b4:	f002 fdcc 	bl	800bd50 <SDMMC_CmdGoIdleState>
    if (errorstate != HAL_SD_ERROR_NONE)
 80091b8:	2800      	cmp	r0, #0
 80091ba:	d0f2      	beq.n	80091a2 <SD_PowerON+0x2a>
      return errorstate;
 80091bc:	4605      	mov	r5, r0
 80091be:	e7e5      	b.n	800918c <SD_PowerON+0x14>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80091c0:	2100      	movs	r1, #0
 80091c2:	6820      	ldr	r0, [r4, #0]
 80091c4:	f002 fee7 	bl	800bf96 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 80091c8:	2800      	cmp	r0, #0
 80091ca:	d0ed      	beq.n	80091a8 <SD_PowerON+0x30>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80091cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80091d0:	e7dc      	b.n	800918c <SD_PowerON+0x14>
    count++;
 80091d2:	9b01      	ldr	r3, [sp, #4]
 80091d4:	3301      	adds	r3, #1
 80091d6:	9301      	str	r3, [sp, #4]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80091d8:	9a01      	ldr	r2, [sp, #4]
 80091da:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 80091de:	429a      	cmp	r2, r3
 80091e0:	d813      	bhi.n	800920a <SD_PowerON+0x92>
 80091e2:	b996      	cbnz	r6, 800920a <SD_PowerON+0x92>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80091e4:	2100      	movs	r1, #0
 80091e6:	6820      	ldr	r0, [r4, #0]
 80091e8:	f002 fed5 	bl	800bf96 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 80091ec:	b9d0      	cbnz	r0, 8009224 <SD_PowerON+0xac>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 80091ee:	4912      	ldr	r1, [pc, #72]	@ (8009238 <SD_PowerON+0xc0>)
 80091f0:	6820      	ldr	r0, [r4, #0]
 80091f2:	f002 ffd1 	bl	800c198 <SDMMC_CmdAppOperCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 80091f6:	4606      	mov	r6, r0
 80091f8:	b9b0      	cbnz	r0, 8009228 <SD_PowerON+0xb0>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80091fa:	2100      	movs	r1, #0
 80091fc:	6820      	ldr	r0, [r4, #0]
 80091fe:	f002 fd92 	bl	800bd26 <SDMMC_GetResponse>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009202:	0fc3      	lsrs	r3, r0, #31
 8009204:	d0e5      	beq.n	80091d2 <SD_PowerON+0x5a>
 8009206:	461e      	mov	r6, r3
 8009208:	e7e3      	b.n	80091d2 <SD_PowerON+0x5a>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800920a:	9a01      	ldr	r2, [sp, #4]
 800920c:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8009210:	429a      	cmp	r2, r3
 8009212:	d80c      	bhi.n	800922e <SD_PowerON+0xb6>
  hsd->SdCard.CardType = CARD_SDSC;
 8009214:	2300      	movs	r3, #0
 8009216:	63a3      	str	r3, [r4, #56]	@ 0x38
  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8009218:	f010 4380 	ands.w	r3, r0, #1073741824	@ 0x40000000
 800921c:	d00a      	beq.n	8009234 <SD_PowerON+0xbc>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800921e:	2301      	movs	r3, #1
 8009220:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009222:	e7b3      	b.n	800918c <SD_PowerON+0x14>
      return errorstate;
 8009224:	4605      	mov	r5, r0
 8009226:	e7b1      	b.n	800918c <SD_PowerON+0x14>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009228:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800922c:	e7ae      	b.n	800918c <SD_PowerON+0x14>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800922e:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
 8009232:	e7ab      	b.n	800918c <SD_PowerON+0x14>
  return HAL_SD_ERROR_NONE;
 8009234:	461d      	mov	r5, r3
 8009236:	e7a9      	b.n	800918c <SD_PowerON+0x14>
 8009238:	c1100000 	.word	0xc1100000

0800923c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800923c:	b570      	push	{r4, r5, r6, lr}
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800923e:	6a44      	ldr	r4, [r0, #36]	@ 0x24

  if (hsd->RxXferSize >= 32U)
 8009240:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8009242:	2b1f      	cmp	r3, #31
 8009244:	d815      	bhi.n	8009272 <SD_Read_IT+0x36>
    }

    hsd->pRxBuffPtr = tmp;
    hsd->RxXferSize -= 32U;
  }
}
 8009246:	bd70      	pop	{r4, r5, r6, pc}
      data = SDMMC_ReadFIFO(hsd->Instance);
 8009248:	6830      	ldr	r0, [r6, #0]
 800924a:	f002 fd45 	bl	800bcd8 <SDMMC_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 800924e:	7020      	strb	r0, [r4, #0]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009250:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8009254:	7063      	strb	r3, [r4, #1]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8009256:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800925a:	70a3      	strb	r3, [r4, #2]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800925c:	0e00      	lsrs	r0, r0, #24
 800925e:	70e0      	strb	r0, [r4, #3]
      tmp++;
 8009260:	3404      	adds	r4, #4
    for (count = 0U; count < 8U; count++)
 8009262:	3501      	adds	r5, #1
 8009264:	2d07      	cmp	r5, #7
 8009266:	d9ef      	bls.n	8009248 <SD_Read_IT+0xc>
    hsd->pRxBuffPtr = tmp;
 8009268:	6274      	str	r4, [r6, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 800926a:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 800926c:	3b20      	subs	r3, #32
 800926e:	62b3      	str	r3, [r6, #40]	@ 0x28
}
 8009270:	e7e9      	b.n	8009246 <SD_Read_IT+0xa>
 8009272:	4606      	mov	r6, r0
    for (count = 0U; count < 8U; count++)
 8009274:	2500      	movs	r5, #0
 8009276:	e7f5      	b.n	8009264 <SD_Read_IT+0x28>

08009278 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009278:	b570      	push	{r4, r5, r6, lr}
 800927a:	b082      	sub	sp, #8
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800927c:	69c4      	ldr	r4, [r0, #28]

  if (hsd->TxXferSize >= 32U)
 800927e:	6a03      	ldr	r3, [r0, #32]
 8009280:	2b1f      	cmp	r3, #31
 8009282:	d81c      	bhi.n	80092be <SD_Write_IT+0x46>
    }

    hsd->pTxBuffPtr = tmp;
    hsd->TxXferSize -= 32U;
  }
}
 8009284:	b002      	add	sp, #8
 8009286:	bd70      	pop	{r4, r5, r6, pc}
      data = (uint32_t)(*tmp);
 8009288:	7823      	ldrb	r3, [r4, #0]
 800928a:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 800928c:	7862      	ldrb	r2, [r4, #1]
 800928e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009292:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 8009294:	78a2      	ldrb	r2, [r4, #2]
 8009296:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800929a:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 800929c:	78e2      	ldrb	r2, [r4, #3]
 800929e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80092a2:	9301      	str	r3, [sp, #4]
      tmp++;
 80092a4:	3404      	adds	r4, #4
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80092a6:	a901      	add	r1, sp, #4
 80092a8:	6830      	ldr	r0, [r6, #0]
 80092aa:	f002 fd18 	bl	800bcde <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 80092ae:	3501      	adds	r5, #1
 80092b0:	2d07      	cmp	r5, #7
 80092b2:	d9e9      	bls.n	8009288 <SD_Write_IT+0x10>
    hsd->pTxBuffPtr = tmp;
 80092b4:	61f4      	str	r4, [r6, #28]
    hsd->TxXferSize -= 32U;
 80092b6:	6a33      	ldr	r3, [r6, #32]
 80092b8:	3b20      	subs	r3, #32
 80092ba:	6233      	str	r3, [r6, #32]
}
 80092bc:	e7e2      	b.n	8009284 <SD_Write_IT+0xc>
 80092be:	4606      	mov	r6, r0
    for (count = 0U; count < 8U; count++)
 80092c0:	2500      	movs	r5, #0
 80092c2:	e7f5      	b.n	80092b0 <SD_Write_IT+0x38>

080092c4 <SD_SendSDStatus>:
{
 80092c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092c6:	b087      	sub	sp, #28
 80092c8:	4605      	mov	r5, r0
 80092ca:	460e      	mov	r6, r1
  uint32_t tickstart = HAL_GetTick();
 80092cc:	f7fa f8d6 	bl	800347c <HAL_GetTick>
 80092d0:	4607      	mov	r7, r0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80092d2:	2100      	movs	r1, #0
 80092d4:	6828      	ldr	r0, [r5, #0]
 80092d6:	f002 fd26 	bl	800bd26 <SDMMC_GetResponse>
 80092da:	f010 7f00 	tst.w	r0, #33554432	@ 0x2000000
 80092de:	d164      	bne.n	80093aa <SD_SendSDStatus+0xe6>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80092e0:	2140      	movs	r1, #64	@ 0x40
 80092e2:	6828      	ldr	r0, [r5, #0]
 80092e4:	f002 fdf8 	bl	800bed8 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 80092e8:	4603      	mov	r3, r0
 80092ea:	b110      	cbz	r0, 80092f2 <SD_SendSDStatus+0x2e>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80092ec:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 80092ee:	636a      	str	r2, [r5, #52]	@ 0x34
    return errorstate;
 80092f0:	e05d      	b.n	80093ae <SD_SendSDStatus+0xea>
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80092f2:	6c69      	ldr	r1, [r5, #68]	@ 0x44
 80092f4:	0409      	lsls	r1, r1, #16
 80092f6:	6828      	ldr	r0, [r5, #0]
 80092f8:	f002 fe4d 	bl	800bf96 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 80092fc:	4603      	mov	r3, r0
 80092fe:	b110      	cbz	r0, 8009306 <SD_SendSDStatus+0x42>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009300:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8009302:	636a      	str	r2, [r5, #52]	@ 0x34
    return errorstate;
 8009304:	e053      	b.n	80093ae <SD_SendSDStatus+0xea>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009306:	f04f 33ff 	mov.w	r3, #4294967295
 800930a:	9300      	str	r3, [sp, #0]
  config.DataLength    = 64U;
 800930c:	2340      	movs	r3, #64	@ 0x40
 800930e:	9301      	str	r3, [sp, #4]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8009310:	2360      	movs	r3, #96	@ 0x60
 8009312:	9302      	str	r3, [sp, #8]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009314:	2302      	movs	r3, #2
 8009316:	9303      	str	r3, [sp, #12]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009318:	2300      	movs	r3, #0
 800931a:	9304      	str	r3, [sp, #16]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800931c:	2301      	movs	r3, #1
 800931e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009320:	4669      	mov	r1, sp
 8009322:	6828      	ldr	r0, [r5, #0]
 8009324:	f002 fd02 	bl	800bd2c <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009328:	6828      	ldr	r0, [r5, #0]
 800932a:	f002 fe98 	bl	800c05e <SDMMC_CmdStatusRegister>
  if (errorstate != HAL_SD_ERROR_NONE)
 800932e:	4603      	mov	r3, r0
 8009330:	b180      	cbz	r0, 8009354 <SD_SendSDStatus+0x90>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009332:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8009334:	636a      	str	r2, [r5, #52]	@ 0x34
    return errorstate;
 8009336:	e03a      	b.n	80093ae <SD_SendSDStatus+0xea>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009338:	6828      	ldr	r0, [r5, #0]
 800933a:	f002 fccd 	bl	800bcd8 <SDMMC_ReadFIFO>
 800933e:	f846 0b04 	str.w	r0, [r6], #4
      for (count = 0U; count < 8U; count++)
 8009342:	3401      	adds	r4, #1
 8009344:	2c07      	cmp	r4, #7
 8009346:	d9f7      	bls.n	8009338 <SD_SendSDStatus+0x74>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009348:	f7fa f898 	bl	800347c <HAL_GetTick>
 800934c:	1bc0      	subs	r0, r0, r7
 800934e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009352:	d02f      	beq.n	80093b4 <SD_SendSDStatus+0xf0>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009354:	682b      	ldr	r3, [r5, #0]
 8009356:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8009358:	f414 7495 	ands.w	r4, r4, #298	@ 0x12a
 800935c:	d104      	bne.n	8009368 <SD_SendSDStatus+0xa4>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800935e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009360:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8009364:	d0f0      	beq.n	8009348 <SD_SendSDStatus+0x84>
 8009366:	e7ed      	b.n	8009344 <SD_SendSDStatus+0x80>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009368:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800936a:	f012 0f08 	tst.w	r2, #8
 800936e:	d124      	bne.n	80093ba <SD_SendSDStatus+0xf6>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009370:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009372:	f012 0f02 	tst.w	r2, #2
 8009376:	d122      	bne.n	80093be <SD_SendSDStatus+0xfa>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009378:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800937a:	f013 0f20 	tst.w	r3, #32
 800937e:	d120      	bne.n	80093c2 <SD_SendSDStatus+0xfe>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009380:	6828      	ldr	r0, [r5, #0]
 8009382:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8009384:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 8009388:	d00c      	beq.n	80093a4 <SD_SendSDStatus+0xe0>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800938a:	f002 fca5 	bl	800bcd8 <SDMMC_ReadFIFO>
 800938e:	f846 0b04 	str.w	r0, [r6], #4
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009392:	f7fa f873 	bl	800347c <HAL_GetTick>
 8009396:	1bc0      	subs	r0, r0, r7
 8009398:	f1b0 3fff 	cmp.w	r0, #4294967295
 800939c:	d1f0      	bne.n	8009380 <SD_SendSDStatus+0xbc>
      return HAL_SD_ERROR_TIMEOUT;
 800939e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80093a2:	e004      	b.n	80093ae <SD_SendSDStatus+0xea>
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80093a4:	4a08      	ldr	r2, [pc, #32]	@ (80093c8 <SD_SendSDStatus+0x104>)
 80093a6:	6382      	str	r2, [r0, #56]	@ 0x38
  return HAL_SD_ERROR_NONE;
 80093a8:	e001      	b.n	80093ae <SD_SendSDStatus+0xea>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80093aa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	b007      	add	sp, #28
 80093b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_SD_ERROR_TIMEOUT;
 80093b4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80093b8:	e7f9      	b.n	80093ae <SD_SendSDStatus+0xea>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80093ba:	2308      	movs	r3, #8
 80093bc:	e7f7      	b.n	80093ae <SD_SendSDStatus+0xea>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80093be:	2302      	movs	r3, #2
 80093c0:	e7f5      	b.n	80093ae <SD_SendSDStatus+0xea>
    return HAL_SD_ERROR_RX_OVERRUN;
 80093c2:	2320      	movs	r3, #32
 80093c4:	e7f3      	b.n	80093ae <SD_SendSDStatus+0xea>
 80093c6:	bf00      	nop
 80093c8:	18000f3a 	.word	0x18000f3a

080093cc <SD_FindSCR>:
{
 80093cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093ce:	b089      	sub	sp, #36	@ 0x24
 80093d0:	4604      	mov	r4, r0
 80093d2:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 80093d4:	f7fa f852 	bl	800347c <HAL_GetTick>
 80093d8:	4605      	mov	r5, r0
  uint32_t tempscr[2U] = {0UL, 0UL};
 80093da:	2300      	movs	r3, #0
 80093dc:	9300      	str	r3, [sp, #0]
 80093de:	9301      	str	r3, [sp, #4]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80093e0:	2108      	movs	r1, #8
 80093e2:	6820      	ldr	r0, [r4, #0]
 80093e4:	f002 fd78 	bl	800bed8 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 80093e8:	4606      	mov	r6, r0
 80093ea:	b110      	cbz	r0, 80093f2 <SD_FindSCR+0x26>
}
 80093ec:	4630      	mov	r0, r6
 80093ee:	b009      	add	sp, #36	@ 0x24
 80093f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80093f2:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80093f4:	0409      	lsls	r1, r1, #16
 80093f6:	6820      	ldr	r0, [r4, #0]
 80093f8:	f002 fdcd 	bl	800bf96 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 80093fc:	4606      	mov	r6, r0
 80093fe:	2800      	cmp	r0, #0
 8009400:	d1f4      	bne.n	80093ec <SD_FindSCR+0x20>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009402:	f04f 33ff 	mov.w	r3, #4294967295
 8009406:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 8009408:	2308      	movs	r3, #8
 800940a:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800940c:	2330      	movs	r3, #48	@ 0x30
 800940e:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009410:	2302      	movs	r3, #2
 8009412:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009414:	2300      	movs	r3, #0
 8009416:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009418:	2301      	movs	r3, #1
 800941a:	9307      	str	r3, [sp, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800941c:	a902      	add	r1, sp, #8
 800941e:	6820      	ldr	r0, [r4, #0]
 8009420:	f002 fc84 	bl	800bd2c <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009424:	6820      	ldr	r0, [r4, #0]
 8009426:	f002 fde8 	bl	800bffa <SDMMC_CmdSendSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 800942a:	4606      	mov	r6, r0
 800942c:	b130      	cbz	r0, 800943c <SD_FindSCR+0x70>
 800942e:	e7dd      	b.n	80093ec <SD_FindSCR+0x20>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009430:	f7fa f824 	bl	800347c <HAL_GetTick>
 8009434:	1b43      	subs	r3, r0, r5
 8009436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800943a:	d046      	beq.n	80094ca <SD_FindSCR+0xfe>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800943c:	6820      	ldr	r0, [r4, #0]
 800943e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8009440:	f240 532a 	movw	r3, #1322	@ 0x52a
 8009444:	421a      	tst	r2, r3
 8009446:	d10e      	bne.n	8009466 <SD_FindSCR+0x9a>
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009448:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800944a:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 800944e:	d1ef      	bne.n	8009430 <SD_FindSCR+0x64>
 8009450:	2e00      	cmp	r6, #0
 8009452:	d1ed      	bne.n	8009430 <SD_FindSCR+0x64>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8009454:	f002 fc40 	bl	800bcd8 <SDMMC_ReadFIFO>
 8009458:	9000      	str	r0, [sp, #0]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800945a:	6820      	ldr	r0, [r4, #0]
 800945c:	f002 fc3c 	bl	800bcd8 <SDMMC_ReadFIFO>
 8009460:	9001      	str	r0, [sp, #4]
      index++;
 8009462:	3601      	adds	r6, #1
 8009464:	e7e4      	b.n	8009430 <SD_FindSCR+0x64>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009466:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8009468:	f013 0f08 	tst.w	r3, #8
 800946c:	d124      	bne.n	80094b8 <SD_FindSCR+0xec>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800946e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8009470:	f013 0f02 	tst.w	r3, #2
 8009474:	d123      	bne.n	80094be <SD_FindSCR+0xf2>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009476:	6b46      	ldr	r6, [r0, #52]	@ 0x34
 8009478:	f016 0620 	ands.w	r6, r6, #32
 800947c:	d122      	bne.n	80094c4 <SD_FindSCR+0xf8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800947e:	4b14      	ldr	r3, [pc, #80]	@ (80094d0 <SD_FindSCR+0x104>)
 8009480:	6383      	str	r3, [r0, #56]	@ 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009482:	9a01      	ldr	r2, [sp, #4]
 8009484:	0213      	lsls	r3, r2, #8
 8009486:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800948a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800948e:	0a11      	lsrs	r1, r2, #8
 8009490:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009494:	430b      	orrs	r3, r1
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009496:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800949a:	603b      	str	r3, [r7, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800949c:	9a00      	ldr	r2, [sp, #0]
 800949e:	0213      	lsls	r3, r2, #8
 80094a0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80094a4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80094a8:	0a11      	lsrs	r1, r2, #8
 80094aa:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80094ae:	430b      	orrs	r3, r1
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80094b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80094b4:	607b      	str	r3, [r7, #4]
  return HAL_SD_ERROR_NONE;
 80094b6:	e799      	b.n	80093ec <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80094b8:	2608      	movs	r6, #8
 80094ba:	6386      	str	r6, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80094bc:	e796      	b.n	80093ec <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80094be:	2602      	movs	r6, #2
 80094c0:	6386      	str	r6, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80094c2:	e793      	b.n	80093ec <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80094c4:	2620      	movs	r6, #32
 80094c6:	6386      	str	r6, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 80094c8:	e790      	b.n	80093ec <SD_FindSCR+0x20>
      return HAL_SD_ERROR_TIMEOUT;
 80094ca:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
 80094ce:	e78d      	b.n	80093ec <SD_FindSCR+0x20>
 80094d0:	18000f3a 	.word	0x18000f3a

080094d4 <SD_WideBus_Enable>:
{
 80094d4:	b510      	push	{r4, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0UL, 0UL};
 80094da:	2100      	movs	r1, #0
 80094dc:	9100      	str	r1, [sp, #0]
 80094de:	9101      	str	r1, [sp, #4]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80094e0:	6800      	ldr	r0, [r0, #0]
 80094e2:	f002 fc20 	bl	800bd26 <SDMMC_GetResponse>
 80094e6:	f010 7f00 	tst.w	r0, #33554432	@ 0x2000000
 80094ea:	d113      	bne.n	8009514 <SD_WideBus_Enable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 80094ec:	4669      	mov	r1, sp
 80094ee:	4620      	mov	r0, r4
 80094f0:	f7ff ff6c 	bl	80093cc <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 80094f4:	b980      	cbnz	r0, 8009518 <SD_WideBus_Enable+0x44>
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80094f6:	9b01      	ldr	r3, [sp, #4]
 80094f8:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 80094fc:	d00e      	beq.n	800951c <SD_WideBus_Enable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80094fe:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009500:	0409      	lsls	r1, r1, #16
 8009502:	6820      	ldr	r0, [r4, #0]
 8009504:	f002 fd47 	bl	800bf96 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8009508:	b930      	cbnz	r0, 8009518 <SD_WideBus_Enable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800950a:	2102      	movs	r1, #2
 800950c:	6820      	ldr	r0, [r4, #0]
 800950e:	f002 fd5b 	bl	800bfc8 <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
 8009512:	e001      	b.n	8009518 <SD_WideBus_Enable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009514:	f44f 6000 	mov.w	r0, #2048	@ 0x800
}
 8009518:	b002      	add	sp, #8
 800951a:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800951c:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8009520:	e7fa      	b.n	8009518 <SD_WideBus_Enable+0x44>

08009522 <SD_WideBus_Disable>:
{
 8009522:	b510      	push	{r4, lr}
 8009524:	b082      	sub	sp, #8
 8009526:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0UL, 0UL};
 8009528:	2100      	movs	r1, #0
 800952a:	9100      	str	r1, [sp, #0]
 800952c:	9101      	str	r1, [sp, #4]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800952e:	6800      	ldr	r0, [r0, #0]
 8009530:	f002 fbf9 	bl	800bd26 <SDMMC_GetResponse>
 8009534:	f010 7f00 	tst.w	r0, #33554432	@ 0x2000000
 8009538:	d113      	bne.n	8009562 <SD_WideBus_Disable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 800953a:	4669      	mov	r1, sp
 800953c:	4620      	mov	r0, r4
 800953e:	f7ff ff45 	bl	80093cc <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009542:	b980      	cbnz	r0, 8009566 <SD_WideBus_Disable+0x44>
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009544:	9b01      	ldr	r3, [sp, #4]
 8009546:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800954a:	d00e      	beq.n	800956a <SD_WideBus_Disable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800954c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800954e:	0409      	lsls	r1, r1, #16
 8009550:	6820      	ldr	r0, [r4, #0]
 8009552:	f002 fd20 	bl	800bf96 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8009556:	b930      	cbnz	r0, 8009566 <SD_WideBus_Disable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009558:	2100      	movs	r1, #0
 800955a:	6820      	ldr	r0, [r4, #0]
 800955c:	f002 fd34 	bl	800bfc8 <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
 8009560:	e001      	b.n	8009566 <SD_WideBus_Disable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009562:	f44f 6000 	mov.w	r0, #2048	@ 0x800
}
 8009566:	b002      	add	sp, #8
 8009568:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800956a:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800956e:	e7fa      	b.n	8009566 <SD_WideBus_Disable+0x44>

08009570 <SD_SendStatus>:
{
 8009570:	b570      	push	{r4, r5, r6, lr}
  if (pCardStatus == NULL)
 8009572:	b181      	cbz	r1, 8009596 <SD_SendStatus+0x26>
 8009574:	4604      	mov	r4, r0
 8009576:	460e      	mov	r6, r1
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009578:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 800957a:	0409      	lsls	r1, r1, #16
 800957c:	6800      	ldr	r0, [r0, #0]
 800957e:	f002 fd55 	bl	800c02c <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009582:	4605      	mov	r5, r0
 8009584:	b108      	cbz	r0, 800958a <SD_SendStatus+0x1a>
}
 8009586:	4628      	mov	r0, r5
 8009588:	bd70      	pop	{r4, r5, r6, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800958a:	2100      	movs	r1, #0
 800958c:	6820      	ldr	r0, [r4, #0]
 800958e:	f002 fbca 	bl	800bd26 <SDMMC_GetResponse>
 8009592:	6030      	str	r0, [r6, #0]
  return HAL_SD_ERROR_NONE;
 8009594:	e7f7      	b.n	8009586 <SD_SendStatus+0x16>
    return HAL_SD_ERROR_PARAM;
 8009596:	f04f 6500 	mov.w	r5, #134217728	@ 0x8000000
 800959a:	e7f4      	b.n	8009586 <SD_SendStatus+0x16>

0800959c <HAL_SD_TxCpltCallback>:
}
 800959c:	4770      	bx	lr

0800959e <HAL_SD_RxCpltCallback>:
}
 800959e:	4770      	bx	lr

080095a0 <HAL_SD_ErrorCallback>:
}
 80095a0:	4770      	bx	lr
	...

080095a4 <HAL_SD_GetCardCSD>:
{
 80095a4:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80095a6:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 80095a8:	0f92      	lsrs	r2, r2, #30
 80095aa:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80095ac:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 80095ae:	f3c2 6283 	ubfx	r2, r2, #26, #4
 80095b2:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80095b4:	f890 205f 	ldrb.w	r2, [r0, #95]	@ 0x5f
 80095b8:	f002 0203 	and.w	r2, r2, #3
 80095bc:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80095be:	f890 205e 	ldrb.w	r2, [r0, #94]	@ 0x5e
 80095c2:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80095c4:	f890 205d 	ldrb.w	r2, [r0, #93]	@ 0x5d
 80095c8:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80095ca:	f890 205c 	ldrb.w	r2, [r0, #92]	@ 0x5c
 80095ce:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80095d0:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 80095d2:	0d12      	lsrs	r2, r2, #20
 80095d4:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80095d6:	f8b0 2062 	ldrh.w	r2, [r0, #98]	@ 0x62
 80095da:	f002 020f 	and.w	r2, r2, #15
 80095de:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80095e0:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 80095e2:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 80095e6:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80095e8:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 80095ea:	f3c2 3280 	ubfx	r2, r2, #14, #1
 80095ee:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80095f0:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 80095f2:	f3c2 3240 	ubfx	r2, r2, #13, #1
 80095f6:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80095f8:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 80095fa:	f3c2 3200 	ubfx	r2, r2, #12, #1
 80095fe:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009600:	2200      	movs	r2, #0
 8009602:	734a      	strb	r2, [r1, #13]
  if (hsd->SdCard.CardType == CARD_SDSC)
 8009604:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8009606:	2a00      	cmp	r2, #0
 8009608:	f040 8086 	bne.w	8009718 <HAL_SD_GetCardCSD+0x174>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800960c:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 800960e:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8009612:	ea02 0280 	and.w	r2, r2, r0, lsl #2
 8009616:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8009618:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 800961c:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800961e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009620:	f3c2 62c2 	ubfx	r2, r2, #27, #3
 8009624:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009626:	f893 2067 	ldrb.w	r2, [r3, #103]	@ 0x67
 800962a:	f002 0207 	and.w	r2, r2, #7
 800962e:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009630:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009632:	f3c2 5242 	ubfx	r2, r2, #21, #3
 8009636:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009638:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800963a:	f3c2 4282 	ubfx	r2, r2, #18, #3
 800963e:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009640:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009642:	f3c2 32c2 	ubfx	r2, r2, #15, #3
 8009646:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009648:	690a      	ldr	r2, [r1, #16]
 800964a:	3201      	adds	r2, #1
 800964c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800964e:	7e08      	ldrb	r0, [r1, #24]
 8009650:	f000 0007 	and.w	r0, r0, #7
 8009654:	3002      	adds	r0, #2
 8009656:	4082      	lsls	r2, r0
 8009658:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800965a:	f891 c008 	ldrb.w	ip, [r1, #8]
 800965e:	f00c 0c0f 	and.w	ip, ip, #15
 8009662:	2001      	movs	r0, #1
 8009664:	fa00 f00c 	lsl.w	r0, r0, ip
 8009668:	64d8      	str	r0, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800966a:	0a40      	lsrs	r0, r0, #9
 800966c:	fb00 f202 	mul.w	r2, r0, r2
 8009670:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8009672:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009676:	655a      	str	r2, [r3, #84]	@ 0x54
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009678:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800967a:	f3c2 3280 	ubfx	r2, r2, #14, #1
 800967e:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009680:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009682:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 8009686:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009688:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800968a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800968e:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009690:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8009692:	0fd2      	lsrs	r2, r2, #31
 8009694:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009696:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8009698:	f3c2 7241 	ubfx	r2, r2, #29, #2
 800969c:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800969e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80096a0:	f3c2 6282 	ubfx	r2, r2, #26, #3
 80096a4:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80096a6:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80096a8:	f3c2 5283 	ubfx	r2, r2, #22, #4
 80096ac:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80096ae:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80096b0:	f3c2 5240 	ubfx	r2, r2, #21, #1
 80096b4:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 80096b8:	2000      	movs	r0, #0
 80096ba:	f881 0021 	strb.w	r0, [r1, #33]	@ 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80096be:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80096c2:	f002 0201 	and.w	r2, r2, #1
 80096c6:	f881 2022 	strb.w	r2, [r1, #34]	@ 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80096ca:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80096cc:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 80096d0:	f881 2023 	strb.w	r2, [r1, #35]	@ 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80096d4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80096d6:	f3c2 3280 	ubfx	r2, r2, #14, #1
 80096da:	f881 2024 	strb.w	r2, [r1, #36]	@ 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80096de:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80096e0:	f3c2 3240 	ubfx	r2, r2, #13, #1
 80096e4:	f881 2025 	strb.w	r2, [r1, #37]	@ 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80096e8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80096ea:	f3c2 3200 	ubfx	r2, r2, #12, #1
 80096ee:	f881 2026 	strb.w	r2, [r1, #38]	@ 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80096f2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80096f4:	f3c2 2281 	ubfx	r2, r2, #10, #2
 80096f8:	f881 2027 	strb.w	r2, [r1, #39]	@ 0x27
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80096fc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80096fe:	f3c2 2201 	ubfx	r2, r2, #8, #2
 8009702:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009706:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009708:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800970c:	f881 3029 	strb.w	r3, [r1, #41]	@ 0x29
  pCSD->Reserved4 = 1;
 8009710:	2301      	movs	r3, #1
 8009712:	f881 302a 	strb.w	r3, [r1, #42]	@ 0x2a
}
 8009716:	4770      	bx	lr
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009718:	2a01      	cmp	r2, #1
 800971a:	d111      	bne.n	8009740 <HAL_SD_GetCardCSD+0x19c>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800971c:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 800971e:	0412      	lsls	r2, r2, #16
 8009720:	f402 127c 	and.w	r2, r2, #4128768	@ 0x3f0000
 8009724:	f8b0 0066 	ldrh.w	r0, [r0, #102]	@ 0x66
 8009728:	4302      	orrs	r2, r0
 800972a:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800972c:	690a      	ldr	r2, [r1, #16]
 800972e:	3201      	adds	r2, #1
 8009730:	0292      	lsls	r2, r2, #10
 8009732:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009734:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 8009736:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800973a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800973c:	655a      	str	r2, [r3, #84]	@ 0x54
 800973e:	e79b      	b.n	8009678 <HAL_SD_GetCardCSD+0xd4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009740:	6802      	ldr	r2, [r0, #0]
 8009742:	4905      	ldr	r1, [pc, #20]	@ (8009758 <HAL_SD_GetCardCSD+0x1b4>)
 8009744:	6391      	str	r1, [r2, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009746:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8009748:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800974c:	6342      	str	r2, [r0, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800974e:	2001      	movs	r0, #1
 8009750:	f883 0030 	strb.w	r0, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8009754:	4770      	bx	lr
 8009756:	bf00      	nop
 8009758:	1fe00fff 	.word	0x1fe00fff

0800975c <SD_InitCard>:
{
 800975c:	b530      	push	{r4, r5, lr}
 800975e:	b08d      	sub	sp, #52	@ 0x34
 8009760:	4604      	mov	r4, r0
  uint16_t sd_rca = 0U;
 8009762:	2300      	movs	r3, #0
 8009764:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint32_t tickstart = HAL_GetTick();
 8009768:	f7f9 fe88 	bl	800347c <HAL_GetTick>
 800976c:	4605      	mov	r5, r0
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800976e:	6820      	ldr	r0, [r4, #0]
 8009770:	f002 fac0 	bl	800bcf4 <SDMMC_GetPowerState>
 8009774:	2800      	cmp	r0, #0
 8009776:	d067      	beq.n	8009848 <SD_InitCard+0xec>
  if (hsd->SdCard.CardType != CARD_SECURED)
 8009778:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800977a:	2b03      	cmp	r3, #3
 800977c:	d117      	bne.n	80097ae <SD_InitCard+0x52>
  if (hsd->SdCard.CardType != CARD_SECURED)
 800977e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009780:	2b03      	cmp	r3, #3
 8009782:	d02f      	beq.n	80097e4 <SD_InitCard+0x88>
    while (sd_rca == 0U)
 8009784:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8009788:	bb63      	cbnz	r3, 80097e4 <SD_InitCard+0x88>
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800978a:	f10d 0102 	add.w	r1, sp, #2
 800978e:	6820      	ldr	r0, [r4, #0]
 8009790:	f002 fd6a 	bl	800c268 <SDMMC_CmdSetRelAdd>
      if (errorstate != HAL_SD_ERROR_NONE)
 8009794:	4603      	mov	r3, r0
 8009796:	2800      	cmp	r0, #0
 8009798:	d158      	bne.n	800984c <SD_InitCard+0xf0>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800979a:	f7f9 fe6f 	bl	800347c <HAL_GetTick>
 800979e:	1b43      	subs	r3, r0, r5
 80097a0:	f241 3287 	movw	r2, #4999	@ 0x1387
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d9ed      	bls.n	8009784 <SD_InitCard+0x28>
        return HAL_SD_ERROR_TIMEOUT;
 80097a8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80097ac:	e04e      	b.n	800984c <SD_InitCard+0xf0>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80097ae:	6820      	ldr	r0, [r4, #0]
 80097b0:	f002 fc9e 	bl	800c0f0 <SDMMC_CmdSendCID>
    if (errorstate != HAL_SD_ERROR_NONE)
 80097b4:	4603      	mov	r3, r0
 80097b6:	2800      	cmp	r0, #0
 80097b8:	d148      	bne.n	800984c <SD_InitCard+0xf0>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80097ba:	2100      	movs	r1, #0
 80097bc:	6820      	ldr	r0, [r4, #0]
 80097be:	f002 fab2 	bl	800bd26 <SDMMC_GetResponse>
 80097c2:	66e0      	str	r0, [r4, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80097c4:	2104      	movs	r1, #4
 80097c6:	6820      	ldr	r0, [r4, #0]
 80097c8:	f002 faad 	bl	800bd26 <SDMMC_GetResponse>
 80097cc:	6720      	str	r0, [r4, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80097ce:	2108      	movs	r1, #8
 80097d0:	6820      	ldr	r0, [r4, #0]
 80097d2:	f002 faa8 	bl	800bd26 <SDMMC_GetResponse>
 80097d6:	6760      	str	r0, [r4, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80097d8:	210c      	movs	r1, #12
 80097da:	6820      	ldr	r0, [r4, #0]
 80097dc:	f002 faa3 	bl	800bd26 <SDMMC_GetResponse>
 80097e0:	67a0      	str	r0, [r4, #120]	@ 0x78
 80097e2:	e7cc      	b.n	800977e <SD_InitCard+0x22>
  if (hsd->SdCard.CardType != CARD_SECURED)
 80097e4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80097e6:	2b03      	cmp	r3, #3
 80097e8:	d01c      	beq.n	8009824 <SD_InitCard+0xc8>
    hsd->SdCard.RelCardAdd = sd_rca;
 80097ea:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 80097ee:	6461      	str	r1, [r4, #68]	@ 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80097f0:	0409      	lsls	r1, r1, #16
 80097f2:	6820      	ldr	r0, [r4, #0]
 80097f4:	f002 fc92 	bl	800c11c <SDMMC_CmdSendCSD>
    if (errorstate != HAL_SD_ERROR_NONE)
 80097f8:	4603      	mov	r3, r0
 80097fa:	bb38      	cbnz	r0, 800984c <SD_InitCard+0xf0>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80097fc:	2100      	movs	r1, #0
 80097fe:	6820      	ldr	r0, [r4, #0]
 8009800:	f002 fa91 	bl	800bd26 <SDMMC_GetResponse>
 8009804:	65e0      	str	r0, [r4, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009806:	2104      	movs	r1, #4
 8009808:	6820      	ldr	r0, [r4, #0]
 800980a:	f002 fa8c 	bl	800bd26 <SDMMC_GetResponse>
 800980e:	6620      	str	r0, [r4, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009810:	2108      	movs	r1, #8
 8009812:	6820      	ldr	r0, [r4, #0]
 8009814:	f002 fa87 	bl	800bd26 <SDMMC_GetResponse>
 8009818:	6660      	str	r0, [r4, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800981a:	210c      	movs	r1, #12
 800981c:	6820      	ldr	r0, [r4, #0]
 800981e:	f002 fa82 	bl	800bd26 <SDMMC_GetResponse>
 8009822:	66a0      	str	r0, [r4, #104]	@ 0x68
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009824:	2104      	movs	r1, #4
 8009826:	6820      	ldr	r0, [r4, #0]
 8009828:	f002 fa7d 	bl	800bd26 <SDMMC_GetResponse>
 800982c:	0d00      	lsrs	r0, r0, #20
 800982e:	6420      	str	r0, [r4, #64]	@ 0x40
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009830:	a901      	add	r1, sp, #4
 8009832:	4620      	mov	r0, r4
 8009834:	f7ff feb6 	bl	80095a4 <HAL_SD_GetCardCSD>
 8009838:	b958      	cbnz	r0, 8009852 <SD_InitCard+0xf6>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800983a:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800983c:	0409      	lsls	r1, r1, #16
 800983e:	6820      	ldr	r0, [r4, #0]
 8009840:	f002 fb90 	bl	800bf64 <SDMMC_CmdSelDesel>
 8009844:	4603      	mov	r3, r0
  if (errorstate != HAL_SD_ERROR_NONE)
 8009846:	e001      	b.n	800984c <SD_InitCard+0xf0>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009848:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
}
 800984c:	4618      	mov	r0, r3
 800984e:	b00d      	add	sp, #52	@ 0x34
 8009850:	bd30      	pop	{r4, r5, pc}
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009852:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009856:	e7f9      	b.n	800984c <SD_InitCard+0xf0>

08009858 <HAL_SD_InitCard>:
{
 8009858:	b570      	push	{r4, r5, r6, lr}
 800985a:	b088      	sub	sp, #32
 800985c:	4604      	mov	r4, r0
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800985e:	2300      	movs	r3, #0
 8009860:	9303      	str	r3, [sp, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009862:	9304      	str	r3, [sp, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009864:	9305      	str	r3, [sp, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009866:	9306      	str	r3, [sp, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009868:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800986c:	f7ff f97a 	bl	8008b64 <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
 8009870:	b938      	cbnz	r0, 8009882 <HAL_SD_InitCard+0x2a>
    hsd->State = HAL_SD_STATE_READY;
 8009872:	2001      	movs	r0, #1
 8009874:	f884 0030 	strb.w	r0, [r4, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8009878:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800987c:	6363      	str	r3, [r4, #52]	@ 0x34
}
 800987e:	b008      	add	sp, #32
 8009880:	bd70      	pop	{r4, r5, r6, pc}
 8009882:	4606      	mov	r6, r0
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8009884:	0a05      	lsrs	r5, r0, #8
 8009886:	4b22      	ldr	r3, [pc, #136]	@ (8009910 <HAL_SD_InitCard+0xb8>)
 8009888:	fba3 3505 	umull	r3, r5, r3, r5
 800988c:	092d      	lsrs	r5, r5, #4
 800988e:	9507      	str	r5, [sp, #28]
  (void)SDMMC_Init(hsd->Instance, Init);
 8009890:	ab08      	add	r3, sp, #32
 8009892:	e913 0003 	ldmdb	r3, {r0, r1}
 8009896:	e88d 0003 	stmia.w	sp, {r0, r1}
 800989a:	ab03      	add	r3, sp, #12
 800989c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800989e:	6820      	ldr	r0, [r4, #0]
 80098a0:	f002 fa02 	bl	800bca8 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80098a4:	6820      	ldr	r0, [r4, #0]
 80098a6:	f002 fa1f 	bl	800bce8 <SDMMC_PowerState_ON>
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 80098aa:	006d      	lsls	r5, r5, #1
 80098ac:	fbb6 f6f5 	udiv	r6, r6, r5
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 80098b0:	4818      	ldr	r0, [pc, #96]	@ (8009914 <HAL_SD_InitCard+0xbc>)
 80098b2:	fbb0 f0f6 	udiv	r0, r0, r6
 80098b6:	3001      	adds	r0, #1
 80098b8:	f7f9 fde6 	bl	8003488 <HAL_Delay>
  errorstate = SD_PowerON(hsd);
 80098bc:	4620      	mov	r0, r4
 80098be:	f7ff fc5b 	bl	8009178 <SD_PowerON>
  if (errorstate != HAL_SD_ERROR_NONE)
 80098c2:	4602      	mov	r2, r0
 80098c4:	b130      	cbz	r0, 80098d4 <HAL_SD_InitCard+0x7c>
    hsd->State = HAL_SD_STATE_READY;
 80098c6:	2001      	movs	r0, #1
 80098c8:	f884 0030 	strb.w	r0, [r4, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 80098cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80098ce:	4313      	orrs	r3, r2
 80098d0:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 80098d2:	e7d4      	b.n	800987e <HAL_SD_InitCard+0x26>
  errorstate = SD_InitCard(hsd);
 80098d4:	4620      	mov	r0, r4
 80098d6:	f7ff ff41 	bl	800975c <SD_InitCard>
  if (errorstate != HAL_SD_ERROR_NONE)
 80098da:	4602      	mov	r2, r0
 80098dc:	b130      	cbz	r0, 80098ec <HAL_SD_InitCard+0x94>
    hsd->State = HAL_SD_STATE_READY;
 80098de:	2001      	movs	r0, #1
 80098e0:	f884 0030 	strb.w	r0, [r4, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 80098e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80098e6:	4313      	orrs	r3, r2
 80098e8:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 80098ea:	e7c8      	b.n	800987e <HAL_SD_InitCard+0x26>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80098ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80098f0:	6820      	ldr	r0, [r4, #0]
 80098f2:	f002 faf1 	bl	800bed8 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 80098f6:	b908      	cbnz	r0, 80098fc <HAL_SD_InitCard+0xa4>
  return HAL_OK;
 80098f8:	2000      	movs	r0, #0
 80098fa:	e7c0      	b.n	800987e <HAL_SD_InitCard+0x26>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80098fc:	6823      	ldr	r3, [r4, #0]
 80098fe:	4906      	ldr	r1, [pc, #24]	@ (8009918 <HAL_SD_InitCard+0xc0>)
 8009900:	6399      	str	r1, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009902:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009904:	4303      	orrs	r3, r0
 8009906:	6363      	str	r3, [r4, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009908:	2001      	movs	r0, #1
 800990a:	f884 0030 	strb.w	r0, [r4, #48]	@ 0x30
    return HAL_ERROR;
 800990e:	e7b6      	b.n	800987e <HAL_SD_InitCard+0x26>
 8009910:	014f8b59 	.word	0x014f8b59
 8009914:	00012110 	.word	0x00012110
 8009918:	1fe00fff 	.word	0x1fe00fff

0800991c <HAL_SD_GetCardStatus>:
{
 800991c:	b530      	push	{r4, r5, lr}
 800991e:	b091      	sub	sp, #68	@ 0x44
  if (hsd->State == HAL_SD_STATE_BUSY)
 8009920:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8009924:	b2db      	uxtb	r3, r3
 8009926:	2b03      	cmp	r3, #3
 8009928:	d059      	beq.n	80099de <HAL_SD_GetCardStatus+0xc2>
 800992a:	4604      	mov	r4, r0
 800992c:	460d      	mov	r5, r1
  errorstate = SD_SendSDStatus(hsd, sd_status);
 800992e:	4669      	mov	r1, sp
 8009930:	f7ff fcc8 	bl	80092c4 <SD_SendSDStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009934:	b1b8      	cbz	r0, 8009966 <HAL_SD_GetCardStatus+0x4a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009936:	6823      	ldr	r3, [r4, #0]
 8009938:	492b      	ldr	r1, [pc, #172]	@ (80099e8 <HAL_SD_GetCardStatus+0xcc>)
 800993a:	6399      	str	r1, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800993c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800993e:	4303      	orrs	r3, r0
 8009940:	6363      	str	r3, [r4, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009942:	2501      	movs	r5, #1
 8009944:	f884 5030 	strb.w	r5, [r4, #48]	@ 0x30
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009948:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800994c:	6820      	ldr	r0, [r4, #0]
 800994e:	f002 fac3 	bl	800bed8 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009952:	2800      	cmp	r0, #0
 8009954:	d044      	beq.n	80099e0 <HAL_SD_GetCardStatus+0xc4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009956:	6822      	ldr	r2, [r4, #0]
 8009958:	4923      	ldr	r1, [pc, #140]	@ (80099e8 <HAL_SD_GetCardStatus+0xcc>)
 800995a:	6391      	str	r1, [r2, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800995c:	6360      	str	r0, [r4, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800995e:	2501      	movs	r5, #1
 8009960:	f884 5030 	strb.w	r5, [r4, #48]	@ 0x30
    status = HAL_ERROR;
 8009964:	e03c      	b.n	80099e0 <HAL_SD_GetCardStatus+0xc4>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8009966:	9a00      	ldr	r2, [sp, #0]
 8009968:	f3c2 1381 	ubfx	r3, r2, #6, #2
 800996c:	702b      	strb	r3, [r5, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800996e:	f3c2 1340 	ubfx	r3, r2, #5, #1
 8009972:	706b      	strb	r3, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009974:	0a13      	lsrs	r3, r2, #8
 8009976:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800997a:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800997e:	b29b      	uxth	r3, r3
 8009980:	806b      	strh	r3, [r5, #2]
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009982:	9a01      	ldr	r2, [sp, #4]
 8009984:	0213      	lsls	r3, r2, #8
 8009986:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800998a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800998e:	0a11      	lsrs	r1, r2, #8
 8009990:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009994:	430b      	orrs	r3, r1
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009996:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800999a:	606b      	str	r3, [r5, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800999c:	9b02      	ldr	r3, [sp, #8]
 800999e:	b2da      	uxtb	r2, r3
 80099a0:	722a      	strb	r2, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80099a2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80099a6:	726a      	strb	r2, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80099a8:	f3c3 5203 	ubfx	r2, r3, #20, #4
 80099ac:	72aa      	strb	r2, [r5, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80099ae:	0c1b      	lsrs	r3, r3, #16
 80099b0:	9a03      	ldr	r2, [sp, #12]
 80099b2:	b2d1      	uxtb	r1, r2
 80099b4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80099b8:	430b      	orrs	r3, r1
 80099ba:	81ab      	strh	r3, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80099bc:	f3c2 2385 	ubfx	r3, r2, #10, #6
 80099c0:	73ab      	strb	r3, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80099c2:	f3c2 2301 	ubfx	r3, r2, #8, #2
 80099c6:	73eb      	strb	r3, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80099c8:	f3c2 1303 	ubfx	r3, r2, #4, #4
 80099cc:	742b      	strb	r3, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80099ce:	f002 020f 	and.w	r2, r2, #15
 80099d2:	746a      	strb	r2, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80099d4:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80099d8:	74ab      	strb	r3, [r5, #18]
  HAL_StatusTypeDef status = HAL_OK;
 80099da:	2500      	movs	r5, #0
 80099dc:	e7b4      	b.n	8009948 <HAL_SD_GetCardStatus+0x2c>
    return HAL_ERROR;
 80099de:	2501      	movs	r5, #1
}
 80099e0:	4628      	mov	r0, r5
 80099e2:	b011      	add	sp, #68	@ 0x44
 80099e4:	bd30      	pop	{r4, r5, pc}
 80099e6:	bf00      	nop
 80099e8:	1fe00fff 	.word	0x1fe00fff

080099ec <HAL_SD_ConfigWideBusOperation>:
{
 80099ec:	b530      	push	{r4, r5, lr}
 80099ee:	b089      	sub	sp, #36	@ 0x24
 80099f0:	4604      	mov	r4, r0
 80099f2:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 80099f4:	2303      	movs	r3, #3
 80099f6:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
  if (hsd->SdCard.CardType != CARD_SECURED)
 80099fa:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80099fc:	2b03      	cmp	r3, #3
 80099fe:	d01c      	beq.n	8009a3a <HAL_SD_ConfigWideBusOperation+0x4e>
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8009a00:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8009a04:	d008      	beq.n	8009a18 <HAL_SD_ConfigWideBusOperation+0x2c>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8009a06:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 8009a0a:	d00a      	beq.n	8009a22 <HAL_SD_ConfigWideBusOperation+0x36>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8009a0c:	b179      	cbz	r1, 8009a2e <HAL_SD_ConfigWideBusOperation+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009a0e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8009a10:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009a14:	6343      	str	r3, [r0, #52]	@ 0x34
 8009a16:	e014      	b.n	8009a42 <HAL_SD_ConfigWideBusOperation+0x56>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009a18:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8009a1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a1e:	6343      	str	r3, [r0, #52]	@ 0x34
 8009a20:	e00f      	b.n	8009a42 <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Enable(hsd);
 8009a22:	f7ff fd57 	bl	80094d4 <SD_WideBus_Enable>
      hsd->ErrorCode |= errorstate;
 8009a26:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009a28:	4303      	orrs	r3, r0
 8009a2a:	6363      	str	r3, [r4, #52]	@ 0x34
 8009a2c:	e009      	b.n	8009a42 <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Disable(hsd);
 8009a2e:	f7ff fd78 	bl	8009522 <SD_WideBus_Disable>
      hsd->ErrorCode |= errorstate;
 8009a32:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009a34:	4303      	orrs	r3, r0
 8009a36:	6363      	str	r3, [r4, #52]	@ 0x34
 8009a38:	e003      	b.n	8009a42 <HAL_SD_ConfigWideBusOperation+0x56>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009a3a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8009a3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a40:	6343      	str	r3, [r0, #52]	@ 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009a42:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009a44:	b1b3      	cbz	r3, 8009a74 <HAL_SD_ConfigWideBusOperation+0x88>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a46:	6823      	ldr	r3, [r4, #0]
 8009a48:	4a39      	ldr	r2, [pc, #228]	@ (8009b30 <HAL_SD_ConfigWideBusOperation+0x144>)
 8009a4a:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8009a4c:	2501      	movs	r5, #1
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009a4e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009a52:	6820      	ldr	r0, [r4, #0]
 8009a54:	f002 fa40 	bl	800bed8 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009a58:	b130      	cbz	r0, 8009a68 <HAL_SD_ConfigWideBusOperation+0x7c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a5a:	6823      	ldr	r3, [r4, #0]
 8009a5c:	4934      	ldr	r1, [pc, #208]	@ (8009b30 <HAL_SD_ConfigWideBusOperation+0x144>)
 8009a5e:	6399      	str	r1, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009a60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009a62:	4303      	orrs	r3, r0
 8009a64:	6363      	str	r3, [r4, #52]	@ 0x34
    status = HAL_ERROR;
 8009a66:	2501      	movs	r5, #1
  hsd->State = HAL_SD_STATE_READY;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
}
 8009a6e:	4628      	mov	r0, r5
 8009a70:	b009      	add	sp, #36	@ 0x24
 8009a72:	bd30      	pop	{r4, r5, pc}
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009a74:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8009a78:	f7ff f874 	bl	8008b64 <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	2800      	cmp	r0, #0
 8009a80:	d050      	beq.n	8009b24 <HAL_SD_ConfigWideBusOperation+0x138>
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8009a82:	6863      	ldr	r3, [r4, #4]
 8009a84:	9303      	str	r3, [sp, #12]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009a86:	68a3      	ldr	r3, [r4, #8]
 8009a88:	9304      	str	r3, [sp, #16]
      Init.BusWide             = WideMode;
 8009a8a:	9505      	str	r5, [sp, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009a8c:	6923      	ldr	r3, [r4, #16]
 8009a8e:	9306      	str	r3, [sp, #24]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8009a90:	6961      	ldr	r1, [r4, #20]
 8009a92:	4b28      	ldr	r3, [pc, #160]	@ (8009b34 <HAL_SD_ConfigWideBusOperation+0x148>)
 8009a94:	fba3 0302 	umull	r0, r3, r3, r2
 8009a98:	0e18      	lsrs	r0, r3, #24
 8009a9a:	ebb1 6f13 	cmp.w	r1, r3, lsr #24
 8009a9e:	d30c      	bcc.n	8009aba <HAL_SD_ConfigWideBusOperation+0xce>
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009aa0:	9107      	str	r1, [sp, #28]
      (void)SDMMC_Init(hsd->Instance, Init);
 8009aa2:	ab08      	add	r3, sp, #32
 8009aa4:	e913 0003 	ldmdb	r3, {r0, r1}
 8009aa8:	e88d 0003 	stmia.w	sp, {r0, r1}
 8009aac:	ab03      	add	r3, sp, #12
 8009aae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009ab0:	6820      	ldr	r0, [r4, #0]
 8009ab2:	f002 f8f9 	bl	800bca8 <SDMMC_Init>
  HAL_StatusTypeDef status = HAL_OK;
 8009ab6:	2500      	movs	r5, #0
 8009ab8:	e7c9      	b.n	8009a4e <HAL_SD_ConfigWideBusOperation+0x62>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8009aba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009abc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ac0:	d008      	beq.n	8009ad4 <HAL_SD_ConfigWideBusOperation+0xe8>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8009ac2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ac6:	d007      	beq.n	8009ad8 <HAL_SD_ConfigWideBusOperation+0xec>
        if (hsd->Init.ClockDiv == 0U)
 8009ac8:	bb11      	cbnz	r1, 8009b10 <HAL_SD_ConfigWideBusOperation+0x124>
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8009aca:	4b1b      	ldr	r3, [pc, #108]	@ (8009b38 <HAL_SD_ConfigWideBusOperation+0x14c>)
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d91d      	bls.n	8009b0c <HAL_SD_ConfigWideBusOperation+0x120>
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8009ad0:	9007      	str	r0, [sp, #28]
 8009ad2:	e7e6      	b.n	8009aa2 <HAL_SD_ConfigWideBusOperation+0xb6>
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009ad4:	9107      	str	r1, [sp, #28]
 8009ad6:	e7e4      	b.n	8009aa2 <HAL_SD_ConfigWideBusOperation+0xb6>
        if (hsd->Init.ClockDiv == 0U)
 8009ad8:	b951      	cbnz	r1, 8009af0 <HAL_SD_ConfigWideBusOperation+0x104>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8009ada:	4b18      	ldr	r3, [pc, #96]	@ (8009b3c <HAL_SD_ConfigWideBusOperation+0x150>)
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d905      	bls.n	8009aec <HAL_SD_ConfigWideBusOperation+0x100>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009ae0:	4b14      	ldr	r3, [pc, #80]	@ (8009b34 <HAL_SD_ConfigWideBusOperation+0x148>)
 8009ae2:	fba3 2302 	umull	r2, r3, r3, r2
 8009ae6:	0e5b      	lsrs	r3, r3, #25
 8009ae8:	9307      	str	r3, [sp, #28]
 8009aea:	e7da      	b.n	8009aa2 <HAL_SD_ConfigWideBusOperation+0xb6>
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009aec:	9107      	str	r1, [sp, #28]
 8009aee:	e7d8      	b.n	8009aa2 <HAL_SD_ConfigWideBusOperation+0xb6>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8009af0:	004b      	lsls	r3, r1, #1
 8009af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009af6:	4811      	ldr	r0, [pc, #68]	@ (8009b3c <HAL_SD_ConfigWideBusOperation+0x150>)
 8009af8:	4283      	cmp	r3, r0
 8009afa:	d905      	bls.n	8009b08 <HAL_SD_ConfigWideBusOperation+0x11c>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009afc:	4b0d      	ldr	r3, [pc, #52]	@ (8009b34 <HAL_SD_ConfigWideBusOperation+0x148>)
 8009afe:	fba3 2302 	umull	r2, r3, r3, r2
 8009b02:	0e5b      	lsrs	r3, r3, #25
 8009b04:	9307      	str	r3, [sp, #28]
 8009b06:	e7cc      	b.n	8009aa2 <HAL_SD_ConfigWideBusOperation+0xb6>
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009b08:	9107      	str	r1, [sp, #28]
 8009b0a:	e7ca      	b.n	8009aa2 <HAL_SD_ConfigWideBusOperation+0xb6>
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009b0c:	9107      	str	r1, [sp, #28]
 8009b0e:	e7c8      	b.n	8009aa2 <HAL_SD_ConfigWideBusOperation+0xb6>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8009b10:	004b      	lsls	r3, r1, #1
 8009b12:	fbb2 f2f3 	udiv	r2, r2, r3
 8009b16:	4b08      	ldr	r3, [pc, #32]	@ (8009b38 <HAL_SD_ConfigWideBusOperation+0x14c>)
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d901      	bls.n	8009b20 <HAL_SD_ConfigWideBusOperation+0x134>
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8009b1c:	9007      	str	r0, [sp, #28]
 8009b1e:	e7c0      	b.n	8009aa2 <HAL_SD_ConfigWideBusOperation+0xb6>
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009b20:	9107      	str	r1, [sp, #28]
 8009b22:	e7be      	b.n	8009aa2 <HAL_SD_ConfigWideBusOperation+0xb6>
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8009b24:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009b26:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009b2a:	6363      	str	r3, [r4, #52]	@ 0x34
      status = HAL_ERROR;
 8009b2c:	2501      	movs	r5, #1
 8009b2e:	e78e      	b.n	8009a4e <HAL_SD_ConfigWideBusOperation+0x62>
 8009b30:	1fe00fff 	.word	0x1fe00fff
 8009b34:	55e63b89 	.word	0x55e63b89
 8009b38:	017d7840 	.word	0x017d7840
 8009b3c:	02faf080 	.word	0x02faf080

08009b40 <HAL_SD_GetCardState>:
{
 8009b40:	b510      	push	{r4, lr}
 8009b42:	b082      	sub	sp, #8
 8009b44:	4604      	mov	r4, r0
  uint32_t resp1 = 0;
 8009b46:	2300      	movs	r3, #0
 8009b48:	9301      	str	r3, [sp, #4]
  errorstate = SD_SendStatus(hsd, &resp1);
 8009b4a:	a901      	add	r1, sp, #4
 8009b4c:	f7ff fd10 	bl	8009570 <SD_SendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009b50:	b110      	cbz	r0, 8009b58 <HAL_SD_GetCardState+0x18>
    hsd->ErrorCode |= errorstate;
 8009b52:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009b54:	4303      	orrs	r3, r0
 8009b56:	6363      	str	r3, [r4, #52]	@ 0x34
}
 8009b58:	9801      	ldr	r0, [sp, #4]
 8009b5a:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8009b5e:	b002      	add	sp, #8
 8009b60:	bd10      	pop	{r4, pc}

08009b62 <HAL_SD_Init>:
{
 8009b62:	b570      	push	{r4, r5, r6, lr}
 8009b64:	b086      	sub	sp, #24
  if (hsd == NULL)
 8009b66:	2800      	cmp	r0, #0
 8009b68:	d054      	beq.n	8009c14 <HAL_SD_Init+0xb2>
 8009b6a:	4604      	mov	r4, r0
  if (hsd->State == HAL_SD_STATE_RESET)
 8009b6c:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8009b70:	b153      	cbz	r3, 8009b88 <HAL_SD_Init+0x26>
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8009b72:	2304      	movs	r3, #4
 8009b74:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009b78:	4620      	mov	r0, r4
 8009b7a:	f7ff fe6d 	bl	8009858 <HAL_SD_InitCard>
 8009b7e:	b138      	cbz	r0, 8009b90 <HAL_SD_Init+0x2e>
    return HAL_ERROR;
 8009b80:	2501      	movs	r5, #1
}
 8009b82:	4628      	mov	r0, r5
 8009b84:	b006      	add	sp, #24
 8009b86:	bd70      	pop	{r4, r5, r6, pc}
    hsd->Lock = HAL_UNLOCKED;
 8009b88:	7603      	strb	r3, [r0, #24]
    HAL_SD_MspInit(hsd);
 8009b8a:	f7f8 fda9 	bl	80026e0 <HAL_SD_MspInit>
 8009b8e:	e7f0      	b.n	8009b72 <HAL_SD_Init+0x10>
  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8009b90:	a901      	add	r1, sp, #4
 8009b92:	4620      	mov	r0, r4
 8009b94:	f7ff fec2 	bl	800991c <HAL_SD_GetCardStatus>
 8009b98:	2800      	cmp	r0, #0
 8009b9a:	d13d      	bne.n	8009c18 <HAL_SD_Init+0xb6>
  speedgrade = CardStatus.UhsSpeedGrade;
 8009b9c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8009ba0:	b2db      	uxtb	r3, r3
  unitsize = CardStatus.UhsAllocationUnitSize;
 8009ba2:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8009ba6:	b2d2      	uxtb	r2, r2
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8009ba8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009baa:	2901      	cmp	r1, #1
 8009bac:	d00b      	beq.n	8009bc6 <HAL_SD_Init+0x64>
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009bae:	2901      	cmp	r1, #1
 8009bb0:	d00f      	beq.n	8009bd2 <HAL_SD_Init+0x70>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	65a3      	str	r3, [r4, #88]	@ 0x58
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8009bb6:	68e1      	ldr	r1, [r4, #12]
 8009bb8:	4620      	mov	r0, r4
 8009bba:	f7ff ff17 	bl	80099ec <HAL_SD_ConfigWideBusOperation>
 8009bbe:	4605      	mov	r5, r0
 8009bc0:	b158      	cbz	r0, 8009bda <HAL_SD_Init+0x78>
    return HAL_ERROR;
 8009bc2:	2501      	movs	r5, #1
 8009bc4:	e7dd      	b.n	8009b82 <HAL_SD_Init+0x20>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8009bc6:	4313      	orrs	r3, r2
 8009bc8:	d0f1      	beq.n	8009bae <HAL_SD_Init+0x4c>
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009bca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009bce:	65a3      	str	r3, [r4, #88]	@ 0x58
 8009bd0:	e7f1      	b.n	8009bb6 <HAL_SD_Init+0x54>
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8009bd2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009bd6:	65a3      	str	r3, [r4, #88]	@ 0x58
 8009bd8:	e7ed      	b.n	8009bb6 <HAL_SD_Init+0x54>
  tickstart = HAL_GetTick();
 8009bda:	f7f9 fc4f 	bl	800347c <HAL_GetTick>
 8009bde:	4606      	mov	r6, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009be0:	4620      	mov	r0, r4
 8009be2:	f7ff ffad 	bl	8009b40 <HAL_SD_GetCardState>
 8009be6:	2804      	cmp	r0, #4
 8009be8:	d00d      	beq.n	8009c06 <HAL_SD_Init+0xa4>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009bea:	f7f9 fc47 	bl	800347c <HAL_GetTick>
 8009bee:	1b80      	subs	r0, r0, r6
 8009bf0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009bf4:	d1f4      	bne.n	8009be0 <HAL_SD_Init+0x7e>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8009bf6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009bfa:	6363      	str	r3, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
      return HAL_TIMEOUT;
 8009c02:	2503      	movs	r5, #3
 8009c04:	e7bd      	b.n	8009b82 <HAL_SD_Init+0x20>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009c06:	2300      	movs	r3, #0
 8009c08:	6363      	str	r3, [r4, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009c0a:	62e3      	str	r3, [r4, #44]	@ 0x2c
  hsd->State = HAL_SD_STATE_READY;
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
  return HAL_OK;
 8009c12:	e7b6      	b.n	8009b82 <HAL_SD_Init+0x20>
    return HAL_ERROR;
 8009c14:	2501      	movs	r5, #1
 8009c16:	e7b4      	b.n	8009b82 <HAL_SD_Init+0x20>
    return HAL_ERROR;
 8009c18:	2501      	movs	r5, #1
 8009c1a:	e7b2      	b.n	8009b82 <HAL_SD_Init+0x20>

08009c1c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8009c1c:	4770      	bx	lr

08009c1e <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8009c1e:	4770      	bx	lr

08009c20 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8009c20:	4770      	bx	lr

08009c22 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8009c22:	4770      	bx	lr

08009c24 <HAL_SD_IRQHandler>:
{
 8009c24:	b538      	push	{r3, r4, r5, lr}
 8009c26:	4604      	mov	r4, r0
  uint32_t context = hsd->Context;
 8009c28:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009c2a:	6803      	ldr	r3, [r0, #0]
 8009c2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c2e:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8009c32:	d002      	beq.n	8009c3a <HAL_SD_IRQHandler+0x16>
 8009c34:	f015 0f08 	tst.w	r5, #8
 8009c38:	d12a      	bne.n	8009c90 <HAL_SD_IRQHandler+0x6c>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8009c3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c3c:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8009c40:	d067      	beq.n	8009d12 <HAL_SD_IRQHandler+0xee>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8009c42:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009c46:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8009c48:	6822      	ldr	r2, [r4, #0]
 8009c4a:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8009c4c:	4b7e      	ldr	r3, [pc, #504]	@ (8009e48 <HAL_SD_IRQHandler+0x224>)
 8009c4e:	400b      	ands	r3, r1
 8009c50:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8009c52:	6822      	ldr	r2, [r4, #0]
 8009c54:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8009c56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009c5a:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009c5c:	6822      	ldr	r2, [r4, #0]
 8009c5e:	68d3      	ldr	r3, [r2, #12]
 8009c60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c64:	60d3      	str	r3, [r2, #12]
    if ((context & SD_CONTEXT_IT) != 0U)
 8009c66:	f015 0f08 	tst.w	r5, #8
 8009c6a:	d025      	beq.n	8009cb8 <HAL_SD_IRQHandler+0x94>
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009c6c:	f015 0f22 	tst.w	r5, #34	@ 0x22
 8009c70:	d111      	bne.n	8009c96 <HAL_SD_IRQHandler+0x72>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009c72:	6823      	ldr	r3, [r4, #0]
 8009c74:	4a75      	ldr	r2, [pc, #468]	@ (8009e4c <HAL_SD_IRQHandler+0x228>)
 8009c76:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	62e3      	str	r3, [r4, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009c82:	f015 0f03 	tst.w	r5, #3
 8009c86:	d013      	beq.n	8009cb0 <HAL_SD_IRQHandler+0x8c>
        HAL_SD_RxCpltCallback(hsd);
 8009c88:	4620      	mov	r0, r4
 8009c8a:	f7ff fc88 	bl	800959e <HAL_SD_RxCpltCallback>
 8009c8e:	e001      	b.n	8009c94 <HAL_SD_IRQHandler+0x70>
    SD_Read_IT(hsd);
 8009c90:	f7ff fad4 	bl	800923c <SD_Read_IT>
}
 8009c94:	bd38      	pop	{r3, r4, r5, pc}
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009c96:	6820      	ldr	r0, [r4, #0]
 8009c98:	f002 f938 	bl	800bf0c <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	2800      	cmp	r0, #0
 8009ca0:	d0e7      	beq.n	8009c72 <HAL_SD_IRQHandler+0x4e>
          hsd->ErrorCode |= errorstate;
 8009ca2:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	6363      	str	r3, [r4, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 8009ca8:	4620      	mov	r0, r4
 8009caa:	f7ff fc79 	bl	80095a0 <HAL_SD_ErrorCallback>
 8009cae:	e7e0      	b.n	8009c72 <HAL_SD_IRQHandler+0x4e>
        HAL_SD_TxCpltCallback(hsd);
 8009cb0:	4620      	mov	r0, r4
 8009cb2:	f7ff fc73 	bl	800959c <HAL_SD_TxCpltCallback>
 8009cb6:	e7ed      	b.n	8009c94 <HAL_SD_IRQHandler+0x70>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8009cb8:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8009cbc:	d0ea      	beq.n	8009c94 <HAL_SD_IRQHandler+0x70>
      hsd->Instance->DLEN = 0;
 8009cbe:	6822      	ldr	r2, [r4, #0]
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	6293      	str	r3, [r2, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 8009cc4:	6822      	ldr	r2, [r4, #0]
 8009cc6:	62d3      	str	r3, [r2, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8009cc8:	6822      	ldr	r2, [r4, #0]
 8009cca:	6513      	str	r3, [r2, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009ccc:	f015 0f22 	tst.w	r5, #34	@ 0x22
 8009cd0:	d10e      	bne.n	8009cf0 <HAL_SD_IRQHandler+0xcc>
      hsd->State = HAL_SD_STATE_READY;
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	62e3      	str	r3, [r4, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009cdc:	f015 0f30 	tst.w	r5, #48	@ 0x30
 8009ce0:	d113      	bne.n	8009d0a <HAL_SD_IRQHandler+0xe6>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009ce2:	f015 0f03 	tst.w	r5, #3
 8009ce6:	d0d5      	beq.n	8009c94 <HAL_SD_IRQHandler+0x70>
        HAL_SD_RxCpltCallback(hsd);
 8009ce8:	4620      	mov	r0, r4
 8009cea:	f7ff fc58 	bl	800959e <HAL_SD_RxCpltCallback>
 8009cee:	e7d1      	b.n	8009c94 <HAL_SD_IRQHandler+0x70>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009cf0:	6820      	ldr	r0, [r4, #0]
 8009cf2:	f002 f90b 	bl	800bf0c <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	2800      	cmp	r0, #0
 8009cfa:	d0ea      	beq.n	8009cd2 <HAL_SD_IRQHandler+0xae>
          hsd->ErrorCode |= errorstate;
 8009cfc:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	6363      	str	r3, [r4, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 8009d02:	4620      	mov	r0, r4
 8009d04:	f7ff fc4c 	bl	80095a0 <HAL_SD_ErrorCallback>
 8009d08:	e7e3      	b.n	8009cd2 <HAL_SD_IRQHandler+0xae>
        HAL_SD_TxCpltCallback(hsd);
 8009d0a:	4620      	mov	r0, r4
 8009d0c:	f7ff fc46 	bl	800959c <HAL_SD_TxCpltCallback>
 8009d10:	e7e7      	b.n	8009ce2 <HAL_SD_IRQHandler+0xbe>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009d12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d14:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 8009d18:	d002      	beq.n	8009d20 <HAL_SD_IRQHandler+0xfc>
 8009d1a:	f015 0f08 	tst.w	r5, #8
 8009d1e:	d162      	bne.n	8009de6 <HAL_SD_IRQHandler+0x1c2>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8009d20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d22:	f012 0f3a 	tst.w	r2, #58	@ 0x3a
 8009d26:	d06b      	beq.n	8009e00 <HAL_SD_IRQHandler+0x1dc>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8009d28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d2a:	f012 0f02 	tst.w	r2, #2
 8009d2e:	d003      	beq.n	8009d38 <HAL_SD_IRQHandler+0x114>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009d30:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8009d32:	f042 0202 	orr.w	r2, r2, #2
 8009d36:	6362      	str	r2, [r4, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8009d38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d3a:	f012 0f08 	tst.w	r2, #8
 8009d3e:	d003      	beq.n	8009d48 <HAL_SD_IRQHandler+0x124>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009d40:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8009d42:	f042 0208 	orr.w	r2, r2, #8
 8009d46:	6362      	str	r2, [r4, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8009d48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d4a:	f012 0f20 	tst.w	r2, #32
 8009d4e:	d003      	beq.n	8009d58 <HAL_SD_IRQHandler+0x134>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009d50:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8009d52:	f042 0220 	orr.w	r2, r2, #32
 8009d56:	6362      	str	r2, [r4, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8009d58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d5a:	f012 0f10 	tst.w	r2, #16
 8009d5e:	d003      	beq.n	8009d68 <HAL_SD_IRQHandler+0x144>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009d60:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8009d62:	f042 0210 	orr.w	r2, r2, #16
 8009d66:	6362      	str	r2, [r4, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009d68:	4a38      	ldr	r2, [pc, #224]	@ (8009e4c <HAL_SD_IRQHandler+0x228>)
 8009d6a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8009d6c:	6822      	ldr	r2, [r4, #0]
 8009d6e:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8009d70:	f423 739d 	bic.w	r3, r3, #314	@ 0x13a
 8009d74:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009d76:	6822      	ldr	r2, [r4, #0]
 8009d78:	68d3      	ldr	r3, [r2, #12]
 8009d7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d7e:	60d3      	str	r3, [r2, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8009d80:	6822      	ldr	r2, [r4, #0]
 8009d82:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8009d84:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8009d88:	62d3      	str	r3, [r2, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8009d8a:	6822      	ldr	r2, [r4, #0]
 8009d8c:	68d3      	ldr	r3, [r2, #12]
 8009d8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d92:	60d3      	str	r3, [r2, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009d94:	6820      	ldr	r0, [r4, #0]
 8009d96:	f002 f8b9 	bl	800bf0c <SDMMC_CmdStopTransfer>
 8009d9a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009d9c:	4303      	orrs	r3, r0
 8009d9e:	6363      	str	r3, [r4, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8009da0:	6822      	ldr	r2, [r4, #0]
 8009da2:	68d3      	ldr	r3, [r2, #12]
 8009da4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009da8:	60d3      	str	r3, [r2, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8009daa:	6823      	ldr	r3, [r4, #0]
 8009dac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009db0:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8009db2:	f015 0f08 	tst.w	r5, #8
 8009db6:	d11a      	bne.n	8009dee <HAL_SD_IRQHandler+0x1ca>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8009db8:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8009dbc:	f43f af6a 	beq.w	8009c94 <HAL_SD_IRQHandler+0x70>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009dc0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	f43f af66 	beq.w	8009c94 <HAL_SD_IRQHandler+0x70>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8009dc8:	6822      	ldr	r2, [r4, #0]
 8009dca:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8009dcc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009dd0:	63d3      	str	r3, [r2, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8009dd2:	6823      	ldr	r3, [r4, #0]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 8009dd8:	2301      	movs	r3, #1
 8009dda:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 8009dde:	4620      	mov	r0, r4
 8009de0:	f7ff fbde 	bl	80095a0 <HAL_SD_ErrorCallback>
 8009de4:	e756      	b.n	8009c94 <HAL_SD_IRQHandler+0x70>
    SD_Write_IT(hsd);
 8009de6:	4620      	mov	r0, r4
 8009de8:	f7ff fa46 	bl	8009278 <SD_Write_IT>
 8009dec:	e752      	b.n	8009c94 <HAL_SD_IRQHandler+0x70>
      hsd->State = HAL_SD_STATE_READY;
 8009dee:	2301      	movs	r3, #1
 8009df0:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009df4:	2300      	movs	r3, #0
 8009df6:	62e3      	str	r3, [r4, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 8009df8:	4620      	mov	r0, r4
 8009dfa:	f7ff fbd1 	bl	80095a0 <HAL_SD_ErrorCallback>
 8009dfe:	e749      	b.n	8009c94 <HAL_SD_IRQHandler+0x70>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8009e00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e02:	f012 5f80 	tst.w	r2, #268435456	@ 0x10000000
 8009e06:	f43f af45 	beq.w	8009c94 <HAL_SD_IRQHandler+0x70>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8009e0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e0e:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8009e10:	6823      	ldr	r3, [r4, #0]
 8009e12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e14:	f013 0f04 	tst.w	r3, #4
 8009e18:	d10a      	bne.n	8009e30 <HAL_SD_IRQHandler+0x20c>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009e1a:	f015 0f20 	tst.w	r5, #32
 8009e1e:	d003      	beq.n	8009e28 <HAL_SD_IRQHandler+0x204>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8009e20:	4620      	mov	r0, r4
 8009e22:	f7ff fefe 	bl	8009c22 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
 8009e26:	e735      	b.n	8009c94 <HAL_SD_IRQHandler+0x70>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8009e28:	4620      	mov	r0, r4
 8009e2a:	f7ff fef8 	bl	8009c1e <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
 8009e2e:	e731      	b.n	8009c94 <HAL_SD_IRQHandler+0x70>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009e30:	f015 0f20 	tst.w	r5, #32
 8009e34:	d003      	beq.n	8009e3e <HAL_SD_IRQHandler+0x21a>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8009e36:	4620      	mov	r0, r4
 8009e38:	f7ff fef2 	bl	8009c20 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
 8009e3c:	e72a      	b.n	8009c94 <HAL_SD_IRQHandler+0x70>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8009e3e:	4620      	mov	r0, r4
 8009e40:	f7ff feec 	bl	8009c1c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8009e44:	e726      	b.n	8009c94 <HAL_SD_IRQHandler+0x70>
 8009e46:	bf00      	nop
 8009e48:	ffff3ec5 	.word	0xffff3ec5
 8009e4c:	18000f3a 	.word	0x18000f3a

08009e50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e50:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e52:	6a03      	ldr	r3, [r0, #32]
 8009e54:	f023 0301 	bic.w	r3, r3, #1
 8009e58:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e5a:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e5c:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e5e:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009e60:	4b1e      	ldr	r3, [pc, #120]	@ (8009edc <TIM_OC1_SetConfig+0x8c>)
 8009e62:	4023      	ands	r3, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e64:	680d      	ldr	r5, [r1, #0]
 8009e66:	431d      	orrs	r5, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009e68:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009e6c:	688b      	ldr	r3, [r1, #8]
 8009e6e:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009e70:	4a1b      	ldr	r2, [pc, #108]	@ (8009ee0 <TIM_OC1_SetConfig+0x90>)
 8009e72:	4c1c      	ldr	r4, [pc, #112]	@ (8009ee4 <TIM_OC1_SetConfig+0x94>)
 8009e74:	42a0      	cmp	r0, r4
 8009e76:	bf18      	it	ne
 8009e78:	4290      	cmpne	r0, r2
 8009e7a:	bf0c      	ite	eq
 8009e7c:	2201      	moveq	r2, #1
 8009e7e:	2200      	movne	r2, #0
 8009e80:	d00c      	beq.n	8009e9c <TIM_OC1_SetConfig+0x4c>
 8009e82:	f504 4480 	add.w	r4, r4, #16384	@ 0x4000
 8009e86:	42a0      	cmp	r0, r4
 8009e88:	bf14      	ite	ne
 8009e8a:	2400      	movne	r4, #0
 8009e8c:	2401      	moveq	r4, #1
 8009e8e:	4f16      	ldr	r7, [pc, #88]	@ (8009ee8 <TIM_OC1_SetConfig+0x98>)
 8009e90:	42b8      	cmp	r0, r7
 8009e92:	d003      	beq.n	8009e9c <TIM_OC1_SetConfig+0x4c>
 8009e94:	b914      	cbnz	r4, 8009e9c <TIM_OC1_SetConfig+0x4c>
 8009e96:	4c15      	ldr	r4, [pc, #84]	@ (8009eec <TIM_OC1_SetConfig+0x9c>)
 8009e98:	42a0      	cmp	r0, r4
 8009e9a:	d105      	bne.n	8009ea8 <TIM_OC1_SetConfig+0x58>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009e9c:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009ea0:	68cc      	ldr	r4, [r1, #12]
 8009ea2:	4323      	orrs	r3, r4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009ea4:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ea8:	b95a      	cbnz	r2, 8009ec2 <TIM_OC1_SetConfig+0x72>
 8009eaa:	4a11      	ldr	r2, [pc, #68]	@ (8009ef0 <TIM_OC1_SetConfig+0xa0>)
 8009eac:	4290      	cmp	r0, r2
 8009eae:	bf14      	ite	ne
 8009eb0:	2200      	movne	r2, #0
 8009eb2:	2201      	moveq	r2, #1
 8009eb4:	4c0c      	ldr	r4, [pc, #48]	@ (8009ee8 <TIM_OC1_SetConfig+0x98>)
 8009eb6:	42a0      	cmp	r0, r4
 8009eb8:	d003      	beq.n	8009ec2 <TIM_OC1_SetConfig+0x72>
 8009eba:	b912      	cbnz	r2, 8009ec2 <TIM_OC1_SetConfig+0x72>
 8009ebc:	4a0b      	ldr	r2, [pc, #44]	@ (8009eec <TIM_OC1_SetConfig+0x9c>)
 8009ebe:	4290      	cmp	r0, r2
 8009ec0:	d105      	bne.n	8009ece <TIM_OC1_SetConfig+0x7e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009ec2:	f426 7640 	bic.w	r6, r6, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009ec6:	694a      	ldr	r2, [r1, #20]
 8009ec8:	4332      	orrs	r2, r6
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009eca:	698e      	ldr	r6, [r1, #24]
 8009ecc:	4316      	orrs	r6, r2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ece:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ed0:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009ed2:	684a      	ldr	r2, [r1, #4]
 8009ed4:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ed6:	6203      	str	r3, [r0, #32]
}
 8009ed8:	bcf0      	pop	{r4, r5, r6, r7}
 8009eda:	4770      	bx	lr
 8009edc:	fffeff8c 	.word	0xfffeff8c
 8009ee0:	40010000 	.word	0x40010000
 8009ee4:	40010400 	.word	0x40010400
 8009ee8:	40014000 	.word	0x40014000
 8009eec:	40014800 	.word	0x40014800
 8009ef0:	40014400 	.word	0x40014400

08009ef4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ef4:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009ef6:	6a03      	ldr	r3, [r0, #32]
 8009ef8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009efc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009efe:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f00:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f02:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009f04:	4a1a      	ldr	r2, [pc, #104]	@ (8009f70 <TIM_OC3_SetConfig+0x7c>)
 8009f06:	4022      	ands	r2, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f08:	680e      	ldr	r6, [r1, #0]
 8009f0a:	4316      	orrs	r6, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009f0c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009f10:	688a      	ldr	r2, [r1, #8]
 8009f12:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009f16:	4a17      	ldr	r2, [pc, #92]	@ (8009f74 <TIM_OC3_SetConfig+0x80>)
 8009f18:	4c17      	ldr	r4, [pc, #92]	@ (8009f78 <TIM_OC3_SetConfig+0x84>)
 8009f1a:	42a0      	cmp	r0, r4
 8009f1c:	bf18      	it	ne
 8009f1e:	4290      	cmpne	r0, r2
 8009f20:	bf0c      	ite	eq
 8009f22:	2201      	moveq	r2, #1
 8009f24:	2200      	movne	r2, #0
 8009f26:	d106      	bne.n	8009f36 <TIM_OC3_SetConfig+0x42>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009f28:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009f2c:	68cc      	ldr	r4, [r1, #12]
 8009f2e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009f32:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f36:	b95a      	cbnz	r2, 8009f50 <TIM_OC3_SetConfig+0x5c>
 8009f38:	4a10      	ldr	r2, [pc, #64]	@ (8009f7c <TIM_OC3_SetConfig+0x88>)
 8009f3a:	4290      	cmp	r0, r2
 8009f3c:	bf14      	ite	ne
 8009f3e:	2200      	movne	r2, #0
 8009f40:	2201      	moveq	r2, #1
 8009f42:	4c0f      	ldr	r4, [pc, #60]	@ (8009f80 <TIM_OC3_SetConfig+0x8c>)
 8009f44:	42a0      	cmp	r0, r4
 8009f46:	d003      	beq.n	8009f50 <TIM_OC3_SetConfig+0x5c>
 8009f48:	b912      	cbnz	r2, 8009f50 <TIM_OC3_SetConfig+0x5c>
 8009f4a:	4a0e      	ldr	r2, [pc, #56]	@ (8009f84 <TIM_OC3_SetConfig+0x90>)
 8009f4c:	4290      	cmp	r0, r2
 8009f4e:	d107      	bne.n	8009f60 <TIM_OC3_SetConfig+0x6c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009f50:	f425 5240 	bic.w	r2, r5, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009f54:	694c      	ldr	r4, [r1, #20]
 8009f56:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009f5a:	698c      	ldr	r4, [r1, #24]
 8009f5c:	ea42 1504 	orr.w	r5, r2, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f60:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009f62:	61c6      	str	r6, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009f64:	684a      	ldr	r2, [r1, #4]
 8009f66:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f68:	6203      	str	r3, [r0, #32]
}
 8009f6a:	bc70      	pop	{r4, r5, r6}
 8009f6c:	4770      	bx	lr
 8009f6e:	bf00      	nop
 8009f70:	fffeff8c 	.word	0xfffeff8c
 8009f74:	40010000 	.word	0x40010000
 8009f78:	40010400 	.word	0x40010400
 8009f7c:	40014400 	.word	0x40014400
 8009f80:	40014000 	.word	0x40014000
 8009f84:	40014800 	.word	0x40014800

08009f88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f88:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009f8a:	6a03      	ldr	r3, [r0, #32]
 8009f8c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009f90:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f92:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f94:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f96:	69c5      	ldr	r5, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009f98:	4a14      	ldr	r2, [pc, #80]	@ (8009fec <TIM_OC4_SetConfig+0x64>)
 8009f9a:	402a      	ands	r2, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f9c:	680d      	ldr	r5, [r1, #0]
 8009f9e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009fa2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009fa6:	688d      	ldr	r5, [r1, #8]
 8009fa8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fac:	4e10      	ldr	r6, [pc, #64]	@ (8009ff0 <TIM_OC4_SetConfig+0x68>)
 8009fae:	4d11      	ldr	r5, [pc, #68]	@ (8009ff4 <TIM_OC4_SetConfig+0x6c>)
 8009fb0:	42a8      	cmp	r0, r5
 8009fb2:	bf18      	it	ne
 8009fb4:	42b0      	cmpne	r0, r6
 8009fb6:	d00d      	beq.n	8009fd4 <TIM_OC4_SetConfig+0x4c>
 8009fb8:	f505 4580 	add.w	r5, r5, #16384	@ 0x4000
 8009fbc:	42a8      	cmp	r0, r5
 8009fbe:	bf14      	ite	ne
 8009fc0:	2500      	movne	r5, #0
 8009fc2:	2501      	moveq	r5, #1
 8009fc4:	f506 4680 	add.w	r6, r6, #16384	@ 0x4000
 8009fc8:	42b0      	cmp	r0, r6
 8009fca:	d003      	beq.n	8009fd4 <TIM_OC4_SetConfig+0x4c>
 8009fcc:	b915      	cbnz	r5, 8009fd4 <TIM_OC4_SetConfig+0x4c>
 8009fce:	4d0a      	ldr	r5, [pc, #40]	@ (8009ff8 <TIM_OC4_SetConfig+0x70>)
 8009fd0:	42a8      	cmp	r0, r5
 8009fd2:	d104      	bne.n	8009fde <TIM_OC4_SetConfig+0x56>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009fd4:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009fd8:	694d      	ldr	r5, [r1, #20]
 8009fda:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fde:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009fe0:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009fe2:	684a      	ldr	r2, [r1, #4]
 8009fe4:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fe6:	6203      	str	r3, [r0, #32]
}
 8009fe8:	bc70      	pop	{r4, r5, r6}
 8009fea:	4770      	bx	lr
 8009fec:	feff8cff 	.word	0xfeff8cff
 8009ff0:	40010000 	.word	0x40010000
 8009ff4:	40010400 	.word	0x40010400
 8009ff8:	40014800 	.word	0x40014800

08009ffc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009ffc:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009ffe:	6a03      	ldr	r3, [r0, #32]
 800a000:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a004:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a006:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a008:	6842      	ldr	r2, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a00a:	6d45      	ldr	r5, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a00c:	4e14      	ldr	r6, [pc, #80]	@ (800a060 <TIM_OC5_SetConfig+0x64>)
 800a00e:	402e      	ands	r6, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a010:	680d      	ldr	r5, [r1, #0]
 800a012:	432e      	orrs	r6, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a014:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a018:	688c      	ldr	r4, [r1, #8]
 800a01a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a01e:	4d11      	ldr	r5, [pc, #68]	@ (800a064 <TIM_OC5_SetConfig+0x68>)
 800a020:	4c11      	ldr	r4, [pc, #68]	@ (800a068 <TIM_OC5_SetConfig+0x6c>)
 800a022:	42a0      	cmp	r0, r4
 800a024:	bf18      	it	ne
 800a026:	42a8      	cmpne	r0, r5
 800a028:	d00d      	beq.n	800a046 <TIM_OC5_SetConfig+0x4a>
 800a02a:	f504 4480 	add.w	r4, r4, #16384	@ 0x4000
 800a02e:	42a0      	cmp	r0, r4
 800a030:	bf14      	ite	ne
 800a032:	2400      	movne	r4, #0
 800a034:	2401      	moveq	r4, #1
 800a036:	f505 4580 	add.w	r5, r5, #16384	@ 0x4000
 800a03a:	42a8      	cmp	r0, r5
 800a03c:	d003      	beq.n	800a046 <TIM_OC5_SetConfig+0x4a>
 800a03e:	b914      	cbnz	r4, 800a046 <TIM_OC5_SetConfig+0x4a>
 800a040:	4c0a      	ldr	r4, [pc, #40]	@ (800a06c <TIM_OC5_SetConfig+0x70>)
 800a042:	42a0      	cmp	r0, r4
 800a044:	d104      	bne.n	800a050 <TIM_OC5_SetConfig+0x54>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a046:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a04a:	694c      	ldr	r4, [r1, #20]
 800a04c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a050:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a052:	6546      	str	r6, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a054:	684a      	ldr	r2, [r1, #4]
 800a056:	6582      	str	r2, [r0, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a058:	6203      	str	r3, [r0, #32]
}
 800a05a:	bc70      	pop	{r4, r5, r6}
 800a05c:	4770      	bx	lr
 800a05e:	bf00      	nop
 800a060:	fffeff8f 	.word	0xfffeff8f
 800a064:	40010000 	.word	0x40010000
 800a068:	40010400 	.word	0x40010400
 800a06c:	40014800 	.word	0x40014800

0800a070 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a070:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a072:	6a03      	ldr	r3, [r0, #32]
 800a074:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a078:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a07a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a07c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a07e:	6d45      	ldr	r5, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a080:	4a14      	ldr	r2, [pc, #80]	@ (800a0d4 <TIM_OC6_SetConfig+0x64>)
 800a082:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a084:	680d      	ldr	r5, [r1, #0]
 800a086:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a08a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a08e:	688d      	ldr	r5, [r1, #8]
 800a090:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a094:	4e10      	ldr	r6, [pc, #64]	@ (800a0d8 <TIM_OC6_SetConfig+0x68>)
 800a096:	4d11      	ldr	r5, [pc, #68]	@ (800a0dc <TIM_OC6_SetConfig+0x6c>)
 800a098:	42a8      	cmp	r0, r5
 800a09a:	bf18      	it	ne
 800a09c:	42b0      	cmpne	r0, r6
 800a09e:	d00d      	beq.n	800a0bc <TIM_OC6_SetConfig+0x4c>
 800a0a0:	f505 4580 	add.w	r5, r5, #16384	@ 0x4000
 800a0a4:	42a8      	cmp	r0, r5
 800a0a6:	bf14      	ite	ne
 800a0a8:	2500      	movne	r5, #0
 800a0aa:	2501      	moveq	r5, #1
 800a0ac:	f506 4680 	add.w	r6, r6, #16384	@ 0x4000
 800a0b0:	42b0      	cmp	r0, r6
 800a0b2:	d003      	beq.n	800a0bc <TIM_OC6_SetConfig+0x4c>
 800a0b4:	b915      	cbnz	r5, 800a0bc <TIM_OC6_SetConfig+0x4c>
 800a0b6:	4d0a      	ldr	r5, [pc, #40]	@ (800a0e0 <TIM_OC6_SetConfig+0x70>)
 800a0b8:	42a8      	cmp	r0, r5
 800a0ba:	d104      	bne.n	800a0c6 <TIM_OC6_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a0bc:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a0c0:	694d      	ldr	r5, [r1, #20]
 800a0c2:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0c6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a0c8:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a0ca:	684a      	ldr	r2, [r1, #4]
 800a0cc:	65c2      	str	r2, [r0, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0ce:	6203      	str	r3, [r0, #32]
}
 800a0d0:	bc70      	pop	{r4, r5, r6}
 800a0d2:	4770      	bx	lr
 800a0d4:	feff8fff 	.word	0xfeff8fff
 800a0d8:	40010000 	.word	0x40010000
 800a0dc:	40010400 	.word	0x40010400
 800a0e0:	40014800 	.word	0x40014800

0800a0e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a0e4:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a0e6:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a0e8:	6a04      	ldr	r4, [r0, #32]
 800a0ea:	f024 0401 	bic.w	r4, r4, #1
 800a0ee:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a0f0:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a0f2:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a0f6:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a0fa:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800a0fe:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a100:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800a102:	6203      	str	r3, [r0, #32]
}
 800a104:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a108:	4770      	bx	lr

0800a10a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a10a:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a10c:	6a03      	ldr	r3, [r0, #32]
 800a10e:	f023 0310 	bic.w	r3, r3, #16
 800a112:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a114:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800a116:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a118:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a11c:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a120:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800a124:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a128:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800a12a:	6203      	str	r3, [r0, #32]
}
 800a12c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a130:	4770      	bx	lr
	...

0800a134 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a134:	6882      	ldr	r2, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a136:	4b03      	ldr	r3, [pc, #12]	@ (800a144 <TIM_ITRx_SetConfig+0x10>)
 800a138:	4013      	ands	r3, r2
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a13a:	430b      	orrs	r3, r1
 800a13c:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a140:	6083      	str	r3, [r0, #8]
}
 800a142:	4770      	bx	lr
 800a144:	ffcfff8f 	.word	0xffcfff8f

0800a148 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800a148:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800a14c:	b2db      	uxtb	r3, r3
 800a14e:	2b01      	cmp	r3, #1
 800a150:	d13a      	bne.n	800a1c8 <HAL_TIM_Base_Start_IT+0x80>
  htim->State = HAL_TIM_STATE_BUSY;
 800a152:	2302      	movs	r3, #2
 800a154:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a158:	6802      	ldr	r2, [r0, #0]
 800a15a:	68d3      	ldr	r3, [r2, #12]
 800a15c:	f043 0301 	orr.w	r3, r3, #1
 800a160:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a162:	6803      	ldr	r3, [r0, #0]
 800a164:	4a1a      	ldr	r2, [pc, #104]	@ (800a1d0 <HAL_TIM_Base_Start_IT+0x88>)
 800a166:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a16a:	bf18      	it	ne
 800a16c:	4293      	cmpne	r3, r2
 800a16e:	d01d      	beq.n	800a1ac <HAL_TIM_Base_Start_IT+0x64>
 800a170:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800a174:	4293      	cmp	r3, r2
 800a176:	d019      	beq.n	800a1ac <HAL_TIM_Base_Start_IT+0x64>
 800a178:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d015      	beq.n	800a1ac <HAL_TIM_Base_Start_IT+0x64>
 800a180:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a184:	4293      	cmp	r3, r2
 800a186:	d011      	beq.n	800a1ac <HAL_TIM_Base_Start_IT+0x64>
 800a188:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d00d      	beq.n	800a1ac <HAL_TIM_Base_Start_IT+0x64>
 800a190:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800a194:	4293      	cmp	r3, r2
 800a196:	d009      	beq.n	800a1ac <HAL_TIM_Base_Start_IT+0x64>
 800a198:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d005      	beq.n	800a1ac <HAL_TIM_Base_Start_IT+0x64>
    __HAL_TIM_ENABLE(htim);
 800a1a0:	681a      	ldr	r2, [r3, #0]
 800a1a2:	f042 0201 	orr.w	r2, r2, #1
 800a1a6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800a1a8:	2000      	movs	r0, #0
 800a1aa:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a1ac:	6899      	ldr	r1, [r3, #8]
 800a1ae:	4a09      	ldr	r2, [pc, #36]	@ (800a1d4 <HAL_TIM_Base_Start_IT+0x8c>)
 800a1b0:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1b2:	2a06      	cmp	r2, #6
 800a1b4:	bf18      	it	ne
 800a1b6:	f5b2 3f80 	cmpne.w	r2, #65536	@ 0x10000
 800a1ba:	d007      	beq.n	800a1cc <HAL_TIM_Base_Start_IT+0x84>
      __HAL_TIM_ENABLE(htim);
 800a1bc:	681a      	ldr	r2, [r3, #0]
 800a1be:	f042 0201 	orr.w	r2, r2, #1
 800a1c2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800a1c4:	2000      	movs	r0, #0
 800a1c6:	4770      	bx	lr
    return HAL_ERROR;
 800a1c8:	2001      	movs	r0, #1
 800a1ca:	4770      	bx	lr
  return HAL_OK;
 800a1cc:	2000      	movs	r0, #0
}
 800a1ce:	4770      	bx	lr
 800a1d0:	40010000 	.word	0x40010000
 800a1d4:	00010007 	.word	0x00010007

0800a1d8 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a1d8:	6802      	ldr	r2, [r0, #0]
 800a1da:	68d3      	ldr	r3, [r2, #12]
 800a1dc:	f023 0301 	bic.w	r3, r3, #1
 800a1e0:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 800a1e2:	6803      	ldr	r3, [r0, #0]
 800a1e4:	6a19      	ldr	r1, [r3, #32]
 800a1e6:	f241 1211 	movw	r2, #4369	@ 0x1111
 800a1ea:	4211      	tst	r1, r2
 800a1ec:	d108      	bne.n	800a200 <HAL_TIM_Base_Stop_IT+0x28>
 800a1ee:	6a19      	ldr	r1, [r3, #32]
 800a1f0:	f240 4244 	movw	r2, #1092	@ 0x444
 800a1f4:	4211      	tst	r1, r2
 800a1f6:	d103      	bne.n	800a200 <HAL_TIM_Base_Stop_IT+0x28>
 800a1f8:	681a      	ldr	r2, [r3, #0]
 800a1fa:	f022 0201 	bic.w	r2, r2, #1
 800a1fe:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800a200:	2301      	movs	r3, #1
 800a202:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
}
 800a206:	2000      	movs	r0, #0
 800a208:	4770      	bx	lr

0800a20a <HAL_TIM_PWM_MspInit>:
}
 800a20a:	4770      	bx	lr

0800a20c <HAL_TIM_OC_DelayElapsedCallback>:
}
 800a20c:	4770      	bx	lr

0800a20e <HAL_TIM_IC_CaptureCallback>:
}
 800a20e:	4770      	bx	lr

0800a210 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 800a210:	4770      	bx	lr

0800a212 <HAL_TIM_TriggerCallback>:
}
 800a212:	4770      	bx	lr

0800a214 <HAL_TIM_IRQHandler>:
{
 800a214:	b510      	push	{r4, lr}
 800a216:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a218:	6803      	ldr	r3, [r0, #0]
 800a21a:	691a      	ldr	r2, [r3, #16]
 800a21c:	f012 0f02 	tst.w	r2, #2
 800a220:	d011      	beq.n	800a246 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a222:	68da      	ldr	r2, [r3, #12]
 800a224:	f012 0f02 	tst.w	r2, #2
 800a228:	d00d      	beq.n	800a246 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a22a:	f06f 0202 	mvn.w	r2, #2
 800a22e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a230:	2301      	movs	r3, #1
 800a232:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a234:	6803      	ldr	r3, [r0, #0]
 800a236:	699b      	ldr	r3, [r3, #24]
 800a238:	f013 0f03 	tst.w	r3, #3
 800a23c:	d079      	beq.n	800a332 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 800a23e:	f7ff ffe6 	bl	800a20e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a242:	2300      	movs	r3, #0
 800a244:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a246:	6823      	ldr	r3, [r4, #0]
 800a248:	691a      	ldr	r2, [r3, #16]
 800a24a:	f012 0f04 	tst.w	r2, #4
 800a24e:	d012      	beq.n	800a276 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a250:	68da      	ldr	r2, [r3, #12]
 800a252:	f012 0f04 	tst.w	r2, #4
 800a256:	d00e      	beq.n	800a276 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a258:	f06f 0204 	mvn.w	r2, #4
 800a25c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a25e:	2302      	movs	r3, #2
 800a260:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a262:	6823      	ldr	r3, [r4, #0]
 800a264:	699b      	ldr	r3, [r3, #24]
 800a266:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800a26a:	d068      	beq.n	800a33e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800a26c:	4620      	mov	r0, r4
 800a26e:	f7ff ffce 	bl	800a20e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a272:	2300      	movs	r3, #0
 800a274:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a276:	6823      	ldr	r3, [r4, #0]
 800a278:	691a      	ldr	r2, [r3, #16]
 800a27a:	f012 0f08 	tst.w	r2, #8
 800a27e:	d012      	beq.n	800a2a6 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a280:	68da      	ldr	r2, [r3, #12]
 800a282:	f012 0f08 	tst.w	r2, #8
 800a286:	d00e      	beq.n	800a2a6 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a288:	f06f 0208 	mvn.w	r2, #8
 800a28c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a28e:	2304      	movs	r3, #4
 800a290:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a292:	6823      	ldr	r3, [r4, #0]
 800a294:	69db      	ldr	r3, [r3, #28]
 800a296:	f013 0f03 	tst.w	r3, #3
 800a29a:	d057      	beq.n	800a34c <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 800a29c:	4620      	mov	r0, r4
 800a29e:	f7ff ffb6 	bl	800a20e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a2a6:	6823      	ldr	r3, [r4, #0]
 800a2a8:	691a      	ldr	r2, [r3, #16]
 800a2aa:	f012 0f10 	tst.w	r2, #16
 800a2ae:	d012      	beq.n	800a2d6 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a2b0:	68da      	ldr	r2, [r3, #12]
 800a2b2:	f012 0f10 	tst.w	r2, #16
 800a2b6:	d00e      	beq.n	800a2d6 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a2b8:	f06f 0210 	mvn.w	r2, #16
 800a2bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a2be:	2308      	movs	r3, #8
 800a2c0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a2c2:	6823      	ldr	r3, [r4, #0]
 800a2c4:	69db      	ldr	r3, [r3, #28]
 800a2c6:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800a2ca:	d046      	beq.n	800a35a <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800a2cc:	4620      	mov	r0, r4
 800a2ce:	f7ff ff9e 	bl	800a20e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a2d6:	6823      	ldr	r3, [r4, #0]
 800a2d8:	691a      	ldr	r2, [r3, #16]
 800a2da:	f012 0f01 	tst.w	r2, #1
 800a2de:	d003      	beq.n	800a2e8 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a2e0:	68da      	ldr	r2, [r3, #12]
 800a2e2:	f012 0f01 	tst.w	r2, #1
 800a2e6:	d13f      	bne.n	800a368 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a2e8:	6823      	ldr	r3, [r4, #0]
 800a2ea:	691a      	ldr	r2, [r3, #16]
 800a2ec:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800a2f0:	d003      	beq.n	800a2fa <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a2f2:	68da      	ldr	r2, [r3, #12]
 800a2f4:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800a2f8:	d13d      	bne.n	800a376 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a2fa:	6823      	ldr	r3, [r4, #0]
 800a2fc:	691a      	ldr	r2, [r3, #16]
 800a2fe:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800a302:	d003      	beq.n	800a30c <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a304:	68da      	ldr	r2, [r3, #12]
 800a306:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800a30a:	d13b      	bne.n	800a384 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a30c:	6823      	ldr	r3, [r4, #0]
 800a30e:	691a      	ldr	r2, [r3, #16]
 800a310:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800a314:	d003      	beq.n	800a31e <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a316:	68da      	ldr	r2, [r3, #12]
 800a318:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800a31c:	d139      	bne.n	800a392 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a31e:	6823      	ldr	r3, [r4, #0]
 800a320:	691a      	ldr	r2, [r3, #16]
 800a322:	f012 0f20 	tst.w	r2, #32
 800a326:	d003      	beq.n	800a330 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a328:	68da      	ldr	r2, [r3, #12]
 800a32a:	f012 0f20 	tst.w	r2, #32
 800a32e:	d137      	bne.n	800a3a0 <HAL_TIM_IRQHandler+0x18c>
}
 800a330:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a332:	f7ff ff6b 	bl	800a20c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a336:	4620      	mov	r0, r4
 800a338:	f7ff ff6a 	bl	800a210 <HAL_TIM_PWM_PulseFinishedCallback>
 800a33c:	e781      	b.n	800a242 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a33e:	4620      	mov	r0, r4
 800a340:	f7ff ff64 	bl	800a20c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a344:	4620      	mov	r0, r4
 800a346:	f7ff ff63 	bl	800a210 <HAL_TIM_PWM_PulseFinishedCallback>
 800a34a:	e792      	b.n	800a272 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a34c:	4620      	mov	r0, r4
 800a34e:	f7ff ff5d 	bl	800a20c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a352:	4620      	mov	r0, r4
 800a354:	f7ff ff5c 	bl	800a210 <HAL_TIM_PWM_PulseFinishedCallback>
 800a358:	e7a3      	b.n	800a2a2 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a35a:	4620      	mov	r0, r4
 800a35c:	f7ff ff56 	bl	800a20c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a360:	4620      	mov	r0, r4
 800a362:	f7ff ff55 	bl	800a210 <HAL_TIM_PWM_PulseFinishedCallback>
 800a366:	e7b4      	b.n	800a2d2 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a368:	f06f 0201 	mvn.w	r2, #1
 800a36c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800a36e:	4620      	mov	r0, r4
 800a370:	f7f6 fc36 	bl	8000be0 <HAL_TIM_PeriodElapsedCallback>
 800a374:	e7b8      	b.n	800a2e8 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a376:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a37a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800a37c:	4620      	mov	r0, r4
 800a37e:	f000 fba2 	bl	800aac6 <HAL_TIMEx_BreakCallback>
 800a382:	e7ba      	b.n	800a2fa <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a384:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a388:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800a38a:	4620      	mov	r0, r4
 800a38c:	f000 fb9c 	bl	800aac8 <HAL_TIMEx_Break2Callback>
 800a390:	e7bc      	b.n	800a30c <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a392:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a396:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800a398:	4620      	mov	r0, r4
 800a39a:	f7ff ff3a 	bl	800a212 <HAL_TIM_TriggerCallback>
 800a39e:	e7be      	b.n	800a31e <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a3a0:	f06f 0220 	mvn.w	r2, #32
 800a3a4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800a3a6:	4620      	mov	r0, r4
 800a3a8:	f000 fb8c 	bl	800aac4 <HAL_TIMEx_CommutCallback>
}
 800a3ac:	e7c0      	b.n	800a330 <HAL_TIM_IRQHandler+0x11c>
	...

0800a3b0 <TIM_Base_SetConfig>:
{
 800a3b0:	b530      	push	{r4, r5, lr}
  tmpcr1 = TIMx->CR1;
 800a3b2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a3b4:	4a39      	ldr	r2, [pc, #228]	@ (800a49c <TIM_Base_SetConfig+0xec>)
 800a3b6:	4290      	cmp	r0, r2
 800a3b8:	bf14      	ite	ne
 800a3ba:	f04f 0e00 	movne.w	lr, #0
 800a3be:	f04f 0e01 	moveq.w	lr, #1
 800a3c2:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800a3c6:	bf14      	ite	ne
 800a3c8:	4672      	movne	r2, lr
 800a3ca:	f04e 0201 	orreq.w	r2, lr, #1
 800a3ce:	b9aa      	cbnz	r2, 800a3fc <TIM_Base_SetConfig+0x4c>
 800a3d0:	4c33      	ldr	r4, [pc, #204]	@ (800a4a0 <TIM_Base_SetConfig+0xf0>)
 800a3d2:	42a0      	cmp	r0, r4
 800a3d4:	bf14      	ite	ne
 800a3d6:	2400      	movne	r4, #0
 800a3d8:	2401      	moveq	r4, #1
 800a3da:	4d32      	ldr	r5, [pc, #200]	@ (800a4a4 <TIM_Base_SetConfig+0xf4>)
 800a3dc:	42a8      	cmp	r0, r5
 800a3de:	d00d      	beq.n	800a3fc <TIM_Base_SetConfig+0x4c>
 800a3e0:	b964      	cbnz	r4, 800a3fc <TIM_Base_SetConfig+0x4c>
 800a3e2:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 800a3e6:	f504 3482 	add.w	r4, r4, #66560	@ 0x10400
 800a3ea:	42a0      	cmp	r0, r4
 800a3ec:	bf14      	ite	ne
 800a3ee:	2400      	movne	r4, #0
 800a3f0:	2401      	moveq	r4, #1
 800a3f2:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 800a3f6:	42a8      	cmp	r0, r5
 800a3f8:	d000      	beq.n	800a3fc <TIM_Base_SetConfig+0x4c>
 800a3fa:	b11c      	cbz	r4, 800a404 <TIM_Base_SetConfig+0x54>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a3fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800a400:	684c      	ldr	r4, [r1, #4]
 800a402:	4323      	orrs	r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a404:	bb12      	cbnz	r2, 800a44c <TIM_Base_SetConfig+0x9c>
 800a406:	4a26      	ldr	r2, [pc, #152]	@ (800a4a0 <TIM_Base_SetConfig+0xf0>)
 800a408:	4290      	cmp	r0, r2
 800a40a:	bf14      	ite	ne
 800a40c:	2200      	movne	r2, #0
 800a40e:	2201      	moveq	r2, #1
 800a410:	4c24      	ldr	r4, [pc, #144]	@ (800a4a4 <TIM_Base_SetConfig+0xf4>)
 800a412:	42a0      	cmp	r0, r4
 800a414:	d01a      	beq.n	800a44c <TIM_Base_SetConfig+0x9c>
 800a416:	b9ca      	cbnz	r2, 800a44c <TIM_Base_SetConfig+0x9c>
 800a418:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800a41c:	f502 3282 	add.w	r2, r2, #66560	@ 0x10400
 800a420:	4290      	cmp	r0, r2
 800a422:	bf14      	ite	ne
 800a424:	2200      	movne	r2, #0
 800a426:	2201      	moveq	r2, #1
 800a428:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
 800a42c:	42a0      	cmp	r0, r4
 800a42e:	d00d      	beq.n	800a44c <TIM_Base_SetConfig+0x9c>
 800a430:	b962      	cbnz	r2, 800a44c <TIM_Base_SetConfig+0x9c>
 800a432:	4a1d      	ldr	r2, [pc, #116]	@ (800a4a8 <TIM_Base_SetConfig+0xf8>)
 800a434:	4290      	cmp	r0, r2
 800a436:	bf14      	ite	ne
 800a438:	2200      	movne	r2, #0
 800a43a:	2201      	moveq	r2, #1
 800a43c:	f504 349a 	add.w	r4, r4, #78848	@ 0x13400
 800a440:	42a0      	cmp	r0, r4
 800a442:	d003      	beq.n	800a44c <TIM_Base_SetConfig+0x9c>
 800a444:	b912      	cbnz	r2, 800a44c <TIM_Base_SetConfig+0x9c>
 800a446:	4a19      	ldr	r2, [pc, #100]	@ (800a4ac <TIM_Base_SetConfig+0xfc>)
 800a448:	4290      	cmp	r0, r2
 800a44a:	d104      	bne.n	800a456 <TIM_Base_SetConfig+0xa6>
    tmpcr1 &= ~TIM_CR1_CKD;
 800a44c:	f423 7c40 	bic.w	ip, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a450:	68cb      	ldr	r3, [r1, #12]
 800a452:	ea43 030c 	orr.w	r3, r3, ip
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a456:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a45a:	694a      	ldr	r2, [r1, #20]
 800a45c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800a45e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a460:	688a      	ldr	r2, [r1, #8]
 800a462:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800a464:	680a      	ldr	r2, [r1, #0]
 800a466:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a468:	4a11      	ldr	r2, [pc, #68]	@ (800a4b0 <TIM_Base_SetConfig+0x100>)
 800a46a:	4290      	cmp	r0, r2
 800a46c:	bf14      	ite	ne
 800a46e:	4673      	movne	r3, lr
 800a470:	f04e 0301 	orreq.w	r3, lr, #1
 800a474:	b963      	cbnz	r3, 800a490 <TIM_Base_SetConfig+0xe0>
 800a476:	4b0c      	ldr	r3, [pc, #48]	@ (800a4a8 <TIM_Base_SetConfig+0xf8>)
 800a478:	4298      	cmp	r0, r3
 800a47a:	bf14      	ite	ne
 800a47c:	2300      	movne	r3, #0
 800a47e:	2301      	moveq	r3, #1
 800a480:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800a484:	4290      	cmp	r0, r2
 800a486:	d003      	beq.n	800a490 <TIM_Base_SetConfig+0xe0>
 800a488:	b913      	cbnz	r3, 800a490 <TIM_Base_SetConfig+0xe0>
 800a48a:	4b08      	ldr	r3, [pc, #32]	@ (800a4ac <TIM_Base_SetConfig+0xfc>)
 800a48c:	4298      	cmp	r0, r3
 800a48e:	d101      	bne.n	800a494 <TIM_Base_SetConfig+0xe4>
    TIMx->RCR = Structure->RepetitionCounter;
 800a490:	690b      	ldr	r3, [r1, #16]
 800a492:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 800a494:	2301      	movs	r3, #1
 800a496:	6143      	str	r3, [r0, #20]
}
 800a498:	bd30      	pop	{r4, r5, pc}
 800a49a:	bf00      	nop
 800a49c:	40010000 	.word	0x40010000
 800a4a0:	40000800 	.word	0x40000800
 800a4a4:	40000400 	.word	0x40000400
 800a4a8:	40014400 	.word	0x40014400
 800a4ac:	40014800 	.word	0x40014800
 800a4b0:	40010400 	.word	0x40010400

0800a4b4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800a4b4:	b360      	cbz	r0, 800a510 <HAL_TIM_Base_Init+0x5c>
{
 800a4b6:	b510      	push	{r4, lr}
 800a4b8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800a4ba:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800a4be:	b313      	cbz	r3, 800a506 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800a4c0:	2302      	movs	r3, #2
 800a4c2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a4c6:	4621      	mov	r1, r4
 800a4c8:	f851 0b04 	ldr.w	r0, [r1], #4
 800a4cc:	f7ff ff70 	bl	800a3b0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4d6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800a4da:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800a4de:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800a4e2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800a4e6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a4ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4ee:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800a4f2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800a4f6:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800a4fa:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800a4fe:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800a502:	2000      	movs	r0, #0
}
 800a504:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800a506:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800a50a:	f7f8 f969 	bl	80027e0 <HAL_TIM_Base_MspInit>
 800a50e:	e7d7      	b.n	800a4c0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800a510:	2001      	movs	r0, #1
}
 800a512:	4770      	bx	lr

0800a514 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800a514:	b360      	cbz	r0, 800a570 <HAL_TIM_PWM_Init+0x5c>
{
 800a516:	b510      	push	{r4, lr}
 800a518:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800a51a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800a51e:	b313      	cbz	r3, 800a566 <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800a520:	2302      	movs	r3, #2
 800a522:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a526:	4621      	mov	r1, r4
 800a528:	f851 0b04 	ldr.w	r0, [r1], #4
 800a52c:	f7ff ff40 	bl	800a3b0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a530:	2301      	movs	r3, #1
 800a532:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a536:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800a53a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800a53e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800a542:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800a546:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a54a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a54e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800a552:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800a556:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800a55a:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800a55e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800a562:	2000      	movs	r0, #0
}
 800a564:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800a566:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800a56a:	f7ff fe4e 	bl	800a20a <HAL_TIM_PWM_MspInit>
 800a56e:	e7d7      	b.n	800a520 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 800a570:	2001      	movs	r0, #1
}
 800a572:	4770      	bx	lr

0800a574 <TIM_OC2_SetConfig>:
{
 800a574:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a576:	6a03      	ldr	r3, [r0, #32]
 800a578:	f023 0310 	bic.w	r3, r3, #16
 800a57c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800a57e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800a580:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800a582:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a584:	4e1a      	ldr	r6, [pc, #104]	@ (800a5f0 <TIM_OC2_SetConfig+0x7c>)
 800a586:	4026      	ands	r6, r4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a588:	680c      	ldr	r4, [r1, #0]
 800a58a:	ea46 2604 	orr.w	r6, r6, r4, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800a58e:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a592:	688a      	ldr	r2, [r1, #8]
 800a594:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a598:	4a16      	ldr	r2, [pc, #88]	@ (800a5f4 <TIM_OC2_SetConfig+0x80>)
 800a59a:	4c17      	ldr	r4, [pc, #92]	@ (800a5f8 <TIM_OC2_SetConfig+0x84>)
 800a59c:	42a0      	cmp	r0, r4
 800a59e:	bf18      	it	ne
 800a5a0:	4290      	cmpne	r0, r2
 800a5a2:	bf0c      	ite	eq
 800a5a4:	2201      	moveq	r2, #1
 800a5a6:	2200      	movne	r2, #0
 800a5a8:	d106      	bne.n	800a5b8 <TIM_OC2_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC2NP;
 800a5aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a5ae:	68cc      	ldr	r4, [r1, #12]
 800a5b0:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800a5b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a5b8:	b95a      	cbnz	r2, 800a5d2 <TIM_OC2_SetConfig+0x5e>
 800a5ba:	4a10      	ldr	r2, [pc, #64]	@ (800a5fc <TIM_OC2_SetConfig+0x88>)
 800a5bc:	4290      	cmp	r0, r2
 800a5be:	bf14      	ite	ne
 800a5c0:	2200      	movne	r2, #0
 800a5c2:	2201      	moveq	r2, #1
 800a5c4:	4c0e      	ldr	r4, [pc, #56]	@ (800a600 <TIM_OC2_SetConfig+0x8c>)
 800a5c6:	42a0      	cmp	r0, r4
 800a5c8:	d003      	beq.n	800a5d2 <TIM_OC2_SetConfig+0x5e>
 800a5ca:	b912      	cbnz	r2, 800a5d2 <TIM_OC2_SetConfig+0x5e>
 800a5cc:	4a0d      	ldr	r2, [pc, #52]	@ (800a604 <TIM_OC2_SetConfig+0x90>)
 800a5ce:	4290      	cmp	r0, r2
 800a5d0:	d107      	bne.n	800a5e2 <TIM_OC2_SetConfig+0x6e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a5d2:	f425 6c40 	bic.w	ip, r5, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a5d6:	694a      	ldr	r2, [r1, #20]
 800a5d8:	ea4c 0c82 	orr.w	ip, ip, r2, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a5dc:	698a      	ldr	r2, [r1, #24]
 800a5de:	ea4c 0582 	orr.w	r5, ip, r2, lsl #2
  TIMx->CR2 = tmpcr2;
 800a5e2:	6045      	str	r5, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800a5e4:	6186      	str	r6, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800a5e6:	684a      	ldr	r2, [r1, #4]
 800a5e8:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 800a5ea:	6203      	str	r3, [r0, #32]
}
 800a5ec:	bc70      	pop	{r4, r5, r6}
 800a5ee:	4770      	bx	lr
 800a5f0:	feff8cff 	.word	0xfeff8cff
 800a5f4:	40010000 	.word	0x40010000
 800a5f8:	40010400 	.word	0x40010400
 800a5fc:	40014400 	.word	0x40014400
 800a600:	40014000 	.word	0x40014000
 800a604:	40014800 	.word	0x40014800

0800a608 <HAL_TIM_PWM_ConfigChannel>:
{
 800a608:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800a60a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800a60e:	2b01      	cmp	r3, #1
 800a610:	f000 8095 	beq.w	800a73e <HAL_TIM_PWM_ConfigChannel+0x136>
 800a614:	4604      	mov	r4, r0
 800a616:	460d      	mov	r5, r1
 800a618:	2301      	movs	r3, #1
 800a61a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 800a61e:	2a14      	cmp	r2, #20
 800a620:	f200 8088 	bhi.w	800a734 <HAL_TIM_PWM_ConfigChannel+0x12c>
 800a624:	e8df f002 	tbb	[pc, r2]
 800a628:	8686860b 	.word	0x8686860b
 800a62c:	8686861f 	.word	0x8686861f
 800a630:	86868634 	.word	0x86868634
 800a634:	86868648 	.word	0x86868648
 800a638:	8686865d 	.word	0x8686865d
 800a63c:	71          	.byte	0x71
 800a63d:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a63e:	6800      	ldr	r0, [r0, #0]
 800a640:	f7ff fc06 	bl	8009e50 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a644:	6822      	ldr	r2, [r4, #0]
 800a646:	6993      	ldr	r3, [r2, #24]
 800a648:	f043 0308 	orr.w	r3, r3, #8
 800a64c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a64e:	6822      	ldr	r2, [r4, #0]
 800a650:	6993      	ldr	r3, [r2, #24]
 800a652:	f023 0304 	bic.w	r3, r3, #4
 800a656:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a658:	6822      	ldr	r2, [r4, #0]
 800a65a:	6993      	ldr	r3, [r2, #24]
 800a65c:	6929      	ldr	r1, [r5, #16]
 800a65e:	430b      	orrs	r3, r1
 800a660:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800a662:	2000      	movs	r0, #0
      break;
 800a664:	e067      	b.n	800a736 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a666:	6800      	ldr	r0, [r0, #0]
 800a668:	f7ff ff84 	bl	800a574 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a66c:	6822      	ldr	r2, [r4, #0]
 800a66e:	6993      	ldr	r3, [r2, #24]
 800a670:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a674:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a676:	6822      	ldr	r2, [r4, #0]
 800a678:	6993      	ldr	r3, [r2, #24]
 800a67a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a67e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a680:	6822      	ldr	r2, [r4, #0]
 800a682:	6993      	ldr	r3, [r2, #24]
 800a684:	6929      	ldr	r1, [r5, #16]
 800a686:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800a68a:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800a68c:	2000      	movs	r0, #0
      break;
 800a68e:	e052      	b.n	800a736 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a690:	6800      	ldr	r0, [r0, #0]
 800a692:	f7ff fc2f 	bl	8009ef4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a696:	6822      	ldr	r2, [r4, #0]
 800a698:	69d3      	ldr	r3, [r2, #28]
 800a69a:	f043 0308 	orr.w	r3, r3, #8
 800a69e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a6a0:	6822      	ldr	r2, [r4, #0]
 800a6a2:	69d3      	ldr	r3, [r2, #28]
 800a6a4:	f023 0304 	bic.w	r3, r3, #4
 800a6a8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a6aa:	6822      	ldr	r2, [r4, #0]
 800a6ac:	69d3      	ldr	r3, [r2, #28]
 800a6ae:	6929      	ldr	r1, [r5, #16]
 800a6b0:	430b      	orrs	r3, r1
 800a6b2:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800a6b4:	2000      	movs	r0, #0
      break;
 800a6b6:	e03e      	b.n	800a736 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a6b8:	6800      	ldr	r0, [r0, #0]
 800a6ba:	f7ff fc65 	bl	8009f88 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a6be:	6822      	ldr	r2, [r4, #0]
 800a6c0:	69d3      	ldr	r3, [r2, #28]
 800a6c2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a6c6:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a6c8:	6822      	ldr	r2, [r4, #0]
 800a6ca:	69d3      	ldr	r3, [r2, #28]
 800a6cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a6d0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a6d2:	6822      	ldr	r2, [r4, #0]
 800a6d4:	69d3      	ldr	r3, [r2, #28]
 800a6d6:	6929      	ldr	r1, [r5, #16]
 800a6d8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800a6dc:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800a6de:	2000      	movs	r0, #0
      break;
 800a6e0:	e029      	b.n	800a736 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a6e2:	6800      	ldr	r0, [r0, #0]
 800a6e4:	f7ff fc8a 	bl	8009ffc <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a6e8:	6822      	ldr	r2, [r4, #0]
 800a6ea:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a6ec:	f043 0308 	orr.w	r3, r3, #8
 800a6f0:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a6f2:	6822      	ldr	r2, [r4, #0]
 800a6f4:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a6f6:	f023 0304 	bic.w	r3, r3, #4
 800a6fa:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a6fc:	6822      	ldr	r2, [r4, #0]
 800a6fe:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a700:	6929      	ldr	r1, [r5, #16]
 800a702:	430b      	orrs	r3, r1
 800a704:	6553      	str	r3, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 800a706:	2000      	movs	r0, #0
      break;
 800a708:	e015      	b.n	800a736 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a70a:	6800      	ldr	r0, [r0, #0]
 800a70c:	f7ff fcb0 	bl	800a070 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a710:	6822      	ldr	r2, [r4, #0]
 800a712:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a714:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a718:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a71a:	6822      	ldr	r2, [r4, #0]
 800a71c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a71e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a722:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a724:	6822      	ldr	r2, [r4, #0]
 800a726:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a728:	6929      	ldr	r1, [r5, #16]
 800a72a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800a72e:	6553      	str	r3, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 800a730:	2000      	movs	r0, #0
      break;
 800a732:	e000      	b.n	800a736 <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 800a734:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800a736:	2300      	movs	r3, #0
 800a738:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800a73c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 800a73e:	2002      	movs	r0, #2
 800a740:	e7fc      	b.n	800a73c <HAL_TIM_PWM_ConfigChannel+0x134>

0800a742 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a742:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a744:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a746:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a74a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800a74e:	430a      	orrs	r2, r1
 800a750:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a754:	6082      	str	r2, [r0, #8]
}
 800a756:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a75a:	4770      	bx	lr

0800a75c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800a75c:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800a760:	2b01      	cmp	r3, #1
 800a762:	f000 808f 	beq.w	800a884 <HAL_TIM_ConfigClockSource+0x128>
{
 800a766:	b510      	push	{r4, lr}
 800a768:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800a76a:	2301      	movs	r3, #1
 800a76c:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800a770:	2302      	movs	r3, #2
 800a772:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800a776:	6802      	ldr	r2, [r0, #0]
 800a778:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a77a:	4b43      	ldr	r3, [pc, #268]	@ (800a888 <HAL_TIM_ConfigClockSource+0x12c>)
 800a77c:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 800a77e:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800a780:	680b      	ldr	r3, [r1, #0]
 800a782:	2b70      	cmp	r3, #112	@ 0x70
 800a784:	d055      	beq.n	800a832 <HAL_TIM_ConfigClockSource+0xd6>
 800a786:	d831      	bhi.n	800a7ec <HAL_TIM_ConfigClockSource+0x90>
 800a788:	2b50      	cmp	r3, #80	@ 0x50
 800a78a:	d06c      	beq.n	800a866 <HAL_TIM_ConfigClockSource+0x10a>
 800a78c:	d90c      	bls.n	800a7a8 <HAL_TIM_ConfigClockSource+0x4c>
 800a78e:	2b60      	cmp	r3, #96	@ 0x60
 800a790:	d12a      	bne.n	800a7e8 <HAL_TIM_ConfigClockSource+0x8c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a792:	68ca      	ldr	r2, [r1, #12]
 800a794:	6849      	ldr	r1, [r1, #4]
 800a796:	6820      	ldr	r0, [r4, #0]
 800a798:	f7ff fcb7 	bl	800a10a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a79c:	2160      	movs	r1, #96	@ 0x60
 800a79e:	6820      	ldr	r0, [r4, #0]
 800a7a0:	f7ff fcc8 	bl	800a134 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800a7a4:	2000      	movs	r0, #0
      break;
 800a7a6:	e035      	b.n	800a814 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 800a7a8:	2b40      	cmp	r3, #64	@ 0x40
 800a7aa:	d10a      	bne.n	800a7c2 <HAL_TIM_ConfigClockSource+0x66>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a7ac:	68ca      	ldr	r2, [r1, #12]
 800a7ae:	6849      	ldr	r1, [r1, #4]
 800a7b0:	6820      	ldr	r0, [r4, #0]
 800a7b2:	f7ff fc97 	bl	800a0e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a7b6:	2140      	movs	r1, #64	@ 0x40
 800a7b8:	6820      	ldr	r0, [r4, #0]
 800a7ba:	f7ff fcbb 	bl	800a134 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800a7be:	2000      	movs	r0, #0
      break;
 800a7c0:	e028      	b.n	800a814 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 800a7c2:	d85b      	bhi.n	800a87c <HAL_TIM_ConfigClockSource+0x120>
 800a7c4:	2b20      	cmp	r3, #32
 800a7c6:	d007      	beq.n	800a7d8 <HAL_TIM_ConfigClockSource+0x7c>
 800a7c8:	d903      	bls.n	800a7d2 <HAL_TIM_ConfigClockSource+0x76>
 800a7ca:	2b30      	cmp	r3, #48	@ 0x30
 800a7cc:	d004      	beq.n	800a7d8 <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 800a7ce:	2001      	movs	r0, #1
 800a7d0:	e020      	b.n	800a814 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 800a7d2:	b10b      	cbz	r3, 800a7d8 <HAL_TIM_ConfigClockSource+0x7c>
 800a7d4:	2b10      	cmp	r3, #16
 800a7d6:	d105      	bne.n	800a7e4 <HAL_TIM_ConfigClockSource+0x88>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a7d8:	4619      	mov	r1, r3
 800a7da:	6820      	ldr	r0, [r4, #0]
 800a7dc:	f7ff fcaa 	bl	800a134 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800a7e0:	2000      	movs	r0, #0
      break;
 800a7e2:	e017      	b.n	800a814 <HAL_TIM_ConfigClockSource+0xb8>
      status = HAL_ERROR;
 800a7e4:	2001      	movs	r0, #1
 800a7e6:	e015      	b.n	800a814 <HAL_TIM_ConfigClockSource+0xb8>
 800a7e8:	2001      	movs	r0, #1
 800a7ea:	e013      	b.n	800a814 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 800a7ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a7f0:	d02c      	beq.n	800a84c <HAL_TIM_ConfigClockSource+0xf0>
 800a7f2:	d90b      	bls.n	800a80c <HAL_TIM_ConfigClockSource+0xb0>
 800a7f4:	4a25      	ldr	r2, [pc, #148]	@ (800a88c <HAL_TIM_ConfigClockSource+0x130>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d0ee      	beq.n	800a7d8 <HAL_TIM_ConfigClockSource+0x7c>
 800a7fa:	d912      	bls.n	800a822 <HAL_TIM_ConfigClockSource+0xc6>
 800a7fc:	4a24      	ldr	r2, [pc, #144]	@ (800a890 <HAL_TIM_ConfigClockSource+0x134>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d0ea      	beq.n	800a7d8 <HAL_TIM_ConfigClockSource+0x7c>
 800a802:	3210      	adds	r2, #16
 800a804:	4293      	cmp	r3, r2
 800a806:	d0e7      	beq.n	800a7d8 <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 800a808:	2001      	movs	r0, #1
 800a80a:	e003      	b.n	800a814 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 800a80c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a810:	d136      	bne.n	800a880 <HAL_TIM_ConfigClockSource+0x124>
 800a812:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800a814:	2301      	movs	r3, #1
 800a816:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800a81a:	2300      	movs	r3, #0
 800a81c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800a820:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 800a822:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a826:	d0d7      	beq.n	800a7d8 <HAL_TIM_ConfigClockSource+0x7c>
 800a828:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a82c:	d0d4      	beq.n	800a7d8 <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 800a82e:	2001      	movs	r0, #1
 800a830:	e7f0      	b.n	800a814 <HAL_TIM_ConfigClockSource+0xb8>
      TIM_ETR_SetConfig(htim->Instance,
 800a832:	68cb      	ldr	r3, [r1, #12]
 800a834:	684a      	ldr	r2, [r1, #4]
 800a836:	6889      	ldr	r1, [r1, #8]
 800a838:	6820      	ldr	r0, [r4, #0]
 800a83a:	f7ff ff82 	bl	800a742 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a83e:	6822      	ldr	r2, [r4, #0]
 800a840:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a842:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 800a846:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800a848:	2000      	movs	r0, #0
      break;
 800a84a:	e7e3      	b.n	800a814 <HAL_TIM_ConfigClockSource+0xb8>
      TIM_ETR_SetConfig(htim->Instance,
 800a84c:	68cb      	ldr	r3, [r1, #12]
 800a84e:	684a      	ldr	r2, [r1, #4]
 800a850:	6889      	ldr	r1, [r1, #8]
 800a852:	6820      	ldr	r0, [r4, #0]
 800a854:	f7ff ff75 	bl	800a742 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a858:	6822      	ldr	r2, [r4, #0]
 800a85a:	6893      	ldr	r3, [r2, #8]
 800a85c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a860:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800a862:	2000      	movs	r0, #0
      break;
 800a864:	e7d6      	b.n	800a814 <HAL_TIM_ConfigClockSource+0xb8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a866:	68ca      	ldr	r2, [r1, #12]
 800a868:	6849      	ldr	r1, [r1, #4]
 800a86a:	6820      	ldr	r0, [r4, #0]
 800a86c:	f7ff fc3a 	bl	800a0e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a870:	2150      	movs	r1, #80	@ 0x50
 800a872:	6820      	ldr	r0, [r4, #0]
 800a874:	f7ff fc5e 	bl	800a134 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800a878:	2000      	movs	r0, #0
      break;
 800a87a:	e7cb      	b.n	800a814 <HAL_TIM_ConfigClockSource+0xb8>
      status = HAL_ERROR;
 800a87c:	2001      	movs	r0, #1
 800a87e:	e7c9      	b.n	800a814 <HAL_TIM_ConfigClockSource+0xb8>
 800a880:	2001      	movs	r0, #1
 800a882:	e7c7      	b.n	800a814 <HAL_TIM_ConfigClockSource+0xb8>
  __HAL_LOCK(htim);
 800a884:	2002      	movs	r0, #2
}
 800a886:	4770      	bx	lr
 800a888:	ffce0088 	.word	0xffce0088
 800a88c:	00100020 	.word	0x00100020
 800a890:	00100030 	.word	0x00100030

0800a894 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a894:	f001 011f 	and.w	r1, r1, #31
 800a898:	f04f 0c01 	mov.w	ip, #1
 800a89c:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a8a0:	6a03      	ldr	r3, [r0, #32]
 800a8a2:	ea23 030c 	bic.w	r3, r3, ip
 800a8a6:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a8a8:	6a03      	ldr	r3, [r0, #32]
 800a8aa:	408a      	lsls	r2, r1
 800a8ac:	4313      	orrs	r3, r2
 800a8ae:	6203      	str	r3, [r0, #32]
}
 800a8b0:	4770      	bx	lr
	...

0800a8b4 <HAL_TIM_PWM_Start>:
{
 800a8b4:	b510      	push	{r4, lr}
 800a8b6:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a8b8:	2910      	cmp	r1, #16
 800a8ba:	d83d      	bhi.n	800a938 <HAL_TIM_PWM_Start+0x84>
 800a8bc:	e8df f001 	tbb	[pc, r1]
 800a8c0:	3c3c3c09 	.word	0x3c3c3c09
 800a8c4:	3c3c3c20 	.word	0x3c3c3c20
 800a8c8:	3c3c3c27 	.word	0x3c3c3c27
 800a8cc:	3c3c3c2e 	.word	0x3c3c3c2e
 800a8d0:	35          	.byte	0x35
 800a8d1:	00          	.byte	0x00
 800a8d2:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 800a8d6:	b2db      	uxtb	r3, r3
 800a8d8:	3b01      	subs	r3, #1
 800a8da:	bf18      	it	ne
 800a8dc:	2301      	movne	r3, #1
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	f040 8096 	bne.w	800aa10 <HAL_TIM_PWM_Start+0x15c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a8e4:	2910      	cmp	r1, #16
 800a8e6:	f200 8081 	bhi.w	800a9ec <HAL_TIM_PWM_Start+0x138>
 800a8ea:	e8df f001 	tbb	[pc, r1]
 800a8ee:	7f2c      	.short	0x7f2c
 800a8f0:	7f6f7f7f 	.word	0x7f6f7f7f
 800a8f4:	7f737f7f 	.word	0x7f737f7f
 800a8f8:	7f777f7f 	.word	0x7f777f7f
 800a8fc:	7f7f      	.short	0x7f7f
 800a8fe:	7b          	.byte	0x7b
 800a8ff:	00          	.byte	0x00
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a900:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 800a904:	b2db      	uxtb	r3, r3
 800a906:	3b01      	subs	r3, #1
 800a908:	bf18      	it	ne
 800a90a:	2301      	movne	r3, #1
 800a90c:	e7e7      	b.n	800a8de <HAL_TIM_PWM_Start+0x2a>
 800a90e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800a912:	b2db      	uxtb	r3, r3
 800a914:	3b01      	subs	r3, #1
 800a916:	bf18      	it	ne
 800a918:	2301      	movne	r3, #1
 800a91a:	e7e0      	b.n	800a8de <HAL_TIM_PWM_Start+0x2a>
 800a91c:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800a920:	b2db      	uxtb	r3, r3
 800a922:	3b01      	subs	r3, #1
 800a924:	bf18      	it	ne
 800a926:	2301      	movne	r3, #1
 800a928:	e7d9      	b.n	800a8de <HAL_TIM_PWM_Start+0x2a>
 800a92a:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800a92e:	b2db      	uxtb	r3, r3
 800a930:	3b01      	subs	r3, #1
 800a932:	bf18      	it	ne
 800a934:	2301      	movne	r3, #1
 800a936:	e7d2      	b.n	800a8de <HAL_TIM_PWM_Start+0x2a>
 800a938:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800a93c:	b2db      	uxtb	r3, r3
 800a93e:	3b01      	subs	r3, #1
 800a940:	bf18      	it	ne
 800a942:	2301      	movne	r3, #1
 800a944:	e7cb      	b.n	800a8de <HAL_TIM_PWM_Start+0x2a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a946:	2302      	movs	r3, #2
 800a948:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a94c:	2201      	movs	r2, #1
 800a94e:	6820      	ldr	r0, [r4, #0]
 800a950:	f7ff ffa0 	bl	800a894 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a954:	6823      	ldr	r3, [r4, #0]
 800a956:	4930      	ldr	r1, [pc, #192]	@ (800aa18 <HAL_TIM_PWM_Start+0x164>)
 800a958:	4a30      	ldr	r2, [pc, #192]	@ (800aa1c <HAL_TIM_PWM_Start+0x168>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	bf18      	it	ne
 800a95e:	428b      	cmpne	r3, r1
 800a960:	d00b      	beq.n	800a97a <HAL_TIM_PWM_Start+0xc6>
 800a962:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800a966:	4293      	cmp	r3, r2
 800a968:	d007      	beq.n	800a97a <HAL_TIM_PWM_Start+0xc6>
 800a96a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a96e:	4293      	cmp	r3, r2
 800a970:	d003      	beq.n	800a97a <HAL_TIM_PWM_Start+0xc6>
 800a972:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a976:	4293      	cmp	r3, r2
 800a978:	d103      	bne.n	800a982 <HAL_TIM_PWM_Start+0xce>
    __HAL_TIM_MOE_ENABLE(htim);
 800a97a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a97c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a980:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a982:	6823      	ldr	r3, [r4, #0]
 800a984:	4a24      	ldr	r2, [pc, #144]	@ (800aa18 <HAL_TIM_PWM_Start+0x164>)
 800a986:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a98a:	bf18      	it	ne
 800a98c:	4293      	cmpne	r3, r2
 800a98e:	d031      	beq.n	800a9f4 <HAL_TIM_PWM_Start+0x140>
 800a990:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800a994:	4293      	cmp	r3, r2
 800a996:	d02d      	beq.n	800a9f4 <HAL_TIM_PWM_Start+0x140>
 800a998:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a99c:	4293      	cmp	r3, r2
 800a99e:	d029      	beq.n	800a9f4 <HAL_TIM_PWM_Start+0x140>
 800a9a0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d025      	beq.n	800a9f4 <HAL_TIM_PWM_Start+0x140>
 800a9a8:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800a9ac:	4293      	cmp	r3, r2
 800a9ae:	d021      	beq.n	800a9f4 <HAL_TIM_PWM_Start+0x140>
 800a9b0:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	d01d      	beq.n	800a9f4 <HAL_TIM_PWM_Start+0x140>
 800a9b8:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800a9bc:	4293      	cmp	r3, r2
 800a9be:	d019      	beq.n	800a9f4 <HAL_TIM_PWM_Start+0x140>
    __HAL_TIM_ENABLE(htim);
 800a9c0:	681a      	ldr	r2, [r3, #0]
 800a9c2:	f042 0201 	orr.w	r2, r2, #1
 800a9c6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800a9c8:	2000      	movs	r0, #0
 800a9ca:	e022      	b.n	800aa12 <HAL_TIM_PWM_Start+0x15e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9cc:	2302      	movs	r3, #2
 800a9ce:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800a9d2:	e7bb      	b.n	800a94c <HAL_TIM_PWM_Start+0x98>
 800a9d4:	2302      	movs	r3, #2
 800a9d6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800a9da:	e7b7      	b.n	800a94c <HAL_TIM_PWM_Start+0x98>
 800a9dc:	2302      	movs	r3, #2
 800a9de:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800a9e2:	e7b3      	b.n	800a94c <HAL_TIM_PWM_Start+0x98>
 800a9e4:	2302      	movs	r3, #2
 800a9e6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a9ea:	e7af      	b.n	800a94c <HAL_TIM_PWM_Start+0x98>
 800a9ec:	2302      	movs	r3, #2
 800a9ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a9f2:	e7ab      	b.n	800a94c <HAL_TIM_PWM_Start+0x98>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a9f4:	6899      	ldr	r1, [r3, #8]
 800a9f6:	4a0a      	ldr	r2, [pc, #40]	@ (800aa20 <HAL_TIM_PWM_Start+0x16c>)
 800a9f8:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9fa:	2a06      	cmp	r2, #6
 800a9fc:	bf18      	it	ne
 800a9fe:	f5b2 3f80 	cmpne.w	r2, #65536	@ 0x10000
 800aa02:	d007      	beq.n	800aa14 <HAL_TIM_PWM_Start+0x160>
      __HAL_TIM_ENABLE(htim);
 800aa04:	681a      	ldr	r2, [r3, #0]
 800aa06:	f042 0201 	orr.w	r2, r2, #1
 800aa0a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800aa0c:	2000      	movs	r0, #0
 800aa0e:	e000      	b.n	800aa12 <HAL_TIM_PWM_Start+0x15e>
    return HAL_ERROR;
 800aa10:	2001      	movs	r0, #1
}
 800aa12:	bd10      	pop	{r4, pc}
  return HAL_OK;
 800aa14:	2000      	movs	r0, #0
 800aa16:	e7fc      	b.n	800aa12 <HAL_TIM_PWM_Start+0x15e>
 800aa18:	40010000 	.word	0x40010000
 800aa1c:	40010400 	.word	0x40010400
 800aa20:	00010007 	.word	0x00010007

0800aa24 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aa24:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 800aa28:	2a01      	cmp	r2, #1
 800aa2a:	d045      	beq.n	800aab8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
{
 800aa2c:	b470      	push	{r4, r5, r6}
 800aa2e:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 800aa30:	2201      	movs	r2, #1
 800aa32:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa36:	2202      	movs	r2, #2
 800aa38:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aa3c:	6802      	ldr	r2, [r0, #0]
 800aa3e:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aa40:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800aa42:	4e1e      	ldr	r6, [pc, #120]	@ (800aabc <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 800aa44:	4d1e      	ldr	r5, [pc, #120]	@ (800aac0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 800aa46:	42aa      	cmp	r2, r5
 800aa48:	bf18      	it	ne
 800aa4a:	42b2      	cmpne	r2, r6
 800aa4c:	d103      	bne.n	800aa56 <HAL_TIMEx_MasterConfigSynchronization+0x32>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800aa4e:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800aa52:	684d      	ldr	r5, [r1, #4]
 800aa54:	4328      	orrs	r0, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aa56:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aa5a:	680d      	ldr	r5, [r1, #0]
 800aa5c:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aa5e:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa60:	681a      	ldr	r2, [r3, #0]
 800aa62:	4816      	ldr	r0, [pc, #88]	@ (800aabc <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 800aa64:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800aa68:	bf18      	it	ne
 800aa6a:	4282      	cmpne	r2, r0
 800aa6c:	d017      	beq.n	800aa9e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800aa6e:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 800aa72:	4282      	cmp	r2, r0
 800aa74:	d013      	beq.n	800aa9e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800aa76:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800aa7a:	4282      	cmp	r2, r0
 800aa7c:	d00f      	beq.n	800aa9e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800aa7e:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800aa82:	4282      	cmp	r2, r0
 800aa84:	d00b      	beq.n	800aa9e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800aa86:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 800aa8a:	4282      	cmp	r2, r0
 800aa8c:	d007      	beq.n	800aa9e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800aa8e:	f5a0 406c 	sub.w	r0, r0, #60416	@ 0xec00
 800aa92:	4282      	cmp	r2, r0
 800aa94:	d003      	beq.n	800aa9e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800aa96:	f500 3094 	add.w	r0, r0, #75776	@ 0x12800
 800aa9a:	4282      	cmp	r2, r0
 800aa9c:	d104      	bne.n	800aaa8 <HAL_TIMEx_MasterConfigSynchronization+0x84>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aa9e:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aaa2:	6889      	ldr	r1, [r1, #8]
 800aaa4:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aaa6:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aaa8:	2201      	movs	r2, #1
 800aaaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aaae:	2000      	movs	r0, #0
 800aab0:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 800aab4:	bc70      	pop	{r4, r5, r6}
 800aab6:	4770      	bx	lr
  __HAL_LOCK(htim);
 800aab8:	2002      	movs	r0, #2
}
 800aaba:	4770      	bx	lr
 800aabc:	40010000 	.word	0x40010000
 800aac0:	40010400 	.word	0x40010400

0800aac4 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aac4:	4770      	bx	lr

0800aac6 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aac6:	4770      	bx	lr

0800aac8 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800aac8:	4770      	bx	lr

0800aaca <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800aaca:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aacc:	e852 3f00 	ldrex	r3, [r2]
 800aad0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aad4:	e842 3100 	strex	r1, r3, [r2]
 800aad8:	2900      	cmp	r1, #0
 800aada:	d1f6      	bne.n	800aaca <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800aadc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aade:	f102 0308 	add.w	r3, r2, #8
 800aae2:	e853 3f00 	ldrex	r3, [r3]
 800aae6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaea:	3208      	adds	r2, #8
 800aaec:	e842 3100 	strex	r1, r3, [r2]
 800aaf0:	2900      	cmp	r1, #0
 800aaf2:	d1f3      	bne.n	800aadc <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aaf4:	2320      	movs	r3, #32
 800aaf6:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
}
 800aafa:	4770      	bx	lr

0800aafc <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aafc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aafe:	e852 3f00 	ldrex	r3, [r2]
 800ab02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab06:	e842 3100 	strex	r1, r3, [r2]
 800ab0a:	2900      	cmp	r1, #0
 800ab0c:	d1f6      	bne.n	800aafc <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ab0e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab10:	f102 0308 	add.w	r3, r2, #8
 800ab14:	e853 1f00 	ldrex	r1, [r3]
 800ab18:	4b0d      	ldr	r3, [pc, #52]	@ (800ab50 <UART_EndRxTransfer+0x54>)
 800ab1a:	400b      	ands	r3, r1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab1c:	3208      	adds	r2, #8
 800ab1e:	e842 3100 	strex	r1, r3, [r2]
 800ab22:	2900      	cmp	r1, #0
 800ab24:	d1f3      	bne.n	800ab0e <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab26:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800ab28:	2b01      	cmp	r3, #1
 800ab2a:	d006      	beq.n	800ab3a <UART_EndRxTransfer+0x3e>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ab2c:	2320      	movs	r3, #32
 800ab2e:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab32:	2300      	movs	r3, #0
 800ab34:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ab36:	6703      	str	r3, [r0, #112]	@ 0x70
}
 800ab38:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab3a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab3c:	e852 3f00 	ldrex	r3, [r2]
 800ab40:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab44:	e842 3100 	strex	r1, r3, [r2]
 800ab48:	2900      	cmp	r1, #0
 800ab4a:	d1f6      	bne.n	800ab3a <UART_EndRxTransfer+0x3e>
 800ab4c:	e7ee      	b.n	800ab2c <UART_EndRxTransfer+0x30>
 800ab4e:	bf00      	nop
 800ab50:	effffffe 	.word	0xeffffffe

0800ab54 <HAL_UART_Transmit_DMA>:
{
 800ab54:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800ab56:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 800ab5a:	2a20      	cmp	r2, #32
 800ab5c:	d14a      	bne.n	800abf4 <HAL_UART_Transmit_DMA+0xa0>
{
 800ab5e:	b510      	push	{r4, lr}
 800ab60:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	bf18      	it	ne
 800ab66:	2900      	cmpne	r1, #0
 800ab68:	d046      	beq.n	800abf8 <HAL_UART_Transmit_DMA+0xa4>
    __HAL_LOCK(huart);
 800ab6a:	f890 2080 	ldrb.w	r2, [r0, #128]	@ 0x80
 800ab6e:	2a01      	cmp	r2, #1
 800ab70:	d044      	beq.n	800abfc <HAL_UART_Transmit_DMA+0xa8>
 800ab72:	2201      	movs	r2, #1
 800ab74:	f880 2080 	strb.w	r2, [r0, #128]	@ 0x80
    huart->pTxBuffPtr  = pData;
 800ab78:	6501      	str	r1, [r0, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800ab7a:	f8a0 3054 	strh.w	r3, [r0, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ab7e:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab82:	2200      	movs	r2, #0
 800ab84:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ab88:	2221      	movs	r2, #33	@ 0x21
 800ab8a:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
    if (huart->hdmatx != NULL)
 800ab8e:	6f82      	ldr	r2, [r0, #120]	@ 0x78
 800ab90:	b1e2      	cbz	r2, 800abcc <HAL_UART_Transmit_DMA+0x78>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ab92:	491b      	ldr	r1, [pc, #108]	@ (800ac00 <HAL_UART_Transmit_DMA+0xac>)
 800ab94:	63d1      	str	r1, [r2, #60]	@ 0x3c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ab96:	6f82      	ldr	r2, [r0, #120]	@ 0x78
 800ab98:	491a      	ldr	r1, [pc, #104]	@ (800ac04 <HAL_UART_Transmit_DMA+0xb0>)
 800ab9a:	6411      	str	r1, [r2, #64]	@ 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ab9c:	6f82      	ldr	r2, [r0, #120]	@ 0x78
 800ab9e:	491a      	ldr	r1, [pc, #104]	@ (800ac08 <HAL_UART_Transmit_DMA+0xb4>)
 800aba0:	64d1      	str	r1, [r2, #76]	@ 0x4c
      huart->hdmatx->XferAbortCallback = NULL;
 800aba2:	6f82      	ldr	r2, [r0, #120]	@ 0x78
 800aba4:	2100      	movs	r1, #0
 800aba6:	6511      	str	r1, [r2, #80]	@ 0x50
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800aba8:	6802      	ldr	r2, [r0, #0]
 800abaa:	3228      	adds	r2, #40	@ 0x28
 800abac:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 800abae:	6f80      	ldr	r0, [r0, #120]	@ 0x78
 800abb0:	f7f9 fe64 	bl	800487c <HAL_DMA_Start_IT>
 800abb4:	b150      	cbz	r0, 800abcc <HAL_UART_Transmit_DMA+0x78>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800abb6:	2310      	movs	r3, #16
 800abb8:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        __HAL_UNLOCK(huart);
 800abbc:	2300      	movs	r3, #0
 800abbe:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
        huart->gState = HAL_UART_STATE_READY;
 800abc2:	2320      	movs	r3, #32
 800abc4:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
        return HAL_ERROR;
 800abc8:	2001      	movs	r0, #1
 800abca:	e012      	b.n	800abf2 <HAL_UART_Transmit_DMA+0x9e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800abcc:	6823      	ldr	r3, [r4, #0]
 800abce:	2240      	movs	r2, #64	@ 0x40
 800abd0:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 800abd2:	2300      	movs	r3, #0
 800abd4:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800abd8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abda:	f102 0308 	add.w	r3, r2, #8
 800abde:	e853 3f00 	ldrex	r3, [r3]
 800abe2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abe6:	3208      	adds	r2, #8
 800abe8:	e842 3100 	strex	r1, r3, [r2]
 800abec:	2900      	cmp	r1, #0
 800abee:	d1f3      	bne.n	800abd8 <HAL_UART_Transmit_DMA+0x84>
    return HAL_OK;
 800abf0:	2000      	movs	r0, #0
}
 800abf2:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800abf4:	2002      	movs	r0, #2
}
 800abf6:	4770      	bx	lr
      return HAL_ERROR;
 800abf8:	2001      	movs	r0, #1
 800abfa:	e7fa      	b.n	800abf2 <HAL_UART_Transmit_DMA+0x9e>
    __HAL_LOCK(huart);
 800abfc:	2002      	movs	r0, #2
 800abfe:	e7f8      	b.n	800abf2 <HAL_UART_Transmit_DMA+0x9e>
 800ac00:	0800ac0f 	.word	0x0800ac0f
 800ac04:	0800ac7b 	.word	0x0800ac7b
 800ac08:	0800ac89 	.word	0x0800ac89

0800ac0c <HAL_UART_TxCpltCallback>:
}
 800ac0c:	4770      	bx	lr

0800ac0e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ac0e:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac10:	6b81      	ldr	r1, [r0, #56]	@ 0x38

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ac12:	69c3      	ldr	r3, [r0, #28]
 800ac14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac18:	d018      	beq.n	800ac4c <UART_DMATransmitCplt+0x3e>
  {
    huart->TxXferCount = 0U;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	f8a1 3056 	strh.w	r3, [r1, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ac20:	680a      	ldr	r2, [r1, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac22:	f102 0308 	add.w	r3, r2, #8
 800ac26:	e853 3f00 	ldrex	r3, [r3]
 800ac2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac2e:	3208      	adds	r2, #8
 800ac30:	e842 3000 	strex	r0, r3, [r2]
 800ac34:	2800      	cmp	r0, #0
 800ac36:	d1f3      	bne.n	800ac20 <UART_DMATransmitCplt+0x12>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ac38:	680a      	ldr	r2, [r1, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac3a:	e852 3f00 	ldrex	r3, [r2]
 800ac3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac42:	e842 3000 	strex	r0, r3, [r2]
 800ac46:	2800      	cmp	r0, #0
 800ac48:	d1f6      	bne.n	800ac38 <UART_DMATransmitCplt+0x2a>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ac4a:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800ac4c:	4608      	mov	r0, r1
 800ac4e:	f7ff ffdd 	bl	800ac0c <HAL_UART_TxCpltCallback>
}
 800ac52:	e7fa      	b.n	800ac4a <UART_DMATransmitCplt+0x3c>

0800ac54 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ac54:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ac56:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac58:	e852 3f00 	ldrex	r3, [r2]
 800ac5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac60:	e842 3100 	strex	r1, r3, [r2]
 800ac64:	2900      	cmp	r1, #0
 800ac66:	d1f6      	bne.n	800ac56 <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ac68:	2320      	movs	r3, #32
 800ac6a:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	6743      	str	r3, [r0, #116]	@ 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ac72:	f7ff ffcb 	bl	800ac0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac76:	bd08      	pop	{r3, pc}

0800ac78 <HAL_UART_TxHalfCpltCallback>:
}
 800ac78:	4770      	bx	lr

0800ac7a <UART_DMATxHalfCplt>:
{
 800ac7a:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 800ac7c:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 800ac7e:	f7ff fffb 	bl	800ac78 <HAL_UART_TxHalfCpltCallback>
}
 800ac82:	bd08      	pop	{r3, pc}

0800ac84 <HAL_UART_RxCpltCallback>:
}
 800ac84:	4770      	bx	lr

0800ac86 <HAL_UART_RxHalfCpltCallback>:
}
 800ac86:	4770      	bx	lr

0800ac88 <UART_DMAError>:
{
 800ac88:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac8a:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ac8c:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ac90:	f8d4 5088 	ldr.w	r5, [r4, #136]	@ 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ac94:	6823      	ldr	r3, [r4, #0]
 800ac96:	689b      	ldr	r3, [r3, #8]
 800ac98:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ac9c:	d001      	beq.n	800aca2 <UART_DMAError+0x1a>
 800ac9e:	2a21      	cmp	r2, #33	@ 0x21
 800aca0:	d010      	beq.n	800acc4 <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800aca2:	6823      	ldr	r3, [r4, #0]
 800aca4:	689b      	ldr	r3, [r3, #8]
 800aca6:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800acaa:	d001      	beq.n	800acb0 <UART_DMAError+0x28>
 800acac:	2d22      	cmp	r5, #34	@ 0x22
 800acae:	d010      	beq.n	800acd2 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800acb0:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 800acb4:	f043 0310 	orr.w	r3, r3, #16
 800acb8:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  HAL_UART_ErrorCallback(huart);
 800acbc:	4620      	mov	r0, r4
 800acbe:	f7f5 fea7 	bl	8000a10 <HAL_UART_ErrorCallback>
}
 800acc2:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 800acc4:	2300      	movs	r3, #0
 800acc6:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800acca:	4620      	mov	r0, r4
 800accc:	f7ff fefd 	bl	800aaca <UART_EndTxTransfer>
 800acd0:	e7e7      	b.n	800aca2 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 800acd2:	2300      	movs	r3, #0
 800acd4:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800acd8:	4620      	mov	r0, r4
 800acda:	f7ff ff0f 	bl	800aafc <UART_EndRxTransfer>
 800acde:	e7e7      	b.n	800acb0 <UART_DMAError+0x28>

0800ace0 <UART_DMAAbortOnError>:
{
 800ace0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ace2:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0U;
 800ace4:	2300      	movs	r3, #0
 800ace6:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800acea:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
  HAL_UART_ErrorCallback(huart);
 800acee:	f7f5 fe8f 	bl	8000a10 <HAL_UART_ErrorCallback>
}
 800acf2:	bd08      	pop	{r3, pc}

0800acf4 <HAL_UART_IRQHandler>:
{
 800acf4:	b570      	push	{r4, r5, r6, lr}
 800acf6:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800acf8:	6802      	ldr	r2, [r0, #0]
 800acfa:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800acfc:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800acfe:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 800ad00:	f640 0c0f 	movw	ip, #2063	@ 0x80f
 800ad04:	ea13 0f0c 	tst.w	r3, ip
 800ad08:	d10d      	bne.n	800ad26 <HAL_UART_IRQHandler+0x32>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ad0a:	f013 0f20 	tst.w	r3, #32
 800ad0e:	d010      	beq.n	800ad32 <HAL_UART_IRQHandler+0x3e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ad10:	f010 0f20 	tst.w	r0, #32
 800ad14:	d102      	bne.n	800ad1c <HAL_UART_IRQHandler+0x28>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ad16:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 800ad1a:	d00a      	beq.n	800ad32 <HAL_UART_IRQHandler+0x3e>
      if (huart->RxISR != NULL)
 800ad1c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ad1e:	b393      	cbz	r3, 800ad86 <HAL_UART_IRQHandler+0x92>
        huart->RxISR(huart);
 800ad20:	4620      	mov	r0, r4
 800ad22:	4798      	blx	r3
      return;
 800ad24:	e02f      	b.n	800ad86 <HAL_UART_IRQHandler+0x92>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ad26:	4d86      	ldr	r5, [pc, #536]	@ (800af40 <HAL_UART_IRQHandler+0x24c>)
 800ad28:	400d      	ands	r5, r1
 800ad2a:	d12d      	bne.n	800ad88 <HAL_UART_IRQHandler+0x94>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ad2c:	4e85      	ldr	r6, [pc, #532]	@ (800af44 <HAL_UART_IRQHandler+0x250>)
 800ad2e:	4230      	tst	r0, r6
 800ad30:	d12a      	bne.n	800ad88 <HAL_UART_IRQHandler+0x94>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad32:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 800ad34:	2d01      	cmp	r5, #1
 800ad36:	f000 80bd 	beq.w	800aeb4 <HAL_UART_IRQHandler+0x1c0>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ad3a:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800ad3e:	d003      	beq.n	800ad48 <HAL_UART_IRQHandler+0x54>
 800ad40:	f411 0f80 	tst.w	r1, #4194304	@ 0x400000
 800ad44:	f040 818b 	bne.w	800b05e <HAL_UART_IRQHandler+0x36a>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ad48:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ad4c:	d007      	beq.n	800ad5e <HAL_UART_IRQHandler+0x6a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ad4e:	f010 0f80 	tst.w	r0, #128	@ 0x80
 800ad52:	f040 818b 	bne.w	800b06c <HAL_UART_IRQHandler+0x378>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ad56:	f411 0f00 	tst.w	r1, #8388608	@ 0x800000
 800ad5a:	f040 8187 	bne.w	800b06c <HAL_UART_IRQHandler+0x378>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ad5e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800ad62:	d003      	beq.n	800ad6c <HAL_UART_IRQHandler+0x78>
 800ad64:	f010 0f40 	tst.w	r0, #64	@ 0x40
 800ad68:	f040 8187 	bne.w	800b07a <HAL_UART_IRQHandler+0x386>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ad6c:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800ad70:	d003      	beq.n	800ad7a <HAL_UART_IRQHandler+0x86>
 800ad72:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 800ad76:	f040 8184 	bne.w	800b082 <HAL_UART_IRQHandler+0x38e>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ad7a:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800ad7e:	d002      	beq.n	800ad86 <HAL_UART_IRQHandler+0x92>
 800ad80:	2800      	cmp	r0, #0
 800ad82:	f2c0 8182 	blt.w	800b08a <HAL_UART_IRQHandler+0x396>
}
 800ad86:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ad88:	f013 0f01 	tst.w	r3, #1
 800ad8c:	d009      	beq.n	800ada2 <HAL_UART_IRQHandler+0xae>
 800ad8e:	f410 7f80 	tst.w	r0, #256	@ 0x100
 800ad92:	d006      	beq.n	800ada2 <HAL_UART_IRQHandler+0xae>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ad94:	2601      	movs	r6, #1
 800ad96:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ad98:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 800ad9c:	4332      	orrs	r2, r6
 800ad9e:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ada2:	f013 0f02 	tst.w	r3, #2
 800ada6:	d00b      	beq.n	800adc0 <HAL_UART_IRQHandler+0xcc>
 800ada8:	f011 0f01 	tst.w	r1, #1
 800adac:	d008      	beq.n	800adc0 <HAL_UART_IRQHandler+0xcc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800adae:	6822      	ldr	r2, [r4, #0]
 800adb0:	2602      	movs	r6, #2
 800adb2:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800adb4:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 800adb8:	f042 0204 	orr.w	r2, r2, #4
 800adbc:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800adc0:	f013 0f04 	tst.w	r3, #4
 800adc4:	d00b      	beq.n	800adde <HAL_UART_IRQHandler+0xea>
 800adc6:	f011 0f01 	tst.w	r1, #1
 800adca:	d008      	beq.n	800adde <HAL_UART_IRQHandler+0xea>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800adcc:	6822      	ldr	r2, [r4, #0]
 800adce:	2604      	movs	r6, #4
 800add0:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800add2:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 800add6:	f042 0202 	orr.w	r2, r2, #2
 800adda:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 800adde:	f013 0f08 	tst.w	r3, #8
 800ade2:	d00b      	beq.n	800adfc <HAL_UART_IRQHandler+0x108>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ade4:	f010 0f20 	tst.w	r0, #32
 800ade8:	d100      	bne.n	800adec <HAL_UART_IRQHandler+0xf8>
 800adea:	b13d      	cbz	r5, 800adfc <HAL_UART_IRQHandler+0x108>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800adec:	6822      	ldr	r2, [r4, #0]
 800adee:	2508      	movs	r5, #8
 800adf0:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800adf2:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 800adf6:	432a      	orrs	r2, r5
 800adf8:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800adfc:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800ae00:	d00c      	beq.n	800ae1c <HAL_UART_IRQHandler+0x128>
 800ae02:	f010 6f80 	tst.w	r0, #67108864	@ 0x4000000
 800ae06:	d009      	beq.n	800ae1c <HAL_UART_IRQHandler+0x128>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ae08:	6822      	ldr	r2, [r4, #0]
 800ae0a:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 800ae0e:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ae10:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 800ae14:	f042 0220 	orr.w	r2, r2, #32
 800ae18:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ae1c:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 800ae20:	2a00      	cmp	r2, #0
 800ae22:	d0b0      	beq.n	800ad86 <HAL_UART_IRQHandler+0x92>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ae24:	f013 0f20 	tst.w	r3, #32
 800ae28:	d009      	beq.n	800ae3e <HAL_UART_IRQHandler+0x14a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ae2a:	f010 0f20 	tst.w	r0, #32
 800ae2e:	d102      	bne.n	800ae36 <HAL_UART_IRQHandler+0x142>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ae30:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 800ae34:	d003      	beq.n	800ae3e <HAL_UART_IRQHandler+0x14a>
        if (huart->RxISR != NULL)
 800ae36:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ae38:	b10b      	cbz	r3, 800ae3e <HAL_UART_IRQHandler+0x14a>
          huart->RxISR(huart);
 800ae3a:	4620      	mov	r0, r4
 800ae3c:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 800ae3e:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ae42:	6823      	ldr	r3, [r4, #0]
 800ae44:	689b      	ldr	r3, [r3, #8]
 800ae46:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800ae4a:	d102      	bne.n	800ae52 <HAL_UART_IRQHandler+0x15e>
 800ae4c:	f012 0f28 	tst.w	r2, #40	@ 0x28
 800ae50:	d029      	beq.n	800aea6 <HAL_UART_IRQHandler+0x1b2>
        UART_EndRxTransfer(huart);
 800ae52:	4620      	mov	r0, r4
 800ae54:	f7ff fe52 	bl	800aafc <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae58:	6823      	ldr	r3, [r4, #0]
 800ae5a:	689b      	ldr	r3, [r3, #8]
 800ae5c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800ae60:	d01d      	beq.n	800ae9e <HAL_UART_IRQHandler+0x1aa>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae62:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae64:	f102 0308 	add.w	r3, r2, #8
 800ae68:	e853 3f00 	ldrex	r3, [r3]
 800ae6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae70:	3208      	adds	r2, #8
 800ae72:	e842 3100 	strex	r1, r3, [r2]
 800ae76:	2900      	cmp	r1, #0
 800ae78:	d1f3      	bne.n	800ae62 <HAL_UART_IRQHandler+0x16e>
          if (huart->hdmarx != NULL)
 800ae7a:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800ae7c:	b15b      	cbz	r3, 800ae96 <HAL_UART_IRQHandler+0x1a2>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ae7e:	4a32      	ldr	r2, [pc, #200]	@ (800af48 <HAL_UART_IRQHandler+0x254>)
 800ae80:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ae82:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 800ae84:	f7f9 ffe6 	bl	8004e54 <HAL_DMA_Abort_IT>
 800ae88:	2800      	cmp	r0, #0
 800ae8a:	f43f af7c 	beq.w	800ad86 <HAL_UART_IRQHandler+0x92>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ae8e:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 800ae90:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800ae92:	4798      	blx	r3
 800ae94:	e777      	b.n	800ad86 <HAL_UART_IRQHandler+0x92>
            HAL_UART_ErrorCallback(huart);
 800ae96:	4620      	mov	r0, r4
 800ae98:	f7f5 fdba 	bl	8000a10 <HAL_UART_ErrorCallback>
 800ae9c:	e773      	b.n	800ad86 <HAL_UART_IRQHandler+0x92>
          HAL_UART_ErrorCallback(huart);
 800ae9e:	4620      	mov	r0, r4
 800aea0:	f7f5 fdb6 	bl	8000a10 <HAL_UART_ErrorCallback>
 800aea4:	e76f      	b.n	800ad86 <HAL_UART_IRQHandler+0x92>
        HAL_UART_ErrorCallback(huart);
 800aea6:	4620      	mov	r0, r4
 800aea8:	f7f5 fdb2 	bl	8000a10 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aeac:	2300      	movs	r3, #0
 800aeae:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
    return;
 800aeb2:	e768      	b.n	800ad86 <HAL_UART_IRQHandler+0x92>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800aeb4:	f013 0f10 	tst.w	r3, #16
 800aeb8:	f43f af3f 	beq.w	800ad3a <HAL_UART_IRQHandler+0x46>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800aebc:	f010 0f10 	tst.w	r0, #16
 800aec0:	f43f af3b 	beq.w	800ad3a <HAL_UART_IRQHandler+0x46>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aec4:	2310      	movs	r3, #16
 800aec6:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aec8:	6823      	ldr	r3, [r4, #0]
 800aeca:	689b      	ldr	r3, [r3, #8]
 800aecc:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800aed0:	f000 808d 	beq.w	800afee <HAL_UART_IRQHandler+0x2fa>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aed4:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800aed6:	6813      	ldr	r3, [r2, #0]
 800aed8:	481c      	ldr	r0, [pc, #112]	@ (800af4c <HAL_UART_IRQHandler+0x258>)
 800aeda:	491d      	ldr	r1, [pc, #116]	@ (800af50 <HAL_UART_IRQHandler+0x25c>)
 800aedc:	428b      	cmp	r3, r1
 800aede:	bf18      	it	ne
 800aee0:	4283      	cmpne	r3, r0
 800aee2:	d037      	beq.n	800af54 <HAL_UART_IRQHandler+0x260>
 800aee4:	3118      	adds	r1, #24
 800aee6:	428b      	cmp	r3, r1
 800aee8:	d034      	beq.n	800af54 <HAL_UART_IRQHandler+0x260>
 800aeea:	3118      	adds	r1, #24
 800aeec:	428b      	cmp	r3, r1
 800aeee:	d031      	beq.n	800af54 <HAL_UART_IRQHandler+0x260>
 800aef0:	3118      	adds	r1, #24
 800aef2:	428b      	cmp	r3, r1
 800aef4:	d02e      	beq.n	800af54 <HAL_UART_IRQHandler+0x260>
 800aef6:	3118      	adds	r1, #24
 800aef8:	428b      	cmp	r3, r1
 800aefa:	d02b      	beq.n	800af54 <HAL_UART_IRQHandler+0x260>
 800aefc:	3118      	adds	r1, #24
 800aefe:	428b      	cmp	r3, r1
 800af00:	d028      	beq.n	800af54 <HAL_UART_IRQHandler+0x260>
 800af02:	3118      	adds	r1, #24
 800af04:	428b      	cmp	r3, r1
 800af06:	d025      	beq.n	800af54 <HAL_UART_IRQHandler+0x260>
 800af08:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 800af0c:	428b      	cmp	r3, r1
 800af0e:	d021      	beq.n	800af54 <HAL_UART_IRQHandler+0x260>
 800af10:	3118      	adds	r1, #24
 800af12:	428b      	cmp	r3, r1
 800af14:	d01e      	beq.n	800af54 <HAL_UART_IRQHandler+0x260>
 800af16:	3118      	adds	r1, #24
 800af18:	428b      	cmp	r3, r1
 800af1a:	d01b      	beq.n	800af54 <HAL_UART_IRQHandler+0x260>
 800af1c:	3118      	adds	r1, #24
 800af1e:	428b      	cmp	r3, r1
 800af20:	d018      	beq.n	800af54 <HAL_UART_IRQHandler+0x260>
 800af22:	3118      	adds	r1, #24
 800af24:	428b      	cmp	r3, r1
 800af26:	d015      	beq.n	800af54 <HAL_UART_IRQHandler+0x260>
 800af28:	3118      	adds	r1, #24
 800af2a:	428b      	cmp	r3, r1
 800af2c:	d012      	beq.n	800af54 <HAL_UART_IRQHandler+0x260>
 800af2e:	3118      	adds	r1, #24
 800af30:	428b      	cmp	r3, r1
 800af32:	d00f      	beq.n	800af54 <HAL_UART_IRQHandler+0x260>
 800af34:	3118      	adds	r1, #24
 800af36:	428b      	cmp	r3, r1
 800af38:	d00c      	beq.n	800af54 <HAL_UART_IRQHandler+0x260>
 800af3a:	685b      	ldr	r3, [r3, #4]
 800af3c:	b29b      	uxth	r3, r3
 800af3e:	e00b      	b.n	800af58 <HAL_UART_IRQHandler+0x264>
 800af40:	10000001 	.word	0x10000001
 800af44:	04000120 	.word	0x04000120
 800af48:	0800ace1 	.word	0x0800ace1
 800af4c:	40020010 	.word	0x40020010
 800af50:	40020028 	.word	0x40020028
 800af54:	685b      	ldr	r3, [r3, #4]
 800af56:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 800af58:	2b00      	cmp	r3, #0
 800af5a:	f43f af14 	beq.w	800ad86 <HAL_UART_IRQHandler+0x92>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800af5e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 800af62:	4299      	cmp	r1, r3
 800af64:	f67f af0f 	bls.w	800ad86 <HAL_UART_IRQHandler+0x92>
        huart->RxXferCount = nb_remaining_rx_data;
 800af68:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800af6c:	69d3      	ldr	r3, [r2, #28]
 800af6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af72:	d031      	beq.n	800afd8 <HAL_UART_IRQHandler+0x2e4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af74:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af76:	e852 3f00 	ldrex	r3, [r2]
 800af7a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af7e:	e842 3100 	strex	r1, r3, [r2]
 800af82:	2900      	cmp	r1, #0
 800af84:	d1f6      	bne.n	800af74 <HAL_UART_IRQHandler+0x280>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af86:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af88:	f102 0308 	add.w	r3, r2, #8
 800af8c:	e853 3f00 	ldrex	r3, [r3]
 800af90:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af94:	3208      	adds	r2, #8
 800af96:	e842 3100 	strex	r1, r3, [r2]
 800af9a:	2900      	cmp	r1, #0
 800af9c:	d1f3      	bne.n	800af86 <HAL_UART_IRQHandler+0x292>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af9e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afa0:	f102 0308 	add.w	r3, r2, #8
 800afa4:	e853 3f00 	ldrex	r3, [r3]
 800afa8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afac:	3208      	adds	r2, #8
 800afae:	e842 3100 	strex	r1, r3, [r2]
 800afb2:	2900      	cmp	r1, #0
 800afb4:	d1f3      	bne.n	800af9e <HAL_UART_IRQHandler+0x2aa>
          huart->RxState = HAL_UART_STATE_READY;
 800afb6:	2320      	movs	r3, #32
 800afb8:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afbc:	2300      	movs	r3, #0
 800afbe:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afc0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afc2:	e852 3f00 	ldrex	r3, [r2]
 800afc6:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afca:	e842 3100 	strex	r1, r3, [r2]
 800afce:	2900      	cmp	r1, #0
 800afd0:	d1f6      	bne.n	800afc0 <HAL_UART_IRQHandler+0x2cc>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800afd2:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 800afd4:	f7f9 fd9e 	bl	8004b14 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800afd8:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 800afdc:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800afe0:	b29b      	uxth	r3, r3
 800afe2:	1ac9      	subs	r1, r1, r3
 800afe4:	b289      	uxth	r1, r1
 800afe6:	4620      	mov	r0, r4
 800afe8:	f7f6 fe50 	bl	8001c8c <HAL_UARTEx_RxEventCallback>
      return;
 800afec:	e6cb      	b.n	800ad86 <HAL_UART_IRQHandler+0x92>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800afee:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 800aff2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800aff6:	b29b      	uxth	r3, r3
 800aff8:	1ac9      	subs	r1, r1, r3
 800affa:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800affc:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800b000:	b29b      	uxth	r3, r3
 800b002:	2b00      	cmp	r3, #0
 800b004:	f43f aebf 	beq.w	800ad86 <HAL_UART_IRQHandler+0x92>
          && (nb_rx_data > 0U))
 800b008:	2900      	cmp	r1, #0
 800b00a:	f43f aebc 	beq.w	800ad86 <HAL_UART_IRQHandler+0x92>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b00e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b010:	e852 3f00 	ldrex	r3, [r2]
 800b014:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b018:	e842 3000 	strex	r0, r3, [r2]
 800b01c:	2800      	cmp	r0, #0
 800b01e:	d1f6      	bne.n	800b00e <HAL_UART_IRQHandler+0x31a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b020:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b022:	f102 0308 	add.w	r3, r2, #8
 800b026:	e853 0f00 	ldrex	r0, [r3]
 800b02a:	4b1a      	ldr	r3, [pc, #104]	@ (800b094 <HAL_UART_IRQHandler+0x3a0>)
 800b02c:	4003      	ands	r3, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b02e:	3208      	adds	r2, #8
 800b030:	e842 3000 	strex	r0, r3, [r2]
 800b034:	2800      	cmp	r0, #0
 800b036:	d1f3      	bne.n	800b020 <HAL_UART_IRQHandler+0x32c>
        huart->RxState = HAL_UART_STATE_READY;
 800b038:	2320      	movs	r3, #32
 800b03a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b03e:	2300      	movs	r3, #0
 800b040:	66e3      	str	r3, [r4, #108]	@ 0x6c
        huart->RxISR = NULL;
 800b042:	6723      	str	r3, [r4, #112]	@ 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b044:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b046:	e852 3f00 	ldrex	r3, [r2]
 800b04a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b04e:	e842 3000 	strex	r0, r3, [r2]
 800b052:	2800      	cmp	r0, #0
 800b054:	d1f6      	bne.n	800b044 <HAL_UART_IRQHandler+0x350>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b056:	4620      	mov	r0, r4
 800b058:	f7f6 fe18 	bl	8001c8c <HAL_UARTEx_RxEventCallback>
      return;
 800b05c:	e693      	b.n	800ad86 <HAL_UART_IRQHandler+0x92>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b05e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b062:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800b064:	4620      	mov	r0, r4
 800b066:	f000 fd67 	bl	800bb38 <HAL_UARTEx_WakeupCallback>
    return;
 800b06a:	e68c      	b.n	800ad86 <HAL_UART_IRQHandler+0x92>
    if (huart->TxISR != NULL)
 800b06c:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800b06e:	2b00      	cmp	r3, #0
 800b070:	f43f ae89 	beq.w	800ad86 <HAL_UART_IRQHandler+0x92>
      huart->TxISR(huart);
 800b074:	4620      	mov	r0, r4
 800b076:	4798      	blx	r3
    return;
 800b078:	e685      	b.n	800ad86 <HAL_UART_IRQHandler+0x92>
    UART_EndTransmit_IT(huart);
 800b07a:	4620      	mov	r0, r4
 800b07c:	f7ff fdea 	bl	800ac54 <UART_EndTransmit_IT>
    return;
 800b080:	e681      	b.n	800ad86 <HAL_UART_IRQHandler+0x92>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b082:	4620      	mov	r0, r4
 800b084:	f000 fd5a 	bl	800bb3c <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 800b088:	e67d      	b.n	800ad86 <HAL_UART_IRQHandler+0x92>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b08a:	4620      	mov	r0, r4
 800b08c:	f000 fd55 	bl	800bb3a <HAL_UARTEx_RxFifoFullCallback>
    return;
 800b090:	e679      	b.n	800ad86 <HAL_UART_IRQHandler+0x92>
 800b092:	bf00      	nop
 800b094:	effffffe 	.word	0xeffffffe

0800b098 <UART_DMARxHalfCplt>:
{
 800b098:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b09a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b09c:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800b09e:	2b01      	cmp	r3, #1
 800b0a0:	d002      	beq.n	800b0a8 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 800b0a2:	f7ff fdf0 	bl	800ac86 <HAL_UART_RxHalfCpltCallback>
}
 800b0a6:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b0a8:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 800b0ac:	0849      	lsrs	r1, r1, #1
 800b0ae:	f7f6 fded 	bl	8001c8c <HAL_UARTEx_RxEventCallback>
 800b0b2:	e7f8      	b.n	800b0a6 <UART_DMARxHalfCplt+0xe>

0800b0b4 <UART_DMAReceiveCplt>:
{
 800b0b4:	b508      	push	{r3, lr}
 800b0b6:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b0b8:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b0ba:	69db      	ldr	r3, [r3, #28]
 800b0bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b0c0:	d029      	beq.n	800b116 <UART_DMAReceiveCplt+0x62>
    huart->RxXferCount = 0U;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b0c8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ca:	e852 3f00 	ldrex	r3, [r2]
 800b0ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0d2:	e842 3100 	strex	r1, r3, [r2]
 800b0d6:	2900      	cmp	r1, #0
 800b0d8:	d1f6      	bne.n	800b0c8 <UART_DMAReceiveCplt+0x14>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0da:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0dc:	f102 0308 	add.w	r3, r2, #8
 800b0e0:	e853 3f00 	ldrex	r3, [r3]
 800b0e4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0e8:	3208      	adds	r2, #8
 800b0ea:	e842 3100 	strex	r1, r3, [r2]
 800b0ee:	2900      	cmp	r1, #0
 800b0f0:	d1f3      	bne.n	800b0da <UART_DMAReceiveCplt+0x26>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b0f2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0f4:	f102 0308 	add.w	r3, r2, #8
 800b0f8:	e853 3f00 	ldrex	r3, [r3]
 800b0fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b100:	3208      	adds	r2, #8
 800b102:	e842 3100 	strex	r1, r3, [r2]
 800b106:	2900      	cmp	r1, #0
 800b108:	d1f3      	bne.n	800b0f2 <UART_DMAReceiveCplt+0x3e>
    huart->RxState = HAL_UART_STATE_READY;
 800b10a:	2320      	movs	r3, #32
 800b10c:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b110:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800b112:	2b01      	cmp	r3, #1
 800b114:	d005      	beq.n	800b122 <UART_DMAReceiveCplt+0x6e>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b116:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800b118:	2b01      	cmp	r3, #1
 800b11a:	d00c      	beq.n	800b136 <UART_DMAReceiveCplt+0x82>
    HAL_UART_RxCpltCallback(huart);
 800b11c:	f7ff fdb2 	bl	800ac84 <HAL_UART_RxCpltCallback>
}
 800b120:	bd08      	pop	{r3, pc}
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b122:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b124:	e852 3f00 	ldrex	r3, [r2]
 800b128:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b12c:	e842 3100 	strex	r1, r3, [r2]
 800b130:	2900      	cmp	r1, #0
 800b132:	d1f6      	bne.n	800b122 <UART_DMAReceiveCplt+0x6e>
 800b134:	e7ef      	b.n	800b116 <UART_DMAReceiveCplt+0x62>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b136:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 800b13a:	f7f6 fda7 	bl	8001c8c <HAL_UARTEx_RxEventCallback>
 800b13e:	e7ef      	b.n	800b120 <UART_DMAReceiveCplt+0x6c>

0800b140 <UART_SetConfig>:
{
 800b140:	b570      	push	{r4, r5, r6, lr}
 800b142:	b086      	sub	sp, #24
 800b144:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800b146:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b148:	6883      	ldr	r3, [r0, #8]
 800b14a:	6902      	ldr	r2, [r0, #16]
 800b14c:	4313      	orrs	r3, r2
 800b14e:	6942      	ldr	r2, [r0, #20]
 800b150:	4313      	orrs	r3, r2
 800b152:	69c2      	ldr	r2, [r0, #28]
 800b154:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b156:	6808      	ldr	r0, [r1, #0]
 800b158:	4a88      	ldr	r2, [pc, #544]	@ (800b37c <UART_SetConfig+0x23c>)
 800b15a:	4002      	ands	r2, r0
 800b15c:	431a      	orrs	r2, r3
 800b15e:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b160:	6822      	ldr	r2, [r4, #0]
 800b162:	6853      	ldr	r3, [r2, #4]
 800b164:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800b168:	68e1      	ldr	r1, [r4, #12]
 800b16a:	430b      	orrs	r3, r1
 800b16c:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b16e:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b170:	6822      	ldr	r2, [r4, #0]
 800b172:	4b83      	ldr	r3, [pc, #524]	@ (800b380 <UART_SetConfig+0x240>)
 800b174:	429a      	cmp	r2, r3
 800b176:	d001      	beq.n	800b17c <UART_SetConfig+0x3c>
    tmpreg |= huart->Init.OneBitSampling;
 800b178:	6a23      	ldr	r3, [r4, #32]
 800b17a:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b17c:	6890      	ldr	r0, [r2, #8]
 800b17e:	4b81      	ldr	r3, [pc, #516]	@ (800b384 <UART_SetConfig+0x244>)
 800b180:	4003      	ands	r3, r0
 800b182:	430b      	orrs	r3, r1
 800b184:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b186:	6822      	ldr	r2, [r4, #0]
 800b188:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800b18a:	f023 030f 	bic.w	r3, r3, #15
 800b18e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800b190:	430b      	orrs	r3, r1
 800b192:	62d3      	str	r3, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b194:	6822      	ldr	r2, [r4, #0]
 800b196:	4b7c      	ldr	r3, [pc, #496]	@ (800b388 <UART_SetConfig+0x248>)
 800b198:	429a      	cmp	r2, r3
 800b19a:	d021      	beq.n	800b1e0 <UART_SetConfig+0xa0>
 800b19c:	4b7b      	ldr	r3, [pc, #492]	@ (800b38c <UART_SetConfig+0x24c>)
 800b19e:	429a      	cmp	r2, r3
 800b1a0:	f000 808c 	beq.w	800b2bc <UART_SetConfig+0x17c>
 800b1a4:	4b7a      	ldr	r3, [pc, #488]	@ (800b390 <UART_SetConfig+0x250>)
 800b1a6:	429a      	cmp	r2, r3
 800b1a8:	f000 80a2 	beq.w	800b2f0 <UART_SetConfig+0x1b0>
 800b1ac:	4b79      	ldr	r3, [pc, #484]	@ (800b394 <UART_SetConfig+0x254>)
 800b1ae:	429a      	cmp	r2, r3
 800b1b0:	f000 80b5 	beq.w	800b31e <UART_SetConfig+0x1de>
 800b1b4:	4b78      	ldr	r3, [pc, #480]	@ (800b398 <UART_SetConfig+0x258>)
 800b1b6:	429a      	cmp	r2, r3
 800b1b8:	f000 80c8 	beq.w	800b34c <UART_SetConfig+0x20c>
 800b1bc:	4b77      	ldr	r3, [pc, #476]	@ (800b39c <UART_SetConfig+0x25c>)
 800b1be:	429a      	cmp	r2, r3
 800b1c0:	f000 80f4 	beq.w	800b3ac <UART_SetConfig+0x26c>
 800b1c4:	4b76      	ldr	r3, [pc, #472]	@ (800b3a0 <UART_SetConfig+0x260>)
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	f000 8119 	beq.w	800b3fe <UART_SetConfig+0x2be>
 800b1cc:	4b75      	ldr	r3, [pc, #468]	@ (800b3a4 <UART_SetConfig+0x264>)
 800b1ce:	429a      	cmp	r2, r3
 800b1d0:	f000 812c 	beq.w	800b42c <UART_SetConfig+0x2ec>
 800b1d4:	4b6a      	ldr	r3, [pc, #424]	@ (800b380 <UART_SetConfig+0x240>)
 800b1d6:	429a      	cmp	r2, r3
 800b1d8:	f000 813f 	beq.w	800b45a <UART_SetConfig+0x31a>
 800b1dc:	2380      	movs	r3, #128	@ 0x80
 800b1de:	e033      	b.n	800b248 <UART_SetConfig+0x108>
 800b1e0:	4b71      	ldr	r3, [pc, #452]	@ (800b3a8 <UART_SetConfig+0x268>)
 800b1e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b1e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b1e8:	2b28      	cmp	r3, #40	@ 0x28
 800b1ea:	d865      	bhi.n	800b2b8 <UART_SetConfig+0x178>
 800b1ec:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b1f0:	00640029 	.word	0x00640029
 800b1f4:	00640064 	.word	0x00640064
 800b1f8:	00640064 	.word	0x00640064
 800b1fc:	00640064 	.word	0x00640064
 800b200:	0064014d 	.word	0x0064014d
 800b204:	00640064 	.word	0x00640064
 800b208:	00640064 	.word	0x00640064
 800b20c:	00640064 	.word	0x00640064
 800b210:	0064002b 	.word	0x0064002b
 800b214:	00640064 	.word	0x00640064
 800b218:	00640064 	.word	0x00640064
 800b21c:	00640064 	.word	0x00640064
 800b220:	0064005e 	.word	0x0064005e
 800b224:	00640064 	.word	0x00640064
 800b228:	00640064 	.word	0x00640064
 800b22c:	00640064 	.word	0x00640064
 800b230:	00640060 	.word	0x00640060
 800b234:	00640064 	.word	0x00640064
 800b238:	00640064 	.word	0x00640064
 800b23c:	00640064 	.word	0x00640064
 800b240:	0062      	.short	0x0062
 800b242:	2301      	movs	r3, #1
 800b244:	e000      	b.n	800b248 <UART_SetConfig+0x108>
 800b246:	2308      	movs	r3, #8
  if (UART_INSTANCE_LOWPOWER(huart))
 800b248:	494d      	ldr	r1, [pc, #308]	@ (800b380 <UART_SetConfig+0x240>)
 800b24a:	428a      	cmp	r2, r1
 800b24c:	f000 812f 	beq.w	800b4ae <UART_SetConfig+0x36e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b250:	69e0      	ldr	r0, [r4, #28]
 800b252:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800b256:	f000 81af 	beq.w	800b5b8 <UART_SetConfig+0x478>
    switch (clocksource)
 800b25a:	2b20      	cmp	r3, #32
 800b25c:	f200 8207 	bhi.w	800b66e <UART_SetConfig+0x52e>
 800b260:	2b20      	cmp	r3, #32
 800b262:	f200 8251 	bhi.w	800b708 <UART_SetConfig+0x5c8>
 800b266:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b26a:	021e      	.short	0x021e
 800b26c:	024f0224 	.word	0x024f0224
 800b270:	0227024f 	.word	0x0227024f
 800b274:	024f024f 	.word	0x024f024f
 800b278:	022c024f 	.word	0x022c024f
 800b27c:	024f024f 	.word	0x024f024f
 800b280:	024f024f 	.word	0x024f024f
 800b284:	024f024f 	.word	0x024f024f
 800b288:	0231024f 	.word	0x0231024f
 800b28c:	024f024f 	.word	0x024f024f
 800b290:	024f024f 	.word	0x024f024f
 800b294:	024f024f 	.word	0x024f024f
 800b298:	024f024f 	.word	0x024f024f
 800b29c:	024f024f 	.word	0x024f024f
 800b2a0:	024f024f 	.word	0x024f024f
 800b2a4:	024f024f 	.word	0x024f024f
 800b2a8:	023d024f 	.word	0x023d024f
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b2ac:	2310      	movs	r3, #16
 800b2ae:	e7cb      	b.n	800b248 <UART_SetConfig+0x108>
 800b2b0:	2320      	movs	r3, #32
 800b2b2:	e7c9      	b.n	800b248 <UART_SetConfig+0x108>
 800b2b4:	2340      	movs	r3, #64	@ 0x40
 800b2b6:	e7c7      	b.n	800b248 <UART_SetConfig+0x108>
 800b2b8:	2380      	movs	r3, #128	@ 0x80
 800b2ba:	e7c5      	b.n	800b248 <UART_SetConfig+0x108>
 800b2bc:	4b3a      	ldr	r3, [pc, #232]	@ (800b3a8 <UART_SetConfig+0x268>)
 800b2be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b2c0:	f003 0307 	and.w	r3, r3, #7
 800b2c4:	2b05      	cmp	r3, #5
 800b2c6:	d811      	bhi.n	800b2ec <UART_SetConfig+0x1ac>
 800b2c8:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b2cc:	00e10006 	.word	0x00e10006
 800b2d0:	000a0008 	.word	0x000a0008
 800b2d4:	000e000c 	.word	0x000e000c
 800b2d8:	2300      	movs	r3, #0
 800b2da:	e7b5      	b.n	800b248 <UART_SetConfig+0x108>
 800b2dc:	2308      	movs	r3, #8
 800b2de:	e7b3      	b.n	800b248 <UART_SetConfig+0x108>
 800b2e0:	2310      	movs	r3, #16
 800b2e2:	e7b1      	b.n	800b248 <UART_SetConfig+0x108>
 800b2e4:	2320      	movs	r3, #32
 800b2e6:	e7af      	b.n	800b248 <UART_SetConfig+0x108>
 800b2e8:	2340      	movs	r3, #64	@ 0x40
 800b2ea:	e7ad      	b.n	800b248 <UART_SetConfig+0x108>
 800b2ec:	2380      	movs	r3, #128	@ 0x80
 800b2ee:	e7ab      	b.n	800b248 <UART_SetConfig+0x108>
 800b2f0:	4b2d      	ldr	r3, [pc, #180]	@ (800b3a8 <UART_SetConfig+0x268>)
 800b2f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b2f4:	f003 0307 	and.w	r3, r3, #7
 800b2f8:	2b05      	cmp	r3, #5
 800b2fa:	d80e      	bhi.n	800b31a <UART_SetConfig+0x1da>
 800b2fc:	e8df f003 	tbb	[pc, r3]
 800b300:	0705c903 	.word	0x0705c903
 800b304:	0b09      	.short	0x0b09
 800b306:	2300      	movs	r3, #0
 800b308:	e79e      	b.n	800b248 <UART_SetConfig+0x108>
 800b30a:	2308      	movs	r3, #8
 800b30c:	e79c      	b.n	800b248 <UART_SetConfig+0x108>
 800b30e:	2310      	movs	r3, #16
 800b310:	e79a      	b.n	800b248 <UART_SetConfig+0x108>
 800b312:	2320      	movs	r3, #32
 800b314:	e798      	b.n	800b248 <UART_SetConfig+0x108>
 800b316:	2340      	movs	r3, #64	@ 0x40
 800b318:	e796      	b.n	800b248 <UART_SetConfig+0x108>
 800b31a:	2380      	movs	r3, #128	@ 0x80
 800b31c:	e794      	b.n	800b248 <UART_SetConfig+0x108>
 800b31e:	4b22      	ldr	r3, [pc, #136]	@ (800b3a8 <UART_SetConfig+0x268>)
 800b320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b322:	f003 0307 	and.w	r3, r3, #7
 800b326:	2b05      	cmp	r3, #5
 800b328:	d80e      	bhi.n	800b348 <UART_SetConfig+0x208>
 800b32a:	e8df f003 	tbb	[pc, r3]
 800b32e:	b403      	.short	0xb403
 800b330:	0b090705 	.word	0x0b090705
 800b334:	2300      	movs	r3, #0
 800b336:	e787      	b.n	800b248 <UART_SetConfig+0x108>
 800b338:	2308      	movs	r3, #8
 800b33a:	e785      	b.n	800b248 <UART_SetConfig+0x108>
 800b33c:	2310      	movs	r3, #16
 800b33e:	e783      	b.n	800b248 <UART_SetConfig+0x108>
 800b340:	2320      	movs	r3, #32
 800b342:	e781      	b.n	800b248 <UART_SetConfig+0x108>
 800b344:	2340      	movs	r3, #64	@ 0x40
 800b346:	e77f      	b.n	800b248 <UART_SetConfig+0x108>
 800b348:	2380      	movs	r3, #128	@ 0x80
 800b34a:	e77d      	b.n	800b248 <UART_SetConfig+0x108>
 800b34c:	4b16      	ldr	r3, [pc, #88]	@ (800b3a8 <UART_SetConfig+0x268>)
 800b34e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b350:	f003 0307 	and.w	r3, r3, #7
 800b354:	2b05      	cmp	r3, #5
 800b356:	d80e      	bhi.n	800b376 <UART_SetConfig+0x236>
 800b358:	e8df f003 	tbb	[pc, r3]
 800b35c:	07059f03 	.word	0x07059f03
 800b360:	0b09      	.short	0x0b09
 800b362:	2300      	movs	r3, #0
 800b364:	e770      	b.n	800b248 <UART_SetConfig+0x108>
 800b366:	2308      	movs	r3, #8
 800b368:	e76e      	b.n	800b248 <UART_SetConfig+0x108>
 800b36a:	2310      	movs	r3, #16
 800b36c:	e76c      	b.n	800b248 <UART_SetConfig+0x108>
 800b36e:	2320      	movs	r3, #32
 800b370:	e76a      	b.n	800b248 <UART_SetConfig+0x108>
 800b372:	2340      	movs	r3, #64	@ 0x40
 800b374:	e768      	b.n	800b248 <UART_SetConfig+0x108>
 800b376:	2380      	movs	r3, #128	@ 0x80
 800b378:	e766      	b.n	800b248 <UART_SetConfig+0x108>
 800b37a:	bf00      	nop
 800b37c:	cfff69f3 	.word	0xcfff69f3
 800b380:	58000c00 	.word	0x58000c00
 800b384:	11fff4ff 	.word	0x11fff4ff
 800b388:	40011000 	.word	0x40011000
 800b38c:	40004400 	.word	0x40004400
 800b390:	40004800 	.word	0x40004800
 800b394:	40004c00 	.word	0x40004c00
 800b398:	40005000 	.word	0x40005000
 800b39c:	40011400 	.word	0x40011400
 800b3a0:	40007800 	.word	0x40007800
 800b3a4:	40007c00 	.word	0x40007c00
 800b3a8:	58024400 	.word	0x58024400
 800b3ac:	4b7d      	ldr	r3, [pc, #500]	@ (800b5a4 <UART_SetConfig+0x464>)
 800b3ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b3b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b3b4:	2b28      	cmp	r3, #40	@ 0x28
 800b3b6:	d820      	bhi.n	800b3fa <UART_SetConfig+0x2ba>
 800b3b8:	e8df f003 	tbb	[pc, r3]
 800b3bc:	1f1f1f15 	.word	0x1f1f1f15
 800b3c0:	1f1f1f1f 	.word	0x1f1f1f1f
 800b3c4:	1f1f1f71 	.word	0x1f1f1f71
 800b3c8:	1f1f1f1f 	.word	0x1f1f1f1f
 800b3cc:	1f1f1f17 	.word	0x1f1f1f17
 800b3d0:	1f1f1f1f 	.word	0x1f1f1f1f
 800b3d4:	1f1f1f19 	.word	0x1f1f1f19
 800b3d8:	1f1f1f1f 	.word	0x1f1f1f1f
 800b3dc:	1f1f1f1b 	.word	0x1f1f1f1b
 800b3e0:	1f1f1f1f 	.word	0x1f1f1f1f
 800b3e4:	1d          	.byte	0x1d
 800b3e5:	00          	.byte	0x00
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	e72e      	b.n	800b248 <UART_SetConfig+0x108>
 800b3ea:	2308      	movs	r3, #8
 800b3ec:	e72c      	b.n	800b248 <UART_SetConfig+0x108>
 800b3ee:	2310      	movs	r3, #16
 800b3f0:	e72a      	b.n	800b248 <UART_SetConfig+0x108>
 800b3f2:	2320      	movs	r3, #32
 800b3f4:	e728      	b.n	800b248 <UART_SetConfig+0x108>
 800b3f6:	2340      	movs	r3, #64	@ 0x40
 800b3f8:	e726      	b.n	800b248 <UART_SetConfig+0x108>
 800b3fa:	2380      	movs	r3, #128	@ 0x80
 800b3fc:	e724      	b.n	800b248 <UART_SetConfig+0x108>
 800b3fe:	4b69      	ldr	r3, [pc, #420]	@ (800b5a4 <UART_SetConfig+0x464>)
 800b400:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b402:	f003 0307 	and.w	r3, r3, #7
 800b406:	2b05      	cmp	r3, #5
 800b408:	d80e      	bhi.n	800b428 <UART_SetConfig+0x2e8>
 800b40a:	e8df f003 	tbb	[pc, r3]
 800b40e:	4a03      	.short	0x4a03
 800b410:	0b090705 	.word	0x0b090705
 800b414:	2300      	movs	r3, #0
 800b416:	e717      	b.n	800b248 <UART_SetConfig+0x108>
 800b418:	2308      	movs	r3, #8
 800b41a:	e715      	b.n	800b248 <UART_SetConfig+0x108>
 800b41c:	2310      	movs	r3, #16
 800b41e:	e713      	b.n	800b248 <UART_SetConfig+0x108>
 800b420:	2320      	movs	r3, #32
 800b422:	e711      	b.n	800b248 <UART_SetConfig+0x108>
 800b424:	2340      	movs	r3, #64	@ 0x40
 800b426:	e70f      	b.n	800b248 <UART_SetConfig+0x108>
 800b428:	2380      	movs	r3, #128	@ 0x80
 800b42a:	e70d      	b.n	800b248 <UART_SetConfig+0x108>
 800b42c:	4b5d      	ldr	r3, [pc, #372]	@ (800b5a4 <UART_SetConfig+0x464>)
 800b42e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b430:	f003 0307 	and.w	r3, r3, #7
 800b434:	2b05      	cmp	r3, #5
 800b436:	d80e      	bhi.n	800b456 <UART_SetConfig+0x316>
 800b438:	e8df f003 	tbb	[pc, r3]
 800b43c:	07053503 	.word	0x07053503
 800b440:	0b09      	.short	0x0b09
 800b442:	2300      	movs	r3, #0
 800b444:	e700      	b.n	800b248 <UART_SetConfig+0x108>
 800b446:	2308      	movs	r3, #8
 800b448:	e6fe      	b.n	800b248 <UART_SetConfig+0x108>
 800b44a:	2310      	movs	r3, #16
 800b44c:	e6fc      	b.n	800b248 <UART_SetConfig+0x108>
 800b44e:	2320      	movs	r3, #32
 800b450:	e6fa      	b.n	800b248 <UART_SetConfig+0x108>
 800b452:	2340      	movs	r3, #64	@ 0x40
 800b454:	e6f8      	b.n	800b248 <UART_SetConfig+0x108>
 800b456:	2380      	movs	r3, #128	@ 0x80
 800b458:	e6f6      	b.n	800b248 <UART_SetConfig+0x108>
 800b45a:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
 800b45e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b460:	f003 0307 	and.w	r3, r3, #7
 800b464:	2b05      	cmp	r3, #5
 800b466:	d80e      	bhi.n	800b486 <UART_SetConfig+0x346>
 800b468:	e8df f003 	tbb	[pc, r3]
 800b46c:	07051f03 	.word	0x07051f03
 800b470:	0b09      	.short	0x0b09
 800b472:	2302      	movs	r3, #2
 800b474:	e6e8      	b.n	800b248 <UART_SetConfig+0x108>
 800b476:	2308      	movs	r3, #8
 800b478:	e6e6      	b.n	800b248 <UART_SetConfig+0x108>
 800b47a:	2310      	movs	r3, #16
 800b47c:	e6e4      	b.n	800b248 <UART_SetConfig+0x108>
 800b47e:	2320      	movs	r3, #32
 800b480:	e6e2      	b.n	800b248 <UART_SetConfig+0x108>
 800b482:	2340      	movs	r3, #64	@ 0x40
 800b484:	e6e0      	b.n	800b248 <UART_SetConfig+0x108>
 800b486:	2380      	movs	r3, #128	@ 0x80
 800b488:	e6de      	b.n	800b248 <UART_SetConfig+0x108>
 800b48a:	2304      	movs	r3, #4
 800b48c:	e6dc      	b.n	800b248 <UART_SetConfig+0x108>
 800b48e:	2304      	movs	r3, #4
 800b490:	e6da      	b.n	800b248 <UART_SetConfig+0x108>
 800b492:	2304      	movs	r3, #4
 800b494:	e6d8      	b.n	800b248 <UART_SetConfig+0x108>
 800b496:	2304      	movs	r3, #4
 800b498:	e6d6      	b.n	800b248 <UART_SetConfig+0x108>
 800b49a:	2304      	movs	r3, #4
 800b49c:	e6d4      	b.n	800b248 <UART_SetConfig+0x108>
 800b49e:	2304      	movs	r3, #4
 800b4a0:	e6d2      	b.n	800b248 <UART_SetConfig+0x108>
 800b4a2:	2304      	movs	r3, #4
 800b4a4:	e6d0      	b.n	800b248 <UART_SetConfig+0x108>
 800b4a6:	2304      	movs	r3, #4
 800b4a8:	e6ce      	b.n	800b248 <UART_SetConfig+0x108>
 800b4aa:	2304      	movs	r3, #4
 800b4ac:	e6cc      	b.n	800b248 <UART_SetConfig+0x108>
    switch (clocksource)
 800b4ae:	2b20      	cmp	r3, #32
 800b4b0:	d827      	bhi.n	800b502 <UART_SetConfig+0x3c2>
 800b4b2:	2b02      	cmp	r3, #2
 800b4b4:	f0c0 811a 	bcc.w	800b6ec <UART_SetConfig+0x5ac>
 800b4b8:	3b02      	subs	r3, #2
 800b4ba:	2b1e      	cmp	r3, #30
 800b4bc:	f200 8118 	bhi.w	800b6f0 <UART_SetConfig+0x5b0>
 800b4c0:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b4c4:	01160050 	.word	0x01160050
 800b4c8:	01160056 	.word	0x01160056
 800b4cc:	01160116 	.word	0x01160116
 800b4d0:	0116005b 	.word	0x0116005b
 800b4d4:	01160116 	.word	0x01160116
 800b4d8:	01160116 	.word	0x01160116
 800b4dc:	01160116 	.word	0x01160116
 800b4e0:	01160060 	.word	0x01160060
 800b4e4:	01160116 	.word	0x01160116
 800b4e8:	01160116 	.word	0x01160116
 800b4ec:	01160116 	.word	0x01160116
 800b4f0:	01160116 	.word	0x01160116
 800b4f4:	01160116 	.word	0x01160116
 800b4f8:	01160116 	.word	0x01160116
 800b4fc:	01160116 	.word	0x01160116
 800b500:	006c      	.short	0x006c
 800b502:	2b40      	cmp	r3, #64	@ 0x40
 800b504:	d12c      	bne.n	800b560 <UART_SetConfig+0x420>
        pclk = (uint32_t) LSE_VALUE;
 800b506:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b50a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800b50c:	4b26      	ldr	r3, [pc, #152]	@ (800b5a8 <UART_SetConfig+0x468>)
 800b50e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800b512:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b516:	6865      	ldr	r5, [r4, #4]
 800b518:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800b51c:	4299      	cmp	r1, r3
 800b51e:	f200 80e9 	bhi.w	800b6f4 <UART_SetConfig+0x5b4>
 800b522:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800b526:	f200 80e7 	bhi.w	800b6f8 <UART_SetConfig+0x5b8>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b52a:	2600      	movs	r6, #0
 800b52c:	4633      	mov	r3, r6
 800b52e:	4631      	mov	r1, r6
 800b530:	f7f5 f89c 	bl	800066c <__aeabi_uldivmod>
 800b534:	0209      	lsls	r1, r1, #8
 800b536:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800b53a:	0200      	lsls	r0, r0, #8
 800b53c:	086b      	lsrs	r3, r5, #1
 800b53e:	18c0      	adds	r0, r0, r3
 800b540:	462a      	mov	r2, r5
 800b542:	4633      	mov	r3, r6
 800b544:	f141 0100 	adc.w	r1, r1, #0
 800b548:	f7f5 f890 	bl	800066c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b54c:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 800b550:	4b16      	ldr	r3, [pc, #88]	@ (800b5ac <UART_SetConfig+0x46c>)
 800b552:	429a      	cmp	r2, r3
 800b554:	f200 80d2 	bhi.w	800b6fc <UART_SetConfig+0x5bc>
          huart->Instance->BRR = usartdiv;
 800b558:	6823      	ldr	r3, [r4, #0]
 800b55a:	60d8      	str	r0, [r3, #12]
 800b55c:	4630      	mov	r0, r6
 800b55e:	e0d4      	b.n	800b70a <UART_SetConfig+0x5ca>
    switch (clocksource)
 800b560:	2001      	movs	r0, #1
 800b562:	e0d2      	b.n	800b70a <UART_SetConfig+0x5ca>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b564:	f7fc fff2 	bl	800854c <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 800b568:	2800      	cmp	r0, #0
 800b56a:	d1ce      	bne.n	800b50a <UART_SetConfig+0x3ca>
 800b56c:	2000      	movs	r0, #0
 800b56e:	e0cc      	b.n	800b70a <UART_SetConfig+0x5ca>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b570:	a803      	add	r0, sp, #12
 800b572:	f7fc fffd 	bl	8008570 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b576:	9804      	ldr	r0, [sp, #16]
        break;
 800b578:	e7f6      	b.n	800b568 <UART_SetConfig+0x428>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b57a:	4668      	mov	r0, sp
 800b57c:	f7fd f8f6 	bl	800876c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b580:	9801      	ldr	r0, [sp, #4]
        break;
 800b582:	e7f1      	b.n	800b568 <UART_SetConfig+0x428>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b584:	4b07      	ldr	r3, [pc, #28]	@ (800b5a4 <UART_SetConfig+0x464>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	f013 0f20 	tst.w	r3, #32
 800b58c:	d008      	beq.n	800b5a0 <UART_SetConfig+0x460>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b58e:	4b05      	ldr	r3, [pc, #20]	@ (800b5a4 <UART_SetConfig+0x464>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800b596:	4806      	ldr	r0, [pc, #24]	@ (800b5b0 <UART_SetConfig+0x470>)
 800b598:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800b59a:	e7b6      	b.n	800b50a <UART_SetConfig+0x3ca>
    switch (clocksource)
 800b59c:	4805      	ldr	r0, [pc, #20]	@ (800b5b4 <UART_SetConfig+0x474>)
 800b59e:	e7b4      	b.n	800b50a <UART_SetConfig+0x3ca>
          pclk = (uint32_t) HSI_VALUE;
 800b5a0:	4803      	ldr	r0, [pc, #12]	@ (800b5b0 <UART_SetConfig+0x470>)
 800b5a2:	e7b2      	b.n	800b50a <UART_SetConfig+0x3ca>
 800b5a4:	58024400 	.word	0x58024400
 800b5a8:	0801b37c 	.word	0x0801b37c
 800b5ac:	000ffcff 	.word	0x000ffcff
 800b5b0:	03d09000 	.word	0x03d09000
 800b5b4:	003d0900 	.word	0x003d0900
    switch (clocksource)
 800b5b8:	2b20      	cmp	r3, #32
 800b5ba:	d815      	bhi.n	800b5e8 <UART_SetConfig+0x4a8>
 800b5bc:	2b20      	cmp	r3, #32
 800b5be:	f200 809f 	bhi.w	800b700 <UART_SetConfig+0x5c0>
 800b5c2:	e8df f003 	tbb	[pc, r3]
 800b5c6:	3731      	.short	0x3731
 800b5c8:	9d3a9d9d 	.word	0x9d3a9d9d
 800b5cc:	9d3f9d9d 	.word	0x9d3f9d9d
 800b5d0:	9d9d9d9d 	.word	0x9d9d9d9d
 800b5d4:	9d449d9d 	.word	0x9d449d9d
 800b5d8:	9d9d9d9d 	.word	0x9d9d9d9d
 800b5dc:	9d9d9d9d 	.word	0x9d9d9d9d
 800b5e0:	9d9d9d9d 	.word	0x9d9d9d9d
 800b5e4:	9d9d      	.short	0x9d9d
 800b5e6:	50          	.byte	0x50
 800b5e7:	00          	.byte	0x00
 800b5e8:	2b40      	cmp	r3, #64	@ 0x40
 800b5ea:	d11b      	bne.n	800b624 <UART_SetConfig+0x4e4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b5ec:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800b5ee:	4b4d      	ldr	r3, [pc, #308]	@ (800b724 <UART_SetConfig+0x5e4>)
 800b5f0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800b5f4:	fbb0 f0f3 	udiv	r0, r0, r3
 800b5f8:	6862      	ldr	r2, [r4, #4]
 800b5fa:	0853      	lsrs	r3, r2, #1
 800b5fc:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800b600:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b604:	f1a3 0110 	sub.w	r1, r3, #16
 800b608:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 800b60c:	4291      	cmp	r1, r2
 800b60e:	d879      	bhi.n	800b704 <UART_SetConfig+0x5c4>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b610:	b29a      	uxth	r2, r3
 800b612:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b616:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800b61a:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 800b61c:	6822      	ldr	r2, [r4, #0]
 800b61e:	60d3      	str	r3, [r2, #12]
 800b620:	2000      	movs	r0, #0
 800b622:	e072      	b.n	800b70a <UART_SetConfig+0x5ca>
    switch (clocksource)
 800b624:	2001      	movs	r0, #1
 800b626:	e070      	b.n	800b70a <UART_SetConfig+0x5ca>
        pclk = HAL_RCC_GetPCLK1Freq();
 800b628:	f7fc f954 	bl	80078d4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800b62c:	2800      	cmp	r0, #0
 800b62e:	d1dd      	bne.n	800b5ec <UART_SetConfig+0x4ac>
 800b630:	2000      	movs	r0, #0
 800b632:	e06a      	b.n	800b70a <UART_SetConfig+0x5ca>
        pclk = HAL_RCC_GetPCLK2Freq();
 800b634:	f7fc f960 	bl	80078f8 <HAL_RCC_GetPCLK2Freq>
        break;
 800b638:	e7f8      	b.n	800b62c <UART_SetConfig+0x4ec>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b63a:	a803      	add	r0, sp, #12
 800b63c:	f7fc ff98 	bl	8008570 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b640:	9804      	ldr	r0, [sp, #16]
        break;
 800b642:	e7f3      	b.n	800b62c <UART_SetConfig+0x4ec>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b644:	4668      	mov	r0, sp
 800b646:	f7fd f891 	bl	800876c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b64a:	9801      	ldr	r0, [sp, #4]
        break;
 800b64c:	e7ee      	b.n	800b62c <UART_SetConfig+0x4ec>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b64e:	4b36      	ldr	r3, [pc, #216]	@ (800b728 <UART_SetConfig+0x5e8>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	f013 0f20 	tst.w	r3, #32
 800b656:	d008      	beq.n	800b66a <UART_SetConfig+0x52a>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b658:	4b33      	ldr	r3, [pc, #204]	@ (800b728 <UART_SetConfig+0x5e8>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800b660:	4832      	ldr	r0, [pc, #200]	@ (800b72c <UART_SetConfig+0x5ec>)
 800b662:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800b664:	e7c2      	b.n	800b5ec <UART_SetConfig+0x4ac>
    switch (clocksource)
 800b666:	4832      	ldr	r0, [pc, #200]	@ (800b730 <UART_SetConfig+0x5f0>)
 800b668:	e7c0      	b.n	800b5ec <UART_SetConfig+0x4ac>
          pclk = (uint32_t) HSI_VALUE;
 800b66a:	4830      	ldr	r0, [pc, #192]	@ (800b72c <UART_SetConfig+0x5ec>)
 800b66c:	e7be      	b.n	800b5ec <UART_SetConfig+0x4ac>
    switch (clocksource)
 800b66e:	2b40      	cmp	r3, #64	@ 0x40
 800b670:	d117      	bne.n	800b6a2 <UART_SetConfig+0x562>
        pclk = (uint32_t) LSE_VALUE;
 800b672:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b676:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800b678:	4b2a      	ldr	r3, [pc, #168]	@ (800b724 <UART_SetConfig+0x5e4>)
 800b67a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800b67e:	fbb0 f0f3 	udiv	r0, r0, r3
 800b682:	6863      	ldr	r3, [r4, #4]
 800b684:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800b688:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b68c:	f1a0 0210 	sub.w	r2, r0, #16
 800b690:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 800b694:	429a      	cmp	r2, r3
 800b696:	d842      	bhi.n	800b71e <UART_SetConfig+0x5de>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b698:	6823      	ldr	r3, [r4, #0]
 800b69a:	b280      	uxth	r0, r0
 800b69c:	60d8      	str	r0, [r3, #12]
 800b69e:	2000      	movs	r0, #0
 800b6a0:	e033      	b.n	800b70a <UART_SetConfig+0x5ca>
    switch (clocksource)
 800b6a2:	2001      	movs	r0, #1
 800b6a4:	e031      	b.n	800b70a <UART_SetConfig+0x5ca>
        pclk = HAL_RCC_GetPCLK1Freq();
 800b6a6:	f7fc f915 	bl	80078d4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800b6aa:	2800      	cmp	r0, #0
 800b6ac:	d1e3      	bne.n	800b676 <UART_SetConfig+0x536>
 800b6ae:	2000      	movs	r0, #0
 800b6b0:	e02b      	b.n	800b70a <UART_SetConfig+0x5ca>
        pclk = HAL_RCC_GetPCLK2Freq();
 800b6b2:	f7fc f921 	bl	80078f8 <HAL_RCC_GetPCLK2Freq>
        break;
 800b6b6:	e7f8      	b.n	800b6aa <UART_SetConfig+0x56a>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b6b8:	a803      	add	r0, sp, #12
 800b6ba:	f7fc ff59 	bl	8008570 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b6be:	9804      	ldr	r0, [sp, #16]
        break;
 800b6c0:	e7f3      	b.n	800b6aa <UART_SetConfig+0x56a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b6c2:	4668      	mov	r0, sp
 800b6c4:	f7fd f852 	bl	800876c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b6c8:	9801      	ldr	r0, [sp, #4]
        break;
 800b6ca:	e7ee      	b.n	800b6aa <UART_SetConfig+0x56a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b6cc:	4b16      	ldr	r3, [pc, #88]	@ (800b728 <UART_SetConfig+0x5e8>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	f013 0f20 	tst.w	r3, #32
 800b6d4:	d008      	beq.n	800b6e8 <UART_SetConfig+0x5a8>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b6d6:	4b14      	ldr	r3, [pc, #80]	@ (800b728 <UART_SetConfig+0x5e8>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800b6de:	4813      	ldr	r0, [pc, #76]	@ (800b72c <UART_SetConfig+0x5ec>)
 800b6e0:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800b6e2:	e7c8      	b.n	800b676 <UART_SetConfig+0x536>
    switch (clocksource)
 800b6e4:	4812      	ldr	r0, [pc, #72]	@ (800b730 <UART_SetConfig+0x5f0>)
 800b6e6:	e7c6      	b.n	800b676 <UART_SetConfig+0x536>
          pclk = (uint32_t) HSI_VALUE;
 800b6e8:	4810      	ldr	r0, [pc, #64]	@ (800b72c <UART_SetConfig+0x5ec>)
 800b6ea:	e7c4      	b.n	800b676 <UART_SetConfig+0x536>
    switch (clocksource)
 800b6ec:	2001      	movs	r0, #1
 800b6ee:	e00c      	b.n	800b70a <UART_SetConfig+0x5ca>
 800b6f0:	2001      	movs	r0, #1
 800b6f2:	e00a      	b.n	800b70a <UART_SetConfig+0x5ca>
        ret = HAL_ERROR;
 800b6f4:	2001      	movs	r0, #1
 800b6f6:	e008      	b.n	800b70a <UART_SetConfig+0x5ca>
 800b6f8:	2001      	movs	r0, #1
 800b6fa:	e006      	b.n	800b70a <UART_SetConfig+0x5ca>
          ret = HAL_ERROR;
 800b6fc:	2001      	movs	r0, #1
 800b6fe:	e004      	b.n	800b70a <UART_SetConfig+0x5ca>
    switch (clocksource)
 800b700:	2001      	movs	r0, #1
 800b702:	e002      	b.n	800b70a <UART_SetConfig+0x5ca>
        ret = HAL_ERROR;
 800b704:	2001      	movs	r0, #1
 800b706:	e000      	b.n	800b70a <UART_SetConfig+0x5ca>
    switch (clocksource)
 800b708:	2001      	movs	r0, #1
  huart->NbTxDataToProcess = 1;
 800b70a:	2301      	movs	r3, #1
 800b70c:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b710:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 800b714:	2300      	movs	r3, #0
 800b716:	6723      	str	r3, [r4, #112]	@ 0x70
  huart->TxISR = NULL;
 800b718:	6763      	str	r3, [r4, #116]	@ 0x74
}
 800b71a:	b006      	add	sp, #24
 800b71c:	bd70      	pop	{r4, r5, r6, pc}
        ret = HAL_ERROR;
 800b71e:	2001      	movs	r0, #1
 800b720:	e7f3      	b.n	800b70a <UART_SetConfig+0x5ca>
 800b722:	bf00      	nop
 800b724:	0801b37c 	.word	0x0801b37c
 800b728:	58024400 	.word	0x58024400
 800b72c:	03d09000 	.word	0x03d09000
 800b730:	003d0900 	.word	0x003d0900

0800b734 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b734:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800b736:	f013 0f01 	tst.w	r3, #1
 800b73a:	d006      	beq.n	800b74a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b73c:	6802      	ldr	r2, [r0, #0]
 800b73e:	6853      	ldr	r3, [r2, #4]
 800b740:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b744:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800b746:	430b      	orrs	r3, r1
 800b748:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b74a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800b74c:	f013 0f02 	tst.w	r3, #2
 800b750:	d006      	beq.n	800b760 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b752:	6802      	ldr	r2, [r0, #0]
 800b754:	6853      	ldr	r3, [r2, #4]
 800b756:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b75a:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 800b75c:	430b      	orrs	r3, r1
 800b75e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b760:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800b762:	f013 0f04 	tst.w	r3, #4
 800b766:	d006      	beq.n	800b776 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b768:	6802      	ldr	r2, [r0, #0]
 800b76a:	6853      	ldr	r3, [r2, #4]
 800b76c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b770:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 800b772:	430b      	orrs	r3, r1
 800b774:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b776:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800b778:	f013 0f08 	tst.w	r3, #8
 800b77c:	d006      	beq.n	800b78c <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b77e:	6802      	ldr	r2, [r0, #0]
 800b780:	6853      	ldr	r3, [r2, #4]
 800b782:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b786:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800b788:	430b      	orrs	r3, r1
 800b78a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b78c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800b78e:	f013 0f10 	tst.w	r3, #16
 800b792:	d006      	beq.n	800b7a2 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b794:	6802      	ldr	r2, [r0, #0]
 800b796:	6893      	ldr	r3, [r2, #8]
 800b798:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b79c:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 800b79e:	430b      	orrs	r3, r1
 800b7a0:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b7a2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800b7a4:	f013 0f20 	tst.w	r3, #32
 800b7a8:	d006      	beq.n	800b7b8 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b7aa:	6802      	ldr	r2, [r0, #0]
 800b7ac:	6893      	ldr	r3, [r2, #8]
 800b7ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b7b2:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 800b7b4:	430b      	orrs	r3, r1
 800b7b6:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b7b8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800b7ba:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800b7be:	d00a      	beq.n	800b7d6 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b7c0:	6802      	ldr	r2, [r0, #0]
 800b7c2:	6853      	ldr	r3, [r2, #4]
 800b7c4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b7c8:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 800b7ca:	430b      	orrs	r3, r1
 800b7cc:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b7ce:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800b7d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b7d4:	d00b      	beq.n	800b7ee <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b7d6:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800b7d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b7dc:	d006      	beq.n	800b7ec <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b7de:	6802      	ldr	r2, [r0, #0]
 800b7e0:	6853      	ldr	r3, [r2, #4]
 800b7e2:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800b7e6:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800b7e8:	430b      	orrs	r3, r1
 800b7ea:	6053      	str	r3, [r2, #4]
}
 800b7ec:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b7ee:	6802      	ldr	r2, [r0, #0]
 800b7f0:	6853      	ldr	r3, [r2, #4]
 800b7f2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800b7f6:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 800b7f8:	430b      	orrs	r3, r1
 800b7fa:	6053      	str	r3, [r2, #4]
 800b7fc:	e7eb      	b.n	800b7d6 <UART_AdvFeatureConfig+0xa2>

0800b7fe <UART_WaitOnFlagUntilTimeout>:
{
 800b7fe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b802:	4605      	mov	r5, r0
 800b804:	460f      	mov	r7, r1
 800b806:	4616      	mov	r6, r2
 800b808:	4699      	mov	r9, r3
 800b80a:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b80e:	682b      	ldr	r3, [r5, #0]
 800b810:	69dc      	ldr	r4, [r3, #28]
 800b812:	ea37 0404 	bics.w	r4, r7, r4
 800b816:	bf0c      	ite	eq
 800b818:	2401      	moveq	r4, #1
 800b81a:	2400      	movne	r4, #0
 800b81c:	42b4      	cmp	r4, r6
 800b81e:	d157      	bne.n	800b8d0 <UART_WaitOnFlagUntilTimeout+0xd2>
    if (Timeout != HAL_MAX_DELAY)
 800b820:	f1b8 3fff 	cmp.w	r8, #4294967295
 800b824:	d0f3      	beq.n	800b80e <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b826:	f7f7 fe29 	bl	800347c <HAL_GetTick>
 800b82a:	eba0 0009 	sub.w	r0, r0, r9
 800b82e:	4540      	cmp	r0, r8
 800b830:	d82f      	bhi.n	800b892 <UART_WaitOnFlagUntilTimeout+0x94>
 800b832:	f1b8 0f00 	cmp.w	r8, #0
 800b836:	d02c      	beq.n	800b892 <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b838:	682b      	ldr	r3, [r5, #0]
 800b83a:	681a      	ldr	r2, [r3, #0]
 800b83c:	f012 0f04 	tst.w	r2, #4
 800b840:	d0e5      	beq.n	800b80e <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b842:	69da      	ldr	r2, [r3, #28]
 800b844:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 800b848:	d0e1      	beq.n	800b80e <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b84a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b84e:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b850:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b852:	e852 3f00 	ldrex	r3, [r2]
 800b856:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b85a:	e842 3100 	strex	r1, r3, [r2]
 800b85e:	2900      	cmp	r1, #0
 800b860:	d1f6      	bne.n	800b850 <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b862:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b864:	f102 0308 	add.w	r3, r2, #8
 800b868:	e853 3f00 	ldrex	r3, [r3]
 800b86c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b870:	3208      	adds	r2, #8
 800b872:	e842 3100 	strex	r1, r3, [r2]
 800b876:	2900      	cmp	r1, #0
 800b878:	d1f3      	bne.n	800b862 <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 800b87a:	2320      	movs	r3, #32
 800b87c:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b880:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b884:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
          __HAL_UNLOCK(huart);
 800b888:	2300      	movs	r3, #0
 800b88a:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
          return HAL_TIMEOUT;
 800b88e:	2003      	movs	r0, #3
 800b890:	e01f      	b.n	800b8d2 <UART_WaitOnFlagUntilTimeout+0xd4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b892:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b894:	e852 3f00 	ldrex	r3, [r2]
 800b898:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b89c:	e842 3100 	strex	r1, r3, [r2]
 800b8a0:	2900      	cmp	r1, #0
 800b8a2:	d1f6      	bne.n	800b892 <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8a4:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8a6:	f102 0308 	add.w	r3, r2, #8
 800b8aa:	e853 3f00 	ldrex	r3, [r3]
 800b8ae:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8b2:	3208      	adds	r2, #8
 800b8b4:	e842 3100 	strex	r1, r3, [r2]
 800b8b8:	2900      	cmp	r1, #0
 800b8ba:	d1f3      	bne.n	800b8a4 <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 800b8bc:	2320      	movs	r3, #32
 800b8be:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b8c2:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
        __HAL_UNLOCK(huart);
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
        return HAL_TIMEOUT;
 800b8cc:	2003      	movs	r0, #3
 800b8ce:	e000      	b.n	800b8d2 <UART_WaitOnFlagUntilTimeout+0xd4>
  return HAL_OK;
 800b8d0:	2000      	movs	r0, #0
}
 800b8d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800b8d6 <UART_CheckIdleState>:
{
 800b8d6:	b530      	push	{r4, r5, lr}
 800b8d8:	b083      	sub	sp, #12
 800b8da:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8dc:	2300      	movs	r3, #0
 800b8de:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  tickstart = HAL_GetTick();
 800b8e2:	f7f7 fdcb 	bl	800347c <HAL_GetTick>
 800b8e6:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b8e8:	6822      	ldr	r2, [r4, #0]
 800b8ea:	6812      	ldr	r2, [r2, #0]
 800b8ec:	f012 0f08 	tst.w	r2, #8
 800b8f0:	d10f      	bne.n	800b912 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b8f2:	6823      	ldr	r3, [r4, #0]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	f013 0f04 	tst.w	r3, #4
 800b8fa:	d118      	bne.n	800b92e <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 800b8fc:	2320      	movs	r3, #32
 800b8fe:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b902:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b906:	2000      	movs	r0, #0
 800b908:	66e0      	str	r0, [r4, #108]	@ 0x6c
  __HAL_UNLOCK(huart);
 800b90a:	f884 0080 	strb.w	r0, [r4, #128]	@ 0x80
}
 800b90e:	b003      	add	sp, #12
 800b910:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b912:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b916:	9300      	str	r3, [sp, #0]
 800b918:	4603      	mov	r3, r0
 800b91a:	2200      	movs	r2, #0
 800b91c:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b920:	4620      	mov	r0, r4
 800b922:	f7ff ff6c 	bl	800b7fe <UART_WaitOnFlagUntilTimeout>
 800b926:	2800      	cmp	r0, #0
 800b928:	d0e3      	beq.n	800b8f2 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 800b92a:	2003      	movs	r0, #3
 800b92c:	e7ef      	b.n	800b90e <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b92e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b932:	9300      	str	r3, [sp, #0]
 800b934:	462b      	mov	r3, r5
 800b936:	2200      	movs	r2, #0
 800b938:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b93c:	4620      	mov	r0, r4
 800b93e:	f7ff ff5e 	bl	800b7fe <UART_WaitOnFlagUntilTimeout>
 800b942:	2800      	cmp	r0, #0
 800b944:	d0da      	beq.n	800b8fc <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 800b946:	2003      	movs	r0, #3
 800b948:	e7e1      	b.n	800b90e <UART_CheckIdleState+0x38>

0800b94a <HAL_UART_Init>:
  if (huart == NULL)
 800b94a:	b378      	cbz	r0, 800b9ac <HAL_UART_Init+0x62>
{
 800b94c:	b510      	push	{r4, lr}
 800b94e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800b950:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 800b954:	b30b      	cbz	r3, 800b99a <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800b956:	2324      	movs	r3, #36	@ 0x24
 800b958:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  __HAL_UART_DISABLE(huart);
 800b95c:	6822      	ldr	r2, [r4, #0]
 800b95e:	6813      	ldr	r3, [r2, #0]
 800b960:	f023 0301 	bic.w	r3, r3, #1
 800b964:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b966:	4620      	mov	r0, r4
 800b968:	f7ff fbea 	bl	800b140 <UART_SetConfig>
 800b96c:	2801      	cmp	r0, #1
 800b96e:	d013      	beq.n	800b998 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b970:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b972:	b9bb      	cbnz	r3, 800b9a4 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b974:	6822      	ldr	r2, [r4, #0]
 800b976:	6853      	ldr	r3, [r2, #4]
 800b978:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 800b97c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b97e:	6822      	ldr	r2, [r4, #0]
 800b980:	6893      	ldr	r3, [r2, #8]
 800b982:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 800b986:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800b988:	6822      	ldr	r2, [r4, #0]
 800b98a:	6813      	ldr	r3, [r2, #0]
 800b98c:	f043 0301 	orr.w	r3, r3, #1
 800b990:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800b992:	4620      	mov	r0, r4
 800b994:	f7ff ff9f 	bl	800b8d6 <UART_CheckIdleState>
}
 800b998:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800b99a:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
    HAL_UART_MspInit(huart);
 800b99e:	f7f6 ff99 	bl	80028d4 <HAL_UART_MspInit>
 800b9a2:	e7d8      	b.n	800b956 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 800b9a4:	4620      	mov	r0, r4
 800b9a6:	f7ff fec5 	bl	800b734 <UART_AdvFeatureConfig>
 800b9aa:	e7e3      	b.n	800b974 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 800b9ac:	2001      	movs	r0, #1
}
 800b9ae:	4770      	bx	lr

0800b9b0 <UART_Start_Receive_DMA>:
{
 800b9b0:	b510      	push	{r4, lr}
 800b9b2:	4604      	mov	r4, r0
 800b9b4:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 800b9b6:	6581      	str	r1, [r0, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b9b8:	f8a0 205c 	strh.w	r2, [r0, #92]	@ 0x5c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9bc:	2200      	movs	r2, #0
 800b9be:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b9c2:	2222      	movs	r2, #34	@ 0x22
 800b9c4:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  if (huart->hdmarx != NULL)
 800b9c8:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 800b9ca:	b18a      	cbz	r2, 800b9f0 <UART_Start_Receive_DMA+0x40>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b9cc:	4922      	ldr	r1, [pc, #136]	@ (800ba58 <UART_Start_Receive_DMA+0xa8>)
 800b9ce:	63d1      	str	r1, [r2, #60]	@ 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b9d0:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 800b9d2:	4922      	ldr	r1, [pc, #136]	@ (800ba5c <UART_Start_Receive_DMA+0xac>)
 800b9d4:	6411      	str	r1, [r2, #64]	@ 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b9d6:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 800b9d8:	4921      	ldr	r1, [pc, #132]	@ (800ba60 <UART_Start_Receive_DMA+0xb0>)
 800b9da:	64d1      	str	r1, [r2, #76]	@ 0x4c
    huart->hdmarx->XferAbortCallback = NULL;
 800b9dc:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 800b9de:	2100      	movs	r1, #0
 800b9e0:	6511      	str	r1, [r2, #80]	@ 0x50
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b9e2:	6801      	ldr	r1, [r0, #0]
 800b9e4:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 800b9e6:	3124      	adds	r1, #36	@ 0x24
 800b9e8:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 800b9ea:	f7f8 ff47 	bl	800487c <HAL_DMA_Start_IT>
 800b9ee:	bb38      	cbnz	r0, 800ba40 <UART_Start_Receive_DMA+0x90>
  __HAL_UNLOCK(huart);
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b9f6:	6923      	ldr	r3, [r4, #16]
 800b9f8:	b143      	cbz	r3, 800ba0c <UART_Start_Receive_DMA+0x5c>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b9fa:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9fc:	e852 3f00 	ldrex	r3, [r2]
 800ba00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba04:	e842 3100 	strex	r1, r3, [r2]
 800ba08:	2900      	cmp	r1, #0
 800ba0a:	d1f6      	bne.n	800b9fa <UART_Start_Receive_DMA+0x4a>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba0c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba0e:	f102 0308 	add.w	r3, r2, #8
 800ba12:	e853 3f00 	ldrex	r3, [r3]
 800ba16:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba1a:	3208      	adds	r2, #8
 800ba1c:	e842 3100 	strex	r1, r3, [r2]
 800ba20:	2900      	cmp	r1, #0
 800ba22:	d1f3      	bne.n	800ba0c <UART_Start_Receive_DMA+0x5c>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba24:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba26:	f102 0308 	add.w	r3, r2, #8
 800ba2a:	e853 3f00 	ldrex	r3, [r3]
 800ba2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba32:	3208      	adds	r2, #8
 800ba34:	e842 3100 	strex	r1, r3, [r2]
 800ba38:	2900      	cmp	r1, #0
 800ba3a:	d1f3      	bne.n	800ba24 <UART_Start_Receive_DMA+0x74>
  return HAL_OK;
 800ba3c:	2000      	movs	r0, #0
}
 800ba3e:	bd10      	pop	{r4, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ba40:	2310      	movs	r3, #16
 800ba42:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      __HAL_UNLOCK(huart);
 800ba46:	2300      	movs	r3, #0
 800ba48:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
      huart->RxState = HAL_UART_STATE_READY;
 800ba4c:	2320      	movs	r3, #32
 800ba4e:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_ERROR;
 800ba52:	2001      	movs	r0, #1
 800ba54:	e7f3      	b.n	800ba3e <UART_Start_Receive_DMA+0x8e>
 800ba56:	bf00      	nop
 800ba58:	0800b0b5 	.word	0x0800b0b5
 800ba5c:	0800b099 	.word	0x0800b099
 800ba60:	0800ac89 	.word	0x0800ac89

0800ba64 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ba64:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 800ba66:	b92b      	cbnz	r3, 800ba74 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 800ba68:	2301      	movs	r3, #1
 800ba6a:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ba6e:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
 800ba72:	4770      	bx	lr
{
 800ba74:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ba76:	6803      	ldr	r3, [r0, #0]
 800ba78:	689a      	ldr	r2, [r3, #8]
 800ba7a:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ba7e:	6899      	ldr	r1, [r3, #8]
 800ba80:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ba82:	4d09      	ldr	r5, [pc, #36]	@ (800baa8 <UARTEx_SetNbDataToProcess+0x44>)
 800ba84:	5c6b      	ldrb	r3, [r5, r1]
 800ba86:	011b      	lsls	r3, r3, #4
                               (uint16_t)denominator[tx_fifo_threshold];
 800ba88:	4c08      	ldr	r4, [pc, #32]	@ (800baac <UARTEx_SetNbDataToProcess+0x48>)
 800ba8a:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ba8c:	fb93 f3f1 	sdiv	r3, r3, r1
 800ba90:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ba94:	5cab      	ldrb	r3, [r5, r2]
 800ba96:	011b      	lsls	r3, r3, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 800ba98:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ba9a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba9e:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
  }
}
 800baa2:	bc30      	pop	{r4, r5}
 800baa4:	4770      	bx	lr
 800baa6:	bf00      	nop
 800baa8:	0801b39c 	.word	0x0801b39c
 800baac:	0801b394 	.word	0x0801b394

0800bab0 <HAL_RS485Ex_Init>:
  if (huart == NULL)
 800bab0:	2800      	cmp	r0, #0
 800bab2:	d03c      	beq.n	800bb2e <HAL_RS485Ex_Init+0x7e>
{
 800bab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bab6:	460f      	mov	r7, r1
 800bab8:	4616      	mov	r6, r2
 800baba:	461d      	mov	r5, r3
 800babc:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800babe:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 800bac2:	b35b      	cbz	r3, 800bb1c <HAL_RS485Ex_Init+0x6c>
  huart->gState = HAL_UART_STATE_BUSY;
 800bac4:	2324      	movs	r3, #36	@ 0x24
 800bac6:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  __HAL_UART_DISABLE(huart);
 800baca:	6822      	ldr	r2, [r4, #0]
 800bacc:	6813      	ldr	r3, [r2, #0]
 800bace:	f023 0301 	bic.w	r3, r3, #1
 800bad2:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bad4:	4620      	mov	r0, r4
 800bad6:	f7ff fb33 	bl	800b140 <UART_SetConfig>
 800bada:	2801      	cmp	r0, #1
 800badc:	d01d      	beq.n	800bb1a <HAL_RS485Ex_Init+0x6a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bade:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800bae0:	bb0b      	cbnz	r3, 800bb26 <HAL_RS485Ex_Init+0x76>
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800bae2:	6822      	ldr	r2, [r4, #0]
 800bae4:	6893      	ldr	r3, [r2, #8]
 800bae6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800baea:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800baec:	6822      	ldr	r2, [r4, #0]
 800baee:	6893      	ldr	r3, [r2, #8]
 800baf0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800baf4:	433b      	orrs	r3, r7
 800baf6:	6093      	str	r3, [r2, #8]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800baf8:	042d      	lsls	r5, r5, #16
 800bafa:	ea45 5246 	orr.w	r2, r5, r6, lsl #21
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800bafe:	6821      	ldr	r1, [r4, #0]
 800bb00:	6808      	ldr	r0, [r1, #0]
 800bb02:	4b0c      	ldr	r3, [pc, #48]	@ (800bb34 <HAL_RS485Ex_Init+0x84>)
 800bb04:	4003      	ands	r3, r0
 800bb06:	4313      	orrs	r3, r2
 800bb08:	600b      	str	r3, [r1, #0]
  __HAL_UART_ENABLE(huart);
 800bb0a:	6822      	ldr	r2, [r4, #0]
 800bb0c:	6813      	ldr	r3, [r2, #0]
 800bb0e:	f043 0301 	orr.w	r3, r3, #1
 800bb12:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800bb14:	4620      	mov	r0, r4
 800bb16:	f7ff fede 	bl	800b8d6 <UART_CheckIdleState>
}
 800bb1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 800bb1c:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
    HAL_UART_MspInit(huart);
 800bb20:	f7f6 fed8 	bl	80028d4 <HAL_UART_MspInit>
 800bb24:	e7ce      	b.n	800bac4 <HAL_RS485Ex_Init+0x14>
    UART_AdvFeatureConfig(huart);
 800bb26:	4620      	mov	r0, r4
 800bb28:	f7ff fe04 	bl	800b734 <UART_AdvFeatureConfig>
 800bb2c:	e7d9      	b.n	800bae2 <HAL_RS485Ex_Init+0x32>
    return HAL_ERROR;
 800bb2e:	2001      	movs	r0, #1
}
 800bb30:	4770      	bx	lr
 800bb32:	bf00      	nop
 800bb34:	fc00ffff 	.word	0xfc00ffff

0800bb38 <HAL_UARTEx_WakeupCallback>:
}
 800bb38:	4770      	bx	lr

0800bb3a <HAL_UARTEx_RxFifoFullCallback>:
}
 800bb3a:	4770      	bx	lr

0800bb3c <HAL_UARTEx_TxFifoEmptyCallback>:
}
 800bb3c:	4770      	bx	lr

0800bb3e <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 800bb3e:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 800bb42:	2b01      	cmp	r3, #1
 800bb44:	d018      	beq.n	800bb78 <HAL_UARTEx_DisableFifoMode+0x3a>
 800bb46:	2301      	movs	r3, #1
 800bb48:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800bb4c:	2324      	movs	r3, #36	@ 0x24
 800bb4e:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb52:	6803      	ldr	r3, [r0, #0]
 800bb54:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800bb56:	6819      	ldr	r1, [r3, #0]
 800bb58:	f021 0101 	bic.w	r1, r1, #1
 800bb5c:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bb5e:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bb62:	2300      	movs	r3, #0
 800bb64:	6643      	str	r3, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb66:	6801      	ldr	r1, [r0, #0]
 800bb68:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 800bb6a:	2220      	movs	r2, #32
 800bb6c:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
  __HAL_UNLOCK(huart);
 800bb70:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
  return HAL_OK;
 800bb74:	4618      	mov	r0, r3
 800bb76:	4770      	bx	lr
  __HAL_LOCK(huart);
 800bb78:	2002      	movs	r0, #2
}
 800bb7a:	4770      	bx	lr

0800bb7c <HAL_UARTEx_SetTxFifoThreshold>:
{
 800bb7c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800bb7e:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 800bb82:	2b01      	cmp	r3, #1
 800bb84:	d01d      	beq.n	800bbc2 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800bb86:	4604      	mov	r4, r0
 800bb88:	2301      	movs	r3, #1
 800bb8a:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800bb8e:	2324      	movs	r3, #36	@ 0x24
 800bb90:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb94:	6803      	ldr	r3, [r0, #0]
 800bb96:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800bb98:	681a      	ldr	r2, [r3, #0]
 800bb9a:	f022 0201 	bic.w	r2, r2, #1
 800bb9e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bba0:	6802      	ldr	r2, [r0, #0]
 800bba2:	6893      	ldr	r3, [r2, #8]
 800bba4:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 800bba8:	4319      	orrs	r1, r3
 800bbaa:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800bbac:	f7ff ff5a 	bl	800ba64 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bbb0:	6823      	ldr	r3, [r4, #0]
 800bbb2:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800bbb4:	2320      	movs	r3, #32
 800bbb6:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  __HAL_UNLOCK(huart);
 800bbba:	2000      	movs	r0, #0
 800bbbc:	f884 0080 	strb.w	r0, [r4, #128]	@ 0x80
}
 800bbc0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800bbc2:	2002      	movs	r0, #2
 800bbc4:	e7fc      	b.n	800bbc0 <HAL_UARTEx_SetTxFifoThreshold+0x44>

0800bbc6 <HAL_UARTEx_SetRxFifoThreshold>:
{
 800bbc6:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800bbc8:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 800bbcc:	2b01      	cmp	r3, #1
 800bbce:	d01d      	beq.n	800bc0c <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800bbd0:	4604      	mov	r4, r0
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800bbd8:	2324      	movs	r3, #36	@ 0x24
 800bbda:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bbde:	6803      	ldr	r3, [r0, #0]
 800bbe0:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800bbe2:	681a      	ldr	r2, [r3, #0]
 800bbe4:	f022 0201 	bic.w	r2, r2, #1
 800bbe8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bbea:	6802      	ldr	r2, [r0, #0]
 800bbec:	6893      	ldr	r3, [r2, #8]
 800bbee:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 800bbf2:	4319      	orrs	r1, r3
 800bbf4:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800bbf6:	f7ff ff35 	bl	800ba64 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bbfa:	6823      	ldr	r3, [r4, #0]
 800bbfc:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800bbfe:	2320      	movs	r3, #32
 800bc00:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  __HAL_UNLOCK(huart);
 800bc04:	2000      	movs	r0, #0
 800bc06:	f884 0080 	strb.w	r0, [r4, #128]	@ 0x80
}
 800bc0a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800bc0c:	2002      	movs	r0, #2
 800bc0e:	e7fc      	b.n	800bc0a <HAL_UARTEx_SetRxFifoThreshold+0x44>

0800bc10 <HAL_UARTEx_ReceiveToIdle_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800bc10:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800bc14:	2b20      	cmp	r3, #32
 800bc16:	d122      	bne.n	800bc5e <HAL_UARTEx_ReceiveToIdle_DMA+0x4e>
{
 800bc18:	b510      	push	{r4, lr}
 800bc1a:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 800bc1c:	2a00      	cmp	r2, #0
 800bc1e:	bf18      	it	ne
 800bc20:	2900      	cmpne	r1, #0
 800bc22:	d01e      	beq.n	800bc62 <HAL_UARTEx_ReceiveToIdle_DMA+0x52>
    __HAL_LOCK(huart);
 800bc24:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 800bc28:	2b01      	cmp	r3, #1
 800bc2a:	d01c      	beq.n	800bc66 <HAL_UARTEx_ReceiveToIdle_DMA+0x56>
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800bc32:	66c3      	str	r3, [r0, #108]	@ 0x6c
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800bc34:	f7ff febc 	bl	800b9b0 <UART_Start_Receive_DMA>
    if (status == HAL_OK)
 800bc38:	b9a0      	cbnz	r0, 800bc64 <HAL_UARTEx_ReceiveToIdle_DMA+0x54>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc3a:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800bc3c:	2b01      	cmp	r3, #1
 800bc3e:	d001      	beq.n	800bc44 <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
        status = HAL_ERROR;
 800bc40:	2001      	movs	r0, #1
    return status;
 800bc42:	e00f      	b.n	800bc64 <HAL_UARTEx_ReceiveToIdle_DMA+0x54>
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bc44:	6823      	ldr	r3, [r4, #0]
 800bc46:	2210      	movs	r2, #16
 800bc48:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc4a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc4c:	e852 3f00 	ldrex	r3, [r2]
 800bc50:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc54:	e842 3100 	strex	r1, r3, [r2]
 800bc58:	2900      	cmp	r1, #0
 800bc5a:	d1f6      	bne.n	800bc4a <HAL_UARTEx_ReceiveToIdle_DMA+0x3a>
 800bc5c:	e002      	b.n	800bc64 <HAL_UARTEx_ReceiveToIdle_DMA+0x54>
    return HAL_BUSY;
 800bc5e:	2002      	movs	r0, #2
}
 800bc60:	4770      	bx	lr
      return HAL_ERROR;
 800bc62:	2001      	movs	r0, #1
}
 800bc64:	bd10      	pop	{r4, pc}
    __HAL_LOCK(huart);
 800bc66:	2002      	movs	r0, #2
 800bc68:	e7fc      	b.n	800bc64 <HAL_UARTEx_ReceiveToIdle_DMA+0x54>
	...

0800bc6c <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bc6c:	4b0b      	ldr	r3, [pc, #44]	@ (800bc9c <SDMMC_GetCmdError+0x30>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	4a0b      	ldr	r2, [pc, #44]	@ (800bca0 <SDMMC_GetCmdError+0x34>)
 800bc72:	fba2 2303 	umull	r2, r3, r2, r3
 800bc76:	0a5b      	lsrs	r3, r3, #9
 800bc78:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bc7c:	fb02 f303 	mul.w	r3, r2, r3

  do
  {
    if (count-- == 0U)
 800bc80:	461a      	mov	r2, r3
 800bc82:	3b01      	subs	r3, #1
 800bc84:	b13a      	cbz	r2, 800bc96 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800bc86:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800bc88:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800bc8c:	d0f8      	beq.n	800bc80 <SDMMC_GetCmdError+0x14>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bc8e:	4b05      	ldr	r3, [pc, #20]	@ (800bca4 <SDMMC_GetCmdError+0x38>)
 800bc90:	6383      	str	r3, [r0, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800bc92:	2000      	movs	r0, #0
 800bc94:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800bc96:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800bc9a:	4770      	bx	lr
 800bc9c:	24000004 	.word	0x24000004
 800bca0:	10624dd3 	.word	0x10624dd3
 800bca4:	002000c5 	.word	0x002000c5

0800bca8 <SDMMC_Init>:
{
 800bca8:	b084      	sub	sp, #16
 800bcaa:	f10d 0c04 	add.w	ip, sp, #4
 800bcae:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           | \
 800bcb2:	460b      	mov	r3, r1
 800bcb4:	4313      	orrs	r3, r2
             Init.BusWide             | \
 800bcb6:	9a03      	ldr	r2, [sp, #12]
             Init.ClockPowerSave      | \
 800bcb8:	4313      	orrs	r3, r2
             Init.HardwareFlowControl | \
 800bcba:	9a04      	ldr	r2, [sp, #16]
             Init.BusWide             | \
 800bcbc:	4313      	orrs	r3, r2
             Init.ClockDiv
 800bcbe:	9a05      	ldr	r2, [sp, #20]
             Init.HardwareFlowControl | \
 800bcc0:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800bcc2:	6841      	ldr	r1, [r0, #4]
 800bcc4:	4a03      	ldr	r2, [pc, #12]	@ (800bcd4 <SDMMC_Init+0x2c>)
 800bcc6:	400a      	ands	r2, r1
 800bcc8:	4313      	orrs	r3, r2
 800bcca:	6043      	str	r3, [r0, #4]
}
 800bccc:	2000      	movs	r0, #0
 800bcce:	b004      	add	sp, #16
 800bcd0:	4770      	bx	lr
 800bcd2:	bf00      	nop
 800bcd4:	ffc02c00 	.word	0xffc02c00

0800bcd8 <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 800bcd8:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
}
 800bcdc:	4770      	bx	lr

0800bcde <SDMMC_WriteFIFO>:
  SDMMCx->FIFO = *pWriteData;
 800bcde:	680b      	ldr	r3, [r1, #0]
 800bce0:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
}
 800bce4:	2000      	movs	r0, #0
 800bce6:	4770      	bx	lr

0800bce8 <SDMMC_PowerState_ON>:
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800bce8:	6803      	ldr	r3, [r0, #0]
 800bcea:	f043 0303 	orr.w	r3, r3, #3
 800bcee:	6003      	str	r3, [r0, #0]
}
 800bcf0:	2000      	movs	r0, #0
 800bcf2:	4770      	bx	lr

0800bcf4 <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800bcf4:	6800      	ldr	r0, [r0, #0]
}
 800bcf6:	f000 0003 	and.w	r0, r0, #3
 800bcfa:	4770      	bx	lr

0800bcfc <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
 800bcfc:	680b      	ldr	r3, [r1, #0]
 800bcfe:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800bd00:	684b      	ldr	r3, [r1, #4]
                       Command->Response         | \
 800bd02:	688a      	ldr	r2, [r1, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800bd04:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt | \
 800bd06:	68ca      	ldr	r2, [r1, #12]
                       Command->Response         | \
 800bd08:	4313      	orrs	r3, r2
                       Command->CPSM);
 800bd0a:	690a      	ldr	r2, [r1, #16]
                       Command->WaitForInterrupt | \
 800bd0c:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bd0e:	68c1      	ldr	r1, [r0, #12]
 800bd10:	4a02      	ldr	r2, [pc, #8]	@ (800bd1c <SDMMC_SendCommand+0x20>)
 800bd12:	400a      	ands	r2, r1
 800bd14:	4313      	orrs	r3, r2
 800bd16:	60c3      	str	r3, [r0, #12]
}
 800bd18:	2000      	movs	r0, #0
 800bd1a:	4770      	bx	lr
 800bd1c:	fffee0c0 	.word	0xfffee0c0

0800bd20 <SDMMC_GetCommandResponse>:
  return (uint8_t)(SDMMCx->RESPCMD);
 800bd20:	6900      	ldr	r0, [r0, #16]
}
 800bd22:	b2c0      	uxtb	r0, r0
 800bd24:	4770      	bx	lr

0800bd26 <SDMMC_GetResponse>:
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800bd26:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 800bd28:	5840      	ldr	r0, [r0, r1]
}
 800bd2a:	4770      	bx	lr

0800bd2c <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
 800bd2c:	680b      	ldr	r3, [r1, #0]
 800bd2e:	6243      	str	r3, [r0, #36]	@ 0x24
  SDMMCx->DLEN = Data->DataLength;
 800bd30:	684b      	ldr	r3, [r1, #4]
 800bd32:	6283      	str	r3, [r0, #40]	@ 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800bd34:	688b      	ldr	r3, [r1, #8]
                       Data->TransferDir   | \
 800bd36:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800bd38:	4313      	orrs	r3, r2
                       Data->TransferMode  | \
 800bd3a:	690a      	ldr	r2, [r1, #16]
                       Data->TransferDir   | \
 800bd3c:	4313      	orrs	r3, r2
                       Data->DPSM);
 800bd3e:	694a      	ldr	r2, [r1, #20]
                       Data->TransferMode  | \
 800bd40:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800bd42:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800bd44:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800bd48:	4313      	orrs	r3, r2
 800bd4a:	62c3      	str	r3, [r0, #44]	@ 0x2c
}
 800bd4c:	2000      	movs	r0, #0
 800bd4e:	4770      	bx	lr

0800bd50 <SDMMC_CmdGoIdleState>:
{
 800bd50:	b510      	push	{r4, lr}
 800bd52:	b086      	sub	sp, #24
 800bd54:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800bd56:	2300      	movs	r3, #0
 800bd58:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800bd5a:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800bd5c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd5e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bd64:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd66:	a901      	add	r1, sp, #4
 800bd68:	f7ff ffc8 	bl	800bcfc <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800bd6c:	4620      	mov	r0, r4
 800bd6e:	f7ff ff7d 	bl	800bc6c <SDMMC_GetCmdError>
}
 800bd72:	b006      	add	sp, #24
 800bd74:	bd10      	pop	{r4, pc}
	...

0800bd78 <SDMMC_GetCmdResp1>:
{
 800bd78:	b570      	push	{r4, r5, r6, lr}
 800bd7a:	4605      	mov	r5, r0
 800bd7c:	460e      	mov	r6, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bd7e:	4b51      	ldr	r3, [pc, #324]	@ (800bec4 <SDMMC_GetCmdResp1+0x14c>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	4951      	ldr	r1, [pc, #324]	@ (800bec8 <SDMMC_GetCmdResp1+0x150>)
 800bd84:	fba1 1303 	umull	r1, r3, r1, r3
 800bd88:	0a5b      	lsrs	r3, r3, #9
 800bd8a:	fb03 f202 	mul.w	r2, r3, r2
    if (count-- == 0U)
 800bd8e:	4613      	mov	r3, r2
 800bd90:	3a01      	subs	r2, #1
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d05e      	beq.n	800be54 <SDMMC_GetCmdResp1+0xdc>
    sta_reg = SDMMCx->STA;
 800bd96:	6b6c      	ldr	r4, [r5, #52]	@ 0x34
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800bd98:	4b4c      	ldr	r3, [pc, #304]	@ (800becc <SDMMC_GetCmdResp1+0x154>)
 800bd9a:	4023      	ands	r3, r4
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d0f6      	beq.n	800bd8e <SDMMC_GetCmdResp1+0x16>
 800bda0:	f414 5f00 	tst.w	r4, #8192	@ 0x2000
 800bda4:	d1f3      	bne.n	800bd8e <SDMMC_GetCmdResp1+0x16>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bda6:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800bda8:	f013 0f04 	tst.w	r3, #4
 800bdac:	d106      	bne.n	800bdbc <SDMMC_GetCmdResp1+0x44>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bdae:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800bdb0:	f013 0f01 	tst.w	r3, #1
 800bdb4:	d005      	beq.n	800bdc2 <SDMMC_GetCmdResp1+0x4a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bdb6:	2001      	movs	r0, #1
 800bdb8:	63a8      	str	r0, [r5, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bdba:	e04d      	b.n	800be58 <SDMMC_GetCmdResp1+0xe0>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bdbc:	2004      	movs	r0, #4
 800bdbe:	63a8      	str	r0, [r5, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bdc0:	e04a      	b.n	800be58 <SDMMC_GetCmdResp1+0xe0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bdc2:	4b43      	ldr	r3, [pc, #268]	@ (800bed0 <SDMMC_GetCmdResp1+0x158>)
 800bdc4:	63ab      	str	r3, [r5, #56]	@ 0x38
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bdc6:	4628      	mov	r0, r5
 800bdc8:	f7ff ffaa 	bl	800bd20 <SDMMC_GetCommandResponse>
 800bdcc:	42b0      	cmp	r0, r6
 800bdce:	d001      	beq.n	800bdd4 <SDMMC_GetCmdResp1+0x5c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bdd0:	2001      	movs	r0, #1
 800bdd2:	e041      	b.n	800be58 <SDMMC_GetCmdResp1+0xe0>
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bdd4:	2100      	movs	r1, #0
 800bdd6:	4628      	mov	r0, r5
 800bdd8:	f7ff ffa5 	bl	800bd26 <SDMMC_GetResponse>
 800bddc:	4603      	mov	r3, r0
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bdde:	483d      	ldr	r0, [pc, #244]	@ (800bed4 <SDMMC_GetCmdResp1+0x15c>)
 800bde0:	4018      	ands	r0, r3
 800bde2:	b3c8      	cbz	r0, 800be58 <SDMMC_GetCmdResp1+0xe0>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	db38      	blt.n	800be5a <SDMMC_GetCmdResp1+0xe2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bde8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bdec:	d138      	bne.n	800be60 <SDMMC_GetCmdResp1+0xe8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bdee:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 800bdf2:	d137      	bne.n	800be64 <SDMMC_GetCmdResp1+0xec>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bdf4:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800bdf8:	d136      	bne.n	800be68 <SDMMC_GetCmdResp1+0xf0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bdfa:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 800bdfe:	d136      	bne.n	800be6e <SDMMC_GetCmdResp1+0xf6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800be00:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 800be04:	d136      	bne.n	800be74 <SDMMC_GetCmdResp1+0xfc>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800be06:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800be0a:	d136      	bne.n	800be7a <SDMMC_GetCmdResp1+0x102>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800be0c:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800be10:	d136      	bne.n	800be80 <SDMMC_GetCmdResp1+0x108>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800be12:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800be16:	d136      	bne.n	800be86 <SDMMC_GetCmdResp1+0x10e>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800be18:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 800be1c:	d136      	bne.n	800be8c <SDMMC_GetCmdResp1+0x114>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800be1e:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800be22:	d136      	bne.n	800be92 <SDMMC_GetCmdResp1+0x11a>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800be24:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 800be28:	d136      	bne.n	800be98 <SDMMC_GetCmdResp1+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800be2a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800be2e:	d136      	bne.n	800be9e <SDMMC_GetCmdResp1+0x126>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800be30:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800be34:	d136      	bne.n	800bea4 <SDMMC_GetCmdResp1+0x12c>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800be36:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800be3a:	d136      	bne.n	800beaa <SDMMC_GetCmdResp1+0x132>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800be3c:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 800be40:	d136      	bne.n	800beb0 <SDMMC_GetCmdResp1+0x138>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800be42:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 800be46:	d136      	bne.n	800beb6 <SDMMC_GetCmdResp1+0x13e>
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800be48:	f013 0f08 	tst.w	r3, #8
 800be4c:	d036      	beq.n	800bebc <SDMMC_GetCmdResp1+0x144>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800be4e:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800be52:	e001      	b.n	800be58 <SDMMC_GetCmdResp1+0xe0>
      return SDMMC_ERROR_TIMEOUT;
 800be54:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800be58:	bd70      	pop	{r4, r5, r6, pc}
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800be5a:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800be5e:	e7fb      	b.n	800be58 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800be60:	2040      	movs	r0, #64	@ 0x40
 800be62:	e7f9      	b.n	800be58 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800be64:	2080      	movs	r0, #128	@ 0x80
 800be66:	e7f7      	b.n	800be58 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800be68:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800be6c:	e7f4      	b.n	800be58 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800be6e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800be72:	e7f1      	b.n	800be58 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800be74:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800be78:	e7ee      	b.n	800be58 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800be7a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800be7e:	e7eb      	b.n	800be58 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800be80:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800be84:	e7e8      	b.n	800be58 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800be86:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800be8a:	e7e5      	b.n	800be58 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800be8c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800be90:	e7e2      	b.n	800be58 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CC_ERR;
 800be92:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800be96:	e7df      	b.n	800be58 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800be98:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800be9c:	e7dc      	b.n	800be58 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800be9e:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800bea2:	e7d9      	b.n	800be58 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bea4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800bea8:	e7d6      	b.n	800be58 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800beaa:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800beae:	e7d3      	b.n	800be58 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800beb0:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800beb4:	e7d0      	b.n	800be58 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ERASE_RESET;
 800beb6:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800beba:	e7cd      	b.n	800be58 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bebc:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800bec0:	e7ca      	b.n	800be58 <SDMMC_GetCmdResp1+0xe0>
 800bec2:	bf00      	nop
 800bec4:	24000004 	.word	0x24000004
 800bec8:	10624dd3 	.word	0x10624dd3
 800becc:	00200045 	.word	0x00200045
 800bed0:	002000c5 	.word	0x002000c5
 800bed4:	fdffe008 	.word	0xfdffe008

0800bed8 <SDMMC_CmdBlockLength>:
{
 800bed8:	b530      	push	{r4, r5, lr}
 800beda:	b087      	sub	sp, #28
 800bedc:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800bede:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800bee0:	2510      	movs	r5, #16
 800bee2:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bee4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bee8:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800beea:	2300      	movs	r3, #0
 800beec:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800beee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bef2:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bef4:	a901      	add	r1, sp, #4
 800bef6:	f7ff ff01 	bl	800bcfc <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800befa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800befe:	4629      	mov	r1, r5
 800bf00:	4620      	mov	r0, r4
 800bf02:	f7ff ff39 	bl	800bd78 <SDMMC_GetCmdResp1>
}
 800bf06:	b007      	add	sp, #28
 800bf08:	bd30      	pop	{r4, r5, pc}
	...

0800bf0c <SDMMC_CmdStopTransfer>:
{
 800bf0c:	b530      	push	{r4, r5, lr}
 800bf0e:	b087      	sub	sp, #28
 800bf10:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800bf12:	2300      	movs	r3, #0
 800bf14:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800bf16:	250c      	movs	r5, #12
 800bf18:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf1a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bf1e:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf20:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bf26:	9305      	str	r3, [sp, #20]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800bf28:	68c3      	ldr	r3, [r0, #12]
 800bf2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf2e:	60c3      	str	r3, [r0, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800bf30:	68c3      	ldr	r3, [r0, #12]
 800bf32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bf36:	60c3      	str	r3, [r0, #12]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf38:	a901      	add	r1, sp, #4
 800bf3a:	f7ff fedf 	bl	800bcfc <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800bf3e:	4a08      	ldr	r2, [pc, #32]	@ (800bf60 <SDMMC_CmdStopTransfer+0x54>)
 800bf40:	4629      	mov	r1, r5
 800bf42:	4620      	mov	r0, r4
 800bf44:	f7ff ff18 	bl	800bd78 <SDMMC_GetCmdResp1>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bf48:	68e3      	ldr	r3, [r4, #12]
 800bf4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bf4e:	60e3      	str	r3, [r4, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bf50:	f1b0 7f00 	cmp.w	r0, #33554432	@ 0x2000000
 800bf54:	d001      	beq.n	800bf5a <SDMMC_CmdStopTransfer+0x4e>
}
 800bf56:	b007      	add	sp, #28
 800bf58:	bd30      	pop	{r4, r5, pc}
    errorstate = SDMMC_ERROR_NONE;
 800bf5a:	2000      	movs	r0, #0
  return errorstate;
 800bf5c:	e7fb      	b.n	800bf56 <SDMMC_CmdStopTransfer+0x4a>
 800bf5e:	bf00      	nop
 800bf60:	05f5e100 	.word	0x05f5e100

0800bf64 <SDMMC_CmdSelDesel>:
{
 800bf64:	b530      	push	{r4, r5, lr}
 800bf66:	b087      	sub	sp, #28
 800bf68:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800bf6a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800bf6c:	2507      	movs	r5, #7
 800bf6e:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf70:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bf74:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf76:	2300      	movs	r3, #0
 800bf78:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bf7e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf80:	a901      	add	r1, sp, #4
 800bf82:	f7ff febb 	bl	800bcfc <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800bf86:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bf8a:	4629      	mov	r1, r5
 800bf8c:	4620      	mov	r0, r4
 800bf8e:	f7ff fef3 	bl	800bd78 <SDMMC_GetCmdResp1>
}
 800bf92:	b007      	add	sp, #28
 800bf94:	bd30      	pop	{r4, r5, pc}

0800bf96 <SDMMC_CmdAppCommand>:
{
 800bf96:	b530      	push	{r4, r5, lr}
 800bf98:	b087      	sub	sp, #28
 800bf9a:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800bf9c:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800bf9e:	2537      	movs	r5, #55	@ 0x37
 800bfa0:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bfa2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bfa6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bfac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bfb0:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bfb2:	a901      	add	r1, sp, #4
 800bfb4:	f7ff fea2 	bl	800bcfc <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800bfb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bfbc:	4629      	mov	r1, r5
 800bfbe:	4620      	mov	r0, r4
 800bfc0:	f7ff feda 	bl	800bd78 <SDMMC_GetCmdResp1>
}
 800bfc4:	b007      	add	sp, #28
 800bfc6:	bd30      	pop	{r4, r5, pc}

0800bfc8 <SDMMC_CmdBusWidth>:
{
 800bfc8:	b530      	push	{r4, r5, lr}
 800bfca:	b087      	sub	sp, #28
 800bfcc:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800bfce:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800bfd0:	2506      	movs	r5, #6
 800bfd2:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bfd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bfd8:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bfde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bfe2:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bfe4:	a901      	add	r1, sp, #4
 800bfe6:	f7ff fe89 	bl	800bcfc <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800bfea:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bfee:	4629      	mov	r1, r5
 800bff0:	4620      	mov	r0, r4
 800bff2:	f7ff fec1 	bl	800bd78 <SDMMC_GetCmdResp1>
}
 800bff6:	b007      	add	sp, #28
 800bff8:	bd30      	pop	{r4, r5, pc}

0800bffa <SDMMC_CmdSendSCR>:
{
 800bffa:	b530      	push	{r4, r5, lr}
 800bffc:	b087      	sub	sp, #28
 800bffe:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800c000:	2300      	movs	r3, #0
 800c002:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c004:	2533      	movs	r5, #51	@ 0x33
 800c006:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c008:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c00c:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c00e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c010:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c014:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c016:	a901      	add	r1, sp, #4
 800c018:	f7ff fe70 	bl	800bcfc <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800c01c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c020:	4629      	mov	r1, r5
 800c022:	4620      	mov	r0, r4
 800c024:	f7ff fea8 	bl	800bd78 <SDMMC_GetCmdResp1>
}
 800c028:	b007      	add	sp, #28
 800c02a:	bd30      	pop	{r4, r5, pc}

0800c02c <SDMMC_CmdSendStatus>:
{
 800c02c:	b530      	push	{r4, r5, lr}
 800c02e:	b087      	sub	sp, #28
 800c030:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800c032:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c034:	250d      	movs	r5, #13
 800c036:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c038:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c03c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c03e:	2300      	movs	r3, #0
 800c040:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c042:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c046:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c048:	a901      	add	r1, sp, #4
 800c04a:	f7ff fe57 	bl	800bcfc <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c04e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c052:	4629      	mov	r1, r5
 800c054:	4620      	mov	r0, r4
 800c056:	f7ff fe8f 	bl	800bd78 <SDMMC_GetCmdResp1>
}
 800c05a:	b007      	add	sp, #28
 800c05c:	bd30      	pop	{r4, r5, pc}

0800c05e <SDMMC_CmdStatusRegister>:
{
 800c05e:	b530      	push	{r4, r5, lr}
 800c060:	b087      	sub	sp, #28
 800c062:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800c064:	2300      	movs	r3, #0
 800c066:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800c068:	250d      	movs	r5, #13
 800c06a:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c06c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c070:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c072:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c074:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c078:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c07a:	a901      	add	r1, sp, #4
 800c07c:	f7ff fe3e 	bl	800bcfc <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800c080:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c084:	4629      	mov	r1, r5
 800c086:	4620      	mov	r0, r4
 800c088:	f7ff fe76 	bl	800bd78 <SDMMC_GetCmdResp1>
}
 800c08c:	b007      	add	sp, #28
 800c08e:	bd30      	pop	{r4, r5, pc}

0800c090 <SDMMC_GetCmdResp2>:
{
 800c090:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c092:	4b14      	ldr	r3, [pc, #80]	@ (800c0e4 <SDMMC_GetCmdResp2+0x54>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	4a14      	ldr	r2, [pc, #80]	@ (800c0e8 <SDMMC_GetCmdResp2+0x58>)
 800c098:	fba2 2303 	umull	r2, r3, r2, r3
 800c09c:	0a5b      	lsrs	r3, r3, #9
 800c09e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c0a2:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 800c0a6:	461a      	mov	r2, r3
 800c0a8:	3b01      	subs	r3, #1
 800c0aa:	b1ba      	cbz	r2, 800c0dc <SDMMC_GetCmdResp2+0x4c>
    sta_reg = SDMMCx->STA;
 800c0ac:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c0ae:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800c0b2:	d0f8      	beq.n	800c0a6 <SDMMC_GetCmdResp2+0x16>
 800c0b4:	f412 5f00 	tst.w	r2, #8192	@ 0x2000
 800c0b8:	d1f5      	bne.n	800c0a6 <SDMMC_GetCmdResp2+0x16>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c0ba:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800c0bc:	f013 0f04 	tst.w	r3, #4
 800c0c0:	d106      	bne.n	800c0d0 <SDMMC_GetCmdResp2+0x40>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c0c2:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 800c0c4:	f010 0001 	ands.w	r0, r0, #1
 800c0c8:	d105      	bne.n	800c0d6 <SDMMC_GetCmdResp2+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c0ca:	4b08      	ldr	r3, [pc, #32]	@ (800c0ec <SDMMC_GetCmdResp2+0x5c>)
 800c0cc:	638b      	str	r3, [r1, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 800c0ce:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c0d0:	2004      	movs	r0, #4
 800c0d2:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c0d4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c0d6:	2001      	movs	r0, #1
 800c0d8:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c0da:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800c0dc:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800c0e0:	4770      	bx	lr
 800c0e2:	bf00      	nop
 800c0e4:	24000004 	.word	0x24000004
 800c0e8:	10624dd3 	.word	0x10624dd3
 800c0ec:	002000c5 	.word	0x002000c5

0800c0f0 <SDMMC_CmdSendCID>:
{
 800c0f0:	b510      	push	{r4, lr}
 800c0f2:	b086      	sub	sp, #24
 800c0f4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c0fa:	2202      	movs	r2, #2
 800c0fc:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c0fe:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800c102:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c104:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c106:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c10a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c10c:	a901      	add	r1, sp, #4
 800c10e:	f7ff fdf5 	bl	800bcfc <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c112:	4620      	mov	r0, r4
 800c114:	f7ff ffbc 	bl	800c090 <SDMMC_GetCmdResp2>
}
 800c118:	b006      	add	sp, #24
 800c11a:	bd10      	pop	{r4, pc}

0800c11c <SDMMC_CmdSendCSD>:
{
 800c11c:	b510      	push	{r4, lr}
 800c11e:	b086      	sub	sp, #24
 800c120:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800c122:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c124:	2309      	movs	r3, #9
 800c126:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c128:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800c12c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c12e:	2300      	movs	r3, #0
 800c130:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c132:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c136:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c138:	a901      	add	r1, sp, #4
 800c13a:	f7ff fddf 	bl	800bcfc <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c13e:	4620      	mov	r0, r4
 800c140:	f7ff ffa6 	bl	800c090 <SDMMC_GetCmdResp2>
}
 800c144:	b006      	add	sp, #24
 800c146:	bd10      	pop	{r4, pc}

0800c148 <SDMMC_GetCmdResp3>:
{
 800c148:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c14a:	4b10      	ldr	r3, [pc, #64]	@ (800c18c <SDMMC_GetCmdResp3+0x44>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	4a10      	ldr	r2, [pc, #64]	@ (800c190 <SDMMC_GetCmdResp3+0x48>)
 800c150:	fba2 2303 	umull	r2, r3, r2, r3
 800c154:	0a5b      	lsrs	r3, r3, #9
 800c156:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c15a:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 800c15e:	461a      	mov	r2, r3
 800c160:	3b01      	subs	r3, #1
 800c162:	b182      	cbz	r2, 800c186 <SDMMC_GetCmdResp3+0x3e>
    sta_reg = SDMMCx->STA;
 800c164:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c166:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800c16a:	d0f8      	beq.n	800c15e <SDMMC_GetCmdResp3+0x16>
 800c16c:	f412 5f00 	tst.w	r2, #8192	@ 0x2000
 800c170:	d1f5      	bne.n	800c15e <SDMMC_GetCmdResp3+0x16>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c172:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 800c174:	f010 0004 	ands.w	r0, r0, #4
 800c178:	d102      	bne.n	800c180 <SDMMC_GetCmdResp3+0x38>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c17a:	4b06      	ldr	r3, [pc, #24]	@ (800c194 <SDMMC_GetCmdResp3+0x4c>)
 800c17c:	638b      	str	r3, [r1, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 800c17e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c180:	2004      	movs	r0, #4
 800c182:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c184:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800c186:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800c18a:	4770      	bx	lr
 800c18c:	24000004 	.word	0x24000004
 800c190:	10624dd3 	.word	0x10624dd3
 800c194:	002000c5 	.word	0x002000c5

0800c198 <SDMMC_CmdAppOperCommand>:
{
 800c198:	b510      	push	{r4, lr}
 800c19a:	b086      	sub	sp, #24
 800c19c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800c19e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c1a0:	2329      	movs	r3, #41	@ 0x29
 800c1a2:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c1a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c1a8:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c1ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c1b2:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c1b4:	a901      	add	r1, sp, #4
 800c1b6:	f7ff fda1 	bl	800bcfc <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c1ba:	4620      	mov	r0, r4
 800c1bc:	f7ff ffc4 	bl	800c148 <SDMMC_GetCmdResp3>
}
 800c1c0:	b006      	add	sp, #24
 800c1c2:	bd10      	pop	{r4, pc}

0800c1c4 <SDMMC_GetCmdResp6>:
{
 800c1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1c6:	4605      	mov	r5, r0
 800c1c8:	460e      	mov	r6, r1
 800c1ca:	4617      	mov	r7, r2
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c1cc:	4b23      	ldr	r3, [pc, #140]	@ (800c25c <SDMMC_GetCmdResp6+0x98>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	4a23      	ldr	r2, [pc, #140]	@ (800c260 <SDMMC_GetCmdResp6+0x9c>)
 800c1d2:	fba2 2303 	umull	r2, r3, r2, r3
 800c1d6:	0a5b      	lsrs	r3, r3, #9
 800c1d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c1dc:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 800c1e0:	461a      	mov	r2, r3
 800c1e2:	3b01      	subs	r3, #1
 800c1e4:	b38a      	cbz	r2, 800c24a <SDMMC_GetCmdResp6+0x86>
    sta_reg = SDMMCx->STA;
 800c1e6:	6b6c      	ldr	r4, [r5, #52]	@ 0x34
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c1e8:	f014 0f45 	tst.w	r4, #69	@ 0x45
 800c1ec:	d0f8      	beq.n	800c1e0 <SDMMC_GetCmdResp6+0x1c>
 800c1ee:	f414 5f00 	tst.w	r4, #8192	@ 0x2000
 800c1f2:	d1f5      	bne.n	800c1e0 <SDMMC_GetCmdResp6+0x1c>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c1f4:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800c1f6:	f013 0f04 	tst.w	r3, #4
 800c1fa:	d106      	bne.n	800c20a <SDMMC_GetCmdResp6+0x46>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c1fc:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800c1fe:	f013 0f01 	tst.w	r3, #1
 800c202:	d005      	beq.n	800c210 <SDMMC_GetCmdResp6+0x4c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c204:	2001      	movs	r0, #1
 800c206:	63a8      	str	r0, [r5, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c208:	e021      	b.n	800c24e <SDMMC_GetCmdResp6+0x8a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c20a:	2004      	movs	r0, #4
 800c20c:	63a8      	str	r0, [r5, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c20e:	e01e      	b.n	800c24e <SDMMC_GetCmdResp6+0x8a>
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c210:	4628      	mov	r0, r5
 800c212:	f7ff fd85 	bl	800bd20 <SDMMC_GetCommandResponse>
 800c216:	42b0      	cmp	r0, r6
 800c218:	d001      	beq.n	800c21e <SDMMC_GetCmdResp6+0x5a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c21a:	2001      	movs	r0, #1
 800c21c:	e017      	b.n	800c24e <SDMMC_GetCmdResp6+0x8a>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c21e:	4b11      	ldr	r3, [pc, #68]	@ (800c264 <SDMMC_GetCmdResp6+0xa0>)
 800c220:	63ab      	str	r3, [r5, #56]	@ 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c222:	2100      	movs	r1, #0
 800c224:	4628      	mov	r0, r5
 800c226:	f7ff fd7e 	bl	800bd26 <SDMMC_GetResponse>
 800c22a:	4603      	mov	r3, r0
  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800c22c:	f410 4060 	ands.w	r0, r0, #57344	@ 0xe000
 800c230:	d008      	beq.n	800c244 <SDMMC_GetCmdResp6+0x80>
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c232:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 800c236:	d10b      	bne.n	800c250 <SDMMC_GetCmdResp6+0x8c>
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c238:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800c23c:	d00b      	beq.n	800c256 <SDMMC_GetCmdResp6+0x92>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c23e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800c242:	e004      	b.n	800c24e <SDMMC_GetCmdResp6+0x8a>
    *pRCA = (uint16_t)(response_r1 >> 16);
 800c244:	0c1b      	lsrs	r3, r3, #16
 800c246:	803b      	strh	r3, [r7, #0]
    return SDMMC_ERROR_NONE;
 800c248:	e001      	b.n	800c24e <SDMMC_GetCmdResp6+0x8a>
      return SDMMC_ERROR_TIMEOUT;
 800c24a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800c24e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c250:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800c254:	e7fb      	b.n	800c24e <SDMMC_GetCmdResp6+0x8a>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c256:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800c25a:	e7f8      	b.n	800c24e <SDMMC_GetCmdResp6+0x8a>
 800c25c:	24000004 	.word	0x24000004
 800c260:	10624dd3 	.word	0x10624dd3
 800c264:	002000c5 	.word	0x002000c5

0800c268 <SDMMC_CmdSetRelAdd>:
{
 800c268:	b570      	push	{r4, r5, r6, lr}
 800c26a:	b086      	sub	sp, #24
 800c26c:	4604      	mov	r4, r0
 800c26e:	460d      	mov	r5, r1
  sdmmc_cmdinit.Argument         = 0U;
 800c270:	2300      	movs	r3, #0
 800c272:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c274:	2603      	movs	r6, #3
 800c276:	9602      	str	r6, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c278:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c27c:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c27e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c280:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c284:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c286:	a901      	add	r1, sp, #4
 800c288:	f7ff fd38 	bl	800bcfc <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c28c:	462a      	mov	r2, r5
 800c28e:	4631      	mov	r1, r6
 800c290:	4620      	mov	r0, r4
 800c292:	f7ff ff97 	bl	800c1c4 <SDMMC_GetCmdResp6>
}
 800c296:	b006      	add	sp, #24
 800c298:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c29c <SDMMC_GetCmdResp7>:
{
 800c29c:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c29e:	4b16      	ldr	r3, [pc, #88]	@ (800c2f8 <SDMMC_GetCmdResp7+0x5c>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	4a16      	ldr	r2, [pc, #88]	@ (800c2fc <SDMMC_GetCmdResp7+0x60>)
 800c2a4:	fba2 2303 	umull	r2, r3, r2, r3
 800c2a8:	0a5b      	lsrs	r3, r3, #9
 800c2aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c2ae:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 800c2b2:	461a      	mov	r2, r3
 800c2b4:	3b01      	subs	r3, #1
 800c2b6:	b1e2      	cbz	r2, 800c2f2 <SDMMC_GetCmdResp7+0x56>
    sta_reg = SDMMCx->STA;
 800c2b8:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c2ba:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800c2be:	d0f8      	beq.n	800c2b2 <SDMMC_GetCmdResp7+0x16>
 800c2c0:	f412 5f00 	tst.w	r2, #8192	@ 0x2000
 800c2c4:	d1f5      	bne.n	800c2b2 <SDMMC_GetCmdResp7+0x16>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c2c6:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800c2c8:	f013 0f04 	tst.w	r3, #4
 800c2cc:	d10b      	bne.n	800c2e6 <SDMMC_GetCmdResp7+0x4a>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c2ce:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800c2d0:	f013 0301 	ands.w	r3, r3, #1
 800c2d4:	d10a      	bne.n	800c2ec <SDMMC_GetCmdResp7+0x50>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c2d6:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 800c2d8:	f010 0040 	ands.w	r0, r0, #64	@ 0x40
 800c2dc:	d00b      	beq.n	800c2f6 <SDMMC_GetCmdResp7+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c2de:	2240      	movs	r2, #64	@ 0x40
 800c2e0:	638a      	str	r2, [r1, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c2e6:	2004      	movs	r0, #4
 800c2e8:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c2ea:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c2ec:	2001      	movs	r0, #1
 800c2ee:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c2f0:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800c2f2:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800c2f6:	4770      	bx	lr
 800c2f8:	24000004 	.word	0x24000004
 800c2fc:	10624dd3 	.word	0x10624dd3

0800c300 <SDMMC_CmdOperCond>:
{
 800c300:	b510      	push	{r4, lr}
 800c302:	b086      	sub	sp, #24
 800c304:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c306:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800c30a:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c30c:	2308      	movs	r3, #8
 800c30e:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c310:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c314:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c316:	2300      	movs	r3, #0
 800c318:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c31a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c31e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c320:	a901      	add	r1, sp, #4
 800c322:	f7ff fceb 	bl	800bcfc <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c326:	4620      	mov	r0, r4
 800c328:	f7ff ffb8 	bl	800c29c <SDMMC_GetCmdResp7>
}
 800c32c:	b006      	add	sp, #24
 800c32e:	bd10      	pop	{r4, pc}

0800c330 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c330:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800c332:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c336:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c338:	f001 fbf6 	bl	800db28 <xTaskGetSchedulerState>
 800c33c:	2801      	cmp	r0, #1
 800c33e:	d100      	bne.n	800c342 <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800c340:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 800c342:	f001 ffff 	bl	800e344 <xPortSysTickHandler>
}
 800c346:	e7fb      	b.n	800c340 <SysTick_Handler+0x10>

0800c348 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c348:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800c34c:	b92b      	cbnz	r3, 800c35a <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800c34e:	4b06      	ldr	r3, [pc, #24]	@ (800c368 <osKernelInitialize+0x20>)
 800c350:	6818      	ldr	r0, [r3, #0]
 800c352:	b928      	cbnz	r0, 800c360 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c354:	2201      	movs	r2, #1
 800c356:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c358:	4770      	bx	lr
    stat = osErrorISR;
 800c35a:	f06f 0005 	mvn.w	r0, #5
 800c35e:	4770      	bx	lr
    } else {
      stat = osError;
 800c360:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800c364:	4770      	bx	lr
 800c366:	bf00      	nop
 800c368:	24002f0c 	.word	0x24002f0c

0800c36c <osKernelStart>:
 800c36c:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800c370:	b973      	cbnz	r3, 800c390 <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800c372:	4b0a      	ldr	r3, [pc, #40]	@ (800c39c <osKernelStart+0x30>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	2b01      	cmp	r3, #1
 800c378:	d10d      	bne.n	800c396 <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 800c37a:	b510      	push	{r4, lr}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c37c:	2400      	movs	r4, #0
 800c37e:	4b08      	ldr	r3, [pc, #32]	@ (800c3a0 <osKernelStart+0x34>)
 800c380:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c382:	4b06      	ldr	r3, [pc, #24]	@ (800c39c <osKernelStart+0x30>)
 800c384:	2202      	movs	r2, #2
 800c386:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c388:	f001 f91c 	bl	800d5c4 <vTaskStartScheduler>
      stat = osOK;
 800c38c:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800c38e:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800c390:	f06f 0005 	mvn.w	r0, #5
 800c394:	4770      	bx	lr
      stat = osError;
 800c396:	f04f 30ff 	mov.w	r0, #4294967295
}
 800c39a:	4770      	bx	lr
 800c39c:	24002f0c 	.word	0x24002f0c
 800c3a0:	e000ed00 	.word	0xe000ed00

0800c3a4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c3a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3a6:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c3a8:	2400      	movs	r4, #0
 800c3aa:	9405      	str	r4, [sp, #20]
 800c3ac:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800c3b0:	bb74      	cbnz	r4, 800c410 <osThreadNew+0x6c>
 800c3b2:	b368      	cbz	r0, 800c410 <osThreadNew+0x6c>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800c3b4:	b322      	cbz	r2, 800c400 <osThreadNew+0x5c>
      if (attr->name != NULL) {
 800c3b6:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800c3b8:	6993      	ldr	r3, [r2, #24]
 800c3ba:	b903      	cbnz	r3, 800c3be <osThreadNew+0x1a>
    prio  = (UBaseType_t)osPriorityNormal;
 800c3bc:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c3be:	1e5c      	subs	r4, r3, #1
 800c3c0:	2c37      	cmp	r4, #55	@ 0x37
 800c3c2:	d849      	bhi.n	800c458 <osThreadNew+0xb4>
 800c3c4:	6854      	ldr	r4, [r2, #4]
 800c3c6:	f014 0f01 	tst.w	r4, #1
 800c3ca:	d147      	bne.n	800c45c <osThreadNew+0xb8>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800c3cc:	6956      	ldr	r6, [r2, #20]
 800c3ce:	b16e      	cbz	r6, 800c3ec <osThreadNew+0x48>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c3d0:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c3d4:	6894      	ldr	r4, [r2, #8]
 800c3d6:	b12c      	cbz	r4, 800c3e4 <osThreadNew+0x40>
 800c3d8:	68d7      	ldr	r7, [r2, #12]
 800c3da:	2fa7      	cmp	r7, #167	@ 0xa7
 800c3dc:	d902      	bls.n	800c3e4 <osThreadNew+0x40>
 800c3de:	6917      	ldr	r7, [r2, #16]
 800c3e0:	b107      	cbz	r7, 800c3e4 <osThreadNew+0x40>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c3e2:	b9c6      	cbnz	r6, 800c416 <osThreadNew+0x72>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c3e4:	b12c      	cbz	r4, 800c3f2 <osThreadNew+0x4e>
    mem  = -1;
 800c3e6:	f04f 34ff 	mov.w	r4, #4294967295
 800c3ea:	e00e      	b.n	800c40a <osThreadNew+0x66>
    stack = configMINIMAL_STACK_SIZE;
 800c3ec:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 800c3f0:	e7f0      	b.n	800c3d4 <osThreadNew+0x30>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c3f2:	68d4      	ldr	r4, [r2, #12]
 800c3f4:	b98c      	cbnz	r4, 800c41a <osThreadNew+0x76>
 800c3f6:	6914      	ldr	r4, [r2, #16]
 800c3f8:	b194      	cbz	r4, 800c420 <osThreadNew+0x7c>
    mem  = -1;
 800c3fa:	f04f 34ff 	mov.w	r4, #4294967295
 800c3fe:	e004      	b.n	800c40a <osThreadNew+0x66>
    name = NULL;
 800c400:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 800c402:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 800c404:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 800c406:	f04f 0c80 	mov.w	ip, #128	@ 0x80
    }

    if (mem == 1) {
 800c40a:	2c01      	cmp	r4, #1
 800c40c:	d00a      	beq.n	800c424 <osThreadNew+0x80>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 800c40e:	b1ac      	cbz	r4, 800c43c <osThreadNew+0x98>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c410:	9805      	ldr	r0, [sp, #20]
}
 800c412:	b007      	add	sp, #28
 800c414:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 800c416:	2401      	movs	r4, #1
 800c418:	e7f7      	b.n	800c40a <osThreadNew+0x66>
    mem  = -1;
 800c41a:	f04f 34ff 	mov.w	r4, #4294967295
 800c41e:	e7f4      	b.n	800c40a <osThreadNew+0x66>
          mem = 0;
 800c420:	2400      	movs	r4, #0
 800c422:	e7f2      	b.n	800c40a <osThreadNew+0x66>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c424:	6914      	ldr	r4, [r2, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c426:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c428:	9202      	str	r2, [sp, #8]
 800c42a:	9401      	str	r4, [sp, #4]
 800c42c:	9300      	str	r3, [sp, #0]
 800c42e:	460b      	mov	r3, r1
 800c430:	4662      	mov	r2, ip
 800c432:	4629      	mov	r1, r5
 800c434:	f001 f858 	bl	800d4e8 <xTaskCreateStatic>
 800c438:	9005      	str	r0, [sp, #20]
 800c43a:	e7e9      	b.n	800c410 <osThreadNew+0x6c>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c43c:	aa05      	add	r2, sp, #20
 800c43e:	9201      	str	r2, [sp, #4]
 800c440:	9300      	str	r3, [sp, #0]
 800c442:	460b      	mov	r3, r1
 800c444:	fa1f f28c 	uxth.w	r2, ip
 800c448:	4629      	mov	r1, r5
 800c44a:	f001 f888 	bl	800d55e <xTaskCreate>
 800c44e:	2801      	cmp	r0, #1
 800c450:	d0de      	beq.n	800c410 <osThreadNew+0x6c>
            hTask = NULL;
 800c452:	2300      	movs	r3, #0
 800c454:	9305      	str	r3, [sp, #20]
 800c456:	e7db      	b.n	800c410 <osThreadNew+0x6c>
        return (NULL);
 800c458:	2000      	movs	r0, #0
 800c45a:	e7da      	b.n	800c412 <osThreadNew+0x6e>
 800c45c:	2000      	movs	r0, #0
 800c45e:	e7d8      	b.n	800c412 <osThreadNew+0x6e>

0800c460 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c460:	b508      	push	{r3, lr}
 800c462:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800c466:	b933      	cbnz	r3, 800c476 <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 800c468:	b908      	cbnz	r0, 800c46e <osDelay+0xe>
    stat = osOK;
 800c46a:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 800c46c:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 800c46e:	f001 fa15 	bl	800d89c <vTaskDelay>
    stat = osOK;
 800c472:	2000      	movs	r0, #0
 800c474:	e7fa      	b.n	800c46c <osDelay+0xc>
    stat = osErrorISR;
 800c476:	f06f 0005 	mvn.w	r0, #5
 800c47a:	e7f7      	b.n	800c46c <osDelay+0xc>

0800c47c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800c47c:	b570      	push	{r4, r5, r6, lr}
 800c47e:	b082      	sub	sp, #8
 800c480:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800c484:	2b00      	cmp	r3, #0
 800c486:	d14d      	bne.n	800c524 <osSemaphoreNew+0xa8>
 800c488:	460e      	mov	r6, r1
 800c48a:	4614      	mov	r4, r2
 800c48c:	4288      	cmp	r0, r1
 800c48e:	bf34      	ite	cc
 800c490:	2300      	movcc	r3, #0
 800c492:	2301      	movcs	r3, #1
 800c494:	2800      	cmp	r0, #0
 800c496:	d049      	beq.n	800c52c <osSemaphoreNew+0xb0>
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d047      	beq.n	800c52c <osSemaphoreNew+0xb0>
    mem = -1;

    if (attr != NULL) {
 800c49c:	b14a      	cbz	r2, 800c4b2 <osSemaphoreNew+0x36>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c49e:	6895      	ldr	r5, [r2, #8]
 800c4a0:	b115      	cbz	r5, 800c4a8 <osSemaphoreNew+0x2c>
 800c4a2:	68d3      	ldr	r3, [r2, #12]
 800c4a4:	2b4f      	cmp	r3, #79	@ 0x4f
 800c4a6:	d814      	bhi.n	800c4d2 <osSemaphoreNew+0x56>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c4a8:	2d00      	cmp	r5, #0
 800c4aa:	d141      	bne.n	800c530 <osSemaphoreNew+0xb4>
 800c4ac:	68e3      	ldr	r3, [r4, #12]
 800c4ae:	b10b      	cbz	r3, 800c4b4 <osSemaphoreNew+0x38>
 800c4b0:	e039      	b.n	800c526 <osSemaphoreNew+0xaa>
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 800c4b2:	2300      	movs	r3, #0
    }

    if (mem != -1) {
      if (max_count == 1U) {
 800c4b4:	2801      	cmp	r0, #1
 800c4b6:	d00e      	beq.n	800c4d6 <osSemaphoreNew+0x5a>
            hSemaphore = NULL;
          }
        }
      }
      else {
        if (mem == 1) {
 800c4b8:	bb73      	cbnz	r3, 800c518 <osSemaphoreNew+0x9c>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800c4ba:	4631      	mov	r1, r6
 800c4bc:	f000 fa90 	bl	800c9e0 <xQueueCreateCountingSemaphore>
 800c4c0:	4605      	mov	r5, r0
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800c4c2:	b385      	cbz	r5, 800c526 <osSemaphoreNew+0xaa>
        if (attr != NULL) {
 800c4c4:	b104      	cbz	r4, 800c4c8 <osSemaphoreNew+0x4c>
          name = attr->name;
 800c4c6:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hSemaphore, name);
 800c4c8:	4621      	mov	r1, r4
 800c4ca:	4628      	mov	r0, r5
 800c4cc:	f000 fe04 	bl	800d0d8 <vQueueAddToRegistry>
 800c4d0:	e029      	b.n	800c526 <osSemaphoreNew+0xaa>
        mem = 1;
 800c4d2:	2301      	movs	r3, #1
 800c4d4:	e7ee      	b.n	800c4b4 <osSemaphoreNew+0x38>
        if (mem == 1) {
 800c4d6:	b9b3      	cbnz	r3, 800c506 <osSemaphoreNew+0x8a>
            hSemaphore = xSemaphoreCreateBinary();
 800c4d8:	2203      	movs	r2, #3
 800c4da:	2100      	movs	r1, #0
 800c4dc:	2001      	movs	r0, #1
 800c4de:	f000 fa38 	bl	800c952 <xQueueGenericCreate>
 800c4e2:	4605      	mov	r5, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800c4e4:	2d00      	cmp	r5, #0
 800c4e6:	bf18      	it	ne
 800c4e8:	2e00      	cmpne	r6, #0
 800c4ea:	d0ea      	beq.n	800c4c2 <osSemaphoreNew+0x46>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	461a      	mov	r2, r3
 800c4f0:	4619      	mov	r1, r3
 800c4f2:	4628      	mov	r0, r5
 800c4f4:	f000 fa92 	bl	800ca1c <xQueueGenericSend>
 800c4f8:	2801      	cmp	r0, #1
 800c4fa:	d0e2      	beq.n	800c4c2 <osSemaphoreNew+0x46>
            vSemaphoreDelete (hSemaphore);
 800c4fc:	4628      	mov	r0, r5
 800c4fe:	f000 fe15 	bl	800d12c <vQueueDelete>
            hSemaphore = NULL;
 800c502:	2500      	movs	r5, #0
 800c504:	e00f      	b.n	800c526 <osSemaphoreNew+0xaa>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800c506:	68a3      	ldr	r3, [r4, #8]
 800c508:	2203      	movs	r2, #3
 800c50a:	9200      	str	r2, [sp, #0]
 800c50c:	2200      	movs	r2, #0
 800c50e:	4611      	mov	r1, r2
 800c510:	f000 f9cc 	bl	800c8ac <xQueueGenericCreateStatic>
 800c514:	4605      	mov	r5, r0
 800c516:	e7e5      	b.n	800c4e4 <osSemaphoreNew+0x68>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800c518:	68a2      	ldr	r2, [r4, #8]
 800c51a:	4631      	mov	r1, r6
 800c51c:	f000 fa3d 	bl	800c99a <xQueueCreateCountingSemaphoreStatic>
 800c520:	4605      	mov	r5, r0
 800c522:	e7ce      	b.n	800c4c2 <osSemaphoreNew+0x46>
  hSemaphore = NULL;
 800c524:	2500      	movs	r5, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800c526:	4628      	mov	r0, r5
 800c528:	b002      	add	sp, #8
 800c52a:	bd70      	pop	{r4, r5, r6, pc}
  hSemaphore = NULL;
 800c52c:	2500      	movs	r5, #0
 800c52e:	e7fa      	b.n	800c526 <osSemaphoreNew+0xaa>
 800c530:	2500      	movs	r5, #0
  return ((osSemaphoreId_t)hSemaphore);
 800c532:	e7f8      	b.n	800c526 <osSemaphoreNew+0xaa>

0800c534 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800c534:	b320      	cbz	r0, 800c580 <osSemaphoreAcquire+0x4c>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800c536:	b510      	push	{r4, lr}
 800c538:	b082      	sub	sp, #8
 800c53a:	460c      	mov	r4, r1
 800c53c:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800c540:	b1b3      	cbz	r3, 800c570 <osSemaphoreAcquire+0x3c>
    if (timeout != 0U) {
 800c542:	bb01      	cbnz	r1, 800c586 <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 800c544:	2100      	movs	r1, #0
 800c546:	9101      	str	r1, [sp, #4]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800c548:	aa01      	add	r2, sp, #4
 800c54a:	f000 fd6d 	bl	800d028 <xQueueReceiveFromISR>
 800c54e:	2801      	cmp	r0, #1
 800c550:	d11c      	bne.n	800c58c <osSemaphoreAcquire+0x58>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800c552:	9801      	ldr	r0, [sp, #4]
 800c554:	b150      	cbz	r0, 800c56c <osSemaphoreAcquire+0x38>
 800c556:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c55a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c55e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c562:	f3bf 8f4f 	dsb	sy
 800c566:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800c56a:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800c56c:	b002      	add	sp, #8
 800c56e:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800c570:	f000 fc87 	bl	800ce82 <xQueueSemaphoreTake>
 800c574:	2801      	cmp	r0, #1
 800c576:	d00c      	beq.n	800c592 <osSemaphoreAcquire+0x5e>
      if (timeout != 0U) {
 800c578:	b16c      	cbz	r4, 800c596 <osSemaphoreAcquire+0x62>
        stat = osErrorTimeout;
 800c57a:	f06f 0001 	mvn.w	r0, #1
 800c57e:	e7f5      	b.n	800c56c <osSemaphoreAcquire+0x38>
    stat = osErrorParameter;
 800c580:	f06f 0003 	mvn.w	r0, #3
}
 800c584:	4770      	bx	lr
      stat = osErrorParameter;
 800c586:	f06f 0003 	mvn.w	r0, #3
 800c58a:	e7ef      	b.n	800c56c <osSemaphoreAcquire+0x38>
        stat = osErrorResource;
 800c58c:	f06f 0002 	mvn.w	r0, #2
 800c590:	e7ec      	b.n	800c56c <osSemaphoreAcquire+0x38>
  stat = osOK;
 800c592:	2000      	movs	r0, #0
 800c594:	e7ea      	b.n	800c56c <osSemaphoreAcquire+0x38>
        stat = osErrorResource;
 800c596:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800c59a:	e7e7      	b.n	800c56c <osSemaphoreAcquire+0x38>

0800c59c <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800c59c:	b320      	cbz	r0, 800c5e8 <osSemaphoreRelease+0x4c>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800c59e:	b500      	push	{lr}
 800c5a0:	b083      	sub	sp, #12
 800c5a2:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800c5a6:	b1a3      	cbz	r3, 800c5d2 <osSemaphoreRelease+0x36>
    yield = pdFALSE;
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	9301      	str	r3, [sp, #4]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c5ac:	a901      	add	r1, sp, #4
 800c5ae:	f000 fb60 	bl	800cc72 <xQueueGiveFromISR>
 800c5b2:	2801      	cmp	r0, #1
 800c5b4:	d11b      	bne.n	800c5ee <osSemaphoreRelease+0x52>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 800c5b6:	9801      	ldr	r0, [sp, #4]
 800c5b8:	b198      	cbz	r0, 800c5e2 <osSemaphoreRelease+0x46>
 800c5ba:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c5be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c5c2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c5c6:	f3bf 8f4f 	dsb	sy
 800c5ca:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800c5ce:	2000      	movs	r0, #0
 800c5d0:	e007      	b.n	800c5e2 <osSemaphoreRelease+0x46>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	461a      	mov	r2, r3
 800c5d6:	4619      	mov	r1, r3
 800c5d8:	f000 fa20 	bl	800ca1c <xQueueGenericSend>
 800c5dc:	2801      	cmp	r0, #1
 800c5de:	d109      	bne.n	800c5f4 <osSemaphoreRelease+0x58>
  stat = osOK;
 800c5e0:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 800c5e2:	b003      	add	sp, #12
 800c5e4:	f85d fb04 	ldr.w	pc, [sp], #4
    stat = osErrorParameter;
 800c5e8:	f06f 0003 	mvn.w	r0, #3
}
 800c5ec:	4770      	bx	lr
      stat = osErrorResource;
 800c5ee:	f06f 0002 	mvn.w	r0, #2
 800c5f2:	e7f6      	b.n	800c5e2 <osSemaphoreRelease+0x46>
      stat = osErrorResource;
 800c5f4:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800c5f8:	e7f3      	b.n	800c5e2 <osSemaphoreRelease+0x46>
	...

0800c5fc <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c5fc:	4b03      	ldr	r3, [pc, #12]	@ (800c60c <vApplicationGetIdleTaskMemory+0x10>)
 800c5fe:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c600:	4b03      	ldr	r3, [pc, #12]	@ (800c610 <vApplicationGetIdleTaskMemory+0x14>)
 800c602:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c604:	2380      	movs	r3, #128	@ 0x80
 800c606:	6013      	str	r3, [r2, #0]
}
 800c608:	4770      	bx	lr
 800c60a:	bf00      	nop
 800c60c:	24002e64 	.word	0x24002e64
 800c610:	24002c64 	.word	0x24002c64

0800c614 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c614:	4b03      	ldr	r3, [pc, #12]	@ (800c624 <vApplicationGetTimerTaskMemory+0x10>)
 800c616:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c618:	4b03      	ldr	r3, [pc, #12]	@ (800c628 <vApplicationGetTimerTaskMemory+0x14>)
 800c61a:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c61c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c620:	6013      	str	r3, [r2, #0]
}
 800c622:	4770      	bx	lr
 800c624:	24002bbc 	.word	0x24002bbc
 800c628:	240027bc 	.word	0x240027bc

0800c62c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c62c:	f100 0308 	add.w	r3, r0, #8
 800c630:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c632:	f04f 32ff 	mov.w	r2, #4294967295
 800c636:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c638:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c63a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c63c:	2300      	movs	r3, #0
 800c63e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c640:	4770      	bx	lr

0800c642 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c642:	2300      	movs	r3, #0
 800c644:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c646:	4770      	bx	lr

0800c648 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800c648:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c64a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c64c:	689a      	ldr	r2, [r3, #8]
 800c64e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c650:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c652:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c654:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800c656:	6803      	ldr	r3, [r0, #0]
 800c658:	3301      	adds	r3, #1
 800c65a:	6003      	str	r3, [r0, #0]
}
 800c65c:	4770      	bx	lr

0800c65e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c65e:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c660:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c662:	f1b5 3fff 	cmp.w	r5, #4294967295
 800c666:	d011      	beq.n	800c68c <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c668:	f100 0308 	add.w	r3, r0, #8
 800c66c:	461c      	mov	r4, r3
 800c66e:	685b      	ldr	r3, [r3, #4]
 800c670:	681a      	ldr	r2, [r3, #0]
 800c672:	42aa      	cmp	r2, r5
 800c674:	d9fa      	bls.n	800c66c <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c676:	6863      	ldr	r3, [r4, #4]
 800c678:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c67a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c67c:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800c67e:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c680:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800c682:	6803      	ldr	r3, [r0, #0]
 800c684:	3301      	adds	r3, #1
 800c686:	6003      	str	r3, [r0, #0]
}
 800c688:	bc30      	pop	{r4, r5}
 800c68a:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800c68c:	6904      	ldr	r4, [r0, #16]
 800c68e:	e7f2      	b.n	800c676 <vListInsert+0x18>

0800c690 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c690:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c692:	6841      	ldr	r1, [r0, #4]
 800c694:	6882      	ldr	r2, [r0, #8]
 800c696:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c698:	6841      	ldr	r1, [r0, #4]
 800c69a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c69c:	685a      	ldr	r2, [r3, #4]
 800c69e:	4282      	cmp	r2, r0
 800c6a0:	d006      	beq.n	800c6b0 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800c6a6:	681a      	ldr	r2, [r3, #0]
 800c6a8:	3a01      	subs	r2, #1
 800c6aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c6ac:	6818      	ldr	r0, [r3, #0]
}
 800c6ae:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c6b0:	6882      	ldr	r2, [r0, #8]
 800c6b2:	605a      	str	r2, [r3, #4]
 800c6b4:	e7f5      	b.n	800c6a2 <uxListRemove+0x12>

0800c6b6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c6b6:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c6b8:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800c6ba:	b118      	cbz	r0, 800c6c4 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c6bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6be:	6818      	ldr	r0, [r3, #0]
 800c6c0:	f1c0 0038 	rsb	r0, r0, #56	@ 0x38
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 800c6c4:	4770      	bx	lr

0800c6c6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c6c6:	b510      	push	{r4, lr}
 800c6c8:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c6ca:	f001 fdcb 	bl	800e264 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c6ce:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800c6d0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800c6d2:	429a      	cmp	r2, r3
 800c6d4:	d004      	beq.n	800c6e0 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800c6d6:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800c6d8:	f001 fde6 	bl	800e2a8 <vPortExitCritical>

	return xReturn;
}
 800c6dc:	4620      	mov	r0, r4
 800c6de:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800c6e0:	2401      	movs	r4, #1
 800c6e2:	e7f9      	b.n	800c6d8 <prvIsQueueFull+0x12>

0800c6e4 <prvIsQueueEmpty>:
{
 800c6e4:	b510      	push	{r4, lr}
 800c6e6:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800c6e8:	f001 fdbc 	bl	800e264 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c6ec:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800c6ee:	b923      	cbnz	r3, 800c6fa <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 800c6f0:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 800c6f2:	f001 fdd9 	bl	800e2a8 <vPortExitCritical>
}
 800c6f6:	4620      	mov	r0, r4
 800c6f8:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 800c6fa:	2400      	movs	r4, #0
 800c6fc:	e7f9      	b.n	800c6f2 <prvIsQueueEmpty+0xe>

0800c6fe <prvCopyDataToQueue>:
{
 800c6fe:	b570      	push	{r4, r5, r6, lr}
 800c700:	4604      	mov	r4, r0
 800c702:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c704:	6b86      	ldr	r6, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c706:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800c708:	b95a      	cbnz	r2, 800c722 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c70a:	6803      	ldr	r3, [r0, #0]
 800c70c:	b11b      	cbz	r3, 800c716 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 800c70e:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c710:	3601      	adds	r6, #1
 800c712:	63a6      	str	r6, [r4, #56]	@ 0x38
}
 800c714:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c716:	6880      	ldr	r0, [r0, #8]
 800c718:	f001 fa62 	bl	800dbe0 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c71c:	2300      	movs	r3, #0
 800c71e:	60a3      	str	r3, [r4, #8]
 800c720:	e7f6      	b.n	800c710 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 800c722:	b96d      	cbnz	r5, 800c740 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c724:	6840      	ldr	r0, [r0, #4]
 800c726:	f00e fc99 	bl	801b05c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c72a:	6863      	ldr	r3, [r4, #4]
 800c72c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800c72e:	4413      	add	r3, r2
 800c730:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c732:	68a2      	ldr	r2, [r4, #8]
 800c734:	4293      	cmp	r3, r2
 800c736:	d319      	bcc.n	800c76c <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c738:	6823      	ldr	r3, [r4, #0]
 800c73a:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800c73c:	4628      	mov	r0, r5
 800c73e:	e7e7      	b.n	800c710 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c740:	68c0      	ldr	r0, [r0, #12]
 800c742:	f00e fc8b 	bl	801b05c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c746:	68e3      	ldr	r3, [r4, #12]
 800c748:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800c74a:	4251      	negs	r1, r2
 800c74c:	1a9b      	subs	r3, r3, r2
 800c74e:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c750:	6822      	ldr	r2, [r4, #0]
 800c752:	4293      	cmp	r3, r2
 800c754:	d202      	bcs.n	800c75c <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c756:	68a3      	ldr	r3, [r4, #8]
 800c758:	440b      	add	r3, r1
 800c75a:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800c75c:	2d02      	cmp	r5, #2
 800c75e:	d001      	beq.n	800c764 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 800c760:	2000      	movs	r0, #0
 800c762:	e7d5      	b.n	800c710 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c764:	b126      	cbz	r6, 800c770 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 800c766:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800c768:	2000      	movs	r0, #0
 800c76a:	e7d1      	b.n	800c710 <prvCopyDataToQueue+0x12>
 800c76c:	4628      	mov	r0, r5
 800c76e:	e7cf      	b.n	800c710 <prvCopyDataToQueue+0x12>
 800c770:	2000      	movs	r0, #0
 800c772:	e7cd      	b.n	800c710 <prvCopyDataToQueue+0x12>

0800c774 <prvCopyDataFromQueue>:
{
 800c774:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c776:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800c778:	b16a      	cbz	r2, 800c796 <prvCopyDataFromQueue+0x22>
{
 800c77a:	b510      	push	{r4, lr}
 800c77c:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c77e:	68d9      	ldr	r1, [r3, #12]
 800c780:	4411      	add	r1, r2
 800c782:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c784:	689c      	ldr	r4, [r3, #8]
 800c786:	42a1      	cmp	r1, r4
 800c788:	d301      	bcc.n	800c78e <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c78a:	6819      	ldr	r1, [r3, #0]
 800c78c:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c78e:	68d9      	ldr	r1, [r3, #12]
 800c790:	f00e fc64 	bl	801b05c <memcpy>
}
 800c794:	bd10      	pop	{r4, pc}
 800c796:	4770      	bx	lr

0800c798 <prvUnlockQueue>:
{
 800c798:	b538      	push	{r3, r4, r5, lr}
 800c79a:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 800c79c:	f001 fd62 	bl	800e264 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800c7a0:	f895 4045 	ldrb.w	r4, [r5, #69]	@ 0x45
 800c7a4:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c7a6:	e001      	b.n	800c7ac <prvUnlockQueue+0x14>
			--cTxLock;
 800c7a8:	3c01      	subs	r4, #1
 800c7aa:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c7ac:	2c00      	cmp	r4, #0
 800c7ae:	dd0a      	ble.n	800c7c6 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c7b0:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800c7b2:	b143      	cbz	r3, 800c7c6 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c7b4:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 800c7b8:	f001 f91c 	bl	800d9f4 <xTaskRemoveFromEventList>
 800c7bc:	2800      	cmp	r0, #0
 800c7be:	d0f3      	beq.n	800c7a8 <prvUnlockQueue+0x10>
						vTaskMissedYield();
 800c7c0:	f001 f9ac 	bl	800db1c <vTaskMissedYield>
 800c7c4:	e7f0      	b.n	800c7a8 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800c7c6:	23ff      	movs	r3, #255	@ 0xff
 800c7c8:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800c7cc:	f001 fd6c 	bl	800e2a8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800c7d0:	f001 fd48 	bl	800e264 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800c7d4:	f895 4044 	ldrb.w	r4, [r5, #68]	@ 0x44
 800c7d8:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c7da:	e001      	b.n	800c7e0 <prvUnlockQueue+0x48>
				--cRxLock;
 800c7dc:	3c01      	subs	r4, #1
 800c7de:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c7e0:	2c00      	cmp	r4, #0
 800c7e2:	dd0a      	ble.n	800c7fa <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c7e4:	692b      	ldr	r3, [r5, #16]
 800c7e6:	b143      	cbz	r3, 800c7fa <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c7e8:	f105 0010 	add.w	r0, r5, #16
 800c7ec:	f001 f902 	bl	800d9f4 <xTaskRemoveFromEventList>
 800c7f0:	2800      	cmp	r0, #0
 800c7f2:	d0f3      	beq.n	800c7dc <prvUnlockQueue+0x44>
					vTaskMissedYield();
 800c7f4:	f001 f992 	bl	800db1c <vTaskMissedYield>
 800c7f8:	e7f0      	b.n	800c7dc <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 800c7fa:	23ff      	movs	r3, #255	@ 0xff
 800c7fc:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	taskEXIT_CRITICAL();
 800c800:	f001 fd52 	bl	800e2a8 <vPortExitCritical>
}
 800c804:	bd38      	pop	{r3, r4, r5, pc}

0800c806 <xQueueGenericReset>:
{
 800c806:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800c808:	b1e0      	cbz	r0, 800c844 <xQueueGenericReset+0x3e>
 800c80a:	460d      	mov	r5, r1
 800c80c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800c80e:	f001 fd29 	bl	800e264 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c812:	6823      	ldr	r3, [r4, #0]
 800c814:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800c816:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800c818:	fb01 3002 	mla	r0, r1, r2, r3
 800c81c:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c81e:	2000      	movs	r0, #0
 800c820:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c822:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c824:	3a01      	subs	r2, #1
 800c826:	fb02 3301 	mla	r3, r2, r1, r3
 800c82a:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c82c:	23ff      	movs	r3, #255	@ 0xff
 800c82e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c832:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800c836:	b9fd      	cbnz	r5, 800c878 <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c838:	6923      	ldr	r3, [r4, #16]
 800c83a:	b963      	cbnz	r3, 800c856 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 800c83c:	f001 fd34 	bl	800e2a8 <vPortExitCritical>
}
 800c840:	2001      	movs	r0, #1
 800c842:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c848:	f383 8811 	msr	BASEPRI, r3
 800c84c:	f3bf 8f6f 	isb	sy
 800c850:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800c854:	e7fe      	b.n	800c854 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c856:	f104 0010 	add.w	r0, r4, #16
 800c85a:	f001 f8cb 	bl	800d9f4 <xTaskRemoveFromEventList>
 800c85e:	2800      	cmp	r0, #0
 800c860:	d0ec      	beq.n	800c83c <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 800c862:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c866:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c86a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c86e:	f3bf 8f4f 	dsb	sy
 800c872:	f3bf 8f6f 	isb	sy
 800c876:	e7e1      	b.n	800c83c <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c878:	f104 0010 	add.w	r0, r4, #16
 800c87c:	f7ff fed6 	bl	800c62c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c880:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800c884:	f7ff fed2 	bl	800c62c <vListInitialise>
 800c888:	e7d8      	b.n	800c83c <xQueueGenericReset+0x36>

0800c88a <prvInitialiseNewQueue>:
{
 800c88a:	b538      	push	{r3, r4, r5, lr}
 800c88c:	461d      	mov	r5, r3
 800c88e:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 800c890:	460b      	mov	r3, r1
 800c892:	b949      	cbnz	r1, 800c8a8 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c894:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800c896:	63e0      	str	r0, [r4, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c898:	6423      	str	r3, [r4, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c89a:	2101      	movs	r1, #1
 800c89c:	4620      	mov	r0, r4
 800c89e:	f7ff ffb2 	bl	800c806 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800c8a2:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
}
 800c8a6:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c8a8:	6022      	str	r2, [r4, #0]
 800c8aa:	e7f4      	b.n	800c896 <prvInitialiseNewQueue+0xc>

0800c8ac <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c8ac:	b940      	cbnz	r0, 800c8c0 <xQueueGenericCreateStatic+0x14>
 800c8ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8b2:	f383 8811 	msr	BASEPRI, r3
 800c8b6:	f3bf 8f6f 	isb	sy
 800c8ba:	f3bf 8f4f 	dsb	sy
 800c8be:	e7fe      	b.n	800c8be <xQueueGenericCreateStatic+0x12>
	{
 800c8c0:	b510      	push	{r4, lr}
 800c8c2:	b084      	sub	sp, #16
 800c8c4:	461c      	mov	r4, r3
		configASSERT( pxStaticQueue != NULL );
 800c8c6:	b183      	cbz	r3, 800c8ea <xQueueGenericCreateStatic+0x3e>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c8c8:	1e0b      	subs	r3, r1, #0
 800c8ca:	bf18      	it	ne
 800c8cc:	2301      	movne	r3, #1
 800c8ce:	2a00      	cmp	r2, #0
 800c8d0:	bf08      	it	eq
 800c8d2:	f043 0301 	orreq.w	r3, r3, #1
 800c8d6:	b98b      	cbnz	r3, 800c8fc <xQueueGenericCreateStatic+0x50>
 800c8d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8dc:	f383 8811 	msr	BASEPRI, r3
 800c8e0:	f3bf 8f6f 	isb	sy
 800c8e4:	f3bf 8f4f 	dsb	sy
 800c8e8:	e7fe      	b.n	800c8e8 <xQueueGenericCreateStatic+0x3c>
 800c8ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8ee:	f383 8811 	msr	BASEPRI, r3
 800c8f2:	f3bf 8f6f 	isb	sy
 800c8f6:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 800c8fa:	e7fe      	b.n	800c8fa <xQueueGenericCreateStatic+0x4e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c8fc:	fab1 f381 	clz	r3, r1
 800c900:	095b      	lsrs	r3, r3, #5
 800c902:	2a00      	cmp	r2, #0
 800c904:	bf18      	it	ne
 800c906:	f043 0301 	orrne.w	r3, r3, #1
 800c90a:	b943      	cbnz	r3, 800c91e <xQueueGenericCreateStatic+0x72>
 800c90c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c910:	f383 8811 	msr	BASEPRI, r3
 800c914:	f3bf 8f6f 	isb	sy
 800c918:	f3bf 8f4f 	dsb	sy
 800c91c:	e7fe      	b.n	800c91c <xQueueGenericCreateStatic+0x70>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c91e:	2350      	movs	r3, #80	@ 0x50
 800c920:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c922:	9b03      	ldr	r3, [sp, #12]
 800c924:	2b50      	cmp	r3, #80	@ 0x50
 800c926:	d008      	beq.n	800c93a <xQueueGenericCreateStatic+0x8e>
 800c928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c92c:	f383 8811 	msr	BASEPRI, r3
 800c930:	f3bf 8f6f 	isb	sy
 800c934:	f3bf 8f4f 	dsb	sy
 800c938:	e7fe      	b.n	800c938 <xQueueGenericCreateStatic+0x8c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c93a:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c93c:	2301      	movs	r3, #1
 800c93e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c942:	9400      	str	r4, [sp, #0]
 800c944:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800c948:	f7ff ff9f 	bl	800c88a <prvInitialiseNewQueue>
	}
 800c94c:	4620      	mov	r0, r4
 800c94e:	b004      	add	sp, #16
 800c950:	bd10      	pop	{r4, pc}

0800c952 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c952:	b940      	cbnz	r0, 800c966 <xQueueGenericCreate+0x14>
 800c954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c958:	f383 8811 	msr	BASEPRI, r3
 800c95c:	f3bf 8f6f 	isb	sy
 800c960:	f3bf 8f4f 	dsb	sy
 800c964:	e7fe      	b.n	800c964 <xQueueGenericCreate+0x12>
	{
 800c966:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c968:	b083      	sub	sp, #12
 800c96a:	460d      	mov	r5, r1
 800c96c:	4614      	mov	r4, r2
 800c96e:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c970:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c974:	3050      	adds	r0, #80	@ 0x50
 800c976:	f001 fe2d 	bl	800e5d4 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800c97a:	4607      	mov	r7, r0
 800c97c:	b150      	cbz	r0, 800c994 <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c97e:	2300      	movs	r3, #0
 800c980:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c984:	9000      	str	r0, [sp, #0]
 800c986:	4623      	mov	r3, r4
 800c988:	f100 0250 	add.w	r2, r0, #80	@ 0x50
 800c98c:	4629      	mov	r1, r5
 800c98e:	4630      	mov	r0, r6
 800c990:	f7ff ff7b 	bl	800c88a <prvInitialiseNewQueue>
	}
 800c994:	4638      	mov	r0, r7
 800c996:	b003      	add	sp, #12
 800c998:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c99a <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 800c99a:	b940      	cbnz	r0, 800c9ae <xQueueCreateCountingSemaphoreStatic+0x14>
 800c99c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9a0:	f383 8811 	msr	BASEPRI, r3
 800c9a4:	f3bf 8f6f 	isb	sy
 800c9a8:	f3bf 8f4f 	dsb	sy
 800c9ac:	e7fe      	b.n	800c9ac <xQueueCreateCountingSemaphoreStatic+0x12>
	{
 800c9ae:	b510      	push	{r4, lr}
 800c9b0:	b082      	sub	sp, #8
 800c9b2:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 800c9b4:	4288      	cmp	r0, r1
 800c9b6:	d208      	bcs.n	800c9ca <xQueueCreateCountingSemaphoreStatic+0x30>
 800c9b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9bc:	f383 8811 	msr	BASEPRI, r3
 800c9c0:	f3bf 8f6f 	isb	sy
 800c9c4:	f3bf 8f4f 	dsb	sy
 800c9c8:	e7fe      	b.n	800c9c8 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c9ca:	2302      	movs	r3, #2
 800c9cc:	9300      	str	r3, [sp, #0]
 800c9ce:	4613      	mov	r3, r2
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	4611      	mov	r1, r2
 800c9d4:	f7ff ff6a 	bl	800c8ac <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800c9d8:	b100      	cbz	r0, 800c9dc <xQueueCreateCountingSemaphoreStatic+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c9da:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800c9dc:	b002      	add	sp, #8
 800c9de:	bd10      	pop	{r4, pc}

0800c9e0 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 800c9e0:	b940      	cbnz	r0, 800c9f4 <xQueueCreateCountingSemaphore+0x14>
 800c9e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9e6:	f383 8811 	msr	BASEPRI, r3
 800c9ea:	f3bf 8f6f 	isb	sy
 800c9ee:	f3bf 8f4f 	dsb	sy
 800c9f2:	e7fe      	b.n	800c9f2 <xQueueCreateCountingSemaphore+0x12>
	{
 800c9f4:	b510      	push	{r4, lr}
 800c9f6:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 800c9f8:	4288      	cmp	r0, r1
 800c9fa:	d208      	bcs.n	800ca0e <xQueueCreateCountingSemaphore+0x2e>
 800c9fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca00:	f383 8811 	msr	BASEPRI, r3
 800ca04:	f3bf 8f6f 	isb	sy
 800ca08:	f3bf 8f4f 	dsb	sy
 800ca0c:	e7fe      	b.n	800ca0c <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ca0e:	2202      	movs	r2, #2
 800ca10:	2100      	movs	r1, #0
 800ca12:	f7ff ff9e 	bl	800c952 <xQueueGenericCreate>
		if( xHandle != NULL )
 800ca16:	b100      	cbz	r0, 800ca1a <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ca18:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800ca1a:	bd10      	pop	{r4, pc}

0800ca1c <xQueueGenericSend>:
{
 800ca1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca1e:	b085      	sub	sp, #20
 800ca20:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800ca22:	b188      	cbz	r0, 800ca48 <xQueueGenericSend+0x2c>
 800ca24:	460f      	mov	r7, r1
 800ca26:	461d      	mov	r5, r3
 800ca28:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ca2a:	b1b1      	cbz	r1, 800ca5a <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ca2c:	2d02      	cmp	r5, #2
 800ca2e:	d120      	bne.n	800ca72 <xQueueGenericSend+0x56>
 800ca30:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800ca32:	2b01      	cmp	r3, #1
 800ca34:	d01d      	beq.n	800ca72 <xQueueGenericSend+0x56>
 800ca36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca3a:	f383 8811 	msr	BASEPRI, r3
 800ca3e:	f3bf 8f6f 	isb	sy
 800ca42:	f3bf 8f4f 	dsb	sy
 800ca46:	e7fe      	b.n	800ca46 <xQueueGenericSend+0x2a>
 800ca48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca4c:	f383 8811 	msr	BASEPRI, r3
 800ca50:	f3bf 8f6f 	isb	sy
 800ca54:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800ca58:	e7fe      	b.n	800ca58 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ca5a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d0e5      	beq.n	800ca2c <xQueueGenericSend+0x10>
 800ca60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca64:	f383 8811 	msr	BASEPRI, r3
 800ca68:	f3bf 8f6f 	isb	sy
 800ca6c:	f3bf 8f4f 	dsb	sy
 800ca70:	e7fe      	b.n	800ca70 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ca72:	f001 f859 	bl	800db28 <xTaskGetSchedulerState>
 800ca76:	4606      	mov	r6, r0
 800ca78:	b958      	cbnz	r0, 800ca92 <xQueueGenericSend+0x76>
 800ca7a:	9b01      	ldr	r3, [sp, #4]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d048      	beq.n	800cb12 <xQueueGenericSend+0xf6>
 800ca80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca84:	f383 8811 	msr	BASEPRI, r3
 800ca88:	f3bf 8f6f 	isb	sy
 800ca8c:	f3bf 8f4f 	dsb	sy
 800ca90:	e7fe      	b.n	800ca90 <xQueueGenericSend+0x74>
 800ca92:	2600      	movs	r6, #0
 800ca94:	e03d      	b.n	800cb12 <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ca96:	462a      	mov	r2, r5
 800ca98:	4639      	mov	r1, r7
 800ca9a:	4620      	mov	r0, r4
 800ca9c:	f7ff fe2f 	bl	800c6fe <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800caa0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800caa2:	b97b      	cbnz	r3, 800cac4 <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 800caa4:	b148      	cbz	r0, 800caba <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 800caa6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800caaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800caae:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800cab2:	f3bf 8f4f 	dsb	sy
 800cab6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800caba:	f001 fbf5 	bl	800e2a8 <vPortExitCritical>
				return pdPASS;
 800cabe:	2001      	movs	r0, #1
}
 800cac0:	b005      	add	sp, #20
 800cac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cac4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800cac8:	f000 ff94 	bl	800d9f4 <xTaskRemoveFromEventList>
 800cacc:	2800      	cmp	r0, #0
 800cace:	d0f4      	beq.n	800caba <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 800cad0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cad4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cad8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800cadc:	f3bf 8f4f 	dsb	sy
 800cae0:	f3bf 8f6f 	isb	sy
 800cae4:	e7e9      	b.n	800caba <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 800cae6:	f001 fbdf 	bl	800e2a8 <vPortExitCritical>
					return errQUEUE_FULL;
 800caea:	2000      	movs	r0, #0
 800caec:	e7e8      	b.n	800cac0 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800caee:	a802      	add	r0, sp, #8
 800caf0:	f000 ffc6 	bl	800da80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800caf4:	2601      	movs	r6, #1
 800caf6:	e019      	b.n	800cb2c <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 800caf8:	2300      	movs	r3, #0
 800cafa:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800cafe:	e021      	b.n	800cb44 <xQueueGenericSend+0x128>
 800cb00:	2300      	movs	r3, #0
 800cb02:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800cb06:	e023      	b.n	800cb50 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 800cb08:	4620      	mov	r0, r4
 800cb0a:	f7ff fe45 	bl	800c798 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cb0e:	f000 fe49 	bl	800d7a4 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800cb12:	f001 fba7 	bl	800e264 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cb16:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800cb18:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800cb1a:	429a      	cmp	r2, r3
 800cb1c:	d3bb      	bcc.n	800ca96 <xQueueGenericSend+0x7a>
 800cb1e:	2d02      	cmp	r5, #2
 800cb20:	d0b9      	beq.n	800ca96 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800cb22:	9b01      	ldr	r3, [sp, #4]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d0de      	beq.n	800cae6 <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 800cb28:	2e00      	cmp	r6, #0
 800cb2a:	d0e0      	beq.n	800caee <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 800cb2c:	f001 fbbc 	bl	800e2a8 <vPortExitCritical>
		vTaskSuspendAll();
 800cb30:	f000 fd9e 	bl	800d670 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cb34:	f001 fb96 	bl	800e264 <vPortEnterCritical>
 800cb38:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 800cb3c:	b252      	sxtb	r2, r2
 800cb3e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cb42:	d0d9      	beq.n	800caf8 <xQueueGenericSend+0xdc>
 800cb44:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 800cb48:	b252      	sxtb	r2, r2
 800cb4a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cb4e:	d0d7      	beq.n	800cb00 <xQueueGenericSend+0xe4>
 800cb50:	f001 fbaa 	bl	800e2a8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cb54:	a901      	add	r1, sp, #4
 800cb56:	a802      	add	r0, sp, #8
 800cb58:	f000 ff9e 	bl	800da98 <xTaskCheckForTimeOut>
 800cb5c:	b9d8      	cbnz	r0, 800cb96 <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cb5e:	4620      	mov	r0, r4
 800cb60:	f7ff fdb1 	bl	800c6c6 <prvIsQueueFull>
 800cb64:	2800      	cmp	r0, #0
 800cb66:	d0cf      	beq.n	800cb08 <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cb68:	9901      	ldr	r1, [sp, #4]
 800cb6a:	f104 0010 	add.w	r0, r4, #16
 800cb6e:	f000 ff0d 	bl	800d98c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cb72:	4620      	mov	r0, r4
 800cb74:	f7ff fe10 	bl	800c798 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cb78:	f000 fe14 	bl	800d7a4 <xTaskResumeAll>
 800cb7c:	2800      	cmp	r0, #0
 800cb7e:	d1c8      	bne.n	800cb12 <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 800cb80:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cb84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb88:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800cb8c:	f3bf 8f4f 	dsb	sy
 800cb90:	f3bf 8f6f 	isb	sy
 800cb94:	e7bd      	b.n	800cb12 <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 800cb96:	4620      	mov	r0, r4
 800cb98:	f7ff fdfe 	bl	800c798 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cb9c:	f000 fe02 	bl	800d7a4 <xTaskResumeAll>
			return errQUEUE_FULL;
 800cba0:	2000      	movs	r0, #0
 800cba2:	e78d      	b.n	800cac0 <xQueueGenericSend+0xa4>

0800cba4 <xQueueGenericSendFromISR>:
{
 800cba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800cba8:	b190      	cbz	r0, 800cbd0 <xQueueGenericSendFromISR+0x2c>
 800cbaa:	460f      	mov	r7, r1
 800cbac:	4616      	mov	r6, r2
 800cbae:	461c      	mov	r4, r3
 800cbb0:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cbb2:	b1b1      	cbz	r1, 800cbe2 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cbb4:	2c02      	cmp	r4, #2
 800cbb6:	d120      	bne.n	800cbfa <xQueueGenericSendFromISR+0x56>
 800cbb8:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 800cbba:	2b01      	cmp	r3, #1
 800cbbc:	d01d      	beq.n	800cbfa <xQueueGenericSendFromISR+0x56>
 800cbbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbc2:	f383 8811 	msr	BASEPRI, r3
 800cbc6:	f3bf 8f6f 	isb	sy
 800cbca:	f3bf 8f4f 	dsb	sy
 800cbce:	e7fe      	b.n	800cbce <xQueueGenericSendFromISR+0x2a>
 800cbd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbd4:	f383 8811 	msr	BASEPRI, r3
 800cbd8:	f3bf 8f6f 	isb	sy
 800cbdc:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800cbe0:	e7fe      	b.n	800cbe0 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cbe2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d0e5      	beq.n	800cbb4 <xQueueGenericSendFromISR+0x10>
 800cbe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbec:	f383 8811 	msr	BASEPRI, r3
 800cbf0:	f3bf 8f6f 	isb	sy
 800cbf4:	f3bf 8f4f 	dsb	sy
 800cbf8:	e7fe      	b.n	800cbf8 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cbfa:	f001 fc59 	bl	800e4b0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cbfe:	f3ef 8811 	mrs	r8, BASEPRI
 800cc02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc06:	f383 8811 	msr	BASEPRI, r3
 800cc0a:	f3bf 8f6f 	isb	sy
 800cc0e:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cc12:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 800cc14:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 800cc16:	429a      	cmp	r2, r3
 800cc18:	d306      	bcc.n	800cc28 <xQueueGenericSendFromISR+0x84>
 800cc1a:	2c02      	cmp	r4, #2
 800cc1c:	d004      	beq.n	800cc28 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 800cc1e:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cc20:	f388 8811 	msr	BASEPRI, r8
}
 800cc24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 800cc28:	f895 9045 	ldrb.w	r9, [r5, #69]	@ 0x45
 800cc2c:	fa4f f989 	sxtb.w	r9, r9
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cc30:	6bab      	ldr	r3, [r5, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cc32:	4622      	mov	r2, r4
 800cc34:	4639      	mov	r1, r7
 800cc36:	4628      	mov	r0, r5
 800cc38:	f7ff fd61 	bl	800c6fe <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800cc3c:	f1b9 3fff 	cmp.w	r9, #4294967295
 800cc40:	d006      	beq.n	800cc50 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cc42:	f109 0301 	add.w	r3, r9, #1
 800cc46:	b25b      	sxtb	r3, r3
 800cc48:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 800cc4c:	2001      	movs	r0, #1
 800cc4e:	e7e7      	b.n	800cc20 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc50:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800cc52:	b90b      	cbnz	r3, 800cc58 <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 800cc54:	2001      	movs	r0, #1
 800cc56:	e7e3      	b.n	800cc20 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc58:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 800cc5c:	f000 feca 	bl	800d9f4 <xTaskRemoveFromEventList>
 800cc60:	b118      	cbz	r0, 800cc6a <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 800cc62:	b126      	cbz	r6, 800cc6e <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cc64:	2001      	movs	r0, #1
 800cc66:	6030      	str	r0, [r6, #0]
 800cc68:	e7da      	b.n	800cc20 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 800cc6a:	2001      	movs	r0, #1
 800cc6c:	e7d8      	b.n	800cc20 <xQueueGenericSendFromISR+0x7c>
 800cc6e:	2001      	movs	r0, #1
 800cc70:	e7d6      	b.n	800cc20 <xQueueGenericSendFromISR+0x7c>

0800cc72 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 800cc72:	b168      	cbz	r0, 800cc90 <xQueueGiveFromISR+0x1e>
{
 800cc74:	b570      	push	{r4, r5, r6, lr}
 800cc76:	460c      	mov	r4, r1
 800cc78:	4605      	mov	r5, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800cc7a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800cc7c:	b18b      	cbz	r3, 800cca2 <xQueueGiveFromISR+0x30>
	__asm volatile
 800cc7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc82:	f383 8811 	msr	BASEPRI, r3
 800cc86:	f3bf 8f6f 	isb	sy
 800cc8a:	f3bf 8f4f 	dsb	sy
 800cc8e:	e7fe      	b.n	800cc8e <xQueueGiveFromISR+0x1c>
 800cc90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc94:	f383 8811 	msr	BASEPRI, r3
 800cc98:	f3bf 8f6f 	isb	sy
 800cc9c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800cca0:	e7fe      	b.n	800cca0 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800cca2:	6803      	ldr	r3, [r0, #0]
 800cca4:	b1eb      	cbz	r3, 800cce2 <xQueueGiveFromISR+0x70>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cca6:	f001 fc03 	bl	800e4b0 <vPortValidateInterruptPriority>
	__asm volatile
 800ccaa:	f3ef 8611 	mrs	r6, BASEPRI
 800ccae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccb2:	f383 8811 	msr	BASEPRI, r3
 800ccb6:	f3bf 8f6f 	isb	sy
 800ccba:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ccbe:	6baa      	ldr	r2, [r5, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ccc0:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 800ccc2:	4293      	cmp	r3, r2
 800ccc4:	d926      	bls.n	800cd14 <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 800ccc6:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 800ccca:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cccc:	3201      	adds	r2, #1
 800ccce:	63aa      	str	r2, [r5, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 800ccd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccd4:	d011      	beq.n	800ccfa <xQueueGiveFromISR+0x88>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ccd6:	3301      	adds	r3, #1
 800ccd8:	b25b      	sxtb	r3, r3
 800ccda:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 800ccde:	2001      	movs	r0, #1
 800cce0:	e019      	b.n	800cd16 <xQueueGiveFromISR+0xa4>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800cce2:	6883      	ldr	r3, [r0, #8]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d0de      	beq.n	800cca6 <xQueueGiveFromISR+0x34>
	__asm volatile
 800cce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccec:	f383 8811 	msr	BASEPRI, r3
 800ccf0:	f3bf 8f6f 	isb	sy
 800ccf4:	f3bf 8f4f 	dsb	sy
 800ccf8:	e7fe      	b.n	800ccf8 <xQueueGiveFromISR+0x86>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ccfa:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800ccfc:	b90b      	cbnz	r3, 800cd02 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 800ccfe:	2001      	movs	r0, #1
 800cd00:	e009      	b.n	800cd16 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cd02:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 800cd06:	f000 fe75 	bl	800d9f4 <xTaskRemoveFromEventList>
 800cd0a:	b138      	cbz	r0, 800cd1c <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
 800cd0c:	b144      	cbz	r4, 800cd20 <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cd0e:	2001      	movs	r0, #1
 800cd10:	6020      	str	r0, [r4, #0]
 800cd12:	e000      	b.n	800cd16 <xQueueGiveFromISR+0xa4>
			xReturn = errQUEUE_FULL;
 800cd14:	2000      	movs	r0, #0
	__asm volatile
 800cd16:	f386 8811 	msr	BASEPRI, r6
}
 800cd1a:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
 800cd1c:	2001      	movs	r0, #1
 800cd1e:	e7fa      	b.n	800cd16 <xQueueGiveFromISR+0xa4>
 800cd20:	2001      	movs	r0, #1
 800cd22:	e7f8      	b.n	800cd16 <xQueueGiveFromISR+0xa4>

0800cd24 <xQueueReceive>:
{
 800cd24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd26:	b085      	sub	sp, #20
 800cd28:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800cd2a:	b190      	cbz	r0, 800cd52 <xQueueReceive+0x2e>
 800cd2c:	460f      	mov	r7, r1
 800cd2e:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd30:	b1c1      	cbz	r1, 800cd64 <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cd32:	f000 fef9 	bl	800db28 <xTaskGetSchedulerState>
 800cd36:	4606      	mov	r6, r0
 800cd38:	bb00      	cbnz	r0, 800cd7c <xQueueReceive+0x58>
 800cd3a:	9b01      	ldr	r3, [sp, #4]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d05e      	beq.n	800cdfe <xQueueReceive+0xda>
	__asm volatile
 800cd40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd44:	f383 8811 	msr	BASEPRI, r3
 800cd48:	f3bf 8f6f 	isb	sy
 800cd4c:	f3bf 8f4f 	dsb	sy
 800cd50:	e7fe      	b.n	800cd50 <xQueueReceive+0x2c>
 800cd52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd56:	f383 8811 	msr	BASEPRI, r3
 800cd5a:	f3bf 8f6f 	isb	sy
 800cd5e:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800cd62:	e7fe      	b.n	800cd62 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd64:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d0e3      	beq.n	800cd32 <xQueueReceive+0xe>
 800cd6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd6e:	f383 8811 	msr	BASEPRI, r3
 800cd72:	f3bf 8f6f 	isb	sy
 800cd76:	f3bf 8f4f 	dsb	sy
 800cd7a:	e7fe      	b.n	800cd7a <xQueueReceive+0x56>
 800cd7c:	2600      	movs	r6, #0
 800cd7e:	e03e      	b.n	800cdfe <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cd80:	4639      	mov	r1, r7
 800cd82:	4620      	mov	r0, r4
 800cd84:	f7ff fcf6 	bl	800c774 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cd88:	3d01      	subs	r5, #1
 800cd8a:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd8c:	6923      	ldr	r3, [r4, #16]
 800cd8e:	b923      	cbnz	r3, 800cd9a <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 800cd90:	f001 fa8a 	bl	800e2a8 <vPortExitCritical>
				return pdPASS;
 800cd94:	2001      	movs	r0, #1
}
 800cd96:	b005      	add	sp, #20
 800cd98:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd9a:	f104 0010 	add.w	r0, r4, #16
 800cd9e:	f000 fe29 	bl	800d9f4 <xTaskRemoveFromEventList>
 800cda2:	2800      	cmp	r0, #0
 800cda4:	d0f4      	beq.n	800cd90 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 800cda6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cdaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cdae:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800cdb2:	f3bf 8f4f 	dsb	sy
 800cdb6:	f3bf 8f6f 	isb	sy
 800cdba:	e7e9      	b.n	800cd90 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 800cdbc:	f001 fa74 	bl	800e2a8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800cdc0:	2000      	movs	r0, #0
 800cdc2:	e7e8      	b.n	800cd96 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cdc4:	a802      	add	r0, sp, #8
 800cdc6:	f000 fe5b 	bl	800da80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cdca:	2601      	movs	r6, #1
 800cdcc:	e021      	b.n	800ce12 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 800cdce:	2300      	movs	r3, #0
 800cdd0:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800cdd4:	e029      	b.n	800ce2a <xQueueReceive+0x106>
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800cddc:	e02b      	b.n	800ce36 <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 800cdde:	4620      	mov	r0, r4
 800cde0:	f7ff fcda 	bl	800c798 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cde4:	f000 fcde 	bl	800d7a4 <xTaskResumeAll>
 800cde8:	e009      	b.n	800cdfe <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 800cdea:	4620      	mov	r0, r4
 800cdec:	f7ff fcd4 	bl	800c798 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cdf0:	f000 fcd8 	bl	800d7a4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cdf4:	4620      	mov	r0, r4
 800cdf6:	f7ff fc75 	bl	800c6e4 <prvIsQueueEmpty>
 800cdfa:	2800      	cmp	r0, #0
 800cdfc:	d13f      	bne.n	800ce7e <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 800cdfe:	f001 fa31 	bl	800e264 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ce02:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ce04:	2d00      	cmp	r5, #0
 800ce06:	d1bb      	bne.n	800cd80 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800ce08:	9b01      	ldr	r3, [sp, #4]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d0d6      	beq.n	800cdbc <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 800ce0e:	2e00      	cmp	r6, #0
 800ce10:	d0d8      	beq.n	800cdc4 <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 800ce12:	f001 fa49 	bl	800e2a8 <vPortExitCritical>
		vTaskSuspendAll();
 800ce16:	f000 fc2b 	bl	800d670 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ce1a:	f001 fa23 	bl	800e264 <vPortEnterCritical>
 800ce1e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800ce22:	b25b      	sxtb	r3, r3
 800ce24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce28:	d0d1      	beq.n	800cdce <xQueueReceive+0xaa>
 800ce2a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800ce2e:	b25b      	sxtb	r3, r3
 800ce30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce34:	d0cf      	beq.n	800cdd6 <xQueueReceive+0xb2>
 800ce36:	f001 fa37 	bl	800e2a8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ce3a:	a901      	add	r1, sp, #4
 800ce3c:	a802      	add	r0, sp, #8
 800ce3e:	f000 fe2b 	bl	800da98 <xTaskCheckForTimeOut>
 800ce42:	2800      	cmp	r0, #0
 800ce44:	d1d1      	bne.n	800cdea <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ce46:	4620      	mov	r0, r4
 800ce48:	f7ff fc4c 	bl	800c6e4 <prvIsQueueEmpty>
 800ce4c:	2800      	cmp	r0, #0
 800ce4e:	d0c6      	beq.n	800cdde <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ce50:	9901      	ldr	r1, [sp, #4]
 800ce52:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800ce56:	f000 fd99 	bl	800d98c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ce5a:	4620      	mov	r0, r4
 800ce5c:	f7ff fc9c 	bl	800c798 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ce60:	f000 fca0 	bl	800d7a4 <xTaskResumeAll>
 800ce64:	2800      	cmp	r0, #0
 800ce66:	d1ca      	bne.n	800cdfe <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 800ce68:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ce6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce70:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800ce74:	f3bf 8f4f 	dsb	sy
 800ce78:	f3bf 8f6f 	isb	sy
 800ce7c:	e7bf      	b.n	800cdfe <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 800ce7e:	2000      	movs	r0, #0
 800ce80:	e789      	b.n	800cd96 <xQueueReceive+0x72>

0800ce82 <xQueueSemaphoreTake>:
{
 800ce82:	b570      	push	{r4, r5, r6, lr}
 800ce84:	b084      	sub	sp, #16
 800ce86:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800ce88:	b158      	cbz	r0, 800cea2 <xQueueSemaphoreTake+0x20>
 800ce8a:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800ce8c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800ce8e:	b18b      	cbz	r3, 800ceb4 <xQueueSemaphoreTake+0x32>
 800ce90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce94:	f383 8811 	msr	BASEPRI, r3
 800ce98:	f3bf 8f6f 	isb	sy
 800ce9c:	f3bf 8f4f 	dsb	sy
 800cea0:	e7fe      	b.n	800cea0 <xQueueSemaphoreTake+0x1e>
 800cea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cea6:	f383 8811 	msr	BASEPRI, r3
 800ceaa:	f3bf 8f6f 	isb	sy
 800ceae:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800ceb2:	e7fe      	b.n	800ceb2 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ceb4:	f000 fe38 	bl	800db28 <xTaskGetSchedulerState>
 800ceb8:	4605      	mov	r5, r0
 800ceba:	b950      	cbnz	r0, 800ced2 <xQueueSemaphoreTake+0x50>
 800cebc:	9b01      	ldr	r3, [sp, #4]
 800cebe:	b15b      	cbz	r3, 800ced8 <xQueueSemaphoreTake+0x56>
 800cec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cec4:	f383 8811 	msr	BASEPRI, r3
 800cec8:	f3bf 8f6f 	isb	sy
 800cecc:	f3bf 8f4f 	dsb	sy
 800ced0:	e7fe      	b.n	800ced0 <xQueueSemaphoreTake+0x4e>
 800ced2:	2600      	movs	r6, #0
 800ced4:	4635      	mov	r5, r6
 800ced6:	e055      	b.n	800cf84 <xQueueSemaphoreTake+0x102>
 800ced8:	4606      	mov	r6, r0
 800ceda:	e053      	b.n	800cf84 <xQueueSemaphoreTake+0x102>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cedc:	3b01      	subs	r3, #1
 800cede:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cee0:	6823      	ldr	r3, [r4, #0]
 800cee2:	b13b      	cbz	r3, 800cef4 <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cee4:	6923      	ldr	r3, [r4, #16]
 800cee6:	b94b      	cbnz	r3, 800cefc <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 800cee8:	f001 f9de 	bl	800e2a8 <vPortExitCritical>
				return pdPASS;
 800ceec:	2601      	movs	r6, #1
}
 800ceee:	4630      	mov	r0, r6
 800cef0:	b004      	add	sp, #16
 800cef2:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cef4:	f000 ff0c 	bl	800dd10 <pvTaskIncrementMutexHeldCount>
 800cef8:	60a0      	str	r0, [r4, #8]
 800cefa:	e7f3      	b.n	800cee4 <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cefc:	f104 0010 	add.w	r0, r4, #16
 800cf00:	f000 fd78 	bl	800d9f4 <xTaskRemoveFromEventList>
 800cf04:	2800      	cmp	r0, #0
 800cf06:	d0ef      	beq.n	800cee8 <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 800cf08:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cf0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf10:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800cf14:	f3bf 8f4f 	dsb	sy
 800cf18:	f3bf 8f6f 	isb	sy
 800cf1c:	e7e4      	b.n	800cee8 <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cf1e:	b146      	cbz	r6, 800cf32 <xQueueSemaphoreTake+0xb0>
 800cf20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf24:	f383 8811 	msr	BASEPRI, r3
 800cf28:	f3bf 8f6f 	isb	sy
 800cf2c:	f3bf 8f4f 	dsb	sy
 800cf30:	e7fe      	b.n	800cf30 <xQueueSemaphoreTake+0xae>
					taskEXIT_CRITICAL();
 800cf32:	f001 f9b9 	bl	800e2a8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800cf36:	e7da      	b.n	800ceee <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cf38:	a802      	add	r0, sp, #8
 800cf3a:	f000 fda1 	bl	800da80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cf3e:	2501      	movs	r5, #1
 800cf40:	e02a      	b.n	800cf98 <xQueueSemaphoreTake+0x116>
		prvLockQueue( pxQueue );
 800cf42:	2300      	movs	r3, #0
 800cf44:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800cf48:	e032      	b.n	800cfb0 <xQueueSemaphoreTake+0x12e>
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800cf50:	e034      	b.n	800cfbc <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 800cf52:	f001 f987 	bl	800e264 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cf56:	68a0      	ldr	r0, [r4, #8]
 800cf58:	f000 fdf6 	bl	800db48 <xTaskPriorityInherit>
 800cf5c:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 800cf5e:	f001 f9a3 	bl	800e2a8 <vPortExitCritical>
 800cf62:	e03b      	b.n	800cfdc <xQueueSemaphoreTake+0x15a>
				prvUnlockQueue( pxQueue );
 800cf64:	4620      	mov	r0, r4
 800cf66:	f7ff fc17 	bl	800c798 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cf6a:	f000 fc1b 	bl	800d7a4 <xTaskResumeAll>
 800cf6e:	e009      	b.n	800cf84 <xQueueSemaphoreTake+0x102>
			prvUnlockQueue( pxQueue );
 800cf70:	4620      	mov	r0, r4
 800cf72:	f7ff fc11 	bl	800c798 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cf76:	f000 fc15 	bl	800d7a4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cf7a:	4620      	mov	r0, r4
 800cf7c:	f7ff fbb2 	bl	800c6e4 <prvIsQueueEmpty>
 800cf80:	2800      	cmp	r0, #0
 800cf82:	d142      	bne.n	800d00a <xQueueSemaphoreTake+0x188>
		taskENTER_CRITICAL();
 800cf84:	f001 f96e 	bl	800e264 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cf88:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d1a6      	bne.n	800cedc <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800cf8e:	9b01      	ldr	r3, [sp, #4]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d0c4      	beq.n	800cf1e <xQueueSemaphoreTake+0x9c>
				else if( xEntryTimeSet == pdFALSE )
 800cf94:	2d00      	cmp	r5, #0
 800cf96:	d0cf      	beq.n	800cf38 <xQueueSemaphoreTake+0xb6>
		taskEXIT_CRITICAL();
 800cf98:	f001 f986 	bl	800e2a8 <vPortExitCritical>
		vTaskSuspendAll();
 800cf9c:	f000 fb68 	bl	800d670 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cfa0:	f001 f960 	bl	800e264 <vPortEnterCritical>
 800cfa4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800cfa8:	b25b      	sxtb	r3, r3
 800cfaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfae:	d0c8      	beq.n	800cf42 <xQueueSemaphoreTake+0xc0>
 800cfb0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800cfb4:	b25b      	sxtb	r3, r3
 800cfb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfba:	d0c6      	beq.n	800cf4a <xQueueSemaphoreTake+0xc8>
 800cfbc:	f001 f974 	bl	800e2a8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cfc0:	a901      	add	r1, sp, #4
 800cfc2:	a802      	add	r0, sp, #8
 800cfc4:	f000 fd68 	bl	800da98 <xTaskCheckForTimeOut>
 800cfc8:	2800      	cmp	r0, #0
 800cfca:	d1d1      	bne.n	800cf70 <xQueueSemaphoreTake+0xee>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cfcc:	4620      	mov	r0, r4
 800cfce:	f7ff fb89 	bl	800c6e4 <prvIsQueueEmpty>
 800cfd2:	2800      	cmp	r0, #0
 800cfd4:	d0c6      	beq.n	800cf64 <xQueueSemaphoreTake+0xe2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cfd6:	6823      	ldr	r3, [r4, #0]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d0ba      	beq.n	800cf52 <xQueueSemaphoreTake+0xd0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cfdc:	9901      	ldr	r1, [sp, #4]
 800cfde:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800cfe2:	f000 fcd3 	bl	800d98c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cfe6:	4620      	mov	r0, r4
 800cfe8:	f7ff fbd6 	bl	800c798 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cfec:	f000 fbda 	bl	800d7a4 <xTaskResumeAll>
 800cff0:	2800      	cmp	r0, #0
 800cff2:	d1c7      	bne.n	800cf84 <xQueueSemaphoreTake+0x102>
					portYIELD_WITHIN_API();
 800cff4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cff8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cffc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d000:	f3bf 8f4f 	dsb	sy
 800d004:	f3bf 8f6f 	isb	sy
 800d008:	e7bc      	b.n	800cf84 <xQueueSemaphoreTake+0x102>
					if( xInheritanceOccurred != pdFALSE )
 800d00a:	b90e      	cbnz	r6, 800d010 <xQueueSemaphoreTake+0x18e>
				return errQUEUE_EMPTY;
 800d00c:	2600      	movs	r6, #0
 800d00e:	e76e      	b.n	800ceee <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 800d010:	f001 f928 	bl	800e264 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d014:	4620      	mov	r0, r4
 800d016:	f7ff fb4e 	bl	800c6b6 <prvGetDisinheritPriorityAfterTimeout>
 800d01a:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d01c:	68a0      	ldr	r0, [r4, #8]
 800d01e:	f000 fe27 	bl	800dc70 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800d022:	f001 f941 	bl	800e2a8 <vPortExitCritical>
 800d026:	e7f1      	b.n	800d00c <xQueueSemaphoreTake+0x18a>

0800d028 <xQueueReceiveFromISR>:
{
 800d028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800d02c:	b1b0      	cbz	r0, 800d05c <xQueueReceiveFromISR+0x34>
 800d02e:	460d      	mov	r5, r1
 800d030:	4690      	mov	r8, r2
 800d032:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d034:	b1d9      	cbz	r1, 800d06e <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d036:	f001 fa3b 	bl	800e4b0 <vPortValidateInterruptPriority>
	__asm volatile
 800d03a:	f3ef 8711 	mrs	r7, BASEPRI
 800d03e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d042:	f383 8811 	msr	BASEPRI, r3
 800d046:	f3bf 8f6f 	isb	sy
 800d04a:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d04e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d050:	b9ce      	cbnz	r6, 800d086 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 800d052:	2000      	movs	r0, #0
	__asm volatile
 800d054:	f387 8811 	msr	BASEPRI, r7
}
 800d058:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 800d05c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d060:	f383 8811 	msr	BASEPRI, r3
 800d064:	f3bf 8f6f 	isb	sy
 800d068:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800d06c:	e7fe      	b.n	800d06c <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d06e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800d070:	2b00      	cmp	r3, #0
 800d072:	d0e0      	beq.n	800d036 <xQueueReceiveFromISR+0xe>
 800d074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d078:	f383 8811 	msr	BASEPRI, r3
 800d07c:	f3bf 8f6f 	isb	sy
 800d080:	f3bf 8f4f 	dsb	sy
 800d084:	e7fe      	b.n	800d084 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 800d086:	f894 9044 	ldrb.w	r9, [r4, #68]	@ 0x44
 800d08a:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d08e:	4629      	mov	r1, r5
 800d090:	4620      	mov	r0, r4
 800d092:	f7ff fb6f 	bl	800c774 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d096:	1e73      	subs	r3, r6, #1
 800d098:	63a3      	str	r3, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 800d09a:	f1b9 3fff 	cmp.w	r9, #4294967295
 800d09e:	d006      	beq.n	800d0ae <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d0a0:	f109 0301 	add.w	r3, r9, #1
 800d0a4:	b25b      	sxtb	r3, r3
 800d0a6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
			xReturn = pdPASS;
 800d0aa:	2001      	movs	r0, #1
 800d0ac:	e7d2      	b.n	800d054 <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d0ae:	6923      	ldr	r3, [r4, #16]
 800d0b0:	b90b      	cbnz	r3, 800d0b6 <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 800d0b2:	2001      	movs	r0, #1
 800d0b4:	e7ce      	b.n	800d054 <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d0b6:	f104 0010 	add.w	r0, r4, #16
 800d0ba:	f000 fc9b 	bl	800d9f4 <xTaskRemoveFromEventList>
 800d0be:	b130      	cbz	r0, 800d0ce <xQueueReceiveFromISR+0xa6>
						if( pxHigherPriorityTaskWoken != NULL )
 800d0c0:	f1b8 0f00 	cmp.w	r8, #0
 800d0c4:	d005      	beq.n	800d0d2 <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d0c6:	2001      	movs	r0, #1
 800d0c8:	f8c8 0000 	str.w	r0, [r8]
 800d0cc:	e7c2      	b.n	800d054 <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 800d0ce:	2001      	movs	r0, #1
 800d0d0:	e7c0      	b.n	800d054 <xQueueReceiveFromISR+0x2c>
 800d0d2:	2001      	movs	r0, #1
 800d0d4:	e7be      	b.n	800d054 <xQueueReceiveFromISR+0x2c>
	...

0800d0d8 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d0d8:	2300      	movs	r3, #0
 800d0da:	2b07      	cmp	r3, #7
 800d0dc:	d80c      	bhi.n	800d0f8 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d0de:	4a07      	ldr	r2, [pc, #28]	@ (800d0fc <vQueueAddToRegistry+0x24>)
 800d0e0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d0e4:	b10a      	cbz	r2, 800d0ea <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d0e6:	3301      	adds	r3, #1
 800d0e8:	e7f7      	b.n	800d0da <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d0ea:	4a04      	ldr	r2, [pc, #16]	@ (800d0fc <vQueueAddToRegistry+0x24>)
 800d0ec:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d0f0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800d0f4:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d0f6:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d0f8:	4770      	bx	lr
 800d0fa:	bf00      	nop
 800d0fc:	24002f10 	.word	0x24002f10

0800d100 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d100:	2300      	movs	r3, #0
 800d102:	2b07      	cmp	r3, #7
 800d104:	d80f      	bhi.n	800d126 <vQueueUnregisterQueue+0x26>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d106:	4a08      	ldr	r2, [pc, #32]	@ (800d128 <vQueueUnregisterQueue+0x28>)
 800d108:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800d10c:	6852      	ldr	r2, [r2, #4]
 800d10e:	4282      	cmp	r2, r0
 800d110:	d001      	beq.n	800d116 <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d112:	3301      	adds	r3, #1
 800d114:	e7f5      	b.n	800d102 <vQueueUnregisterQueue+0x2>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d116:	4a04      	ldr	r2, [pc, #16]	@ (800d128 <vQueueUnregisterQueue+0x28>)
 800d118:	2100      	movs	r1, #0
 800d11a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d11e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800d122:	6051      	str	r1, [r2, #4]
				break;
 800d124:	4770      	bx	lr
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d126:	4770      	bx	lr
 800d128:	24002f10 	.word	0x24002f10

0800d12c <vQueueDelete>:
	configASSERT( pxQueue );
 800d12c:	b138      	cbz	r0, 800d13e <vQueueDelete+0x12>
{
 800d12e:	b510      	push	{r4, lr}
 800d130:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 800d132:	f7ff ffe5 	bl	800d100 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d136:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800d13a:	b14b      	cbz	r3, 800d150 <vQueueDelete+0x24>
}
 800d13c:	bd10      	pop	{r4, pc}
 800d13e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d142:	f383 8811 	msr	BASEPRI, r3
 800d146:	f3bf 8f6f 	isb	sy
 800d14a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800d14e:	e7fe      	b.n	800d14e <vQueueDelete+0x22>
			vPortFree( pxQueue );
 800d150:	4620      	mov	r0, r4
 800d152:	f001 fac1 	bl	800e6d8 <vPortFree>
}
 800d156:	e7f1      	b.n	800d13c <vQueueDelete+0x10>

0800d158 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d158:	b570      	push	{r4, r5, r6, lr}
 800d15a:	4604      	mov	r4, r0
 800d15c:	460d      	mov	r5, r1
 800d15e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d160:	f001 f880 	bl	800e264 <vPortEnterCritical>
 800d164:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800d168:	b25b      	sxtb	r3, r3
 800d16a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d16e:	d00d      	beq.n	800d18c <vQueueWaitForMessageRestricted+0x34>
 800d170:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800d174:	b25b      	sxtb	r3, r3
 800d176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d17a:	d00b      	beq.n	800d194 <vQueueWaitForMessageRestricted+0x3c>
 800d17c:	f001 f894 	bl	800e2a8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d180:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800d182:	b15b      	cbz	r3, 800d19c <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d184:	4620      	mov	r0, r4
 800d186:	f7ff fb07 	bl	800c798 <prvUnlockQueue>
	}
 800d18a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800d18c:	2300      	movs	r3, #0
 800d18e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800d192:	e7ed      	b.n	800d170 <vQueueWaitForMessageRestricted+0x18>
 800d194:	2300      	movs	r3, #0
 800d196:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800d19a:	e7ef      	b.n	800d17c <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d19c:	4632      	mov	r2, r6
 800d19e:	4629      	mov	r1, r5
 800d1a0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800d1a4:	f000 fc0a 	bl	800d9bc <vTaskPlaceOnEventListRestricted>
 800d1a8:	e7ec      	b.n	800d184 <vQueueWaitForMessageRestricted+0x2c>
	...

0800d1ac <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d1ac:	4b08      	ldr	r3, [pc, #32]	@ (800d1d0 <prvResetNextTaskUnblockTime+0x24>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	b923      	cbnz	r3, 800d1be <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d1b4:	4b07      	ldr	r3, [pc, #28]	@ (800d1d4 <prvResetNextTaskUnblockTime+0x28>)
 800d1b6:	f04f 32ff 	mov.w	r2, #4294967295
 800d1ba:	601a      	str	r2, [r3, #0]
 800d1bc:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1be:	4b04      	ldr	r3, [pc, #16]	@ (800d1d0 <prvResetNextTaskUnblockTime+0x24>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	68db      	ldr	r3, [r3, #12]
 800d1c4:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d1c6:	685a      	ldr	r2, [r3, #4]
 800d1c8:	4b02      	ldr	r3, [pc, #8]	@ (800d1d4 <prvResetNextTaskUnblockTime+0x28>)
 800d1ca:	601a      	str	r2, [r3, #0]
	}
}
 800d1cc:	4770      	bx	lr
 800d1ce:	bf00      	nop
 800d1d0:	24002fc0 	.word	0x24002fc0
 800d1d4:	24002f58 	.word	0x24002f58

0800d1d8 <prvInitialiseNewTask>:
{
 800d1d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1dc:	4680      	mov	r8, r0
 800d1de:	460d      	mov	r5, r1
 800d1e0:	4617      	mov	r7, r2
 800d1e2:	4699      	mov	r9, r3
 800d1e4:	9e08      	ldr	r6, [sp, #32]
 800d1e6:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 800d1ea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d1ec:	0092      	lsls	r2, r2, #2
 800d1ee:	21a5      	movs	r1, #165	@ 0xa5
 800d1f0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800d1f2:	f00d fe55 	bl	801aea0 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d1f6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d1f8:	f06f 4240 	mvn.w	r2, #3221225472	@ 0xc0000000
 800d1fc:	443a      	add	r2, r7
 800d1fe:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d202:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 800d206:	2d00      	cmp	r5, #0
 800d208:	d042      	beq.n	800d290 <prvInitialiseNewTask+0xb8>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d20a:	f04f 0c00 	mov.w	ip, #0
 800d20e:	f1bc 0f0f 	cmp.w	ip, #15
 800d212:	d809      	bhi.n	800d228 <prvInitialiseNewTask+0x50>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d214:	f815 300c 	ldrb.w	r3, [r5, ip]
 800d218:	eb04 020c 	add.w	r2, r4, ip
 800d21c:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 800d220:	b113      	cbz	r3, 800d228 <prvInitialiseNewTask+0x50>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d222:	f10c 0c01 	add.w	ip, ip, #1
 800d226:	e7f2      	b.n	800d20e <prvInitialiseNewTask+0x36>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d228:	2300      	movs	r3, #0
 800d22a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d22e:	2e37      	cmp	r6, #55	@ 0x37
 800d230:	d900      	bls.n	800d234 <prvInitialiseNewTask+0x5c>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d232:	2637      	movs	r6, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 800d234:	62e6      	str	r6, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800d236:	64e6      	str	r6, [r4, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d238:	2500      	movs	r5, #0
 800d23a:	6525      	str	r5, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d23c:	1d20      	adds	r0, r4, #4
 800d23e:	f7ff fa00 	bl	800c642 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d242:	f104 0018 	add.w	r0, r4, #24
 800d246:	f7ff f9fc 	bl	800c642 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d24a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d24c:	f1c6 0638 	rsb	r6, r6, #56	@ 0x38
 800d250:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d252:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800d254:	f8c4 50a0 	str.w	r5, [r4, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d258:	f884 50a4 	strb.w	r5, [r4, #164]	@ 0xa4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d25c:	224c      	movs	r2, #76	@ 0x4c
 800d25e:	4629      	mov	r1, r5
 800d260:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 800d264:	f00d fe1c 	bl	801aea0 <memset>
 800d268:	4b0b      	ldr	r3, [pc, #44]	@ (800d298 <prvInitialiseNewTask+0xc0>)
 800d26a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800d26c:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d270:	65e2      	str	r2, [r4, #92]	@ 0x5c
 800d272:	33d0      	adds	r3, #208	@ 0xd0
 800d274:	6623      	str	r3, [r4, #96]	@ 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d276:	464a      	mov	r2, r9
 800d278:	4641      	mov	r1, r8
 800d27a:	4638      	mov	r0, r7
 800d27c:	f000 ffc4 	bl	800e208 <pxPortInitialiseStack>
 800d280:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800d282:	f1ba 0f00 	cmp.w	sl, #0
 800d286:	d001      	beq.n	800d28c <prvInitialiseNewTask+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d288:	f8ca 4000 	str.w	r4, [sl]
}
 800d28c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d290:	2300      	movs	r3, #0
 800d292:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 800d296:	e7ca      	b.n	800d22e <prvInitialiseNewTask+0x56>
 800d298:	24009460 	.word	0x24009460

0800d29c <prvInitialiseTaskLists>:
{
 800d29c:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d29e:	2400      	movs	r4, #0
 800d2a0:	e007      	b.n	800d2b2 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d2a2:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800d2a6:	0093      	lsls	r3, r2, #2
 800d2a8:	480e      	ldr	r0, [pc, #56]	@ (800d2e4 <prvInitialiseTaskLists+0x48>)
 800d2aa:	4418      	add	r0, r3
 800d2ac:	f7ff f9be 	bl	800c62c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d2b0:	3401      	adds	r4, #1
 800d2b2:	2c37      	cmp	r4, #55	@ 0x37
 800d2b4:	d9f5      	bls.n	800d2a2 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800d2b6:	4d0c      	ldr	r5, [pc, #48]	@ (800d2e8 <prvInitialiseTaskLists+0x4c>)
 800d2b8:	4628      	mov	r0, r5
 800d2ba:	f7ff f9b7 	bl	800c62c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d2be:	4c0b      	ldr	r4, [pc, #44]	@ (800d2ec <prvInitialiseTaskLists+0x50>)
 800d2c0:	4620      	mov	r0, r4
 800d2c2:	f7ff f9b3 	bl	800c62c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d2c6:	480a      	ldr	r0, [pc, #40]	@ (800d2f0 <prvInitialiseTaskLists+0x54>)
 800d2c8:	f7ff f9b0 	bl	800c62c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800d2cc:	4809      	ldr	r0, [pc, #36]	@ (800d2f4 <prvInitialiseTaskLists+0x58>)
 800d2ce:	f7ff f9ad 	bl	800c62c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800d2d2:	4809      	ldr	r0, [pc, #36]	@ (800d2f8 <prvInitialiseTaskLists+0x5c>)
 800d2d4:	f7ff f9aa 	bl	800c62c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800d2d8:	4b08      	ldr	r3, [pc, #32]	@ (800d2fc <prvInitialiseTaskLists+0x60>)
 800d2da:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d2dc:	4b08      	ldr	r3, [pc, #32]	@ (800d300 <prvInitialiseTaskLists+0x64>)
 800d2de:	601c      	str	r4, [r3, #0]
}
 800d2e0:	bd38      	pop	{r3, r4, r5, pc}
 800d2e2:	bf00      	nop
 800d2e4:	24002fec 	.word	0x24002fec
 800d2e8:	24002fd8 	.word	0x24002fd8
 800d2ec:	24002fc4 	.word	0x24002fc4
 800d2f0:	24002fa8 	.word	0x24002fa8
 800d2f4:	24002f94 	.word	0x24002f94
 800d2f8:	24002f7c 	.word	0x24002f7c
 800d2fc:	24002fc0 	.word	0x24002fc0
 800d300:	24002fbc 	.word	0x24002fbc

0800d304 <prvAddNewTaskToReadyList>:
{
 800d304:	b510      	push	{r4, lr}
 800d306:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800d308:	f000 ffac 	bl	800e264 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800d30c:	4a22      	ldr	r2, [pc, #136]	@ (800d398 <prvAddNewTaskToReadyList+0x94>)
 800d30e:	6813      	ldr	r3, [r2, #0]
 800d310:	3301      	adds	r3, #1
 800d312:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d314:	4b21      	ldr	r3, [pc, #132]	@ (800d39c <prvAddNewTaskToReadyList+0x98>)
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	b15b      	cbz	r3, 800d332 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 800d31a:	4b21      	ldr	r3, [pc, #132]	@ (800d3a0 <prvAddNewTaskToReadyList+0x9c>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	b96b      	cbnz	r3, 800d33c <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d320:	4b1e      	ldr	r3, [pc, #120]	@ (800d39c <prvAddNewTaskToReadyList+0x98>)
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d326:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800d328:	429a      	cmp	r2, r3
 800d32a:	d807      	bhi.n	800d33c <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 800d32c:	4b1b      	ldr	r3, [pc, #108]	@ (800d39c <prvAddNewTaskToReadyList+0x98>)
 800d32e:	601c      	str	r4, [r3, #0]
 800d330:	e004      	b.n	800d33c <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 800d332:	4b1a      	ldr	r3, [pc, #104]	@ (800d39c <prvAddNewTaskToReadyList+0x98>)
 800d334:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d336:	6813      	ldr	r3, [r2, #0]
 800d338:	2b01      	cmp	r3, #1
 800d33a:	d029      	beq.n	800d390 <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 800d33c:	4a19      	ldr	r2, [pc, #100]	@ (800d3a4 <prvAddNewTaskToReadyList+0xa0>)
 800d33e:	6813      	ldr	r3, [r2, #0]
 800d340:	3301      	adds	r3, #1
 800d342:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d344:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800d346:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800d348:	4b17      	ldr	r3, [pc, #92]	@ (800d3a8 <prvAddNewTaskToReadyList+0xa4>)
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	4298      	cmp	r0, r3
 800d34e:	d901      	bls.n	800d354 <prvAddNewTaskToReadyList+0x50>
 800d350:	4b15      	ldr	r3, [pc, #84]	@ (800d3a8 <prvAddNewTaskToReadyList+0xa4>)
 800d352:	6018      	str	r0, [r3, #0]
 800d354:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d358:	1d21      	adds	r1, r4, #4
 800d35a:	4b14      	ldr	r3, [pc, #80]	@ (800d3ac <prvAddNewTaskToReadyList+0xa8>)
 800d35c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d360:	f7ff f972 	bl	800c648 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800d364:	f000 ffa0 	bl	800e2a8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800d368:	4b0d      	ldr	r3, [pc, #52]	@ (800d3a0 <prvAddNewTaskToReadyList+0x9c>)
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	b17b      	cbz	r3, 800d38e <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d36e:	4b0b      	ldr	r3, [pc, #44]	@ (800d39c <prvAddNewTaskToReadyList+0x98>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d374:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800d376:	429a      	cmp	r2, r3
 800d378:	d209      	bcs.n	800d38e <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 800d37a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d37e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d382:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d386:	f3bf 8f4f 	dsb	sy
 800d38a:	f3bf 8f6f 	isb	sy
}
 800d38e:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 800d390:	f7ff ff84 	bl	800d29c <prvInitialiseTaskLists>
 800d394:	e7d2      	b.n	800d33c <prvAddNewTaskToReadyList+0x38>
 800d396:	bf00      	nop
 800d398:	24002f78 	.word	0x24002f78
 800d39c:	2400344c 	.word	0x2400344c
 800d3a0:	24002f6c 	.word	0x24002f6c
 800d3a4:	24002f5c 	.word	0x24002f5c
 800d3a8:	24002f70 	.word	0x24002f70
 800d3ac:	24002fec 	.word	0x24002fec

0800d3b0 <prvDeleteTCB>:
	{
 800d3b0:	b510      	push	{r4, lr}
 800d3b2:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d3b4:	3054      	adds	r0, #84	@ 0x54
 800d3b6:	f00d fdab 	bl	801af10 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d3ba:	f894 30a5 	ldrb.w	r3, [r4, #165]	@ 0xa5
 800d3be:	b163      	cbz	r3, 800d3da <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d3c0:	2b01      	cmp	r3, #1
 800d3c2:	d011      	beq.n	800d3e8 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d3c4:	2b02      	cmp	r3, #2
 800d3c6:	d00e      	beq.n	800d3e6 <prvDeleteTCB+0x36>
 800d3c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3cc:	f383 8811 	msr	BASEPRI, r3
 800d3d0:	f3bf 8f6f 	isb	sy
 800d3d4:	f3bf 8f4f 	dsb	sy
 800d3d8:	e7fe      	b.n	800d3d8 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 800d3da:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800d3dc:	f001 f97c 	bl	800e6d8 <vPortFree>
				vPortFree( pxTCB );
 800d3e0:	4620      	mov	r0, r4
 800d3e2:	f001 f979 	bl	800e6d8 <vPortFree>
	}
 800d3e6:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 800d3e8:	4620      	mov	r0, r4
 800d3ea:	f001 f975 	bl	800e6d8 <vPortFree>
 800d3ee:	e7fa      	b.n	800d3e6 <prvDeleteTCB+0x36>

0800d3f0 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d3f0:	4b0f      	ldr	r3, [pc, #60]	@ (800d430 <prvCheckTasksWaitingTermination+0x40>)
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	b1d3      	cbz	r3, 800d42c <prvCheckTasksWaitingTermination+0x3c>
{
 800d3f6:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 800d3f8:	f000 ff34 	bl	800e264 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3fc:	4b0d      	ldr	r3, [pc, #52]	@ (800d434 <prvCheckTasksWaitingTermination+0x44>)
 800d3fe:	68db      	ldr	r3, [r3, #12]
 800d400:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d402:	1d20      	adds	r0, r4, #4
 800d404:	f7ff f944 	bl	800c690 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d408:	4a0b      	ldr	r2, [pc, #44]	@ (800d438 <prvCheckTasksWaitingTermination+0x48>)
 800d40a:	6813      	ldr	r3, [r2, #0]
 800d40c:	3b01      	subs	r3, #1
 800d40e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d410:	4a07      	ldr	r2, [pc, #28]	@ (800d430 <prvCheckTasksWaitingTermination+0x40>)
 800d412:	6813      	ldr	r3, [r2, #0]
 800d414:	3b01      	subs	r3, #1
 800d416:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 800d418:	f000 ff46 	bl	800e2a8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800d41c:	4620      	mov	r0, r4
 800d41e:	f7ff ffc7 	bl	800d3b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d422:	4b03      	ldr	r3, [pc, #12]	@ (800d430 <prvCheckTasksWaitingTermination+0x40>)
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d1e6      	bne.n	800d3f8 <prvCheckTasksWaitingTermination+0x8>
}
 800d42a:	bd10      	pop	{r4, pc}
 800d42c:	4770      	bx	lr
 800d42e:	bf00      	nop
 800d430:	24002f90 	.word	0x24002f90
 800d434:	24002f94 	.word	0x24002f94
 800d438:	24002f78 	.word	0x24002f78

0800d43c <prvIdleTask>:
{
 800d43c:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 800d43e:	f7ff ffd7 	bl	800d3f0 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d442:	4b07      	ldr	r3, [pc, #28]	@ (800d460 <prvIdleTask+0x24>)
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	2b01      	cmp	r3, #1
 800d448:	d9f9      	bls.n	800d43e <prvIdleTask+0x2>
				taskYIELD();
 800d44a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d44e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d452:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d456:	f3bf 8f4f 	dsb	sy
 800d45a:	f3bf 8f6f 	isb	sy
 800d45e:	e7ee      	b.n	800d43e <prvIdleTask+0x2>
 800d460:	24002fec 	.word	0x24002fec

0800d464 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d464:	b570      	push	{r4, r5, r6, lr}
 800d466:	4604      	mov	r4, r0
 800d468:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d46a:	4b19      	ldr	r3, [pc, #100]	@ (800d4d0 <prvAddCurrentTaskToDelayedList+0x6c>)
 800d46c:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d46e:	4b19      	ldr	r3, [pc, #100]	@ (800d4d4 <prvAddCurrentTaskToDelayedList+0x70>)
 800d470:	6818      	ldr	r0, [r3, #0]
 800d472:	3004      	adds	r0, #4
 800d474:	f7ff f90c 	bl	800c690 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d478:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d47c:	bf14      	ite	ne
 800d47e:	2300      	movne	r3, #0
 800d480:	2301      	moveq	r3, #1
 800d482:	2d00      	cmp	r5, #0
 800d484:	bf08      	it	eq
 800d486:	2300      	moveq	r3, #0
 800d488:	b96b      	cbnz	r3, 800d4a6 <prvAddCurrentTaskToDelayedList+0x42>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d48a:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d48c:	4b11      	ldr	r3, [pc, #68]	@ (800d4d4 <prvAddCurrentTaskToDelayedList+0x70>)
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800d492:	42a6      	cmp	r6, r4
 800d494:	d90e      	bls.n	800d4b4 <prvAddCurrentTaskToDelayedList+0x50>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d496:	4b10      	ldr	r3, [pc, #64]	@ (800d4d8 <prvAddCurrentTaskToDelayedList+0x74>)
 800d498:	6818      	ldr	r0, [r3, #0]
 800d49a:	4b0e      	ldr	r3, [pc, #56]	@ (800d4d4 <prvAddCurrentTaskToDelayedList+0x70>)
 800d49c:	6819      	ldr	r1, [r3, #0]
 800d49e:	3104      	adds	r1, #4
 800d4a0:	f7ff f8dd 	bl	800c65e <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d4a4:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d4a6:	4b0b      	ldr	r3, [pc, #44]	@ (800d4d4 <prvAddCurrentTaskToDelayedList+0x70>)
 800d4a8:	6819      	ldr	r1, [r3, #0]
 800d4aa:	3104      	adds	r1, #4
 800d4ac:	480b      	ldr	r0, [pc, #44]	@ (800d4dc <prvAddCurrentTaskToDelayedList+0x78>)
 800d4ae:	f7ff f8cb 	bl	800c648 <vListInsertEnd>
 800d4b2:	e7f7      	b.n	800d4a4 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d4b4:	4b0a      	ldr	r3, [pc, #40]	@ (800d4e0 <prvAddCurrentTaskToDelayedList+0x7c>)
 800d4b6:	6818      	ldr	r0, [r3, #0]
 800d4b8:	4b06      	ldr	r3, [pc, #24]	@ (800d4d4 <prvAddCurrentTaskToDelayedList+0x70>)
 800d4ba:	6819      	ldr	r1, [r3, #0]
 800d4bc:	3104      	adds	r1, #4
 800d4be:	f7ff f8ce 	bl	800c65e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d4c2:	4b08      	ldr	r3, [pc, #32]	@ (800d4e4 <prvAddCurrentTaskToDelayedList+0x80>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	42a3      	cmp	r3, r4
 800d4c8:	d9ec      	bls.n	800d4a4 <prvAddCurrentTaskToDelayedList+0x40>
					xNextTaskUnblockTime = xTimeToWake;
 800d4ca:	4b06      	ldr	r3, [pc, #24]	@ (800d4e4 <prvAddCurrentTaskToDelayedList+0x80>)
 800d4cc:	601c      	str	r4, [r3, #0]
}
 800d4ce:	e7e9      	b.n	800d4a4 <prvAddCurrentTaskToDelayedList+0x40>
 800d4d0:	24002f74 	.word	0x24002f74
 800d4d4:	2400344c 	.word	0x2400344c
 800d4d8:	24002fbc 	.word	0x24002fbc
 800d4dc:	24002f7c 	.word	0x24002f7c
 800d4e0:	24002fc0 	.word	0x24002fc0
 800d4e4:	24002f58 	.word	0x24002f58

0800d4e8 <xTaskCreateStatic>:
	{
 800d4e8:	b530      	push	{r4, r5, lr}
 800d4ea:	b087      	sub	sp, #28
 800d4ec:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 800d4ee:	b17c      	cbz	r4, 800d510 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d4f0:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800d4f2:	b1b5      	cbz	r5, 800d522 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 800d4f4:	25a8      	movs	r5, #168	@ 0xa8
 800d4f6:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d4f8:	9d04      	ldr	r5, [sp, #16]
 800d4fa:	2da8      	cmp	r5, #168	@ 0xa8
 800d4fc:	d01a      	beq.n	800d534 <xTaskCreateStatic+0x4c>
 800d4fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d502:	f383 8811 	msr	BASEPRI, r3
 800d506:	f3bf 8f6f 	isb	sy
 800d50a:	f3bf 8f4f 	dsb	sy
 800d50e:	e7fe      	b.n	800d50e <xTaskCreateStatic+0x26>
 800d510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d514:	f383 8811 	msr	BASEPRI, r3
 800d518:	f3bf 8f6f 	isb	sy
 800d51c:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 800d520:	e7fe      	b.n	800d520 <xTaskCreateStatic+0x38>
 800d522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d526:	f383 8811 	msr	BASEPRI, r3
 800d52a:	f3bf 8f6f 	isb	sy
 800d52e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800d532:	e7fe      	b.n	800d532 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d534:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d536:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800d538:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d53a:	2402      	movs	r4, #2
 800d53c:	f885 40a5 	strb.w	r4, [r5, #165]	@ 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d540:	2400      	movs	r4, #0
 800d542:	9403      	str	r4, [sp, #12]
 800d544:	9502      	str	r5, [sp, #8]
 800d546:	ac05      	add	r4, sp, #20
 800d548:	9401      	str	r4, [sp, #4]
 800d54a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d54c:	9400      	str	r4, [sp, #0]
 800d54e:	f7ff fe43 	bl	800d1d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d552:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800d554:	f7ff fed6 	bl	800d304 <prvAddNewTaskToReadyList>
	}
 800d558:	9805      	ldr	r0, [sp, #20]
 800d55a:	b007      	add	sp, #28
 800d55c:	bd30      	pop	{r4, r5, pc}

0800d55e <xTaskCreate>:
	{
 800d55e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d562:	b085      	sub	sp, #20
 800d564:	4607      	mov	r7, r0
 800d566:	4688      	mov	r8, r1
 800d568:	4614      	mov	r4, r2
 800d56a:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d56c:	0090      	lsls	r0, r2, #2
 800d56e:	f001 f831 	bl	800e5d4 <pvPortMalloc>
			if( pxStack != NULL )
 800d572:	b308      	cbz	r0, 800d5b8 <xTaskCreate+0x5a>
 800d574:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d576:	20a8      	movs	r0, #168	@ 0xa8
 800d578:	f001 f82c 	bl	800e5d4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800d57c:	4605      	mov	r5, r0
 800d57e:	b1a8      	cbz	r0, 800d5ac <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 800d580:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d584:	2300      	movs	r3, #0
 800d586:	f880 30a5 	strb.w	r3, [r0, #165]	@ 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d58a:	9303      	str	r3, [sp, #12]
 800d58c:	9002      	str	r0, [sp, #8]
 800d58e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d590:	9301      	str	r3, [sp, #4]
 800d592:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d594:	9300      	str	r3, [sp, #0]
 800d596:	4633      	mov	r3, r6
 800d598:	4622      	mov	r2, r4
 800d59a:	4641      	mov	r1, r8
 800d59c:	4638      	mov	r0, r7
 800d59e:	f7ff fe1b 	bl	800d1d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d5a2:	4628      	mov	r0, r5
 800d5a4:	f7ff feae 	bl	800d304 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d5a8:	2001      	movs	r0, #1
 800d5aa:	e007      	b.n	800d5bc <xTaskCreate+0x5e>
					vPortFree( pxStack );
 800d5ac:	4648      	mov	r0, r9
 800d5ae:	f001 f893 	bl	800e6d8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d5b2:	f04f 30ff 	mov.w	r0, #4294967295
 800d5b6:	e001      	b.n	800d5bc <xTaskCreate+0x5e>
 800d5b8:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800d5bc:	b005      	add	sp, #20
 800d5be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800d5c4 <vTaskStartScheduler>:
{
 800d5c4:	b510      	push	{r4, lr}
 800d5c6:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d5c8:	2400      	movs	r4, #0
 800d5ca:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d5cc:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d5ce:	aa07      	add	r2, sp, #28
 800d5d0:	a906      	add	r1, sp, #24
 800d5d2:	a805      	add	r0, sp, #20
 800d5d4:	f7ff f812 	bl	800c5fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d5d8:	9b05      	ldr	r3, [sp, #20]
 800d5da:	9302      	str	r3, [sp, #8]
 800d5dc:	9b06      	ldr	r3, [sp, #24]
 800d5de:	9301      	str	r3, [sp, #4]
 800d5e0:	9400      	str	r4, [sp, #0]
 800d5e2:	4623      	mov	r3, r4
 800d5e4:	9a07      	ldr	r2, [sp, #28]
 800d5e6:	491a      	ldr	r1, [pc, #104]	@ (800d650 <vTaskStartScheduler+0x8c>)
 800d5e8:	481a      	ldr	r0, [pc, #104]	@ (800d654 <vTaskStartScheduler+0x90>)
 800d5ea:	f7ff ff7d 	bl	800d4e8 <xTaskCreateStatic>
 800d5ee:	4b1a      	ldr	r3, [pc, #104]	@ (800d658 <vTaskStartScheduler+0x94>)
 800d5f0:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 800d5f2:	b1e8      	cbz	r0, 800d630 <vTaskStartScheduler+0x6c>
			xReturn = xTimerCreateTimerTask();
 800d5f4:	f000 fc0a 	bl	800de0c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800d5f8:	2801      	cmp	r0, #1
 800d5fa:	d11a      	bne.n	800d632 <vTaskStartScheduler+0x6e>
 800d5fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d600:	f383 8811 	msr	BASEPRI, r3
 800d604:	f3bf 8f6f 	isb	sy
 800d608:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d60c:	4b13      	ldr	r3, [pc, #76]	@ (800d65c <vTaskStartScheduler+0x98>)
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	3354      	adds	r3, #84	@ 0x54
 800d612:	4a13      	ldr	r2, [pc, #76]	@ (800d660 <vTaskStartScheduler+0x9c>)
 800d614:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800d616:	4b13      	ldr	r3, [pc, #76]	@ (800d664 <vTaskStartScheduler+0xa0>)
 800d618:	f04f 32ff 	mov.w	r2, #4294967295
 800d61c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d61e:	4b12      	ldr	r3, [pc, #72]	@ (800d668 <vTaskStartScheduler+0xa4>)
 800d620:	2201      	movs	r2, #1
 800d622:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d624:	4b11      	ldr	r3, [pc, #68]	@ (800d66c <vTaskStartScheduler+0xa8>)
 800d626:	2200      	movs	r2, #0
 800d628:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800d62a:	f000 feb5 	bl	800e398 <xPortStartScheduler>
 800d62e:	e003      	b.n	800d638 <vTaskStartScheduler+0x74>
			xReturn = pdFAIL;
 800d630:	2000      	movs	r0, #0
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d632:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d636:	d001      	beq.n	800d63c <vTaskStartScheduler+0x78>
}
 800d638:	b008      	add	sp, #32
 800d63a:	bd10      	pop	{r4, pc}
 800d63c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d640:	f383 8811 	msr	BASEPRI, r3
 800d644:	f3bf 8f6f 	isb	sy
 800d648:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d64c:	e7fe      	b.n	800d64c <vTaskStartScheduler+0x88>
 800d64e:	bf00      	nop
 800d650:	0801b3a4 	.word	0x0801b3a4
 800d654:	0800d43d 	.word	0x0800d43d
 800d658:	24002f54 	.word	0x24002f54
 800d65c:	2400344c 	.word	0x2400344c
 800d660:	2400002c 	.word	0x2400002c
 800d664:	24002f58 	.word	0x24002f58
 800d668:	24002f6c 	.word	0x24002f6c
 800d66c:	24002f74 	.word	0x24002f74

0800d670 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800d670:	4a02      	ldr	r2, [pc, #8]	@ (800d67c <vTaskSuspendAll+0xc>)
 800d672:	6813      	ldr	r3, [r2, #0]
 800d674:	3301      	adds	r3, #1
 800d676:	6013      	str	r3, [r2, #0]
}
 800d678:	4770      	bx	lr
 800d67a:	bf00      	nop
 800d67c:	24002f50 	.word	0x24002f50

0800d680 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800d680:	4b01      	ldr	r3, [pc, #4]	@ (800d688 <xTaskGetTickCount+0x8>)
 800d682:	6818      	ldr	r0, [r3, #0]
}
 800d684:	4770      	bx	lr
 800d686:	bf00      	nop
 800d688:	24002f74 	.word	0x24002f74

0800d68c <xTaskIncrementTick>:
{
 800d68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d68e:	4b3a      	ldr	r3, [pc, #232]	@ (800d778 <xTaskIncrementTick+0xec>)
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d169      	bne.n	800d76a <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d696:	4b39      	ldr	r3, [pc, #228]	@ (800d77c <xTaskIncrementTick+0xf0>)
 800d698:	681d      	ldr	r5, [r3, #0]
 800d69a:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800d69c:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d69e:	b9c5      	cbnz	r5, 800d6d2 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800d6a0:	4b37      	ldr	r3, [pc, #220]	@ (800d780 <xTaskIncrementTick+0xf4>)
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	b143      	cbz	r3, 800d6ba <xTaskIncrementTick+0x2e>
 800d6a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6ac:	f383 8811 	msr	BASEPRI, r3
 800d6b0:	f3bf 8f6f 	isb	sy
 800d6b4:	f3bf 8f4f 	dsb	sy
 800d6b8:	e7fe      	b.n	800d6b8 <xTaskIncrementTick+0x2c>
 800d6ba:	4a31      	ldr	r2, [pc, #196]	@ (800d780 <xTaskIncrementTick+0xf4>)
 800d6bc:	6811      	ldr	r1, [r2, #0]
 800d6be:	4b31      	ldr	r3, [pc, #196]	@ (800d784 <xTaskIncrementTick+0xf8>)
 800d6c0:	6818      	ldr	r0, [r3, #0]
 800d6c2:	6010      	str	r0, [r2, #0]
 800d6c4:	6019      	str	r1, [r3, #0]
 800d6c6:	4a30      	ldr	r2, [pc, #192]	@ (800d788 <xTaskIncrementTick+0xfc>)
 800d6c8:	6813      	ldr	r3, [r2, #0]
 800d6ca:	3301      	adds	r3, #1
 800d6cc:	6013      	str	r3, [r2, #0]
 800d6ce:	f7ff fd6d 	bl	800d1ac <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d6d2:	4b2e      	ldr	r3, [pc, #184]	@ (800d78c <xTaskIncrementTick+0x100>)
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	42ab      	cmp	r3, r5
 800d6d8:	d93d      	bls.n	800d756 <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 800d6da:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d6dc:	4b2c      	ldr	r3, [pc, #176]	@ (800d790 <xTaskIncrementTick+0x104>)
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d6e6:	009a      	lsls	r2, r3, #2
 800d6e8:	4b2a      	ldr	r3, [pc, #168]	@ (800d794 <xTaskIncrementTick+0x108>)
 800d6ea:	589b      	ldr	r3, [r3, r2]
 800d6ec:	2b01      	cmp	r3, #1
 800d6ee:	d900      	bls.n	800d6f2 <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 800d6f0:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 800d6f2:	4b29      	ldr	r3, [pc, #164]	@ (800d798 <xTaskIncrementTick+0x10c>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d03c      	beq.n	800d774 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 800d6fa:	2701      	movs	r7, #1
	return xSwitchRequired;
 800d6fc:	e03a      	b.n	800d774 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 800d6fe:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d700:	4b1f      	ldr	r3, [pc, #124]	@ (800d780 <xTaskIncrementTick+0xf4>)
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	b343      	cbz	r3, 800d75a <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d708:	4b1d      	ldr	r3, [pc, #116]	@ (800d780 <xTaskIncrementTick+0xf4>)
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	68db      	ldr	r3, [r3, #12]
 800d70e:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d710:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 800d712:	429d      	cmp	r5, r3
 800d714:	d326      	bcc.n	800d764 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d716:	1d26      	adds	r6, r4, #4
 800d718:	4630      	mov	r0, r6
 800d71a:	f7fe ffb9 	bl	800c690 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d71e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800d720:	b11b      	cbz	r3, 800d72a <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d722:	f104 0018 	add.w	r0, r4, #24
 800d726:	f7fe ffb3 	bl	800c690 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d72a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800d72c:	4a1b      	ldr	r2, [pc, #108]	@ (800d79c <xTaskIncrementTick+0x110>)
 800d72e:	6812      	ldr	r2, [r2, #0]
 800d730:	4293      	cmp	r3, r2
 800d732:	d901      	bls.n	800d738 <xTaskIncrementTick+0xac>
 800d734:	4a19      	ldr	r2, [pc, #100]	@ (800d79c <xTaskIncrementTick+0x110>)
 800d736:	6013      	str	r3, [r2, #0]
 800d738:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d73c:	009a      	lsls	r2, r3, #2
 800d73e:	4631      	mov	r1, r6
 800d740:	4814      	ldr	r0, [pc, #80]	@ (800d794 <xTaskIncrementTick+0x108>)
 800d742:	4410      	add	r0, r2
 800d744:	f7fe ff80 	bl	800c648 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d748:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d74a:	4b11      	ldr	r3, [pc, #68]	@ (800d790 <xTaskIncrementTick+0x104>)
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d750:	429a      	cmp	r2, r3
 800d752:	d2d4      	bcs.n	800d6fe <xTaskIncrementTick+0x72>
 800d754:	e7d4      	b.n	800d700 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 800d756:	2700      	movs	r7, #0
 800d758:	e7d2      	b.n	800d700 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d75a:	4b0c      	ldr	r3, [pc, #48]	@ (800d78c <xTaskIncrementTick+0x100>)
 800d75c:	f04f 32ff 	mov.w	r2, #4294967295
 800d760:	601a      	str	r2, [r3, #0]
					break;
 800d762:	e7bb      	b.n	800d6dc <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 800d764:	4a09      	ldr	r2, [pc, #36]	@ (800d78c <xTaskIncrementTick+0x100>)
 800d766:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d768:	e7b8      	b.n	800d6dc <xTaskIncrementTick+0x50>
		++xPendedTicks;
 800d76a:	4a0d      	ldr	r2, [pc, #52]	@ (800d7a0 <xTaskIncrementTick+0x114>)
 800d76c:	6813      	ldr	r3, [r2, #0]
 800d76e:	3301      	adds	r3, #1
 800d770:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800d772:	2700      	movs	r7, #0
}
 800d774:	4638      	mov	r0, r7
 800d776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d778:	24002f50 	.word	0x24002f50
 800d77c:	24002f74 	.word	0x24002f74
 800d780:	24002fc0 	.word	0x24002fc0
 800d784:	24002fbc 	.word	0x24002fbc
 800d788:	24002f60 	.word	0x24002f60
 800d78c:	24002f58 	.word	0x24002f58
 800d790:	2400344c 	.word	0x2400344c
 800d794:	24002fec 	.word	0x24002fec
 800d798:	24002f64 	.word	0x24002f64
 800d79c:	24002f70 	.word	0x24002f70
 800d7a0:	24002f68 	.word	0x24002f68

0800d7a4 <xTaskResumeAll>:
{
 800d7a4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 800d7a6:	4b35      	ldr	r3, [pc, #212]	@ (800d87c <xTaskResumeAll+0xd8>)
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	b943      	cbnz	r3, 800d7be <xTaskResumeAll+0x1a>
 800d7ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7b0:	f383 8811 	msr	BASEPRI, r3
 800d7b4:	f3bf 8f6f 	isb	sy
 800d7b8:	f3bf 8f4f 	dsb	sy
 800d7bc:	e7fe      	b.n	800d7bc <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800d7be:	f000 fd51 	bl	800e264 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800d7c2:	4b2e      	ldr	r3, [pc, #184]	@ (800d87c <xTaskResumeAll+0xd8>)
 800d7c4:	681a      	ldr	r2, [r3, #0]
 800d7c6:	3a01      	subs	r2, #1
 800d7c8:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d14f      	bne.n	800d870 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d7d0:	4b2b      	ldr	r3, [pc, #172]	@ (800d880 <xTaskResumeAll+0xdc>)
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	b90b      	cbnz	r3, 800d7da <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800d7d6:	2400      	movs	r4, #0
 800d7d8:	e04b      	b.n	800d872 <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 800d7da:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d7dc:	4b29      	ldr	r3, [pc, #164]	@ (800d884 <xTaskResumeAll+0xe0>)
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	b31b      	cbz	r3, 800d82a <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7e2:	4b28      	ldr	r3, [pc, #160]	@ (800d884 <xTaskResumeAll+0xe0>)
 800d7e4:	68db      	ldr	r3, [r3, #12]
 800d7e6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d7e8:	f104 0018 	add.w	r0, r4, #24
 800d7ec:	f7fe ff50 	bl	800c690 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d7f0:	1d25      	adds	r5, r4, #4
 800d7f2:	4628      	mov	r0, r5
 800d7f4:	f7fe ff4c 	bl	800c690 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d7f8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800d7fa:	4b23      	ldr	r3, [pc, #140]	@ (800d888 <xTaskResumeAll+0xe4>)
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	4298      	cmp	r0, r3
 800d800:	d901      	bls.n	800d806 <xTaskResumeAll+0x62>
 800d802:	4b21      	ldr	r3, [pc, #132]	@ (800d888 <xTaskResumeAll+0xe4>)
 800d804:	6018      	str	r0, [r3, #0]
 800d806:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d80a:	4629      	mov	r1, r5
 800d80c:	4b1f      	ldr	r3, [pc, #124]	@ (800d88c <xTaskResumeAll+0xe8>)
 800d80e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d812:	f7fe ff19 	bl	800c648 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d816:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d818:	4b1d      	ldr	r3, [pc, #116]	@ (800d890 <xTaskResumeAll+0xec>)
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d81e:	429a      	cmp	r2, r3
 800d820:	d3dc      	bcc.n	800d7dc <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 800d822:	4b1c      	ldr	r3, [pc, #112]	@ (800d894 <xTaskResumeAll+0xf0>)
 800d824:	2201      	movs	r2, #1
 800d826:	601a      	str	r2, [r3, #0]
 800d828:	e7d8      	b.n	800d7dc <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 800d82a:	b10c      	cbz	r4, 800d830 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 800d82c:	f7ff fcbe 	bl	800d1ac <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d830:	4b19      	ldr	r3, [pc, #100]	@ (800d898 <xTaskResumeAll+0xf4>)
 800d832:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800d834:	b984      	cbnz	r4, 800d858 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 800d836:	4b17      	ldr	r3, [pc, #92]	@ (800d894 <xTaskResumeAll+0xf0>)
 800d838:	681c      	ldr	r4, [r3, #0]
 800d83a:	b1d4      	cbz	r4, 800d872 <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 800d83c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d840:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d844:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d848:	f3bf 8f4f 	dsb	sy
 800d84c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800d850:	2401      	movs	r4, #1
 800d852:	e00e      	b.n	800d872 <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d854:	3c01      	subs	r4, #1
 800d856:	d007      	beq.n	800d868 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 800d858:	f7ff ff18 	bl	800d68c <xTaskIncrementTick>
 800d85c:	2800      	cmp	r0, #0
 800d85e:	d0f9      	beq.n	800d854 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 800d860:	4b0c      	ldr	r3, [pc, #48]	@ (800d894 <xTaskResumeAll+0xf0>)
 800d862:	2201      	movs	r2, #1
 800d864:	601a      	str	r2, [r3, #0]
 800d866:	e7f5      	b.n	800d854 <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 800d868:	4b0b      	ldr	r3, [pc, #44]	@ (800d898 <xTaskResumeAll+0xf4>)
 800d86a:	2200      	movs	r2, #0
 800d86c:	601a      	str	r2, [r3, #0]
 800d86e:	e7e2      	b.n	800d836 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 800d870:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800d872:	f000 fd19 	bl	800e2a8 <vPortExitCritical>
}
 800d876:	4620      	mov	r0, r4
 800d878:	bd38      	pop	{r3, r4, r5, pc}
 800d87a:	bf00      	nop
 800d87c:	24002f50 	.word	0x24002f50
 800d880:	24002f78 	.word	0x24002f78
 800d884:	24002fa8 	.word	0x24002fa8
 800d888:	24002f70 	.word	0x24002f70
 800d88c:	24002fec 	.word	0x24002fec
 800d890:	2400344c 	.word	0x2400344c
 800d894:	24002f64 	.word	0x24002f64
 800d898:	24002f68 	.word	0x24002f68

0800d89c <vTaskDelay>:
	{
 800d89c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d89e:	b1a8      	cbz	r0, 800d8cc <vTaskDelay+0x30>
 800d8a0:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 800d8a2:	4b10      	ldr	r3, [pc, #64]	@ (800d8e4 <vTaskDelay+0x48>)
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	b143      	cbz	r3, 800d8ba <vTaskDelay+0x1e>
 800d8a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8ac:	f383 8811 	msr	BASEPRI, r3
 800d8b0:	f3bf 8f6f 	isb	sy
 800d8b4:	f3bf 8f4f 	dsb	sy
 800d8b8:	e7fe      	b.n	800d8b8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800d8ba:	f7ff fed9 	bl	800d670 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d8be:	2100      	movs	r1, #0
 800d8c0:	4620      	mov	r0, r4
 800d8c2:	f7ff fdcf 	bl	800d464 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800d8c6:	f7ff ff6d 	bl	800d7a4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800d8ca:	b948      	cbnz	r0, 800d8e0 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 800d8cc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d8d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d8d4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d8d8:	f3bf 8f4f 	dsb	sy
 800d8dc:	f3bf 8f6f 	isb	sy
	}
 800d8e0:	bd10      	pop	{r4, pc}
 800d8e2:	bf00      	nop
 800d8e4:	24002f50 	.word	0x24002f50

0800d8e8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d8e8:	4b22      	ldr	r3, [pc, #136]	@ (800d974 <vTaskSwitchContext+0x8c>)
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	b11b      	cbz	r3, 800d8f6 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800d8ee:	4b22      	ldr	r3, [pc, #136]	@ (800d978 <vTaskSwitchContext+0x90>)
 800d8f0:	2201      	movs	r2, #1
 800d8f2:	601a      	str	r2, [r3, #0]
 800d8f4:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800d8f6:	4b20      	ldr	r3, [pc, #128]	@ (800d978 <vTaskSwitchContext+0x90>)
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8fc:	4b1f      	ldr	r3, [pc, #124]	@ (800d97c <vTaskSwitchContext+0x94>)
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800d904:	008a      	lsls	r2, r1, #2
 800d906:	491e      	ldr	r1, [pc, #120]	@ (800d980 <vTaskSwitchContext+0x98>)
 800d908:	588a      	ldr	r2, [r1, r2]
 800d90a:	b95a      	cbnz	r2, 800d924 <vTaskSwitchContext+0x3c>
 800d90c:	b10b      	cbz	r3, 800d912 <vTaskSwitchContext+0x2a>
 800d90e:	3b01      	subs	r3, #1
 800d910:	e7f6      	b.n	800d900 <vTaskSwitchContext+0x18>
 800d912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d916:	f383 8811 	msr	BASEPRI, r3
 800d91a:	f3bf 8f6f 	isb	sy
 800d91e:	f3bf 8f4f 	dsb	sy
 800d922:	e7fe      	b.n	800d922 <vTaskSwitchContext+0x3a>
 800d924:	4608      	mov	r0, r1
 800d926:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800d92a:	008a      	lsls	r2, r1, #2
 800d92c:	4402      	add	r2, r0
 800d92e:	6851      	ldr	r1, [r2, #4]
 800d930:	6849      	ldr	r1, [r1, #4]
 800d932:	6051      	str	r1, [r2, #4]
 800d934:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 800d938:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800d93c:	3208      	adds	r2, #8
 800d93e:	4402      	add	r2, r0
 800d940:	4291      	cmp	r1, r2
 800d942:	d00f      	beq.n	800d964 <vTaskSwitchContext+0x7c>
 800d944:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800d948:	0091      	lsls	r1, r2, #2
 800d94a:	4a0d      	ldr	r2, [pc, #52]	@ (800d980 <vTaskSwitchContext+0x98>)
 800d94c:	440a      	add	r2, r1
 800d94e:	6852      	ldr	r2, [r2, #4]
 800d950:	68d1      	ldr	r1, [r2, #12]
 800d952:	4a0c      	ldr	r2, [pc, #48]	@ (800d984 <vTaskSwitchContext+0x9c>)
 800d954:	6011      	str	r1, [r2, #0]
 800d956:	4909      	ldr	r1, [pc, #36]	@ (800d97c <vTaskSwitchContext+0x94>)
 800d958:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d95a:	6813      	ldr	r3, [r2, #0]
 800d95c:	3354      	adds	r3, #84	@ 0x54
 800d95e:	4a0a      	ldr	r2, [pc, #40]	@ (800d988 <vTaskSwitchContext+0xa0>)
 800d960:	6013      	str	r3, [r2, #0]
}
 800d962:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d964:	6848      	ldr	r0, [r1, #4]
 800d966:	4662      	mov	r2, ip
 800d968:	0091      	lsls	r1, r2, #2
 800d96a:	4a05      	ldr	r2, [pc, #20]	@ (800d980 <vTaskSwitchContext+0x98>)
 800d96c:	440a      	add	r2, r1
 800d96e:	6050      	str	r0, [r2, #4]
 800d970:	e7e8      	b.n	800d944 <vTaskSwitchContext+0x5c>
 800d972:	bf00      	nop
 800d974:	24002f50 	.word	0x24002f50
 800d978:	24002f64 	.word	0x24002f64
 800d97c:	24002f70 	.word	0x24002f70
 800d980:	24002fec 	.word	0x24002fec
 800d984:	2400344c 	.word	0x2400344c
 800d988:	2400002c 	.word	0x2400002c

0800d98c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800d98c:	b158      	cbz	r0, 800d9a6 <vTaskPlaceOnEventList+0x1a>
{
 800d98e:	b510      	push	{r4, lr}
 800d990:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d992:	4a09      	ldr	r2, [pc, #36]	@ (800d9b8 <vTaskPlaceOnEventList+0x2c>)
 800d994:	6811      	ldr	r1, [r2, #0]
 800d996:	3118      	adds	r1, #24
 800d998:	f7fe fe61 	bl	800c65e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d99c:	2101      	movs	r1, #1
 800d99e:	4620      	mov	r0, r4
 800d9a0:	f7ff fd60 	bl	800d464 <prvAddCurrentTaskToDelayedList>
}
 800d9a4:	bd10      	pop	{r4, pc}
 800d9a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9aa:	f383 8811 	msr	BASEPRI, r3
 800d9ae:	f3bf 8f6f 	isb	sy
 800d9b2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 800d9b6:	e7fe      	b.n	800d9b6 <vTaskPlaceOnEventList+0x2a>
 800d9b8:	2400344c 	.word	0x2400344c

0800d9bc <vTaskPlaceOnEventListRestricted>:
	{
 800d9bc:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800d9be:	b170      	cbz	r0, 800d9de <vTaskPlaceOnEventListRestricted+0x22>
 800d9c0:	460d      	mov	r5, r1
 800d9c2:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d9c4:	4a0a      	ldr	r2, [pc, #40]	@ (800d9f0 <vTaskPlaceOnEventListRestricted+0x34>)
 800d9c6:	6811      	ldr	r1, [r2, #0]
 800d9c8:	3118      	adds	r1, #24
 800d9ca:	f7fe fe3d 	bl	800c648 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 800d9ce:	b10c      	cbz	r4, 800d9d4 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 800d9d0:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d9d4:	4621      	mov	r1, r4
 800d9d6:	4628      	mov	r0, r5
 800d9d8:	f7ff fd44 	bl	800d464 <prvAddCurrentTaskToDelayedList>
	}
 800d9dc:	bd38      	pop	{r3, r4, r5, pc}
 800d9de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9e2:	f383 8811 	msr	BASEPRI, r3
 800d9e6:	f3bf 8f6f 	isb	sy
 800d9ea:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 800d9ee:	e7fe      	b.n	800d9ee <vTaskPlaceOnEventListRestricted+0x32>
 800d9f0:	2400344c 	.word	0x2400344c

0800d9f4 <xTaskRemoveFromEventList>:
{
 800d9f4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d9f6:	68c3      	ldr	r3, [r0, #12]
 800d9f8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800d9fa:	b324      	cbz	r4, 800da46 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d9fc:	f104 0518 	add.w	r5, r4, #24
 800da00:	4628      	mov	r0, r5
 800da02:	f7fe fe45 	bl	800c690 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da06:	4b18      	ldr	r3, [pc, #96]	@ (800da68 <xTaskRemoveFromEventList+0x74>)
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	bb2b      	cbnz	r3, 800da58 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800da0c:	1d25      	adds	r5, r4, #4
 800da0e:	4628      	mov	r0, r5
 800da10:	f7fe fe3e 	bl	800c690 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800da14:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800da16:	4b15      	ldr	r3, [pc, #84]	@ (800da6c <xTaskRemoveFromEventList+0x78>)
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	4298      	cmp	r0, r3
 800da1c:	d901      	bls.n	800da22 <xTaskRemoveFromEventList+0x2e>
 800da1e:	4b13      	ldr	r3, [pc, #76]	@ (800da6c <xTaskRemoveFromEventList+0x78>)
 800da20:	6018      	str	r0, [r3, #0]
 800da22:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800da26:	4629      	mov	r1, r5
 800da28:	4b11      	ldr	r3, [pc, #68]	@ (800da70 <xTaskRemoveFromEventList+0x7c>)
 800da2a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800da2e:	f7fe fe0b 	bl	800c648 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800da32:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800da34:	4b0f      	ldr	r3, [pc, #60]	@ (800da74 <xTaskRemoveFromEventList+0x80>)
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da3a:	429a      	cmp	r2, r3
 800da3c:	d911      	bls.n	800da62 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 800da3e:	2001      	movs	r0, #1
 800da40:	4b0d      	ldr	r3, [pc, #52]	@ (800da78 <xTaskRemoveFromEventList+0x84>)
 800da42:	6018      	str	r0, [r3, #0]
}
 800da44:	bd38      	pop	{r3, r4, r5, pc}
 800da46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da4a:	f383 8811 	msr	BASEPRI, r3
 800da4e:	f3bf 8f6f 	isb	sy
 800da52:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800da56:	e7fe      	b.n	800da56 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800da58:	4629      	mov	r1, r5
 800da5a:	4808      	ldr	r0, [pc, #32]	@ (800da7c <xTaskRemoveFromEventList+0x88>)
 800da5c:	f7fe fdf4 	bl	800c648 <vListInsertEnd>
 800da60:	e7e7      	b.n	800da32 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 800da62:	2000      	movs	r0, #0
	return xReturn;
 800da64:	e7ee      	b.n	800da44 <xTaskRemoveFromEventList+0x50>
 800da66:	bf00      	nop
 800da68:	24002f50 	.word	0x24002f50
 800da6c:	24002f70 	.word	0x24002f70
 800da70:	24002fec 	.word	0x24002fec
 800da74:	2400344c 	.word	0x2400344c
 800da78:	24002f64 	.word	0x24002f64
 800da7c:	24002fa8 	.word	0x24002fa8

0800da80 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800da80:	4b03      	ldr	r3, [pc, #12]	@ (800da90 <vTaskInternalSetTimeOutState+0x10>)
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800da86:	4b03      	ldr	r3, [pc, #12]	@ (800da94 <vTaskInternalSetTimeOutState+0x14>)
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	6043      	str	r3, [r0, #4]
}
 800da8c:	4770      	bx	lr
 800da8e:	bf00      	nop
 800da90:	24002f60 	.word	0x24002f60
 800da94:	24002f74 	.word	0x24002f74

0800da98 <xTaskCheckForTimeOut>:
{
 800da98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800da9a:	b1c8      	cbz	r0, 800dad0 <xTaskCheckForTimeOut+0x38>
 800da9c:	460c      	mov	r4, r1
 800da9e:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 800daa0:	b1f9      	cbz	r1, 800dae2 <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 800daa2:	f000 fbdf 	bl	800e264 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800daa6:	4b1b      	ldr	r3, [pc, #108]	@ (800db14 <xTaskCheckForTimeOut+0x7c>)
 800daa8:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800daaa:	686b      	ldr	r3, [r5, #4]
 800daac:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 800daae:	6822      	ldr	r2, [r4, #0]
 800dab0:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dab4:	d026      	beq.n	800db04 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dab6:	4e18      	ldr	r6, [pc, #96]	@ (800db18 <xTaskCheckForTimeOut+0x80>)
 800dab8:	6836      	ldr	r6, [r6, #0]
 800daba:	682f      	ldr	r7, [r5, #0]
 800dabc:	42b7      	cmp	r7, r6
 800dabe:	d001      	beq.n	800dac4 <xTaskCheckForTimeOut+0x2c>
 800dac0:	428b      	cmp	r3, r1
 800dac2:	d924      	bls.n	800db0e <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dac4:	4282      	cmp	r2, r0
 800dac6:	d815      	bhi.n	800daf4 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 800dac8:	2300      	movs	r3, #0
 800daca:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800dacc:	2401      	movs	r4, #1
 800dace:	e01a      	b.n	800db06 <xTaskCheckForTimeOut+0x6e>
 800dad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dad4:	f383 8811 	msr	BASEPRI, r3
 800dad8:	f3bf 8f6f 	isb	sy
 800dadc:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 800dae0:	e7fe      	b.n	800dae0 <xTaskCheckForTimeOut+0x48>
 800dae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dae6:	f383 8811 	msr	BASEPRI, r3
 800daea:	f3bf 8f6f 	isb	sy
 800daee:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 800daf2:	e7fe      	b.n	800daf2 <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 800daf4:	1a5b      	subs	r3, r3, r1
 800daf6:	4413      	add	r3, r2
 800daf8:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800dafa:	4628      	mov	r0, r5
 800dafc:	f7ff ffc0 	bl	800da80 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800db00:	2400      	movs	r4, #0
 800db02:	e000      	b.n	800db06 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 800db04:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800db06:	f000 fbcf 	bl	800e2a8 <vPortExitCritical>
}
 800db0a:	4620      	mov	r0, r4
 800db0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 800db0e:	2401      	movs	r4, #1
 800db10:	e7f9      	b.n	800db06 <xTaskCheckForTimeOut+0x6e>
 800db12:	bf00      	nop
 800db14:	24002f74 	.word	0x24002f74
 800db18:	24002f60 	.word	0x24002f60

0800db1c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800db1c:	4b01      	ldr	r3, [pc, #4]	@ (800db24 <vTaskMissedYield+0x8>)
 800db1e:	2201      	movs	r2, #1
 800db20:	601a      	str	r2, [r3, #0]
}
 800db22:	4770      	bx	lr
 800db24:	24002f64 	.word	0x24002f64

0800db28 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800db28:	4b05      	ldr	r3, [pc, #20]	@ (800db40 <xTaskGetSchedulerState+0x18>)
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	b133      	cbz	r3, 800db3c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db2e:	4b05      	ldr	r3, [pc, #20]	@ (800db44 <xTaskGetSchedulerState+0x1c>)
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	b10b      	cbz	r3, 800db38 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 800db34:	2000      	movs	r0, #0
	}
 800db36:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 800db38:	2002      	movs	r0, #2
 800db3a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800db3c:	2001      	movs	r0, #1
 800db3e:	4770      	bx	lr
 800db40:	24002f6c 	.word	0x24002f6c
 800db44:	24002f50 	.word	0x24002f50

0800db48 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 800db48:	2800      	cmp	r0, #0
 800db4a:	d03e      	beq.n	800dbca <xTaskPriorityInherit+0x82>
	{
 800db4c:	b538      	push	{r3, r4, r5, lr}
 800db4e:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800db50:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800db52:	4a20      	ldr	r2, [pc, #128]	@ (800dbd4 <xTaskPriorityInherit+0x8c>)
 800db54:	6812      	ldr	r2, [r2, #0]
 800db56:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800db58:	4293      	cmp	r3, r2
 800db5a:	d22e      	bcs.n	800dbba <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800db5c:	6982      	ldr	r2, [r0, #24]
 800db5e:	2a00      	cmp	r2, #0
 800db60:	db05      	blt.n	800db6e <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db62:	4a1c      	ldr	r2, [pc, #112]	@ (800dbd4 <xTaskPriorityInherit+0x8c>)
 800db64:	6812      	ldr	r2, [r2, #0]
 800db66:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800db68:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800db6c:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800db6e:	6961      	ldr	r1, [r4, #20]
 800db70:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800db74:	4a18      	ldr	r2, [pc, #96]	@ (800dbd8 <xTaskPriorityInherit+0x90>)
 800db76:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800db7a:	4299      	cmp	r1, r3
 800db7c:	d005      	beq.n	800db8a <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800db7e:	4b15      	ldr	r3, [pc, #84]	@ (800dbd4 <xTaskPriorityInherit+0x8c>)
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db84:	62e3      	str	r3, [r4, #44]	@ 0x2c
				xReturn = pdTRUE;
 800db86:	2001      	movs	r0, #1
	}
 800db88:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db8a:	1d25      	adds	r5, r4, #4
 800db8c:	4628      	mov	r0, r5
 800db8e:	f7fe fd7f 	bl	800c690 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800db92:	4b10      	ldr	r3, [pc, #64]	@ (800dbd4 <xTaskPriorityInherit+0x8c>)
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800db98:	62e0      	str	r0, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800db9a:	4b10      	ldr	r3, [pc, #64]	@ (800dbdc <xTaskPriorityInherit+0x94>)
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	4298      	cmp	r0, r3
 800dba0:	d901      	bls.n	800dba6 <xTaskPriorityInherit+0x5e>
 800dba2:	4b0e      	ldr	r3, [pc, #56]	@ (800dbdc <xTaskPriorityInherit+0x94>)
 800dba4:	6018      	str	r0, [r3, #0]
 800dba6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800dbaa:	4629      	mov	r1, r5
 800dbac:	4b0a      	ldr	r3, [pc, #40]	@ (800dbd8 <xTaskPriorityInherit+0x90>)
 800dbae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800dbb2:	f7fe fd49 	bl	800c648 <vListInsertEnd>
				xReturn = pdTRUE;
 800dbb6:	2001      	movs	r0, #1
 800dbb8:	e7e6      	b.n	800db88 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800dbba:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800dbbc:	4b05      	ldr	r3, [pc, #20]	@ (800dbd4 <xTaskPriorityInherit+0x8c>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbc2:	429a      	cmp	r2, r3
 800dbc4:	d303      	bcc.n	800dbce <xTaskPriorityInherit+0x86>
	BaseType_t xReturn = pdFALSE;
 800dbc6:	2000      	movs	r0, #0
 800dbc8:	e7de      	b.n	800db88 <xTaskPriorityInherit+0x40>
 800dbca:	2000      	movs	r0, #0
	}
 800dbcc:	4770      	bx	lr
					xReturn = pdTRUE;
 800dbce:	2001      	movs	r0, #1
		return xReturn;
 800dbd0:	e7da      	b.n	800db88 <xTaskPriorityInherit+0x40>
 800dbd2:	bf00      	nop
 800dbd4:	2400344c 	.word	0x2400344c
 800dbd8:	24002fec 	.word	0x24002fec
 800dbdc:	24002f70 	.word	0x24002f70

0800dbe0 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800dbe0:	2800      	cmp	r0, #0
 800dbe2:	d03b      	beq.n	800dc5c <xTaskPriorityDisinherit+0x7c>
	{
 800dbe4:	b538      	push	{r3, r4, r5, lr}
 800dbe6:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 800dbe8:	4b1e      	ldr	r3, [pc, #120]	@ (800dc64 <xTaskPriorityDisinherit+0x84>)
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	4283      	cmp	r3, r0
 800dbee:	d008      	beq.n	800dc02 <xTaskPriorityDisinherit+0x22>
 800dbf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbf4:	f383 8811 	msr	BASEPRI, r3
 800dbf8:	f3bf 8f6f 	isb	sy
 800dbfc:	f3bf 8f4f 	dsb	sy
 800dc00:	e7fe      	b.n	800dc00 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800dc02:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800dc04:	b943      	cbnz	r3, 800dc18 <xTaskPriorityDisinherit+0x38>
 800dc06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc0a:	f383 8811 	msr	BASEPRI, r3
 800dc0e:	f3bf 8f6f 	isb	sy
 800dc12:	f3bf 8f4f 	dsb	sy
 800dc16:	e7fe      	b.n	800dc16 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 800dc18:	3b01      	subs	r3, #1
 800dc1a:	6503      	str	r3, [r0, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dc1c:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800dc1e:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800dc20:	4291      	cmp	r1, r2
 800dc22:	d01d      	beq.n	800dc60 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dc24:	b10b      	cbz	r3, 800dc2a <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800dc26:	2000      	movs	r0, #0
	}
 800dc28:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dc2a:	1d05      	adds	r5, r0, #4
 800dc2c:	4628      	mov	r0, r5
 800dc2e:	f7fe fd2f 	bl	800c690 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dc32:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800dc34:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc36:	f1c0 0338 	rsb	r3, r0, #56	@ 0x38
 800dc3a:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800dc3c:	4b0a      	ldr	r3, [pc, #40]	@ (800dc68 <xTaskPriorityDisinherit+0x88>)
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	4298      	cmp	r0, r3
 800dc42:	d901      	bls.n	800dc48 <xTaskPriorityDisinherit+0x68>
 800dc44:	4b08      	ldr	r3, [pc, #32]	@ (800dc68 <xTaskPriorityDisinherit+0x88>)
 800dc46:	6018      	str	r0, [r3, #0]
 800dc48:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800dc4c:	4629      	mov	r1, r5
 800dc4e:	4b07      	ldr	r3, [pc, #28]	@ (800dc6c <xTaskPriorityDisinherit+0x8c>)
 800dc50:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800dc54:	f7fe fcf8 	bl	800c648 <vListInsertEnd>
					xReturn = pdTRUE;
 800dc58:	2001      	movs	r0, #1
 800dc5a:	e7e5      	b.n	800dc28 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 800dc5c:	2000      	movs	r0, #0
	}
 800dc5e:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 800dc60:	2000      	movs	r0, #0
 800dc62:	e7e1      	b.n	800dc28 <xTaskPriorityDisinherit+0x48>
 800dc64:	2400344c 	.word	0x2400344c
 800dc68:	24002f70 	.word	0x24002f70
 800dc6c:	24002fec 	.word	0x24002fec

0800dc70 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 800dc70:	2800      	cmp	r0, #0
 800dc72:	d046      	beq.n	800dd02 <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 800dc74:	b538      	push	{r3, r4, r5, lr}
 800dc76:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 800dc78:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800dc7a:	b943      	cbnz	r3, 800dc8e <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800dc7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc80:	f383 8811 	msr	BASEPRI, r3
 800dc84:	f3bf 8f6f 	isb	sy
 800dc88:	f3bf 8f4f 	dsb	sy
 800dc8c:	e7fe      	b.n	800dc8c <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800dc8e:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800dc90:	428a      	cmp	r2, r1
 800dc92:	d200      	bcs.n	800dc96 <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800dc94:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 800dc96:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800dc98:	4291      	cmp	r1, r2
 800dc9a:	d001      	beq.n	800dca0 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800dc9c:	2b01      	cmp	r3, #1
 800dc9e:	d000      	beq.n	800dca2 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 800dca0:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 800dca2:	4b18      	ldr	r3, [pc, #96]	@ (800dd04 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	42a3      	cmp	r3, r4
 800dca8:	d022      	beq.n	800dcf0 <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 800dcaa:	62e2      	str	r2, [r4, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dcac:	69a3      	ldr	r3, [r4, #24]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	db02      	blt.n	800dcb8 <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dcb2:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800dcb6:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dcb8:	6962      	ldr	r2, [r4, #20]
 800dcba:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800dcbe:	4b12      	ldr	r3, [pc, #72]	@ (800dd08 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800dcc0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800dcc4:	429a      	cmp	r2, r3
 800dcc6:	d1eb      	bne.n	800dca0 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dcc8:	1d25      	adds	r5, r4, #4
 800dcca:	4628      	mov	r0, r5
 800dccc:	f7fe fce0 	bl	800c690 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800dcd0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800dcd2:	4b0e      	ldr	r3, [pc, #56]	@ (800dd0c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	4298      	cmp	r0, r3
 800dcd8:	d901      	bls.n	800dcde <vTaskPriorityDisinheritAfterTimeout+0x6e>
 800dcda:	4b0c      	ldr	r3, [pc, #48]	@ (800dd0c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800dcdc:	6018      	str	r0, [r3, #0]
 800dcde:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800dce2:	4629      	mov	r1, r5
 800dce4:	4b08      	ldr	r3, [pc, #32]	@ (800dd08 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800dce6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800dcea:	f7fe fcad 	bl	800c648 <vListInsertEnd>
	}
 800dcee:	e7d7      	b.n	800dca0 <vTaskPriorityDisinheritAfterTimeout+0x30>
 800dcf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcf4:	f383 8811 	msr	BASEPRI, r3
 800dcf8:	f3bf 8f6f 	isb	sy
 800dcfc:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 800dd00:	e7fe      	b.n	800dd00 <vTaskPriorityDisinheritAfterTimeout+0x90>
 800dd02:	4770      	bx	lr
 800dd04:	2400344c 	.word	0x2400344c
 800dd08:	24002fec 	.word	0x24002fec
 800dd0c:	24002f70 	.word	0x24002f70

0800dd10 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800dd10:	4b05      	ldr	r3, [pc, #20]	@ (800dd28 <pvTaskIncrementMutexHeldCount+0x18>)
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	b123      	cbz	r3, 800dd20 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 800dd16:	4b04      	ldr	r3, [pc, #16]	@ (800dd28 <pvTaskIncrementMutexHeldCount+0x18>)
 800dd18:	681a      	ldr	r2, [r3, #0]
 800dd1a:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800dd1c:	3301      	adds	r3, #1
 800dd1e:	6513      	str	r3, [r2, #80]	@ 0x50
		return pxCurrentTCB;
 800dd20:	4b01      	ldr	r3, [pc, #4]	@ (800dd28 <pvTaskIncrementMutexHeldCount+0x18>)
 800dd22:	6818      	ldr	r0, [r3, #0]
	}
 800dd24:	4770      	bx	lr
 800dd26:	bf00      	nop
 800dd28:	2400344c 	.word	0x2400344c

0800dd2c <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800dd2c:	4b06      	ldr	r3, [pc, #24]	@ (800dd48 <prvGetNextExpireTime+0x1c>)
 800dd2e:	681a      	ldr	r2, [r3, #0]
 800dd30:	6813      	ldr	r3, [r2, #0]
 800dd32:	b92b      	cbnz	r3, 800dd40 <prvGetNextExpireTime+0x14>
 800dd34:	2301      	movs	r3, #1
 800dd36:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 800dd38:	b923      	cbnz	r3, 800dd44 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dd3a:	68d3      	ldr	r3, [r2, #12]
 800dd3c:	6818      	ldr	r0, [r3, #0]
 800dd3e:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800dd40:	2300      	movs	r3, #0
 800dd42:	e7f8      	b.n	800dd36 <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800dd44:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 800dd46:	4770      	bx	lr
 800dd48:	24003550 	.word	0x24003550

0800dd4c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800dd4c:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800dd4e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dd50:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800dd52:	4291      	cmp	r1, r2
 800dd54:	d80c      	bhi.n	800dd70 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd56:	1ad2      	subs	r2, r2, r3
 800dd58:	6983      	ldr	r3, [r0, #24]
 800dd5a:	429a      	cmp	r2, r3
 800dd5c:	d301      	bcc.n	800dd62 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dd5e:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 800dd60:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800dd62:	1d01      	adds	r1, r0, #4
 800dd64:	4b0b      	ldr	r3, [pc, #44]	@ (800dd94 <prvInsertTimerInActiveList+0x48>)
 800dd66:	6818      	ldr	r0, [r3, #0]
 800dd68:	f7fe fc79 	bl	800c65e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800dd6c:	2000      	movs	r0, #0
 800dd6e:	e7f7      	b.n	800dd60 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dd70:	429a      	cmp	r2, r3
 800dd72:	bf2c      	ite	cs
 800dd74:	2200      	movcs	r2, #0
 800dd76:	2201      	movcc	r2, #1
 800dd78:	4299      	cmp	r1, r3
 800dd7a:	bf38      	it	cc
 800dd7c:	2200      	movcc	r2, #0
 800dd7e:	b10a      	cbz	r2, 800dd84 <prvInsertTimerInActiveList+0x38>
			xProcessTimerNow = pdTRUE;
 800dd80:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800dd82:	e7ed      	b.n	800dd60 <prvInsertTimerInActiveList+0x14>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dd84:	1d01      	adds	r1, r0, #4
 800dd86:	4b04      	ldr	r3, [pc, #16]	@ (800dd98 <prvInsertTimerInActiveList+0x4c>)
 800dd88:	6818      	ldr	r0, [r3, #0]
 800dd8a:	f7fe fc68 	bl	800c65e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800dd8e:	2000      	movs	r0, #0
 800dd90:	e7e6      	b.n	800dd60 <prvInsertTimerInActiveList+0x14>
 800dd92:	bf00      	nop
 800dd94:	2400354c 	.word	0x2400354c
 800dd98:	24003550 	.word	0x24003550

0800dd9c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800dd9c:	b530      	push	{r4, r5, lr}
 800dd9e:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800dda0:	f000 fa60 	bl	800e264 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800dda4:	4b11      	ldr	r3, [pc, #68]	@ (800ddec <prvCheckForValidListAndQueue+0x50>)
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	b11b      	cbz	r3, 800ddb2 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ddaa:	f000 fa7d 	bl	800e2a8 <vPortExitCritical>
}
 800ddae:	b003      	add	sp, #12
 800ddb0:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 800ddb2:	4d0f      	ldr	r5, [pc, #60]	@ (800ddf0 <prvCheckForValidListAndQueue+0x54>)
 800ddb4:	4628      	mov	r0, r5
 800ddb6:	f7fe fc39 	bl	800c62c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ddba:	4c0e      	ldr	r4, [pc, #56]	@ (800ddf4 <prvCheckForValidListAndQueue+0x58>)
 800ddbc:	4620      	mov	r0, r4
 800ddbe:	f7fe fc35 	bl	800c62c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ddc2:	4b0d      	ldr	r3, [pc, #52]	@ (800ddf8 <prvCheckForValidListAndQueue+0x5c>)
 800ddc4:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ddc6:	4b0d      	ldr	r3, [pc, #52]	@ (800ddfc <prvCheckForValidListAndQueue+0x60>)
 800ddc8:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ddca:	2300      	movs	r3, #0
 800ddcc:	9300      	str	r3, [sp, #0]
 800ddce:	4b0c      	ldr	r3, [pc, #48]	@ (800de00 <prvCheckForValidListAndQueue+0x64>)
 800ddd0:	4a0c      	ldr	r2, [pc, #48]	@ (800de04 <prvCheckForValidListAndQueue+0x68>)
 800ddd2:	2110      	movs	r1, #16
 800ddd4:	200a      	movs	r0, #10
 800ddd6:	f7fe fd69 	bl	800c8ac <xQueueGenericCreateStatic>
 800ddda:	4b04      	ldr	r3, [pc, #16]	@ (800ddec <prvCheckForValidListAndQueue+0x50>)
 800dddc:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 800ddde:	2800      	cmp	r0, #0
 800dde0:	d0e3      	beq.n	800ddaa <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800dde2:	4909      	ldr	r1, [pc, #36]	@ (800de08 <prvCheckForValidListAndQueue+0x6c>)
 800dde4:	f7ff f978 	bl	800d0d8 <vQueueAddToRegistry>
 800dde8:	e7df      	b.n	800ddaa <prvCheckForValidListAndQueue+0xe>
 800ddea:	bf00      	nop
 800ddec:	24003548 	.word	0x24003548
 800ddf0:	24003568 	.word	0x24003568
 800ddf4:	24003554 	.word	0x24003554
 800ddf8:	24003550 	.word	0x24003550
 800ddfc:	2400354c 	.word	0x2400354c
 800de00:	24003450 	.word	0x24003450
 800de04:	240034a0 	.word	0x240034a0
 800de08:	0801b3ac 	.word	0x0801b3ac

0800de0c <xTimerCreateTimerTask>:
{
 800de0c:	b510      	push	{r4, lr}
 800de0e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800de10:	f7ff ffc4 	bl	800dd9c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800de14:	4b12      	ldr	r3, [pc, #72]	@ (800de60 <xTimerCreateTimerTask+0x54>)
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	b1cb      	cbz	r3, 800de4e <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800de1a:	2400      	movs	r4, #0
 800de1c:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800de1e:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800de20:	aa07      	add	r2, sp, #28
 800de22:	a906      	add	r1, sp, #24
 800de24:	a805      	add	r0, sp, #20
 800de26:	f7fe fbf5 	bl	800c614 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800de2a:	9b05      	ldr	r3, [sp, #20]
 800de2c:	9302      	str	r3, [sp, #8]
 800de2e:	9b06      	ldr	r3, [sp, #24]
 800de30:	9301      	str	r3, [sp, #4]
 800de32:	2302      	movs	r3, #2
 800de34:	9300      	str	r3, [sp, #0]
 800de36:	4623      	mov	r3, r4
 800de38:	9a07      	ldr	r2, [sp, #28]
 800de3a:	490a      	ldr	r1, [pc, #40]	@ (800de64 <xTimerCreateTimerTask+0x58>)
 800de3c:	480a      	ldr	r0, [pc, #40]	@ (800de68 <xTimerCreateTimerTask+0x5c>)
 800de3e:	f7ff fb53 	bl	800d4e8 <xTaskCreateStatic>
 800de42:	4b0a      	ldr	r3, [pc, #40]	@ (800de6c <xTimerCreateTimerTask+0x60>)
 800de44:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800de46:	b110      	cbz	r0, 800de4e <xTimerCreateTimerTask+0x42>
}
 800de48:	2001      	movs	r0, #1
 800de4a:	b008      	add	sp, #32
 800de4c:	bd10      	pop	{r4, pc}
 800de4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de52:	f383 8811 	msr	BASEPRI, r3
 800de56:	f3bf 8f6f 	isb	sy
 800de5a:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800de5e:	e7fe      	b.n	800de5e <xTimerCreateTimerTask+0x52>
 800de60:	24003548 	.word	0x24003548
 800de64:	0801b3b4 	.word	0x0801b3b4
 800de68:	0800e175 	.word	0x0800e175
 800de6c:	24003544 	.word	0x24003544

0800de70 <xTimerGenericCommand>:
	configASSERT( xTimer );
 800de70:	b1b8      	cbz	r0, 800dea2 <xTimerGenericCommand+0x32>
 800de72:	469c      	mov	ip, r3
 800de74:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 800de76:	4818      	ldr	r0, [pc, #96]	@ (800ded8 <xTimerGenericCommand+0x68>)
 800de78:	6800      	ldr	r0, [r0, #0]
 800de7a:	b358      	cbz	r0, 800ded4 <xTimerGenericCommand+0x64>
{
 800de7c:	b500      	push	{lr}
 800de7e:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 800de80:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800de82:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800de84:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800de86:	2905      	cmp	r1, #5
 800de88:	dc1c      	bgt.n	800dec4 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800de8a:	f7ff fe4d 	bl	800db28 <xTaskGetSchedulerState>
 800de8e:	2802      	cmp	r0, #2
 800de90:	d010      	beq.n	800deb4 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800de92:	2300      	movs	r3, #0
 800de94:	461a      	mov	r2, r3
 800de96:	4669      	mov	r1, sp
 800de98:	480f      	ldr	r0, [pc, #60]	@ (800ded8 <xTimerGenericCommand+0x68>)
 800de9a:	6800      	ldr	r0, [r0, #0]
 800de9c:	f7fe fdbe 	bl	800ca1c <xQueueGenericSend>
 800dea0:	e015      	b.n	800dece <xTimerGenericCommand+0x5e>
 800dea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dea6:	f383 8811 	msr	BASEPRI, r3
 800deaa:	f3bf 8f6f 	isb	sy
 800deae:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 800deb2:	e7fe      	b.n	800deb2 <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800deb4:	2300      	movs	r3, #0
 800deb6:	9a06      	ldr	r2, [sp, #24]
 800deb8:	4669      	mov	r1, sp
 800deba:	4807      	ldr	r0, [pc, #28]	@ (800ded8 <xTimerGenericCommand+0x68>)
 800debc:	6800      	ldr	r0, [r0, #0]
 800debe:	f7fe fdad 	bl	800ca1c <xQueueGenericSend>
 800dec2:	e004      	b.n	800dece <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800dec4:	2300      	movs	r3, #0
 800dec6:	4662      	mov	r2, ip
 800dec8:	4669      	mov	r1, sp
 800deca:	f7fe fe6b 	bl	800cba4 <xQueueGenericSendFromISR>
}
 800dece:	b005      	add	sp, #20
 800ded0:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 800ded4:	2000      	movs	r0, #0
}
 800ded6:	4770      	bx	lr
 800ded8:	24003548 	.word	0x24003548

0800dedc <prvSwitchTimerLists>:
{
 800dedc:	b570      	push	{r4, r5, r6, lr}
 800dede:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dee0:	4b1b      	ldr	r3, [pc, #108]	@ (800df50 <prvSwitchTimerLists+0x74>)
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	681a      	ldr	r2, [r3, #0]
 800dee6:	b362      	cbz	r2, 800df42 <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dee8:	68db      	ldr	r3, [r3, #12]
 800deea:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800deec:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800deee:	1d25      	adds	r5, r4, #4
 800def0:	4628      	mov	r0, r5
 800def2:	f7fe fbcd 	bl	800c690 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800def6:	6a23      	ldr	r3, [r4, #32]
 800def8:	4620      	mov	r0, r4
 800defa:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800defc:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800df00:	f013 0f04 	tst.w	r3, #4
 800df04:	d0ec      	beq.n	800dee0 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800df06:	69a3      	ldr	r3, [r4, #24]
 800df08:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800df0a:	429e      	cmp	r6, r3
 800df0c:	d207      	bcs.n	800df1e <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800df0e:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800df10:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800df12:	4629      	mov	r1, r5
 800df14:	4b0e      	ldr	r3, [pc, #56]	@ (800df50 <prvSwitchTimerLists+0x74>)
 800df16:	6818      	ldr	r0, [r3, #0]
 800df18:	f7fe fba1 	bl	800c65e <vListInsert>
 800df1c:	e7e0      	b.n	800dee0 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800df1e:	2100      	movs	r1, #0
 800df20:	9100      	str	r1, [sp, #0]
 800df22:	460b      	mov	r3, r1
 800df24:	4632      	mov	r2, r6
 800df26:	4620      	mov	r0, r4
 800df28:	f7ff ffa2 	bl	800de70 <xTimerGenericCommand>
				configASSERT( xResult );
 800df2c:	2800      	cmp	r0, #0
 800df2e:	d1d7      	bne.n	800dee0 <prvSwitchTimerLists+0x4>
 800df30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df34:	f383 8811 	msr	BASEPRI, r3
 800df38:	f3bf 8f6f 	isb	sy
 800df3c:	f3bf 8f4f 	dsb	sy
 800df40:	e7fe      	b.n	800df40 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 800df42:	4a04      	ldr	r2, [pc, #16]	@ (800df54 <prvSwitchTimerLists+0x78>)
 800df44:	6810      	ldr	r0, [r2, #0]
 800df46:	4902      	ldr	r1, [pc, #8]	@ (800df50 <prvSwitchTimerLists+0x74>)
 800df48:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800df4a:	6013      	str	r3, [r2, #0]
}
 800df4c:	b002      	add	sp, #8
 800df4e:	bd70      	pop	{r4, r5, r6, pc}
 800df50:	24003550 	.word	0x24003550
 800df54:	2400354c 	.word	0x2400354c

0800df58 <prvSampleTimeNow>:
{
 800df58:	b538      	push	{r3, r4, r5, lr}
 800df5a:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 800df5c:	f7ff fb90 	bl	800d680 <xTaskGetTickCount>
 800df60:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 800df62:	4b07      	ldr	r3, [pc, #28]	@ (800df80 <prvSampleTimeNow+0x28>)
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	4283      	cmp	r3, r0
 800df68:	d805      	bhi.n	800df76 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 800df6a:	2300      	movs	r3, #0
 800df6c:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 800df6e:	4b04      	ldr	r3, [pc, #16]	@ (800df80 <prvSampleTimeNow+0x28>)
 800df70:	601c      	str	r4, [r3, #0]
}
 800df72:	4620      	mov	r0, r4
 800df74:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 800df76:	f7ff ffb1 	bl	800dedc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800df7a:	2301      	movs	r3, #1
 800df7c:	602b      	str	r3, [r5, #0]
 800df7e:	e7f6      	b.n	800df6e <prvSampleTimeNow+0x16>
 800df80:	24003540 	.word	0x24003540

0800df84 <prvProcessExpiredTimer>:
{
 800df84:	b570      	push	{r4, r5, r6, lr}
 800df86:	b082      	sub	sp, #8
 800df88:	4606      	mov	r6, r0
 800df8a:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df8c:	4917      	ldr	r1, [pc, #92]	@ (800dfec <prvProcessExpiredTimer+0x68>)
 800df8e:	6809      	ldr	r1, [r1, #0]
 800df90:	68c9      	ldr	r1, [r1, #12]
 800df92:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800df94:	1d20      	adds	r0, r4, #4
 800df96:	f7fe fb7b 	bl	800c690 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800df9a:	f894 c028 	ldrb.w	ip, [r4, #40]	@ 0x28
 800df9e:	f01c 0f04 	tst.w	ip, #4
 800dfa2:	d108      	bne.n	800dfb6 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dfa4:	f02c 0c01 	bic.w	ip, ip, #1
 800dfa8:	f884 c028 	strb.w	ip, [r4, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dfac:	6a23      	ldr	r3, [r4, #32]
 800dfae:	4620      	mov	r0, r4
 800dfb0:	4798      	blx	r3
}
 800dfb2:	b002      	add	sp, #8
 800dfb4:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800dfb6:	69a1      	ldr	r1, [r4, #24]
 800dfb8:	4633      	mov	r3, r6
 800dfba:	462a      	mov	r2, r5
 800dfbc:	4431      	add	r1, r6
 800dfbe:	4620      	mov	r0, r4
 800dfc0:	f7ff fec4 	bl	800dd4c <prvInsertTimerInActiveList>
 800dfc4:	2800      	cmp	r0, #0
 800dfc6:	d0f1      	beq.n	800dfac <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dfc8:	2100      	movs	r1, #0
 800dfca:	9100      	str	r1, [sp, #0]
 800dfcc:	460b      	mov	r3, r1
 800dfce:	4632      	mov	r2, r6
 800dfd0:	4620      	mov	r0, r4
 800dfd2:	f7ff ff4d 	bl	800de70 <xTimerGenericCommand>
			configASSERT( xResult );
 800dfd6:	2800      	cmp	r0, #0
 800dfd8:	d1e8      	bne.n	800dfac <prvProcessExpiredTimer+0x28>
 800dfda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfde:	f383 8811 	msr	BASEPRI, r3
 800dfe2:	f3bf 8f6f 	isb	sy
 800dfe6:	f3bf 8f4f 	dsb	sy
 800dfea:	e7fe      	b.n	800dfea <prvProcessExpiredTimer+0x66>
 800dfec:	24003550 	.word	0x24003550

0800dff0 <prvProcessTimerOrBlockTask>:
{
 800dff0:	b570      	push	{r4, r5, r6, lr}
 800dff2:	b082      	sub	sp, #8
 800dff4:	4606      	mov	r6, r0
 800dff6:	460c      	mov	r4, r1
	vTaskSuspendAll();
 800dff8:	f7ff fb3a 	bl	800d670 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dffc:	a801      	add	r0, sp, #4
 800dffe:	f7ff ffab 	bl	800df58 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800e002:	9b01      	ldr	r3, [sp, #4]
 800e004:	bb3b      	cbnz	r3, 800e056 <prvProcessTimerOrBlockTask+0x66>
 800e006:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e008:	42b0      	cmp	r0, r6
 800e00a:	bf28      	it	cs
 800e00c:	2c00      	cmpcs	r4, #0
 800e00e:	d019      	beq.n	800e044 <prvProcessTimerOrBlockTask+0x54>
				if( xListWasEmpty != pdFALSE )
 800e010:	b124      	cbz	r4, 800e01c <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e012:	4a13      	ldr	r2, [pc, #76]	@ (800e060 <prvProcessTimerOrBlockTask+0x70>)
 800e014:	6812      	ldr	r2, [r2, #0]
 800e016:	6812      	ldr	r2, [r2, #0]
 800e018:	b9da      	cbnz	r2, 800e052 <prvProcessTimerOrBlockTask+0x62>
 800e01a:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e01c:	4622      	mov	r2, r4
 800e01e:	1b71      	subs	r1, r6, r5
 800e020:	4b10      	ldr	r3, [pc, #64]	@ (800e064 <prvProcessTimerOrBlockTask+0x74>)
 800e022:	6818      	ldr	r0, [r3, #0]
 800e024:	f7ff f898 	bl	800d158 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e028:	f7ff fbbc 	bl	800d7a4 <xTaskResumeAll>
 800e02c:	b9a8      	cbnz	r0, 800e05a <prvProcessTimerOrBlockTask+0x6a>
					portYIELD_WITHIN_API();
 800e02e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e032:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e036:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e03a:	f3bf 8f4f 	dsb	sy
 800e03e:	f3bf 8f6f 	isb	sy
 800e042:	e00a      	b.n	800e05a <prvProcessTimerOrBlockTask+0x6a>
				( void ) xTaskResumeAll();
 800e044:	f7ff fbae 	bl	800d7a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e048:	4629      	mov	r1, r5
 800e04a:	4630      	mov	r0, r6
 800e04c:	f7ff ff9a 	bl	800df84 <prvProcessExpiredTimer>
 800e050:	e003      	b.n	800e05a <prvProcessTimerOrBlockTask+0x6a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e052:	461c      	mov	r4, r3
 800e054:	e7e2      	b.n	800e01c <prvProcessTimerOrBlockTask+0x2c>
			( void ) xTaskResumeAll();
 800e056:	f7ff fba5 	bl	800d7a4 <xTaskResumeAll>
}
 800e05a:	b002      	add	sp, #8
 800e05c:	bd70      	pop	{r4, r5, r6, pc}
 800e05e:	bf00      	nop
 800e060:	2400354c 	.word	0x2400354c
 800e064:	24003548 	.word	0x24003548

0800e068 <prvProcessReceivedCommands>:
{
 800e068:	b510      	push	{r4, lr}
 800e06a:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e06c:	e002      	b.n	800e074 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e06e:	9b04      	ldr	r3, [sp, #16]
 800e070:	2b00      	cmp	r3, #0
 800e072:	da0f      	bge.n	800e094 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e074:	2200      	movs	r2, #0
 800e076:	a904      	add	r1, sp, #16
 800e078:	4b3d      	ldr	r3, [pc, #244]	@ (800e170 <prvProcessReceivedCommands+0x108>)
 800e07a:	6818      	ldr	r0, [r3, #0]
 800e07c:	f7fe fe52 	bl	800cd24 <xQueueReceive>
 800e080:	2800      	cmp	r0, #0
 800e082:	d073      	beq.n	800e16c <prvProcessReceivedCommands+0x104>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e084:	9b04      	ldr	r3, [sp, #16]
 800e086:	2b00      	cmp	r3, #0
 800e088:	daf1      	bge.n	800e06e <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e08a:	9907      	ldr	r1, [sp, #28]
 800e08c:	9806      	ldr	r0, [sp, #24]
 800e08e:	9b05      	ldr	r3, [sp, #20]
 800e090:	4798      	blx	r3
 800e092:	e7ec      	b.n	800e06e <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e094:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e096:	6963      	ldr	r3, [r4, #20]
 800e098:	b113      	cbz	r3, 800e0a0 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e09a:	1d20      	adds	r0, r4, #4
 800e09c:	f7fe faf8 	bl	800c690 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e0a0:	a803      	add	r0, sp, #12
 800e0a2:	f7ff ff59 	bl	800df58 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800e0a6:	9b04      	ldr	r3, [sp, #16]
 800e0a8:	2b09      	cmp	r3, #9
 800e0aa:	d8e3      	bhi.n	800e074 <prvProcessReceivedCommands+0xc>
 800e0ac:	e8df f003 	tbb	[pc, r3]
 800e0b0:	30050505 	.word	0x30050505
 800e0b4:	05055037 	.word	0x05055037
 800e0b8:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e0ba:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800e0be:	f043 0301 	orr.w	r3, r3, #1
 800e0c2:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e0c6:	9b05      	ldr	r3, [sp, #20]
 800e0c8:	69a1      	ldr	r1, [r4, #24]
 800e0ca:	4602      	mov	r2, r0
 800e0cc:	4419      	add	r1, r3
 800e0ce:	4620      	mov	r0, r4
 800e0d0:	f7ff fe3c 	bl	800dd4c <prvInsertTimerInActiveList>
 800e0d4:	2800      	cmp	r0, #0
 800e0d6:	d0cd      	beq.n	800e074 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e0d8:	6a23      	ldr	r3, [r4, #32]
 800e0da:	4620      	mov	r0, r4
 800e0dc:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e0de:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800e0e2:	f013 0f04 	tst.w	r3, #4
 800e0e6:	d0c5      	beq.n	800e074 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e0e8:	69a2      	ldr	r2, [r4, #24]
 800e0ea:	2100      	movs	r1, #0
 800e0ec:	9100      	str	r1, [sp, #0]
 800e0ee:	460b      	mov	r3, r1
 800e0f0:	9805      	ldr	r0, [sp, #20]
 800e0f2:	4402      	add	r2, r0
 800e0f4:	4620      	mov	r0, r4
 800e0f6:	f7ff febb 	bl	800de70 <xTimerGenericCommand>
							configASSERT( xResult );
 800e0fa:	2800      	cmp	r0, #0
 800e0fc:	d1ba      	bne.n	800e074 <prvProcessReceivedCommands+0xc>
 800e0fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e102:	f383 8811 	msr	BASEPRI, r3
 800e106:	f3bf 8f6f 	isb	sy
 800e10a:	f3bf 8f4f 	dsb	sy
 800e10e:	e7fe      	b.n	800e10e <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e110:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800e114:	f023 0301 	bic.w	r3, r3, #1
 800e118:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					break;
 800e11c:	e7aa      	b.n	800e074 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e11e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800e122:	f043 0301 	orr.w	r3, r3, #1
 800e126:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e12a:	9905      	ldr	r1, [sp, #20]
 800e12c:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e12e:	b131      	cbz	r1, 800e13e <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e130:	4603      	mov	r3, r0
 800e132:	4602      	mov	r2, r0
 800e134:	4401      	add	r1, r0
 800e136:	4620      	mov	r0, r4
 800e138:	f7ff fe08 	bl	800dd4c <prvInsertTimerInActiveList>
					break;
 800e13c:	e79a      	b.n	800e074 <prvProcessReceivedCommands+0xc>
 800e13e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e142:	f383 8811 	msr	BASEPRI, r3
 800e146:	f3bf 8f6f 	isb	sy
 800e14a:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e14e:	e7fe      	b.n	800e14e <prvProcessReceivedCommands+0xe6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e150:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800e154:	f013 0f02 	tst.w	r3, #2
 800e158:	d004      	beq.n	800e164 <prvProcessReceivedCommands+0xfc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e15a:	f023 0301 	bic.w	r3, r3, #1
 800e15e:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 800e162:	e787      	b.n	800e074 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 800e164:	4620      	mov	r0, r4
 800e166:	f000 fab7 	bl	800e6d8 <vPortFree>
 800e16a:	e783      	b.n	800e074 <prvProcessReceivedCommands+0xc>
}
 800e16c:	b008      	add	sp, #32
 800e16e:	bd10      	pop	{r4, pc}
 800e170:	24003548 	.word	0x24003548

0800e174 <prvTimerTask>:
{
 800e174:	b500      	push	{lr}
 800e176:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e178:	a801      	add	r0, sp, #4
 800e17a:	f7ff fdd7 	bl	800dd2c <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e17e:	9901      	ldr	r1, [sp, #4]
 800e180:	f7ff ff36 	bl	800dff0 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 800e184:	f7ff ff70 	bl	800e068 <prvProcessReceivedCommands>
	for( ;; )
 800e188:	e7f6      	b.n	800e178 <prvTimerTask+0x4>
	...

0800e18c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e18c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800e18e:	2300      	movs	r3, #0
 800e190:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e192:	4b0d      	ldr	r3, [pc, #52]	@ (800e1c8 <prvTaskExitError+0x3c>)
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e19a:	d008      	beq.n	800e1ae <prvTaskExitError+0x22>
 800e19c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1a0:	f383 8811 	msr	BASEPRI, r3
 800e1a4:	f3bf 8f6f 	isb	sy
 800e1a8:	f3bf 8f4f 	dsb	sy
 800e1ac:	e7fe      	b.n	800e1ac <prvTaskExitError+0x20>
 800e1ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1b2:	f383 8811 	msr	BASEPRI, r3
 800e1b6:	f3bf 8f6f 	isb	sy
 800e1ba:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e1be:	9b01      	ldr	r3, [sp, #4]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d0fc      	beq.n	800e1be <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e1c4:	b002      	add	sp, #8
 800e1c6:	4770      	bx	lr
 800e1c8:	24000010 	.word	0x24000010

0800e1cc <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e1cc:	4808      	ldr	r0, [pc, #32]	@ (800e1f0 <prvPortStartFirstTask+0x24>)
 800e1ce:	6800      	ldr	r0, [r0, #0]
 800e1d0:	6800      	ldr	r0, [r0, #0]
 800e1d2:	f380 8808 	msr	MSP, r0
 800e1d6:	f04f 0000 	mov.w	r0, #0
 800e1da:	f380 8814 	msr	CONTROL, r0
 800e1de:	b662      	cpsie	i
 800e1e0:	b661      	cpsie	f
 800e1e2:	f3bf 8f4f 	dsb	sy
 800e1e6:	f3bf 8f6f 	isb	sy
 800e1ea:	df00      	svc	0
 800e1ec:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e1ee:	0000      	.short	0x0000
 800e1f0:	e000ed08 	.word	0xe000ed08

0800e1f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e1f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e204 <vPortEnableVFP+0x10>
 800e1f8:	6801      	ldr	r1, [r0, #0]
 800e1fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e1fe:	6001      	str	r1, [r0, #0]
 800e200:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e202:	0000      	.short	0x0000
 800e204:	e000ed88 	.word	0xe000ed88

0800e208 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e208:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e20c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e210:	f021 0101 	bic.w	r1, r1, #1
 800e214:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e218:	4b05      	ldr	r3, [pc, #20]	@ (800e230 <pxPortInitialiseStack+0x28>)
 800e21a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e21e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e222:	f06f 0302 	mvn.w	r3, #2
 800e226:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800e22a:	3844      	subs	r0, #68	@ 0x44
 800e22c:	4770      	bx	lr
 800e22e:	bf00      	nop
 800e230:	0800e18d 	.word	0x0800e18d
	...

0800e240 <SVC_Handler>:
	__asm volatile (
 800e240:	4b07      	ldr	r3, [pc, #28]	@ (800e260 <pxCurrentTCBConst2>)
 800e242:	6819      	ldr	r1, [r3, #0]
 800e244:	6808      	ldr	r0, [r1, #0]
 800e246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e24a:	f380 8809 	msr	PSP, r0
 800e24e:	f3bf 8f6f 	isb	sy
 800e252:	f04f 0000 	mov.w	r0, #0
 800e256:	f380 8811 	msr	BASEPRI, r0
 800e25a:	4770      	bx	lr
 800e25c:	f3af 8000 	nop.w

0800e260 <pxCurrentTCBConst2>:
 800e260:	2400344c 	.word	0x2400344c

0800e264 <vPortEnterCritical>:
 800e264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e268:	f383 8811 	msr	BASEPRI, r3
 800e26c:	f3bf 8f6f 	isb	sy
 800e270:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800e274:	4a0b      	ldr	r2, [pc, #44]	@ (800e2a4 <vPortEnterCritical+0x40>)
 800e276:	6813      	ldr	r3, [r2, #0]
 800e278:	3301      	adds	r3, #1
 800e27a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800e27c:	2b01      	cmp	r3, #1
 800e27e:	d000      	beq.n	800e282 <vPortEnterCritical+0x1e>
}
 800e280:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e282:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e286:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800e28a:	f013 0fff 	tst.w	r3, #255	@ 0xff
 800e28e:	d0f7      	beq.n	800e280 <vPortEnterCritical+0x1c>
 800e290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e294:	f383 8811 	msr	BASEPRI, r3
 800e298:	f3bf 8f6f 	isb	sy
 800e29c:	f3bf 8f4f 	dsb	sy
 800e2a0:	e7fe      	b.n	800e2a0 <vPortEnterCritical+0x3c>
 800e2a2:	bf00      	nop
 800e2a4:	24000010 	.word	0x24000010

0800e2a8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800e2a8:	4b09      	ldr	r3, [pc, #36]	@ (800e2d0 <vPortExitCritical+0x28>)
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	b943      	cbnz	r3, 800e2c0 <vPortExitCritical+0x18>
 800e2ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2b2:	f383 8811 	msr	BASEPRI, r3
 800e2b6:	f3bf 8f6f 	isb	sy
 800e2ba:	f3bf 8f4f 	dsb	sy
 800e2be:	e7fe      	b.n	800e2be <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800e2c0:	3b01      	subs	r3, #1
 800e2c2:	4a03      	ldr	r2, [pc, #12]	@ (800e2d0 <vPortExitCritical+0x28>)
 800e2c4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e2c6:	b90b      	cbnz	r3, 800e2cc <vPortExitCritical+0x24>
	__asm volatile
 800e2c8:	f383 8811 	msr	BASEPRI, r3
}
 800e2cc:	4770      	bx	lr
 800e2ce:	bf00      	nop
 800e2d0:	24000010 	.word	0x24000010
	...

0800e2e0 <PendSV_Handler>:
	__asm volatile
 800e2e0:	f3ef 8009 	mrs	r0, PSP
 800e2e4:	f3bf 8f6f 	isb	sy
 800e2e8:	4b15      	ldr	r3, [pc, #84]	@ (800e340 <pxCurrentTCBConst>)
 800e2ea:	681a      	ldr	r2, [r3, #0]
 800e2ec:	f01e 0f10 	tst.w	lr, #16
 800e2f0:	bf08      	it	eq
 800e2f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e2f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2fa:	6010      	str	r0, [r2, #0]
 800e2fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e300:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e304:	f380 8811 	msr	BASEPRI, r0
 800e308:	f3bf 8f4f 	dsb	sy
 800e30c:	f3bf 8f6f 	isb	sy
 800e310:	f7ff faea 	bl	800d8e8 <vTaskSwitchContext>
 800e314:	f04f 0000 	mov.w	r0, #0
 800e318:	f380 8811 	msr	BASEPRI, r0
 800e31c:	bc09      	pop	{r0, r3}
 800e31e:	6819      	ldr	r1, [r3, #0]
 800e320:	6808      	ldr	r0, [r1, #0]
 800e322:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e326:	f01e 0f10 	tst.w	lr, #16
 800e32a:	bf08      	it	eq
 800e32c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e330:	f380 8809 	msr	PSP, r0
 800e334:	f3bf 8f6f 	isb	sy
 800e338:	4770      	bx	lr
 800e33a:	bf00      	nop
 800e33c:	f3af 8000 	nop.w

0800e340 <pxCurrentTCBConst>:
 800e340:	2400344c 	.word	0x2400344c

0800e344 <xPortSysTickHandler>:
{
 800e344:	b508      	push	{r3, lr}
	__asm volatile
 800e346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e34a:	f383 8811 	msr	BASEPRI, r3
 800e34e:	f3bf 8f6f 	isb	sy
 800e352:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800e356:	f7ff f999 	bl	800d68c <xTaskIncrementTick>
 800e35a:	b128      	cbz	r0, 800e368 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e35c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e360:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e364:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 800e368:	2300      	movs	r3, #0
 800e36a:	f383 8811 	msr	BASEPRI, r3
}
 800e36e:	bd08      	pop	{r3, pc}

0800e370 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e370:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800e374:	2300      	movs	r3, #0
 800e376:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e378:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e37a:	4b05      	ldr	r3, [pc, #20]	@ (800e390 <vPortSetupTimerInterrupt+0x20>)
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	4905      	ldr	r1, [pc, #20]	@ (800e394 <vPortSetupTimerInterrupt+0x24>)
 800e380:	fba1 1303 	umull	r1, r3, r1, r3
 800e384:	099b      	lsrs	r3, r3, #6
 800e386:	3b01      	subs	r3, #1
 800e388:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e38a:	2307      	movs	r3, #7
 800e38c:	6113      	str	r3, [r2, #16]
}
 800e38e:	4770      	bx	lr
 800e390:	24000004 	.word	0x24000004
 800e394:	10624dd3 	.word	0x10624dd3

0800e398 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e398:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e39c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800e3a0:	4b3d      	ldr	r3, [pc, #244]	@ (800e498 <xPortStartScheduler+0x100>)
 800e3a2:	429a      	cmp	r2, r3
 800e3a4:	d01c      	beq.n	800e3e0 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e3a6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e3aa:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800e3ae:	4b3b      	ldr	r3, [pc, #236]	@ (800e49c <xPortStartScheduler+0x104>)
 800e3b0:	429a      	cmp	r2, r3
 800e3b2:	d01e      	beq.n	800e3f2 <xPortStartScheduler+0x5a>
{
 800e3b4:	b530      	push	{r4, r5, lr}
 800e3b6:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e3b8:	4b39      	ldr	r3, [pc, #228]	@ (800e4a0 <xPortStartScheduler+0x108>)
 800e3ba:	781a      	ldrb	r2, [r3, #0]
 800e3bc:	b2d2      	uxtb	r2, r2
 800e3be:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e3c0:	22ff      	movs	r2, #255	@ 0xff
 800e3c2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e3c4:	781b      	ldrb	r3, [r3, #0]
 800e3c6:	b2db      	uxtb	r3, r3
 800e3c8:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e3cc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e3d0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e3d4:	4a33      	ldr	r2, [pc, #204]	@ (800e4a4 <xPortStartScheduler+0x10c>)
 800e3d6:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e3d8:	4b33      	ldr	r3, [pc, #204]	@ (800e4a8 <xPortStartScheduler+0x110>)
 800e3da:	2207      	movs	r2, #7
 800e3dc:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e3de:	e01b      	b.n	800e418 <xPortStartScheduler+0x80>
	__asm volatile
 800e3e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3e4:	f383 8811 	msr	BASEPRI, r3
 800e3e8:	f3bf 8f6f 	isb	sy
 800e3ec:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e3f0:	e7fe      	b.n	800e3f0 <xPortStartScheduler+0x58>
 800e3f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3f6:	f383 8811 	msr	BASEPRI, r3
 800e3fa:	f3bf 8f6f 	isb	sy
 800e3fe:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e402:	e7fe      	b.n	800e402 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 800e404:	4a28      	ldr	r2, [pc, #160]	@ (800e4a8 <xPortStartScheduler+0x110>)
 800e406:	6813      	ldr	r3, [r2, #0]
 800e408:	3b01      	subs	r3, #1
 800e40a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e40c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e410:	005b      	lsls	r3, r3, #1
 800e412:	b2db      	uxtb	r3, r3
 800e414:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e418:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e41c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e420:	d1f0      	bne.n	800e404 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e422:	4b21      	ldr	r3, [pc, #132]	@ (800e4a8 <xPortStartScheduler+0x110>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	2b03      	cmp	r3, #3
 800e428:	d008      	beq.n	800e43c <xPortStartScheduler+0xa4>
 800e42a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e42e:	f383 8811 	msr	BASEPRI, r3
 800e432:	f3bf 8f6f 	isb	sy
 800e436:	f3bf 8f4f 	dsb	sy
 800e43a:	e7fe      	b.n	800e43a <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e43c:	021b      	lsls	r3, r3, #8
 800e43e:	4a1a      	ldr	r2, [pc, #104]	@ (800e4a8 <xPortStartScheduler+0x110>)
 800e440:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e442:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e446:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e448:	9b01      	ldr	r3, [sp, #4]
 800e44a:	b2db      	uxtb	r3, r3
 800e44c:	4a14      	ldr	r2, [pc, #80]	@ (800e4a0 <xPortStartScheduler+0x108>)
 800e44e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e450:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 800e454:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800e458:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e45c:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e460:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800e464:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e468:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800e46c:	f7ff ff80 	bl	800e370 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800e470:	2500      	movs	r5, #0
 800e472:	4b0e      	ldr	r3, [pc, #56]	@ (800e4ac <xPortStartScheduler+0x114>)
 800e474:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800e476:	f7ff febd 	bl	800e1f4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e47a:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800e47e:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e482:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800e486:	f7ff fea1 	bl	800e1cc <prvPortStartFirstTask>
	vTaskSwitchContext();
 800e48a:	f7ff fa2d 	bl	800d8e8 <vTaskSwitchContext>
	prvTaskExitError();
 800e48e:	f7ff fe7d 	bl	800e18c <prvTaskExitError>
}
 800e492:	4628      	mov	r0, r5
 800e494:	b003      	add	sp, #12
 800e496:	bd30      	pop	{r4, r5, pc}
 800e498:	410fc271 	.word	0x410fc271
 800e49c:	410fc270 	.word	0x410fc270
 800e4a0:	e000e400 	.word	0xe000e400
 800e4a4:	24003580 	.word	0x24003580
 800e4a8:	2400357c 	.word	0x2400357c
 800e4ac:	24000010 	.word	0x24000010

0800e4b0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e4b0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e4b4:	2b0f      	cmp	r3, #15
 800e4b6:	d90f      	bls.n	800e4d8 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e4b8:	4a11      	ldr	r2, [pc, #68]	@ (800e500 <vPortValidateInterruptPriority+0x50>)
 800e4ba:	5c9b      	ldrb	r3, [r3, r2]
 800e4bc:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e4be:	4a11      	ldr	r2, [pc, #68]	@ (800e504 <vPortValidateInterruptPriority+0x54>)
 800e4c0:	7812      	ldrb	r2, [r2, #0]
 800e4c2:	429a      	cmp	r2, r3
 800e4c4:	d908      	bls.n	800e4d8 <vPortValidateInterruptPriority+0x28>
 800e4c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4ca:	f383 8811 	msr	BASEPRI, r3
 800e4ce:	f3bf 8f6f 	isb	sy
 800e4d2:	f3bf 8f4f 	dsb	sy
 800e4d6:	e7fe      	b.n	800e4d6 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e4d8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e4dc:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800e4e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e4e4:	4a08      	ldr	r2, [pc, #32]	@ (800e508 <vPortValidateInterruptPriority+0x58>)
 800e4e6:	6812      	ldr	r2, [r2, #0]
 800e4e8:	4293      	cmp	r3, r2
 800e4ea:	d908      	bls.n	800e4fe <vPortValidateInterruptPriority+0x4e>
 800e4ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4f0:	f383 8811 	msr	BASEPRI, r3
 800e4f4:	f3bf 8f6f 	isb	sy
 800e4f8:	f3bf 8f4f 	dsb	sy
 800e4fc:	e7fe      	b.n	800e4fc <vPortValidateInterruptPriority+0x4c>
	}
 800e4fe:	4770      	bx	lr
 800e500:	e000e3f0 	.word	0xe000e3f0
 800e504:	24003580 	.word	0x24003580
 800e508:	2400357c 	.word	0x2400357c

0800e50c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e50c:	4a12      	ldr	r2, [pc, #72]	@ (800e558 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e50e:	f012 0f07 	tst.w	r2, #7
 800e512:	d01e      	beq.n	800e552 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e514:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e516:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e51a:	f5c1 5370 	rsb	r3, r1, #15360	@ 0x3c00
 800e51e:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e520:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e522:	480e      	ldr	r0, [pc, #56]	@ (800e55c <prvHeapInit+0x50>)
 800e524:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e526:	2100      	movs	r1, #0
 800e528:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e52a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800e52c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e52e:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800e532:	480b      	ldr	r0, [pc, #44]	@ (800e560 <prvHeapInit+0x54>)
 800e534:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800e536:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e538:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e53a:	1a99      	subs	r1, r3, r2
 800e53c:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e53e:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e540:	4b08      	ldr	r3, [pc, #32]	@ (800e564 <prvHeapInit+0x58>)
 800e542:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e544:	4b08      	ldr	r3, [pc, #32]	@ (800e568 <prvHeapInit+0x5c>)
 800e546:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e548:	4b08      	ldr	r3, [pc, #32]	@ (800e56c <prvHeapInit+0x60>)
 800e54a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e54e:	601a      	str	r2, [r3, #0]
}
 800e550:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e552:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800e556:	e7e4      	b.n	800e522 <prvHeapInit+0x16>
 800e558:	240035a4 	.word	0x240035a4
 800e55c:	2400359c 	.word	0x2400359c
 800e560:	24003598 	.word	0x24003598
 800e564:	24003590 	.word	0x24003590
 800e568:	24003594 	.word	0x24003594
 800e56c:	24003584 	.word	0x24003584

0800e570 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e570:	4b16      	ldr	r3, [pc, #88]	@ (800e5cc <prvInsertBlockIntoFreeList+0x5c>)
 800e572:	461a      	mov	r2, r3
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	4283      	cmp	r3, r0
 800e578:	d3fb      	bcc.n	800e572 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e57a:	6851      	ldr	r1, [r2, #4]
 800e57c:	eb02 0c01 	add.w	ip, r2, r1
 800e580:	4584      	cmp	ip, r0
 800e582:	d009      	beq.n	800e598 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e584:	6841      	ldr	r1, [r0, #4]
 800e586:	eb00 0c01 	add.w	ip, r0, r1
 800e58a:	4563      	cmp	r3, ip
 800e58c:	d009      	beq.n	800e5a2 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e58e:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e590:	4290      	cmp	r0, r2
 800e592:	d019      	beq.n	800e5c8 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e594:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 800e596:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e598:	6840      	ldr	r0, [r0, #4]
 800e59a:	4401      	add	r1, r0
 800e59c:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800e59e:	4610      	mov	r0, r2
 800e5a0:	e7f0      	b.n	800e584 <prvInsertBlockIntoFreeList+0x14>
{
 800e5a2:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e5a4:	4c0a      	ldr	r4, [pc, #40]	@ (800e5d0 <prvInsertBlockIntoFreeList+0x60>)
 800e5a6:	6824      	ldr	r4, [r4, #0]
 800e5a8:	42a3      	cmp	r3, r4
 800e5aa:	d00b      	beq.n	800e5c4 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e5ac:	685b      	ldr	r3, [r3, #4]
 800e5ae:	4419      	add	r1, r3
 800e5b0:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e5b2:	6813      	ldr	r3, [r2, #0]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 800e5b8:	4290      	cmp	r0, r2
 800e5ba:	d000      	beq.n	800e5be <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e5bc:	6010      	str	r0, [r2, #0]
	}
}
 800e5be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5c2:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e5c4:	6004      	str	r4, [r0, #0]
 800e5c6:	e7f7      	b.n	800e5b8 <prvInsertBlockIntoFreeList+0x48>
 800e5c8:	4770      	bx	lr
 800e5ca:	bf00      	nop
 800e5cc:	2400359c 	.word	0x2400359c
 800e5d0:	24003598 	.word	0x24003598

0800e5d4 <pvPortMalloc>:
{
 800e5d4:	b538      	push	{r3, r4, r5, lr}
 800e5d6:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800e5d8:	f7ff f84a 	bl	800d670 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800e5dc:	4b38      	ldr	r3, [pc, #224]	@ (800e6c0 <pvPortMalloc+0xec>)
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	b1b3      	cbz	r3, 800e610 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e5e2:	4b38      	ldr	r3, [pc, #224]	@ (800e6c4 <pvPortMalloc+0xf0>)
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	421c      	tst	r4, r3
 800e5e8:	d150      	bne.n	800e68c <pvPortMalloc+0xb8>
			if( xWantedSize > 0 )
 800e5ea:	2c00      	cmp	r4, #0
 800e5ec:	d050      	beq.n	800e690 <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 800e5ee:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e5f2:	f014 0f07 	tst.w	r4, #7
 800e5f6:	d002      	beq.n	800e5fe <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e5f8:	f022 0207 	bic.w	r2, r2, #7
 800e5fc:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e5fe:	2a00      	cmp	r2, #0
 800e600:	d055      	beq.n	800e6ae <pvPortMalloc+0xda>
 800e602:	4b31      	ldr	r3, [pc, #196]	@ (800e6c8 <pvPortMalloc+0xf4>)
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	4293      	cmp	r3, r2
 800e608:	d353      	bcc.n	800e6b2 <pvPortMalloc+0xde>
				pxBlock = xStart.pxNextFreeBlock;
 800e60a:	4930      	ldr	r1, [pc, #192]	@ (800e6cc <pvPortMalloc+0xf8>)
 800e60c:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e60e:	e004      	b.n	800e61a <pvPortMalloc+0x46>
			prvHeapInit();
 800e610:	f7ff ff7c 	bl	800e50c <prvHeapInit>
 800e614:	e7e5      	b.n	800e5e2 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 800e616:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 800e618:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e61a:	6863      	ldr	r3, [r4, #4]
 800e61c:	4293      	cmp	r3, r2
 800e61e:	d202      	bcs.n	800e626 <pvPortMalloc+0x52>
 800e620:	6823      	ldr	r3, [r4, #0]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d1f7      	bne.n	800e616 <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 800e626:	4b26      	ldr	r3, [pc, #152]	@ (800e6c0 <pvPortMalloc+0xec>)
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	42a3      	cmp	r3, r4
 800e62c:	d043      	beq.n	800e6b6 <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e62e:	680d      	ldr	r5, [r1, #0]
 800e630:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e632:	6823      	ldr	r3, [r4, #0]
 800e634:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e636:	6863      	ldr	r3, [r4, #4]
 800e638:	1a9b      	subs	r3, r3, r2
 800e63a:	2b10      	cmp	r3, #16
 800e63c:	d910      	bls.n	800e660 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e63e:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e640:	f010 0f07 	tst.w	r0, #7
 800e644:	d008      	beq.n	800e658 <pvPortMalloc+0x84>
 800e646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e64a:	f383 8811 	msr	BASEPRI, r3
 800e64e:	f3bf 8f6f 	isb	sy
 800e652:	f3bf 8f4f 	dsb	sy
 800e656:	e7fe      	b.n	800e656 <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e658:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e65a:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e65c:	f7ff ff88 	bl	800e570 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e660:	6862      	ldr	r2, [r4, #4]
 800e662:	4919      	ldr	r1, [pc, #100]	@ (800e6c8 <pvPortMalloc+0xf4>)
 800e664:	680b      	ldr	r3, [r1, #0]
 800e666:	1a9b      	subs	r3, r3, r2
 800e668:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e66a:	4919      	ldr	r1, [pc, #100]	@ (800e6d0 <pvPortMalloc+0xfc>)
 800e66c:	6809      	ldr	r1, [r1, #0]
 800e66e:	428b      	cmp	r3, r1
 800e670:	d201      	bcs.n	800e676 <pvPortMalloc+0xa2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e672:	4917      	ldr	r1, [pc, #92]	@ (800e6d0 <pvPortMalloc+0xfc>)
 800e674:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e676:	4b13      	ldr	r3, [pc, #76]	@ (800e6c4 <pvPortMalloc+0xf0>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	4313      	orrs	r3, r2
 800e67c:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e67e:	2300      	movs	r3, #0
 800e680:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 800e682:	4a14      	ldr	r2, [pc, #80]	@ (800e6d4 <pvPortMalloc+0x100>)
 800e684:	6813      	ldr	r3, [r2, #0]
 800e686:	3301      	adds	r3, #1
 800e688:	6013      	str	r3, [r2, #0]
 800e68a:	e002      	b.n	800e692 <pvPortMalloc+0xbe>
void *pvReturn = NULL;
 800e68c:	2500      	movs	r5, #0
 800e68e:	e000      	b.n	800e692 <pvPortMalloc+0xbe>
 800e690:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 800e692:	f7ff f887 	bl	800d7a4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e696:	f015 0f07 	tst.w	r5, #7
 800e69a:	d00e      	beq.n	800e6ba <pvPortMalloc+0xe6>
 800e69c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6a0:	f383 8811 	msr	BASEPRI, r3
 800e6a4:	f3bf 8f6f 	isb	sy
 800e6a8:	f3bf 8f4f 	dsb	sy
 800e6ac:	e7fe      	b.n	800e6ac <pvPortMalloc+0xd8>
void *pvReturn = NULL;
 800e6ae:	2500      	movs	r5, #0
 800e6b0:	e7ef      	b.n	800e692 <pvPortMalloc+0xbe>
 800e6b2:	2500      	movs	r5, #0
 800e6b4:	e7ed      	b.n	800e692 <pvPortMalloc+0xbe>
 800e6b6:	2500      	movs	r5, #0
 800e6b8:	e7eb      	b.n	800e692 <pvPortMalloc+0xbe>
}
 800e6ba:	4628      	mov	r0, r5
 800e6bc:	bd38      	pop	{r3, r4, r5, pc}
 800e6be:	bf00      	nop
 800e6c0:	24003598 	.word	0x24003598
 800e6c4:	24003584 	.word	0x24003584
 800e6c8:	24003594 	.word	0x24003594
 800e6cc:	2400359c 	.word	0x2400359c
 800e6d0:	24003590 	.word	0x24003590
 800e6d4:	2400358c 	.word	0x2400358c

0800e6d8 <vPortFree>:
	if( pv != NULL )
 800e6d8:	2800      	cmp	r0, #0
 800e6da:	d034      	beq.n	800e746 <vPortFree+0x6e>
{
 800e6dc:	b538      	push	{r3, r4, r5, lr}
 800e6de:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800e6e0:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e6e4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800e6e8:	4a17      	ldr	r2, [pc, #92]	@ (800e748 <vPortFree+0x70>)
 800e6ea:	6812      	ldr	r2, [r2, #0]
 800e6ec:	4213      	tst	r3, r2
 800e6ee:	d108      	bne.n	800e702 <vPortFree+0x2a>
 800e6f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6f4:	f383 8811 	msr	BASEPRI, r3
 800e6f8:	f3bf 8f6f 	isb	sy
 800e6fc:	f3bf 8f4f 	dsb	sy
 800e700:	e7fe      	b.n	800e700 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e702:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800e706:	b141      	cbz	r1, 800e71a <vPortFree+0x42>
 800e708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e70c:	f383 8811 	msr	BASEPRI, r3
 800e710:	f3bf 8f6f 	isb	sy
 800e714:	f3bf 8f4f 	dsb	sy
 800e718:	e7fe      	b.n	800e718 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e71a:	ea23 0302 	bic.w	r3, r3, r2
 800e71e:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800e722:	f7fe ffa5 	bl	800d670 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e726:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800e72a:	4a08      	ldr	r2, [pc, #32]	@ (800e74c <vPortFree+0x74>)
 800e72c:	6813      	ldr	r3, [r2, #0]
 800e72e:	440b      	add	r3, r1
 800e730:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e732:	4628      	mov	r0, r5
 800e734:	f7ff ff1c 	bl	800e570 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e738:	4a05      	ldr	r2, [pc, #20]	@ (800e750 <vPortFree+0x78>)
 800e73a:	6813      	ldr	r3, [r2, #0]
 800e73c:	3301      	adds	r3, #1
 800e73e:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800e740:	f7ff f830 	bl	800d7a4 <xTaskResumeAll>
}
 800e744:	bd38      	pop	{r3, r4, r5, pc}
 800e746:	4770      	bx	lr
 800e748:	24003584 	.word	0x24003584
 800e74c:	24003594 	.word	0x24003594
 800e750:	24003588 	.word	0x24003588

0800e754 <_Z11StartupLEDSP4LEDS>:
/**
 * @brief LEDs after initialization
 *
 * @param input leds: LEDS instance pointer
 */
void StartupLEDS(LEDS* leds) {
 800e754:	b510      	push	{r4, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
 800e756:	2300      	movs	r3, #0
 800e758:	b086      	sub	sp, #24
 800e75a:	4604      	mov	r4, r0
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800e75c:	2001      	movs	r0, #1
 800e75e:	9305      	str	r3, [sp, #20]
 800e760:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800e764:	f00c f84b 	bl	801a7fe <_Znwj>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800e768:	2205      	movs	r2, #5
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800e76a:	1c43      	adds	r3, r0, #1
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800e76c:	9003      	str	r0, [sp, #12]
 800e76e:	7002      	strb	r2, [r0, #0]
#ifdef USE_SMD_LEDs
	leds->ConfigureTimings(LED_STATUS, std::vector<uint8_t>{5}, 10);
 800e770:	2107      	movs	r1, #7
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800e772:	9305      	str	r3, [sp, #20]
 800e774:	aa03      	add	r2, sp, #12
	  this->_M_impl._M_finish =
 800e776:	9304      	str	r3, [sp, #16]
 800e778:	4620      	mov	r0, r4
 800e77a:	230a      	movs	r3, #10
 800e77c:	f005 ff79 	bl	8014672 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
	_M_deallocate(_M_impl._M_start,
 800e780:	9803      	ldr	r0, [sp, #12]
	if (__p)
 800e782:	b118      	cbz	r0, 800e78c <_Z11StartupLEDSP4LEDS+0x38>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800e784:	9905      	ldr	r1, [sp, #20]
 800e786:	1a09      	subs	r1, r1, r0
 800e788:	f00c f814 	bl	801a7b4 <_ZdlPvj>
	leds->Blink(LED_STATUS); // blink until ID allocated
 800e78c:	2107      	movs	r1, #7
 800e78e:	4620      	mov	r0, r4
 800e790:	f005 fa19 	bl	8013bc6 <_ZN4LEDS5BlinkEh>

	leds->SetRGB(LED_RGB, 0, 0, 0);
 800e794:	2300      	movs	r3, #0
 800e796:	210d      	movs	r1, #13
 800e798:	4620      	mov	r0, r4
 800e79a:	461a      	mov	r2, r3
 800e79c:	9300      	str	r3, [sp, #0]
 800e79e:	f005 fa6c 	bl	8013c7a <_ZN4LEDS6SetRGBEhhhh>
#endif
}
 800e7a2:	b006      	add	sp, #24
 800e7a4:	bd10      	pop	{r4, pc}

0800e7a6 <_Z11IDFoundLEDSP4LEDS>:
 *
 * @param input leds: LEDS instance pointer
 */
void IDFoundLEDS(LEDS* leds) {
#ifdef USE_SMD_LEDs
	leds->SetLED(LED_STATUS, GPIO_PIN_SET);
 800e7a6:	2201      	movs	r2, #1
 800e7a8:	2107      	movs	r1, #7
 800e7aa:	f005 b9eb 	b.w	8013b84 <_ZN4LEDS6SetLEDEh13GPIO_PinState>

0800e7ae <_Z16CommunicationLEDP4LEDSh>:
 * @param input leds: LEDS instance pointer
 * @param input interface_ID: the interface from Communication that asks for a LED single blinking. The ID should be the same than the LED ID
 */
void CommunicationLED(LEDS* leds, uint8_t interface_ID) {
#ifdef USE_SMD_LEDs
	if (interface_ID == UART_PIC || interface_ID == UART_EXTENSION) return; // no LED for these interfaces
 800e7ae:	1f4b      	subs	r3, r1, #5
 800e7b0:	2b01      	cmp	r3, #1
 800e7b2:	d901      	bls.n	800e7b8 <_Z16CommunicationLEDP4LEDSh+0xa>

	leds->BlinkOnce(interface_ID);
 800e7b4:	f005 ba2a 	b.w	8013c0c <_ZN4LEDS9BlinkOnceEh>
#endif
}
 800e7b8:	4770      	bx	lr
	...

0800e7bc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>:
 *
 * @param output success: whether successful
 * @return the type ID corresponding to the input template type
 */
template <typename T>
uint8_t Registers::GetTypeID (bool* success) {
 800e7bc:	b510      	push	{r4, lr}
	uint8_t type = 0;

	if (false) {}
#ifdef USE_UINT8_REGISTER
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800e7be:	4926      	ldr	r1, [pc, #152]	@ (800e858 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 800e7c0:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800e7c2:	4826      	ldr	r0, [pc, #152]	@ (800e85c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800e7c4:	f00c f8b2 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 800e7c8:	2800      	cmp	r0, #0
 800e7ca:	d133      	bne.n	800e834 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x78>
#endif
#ifdef USE_UINT16_REGISTER
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800e7cc:	4924      	ldr	r1, [pc, #144]	@ (800e860 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa4>)
 800e7ce:	4823      	ldr	r0, [pc, #140]	@ (800e85c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800e7d0:	f00c f8ac 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 800e7d4:	2800      	cmp	r0, #0
 800e7d6:	d12f      	bne.n	800e838 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x7c>
#endif
#ifdef USE_UINT32_REGISTER
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800e7d8:	4922      	ldr	r1, [pc, #136]	@ (800e864 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa8>)
 800e7da:	4820      	ldr	r0, [pc, #128]	@ (800e85c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800e7dc:	f00c f8a6 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 800e7e0:	bb60      	cbnz	r0, 800e83c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>
#endif
#ifdef USE_UINT64_REGISTER
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800e7e2:	4921      	ldr	r1, [pc, #132]	@ (800e868 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xac>)
 800e7e4:	481d      	ldr	r0, [pc, #116]	@ (800e85c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800e7e6:	f00c f8a1 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 800e7ea:	bb48      	cbnz	r0, 800e840 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x84>
#endif
#ifdef USE_INT8_REGISTER
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800e7ec:	491f      	ldr	r1, [pc, #124]	@ (800e86c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xb0>)
 800e7ee:	481b      	ldr	r0, [pc, #108]	@ (800e85c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800e7f0:	f00c f89c 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 800e7f4:	bb30      	cbnz	r0, 800e844 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x88>
#endif
#ifdef USE_INT16_REGISTER
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 800e7f6:	491e      	ldr	r1, [pc, #120]	@ (800e870 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xb4>)
 800e7f8:	4818      	ldr	r0, [pc, #96]	@ (800e85c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800e7fa:	f00c f897 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 800e7fe:	bb18      	cbnz	r0, 800e848 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x8c>
#endif
#ifdef USE_INT32_REGISTER
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800e800:	491c      	ldr	r1, [pc, #112]	@ (800e874 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xb8>)
 800e802:	4816      	ldr	r0, [pc, #88]	@ (800e85c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800e804:	f00c f892 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 800e808:	bb00      	cbnz	r0, 800e84c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x90>
#endif
#ifdef USE_INT64_REGISTER
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 800e80a:	491b      	ldr	r1, [pc, #108]	@ (800e878 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xbc>)
 800e80c:	4813      	ldr	r0, [pc, #76]	@ (800e85c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800e80e:	f00c f88d 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 800e812:	b9e8      	cbnz	r0, 800e850 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x94>
#endif
#ifdef USE_FLOAT_REGISTER
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800e814:	4911      	ldr	r1, [pc, #68]	@ (800e85c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800e816:	4608      	mov	r0, r1
 800e818:	f00c f888 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 800e81c:	b9d0      	cbnz	r0, 800e854 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x98>
#endif
#ifdef USE_DOUBLE_REGISTER
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 800e81e:	4917      	ldr	r1, [pc, #92]	@ (800e87c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xc0>)
 800e820:	480e      	ldr	r0, [pc, #56]	@ (800e85c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800e822:	f00c f883 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
#endif
	else {*success = false; return 0;}
 800e826:	2800      	cmp	r0, #0
 800e828:	bf14      	ite	ne
 800e82a:	2309      	movne	r3, #9
 800e82c:	2300      	moveq	r3, #0
 800e82e:	7020      	strb	r0, [r4, #0]

	*success = true;
	return type;
}
 800e830:	4618      	mov	r0, r3
 800e832:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800e834:	2300      	movs	r3, #0
 800e836:	e7fa      	b.n	800e82e <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800e838:	2301      	movs	r3, #1
 800e83a:	e7f8      	b.n	800e82e <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800e83c:	2302      	movs	r3, #2
 800e83e:	e7f6      	b.n	800e82e <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800e840:	2303      	movs	r3, #3
 800e842:	e7f4      	b.n	800e82e <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800e844:	2304      	movs	r3, #4
 800e846:	e7f2      	b.n	800e82e <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 800e848:	2305      	movs	r3, #5
 800e84a:	e7f0      	b.n	800e82e <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800e84c:	2306      	movs	r3, #6
 800e84e:	e7ee      	b.n	800e82e <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 800e850:	2307      	movs	r3, #7
 800e852:	e7ec      	b.n	800e82e <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800e854:	2308      	movs	r3, #8
 800e856:	e7ea      	b.n	800e82e <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
 800e858:	0801b5d4 	.word	0x0801b5d4
 800e85c:	0801b59c 	.word	0x0801b59c
 800e860:	0801b5c4 	.word	0x0801b5c4
 800e864:	0801b5b4 	.word	0x0801b5b4
 800e868:	0801b5a4 	.word	0x0801b5a4
 800e86c:	0801b5dc 	.word	0x0801b5dc
 800e870:	0801b5cc 	.word	0x0801b5cc
 800e874:	0801b5bc 	.word	0x0801b5bc
 800e878:	0801b5ac 	.word	0x0801b5ac
 800e87c:	0801b594 	.word	0x0801b594

0800e880 <_ZN15PlatformSensorsC1Ev>:
/**
 * @brief Class constructor
 */
PlatformSensors::PlatformSensors() {

}
 800e880:	4770      	bx	lr
	...

0800e884 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb>:
 * @param output length: output length
 * @param input use_semaphore: false to disable the use of semaphores for this access. DEFAULT=true
 * @return whether successful
 */
template <typename T>
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 800e884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e888:	f2ad 4d14 	subw	sp, sp, #1044	@ 0x414
 800e88c:	4689      	mov	r9, r1
	bool success;
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800e88e:	f04f 31ff 	mov.w	r1, #4294967295
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 800e892:	461f      	mov	r7, r3
 800e894:	9000      	str	r0, [sp, #0]
 800e896:	4614      	mov	r4, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800e898:	6800      	ldr	r0, [r0, #0]
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 800e89a:	f89d b438 	ldrb.w	fp, [sp, #1080]	@ 0x438
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800e89e:	f7fd fe49 	bl	800c534 <osSemaphoreAcquire>
	// Find register
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 800e8a2:	f10d 020f 	add.w	r2, sp, #15
 800e8a6:	4649      	mov	r1, r9
 800e8a8:	9800      	ldr	r0, [sp, #0]
 800e8aa:	f009 fc50 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 800e8ae:	f89d 300f 	ldrb.w	r3, [sp, #15]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 800e8b2:	4605      	mov	r5, r0
	if (!success) {
 800e8b4:	b953      	cbnz	r3, 800e8cc <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x48>
	}

	// Get type ID
	uint8_t registered_type = GetTypeID<T>(&success);
	if (!success) {
		osSemaphoreRelease(RegistersSemaphore);
 800e8b6:	9b00      	ldr	r3, [sp, #0]
		return false;
 800e8b8:	f04f 0a00 	mov.w	sl, #0
		osSemaphoreRelease(RegistersSemaphore);
 800e8bc:	6818      	ldr	r0, [r3, #0]
 800e8be:	f7fd fe6d 	bl	800c59c <osSemaphoreRelease>
		osSemaphoreRelease(RegistersSemaphore);
		return true;
	}
	osSemaphoreRelease(RegistersSemaphore);
	return true;
}
 800e8c2:	4650      	mov	r0, sl
 800e8c4:	f20d 4d14 	addw	sp, sp, #1044	@ 0x414
 800e8c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 800e8cc:	f10d 000f 	add.w	r0, sp, #15
 800e8d0:	f7ff ff74 	bl	800e7bc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>
	if (!success) {
 800e8d4:	f89d a00f 	ldrb.w	sl, [sp, #15]
 800e8d8:	f1ba 0f00 	cmp.w	sl, #0
 800e8dc:	d0eb      	beq.n	800e8b6 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x32>
	if (target_register->register_info.type != registered_type) {
 800e8de:	792b      	ldrb	r3, [r5, #4]
 800e8e0:	4283      	cmp	r3, r0
 800e8e2:	d1e8      	bne.n	800e8b6 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x32>
	if (callbacks[target_register->register_info.type] == NULL) {
 800e8e4:	3304      	adds	r3, #4
 800e8e6:	9a00      	ldr	r2, [sp, #0]
 800e8e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d0e2      	beq.n	800e8b6 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x32>
	if (target_register->access.read) {
 800e8f0:	7a6a      	ldrb	r2, [r5, #9]
 800e8f2:	2a00      	cmp	r2, #0
 800e8f4:	d05f      	beq.n	800e9b6 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x132>
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 800e8f6:	8969      	ldrh	r1, [r5, #10]
		success = false; // false by default to use pointer mode if the callback doesn't update the flag
 800e8f8:	2200      	movs	r2, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800e8fa:	e9d3 0300 	ldrd	r0, r3, [r3]
 800e8fe:	f88d 200f 	strb.w	r2, [sp, #15]
 800e902:	1a1b      	subs	r3, r3, r0
	if (__n >= this->size())
 800e904:	ebb1 1f23 	cmp.w	r1, r3, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800e908:	ea4f 1223 	mov.w	r2, r3, asr #4
	if (__n >= this->size())
 800e90c:	d302      	bcc.n	800e914 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x90>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 800e90e:	4839      	ldr	r0, [pc, #228]	@ (800e9f4 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x170>)
 800e910:	f00c f82d 	bl	801a96e <_ZSt24__throw_out_of_range_fmtPKcz>
	return *(this->_M_impl._M_start + __n);
 800e914:	010b      	lsls	r3, r1, #4
 800e916:	eb00 1101 	add.w	r1, r0, r1, lsl #4
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 800e91a:	f850 8003 	ldr.w	r8, [r0, r3]
 800e91e:	684b      	ldr	r3, [r1, #4]
 800e920:	9301      	str	r3, [sp, #4]
 800e922:	68cb      	ldr	r3, [r1, #12]
 800e924:	461e      	mov	r6, r3
		if (use_semaphore && target_register->register_semaphore != NULL) {
 800e926:	f1bb 0f00 	cmp.w	fp, #0
 800e92a:	d006      	beq.n	800e93a <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xb6>
 800e92c:	68eb      	ldr	r3, [r5, #12]
 800e92e:	b123      	cbz	r3, 800e93a <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xb6>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 800e930:	f04f 31ff 	mov.w	r1, #4294967295
 800e934:	6818      	ldr	r0, [r3, #0]
 800e936:	f7fd fdfd 	bl	800c534 <osSemaphoreAcquire>
		if (target_register->mode.callbacks) {
 800e93a:	786b      	ldrb	r3, [r5, #1]
 800e93c:	b1e3      	cbz	r3, 800e978 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xf4>
			if (output != NULL) {
 800e93e:	2c00      	cmp	r4, #0
 800e940:	d03e      	beq.n	800e9c0 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x13c>
				*callback_output = output;
 800e942:	4622      	mov	r2, r4
 800e944:	2300      	movs	r3, #0
 800e946:	601a      	str	r2, [r3, #0]
			if (callbacks.read != NULL) {
 800e948:	b1b6      	cbz	r6, 800e978 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xf4>
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 800e94a:	463b      	mov	r3, r7
 800e94c:	2200      	movs	r2, #0
 800e94e:	4649      	mov	r1, r9
 800e950:	9801      	ldr	r0, [sp, #4]
 800e952:	47b0      	blx	r6
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 800e954:	796b      	ldrb	r3, [r5, #5]
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 800e956:	f88d 000f 	strb.w	r0, [sp, #15]
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d032      	beq.n	800e9c4 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x140>
 800e95e:	88eb      	ldrh	r3, [r5, #6]
 800e960:	b103      	cbz	r3, 800e964 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xe0>
					*length = 1;
 800e962:	803b      	strh	r3, [r7, #0]
				if (*callback_output != output && output != NULL) {
 800e964:	2300      	movs	r3, #0
 800e966:	6819      	ldr	r1, [r3, #0]
 800e968:	42a1      	cmp	r1, r4
 800e96a:	d005      	beq.n	800e978 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xf4>
 800e96c:	b124      	cbz	r4, 800e978 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xf4>
						output[index] = (*callback_output )[index];
 800e96e:	883a      	ldrh	r2, [r7, #0]
 800e970:	4620      	mov	r0, r4
 800e972:	0092      	lsls	r2, r2, #2
 800e974:	f00c fb72 	bl	801b05c <memcpy>
		if (not success && target_register->mode.pointer) {
 800e978:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800e97c:	b99b      	cbnz	r3, 800e9a6 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x122>
 800e97e:	782b      	ldrb	r3, [r5, #0]
 800e980:	b18b      	cbz	r3, 800e9a6 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x122>
			success = true;
 800e982:	2301      	movs	r3, #1
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 800e984:	796a      	ldrb	r2, [r5, #5]
			success = true;
 800e986:	f88d 300f 	strb.w	r3, [sp, #15]
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 800e98a:	b35a      	cbz	r2, 800e9e4 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x160>
 800e98c:	88ea      	ldrh	r2, [r5, #6]
 800e98e:	bb02      	cbnz	r2, 800e9d2 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x14e>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800e990:	e9d8 2300 	ldrd	r2, r3, [r8]
 800e994:	1a9b      	subs	r3, r3, r2
 800e996:	109b      	asrs	r3, r3, #2
				*length = register_vector->size();
 800e998:	803b      	strh	r3, [r7, #0]
				if (output != NULL) {
 800e99a:	b124      	cbz	r4, 800e9a6 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x122>
 800e99c:	b29b      	uxth	r3, r3
 800e99e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
					for (uint16_t index = 0; index < *length; index++) {
 800e9a2:	429a      	cmp	r2, r3
 800e9a4:	d110      	bne.n	800e9c8 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x144>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 800e9a6:	f1bb 0f00 	cmp.w	fp, #0
 800e9aa:	d004      	beq.n	800e9b6 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x132>
 800e9ac:	68eb      	ldr	r3, [r5, #12]
 800e9ae:	b113      	cbz	r3, 800e9b6 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x132>
			osSemaphoreRelease(*(target_register->register_semaphore));
 800e9b0:	6818      	ldr	r0, [r3, #0]
 800e9b2:	f7fd fdf3 	bl	800c59c <osSemaphoreRelease>
	osSemaphoreRelease(RegistersSemaphore);
 800e9b6:	9b00      	ldr	r3, [sp, #0]
 800e9b8:	6818      	ldr	r0, [r3, #0]
 800e9ba:	f7fd fdef 	bl	800c59c <osSemaphoreRelease>
	return true;
 800e9be:	e780      	b.n	800e8c2 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x3e>
				*callback_output = output_buffer; // use a temporary buffer to store values if not input. TODO the size is limited so there is possibly an issue if output == NULL and length > 256
 800e9c0:	aa04      	add	r2, sp, #16
 800e9c2:	e7bf      	b.n	800e944 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xc0>
					*length = 1;
 800e9c4:	2301      	movs	r3, #1
 800e9c6:	e7cc      	b.n	800e962 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xde>
						output[index] = (*register_vector)[index];
 800e9c8:	f852 1b04 	ldr.w	r1, [r2], #4
 800e9cc:	f844 1b04 	str.w	r1, [r4], #4
					for (uint16_t index = 0; index < *length; index++) {
 800e9d0:	e7e7      	b.n	800e9a2 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x11e>
				*length = target_register->register_info.length;
 800e9d2:	803a      	strh	r2, [r7, #0]
				if (output != NULL) {
 800e9d4:	2c00      	cmp	r4, #0
 800e9d6:	d0e6      	beq.n	800e9a6 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x122>
 800e9d8:	0092      	lsls	r2, r2, #2
 800e9da:	4641      	mov	r1, r8
 800e9dc:	4620      	mov	r0, r4
 800e9de:	f00c fa45 	bl	801ae6c <memmove>
	  return __result + _Num;
 800e9e2:	e7e0      	b.n	800e9a6 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x122>
				*length = 1;
 800e9e4:	803b      	strh	r3, [r7, #0]
				if (output != NULL) {
 800e9e6:	2c00      	cmp	r4, #0
 800e9e8:	d0dd      	beq.n	800e9a6 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x122>
					*output = *callbacks.pointer;
 800e9ea:	f8d8 3000 	ldr.w	r3, [r8]
 800e9ee:	6023      	str	r3, [r4, #0]
 800e9f0:	e7d9      	b.n	800e9a6 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x122>
 800e9f2:	bf00      	nop
 800e9f4:	0801b3bc 	.word	0x0801b3bc

0800e9f8 <_ZNSt12_Vector_baseIP21CommunicationProtocolSaIS1_EE13_M_deallocateEPS1_j.part.0>:
 800e9f8:	0089      	lsls	r1, r1, #2
 800e9fa:	f00b bedb 	b.w	801a7b4 <_ZdlPvj>

0800e9fe <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
 800e9fe:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800ea00:	b170      	cbz	r0, 800ea20 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0+0x22>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800ea02:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 800ea06:	d306      	bcc.n	800ea16 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0+0x18>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800ea08:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800ea0c:	d301      	bcc.n	800ea12 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0+0x14>
	      std::__throw_bad_array_new_length();
 800ea0e:	f00b ffa8 	bl	801a962 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800ea12:	f00b ffa3 	bl	801a95c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800ea16:	0080      	lsls	r0, r0, #2
      }
 800ea18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ea1c:	f00b beef 	b.w	801a7fe <_Znwj>
 800ea20:	bd08      	pop	{r3, pc}

0800ea22 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800ea22:	2800      	cmp	r0, #0
      _M_allocate(size_t __n)
 800ea24:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800ea26:	d006      	beq.n	800ea36 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0+0x14>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800ea28:	da01      	bge.n	800ea2e <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0+0xc>
	    std::__throw_bad_alloc();
 800ea2a:	f00b ff97 	bl	801a95c <_ZSt17__throw_bad_allocv>
      }
 800ea2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800ea32:	f00b bee4 	b.w	801a7fe <_Znwj>
 800ea36:	bd08      	pop	{r3, pc}

0800ea38 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
 800ea38:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800ea3a:	b170      	cbz	r0, 800ea5a <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0+0x22>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800ea3c:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 800ea40:	d306      	bcc.n	800ea50 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0+0x18>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800ea42:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800ea46:	d301      	bcc.n	800ea4c <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0+0x14>
	      std::__throw_bad_array_new_length();
 800ea48:	f00b ff8b 	bl	801a962 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800ea4c:	f00b ff86 	bl	801a95c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800ea50:	0080      	lsls	r0, r0, #2
      }
 800ea52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ea56:	f00b bed2 	b.w	801a7fe <_Znwj>
 800ea5a:	bd08      	pop	{r3, pc}

0800ea5c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 800ea5c:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800ea5e:	4926      	ldr	r1, [pc, #152]	@ (800eaf8 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 800ea60:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800ea62:	4826      	ldr	r0, [pc, #152]	@ (800eafc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800ea64:	f00b ff62 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 800ea68:	2800      	cmp	r0, #0
 800ea6a:	d133      	bne.n	800ead4 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800ea6c:	4924      	ldr	r1, [pc, #144]	@ (800eb00 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa4>)
 800ea6e:	4823      	ldr	r0, [pc, #140]	@ (800eafc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800ea70:	f00b ff5c 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 800ea74:	2800      	cmp	r0, #0
 800ea76:	d12f      	bne.n	800ead8 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800ea78:	4922      	ldr	r1, [pc, #136]	@ (800eb04 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa8>)
 800ea7a:	4820      	ldr	r0, [pc, #128]	@ (800eafc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800ea7c:	f00b ff56 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 800ea80:	bb60      	cbnz	r0, 800eadc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800ea82:	4921      	ldr	r1, [pc, #132]	@ (800eb08 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xac>)
 800ea84:	481d      	ldr	r0, [pc, #116]	@ (800eafc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800ea86:	f00b ff51 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 800ea8a:	bb48      	cbnz	r0, 800eae0 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800ea8c:	491f      	ldr	r1, [pc, #124]	@ (800eb0c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xb0>)
 800ea8e:	481b      	ldr	r0, [pc, #108]	@ (800eafc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800ea90:	f00b ff4c 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 800ea94:	bb30      	cbnz	r0, 800eae4 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 800ea96:	491e      	ldr	r1, [pc, #120]	@ (800eb10 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xb4>)
 800ea98:	4818      	ldr	r0, [pc, #96]	@ (800eafc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800ea9a:	f00b ff47 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 800ea9e:	bb18      	cbnz	r0, 800eae8 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800eaa0:	491c      	ldr	r1, [pc, #112]	@ (800eb14 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xb8>)
 800eaa2:	4816      	ldr	r0, [pc, #88]	@ (800eafc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800eaa4:	f00b ff42 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 800eaa8:	bb00      	cbnz	r0, 800eaec <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 800eaaa:	491b      	ldr	r1, [pc, #108]	@ (800eb18 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xbc>)
 800eaac:	4813      	ldr	r0, [pc, #76]	@ (800eafc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800eaae:	f00b ff3d 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 800eab2:	b9e8      	cbnz	r0, 800eaf0 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800eab4:	4911      	ldr	r1, [pc, #68]	@ (800eafc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800eab6:	4608      	mov	r0, r1
 800eab8:	f00b ff38 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 800eabc:	b9d0      	cbnz	r0, 800eaf4 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 800eabe:	4917      	ldr	r1, [pc, #92]	@ (800eb1c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xc0>)
 800eac0:	480e      	ldr	r0, [pc, #56]	@ (800eafc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800eac2:	f00b ff33 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 800eac6:	2800      	cmp	r0, #0
 800eac8:	bf14      	ite	ne
 800eaca:	2309      	movne	r3, #9
 800eacc:	2300      	moveq	r3, #0
 800eace:	7020      	strb	r0, [r4, #0]
}
 800ead0:	4618      	mov	r0, r3
 800ead2:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800ead4:	2300      	movs	r3, #0
 800ead6:	e7fa      	b.n	800eace <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800ead8:	2301      	movs	r3, #1
 800eada:	e7f8      	b.n	800eace <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800eadc:	2302      	movs	r3, #2
 800eade:	e7f6      	b.n	800eace <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800eae0:	2303      	movs	r3, #3
 800eae2:	e7f4      	b.n	800eace <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800eae4:	2304      	movs	r3, #4
 800eae6:	e7f2      	b.n	800eace <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 800eae8:	2305      	movs	r3, #5
 800eaea:	e7f0      	b.n	800eace <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800eaec:	2306      	movs	r3, #6
 800eaee:	e7ee      	b.n	800eace <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 800eaf0:	2307      	movs	r3, #7
 800eaf2:	e7ec      	b.n	800eace <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800eaf4:	2308      	movs	r3, #8
 800eaf6:	e7ea      	b.n	800eace <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
 800eaf8:	0801b5d4 	.word	0x0801b5d4
 800eafc:	0801b59c 	.word	0x0801b59c
 800eb00:	0801b5c4 	.word	0x0801b5c4
 800eb04:	0801b5b4 	.word	0x0801b5b4
 800eb08:	0801b5a4 	.word	0x0801b5a4
 800eb0c:	0801b5dc 	.word	0x0801b5dc
 800eb10:	0801b5cc 	.word	0x0801b5cc
 800eb14:	0801b5bc 	.word	0x0801b5bc
 800eb18:	0801b5ac 	.word	0x0801b5ac
 800eb1c:	0801b594 	.word	0x0801b594

0800eb20 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 800eb20:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800eb22:	4926      	ldr	r1, [pc, #152]	@ (800ebbc <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 800eb24:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800eb26:	4826      	ldr	r0, [pc, #152]	@ (800ebc0 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 800eb28:	f00b ff00 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 800eb2c:	2800      	cmp	r0, #0
 800eb2e:	d133      	bne.n	800eb98 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800eb30:	4924      	ldr	r1, [pc, #144]	@ (800ebc4 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa4>)
 800eb32:	4823      	ldr	r0, [pc, #140]	@ (800ebc0 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 800eb34:	f00b fefa 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 800eb38:	2800      	cmp	r0, #0
 800eb3a:	d12f      	bne.n	800eb9c <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800eb3c:	4922      	ldr	r1, [pc, #136]	@ (800ebc8 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa8>)
 800eb3e:	4820      	ldr	r0, [pc, #128]	@ (800ebc0 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 800eb40:	f00b fef4 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 800eb44:	bb60      	cbnz	r0, 800eba0 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800eb46:	4921      	ldr	r1, [pc, #132]	@ (800ebcc <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xac>)
 800eb48:	481d      	ldr	r0, [pc, #116]	@ (800ebc0 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 800eb4a:	f00b feef 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 800eb4e:	bb48      	cbnz	r0, 800eba4 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800eb50:	491b      	ldr	r1, [pc, #108]	@ (800ebc0 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 800eb52:	4608      	mov	r0, r1
 800eb54:	f00b feea 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 800eb58:	bb30      	cbnz	r0, 800eba8 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 800eb5a:	491d      	ldr	r1, [pc, #116]	@ (800ebd0 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xb0>)
 800eb5c:	4818      	ldr	r0, [pc, #96]	@ (800ebc0 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 800eb5e:	f00b fee5 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 800eb62:	bb18      	cbnz	r0, 800ebac <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800eb64:	491b      	ldr	r1, [pc, #108]	@ (800ebd4 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xb4>)
 800eb66:	4816      	ldr	r0, [pc, #88]	@ (800ebc0 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 800eb68:	f00b fee0 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 800eb6c:	bb00      	cbnz	r0, 800ebb0 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 800eb6e:	491a      	ldr	r1, [pc, #104]	@ (800ebd8 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xb8>)
 800eb70:	4813      	ldr	r0, [pc, #76]	@ (800ebc0 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 800eb72:	f00b fedb 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 800eb76:	b9e8      	cbnz	r0, 800ebb4 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800eb78:	4918      	ldr	r1, [pc, #96]	@ (800ebdc <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xbc>)
 800eb7a:	4811      	ldr	r0, [pc, #68]	@ (800ebc0 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 800eb7c:	f00b fed6 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 800eb80:	b9d0      	cbnz	r0, 800ebb8 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 800eb82:	4917      	ldr	r1, [pc, #92]	@ (800ebe0 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xc0>)
 800eb84:	480e      	ldr	r0, [pc, #56]	@ (800ebc0 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 800eb86:	f00b fed1 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 800eb8a:	2800      	cmp	r0, #0
 800eb8c:	bf14      	ite	ne
 800eb8e:	2309      	movne	r3, #9
 800eb90:	2300      	moveq	r3, #0
 800eb92:	7020      	strb	r0, [r4, #0]
}
 800eb94:	4618      	mov	r0, r3
 800eb96:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800eb98:	2300      	movs	r3, #0
 800eb9a:	e7fa      	b.n	800eb92 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800eb9c:	2301      	movs	r3, #1
 800eb9e:	e7f8      	b.n	800eb92 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800eba0:	2302      	movs	r3, #2
 800eba2:	e7f6      	b.n	800eb92 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800eba4:	2303      	movs	r3, #3
 800eba6:	e7f4      	b.n	800eb92 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800eba8:	2304      	movs	r3, #4
 800ebaa:	e7f2      	b.n	800eb92 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 800ebac:	2305      	movs	r3, #5
 800ebae:	e7f0      	b.n	800eb92 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800ebb0:	2306      	movs	r3, #6
 800ebb2:	e7ee      	b.n	800eb92 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 800ebb4:	2307      	movs	r3, #7
 800ebb6:	e7ec      	b.n	800eb92 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800ebb8:	2308      	movs	r3, #8
 800ebba:	e7ea      	b.n	800eb92 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
 800ebbc:	0801b5d4 	.word	0x0801b5d4
 800ebc0:	0801b5dc 	.word	0x0801b5dc
 800ebc4:	0801b5c4 	.word	0x0801b5c4
 800ebc8:	0801b5b4 	.word	0x0801b5b4
 800ebcc:	0801b5a4 	.word	0x0801b5a4
 800ebd0:	0801b5cc 	.word	0x0801b5cc
 800ebd4:	0801b5bc 	.word	0x0801b5bc
 800ebd8:	0801b5ac 	.word	0x0801b5ac
 800ebdc:	0801b59c 	.word	0x0801b59c
 800ebe0:	0801b594 	.word	0x0801b594

0800ebe4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 800ebe4:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800ebe6:	4926      	ldr	r1, [pc, #152]	@ (800ec80 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 800ebe8:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800ebea:	4826      	ldr	r0, [pc, #152]	@ (800ec84 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 800ebec:	f00b fe9e 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 800ebf0:	2800      	cmp	r0, #0
 800ebf2:	d133      	bne.n	800ec5c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800ebf4:	4924      	ldr	r1, [pc, #144]	@ (800ec88 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa4>)
 800ebf6:	4823      	ldr	r0, [pc, #140]	@ (800ec84 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 800ebf8:	f00b fe98 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 800ebfc:	2800      	cmp	r0, #0
 800ebfe:	d12f      	bne.n	800ec60 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800ec00:	4920      	ldr	r1, [pc, #128]	@ (800ec84 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 800ec02:	4608      	mov	r0, r1
 800ec04:	f00b fe92 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 800ec08:	bb60      	cbnz	r0, 800ec64 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800ec0a:	4920      	ldr	r1, [pc, #128]	@ (800ec8c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa8>)
 800ec0c:	481d      	ldr	r0, [pc, #116]	@ (800ec84 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 800ec0e:	f00b fe8d 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 800ec12:	bb48      	cbnz	r0, 800ec68 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800ec14:	491e      	ldr	r1, [pc, #120]	@ (800ec90 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xac>)
 800ec16:	481b      	ldr	r0, [pc, #108]	@ (800ec84 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 800ec18:	f00b fe88 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 800ec1c:	bb30      	cbnz	r0, 800ec6c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 800ec1e:	491d      	ldr	r1, [pc, #116]	@ (800ec94 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xb0>)
 800ec20:	4818      	ldr	r0, [pc, #96]	@ (800ec84 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 800ec22:	f00b fe83 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 800ec26:	bb18      	cbnz	r0, 800ec70 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800ec28:	491b      	ldr	r1, [pc, #108]	@ (800ec98 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xb4>)
 800ec2a:	4816      	ldr	r0, [pc, #88]	@ (800ec84 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 800ec2c:	f00b fe7e 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 800ec30:	bb00      	cbnz	r0, 800ec74 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 800ec32:	491a      	ldr	r1, [pc, #104]	@ (800ec9c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xb8>)
 800ec34:	4813      	ldr	r0, [pc, #76]	@ (800ec84 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 800ec36:	f00b fe79 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 800ec3a:	b9e8      	cbnz	r0, 800ec78 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800ec3c:	4918      	ldr	r1, [pc, #96]	@ (800eca0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xbc>)
 800ec3e:	4811      	ldr	r0, [pc, #68]	@ (800ec84 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 800ec40:	f00b fe74 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 800ec44:	b9d0      	cbnz	r0, 800ec7c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 800ec46:	4917      	ldr	r1, [pc, #92]	@ (800eca4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xc0>)
 800ec48:	480e      	ldr	r0, [pc, #56]	@ (800ec84 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 800ec4a:	f00b fe6f 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 800ec4e:	2800      	cmp	r0, #0
 800ec50:	bf14      	ite	ne
 800ec52:	2309      	movne	r3, #9
 800ec54:	2300      	moveq	r3, #0
 800ec56:	7020      	strb	r0, [r4, #0]
}
 800ec58:	4618      	mov	r0, r3
 800ec5a:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	e7fa      	b.n	800ec56 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800ec60:	2301      	movs	r3, #1
 800ec62:	e7f8      	b.n	800ec56 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800ec64:	2302      	movs	r3, #2
 800ec66:	e7f6      	b.n	800ec56 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800ec68:	2303      	movs	r3, #3
 800ec6a:	e7f4      	b.n	800ec56 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800ec6c:	2304      	movs	r3, #4
 800ec6e:	e7f2      	b.n	800ec56 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 800ec70:	2305      	movs	r3, #5
 800ec72:	e7f0      	b.n	800ec56 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800ec74:	2306      	movs	r3, #6
 800ec76:	e7ee      	b.n	800ec56 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 800ec78:	2307      	movs	r3, #7
 800ec7a:	e7ec      	b.n	800ec56 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800ec7c:	2308      	movs	r3, #8
 800ec7e:	e7ea      	b.n	800ec56 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
 800ec80:	0801b5d4 	.word	0x0801b5d4
 800ec84:	0801b5b4 	.word	0x0801b5b4
 800ec88:	0801b5c4 	.word	0x0801b5c4
 800ec8c:	0801b5a4 	.word	0x0801b5a4
 800ec90:	0801b5dc 	.word	0x0801b5dc
 800ec94:	0801b5cc 	.word	0x0801b5cc
 800ec98:	0801b5bc 	.word	0x0801b5bc
 800ec9c:	0801b5ac 	.word	0x0801b5ac
 800eca0:	0801b59c 	.word	0x0801b59c
 800eca4:	0801b594 	.word	0x0801b594

0800eca8 <_ZN8Services11TranferDataIfEEvPT_S2_t.isra.0>:
 * @param input from: base pointer to copy data from
 * @param output to: base pointer to copy data to
 * @param input length: number of elements to copy
 */
template<typename T>
void Services::TranferData(T* from, T* to, uint16_t length) {
 800eca8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 800ecac:	4290      	cmp	r0, r2
 800ecae:	d100      	bne.n	800ecb2 <_ZN8Services11TranferDataIfEEvPT_S2_t.isra.0+0xa>
		to[buffer_index] = from[buffer_index];
	}
}
 800ecb0:	4770      	bx	lr
		to[buffer_index] = from[buffer_index];
 800ecb2:	f850 3b04 	ldr.w	r3, [r0], #4
 800ecb6:	f841 3b04 	str.w	r3, [r1], #4
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 800ecba:	e7f7      	b.n	800ecac <_ZN8Services11TranferDataIfEEvPT_S2_t.isra.0+0x4>

0800ecbc <_ZN8Services11TranferDataImEEvPT_S2_t.isra.0>:
void Services::TranferData(T* from, T* to, uint16_t length) {
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	b510      	push	{r4, lr}
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 800ecc0:	b29c      	uxth	r4, r3
 800ecc2:	42a2      	cmp	r2, r4
 800ecc4:	d800      	bhi.n	800ecc8 <_ZN8Services11TranferDataImEEvPT_S2_t.isra.0+0xc>
}
 800ecc6:	bd10      	pop	{r4, pc}
		to[buffer_index] = from[buffer_index];
 800ecc8:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 800eccc:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 800ecd0:	3301      	adds	r3, #1
 800ecd2:	e7f5      	b.n	800ecc0 <_ZN8Services11TranferDataImEEvPT_S2_t.isra.0+0x4>

0800ecd4 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0>:
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800ecd4:	e9d0 3000 	ldrd	r3, r0, [r0]
 * @param input start_index: the index to start the extraction
 * @param output success: whether successful
 * @return the typed extracted value
 */
template<typename T>
T Communication::ExtractSingle(std::vector<uint8_t> payload, uint16_t start_index, bool* success) {
 800ecd8:	b510      	push	{r4, lr}
 800ecda:	1ac0      	subs	r0, r0, r3
	uint64_t data = 0;
	uint8_t type_length = sizeof(T);

	// Check payload length
	if (payload.size() < start_index + type_length) {
 800ecdc:	1d0c      	adds	r4, r1, #4
 800ecde:	42a0      	cmp	r0, r4
 800ece0:	d310      	bcc.n	800ed04 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0+0x30>
 800ece2:	4419      	add	r1, r3
 800ece4:	2018      	movs	r0, #24
	uint64_t data = 0;
 800ece6:	2300      	movs	r3, #0
		return 0;
	}

	// Fill a uint64 variable
	for (uint8_t index = 0; index < type_length; index++) {
		data |= (payload[start_index + index] << ((type_length - 1 - index) << 3));
 800ece8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ecec:	4084      	lsls	r4, r0
	for (uint8_t index = 0; index < type_length; index++) {
 800ecee:	3808      	subs	r0, #8
 800ecf0:	f110 0f08 	cmn.w	r0, #8
		data |= (payload[start_index + index] << ((type_length - 1 - index) << 3));
 800ecf4:	ea43 0304 	orr.w	r3, r3, r4
	for (uint8_t index = 0; index < type_length; index++) {
 800ecf8:	d1f6      	bne.n	800ece8 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0+0x14>
	// Recast to the expected type
    T* reinterpreted_data = reinterpret_cast<T*>(&data);

    // Return data
    *success = true;
	return *reinterpreted_data;
 800ecfa:	ee00 3a10 	vmov	s0, r3
 800ecfe:	2301      	movs	r3, #1
		*success = false;
 800ed00:	7013      	strb	r3, [r2, #0]
}
 800ed02:	bd10      	pop	{r4, pc}
 800ed04:	2300      	movs	r3, #0
		return 0;
 800ed06:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ed0c <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0+0x38>
 800ed0a:	e7f9      	b.n	800ed00 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0+0x2c>
 800ed0c:	00000000 	.word	0x00000000

0800ed10 <_ZN13Communication13ExtractSingleIaEET_St6vectorIhSaIhEEtPb.isra.0>:
T Communication::ExtractSingle(std::vector<uint8_t> payload, uint16_t start_index, bool* success) {
 800ed10:	b510      	push	{r4, lr}
 800ed12:	e9d0 4300 	ldrd	r4, r3, [r0]
	if (payload.size() < start_index + type_length) {
 800ed16:	1c48      	adds	r0, r1, #1
 800ed18:	1b1b      	subs	r3, r3, r4
 800ed1a:	4283      	cmp	r3, r0
		*success = false;
 800ed1c:	bf33      	iteet	cc
 800ed1e:	2300      	movcc	r3, #0
    *success = true;
 800ed20:	2301      	movcs	r3, #1
	return *reinterpreted_data;
 800ed22:	5660      	ldrsbcs	r0, [r4, r1]
		return 0;
 800ed24:	4618      	movcc	r0, r3
 800ed26:	7013      	strb	r3, [r2, #0]
}
 800ed28:	bd10      	pop	{r4, pc}

0800ed2a <_ZN13Communication13ExtractSingleImEET_St6vectorIhSaIhEEtPb.isra.0>:
 800ed2a:	e9d0 3000 	ldrd	r3, r0, [r0]
T Communication::ExtractSingle(std::vector<uint8_t> payload, uint16_t start_index, bool* success) {
 800ed2e:	b510      	push	{r4, lr}
 800ed30:	1ac0      	subs	r0, r0, r3
	if (payload.size() < start_index + type_length) {
 800ed32:	1d0c      	adds	r4, r1, #4
 800ed34:	42a0      	cmp	r0, r4
 800ed36:	d30e      	bcc.n	800ed56 <_ZN13Communication13ExtractSingleImEET_St6vectorIhSaIhEEtPb.isra.0+0x2c>
 800ed38:	4419      	add	r1, r3
	uint64_t data = 0;
 800ed3a:	2000      	movs	r0, #0
	if (payload.size() < start_index + type_length) {
 800ed3c:	2318      	movs	r3, #24
		data |= (payload[start_index + index] << ((type_length - 1 - index) << 3));
 800ed3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed42:	409c      	lsls	r4, r3
	for (uint8_t index = 0; index < type_length; index++) {
 800ed44:	3b08      	subs	r3, #8
 800ed46:	f113 0f08 	cmn.w	r3, #8
		data |= (payload[start_index + index] << ((type_length - 1 - index) << 3));
 800ed4a:	ea40 0004 	orr.w	r0, r0, r4
	for (uint8_t index = 0; index < type_length; index++) {
 800ed4e:	d1f6      	bne.n	800ed3e <_ZN13Communication13ExtractSingleImEET_St6vectorIhSaIhEEtPb.isra.0+0x14>
	return *reinterpreted_data;
 800ed50:	2301      	movs	r3, #1
		*success = false;
 800ed52:	7013      	strb	r3, [r2, #0]
}
 800ed54:	bd10      	pop	{r4, pc}
 800ed56:	2300      	movs	r3, #0
		return 0;
 800ed58:	4618      	mov	r0, r3
 800ed5a:	e7fa      	b.n	800ed52 <_ZN13Communication13ExtractSingleImEET_St6vectorIhSaIhEEtPb.isra.0+0x28>

0800ed5c <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>:
T Communication::ExtractSingle(std::vector<uint8_t> payload, uint16_t start_index, bool* success) {
 800ed5c:	b510      	push	{r4, lr}
 800ed5e:	e9d0 4300 	ldrd	r4, r3, [r0]
	if (payload.size() < start_index + type_length) {
 800ed62:	1c48      	adds	r0, r1, #1
 800ed64:	1b1b      	subs	r3, r3, r4
 800ed66:	4283      	cmp	r3, r0
		*success = false;
 800ed68:	bf33      	iteet	cc
 800ed6a:	2300      	movcc	r3, #0
    *success = true;
 800ed6c:	2301      	movcs	r3, #1
		data |= (payload[start_index + index] << ((type_length - 1 - index) << 3));
 800ed6e:	5c60      	ldrbcs	r0, [r4, r1]
		return 0;
 800ed70:	4618      	movcc	r0, r3
 800ed72:	7013      	strb	r3, [r2, #0]
}
 800ed74:	bd10      	pop	{r4, pc}

0800ed76 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800ed76:	2800      	cmp	r0, #0
      _M_allocate(size_t __n)
 800ed78:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800ed7a:	d006      	beq.n	800ed8a <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0x14>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800ed7c:	da01      	bge.n	800ed82 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0xc>
	    std::__throw_bad_alloc();
 800ed7e:	f00b fded 	bl	801a95c <_ZSt17__throw_bad_allocv>
      }
 800ed82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800ed86:	f00b bd3a 	b.w	801a7fe <_Znwj>
 800ed8a:	bd08      	pop	{r3, pc}

0800ed8c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>:
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800ed8c:	4926      	ldr	r1, [pc, #152]	@ (800ee28 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 800ed8e:	b510      	push	{r4, lr}
 800ed90:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800ed92:	4608      	mov	r0, r1
 800ed94:	f00b fdca 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 800ed98:	2800      	cmp	r0, #0
 800ed9a:	d133      	bne.n	800ee04 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800ed9c:	4923      	ldr	r1, [pc, #140]	@ (800ee2c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa0>)
 800ed9e:	4822      	ldr	r0, [pc, #136]	@ (800ee28 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 800eda0:	f00b fdc4 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 800eda4:	2800      	cmp	r0, #0
 800eda6:	d12f      	bne.n	800ee08 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800eda8:	4921      	ldr	r1, [pc, #132]	@ (800ee30 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa4>)
 800edaa:	481f      	ldr	r0, [pc, #124]	@ (800ee28 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 800edac:	f00b fdbe 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 800edb0:	bb60      	cbnz	r0, 800ee0c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800edb2:	4920      	ldr	r1, [pc, #128]	@ (800ee34 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa8>)
 800edb4:	481c      	ldr	r0, [pc, #112]	@ (800ee28 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 800edb6:	f00b fdb9 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 800edba:	bb48      	cbnz	r0, 800ee10 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800edbc:	491e      	ldr	r1, [pc, #120]	@ (800ee38 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xac>)
 800edbe:	481a      	ldr	r0, [pc, #104]	@ (800ee28 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 800edc0:	f00b fdb4 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 800edc4:	bb30      	cbnz	r0, 800ee14 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 800edc6:	491d      	ldr	r1, [pc, #116]	@ (800ee3c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb0>)
 800edc8:	4817      	ldr	r0, [pc, #92]	@ (800ee28 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 800edca:	f00b fdaf 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 800edce:	bb18      	cbnz	r0, 800ee18 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800edd0:	491b      	ldr	r1, [pc, #108]	@ (800ee40 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb4>)
 800edd2:	4815      	ldr	r0, [pc, #84]	@ (800ee28 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 800edd4:	f00b fdaa 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 800edd8:	bb00      	cbnz	r0, 800ee1c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 800edda:	491a      	ldr	r1, [pc, #104]	@ (800ee44 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb8>)
 800eddc:	4812      	ldr	r0, [pc, #72]	@ (800ee28 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 800edde:	f00b fda5 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 800ede2:	b9e8      	cbnz	r0, 800ee20 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800ede4:	4918      	ldr	r1, [pc, #96]	@ (800ee48 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xbc>)
 800ede6:	4810      	ldr	r0, [pc, #64]	@ (800ee28 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 800ede8:	f00b fda0 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 800edec:	b9d0      	cbnz	r0, 800ee24 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 800edee:	4917      	ldr	r1, [pc, #92]	@ (800ee4c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xc0>)
 800edf0:	480d      	ldr	r0, [pc, #52]	@ (800ee28 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 800edf2:	f00b fd9b 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 800edf6:	2800      	cmp	r0, #0
 800edf8:	bf14      	ite	ne
 800edfa:	2309      	movne	r3, #9
 800edfc:	2300      	moveq	r3, #0
 800edfe:	7020      	strb	r0, [r4, #0]
}
 800ee00:	4618      	mov	r0, r3
 800ee02:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800ee04:	2300      	movs	r3, #0
 800ee06:	e7fa      	b.n	800edfe <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800ee08:	2301      	movs	r3, #1
 800ee0a:	e7f8      	b.n	800edfe <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800ee0c:	2302      	movs	r3, #2
 800ee0e:	e7f6      	b.n	800edfe <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800ee10:	2303      	movs	r3, #3
 800ee12:	e7f4      	b.n	800edfe <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800ee14:	2304      	movs	r3, #4
 800ee16:	e7f2      	b.n	800edfe <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 800ee18:	2305      	movs	r3, #5
 800ee1a:	e7f0      	b.n	800edfe <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800ee1c:	2306      	movs	r3, #6
 800ee1e:	e7ee      	b.n	800edfe <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 800ee20:	2307      	movs	r3, #7
 800ee22:	e7ec      	b.n	800edfe <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800ee24:	2308      	movs	r3, #8
 800ee26:	e7ea      	b.n	800edfe <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
 800ee28:	0801b5d4 	.word	0x0801b5d4
 800ee2c:	0801b5c4 	.word	0x0801b5c4
 800ee30:	0801b5b4 	.word	0x0801b5b4
 800ee34:	0801b5a4 	.word	0x0801b5a4
 800ee38:	0801b5dc 	.word	0x0801b5dc
 800ee3c:	0801b5cc 	.word	0x0801b5cc
 800ee40:	0801b5bc 	.word	0x0801b5bc
 800ee44:	0801b5ac 	.word	0x0801b5ac
 800ee48:	0801b59c 	.word	0x0801b59c
 800ee4c:	0801b594 	.word	0x0801b594

0800ee50 <_ZN13CommunicationC1Ev>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 800ee50:	2200      	movs	r2, #0
 800ee52:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800ee56:	e9c0 2208 	strd	r2, r2, [r0, #32]
 800ee5a:	e9c0 220a 	strd	r2, r2, [r0, #40]	@ 0x28
 800ee5e:	e9c0 220c 	strd	r2, r2, [r0, #48]	@ 0x30
 800ee62:	6382      	str	r2, [r0, #56]	@ 0x38

/**
 * @brief class Constructor
 */
Communication::Communication() {
	address = UNKNOWN;
 800ee64:	22fd      	movs	r2, #253	@ 0xfd
 800ee66:	7502      	strb	r2, [r0, #20]
}
 800ee68:	4770      	bx	lr

0800ee6a <_ZN13Communication4InitEP9RegistersP8ServicesP17MasterSubscribersP4LEDS>:
 * @param input registers_: the Registers instance
 * @param input services_: the Services instance
 * @param input subscribers_: the MasterSubscribers instance
 * @param input leds_: the LEDS instance
 */
void Communication::Init(Registers* registers_, Services* services_, MasterSubscribers* subscribers_, LEDS* leds_) {
 800ee6a:	b510      	push	{r4, lr}
	registers = registers_;
	services = services_;
 800ee6c:	e9c0 1201 	strd	r1, r2, [r0, #4]
	subscribers = subscribers_;
 800ee70:	60c3      	str	r3, [r0, #12]
	leds = leds_;

	CommunicationSemaphore = osSemaphoreNew(1,1,NULL);
 800ee72:	2101      	movs	r1, #1
	leds = leds_;
 800ee74:	9b02      	ldr	r3, [sp, #8]
void Communication::Init(Registers* registers_, Services* services_, MasterSubscribers* subscribers_, LEDS* leds_) {
 800ee76:	4604      	mov	r4, r0
	CommunicationSemaphore = osSemaphoreNew(1,1,NULL);
 800ee78:	2200      	movs	r2, #0
	leds = leds_;
 800ee7a:	6103      	str	r3, [r0, #16]
	CommunicationSemaphore = osSemaphoreNew(1,1,NULL);
 800ee7c:	4608      	mov	r0, r1
 800ee7e:	f7fd fafd 	bl	800c47c <osSemaphoreNew>
 800ee82:	6020      	str	r0, [r4, #0]
	osSemaphoreRelease(CommunicationSemaphore);
}
 800ee84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSemaphoreRelease(CommunicationSemaphore);
 800ee88:	f7fd bb88 	b.w	800c59c <osSemaphoreRelease>

0800ee8c <_ZN13Communication12FindProtocolEhPb>:
 *
 * @param input ID: the protocol ID to find
 * @param output success: true if protocol found
 * @return the protocol pointer
 */
CommunicationProtocol* Communication::FindProtocol(uint8_t ID, bool* success) {
 800ee8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee90:	460e      	mov	r6, r1
 800ee92:	4615      	mov	r5, r2
 800ee94:	e9d0 4809 	ldrd	r4, r8, [r0, #36]	@ 0x24
	for (CommunicationProtocol* &protocol : protocols) {
 800ee98:	45a0      	cmp	r8, r4
 800ee9a:	4627      	mov	r7, r4
 800ee9c:	d102      	bne.n	800eea4 <_ZN13Communication12FindProtocolEhPb+0x18>
 800ee9e:	2300      	movs	r3, #0
			*success = true;
			return protocol_pointer;
		}
	}
	*success = false;
	return NULL;
 800eea0:	4618      	mov	r0, r3
 800eea2:	e008      	b.n	800eeb6 <_ZN13Communication12FindProtocolEhPb+0x2a>
		if (protocol->InterfaceExists(ID)) {
 800eea4:	4631      	mov	r1, r6
 800eea6:	6838      	ldr	r0, [r7, #0]
 800eea8:	f006 fc63 	bl	8015772 <_ZN21CommunicationProtocol15InterfaceExistsEh>
 800eeac:	3404      	adds	r4, #4
 800eeae:	4603      	mov	r3, r0
 800eeb0:	2800      	cmp	r0, #0
 800eeb2:	d0f1      	beq.n	800ee98 <_ZN13Communication12FindProtocolEhPb+0xc>
			CommunicationProtocol* protocol_pointer = protocol;
 800eeb4:	6838      	ldr	r0, [r7, #0]
			*success = true;
 800eeb6:	702b      	strb	r3, [r5, #0]
}
 800eeb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800eebc <_ZN13Communication16InGroupAddressesEh>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800eebc:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 *
 * @param input address: a 8-bit address
 * @return true if the input adddress is part of the group addresses
 */
bool Communication::InGroupAddresses(uint8_t address) {
	for (uint8_t group_address : group_addresses) {
 800eec0:	4293      	cmp	r3, r2
 800eec2:	d101      	bne.n	800eec8 <_ZN13Communication16InGroupAddressesEh+0xc>
		if (group_address == address) return true;
	}
	return false;
 800eec4:	2000      	movs	r0, #0
 800eec6:	4770      	bx	lr
	for (uint8_t group_address : group_addresses) {
 800eec8:	f813 0b01 	ldrb.w	r0, [r3], #1
		if (group_address == address) return true;
 800eecc:	4288      	cmp	r0, r1
 800eece:	d1f7      	bne.n	800eec0 <_ZN13Communication16InGroupAddressesEh+0x4>
 800eed0:	2001      	movs	r0, #1
}
 800eed2:	4770      	bx	lr

0800eed4 <_ZN13Communication13AcceptMessageE13MessageHeader>:
	return (message.target_address == ALL || message.target_address == address || InGroupAddresses(message.target_address));
 800eed4:	7c09      	ldrb	r1, [r1, #16]
 800eed6:	29ff      	cmp	r1, #255	@ 0xff
 800eed8:	d004      	beq.n	800eee4 <_ZN13Communication13AcceptMessageE13MessageHeader+0x10>
 800eeda:	7d03      	ldrb	r3, [r0, #20]
 800eedc:	428b      	cmp	r3, r1
 800eede:	d001      	beq.n	800eee4 <_ZN13Communication13AcceptMessageE13MessageHeader+0x10>
 800eee0:	f7ff bfec 	b.w	800eebc <_ZN13Communication16InGroupAddressesEh>
}
 800eee4:	2001      	movs	r0, #1
 800eee6:	4770      	bx	lr

0800eee8 <_ZN13Communication5GetIDEPvPb>:
 *
 * @param input handle: base pointer of an hardware interface
 * @param output success: return true if the protocol has been successfully found
 * @return the registered interface ID of the input hardware handle
 */
uint8_t Communication::GetID(void* handle, bool* success) {
 800eee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eeea:	460e      	mov	r6, r1
 800eeec:	4614      	mov	r4, r2
 800eeee:	e9d0 5709 	ldrd	r5, r7, [r0, #36]	@ 0x24
	uint8_t ID;
	for (CommunicationProtocol* protocol : protocols) {
 800eef2:	42af      	cmp	r7, r5
 800eef4:	d101      	bne.n	800eefa <_ZN13Communication5GetIDEPvPb+0x12>
		ID = protocol->GetID(handle, success);
		if (*success)
			return ID;
	}
	return 0;
 800eef6:	2000      	movs	r0, #0
 800eef8:	e009      	b.n	800ef0e <_ZN13Communication5GetIDEPvPb+0x26>
	for (CommunicationProtocol* protocol : protocols) {
 800eefa:	f855 0b04 	ldr.w	r0, [r5], #4
		ID = protocol->GetID(handle, success);
 800eefe:	4622      	mov	r2, r4
 800ef00:	4631      	mov	r1, r6
 800ef02:	6803      	ldr	r3, [r0, #0]
 800ef04:	68db      	ldr	r3, [r3, #12]
 800ef06:	4798      	blx	r3
		if (*success)
 800ef08:	7823      	ldrb	r3, [r4, #0]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d0f1      	beq.n	800eef2 <_ZN13Communication5GetIDEPvPb+0xa>
}
 800ef0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ef10 <_ZN13Communication9GetBufferEhPb>:
 *
 * @param input ID: the interface ID
 * @param output success: return true if the memory pointer successfully found
 * @return the memory pointer allocated to the hardware interface
 */
std::vector<uint8_t>* Communication::GetBuffer(uint8_t ID, bool* success) {
 800ef10:	b538      	push	{r3, r4, r5, lr}
 800ef12:	460c      	mov	r4, r1
 800ef14:	4615      	mov	r5, r2
	CommunicationProtocol* protocol = FindProtocol(ID, success);
 800ef16:	f7ff ffb9 	bl	800ee8c <_ZN13Communication12FindProtocolEhPb>
	if (*success) {
		std::vector<uint8_t>* buffer = protocol->GetBuffer(ID, success);
 800ef1a:	462a      	mov	r2, r5
 800ef1c:	4621      	mov	r1, r4
		if (*success)
			return buffer;
	}
}
 800ef1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		std::vector<uint8_t>* buffer = protocol->GetBuffer(ID, success);
 800ef22:	f006 bc3d 	b.w	80157a0 <_ZN21CommunicationProtocol9GetBufferEhPb>

0800ef26 <_ZN13Communication14GetBufferIndexEhPb>:
 *
 * @param input ID: the interface ID
 * @param output success: return true if the index has been successfully found
 * @return the pointer to the index variable
 */
uint16_t* Communication::GetBufferIndex(uint8_t ID, bool* success) {
 800ef26:	b538      	push	{r3, r4, r5, lr}
 800ef28:	4614      	mov	r4, r2
 800ef2a:	460d      	mov	r5, r1
	CommunicationProtocol* protocol = FindProtocol(ID, success);
 800ef2c:	f7ff ffae 	bl	800ee8c <_ZN13Communication12FindProtocolEhPb>
	if (*success) {
 800ef30:	7823      	ldrb	r3, [r4, #0]
 800ef32:	b12b      	cbz	r3, 800ef40 <_ZN13Communication14GetBufferIndexEhPb+0x1a>
		uint16_t* buffer_index = protocol->GetBufferIndex(ID, success);
 800ef34:	4622      	mov	r2, r4
 800ef36:	4629      	mov	r1, r5
 800ef38:	f006 fc40 	bl	80157bc <_ZN21CommunicationProtocol14GetBufferIndexEhPb>
		if (*success)
 800ef3c:	7823      	ldrb	r3, [r4, #0]
 800ef3e:	b903      	cbnz	r3, 800ef42 <_ZN13Communication14GetBufferIndexEhPb+0x1c>
			return buffer_index;
	}
	return NULL;
 800ef40:	2000      	movs	r0, #0
}
 800ef42:	bd38      	pop	{r3, r4, r5, pc}

0800ef44 <_ZN13Communication27GetProtocolPayloadMaxLengthEhPb>:
 *
 * @param input ID: the protocol ID
 * @param output success: return true if protocol found
 * @return the maximum payload size of the input protocol
 */
uint16_t Communication::GetProtocolPayloadMaxLength(uint8_t ID, bool* success) {
 800ef44:	b510      	push	{r4, lr}
 800ef46:	4614      	mov	r4, r2
	CommunicationProtocol* protocol = FindProtocol(ID, success);
 800ef48:	f7ff ffa0 	bl	800ee8c <_ZN13Communication12FindProtocolEhPb>
	if (not *success)
 800ef4c:	7823      	ldrb	r3, [r4, #0]
 800ef4e:	b11b      	cbz	r3, 800ef58 <_ZN13Communication27GetProtocolPayloadMaxLengthEhPb+0x14>
		return 0;

	return protocol->GetProtocolPayloadMaxLength();
}
 800ef50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return protocol->GetProtocolPayloadMaxLength();
 800ef54:	f006 bc40 	b.w	80157d8 <_ZN21CommunicationProtocol27GetProtocolPayloadMaxLengthEv>
}
 800ef58:	4618      	mov	r0, r3
 800ef5a:	bd10      	pop	{r4, pc}

0800ef5c <_ZN13Communication17ActivateReceptionEh>:
 * @brief Activate the hardware reading of the input protocol
 *
 * @param input ID: the protocol ID
 * @return the status of the reading activation request
 */
HAL_StatusTypeDef Communication::ActivateReception(uint8_t ID) {
 800ef5c:	b513      	push	{r0, r1, r4, lr}
	bool success;
	CommunicationProtocol* protocol = FindProtocol(ID, &success);
 800ef5e:	f10d 0207 	add.w	r2, sp, #7
HAL_StatusTypeDef Communication::ActivateReception(uint8_t ID) {
 800ef62:	460c      	mov	r4, r1
	CommunicationProtocol* protocol = FindProtocol(ID, &success);
 800ef64:	f7ff ff92 	bl	800ee8c <_ZN13Communication12FindProtocolEhPb>
	if (not success) return HAL_ERROR;
 800ef68:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ef6c:	b132      	cbz	r2, 800ef7c <_ZN13Communication17ActivateReceptionEh+0x20>
	return protocol->ActivateReception(ID);
 800ef6e:	6803      	ldr	r3, [r0, #0]
 800ef70:	4621      	mov	r1, r4
 800ef72:	685b      	ldr	r3, [r3, #4]
}
 800ef74:	b002      	add	sp, #8
 800ef76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return protocol->ActivateReception(ID);
 800ef7a:	4718      	bx	r3
}
 800ef7c:	2001      	movs	r0, #1
 800ef7e:	b002      	add	sp, #8
 800ef80:	bd10      	pop	{r4, pc}

0800ef82 <_ZN13Communication16SetModuleAddressEh>:
 * @brief Set the module address
 *
 * @param input address_: the new module address
 * @return whether successful
 */
bool Communication::SetModuleAddress(uint8_t address_) {
 800ef82:	b538      	push	{r3, r4, r5, lr}
 800ef84:	4604      	mov	r4, r0
 800ef86:	460d      	mov	r5, r1
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 800ef88:	6800      	ldr	r0, [r0, #0]
 800ef8a:	f04f 31ff 	mov.w	r1, #4294967295
 800ef8e:	f7fd fad1 	bl	800c534 <osSemaphoreAcquire>
	address = address_;
	osSemaphoreRelease(CommunicationSemaphore);
 800ef92:	6820      	ldr	r0, [r4, #0]
	address = address_;
 800ef94:	7525      	strb	r5, [r4, #20]
	osSemaphoreRelease(CommunicationSemaphore);
 800ef96:	f7fd fb01 	bl	800c59c <osSemaphoreRelease>
	return true;
}
 800ef9a:	2001      	movs	r0, #1
 800ef9c:	bd38      	pop	{r3, r4, r5, pc}

0800ef9e <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 800ef9e:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 800efa0:	680d      	ldr	r5, [r1, #0]
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 800efa2:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 800efa4:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 800efa6:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 800efaa:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 800efac:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 800efae:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 800efb0:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 800efb2:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 800efb4:	688d      	ldr	r5, [r1, #8]
 800efb6:	6085      	str	r5, [r0, #8]
      }
 800efb8:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 800efba:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 800efbc:	e9c1 3300 	strd	r3, r3, [r1]
 800efc0:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 800efc4:	f7f1 fe26 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      }
 800efc8:	b005      	add	sp, #20
 800efca:	bd30      	pop	{r4, r5, pc}

0800efcc <_ZNSt6vectorIhSaIhEE5clearEv>:
      // _M_assign_aux.
      _GLIBCXX20_CONSTEXPR
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 800efcc:	e9d0 3200 	ldrd	r3, r2, [r0]
 800efd0:	4293      	cmp	r3, r2
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
 800efd2:	bf18      	it	ne
 800efd4:	6043      	strne	r3, [r0, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 800efd6:	4770      	bx	lr

0800efd8 <_ZN13Communication17ClearGroupAddressEv>:
/**
 * @brief Clear the list of group addresses
 *
 * @return whether successful
 */
bool Communication::ClearGroupAddress(void) {
 800efd8:	b538      	push	{r3, r4, r5, lr}
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 800efda:	4605      	mov	r5, r0
bool Communication::ClearGroupAddress(void) {
 800efdc:	4604      	mov	r4, r0
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 800efde:	f04f 31ff 	mov.w	r1, #4294967295
 800efe2:	f855 0b18 	ldr.w	r0, [r5], #24
 800efe6:	f7fd faa5 	bl	800c534 <osSemaphoreAcquire>
	group_addresses.clear();
 800efea:	4628      	mov	r0, r5
 800efec:	f7ff ffee 	bl	800efcc <_ZNSt6vectorIhSaIhEE5clearEv>
	osSemaphoreRelease(CommunicationSemaphore);
 800eff0:	6820      	ldr	r0, [r4, #0]
 800eff2:	f7fd fad3 	bl	800c59c <osSemaphoreRelease>
	return true;
}
 800eff6:	2001      	movs	r0, #1
 800eff8:	bd38      	pop	{r3, r4, r5, pc}

0800effa <_ZZN13Communication12AddRegistersEvENUlPvtPhtE2_4_FUNES0_tS1_t>:
			return self->ClearGroupAddress();
 800effa:	f7ff bfed 	b.w	800efd8 <_ZN13Communication17ClearGroupAddressEv>
	...

0800f000 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>:
      at(size_type __n)
 800f000:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f002:	e9d0 5400 	ldrd	r5, r4, [r0]
 800f006:	1b64      	subs	r4, r4, r5
	if (__n >= this->size())
 800f008:	ebb1 1f24 	cmp.w	r1, r4, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f00c:	ea4f 1224 	mov.w	r2, r4, asr #4
	if (__n >= this->size())
 800f010:	d302      	bcc.n	800f018 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 800f012:	4803      	ldr	r0, [pc, #12]	@ (800f020 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj+0x20>)
 800f014:	f00b fcab 	bl	801a96e <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 800f018:	eb05 1001 	add.w	r0, r5, r1, lsl #4
 800f01c:	bd38      	pop	{r3, r4, r5, pc}
 800f01e:	bf00      	nop
 800f020:	0801b3bc 	.word	0x0801b3bc

0800f024 <_ZNSt6vectorI13MessageHeaderSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>:
    vector<_Tp, _Alloc>::
 800f024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      { return __normal_iterator(_M_current + __n); }
 800f026:	f101 0314 	add.w	r3, r1, #20
      : _M_current(__i) { }
 800f02a:	6844      	ldr	r4, [r0, #4]
 800f02c:	4607      	mov	r7, r0
 800f02e:	460e      	mov	r6, r1
      if (__position + 1 != end())
 800f030:	429c      	cmp	r4, r3
 800f032:	d008      	beq.n	800f046 <_ZNSt6vectorI13MessageHeaderSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0x22>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800f034:	1ae4      	subs	r4, r4, r3
 800f036:	4b10      	ldr	r3, [pc, #64]	@ (800f078 <_ZNSt6vectorI13MessageHeaderSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0x54>)
 800f038:	1d08      	adds	r0, r1, #4
 800f03a:	10a4      	asrs	r4, r4, #2
 800f03c:	435c      	muls	r4, r3
 800f03e:	2c00      	cmp	r4, #0
 800f040:	f100 0514 	add.w	r5, r0, #20
 800f044:	dc08      	bgt.n	800f058 <_ZNSt6vectorI13MessageHeaderSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0x34>
      --this->_M_impl._M_finish;
 800f046:	6878      	ldr	r0, [r7, #4]
 800f048:	f1a0 0314 	sub.w	r3, r0, #20
      }
 800f04c:	3810      	subs	r0, #16
 800f04e:	607b      	str	r3, [r7, #4]
 800f050:	f7f1 fde0 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
    }
 800f054:	4630      	mov	r0, r6
 800f056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
struct MessageHeader {
 800f058:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 800f05c:	4629      	mov	r1, r5
 800f05e:	3c01      	subs	r4, #1
 800f060:	f805 3c18 	strb.w	r3, [r5, #-24]
 800f064:	f7ff ff9b 	bl	800ef9e <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 800f068:	7b2b      	ldrb	r3, [r5, #12]
 800f06a:	4628      	mov	r0, r5
 800f06c:	f805 3c08 	strb.w	r3, [r5, #-8]
 800f070:	7b6b      	ldrb	r3, [r5, #13]
 800f072:	f805 3c07 	strb.w	r3, [r5, #-7]
 800f076:	e7e2      	b.n	800f03e <_ZNSt6vectorI13MessageHeaderSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0x1a>
 800f078:	cccccccd 	.word	0xcccccccd

0800f07c <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800f07c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f080:	e9d0 8a00 	ldrd	r8, sl, [r0]
 800f084:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 800f086:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f08a:	ebaa 0208 	sub.w	r2, sl, r8
 800f08e:	4607      	mov	r7, r0
 800f090:	4689      	mov	r9, r1
	if (max_size() - size() < __n)
 800f092:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f096:	ea4f 04a2 	mov.w	r4, r2, asr #2
	if (max_size() - size() < __n)
 800f09a:	d102      	bne.n	800f0a2 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 800f09c:	481f      	ldr	r0, [pc, #124]	@ (800f11c <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa0>)
 800f09e:	f00b fc63 	bl	801a968 <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 800f0a2:	45c2      	cmp	sl, r8
 800f0a4:	bf14      	ite	ne
 800f0a6:	4622      	movne	r2, r4
 800f0a8:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 800f0aa:	eba1 0508 	sub.w	r5, r1, r8
 800f0ae:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800f0b0:	d22f      	bcs.n	800f112 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x96>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800f0b2:	b384      	cbz	r4, 800f116 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800f0b4:	429c      	cmp	r4, r3
 800f0b6:	bf28      	it	cs
 800f0b8:	461c      	movcs	r4, r3
 800f0ba:	00a0      	lsls	r0, r4, #2
 800f0bc:	f00b fb9f 	bl	801a7fe <_Znwj>
 800f0c0:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800f0c2:	f8db 3000 	ldr.w	r3, [fp]
      if (__count > 0)
 800f0c6:	2d00      	cmp	r5, #0
 800f0c8:	5173      	str	r3, [r6, r5]
 800f0ca:	dd04      	ble.n	800f0d6 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x5a>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800f0cc:	462a      	mov	r2, r5
 800f0ce:	4641      	mov	r1, r8
 800f0d0:	4630      	mov	r0, r6
 800f0d2:	f00b fecb 	bl	801ae6c <memmove>
      ptrdiff_t __count = __last - __first;
 800f0d6:	ebaa 0a09 	sub.w	sl, sl, r9
	      ++__new_finish;
 800f0da:	3504      	adds	r5, #4
      if (__count > 0)
 800f0dc:	f1ba 0f00 	cmp.w	sl, #0
 800f0e0:	4435      	add	r5, r6
 800f0e2:	dd04      	ble.n	800f0ee <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x72>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800f0e4:	4652      	mov	r2, sl
 800f0e6:	4649      	mov	r1, r9
 800f0e8:	4628      	mov	r0, r5
 800f0ea:	f00b ffb7 	bl	801b05c <memcpy>
      return __result + __count;
 800f0ee:	4455      	add	r5, sl
	if (__p)
 800f0f0:	f1b8 0f00 	cmp.w	r8, #0
 800f0f4:	d006      	beq.n	800f104 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x88>
		    this->_M_impl._M_end_of_storage - __old_start);
 800f0f6:	68b9      	ldr	r1, [r7, #8]
 800f0f8:	4640      	mov	r0, r8
 800f0fa:	eba1 0108 	sub.w	r1, r1, r8
 800f0fe:	1089      	asrs	r1, r1, #2
 800f100:	f7ff fc7a 	bl	800e9f8 <_ZNSt12_Vector_baseIP21CommunicationProtocolSaIS1_EE13_M_deallocateEPS1_j.part.0>
      this->_M_impl._M_finish = __new_finish;
 800f104:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800f108:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 800f10c:	60be      	str	r6, [r7, #8]
    }
 800f10e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800f112:	461c      	mov	r4, r3
 800f114:	e7d1      	b.n	800f0ba <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800f116:	4626      	mov	r6, r4
 800f118:	e7d3      	b.n	800f0c2 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
 800f11a:	bf00      	nop
 800f11c:	0801b17a 	.word	0x0801b17a

0800f120 <_ZN13Communication11AddProtocolEP21CommunicationProtocol>:
void Communication::AddProtocol(CommunicationProtocol* protocol) {
 800f120:	b513      	push	{r0, r1, r4, lr}
 800f122:	4604      	mov	r4, r0
 800f124:	9101      	str	r1, [sp, #4]
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 800f126:	6800      	ldr	r0, [r0, #0]
 800f128:	f04f 31ff 	mov.w	r1, #4294967295
 800f12c:	f7fd fa02 	bl	800c534 <osSemaphoreAcquire>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800f130:	e9d4 130a 	ldrd	r1, r3, [r4, #40]	@ 0x28
 800f134:	4299      	cmp	r1, r3
 800f136:	d008      	beq.n	800f14a <_ZN13Communication11AddProtocolEP21CommunicationProtocol+0x2a>
 800f138:	9b01      	ldr	r3, [sp, #4]
 800f13a:	f841 3b04 	str.w	r3, [r1], #4
	    ++this->_M_impl._M_finish;
 800f13e:	62a1      	str	r1, [r4, #40]	@ 0x28
	osSemaphoreRelease(CommunicationSemaphore);
 800f140:	6820      	ldr	r0, [r4, #0]
 800f142:	f7fd fa2b 	bl	800c59c <osSemaphoreRelease>
}
 800f146:	b002      	add	sp, #8
 800f148:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), __x);
 800f14a:	aa01      	add	r2, sp, #4
 800f14c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800f150:	f7ff ff94 	bl	800f07c <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
 800f154:	e7f4      	b.n	800f140 <_ZN13Communication11AddProtocolEP21CommunicationProtocol+0x20>
	...

0800f158 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800f158:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f15c:	e9d0 9a00 	ldrd	r9, sl, [r0]
 800f160:	4617      	mov	r7, r2
	if (max_size() - size() < __n)
 800f162:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f166:	ebaa 0209 	sub.w	r2, sl, r9
 800f16a:	4680      	mov	r8, r0
 800f16c:	468b      	mov	fp, r1
	if (max_size() - size() < __n)
 800f16e:	ebb3 1f22 	cmp.w	r3, r2, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f172:	ea4f 1522 	mov.w	r5, r2, asr #4
	if (max_size() - size() < __n)
 800f176:	d102      	bne.n	800f17e <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 800f178:	4826      	ldr	r0, [pc, #152]	@ (800f214 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xbc>)
 800f17a:	f00b fbf5 	bl	801a968 <_ZSt20__throw_length_errorPKc>
 800f17e:	45ca      	cmp	sl, r9
 800f180:	bf14      	ite	ne
 800f182:	462a      	movne	r2, r5
 800f184:	2201      	moveq	r2, #1
 800f186:	eba1 0409 	sub.w	r4, r1, r9
 800f18a:	18ad      	adds	r5, r5, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800f18c:	d232      	bcs.n	800f1f4 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800f18e:	b39d      	cbz	r5, 800f1f8 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa0>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800f190:	429d      	cmp	r5, r3
 800f192:	bf28      	it	cs
 800f194:	461d      	movcs	r5, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800f196:	0128      	lsls	r0, r5, #4
 800f198:	f00b fb31 	bl	801a7fe <_Znwj>
 800f19c:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800f19e:	4434      	add	r4, r6
      _ForwardIterator __cur = __result;
 800f1a0:	46b4      	mov	ip, r6
 800f1a2:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800f1a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f1aa:	464c      	mov	r4, r9
      for (; __first != __last; ++__first, (void)++__cur)
 800f1ac:	45a3      	cmp	fp, r4
 800f1ae:	f10c 0c10 	add.w	ip, ip, #16
 800f1b2:	f104 0710 	add.w	r7, r4, #16
 800f1b6:	d121      	bne.n	800f1fc <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa4>
 800f1b8:	eba7 0709 	sub.w	r7, r7, r9
 800f1bc:	46a4      	mov	ip, r4
 800f1be:	4437      	add	r7, r6
 800f1c0:	46be      	mov	lr, r7
 800f1c2:	4554      	cmp	r4, sl
 800f1c4:	f10e 0e10 	add.w	lr, lr, #16
 800f1c8:	d11e      	bne.n	800f208 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb0>
 800f1ca:	eba4 040c 	sub.w	r4, r4, ip
 800f1ce:	4427      	add	r7, r4
	if (__p)
 800f1d0:	f1b9 0f00 	cmp.w	r9, #0
 800f1d4:	d006      	beq.n	800f1e4 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
 800f1d6:	f8d8 1008 	ldr.w	r1, [r8, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800f1da:	4648      	mov	r0, r9
 800f1dc:	eba1 0109 	sub.w	r1, r1, r9
 800f1e0:	f00b fae8 	bl	801a7b4 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 800f1e4:	e9c8 6700 	strd	r6, r7, [r8]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800f1e8:	eb06 1605 	add.w	r6, r6, r5, lsl #4
 800f1ec:	f8c8 6008 	str.w	r6, [r8, #8]
    }
 800f1f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800f1f4:	461d      	mov	r5, r3
 800f1f6:	e7ce      	b.n	800f196 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800f1f8:	462e      	mov	r6, r5
 800f1fa:	e7d0      	b.n	800f19e <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800f1fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f200:	463c      	mov	r4, r7
 800f202:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
 800f206:	e7d1      	b.n	800f1ac <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x54>
 800f208:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f20c:	3410      	adds	r4, #16
 800f20e:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
 800f212:	e7d6      	b.n	800f1c2 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x6a>
 800f214:	0801b17a 	.word	0x0801b17a

0800f218 <_ZN9Registers11AddRegisterIhEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 800f218:	b570      	push	{r4, r5, r6, lr}
 800f21a:	4604      	mov	r4, r0
 800f21c:	b086      	sub	sp, #24
 800f21e:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800f220:	6800      	ldr	r0, [r0, #0]
 800f222:	f04f 31ff 	mov.w	r1, #4294967295
 800f226:	f7fd f985 	bl	800c534 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 800f22a:	f10d 0207 	add.w	r2, sp, #7
 800f22e:	4631      	mov	r1, r6
 800f230:	4620      	mov	r0, r4
 800f232:	f008 ff8c 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 800f236:	f89d 5007 	ldrb.w	r5, [sp, #7]
 800f23a:	b125      	cbz	r5, 800f246 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 800f23c:	6820      	ldr	r0, [r4, #0]
 800f23e:	f7fd f9ad 	bl	800c59c <osSemaphoreRelease>
}
 800f242:	b006      	add	sp, #24
 800f244:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 800f246:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 800f24a:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 800f24e:	f7ff fd9d 	bl	800ed8c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	configuration_.register_info = register_;
 800f252:	2301      	movs	r3, #1
 800f254:	f8ad 600a 	strh.w	r6, [sp, #10]
 800f258:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 800f25c:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 800f260:	f88d 000c 	strb.w	r0, [sp, #12]
 800f264:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 800f268:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d0e5      	beq.n	800f23c <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
      push_back(const value_type& __x)
 800f270:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800f272:	e9d4 5302 	ldrd	r5, r3, [r4, #8]
 800f276:	429d      	cmp	r5, r3
 800f278:	d005      	beq.n	800f286 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x6e>
 800f27a:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800f27c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 800f280:	3510      	adds	r5, #16
 800f282:	60a5      	str	r5, [r4, #8]
 800f284:	e7da      	b.n	800f23c <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
	  _M_realloc_insert(end(), __x);
 800f286:	4629      	mov	r1, r5
 800f288:	1d20      	adds	r0, r4, #4
 800f28a:	f7ff ff65 	bl	800f158 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 800f28e:	e7d5      	b.n	800f23c <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>

0800f290 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800f290:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f294:	e9d0 8900 	ldrd	r8, r9, [r0]
 800f298:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 800f29a:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f29e:	eba9 0208 	sub.w	r2, r9, r8
 800f2a2:	4607      	mov	r7, r0
 800f2a4:	468a      	mov	sl, r1
	if (max_size() - size() < __n)
 800f2a6:	ebb3 1f22 	cmp.w	r3, r2, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f2aa:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
 800f2ae:	d102      	bne.n	800f2b6 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 800f2b0:	4820      	ldr	r0, [pc, #128]	@ (800f334 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa4>)
 800f2b2:	f00b fb59 	bl	801a968 <_ZSt20__throw_length_errorPKc>
 800f2b6:	45c1      	cmp	r9, r8
 800f2b8:	bf14      	ite	ne
 800f2ba:	4622      	movne	r2, r4
 800f2bc:	2201      	moveq	r2, #1
 800f2be:	eba1 0508 	sub.w	r5, r1, r8
 800f2c2:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800f2c4:	d231      	bcs.n	800f32a <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800f2c6:	b394      	cbz	r4, 800f32e <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9e>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800f2c8:	429c      	cmp	r4, r3
 800f2ca:	bf28      	it	cs
 800f2cc:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800f2ce:	0120      	lsls	r0, r4, #4
 800f2d0:	f00b fa95 	bl	801a7fe <_Znwj>
 800f2d4:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800f2d6:	eb06 0c05 	add.w	ip, r6, r5
      if (__count > 0)
 800f2da:	2d00      	cmp	r5, #0
 800f2dc:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 800f2e0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800f2e4:	dd04      	ble.n	800f2f0 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x60>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800f2e6:	462a      	mov	r2, r5
 800f2e8:	4641      	mov	r1, r8
 800f2ea:	4630      	mov	r0, r6
 800f2ec:	f00b fdbe 	bl	801ae6c <memmove>
      ptrdiff_t __count = __last - __first;
 800f2f0:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
 800f2f4:	3510      	adds	r5, #16
      if (__count > 0)
 800f2f6:	f1b9 0f00 	cmp.w	r9, #0
 800f2fa:	4435      	add	r5, r6
 800f2fc:	dd04      	ble.n	800f308 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x78>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800f2fe:	464a      	mov	r2, r9
 800f300:	4651      	mov	r1, sl
 800f302:	4628      	mov	r0, r5
 800f304:	f00b feaa 	bl	801b05c <memcpy>
      return __result + __count;
 800f308:	444d      	add	r5, r9
	if (__p)
 800f30a:	f1b8 0f00 	cmp.w	r8, #0
 800f30e:	d005      	beq.n	800f31c <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
 800f310:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800f312:	4640      	mov	r0, r8
 800f314:	eba1 0108 	sub.w	r1, r1, r8
 800f318:	f00b fa4c 	bl	801a7b4 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 800f31c:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800f320:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 800f324:	60be      	str	r6, [r7, #8]
    }
 800f326:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800f32a:	461c      	mov	r4, r3
 800f32c:	e7cf      	b.n	800f2ce <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800f32e:	4626      	mov	r6, r4
 800f330:	e7d1      	b.n	800f2d6 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
 800f332:	bf00      	nop
 800f334:	0801b17a 	.word	0x0801b17a

0800f338 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 800f338:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800f33a:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
      push_back(const value_type& __x)
 800f33e:	4605      	mov	r5, r0
 800f340:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800f342:	429c      	cmp	r4, r3
 800f344:	d005      	beq.n	800f352 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_+0x1a>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800f346:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 800f348:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 800f34c:	3410      	adds	r4, #16
 800f34e:	606c      	str	r4, [r5, #4]
      }
 800f350:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
 800f352:	4621      	mov	r1, r4
 800f354:	f7ff ff9c 	bl	800f290 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 800f358:	e7fa      	b.n	800f350 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_+0x18>

0800f35a <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0>:
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 800f35a:	b570      	push	{r4, r5, r6, lr}
 800f35c:	460c      	mov	r4, r1
 800f35e:	b086      	sub	sp, #24
 800f360:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800f362:	f04f 31ff 	mov.w	r1, #4294967295
 800f366:	6800      	ldr	r0, [r0, #0]
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 800f368:	4616      	mov	r6, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800f36a:	f7fd f8e3 	bl	800c534 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 800f36e:	4621      	mov	r1, r4
 800f370:	f10d 0207 	add.w	r2, sp, #7
 800f374:	4628      	mov	r0, r5
 800f376:	f008 feea 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 800f37a:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 800f37e:	4604      	mov	r4, r0
	if (!success) {
 800f380:	b923      	cbnz	r3, 800f38c <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x32>
	osSemaphoreRelease(RegistersSemaphore);
 800f382:	6828      	ldr	r0, [r5, #0]
 800f384:	f7fd f90a 	bl	800c59c <osSemaphoreRelease>
}
 800f388:	b006      	add	sp, #24
 800f38a:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 800f38c:	f10d 0007 	add.w	r0, sp, #7
 800f390:	f7ff fcfc 	bl	800ed8c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 800f394:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d0f2      	beq.n	800f382 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x28>
	if (target_register->register_info.type != registered_type) {
 800f39c:	7923      	ldrb	r3, [r4, #4]
 800f39e:	4298      	cmp	r0, r3
 800f3a0:	d1ef      	bne.n	800f382 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x28>
	if (callbacks[target_register->register_info.type] == NULL) {
 800f3a2:	3004      	adds	r0, #4
 800f3a4:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 800f3a8:	2800      	cmp	r0, #0
 800f3aa:	d0ea      	beq.n	800f382 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x28>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 800f3ac:	7823      	ldrb	r3, [r4, #0]
 800f3ae:	b983      	cbnz	r3, 800f3d2 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x78>
 800f3b0:	7863      	ldrb	r3, [r4, #1]
 800f3b2:	b973      	cbnz	r3, 800f3d2 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x78>
		target_callback_list->push_back(callback);
 800f3b4:	a902      	add	r1, sp, #8
		callback.pointer = pointer;
 800f3b6:	9602      	str	r6, [sp, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f3b8:	e9d0 2300 	ldrd	r2, r3, [r0]
 800f3bc:	1a9b      	subs	r3, r3, r2
 800f3be:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 800f3c0:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 800f3c2:	f7ff ffb9 	bl	800f338 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_>
	target_register->mode.pointer = true;
 800f3c6:	2301      	movs	r3, #1
 800f3c8:	7023      	strb	r3, [r4, #0]
	target_register->access.write = true;
 800f3ca:	f240 1301 	movw	r3, #257	@ 0x101
 800f3ce:	8123      	strh	r3, [r4, #8]
 800f3d0:	e7d7      	b.n	800f382 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x28>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 800f3d2:	8961      	ldrh	r1, [r4, #10]
 800f3d4:	f7ff fe14 	bl	800f000 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
		callback->pointer = pointer;
 800f3d8:	6006      	str	r6, [r0, #0]
 800f3da:	e7f4      	b.n	800f3c6 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x6c>

0800f3dc <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 800f3dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3de:	460c      	mov	r4, r1
 800f3e0:	b087      	sub	sp, #28
 800f3e2:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800f3e4:	f04f 31ff 	mov.w	r1, #4294967295
 800f3e8:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 800f3ea:	461e      	mov	r6, r3
 800f3ec:	4617      	mov	r7, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800f3ee:	f7fd f8a1 	bl	800c534 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 800f3f2:	4621      	mov	r1, r4
 800f3f4:	f10d 0207 	add.w	r2, sp, #7
 800f3f8:	4628      	mov	r0, r5
 800f3fa:	f008 fea8 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 800f3fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 800f402:	4604      	mov	r4, r0
	if (!success) {
 800f404:	b923      	cbnz	r3, 800f410 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x34>
	osSemaphoreRelease(RegistersSemaphore);
 800f406:	6828      	ldr	r0, [r5, #0]
 800f408:	f7fd f8c8 	bl	800c59c <osSemaphoreRelease>
}
 800f40c:	b007      	add	sp, #28
 800f40e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 800f410:	f10d 0007 	add.w	r0, sp, #7
 800f414:	f7ff fcba 	bl	800ed8c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 800f418:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d0f2      	beq.n	800f406 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (target_register->register_info.type != registered_type) {
 800f420:	7923      	ldrb	r3, [r4, #4]
 800f422:	4298      	cmp	r0, r3
 800f424:	d1ef      	bne.n	800f406 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (callbacks[target_register->register_info.type] == NULL) {
 800f426:	3004      	adds	r0, #4
 800f428:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 800f42c:	2800      	cmp	r0, #0
 800f42e:	d0ea      	beq.n	800f406 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 800f430:	7823      	ldrb	r3, [r4, #0]
 800f432:	b983      	cbnz	r3, 800f456 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
 800f434:	7863      	ldrb	r3, [r4, #1]
 800f436:	b973      	cbnz	r3, 800f456 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
		callback.read = NULL;
 800f438:	9305      	str	r3, [sp, #20]
		target_callback_list->push_back(callback);
 800f43a:	a902      	add	r1, sp, #8
 800f43c:	e9d0 2300 	ldrd	r2, r3, [r0]
		callback.write = write;
 800f440:	e9cd 7603 	strd	r7, r6, [sp, #12]
 800f444:	1a9b      	subs	r3, r3, r2
 800f446:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 800f448:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 800f44a:	f7ff ff75 	bl	800f338 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_>
	target_register->mode.callbacks = true;
 800f44e:	2301      	movs	r3, #1
 800f450:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 800f452:	7223      	strb	r3, [r4, #8]
 800f454:	e7d7      	b.n	800f406 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 800f456:	8961      	ldrh	r1, [r4, #10]
 800f458:	f7ff fdd2 	bl	800f000 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
		callback->write = write;
 800f45c:	e9c0 7601 	strd	r7, r6, [r0, #4]
 800f460:	e7f5      	b.n	800f44e <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x72>
	...

0800f464 <_ZN13Communication12AddRegistersEv>:
void Communication::AddRegisters(void) {
 800f464:	b510      	push	{r4, lr}
 800f466:	4604      	mov	r4, r0
	registers->AddRegister<uint8_t>(REG_COM_ID_PROPAGATION);
 800f468:	2101      	movs	r1, #1
 800f46a:	6840      	ldr	r0, [r0, #4]
 800f46c:	f7ff fed4 	bl	800f218 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_COM_ID_PROPAGATION);
 800f470:	2101      	movs	r1, #1
 800f472:	6860      	ldr	r0, [r4, #4]
 800f474:	f008 fea4 	bl	80181c0 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_COM_ID_PROPAGATION, (void*) this,
 800f478:	4b32      	ldr	r3, [pc, #200]	@ (800f544 <_ZN13Communication12AddRegistersEv+0xe0>)
 800f47a:	4622      	mov	r2, r4
 800f47c:	6860      	ldr	r0, [r4, #4]
 800f47e:	2101      	movs	r1, #1
 800f480:	f7ff ffac 	bl	800f3dc <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_COM_ADDRESS);
 800f484:	6860      	ldr	r0, [r4, #4]
 800f486:	2102      	movs	r1, #2
 800f488:	f7ff fec6 	bl	800f218 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_COM_ADDRESS);
 800f48c:	2102      	movs	r1, #2
 800f48e:	6860      	ldr	r0, [r4, #4]
 800f490:	f008 fe96 	bl	80181c0 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_COM_ADDRESS, &CommunicationSemaphore);
 800f494:	4622      	mov	r2, r4
 800f496:	2102      	movs	r1, #2
 800f498:	6860      	ldr	r0, [r4, #4]
 800f49a:	f008 fe77 	bl	801818c <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer(REG_COM_ADDRESS, &address);
 800f49e:	f104 0214 	add.w	r2, r4, #20
 800f4a2:	6860      	ldr	r0, [r4, #4]
 800f4a4:	2102      	movs	r1, #2
 800f4a6:	f7ff ff58 	bl	800f35a <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0>
	registers->AddRegister<uint8_t>(REG_COM_ADD_GROUP_ADDRESS);
 800f4aa:	6860      	ldr	r0, [r4, #4]
 800f4ac:	2103      	movs	r1, #3
 800f4ae:	f7ff feb3 	bl	800f218 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_COM_ADD_GROUP_ADDRESS);
 800f4b2:	2103      	movs	r1, #3
 800f4b4:	6860      	ldr	r0, [r4, #4]
 800f4b6:	f008 fe83 	bl	80181c0 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_COM_ADD_GROUP_ADDRESS, (void*) this,
 800f4ba:	4622      	mov	r2, r4
 800f4bc:	4b22      	ldr	r3, [pc, #136]	@ (800f548 <_ZN13Communication12AddRegistersEv+0xe4>)
 800f4be:	2103      	movs	r1, #3
 800f4c0:	6860      	ldr	r0, [r4, #4]
 800f4c2:	f7ff ff8b 	bl	800f3dc <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_COM_REMOVE_GROUP_ADDRESS);
 800f4c6:	6860      	ldr	r0, [r4, #4]
 800f4c8:	2104      	movs	r1, #4
 800f4ca:	f7ff fea5 	bl	800f218 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_COM_REMOVE_GROUP_ADDRESS);
 800f4ce:	2104      	movs	r1, #4
 800f4d0:	6860      	ldr	r0, [r4, #4]
 800f4d2:	f008 fe75 	bl	80181c0 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_COM_REMOVE_GROUP_ADDRESS, (void*) this,
 800f4d6:	4622      	mov	r2, r4
 800f4d8:	4b1c      	ldr	r3, [pc, #112]	@ (800f54c <_ZN13Communication12AddRegistersEv+0xe8>)
 800f4da:	2104      	movs	r1, #4
 800f4dc:	6860      	ldr	r0, [r4, #4]
 800f4de:	f7ff ff7d 	bl	800f3dc <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_COM_CLEAR_GROUP_ADDRESS);
 800f4e2:	6860      	ldr	r0, [r4, #4]
 800f4e4:	2105      	movs	r1, #5
 800f4e6:	f7ff fe97 	bl	800f218 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_COM_CLEAR_GROUP_ADDRESS);
 800f4ea:	2105      	movs	r1, #5
 800f4ec:	6860      	ldr	r0, [r4, #4]
 800f4ee:	f008 fe67 	bl	80181c0 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_COM_CLEAR_GROUP_ADDRESS, (void*) this,
 800f4f2:	4b17      	ldr	r3, [pc, #92]	@ (800f550 <_ZN13Communication12AddRegistersEv+0xec>)
 800f4f4:	4622      	mov	r2, r4
 800f4f6:	6860      	ldr	r0, [r4, #4]
 800f4f8:	2105      	movs	r1, #5
 800f4fa:	f7ff ff6f 	bl	800f3dc <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_COM_GET_GROUP_ADDRESS);
 800f4fe:	6860      	ldr	r0, [r4, #4]
 800f500:	2106      	movs	r1, #6
 800f502:	f7ff fe89 	bl	800f218 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsVector(REG_COM_GET_GROUP_ADDRESS);
 800f506:	2106      	movs	r1, #6
 800f508:	6860      	ldr	r0, [r4, #4]
 800f50a:	f008 fe91 	bl	8018230 <_ZN9Registers19SetRegisterAsVectorEt>
	return AddRegisterPointer(ID, reinterpreted_pointer);
 800f50e:	f104 0218 	add.w	r2, r4, #24
 800f512:	6860      	ldr	r0, [r4, #4]
 800f514:	2106      	movs	r1, #6
 800f516:	f7ff ff20 	bl	800f35a <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0>
	registers->SetRegisterPermissions(REG_COM_GET_GROUP_ADDRESS, READ_PERMISSION);
 800f51a:	2202      	movs	r2, #2
 800f51c:	2106      	movs	r1, #6
 800f51e:	6860      	ldr	r0, [r4, #4]
 800f520:	f008 fe89 	bl	8018236 <_ZN9Registers22SetRegisterPermissionsEth>
	registers->AddRegister<uint8_t>(REG_COM_FORWARD_MESSAGE);
 800f524:	6860      	ldr	r0, [r4, #4]
 800f526:	2107      	movs	r1, #7
 800f528:	f7ff fe76 	bl	800f218 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsVector(REG_COM_FORWARD_MESSAGE);
 800f52c:	2107      	movs	r1, #7
 800f52e:	6860      	ldr	r0, [r4, #4]
 800f530:	f008 fe7e 	bl	8018230 <_ZN9Registers19SetRegisterAsVectorEt>
	registers->AddWriteCallback<uint8_t>(REG_COM_FORWARD_MESSAGE, (void*) this,
 800f534:	4622      	mov	r2, r4
 800f536:	6860      	ldr	r0, [r4, #4]
 800f538:	2107      	movs	r1, #7
 800f53a:	4b06      	ldr	r3, [pc, #24]	@ (800f554 <_ZN13Communication12AddRegistersEv+0xf0>)
}
 800f53c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	registers->AddWriteCallback<uint8_t>(REG_COM_FORWARD_MESSAGE, (void*) this,
 800f540:	f7ff bf4c 	b.w	800f3dc <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
 800f544:	08011533 	.word	0x08011533
 800f548:	0800f729 	.word	0x0800f729
 800f54c:	0800f887 	.word	0x0800f887
 800f550:	0800effb 	.word	0x0800effb
 800f554:	080111ed 	.word	0x080111ed

0800f558 <_ZN23SubscriberConfigurationD1Ev>:
struct SubscriberConfiguration {
 800f558:	b510      	push	{r4, lr}
 800f55a:	4604      	mov	r4, r0
      }
 800f55c:	301c      	adds	r0, #28
 800f55e:	f7f1 fb59 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	_M_deallocate(_M_impl._M_start,
 800f562:	6920      	ldr	r0, [r4, #16]
	if (__p)
 800f564:	b118      	cbz	r0, 800f56e <_ZN23SubscriberConfigurationD1Ev+0x16>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800f566:	69a1      	ldr	r1, [r4, #24]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800f568:	1a09      	subs	r1, r1, r0
 800f56a:	f00b f923 	bl	801a7b4 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 800f56e:	6860      	ldr	r0, [r4, #4]
	if (__p)
 800f570:	b118      	cbz	r0, 800f57a <_ZN23SubscriberConfigurationD1Ev+0x22>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800f572:	68e1      	ldr	r1, [r4, #12]
 800f574:	1a09      	subs	r1, r1, r0
 800f576:	f00b f91d 	bl	801a7b4 <_ZdlPvj>
 800f57a:	4620      	mov	r0, r4
 800f57c:	bd10      	pop	{r4, pc}

0800f57e <_ZNSt12_Vector_baseImSaImEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800f57e:	b510      	push	{r4, lr}
 800f580:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 800f582:	6800      	ldr	r0, [r0, #0]
	if (__p)
 800f584:	b120      	cbz	r0, 800f590 <_ZNSt12_Vector_baseImSaImEED1Ev+0x12>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800f586:	68a1      	ldr	r1, [r4, #8]
 800f588:	1a09      	subs	r1, r1, r0
 800f58a:	1089      	asrs	r1, r1, #2
 800f58c:	f7ff fa34 	bl	800e9f8 <_ZNSt12_Vector_baseIP21CommunicationProtocolSaIS1_EE13_M_deallocateEPS1_j.part.0>
      }
 800f590:	4620      	mov	r0, r4
 800f592:	bd10      	pop	{r4, pc}

0800f594 <_ZNSt6vectorImSaImEEaSEOS1_.isra.0>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 800f594:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 800f596:	680d      	ldr	r5, [r1, #0]
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 800f598:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 800f59a:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 800f59c:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 800f5a0:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 800f5a2:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 800f5a4:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 800f5a6:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 800f5a8:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 800f5aa:	688d      	ldr	r5, [r1, #8]
 800f5ac:	6085      	str	r5, [r0, #8]
      }
 800f5ae:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 800f5b0:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 800f5b2:	e9c1 3300 	strd	r3, r3, [r1]
 800f5b6:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 800f5ba:	f7ff ffe0 	bl	800f57e <_ZNSt12_Vector_baseImSaImEED1Ev>
      }
 800f5be:	b005      	add	sp, #20
 800f5c0:	bd30      	pop	{r4, r5, pc}

0800f5c2 <_ZNSt12_Vector_baseIaSaIaEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800f5c2:	b510      	push	{r4, lr}
 800f5c4:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 800f5c6:	6800      	ldr	r0, [r0, #0]
	if (__p)
 800f5c8:	b118      	cbz	r0, 800f5d2 <_ZNSt12_Vector_baseIaSaIaEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800f5ca:	68a1      	ldr	r1, [r4, #8]
 800f5cc:	1a09      	subs	r1, r1, r0
 800f5ce:	f00b f8f1 	bl	801a7b4 <_ZdlPvj>
      }
 800f5d2:	4620      	mov	r0, r4
 800f5d4:	bd10      	pop	{r4, pc}

0800f5d6 <_ZNSt6vectorIaSaIaEEaSEOS1_.isra.0>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 800f5d6:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 800f5d8:	680d      	ldr	r5, [r1, #0]
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 800f5da:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 800f5dc:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 800f5de:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 800f5e2:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 800f5e4:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 800f5e6:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 800f5e8:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 800f5ea:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 800f5ec:	688d      	ldr	r5, [r1, #8]
 800f5ee:	6085      	str	r5, [r0, #8]
      }
 800f5f0:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 800f5f2:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 800f5f4:	e9c1 3300 	strd	r3, r3, [r1]
 800f5f8:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 800f5fc:	f7ff ffe1 	bl	800f5c2 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
      }
 800f600:	b005      	add	sp, #20
 800f602:	bd30      	pop	{r4, r5, pc}

0800f604 <_ZNSt6vectorIfSaIfEEaSEOS1_.isra.0>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 800f604:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 800f606:	680d      	ldr	r5, [r1, #0]
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 800f608:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 800f60a:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 800f60c:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 800f610:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 800f612:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 800f614:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 800f616:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 800f618:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 800f61a:	688d      	ldr	r5, [r1, #8]
 800f61c:	6085      	str	r5, [r0, #8]
      }
 800f61e:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 800f620:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 800f622:	e9c1 3300 	strd	r3, r3, [r1]
 800f626:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 800f62a:	f7f2 fcf1 	bl	8002010 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
      }
 800f62e:	b005      	add	sp, #20
 800f630:	bd30      	pop	{r4, r5, pc}
	...

0800f634 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>:
      vector<_Tp, _Alloc>::
 800f634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800f638:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
      vector<_Tp, _Alloc>::
 800f63c:	4605      	mov	r5, r0
 800f63e:	4689      	mov	r9, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800f640:	429c      	cmp	r4, r3
 800f642:	d006      	beq.n	800f652 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x1e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800f644:	780b      	ldrb	r3, [r1, #0]
 800f646:	7023      	strb	r3, [r4, #0]
	    ++this->_M_impl._M_finish;
 800f648:	6843      	ldr	r3, [r0, #4]
 800f64a:	3301      	adds	r3, #1
 800f64c:	6043      	str	r3, [r0, #4]
      }
 800f64e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800f652:	4a10      	ldr	r2, [pc, #64]	@ (800f694 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x60>)
 800f654:	2101      	movs	r1, #1
 800f656:	f7f1 fafe 	bl	8000c56 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
      pointer __old_start = this->_M_impl._M_start;
 800f65a:	682f      	ldr	r7, [r5, #0]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800f65c:	4680      	mov	r8, r0
      pointer __new_start(this->_M_allocate(__len));
 800f65e:	f7ff fb8a 	bl	800ed76 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
 800f662:	1be4      	subs	r4, r4, r7
 800f664:	f899 3000 	ldrb.w	r3, [r9]
 800f668:	4606      	mov	r6, r0
      if (__count > 0)
 800f66a:	2c00      	cmp	r4, #0
 800f66c:	5503      	strb	r3, [r0, r4]
 800f66e:	dd03      	ble.n	800f678 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x44>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800f670:	4622      	mov	r2, r4
 800f672:	4639      	mov	r1, r7
 800f674:	f00b fbfa 	bl	801ae6c <memmove>
	      ++__new_finish;
 800f678:	3401      	adds	r4, #1
 800f67a:	4434      	add	r4, r6
	if (__p)
 800f67c:	b127      	cbz	r7, 800f688 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x54>
		    this->_M_impl._M_end_of_storage - __old_start);
 800f67e:	68a9      	ldr	r1, [r5, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800f680:	4638      	mov	r0, r7
 800f682:	1bc9      	subs	r1, r1, r7
 800f684:	f00b f896 	bl	801a7b4 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 800f688:	e9c5 6400 	strd	r6, r4, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800f68c:	4446      	add	r6, r8
 800f68e:	60ae      	str	r6, [r5, #8]
      }
 800f690:	e7dd      	b.n	800f64e <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x1a>
 800f692:	bf00      	nop
 800f694:	0801b17a 	.word	0x0801b17a

0800f698 <_ZNSt6vectorIhSaIhEE9push_backERKh>:
      push_back(const value_type& __x)
 800f698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800f69c:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
      push_back(const value_type& __x)
 800f6a0:	4605      	mov	r5, r0
 800f6a2:	4689      	mov	r9, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800f6a4:	429c      	cmp	r4, r3
 800f6a6:	d006      	beq.n	800f6b6 <_ZNSt6vectorIhSaIhEE9push_backERKh+0x1e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800f6a8:	780b      	ldrb	r3, [r1, #0]
 800f6aa:	7023      	strb	r3, [r4, #0]
	    ++this->_M_impl._M_finish;
 800f6ac:	6843      	ldr	r3, [r0, #4]
 800f6ae:	3301      	adds	r3, #1
 800f6b0:	6043      	str	r3, [r0, #4]
      }
 800f6b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800f6b6:	4a10      	ldr	r2, [pc, #64]	@ (800f6f8 <_ZNSt6vectorIhSaIhEE9push_backERKh+0x60>)
 800f6b8:	2101      	movs	r1, #1
 800f6ba:	f7f1 facc 	bl	8000c56 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
      pointer __old_start = this->_M_impl._M_start;
 800f6be:	682f      	ldr	r7, [r5, #0]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800f6c0:	4680      	mov	r8, r0
      pointer __new_start(this->_M_allocate(__len));
 800f6c2:	f7ff fb58 	bl	800ed76 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
 800f6c6:	1be4      	subs	r4, r4, r7
 800f6c8:	f899 3000 	ldrb.w	r3, [r9]
 800f6cc:	4606      	mov	r6, r0
      if (__count > 0)
 800f6ce:	2c00      	cmp	r4, #0
 800f6d0:	5503      	strb	r3, [r0, r4]
 800f6d2:	dd03      	ble.n	800f6dc <_ZNSt6vectorIhSaIhEE9push_backERKh+0x44>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800f6d4:	4622      	mov	r2, r4
 800f6d6:	4639      	mov	r1, r7
 800f6d8:	f00b fbc8 	bl	801ae6c <memmove>
	      ++__new_finish;
 800f6dc:	3401      	adds	r4, #1
 800f6de:	4434      	add	r4, r6
	if (__p)
 800f6e0:	b127      	cbz	r7, 800f6ec <_ZNSt6vectorIhSaIhEE9push_backERKh+0x54>
		    this->_M_impl._M_end_of_storage - __old_start);
 800f6e2:	68a9      	ldr	r1, [r5, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800f6e4:	4638      	mov	r0, r7
 800f6e6:	1bc9      	subs	r1, r1, r7
 800f6e8:	f00b f864 	bl	801a7b4 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 800f6ec:	e9c5 6400 	strd	r6, r4, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800f6f0:	4446      	add	r6, r8
 800f6f2:	60ae      	str	r6, [r5, #8]
      }
 800f6f4:	e7dd      	b.n	800f6b2 <_ZNSt6vectorIhSaIhEE9push_backERKh+0x1a>
 800f6f6:	bf00      	nop
 800f6f8:	0801b17a 	.word	0x0801b17a

0800f6fc <_ZN13Communication15AddGroupAddressEh>:
bool Communication::AddGroupAddress(uint8_t address) {
 800f6fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 800f6fe:	4605      	mov	r5, r0
bool Communication::AddGroupAddress(uint8_t address) {
 800f700:	4604      	mov	r4, r0
 800f702:	f88d 1007 	strb.w	r1, [sp, #7]
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 800f706:	f04f 31ff 	mov.w	r1, #4294967295
 800f70a:	f855 0b18 	ldr.w	r0, [r5], #24
 800f70e:	f7fc ff11 	bl	800c534 <osSemaphoreAcquire>
	group_addresses.push_back(address);
 800f712:	f10d 0107 	add.w	r1, sp, #7
 800f716:	4628      	mov	r0, r5
 800f718:	f7ff ffbe 	bl	800f698 <_ZNSt6vectorIhSaIhEE9push_backERKh>
	osSemaphoreRelease(CommunicationSemaphore);
 800f71c:	6820      	ldr	r0, [r4, #0]
 800f71e:	f7fc ff3d 	bl	800c59c <osSemaphoreRelease>
}
 800f722:	2001      	movs	r0, #1
 800f724:	b003      	add	sp, #12
 800f726:	bd30      	pop	{r4, r5, pc}

0800f728 <_ZZN13Communication12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t>:
			return self->AddGroupAddress(*input);
 800f728:	7811      	ldrb	r1, [r2, #0]
 800f72a:	f7ff bfe7 	b.w	800f6fc <_ZN13Communication15AddGroupAddressEh>
	...

0800f730 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE2atEj>:
      at(size_type __n)
 800f730:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f732:	e9d0 5400 	ldrd	r5, r4, [r0]
 800f736:	1b64      	subs	r4, r4, r5
	if (__n >= this->size())
 800f738:	ebb1 1f24 	cmp.w	r1, r4, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f73c:	ea4f 1224 	mov.w	r2, r4, asr #4
	if (__n >= this->size())
 800f740:	d302      	bcc.n	800f748 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 800f742:	4803      	ldr	r0, [pc, #12]	@ (800f750 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE2atEj+0x20>)
 800f744:	f00b f913 	bl	801a96e <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 800f748:	eb05 1001 	add.w	r0, r5, r1, lsl #4
 800f74c:	bd38      	pop	{r3, r4, r5, pc}
 800f74e:	bf00      	nop
 800f750:	0801b3bc 	.word	0x0801b3bc

0800f754 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE2atEj>:
      at(size_type __n)
 800f754:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f756:	e9d0 5400 	ldrd	r5, r4, [r0]
 800f75a:	1b64      	subs	r4, r4, r5
	if (__n >= this->size())
 800f75c:	ebb1 1f24 	cmp.w	r1, r4, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f760:	ea4f 1224 	mov.w	r2, r4, asr #4
	if (__n >= this->size())
 800f764:	d302      	bcc.n	800f76c <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 800f766:	4803      	ldr	r0, [pc, #12]	@ (800f774 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE2atEj+0x20>)
 800f768:	f00b f901 	bl	801a96e <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 800f76c:	eb05 1001 	add.w	r0, r5, r1, lsl #4
 800f770:	bd38      	pop	{r3, r4, r5, pc}
 800f772:	bf00      	nop
 800f774:	0801b3bc 	.word	0x0801b3bc

0800f778 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE2atEj>:
      at(size_type __n)
 800f778:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f77a:	e9d0 5400 	ldrd	r5, r4, [r0]
 800f77e:	1b64      	subs	r4, r4, r5
	if (__n >= this->size())
 800f780:	ebb1 1f24 	cmp.w	r1, r4, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f784:	ea4f 1224 	mov.w	r2, r4, asr #4
	if (__n >= this->size())
 800f788:	d302      	bcc.n	800f790 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 800f78a:	4803      	ldr	r0, [pc, #12]	@ (800f798 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE2atEj+0x20>)
 800f78c:	f00b f8ef 	bl	801a96e <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 800f790:	eb05 1001 	add.w	r0, r5, r1, lsl #4
 800f794:	bd38      	pop	{r3, r4, r5, pc}
 800f796:	bf00      	nop
 800f798:	0801b3bc 	.word	0x0801b3bc

0800f79c <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800f79c:	b538      	push	{r3, r4, r5, lr}
 800f79e:	4603      	mov	r3, r0
 800f7a0:	4610      	mov	r0, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f7a2:	e9d3 3500 	ldrd	r3, r5, [r3]
 800f7a6:	1aed      	subs	r5, r5, r3
	if (max_size() - size() < __n)
 800f7a8:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f7ac:	10ac      	asrs	r4, r5, #2
	if (max_size() - size() < __n)
 800f7ae:	eba3 05a5 	sub.w	r5, r3, r5, asr #2
 800f7b2:	428d      	cmp	r5, r1
 800f7b4:	d201      	bcs.n	800f7ba <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x1e>
	  __throw_length_error(__N(__s));
 800f7b6:	f00b f8d7 	bl	801a968 <_ZSt20__throw_length_errorPKc>
 800f7ba:	42a1      	cmp	r1, r4
 800f7bc:	bf38      	it	cc
 800f7be:	4621      	movcc	r1, r4
 800f7c0:	1864      	adds	r4, r4, r1
 800f7c2:	d204      	bcs.n	800f7ce <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x32>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800f7c4:	429c      	cmp	r4, r3
 800f7c6:	4620      	mov	r0, r4
 800f7c8:	bf28      	it	cs
 800f7ca:	4618      	movcs	r0, r3
      }
 800f7cc:	bd38      	pop	{r3, r4, r5, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	e7fc      	b.n	800f7cc <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x30>

0800f7d2 <_ZNKSt6vectorIaSaIaEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800f7d2:	b510      	push	{r4, lr}
 800f7d4:	4604      	mov	r4, r0
 800f7d6:	4610      	mov	r0, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f7d8:	e9d4 2300 	ldrd	r2, r3, [r4]
	if (max_size() - size() < __n)
 800f7dc:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f7e0:	1a9b      	subs	r3, r3, r2
	if (max_size() - size() < __n)
 800f7e2:	1ae2      	subs	r2, r4, r3
 800f7e4:	428a      	cmp	r2, r1
 800f7e6:	d201      	bcs.n	800f7ec <_ZNKSt6vectorIaSaIaEE12_M_check_lenEjPKc+0x1a>
	  __throw_length_error(__N(__s));
 800f7e8:	f00b f8be 	bl	801a968 <_ZSt20__throw_length_errorPKc>
 800f7ec:	4299      	cmp	r1, r3
 800f7ee:	bf38      	it	cc
 800f7f0:	4619      	movcc	r1, r3
 800f7f2:	185b      	adds	r3, r3, r1
 800f7f4:	d204      	bcs.n	800f800 <_ZNKSt6vectorIaSaIaEE12_M_check_lenEjPKc+0x2e>
 800f7f6:	42a3      	cmp	r3, r4
 800f7f8:	bf28      	it	cs
 800f7fa:	4623      	movcs	r3, r4
 800f7fc:	4618      	mov	r0, r3
      }
 800f7fe:	bd10      	pop	{r4, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800f800:	4620      	mov	r0, r4
 800f802:	e7fc      	b.n	800f7fe <_ZNKSt6vectorIaSaIaEE12_M_check_lenEjPKc+0x2c>

0800f804 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800f804:	b538      	push	{r3, r4, r5, lr}
 800f806:	4603      	mov	r3, r0
 800f808:	4610      	mov	r0, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f80a:	e9d3 3500 	ldrd	r3, r5, [r3]
 800f80e:	1aed      	subs	r5, r5, r3
	if (max_size() - size() < __n)
 800f810:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f814:	10ac      	asrs	r4, r5, #2
	if (max_size() - size() < __n)
 800f816:	eba3 05a5 	sub.w	r5, r3, r5, asr #2
 800f81a:	428d      	cmp	r5, r1
 800f81c:	d201      	bcs.n	800f822 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x1e>
	  __throw_length_error(__N(__s));
 800f81e:	f00b f8a3 	bl	801a968 <_ZSt20__throw_length_errorPKc>
 800f822:	42a1      	cmp	r1, r4
 800f824:	bf38      	it	cc
 800f826:	4621      	movcc	r1, r4
 800f828:	1864      	adds	r4, r4, r1
 800f82a:	d204      	bcs.n	800f836 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x32>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800f82c:	429c      	cmp	r4, r3
 800f82e:	4620      	mov	r0, r4
 800f830:	bf28      	it	cs
 800f832:	4618      	movcs	r0, r3
      }
 800f834:	bd38      	pop	{r3, r4, r5, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800f836:	4618      	mov	r0, r3
 800f838:	e7fc      	b.n	800f834 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x30>

0800f83a <_ZN13Communication18RemoveGroupAddressEh>:
bool Communication::RemoveGroupAddress(uint8_t address_) {
 800f83a:	b570      	push	{r4, r5, r6, lr}
 800f83c:	4604      	mov	r4, r0
 800f83e:	460d      	mov	r5, r1
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 800f840:	6800      	ldr	r0, [r0, #0]
 800f842:	f04f 31ff 	mov.w	r1, #4294967295
 800f846:	f7fc fe75 	bl	800c534 <osSemaphoreAcquire>
      : _M_current(__i) { }
 800f84a:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
	for (uint8_t address : group_addresses) {
 800f84e:	4603      	mov	r3, r0
 800f850:	428b      	cmp	r3, r1
 800f852:	d104      	bne.n	800f85e <_ZN13Communication18RemoveGroupAddressEh+0x24>
	osSemaphoreRelease(CommunicationSemaphore);
 800f854:	6820      	ldr	r0, [r4, #0]
 800f856:	f7fc fea1 	bl	800c59c <osSemaphoreRelease>
	return false;
 800f85a:	2000      	movs	r0, #0
 800f85c:	e010      	b.n	800f880 <_ZN13Communication18RemoveGroupAddressEh+0x46>
 800f85e:	461a      	mov	r2, r3
		if (address == address_) {
 800f860:	f812 6b01 	ldrb.w	r6, [r2], #1
 800f864:	42ae      	cmp	r6, r5
 800f866:	d10c      	bne.n	800f882 <_ZN13Communication18RemoveGroupAddressEh+0x48>
      { return __normal_iterator(_M_current + __n); }
 800f868:	1a1a      	subs	r2, r3, r0
 800f86a:	fa50 f282 	uxtab	r2, r0, r2
 800f86e:	1c50      	adds	r0, r2, #1
      if (__position + 1 != end())
 800f870:	4281      	cmp	r1, r0
 800f872:	d001      	beq.n	800f878 <_ZN13Communication18RemoveGroupAddressEh+0x3e>
			      _Category>::__copy_m(__first, __last, __result);
 800f874:	f7f2 f9fe 	bl	8001c74 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
      --this->_M_impl._M_finish;
 800f878:	69e3      	ldr	r3, [r4, #28]
			return true;
 800f87a:	2001      	movs	r0, #1
 800f87c:	3b01      	subs	r3, #1
 800f87e:	61e3      	str	r3, [r4, #28]
}
 800f880:	bd70      	pop	{r4, r5, r6, pc}
 800f882:	4613      	mov	r3, r2
 800f884:	e7e4      	b.n	800f850 <_ZN13Communication18RemoveGroupAddressEh+0x16>

0800f886 <_ZZN13Communication12AddRegistersEvENUlPvtPhtE1_4_FUNES0_tS1_t>:
			return self->RemoveGroupAddress(*input);
 800f886:	7811      	ldrb	r1, [r2, #0]
 800f888:	f7ff bfd7 	b.w	800f83a <_ZN13Communication18RemoveGroupAddressEh>

0800f88c <_ZN14MessageElementC1ERKS_>:
struct MessageElement {
 800f88c:	b510      	push	{r4, lr}
 800f88e:	460b      	mov	r3, r1
 800f890:	4604      	mov	r4, r0
 800f892:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f896:	7a1a      	ldrb	r2, [r3, #8]
 800f898:	80a1      	strh	r1, [r4, #4]
 800f89a:	88d9      	ldrh	r1, [r3, #6]
 800f89c:	6020      	str	r0, [r4, #0]
 800f89e:	f104 000c 	add.w	r0, r4, #12
 800f8a2:	80e1      	strh	r1, [r4, #6]
 800f8a4:	f103 010c 	add.w	r1, r3, #12
 800f8a8:	7222      	strb	r2, [r4, #8]
 800f8aa:	f7f1 fa63 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 800f8ae:	4620      	mov	r0, r4
 800f8b0:	bd10      	pop	{r4, pc}

0800f8b2 <_ZN13MessageHeaderC1ERKS_>:
 800f8b2:	b538      	push	{r3, r4, r5, lr}
 800f8b4:	460d      	mov	r5, r1
 800f8b6:	f811 3b04 	ldrb.w	r3, [r1], #4
 800f8ba:	4604      	mov	r4, r0
 800f8bc:	f800 3b04 	strb.w	r3, [r0], #4
 800f8c0:	f7f1 fa58 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 800f8c4:	8a2b      	ldrh	r3, [r5, #16]
 800f8c6:	4620      	mov	r0, r4
 800f8c8:	8223      	strh	r3, [r4, #16]
 800f8ca:	bd38      	pop	{r3, r4, r5, pc}

0800f8cc <_ZN13Communication4SpinEv>:
void Communication::Spin(void) {
 800f8cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t index = 0;
 800f8d0:	2500      	movs	r5, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f8d2:	4f29      	ldr	r7, [pc, #164]	@ (800f978 <_ZN13Communication4SpinEv+0xac>)
void Communication::Spin(void) {
 800f8d4:	b08d      	sub	sp, #52	@ 0x34
 800f8d6:	4604      	mov	r4, r0
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 800f8d8:	f04f 31ff 	mov.w	r1, #4294967295
 800f8dc:	6800      	ldr	r0, [r0, #0]
 800f8de:	f7fc fe29 	bl	800c534 <osSemaphoreAcquire>
 800f8e2:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 800f8e6:	1a9b      	subs	r3, r3, r2
 800f8e8:	109b      	asrs	r3, r3, #2
 800f8ea:	437b      	muls	r3, r7
	while (index < pending_messages.size()) {
 800f8ec:	429d      	cmp	r5, r3
 800f8ee:	d308      	bcc.n	800f902 <_ZN13Communication4SpinEv+0x36>
	osSemaphoreRelease(CommunicationSemaphore);
 800f8f0:	6820      	ldr	r0, [r4, #0]
 800f8f2:	f7fc fe53 	bl	800c59c <osSemaphoreRelease>
	osDelay(DEFAULT_COMMUNICATION_PERIOD);
 800f8f6:	2064      	movs	r0, #100	@ 0x64
}
 800f8f8:	b00d      	add	sp, #52	@ 0x34
 800f8fa:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	osDelay(DEFAULT_COMMUNICATION_PERIOD);
 800f8fe:	f7fc bdaf 	b.w	800c460 <osDelay>
	return *(this->_M_impl._M_start + __n);
 800f902:	eb05 0185 	add.w	r1, r5, r5, lsl #2
		MessageHeader message = pending_messages[index];
 800f906:	a802      	add	r0, sp, #8
 800f908:	ea4f 0881 	mov.w	r8, r1, lsl #2
 800f90c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800f910:	f7ff ffcf 	bl	800f8b2 <_ZN13MessageHeaderC1ERKS_>
		CommunicationProtocol* protocol = FindProtocol(message.interface, &success);
 800f914:	f10d 0207 	add.w	r2, sp, #7
 800f918:	f89d 1008 	ldrb.w	r1, [sp, #8]
 800f91c:	4620      	mov	r0, r4
 800f91e:	f7ff fab5 	bl	800ee8c <_ZN13Communication12FindProtocolEhPb>
		if (!success)
 800f922:	f89d 3007 	ldrb.w	r3, [sp, #7]
		CommunicationProtocol* protocol = FindProtocol(message.interface, &success);
 800f926:	4606      	mov	r6, r0
		if (!success)
 800f928:	b92b      	cbnz	r3, 800f936 <_ZN13Communication4SpinEv+0x6a>
 800f92a:	4620      	mov	r0, r4
 800f92c:	f850 1f30 	ldr.w	r1, [r0, #48]!
      { return _M_erase(begin() + (__position - cbegin())); }
 800f930:	4441      	add	r1, r8
 800f932:	f7ff fb77 	bl	800f024 <_ZNSt6vectorI13MessageHeaderSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>
		message.source_address = address; // set the source address as the module address
 800f936:	7d23      	ldrb	r3, [r4, #20]
		HAL_StatusTypeDef status = protocol->Send(message);
 800f938:	a902      	add	r1, sp, #8
 800f93a:	a807      	add	r0, sp, #28
		message.source_address = address; // set the source address as the module address
 800f93c:	f88d 3019 	strb.w	r3, [sp, #25]
		HAL_StatusTypeDef status = protocol->Send(message);
 800f940:	6833      	ldr	r3, [r6, #0]
 800f942:	f8d3 9008 	ldr.w	r9, [r3, #8]
 800f946:	f7ff ffb4 	bl	800f8b2 <_ZN13MessageHeaderC1ERKS_>
 800f94a:	a907      	add	r1, sp, #28
 800f94c:	4630      	mov	r0, r6
 800f94e:	47c8      	blx	r9
 800f950:	4606      	mov	r6, r0
      }
 800f952:	a808      	add	r0, sp, #32
 800f954:	f7f1 f95e 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (status == HAL_OK || status == HAL_ERROR)
 800f958:	2e01      	cmp	r6, #1
 800f95a:	d809      	bhi.n	800f970 <_ZN13Communication4SpinEv+0xa4>
 800f95c:	4620      	mov	r0, r4
 800f95e:	f850 1f30 	ldr.w	r1, [r0, #48]!
      { return _M_erase(begin() + (__position - cbegin())); }
 800f962:	4441      	add	r1, r8
 800f964:	f7ff fb5e 	bl	800f024 <_ZNSt6vectorI13MessageHeaderSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>
      }
 800f968:	a803      	add	r0, sp, #12
 800f96a:	f7f1 f953 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 800f96e:	e7b8      	b.n	800f8e2 <_ZN13Communication4SpinEv+0x16>
			index++;
 800f970:	3501      	adds	r5, #1
 800f972:	b2ed      	uxtb	r5, r5
 800f974:	e7f8      	b.n	800f968 <_ZN13Communication4SpinEv+0x9c>
 800f976:	bf00      	nop
 800f978:	cccccccd 	.word	0xcccccccd

0800f97c <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800f97c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f980:	e9d0 7900 	ldrd	r7, r9, [r0]
 800f984:	4b3f      	ldr	r3, [pc, #252]	@ (800fa84 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x108>)
 800f986:	4606      	mov	r6, r0
 800f988:	eba9 0507 	sub.w	r5, r9, r7
 800f98c:	4688      	mov	r8, r1
 800f98e:	4614      	mov	r4, r2
 800f990:	10ad      	asrs	r5, r5, #2
 800f992:	435d      	muls	r5, r3
	if (max_size() - size() < __n)
 800f994:	4b3c      	ldr	r3, [pc, #240]	@ (800fa88 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x10c>)
 800f996:	429d      	cmp	r5, r3
 800f998:	d102      	bne.n	800f9a0 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
 800f99a:	483c      	ldr	r0, [pc, #240]	@ (800fa8c <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x110>)
 800f99c:	f00a ffe4 	bl	801a968 <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 800f9a0:	45b9      	cmp	r9, r7
 800f9a2:	bf14      	ite	ne
 800f9a4:	462a      	movne	r2, r5
 800f9a6:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 800f9a8:	eba1 0b07 	sub.w	fp, r1, r7
 800f9ac:	18ad      	adds	r5, r5, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800f9ae:	d22d      	bcs.n	800fa0c <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x90>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800f9b0:	b375      	cbz	r5, 800fa10 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x94>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800f9b2:	429d      	cmp	r5, r3
 800f9b4:	bf28      	it	cs
 800f9b6:	461d      	movcs	r5, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800f9b8:	2014      	movs	r0, #20
 800f9ba:	4368      	muls	r0, r5
 800f9bc:	f00a ff1f 	bl	801a7fe <_Znwj>
 800f9c0:	4682      	mov	sl, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800f9c2:	4621      	mov	r1, r4
 800f9c4:	eb0a 000b 	add.w	r0, sl, fp
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f9c8:	463c      	mov	r4, r7
      _ForwardIterator __cur = __result;
 800f9ca:	46d3      	mov	fp, sl
 800f9cc:	f7ff ff71 	bl	800f8b2 <_ZN13MessageHeaderC1ERKS_>
      for (; __first != __last; ++__first, (void)++__cur)
 800f9d0:	45a0      	cmp	r8, r4
 800f9d2:	f04f 0300 	mov.w	r3, #0
 800f9d6:	f10b 0b14 	add.w	fp, fp, #20
 800f9da:	d11b      	bne.n	800fa14 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x98>
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 800f9dc:	f04f 0800 	mov.w	r8, #0
 800f9e0:	454c      	cmp	r4, r9
 800f9e2:	465b      	mov	r3, fp
 800f9e4:	f10b 0b14 	add.w	fp, fp, #20
 800f9e8:	d12f      	bne.n	800fa4a <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xce>
	if (__p)
 800f9ea:	b137      	cbz	r7, 800f9fa <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x7e>
		    this->_M_impl._M_end_of_storage - __old_start);
 800f9ec:	68b1      	ldr	r1, [r6, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800f9ee:	4638      	mov	r0, r7
 800f9f0:	9301      	str	r3, [sp, #4]
 800f9f2:	1bc9      	subs	r1, r1, r7
 800f9f4:	f00a fede 	bl	801a7b4 <_ZdlPvj>
 800f9f8:	9b01      	ldr	r3, [sp, #4]
      this->_M_impl._M_finish = __new_finish;
 800f9fa:	e9c6 a300 	strd	sl, r3, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800f9fe:	2314      	movs	r3, #20
 800fa00:	fb03 a305 	mla	r3, r3, r5, sl
 800fa04:	60b3      	str	r3, [r6, #8]
    }
 800fa06:	b003      	add	sp, #12
 800fa08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa0c:	461d      	mov	r5, r3
 800fa0e:	e7d3      	b.n	800f9b8 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800fa10:	46aa      	mov	sl, r5
 800fa12:	e7d6      	b.n	800f9c2 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 800fa14:	7822      	ldrb	r2, [r4, #0]
      }
 800fa16:	1d20      	adds	r0, r4, #4
 800fa18:	f80b 2c14 	strb.w	r2, [fp, #-20]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 800fa1c:	6862      	ldr	r2, [r4, #4]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 800fa1e:	6063      	str	r3, [r4, #4]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 800fa20:	f84b 2c10 	str.w	r2, [fp, #-16]
 800fa24:	68a2      	ldr	r2, [r4, #8]
 800fa26:	f84b 2c0c 	str.w	r2, [fp, #-12]
	  _M_end_of_storage(__x._M_end_of_storage)
 800fa2a:	68e2      	ldr	r2, [r4, #12]
 800fa2c:	f84b 2c08 	str.w	r2, [fp, #-8]
 800fa30:	7c22      	ldrb	r2, [r4, #16]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 800fa32:	e9c4 3302 	strd	r3, r3, [r4, #8]
 800fa36:	f80b 2c04 	strb.w	r2, [fp, #-4]
 800fa3a:	3414      	adds	r4, #20
 800fa3c:	f814 2c03 	ldrb.w	r2, [r4, #-3]
 800fa40:	f80b 2c03 	strb.w	r2, [fp, #-3]
      }
 800fa44:	f7f1 f8e6 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 800fa48:	e7c2      	b.n	800f9d0 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x54>
 800fa4a:	7823      	ldrb	r3, [r4, #0]
 800fa4c:	1d20      	adds	r0, r4, #4
 800fa4e:	f80b 3c14 	strb.w	r3, [fp, #-20]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 800fa52:	6863      	ldr	r3, [r4, #4]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 800fa54:	f8c4 8004 	str.w	r8, [r4, #4]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 800fa58:	f84b 3c10 	str.w	r3, [fp, #-16]
 800fa5c:	68a3      	ldr	r3, [r4, #8]
 800fa5e:	f84b 3c0c 	str.w	r3, [fp, #-12]
	  _M_end_of_storage(__x._M_end_of_storage)
 800fa62:	68e3      	ldr	r3, [r4, #12]
 800fa64:	f84b 3c08 	str.w	r3, [fp, #-8]
 800fa68:	7c23      	ldrb	r3, [r4, #16]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 800fa6a:	e9c4 8802 	strd	r8, r8, [r4, #8]
 800fa6e:	f80b 3c04 	strb.w	r3, [fp, #-4]
 800fa72:	3414      	adds	r4, #20
 800fa74:	f814 3c03 	ldrb.w	r3, [r4, #-3]
 800fa78:	f80b 3c03 	strb.w	r3, [fp, #-3]
      }
 800fa7c:	f7f1 f8ca 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 800fa80:	e7ae      	b.n	800f9e0 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x64>
 800fa82:	bf00      	nop
 800fa84:	cccccccd 	.word	0xcccccccd
 800fa88:	06666666 	.word	0x06666666
 800fa8c:	0801b17a 	.word	0x0801b17a

0800fa90 <_ZN13Communication4SendE13MessageHeader>:
HAL_StatusTypeDef Communication::Send(MessageHeader message) {
 800fa90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa92:	b087      	sub	sp, #28
 800fa94:	460d      	mov	r5, r1
	CommunicationProtocol* protocol = FindProtocol(message.interface, &success);
 800fa96:	7809      	ldrb	r1, [r1, #0]
HAL_StatusTypeDef Communication::Send(MessageHeader message) {
 800fa98:	4604      	mov	r4, r0
	CommunicationProtocol* protocol = FindProtocol(message.interface, &success);
 800fa9a:	f10d 0203 	add.w	r2, sp, #3
 800fa9e:	f7ff f9f5 	bl	800ee8c <_ZN13Communication12FindProtocolEhPb>
	if (!success) return HAL_ERROR;
 800faa2:	f89d 3003 	ldrb.w	r3, [sp, #3]
	CommunicationProtocol* protocol = FindProtocol(message.interface, &success);
 800faa6:	4606      	mov	r6, r0
	if (!success) return HAL_ERROR;
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d032      	beq.n	800fb12 <_ZN13Communication4SendE13MessageHeader+0x82>
	message.source_address = address; // set the source address as the module address
 800faac:	7d23      	ldrb	r3, [r4, #20]
	CommunicationLED(leds, message.interface);
 800faae:	7829      	ldrb	r1, [r5, #0]
	message.source_address = address; // set the source address as the module address
 800fab0:	746b      	strb	r3, [r5, #17]
	CommunicationLED(leds, message.interface);
 800fab2:	6920      	ldr	r0, [r4, #16]
 800fab4:	f7fe fe7b 	bl	800e7ae <_Z16CommunicationLEDP4LEDSh>
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 800fab8:	f04f 31ff 	mov.w	r1, #4294967295
 800fabc:	6820      	ldr	r0, [r4, #0]
 800fabe:	f7fc fd39 	bl	800c534 <osSemaphoreAcquire>
	HAL_StatusTypeDef status = protocol->Send(message);
 800fac2:	6833      	ldr	r3, [r6, #0]
 800fac4:	4629      	mov	r1, r5
 800fac6:	a801      	add	r0, sp, #4
 800fac8:	689f      	ldr	r7, [r3, #8]
 800faca:	f7ff fef2 	bl	800f8b2 <_ZN13MessageHeaderC1ERKS_>
 800face:	a901      	add	r1, sp, #4
 800fad0:	4630      	mov	r0, r6
 800fad2:	47b8      	blx	r7
 800fad4:	4606      	mov	r6, r0
 800fad6:	a802      	add	r0, sp, #8
 800fad8:	f7f1 f89c 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (status == HAL_BUSY || status == HAL_TIMEOUT) {
 800fadc:	1eb3      	subs	r3, r6, #2
 800fade:	b2db      	uxtb	r3, r3
 800fae0:	2b01      	cmp	r3, #1
 800fae2:	d809      	bhi.n	800faf8 <_ZN13Communication4SendE13MessageHeader+0x68>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800fae4:	e9d4 030d 	ldrd	r0, r3, [r4, #52]	@ 0x34
 800fae8:	4298      	cmp	r0, r3
 800faea:	d00b      	beq.n	800fb04 <_ZN13Communication4SendE13MessageHeader+0x74>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800faec:	4629      	mov	r1, r5
 800faee:	f7ff fee0 	bl	800f8b2 <_ZN13MessageHeaderC1ERKS_>
	    ++this->_M_impl._M_finish;
 800faf2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800faf4:	3314      	adds	r3, #20
 800faf6:	6363      	str	r3, [r4, #52]	@ 0x34
	osSemaphoreRelease(CommunicationSemaphore);
 800faf8:	6820      	ldr	r0, [r4, #0]
 800fafa:	f7fc fd4f 	bl	800c59c <osSemaphoreRelease>
}
 800fafe:	4630      	mov	r0, r6
 800fb00:	b007      	add	sp, #28
 800fb02:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  _M_realloc_insert(end(), __x);
 800fb04:	4601      	mov	r1, r0
 800fb06:	462a      	mov	r2, r5
 800fb08:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 800fb0c:	f7ff ff36 	bl	800f97c <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 800fb10:	e7f2      	b.n	800faf8 <_ZN13Communication4SendE13MessageHeader+0x68>
	if (!success) return HAL_ERROR;
 800fb12:	2601      	movs	r6, #1
 800fb14:	e7f3      	b.n	800fafe <_ZN13Communication4SendE13MessageHeader+0x6e>

0800fb16 <_ZN23SubscriberConfigurationC1ERKS_>:
 800fb16:	b570      	push	{r4, r5, r6, lr}
 800fb18:	880b      	ldrh	r3, [r1, #0]
 800fb1a:	4604      	mov	r4, r0
 800fb1c:	460d      	mov	r5, r1
 800fb1e:	8003      	strh	r3, [r0, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800fb20:	2300      	movs	r3, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800fb22:	e9d1 2601 	ldrd	r2, r6, [r1, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800fb26:	e9c0 3301 	strd	r3, r3, [r0, #4]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800fb2a:	1ab6      	subs	r6, r6, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
 800fb2c:	60c3      	str	r3, [r0, #12]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800fb2e:	d043      	beq.n	800fbb8 <_ZN23SubscriberConfigurationC1ERKS_+0xa2>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800fb30:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800fb34:	429e      	cmp	r6, r3
 800fb36:	d301      	bcc.n	800fb3c <_ZN23SubscriberConfigurationC1ERKS_+0x26>
	      std::__throw_bad_array_new_length();
 800fb38:	f00a ff13 	bl	801a962 <_ZSt28__throw_bad_array_new_lengthv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800fb3c:	4630      	mov	r0, r6
 800fb3e:	f00a fe5e 	bl	801a7fe <_Znwj>
 800fb42:	4603      	mov	r3, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800fb44:	441e      	add	r6, r3
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800fb46:	e9c4 3301 	strd	r3, r3, [r4, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800fb4a:	60e6      	str	r6, [r4, #12]
      : _M_current(__i) { }
 800fb4c:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
	  if (_Num)
 800fb50:	4291      	cmp	r1, r2
	  const ptrdiff_t _Num = __last - __first;
 800fb52:	eba2 0601 	sub.w	r6, r2, r1
	  if (_Num)
 800fb56:	d004      	beq.n	800fb62 <_ZN23SubscriberConfigurationC1ERKS_+0x4c>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800fb58:	4618      	mov	r0, r3
 800fb5a:	4632      	mov	r2, r6
 800fb5c:	f00b f986 	bl	801ae6c <memmove>
 800fb60:	4603      	mov	r3, r0
	  return __result + _Num;
 800fb62:	4433      	add	r3, r6
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800fb64:	e9d5 2604 	ldrd	r2, r6, [r5, #16]
	this->_M_impl._M_finish =
 800fb68:	60a3      	str	r3, [r4, #8]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800fb6a:	2300      	movs	r3, #0
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800fb6c:	1ab6      	subs	r6, r6, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
 800fb6e:	61a3      	str	r3, [r4, #24]
 800fb70:	e9c4 3304 	strd	r3, r3, [r4, #16]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800fb74:	d022      	beq.n	800fbbc <_ZN23SubscriberConfigurationC1ERKS_+0xa6>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800fb76:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800fb7a:	429e      	cmp	r6, r3
 800fb7c:	d2dc      	bcs.n	800fb38 <_ZN23SubscriberConfigurationC1ERKS_+0x22>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800fb7e:	4630      	mov	r0, r6
 800fb80:	f00a fe3d 	bl	801a7fe <_Znwj>
 800fb84:	4603      	mov	r3, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800fb86:	441e      	add	r6, r3
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800fb88:	e9c4 3304 	strd	r3, r3, [r4, #16]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800fb8c:	61a6      	str	r6, [r4, #24]
 800fb8e:	e9d5 1204 	ldrd	r1, r2, [r5, #16]
	  if (_Num)
 800fb92:	4291      	cmp	r1, r2
	  const ptrdiff_t _Num = __last - __first;
 800fb94:	eba2 0601 	sub.w	r6, r2, r1
	  if (_Num)
 800fb98:	d004      	beq.n	800fba4 <_ZN23SubscriberConfigurationC1ERKS_+0x8e>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	4632      	mov	r2, r6
 800fb9e:	f00b f965 	bl	801ae6c <memmove>
 800fba2:	4603      	mov	r3, r0
	  return __result + _Num;
 800fba4:	4433      	add	r3, r6
 800fba6:	f105 011c 	add.w	r1, r5, #28
 800fbaa:	f104 001c 	add.w	r0, r4, #28
	this->_M_impl._M_finish =
 800fbae:	6163      	str	r3, [r4, #20]
 800fbb0:	f7f1 f8e0 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 800fbb4:	4620      	mov	r0, r4
 800fbb6:	bd70      	pop	{r4, r5, r6, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800fbb8:	4633      	mov	r3, r6
 800fbba:	e7c3      	b.n	800fb44 <_ZN23SubscriberConfigurationC1ERKS_+0x2e>
 800fbbc:	4633      	mov	r3, r6
 800fbbe:	e7e2      	b.n	800fb86 <_ZN23SubscriberConfigurationC1ERKS_+0x70>

0800fbc0 <_ZN17MasterSubscribers7ReceiveIhEEv15SubscriberInputPT_>:
 *
 * @param input information: input register and interface information
 * @param input data: published data for the input register
 */
template<typename T>
void MasterSubscribers::Receive(SubscriberInput information, T* data) {
 800fbc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbc4:	b090      	sub	sp, #64	@ 0x40
 800fbc6:	4605      	mov	r5, r0
	uint8_t index = 0;
	for (SubscriberConfiguration configuration : configurations) {
 800fbc8:	2600      	movs	r6, #0
void MasterSubscribers::Receive(SubscriberInput information, T* data) {
 800fbca:	ac03      	add	r4, sp, #12
 800fbcc:	f8dd 8060 	ldr.w	r8, [sp, #96]	@ 0x60
 800fbd0:	e9d0 7903 	ldrd	r7, r9, [r0, #12]
 800fbd4:	e884 000e 	stmia.w	r4, {r1, r2, r3}
	for (SubscriberConfiguration configuration : configurations) {
 800fbd8:	45b9      	cmp	r9, r7
 800fbda:	d102      	bne.n	800fbe2 <_ZN17MasterSubscribers7ReceiveIhEEv15SubscriberInputPT_+0x22>
				}
			}
		}
		index++;
	}
}
 800fbdc:	b010      	add	sp, #64	@ 0x40
 800fbde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (SubscriberConfiguration configuration : configurations) {
 800fbe2:	4639      	mov	r1, r7
 800fbe4:	a806      	add	r0, sp, #24
 800fbe6:	f7ff ff96 	bl	800fb16 <_ZN23SubscriberConfigurationC1ERKS_>
		if (configuration.activated) {
 800fbea:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800fbee:	b37b      	cbz	r3, 800fc50 <_ZN17MasterSubscribers7ReceiveIhEEv15SubscriberInputPT_+0x90>
			if (SubscribedToRemoteRegister(configuration.ID, information.register_, information.interface)) {
 800fbf0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800fbf4:	4628      	mov	r0, r5
 800fbf6:	f89d a018 	ldrb.w	sl, [sp, #24]
 800fbfa:	f8ad 3000 	strh.w	r3, [sp]
 800fbfe:	4651      	mov	r1, sl
 800fc00:	e894 000c 	ldmia.w	r4, {r2, r3}
 800fc04:	f009 fc20 	bl	8019448 <_ZN17MasterSubscribers26SubscribedToRemoteRegisterEh8Register19SubscriberInterface>
 800fc08:	b310      	cbz	r0, 800fc50 <_ZN17MasterSubscribers7ReceiveIhEEv15SubscriberInputPT_+0x90>
				if (AddressAccepted(configuration.ID, information.interface.address)) {
 800fc0a:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800fc0e:	4651      	mov	r1, sl
 800fc10:	4628      	mov	r0, r5
 800fc12:	f009 fb6b 	bl	80192ec <_ZN17MasterSubscribers15AddressAcceptedEhh>
 800fc16:	b1d8      	cbz	r0, 800fc50 <_ZN17MasterSubscribers7ReceiveIhEEv15SubscriberInputPT_+0x90>
					CommunicationLED(leds, information.interface.interface);
 800fc18:	f89d 1012 	ldrb.w	r1, [sp, #18]
 800fc1c:	6868      	ldr	r0, [r5, #4]
 800fc1e:	f7fe fdc6 	bl	800e7ae <_Z16CommunicationLEDP4LEDSh>
					switch (information.register_.type) {
 800fc22:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800fc26:	2b08      	cmp	r3, #8
 800fc28:	d812      	bhi.n	800fc50 <_ZN17MasterSubscribers7ReceiveIhEEv15SubscriberInputPT_+0x90>
 800fc2a:	e8df f003 	tbb	[pc, r3]
 800fc2e:	1105      	.short	0x1105
 800fc30:	11211117 	.word	0x11211117
 800fc34:	1111      	.short	0x1111
 800fc36:	2b          	.byte	0x2b
 800fc37:	00          	.byte	0x00
	return *(this->_M_impl._M_start + __n);
 800fc38:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveUINT8(information, (uint8_t*) data);
 800fc3a:	69aa      	ldr	r2, [r5, #24]
 800fc3c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fc40:	6803      	ldr	r3, [r0, #0]
 800fc42:	f8cd 8000 	str.w	r8, [sp]
 800fc46:	f8d3 a000 	ldr.w	sl, [r3]
						subscribers[index]->ReceiveFLOAT(information, (float*) data);
 800fc4a:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800fc4e:	47d0      	blx	sl
	for (SubscriberConfiguration configuration : configurations) {
 800fc50:	a806      	add	r0, sp, #24
 800fc52:	3601      	adds	r6, #1
 800fc54:	3728      	adds	r7, #40	@ 0x28
 800fc56:	f7ff fc7f 	bl	800f558 <_ZN23SubscriberConfigurationD1Ev>
	return *this;
 800fc5a:	e7bd      	b.n	800fbd8 <_ZN17MasterSubscribers7ReceiveIhEEv15SubscriberInputPT_+0x18>
 800fc5c:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveUINT32(information, (uint32_t*) data);
 800fc5e:	69aa      	ldr	r2, [r5, #24]
 800fc60:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fc64:	6803      	ldr	r3, [r0, #0]
 800fc66:	f8cd 8000 	str.w	r8, [sp]
 800fc6a:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800fc6e:	e7ec      	b.n	800fc4a <_ZN17MasterSubscribers7ReceiveIhEEv15SubscriberInputPT_+0x8a>
 800fc70:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveINT8(information, (int8_t*) data);
 800fc72:	69aa      	ldr	r2, [r5, #24]
 800fc74:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fc78:	6803      	ldr	r3, [r0, #0]
 800fc7a:	f8cd 8000 	str.w	r8, [sp]
 800fc7e:	f8d3 a008 	ldr.w	sl, [r3, #8]
 800fc82:	e7e2      	b.n	800fc4a <_ZN17MasterSubscribers7ReceiveIhEEv15SubscriberInputPT_+0x8a>
 800fc84:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveFLOAT(information, (float*) data);
 800fc86:	69aa      	ldr	r2, [r5, #24]
 800fc88:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fc8c:	6803      	ldr	r3, [r0, #0]
 800fc8e:	f8cd 8000 	str.w	r8, [sp]
 800fc92:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 800fc96:	e7d8      	b.n	800fc4a <_ZN17MasterSubscribers7ReceiveIhEEv15SubscriberInputPT_+0x8a>

0800fc98 <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_>:
void MasterSubscribers::Receive(SubscriberInput information, T* data) {
 800fc98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc9c:	b090      	sub	sp, #64	@ 0x40
 800fc9e:	4605      	mov	r5, r0
	for (SubscriberConfiguration configuration : configurations) {
 800fca0:	2600      	movs	r6, #0
void MasterSubscribers::Receive(SubscriberInput information, T* data) {
 800fca2:	ac03      	add	r4, sp, #12
 800fca4:	f8dd 8060 	ldr.w	r8, [sp, #96]	@ 0x60
 800fca8:	e9d0 7903 	ldrd	r7, r9, [r0, #12]
 800fcac:	e884 000e 	stmia.w	r4, {r1, r2, r3}
	for (SubscriberConfiguration configuration : configurations) {
 800fcb0:	45b9      	cmp	r9, r7
 800fcb2:	d102      	bne.n	800fcba <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_+0x22>
}
 800fcb4:	b010      	add	sp, #64	@ 0x40
 800fcb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (SubscriberConfiguration configuration : configurations) {
 800fcba:	4639      	mov	r1, r7
 800fcbc:	a806      	add	r0, sp, #24
 800fcbe:	f7ff ff2a 	bl	800fb16 <_ZN23SubscriberConfigurationC1ERKS_>
		if (configuration.activated) {
 800fcc2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800fcc6:	b37b      	cbz	r3, 800fd28 <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_+0x90>
			if (SubscribedToRemoteRegister(configuration.ID, information.register_, information.interface)) {
 800fcc8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800fccc:	4628      	mov	r0, r5
 800fcce:	f89d a018 	ldrb.w	sl, [sp, #24]
 800fcd2:	f8ad 3000 	strh.w	r3, [sp]
 800fcd6:	4651      	mov	r1, sl
 800fcd8:	e894 000c 	ldmia.w	r4, {r2, r3}
 800fcdc:	f009 fbb4 	bl	8019448 <_ZN17MasterSubscribers26SubscribedToRemoteRegisterEh8Register19SubscriberInterface>
 800fce0:	b310      	cbz	r0, 800fd28 <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_+0x90>
				if (AddressAccepted(configuration.ID, information.interface.address)) {
 800fce2:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800fce6:	4651      	mov	r1, sl
 800fce8:	4628      	mov	r0, r5
 800fcea:	f009 faff 	bl	80192ec <_ZN17MasterSubscribers15AddressAcceptedEhh>
 800fcee:	b1d8      	cbz	r0, 800fd28 <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_+0x90>
					CommunicationLED(leds, information.interface.interface);
 800fcf0:	f89d 1012 	ldrb.w	r1, [sp, #18]
 800fcf4:	6868      	ldr	r0, [r5, #4]
 800fcf6:	f7fe fd5a 	bl	800e7ae <_Z16CommunicationLEDP4LEDSh>
					switch (information.register_.type) {
 800fcfa:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800fcfe:	2b08      	cmp	r3, #8
 800fd00:	d812      	bhi.n	800fd28 <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_+0x90>
 800fd02:	e8df f003 	tbb	[pc, r3]
 800fd06:	1105      	.short	0x1105
 800fd08:	11211117 	.word	0x11211117
 800fd0c:	1111      	.short	0x1111
 800fd0e:	2b          	.byte	0x2b
 800fd0f:	00          	.byte	0x00
 800fd10:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveUINT8(information, (uint8_t*) data);
 800fd12:	69aa      	ldr	r2, [r5, #24]
 800fd14:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fd18:	6803      	ldr	r3, [r0, #0]
 800fd1a:	f8cd 8000 	str.w	r8, [sp]
 800fd1e:	f8d3 a000 	ldr.w	sl, [r3]
						subscribers[index]->ReceiveFLOAT(information, (float*) data);
 800fd22:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800fd26:	47d0      	blx	sl
	for (SubscriberConfiguration configuration : configurations) {
 800fd28:	a806      	add	r0, sp, #24
 800fd2a:	3601      	adds	r6, #1
 800fd2c:	3728      	adds	r7, #40	@ 0x28
 800fd2e:	f7ff fc13 	bl	800f558 <_ZN23SubscriberConfigurationD1Ev>
 800fd32:	e7bd      	b.n	800fcb0 <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_+0x18>
 800fd34:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveUINT32(information, (uint32_t*) data);
 800fd36:	69aa      	ldr	r2, [r5, #24]
 800fd38:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fd3c:	6803      	ldr	r3, [r0, #0]
 800fd3e:	f8cd 8000 	str.w	r8, [sp]
 800fd42:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800fd46:	e7ec      	b.n	800fd22 <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_+0x8a>
 800fd48:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveINT8(information, (int8_t*) data);
 800fd4a:	69aa      	ldr	r2, [r5, #24]
 800fd4c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fd50:	6803      	ldr	r3, [r0, #0]
 800fd52:	f8cd 8000 	str.w	r8, [sp]
 800fd56:	f8d3 a008 	ldr.w	sl, [r3, #8]
 800fd5a:	e7e2      	b.n	800fd22 <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_+0x8a>
 800fd5c:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveFLOAT(information, (float*) data);
 800fd5e:	69aa      	ldr	r2, [r5, #24]
 800fd60:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fd64:	6803      	ldr	r3, [r0, #0]
 800fd66:	f8cd 8000 	str.w	r8, [sp]
 800fd6a:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 800fd6e:	e7d8      	b.n	800fd22 <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_+0x8a>

0800fd70 <_ZN17MasterSubscribers7ReceiveIaEEv15SubscriberInputPT_>:
void MasterSubscribers::Receive(SubscriberInput information, T* data) {
 800fd70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd74:	b090      	sub	sp, #64	@ 0x40
 800fd76:	4605      	mov	r5, r0
	for (SubscriberConfiguration configuration : configurations) {
 800fd78:	2600      	movs	r6, #0
void MasterSubscribers::Receive(SubscriberInput information, T* data) {
 800fd7a:	ac03      	add	r4, sp, #12
 800fd7c:	f8dd 8060 	ldr.w	r8, [sp, #96]	@ 0x60
 800fd80:	e9d0 7903 	ldrd	r7, r9, [r0, #12]
 800fd84:	e884 000e 	stmia.w	r4, {r1, r2, r3}
	for (SubscriberConfiguration configuration : configurations) {
 800fd88:	45b9      	cmp	r9, r7
 800fd8a:	d102      	bne.n	800fd92 <_ZN17MasterSubscribers7ReceiveIaEEv15SubscriberInputPT_+0x22>
}
 800fd8c:	b010      	add	sp, #64	@ 0x40
 800fd8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (SubscriberConfiguration configuration : configurations) {
 800fd92:	4639      	mov	r1, r7
 800fd94:	a806      	add	r0, sp, #24
 800fd96:	f7ff febe 	bl	800fb16 <_ZN23SubscriberConfigurationC1ERKS_>
		if (configuration.activated) {
 800fd9a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800fd9e:	b37b      	cbz	r3, 800fe00 <_ZN17MasterSubscribers7ReceiveIaEEv15SubscriberInputPT_+0x90>
			if (SubscribedToRemoteRegister(configuration.ID, information.register_, information.interface)) {
 800fda0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800fda4:	4628      	mov	r0, r5
 800fda6:	f89d a018 	ldrb.w	sl, [sp, #24]
 800fdaa:	f8ad 3000 	strh.w	r3, [sp]
 800fdae:	4651      	mov	r1, sl
 800fdb0:	e894 000c 	ldmia.w	r4, {r2, r3}
 800fdb4:	f009 fb48 	bl	8019448 <_ZN17MasterSubscribers26SubscribedToRemoteRegisterEh8Register19SubscriberInterface>
 800fdb8:	b310      	cbz	r0, 800fe00 <_ZN17MasterSubscribers7ReceiveIaEEv15SubscriberInputPT_+0x90>
				if (AddressAccepted(configuration.ID, information.interface.address)) {
 800fdba:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800fdbe:	4651      	mov	r1, sl
 800fdc0:	4628      	mov	r0, r5
 800fdc2:	f009 fa93 	bl	80192ec <_ZN17MasterSubscribers15AddressAcceptedEhh>
 800fdc6:	b1d8      	cbz	r0, 800fe00 <_ZN17MasterSubscribers7ReceiveIaEEv15SubscriberInputPT_+0x90>
					CommunicationLED(leds, information.interface.interface);
 800fdc8:	f89d 1012 	ldrb.w	r1, [sp, #18]
 800fdcc:	6868      	ldr	r0, [r5, #4]
 800fdce:	f7fe fcee 	bl	800e7ae <_Z16CommunicationLEDP4LEDSh>
					switch (information.register_.type) {
 800fdd2:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800fdd6:	2b08      	cmp	r3, #8
 800fdd8:	d812      	bhi.n	800fe00 <_ZN17MasterSubscribers7ReceiveIaEEv15SubscriberInputPT_+0x90>
 800fdda:	e8df f003 	tbb	[pc, r3]
 800fdde:	1105      	.short	0x1105
 800fde0:	11211117 	.word	0x11211117
 800fde4:	1111      	.short	0x1111
 800fde6:	2b          	.byte	0x2b
 800fde7:	00          	.byte	0x00
 800fde8:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveUINT8(information, (uint8_t*) data);
 800fdea:	69aa      	ldr	r2, [r5, #24]
 800fdec:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fdf0:	6803      	ldr	r3, [r0, #0]
 800fdf2:	f8cd 8000 	str.w	r8, [sp]
 800fdf6:	f8d3 a000 	ldr.w	sl, [r3]
						subscribers[index]->ReceiveFLOAT(information, (float*) data);
 800fdfa:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800fdfe:	47d0      	blx	sl
	for (SubscriberConfiguration configuration : configurations) {
 800fe00:	a806      	add	r0, sp, #24
 800fe02:	3601      	adds	r6, #1
 800fe04:	3728      	adds	r7, #40	@ 0x28
 800fe06:	f7ff fba7 	bl	800f558 <_ZN23SubscriberConfigurationD1Ev>
 800fe0a:	e7bd      	b.n	800fd88 <_ZN17MasterSubscribers7ReceiveIaEEv15SubscriberInputPT_+0x18>
 800fe0c:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveUINT32(information, (uint32_t*) data);
 800fe0e:	69aa      	ldr	r2, [r5, #24]
 800fe10:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fe14:	6803      	ldr	r3, [r0, #0]
 800fe16:	f8cd 8000 	str.w	r8, [sp]
 800fe1a:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800fe1e:	e7ec      	b.n	800fdfa <_ZN17MasterSubscribers7ReceiveIaEEv15SubscriberInputPT_+0x8a>
 800fe20:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveINT8(information, (int8_t*) data);
 800fe22:	69aa      	ldr	r2, [r5, #24]
 800fe24:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fe28:	6803      	ldr	r3, [r0, #0]
 800fe2a:	f8cd 8000 	str.w	r8, [sp]
 800fe2e:	f8d3 a008 	ldr.w	sl, [r3, #8]
 800fe32:	e7e2      	b.n	800fdfa <_ZN17MasterSubscribers7ReceiveIaEEv15SubscriberInputPT_+0x8a>
 800fe34:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveFLOAT(information, (float*) data);
 800fe36:	69aa      	ldr	r2, [r5, #24]
 800fe38:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fe3c:	6803      	ldr	r3, [r0, #0]
 800fe3e:	f8cd 8000 	str.w	r8, [sp]
 800fe42:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 800fe46:	e7d8      	b.n	800fdfa <_ZN17MasterSubscribers7ReceiveIaEEv15SubscriberInputPT_+0x8a>

0800fe48 <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_>:
void MasterSubscribers::Receive(SubscriberInput information, T* data) {
 800fe48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe4c:	b090      	sub	sp, #64	@ 0x40
 800fe4e:	4605      	mov	r5, r0
	for (SubscriberConfiguration configuration : configurations) {
 800fe50:	2600      	movs	r6, #0
void MasterSubscribers::Receive(SubscriberInput information, T* data) {
 800fe52:	ac03      	add	r4, sp, #12
 800fe54:	f8dd 8060 	ldr.w	r8, [sp, #96]	@ 0x60
 800fe58:	e9d0 7903 	ldrd	r7, r9, [r0, #12]
 800fe5c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
	for (SubscriberConfiguration configuration : configurations) {
 800fe60:	45b9      	cmp	r9, r7
 800fe62:	d102      	bne.n	800fe6a <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_+0x22>
}
 800fe64:	b010      	add	sp, #64	@ 0x40
 800fe66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (SubscriberConfiguration configuration : configurations) {
 800fe6a:	4639      	mov	r1, r7
 800fe6c:	a806      	add	r0, sp, #24
 800fe6e:	f7ff fe52 	bl	800fb16 <_ZN23SubscriberConfigurationC1ERKS_>
		if (configuration.activated) {
 800fe72:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800fe76:	b37b      	cbz	r3, 800fed8 <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_+0x90>
			if (SubscribedToRemoteRegister(configuration.ID, information.register_, information.interface)) {
 800fe78:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800fe7c:	4628      	mov	r0, r5
 800fe7e:	f89d a018 	ldrb.w	sl, [sp, #24]
 800fe82:	f8ad 3000 	strh.w	r3, [sp]
 800fe86:	4651      	mov	r1, sl
 800fe88:	e894 000c 	ldmia.w	r4, {r2, r3}
 800fe8c:	f009 fadc 	bl	8019448 <_ZN17MasterSubscribers26SubscribedToRemoteRegisterEh8Register19SubscriberInterface>
 800fe90:	b310      	cbz	r0, 800fed8 <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_+0x90>
				if (AddressAccepted(configuration.ID, information.interface.address)) {
 800fe92:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800fe96:	4651      	mov	r1, sl
 800fe98:	4628      	mov	r0, r5
 800fe9a:	f009 fa27 	bl	80192ec <_ZN17MasterSubscribers15AddressAcceptedEhh>
 800fe9e:	b1d8      	cbz	r0, 800fed8 <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_+0x90>
					CommunicationLED(leds, information.interface.interface);
 800fea0:	f89d 1012 	ldrb.w	r1, [sp, #18]
 800fea4:	6868      	ldr	r0, [r5, #4]
 800fea6:	f7fe fc82 	bl	800e7ae <_Z16CommunicationLEDP4LEDSh>
					switch (information.register_.type) {
 800feaa:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800feae:	2b08      	cmp	r3, #8
 800feb0:	d812      	bhi.n	800fed8 <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_+0x90>
 800feb2:	e8df f003 	tbb	[pc, r3]
 800feb6:	1105      	.short	0x1105
 800feb8:	11211117 	.word	0x11211117
 800febc:	1111      	.short	0x1111
 800febe:	2b          	.byte	0x2b
 800febf:	00          	.byte	0x00
 800fec0:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveUINT8(information, (uint8_t*) data);
 800fec2:	69aa      	ldr	r2, [r5, #24]
 800fec4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fec8:	6803      	ldr	r3, [r0, #0]
 800feca:	f8cd 8000 	str.w	r8, [sp]
 800fece:	f8d3 a000 	ldr.w	sl, [r3]
						subscribers[index]->ReceiveFLOAT(information, (float*) data);
 800fed2:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800fed6:	47d0      	blx	sl
	for (SubscriberConfiguration configuration : configurations) {
 800fed8:	a806      	add	r0, sp, #24
 800feda:	3601      	adds	r6, #1
 800fedc:	3728      	adds	r7, #40	@ 0x28
 800fede:	f7ff fb3b 	bl	800f558 <_ZN23SubscriberConfigurationD1Ev>
 800fee2:	e7bd      	b.n	800fe60 <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_+0x18>
 800fee4:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveUINT32(information, (uint32_t*) data);
 800fee6:	69aa      	ldr	r2, [r5, #24]
 800fee8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800feec:	6803      	ldr	r3, [r0, #0]
 800feee:	f8cd 8000 	str.w	r8, [sp]
 800fef2:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800fef6:	e7ec      	b.n	800fed2 <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_+0x8a>
 800fef8:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveINT8(information, (int8_t*) data);
 800fefa:	69aa      	ldr	r2, [r5, #24]
 800fefc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ff00:	6803      	ldr	r3, [r0, #0]
 800ff02:	f8cd 8000 	str.w	r8, [sp]
 800ff06:	f8d3 a008 	ldr.w	sl, [r3, #8]
 800ff0a:	e7e2      	b.n	800fed2 <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_+0x8a>
 800ff0c:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveFLOAT(information, (float*) data);
 800ff0e:	69aa      	ldr	r2, [r5, #24]
 800ff10:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ff14:	6803      	ldr	r3, [r0, #0]
 800ff16:	f8cd 8000 	str.w	r8, [sp]
 800ff1a:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 800ff1e:	e7d8      	b.n	800fed2 <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_+0x8a>

0800ff20 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>:
 * @param input length: the number of values to extract
 * @param output success: whether successful
 * @return a vector with extracted values
 */
template<typename T>
std::vector<T> Communication::ExtractVector(std::vector<uint8_t> payload, uint16_t start_index, uint16_t length, bool* success) {
 800ff20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
 800ff24:	2600      	movs	r6, #0
 800ff26:	4605      	mov	r5, r0
 800ff28:	4688      	mov	r8, r1
 800ff2a:	4691      	mov	r9, r2
 800ff2c:	ed2d 8b02 	vpush	{d8}
 800ff30:	b087      	sub	sp, #28
 800ff32:	6086      	str	r6, [r0, #8]
 800ff34:	9301      	str	r3, [sp, #4]
 800ff36:	e9c0 6600 	strd	r6, r6, [r0]
 800ff3a:	b2f4      	uxtb	r4, r6
	std::vector<T> data;
	uint8_t type_length = sizeof(T);

	for (uint8_t index = 0; index < length; index++) {
 800ff3c:	9b01      	ldr	r3, [sp, #4]
 800ff3e:	429c      	cmp	r4, r3
 800ff40:	db05      	blt.n	800ff4e <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x2e>
		if (not *success)
			return data;
		data.push_back(element);
	}
	return data;
}
 800ff42:	4628      	mov	r0, r5
 800ff44:	b007      	add	sp, #28
 800ff46:	ecbd 8b02 	vpop	{d8}
 800ff4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 800ff4e:	4641      	mov	r1, r8
 800ff50:	a803      	add	r0, sp, #12
 800ff52:	f7f0 ff0f 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 800ff56:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ff58:	eb09 0184 	add.w	r1, r9, r4, lsl #2
 800ff5c:	a803      	add	r0, sp, #12
 800ff5e:	b289      	uxth	r1, r1
 800ff60:	f7fe feb8 	bl	800ecd4 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0>
      }
 800ff64:	a803      	add	r0, sp, #12
 800ff66:	eeb0 8a40 	vmov.f32	s16, s0
 800ff6a:	f7f0 fe53 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (not *success)
 800ff6e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ff70:	781b      	ldrb	r3, [r3, #0]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d0e5      	beq.n	800ff42 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x22>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800ff76:	e9d5 4301 	ldrd	r4, r3, [r5, #4]
 800ff7a:	429c      	cmp	r4, r3
 800ff7c:	d004      	beq.n	800ff88 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x68>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800ff7e:	eca4 8a01 	vstmia	r4!, {s16}
	    ++this->_M_impl._M_finish;
 800ff82:	606c      	str	r4, [r5, #4]
	for (uint8_t index = 0; index < length; index++) {
 800ff84:	3601      	adds	r6, #1
 800ff86:	e7d8      	b.n	800ff3a <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x1a>
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800ff88:	2101      	movs	r1, #1
 800ff8a:	4a13      	ldr	r2, [pc, #76]	@ (800ffd8 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0xb8>)
 800ff8c:	4628      	mov	r0, r5
 800ff8e:	f7ff fc39 	bl	800f804 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>
      pointer __old_start = this->_M_impl._M_start;
 800ff92:	682f      	ldr	r7, [r5, #0]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800ff94:	4682      	mov	sl, r0
      pointer __new_start(this->_M_allocate(__len));
 800ff96:	f7fe fd32 	bl	800e9fe <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
    { return __lhs.base() - __rhs.base(); }
 800ff9a:	eba4 0b07 	sub.w	fp, r4, r7
 800ff9e:	4604      	mov	r4, r0
 800ffa0:	eb00 010b 	add.w	r1, r0, fp
      if (__count > 0)
 800ffa4:	f1bb 0f00 	cmp.w	fp, #0
 800ffa8:	ed81 8a00 	vstr	s16, [r1]
 800ffac:	dd03      	ble.n	800ffb6 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x96>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800ffae:	465a      	mov	r2, fp
 800ffb0:	4639      	mov	r1, r7
 800ffb2:	f00a ff5b 	bl	801ae6c <memmove>
	      ++__new_finish;
 800ffb6:	f10b 0204 	add.w	r2, fp, #4
 800ffba:	eb04 0b02 	add.w	fp, r4, r2
	if (__p)
 800ffbe:	b12f      	cbz	r7, 800ffcc <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0xac>
		    this->_M_impl._M_end_of_storage - __old_start);
 800ffc0:	68a9      	ldr	r1, [r5, #8]
 800ffc2:	4638      	mov	r0, r7
 800ffc4:	1bc9      	subs	r1, r1, r7
 800ffc6:	1089      	asrs	r1, r1, #2
 800ffc8:	f7fe fd16 	bl	800e9f8 <_ZNSt12_Vector_baseIP21CommunicationProtocolSaIS1_EE13_M_deallocateEPS1_j.part.0>
      this->_M_impl._M_finish = __new_finish;
 800ffcc:	e9c5 4b00 	strd	r4, fp, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800ffd0:	eb04 048a 	add.w	r4, r4, sl, lsl #2
 800ffd4:	60ac      	str	r4, [r5, #8]
 800ffd6:	e7d5      	b.n	800ff84 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x64>
 800ffd8:	0801b17a 	.word	0x0801b17a

0800ffdc <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb.isra.0>:
void Communication::ExtractArray(T* data, std::vector<uint8_t> payload, uint16_t start_index, uint16_t length, bool* success) {
 800ffdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffe0:	ed2d 8b02 	vpush	{d8}
 800ffe4:	b085      	sub	sp, #20
 800ffe6:	4607      	mov	r7, r0
 800ffe8:	4688      	mov	r8, r1
 800ffea:	4691      	mov	r9, r2
 800ffec:	461d      	mov	r5, r3
 800ffee:	f8dd a040 	ldr.w	sl, [sp, #64]	@ 0x40
 800fff2:	2600      	movs	r6, #0
 800fff4:	b2f4      	uxtb	r4, r6
	for (uint8_t index = 0; index < length; index++) {
 800fff6:	42ac      	cmp	r4, r5
 800fff8:	db04      	blt.n	8010004 <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x28>
}
 800fffa:	b005      	add	sp, #20
 800fffc:	ecbd 8b02 	vpop	{d8}
 8010000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 8010004:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010008:	4641      	mov	r1, r8
 801000a:	eb09 0484 	add.w	r4, r9, r4, lsl #2
 801000e:	a801      	add	r0, sp, #4
 8010010:	f7f0 feb0 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010014:	4652      	mov	r2, sl
 8010016:	b2a1      	uxth	r1, r4
 8010018:	a801      	add	r0, sp, #4
 801001a:	f7fe fe5b 	bl	800ecd4 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0>
      }
 801001e:	a801      	add	r0, sp, #4
 8010020:	eeb0 8a40 	vmov.f32	s16, s0
 8010024:	f7f0 fdf6 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (not *success)
 8010028:	f89a 3000 	ldrb.w	r3, [sl]
 801002c:	3601      	adds	r6, #1
 801002e:	2b00      	cmp	r3, #0
 8010030:	d0e3      	beq.n	800fffa <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x1e>
		data[index] = element;
 8010032:	44bb      	add	fp, r7
 8010034:	ed8b 8a00 	vstr	s16, [fp]
	for (uint8_t index = 0; index < length; index++) {
 8010038:	e7dc      	b.n	800fff4 <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x18>

0801003a <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt>:
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 801003a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801003e:	b08f      	sub	sp, #60	@ 0x3c
 8010040:	461c      	mov	r4, r3
 8010042:	4691      	mov	r9, r2
 8010044:	468a      	mov	sl, r1
	T array_values[element.element_register.length];
 8010046:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 801004a:	466a      	mov	r2, sp
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 801004c:	af02      	add	r7, sp, #8
	T array_values[element.element_register.length];
 801004e:	ea4f 0388 	mov.w	r3, r8, lsl #2
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8010052:	3104      	adds	r1, #4
 8010054:	f107 0524 	add.w	r5, r7, #36	@ 0x24
 8010058:	f107 060b 	add.w	r6, r7, #11
	T array_values[element.element_register.length];
 801005c:	3307      	adds	r3, #7
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 801005e:	6078      	str	r0, [r7, #4]
	T array_values[element.element_register.length];
 8010060:	08db      	lsrs	r3, r3, #3
 8010062:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 8010066:	469d      	mov	sp, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010068:	2300      	movs	r3, #0
 801006a:	e9c7 3303 	strd	r3, r3, [r7, #12]
 801006e:	617b      	str	r3, [r7, #20]
 8010070:	f10d 0b08 	add.w	fp, sp, #8
	if (not element.element_register.isArray) {
 8010074:	f899 3003 	ldrb.w	r3, [r9, #3]
 8010078:	bb93      	cbnz	r3, 80100e0 <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0xa6>
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 801007a:	4628      	mov	r0, r5
		data = &single_value;
 801007c:	f107 0b18 	add.w	fp, r7, #24
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8010080:	f7f0 fe78 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
		length_to_extract = 1;
 8010084:	f04f 0801 	mov.w	r8, #1
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8010088:	4632      	mov	r2, r6
 801008a:	4621      	mov	r1, r4
 801008c:	4628      	mov	r0, r5
 801008e:	f7fe fe21 	bl	800ecd4 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0>
      }
 8010092:	4628      	mov	r0, r5
 8010094:	ed87 0a06 	vstr	s0, [r7, #24]
 8010098:	f7f0 fdbc 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	subscriber_information.interface.interface = message.interface;
 801009c:	f89a 3000 	ldrb.w	r3, [sl]
	return start_index + sizeof(T) * length_to_extract;
 80100a0:	eb04 0488 	add.w	r4, r4, r8, lsl #2
	subscriber_information.length = length_to_extract;
 80100a4:	f8a7 802c 	strh.w	r8, [r7, #44]	@ 0x2c
	subscriber_information.interface.interface = message.interface;
 80100a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	return start_index + sizeof(T) * length_to_extract;
 80100ac:	b2a4      	uxth	r4, r4
	subscriber_information.interface.address = message.source_address;
 80100ae:	f89a 3011 	ldrb.w	r3, [sl, #17]
	subscriber_information.register_ = element.element_register;
 80100b2:	e899 0003 	ldmia.w	r9, {r0, r1}
	subscriber_information.interface.address = message.source_address;
 80100b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	subscriber_information.register_ = element.element_register;
 80100ba:	6278      	str	r0, [r7, #36]	@ 0x24
 80100bc:	8539      	strh	r1, [r7, #40]	@ 0x28
	subscribers->Receive<T>(subscriber_information, data);
 80100be:	f8cd b000 	str.w	fp, [sp]
 80100c2:	6878      	ldr	r0, [r7, #4]
 80100c4:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80100c8:	68c0      	ldr	r0, [r0, #12]
 80100ca:	f7ff febd 	bl	800fe48 <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_>
 80100ce:	f107 000c 	add.w	r0, r7, #12
 80100d2:	f7f1 ff9d 	bl	8002010 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
}
 80100d6:	4620      	mov	r0, r4
 80100d8:	3734      	adds	r7, #52	@ 0x34
 80100da:	46bd      	mov	sp, r7
 80100dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (element.element_register.isArray && element.element_register.length > 0) {
 80100e0:	f1b8 0f00 	cmp.w	r8, #0
 80100e4:	d00d      	beq.n	8010102 <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0xc8>
		ExtractArray<T>(array_values, message.payload, start_index, length_to_extract, &success);
 80100e6:	4628      	mov	r0, r5
 80100e8:	f7f0 fe44 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80100ec:	4658      	mov	r0, fp
 80100ee:	4643      	mov	r3, r8
 80100f0:	4622      	mov	r2, r4
 80100f2:	4629      	mov	r1, r5
 80100f4:	9600      	str	r6, [sp, #0]
 80100f6:	f7ff ff71 	bl	800ffdc <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 80100fa:	4628      	mov	r0, r5
 80100fc:	f7f0 fd8a 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		data = array_values;
 8010100:	e7cc      	b.n	801009c <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0x62>
		length_to_extract = message.payload[start_index];
 8010102:	f8da 3004 	ldr.w	r3, [sl, #4]
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8010106:	f107 0018 	add.w	r0, r7, #24
		length_to_extract = message.payload[start_index];
 801010a:	f813 8004 	ldrb.w	r8, [r3, r4]
		start_index++;
 801010e:	3401      	adds	r4, #1
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8010110:	f7f0 fe30 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010114:	f107 0118 	add.w	r1, r7, #24
		start_index++;
 8010118:	b2a4      	uxth	r4, r4
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 801011a:	4643      	mov	r3, r8
 801011c:	4628      	mov	r0, r5
 801011e:	9600      	str	r6, [sp, #0]
 8010120:	4622      	mov	r2, r4
 8010122:	f7ff fefd 	bl	800ff20 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 8010126:	4629      	mov	r1, r5
 8010128:	f107 000c 	add.w	r0, r7, #12
 801012c:	f7ff fa6a 	bl	800f604 <_ZNSt6vectorIfSaIfEEaSEOS1_.isra.0>
 8010130:	4628      	mov	r0, r5
 8010132:	f7f1 ff6d 	bl	8002010 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8010136:	f107 0018 	add.w	r0, r7, #24
 801013a:	f7f0 fd6b 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return _M_data_ptr(this->_M_impl._M_start); }
 801013e:	f8d7 b00c 	ldr.w	fp, [r7, #12]
 8010142:	e7ab      	b.n	801009c <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0x62>

08010144 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt>:
uint16_t Communication::ProcessService(MessageHeader message, MessageElement element, uint16_t start_index) {
 8010144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010148:	b097      	sub	sp, #92	@ 0x5c
 801014a:	468c      	mov	ip, r1
 801014c:	4682      	mov	sl, r0
 801014e:	461c      	mov	r4, r3
 8010150:	af04      	add	r7, sp, #16
	service_information.interface = ServiceInterface{.interface=message.interface, .address=message.source_address};
 8010152:	f89c 3000 	ldrb.w	r3, [ip]
 8010156:	f89c b011 	ldrb.w	fp, [ip, #17]
 801015a:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
	service_information.access = element.access;
 801015e:	7a16      	ldrb	r6, [r2, #8]
	service_information.interface = ServiceInterface{.interface=message.interface, .address=message.source_address};
 8010160:	60fb      	str	r3, [r7, #12]
	service_information.register_ = element.element_register;
 8010162:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010166:	61b8      	str	r0, [r7, #24]
	if (element.command) {
 8010168:	79d0      	ldrb	r0, [r2, #7]
	service_information.register_ = element.element_register;
 801016a:	83b9      	strh	r1, [r7, #28]
		uint8_t error = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 801016c:	f10c 0104 	add.w	r1, ip, #4
	if (element.command) {
 8010170:	b340      	cbz	r0, 80101c4 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x80>
		uint8_t error = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 8010172:	4628      	mov	r0, r5
 8010174:	f7f0 fdfe 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010178:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801017c:	4621      	mov	r1, r4
 801017e:	4628      	mov	r0, r5
 8010180:	f7fe fdec 	bl	800ed5c <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 8010184:	4680      	mov	r8, r0
      }
 8010186:	4628      	mov	r0, r5
 8010188:	f7f0 fd44 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 801018c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8010190:	b18b      	cbz	r3, 80101b6 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x72>
			services->ReceiveError(service_information, error);//services->ReceiveError(element.element_register, message.interface, message.source_address, element.access, error);
 8010192:	2301      	movs	r3, #1
 8010194:	f887 b021 	strb.w	fp, [r7, #33]	@ 0x21
 8010198:	f887 6022 	strb.w	r6, [r7, #34]	@ 0x22
 801019c:	83fb      	strh	r3, [r7, #30]
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	f8da 0008 	ldr.w	r0, [sl, #8]
 80101a4:	f887 3020 	strb.w	r3, [r7, #32]
 80101a8:	f107 0318 	add.w	r3, r7, #24
 80101ac:	f8cd 8000 	str.w	r8, [sp]
 80101b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80101b2:	f008 ff4c 	bl	801904e <_ZN8Services12ReceiveErrorE20ServiceConfigurationh>
		return start_index + 1;
 80101b6:	3401      	adds	r4, #1
 80101b8:	b2a4      	uxth	r4, r4
}
 80101ba:	4620      	mov	r0, r4
 80101bc:	374c      	adds	r7, #76	@ 0x4c
 80101be:	46bd      	mov	sp, r7
 80101c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (element.access == WRITE) {
 80101c4:	bb1e      	cbnz	r6, 801020e <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0xca>
		uint8_t value = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 80101c6:	4628      	mov	r0, r5
 80101c8:	f7f0 fdd4 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80101cc:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80101d0:	4621      	mov	r1, r4
 80101d2:	4628      	mov	r0, r5
 80101d4:	f7fe fdc2 	bl	800ed5c <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 80101d8:	4680      	mov	r8, r0
 80101da:	4628      	mov	r0, r5
 80101dc:	f7f0 fd1a 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 80101e0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d0e6      	beq.n	80101b6 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x72>
			services->ReceiveWrite(service_information, value);//services->ReceiveWrite(element.element_register, message.interface, message.source_address, value);
 80101e8:	2301      	movs	r3, #1
 80101ea:	f887 b021 	strb.w	fp, [r7, #33]	@ 0x21
 80101ee:	f887 6022 	strb.w	r6, [r7, #34]	@ 0x22
 80101f2:	83fb      	strh	r3, [r7, #30]
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	f8da 0008 	ldr.w	r0, [sl, #8]
 80101fa:	f887 3020 	strb.w	r3, [r7, #32]
 80101fe:	f107 0318 	add.w	r3, r7, #24
 8010202:	f8cd 8000 	str.w	r8, [sp]
 8010206:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010208:	f008 fee4 	bl	8018fd4 <_ZN8Services12ReceiveWriteE20ServiceConfigurationh>
 801020c:	e7d3      	b.n	80101b6 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x72>
		T array_values[element.element_register.length];
 801020e:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8010212:	466e      	mov	r6, sp
	}
 8010214:	f8c7 d004 	str.w	sp, [r7, #4]
		T array_values[element.element_register.length];
 8010218:	ea4f 0388 	mov.w	r3, r8, lsl #2
	: _M_start(), _M_finish(), _M_end_of_storage()
 801021c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801021e:	3307      	adds	r3, #7
 8010220:	08db      	lsrs	r3, r3, #3
 8010222:	eba6 03c3 	sub.w	r3, r6, r3, lsl #3
 8010226:	f107 0616 	add.w	r6, r7, #22
 801022a:	469d      	mov	sp, r3
		if (not element.element_register.isArray) {
 801022c:	78d3      	ldrb	r3, [r2, #3]
		T array_values[element.element_register.length];
 801022e:	f10d 0910 	add.w	r9, sp, #16
 8010232:	e9c7 0009 	strd	r0, r0, [r7, #36]	@ 0x24
		if (not element.element_register.isArray) {
 8010236:	2b00      	cmp	r3, #0
 8010238:	d13a      	bne.n	80102b0 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x16c>
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 801023a:	4628      	mov	r0, r5
			data = &single_value;
 801023c:	f107 0930 	add.w	r9, r7, #48	@ 0x30
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8010240:	f7f0 fd98 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
			length_to_extract = 1;
 8010244:	f04f 0801 	mov.w	r8, #1
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8010248:	4632      	mov	r2, r6
 801024a:	4621      	mov	r1, r4
 801024c:	4628      	mov	r0, r5
 801024e:	f7fe fd41 	bl	800ecd4 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0>
      }
 8010252:	4628      	mov	r0, r5
 8010254:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
 8010258:	f7f0 fcdc 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 801025c:	7dbb      	ldrb	r3, [r7, #22]
 801025e:	b1eb      	cbz	r3, 801029c <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x158>
 8010260:	68fb      	ldr	r3, [r7, #12]
			services->ReceiveRead<T>(service_information, data);
 8010262:	f8da 6008 	ldr.w	r6, [sl, #8]
 8010266:	f04f 0a01 	mov.w	sl, #1
 801026a:	f887 3020 	strb.w	r3, [r7, #32]
 801026e:	f107 0318 	add.w	r3, r7, #24
 8010272:	f8a7 801e 	strh.w	r8, [r7, #30]
 8010276:	f887 b021 	strb.w	fp, [r7, #33]	@ 0x21
 801027a:	f887 a022 	strb.w	sl, [r7, #34]	@ 0x22
	bool success = true;
 801027e:	f887 a017 	strb.w	sl, [r7, #23]
 8010282:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010286:	7ebb      	ldrb	r3, [r7, #26]
 8010288:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 801028c:	60bb      	str	r3, [r7, #8]
	uint8_t start_index = 0;
 801028e:	2100      	movs	r1, #0
		CommunicationLED(leds, information.interface.interface);
 8010290:	f506 5380 	add.w	r3, r6, #4096	@ 0x1000
 8010294:	603b      	str	r3, [r7, #0]
	while (success) {
 8010296:	7dfb      	ldrb	r3, [r7, #23]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d13b      	bne.n	8010314 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x1d0>
		return start_index + sizeof(T) * length_to_extract;
 801029c:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 80102a0:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80102a4:	f7f1 feb4 	bl	8002010 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 80102a8:	f8d7 d004 	ldr.w	sp, [r7, #4]
 80102ac:	b2a4      	uxth	r4, r4
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80102ae:	e784      	b.n	80101ba <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x76>
		} else if (element.element_register.isArray && element.element_register.length > 0) {
 80102b0:	f1b8 0f00 	cmp.w	r8, #0
 80102b4:	d00d      	beq.n	80102d2 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x18e>
			ExtractArray<T>(array_values, message.payload, start_index, length_to_extract, &success);
 80102b6:	4628      	mov	r0, r5
 80102b8:	f7f0 fd5c 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80102bc:	4648      	mov	r0, r9
 80102be:	4643      	mov	r3, r8
 80102c0:	4622      	mov	r2, r4
 80102c2:	4629      	mov	r1, r5
 80102c4:	9600      	str	r6, [sp, #0]
 80102c6:	f7ff fe89 	bl	800ffdc <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 80102ca:	4628      	mov	r0, r5
 80102cc:	f7f0 fca2 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
			data = array_values;
 80102d0:	e7c4      	b.n	801025c <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x118>
			length_to_extract = message.payload[start_index];
 80102d2:	f8dc 3004 	ldr.w	r3, [ip, #4]
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 80102d6:	f107 0030 	add.w	r0, r7, #48	@ 0x30
			length_to_extract = message.payload[start_index];
 80102da:	f813 8004 	ldrb.w	r8, [r3, r4]
			start_index++;
 80102de:	3401      	adds	r4, #1
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 80102e0:	f7f0 fd48 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80102e4:	f107 0130 	add.w	r1, r7, #48	@ 0x30
			start_index++;
 80102e8:	b2a4      	uxth	r4, r4
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 80102ea:	4643      	mov	r3, r8
 80102ec:	4628      	mov	r0, r5
 80102ee:	9600      	str	r6, [sp, #0]
 80102f0:	4622      	mov	r2, r4
 80102f2:	f7ff fe15 	bl	800ff20 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 80102f6:	4629      	mov	r1, r5
 80102f8:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80102fc:	f7ff f982 	bl	800f604 <_ZNSt6vectorIfSaIfEEaSEOS1_.isra.0>
 8010300:	4628      	mov	r0, r5
 8010302:	f7f1 fe85 	bl	8002010 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8010306:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 801030a:	f7f0 fc83 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return _M_data_ptr(this->_M_impl._M_start); }
 801030e:	f8d7 9024 	ldr.w	r9, [r7, #36]	@ 0x24
 8010312:	e7a3      	b.n	801025c <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x118>
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 8010314:	68bb      	ldr	r3, [r7, #8]
 8010316:	4630      	mov	r0, r6
 8010318:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 801031c:	f107 0317 	add.w	r3, r7, #23
 8010320:	e9cd a301 	strd	sl, r3, [sp, #4]
 8010324:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8010328:	f8ad 3000 	strh.w	r3, [sp]
 801032c:	e895 000c 	ldmia.w	r5, {r2, r3}
 8010330:	f008 fe11 	bl	8018f56 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb>
		if (not success) return;
 8010334:	7dfa      	ldrb	r2, [r7, #23]
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 8010336:	4683      	mov	fp, r0
		if (not success) return;
 8010338:	2a00      	cmp	r2, #0
 801033a:	d0af      	beq.n	801029c <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x158>
		if (information.length > SERVICES_BUFFER_SIZE) return;
 801033c:	f5b8 7f80 	cmp.w	r8, #256	@ 0x100
 8010340:	d8ac      	bhi.n	801029c <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x158>
		CommunicationLED(leds, information.interface.interface);
 8010342:	683b      	ldr	r3, [r7, #0]
 8010344:	68f9      	ldr	r1, [r7, #12]
 8010346:	f8d3 0440 	ldr.w	r0, [r3, #1088]	@ 0x440
 801034a:	f7fe fa30 	bl	800e7ae <_Z16CommunicationLEDP4LEDSh>
		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 801034e:	f04f 31ff 	mov.w	r1, #4294967295
 8010352:	6830      	ldr	r0, [r6, #0]
 8010354:	f7fc f8ee 	bl	800c534 <osSemaphoreAcquire>
		services[index].configuration.length = information.length;
 8010358:	2218      	movs	r2, #24
		switch (information.register_.type) {
 801035a:	68bb      	ldr	r3, [r7, #8]
		services[index].configuration.length = information.length;
 801035c:	fb02 620b 	mla	r2, r2, fp, r6
 8010360:	f8a2 8010 	strh.w	r8, [r2, #16]
		switch (information.register_.type) {
 8010364:	2b08      	cmp	r3, #8
 8010366:	d80d      	bhi.n	8010384 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x240>
 8010368:	e8df f003 	tbb	[pc, r3]
 801036c:	0c1d0c05 	.word	0x0c1d0c05
 8010370:	0c0c0c26 	.word	0x0c0c0c26
 8010374:	33          	.byte	0x33
 8010375:	00          	.byte	0x00
			TranferData<uint8_t>((uint8_t*) data, &buffer_uint8[index][0], information.length);
 8010376:	eb06 210b 	add.w	r1, r6, fp, lsl #8
 801037a:	2200      	movs	r2, #0
 801037c:	3138      	adds	r1, #56	@ 0x38
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 801037e:	b290      	uxth	r0, r2
 8010380:	4580      	cmp	r8, r0
 8010382:	d80b      	bhi.n	801039c <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x258>
		services[index].reception_flag = true;
 8010384:	2218      	movs	r2, #24
		osSemaphoreRelease(ServiceSemaphore);
 8010386:	6830      	ldr	r0, [r6, #0]
		services[index].reception_flag = true;
 8010388:	fb02 620b 	mla	r2, r2, fp, r6
 801038c:	f882 a009 	strb.w	sl, [r2, #9]
		osSemaphoreRelease(ServiceSemaphore);
 8010390:	f7fc f904 	bl	800c59c <osSemaphoreRelease>
		start_index = index + 1;
 8010394:	f10b 0101 	add.w	r1, fp, #1
 8010398:	b2c9      	uxtb	r1, r1
 801039a:	e77c      	b.n	8010296 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x152>
		to[buffer_index] = from[buffer_index];
 801039c:	f819 0002 	ldrb.w	r0, [r9, r2]
 80103a0:	5488      	strb	r0, [r1, r2]
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 80103a2:	3201      	adds	r2, #1
 80103a4:	e7eb      	b.n	801037e <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x23a>
			TranferData<uint32_t>((uint32_t*) data, &buffer_uint32[index][0], information.length);
 80103a6:	eb06 218b 	add.w	r1, r6, fp, lsl #10
 80103aa:	4642      	mov	r2, r8
 80103ac:	4648      	mov	r0, r9
 80103ae:	f501 710e 	add.w	r1, r1, #568	@ 0x238
 80103b2:	f7fe fc83 	bl	800ecbc <_ZN8Services11TranferDataImEEvPT_S2_t.isra.0>
			break;
 80103b6:	e7e5      	b.n	8010384 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x240>
			TranferData<int8_t>((int8_t*) data, &buffer_int8[index][0], information.length);
 80103b8:	eb06 210b 	add.w	r1, r6, fp, lsl #8
 80103bc:	2200      	movs	r2, #0
 80103be:	f601 2138 	addw	r1, r1, #2616	@ 0xa38
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 80103c2:	b290      	uxth	r0, r2
 80103c4:	4580      	cmp	r8, r0
 80103c6:	d9dd      	bls.n	8010384 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x240>
		to[buffer_index] = from[buffer_index];
 80103c8:	f919 0002 	ldrsb.w	r0, [r9, r2]
 80103cc:	5488      	strb	r0, [r1, r2]
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 80103ce:	3201      	adds	r2, #1
 80103d0:	e7f7      	b.n	80103c2 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x27e>
			TranferData<float>((float*) data, &buffer_float[index][0], information.length);
 80103d2:	eb06 218b 	add.w	r1, r6, fp, lsl #10
 80103d6:	4642      	mov	r2, r8
 80103d8:	4648      	mov	r0, r9
 80103da:	f601 4138 	addw	r1, r1, #3128	@ 0xc38
 80103de:	f7fe fc63 	bl	800eca8 <_ZN8Services11TranferDataIfEEvPT_S2_t.isra.0>
			break;
 80103e2:	e7cf      	b.n	8010384 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x240>

080103e4 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>:
std::vector<T> Communication::ExtractVector(std::vector<uint8_t> payload, uint16_t start_index, uint16_t length, bool* success) {
 80103e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
 80103e8:	2600      	movs	r6, #0
 80103ea:	b087      	sub	sp, #28
 80103ec:	4604      	mov	r4, r0
 80103ee:	4691      	mov	r9, r2
 80103f0:	9100      	str	r1, [sp, #0]
 80103f2:	9301      	str	r3, [sp, #4]
 80103f4:	6086      	str	r6, [r0, #8]
 80103f6:	e9c0 6600 	strd	r6, r6, [r0]
 80103fa:	b2f5      	uxtb	r5, r6
	for (uint8_t index = 0; index < length; index++) {
 80103fc:	9b01      	ldr	r3, [sp, #4]
 80103fe:	429d      	cmp	r5, r3
 8010400:	db03      	blt.n	801040a <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x26>
}
 8010402:	4620      	mov	r0, r4
 8010404:	b007      	add	sp, #28
 8010406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 801040a:	9900      	ldr	r1, [sp, #0]
 801040c:	a803      	add	r0, sp, #12
 801040e:	f7f0 fcb1 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010412:	eb05 0109 	add.w	r1, r5, r9
 8010416:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8010418:	a803      	add	r0, sp, #12
 801041a:	b289      	uxth	r1, r1
 801041c:	f7fe fc78 	bl	800ed10 <_ZN13Communication13ExtractSingleIaEET_St6vectorIhSaIhEEtPb.isra.0>
 8010420:	4607      	mov	r7, r0
      }
 8010422:	a803      	add	r0, sp, #12
 8010424:	f7f0 fbf6 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (not *success)
 8010428:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801042a:	781b      	ldrb	r3, [r3, #0]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d0e8      	beq.n	8010402 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x1e>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8010430:	e9d4 5301 	ldrd	r5, r3, [r4, #4]
 8010434:	429d      	cmp	r5, r3
 8010436:	d005      	beq.n	8010444 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x60>
 8010438:	702f      	strb	r7, [r5, #0]
	    ++this->_M_impl._M_finish;
 801043a:	6863      	ldr	r3, [r4, #4]
 801043c:	3301      	adds	r3, #1
 801043e:	6063      	str	r3, [r4, #4]
	for (uint8_t index = 0; index < length; index++) {
 8010440:	3601      	adds	r6, #1
 8010442:	e7da      	b.n	80103fa <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x16>
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8010444:	4a13      	ldr	r2, [pc, #76]	@ (8010494 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0xb0>)
 8010446:	2101      	movs	r1, #1
 8010448:	4620      	mov	r0, r4
 801044a:	f7ff f9c2 	bl	800f7d2 <_ZNKSt6vectorIaSaIaEE12_M_check_lenEjPKc>
      pointer __old_start = this->_M_impl._M_start;
 801044e:	f8d4 b000 	ldr.w	fp, [r4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8010452:	4682      	mov	sl, r0
      pointer __new_start(this->_M_allocate(__len));
 8010454:	f7fe fae5 	bl	800ea22 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>
 8010458:	eba5 080b 	sub.w	r8, r5, fp
 801045c:	4605      	mov	r5, r0
      if (__count > 0)
 801045e:	f1b8 0f00 	cmp.w	r8, #0
 8010462:	f800 7008 	strb.w	r7, [r0, r8]
 8010466:	dd03      	ble.n	8010470 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x8c>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8010468:	4642      	mov	r2, r8
 801046a:	4659      	mov	r1, fp
 801046c:	f00a fcfe 	bl	801ae6c <memmove>
	      ++__new_finish;
 8010470:	f108 0201 	add.w	r2, r8, #1
 8010474:	18af      	adds	r7, r5, r2
	if (__p)
 8010476:	f1bb 0f00 	cmp.w	fp, #0
 801047a:	d005      	beq.n	8010488 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0xa4>
		    this->_M_impl._M_end_of_storage - __old_start);
 801047c:	68a1      	ldr	r1, [r4, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801047e:	4658      	mov	r0, fp
 8010480:	eba1 010b 	sub.w	r1, r1, fp
 8010484:	f00a f996 	bl	801a7b4 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8010488:	e9c4 5700 	strd	r5, r7, [r4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801048c:	4455      	add	r5, sl
 801048e:	60a5      	str	r5, [r4, #8]
 8010490:	e7d6      	b.n	8010440 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x5c>
 8010492:	bf00      	nop
 8010494:	0801b17a 	.word	0x0801b17a

08010498 <_ZN13Communication12ExtractArrayIaEEvPT_St6vectorIhSaIhEEttPb.isra.0>:
void Communication::ExtractArray(T* data, std::vector<uint8_t> payload, uint16_t start_index, uint16_t length, bool* success) {
 8010498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801049c:	b085      	sub	sp, #20
 801049e:	4607      	mov	r7, r0
 80104a0:	4688      	mov	r8, r1
 80104a2:	4691      	mov	r9, r2
 80104a4:	461c      	mov	r4, r3
 80104a6:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 80104aa:	2600      	movs	r6, #0
 80104ac:	b2f5      	uxtb	r5, r6
	for (uint8_t index = 0; index < length; index++) {
 80104ae:	42a5      	cmp	r5, r4
 80104b0:	db02      	blt.n	80104b8 <_ZN13Communication12ExtractArrayIaEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x20>
}
 80104b2:	b005      	add	sp, #20
 80104b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 80104b8:	4641      	mov	r1, r8
 80104ba:	a801      	add	r0, sp, #4
 80104bc:	f7f0 fc5a 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80104c0:	eb05 0109 	add.w	r1, r5, r9
 80104c4:	465a      	mov	r2, fp
 80104c6:	a801      	add	r0, sp, #4
 80104c8:	b289      	uxth	r1, r1
		if (not *success)
 80104ca:	3601      	adds	r6, #1
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 80104cc:	f7fe fc20 	bl	800ed10 <_ZN13Communication13ExtractSingleIaEET_St6vectorIhSaIhEEtPb.isra.0>
 80104d0:	4682      	mov	sl, r0
      }
 80104d2:	a801      	add	r0, sp, #4
 80104d4:	f7f0 fb9e 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (not *success)
 80104d8:	f89b 3000 	ldrb.w	r3, [fp]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d0e8      	beq.n	80104b2 <_ZN13Communication12ExtractArrayIaEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x1a>
		data[index] = element;
 80104e0:	f807 a005 	strb.w	sl, [r7, r5]
	for (uint8_t index = 0; index < length; index++) {
 80104e4:	e7e2      	b.n	80104ac <_ZN13Communication12ExtractArrayIaEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x14>

080104e6 <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt>:
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 80104e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104ea:	b08f      	sub	sp, #60	@ 0x3c
 80104ec:	461c      	mov	r4, r3
 80104ee:	4691      	mov	r9, r2
 80104f0:	468a      	mov	sl, r1
	T array_values[element.element_register.length];
 80104f2:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 80104f6:	466a      	mov	r2, sp
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 80104f8:	af02      	add	r7, sp, #8
	T array_values[element.element_register.length];
 80104fa:	f108 0307 	add.w	r3, r8, #7
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 80104fe:	3104      	adds	r1, #4
 8010500:	f107 0524 	add.w	r5, r7, #36	@ 0x24
 8010504:	f107 060b 	add.w	r6, r7, #11
	T array_values[element.element_register.length];
 8010508:	08db      	lsrs	r3, r3, #3
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 801050a:	6078      	str	r0, [r7, #4]
	T array_values[element.element_register.length];
 801050c:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 8010510:	469d      	mov	sp, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010512:	2300      	movs	r3, #0
 8010514:	e9c7 3303 	strd	r3, r3, [r7, #12]
 8010518:	617b      	str	r3, [r7, #20]
 801051a:	f10d 0b08 	add.w	fp, sp, #8
	if (not element.element_register.isArray) {
 801051e:	f899 3003 	ldrb.w	r3, [r9, #3]
 8010522:	bb83      	cbnz	r3, 8010586 <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt+0xa0>
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8010524:	4628      	mov	r0, r5
		data = &single_value;
 8010526:	f107 0b18 	add.w	fp, r7, #24
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 801052a:	f7f0 fc23 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
		length_to_extract = 1;
 801052e:	f04f 0801 	mov.w	r8, #1
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8010532:	4632      	mov	r2, r6
 8010534:	4621      	mov	r1, r4
 8010536:	4628      	mov	r0, r5
 8010538:	f7fe fbea 	bl	800ed10 <_ZN13Communication13ExtractSingleIaEET_St6vectorIhSaIhEEtPb.isra.0>
 801053c:	7638      	strb	r0, [r7, #24]
      }
 801053e:	4628      	mov	r0, r5
 8010540:	f7f0 fb68 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	subscriber_information.interface.interface = message.interface;
 8010544:	f89a 3000 	ldrb.w	r3, [sl]
	return start_index + sizeof(T) * length_to_extract;
 8010548:	4444      	add	r4, r8
	subscriber_information.length = length_to_extract;
 801054a:	f8a7 802c 	strh.w	r8, [r7, #44]	@ 0x2c
	subscriber_information.interface.interface = message.interface;
 801054e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	return start_index + sizeof(T) * length_to_extract;
 8010552:	b2a4      	uxth	r4, r4
	subscriber_information.interface.address = message.source_address;
 8010554:	f89a 3011 	ldrb.w	r3, [sl, #17]
	subscriber_information.register_ = element.element_register;
 8010558:	e899 0003 	ldmia.w	r9, {r0, r1}
	subscriber_information.interface.address = message.source_address;
 801055c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	subscriber_information.register_ = element.element_register;
 8010560:	6278      	str	r0, [r7, #36]	@ 0x24
 8010562:	8539      	strh	r1, [r7, #40]	@ 0x28
	subscribers->Receive<T>(subscriber_information, data);
 8010564:	f8cd b000 	str.w	fp, [sp]
 8010568:	6878      	ldr	r0, [r7, #4]
 801056a:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 801056e:	68c0      	ldr	r0, [r0, #12]
 8010570:	f7ff fbfe 	bl	800fd70 <_ZN17MasterSubscribers7ReceiveIaEEv15SubscriberInputPT_>
 8010574:	f107 000c 	add.w	r0, r7, #12
 8010578:	f7ff f823 	bl	800f5c2 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
}
 801057c:	4620      	mov	r0, r4
 801057e:	3734      	adds	r7, #52	@ 0x34
 8010580:	46bd      	mov	sp, r7
 8010582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (element.element_register.isArray && element.element_register.length > 0) {
 8010586:	f1b8 0f00 	cmp.w	r8, #0
 801058a:	d00d      	beq.n	80105a8 <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt+0xc2>
		ExtractArray<T>(array_values, message.payload, start_index, length_to_extract, &success);
 801058c:	4628      	mov	r0, r5
 801058e:	f7f0 fbf1 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010592:	4658      	mov	r0, fp
 8010594:	4643      	mov	r3, r8
 8010596:	4622      	mov	r2, r4
 8010598:	4629      	mov	r1, r5
 801059a:	9600      	str	r6, [sp, #0]
 801059c:	f7ff ff7c 	bl	8010498 <_ZN13Communication12ExtractArrayIaEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 80105a0:	4628      	mov	r0, r5
 80105a2:	f7f0 fb37 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		data = array_values;
 80105a6:	e7cd      	b.n	8010544 <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt+0x5e>
		length_to_extract = message.payload[start_index];
 80105a8:	f8da 3004 	ldr.w	r3, [sl, #4]
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 80105ac:	f107 0018 	add.w	r0, r7, #24
		length_to_extract = message.payload[start_index];
 80105b0:	f813 8004 	ldrb.w	r8, [r3, r4]
		start_index++;
 80105b4:	3401      	adds	r4, #1
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 80105b6:	f7f0 fbdd 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80105ba:	f107 0118 	add.w	r1, r7, #24
		start_index++;
 80105be:	b2a4      	uxth	r4, r4
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 80105c0:	4643      	mov	r3, r8
 80105c2:	4628      	mov	r0, r5
 80105c4:	9600      	str	r6, [sp, #0]
 80105c6:	4622      	mov	r2, r4
 80105c8:	f7ff ff0c 	bl	80103e4 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 80105cc:	4629      	mov	r1, r5
 80105ce:	f107 000c 	add.w	r0, r7, #12
 80105d2:	f7ff f800 	bl	800f5d6 <_ZNSt6vectorIaSaIaEEaSEOS1_.isra.0>
 80105d6:	4628      	mov	r0, r5
 80105d8:	f7fe fff3 	bl	800f5c2 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 80105dc:	f107 0018 	add.w	r0, r7, #24
 80105e0:	f7f0 fb18 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return _M_data_ptr(this->_M_impl._M_start); }
 80105e4:	f8d7 b00c 	ldr.w	fp, [r7, #12]
 80105e8:	e7ac      	b.n	8010544 <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt+0x5e>

080105ea <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt>:
uint16_t Communication::ProcessService(MessageHeader message, MessageElement element, uint16_t start_index) {
 80105ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105ee:	468c      	mov	ip, r1
 80105f0:	b097      	sub	sp, #92	@ 0x5c
 80105f2:	461c      	mov	r4, r3
 80105f4:	4682      	mov	sl, r0
 80105f6:	af04      	add	r7, sp, #16
	service_information.interface = ServiceInterface{.interface=message.interface, .address=message.source_address};
 80105f8:	f89c 3000 	ldrb.w	r3, [ip]
 80105fc:	f89c b011 	ldrb.w	fp, [ip, #17]
 8010600:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 8010604:	60fb      	str	r3, [r7, #12]
	if (element.command) {
 8010606:	79d3      	ldrb	r3, [r2, #7]
	service_information.access = element.access;
 8010608:	7a16      	ldrb	r6, [r2, #8]
	service_information.register_ = element.element_register;
 801060a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801060e:	83b9      	strh	r1, [r7, #28]
		uint8_t error = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 8010610:	f10c 0104 	add.w	r1, ip, #4
	service_information.register_ = element.element_register;
 8010614:	61b8      	str	r0, [r7, #24]
	if (element.command) {
 8010616:	b343      	cbz	r3, 801066a <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x80>
		uint8_t error = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 8010618:	4628      	mov	r0, r5
 801061a:	f7f0 fbab 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 801061e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010622:	4621      	mov	r1, r4
 8010624:	4628      	mov	r0, r5
 8010626:	f7fe fb99 	bl	800ed5c <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 801062a:	4680      	mov	r8, r0
      }
 801062c:	4628      	mov	r0, r5
 801062e:	f7f0 faf1 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8010632:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8010636:	b18b      	cbz	r3, 801065c <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x72>
			services->ReceiveError(service_information, error);//services->ReceiveError(element.element_register, message.interface, message.source_address, element.access, error);
 8010638:	2301      	movs	r3, #1
 801063a:	f887 b021 	strb.w	fp, [r7, #33]	@ 0x21
 801063e:	f887 6022 	strb.w	r6, [r7, #34]	@ 0x22
 8010642:	83fb      	strh	r3, [r7, #30]
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	f8da 0008 	ldr.w	r0, [sl, #8]
 801064a:	f887 3020 	strb.w	r3, [r7, #32]
 801064e:	f107 0318 	add.w	r3, r7, #24
 8010652:	f8cd 8000 	str.w	r8, [sp]
 8010656:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010658:	f008 fcf9 	bl	801904e <_ZN8Services12ReceiveErrorE20ServiceConfigurationh>
		return start_index + 1;
 801065c:	3401      	adds	r4, #1
 801065e:	b2a4      	uxth	r4, r4
}
 8010660:	4620      	mov	r0, r4
 8010662:	374c      	adds	r7, #76	@ 0x4c
 8010664:	46bd      	mov	sp, r7
 8010666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (element.access == WRITE) {
 801066a:	bb1e      	cbnz	r6, 80106b4 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0xca>
		uint8_t value = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 801066c:	4628      	mov	r0, r5
 801066e:	f7f0 fb81 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010672:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010676:	4621      	mov	r1, r4
 8010678:	4628      	mov	r0, r5
 801067a:	f7fe fb6f 	bl	800ed5c <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 801067e:	4680      	mov	r8, r0
 8010680:	4628      	mov	r0, r5
 8010682:	f7f0 fac7 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8010686:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 801068a:	2b00      	cmp	r3, #0
 801068c:	d0e6      	beq.n	801065c <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x72>
			services->ReceiveWrite(service_information, value);//services->ReceiveWrite(element.element_register, message.interface, message.source_address, value);
 801068e:	2301      	movs	r3, #1
 8010690:	f887 b021 	strb.w	fp, [r7, #33]	@ 0x21
 8010694:	f887 6022 	strb.w	r6, [r7, #34]	@ 0x22
 8010698:	83fb      	strh	r3, [r7, #30]
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	f8da 0008 	ldr.w	r0, [sl, #8]
 80106a0:	f887 3020 	strb.w	r3, [r7, #32]
 80106a4:	f107 0318 	add.w	r3, r7, #24
 80106a8:	f8cd 8000 	str.w	r8, [sp]
 80106ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80106ae:	f008 fc91 	bl	8018fd4 <_ZN8Services12ReceiveWriteE20ServiceConfigurationh>
 80106b2:	e7d3      	b.n	801065c <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x72>
		T array_values[element.element_register.length];
 80106b4:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 80106b8:	466e      	mov	r6, sp
	}
 80106ba:	f8c7 d004 	str.w	sp, [r7, #4]
		T array_values[element.element_register.length];
 80106be:	f108 0007 	add.w	r0, r8, #7
	: _M_start(), _M_finish(), _M_end_of_storage()
 80106c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80106c4:	08c0      	lsrs	r0, r0, #3
 80106c6:	eba6 00c0 	sub.w	r0, r6, r0, lsl #3
 80106ca:	f107 0617 	add.w	r6, r7, #23
 80106ce:	4685      	mov	sp, r0
 80106d0:	e9c7 3309 	strd	r3, r3, [r7, #36]	@ 0x24
		if (not element.element_register.isArray) {
 80106d4:	78d3      	ldrb	r3, [r2, #3]
		T array_values[element.element_register.length];
 80106d6:	f10d 0910 	add.w	r9, sp, #16
		if (not element.element_register.isArray) {
 80106da:	bbc3      	cbnz	r3, 801074e <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x164>
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 80106dc:	4628      	mov	r0, r5
			data = &single_value;
 80106de:	f107 0916 	add.w	r9, r7, #22
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 80106e2:	f7f0 fb47 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
			length_to_extract = 1;
 80106e6:	f04f 0801 	mov.w	r8, #1
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 80106ea:	4632      	mov	r2, r6
 80106ec:	4621      	mov	r1, r4
 80106ee:	4628      	mov	r0, r5
 80106f0:	f7fe fb0e 	bl	800ed10 <_ZN13Communication13ExtractSingleIaEET_St6vectorIhSaIhEEtPb.isra.0>
 80106f4:	75b8      	strb	r0, [r7, #22]
      }
 80106f6:	4628      	mov	r0, r5
 80106f8:	f7f0 fa8c 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 80106fc:	7dfb      	ldrb	r3, [r7, #23]
 80106fe:	b1eb      	cbz	r3, 801073c <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x152>
 8010700:	68fb      	ldr	r3, [r7, #12]
			services->ReceiveRead<T>(service_information, data);
 8010702:	f8da 6008 	ldr.w	r6, [sl, #8]
 8010706:	f04f 0a01 	mov.w	sl, #1
 801070a:	f887 3020 	strb.w	r3, [r7, #32]
 801070e:	f107 0318 	add.w	r3, r7, #24
 8010712:	f8a7 801e 	strh.w	r8, [r7, #30]
 8010716:	f887 b021 	strb.w	fp, [r7, #33]	@ 0x21
 801071a:	f887 a022 	strb.w	sl, [r7, #34]	@ 0x22
	bool success = true;
 801071e:	f887 a030 	strb.w	sl, [r7, #48]	@ 0x30
 8010722:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010726:	7ebb      	ldrb	r3, [r7, #26]
 8010728:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 801072c:	60bb      	str	r3, [r7, #8]
	uint8_t start_index = 0;
 801072e:	2100      	movs	r1, #0
		CommunicationLED(leds, information.interface.interface);
 8010730:	f506 5380 	add.w	r3, r6, #4096	@ 0x1000
 8010734:	603b      	str	r3, [r7, #0]
	while (success) {
 8010736:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 801073a:	bbd3      	cbnz	r3, 80107b2 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x1c8>
		return start_index + sizeof(T) * length_to_extract;
 801073c:	4444      	add	r4, r8
 801073e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8010742:	f7fe ff3e 	bl	800f5c2 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 8010746:	f8d7 d004 	ldr.w	sp, [r7, #4]
 801074a:	b2a4      	uxth	r4, r4
 801074c:	e788      	b.n	8010660 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x76>
		} else if (element.element_register.isArray && element.element_register.length > 0) {
 801074e:	f1b8 0f00 	cmp.w	r8, #0
 8010752:	d00d      	beq.n	8010770 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x186>
			ExtractArray<T>(array_values, message.payload, start_index, length_to_extract, &success);
 8010754:	4628      	mov	r0, r5
 8010756:	f7f0 fb0d 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 801075a:	4648      	mov	r0, r9
 801075c:	4643      	mov	r3, r8
 801075e:	4622      	mov	r2, r4
 8010760:	4629      	mov	r1, r5
 8010762:	9600      	str	r6, [sp, #0]
 8010764:	f7ff fe98 	bl	8010498 <_ZN13Communication12ExtractArrayIaEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 8010768:	4628      	mov	r0, r5
 801076a:	f7f0 fa53 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
			data = array_values;
 801076e:	e7c5      	b.n	80106fc <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x112>
			length_to_extract = message.payload[start_index];
 8010770:	f8dc 3004 	ldr.w	r3, [ip, #4]
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8010774:	f107 0030 	add.w	r0, r7, #48	@ 0x30
			length_to_extract = message.payload[start_index];
 8010778:	f813 8004 	ldrb.w	r8, [r3, r4]
			start_index++;
 801077c:	3401      	adds	r4, #1
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 801077e:	f7f0 faf9 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010782:	f107 0130 	add.w	r1, r7, #48	@ 0x30
			start_index++;
 8010786:	b2a4      	uxth	r4, r4
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8010788:	4643      	mov	r3, r8
 801078a:	4628      	mov	r0, r5
 801078c:	9600      	str	r6, [sp, #0]
 801078e:	4622      	mov	r2, r4
 8010790:	f7ff fe28 	bl	80103e4 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 8010794:	4629      	mov	r1, r5
 8010796:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 801079a:	f7fe ff1c 	bl	800f5d6 <_ZNSt6vectorIaSaIaEEaSEOS1_.isra.0>
 801079e:	4628      	mov	r0, r5
 80107a0:	f7fe ff0f 	bl	800f5c2 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 80107a4:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80107a8:	f7f0 fa34 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return _M_data_ptr(this->_M_impl._M_start); }
 80107ac:	f8d7 9024 	ldr.w	r9, [r7, #36]	@ 0x24
 80107b0:	e7a4      	b.n	80106fc <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x112>
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 80107b2:	68bb      	ldr	r3, [r7, #8]
 80107b4:	4630      	mov	r0, r6
 80107b6:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 80107ba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80107be:	e9cd a301 	strd	sl, r3, [sp, #4]
 80107c2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80107c6:	f8ad 3000 	strh.w	r3, [sp]
 80107ca:	e895 000c 	ldmia.w	r5, {r2, r3}
 80107ce:	f008 fbc2 	bl	8018f56 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb>
		if (not success) return;
 80107d2:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 80107d6:	4683      	mov	fp, r0
		if (not success) return;
 80107d8:	2a00      	cmp	r2, #0
 80107da:	d0af      	beq.n	801073c <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x152>
		if (information.length > SERVICES_BUFFER_SIZE) return;
 80107dc:	f5b8 7f80 	cmp.w	r8, #256	@ 0x100
 80107e0:	d8ac      	bhi.n	801073c <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x152>
		CommunicationLED(leds, information.interface.interface);
 80107e2:	683b      	ldr	r3, [r7, #0]
 80107e4:	68f9      	ldr	r1, [r7, #12]
 80107e6:	f8d3 0440 	ldr.w	r0, [r3, #1088]	@ 0x440
 80107ea:	f7fd ffe0 	bl	800e7ae <_Z16CommunicationLEDP4LEDSh>
		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 80107ee:	f04f 31ff 	mov.w	r1, #4294967295
 80107f2:	6830      	ldr	r0, [r6, #0]
 80107f4:	f7fb fe9e 	bl	800c534 <osSemaphoreAcquire>
		services[index].configuration.length = information.length;
 80107f8:	2218      	movs	r2, #24
		switch (information.register_.type) {
 80107fa:	68bb      	ldr	r3, [r7, #8]
		services[index].configuration.length = information.length;
 80107fc:	fb02 620b 	mla	r2, r2, fp, r6
 8010800:	f8a2 8010 	strh.w	r8, [r2, #16]
		switch (information.register_.type) {
 8010804:	2b08      	cmp	r3, #8
 8010806:	d80d      	bhi.n	8010824 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x23a>
 8010808:	e8df f003 	tbb	[pc, r3]
 801080c:	0c1d0c05 	.word	0x0c1d0c05
 8010810:	0c0c0c26 	.word	0x0c0c0c26
 8010814:	33          	.byte	0x33
 8010815:	00          	.byte	0x00
			TranferData<uint8_t>((uint8_t*) data, &buffer_uint8[index][0], information.length);
 8010816:	eb06 210b 	add.w	r1, r6, fp, lsl #8
 801081a:	2200      	movs	r2, #0
 801081c:	3138      	adds	r1, #56	@ 0x38
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 801081e:	b290      	uxth	r0, r2
 8010820:	4580      	cmp	r8, r0
 8010822:	d80b      	bhi.n	801083c <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x252>
		services[index].reception_flag = true;
 8010824:	2218      	movs	r2, #24
		osSemaphoreRelease(ServiceSemaphore);
 8010826:	6830      	ldr	r0, [r6, #0]
		services[index].reception_flag = true;
 8010828:	fb02 620b 	mla	r2, r2, fp, r6
 801082c:	f882 a009 	strb.w	sl, [r2, #9]
		osSemaphoreRelease(ServiceSemaphore);
 8010830:	f7fb feb4 	bl	800c59c <osSemaphoreRelease>
		start_index = index + 1;
 8010834:	f10b 0101 	add.w	r1, fp, #1
 8010838:	b2c9      	uxtb	r1, r1
 801083a:	e77c      	b.n	8010736 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x14c>
		to[buffer_index] = from[buffer_index];
 801083c:	f819 0002 	ldrb.w	r0, [r9, r2]
 8010840:	5488      	strb	r0, [r1, r2]
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 8010842:	3201      	adds	r2, #1
 8010844:	e7eb      	b.n	801081e <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x234>
			TranferData<uint32_t>((uint32_t*) data, &buffer_uint32[index][0], information.length);
 8010846:	eb06 218b 	add.w	r1, r6, fp, lsl #10
 801084a:	4642      	mov	r2, r8
 801084c:	4648      	mov	r0, r9
 801084e:	f501 710e 	add.w	r1, r1, #568	@ 0x238
 8010852:	f7fe fa33 	bl	800ecbc <_ZN8Services11TranferDataImEEvPT_S2_t.isra.0>
			break;
 8010856:	e7e5      	b.n	8010824 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x23a>
			TranferData<int8_t>((int8_t*) data, &buffer_int8[index][0], information.length);
 8010858:	eb06 210b 	add.w	r1, r6, fp, lsl #8
 801085c:	2200      	movs	r2, #0
 801085e:	f601 2138 	addw	r1, r1, #2616	@ 0xa38
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 8010862:	b290      	uxth	r0, r2
 8010864:	4580      	cmp	r8, r0
 8010866:	d9dd      	bls.n	8010824 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x23a>
		to[buffer_index] = from[buffer_index];
 8010868:	f919 0002 	ldrsb.w	r0, [r9, r2]
 801086c:	5488      	strb	r0, [r1, r2]
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 801086e:	3201      	adds	r2, #1
 8010870:	e7f7      	b.n	8010862 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x278>
			TranferData<float>((float*) data, &buffer_float[index][0], information.length);
 8010872:	eb06 218b 	add.w	r1, r6, fp, lsl #10
 8010876:	4642      	mov	r2, r8
 8010878:	4648      	mov	r0, r9
 801087a:	f601 4138 	addw	r1, r1, #3128	@ 0xc38
 801087e:	f7fe fa13 	bl	800eca8 <_ZN8Services11TranferDataIfEEvPT_S2_t.isra.0>
			break;
 8010882:	e7cf      	b.n	8010824 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x23a>

08010884 <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>:
std::vector<T> Communication::ExtractVector(std::vector<uint8_t> payload, uint16_t start_index, uint16_t length, bool* success) {
 8010884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010888:	2600      	movs	r6, #0
 801088a:	b087      	sub	sp, #28
 801088c:	4605      	mov	r5, r0
 801088e:	4691      	mov	r9, r2
 8010890:	9100      	str	r1, [sp, #0]
 8010892:	9301      	str	r3, [sp, #4]
 8010894:	6086      	str	r6, [r0, #8]
 8010896:	e9c0 6600 	strd	r6, r6, [r0]
 801089a:	b2f4      	uxtb	r4, r6
	for (uint8_t index = 0; index < length; index++) {
 801089c:	9b01      	ldr	r3, [sp, #4]
 801089e:	429c      	cmp	r4, r3
 80108a0:	db03      	blt.n	80108aa <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x26>
}
 80108a2:	4628      	mov	r0, r5
 80108a4:	b007      	add	sp, #28
 80108a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 80108aa:	9900      	ldr	r1, [sp, #0]
 80108ac:	a803      	add	r0, sp, #12
 80108ae:	f7f0 fa61 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80108b2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80108b4:	eb09 0184 	add.w	r1, r9, r4, lsl #2
 80108b8:	a803      	add	r0, sp, #12
 80108ba:	b289      	uxth	r1, r1
 80108bc:	f7fe fa35 	bl	800ed2a <_ZN13Communication13ExtractSingleImEET_St6vectorIhSaIhEEtPb.isra.0>
 80108c0:	4607      	mov	r7, r0
      }
 80108c2:	a803      	add	r0, sp, #12
 80108c4:	f7f0 f9a6 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (not *success)
 80108c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80108ca:	781b      	ldrb	r3, [r3, #0]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d0e8      	beq.n	80108a2 <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x1e>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80108d0:	e9d5 4301 	ldrd	r4, r3, [r5, #4]
 80108d4:	429c      	cmp	r4, r3
 80108d6:	d004      	beq.n	80108e2 <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x5e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80108d8:	f844 7b04 	str.w	r7, [r4], #4
	    ++this->_M_impl._M_finish;
 80108dc:	606c      	str	r4, [r5, #4]
	for (uint8_t index = 0; index < length; index++) {
 80108de:	3601      	adds	r6, #1
 80108e0:	e7db      	b.n	801089a <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x16>
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80108e2:	4a14      	ldr	r2, [pc, #80]	@ (8010934 <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0xb0>)
 80108e4:	2101      	movs	r1, #1
 80108e6:	4628      	mov	r0, r5
 80108e8:	f7fe ff58 	bl	800f79c <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc>
      pointer __old_start = this->_M_impl._M_start;
 80108ec:	f8d5 b000 	ldr.w	fp, [r5]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80108f0:	4682      	mov	sl, r0
      pointer __new_start(this->_M_allocate(__len));
 80108f2:	f7fe f8a1 	bl	800ea38 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0>
 80108f6:	eba4 080b 	sub.w	r8, r4, fp
 80108fa:	4604      	mov	r4, r0
      if (__count > 0)
 80108fc:	f1b8 0f00 	cmp.w	r8, #0
 8010900:	f840 7008 	str.w	r7, [r0, r8]
 8010904:	dd03      	ble.n	801090e <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x8a>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8010906:	4642      	mov	r2, r8
 8010908:	4659      	mov	r1, fp
 801090a:	f00a faaf 	bl	801ae6c <memmove>
	      ++__new_finish;
 801090e:	f108 0204 	add.w	r2, r8, #4
 8010912:	18a7      	adds	r7, r4, r2
	if (__p)
 8010914:	f1bb 0f00 	cmp.w	fp, #0
 8010918:	d006      	beq.n	8010928 <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0xa4>
		    this->_M_impl._M_end_of_storage - __old_start);
 801091a:	68a9      	ldr	r1, [r5, #8]
 801091c:	4658      	mov	r0, fp
 801091e:	eba1 010b 	sub.w	r1, r1, fp
 8010922:	1089      	asrs	r1, r1, #2
 8010924:	f7fe f868 	bl	800e9f8 <_ZNSt12_Vector_baseIP21CommunicationProtocolSaIS1_EE13_M_deallocateEPS1_j.part.0>
      this->_M_impl._M_finish = __new_finish;
 8010928:	e9c5 4700 	strd	r4, r7, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801092c:	eb04 048a 	add.w	r4, r4, sl, lsl #2
 8010930:	60ac      	str	r4, [r5, #8]
 8010932:	e7d4      	b.n	80108de <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x5a>
 8010934:	0801b17a 	.word	0x0801b17a

08010938 <_ZN13Communication12ExtractArrayImEEvPT_St6vectorIhSaIhEEttPb.isra.0>:
void Communication::ExtractArray(T* data, std::vector<uint8_t> payload, uint16_t start_index, uint16_t length, bool* success) {
 8010938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801093c:	b085      	sub	sp, #20
 801093e:	4607      	mov	r7, r0
 8010940:	4688      	mov	r8, r1
 8010942:	4691      	mov	r9, r2
 8010944:	461c      	mov	r4, r3
 8010946:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 801094a:	2600      	movs	r6, #0
 801094c:	b2f5      	uxtb	r5, r6
	for (uint8_t index = 0; index < length; index++) {
 801094e:	42a5      	cmp	r5, r4
 8010950:	db02      	blt.n	8010958 <_ZN13Communication12ExtractArrayImEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x20>
}
 8010952:	b005      	add	sp, #20
 8010954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 8010958:	4641      	mov	r1, r8
 801095a:	a801      	add	r0, sp, #4
 801095c:	f7f0 fa0a 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010960:	465a      	mov	r2, fp
 8010962:	eb09 0185 	add.w	r1, r9, r5, lsl #2
 8010966:	a801      	add	r0, sp, #4
		if (not *success)
 8010968:	3601      	adds	r6, #1
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 801096a:	b289      	uxth	r1, r1
 801096c:	f7fe f9dd 	bl	800ed2a <_ZN13Communication13ExtractSingleImEET_St6vectorIhSaIhEEtPb.isra.0>
 8010970:	4682      	mov	sl, r0
      }
 8010972:	a801      	add	r0, sp, #4
 8010974:	f7f0 f94e 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (not *success)
 8010978:	f89b 3000 	ldrb.w	r3, [fp]
 801097c:	2b00      	cmp	r3, #0
 801097e:	d0e8      	beq.n	8010952 <_ZN13Communication12ExtractArrayImEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x1a>
		data[index] = element;
 8010980:	f847 a025 	str.w	sl, [r7, r5, lsl #2]
	for (uint8_t index = 0; index < length; index++) {
 8010984:	e7e2      	b.n	801094c <_ZN13Communication12ExtractArrayImEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x14>

08010986 <_ZN13Communication17ProcessSubscriberImEEt13MessageHeader14MessageElementt>:
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 8010986:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801098a:	b08f      	sub	sp, #60	@ 0x3c
 801098c:	461c      	mov	r4, r3
 801098e:	4691      	mov	r9, r2
 8010990:	468a      	mov	sl, r1
	T array_values[element.element_register.length];
 8010992:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8010996:	466a      	mov	r2, sp
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 8010998:	af02      	add	r7, sp, #8
	T array_values[element.element_register.length];
 801099a:	ea4f 0388 	mov.w	r3, r8, lsl #2
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 801099e:	3104      	adds	r1, #4
 80109a0:	f107 0524 	add.w	r5, r7, #36	@ 0x24
 80109a4:	f107 060b 	add.w	r6, r7, #11
	T array_values[element.element_register.length];
 80109a8:	3307      	adds	r3, #7
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 80109aa:	6078      	str	r0, [r7, #4]
	T array_values[element.element_register.length];
 80109ac:	08db      	lsrs	r3, r3, #3
 80109ae:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 80109b2:	469d      	mov	sp, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 80109b4:	2300      	movs	r3, #0
 80109b6:	e9c7 3303 	strd	r3, r3, [r7, #12]
 80109ba:	617b      	str	r3, [r7, #20]
 80109bc:	f10d 0b08 	add.w	fp, sp, #8
	if (not element.element_register.isArray) {
 80109c0:	f899 3003 	ldrb.w	r3, [r9, #3]
 80109c4:	bb8b      	cbnz	r3, 8010a2a <_ZN13Communication17ProcessSubscriberImEEt13MessageHeader14MessageElementt+0xa4>
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 80109c6:	4628      	mov	r0, r5
		data = &single_value;
 80109c8:	f107 0b18 	add.w	fp, r7, #24
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 80109cc:	f7f0 f9d2 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
		length_to_extract = 1;
 80109d0:	f04f 0801 	mov.w	r8, #1
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 80109d4:	4632      	mov	r2, r6
 80109d6:	4621      	mov	r1, r4
 80109d8:	4628      	mov	r0, r5
 80109da:	f7fe f9a6 	bl	800ed2a <_ZN13Communication13ExtractSingleImEET_St6vectorIhSaIhEEtPb.isra.0>
 80109de:	61b8      	str	r0, [r7, #24]
      }
 80109e0:	4628      	mov	r0, r5
 80109e2:	f7f0 f917 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	subscriber_information.interface.interface = message.interface;
 80109e6:	f89a 3000 	ldrb.w	r3, [sl]
	return start_index + sizeof(T) * length_to_extract;
 80109ea:	eb04 0488 	add.w	r4, r4, r8, lsl #2
	subscriber_information.length = length_to_extract;
 80109ee:	f8a7 802c 	strh.w	r8, [r7, #44]	@ 0x2c
	subscriber_information.interface.interface = message.interface;
 80109f2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	return start_index + sizeof(T) * length_to_extract;
 80109f6:	b2a4      	uxth	r4, r4
	subscriber_information.interface.address = message.source_address;
 80109f8:	f89a 3011 	ldrb.w	r3, [sl, #17]
	subscriber_information.register_ = element.element_register;
 80109fc:	e899 0003 	ldmia.w	r9, {r0, r1}
	subscriber_information.interface.address = message.source_address;
 8010a00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	subscriber_information.register_ = element.element_register;
 8010a04:	6278      	str	r0, [r7, #36]	@ 0x24
 8010a06:	8539      	strh	r1, [r7, #40]	@ 0x28
	subscribers->Receive<T>(subscriber_information, data);
 8010a08:	f8cd b000 	str.w	fp, [sp]
 8010a0c:	6878      	ldr	r0, [r7, #4]
 8010a0e:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8010a12:	68c0      	ldr	r0, [r0, #12]
 8010a14:	f7ff f940 	bl	800fc98 <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_>
 8010a18:	f107 000c 	add.w	r0, r7, #12
 8010a1c:	f7fe fdaf 	bl	800f57e <_ZNSt12_Vector_baseImSaImEED1Ev>
}
 8010a20:	4620      	mov	r0, r4
 8010a22:	3734      	adds	r7, #52	@ 0x34
 8010a24:	46bd      	mov	sp, r7
 8010a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (element.element_register.isArray && element.element_register.length > 0) {
 8010a2a:	f1b8 0f00 	cmp.w	r8, #0
 8010a2e:	d00d      	beq.n	8010a4c <_ZN13Communication17ProcessSubscriberImEEt13MessageHeader14MessageElementt+0xc6>
		ExtractArray<T>(array_values, message.payload, start_index, length_to_extract, &success);
 8010a30:	4628      	mov	r0, r5
 8010a32:	f7f0 f99f 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010a36:	4658      	mov	r0, fp
 8010a38:	4643      	mov	r3, r8
 8010a3a:	4622      	mov	r2, r4
 8010a3c:	4629      	mov	r1, r5
 8010a3e:	9600      	str	r6, [sp, #0]
 8010a40:	f7ff ff7a 	bl	8010938 <_ZN13Communication12ExtractArrayImEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 8010a44:	4628      	mov	r0, r5
 8010a46:	f7f0 f8e5 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		data = array_values;
 8010a4a:	e7cc      	b.n	80109e6 <_ZN13Communication17ProcessSubscriberImEEt13MessageHeader14MessageElementt+0x60>
		length_to_extract = message.payload[start_index];
 8010a4c:	f8da 3004 	ldr.w	r3, [sl, #4]
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8010a50:	f107 0018 	add.w	r0, r7, #24
		length_to_extract = message.payload[start_index];
 8010a54:	f813 8004 	ldrb.w	r8, [r3, r4]
		start_index++;
 8010a58:	3401      	adds	r4, #1
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8010a5a:	f7f0 f98b 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010a5e:	f107 0118 	add.w	r1, r7, #24
		start_index++;
 8010a62:	b2a4      	uxth	r4, r4
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8010a64:	4643      	mov	r3, r8
 8010a66:	4628      	mov	r0, r5
 8010a68:	9600      	str	r6, [sp, #0]
 8010a6a:	4622      	mov	r2, r4
 8010a6c:	f7ff ff0a 	bl	8010884 <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 8010a70:	4629      	mov	r1, r5
 8010a72:	f107 000c 	add.w	r0, r7, #12
 8010a76:	f7fe fd8d 	bl	800f594 <_ZNSt6vectorImSaImEEaSEOS1_.isra.0>
 8010a7a:	4628      	mov	r0, r5
 8010a7c:	f7fe fd7f 	bl	800f57e <_ZNSt12_Vector_baseImSaImEED1Ev>
 8010a80:	f107 0018 	add.w	r0, r7, #24
 8010a84:	f7f0 f8c6 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return _M_data_ptr(this->_M_impl._M_start); }
 8010a88:	f8d7 b00c 	ldr.w	fp, [r7, #12]
 8010a8c:	e7ab      	b.n	80109e6 <_ZN13Communication17ProcessSubscriberImEEt13MessageHeader14MessageElementt+0x60>

08010a8e <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt>:
uint16_t Communication::ProcessService(MessageHeader message, MessageElement element, uint16_t start_index) {
 8010a8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a92:	b097      	sub	sp, #92	@ 0x5c
 8010a94:	468c      	mov	ip, r1
 8010a96:	4682      	mov	sl, r0
 8010a98:	461c      	mov	r4, r3
 8010a9a:	af04      	add	r7, sp, #16
	service_information.interface = ServiceInterface{.interface=message.interface, .address=message.source_address};
 8010a9c:	f89c 3000 	ldrb.w	r3, [ip]
 8010aa0:	f89c b011 	ldrb.w	fp, [ip, #17]
 8010aa4:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
	service_information.access = element.access;
 8010aa8:	7a16      	ldrb	r6, [r2, #8]
	service_information.interface = ServiceInterface{.interface=message.interface, .address=message.source_address};
 8010aaa:	60fb      	str	r3, [r7, #12]
	service_information.register_ = element.element_register;
 8010aac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010ab0:	61b8      	str	r0, [r7, #24]
	if (element.command) {
 8010ab2:	79d0      	ldrb	r0, [r2, #7]
	service_information.register_ = element.element_register;
 8010ab4:	83b9      	strh	r1, [r7, #28]
		uint8_t error = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 8010ab6:	f10c 0104 	add.w	r1, ip, #4
	if (element.command) {
 8010aba:	b340      	cbz	r0, 8010b0e <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x80>
		uint8_t error = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 8010abc:	4628      	mov	r0, r5
 8010abe:	f7f0 f959 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010ac2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010ac6:	4621      	mov	r1, r4
 8010ac8:	4628      	mov	r0, r5
 8010aca:	f7fe f947 	bl	800ed5c <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 8010ace:	4680      	mov	r8, r0
      }
 8010ad0:	4628      	mov	r0, r5
 8010ad2:	f7f0 f89f 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8010ad6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8010ada:	b18b      	cbz	r3, 8010b00 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x72>
			services->ReceiveError(service_information, error);//services->ReceiveError(element.element_register, message.interface, message.source_address, element.access, error);
 8010adc:	2301      	movs	r3, #1
 8010ade:	f887 b021 	strb.w	fp, [r7, #33]	@ 0x21
 8010ae2:	f887 6022 	strb.w	r6, [r7, #34]	@ 0x22
 8010ae6:	83fb      	strh	r3, [r7, #30]
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	f8da 0008 	ldr.w	r0, [sl, #8]
 8010aee:	f887 3020 	strb.w	r3, [r7, #32]
 8010af2:	f107 0318 	add.w	r3, r7, #24
 8010af6:	f8cd 8000 	str.w	r8, [sp]
 8010afa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010afc:	f008 faa7 	bl	801904e <_ZN8Services12ReceiveErrorE20ServiceConfigurationh>
		return start_index + 1;
 8010b00:	3401      	adds	r4, #1
 8010b02:	b2a4      	uxth	r4, r4
}
 8010b04:	4620      	mov	r0, r4
 8010b06:	374c      	adds	r7, #76	@ 0x4c
 8010b08:	46bd      	mov	sp, r7
 8010b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (element.access == WRITE) {
 8010b0e:	bb1e      	cbnz	r6, 8010b58 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0xca>
		uint8_t value = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 8010b10:	4628      	mov	r0, r5
 8010b12:	f7f0 f92f 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010b16:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010b1a:	4621      	mov	r1, r4
 8010b1c:	4628      	mov	r0, r5
 8010b1e:	f7fe f91d 	bl	800ed5c <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 8010b22:	4680      	mov	r8, r0
 8010b24:	4628      	mov	r0, r5
 8010b26:	f7f0 f875 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8010b2a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d0e6      	beq.n	8010b00 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x72>
			services->ReceiveWrite(service_information, value);//services->ReceiveWrite(element.element_register, message.interface, message.source_address, value);
 8010b32:	2301      	movs	r3, #1
 8010b34:	f887 b021 	strb.w	fp, [r7, #33]	@ 0x21
 8010b38:	f887 6022 	strb.w	r6, [r7, #34]	@ 0x22
 8010b3c:	83fb      	strh	r3, [r7, #30]
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	f8da 0008 	ldr.w	r0, [sl, #8]
 8010b44:	f887 3020 	strb.w	r3, [r7, #32]
 8010b48:	f107 0318 	add.w	r3, r7, #24
 8010b4c:	f8cd 8000 	str.w	r8, [sp]
 8010b50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010b52:	f008 fa3f 	bl	8018fd4 <_ZN8Services12ReceiveWriteE20ServiceConfigurationh>
 8010b56:	e7d3      	b.n	8010b00 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x72>
		T array_values[element.element_register.length];
 8010b58:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8010b5c:	466e      	mov	r6, sp
	}
 8010b5e:	f8c7 d004 	str.w	sp, [r7, #4]
		T array_values[element.element_register.length];
 8010b62:	ea4f 0388 	mov.w	r3, r8, lsl #2
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010b66:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8010b68:	3307      	adds	r3, #7
 8010b6a:	08db      	lsrs	r3, r3, #3
 8010b6c:	eba6 03c3 	sub.w	r3, r6, r3, lsl #3
 8010b70:	f107 0616 	add.w	r6, r7, #22
 8010b74:	469d      	mov	sp, r3
		if (not element.element_register.isArray) {
 8010b76:	78d3      	ldrb	r3, [r2, #3]
		T array_values[element.element_register.length];
 8010b78:	f10d 0910 	add.w	r9, sp, #16
 8010b7c:	e9c7 0009 	strd	r0, r0, [r7, #36]	@ 0x24
		if (not element.element_register.isArray) {
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d139      	bne.n	8010bf8 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x16a>
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8010b84:	4628      	mov	r0, r5
			data = &single_value;
 8010b86:	f107 0930 	add.w	r9, r7, #48	@ 0x30
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8010b8a:	f7f0 f8f3 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
			length_to_extract = 1;
 8010b8e:	f04f 0801 	mov.w	r8, #1
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8010b92:	4632      	mov	r2, r6
 8010b94:	4621      	mov	r1, r4
 8010b96:	4628      	mov	r0, r5
 8010b98:	f7fe f8c7 	bl	800ed2a <_ZN13Communication13ExtractSingleImEET_St6vectorIhSaIhEEtPb.isra.0>
 8010b9c:	6338      	str	r0, [r7, #48]	@ 0x30
      }
 8010b9e:	4628      	mov	r0, r5
 8010ba0:	f7f0 f838 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8010ba4:	7dbb      	ldrb	r3, [r7, #22]
 8010ba6:	b1eb      	cbz	r3, 8010be4 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x156>
 8010ba8:	68fb      	ldr	r3, [r7, #12]
			services->ReceiveRead<T>(service_information, data);
 8010baa:	f8da 6008 	ldr.w	r6, [sl, #8]
 8010bae:	f04f 0a01 	mov.w	sl, #1
 8010bb2:	f887 3020 	strb.w	r3, [r7, #32]
 8010bb6:	f107 0318 	add.w	r3, r7, #24
 8010bba:	f8a7 801e 	strh.w	r8, [r7, #30]
 8010bbe:	f887 b021 	strb.w	fp, [r7, #33]	@ 0x21
 8010bc2:	f887 a022 	strb.w	sl, [r7, #34]	@ 0x22
	bool success = true;
 8010bc6:	f887 a017 	strb.w	sl, [r7, #23]
 8010bca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010bce:	7ebb      	ldrb	r3, [r7, #26]
 8010bd0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8010bd4:	60bb      	str	r3, [r7, #8]
	uint8_t start_index = 0;
 8010bd6:	2100      	movs	r1, #0
		CommunicationLED(leds, information.interface.interface);
 8010bd8:	f506 5380 	add.w	r3, r6, #4096	@ 0x1000
 8010bdc:	603b      	str	r3, [r7, #0]
	while (success) {
 8010bde:	7dfb      	ldrb	r3, [r7, #23]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d13b      	bne.n	8010c5c <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x1ce>
		return start_index + sizeof(T) * length_to_extract;
 8010be4:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 8010be8:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8010bec:	f7fe fcc7 	bl	800f57e <_ZNSt12_Vector_baseImSaImEED1Ev>
 8010bf0:	f8d7 d004 	ldr.w	sp, [r7, #4]
 8010bf4:	b2a4      	uxth	r4, r4
 8010bf6:	e785      	b.n	8010b04 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x76>
		} else if (element.element_register.isArray && element.element_register.length > 0) {
 8010bf8:	f1b8 0f00 	cmp.w	r8, #0
 8010bfc:	d00d      	beq.n	8010c1a <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x18c>
			ExtractArray<T>(array_values, message.payload, start_index, length_to_extract, &success);
 8010bfe:	4628      	mov	r0, r5
 8010c00:	f7f0 f8b8 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010c04:	4648      	mov	r0, r9
 8010c06:	4643      	mov	r3, r8
 8010c08:	4622      	mov	r2, r4
 8010c0a:	4629      	mov	r1, r5
 8010c0c:	9600      	str	r6, [sp, #0]
 8010c0e:	f7ff fe93 	bl	8010938 <_ZN13Communication12ExtractArrayImEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 8010c12:	4628      	mov	r0, r5
 8010c14:	f7ef fffe 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
			data = array_values;
 8010c18:	e7c4      	b.n	8010ba4 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x116>
			length_to_extract = message.payload[start_index];
 8010c1a:	f8dc 3004 	ldr.w	r3, [ip, #4]
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8010c1e:	f107 0030 	add.w	r0, r7, #48	@ 0x30
			length_to_extract = message.payload[start_index];
 8010c22:	f813 8004 	ldrb.w	r8, [r3, r4]
			start_index++;
 8010c26:	3401      	adds	r4, #1
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8010c28:	f7f0 f8a4 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010c2c:	f107 0130 	add.w	r1, r7, #48	@ 0x30
			start_index++;
 8010c30:	b2a4      	uxth	r4, r4
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8010c32:	4643      	mov	r3, r8
 8010c34:	4628      	mov	r0, r5
 8010c36:	9600      	str	r6, [sp, #0]
 8010c38:	4622      	mov	r2, r4
 8010c3a:	f7ff fe23 	bl	8010884 <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 8010c3e:	4629      	mov	r1, r5
 8010c40:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8010c44:	f7fe fca6 	bl	800f594 <_ZNSt6vectorImSaImEEaSEOS1_.isra.0>
 8010c48:	4628      	mov	r0, r5
 8010c4a:	f7fe fc98 	bl	800f57e <_ZNSt12_Vector_baseImSaImEED1Ev>
 8010c4e:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8010c52:	f7ef ffdf 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return _M_data_ptr(this->_M_impl._M_start); }
 8010c56:	f8d7 9024 	ldr.w	r9, [r7, #36]	@ 0x24
 8010c5a:	e7a3      	b.n	8010ba4 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x116>
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 8010c5c:	68bb      	ldr	r3, [r7, #8]
 8010c5e:	4630      	mov	r0, r6
 8010c60:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8010c64:	f107 0317 	add.w	r3, r7, #23
 8010c68:	e9cd a301 	strd	sl, r3, [sp, #4]
 8010c6c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8010c70:	f8ad 3000 	strh.w	r3, [sp]
 8010c74:	e895 000c 	ldmia.w	r5, {r2, r3}
 8010c78:	f008 f96d 	bl	8018f56 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb>
		if (not success) return;
 8010c7c:	7dfa      	ldrb	r2, [r7, #23]
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 8010c7e:	4683      	mov	fp, r0
		if (not success) return;
 8010c80:	2a00      	cmp	r2, #0
 8010c82:	d0af      	beq.n	8010be4 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x156>
		if (information.length > SERVICES_BUFFER_SIZE) return;
 8010c84:	f5b8 7f80 	cmp.w	r8, #256	@ 0x100
 8010c88:	d8ac      	bhi.n	8010be4 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x156>
		CommunicationLED(leds, information.interface.interface);
 8010c8a:	683b      	ldr	r3, [r7, #0]
 8010c8c:	68f9      	ldr	r1, [r7, #12]
 8010c8e:	f8d3 0440 	ldr.w	r0, [r3, #1088]	@ 0x440
 8010c92:	f7fd fd8c 	bl	800e7ae <_Z16CommunicationLEDP4LEDSh>
		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 8010c96:	f04f 31ff 	mov.w	r1, #4294967295
 8010c9a:	6830      	ldr	r0, [r6, #0]
 8010c9c:	f7fb fc4a 	bl	800c534 <osSemaphoreAcquire>
		services[index].configuration.length = information.length;
 8010ca0:	2218      	movs	r2, #24
		switch (information.register_.type) {
 8010ca2:	68bb      	ldr	r3, [r7, #8]
		services[index].configuration.length = information.length;
 8010ca4:	fb02 620b 	mla	r2, r2, fp, r6
 8010ca8:	f8a2 8010 	strh.w	r8, [r2, #16]
		switch (information.register_.type) {
 8010cac:	2b08      	cmp	r3, #8
 8010cae:	d80d      	bhi.n	8010ccc <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x23e>
 8010cb0:	e8df f003 	tbb	[pc, r3]
 8010cb4:	0c1d0c05 	.word	0x0c1d0c05
 8010cb8:	0c0c0c26 	.word	0x0c0c0c26
 8010cbc:	33          	.byte	0x33
 8010cbd:	00          	.byte	0x00
			TranferData<uint8_t>((uint8_t*) data, &buffer_uint8[index][0], information.length);
 8010cbe:	eb06 210b 	add.w	r1, r6, fp, lsl #8
 8010cc2:	2200      	movs	r2, #0
 8010cc4:	3138      	adds	r1, #56	@ 0x38
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 8010cc6:	b290      	uxth	r0, r2
 8010cc8:	4580      	cmp	r8, r0
 8010cca:	d80b      	bhi.n	8010ce4 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x256>
		services[index].reception_flag = true;
 8010ccc:	2218      	movs	r2, #24
		osSemaphoreRelease(ServiceSemaphore);
 8010cce:	6830      	ldr	r0, [r6, #0]
		services[index].reception_flag = true;
 8010cd0:	fb02 620b 	mla	r2, r2, fp, r6
 8010cd4:	f882 a009 	strb.w	sl, [r2, #9]
		osSemaphoreRelease(ServiceSemaphore);
 8010cd8:	f7fb fc60 	bl	800c59c <osSemaphoreRelease>
		start_index = index + 1;
 8010cdc:	f10b 0101 	add.w	r1, fp, #1
 8010ce0:	b2c9      	uxtb	r1, r1
 8010ce2:	e77c      	b.n	8010bde <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x150>
		to[buffer_index] = from[buffer_index];
 8010ce4:	f819 0002 	ldrb.w	r0, [r9, r2]
 8010ce8:	5488      	strb	r0, [r1, r2]
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 8010cea:	3201      	adds	r2, #1
 8010cec:	e7eb      	b.n	8010cc6 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x238>
			TranferData<uint32_t>((uint32_t*) data, &buffer_uint32[index][0], information.length);
 8010cee:	eb06 218b 	add.w	r1, r6, fp, lsl #10
 8010cf2:	4642      	mov	r2, r8
 8010cf4:	4648      	mov	r0, r9
 8010cf6:	f501 710e 	add.w	r1, r1, #568	@ 0x238
 8010cfa:	f7fd ffdf 	bl	800ecbc <_ZN8Services11TranferDataImEEvPT_S2_t.isra.0>
			break;
 8010cfe:	e7e5      	b.n	8010ccc <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x23e>
			TranferData<int8_t>((int8_t*) data, &buffer_int8[index][0], information.length);
 8010d00:	eb06 210b 	add.w	r1, r6, fp, lsl #8
 8010d04:	2200      	movs	r2, #0
 8010d06:	f601 2138 	addw	r1, r1, #2616	@ 0xa38
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 8010d0a:	b290      	uxth	r0, r2
 8010d0c:	4580      	cmp	r8, r0
 8010d0e:	d9dd      	bls.n	8010ccc <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x23e>
		to[buffer_index] = from[buffer_index];
 8010d10:	f919 0002 	ldrsb.w	r0, [r9, r2]
 8010d14:	5488      	strb	r0, [r1, r2]
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 8010d16:	3201      	adds	r2, #1
 8010d18:	e7f7      	b.n	8010d0a <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x27c>
			TranferData<float>((float*) data, &buffer_float[index][0], information.length);
 8010d1a:	eb06 218b 	add.w	r1, r6, fp, lsl #10
 8010d1e:	4642      	mov	r2, r8
 8010d20:	4648      	mov	r0, r9
 8010d22:	f601 4138 	addw	r1, r1, #3128	@ 0xc38
 8010d26:	f7fd ffbf 	bl	800eca8 <_ZN8Services11TranferDataIfEEvPT_S2_t.isra.0>
			break;
 8010d2a:	e7cf      	b.n	8010ccc <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x23e>

08010d2c <_ZN13Communication13ExtractVectorIhEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>:
std::vector<T> Communication::ExtractVector(std::vector<uint8_t> payload, uint16_t start_index, uint16_t length, bool* success) {
 8010d2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010d30:	2400      	movs	r4, #0
 8010d32:	4605      	mov	r5, r0
 8010d34:	460f      	mov	r7, r1
 8010d36:	4690      	mov	r8, r2
 8010d38:	461e      	mov	r6, r3
 8010d3a:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
	for (uint8_t index = 0; index < length; index++) {
 8010d3e:	46a2      	mov	sl, r4
 8010d40:	6084      	str	r4, [r0, #8]
 8010d42:	e9c0 4400 	strd	r4, r4, [r0]
 8010d46:	fa5f f48a 	uxtb.w	r4, sl
 8010d4a:	42b4      	cmp	r4, r6
 8010d4c:	db03      	blt.n	8010d56 <_ZN13Communication13ExtractVectorIhEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x2a>
}
 8010d4e:	4628      	mov	r0, r5
 8010d50:	b004      	add	sp, #16
 8010d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 8010d56:	4444      	add	r4, r8
 8010d58:	4639      	mov	r1, r7
 8010d5a:	a801      	add	r0, sp, #4
		if (not *success)
 8010d5c:	f10a 0a01 	add.w	sl, sl, #1
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 8010d60:	f7f0 f808 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010d64:	464a      	mov	r2, r9
 8010d66:	b2a1      	uxth	r1, r4
 8010d68:	a801      	add	r0, sp, #4
 8010d6a:	f7fd fff7 	bl	800ed5c <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 8010d6e:	f88d 0003 	strb.w	r0, [sp, #3]
      }
 8010d72:	a801      	add	r0, sp, #4
 8010d74:	f7ef ff4e 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (not *success)
 8010d78:	f899 3000 	ldrb.w	r3, [r9]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d0e6      	beq.n	8010d4e <_ZN13Communication13ExtractVectorIhEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x22>
		data.push_back(element);
 8010d80:	f10d 0103 	add.w	r1, sp, #3
 8010d84:	4628      	mov	r0, r5
 8010d86:	f7fe fc87 	bl	800f698 <_ZNSt6vectorIhSaIhEE9push_backERKh>
	for (uint8_t index = 0; index < length; index++) {
 8010d8a:	e7dc      	b.n	8010d46 <_ZN13Communication13ExtractVectorIhEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x1a>

08010d8c <_ZN13Communication12ExtractArrayIhEEvPT_St6vectorIhSaIhEEttPb.isra.0>:
void Communication::ExtractArray(T* data, std::vector<uint8_t> payload, uint16_t start_index, uint16_t length, bool* success) {
 8010d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d90:	b085      	sub	sp, #20
 8010d92:	4607      	mov	r7, r0
 8010d94:	4688      	mov	r8, r1
 8010d96:	4691      	mov	r9, r2
 8010d98:	461c      	mov	r4, r3
 8010d9a:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8010d9e:	2600      	movs	r6, #0
 8010da0:	b2f5      	uxtb	r5, r6
	for (uint8_t index = 0; index < length; index++) {
 8010da2:	42a5      	cmp	r5, r4
 8010da4:	db02      	blt.n	8010dac <_ZN13Communication12ExtractArrayIhEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x20>
}
 8010da6:	b005      	add	sp, #20
 8010da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 8010dac:	4641      	mov	r1, r8
 8010dae:	a801      	add	r0, sp, #4
 8010db0:	f7ef ffe0 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010db4:	eb05 0109 	add.w	r1, r5, r9
 8010db8:	465a      	mov	r2, fp
 8010dba:	a801      	add	r0, sp, #4
 8010dbc:	b289      	uxth	r1, r1
		if (not *success)
 8010dbe:	3601      	adds	r6, #1
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 8010dc0:	f7fd ffcc 	bl	800ed5c <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 8010dc4:	4682      	mov	sl, r0
 8010dc6:	a801      	add	r0, sp, #4
 8010dc8:	f7ef ff24 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (not *success)
 8010dcc:	f89b 3000 	ldrb.w	r3, [fp]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d0e8      	beq.n	8010da6 <_ZN13Communication12ExtractArrayIhEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x1a>
		data[index] = element;
 8010dd4:	f807 a005 	strb.w	sl, [r7, r5]
	for (uint8_t index = 0; index < length; index++) {
 8010dd8:	e7e2      	b.n	8010da0 <_ZN13Communication12ExtractArrayIhEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x14>

08010dda <_ZN13Communication17ProcessSubscriberIhEEt13MessageHeader14MessageElementt>:
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 8010dda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dde:	b08f      	sub	sp, #60	@ 0x3c
 8010de0:	461c      	mov	r4, r3
 8010de2:	4691      	mov	r9, r2
 8010de4:	468a      	mov	sl, r1
	T array_values[element.element_register.length];
 8010de6:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8010dea:	466a      	mov	r2, sp
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 8010dec:	af02      	add	r7, sp, #8
	T array_values[element.element_register.length];
 8010dee:	f108 0307 	add.w	r3, r8, #7
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8010df2:	3104      	adds	r1, #4
 8010df4:	f107 0524 	add.w	r5, r7, #36	@ 0x24
 8010df8:	f107 060b 	add.w	r6, r7, #11
	T array_values[element.element_register.length];
 8010dfc:	08db      	lsrs	r3, r3, #3
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 8010dfe:	6078      	str	r0, [r7, #4]
	T array_values[element.element_register.length];
 8010e00:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 8010e04:	469d      	mov	sp, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010e06:	2300      	movs	r3, #0
 8010e08:	e9c7 3303 	strd	r3, r3, [r7, #12]
 8010e0c:	617b      	str	r3, [r7, #20]
 8010e0e:	f10d 0b08 	add.w	fp, sp, #8
	if (not element.element_register.isArray) {
 8010e12:	f899 3003 	ldrb.w	r3, [r9, #3]
 8010e16:	bb83      	cbnz	r3, 8010e7a <_ZN13Communication17ProcessSubscriberIhEEt13MessageHeader14MessageElementt+0xa0>
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8010e18:	4628      	mov	r0, r5
		data = &single_value;
 8010e1a:	f107 0b18 	add.w	fp, r7, #24
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8010e1e:	f7ef ffa9 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
		length_to_extract = 1;
 8010e22:	f04f 0801 	mov.w	r8, #1
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8010e26:	4632      	mov	r2, r6
 8010e28:	4621      	mov	r1, r4
 8010e2a:	4628      	mov	r0, r5
 8010e2c:	f7fd ff96 	bl	800ed5c <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 8010e30:	7638      	strb	r0, [r7, #24]
      }
 8010e32:	4628      	mov	r0, r5
 8010e34:	f7ef feee 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	subscriber_information.interface.interface = message.interface;
 8010e38:	f89a 3000 	ldrb.w	r3, [sl]
	return start_index + sizeof(T) * length_to_extract;
 8010e3c:	4444      	add	r4, r8
	subscriber_information.length = length_to_extract;
 8010e3e:	f8a7 802c 	strh.w	r8, [r7, #44]	@ 0x2c
	subscriber_information.interface.interface = message.interface;
 8010e42:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	return start_index + sizeof(T) * length_to_extract;
 8010e46:	b2a4      	uxth	r4, r4
	subscriber_information.interface.address = message.source_address;
 8010e48:	f89a 3011 	ldrb.w	r3, [sl, #17]
	subscriber_information.register_ = element.element_register;
 8010e4c:	e899 0003 	ldmia.w	r9, {r0, r1}
	subscriber_information.interface.address = message.source_address;
 8010e50:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	subscriber_information.register_ = element.element_register;
 8010e54:	6278      	str	r0, [r7, #36]	@ 0x24
 8010e56:	8539      	strh	r1, [r7, #40]	@ 0x28
	subscribers->Receive<T>(subscriber_information, data);
 8010e58:	f8cd b000 	str.w	fp, [sp]
 8010e5c:	6878      	ldr	r0, [r7, #4]
 8010e5e:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8010e62:	68c0      	ldr	r0, [r0, #12]
 8010e64:	f7fe feac 	bl	800fbc0 <_ZN17MasterSubscribers7ReceiveIhEEv15SubscriberInputPT_>
 8010e68:	f107 000c 	add.w	r0, r7, #12
 8010e6c:	f7ef fed2 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 8010e70:	4620      	mov	r0, r4
 8010e72:	3734      	adds	r7, #52	@ 0x34
 8010e74:	46bd      	mov	sp, r7
 8010e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (element.element_register.isArray && element.element_register.length > 0) {
 8010e7a:	f1b8 0f00 	cmp.w	r8, #0
 8010e7e:	d00d      	beq.n	8010e9c <_ZN13Communication17ProcessSubscriberIhEEt13MessageHeader14MessageElementt+0xc2>
		ExtractArray<T>(array_values, message.payload, start_index, length_to_extract, &success);
 8010e80:	4628      	mov	r0, r5
 8010e82:	f7ef ff77 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010e86:	4658      	mov	r0, fp
 8010e88:	4643      	mov	r3, r8
 8010e8a:	4622      	mov	r2, r4
 8010e8c:	4629      	mov	r1, r5
 8010e8e:	9600      	str	r6, [sp, #0]
 8010e90:	f7ff ff7c 	bl	8010d8c <_ZN13Communication12ExtractArrayIhEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 8010e94:	4628      	mov	r0, r5
 8010e96:	f7ef febd 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		data = array_values;
 8010e9a:	e7cd      	b.n	8010e38 <_ZN13Communication17ProcessSubscriberIhEEt13MessageHeader14MessageElementt+0x5e>
		length_to_extract = message.payload[start_index];
 8010e9c:	f8da 3004 	ldr.w	r3, [sl, #4]
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8010ea0:	f107 0018 	add.w	r0, r7, #24
		length_to_extract = message.payload[start_index];
 8010ea4:	f813 8004 	ldrb.w	r8, [r3, r4]
		start_index++;
 8010ea8:	3401      	adds	r4, #1
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8010eaa:	f7ef ff63 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010eae:	f107 0118 	add.w	r1, r7, #24
		start_index++;
 8010eb2:	b2a4      	uxth	r4, r4
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8010eb4:	4643      	mov	r3, r8
 8010eb6:	4628      	mov	r0, r5
 8010eb8:	9600      	str	r6, [sp, #0]
 8010eba:	4622      	mov	r2, r4
 8010ebc:	f7ff ff36 	bl	8010d2c <_ZN13Communication13ExtractVectorIhEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 8010ec0:	4629      	mov	r1, r5
 8010ec2:	f107 000c 	add.w	r0, r7, #12
 8010ec6:	f7fe f86a 	bl	800ef9e <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 8010eca:	4628      	mov	r0, r5
 8010ecc:	f7ef fea2 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8010ed0:	f107 0018 	add.w	r0, r7, #24
 8010ed4:	f7ef fe9e 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return _M_data_ptr(this->_M_impl._M_start); }
 8010ed8:	f8d7 b00c 	ldr.w	fp, [r7, #12]
 8010edc:	e7ac      	b.n	8010e38 <_ZN13Communication17ProcessSubscriberIhEEt13MessageHeader14MessageElementt+0x5e>

08010ede <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt>:
uint16_t Communication::ProcessService(MessageHeader message, MessageElement element, uint16_t start_index) {
 8010ede:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ee2:	468c      	mov	ip, r1
 8010ee4:	b097      	sub	sp, #92	@ 0x5c
 8010ee6:	461c      	mov	r4, r3
 8010ee8:	4682      	mov	sl, r0
 8010eea:	af04      	add	r7, sp, #16
	service_information.interface = ServiceInterface{.interface=message.interface, .address=message.source_address};
 8010eec:	f89c 3000 	ldrb.w	r3, [ip]
 8010ef0:	f89c b011 	ldrb.w	fp, [ip, #17]
 8010ef4:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 8010ef8:	60fb      	str	r3, [r7, #12]
	if (element.command) {
 8010efa:	79d3      	ldrb	r3, [r2, #7]
	service_information.access = element.access;
 8010efc:	7a16      	ldrb	r6, [r2, #8]
	service_information.register_ = element.element_register;
 8010efe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010f02:	83b9      	strh	r1, [r7, #28]
		uint8_t error = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 8010f04:	f10c 0104 	add.w	r1, ip, #4
	service_information.register_ = element.element_register;
 8010f08:	61b8      	str	r0, [r7, #24]
	if (element.command) {
 8010f0a:	b343      	cbz	r3, 8010f5e <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x80>
		uint8_t error = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 8010f0c:	4628      	mov	r0, r5
 8010f0e:	f7ef ff31 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010f12:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010f16:	4621      	mov	r1, r4
 8010f18:	4628      	mov	r0, r5
 8010f1a:	f7fd ff1f 	bl	800ed5c <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 8010f1e:	4680      	mov	r8, r0
      }
 8010f20:	4628      	mov	r0, r5
 8010f22:	f7ef fe77 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8010f26:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8010f2a:	b18b      	cbz	r3, 8010f50 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x72>
			services->ReceiveError(service_information, error);//services->ReceiveError(element.element_register, message.interface, message.source_address, element.access, error);
 8010f2c:	2301      	movs	r3, #1
 8010f2e:	f887 b021 	strb.w	fp, [r7, #33]	@ 0x21
 8010f32:	f887 6022 	strb.w	r6, [r7, #34]	@ 0x22
 8010f36:	83fb      	strh	r3, [r7, #30]
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	f8da 0008 	ldr.w	r0, [sl, #8]
 8010f3e:	f887 3020 	strb.w	r3, [r7, #32]
 8010f42:	f107 0318 	add.w	r3, r7, #24
 8010f46:	f8cd 8000 	str.w	r8, [sp]
 8010f4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010f4c:	f008 f87f 	bl	801904e <_ZN8Services12ReceiveErrorE20ServiceConfigurationh>
		return start_index + 1;
 8010f50:	3401      	adds	r4, #1
 8010f52:	b2a4      	uxth	r4, r4
}
 8010f54:	4620      	mov	r0, r4
 8010f56:	374c      	adds	r7, #76	@ 0x4c
 8010f58:	46bd      	mov	sp, r7
 8010f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (element.access == WRITE) {
 8010f5e:	bb1e      	cbnz	r6, 8010fa8 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0xca>
		uint8_t value = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 8010f60:	4628      	mov	r0, r5
 8010f62:	f7ef ff07 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010f66:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010f6a:	4621      	mov	r1, r4
 8010f6c:	4628      	mov	r0, r5
 8010f6e:	f7fd fef5 	bl	800ed5c <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 8010f72:	4680      	mov	r8, r0
 8010f74:	4628      	mov	r0, r5
 8010f76:	f7ef fe4d 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8010f7a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d0e6      	beq.n	8010f50 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x72>
			services->ReceiveWrite(service_information, value);//services->ReceiveWrite(element.element_register, message.interface, message.source_address, value);
 8010f82:	2301      	movs	r3, #1
 8010f84:	f887 b021 	strb.w	fp, [r7, #33]	@ 0x21
 8010f88:	f887 6022 	strb.w	r6, [r7, #34]	@ 0x22
 8010f8c:	83fb      	strh	r3, [r7, #30]
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	f8da 0008 	ldr.w	r0, [sl, #8]
 8010f94:	f887 3020 	strb.w	r3, [r7, #32]
 8010f98:	f107 0318 	add.w	r3, r7, #24
 8010f9c:	f8cd 8000 	str.w	r8, [sp]
 8010fa0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010fa2:	f008 f817 	bl	8018fd4 <_ZN8Services12ReceiveWriteE20ServiceConfigurationh>
 8010fa6:	e7d3      	b.n	8010f50 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x72>
		T array_values[element.element_register.length];
 8010fa8:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8010fac:	466e      	mov	r6, sp
	}
 8010fae:	f8c7 d004 	str.w	sp, [r7, #4]
		T array_values[element.element_register.length];
 8010fb2:	f108 0007 	add.w	r0, r8, #7
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010fb8:	08c0      	lsrs	r0, r0, #3
 8010fba:	eba6 00c0 	sub.w	r0, r6, r0, lsl #3
 8010fbe:	f107 0617 	add.w	r6, r7, #23
 8010fc2:	4685      	mov	sp, r0
 8010fc4:	e9c7 3309 	strd	r3, r3, [r7, #36]	@ 0x24
		if (not element.element_register.isArray) {
 8010fc8:	78d3      	ldrb	r3, [r2, #3]
		T array_values[element.element_register.length];
 8010fca:	f10d 0910 	add.w	r9, sp, #16
		if (not element.element_register.isArray) {
 8010fce:	bbc3      	cbnz	r3, 8011042 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x164>
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8010fd0:	4628      	mov	r0, r5
			data = &single_value;
 8010fd2:	f107 0916 	add.w	r9, r7, #22
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8010fd6:	f7ef fecd 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
			length_to_extract = 1;
 8010fda:	f04f 0801 	mov.w	r8, #1
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8010fde:	4632      	mov	r2, r6
 8010fe0:	4621      	mov	r1, r4
 8010fe2:	4628      	mov	r0, r5
 8010fe4:	f7fd feba 	bl	800ed5c <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 8010fe8:	75b8      	strb	r0, [r7, #22]
      }
 8010fea:	4628      	mov	r0, r5
 8010fec:	f7ef fe12 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8010ff0:	7dfb      	ldrb	r3, [r7, #23]
 8010ff2:	b1eb      	cbz	r3, 8011030 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x152>
 8010ff4:	68fb      	ldr	r3, [r7, #12]
			services->ReceiveRead<T>(service_information, data);
 8010ff6:	f8da 6008 	ldr.w	r6, [sl, #8]
 8010ffa:	f04f 0a01 	mov.w	sl, #1
 8010ffe:	f887 3020 	strb.w	r3, [r7, #32]
 8011002:	f107 0318 	add.w	r3, r7, #24
 8011006:	f8a7 801e 	strh.w	r8, [r7, #30]
 801100a:	f887 b021 	strb.w	fp, [r7, #33]	@ 0x21
 801100e:	f887 a022 	strb.w	sl, [r7, #34]	@ 0x22
	bool success = true;
 8011012:	f887 a030 	strb.w	sl, [r7, #48]	@ 0x30
 8011016:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801101a:	7ebb      	ldrb	r3, [r7, #26]
 801101c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8011020:	60bb      	str	r3, [r7, #8]
	uint8_t start_index = 0;
 8011022:	2100      	movs	r1, #0
		CommunicationLED(leds, information.interface.interface);
 8011024:	f506 5380 	add.w	r3, r6, #4096	@ 0x1000
 8011028:	603b      	str	r3, [r7, #0]
	while (success) {
 801102a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 801102e:	bbd3      	cbnz	r3, 80110a6 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x1c8>
		return start_index + sizeof(T) * length_to_extract;
 8011030:	4444      	add	r4, r8
 8011032:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8011036:	f7ef fded 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801103a:	f8d7 d004 	ldr.w	sp, [r7, #4]
 801103e:	b2a4      	uxth	r4, r4
 8011040:	e788      	b.n	8010f54 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x76>
		} else if (element.element_register.isArray && element.element_register.length > 0) {
 8011042:	f1b8 0f00 	cmp.w	r8, #0
 8011046:	d00d      	beq.n	8011064 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x186>
			ExtractArray<T>(array_values, message.payload, start_index, length_to_extract, &success);
 8011048:	4628      	mov	r0, r5
 801104a:	f7ef fe93 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 801104e:	4648      	mov	r0, r9
 8011050:	4643      	mov	r3, r8
 8011052:	4622      	mov	r2, r4
 8011054:	4629      	mov	r1, r5
 8011056:	9600      	str	r6, [sp, #0]
 8011058:	f7ff fe98 	bl	8010d8c <_ZN13Communication12ExtractArrayIhEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 801105c:	4628      	mov	r0, r5
 801105e:	f7ef fdd9 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
			data = array_values;
 8011062:	e7c5      	b.n	8010ff0 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x112>
			length_to_extract = message.payload[start_index];
 8011064:	f8dc 3004 	ldr.w	r3, [ip, #4]
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8011068:	f107 0030 	add.w	r0, r7, #48	@ 0x30
			length_to_extract = message.payload[start_index];
 801106c:	f813 8004 	ldrb.w	r8, [r3, r4]
			start_index++;
 8011070:	3401      	adds	r4, #1
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8011072:	f7ef fe7f 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8011076:	f107 0130 	add.w	r1, r7, #48	@ 0x30
			start_index++;
 801107a:	b2a4      	uxth	r4, r4
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 801107c:	4643      	mov	r3, r8
 801107e:	4628      	mov	r0, r5
 8011080:	9600      	str	r6, [sp, #0]
 8011082:	4622      	mov	r2, r4
 8011084:	f7ff fe52 	bl	8010d2c <_ZN13Communication13ExtractVectorIhEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 8011088:	4629      	mov	r1, r5
 801108a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 801108e:	f7fd ff86 	bl	800ef9e <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 8011092:	4628      	mov	r0, r5
 8011094:	f7ef fdbe 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011098:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 801109c:	f7ef fdba 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return _M_data_ptr(this->_M_impl._M_start); }
 80110a0:	f8d7 9024 	ldr.w	r9, [r7, #36]	@ 0x24
 80110a4:	e7a4      	b.n	8010ff0 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x112>
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 80110a6:	68bb      	ldr	r3, [r7, #8]
 80110a8:	4630      	mov	r0, r6
 80110aa:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 80110ae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80110b2:	e9cd a301 	strd	sl, r3, [sp, #4]
 80110b6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80110ba:	f8ad 3000 	strh.w	r3, [sp]
 80110be:	e895 000c 	ldmia.w	r5, {r2, r3}
 80110c2:	f007 ff48 	bl	8018f56 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb>
		if (not success) return;
 80110c6:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 80110ca:	4683      	mov	fp, r0
		if (not success) return;
 80110cc:	2a00      	cmp	r2, #0
 80110ce:	d0af      	beq.n	8011030 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x152>
		if (information.length > SERVICES_BUFFER_SIZE) return;
 80110d0:	f5b8 7f80 	cmp.w	r8, #256	@ 0x100
 80110d4:	d8ac      	bhi.n	8011030 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x152>
		CommunicationLED(leds, information.interface.interface);
 80110d6:	683b      	ldr	r3, [r7, #0]
 80110d8:	68f9      	ldr	r1, [r7, #12]
 80110da:	f8d3 0440 	ldr.w	r0, [r3, #1088]	@ 0x440
 80110de:	f7fd fb66 	bl	800e7ae <_Z16CommunicationLEDP4LEDSh>
		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 80110e2:	f04f 31ff 	mov.w	r1, #4294967295
 80110e6:	6830      	ldr	r0, [r6, #0]
 80110e8:	f7fb fa24 	bl	800c534 <osSemaphoreAcquire>
		services[index].configuration.length = information.length;
 80110ec:	2218      	movs	r2, #24
		switch (information.register_.type) {
 80110ee:	68bb      	ldr	r3, [r7, #8]
		services[index].configuration.length = information.length;
 80110f0:	fb02 620b 	mla	r2, r2, fp, r6
 80110f4:	f8a2 8010 	strh.w	r8, [r2, #16]
		switch (information.register_.type) {
 80110f8:	2b08      	cmp	r3, #8
 80110fa:	d80d      	bhi.n	8011118 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x23a>
 80110fc:	e8df f003 	tbb	[pc, r3]
 8011100:	0c1d0c05 	.word	0x0c1d0c05
 8011104:	0c0c0c26 	.word	0x0c0c0c26
 8011108:	33          	.byte	0x33
 8011109:	00          	.byte	0x00
			TranferData<uint8_t>((uint8_t*) data, &buffer_uint8[index][0], information.length);
 801110a:	eb06 210b 	add.w	r1, r6, fp, lsl #8
 801110e:	2200      	movs	r2, #0
 8011110:	3138      	adds	r1, #56	@ 0x38
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 8011112:	b290      	uxth	r0, r2
 8011114:	4580      	cmp	r8, r0
 8011116:	d80b      	bhi.n	8011130 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x252>
		services[index].reception_flag = true;
 8011118:	2218      	movs	r2, #24
		osSemaphoreRelease(ServiceSemaphore);
 801111a:	6830      	ldr	r0, [r6, #0]
		services[index].reception_flag = true;
 801111c:	fb02 620b 	mla	r2, r2, fp, r6
 8011120:	f882 a009 	strb.w	sl, [r2, #9]
		osSemaphoreRelease(ServiceSemaphore);
 8011124:	f7fb fa3a 	bl	800c59c <osSemaphoreRelease>
		start_index = index + 1;
 8011128:	f10b 0101 	add.w	r1, fp, #1
 801112c:	b2c9      	uxtb	r1, r1
 801112e:	e77c      	b.n	801102a <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x14c>
		to[buffer_index] = from[buffer_index];
 8011130:	f819 0002 	ldrb.w	r0, [r9, r2]
 8011134:	5488      	strb	r0, [r1, r2]
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 8011136:	3201      	adds	r2, #1
 8011138:	e7eb      	b.n	8011112 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x234>
			TranferData<uint32_t>((uint32_t*) data, &buffer_uint32[index][0], information.length);
 801113a:	eb06 218b 	add.w	r1, r6, fp, lsl #10
 801113e:	4642      	mov	r2, r8
 8011140:	4648      	mov	r0, r9
 8011142:	f501 710e 	add.w	r1, r1, #568	@ 0x238
 8011146:	f7fd fdb9 	bl	800ecbc <_ZN8Services11TranferDataImEEvPT_S2_t.isra.0>
			break;
 801114a:	e7e5      	b.n	8011118 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x23a>
			TranferData<int8_t>((int8_t*) data, &buffer_int8[index][0], information.length);
 801114c:	eb06 210b 	add.w	r1, r6, fp, lsl #8
 8011150:	2200      	movs	r2, #0
 8011152:	f601 2138 	addw	r1, r1, #2616	@ 0xa38
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 8011156:	b290      	uxth	r0, r2
 8011158:	4580      	cmp	r8, r0
 801115a:	d9dd      	bls.n	8011118 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x23a>
		to[buffer_index] = from[buffer_index];
 801115c:	f919 0002 	ldrsb.w	r0, [r9, r2]
 8011160:	5488      	strb	r0, [r1, r2]
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 8011162:	3201      	adds	r2, #1
 8011164:	e7f7      	b.n	8011156 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x278>
			TranferData<float>((float*) data, &buffer_float[index][0], information.length);
 8011166:	eb06 218b 	add.w	r1, r6, fp, lsl #10
 801116a:	4642      	mov	r2, r8
 801116c:	4648      	mov	r0, r9
 801116e:	f601 4138 	addw	r1, r1, #3128	@ 0xc38
 8011172:	f7fd fd99 	bl	800eca8 <_ZN8Services11TranferDataIfEEvPT_S2_t.isra.0>
			break;
 8011176:	e7cf      	b.n	8011118 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x23a>

08011178 <_ZNSt6vectorIhSaIhEEC2ESt16initializer_listIhERKS0_.constprop.0.isra.0>:
      vector(initializer_list<value_type> __l,
 8011178:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801117a:	ab02      	add	r3, sp, #8
 801117c:	4604      	mov	r4, r0
 801117e:	460e      	mov	r6, r1
      size() const noexcept { return _M_len; }
 8011180:	4615      	mov	r5, r2
      end() const noexcept { return begin() + size(); }
 8011182:	188f      	adds	r7, r1, r2
 8011184:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011188:	2300      	movs	r3, #0
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 801118a:	429a      	cmp	r2, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 801118c:	6083      	str	r3, [r0, #8]
 801118e:	e9c0 3300 	strd	r3, r3, [r0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8011192:	da02      	bge.n	801119a <_ZNSt6vectorIhSaIhEEC2ESt16initializer_listIhERKS0_.constprop.0.isra.0+0x22>
	  __throw_length_error(
 8011194:	4808      	ldr	r0, [pc, #32]	@ (80111b8 <_ZNSt6vectorIhSaIhEEC2ESt16initializer_listIhERKS0_.constprop.0.isra.0+0x40>)
 8011196:	f009 fbe7 	bl	801a968 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 801119a:	4610      	mov	r0, r2
 801119c:	f7fd fdeb 	bl	800ed76 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80111a0:	4405      	add	r5, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80111a2:	4602      	mov	r2, r0
			      _Category>::__copy_m(__first, __last, __result);
 80111a4:	4639      	mov	r1, r7
 80111a6:	6020      	str	r0, [r4, #0]
 80111a8:	4630      	mov	r0, r6
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80111aa:	60a5      	str	r5, [r4, #8]
 80111ac:	f7ef fdd6 	bl	8000d5c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	  this->_M_impl._M_finish =
 80111b0:	6060      	str	r0, [r4, #4]
      }
 80111b2:	b003      	add	sp, #12
 80111b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80111b6:	bf00      	nop
 80111b8:	0801b194 	.word	0x0801b194

080111bc <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPhEEvT_S4_St20forward_iterator_tag.isra.0>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 80111bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 80111be:	1a57      	subs	r7, r2, r1
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 80111c0:	4604      	mov	r4, r0
 80111c2:	460d      	mov	r5, r1
 80111c4:	4616      	mov	r6, r2
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 80111c6:	d502      	bpl.n	80111ce <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPhEEvT_S4_St20forward_iterator_tag.isra.0+0x12>
	  __throw_length_error(
 80111c8:	4807      	ldr	r0, [pc, #28]	@ (80111e8 <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPhEEvT_S4_St20forward_iterator_tag.isra.0+0x2c>)
 80111ca:	f009 fbcd 	bl	801a968 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80111ce:	4638      	mov	r0, r7
 80111d0:	f7fd fdd1 	bl	800ed76 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80111d4:	4407      	add	r7, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80111d6:	4602      	mov	r2, r0
 80111d8:	6020      	str	r0, [r4, #0]
 80111da:	4631      	mov	r1, r6
 80111dc:	4628      	mov	r0, r5
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80111de:	60a7      	str	r7, [r4, #8]
 80111e0:	f7ef fdbc 	bl	8000d5c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	  this->_M_impl._M_finish =
 80111e4:	6060      	str	r0, [r4, #4]
	}
 80111e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80111e8:	0801b194 	.word	0x0801b194

080111ec <_ZZN13Communication12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t>:
			if (length < 3) return false;
 80111ec:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 80111ee:	4611      	mov	r1, r2
 80111f0:	b530      	push	{r4, r5, lr}
 80111f2:	4605      	mov	r5, r0
 80111f4:	b08b      	sub	sp, #44	@ 0x2c
 80111f6:	f04f 0400 	mov.w	r4, #0
			if (length < 3) return false;
 80111fa:	d928      	bls.n	801124e <_ZZN13Communication12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x62>
			msg.interface = input[0];
 80111fc:	7812      	ldrb	r2, [r2, #0]
	  _M_range_initialize(__first, __last,
 80111fe:	a805      	add	r0, sp, #20
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011200:	9403      	str	r4, [sp, #12]
 8011202:	f88d 2000 	strb.w	r2, [sp]
			msg.target_address = input[1];
 8011206:	784a      	ldrb	r2, [r1, #1]
 8011208:	9407      	str	r4, [sp, #28]
 801120a:	f88d 2010 	strb.w	r2, [sp, #16]
	  _M_range_initialize(__first, __last,
 801120e:	18ca      	adds	r2, r1, r3
 8011210:	3102      	adds	r1, #2
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011212:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8011216:	e9cd 4405 	strd	r4, r4, [sp, #20]
	  _M_range_initialize(__first, __last,
 801121a:	f7ff ffcf 	bl	80111bc <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPhEEvT_S4_St20forward_iterator_tag.isra.0>
			msg.payload = std::vector<uint8_t> (&input[2], &input[length]);
 801121e:	a905      	add	r1, sp, #20
 8011220:	a801      	add	r0, sp, #4
 8011222:	f7fd febc 	bl	800ef9e <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8011226:	a805      	add	r0, sp, #20
 8011228:	f7ef fcf4 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
			return self->Send(msg);
 801122c:	4669      	mov	r1, sp
 801122e:	a805      	add	r0, sp, #20
 8011230:	f7fe fb3f 	bl	800f8b2 <_ZN13MessageHeaderC1ERKS_>
 8011234:	a905      	add	r1, sp, #20
 8011236:	4628      	mov	r0, r5
 8011238:	f7fe fc2a 	bl	800fa90 <_ZN13Communication4SendE13MessageHeader>
 801123c:	1b04      	subs	r4, r0, r4
 801123e:	a806      	add	r0, sp, #24
 8011240:	bf18      	it	ne
 8011242:	2401      	movne	r4, #1
 8011244:	f7ef fce6 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011248:	a801      	add	r0, sp, #4
 801124a:	f7ef fce3 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		}
 801124e:	4620      	mov	r0, r4
 8011250:	b00b      	add	sp, #44	@ 0x2c
 8011252:	bd30      	pop	{r4, r5, pc}

08011254 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_>:
	insert(const_iterator __position, _InputIterator __first,
 8011254:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (__first != __last)
 8011258:	429a      	cmp	r2, r3
      : _M_current(__i) { }
 801125a:	f8d0 a000 	ldr.w	sl, [r0]
 801125e:	4604      	mov	r4, r0
 8011260:	460d      	mov	r5, r1
 8011262:	4617      	mov	r7, r2
 8011264:	4699      	mov	r9, r3
    { return __lhs.base() - __rhs.base(); }
 8011266:	eba1 0b0a 	sub.w	fp, r1, sl
 801126a:	d020      	beq.n	80112ae <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_+0x5a>
 801126c:	eba3 0802 	sub.w	r8, r3, r2
			  - this->_M_impl._M_finish) >= __n)
 8011270:	e9d0 6201 	ldrd	r6, r2, [r0, #4]
 8011274:	1b92      	subs	r2, r2, r6
	    if (size_type(this->_M_impl._M_end_of_storage
 8011276:	4590      	cmp	r8, r2
 8011278:	d836      	bhi.n	80112e8 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_+0x94>
 801127a:	eba6 0a01 	sub.w	sl, r6, r1
		if (__elems_after > __n)
 801127e:	45d0      	cmp	r8, sl
 8011280:	d21a      	bcs.n	80112b8 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_+0x64>
		    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 8011282:	eba6 0a08 	sub.w	sl, r6, r8
 8011286:	4632      	mov	r2, r6
 8011288:	4631      	mov	r1, r6
 801128a:	4650      	mov	r0, sl
 801128c:	f7f0 fcf2 	bl	8001c74 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		    this->_M_impl._M_finish += __n;
 8011290:	6863      	ldr	r3, [r4, #4]
					       is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::value, "type must be assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
 8011292:	ebba 0205 	subs.w	r2, sl, r5
 8011296:	4443      	add	r3, r8
 8011298:	6063      	str	r3, [r4, #4]
 801129a:	d003      	beq.n	80112a4 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_+0x50>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 801129c:	4629      	mov	r1, r5
 801129e:	1ab0      	subs	r0, r6, r2
 80112a0:	f009 fde4 	bl	801ae6c <memmove>
			      _Category>::__copy_m(__first, __last, __result);
 80112a4:	462a      	mov	r2, r5
 80112a6:	4649      	mov	r1, r9
 80112a8:	4638      	mov	r0, r7
 80112aa:	f7ef fd57 	bl	8000d5c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
      { return __normal_iterator(_M_current + __n); }
 80112ae:	6820      	ldr	r0, [r4, #0]
	}
 80112b0:	4458      	add	r0, fp
 80112b2:	b003      	add	sp, #12
 80112b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { _M_current += __n; return *this; }
 80112b8:	eb07 030a 	add.w	r3, r7, sl
 80112bc:	4632      	mov	r2, r6
 80112be:	4649      	mov	r1, r9
		    this->_M_impl._M_finish += __n - __elems_after;
 80112c0:	eba8 080a 	sub.w	r8, r8, sl
 80112c4:	4618      	mov	r0, r3
 80112c6:	9301      	str	r3, [sp, #4]
 80112c8:	f7ef fd48 	bl	8000d5c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 80112cc:	6862      	ldr	r2, [r4, #4]
 80112ce:	4631      	mov	r1, r6
 80112d0:	4628      	mov	r0, r5
 80112d2:	4442      	add	r2, r8
 80112d4:	6062      	str	r2, [r4, #4]
 80112d6:	f7f0 fccd 	bl	8001c74 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		    this->_M_impl._M_finish += __elems_after;
 80112da:	6862      	ldr	r2, [r4, #4]
 80112dc:	9b01      	ldr	r3, [sp, #4]
 80112de:	4452      	add	r2, sl
 80112e0:	4619      	mov	r1, r3
 80112e2:	6062      	str	r2, [r4, #4]
 80112e4:	462a      	mov	r2, r5
 80112e6:	e7df      	b.n	80112a8 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_+0x54>
		  _M_check_len(__n, "vector::_M_range_insert");
 80112e8:	4641      	mov	r1, r8
 80112ea:	4a13      	ldr	r2, [pc, #76]	@ (8011338 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_+0xe4>)
 80112ec:	f7ef fcb3 	bl	8000c56 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 80112f0:	9001      	str	r0, [sp, #4]
		pointer __new_start(this->_M_allocate(__len));
 80112f2:	f7fd fd40 	bl	800ed76 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
 80112f6:	4629      	mov	r1, r5
 80112f8:	4602      	mov	r2, r0
 80112fa:	4680      	mov	r8, r0
 80112fc:	4650      	mov	r0, sl
 80112fe:	f7f0 fcb9 	bl	8001c74 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8011302:	4649      	mov	r1, r9
 8011304:	4602      	mov	r2, r0
 8011306:	4638      	mov	r0, r7
 8011308:	f7ef fd28 	bl	8000d5c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 801130c:	4631      	mov	r1, r6
 801130e:	4602      	mov	r2, r0
 8011310:	4628      	mov	r0, r5
 8011312:	f7f0 fcaf 	bl	8001c74 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8011316:	4605      	mov	r5, r0
	if (__p)
 8011318:	f1ba 0f00 	cmp.w	sl, #0
 801131c:	d005      	beq.n	801132a <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_+0xd6>
			      this->_M_impl._M_end_of_storage - __old_start);
 801131e:	68a1      	ldr	r1, [r4, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8011320:	4650      	mov	r0, sl
 8011322:	eba1 010a 	sub.w	r1, r1, sl
 8011326:	f009 fa45 	bl	801a7b4 <_ZdlPvj>
		this->_M_impl._M_end_of_storage = __new_start + __len;
 801132a:	9b01      	ldr	r3, [sp, #4]
 801132c:	4443      	add	r3, r8
		this->_M_impl._M_finish = __new_finish;
 801132e:	e9c4 8500 	strd	r8, r5, [r4]
		this->_M_impl._M_end_of_storage = __new_start + __len;
 8011332:	60a3      	str	r3, [r4, #8]
 8011334:	e7bb      	b.n	80112ae <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_+0x5a>
 8011336:	bf00      	nop
 8011338:	0801b1c5 	.word	0x0801b1c5

0801133c <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>:
bool Communication::BuildPayload(MessageHeader* message, MessageElement element) {
 801133c:	b5f0      	push	{r4, r5, r6, r7, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
 801133e:	2300      	movs	r3, #0
 8011340:	b085      	sub	sp, #20
 8011342:	4614      	mov	r4, r2
 8011344:	4606      	mov	r6, r0
 8011346:	9303      	str	r3, [sp, #12]
 8011348:	460d      	mov	r5, r1
 801134a:	e9cd 3301 	strd	r3, r3, [sp, #4]
	if (element.ack) header|= ACK_MASK;
 801134e:	7993      	ldrb	r3, [r2, #6]
	if (element.command) header|= COMMAND_MASK;
 8011350:	79d2      	ldrb	r2, [r2, #7]
	if (element.ack) header|= ACK_MASK;
 8011352:	01db      	lsls	r3, r3, #7
 8011354:	b2db      	uxtb	r3, r3
	if (element.command) header|= COMMAND_MASK;
 8011356:	b10a      	cbz	r2, 801135c <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0x20>
 8011358:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
	if (element.access) header|= ACCESS_MASK;
 801135c:	7a22      	ldrb	r2, [r4, #8]
 801135e:	b10a      	cbz	r2, 8011364 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0x28>
 8011360:	f043 0320 	orr.w	r3, r3, #32
	coded_element.push_back(header | ((element.element_register.address >> 8) & ~(ACK_MASK | COMMAND_MASK | ACCESS_MASK)));
 8011364:	8822      	ldrh	r2, [r4, #0]
      { emplace_back(std::move(__x)); }
 8011366:	f10d 0103 	add.w	r1, sp, #3
 801136a:	a801      	add	r0, sp, #4
 801136c:	f3c2 2204 	ubfx	r2, r2, #8, #5
 8011370:	4313      	orrs	r3, r2
 8011372:	f88d 3003 	strb.w	r3, [sp, #3]
 8011376:	f7fe f95d 	bl	800f634 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
	coded_element.push_back(element.element_register.address & 0xFF);
 801137a:	8823      	ldrh	r3, [r4, #0]
 801137c:	f10d 0103 	add.w	r1, sp, #3
 8011380:	a801      	add	r0, sp, #4
 8011382:	f88d 3003 	strb.w	r3, [sp, #3]
 8011386:	f7fe f955 	bl	800f634 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
	if (element.element_register.isArray && element.element_register.length == 0)
 801138a:	78e3      	ldrb	r3, [r4, #3]
 801138c:	b15b      	cbz	r3, 80113a6 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0x6a>
 801138e:	88a3      	ldrh	r3, [r4, #4]
 8011390:	b94b      	cbnz	r3, 80113a6 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0x6a>
 8011392:	f10d 0103 	add.w	r1, sp, #3
 8011396:	a801      	add	r0, sp, #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011398:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 801139c:	1a9b      	subs	r3, r3, r2
		coded_element.push_back(element.data.size());
 801139e:	f88d 3003 	strb.w	r3, [sp, #3]
      { emplace_back(std::move(__x)); }
 80113a2:	f7fe f947 	bl	800f634 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
	coded_element.insert(coded_element.end(), element.data.begin(), element.data.end()); // Big-Endian representation, MSB first
 80113a6:	9902      	ldr	r1, [sp, #8]
 80113a8:	a801      	add	r0, sp, #4
 80113aa:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 80113ae:	f7ff ff51 	bl	8011254 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_>
	uint16_t max_length = GetProtocolPayloadMaxLength(message->interface, &success);
 80113b2:	4630      	mov	r0, r6
 80113b4:	f10d 0203 	add.w	r2, sp, #3
 80113b8:	7829      	ldrb	r1, [r5, #0]
 80113ba:	f7fd fdc3 	bl	800ef44 <_ZN13Communication27GetProtocolPayloadMaxLengthEhPb>
	if (not success) return false;
 80113be:	f89d 6003 	ldrb.w	r6, [sp, #3]
 80113c2:	b15e      	cbz	r6, 80113dc <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0xa0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80113c4:	68a9      	ldr	r1, [r5, #8]
 80113c6:	686c      	ldr	r4, [r5, #4]
 80113c8:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80113cc:	1b0c      	subs	r4, r1, r4
 80113ce:	1a9f      	subs	r7, r3, r2
	if (message->payload.size() + coded_element.size() > max_length)
 80113d0:	443c      	add	r4, r7
 80113d2:	4284      	cmp	r4, r0
 80113d4:	d808      	bhi.n	80113e8 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0xac>
	message->payload.insert(message->payload.end(), coded_element.begin(), coded_element.end());
 80113d6:	1d28      	adds	r0, r5, #4
 80113d8:	f7ff ff3c 	bl	8011254 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_>
      }
 80113dc:	a801      	add	r0, sp, #4
 80113de:	f7ef fc19 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 80113e2:	4630      	mov	r0, r6
 80113e4:	b005      	add	sp, #20
 80113e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (not success) return false;
 80113e8:	2600      	movs	r6, #0
 80113ea:	e7f7      	b.n	80113dc <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0xa0>

080113ec <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement>:
bool Communication::FindRegister(MessageHeader message, MessageHeader* response, MessageElement* element) {
 80113ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80113f0:	461c      	mov	r4, r3
 80113f2:	b097      	sub	sp, #92	@ 0x5c
	uint16_t register_id = element->element_register.address;
 80113f4:	f8b3 9000 	ldrh.w	r9, [r3]
bool Communication::FindRegister(MessageHeader message, MessageHeader* response, MessageElement* element) {
 80113f8:	4605      	mov	r5, r0
	if (not element->ack && element->command) {
 80113fa:	799b      	ldrb	r3, [r3, #6]
bool Communication::FindRegister(MessageHeader message, MessageHeader* response, MessageElement* element) {
 80113fc:	4617      	mov	r7, r2
 80113fe:	f10d 0820 	add.w	r8, sp, #32
	if (not element->ack && element->command) {
 8011402:	2b00      	cmp	r3, #0
 8011404:	d164      	bne.n	80114d0 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0xe4>
 8011406:	79e3      	ldrb	r3, [r4, #7]
 8011408:	2b00      	cmp	r3, #0
 801140a:	d07b      	beq.n	8011504 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0x118>
		if (registers->IsRegistered(register_id))
 801140c:	4649      	mov	r1, r9
 801140e:	6868      	ldr	r0, [r5, #4]
 8011410:	f006 ff30 	bl	8018274 <_ZN9Registers12IsRegisteredEt>
 8011414:	4606      	mov	r6, r0
 8011416:	b168      	cbz	r0, 8011434 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0x48>
			element->element_register = registers->FindRegister(register_id, &success);
 8011418:	4643      	mov	r3, r8
 801141a:	464a      	mov	r2, r9
 801141c:	6869      	ldr	r1, [r5, #4]
 801141e:	a804      	add	r0, sp, #16
 8011420:	f006 fea6 	bl	8018170 <_ZN9Registers12FindRegisterEtPb>
		element->element_register = subscribers->FindRemoteRegister(Register{.address=register_id}, SubscriberInterface{.interface=message.interface, .address=message.source_address}, &success);
 8011424:	9804      	ldr	r0, [sp, #16]
	return success;
 8011426:	f89d 6020 	ldrb.w	r6, [sp, #32]
		element->element_register = subscribers->FindRemoteRegister(Register{.address=register_id}, SubscriberInterface{.interface=message.interface, .address=message.source_address}, &success);
 801142a:	6020      	str	r0, [r4, #0]
 801142c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8011430:	80a3      	strh	r3, [r4, #4]
	return success;
 8011432:	e049      	b.n	80114c8 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0xdc>
			response_content.ack = true;
 8011434:	f240 1301 	movw	r3, #257	@ 0x101
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011438:	900f      	str	r0, [sp, #60]	@ 0x3c
			response_content.element_register.address = register_id;
 801143a:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
			response_content.ack = true;
 801143e:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
			response_content.access = element->access;
 8011442:	7a23      	ldrb	r3, [r4, #8]
 8011444:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
			response_content.data = std::vector<uint8_t>{UNKNOWN_REGISTER};
 8011448:	230f      	movs	r3, #15
 801144a:	f88d 301c 	strb.w	r3, [sp, #28]
 801144e:	ab07      	add	r3, sp, #28
 8011450:	9308      	str	r3, [sp, #32]
 8011452:	2301      	movs	r3, #1
 8011454:	e9cd 000d 	strd	r0, r0, [sp, #52]	@ 0x34
 8011458:	9309      	str	r3, [sp, #36]	@ 0x24
 801145a:	a810      	add	r0, sp, #64	@ 0x40
 801145c:	e898 0006 	ldmia.w	r8, {r1, r2}
 8011460:	f7ff fe8a 	bl	8011178 <_ZNSt6vectorIhSaIhEEC2ESt16initializer_listIhERKS0_.constprop.0.isra.0>
 8011464:	a910      	add	r1, sp, #64	@ 0x40
 8011466:	a80d      	add	r0, sp, #52	@ 0x34
 8011468:	f7fd fd99 	bl	800ef9e <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 801146c:	a810      	add	r0, sp, #64	@ 0x40
 801146e:	f7ef fbd1 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
			if (not BuildPayload(response, response_content)) {
 8011472:	a90a      	add	r1, sp, #40	@ 0x28
 8011474:	a810      	add	r0, sp, #64	@ 0x40
 8011476:	f7fe fa09 	bl	800f88c <_ZN14MessageElementC1ERKS_>
 801147a:	aa10      	add	r2, sp, #64	@ 0x40
 801147c:	4639      	mov	r1, r7
 801147e:	4628      	mov	r0, r5
 8011480:	f7ff ff5c 	bl	801133c <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8011484:	4604      	mov	r4, r0
 8011486:	a813      	add	r0, sp, #76	@ 0x4c
 8011488:	f7ef fbc4 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801148c:	b9cc      	cbnz	r4, 80114c2 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0xd6>
				Send(*response);
 801148e:	4639      	mov	r1, r7
 8011490:	a810      	add	r0, sp, #64	@ 0x40
 8011492:	f7fe fa0e 	bl	800f8b2 <_ZN13MessageHeaderC1ERKS_>
 8011496:	a910      	add	r1, sp, #64	@ 0x40
 8011498:	4628      	mov	r0, r5
 801149a:	f7fe faf9 	bl	800fa90 <_ZN13Communication4SendE13MessageHeader>
 801149e:	a811      	add	r0, sp, #68	@ 0x44
 80114a0:	f7ef fbb8 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
				response->payload.clear();
 80114a4:	1d38      	adds	r0, r7, #4
 80114a6:	f7fd fd91 	bl	800efcc <_ZNSt6vectorIhSaIhEE5clearEv>
				BuildPayload(response, response_content);
 80114aa:	a90a      	add	r1, sp, #40	@ 0x28
 80114ac:	a810      	add	r0, sp, #64	@ 0x40
 80114ae:	f7fe f9ed 	bl	800f88c <_ZN14MessageElementC1ERKS_>
 80114b2:	aa10      	add	r2, sp, #64	@ 0x40
 80114b4:	4639      	mov	r1, r7
 80114b6:	4628      	mov	r0, r5
 80114b8:	f7ff ff40 	bl	801133c <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 80114bc:	a813      	add	r0, sp, #76	@ 0x4c
 80114be:	f7ef fba9 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80114c2:	a80d      	add	r0, sp, #52	@ 0x34
 80114c4:	f7ef fba6 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 80114c8:	4630      	mov	r0, r6
 80114ca:	b017      	add	sp, #92	@ 0x5c
 80114cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		element->element_register = services->FindRemoteRegister(Register{.address=register_id}, ServiceInterface{.interface=message.interface, .address=message.source_address}, element->access, &success);
 80114d0:	2300      	movs	r3, #0
 80114d2:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 80114d6:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 80114da:	780b      	ldrb	r3, [r1, #0]
 80114dc:	f88d 3018 	strb.w	r3, [sp, #24]
 80114e0:	7c4b      	ldrb	r3, [r1, #17]
 80114e2:	f8cd 8008 	str.w	r8, [sp, #8]
 80114e6:	f88d 3019 	strb.w	r3, [sp, #25]
 80114ea:	7a23      	ldrb	r3, [r4, #8]
 80114ec:	9301      	str	r3, [sp, #4]
 80114ee:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80114f2:	f8ad 3000 	strh.w	r3, [sp]
 80114f6:	6881      	ldr	r1, [r0, #8]
 80114f8:	a804      	add	r0, sp, #16
 80114fa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80114fe:	f007 fde8 	bl	80190d2 <_ZN8Services18FindRemoteRegisterE8Register16ServiceInterfacebPb>
 8011502:	e78f      	b.n	8011424 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0x38>
		element->element_register = subscribers->FindRemoteRegister(Register{.address=register_id}, SubscriberInterface{.interface=message.interface, .address=message.source_address}, &success);
 8011504:	f8cd 3042 	str.w	r3, [sp, #66]	@ 0x42
 8011508:	a804      	add	r0, sp, #16
 801150a:	780b      	ldrb	r3, [r1, #0]
 801150c:	f8ad 9040 	strh.w	r9, [sp, #64]	@ 0x40
 8011510:	f88d 301c 	strb.w	r3, [sp, #28]
 8011514:	7c4b      	ldrb	r3, [r1, #17]
 8011516:	f8cd 8004 	str.w	r8, [sp, #4]
 801151a:	f88d 301d 	strb.w	r3, [sp, #29]
 801151e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8011522:	f8ad 3000 	strh.w	r3, [sp]
 8011526:	68e9      	ldr	r1, [r5, #12]
 8011528:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801152c:	f007 ffa0 	bl	8019470 <_ZN17MasterSubscribers18FindRemoteRegisterE8Register19SubscriberInterfacePb>
 8011530:	e778      	b.n	8011424 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0x38>

08011532 <_ZZN13Communication12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t>:
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8011532:	b530      	push	{r4, r5, lr}
 8011534:	4604      	mov	r4, r0
 8011536:	b093      	sub	sp, #76	@ 0x4c
			self->SetModuleAddress(*input);
 8011538:	7811      	ldrb	r1, [r2, #0]
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 801153a:	4615      	mov	r5, r2
			self->SetModuleAddress(*input);
 801153c:	f7fd fd21 	bl	800ef82 <_ZN13Communication16SetModuleAddressEh>
			IDFoundLEDS(self->leds);
 8011540:	6920      	ldr	r0, [r4, #16]
 8011542:	f7fd f930 	bl	800e7a6 <_Z11IDFoundLEDSP4LEDS>
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011546:	2300      	movs	r3, #0
			message.interface = UART_BACK;
 8011548:	2203      	movs	r2, #3
      { emplace_back(std::move(__x)); }
 801154a:	a90c      	add	r1, sp, #48	@ 0x30
	: _M_start(), _M_finish(), _M_end_of_storage()
 801154c:	9304      	str	r3, [sp, #16]
      { emplace_back(std::move(__x)); }
 801154e:	a809      	add	r0, sp, #36	@ 0x24
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011550:	930b      	str	r3, [sp, #44]	@ 0x2c
			element.access = WRITE;
 8011552:	f88d 3020 	strb.w	r3, [sp, #32]
			message.interface = UART_BACK;
 8011556:	f88d 2004 	strb.w	r2, [sp, #4]
			element.ack = false;
 801155a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801155e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011562:	e9cd 3309 	strd	r3, r3, [sp, #36]	@ 0x24
			element.data.push_back(*input + 1);
 8011566:	782b      	ldrb	r3, [r5, #0]
			element.ack = false;
 8011568:	f8ad 201e 	strh.w	r2, [sp, #30]
			element.data.push_back(*input + 1);
 801156c:	3301      	adds	r3, #1
 801156e:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
      { emplace_back(std::move(__x)); }
 8011572:	f7fe f85f 	bl	800f634 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
			element.element_register = self->registers->FindRegister(REG_COM_ID_PROPAGATION, &success);
 8011576:	f10d 0303 	add.w	r3, sp, #3
 801157a:	2201      	movs	r2, #1
 801157c:	6861      	ldr	r1, [r4, #4]
 801157e:	a806      	add	r0, sp, #24
 8011580:	f006 fdf6 	bl	8018170 <_ZN9Registers12FindRegisterEtPb>
			self->BuildPayload(&message, element);
 8011584:	a906      	add	r1, sp, #24
 8011586:	a80c      	add	r0, sp, #48	@ 0x30
 8011588:	f7fe f980 	bl	800f88c <_ZN14MessageElementC1ERKS_>
 801158c:	aa0c      	add	r2, sp, #48	@ 0x30
 801158e:	a901      	add	r1, sp, #4
 8011590:	4620      	mov	r0, r4
 8011592:	f7ff fed3 	bl	801133c <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
      }
 8011596:	a80f      	add	r0, sp, #60	@ 0x3c
 8011598:	f7ef fb3c 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
			self->Send(message);
 801159c:	a901      	add	r1, sp, #4
 801159e:	a80c      	add	r0, sp, #48	@ 0x30
 80115a0:	f7fe f987 	bl	800f8b2 <_ZN13MessageHeaderC1ERKS_>
 80115a4:	a90c      	add	r1, sp, #48	@ 0x30
 80115a6:	4620      	mov	r0, r4
 80115a8:	f7fe fa72 	bl	800fa90 <_ZN13Communication4SendE13MessageHeader>
 80115ac:	a80d      	add	r0, sp, #52	@ 0x34
 80115ae:	f7ef fb31 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80115b2:	a809      	add	r0, sp, #36	@ 0x24
 80115b4:	f7ef fb2e 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80115b8:	a802      	add	r0, sp, #8
 80115ba:	f7ef fb2b 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		}
 80115be:	2001      	movs	r0, #1
 80115c0:	b013      	add	sp, #76	@ 0x4c
 80115c2:	bd30      	pop	{r4, r5, pc}

080115c4 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 80115c4:	b510      	push	{r4, lr}
	  if (__n > 0)
 80115c6:	460a      	mov	r2, r1
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 80115c8:	4604      	mov	r4, r0
	  if (__n > 0)
 80115ca:	b141      	cbz	r1, 80115de <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_+0x1a>
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 80115cc:	2100      	movs	r1, #0
	       std::random_access_iterator_tag)
    {
#if __cplusplus >= 201103L
      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
#endif
      if (__n <= 0)
 80115ce:	2a01      	cmp	r2, #1
 80115d0:	f800 1b01 	strb.w	r1, [r0], #1
 80115d4:	d005      	beq.n	80115e2 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_+0x1e>
	return __first;

      __glibcxx_requires_can_increment(__first, __n);

      std::__fill_a(__first, __first + __n, __value);
 80115d6:	4414      	add	r4, r2
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 80115d8:	3a01      	subs	r2, #1
 80115da:	f009 fc61 	bl	801aea0 <memset>
	}
 80115de:	4620      	mov	r0, r4
 80115e0:	bd10      	pop	{r4, pc}
	      ++__first;
 80115e2:	4604      	mov	r4, r0
 80115e4:	e7fb      	b.n	80115de <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_+0x1a>
	...

080115e8 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj>:
    vector<_Tp, _Alloc>::
 80115e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80115ec:	4604      	mov	r4, r0
      if (__n != 0)
 80115ee:	460d      	mov	r5, r1
 80115f0:	b159      	cbz	r1, 801160a <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x22>
					 - this->_M_impl._M_finish);
 80115f2:	6882      	ldr	r2, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80115f4:	e9d0 7300 	ldrd	r7, r3, [r0]
 80115f8:	1ad2      	subs	r2, r2, r3
 80115fa:	eba3 0807 	sub.w	r8, r3, r7
	  if (__navail >= __n)
 80115fe:	428a      	cmp	r2, r1
 8011600:	d305      	bcc.n	801160e <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x26>
	__uninit_default_n(__first, __n);
 8011602:	4618      	mov	r0, r3
 8011604:	f7ff ffde 	bl	80115c4 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_>
	      this->_M_impl._M_finish =
 8011608:	6060      	str	r0, [r4, #4]
    }
 801160a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		_M_check_len(__n, "vector::_M_default_append");
 801160e:	4a11      	ldr	r2, [pc, #68]	@ (8011654 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x6c>)
 8011610:	f7ef fb21 	bl	8000c56 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8011614:	4681      	mov	r9, r0
	      pointer __new_start(this->_M_allocate(__len));
 8011616:	f7fd fbae 	bl	800ed76 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
 801161a:	4629      	mov	r1, r5
 801161c:	4606      	mov	r6, r0
 801161e:	4440      	add	r0, r8
 8011620:	f7ff ffd0 	bl	80115c4 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_>
      if (__count > 0)
 8011624:	f1b8 0f00 	cmp.w	r8, #0
 8011628:	d00a      	beq.n	8011640 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x58>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801162a:	4642      	mov	r2, r8
 801162c:	4639      	mov	r1, r7
 801162e:	4630      	mov	r0, r6
 8011630:	f009 fc1c 	bl	801ae6c <memmove>
			    this->_M_impl._M_end_of_storage - __old_start);
 8011634:	68a1      	ldr	r1, [r4, #8]
 8011636:	4638      	mov	r0, r7
 8011638:	1bc9      	subs	r1, r1, r7
 801163a:	f009 f8bb 	bl	801a7b4 <_ZdlPvj>
      { __a.deallocate(__p, __n); }
 801163e:	e001      	b.n	8011644 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x5c>
	if (__p)
 8011640:	2f00      	cmp	r7, #0
 8011642:	d1f7      	bne.n	8011634 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x4c>
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8011644:	4445      	add	r5, r8
	      this->_M_impl._M_start = __new_start;
 8011646:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8011648:	4435      	add	r5, r6
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 801164a:	444e      	add	r6, r9
	      this->_M_impl._M_finish = __new_start + __size + __n;
 801164c:	6065      	str	r5, [r4, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 801164e:	60a6      	str	r6, [r4, #8]
    }
 8011650:	e7db      	b.n	801160a <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x22>
 8011652:	bf00      	nop
 8011654:	0801b406 	.word	0x0801b406

08011658 <_ZN9Registers13WriteRegisterIhEEbtPT_tb>:
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 8011658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801165c:	b085      	sub	sp, #20
 801165e:	4606      	mov	r6, r0
 8011660:	4688      	mov	r8, r1
 8011662:	461f      	mov	r7, r3
 8011664:	f89d 3038 	ldrb.w	r3, [sp, #56]	@ 0x38
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8011668:	f04f 31ff 	mov.w	r1, #4294967295
 801166c:	6800      	ldr	r0, [r0, #0]
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 801166e:	4615      	mov	r5, r2
 8011670:	9301      	str	r3, [sp, #4]
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8011672:	f7fa ff5f 	bl	800c534 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8011676:	f10d 020f 	add.w	r2, sp, #15
 801167a:	4641      	mov	r1, r8
 801167c:	4630      	mov	r0, r6
 801167e:	f006 fd66 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8011682:	f89d 300f 	ldrb.w	r3, [sp, #15]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8011686:	4604      	mov	r4, r0
	if (!success) {
 8011688:	b933      	cbnz	r3, 8011698 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x40>
		osSemaphoreRelease(RegistersSemaphore);
 801168a:	6830      	ldr	r0, [r6, #0]
 801168c:	f7fa ff86 	bl	800c59c <osSemaphoreRelease>
		return false;
 8011690:	2000      	movs	r0, #0
}
 8011692:	b005      	add	sp, #20
 8011694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8011698:	f10d 000f 	add.w	r0, sp, #15
 801169c:	f7fd fb76 	bl	800ed8c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 80116a0:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d0f0      	beq.n	801168a <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x32>
	if (target_register->register_info.type != registered_type) {
 80116a8:	7923      	ldrb	r3, [r4, #4]
 80116aa:	4283      	cmp	r3, r0
 80116ac:	d1ed      	bne.n	801168a <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x32>
	if (callbacks[target_register->register_info.type] == NULL) {
 80116ae:	3304      	adds	r3, #4
 80116b0:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 80116b4:	2800      	cmp	r0, #0
 80116b6:	d0e8      	beq.n	801168a <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x32>
	if (target_register->access.write) {
 80116b8:	7a23      	ldrb	r3, [r4, #8]
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d0e5      	beq.n	801168a <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x32>
		success = false;
 80116be:	2300      	movs	r3, #0
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 80116c0:	8961      	ldrh	r1, [r4, #10]
		success = false;
 80116c2:	f88d 300f 	strb.w	r3, [sp, #15]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 80116c6:	f7fd fc9b 	bl	800f000 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 80116ca:	9b01      	ldr	r3, [sp, #4]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 80116cc:	f8d0 9008 	ldr.w	r9, [r0, #8]
 80116d0:	e9d0 ba00 	ldrd	fp, sl, [r0]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 80116d4:	b133      	cbz	r3, 80116e4 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x8c>
 80116d6:	68e3      	ldr	r3, [r4, #12]
 80116d8:	b123      	cbz	r3, 80116e4 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x8c>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 80116da:	f04f 31ff 	mov.w	r1, #4294967295
 80116de:	6818      	ldr	r0, [r3, #0]
 80116e0:	f7fa ff28 	bl	800c534 <osSemaphoreAcquire>
		if (target_register->mode.pointer) {
 80116e4:	7823      	ldrb	r3, [r4, #0]
 80116e6:	b1c3      	cbz	r3, 801171a <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0xc2>
			success = true;
 80116e8:	2301      	movs	r3, #1
 80116ea:	f88d 300f 	strb.w	r3, [sp, #15]
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 80116ee:	7963      	ldrb	r3, [r4, #5]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d042      	beq.n	801177a <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x122>
 80116f4:	88e1      	ldrh	r1, [r4, #6]
 80116f6:	2900      	cmp	r1, #0
 80116f8:	d139      	bne.n	801176e <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x116>
				register_vector->clear();
 80116fa:	4658      	mov	r0, fp
 80116fc:	f7fd fc66 	bl	800efcc <_ZNSt6vectorIhSaIhEE5clearEv>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011700:	e9db 3000 	ldrd	r3, r0, [fp]
 8011704:	1ac1      	subs	r1, r0, r3
	if (__new_size > size())
 8011706:	428f      	cmp	r7, r1
 8011708:	d924      	bls.n	8011754 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0xfc>
	  _M_default_append(__new_size - size());
 801170a:	1a79      	subs	r1, r7, r1
 801170c:	4658      	mov	r0, fp
 801170e:	f7ff ff6b 	bl	80115e8 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj>
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 8011712:	2300      	movs	r3, #0
				for (uint16_t index = 0; index < length; index++) {
 8011714:	b299      	uxth	r1, r3
 8011716:	428f      	cmp	r7, r1
 8011718:	d823      	bhi.n	8011762 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x10a>
		if (target_register->mode.callbacks) {
 801171a:	7863      	ldrb	r3, [r4, #1]
 801171c:	b16b      	cbz	r3, 801173a <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0xe2>
			if (callbacks.write != NULL) {
 801171e:	f1b9 0f00 	cmp.w	r9, #0
 8011722:	d00a      	beq.n	801173a <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0xe2>
				if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 8011724:	7963      	ldrb	r3, [r4, #5]
 8011726:	b363      	cbz	r3, 8011782 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x12a>
 8011728:	88e3      	ldrh	r3, [r4, #6]
 801172a:	b903      	cbnz	r3, 801172e <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0xd6>
					success = callbacks.write(callbacks.context, ID, value, length);
 801172c:	463b      	mov	r3, r7
					success = callbacks.write(callbacks.context, ID, value, 1);
 801172e:	462a      	mov	r2, r5
 8011730:	4641      	mov	r1, r8
 8011732:	4650      	mov	r0, sl
 8011734:	47c8      	blx	r9
 8011736:	f88d 000f 	strb.w	r0, [sp, #15]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 801173a:	9b01      	ldr	r3, [sp, #4]
 801173c:	b123      	cbz	r3, 8011748 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0xf0>
 801173e:	68e3      	ldr	r3, [r4, #12]
 8011740:	b113      	cbz	r3, 8011748 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0xf0>
			osSemaphoreRelease(*(target_register->register_semaphore));
 8011742:	6818      	ldr	r0, [r3, #0]
 8011744:	f7fa ff2a 	bl	800c59c <osSemaphoreRelease>
		osSemaphoreRelease(RegistersSemaphore);
 8011748:	6830      	ldr	r0, [r6, #0]
 801174a:	f7fa ff27 	bl	800c59c <osSemaphoreRelease>
		return success;
 801174e:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8011752:	e79e      	b.n	8011692 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x3a>
	else if (__new_size < size())
 8011754:	d2dd      	bcs.n	8011712 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0xba>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 8011756:	443b      	add	r3, r7
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8011758:	4298      	cmp	r0, r3
 801175a:	d0da      	beq.n	8011712 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0xba>
	    this->_M_impl._M_finish = __pos;
 801175c:	f8cb 3004 	str.w	r3, [fp, #4]
 8011760:	e7d7      	b.n	8011712 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0xba>
					(*register_vector)[index] = value[index];
 8011762:	5ce8      	ldrb	r0, [r5, r3]
 8011764:	f8db 1000 	ldr.w	r1, [fp]
 8011768:	54c8      	strb	r0, [r1, r3]
				for (uint16_t index = 0; index < length; index++) {
 801176a:	3301      	adds	r3, #1
 801176c:	e7d2      	b.n	8011714 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0xbc>
			      _Category>::__copy_m(__first, __last, __result);
 801176e:	465a      	mov	r2, fp
 8011770:	4429      	add	r1, r5
 8011772:	4628      	mov	r0, r5
 8011774:	f7ef faf2 	bl	8000d5c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8011778:	e7cf      	b.n	801171a <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0xc2>
				*(callbacks.pointer) = *value;
 801177a:	782b      	ldrb	r3, [r5, #0]
 801177c:	f88b 3000 	strb.w	r3, [fp]
 8011780:	e7cb      	b.n	801171a <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0xc2>
					success = callbacks.write(callbacks.context, ID, value, 1);
 8011782:	2301      	movs	r3, #1
 8011784:	e7d3      	b.n	801172e <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0xd6>

08011786 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t>:
uint16_t Communication::ProcessWrite(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 8011786:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801178a:	b091      	sub	sp, #68	@ 0x44
 801178c:	4605      	mov	r5, r0
 801178e:	4691      	mov	r9, r2
 8011790:	4608      	mov	r0, r1
 8011792:	af02      	add	r7, sp, #8
 8011794:	469a      	mov	sl, r3
		T value = ExtractSingle<T>(message.payload, start_index, &success);
 8011796:	3104      	adds	r1, #4
uint16_t Communication::ProcessWrite(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 8011798:	f8d7 b060 	ldr.w	fp, [r7, #96]	@ 0x60
 801179c:	f107 060b 	add.w	r6, r7, #11
 80117a0:	f8b7 4064 	ldrh.w	r4, [r7, #100]	@ 0x64
	if (not element.element_register.isArray) {
 80117a4:	f89b 8003 	ldrb.w	r8, [fp, #3]
 80117a8:	f1b8 0f00 	cmp.w	r8, #0
 80117ac:	d173      	bne.n	8011896 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x110>
		T value = ExtractSingle<T>(message.payload, start_index, &success);
 80117ae:	f107 0020 	add.w	r0, r7, #32
 80117b2:	f7ef fadf 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80117b6:	4632      	mov	r2, r6
 80117b8:	4621      	mov	r1, r4
 80117ba:	f107 0020 	add.w	r0, r7, #32
 80117be:	f7fd facd 	bl	800ed5c <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 80117c2:	7538      	strb	r0, [r7, #20]
      }
 80117c4:	f107 0020 	add.w	r0, r7, #32
 80117c8:	f7ef fa24 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 80117cc:	7afb      	ldrb	r3, [r7, #11]
 80117ce:	b153      	cbz	r3, 80117e6 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x60>
			success = registers->WriteRegister<T>(element.element_register.address, &value);
 80117d0:	2301      	movs	r3, #1
 80117d2:	f8bb 1000 	ldrh.w	r1, [fp]
 80117d6:	f107 0214 	add.w	r2, r7, #20
 80117da:	9300      	str	r3, [sp, #0]
 80117dc:	4643      	mov	r3, r8
 80117de:	6868      	ldr	r0, [r5, #4]
 80117e0:	f7ff ff3a 	bl	8011658 <_ZN9Registers13WriteRegisterIhEEbtPT_tb>
 80117e4:	72f8      	strb	r0, [r7, #11]
		length_to_extract = 1;
 80117e6:	f04f 0801 	mov.w	r8, #1
	if (success)
 80117ea:	7af9      	ldrb	r1, [r7, #11]
		response_content.data = std::vector<uint8_t>{OK};
 80117ec:	f10a 060c 	add.w	r6, sl, #12
 80117f0:	f107 0314 	add.w	r3, r7, #20
 80117f4:	f107 020c 	add.w	r2, r7, #12
	if (success)
 80117f8:	2900      	cmp	r1, #0
 80117fa:	f000 80cb 	beq.w	8011994 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x20e>
		response_content.data = std::vector<uint8_t>{OK};
 80117fe:	2100      	movs	r1, #0
 8011800:	60fb      	str	r3, [r7, #12]
 8011802:	2301      	movs	r3, #1
 8011804:	7539      	strb	r1, [r7, #20]
 8011806:	613b      	str	r3, [r7, #16]
 8011808:	ca06      	ldmia	r2, {r1, r2}
		response_content.data = std::vector<uint8_t>{ERROR};
 801180a:	f107 0020 	add.w	r0, r7, #32
 801180e:	f7ff fcb3 	bl	8011178 <_ZNSt6vectorIhSaIhEEC2ESt16initializer_listIhERKS0_.constprop.0.isra.0>
 8011812:	f107 0120 	add.w	r1, r7, #32
 8011816:	4630      	mov	r0, r6
 8011818:	f7fd fbc1 	bl	800ef9e <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 801181c:	f107 0020 	add.w	r0, r7, #32
 8011820:	f7ef f9f8 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not BuildPayload(response, response_content)) {
 8011824:	4651      	mov	r1, sl
 8011826:	f107 0020 	add.w	r0, r7, #32
 801182a:	f7fe f82f 	bl	800f88c <_ZN14MessageElementC1ERKS_>
 801182e:	f107 0220 	add.w	r2, r7, #32
 8011832:	4649      	mov	r1, r9
 8011834:	4628      	mov	r0, r5
 8011836:	f7ff fd81 	bl	801133c <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 801183a:	4606      	mov	r6, r0
 801183c:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8011840:	f7ef f9e8 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011844:	bb06      	cbnz	r6, 8011888 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x102>
		Send(*response);
 8011846:	4649      	mov	r1, r9
 8011848:	f107 0020 	add.w	r0, r7, #32
 801184c:	f7fe f831 	bl	800f8b2 <_ZN13MessageHeaderC1ERKS_>
 8011850:	f107 0120 	add.w	r1, r7, #32
 8011854:	4628      	mov	r0, r5
 8011856:	f7fe f91b 	bl	800fa90 <_ZN13Communication4SendE13MessageHeader>
 801185a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 801185e:	f7ef f9d9 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		response->payload.clear();
 8011862:	f109 0004 	add.w	r0, r9, #4
 8011866:	f7fd fbb1 	bl	800efcc <_ZNSt6vectorIhSaIhEE5clearEv>
		BuildPayload(response, response_content);
 801186a:	4651      	mov	r1, sl
 801186c:	f107 0020 	add.w	r0, r7, #32
 8011870:	f7fe f80c 	bl	800f88c <_ZN14MessageElementC1ERKS_>
 8011874:	f107 0220 	add.w	r2, r7, #32
 8011878:	4649      	mov	r1, r9
 801187a:	4628      	mov	r0, r5
 801187c:	f7ff fd5e 	bl	801133c <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8011880:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8011884:	f7ef f9c6 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return start_index + sizeof(T) * length_to_extract;
 8011888:	eb04 0008 	add.w	r0, r4, r8
}
 801188c:	373c      	adds	r7, #60	@ 0x3c
 801188e:	b280      	uxth	r0, r0
 8011890:	46bd      	mov	sp, r7
 8011892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (element.element_register.isArray && element.element_register.length > 0) {
 8011896:	f8bb 8004 	ldrh.w	r8, [fp, #4]
 801189a:	f1b8 0f00 	cmp.w	r8, #0
 801189e:	d029      	beq.n	80118f4 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x16e>
		T values[length_to_extract];
 80118a0:	f108 0307 	add.w	r3, r8, #7
 80118a4:	466a      	mov	r2, sp
	} else if (element.element_register.isArray && element.element_register.length == 0) {
 80118a6:	f8c7 d000 	str.w	sp, [r7]
		ExtractArray<T>(values, message.payload, start_index, length_to_extract, &success);
 80118aa:	f107 0020 	add.w	r0, r7, #32
		T values[length_to_extract];
 80118ae:	08db      	lsrs	r3, r3, #3
 80118b0:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 80118b4:	469d      	mov	sp, r3
 80118b6:	ab02      	add	r3, sp, #8
 80118b8:	607b      	str	r3, [r7, #4]
		ExtractArray<T>(values, message.payload, start_index, length_to_extract, &success);
 80118ba:	f7ef fa5b 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80118be:	9600      	str	r6, [sp, #0]
 80118c0:	4643      	mov	r3, r8
 80118c2:	4622      	mov	r2, r4
 80118c4:	f107 0120 	add.w	r1, r7, #32
 80118c8:	6878      	ldr	r0, [r7, #4]
 80118ca:	f7ff fa5f 	bl	8010d8c <_ZN13Communication12ExtractArrayIhEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 80118ce:	f107 0020 	add.w	r0, r7, #32
 80118d2:	f7ef f99f 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 80118d6:	7afb      	ldrb	r3, [r7, #11]
 80118d8:	b14b      	cbz	r3, 80118ee <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x168>
			success = registers->WriteRegister<T>(element.element_register.address, values);
 80118da:	2301      	movs	r3, #1
 80118dc:	f8bb 1000 	ldrh.w	r1, [fp]
 80118e0:	9300      	str	r3, [sp, #0]
 80118e2:	2300      	movs	r3, #0
 80118e4:	687a      	ldr	r2, [r7, #4]
 80118e6:	6868      	ldr	r0, [r5, #4]
 80118e8:	f7ff feb6 	bl	8011658 <_ZN9Registers13WriteRegisterIhEEbtPT_tb>
 80118ec:	72f8      	strb	r0, [r7, #11]
 80118ee:	f8d7 d000 	ldr.w	sp, [r7]
	} else if (element.element_register.isArray && element.element_register.length == 0) {
 80118f2:	e77a      	b.n	80117ea <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x64>
		length_to_extract = message.payload[start_index];
 80118f4:	6843      	ldr	r3, [r0, #4]
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 80118f6:	f107 0020 	add.w	r0, r7, #32
		length_to_extract = message.payload[start_index];
 80118fa:	f813 8004 	ldrb.w	r8, [r3, r4]
		start_index++;
 80118fe:	3401      	adds	r4, #1
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8011900:	f7ef fa38 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8011904:	f107 0120 	add.w	r1, r7, #32
		start_index++;
 8011908:	b2a4      	uxth	r4, r4
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 801190a:	4643      	mov	r3, r8
 801190c:	f107 0014 	add.w	r0, r7, #20
 8011910:	9600      	str	r6, [sp, #0]
 8011912:	4622      	mov	r2, r4
 8011914:	f7ff fa0a 	bl	8010d2c <_ZN13Communication13ExtractVectorIhEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 8011918:	f107 0020 	add.w	r0, r7, #32
 801191c:	f7ef f97a 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8011920:	7afb      	ldrb	r3, [r7, #11]
 8011922:	b1fb      	cbz	r3, 8011964 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x1de>
			success = registers->WriteVectorRegister<T>(element.element_register.address, values); // previously &values
 8011924:	686e      	ldr	r6, [r5, #4]
 8011926:	f107 0114 	add.w	r1, r7, #20
 801192a:	f8bb b000 	ldrh.w	fp, [fp]
 801192e:	f107 0020 	add.w	r0, r7, #32
 8011932:	f7ef fa1f 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8011936:	f04f 31ff 	mov.w	r1, #4294967295
 801193a:	6830      	ldr	r0, [r6, #0]
 801193c:	f7fa fdfa 	bl	800c534 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8011940:	f107 020c 	add.w	r2, r7, #12
 8011944:	4659      	mov	r1, fp
 8011946:	4630      	mov	r0, r6
 8011948:	f006 fc01 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801194c:	7b3a      	ldrb	r2, [r7, #12]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801194e:	4603      	mov	r3, r0
		osSemaphoreRelease(RegistersSemaphore);
 8011950:	6830      	ldr	r0, [r6, #0]
	if (!success) {
 8011952:	b962      	cbnz	r2, 801196e <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x1e8>
		osSemaphoreRelease(RegistersSemaphore);
 8011954:	f7fa fe22 	bl	800c59c <osSemaphoreRelease>
		return false;
 8011958:	2000      	movs	r0, #0
 801195a:	72f8      	strb	r0, [r7, #11]
 801195c:	f107 0020 	add.w	r0, r7, #32
 8011960:	f7ef f958 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011964:	f107 0014 	add.w	r0, r7, #20
 8011968:	f7ef f954 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801196c:	e73d      	b.n	80117ea <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x64>
	if (!(target_register->register_info.isArray && target_register->register_info.length == 0)) {
 801196e:	795a      	ldrb	r2, [r3, #5]
 8011970:	2a00      	cmp	r2, #0
 8011972:	d0ef      	beq.n	8011954 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x1ce>
 8011974:	88db      	ldrh	r3, [r3, #6]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d1ec      	bne.n	8011954 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x1ce>
	osSemaphoreRelease(RegistersSemaphore);
 801197a:	f7fa fe0f 	bl	800c59c <osSemaphoreRelease>
	return WriteRegister(ID, value.data(), value.size(), use_semaphore);
 801197e:	2101      	movs	r1, #1
 8011980:	4630      	mov	r0, r6
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011982:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011986:	9100      	str	r1, [sp, #0]
 8011988:	4659      	mov	r1, fp
 801198a:	1a9b      	subs	r3, r3, r2
 801198c:	b29b      	uxth	r3, r3
 801198e:	f7ff fe63 	bl	8011658 <_ZN9Registers13WriteRegisterIhEEbtPT_tb>
 8011992:	e7e2      	b.n	801195a <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x1d4>
		response_content.data = std::vector<uint8_t>{ERROR};
 8011994:	21ff      	movs	r1, #255	@ 0xff
 8011996:	617a      	str	r2, [r7, #20]
 8011998:	2201      	movs	r2, #1
 801199a:	7339      	strb	r1, [r7, #12]
 801199c:	61ba      	str	r2, [r7, #24]
 801199e:	e893 0006 	ldmia.w	r3, {r1, r2}
 80119a2:	e732      	b.n	801180a <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x84>

080119a4 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt>:
uint16_t Communication::ProcessCommand(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 80119a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119a8:	b0b3      	sub	sp, #204	@ 0xcc
 80119aa:	461c      	mov	r4, r3
 80119ac:	460f      	mov	r7, r1
 80119ae:	4680      	mov	r8, r0
 80119b0:	f8bd 30f0 	ldrh.w	r3, [sp, #240]	@ 0xf0
	: _M_start(), _M_finish(), _M_end_of_storage()
 80119b4:	f04f 0900 	mov.w	r9, #0
 80119b8:	4616      	mov	r6, r2
 80119ba:	ad2c      	add	r5, sp, #176	@ 0xb0
 80119bc:	9304      	str	r3, [sp, #16]
	response_content.ack = true;
 80119be:	2301      	movs	r3, #1
 80119c0:	f8cd 907c 	str.w	r9, [sp, #124]	@ 0x7c
 80119c4:	f8ad 306e 	strh.w	r3, [sp, #110]	@ 0x6e
	response_content.access = element.access;
 80119c8:	7a23      	ldrb	r3, [r4, #8]
	response_content.element_register = element.element_register;
 80119ca:	e894 0003 	ldmia.w	r4, {r0, r1}
	response_content.access = element.access;
 80119ce:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
	response_content.element_register = element.element_register;
 80119d2:	901a      	str	r0, [sp, #104]	@ 0x68
 80119d4:	f8ad 106c 	strh.w	r1, [sp, #108]	@ 0x6c
	CommunicationLED(leds, message.interface);
 80119d8:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80119dc:	7839      	ldrb	r1, [r7, #0]
 80119de:	e9cd 991d 	strd	r9, r9, [sp, #116]	@ 0x74
 80119e2:	f7fc fee4 	bl	800e7ae <_Z16CommunicationLEDP4LEDSh>
	if (element.access == WRITE) {
 80119e6:	7a23      	ldrb	r3, [r4, #8]
		return ProcessWrite<T>(message, response, response_content, element, start_index);
 80119e8:	4639      	mov	r1, r7
	if (element.access == WRITE) {
 80119ea:	bb23      	cbnz	r3, 8011a36 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x92>
		return ProcessWrite<T>(message, response, response_content, element, start_index);
 80119ec:	a820      	add	r0, sp, #128	@ 0x80
 80119ee:	f7fd ff60 	bl	800f8b2 <_ZN13MessageHeaderC1ERKS_>
 80119f2:	a91a      	add	r1, sp, #104	@ 0x68
 80119f4:	a826      	add	r0, sp, #152	@ 0x98
 80119f6:	f7fd ff49 	bl	800f88c <_ZN14MessageElementC1ERKS_>
 80119fa:	4621      	mov	r1, r4
 80119fc:	4628      	mov	r0, r5
 80119fe:	f7fd ff45 	bl	800f88c <_ZN14MessageElementC1ERKS_>
 8011a02:	9b04      	ldr	r3, [sp, #16]
 8011a04:	4632      	mov	r2, r6
 8011a06:	a920      	add	r1, sp, #128	@ 0x80
 8011a08:	4640      	mov	r0, r8
 8011a0a:	e9cd 5300 	strd	r5, r3, [sp]
 8011a0e:	ab26      	add	r3, sp, #152	@ 0x98
 8011a10:	f7ff feb9 	bl	8011786 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t>
 8011a14:	9004      	str	r0, [sp, #16]
      }
 8011a16:	a82f      	add	r0, sp, #188	@ 0xbc
 8011a18:	f7ef f8fc 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011a1c:	a829      	add	r0, sp, #164	@ 0xa4
 8011a1e:	f7ef f8f9 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011a22:	a821      	add	r0, sp, #132	@ 0x84
 8011a24:	f7ef f8f6 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011a28:	a81d      	add	r0, sp, #116	@ 0x74
 8011a2a:	f7ef f8f3 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 8011a2e:	9804      	ldr	r0, [sp, #16]
 8011a30:	b033      	add	sp, #204	@ 0xcc
 8011a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return ProcessRead<T>(message, response, response_content, element, start_index);
 8011a36:	a815      	add	r0, sp, #84	@ 0x54
 8011a38:	f7fd ff3b 	bl	800f8b2 <_ZN13MessageHeaderC1ERKS_>
 8011a3c:	a91a      	add	r1, sp, #104	@ 0x68
 8011a3e:	a820      	add	r0, sp, #128	@ 0x80
 8011a40:	f7fd ff24 	bl	800f88c <_ZN14MessageElementC1ERKS_>
 8011a44:	4621      	mov	r1, r4
 8011a46:	a826      	add	r0, sp, #152	@ 0x98
 8011a48:	f7fd ff20 	bl	800f88c <_ZN14MessageElementC1ERKS_>
uint16_t Communication::ProcessRead(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 8011a4c:	f8d8 7004 	ldr.w	r7, [r8, #4]
std::vector<uint8_t> Communication::ReadElement(MessageElement* element, bool* success) {
	std::vector<uint8_t> data;

	T register_read;
	uint16_t length;
	*success = registers->ReadRegister<T>(element->element_register.address, &register_read, &length);
 8011a50:	f8bd a098 	ldrh.w	sl, [sp, #152]	@ 0x98
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8011a54:	f04f 31ff 	mov.w	r1, #4294967295
 8011a58:	6838      	ldr	r0, [r7, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011a5a:	f8cd 902c 	str.w	r9, [sp, #44]	@ 0x2c
 8011a5e:	e9cd 9909 	strd	r9, r9, [sp, #36]	@ 0x24
 8011a62:	f7fa fd67 	bl	800c534 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8011a66:	462a      	mov	r2, r5
 8011a68:	4651      	mov	r1, sl
 8011a6a:	4638      	mov	r0, r7
 8011a6c:	f006 fb6f 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8011a70:	f89d 30b0 	ldrb.w	r3, [sp, #176]	@ 0xb0
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8011a74:	4604      	mov	r4, r0
	if (!success) {
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d159      	bne.n	8011b2e <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x18a>
		osSemaphoreRelease(RegistersSemaphore);
 8011a7a:	6838      	ldr	r0, [r7, #0]
 8011a7c:	f7fa fd8e 	bl	800c59c <osSemaphoreRelease>
		return false;
 8011a80:	2300      	movs	r3, #0
 8011a82:	9303      	str	r3, [sp, #12]
	response_content.data = ReadElement<T>(&element, &success);
 8011a84:	a909      	add	r1, sp, #36	@ 0x24
 8011a86:	a823      	add	r0, sp, #140	@ 0x8c
 8011a88:	f7fd fa89 	bl	800ef9e <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8011a8c:	a809      	add	r0, sp, #36	@ 0x24
 8011a8e:	f7ef f8c1 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not success) {
 8011a92:	9b03      	ldr	r3, [sp, #12]
 8011a94:	b9a3      	cbnz	r3, 8011ac0 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x11c>
		response_content.data = std::vector<uint8_t>{ERROR};
 8011a96:	22ff      	movs	r2, #255	@ 0xff
		response_content.command = true; // this is an error flag for a read ack
 8011a98:	2301      	movs	r3, #1
		response_content.data = std::vector<uint8_t>{ERROR};
 8011a9a:	4628      	mov	r0, r5
 8011a9c:	f88d 203c 	strb.w	r2, [sp, #60]	@ 0x3c
 8011aa0:	aa0f      	add	r2, sp, #60	@ 0x3c
		response_content.command = true; // this is an error flag for a read ack
 8011aa2:	f88d 3087 	strb.w	r3, [sp, #135]	@ 0x87
		response_content.data = std::vector<uint8_t>{ERROR};
 8011aa6:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
 8011aaa:	461a      	mov	r2, r3
 8011aac:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8011aae:	f7ff fb63 	bl	8011178 <_ZNSt6vectorIhSaIhEEC2ESt16initializer_listIhERKS0_.constprop.0.isra.0>
 8011ab2:	a823      	add	r0, sp, #140	@ 0x8c
 8011ab4:	4629      	mov	r1, r5
 8011ab6:	f7fd fa72 	bl	800ef9e <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 8011aba:	4628      	mov	r0, r5
 8011abc:	f7ef f8aa 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not BuildPayload(response, response_content) && response->payload.size() > 0) { // if no space available, send the data and then rebuild a new response
 8011ac0:	a920      	add	r1, sp, #128	@ 0x80
 8011ac2:	4628      	mov	r0, r5
 8011ac4:	f7fd fee2 	bl	800f88c <_ZN14MessageElementC1ERKS_>
 8011ac8:	462a      	mov	r2, r5
 8011aca:	4631      	mov	r1, r6
 8011acc:	4640      	mov	r0, r8
 8011ace:	f7ff fc35 	bl	801133c <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8011ad2:	2800      	cmp	r0, #0
 8011ad4:	f040 8128 	bne.w	8011d28 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x384>
 8011ad8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011adc:	1ae4      	subs	r4, r4, r3
 8011ade:	bf18      	it	ne
 8011ae0:	2401      	movne	r4, #1
 8011ae2:	a82f      	add	r0, sp, #188	@ 0xbc
 8011ae4:	f7ef f896 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011ae8:	b1cc      	cbz	r4, 8011b1e <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x17a>
		Send(*response);
 8011aea:	4631      	mov	r1, r6
 8011aec:	a82c      	add	r0, sp, #176	@ 0xb0
 8011aee:	f7fd fee0 	bl	800f8b2 <_ZN13MessageHeaderC1ERKS_>
 8011af2:	a92c      	add	r1, sp, #176	@ 0xb0
 8011af4:	4640      	mov	r0, r8
 8011af6:	f7fd ffcb 	bl	800fa90 <_ZN13Communication4SendE13MessageHeader>
 8011afa:	a82d      	add	r0, sp, #180	@ 0xb4
 8011afc:	f7ef f88a 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		response->payload.clear();
 8011b00:	1d30      	adds	r0, r6, #4
 8011b02:	f7fd fa63 	bl	800efcc <_ZNSt6vectorIhSaIhEE5clearEv>
		BuildPayload(response, response_content);
 8011b06:	a920      	add	r1, sp, #128	@ 0x80
 8011b08:	a82c      	add	r0, sp, #176	@ 0xb0
 8011b0a:	f7fd febf 	bl	800f88c <_ZN14MessageElementC1ERKS_>
 8011b0e:	aa2c      	add	r2, sp, #176	@ 0xb0
 8011b10:	4631      	mov	r1, r6
 8011b12:	4640      	mov	r0, r8
 8011b14:	f7ff fc12 	bl	801133c <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8011b18:	a82f      	add	r0, sp, #188	@ 0xbc
 8011b1a:	f7ef f87b 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011b1e:	a829      	add	r0, sp, #164	@ 0xa4
 8011b20:	f7ef f878 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011b24:	a823      	add	r0, sp, #140	@ 0x8c
 8011b26:	f7ef f875 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011b2a:	a816      	add	r0, sp, #88	@ 0x58
 8011b2c:	e77a      	b.n	8011a24 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x80>
	uint8_t registered_type = GetTypeID<T>(&success);
 8011b2e:	4628      	mov	r0, r5
 8011b30:	f7fd f92c 	bl	800ed8c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 8011b34:	f89d 30b0 	ldrb.w	r3, [sp, #176]	@ 0xb0
 8011b38:	9303      	str	r3, [sp, #12]
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d09d      	beq.n	8011a7a <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0xd6>
	if (target_register->register_info.type != registered_type) {
 8011b3e:	7923      	ldrb	r3, [r4, #4]
 8011b40:	4298      	cmp	r0, r3
 8011b42:	d19a      	bne.n	8011a7a <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0xd6>
	if (callbacks[target_register->register_info.type] == NULL) {
 8011b44:	3004      	adds	r0, #4
 8011b46:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8011b4a:	2800      	cmp	r0, #0
 8011b4c:	d095      	beq.n	8011a7a <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0xd6>
	if (target_register->access.read) {
 8011b4e:	7a63      	ldrb	r3, [r4, #9]
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d031      	beq.n	8011bb8 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x214>
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8011b54:	8961      	ldrh	r1, [r4, #10]
		success = false; // false by default to use pointer mode if the callback doesn't update the flag
 8011b56:	f88d 90b0 	strb.w	r9, [sp, #176]	@ 0xb0
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8011b5a:	f7fd fa51 	bl	800f000 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
 8011b5e:	f8d0 b00c 	ldr.w	fp, [r0, #12]
 8011b62:	e9d0 9300 	ldrd	r9, r3, [r0]
 8011b66:	9305      	str	r3, [sp, #20]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8011b68:	68e3      	ldr	r3, [r4, #12]
 8011b6a:	b123      	cbz	r3, 8011b76 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x1d2>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 8011b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8011b70:	6818      	ldr	r0, [r3, #0]
 8011b72:	f7fa fcdf 	bl	800c534 <osSemaphoreAcquire>
		if (target_register->mode.callbacks) {
 8011b76:	7863      	ldrb	r3, [r4, #1]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d15d      	bne.n	8011c38 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x294>
		if (not success && target_register->mode.pointer) {
 8011b7c:	f89d 30b0 	ldrb.w	r3, [sp, #176]	@ 0xb0
 8011b80:	b9ab      	cbnz	r3, 8011bae <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x20a>
 8011b82:	7823      	ldrb	r3, [r4, #0]
 8011b84:	b19b      	cbz	r3, 8011bae <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x20a>
			success = true;
 8011b86:	2301      	movs	r3, #1
 8011b88:	f88d 30b0 	strb.w	r3, [sp, #176]	@ 0xb0
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 8011b8c:	7962      	ldrb	r2, [r4, #5]
 8011b8e:	2a00      	cmp	r2, #0
 8011b90:	f000 8085 	beq.w	8011c9e <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x2fa>
 8011b94:	88e1      	ldrh	r1, [r4, #6]
 8011b96:	2900      	cmp	r1, #0
 8011b98:	d179      	bne.n	8011c8e <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x2ea>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011b9a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8011b9e:	1a9b      	subs	r3, r3, r2
 8011ba0:	aa06      	add	r2, sp, #24
				*length = register_vector->size();
 8011ba2:	b29b      	uxth	r3, r3
 8011ba4:	f8ad 301a 	strh.w	r3, [sp, #26]
					for (uint16_t index = 0; index < *length; index++) {
 8011ba8:	b288      	uxth	r0, r1
 8011baa:	4283      	cmp	r3, r0
 8011bac:	d868      	bhi.n	8011c80 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x2dc>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8011bae:	68e3      	ldr	r3, [r4, #12]
 8011bb0:	b113      	cbz	r3, 8011bb8 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x214>
			osSemaphoreRelease(*(target_register->register_semaphore));
 8011bb2:	6818      	ldr	r0, [r3, #0]
 8011bb4:	f7fa fcf2 	bl	800c59c <osSemaphoreRelease>
	osSemaphoreRelease(RegistersSemaphore);
 8011bb8:	6838      	ldr	r0, [r7, #0]
 8011bba:	af0f      	add	r7, sp, #60	@ 0x3c
 8011bbc:	f7fa fcee 	bl	800c59c <osSemaphoreRelease>

	if (not *success)
		return data;

	// Get vector of type T
	std::vector<T> register_read_vector_cast = BuildTVector(*element, &register_read);
 8011bc0:	a926      	add	r1, sp, #152	@ 0x98
 8011bc2:	4628      	mov	r0, r5
 8011bc4:	f7fd fe62 	bl	800f88c <_ZN14MessageElementC1ERKS_>
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011bc8:	2300      	movs	r3, #0
	if (not element.element_register.isArray) {
 8011bca:	f89d 20b3 	ldrb.w	r2, [sp, #179]	@ 0xb3
 8011bce:	930e      	str	r3, [sp, #56]	@ 0x38
 8011bd0:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
 8011bd4:	2a00      	cmp	r2, #0
 8011bd6:	d169      	bne.n	8011cac <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x308>
		vector = std::vector<T>{*data};
 8011bd8:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8011bdc:	4639      	mov	r1, r7
 8011bde:	a812      	add	r0, sp, #72	@ 0x48
 8011be0:	9707      	str	r7, [sp, #28]
 8011be2:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 8011be6:	2301      	movs	r3, #1
 8011be8:	461a      	mov	r2, r3
 8011bea:	9308      	str	r3, [sp, #32]
 8011bec:	f7ff fac4 	bl	8011178 <_ZNSt6vectorIhSaIhEEC2ESt16initializer_listIhERKS0_.constprop.0.isra.0>
		vector = std::vector<T>(data, data + element.element_register.length);
 8011bf0:	a80c      	add	r0, sp, #48	@ 0x30
 8011bf2:	a912      	add	r1, sp, #72	@ 0x48
 8011bf4:	f7fd f9d3 	bl	800ef9e <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8011bf8:	a812      	add	r0, sp, #72	@ 0x48
 8011bfa:	f7ef f80b 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011bfe:	a82f      	add	r0, sp, #188	@ 0xbc
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011c00:	2400      	movs	r4, #0
      }
 8011c02:	f7ef f807 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>

	// transform it in vector of uint8_t
	data = BuildVector<T>(register_read_vector_cast);
 8011c06:	a90c      	add	r1, sp, #48	@ 0x30
 8011c08:	a812      	add	r0, sp, #72	@ 0x48
 8011c0a:	f7ef f8b3 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011c0e:	9411      	str	r4, [sp, #68]	@ 0x44
      : _M_current(__i) { }
 8011c10:	e9dd 9a12 	ldrd	r9, sl, [sp, #72]	@ 0x48
 8011c14:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
    for (T input : inputs) {
 8011c18:	45ca      	cmp	sl, r9
 8011c1a:	d16f      	bne.n	8011cfc <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x358>
	data = BuildVector<T>(register_read_vector_cast);
 8011c1c:	4639      	mov	r1, r7
 8011c1e:	a809      	add	r0, sp, #36	@ 0x24
 8011c20:	f7fd f9bd 	bl	800ef9e <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8011c24:	4638      	mov	r0, r7
 8011c26:	f7ee fff5 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011c2a:	a812      	add	r0, sp, #72	@ 0x48
 8011c2c:	f7ee fff2 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011c30:	a80c      	add	r0, sp, #48	@ 0x30
 8011c32:	f7ee ffef 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011c36:	e725      	b.n	8011a84 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0xe0>
				*callback_output = output;
 8011c38:	2200      	movs	r2, #0
 8011c3a:	ab06      	add	r3, sp, #24
 8011c3c:	6013      	str	r3, [r2, #0]
			if (callbacks.read != NULL) {
 8011c3e:	f1bb 0f00 	cmp.w	fp, #0
 8011c42:	d09b      	beq.n	8011b7c <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x1d8>
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 8011c44:	f10d 031a 	add.w	r3, sp, #26
 8011c48:	4651      	mov	r1, sl
 8011c4a:	9805      	ldr	r0, [sp, #20]
 8011c4c:	47d8      	blx	fp
 8011c4e:	f88d 00b0 	strb.w	r0, [sp, #176]	@ 0xb0
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 8011c52:	7963      	ldrb	r3, [r4, #5]
 8011c54:	b143      	cbz	r3, 8011c68 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x2c4>
 8011c56:	88e3      	ldrh	r3, [r4, #6]
 8011c58:	b10b      	cbz	r3, 8011c5e <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x2ba>
					*length = 1;
 8011c5a:	f8ad 301a 	strh.w	r3, [sp, #26]
					for (uint16_t index = 0; index < *length; index++) {
 8011c5e:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 8011c62:	a906      	add	r1, sp, #24
 8011c64:	2300      	movs	r3, #0
 8011c66:	e007      	b.n	8011c78 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x2d4>
					*length = 1;
 8011c68:	2301      	movs	r3, #1
 8011c6a:	e7f6      	b.n	8011c5a <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x2b6>
						output[index] = (*callback_output )[index];
 8011c6c:	2200      	movs	r2, #0
 8011c6e:	6812      	ldr	r2, [r2, #0]
 8011c70:	5cd2      	ldrb	r2, [r2, r3]
 8011c72:	3301      	adds	r3, #1
 8011c74:	f801 2b01 	strb.w	r2, [r1], #1
					for (uint16_t index = 0; index < *length; index++) {
 8011c78:	b29a      	uxth	r2, r3
 8011c7a:	4290      	cmp	r0, r2
 8011c7c:	d8f6      	bhi.n	8011c6c <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x2c8>
 8011c7e:	e77d      	b.n	8011b7c <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x1d8>
						output[index] = (*register_vector)[index];
 8011c80:	f8d9 0000 	ldr.w	r0, [r9]
 8011c84:	5c40      	ldrb	r0, [r0, r1]
 8011c86:	3101      	adds	r1, #1
 8011c88:	f802 0b01 	strb.w	r0, [r2], #1
					for (uint16_t index = 0; index < *length; index++) {
 8011c8c:	e78c      	b.n	8011ba8 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x204>
				*length = target_register->register_info.length;
 8011c8e:	f8ad 101a 	strh.w	r1, [sp, #26]
			      _Category>::__copy_m(__first, __last, __result);
 8011c92:	aa06      	add	r2, sp, #24
 8011c94:	4449      	add	r1, r9
 8011c96:	4648      	mov	r0, r9
 8011c98:	f7ef f860 	bl	8000d5c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8011c9c:	e787      	b.n	8011bae <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x20a>
				*length = 1;
 8011c9e:	f8ad 301a 	strh.w	r3, [sp, #26]
					*output = *callbacks.pointer;
 8011ca2:	f899 3000 	ldrb.w	r3, [r9]
 8011ca6:	f88d 3018 	strb.w	r3, [sp, #24]
 8011caa:	e780      	b.n	8011bae <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x20a>
	} else if (element.element_register.isArray && element.element_register.length > 0)
 8011cac:	f8bd 20b4 	ldrh.w	r2, [sp, #180]	@ 0xb4
 8011cb0:	b14a      	cbz	r2, 8011cc6 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x322>
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011cb2:	9314      	str	r3, [sp, #80]	@ 0x50
	  _M_range_initialize(__first, __last,
 8011cb4:	a812      	add	r0, sp, #72	@ 0x48
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011cb6:	e9cd 3312 	strd	r3, r3, [sp, #72]	@ 0x48
	  _M_range_initialize(__first, __last,
 8011cba:	ab06      	add	r3, sp, #24
 8011cbc:	441a      	add	r2, r3
 8011cbe:	4619      	mov	r1, r3
 8011cc0:	f7ff fa7c 	bl	80111bc <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPhEEvT_S4_St20forward_iterator_tag.isra.0>
 8011cc4:	e794      	b.n	8011bf0 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x24c>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011cc6:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
	  if (__xlen > capacity())
 8011cca:	ebbb 090a 	subs.w	r9, fp, sl
 8011cce:	d00f      	beq.n	8011cf0 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x34c>
	  pointer __result = this->_M_allocate(__n);
 8011cd0:	4648      	mov	r0, r9
 8011cd2:	f7fd f850 	bl	800ed76 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
 8011cd6:	4604      	mov	r4, r0
			      _Category>::__copy_m(__first, __last, __result);
 8011cd8:	4602      	mov	r2, r0
 8011cda:	4659      	mov	r1, fp
 8011cdc:	4650      	mov	r0, sl
 8011cde:	f7ef f83d 	bl	8000d5c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	      this->_M_impl._M_start = __tmp;
 8011ce2:	940c      	str	r4, [sp, #48]	@ 0x30
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8011ce4:	444c      	add	r4, r9
 8011ce6:	940e      	str	r4, [sp, #56]	@ 0x38
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8011ce8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011cea:	444b      	add	r3, r9
 8011cec:	930d      	str	r3, [sp, #52]	@ 0x34
      return *this;
 8011cee:	e786      	b.n	8011bfe <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x25a>
 8011cf0:	464a      	mov	r2, r9
 8011cf2:	4659      	mov	r1, fp
 8011cf4:	4650      	mov	r0, sl
 8011cf6:	f7ef f831 	bl	8000d5c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8011cfa:	e7f5      	b.n	8011ce8 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x344>
    for (T input : inputs) {
 8011cfc:	f819 3b01 	ldrb.w	r3, [r9], #1
      { emplace_back(std::move(__x)); }
 8011d00:	f10d 0119 	add.w	r1, sp, #25
 8011d04:	4628      	mov	r0, r5
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011d06:	942e      	str	r4, [sp, #184]	@ 0xb8
		data.push_back((uint8_t) ((reinterpreted_input >> ((type_length - 1 - index) << 3)) & 0xFF)); // previously (8 * (type_length - 1 - index))) & 0xFF))
 8011d08:	f88d 3019 	strb.w	r3, [sp, #25]
 8011d0c:	e9cd 442c 	strd	r4, r4, [sp, #176]	@ 0xb0
      { emplace_back(std::move(__x)); }
 8011d10:	f7fd fc90 	bl	800f634 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
        data.insert(data.end(), single.begin(), single.end());
 8011d14:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8011d16:	4638      	mov	r0, r7
 8011d18:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	@ 0xb0
 8011d1c:	f7ff fa9a 	bl	8011254 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_>
      }
 8011d20:	4628      	mov	r0, r5
 8011d22:	f7ee ff77 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return *this;
 8011d26:	e777      	b.n	8011c18 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x274>
	if (not BuildPayload(response, response_content) && response->payload.size() > 0) { // if no space available, send the data and then rebuild a new response
 8011d28:	2400      	movs	r4, #0
 8011d2a:	e6da      	b.n	8011ae2 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x13e>

08011d2c <_ZN13Communication14ProcessElementIhEEt13MessageHeaderPS1_14MessageElementt>:
uint16_t Communication::ProcessElement(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 8011d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d2e:	461c      	mov	r4, r3
 8011d30:	b08f      	sub	sp, #60	@ 0x3c
	if (not element.ack && element.command) {
 8011d32:	799b      	ldrb	r3, [r3, #6]
uint16_t Communication::ProcessElement(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 8011d34:	4605      	mov	r5, r0
 8011d36:	4617      	mov	r7, r2
 8011d38:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
	if (not element.ack && element.command) {
 8011d3c:	b9cb      	cbnz	r3, 8011d72 <_ZN13Communication14ProcessElementIhEEt13MessageHeaderPS1_14MessageElementt+0x46>
 8011d3e:	79e3      	ldrb	r3, [r4, #7]
		return ProcessCommand<T>(message, response, element, start_index);
 8011d40:	a803      	add	r0, sp, #12
	if (not element.ack && element.command) {
 8011d42:	b323      	cbz	r3, 8011d8e <_ZN13Communication14ProcessElementIhEEt13MessageHeaderPS1_14MessageElementt+0x62>
		return ProcessCommand<T>(message, response, element, start_index);
 8011d44:	f7fd fdb5 	bl	800f8b2 <_ZN13MessageHeaderC1ERKS_>
 8011d48:	4621      	mov	r1, r4
 8011d4a:	a808      	add	r0, sp, #32
 8011d4c:	f7fd fd9e 	bl	800f88c <_ZN14MessageElementC1ERKS_>
 8011d50:	ab08      	add	r3, sp, #32
 8011d52:	463a      	mov	r2, r7
 8011d54:	a903      	add	r1, sp, #12
 8011d56:	4628      	mov	r0, r5
 8011d58:	9600      	str	r6, [sp, #0]
 8011d5a:	f7ff fe23 	bl	80119a4 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt>
		return ProcessSubscriber<T>(message, element, start_index);
 8011d5e:	4604      	mov	r4, r0
 8011d60:	a80b      	add	r0, sp, #44	@ 0x2c
 8011d62:	f7ee ff57 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011d66:	a804      	add	r0, sp, #16
 8011d68:	f7ee ff54 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 8011d6c:	4620      	mov	r0, r4
 8011d6e:	b00f      	add	sp, #60	@ 0x3c
 8011d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ProcessService<T>(message, element, start_index);
 8011d72:	a803      	add	r0, sp, #12
 8011d74:	f7fd fd9d 	bl	800f8b2 <_ZN13MessageHeaderC1ERKS_>
 8011d78:	4621      	mov	r1, r4
 8011d7a:	a808      	add	r0, sp, #32
 8011d7c:	f7fd fd86 	bl	800f88c <_ZN14MessageElementC1ERKS_>
 8011d80:	4633      	mov	r3, r6
 8011d82:	aa08      	add	r2, sp, #32
 8011d84:	a903      	add	r1, sp, #12
 8011d86:	4628      	mov	r0, r5
 8011d88:	f7ff f8a9 	bl	8010ede <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt>
 8011d8c:	e7e7      	b.n	8011d5e <_ZN13Communication14ProcessElementIhEEt13MessageHeaderPS1_14MessageElementt+0x32>
		return ProcessSubscriber<T>(message, element, start_index);
 8011d8e:	f7fd fd90 	bl	800f8b2 <_ZN13MessageHeaderC1ERKS_>
 8011d92:	4621      	mov	r1, r4
 8011d94:	a808      	add	r0, sp, #32
 8011d96:	f7fd fd79 	bl	800f88c <_ZN14MessageElementC1ERKS_>
 8011d9a:	4633      	mov	r3, r6
 8011d9c:	aa08      	add	r2, sp, #32
 8011d9e:	a903      	add	r1, sp, #12
 8011da0:	4628      	mov	r0, r5
 8011da2:	f7ff f81a 	bl	8010dda <_ZN13Communication17ProcessSubscriberIhEEt13MessageHeader14MessageElementt>
 8011da6:	e7da      	b.n	8011d5e <_ZN13Communication14ProcessElementIhEEt13MessageHeaderPS1_14MessageElementt+0x32>

08011da8 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPmjEET_S3_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 8011da8:	b538      	push	{r3, r4, r5, lr}
	  if (__n > 0)
 8011daa:	460c      	mov	r4, r1
 8011dac:	b181      	cbz	r1, 8011dd0 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPmjEET_S3_T0_+0x28>
 8011dae:	2100      	movs	r1, #0
 8011db0:	4605      	mov	r5, r0
      if (__n <= 0)
 8011db2:	3c01      	subs	r4, #1
 8011db4:	f845 1b04 	str.w	r1, [r5], #4
 8011db8:	d008      	beq.n	8011dcc <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPmjEET_S3_T0_+0x24>
      std::__fill_a(__first, __first + __n, __value);
 8011dba:	eb05 0484 	add.w	r4, r5, r4, lsl #2
	*__first = __tmp;
 8011dbe:	1a24      	subs	r4, r4, r0
 8011dc0:	4628      	mov	r0, r5
 8011dc2:	3c04      	subs	r4, #4
 8011dc4:	4425      	add	r5, r4
 8011dc6:	4622      	mov	r2, r4
 8011dc8:	f009 f86a 	bl	801aea0 <memset>
	}
 8011dcc:	4628      	mov	r0, r5
 8011dce:	bd38      	pop	{r3, r4, r5, pc}
 8011dd0:	4605      	mov	r5, r0
	  return __first;
 8011dd2:	e7fb      	b.n	8011dcc <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPmjEET_S3_T0_+0x24>

08011dd4 <_ZNSt6vectorImSaImEE17_M_default_appendEj>:
    vector<_Tp, _Alloc>::
 8011dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011dd8:	4604      	mov	r4, r0
      if (__n != 0)
 8011dda:	460e      	mov	r6, r1
 8011ddc:	b171      	cbz	r1, 8011dfc <_ZNSt6vectorImSaImEE17_M_default_appendEj+0x28>
					 - this->_M_impl._M_finish);
 8011dde:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011de0:	e9d0 8200 	ldrd	r8, r2, [r0]
 8011de4:	1a9b      	subs	r3, r3, r2
 8011de6:	eba2 0a08 	sub.w	sl, r2, r8
	  if (__navail >= __n)
 8011dea:	ebb1 0fa3 	cmp.w	r1, r3, asr #2
 8011dee:	ea4f 07aa 	mov.w	r7, sl, asr #2
 8011df2:	d805      	bhi.n	8011e00 <_ZNSt6vectorImSaImEE17_M_default_appendEj+0x2c>
	__uninit_default_n(__first, __n);
 8011df4:	4610      	mov	r0, r2
 8011df6:	f7ff ffd7 	bl	8011da8 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPmjEET_S3_T0_>
	      this->_M_impl._M_finish =
 8011dfa:	6060      	str	r0, [r4, #4]
    }
 8011dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		_M_check_len(__n, "vector::_M_default_append");
 8011e00:	4a13      	ldr	r2, [pc, #76]	@ (8011e50 <_ZNSt6vectorImSaImEE17_M_default_appendEj+0x7c>)
 8011e02:	f7fd fccb 	bl	800f79c <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc>
 8011e06:	4681      	mov	r9, r0
	      pointer __new_start(this->_M_allocate(__len));
 8011e08:	f7fc fe16 	bl	800ea38 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0>
 8011e0c:	4631      	mov	r1, r6
 8011e0e:	4605      	mov	r5, r0
 8011e10:	4450      	add	r0, sl
 8011e12:	f7ff ffc9 	bl	8011da8 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPmjEET_S3_T0_>
      if (__count > 0)
 8011e16:	f1ba 0f00 	cmp.w	sl, #0
 8011e1a:	d00c      	beq.n	8011e36 <_ZNSt6vectorImSaImEE17_M_default_appendEj+0x62>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8011e1c:	4652      	mov	r2, sl
 8011e1e:	4641      	mov	r1, r8
 8011e20:	4628      	mov	r0, r5
 8011e22:	f009 f823 	bl	801ae6c <memmove>
			    this->_M_impl._M_end_of_storage - __old_start);
 8011e26:	68a1      	ldr	r1, [r4, #8]
 8011e28:	4640      	mov	r0, r8
 8011e2a:	eba1 0108 	sub.w	r1, r1, r8
 8011e2e:	1089      	asrs	r1, r1, #2
 8011e30:	f7fc fde2 	bl	800e9f8 <_ZNSt12_Vector_baseIP21CommunicationProtocolSaIS1_EE13_M_deallocateEPS1_j.part.0>
 8011e34:	e002      	b.n	8011e3c <_ZNSt6vectorImSaImEE17_M_default_appendEj+0x68>
	if (__p)
 8011e36:	f1b8 0f00 	cmp.w	r8, #0
 8011e3a:	d1f4      	bne.n	8011e26 <_ZNSt6vectorImSaImEE17_M_default_appendEj+0x52>
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8011e3c:	4437      	add	r7, r6
	      this->_M_impl._M_start = __new_start;
 8011e3e:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8011e40:	eb05 0787 	add.w	r7, r5, r7, lsl #2
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 8011e44:	eb05 0589 	add.w	r5, r5, r9, lsl #2
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8011e48:	6067      	str	r7, [r4, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 8011e4a:	60a5      	str	r5, [r4, #8]
    }
 8011e4c:	e7d6      	b.n	8011dfc <_ZNSt6vectorImSaImEE17_M_default_appendEj+0x28>
 8011e4e:	bf00      	nop
 8011e50:	0801b406 	.word	0x0801b406

08011e54 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>:
	  if (_Num)
 8011e54:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8011e56:	4613      	mov	r3, r2
 8011e58:	b510      	push	{r4, lr}
	  const ptrdiff_t _Num = __last - __first;
 8011e5a:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
 8011e5e:	d005      	beq.n	8011e6c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8011e60:	4601      	mov	r1, r0
 8011e62:	4622      	mov	r2, r4
 8011e64:	4618      	mov	r0, r3
 8011e66:	f009 f801 	bl	801ae6c <memmove>
 8011e6a:	4603      	mov	r3, r0
	}
 8011e6c:	1918      	adds	r0, r3, r4
 8011e6e:	bd10      	pop	{r4, pc}

08011e70 <_ZNSt6vectorImSaImEEC1ERKS1_>:
      vector(const vector& __x)
 8011e70:	b570      	push	{r4, r5, r6, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011e72:	e9d1 3600 	ldrd	r3, r6, [r1]
      vector(const vector& __x)
 8011e76:	4604      	mov	r4, r0
 8011e78:	460d      	mov	r5, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011e7a:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011e7c:	2300      	movs	r3, #0
 8011e7e:	e9c0 3300 	strd	r3, r3, [r0]
 8011e82:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8011e84:	10b0      	asrs	r0, r6, #2
 8011e86:	f7fc fdd7 	bl	800ea38 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8011e8a:	4406      	add	r6, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8011e8c:	4602      	mov	r2, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8011e8e:	60a6      	str	r6, [r4, #8]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8011e90:	e9c4 0000 	strd	r0, r0, [r4]
			      _Category>::__copy_m(__first, __last, __result);
 8011e94:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011e98:	f7ff ffdc 	bl	8011e54 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>
	this->_M_impl._M_finish =
 8011e9c:	6060      	str	r0, [r4, #4]
      }
 8011e9e:	4620      	mov	r0, r4
 8011ea0:	bd70      	pop	{r4, r5, r6, pc}

08011ea2 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb>:
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 8011ea2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ea6:	f2ad 4d14 	subw	sp, sp, #1044	@ 0x414
 8011eaa:	4689      	mov	r9, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8011eac:	f04f 31ff 	mov.w	r1, #4294967295
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 8011eb0:	461f      	mov	r7, r3
 8011eb2:	9000      	str	r0, [sp, #0]
 8011eb4:	4615      	mov	r5, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8011eb6:	6800      	ldr	r0, [r0, #0]
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 8011eb8:	f89d b438 	ldrb.w	fp, [sp, #1080]	@ 0x438
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8011ebc:	f7fa fb3a 	bl	800c534 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8011ec0:	f10d 020f 	add.w	r2, sp, #15
 8011ec4:	4649      	mov	r1, r9
 8011ec6:	9800      	ldr	r0, [sp, #0]
 8011ec8:	f006 f941 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8011ecc:	f89d 300f 	ldrb.w	r3, [sp, #15]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8011ed0:	4604      	mov	r4, r0
	if (!success) {
 8011ed2:	b953      	cbnz	r3, 8011eea <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x48>
		osSemaphoreRelease(RegistersSemaphore);
 8011ed4:	9b00      	ldr	r3, [sp, #0]
		return false;
 8011ed6:	f04f 0a00 	mov.w	sl, #0
		osSemaphoreRelease(RegistersSemaphore);
 8011eda:	6818      	ldr	r0, [r3, #0]
 8011edc:	f7fa fb5e 	bl	800c59c <osSemaphoreRelease>
}
 8011ee0:	4650      	mov	r0, sl
 8011ee2:	f20d 4d14 	addw	sp, sp, #1044	@ 0x414
 8011ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8011eea:	f10d 000f 	add.w	r0, sp, #15
 8011eee:	f7fc fe79 	bl	800ebe4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	if (!success) {
 8011ef2:	f89d a00f 	ldrb.w	sl, [sp, #15]
 8011ef6:	f1ba 0f00 	cmp.w	sl, #0
 8011efa:	d0eb      	beq.n	8011ed4 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x32>
	if (target_register->register_info.type != registered_type) {
 8011efc:	7923      	ldrb	r3, [r4, #4]
 8011efe:	4283      	cmp	r3, r0
 8011f00:	d1e8      	bne.n	8011ed4 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x32>
	if (callbacks[target_register->register_info.type] == NULL) {
 8011f02:	3304      	adds	r3, #4
 8011f04:	9a00      	ldr	r2, [sp, #0]
 8011f06:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8011f0a:	2800      	cmp	r0, #0
 8011f0c:	d0e2      	beq.n	8011ed4 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x32>
	if (target_register->access.read) {
 8011f0e:	7a63      	ldrb	r3, [r4, #9]
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d04d      	beq.n	8011fb0 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x10e>
		success = false; // false by default to use pointer mode if the callback doesn't update the flag
 8011f14:	2300      	movs	r3, #0
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8011f16:	8961      	ldrh	r1, [r4, #10]
		success = false; // false by default to use pointer mode if the callback doesn't update the flag
 8011f18:	f88d 300f 	strb.w	r3, [sp, #15]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8011f1c:	f7fd fc08 	bl	800f730 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE2atEj>
 8011f20:	e9d0 8300 	ldrd	r8, r3, [r0]
 8011f24:	9301      	str	r3, [sp, #4]
 8011f26:	68c3      	ldr	r3, [r0, #12]
 8011f28:	461e      	mov	r6, r3
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8011f2a:	f1bb 0f00 	cmp.w	fp, #0
 8011f2e:	d006      	beq.n	8011f3e <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x9c>
 8011f30:	68e3      	ldr	r3, [r4, #12]
 8011f32:	b123      	cbz	r3, 8011f3e <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x9c>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 8011f34:	f04f 31ff 	mov.w	r1, #4294967295
 8011f38:	6818      	ldr	r0, [r3, #0]
 8011f3a:	f7fa fafb 	bl	800c534 <osSemaphoreAcquire>
		if (target_register->mode.callbacks) {
 8011f3e:	7863      	ldrb	r3, [r4, #1]
 8011f40:	b1db      	cbz	r3, 8011f7a <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xd8>
			if (output != NULL) {
 8011f42:	2d00      	cmp	r5, #0
 8011f44:	d039      	beq.n	8011fba <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x118>
				*callback_output = output;
 8011f46:	462a      	mov	r2, r5
 8011f48:	2300      	movs	r3, #0
 8011f4a:	601a      	str	r2, [r3, #0]
			if (callbacks.read != NULL) {
 8011f4c:	b1ae      	cbz	r6, 8011f7a <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xd8>
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 8011f4e:	463b      	mov	r3, r7
 8011f50:	2200      	movs	r2, #0
 8011f52:	4649      	mov	r1, r9
 8011f54:	9801      	ldr	r0, [sp, #4]
 8011f56:	47b0      	blx	r6
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 8011f58:	7963      	ldrb	r3, [r4, #5]
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 8011f5a:	f88d 000f 	strb.w	r0, [sp, #15]
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 8011f5e:	b373      	cbz	r3, 8011fbe <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x11c>
 8011f60:	88e3      	ldrh	r3, [r4, #6]
 8011f62:	b103      	cbz	r3, 8011f66 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xc4>
					*length = 1;
 8011f64:	803b      	strh	r3, [r7, #0]
				if (*callback_output != output && output != NULL) {
 8011f66:	2300      	movs	r3, #0
 8011f68:	6819      	ldr	r1, [r3, #0]
 8011f6a:	42a9      	cmp	r1, r5
 8011f6c:	d005      	beq.n	8011f7a <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xd8>
 8011f6e:	b125      	cbz	r5, 8011f7a <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xd8>
						output[index] = (*callback_output )[index];
 8011f70:	883a      	ldrh	r2, [r7, #0]
 8011f72:	4628      	mov	r0, r5
 8011f74:	0092      	lsls	r2, r2, #2
 8011f76:	f009 f871 	bl	801b05c <memcpy>
		if (not success && target_register->mode.pointer) {
 8011f7a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8011f7e:	b97b      	cbnz	r3, 8011fa0 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xfe>
 8011f80:	7823      	ldrb	r3, [r4, #0]
 8011f82:	b16b      	cbz	r3, 8011fa0 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xfe>
			success = true;
 8011f84:	2301      	movs	r3, #1
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 8011f86:	7962      	ldrb	r2, [r4, #5]
			success = true;
 8011f88:	f88d 300f 	strb.w	r3, [sp, #15]
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 8011f8c:	b362      	cbz	r2, 8011fe8 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x146>
 8011f8e:	88e1      	ldrh	r1, [r4, #6]
 8011f90:	bb01      	cbnz	r1, 8011fd4 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x132>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011f92:	e9d8 2300 	ldrd	r2, r3, [r8]
 8011f96:	1a9b      	subs	r3, r3, r2
				*length = register_vector->size();
 8011f98:	f3c3 038f 	ubfx	r3, r3, #2, #16
 8011f9c:	803b      	strh	r3, [r7, #0]
				if (output != NULL) {
 8011f9e:	b9ad      	cbnz	r5, 8011fcc <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x12a>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8011fa0:	f1bb 0f00 	cmp.w	fp, #0
 8011fa4:	d004      	beq.n	8011fb0 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x10e>
 8011fa6:	68e3      	ldr	r3, [r4, #12]
 8011fa8:	b113      	cbz	r3, 8011fb0 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x10e>
			osSemaphoreRelease(*(target_register->register_semaphore));
 8011faa:	6818      	ldr	r0, [r3, #0]
 8011fac:	f7fa faf6 	bl	800c59c <osSemaphoreRelease>
	osSemaphoreRelease(RegistersSemaphore);
 8011fb0:	9b00      	ldr	r3, [sp, #0]
 8011fb2:	6818      	ldr	r0, [r3, #0]
 8011fb4:	f7fa faf2 	bl	800c59c <osSemaphoreRelease>
	return true;
 8011fb8:	e792      	b.n	8011ee0 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x3e>
				*callback_output = output_buffer; // use a temporary buffer to store values if not input. TODO the size is limited so there is possibly an issue if output == NULL and length > 256
 8011fba:	aa04      	add	r2, sp, #16
 8011fbc:	e7c4      	b.n	8011f48 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xa6>
					*length = 1;
 8011fbe:	2301      	movs	r3, #1
 8011fc0:	e7d0      	b.n	8011f64 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xc2>
						output[index] = (*register_vector)[index];
 8011fc2:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8011fc6:	f845 0021 	str.w	r0, [r5, r1, lsl #2]
					for (uint16_t index = 0; index < *length; index++) {
 8011fca:	3101      	adds	r1, #1
 8011fcc:	b288      	uxth	r0, r1
 8011fce:	4298      	cmp	r0, r3
 8011fd0:	d3f7      	bcc.n	8011fc2 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x120>
 8011fd2:	e7e5      	b.n	8011fa0 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xfe>
				*length = target_register->register_info.length;
 8011fd4:	8039      	strh	r1, [r7, #0]
				if (output != NULL) {
 8011fd6:	2d00      	cmp	r5, #0
 8011fd8:	d0e2      	beq.n	8011fa0 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xfe>
 8011fda:	462a      	mov	r2, r5
 8011fdc:	eb08 0181 	add.w	r1, r8, r1, lsl #2
 8011fe0:	4640      	mov	r0, r8
 8011fe2:	f7ff ff37 	bl	8011e54 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8011fe6:	e7db      	b.n	8011fa0 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xfe>
				*length = 1;
 8011fe8:	803b      	strh	r3, [r7, #0]
				if (output != NULL) {
 8011fea:	2d00      	cmp	r5, #0
 8011fec:	d0d8      	beq.n	8011fa0 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xfe>
					*output = *callbacks.pointer;
 8011fee:	f8d8 3000 	ldr.w	r3, [r8]
 8011ff2:	602b      	str	r3, [r5, #0]
 8011ff4:	e7d4      	b.n	8011fa0 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xfe>

08011ff6 <_ZN9Registers13WriteRegisterImEEbtPT_tb>:
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 8011ff6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ffa:	b085      	sub	sp, #20
 8011ffc:	4606      	mov	r6, r0
 8011ffe:	4688      	mov	r8, r1
 8012000:	461f      	mov	r7, r3
 8012002:	f89d 3038 	ldrb.w	r3, [sp, #56]	@ 0x38
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8012006:	f04f 31ff 	mov.w	r1, #4294967295
 801200a:	6800      	ldr	r0, [r0, #0]
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 801200c:	4615      	mov	r5, r2
 801200e:	9301      	str	r3, [sp, #4]
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8012010:	f7fa fa90 	bl	800c534 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8012014:	f10d 020f 	add.w	r2, sp, #15
 8012018:	4641      	mov	r1, r8
 801201a:	4630      	mov	r0, r6
 801201c:	f006 f897 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8012020:	f89d 300f 	ldrb.w	r3, [sp, #15]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8012024:	4604      	mov	r4, r0
	if (!success) {
 8012026:	b933      	cbnz	r3, 8012036 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x40>
		osSemaphoreRelease(RegistersSemaphore);
 8012028:	6830      	ldr	r0, [r6, #0]
 801202a:	f7fa fab7 	bl	800c59c <osSemaphoreRelease>
		return false;
 801202e:	2000      	movs	r0, #0
}
 8012030:	b005      	add	sp, #20
 8012032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8012036:	f10d 000f 	add.w	r0, sp, #15
 801203a:	f7fc fdd3 	bl	800ebe4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	if (!success) {
 801203e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8012042:	2b00      	cmp	r3, #0
 8012044:	d0f0      	beq.n	8012028 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x32>
	if (target_register->register_info.type != registered_type) {
 8012046:	7923      	ldrb	r3, [r4, #4]
 8012048:	4283      	cmp	r3, r0
 801204a:	d1ed      	bne.n	8012028 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x32>
	if (callbacks[target_register->register_info.type] == NULL) {
 801204c:	3304      	adds	r3, #4
 801204e:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 8012052:	2800      	cmp	r0, #0
 8012054:	d0e8      	beq.n	8012028 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x32>
	if (target_register->access.write) {
 8012056:	7a23      	ldrb	r3, [r4, #8]
 8012058:	2b00      	cmp	r3, #0
 801205a:	d0e5      	beq.n	8012028 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x32>
		success = false;
 801205c:	2300      	movs	r3, #0
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 801205e:	8961      	ldrh	r1, [r4, #10]
		success = false;
 8012060:	f88d 300f 	strb.w	r3, [sp, #15]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8012064:	f7fd fb64 	bl	800f730 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE2atEj>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8012068:	9b01      	ldr	r3, [sp, #4]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 801206a:	f8d0 9008 	ldr.w	r9, [r0, #8]
 801206e:	e9d0 ba00 	ldrd	fp, sl, [r0]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8012072:	b133      	cbz	r3, 8012082 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x8c>
 8012074:	68e3      	ldr	r3, [r4, #12]
 8012076:	b123      	cbz	r3, 8012082 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x8c>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 8012078:	f04f 31ff 	mov.w	r1, #4294967295
 801207c:	6818      	ldr	r0, [r3, #0]
 801207e:	f7fa fa59 	bl	800c534 <osSemaphoreAcquire>
		if (target_register->mode.pointer) {
 8012082:	7823      	ldrb	r3, [r4, #0]
 8012084:	b1e3      	cbz	r3, 80120c0 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xca>
			success = true;
 8012086:	2301      	movs	r3, #1
 8012088:	f88d 300f 	strb.w	r3, [sp, #15]
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 801208c:	7963      	ldrb	r3, [r4, #5]
 801208e:	2b00      	cmp	r3, #0
 8012090:	d04a      	beq.n	8012128 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x132>
 8012092:	88e1      	ldrh	r1, [r4, #6]
 8012094:	2900      	cmp	r1, #0
 8012096:	d140      	bne.n	801211a <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x124>
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8012098:	e9db 3100 	ldrd	r3, r1, [fp]
 801209c:	428b      	cmp	r3, r1
	    this->_M_impl._M_finish = __pos;
 801209e:	bf18      	it	ne
 80120a0:	f8cb 3004 	strne.w	r3, [fp, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80120a4:	f8db 0004 	ldr.w	r0, [fp, #4]
 80120a8:	1ac1      	subs	r1, r0, r3
 80120aa:	1089      	asrs	r1, r1, #2
	if (__new_size > size())
 80120ac:	428f      	cmp	r7, r1
 80120ae:	d924      	bls.n	80120fa <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x104>
	  _M_default_append(__new_size - size());
 80120b0:	1a79      	subs	r1, r7, r1
 80120b2:	4658      	mov	r0, fp
 80120b4:	f7ff fe8e 	bl	8011dd4 <_ZNSt6vectorImSaImEE17_M_default_appendEj>
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 80120b8:	2300      	movs	r3, #0
				for (uint16_t index = 0; index < length; index++) {
 80120ba:	b299      	uxth	r1, r3
 80120bc:	42b9      	cmp	r1, r7
 80120be:	d324      	bcc.n	801210a <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x114>
		if (target_register->mode.callbacks) {
 80120c0:	7863      	ldrb	r3, [r4, #1]
 80120c2:	b16b      	cbz	r3, 80120e0 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xea>
			if (callbacks.write != NULL) {
 80120c4:	f1b9 0f00 	cmp.w	r9, #0
 80120c8:	d00a      	beq.n	80120e0 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xea>
				if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 80120ca:	7963      	ldrb	r3, [r4, #5]
 80120cc:	b383      	cbz	r3, 8012130 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x13a>
 80120ce:	88e3      	ldrh	r3, [r4, #6]
 80120d0:	b903      	cbnz	r3, 80120d4 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xde>
					success = callbacks.write(callbacks.context, ID, value, length);
 80120d2:	463b      	mov	r3, r7
					success = callbacks.write(callbacks.context, ID, value, 1);
 80120d4:	462a      	mov	r2, r5
 80120d6:	4641      	mov	r1, r8
 80120d8:	4650      	mov	r0, sl
 80120da:	47c8      	blx	r9
 80120dc:	f88d 000f 	strb.w	r0, [sp, #15]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 80120e0:	9b01      	ldr	r3, [sp, #4]
 80120e2:	b123      	cbz	r3, 80120ee <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xf8>
 80120e4:	68e3      	ldr	r3, [r4, #12]
 80120e6:	b113      	cbz	r3, 80120ee <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xf8>
			osSemaphoreRelease(*(target_register->register_semaphore));
 80120e8:	6818      	ldr	r0, [r3, #0]
 80120ea:	f7fa fa57 	bl	800c59c <osSemaphoreRelease>
		osSemaphoreRelease(RegistersSemaphore);
 80120ee:	6830      	ldr	r0, [r6, #0]
 80120f0:	f7fa fa54 	bl	800c59c <osSemaphoreRelease>
		return success;
 80120f4:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80120f8:	e79a      	b.n	8012030 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x3a>
	else if (__new_size < size())
 80120fa:	d2dd      	bcs.n	80120b8 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xc2>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 80120fc:	eb03 0387 	add.w	r3, r3, r7, lsl #2
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8012100:	4298      	cmp	r0, r3
 8012102:	d0d9      	beq.n	80120b8 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xc2>
	    this->_M_impl._M_finish = __pos;
 8012104:	f8cb 3004 	str.w	r3, [fp, #4]
 8012108:	e7d6      	b.n	80120b8 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xc2>
					(*register_vector)[index] = value[index];
 801210a:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 801210e:	f8db 1000 	ldr.w	r1, [fp]
 8012112:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
				for (uint16_t index = 0; index < length; index++) {
 8012116:	3301      	adds	r3, #1
 8012118:	e7cf      	b.n	80120ba <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xc4>
			      _Category>::__copy_m(__first, __last, __result);
 801211a:	465a      	mov	r2, fp
 801211c:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8012120:	4628      	mov	r0, r5
 8012122:	f7ff fe97 	bl	8011e54 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8012126:	e7cb      	b.n	80120c0 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xca>
				*(callbacks.pointer) = *value;
 8012128:	682b      	ldr	r3, [r5, #0]
 801212a:	f8cb 3000 	str.w	r3, [fp]
 801212e:	e7c7      	b.n	80120c0 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xca>
					success = callbacks.write(callbacks.context, ID, value, 1);
 8012130:	2301      	movs	r3, #1
 8012132:	e7cf      	b.n	80120d4 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xde>

08012134 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t>:
uint16_t Communication::ProcessWrite(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 8012134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012138:	b091      	sub	sp, #68	@ 0x44
 801213a:	4605      	mov	r5, r0
 801213c:	4691      	mov	r9, r2
 801213e:	4608      	mov	r0, r1
 8012140:	af02      	add	r7, sp, #8
 8012142:	469a      	mov	sl, r3
		T value = ExtractSingle<T>(message.payload, start_index, &success);
 8012144:	3104      	adds	r1, #4
uint16_t Communication::ProcessWrite(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 8012146:	f8d7 b060 	ldr.w	fp, [r7, #96]	@ 0x60
 801214a:	f107 060b 	add.w	r6, r7, #11
 801214e:	f8b7 4064 	ldrh.w	r4, [r7, #100]	@ 0x64
	if (not element.element_register.isArray) {
 8012152:	f89b 8003 	ldrb.w	r8, [fp, #3]
 8012156:	f1b8 0f00 	cmp.w	r8, #0
 801215a:	d173      	bne.n	8012244 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x110>
		T value = ExtractSingle<T>(message.payload, start_index, &success);
 801215c:	f107 0020 	add.w	r0, r7, #32
 8012160:	f7ee fe08 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8012164:	4632      	mov	r2, r6
 8012166:	4621      	mov	r1, r4
 8012168:	f107 0020 	add.w	r0, r7, #32
 801216c:	f7fc fddd 	bl	800ed2a <_ZN13Communication13ExtractSingleImEET_St6vectorIhSaIhEEtPb.isra.0>
 8012170:	6178      	str	r0, [r7, #20]
      }
 8012172:	f107 0020 	add.w	r0, r7, #32
 8012176:	f7ee fd4d 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 801217a:	7afb      	ldrb	r3, [r7, #11]
 801217c:	b153      	cbz	r3, 8012194 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x60>
			success = registers->WriteRegister<T>(element.element_register.address, &value);
 801217e:	2301      	movs	r3, #1
 8012180:	f8bb 1000 	ldrh.w	r1, [fp]
 8012184:	f107 0214 	add.w	r2, r7, #20
 8012188:	9300      	str	r3, [sp, #0]
 801218a:	4643      	mov	r3, r8
 801218c:	6868      	ldr	r0, [r5, #4]
 801218e:	f7ff ff32 	bl	8011ff6 <_ZN9Registers13WriteRegisterImEEbtPT_tb>
 8012192:	72f8      	strb	r0, [r7, #11]
		length_to_extract = 1;
 8012194:	f04f 0801 	mov.w	r8, #1
	if (success)
 8012198:	7af9      	ldrb	r1, [r7, #11]
		response_content.data = std::vector<uint8_t>{OK};
 801219a:	f10a 060c 	add.w	r6, sl, #12
 801219e:	f107 0314 	add.w	r3, r7, #20
 80121a2:	f107 020c 	add.w	r2, r7, #12
	if (success)
 80121a6:	2900      	cmp	r1, #0
 80121a8:	f000 80cd 	beq.w	8012346 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x212>
		response_content.data = std::vector<uint8_t>{OK};
 80121ac:	2100      	movs	r1, #0
 80121ae:	60fb      	str	r3, [r7, #12]
 80121b0:	2301      	movs	r3, #1
 80121b2:	7539      	strb	r1, [r7, #20]
 80121b4:	613b      	str	r3, [r7, #16]
 80121b6:	ca06      	ldmia	r2, {r1, r2}
		response_content.data = std::vector<uint8_t>{ERROR};
 80121b8:	f107 0020 	add.w	r0, r7, #32
 80121bc:	f7fe ffdc 	bl	8011178 <_ZNSt6vectorIhSaIhEEC2ESt16initializer_listIhERKS0_.constprop.0.isra.0>
 80121c0:	f107 0120 	add.w	r1, r7, #32
 80121c4:	4630      	mov	r0, r6
 80121c6:	f7fc feea 	bl	800ef9e <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 80121ca:	f107 0020 	add.w	r0, r7, #32
 80121ce:	f7ee fd21 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not BuildPayload(response, response_content)) {
 80121d2:	4651      	mov	r1, sl
 80121d4:	f107 0020 	add.w	r0, r7, #32
 80121d8:	f7fd fb58 	bl	800f88c <_ZN14MessageElementC1ERKS_>
 80121dc:	f107 0220 	add.w	r2, r7, #32
 80121e0:	4649      	mov	r1, r9
 80121e2:	4628      	mov	r0, r5
 80121e4:	f7ff f8aa 	bl	801133c <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 80121e8:	4606      	mov	r6, r0
 80121ea:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80121ee:	f7ee fd11 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80121f2:	bb06      	cbnz	r6, 8012236 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x102>
		Send(*response);
 80121f4:	4649      	mov	r1, r9
 80121f6:	f107 0020 	add.w	r0, r7, #32
 80121fa:	f7fd fb5a 	bl	800f8b2 <_ZN13MessageHeaderC1ERKS_>
 80121fe:	f107 0120 	add.w	r1, r7, #32
 8012202:	4628      	mov	r0, r5
 8012204:	f7fd fc44 	bl	800fa90 <_ZN13Communication4SendE13MessageHeader>
 8012208:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 801220c:	f7ee fd02 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		response->payload.clear();
 8012210:	f109 0004 	add.w	r0, r9, #4
 8012214:	f7fc feda 	bl	800efcc <_ZNSt6vectorIhSaIhEE5clearEv>
		BuildPayload(response, response_content);
 8012218:	4651      	mov	r1, sl
 801221a:	f107 0020 	add.w	r0, r7, #32
 801221e:	f7fd fb35 	bl	800f88c <_ZN14MessageElementC1ERKS_>
 8012222:	f107 0220 	add.w	r2, r7, #32
 8012226:	4649      	mov	r1, r9
 8012228:	4628      	mov	r0, r5
 801222a:	f7ff f887 	bl	801133c <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 801222e:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8012232:	f7ee fcef 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return start_index + sizeof(T) * length_to_extract;
 8012236:	eb04 0088 	add.w	r0, r4, r8, lsl #2
}
 801223a:	373c      	adds	r7, #60	@ 0x3c
 801223c:	b280      	uxth	r0, r0
 801223e:	46bd      	mov	sp, r7
 8012240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (element.element_register.isArray && element.element_register.length > 0) {
 8012244:	f8bb 8004 	ldrh.w	r8, [fp, #4]
 8012248:	f1b8 0f00 	cmp.w	r8, #0
 801224c:	d02a      	beq.n	80122a4 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x170>
		T values[length_to_extract];
 801224e:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8012252:	466a      	mov	r2, sp
	} else if (element.element_register.isArray && element.element_register.length == 0) {
 8012254:	f8c7 d000 	str.w	sp, [r7]
		ExtractArray<T>(values, message.payload, start_index, length_to_extract, &success);
 8012258:	f107 0020 	add.w	r0, r7, #32
		T values[length_to_extract];
 801225c:	3307      	adds	r3, #7
 801225e:	08db      	lsrs	r3, r3, #3
 8012260:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 8012264:	469d      	mov	sp, r3
 8012266:	ab02      	add	r3, sp, #8
 8012268:	607b      	str	r3, [r7, #4]
		ExtractArray<T>(values, message.payload, start_index, length_to_extract, &success);
 801226a:	f7ee fd83 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 801226e:	9600      	str	r6, [sp, #0]
 8012270:	4643      	mov	r3, r8
 8012272:	4622      	mov	r2, r4
 8012274:	f107 0120 	add.w	r1, r7, #32
 8012278:	6878      	ldr	r0, [r7, #4]
 801227a:	f7fe fb5d 	bl	8010938 <_ZN13Communication12ExtractArrayImEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 801227e:	f107 0020 	add.w	r0, r7, #32
 8012282:	f7ee fcc7 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8012286:	7afb      	ldrb	r3, [r7, #11]
 8012288:	b14b      	cbz	r3, 801229e <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x16a>
			success = registers->WriteRegister<T>(element.element_register.address, values);
 801228a:	2301      	movs	r3, #1
 801228c:	f8bb 1000 	ldrh.w	r1, [fp]
 8012290:	9300      	str	r3, [sp, #0]
 8012292:	2300      	movs	r3, #0
 8012294:	687a      	ldr	r2, [r7, #4]
 8012296:	6868      	ldr	r0, [r5, #4]
 8012298:	f7ff fead 	bl	8011ff6 <_ZN9Registers13WriteRegisterImEEbtPT_tb>
 801229c:	72f8      	strb	r0, [r7, #11]
 801229e:	f8d7 d000 	ldr.w	sp, [r7]
	} else if (element.element_register.isArray && element.element_register.length == 0) {
 80122a2:	e779      	b.n	8012198 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x64>
		length_to_extract = message.payload[start_index];
 80122a4:	6843      	ldr	r3, [r0, #4]
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 80122a6:	f107 0020 	add.w	r0, r7, #32
		length_to_extract = message.payload[start_index];
 80122aa:	f813 8004 	ldrb.w	r8, [r3, r4]
		start_index++;
 80122ae:	3401      	adds	r4, #1
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 80122b0:	f7ee fd60 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80122b4:	f107 0120 	add.w	r1, r7, #32
		start_index++;
 80122b8:	b2a4      	uxth	r4, r4
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 80122ba:	4643      	mov	r3, r8
 80122bc:	f107 0014 	add.w	r0, r7, #20
 80122c0:	9600      	str	r6, [sp, #0]
 80122c2:	4622      	mov	r2, r4
 80122c4:	f7fe fade 	bl	8010884 <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 80122c8:	f107 0020 	add.w	r0, r7, #32
 80122cc:	f7ee fca2 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 80122d0:	7afb      	ldrb	r3, [r7, #11]
 80122d2:	b1fb      	cbz	r3, 8012314 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x1e0>
			success = registers->WriteVectorRegister<T>(element.element_register.address, values); // previously &values
 80122d4:	686e      	ldr	r6, [r5, #4]
 80122d6:	f107 0114 	add.w	r1, r7, #20
 80122da:	f8bb b000 	ldrh.w	fp, [fp]
 80122de:	f107 0020 	add.w	r0, r7, #32
 80122e2:	f7ff fdc5 	bl	8011e70 <_ZNSt6vectorImSaImEEC1ERKS1_>
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80122e6:	f04f 31ff 	mov.w	r1, #4294967295
 80122ea:	6830      	ldr	r0, [r6, #0]
 80122ec:	f7fa f922 	bl	800c534 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80122f0:	f107 020c 	add.w	r2, r7, #12
 80122f4:	4659      	mov	r1, fp
 80122f6:	4630      	mov	r0, r6
 80122f8:	f005 ff29 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80122fc:	7b3a      	ldrb	r2, [r7, #12]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80122fe:	4603      	mov	r3, r0
		osSemaphoreRelease(RegistersSemaphore);
 8012300:	6830      	ldr	r0, [r6, #0]
	if (!success) {
 8012302:	b962      	cbnz	r2, 801231e <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x1ea>
		osSemaphoreRelease(RegistersSemaphore);
 8012304:	f7fa f94a 	bl	800c59c <osSemaphoreRelease>
		return false;
 8012308:	2000      	movs	r0, #0
 801230a:	72f8      	strb	r0, [r7, #11]
 801230c:	f107 0020 	add.w	r0, r7, #32
 8012310:	f7fd f935 	bl	800f57e <_ZNSt12_Vector_baseImSaImEED1Ev>
 8012314:	f107 0014 	add.w	r0, r7, #20
 8012318:	f7fd f931 	bl	800f57e <_ZNSt12_Vector_baseImSaImEED1Ev>
 801231c:	e73c      	b.n	8012198 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x64>
	if (!(target_register->register_info.isArray && target_register->register_info.length == 0)) {
 801231e:	795a      	ldrb	r2, [r3, #5]
 8012320:	2a00      	cmp	r2, #0
 8012322:	d0ef      	beq.n	8012304 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x1d0>
 8012324:	88db      	ldrh	r3, [r3, #6]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d1ec      	bne.n	8012304 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x1d0>
	osSemaphoreRelease(RegistersSemaphore);
 801232a:	f7fa f937 	bl	800c59c <osSemaphoreRelease>
	return WriteRegister(ID, value.data(), value.size(), use_semaphore);
 801232e:	2101      	movs	r1, #1
 8012330:	4630      	mov	r0, r6
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012332:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8012336:	9100      	str	r1, [sp, #0]
 8012338:	4659      	mov	r1, fp
 801233a:	1a9b      	subs	r3, r3, r2
 801233c:	f3c3 038f 	ubfx	r3, r3, #2, #16
 8012340:	f7ff fe59 	bl	8011ff6 <_ZN9Registers13WriteRegisterImEEbtPT_tb>
 8012344:	e7e1      	b.n	801230a <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x1d6>
		response_content.data = std::vector<uint8_t>{ERROR};
 8012346:	21ff      	movs	r1, #255	@ 0xff
 8012348:	617a      	str	r2, [r7, #20]
 801234a:	2201      	movs	r2, #1
 801234c:	7339      	strb	r1, [r7, #12]
 801234e:	61ba      	str	r2, [r7, #24]
 8012350:	e893 0006 	ldmia.w	r3, {r1, r2}
 8012354:	e730      	b.n	80121b8 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x84>

08012356 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt>:
uint16_t Communication::ProcessCommand(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 8012356:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801235a:	468b      	mov	fp, r1
 801235c:	b0b1      	sub	sp, #196	@ 0xc4
 801235e:	4607      	mov	r7, r0
 8012360:	4698      	mov	r8, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012362:	2600      	movs	r6, #0
	response_content.ack = true;
 8012364:	f04f 0a01 	mov.w	sl, #1
uint16_t Communication::ProcessCommand(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 8012368:	4615      	mov	r5, r2
 801236a:	f8bd 90e8 	ldrh.w	r9, [sp, #232]	@ 0xe8
 801236e:	961d      	str	r6, [sp, #116]	@ 0x74
 8012370:	ac2a      	add	r4, sp, #168	@ 0xa8
	response_content.ack = true;
 8012372:	f8ad a066 	strh.w	sl, [sp, #102]	@ 0x66
	response_content.element_register = element.element_register;
 8012376:	e9d3 0100 	ldrd	r0, r1, [r3]
	response_content.access = element.access;
 801237a:	7a1b      	ldrb	r3, [r3, #8]
	response_content.element_register = element.element_register;
 801237c:	9018      	str	r0, [sp, #96]	@ 0x60
 801237e:	f8ad 1064 	strh.w	r1, [sp, #100]	@ 0x64
	CommunicationLED(leds, message.interface);
 8012382:	6938      	ldr	r0, [r7, #16]
 8012384:	f89b 1000 	ldrb.w	r1, [fp]
	response_content.access = element.access;
 8012388:	f88d 3068 	strb.w	r3, [sp, #104]	@ 0x68
 801238c:	e9cd 661b 	strd	r6, r6, [sp, #108]	@ 0x6c
	CommunicationLED(leds, message.interface);
 8012390:	f7fc fa0d 	bl	800e7ae <_Z16CommunicationLEDP4LEDSh>
	if (element.access == WRITE) {
 8012394:	f898 3008 	ldrb.w	r3, [r8, #8]
		return ProcessWrite<T>(message, response, response_content, element, start_index);
 8012398:	4659      	mov	r1, fp
	if (element.access == WRITE) {
 801239a:	bb1b      	cbnz	r3, 80123e4 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x8e>
		return ProcessWrite<T>(message, response, response_content, element, start_index);
 801239c:	a81e      	add	r0, sp, #120	@ 0x78
 801239e:	f7fd fa88 	bl	800f8b2 <_ZN13MessageHeaderC1ERKS_>
 80123a2:	a918      	add	r1, sp, #96	@ 0x60
 80123a4:	a824      	add	r0, sp, #144	@ 0x90
 80123a6:	f7fd fa71 	bl	800f88c <_ZN14MessageElementC1ERKS_>
 80123aa:	4641      	mov	r1, r8
 80123ac:	4620      	mov	r0, r4
 80123ae:	f7fd fa6d 	bl	800f88c <_ZN14MessageElementC1ERKS_>
 80123b2:	ab24      	add	r3, sp, #144	@ 0x90
 80123b4:	462a      	mov	r2, r5
 80123b6:	a91e      	add	r1, sp, #120	@ 0x78
 80123b8:	4638      	mov	r0, r7
 80123ba:	e9cd 4900 	strd	r4, r9, [sp]
 80123be:	f7ff feb9 	bl	8012134 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t>
 80123c2:	4681      	mov	r9, r0
      }
 80123c4:	a82d      	add	r0, sp, #180	@ 0xb4
 80123c6:	f7ee fc25 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80123ca:	a827      	add	r0, sp, #156	@ 0x9c
 80123cc:	f7ee fc22 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80123d0:	a81f      	add	r0, sp, #124	@ 0x7c
 80123d2:	f7ee fc1f 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80123d6:	a81b      	add	r0, sp, #108	@ 0x6c
 80123d8:	f7ee fc1c 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 80123dc:	4648      	mov	r0, r9
 80123de:	b031      	add	sp, #196	@ 0xc4
 80123e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return ProcessRead<T>(message, response, response_content, element, start_index);
 80123e4:	a813      	add	r0, sp, #76	@ 0x4c
 80123e6:	f7fd fa64 	bl	800f8b2 <_ZN13MessageHeaderC1ERKS_>
 80123ea:	a918      	add	r1, sp, #96	@ 0x60
 80123ec:	a81e      	add	r0, sp, #120	@ 0x78
 80123ee:	f7fd fa4d 	bl	800f88c <_ZN14MessageElementC1ERKS_>
 80123f2:	4641      	mov	r1, r8
 80123f4:	a824      	add	r0, sp, #144	@ 0x90
 80123f6:	f7fd fa49 	bl	800f88c <_ZN14MessageElementC1ERKS_>
	*success = registers->ReadRegister<T>(element->element_register.address, &register_read, &length);
 80123fa:	f8cd a000 	str.w	sl, [sp]
 80123fe:	f10d 0316 	add.w	r3, sp, #22
 8012402:	aa06      	add	r2, sp, #24
 8012404:	f8bd 1090 	ldrh.w	r1, [sp, #144]	@ 0x90
 8012408:	6878      	ldr	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 801240a:	9609      	str	r6, [sp, #36]	@ 0x24
 801240c:	e9cd 6607 	strd	r6, r6, [sp, #28]
 8012410:	f7ff fd47 	bl	8011ea2 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb>
	if (not *success)
 8012414:	4680      	mov	r8, r0
 8012416:	2800      	cmp	r0, #0
 8012418:	d040      	beq.n	801249c <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x146>
	std::vector<T> register_read_vector_cast = BuildTVector(*element, &register_read);
 801241a:	a924      	add	r1, sp, #144	@ 0x90
 801241c:	4620      	mov	r0, r4
 801241e:	f7fd fa35 	bl	800f88c <_ZN14MessageElementC1ERKS_>
	if (not element.element_register.isArray) {
 8012422:	f89d 30ab 	ldrb.w	r3, [sp, #171]	@ 0xab
 8012426:	960c      	str	r6, [sp, #48]	@ 0x30
 8012428:	e9cd 660a 	strd	r6, r6, [sp, #40]	@ 0x28
 801242c:	2b00      	cmp	r3, #0
 801242e:	f040 808b 	bne.w	8012548 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x1f2>
		vector = std::vector<T>{*data};
 8012432:	9b06      	ldr	r3, [sp, #24]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8012434:	4650      	mov	r0, sl
 8012436:	930d      	str	r3, [sp, #52]	@ 0x34
 8012438:	f7fc fafe 	bl	800ea38 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0>
			      _Category>::__copy_m(__first, __last, __result);
 801243c:	a90e      	add	r1, sp, #56	@ 0x38
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801243e:	1d03      	adds	r3, r0, #4
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8012440:	4602      	mov	r2, r0
 8012442:	9010      	str	r0, [sp, #64]	@ 0x40
 8012444:	a80d      	add	r0, sp, #52	@ 0x34
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8012446:	9312      	str	r3, [sp, #72]	@ 0x48
 8012448:	f7ff fd04 	bl	8011e54 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>
		vector = std::vector<T>(data, data + element.element_register.length);
 801244c:	a910      	add	r1, sp, #64	@ 0x40
	  this->_M_impl._M_finish =
 801244e:	9011      	str	r0, [sp, #68]	@ 0x44
 8012450:	a80a      	add	r0, sp, #40	@ 0x28
 8012452:	f7fd f89f 	bl	800f594 <_ZNSt6vectorImSaImEEaSEOS1_.isra.0>
      }
 8012456:	a810      	add	r0, sp, #64	@ 0x40
 8012458:	f7fd f891 	bl	800f57e <_ZNSt12_Vector_baseImSaImEED1Ev>
 801245c:	a82d      	add	r0, sp, #180	@ 0xb4
	: _M_start(), _M_finish(), _M_end_of_storage()
 801245e:	2600      	movs	r6, #0
      }
 8012460:	f7ee fbd8 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	data = BuildVector<T>(register_read_vector_cast);
 8012464:	a90a      	add	r1, sp, #40	@ 0x28
 8012466:	a810      	add	r0, sp, #64	@ 0x40
 8012468:	f7ff fd02 	bl	8011e70 <_ZNSt6vectorImSaImEEC1ERKS1_>
      : _M_current(__i) { }
 801246c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801246e:	f8dd a040 	ldr.w	sl, [sp, #64]	@ 0x40
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012472:	960f      	str	r6, [sp, #60]	@ 0x3c
 8012474:	9302      	str	r3, [sp, #8]
 8012476:	e9cd 660d 	strd	r6, r6, [sp, #52]	@ 0x34
    for (T input : inputs) {
 801247a:	9b02      	ldr	r3, [sp, #8]
 801247c:	4553      	cmp	r3, sl
 801247e:	f040 808d 	bne.w	801259c <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x246>
	data = BuildVector<T>(register_read_vector_cast);
 8012482:	a90d      	add	r1, sp, #52	@ 0x34
 8012484:	a807      	add	r0, sp, #28
 8012486:	f7fc fd8a 	bl	800ef9e <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 801248a:	a80d      	add	r0, sp, #52	@ 0x34
 801248c:	f7ee fbc2 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012490:	a810      	add	r0, sp, #64	@ 0x40
 8012492:	f7fd f874 	bl	800f57e <_ZNSt12_Vector_baseImSaImEED1Ev>
 8012496:	a80a      	add	r0, sp, #40	@ 0x28
 8012498:	f7fd f871 	bl	800f57e <_ZNSt12_Vector_baseImSaImEED1Ev>
	response_content.data = ReadElement<T>(&element, &success);
 801249c:	a821      	add	r0, sp, #132	@ 0x84
 801249e:	a907      	add	r1, sp, #28
 80124a0:	f7fc fd7d 	bl	800ef9e <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 80124a4:	a807      	add	r0, sp, #28
 80124a6:	f7ee fbb5 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not success) {
 80124aa:	f1b8 0f00 	cmp.w	r8, #0
 80124ae:	d114      	bne.n	80124da <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x184>
		response_content.data = std::vector<uint8_t>{ERROR};
 80124b0:	22ff      	movs	r2, #255	@ 0xff
		response_content.command = true; // this is an error flag for a read ack
 80124b2:	2301      	movs	r3, #1
		response_content.data = std::vector<uint8_t>{ERROR};
 80124b4:	4620      	mov	r0, r4
 80124b6:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
 80124ba:	aa0d      	add	r2, sp, #52	@ 0x34
		response_content.command = true; // this is an error flag for a read ack
 80124bc:	f88d 307f 	strb.w	r3, [sp, #127]	@ 0x7f
		response_content.data = std::vector<uint8_t>{ERROR};
 80124c0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80124c4:	461a      	mov	r2, r3
 80124c6:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80124c8:	f7fe fe56 	bl	8011178 <_ZNSt6vectorIhSaIhEEC2ESt16initializer_listIhERKS0_.constprop.0.isra.0>
 80124cc:	a821      	add	r0, sp, #132	@ 0x84
 80124ce:	4621      	mov	r1, r4
 80124d0:	f7fc fd65 	bl	800ef9e <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 80124d4:	4620      	mov	r0, r4
 80124d6:	f7ee fb9d 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not BuildPayload(response, response_content) && response->payload.size() > 0) { // if no space available, send the data and then rebuild a new response
 80124da:	a91e      	add	r1, sp, #120	@ 0x78
 80124dc:	4620      	mov	r0, r4
 80124de:	f7fd f9d5 	bl	800f88c <_ZN14MessageElementC1ERKS_>
 80124e2:	4622      	mov	r2, r4
 80124e4:	4629      	mov	r1, r5
 80124e6:	4638      	mov	r0, r7
 80124e8:	f7fe ff28 	bl	801133c <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 80124ec:	2800      	cmp	r0, #0
 80124ee:	f040 8081 	bne.w	80125f4 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x29e>
 80124f2:	e9d5 3601 	ldrd	r3, r6, [r5, #4]
 80124f6:	1af6      	subs	r6, r6, r3
 80124f8:	bf18      	it	ne
 80124fa:	2601      	movne	r6, #1
 80124fc:	a82d      	add	r0, sp, #180	@ 0xb4
 80124fe:	f7ee fb89 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012502:	b1ce      	cbz	r6, 8012538 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x1e2>
		Send(*response);
 8012504:	4629      	mov	r1, r5
 8012506:	4620      	mov	r0, r4
 8012508:	f7fd f9d3 	bl	800f8b2 <_ZN13MessageHeaderC1ERKS_>
 801250c:	4621      	mov	r1, r4
 801250e:	4638      	mov	r0, r7
 8012510:	f7fd fabe 	bl	800fa90 <_ZN13Communication4SendE13MessageHeader>
 8012514:	a82b      	add	r0, sp, #172	@ 0xac
 8012516:	f7ee fb7d 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		response->payload.clear();
 801251a:	1d28      	adds	r0, r5, #4
 801251c:	f7fc fd56 	bl	800efcc <_ZNSt6vectorIhSaIhEE5clearEv>
		BuildPayload(response, response_content);
 8012520:	a91e      	add	r1, sp, #120	@ 0x78
 8012522:	4620      	mov	r0, r4
 8012524:	f7fd f9b2 	bl	800f88c <_ZN14MessageElementC1ERKS_>
 8012528:	4622      	mov	r2, r4
 801252a:	4629      	mov	r1, r5
 801252c:	4638      	mov	r0, r7
 801252e:	f7fe ff05 	bl	801133c <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8012532:	a82d      	add	r0, sp, #180	@ 0xb4
 8012534:	f7ee fb6e 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012538:	a827      	add	r0, sp, #156	@ 0x9c
 801253a:	f7ee fb6b 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801253e:	a821      	add	r0, sp, #132	@ 0x84
 8012540:	f7ee fb68 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012544:	a814      	add	r0, sp, #80	@ 0x50
 8012546:	e744      	b.n	80123d2 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x7c>
	} else if (element.element_register.isArray && element.element_register.length > 0)
 8012548:	f8bd 00ac 	ldrh.w	r0, [sp, #172]	@ 0xac
 801254c:	b150      	cbz	r0, 8012564 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x20e>
		vector = std::vector<T>(data, data + element.element_register.length);
 801254e:	0086      	lsls	r6, r0, #2
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8012550:	f7fc fa72 	bl	800ea38 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0>
 8012554:	4602      	mov	r2, r0
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8012556:	1983      	adds	r3, r0, r6
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8012558:	9010      	str	r0, [sp, #64]	@ 0x40
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801255a:	9312      	str	r3, [sp, #72]	@ 0x48
 801255c:	ab06      	add	r3, sp, #24
 801255e:	1999      	adds	r1, r3, r6
 8012560:	4618      	mov	r0, r3
 8012562:	e771      	b.n	8012448 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0xf2>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012564:	e9dd b106 	ldrd	fp, r1, [sp, #24]
	  if (__xlen > capacity())
 8012568:	ebb1 0a0b 	subs.w	sl, r1, fp
 801256c:	d011      	beq.n	8012592 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x23c>
	  pointer __result = this->_M_allocate(__n);
 801256e:	ea4f 00aa 	mov.w	r0, sl, asr #2
 8012572:	9102      	str	r1, [sp, #8]
 8012574:	f7fc fa60 	bl	800ea38 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0>
 8012578:	4606      	mov	r6, r0
 801257a:	4602      	mov	r2, r0
 801257c:	9902      	ldr	r1, [sp, #8]
 801257e:	4658      	mov	r0, fp
 8012580:	f7ff fc68 	bl	8011e54 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>
	      this->_M_impl._M_start = __tmp;
 8012584:	960a      	str	r6, [sp, #40]	@ 0x28
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8012586:	4456      	add	r6, sl
 8012588:	960c      	str	r6, [sp, #48]	@ 0x30
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 801258a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801258c:	4453      	add	r3, sl
 801258e:	930b      	str	r3, [sp, #44]	@ 0x2c
      return *this;
 8012590:	e764      	b.n	801245c <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x106>
 8012592:	4652      	mov	r2, sl
 8012594:	4658      	mov	r0, fp
 8012596:	f7ff fc5d 	bl	8011e54 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801259a:	e7f6      	b.n	801258a <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x234>
    for (T input : inputs) {
 801259c:	f85a 2b04 	ldr.w	r2, [sl], #4
    std::memcpy(&reinterpreted_input, &input, sizeof(T)); // this is mandatory to get rid of the memory alignment problem. A simple cast can't work here
 80125a0:	f04f 0b18 	mov.w	fp, #24
	: _M_start(), _M_finish(), _M_end_of_storage()
 80125a4:	962c      	str	r6, [sp, #176]	@ 0xb0
 80125a6:	e9cd 662a 	strd	r6, r6, [sp, #168]	@ 0xa8
		data.push_back((uint8_t) ((reinterpreted_input >> ((type_length - 1 - index) << 3)) & 0xFF)); // previously (8 * (type_length - 1 - index))) & 0xFF))
 80125aa:	f1cb 0c20 	rsb	ip, fp, #32
 80125ae:	fa22 f10b 	lsr.w	r1, r2, fp
 80125b2:	f1ab 0020 	sub.w	r0, fp, #32
	for (uint8_t index = 0; index < type_length; index++) {
 80125b6:	f1ab 0b08 	sub.w	fp, fp, #8
		data.push_back((uint8_t) ((reinterpreted_input >> ((type_length - 1 - index) << 3)) & 0xFF)); // previously (8 * (type_length - 1 - index))) & 0xFF))
 80125ba:	fa06 fc0c 	lsl.w	ip, r6, ip
 80125be:	9203      	str	r2, [sp, #12]
 80125c0:	fa26 f000 	lsr.w	r0, r6, r0
 80125c4:	ea41 010c 	orr.w	r1, r1, ip
 80125c8:	4301      	orrs	r1, r0
      { emplace_back(std::move(__x)); }
 80125ca:	4620      	mov	r0, r4
 80125cc:	f88d 1015 	strb.w	r1, [sp, #21]
 80125d0:	f10d 0115 	add.w	r1, sp, #21
 80125d4:	f7fd f82e 	bl	800f634 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
	for (uint8_t index = 0; index < type_length; index++) {
 80125d8:	f11b 0f08 	cmn.w	fp, #8
 80125dc:	9a03      	ldr	r2, [sp, #12]
 80125de:	d1e4      	bne.n	80125aa <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x254>
        data.insert(data.end(), single.begin(), single.end());
 80125e0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80125e2:	a80d      	add	r0, sp, #52	@ 0x34
 80125e4:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	@ 0xa8
 80125e8:	f7fe fe34 	bl	8011254 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_>
      }
 80125ec:	4620      	mov	r0, r4
 80125ee:	f7ee fb11 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return *this;
 80125f2:	e742      	b.n	801247a <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x124>
	if (not BuildPayload(response, response_content) && response->payload.size() > 0) { // if no space available, send the data and then rebuild a new response
 80125f4:	2600      	movs	r6, #0
 80125f6:	e781      	b.n	80124fc <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x1a6>

080125f8 <_ZN13Communication14ProcessElementImEEt13MessageHeaderPS1_14MessageElementt>:
uint16_t Communication::ProcessElement(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 80125f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80125fa:	461c      	mov	r4, r3
 80125fc:	b08f      	sub	sp, #60	@ 0x3c
	if (not element.ack && element.command) {
 80125fe:	799b      	ldrb	r3, [r3, #6]
uint16_t Communication::ProcessElement(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 8012600:	4605      	mov	r5, r0
 8012602:	4617      	mov	r7, r2
 8012604:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
	if (not element.ack && element.command) {
 8012608:	b9cb      	cbnz	r3, 801263e <_ZN13Communication14ProcessElementImEEt13MessageHeaderPS1_14MessageElementt+0x46>
 801260a:	79e3      	ldrb	r3, [r4, #7]
		return ProcessCommand<T>(message, response, element, start_index);
 801260c:	a803      	add	r0, sp, #12
	if (not element.ack && element.command) {
 801260e:	b323      	cbz	r3, 801265a <_ZN13Communication14ProcessElementImEEt13MessageHeaderPS1_14MessageElementt+0x62>
		return ProcessCommand<T>(message, response, element, start_index);
 8012610:	f7fd f94f 	bl	800f8b2 <_ZN13MessageHeaderC1ERKS_>
 8012614:	4621      	mov	r1, r4
 8012616:	a808      	add	r0, sp, #32
 8012618:	f7fd f938 	bl	800f88c <_ZN14MessageElementC1ERKS_>
 801261c:	ab08      	add	r3, sp, #32
 801261e:	463a      	mov	r2, r7
 8012620:	a903      	add	r1, sp, #12
 8012622:	4628      	mov	r0, r5
 8012624:	9600      	str	r6, [sp, #0]
 8012626:	f7ff fe96 	bl	8012356 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt>
		return ProcessSubscriber<T>(message, element, start_index);
 801262a:	4604      	mov	r4, r0
 801262c:	a80b      	add	r0, sp, #44	@ 0x2c
 801262e:	f7ee faf1 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012632:	a804      	add	r0, sp, #16
 8012634:	f7ee faee 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 8012638:	4620      	mov	r0, r4
 801263a:	b00f      	add	sp, #60	@ 0x3c
 801263c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ProcessService<T>(message, element, start_index);
 801263e:	a803      	add	r0, sp, #12
 8012640:	f7fd f937 	bl	800f8b2 <_ZN13MessageHeaderC1ERKS_>
 8012644:	4621      	mov	r1, r4
 8012646:	a808      	add	r0, sp, #32
 8012648:	f7fd f920 	bl	800f88c <_ZN14MessageElementC1ERKS_>
 801264c:	4633      	mov	r3, r6
 801264e:	aa08      	add	r2, sp, #32
 8012650:	a903      	add	r1, sp, #12
 8012652:	4628      	mov	r0, r5
 8012654:	f7fe fa1b 	bl	8010a8e <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt>
 8012658:	e7e7      	b.n	801262a <_ZN13Communication14ProcessElementImEEt13MessageHeaderPS1_14MessageElementt+0x32>
		return ProcessSubscriber<T>(message, element, start_index);
 801265a:	f7fd f92a 	bl	800f8b2 <_ZN13MessageHeaderC1ERKS_>
 801265e:	4621      	mov	r1, r4
 8012660:	a808      	add	r0, sp, #32
 8012662:	f7fd f913 	bl	800f88c <_ZN14MessageElementC1ERKS_>
 8012666:	4633      	mov	r3, r6
 8012668:	aa08      	add	r2, sp, #32
 801266a:	a903      	add	r1, sp, #12
 801266c:	4628      	mov	r0, r5
 801266e:	f7fe f98a 	bl	8010986 <_ZN13Communication17ProcessSubscriberImEEt13MessageHeader14MessageElementt>
 8012672:	e7da      	b.n	801262a <_ZN13Communication14ProcessElementImEEt13MessageHeaderPS1_14MessageElementt+0x32>

08012674 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPajEET_S3_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 8012674:	b510      	push	{r4, lr}
	  if (__n > 0)
 8012676:	460a      	mov	r2, r1
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 8012678:	4604      	mov	r4, r0
	  if (__n > 0)
 801267a:	b141      	cbz	r1, 801268e <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPajEET_S3_T0_+0x1a>
 801267c:	2100      	movs	r1, #0
      if (__n <= 0)
 801267e:	2a01      	cmp	r2, #1
 8012680:	f800 1b01 	strb.w	r1, [r0], #1
 8012684:	d005      	beq.n	8012692 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPajEET_S3_T0_+0x1e>
      std::__fill_a(__first, __first + __n, __value);
 8012686:	4414      	add	r4, r2
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 8012688:	3a01      	subs	r2, #1
 801268a:	f008 fc09 	bl	801aea0 <memset>
	}
 801268e:	4620      	mov	r0, r4
 8012690:	bd10      	pop	{r4, pc}
	      ++__first;
 8012692:	4604      	mov	r4, r0
 8012694:	e7fb      	b.n	801268e <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPajEET_S3_T0_+0x1a>
	...

08012698 <_ZNSt6vectorIaSaIaEE17_M_default_appendEj>:
    vector<_Tp, _Alloc>::
 8012698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801269c:	4604      	mov	r4, r0
      if (__n != 0)
 801269e:	460d      	mov	r5, r1
 80126a0:	b159      	cbz	r1, 80126ba <_ZNSt6vectorIaSaIaEE17_M_default_appendEj+0x22>
					 - this->_M_impl._M_finish);
 80126a2:	6882      	ldr	r2, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80126a4:	e9d0 7300 	ldrd	r7, r3, [r0]
 80126a8:	1ad2      	subs	r2, r2, r3
 80126aa:	eba3 0807 	sub.w	r8, r3, r7
	  if (__navail >= __n)
 80126ae:	428a      	cmp	r2, r1
 80126b0:	d305      	bcc.n	80126be <_ZNSt6vectorIaSaIaEE17_M_default_appendEj+0x26>
	__uninit_default_n(__first, __n);
 80126b2:	4618      	mov	r0, r3
 80126b4:	f7ff ffde 	bl	8012674 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPajEET_S3_T0_>
	      this->_M_impl._M_finish =
 80126b8:	6060      	str	r0, [r4, #4]
    }
 80126ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		_M_check_len(__n, "vector::_M_default_append");
 80126be:	4a11      	ldr	r2, [pc, #68]	@ (8012704 <_ZNSt6vectorIaSaIaEE17_M_default_appendEj+0x6c>)
 80126c0:	f7fd f887 	bl	800f7d2 <_ZNKSt6vectorIaSaIaEE12_M_check_lenEjPKc>
 80126c4:	4681      	mov	r9, r0
	      pointer __new_start(this->_M_allocate(__len));
 80126c6:	f7fc f9ac 	bl	800ea22 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>
 80126ca:	4629      	mov	r1, r5
 80126cc:	4606      	mov	r6, r0
 80126ce:	4440      	add	r0, r8
 80126d0:	f7ff ffd0 	bl	8012674 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPajEET_S3_T0_>
      if (__count > 0)
 80126d4:	f1b8 0f00 	cmp.w	r8, #0
 80126d8:	d00a      	beq.n	80126f0 <_ZNSt6vectorIaSaIaEE17_M_default_appendEj+0x58>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80126da:	4642      	mov	r2, r8
 80126dc:	4639      	mov	r1, r7
 80126de:	4630      	mov	r0, r6
 80126e0:	f008 fbc4 	bl	801ae6c <memmove>
			    this->_M_impl._M_end_of_storage - __old_start);
 80126e4:	68a1      	ldr	r1, [r4, #8]
 80126e6:	4638      	mov	r0, r7
 80126e8:	1bc9      	subs	r1, r1, r7
 80126ea:	f008 f863 	bl	801a7b4 <_ZdlPvj>
 80126ee:	e001      	b.n	80126f4 <_ZNSt6vectorIaSaIaEE17_M_default_appendEj+0x5c>
	if (__p)
 80126f0:	2f00      	cmp	r7, #0
 80126f2:	d1f7      	bne.n	80126e4 <_ZNSt6vectorIaSaIaEE17_M_default_appendEj+0x4c>
	      this->_M_impl._M_finish = __new_start + __size + __n;
 80126f4:	4445      	add	r5, r8
	      this->_M_impl._M_start = __new_start;
 80126f6:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_finish = __new_start + __size + __n;
 80126f8:	4435      	add	r5, r6
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 80126fa:	444e      	add	r6, r9
	      this->_M_impl._M_finish = __new_start + __size + __n;
 80126fc:	6065      	str	r5, [r4, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 80126fe:	60a6      	str	r6, [r4, #8]
    }
 8012700:	e7db      	b.n	80126ba <_ZNSt6vectorIaSaIaEE17_M_default_appendEj+0x22>
 8012702:	bf00      	nop
 8012704:	0801b406 	.word	0x0801b406

08012708 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8012708:	b510      	push	{r4, lr}
	  if (_Num)
 801270a:	1a0c      	subs	r4, r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 801270c:	4613      	mov	r3, r2
	  if (_Num)
 801270e:	d005      	beq.n	801271c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_+0x14>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8012710:	4601      	mov	r1, r0
 8012712:	4622      	mov	r2, r4
 8012714:	4618      	mov	r0, r3
 8012716:	f008 fba9 	bl	801ae6c <memmove>
 801271a:	4603      	mov	r3, r0
	}
 801271c:	1918      	adds	r0, r3, r4
 801271e:	bd10      	pop	{r4, pc}

08012720 <_ZNSt6vectorIaSaIaEEC1ERKS1_>:
      vector(const vector& __x)
 8012720:	b570      	push	{r4, r5, r6, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012722:	e9d1 3600 	ldrd	r3, r6, [r1]
      vector(const vector& __x)
 8012726:	4604      	mov	r4, r0
 8012728:	460d      	mov	r5, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801272a:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 801272c:	2300      	movs	r3, #0
 801272e:	e9c0 3300 	strd	r3, r3, [r0]
 8012732:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8012734:	4630      	mov	r0, r6
 8012736:	f7fc f974 	bl	800ea22 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801273a:	4406      	add	r6, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 801273c:	4602      	mov	r2, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801273e:	60a6      	str	r6, [r4, #8]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8012740:	e9c4 0000 	strd	r0, r0, [r4]
			      _Category>::__copy_m(__first, __last, __result);
 8012744:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012748:	f7ff ffde 	bl	8012708 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
	this->_M_impl._M_finish =
 801274c:	6060      	str	r0, [r4, #4]
      }
 801274e:	4620      	mov	r0, r4
 8012750:	bd70      	pop	{r4, r5, r6, pc}

08012752 <_ZN9Registers13WriteRegisterIaEEbtPT_tb>:
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 8012752:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012756:	b085      	sub	sp, #20
 8012758:	4606      	mov	r6, r0
 801275a:	4688      	mov	r8, r1
 801275c:	461f      	mov	r7, r3
 801275e:	f89d 3038 	ldrb.w	r3, [sp, #56]	@ 0x38
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8012762:	f04f 31ff 	mov.w	r1, #4294967295
 8012766:	6800      	ldr	r0, [r0, #0]
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 8012768:	4615      	mov	r5, r2
 801276a:	9301      	str	r3, [sp, #4]
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801276c:	f7f9 fee2 	bl	800c534 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8012770:	f10d 020f 	add.w	r2, sp, #15
 8012774:	4641      	mov	r1, r8
 8012776:	4630      	mov	r0, r6
 8012778:	f005 fce9 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801277c:	f89d 300f 	ldrb.w	r3, [sp, #15]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8012780:	4604      	mov	r4, r0
	if (!success) {
 8012782:	b933      	cbnz	r3, 8012792 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x40>
		osSemaphoreRelease(RegistersSemaphore);
 8012784:	6830      	ldr	r0, [r6, #0]
 8012786:	f7f9 ff09 	bl	800c59c <osSemaphoreRelease>
		return false;
 801278a:	2000      	movs	r0, #0
}
 801278c:	b005      	add	sp, #20
 801278e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8012792:	f10d 000f 	add.w	r0, sp, #15
 8012796:	f7fc f9c3 	bl	800eb20 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0>
	if (!success) {
 801279a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d0f0      	beq.n	8012784 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x32>
	if (target_register->register_info.type != registered_type) {
 80127a2:	7923      	ldrb	r3, [r4, #4]
 80127a4:	4283      	cmp	r3, r0
 80127a6:	d1ed      	bne.n	8012784 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x32>
	if (callbacks[target_register->register_info.type] == NULL) {
 80127a8:	3304      	adds	r3, #4
 80127aa:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 80127ae:	2800      	cmp	r0, #0
 80127b0:	d0e8      	beq.n	8012784 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x32>
	if (target_register->access.write) {
 80127b2:	7a23      	ldrb	r3, [r4, #8]
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d0e5      	beq.n	8012784 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x32>
		success = false;
 80127b8:	2300      	movs	r3, #0
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 80127ba:	8961      	ldrh	r1, [r4, #10]
		success = false;
 80127bc:	f88d 300f 	strb.w	r3, [sp, #15]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 80127c0:	f7fc ffc8 	bl	800f754 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE2atEj>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 80127c4:	9b01      	ldr	r3, [sp, #4]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 80127c6:	f8d0 9008 	ldr.w	r9, [r0, #8]
 80127ca:	e9d0 ba00 	ldrd	fp, sl, [r0]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 80127ce:	b133      	cbz	r3, 80127de <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x8c>
 80127d0:	68e3      	ldr	r3, [r4, #12]
 80127d2:	b123      	cbz	r3, 80127de <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x8c>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 80127d4:	f04f 31ff 	mov.w	r1, #4294967295
 80127d8:	6818      	ldr	r0, [r3, #0]
 80127da:	f7f9 feab 	bl	800c534 <osSemaphoreAcquire>
		if (target_register->mode.pointer) {
 80127de:	7823      	ldrb	r3, [r4, #0]
 80127e0:	b1db      	cbz	r3, 801281a <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xc8>
			success = true;
 80127e2:	2301      	movs	r3, #1
 80127e4:	f88d 300f 	strb.w	r3, [sp, #15]
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 80127e8:	7963      	ldrb	r3, [r4, #5]
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d045      	beq.n	801287a <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x128>
 80127ee:	88e1      	ldrh	r1, [r4, #6]
 80127f0:	2900      	cmp	r1, #0
 80127f2:	d13c      	bne.n	801286e <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x11c>
	if (size_type __n = this->_M_impl._M_finish - __pos)
 80127f4:	e9db 3100 	ldrd	r3, r1, [fp]
 80127f8:	428b      	cmp	r3, r1
	    this->_M_impl._M_finish = __pos;
 80127fa:	bf18      	it	ne
 80127fc:	f8cb 3004 	strne.w	r3, [fp, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012800:	f8db 0004 	ldr.w	r0, [fp, #4]
 8012804:	1ac1      	subs	r1, r0, r3
	if (__new_size > size())
 8012806:	428f      	cmp	r7, r1
 8012808:	d924      	bls.n	8012854 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x102>
	  _M_default_append(__new_size - size());
 801280a:	1a79      	subs	r1, r7, r1
 801280c:	4658      	mov	r0, fp
 801280e:	f7ff ff43 	bl	8012698 <_ZNSt6vectorIaSaIaEE17_M_default_appendEj>
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 8012812:	2300      	movs	r3, #0
				for (uint16_t index = 0; index < length; index++) {
 8012814:	b299      	uxth	r1, r3
 8012816:	42b9      	cmp	r1, r7
 8012818:	d323      	bcc.n	8012862 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x110>
		if (target_register->mode.callbacks) {
 801281a:	7863      	ldrb	r3, [r4, #1]
 801281c:	b16b      	cbz	r3, 801283a <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xe8>
			if (callbacks.write != NULL) {
 801281e:	f1b9 0f00 	cmp.w	r9, #0
 8012822:	d00a      	beq.n	801283a <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xe8>
				if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 8012824:	7963      	ldrb	r3, [r4, #5]
 8012826:	b36b      	cbz	r3, 8012884 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x132>
 8012828:	88e3      	ldrh	r3, [r4, #6]
 801282a:	b903      	cbnz	r3, 801282e <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xdc>
					success = callbacks.write(callbacks.context, ID, value, length);
 801282c:	463b      	mov	r3, r7
					success = callbacks.write(callbacks.context, ID, value, 1);
 801282e:	462a      	mov	r2, r5
 8012830:	4641      	mov	r1, r8
 8012832:	4650      	mov	r0, sl
 8012834:	47c8      	blx	r9
 8012836:	f88d 000f 	strb.w	r0, [sp, #15]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 801283a:	9b01      	ldr	r3, [sp, #4]
 801283c:	b123      	cbz	r3, 8012848 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xf6>
 801283e:	68e3      	ldr	r3, [r4, #12]
 8012840:	b113      	cbz	r3, 8012848 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xf6>
			osSemaphoreRelease(*(target_register->register_semaphore));
 8012842:	6818      	ldr	r0, [r3, #0]
 8012844:	f7f9 feaa 	bl	800c59c <osSemaphoreRelease>
		osSemaphoreRelease(RegistersSemaphore);
 8012848:	6830      	ldr	r0, [r6, #0]
 801284a:	f7f9 fea7 	bl	800c59c <osSemaphoreRelease>
		return success;
 801284e:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8012852:	e79b      	b.n	801278c <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x3a>
	else if (__new_size < size())
 8012854:	d2dd      	bcs.n	8012812 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xc0>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 8012856:	443b      	add	r3, r7
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8012858:	4298      	cmp	r0, r3
 801285a:	d0da      	beq.n	8012812 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xc0>
	    this->_M_impl._M_finish = __pos;
 801285c:	f8cb 3004 	str.w	r3, [fp, #4]
 8012860:	e7d7      	b.n	8012812 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xc0>
					(*register_vector)[index] = value[index];
 8012862:	56e8      	ldrsb	r0, [r5, r3]
 8012864:	f8db 1000 	ldr.w	r1, [fp]
 8012868:	54c8      	strb	r0, [r1, r3]
				for (uint16_t index = 0; index < length; index++) {
 801286a:	3301      	adds	r3, #1
 801286c:	e7d2      	b.n	8012814 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xc2>
 801286e:	465a      	mov	r2, fp
 8012870:	4429      	add	r1, r5
 8012872:	4628      	mov	r0, r5
 8012874:	f7ff ff48 	bl	8012708 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8012878:	e7cf      	b.n	801281a <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xc8>
				*(callbacks.pointer) = *value;
 801287a:	f995 3000 	ldrsb.w	r3, [r5]
 801287e:	f88b 3000 	strb.w	r3, [fp]
 8012882:	e7ca      	b.n	801281a <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xc8>
					success = callbacks.write(callbacks.context, ID, value, 1);
 8012884:	2301      	movs	r3, #1
 8012886:	e7d2      	b.n	801282e <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xdc>

08012888 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t>:
uint16_t Communication::ProcessWrite(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 8012888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801288c:	b091      	sub	sp, #68	@ 0x44
 801288e:	4605      	mov	r5, r0
 8012890:	4691      	mov	r9, r2
 8012892:	4608      	mov	r0, r1
 8012894:	af02      	add	r7, sp, #8
 8012896:	469a      	mov	sl, r3
		T value = ExtractSingle<T>(message.payload, start_index, &success);
 8012898:	3104      	adds	r1, #4
uint16_t Communication::ProcessWrite(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 801289a:	f8d7 b060 	ldr.w	fp, [r7, #96]	@ 0x60
 801289e:	f107 060b 	add.w	r6, r7, #11
 80128a2:	f8b7 4064 	ldrh.w	r4, [r7, #100]	@ 0x64
	if (not element.element_register.isArray) {
 80128a6:	f89b 8003 	ldrb.w	r8, [fp, #3]
 80128aa:	f1b8 0f00 	cmp.w	r8, #0
 80128ae:	d173      	bne.n	8012998 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x110>
		T value = ExtractSingle<T>(message.payload, start_index, &success);
 80128b0:	f107 0020 	add.w	r0, r7, #32
 80128b4:	f7ee fa5e 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80128b8:	4632      	mov	r2, r6
 80128ba:	4621      	mov	r1, r4
 80128bc:	f107 0020 	add.w	r0, r7, #32
 80128c0:	f7fc fa26 	bl	800ed10 <_ZN13Communication13ExtractSingleIaEET_St6vectorIhSaIhEEtPb.isra.0>
 80128c4:	7538      	strb	r0, [r7, #20]
      }
 80128c6:	f107 0020 	add.w	r0, r7, #32
 80128ca:	f7ee f9a3 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 80128ce:	7afb      	ldrb	r3, [r7, #11]
 80128d0:	b153      	cbz	r3, 80128e8 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x60>
			success = registers->WriteRegister<T>(element.element_register.address, &value);
 80128d2:	2301      	movs	r3, #1
 80128d4:	f8bb 1000 	ldrh.w	r1, [fp]
 80128d8:	f107 0214 	add.w	r2, r7, #20
 80128dc:	9300      	str	r3, [sp, #0]
 80128de:	4643      	mov	r3, r8
 80128e0:	6868      	ldr	r0, [r5, #4]
 80128e2:	f7ff ff36 	bl	8012752 <_ZN9Registers13WriteRegisterIaEEbtPT_tb>
 80128e6:	72f8      	strb	r0, [r7, #11]
		length_to_extract = 1;
 80128e8:	f04f 0801 	mov.w	r8, #1
	if (success)
 80128ec:	7af9      	ldrb	r1, [r7, #11]
		response_content.data = std::vector<uint8_t>{OK};
 80128ee:	f10a 060c 	add.w	r6, sl, #12
 80128f2:	f107 0314 	add.w	r3, r7, #20
 80128f6:	f107 020c 	add.w	r2, r7, #12
	if (success)
 80128fa:	2900      	cmp	r1, #0
 80128fc:	f000 80cb 	beq.w	8012a96 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x20e>
		response_content.data = std::vector<uint8_t>{OK};
 8012900:	2100      	movs	r1, #0
 8012902:	60fb      	str	r3, [r7, #12]
 8012904:	2301      	movs	r3, #1
 8012906:	7539      	strb	r1, [r7, #20]
 8012908:	613b      	str	r3, [r7, #16]
 801290a:	ca06      	ldmia	r2, {r1, r2}
		response_content.data = std::vector<uint8_t>{ERROR};
 801290c:	f107 0020 	add.w	r0, r7, #32
 8012910:	f7fe fc32 	bl	8011178 <_ZNSt6vectorIhSaIhEEC2ESt16initializer_listIhERKS0_.constprop.0.isra.0>
 8012914:	f107 0120 	add.w	r1, r7, #32
 8012918:	4630      	mov	r0, r6
 801291a:	f7fc fb40 	bl	800ef9e <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 801291e:	f107 0020 	add.w	r0, r7, #32
 8012922:	f7ee f977 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not BuildPayload(response, response_content)) {
 8012926:	4651      	mov	r1, sl
 8012928:	f107 0020 	add.w	r0, r7, #32
 801292c:	f7fc ffae 	bl	800f88c <_ZN14MessageElementC1ERKS_>
 8012930:	f107 0220 	add.w	r2, r7, #32
 8012934:	4649      	mov	r1, r9
 8012936:	4628      	mov	r0, r5
 8012938:	f7fe fd00 	bl	801133c <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 801293c:	4606      	mov	r6, r0
 801293e:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8012942:	f7ee f967 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012946:	bb06      	cbnz	r6, 801298a <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x102>
		Send(*response);
 8012948:	4649      	mov	r1, r9
 801294a:	f107 0020 	add.w	r0, r7, #32
 801294e:	f7fc ffb0 	bl	800f8b2 <_ZN13MessageHeaderC1ERKS_>
 8012952:	f107 0120 	add.w	r1, r7, #32
 8012956:	4628      	mov	r0, r5
 8012958:	f7fd f89a 	bl	800fa90 <_ZN13Communication4SendE13MessageHeader>
 801295c:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8012960:	f7ee f958 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		response->payload.clear();
 8012964:	f109 0004 	add.w	r0, r9, #4
 8012968:	f7fc fb30 	bl	800efcc <_ZNSt6vectorIhSaIhEE5clearEv>
		BuildPayload(response, response_content);
 801296c:	4651      	mov	r1, sl
 801296e:	f107 0020 	add.w	r0, r7, #32
 8012972:	f7fc ff8b 	bl	800f88c <_ZN14MessageElementC1ERKS_>
 8012976:	f107 0220 	add.w	r2, r7, #32
 801297a:	4649      	mov	r1, r9
 801297c:	4628      	mov	r0, r5
 801297e:	f7fe fcdd 	bl	801133c <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8012982:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8012986:	f7ee f945 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return start_index + sizeof(T) * length_to_extract;
 801298a:	eb04 0008 	add.w	r0, r4, r8
}
 801298e:	373c      	adds	r7, #60	@ 0x3c
 8012990:	b280      	uxth	r0, r0
 8012992:	46bd      	mov	sp, r7
 8012994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (element.element_register.isArray && element.element_register.length > 0) {
 8012998:	f8bb 8004 	ldrh.w	r8, [fp, #4]
 801299c:	f1b8 0f00 	cmp.w	r8, #0
 80129a0:	d029      	beq.n	80129f6 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x16e>
		T values[length_to_extract];
 80129a2:	f108 0307 	add.w	r3, r8, #7
 80129a6:	466a      	mov	r2, sp
	} else if (element.element_register.isArray && element.element_register.length == 0) {
 80129a8:	f8c7 d000 	str.w	sp, [r7]
		ExtractArray<T>(values, message.payload, start_index, length_to_extract, &success);
 80129ac:	f107 0020 	add.w	r0, r7, #32
		T values[length_to_extract];
 80129b0:	08db      	lsrs	r3, r3, #3
 80129b2:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 80129b6:	469d      	mov	sp, r3
 80129b8:	ab02      	add	r3, sp, #8
 80129ba:	607b      	str	r3, [r7, #4]
		ExtractArray<T>(values, message.payload, start_index, length_to_extract, &success);
 80129bc:	f7ee f9da 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80129c0:	9600      	str	r6, [sp, #0]
 80129c2:	4643      	mov	r3, r8
 80129c4:	4622      	mov	r2, r4
 80129c6:	f107 0120 	add.w	r1, r7, #32
 80129ca:	6878      	ldr	r0, [r7, #4]
 80129cc:	f7fd fd64 	bl	8010498 <_ZN13Communication12ExtractArrayIaEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 80129d0:	f107 0020 	add.w	r0, r7, #32
 80129d4:	f7ee f91e 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 80129d8:	7afb      	ldrb	r3, [r7, #11]
 80129da:	b14b      	cbz	r3, 80129f0 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x168>
			success = registers->WriteRegister<T>(element.element_register.address, values);
 80129dc:	2301      	movs	r3, #1
 80129de:	f8bb 1000 	ldrh.w	r1, [fp]
 80129e2:	9300      	str	r3, [sp, #0]
 80129e4:	2300      	movs	r3, #0
 80129e6:	687a      	ldr	r2, [r7, #4]
 80129e8:	6868      	ldr	r0, [r5, #4]
 80129ea:	f7ff feb2 	bl	8012752 <_ZN9Registers13WriteRegisterIaEEbtPT_tb>
 80129ee:	72f8      	strb	r0, [r7, #11]
 80129f0:	f8d7 d000 	ldr.w	sp, [r7]
	} else if (element.element_register.isArray && element.element_register.length == 0) {
 80129f4:	e77a      	b.n	80128ec <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x64>
		length_to_extract = message.payload[start_index];
 80129f6:	6843      	ldr	r3, [r0, #4]
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 80129f8:	f107 0020 	add.w	r0, r7, #32
		length_to_extract = message.payload[start_index];
 80129fc:	f813 8004 	ldrb.w	r8, [r3, r4]
		start_index++;
 8012a00:	3401      	adds	r4, #1
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8012a02:	f7ee f9b7 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8012a06:	f107 0120 	add.w	r1, r7, #32
		start_index++;
 8012a0a:	b2a4      	uxth	r4, r4
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8012a0c:	4643      	mov	r3, r8
 8012a0e:	f107 0014 	add.w	r0, r7, #20
 8012a12:	9600      	str	r6, [sp, #0]
 8012a14:	4622      	mov	r2, r4
 8012a16:	f7fd fce5 	bl	80103e4 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 8012a1a:	f107 0020 	add.w	r0, r7, #32
 8012a1e:	f7ee f8f9 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8012a22:	7afb      	ldrb	r3, [r7, #11]
 8012a24:	b1fb      	cbz	r3, 8012a66 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x1de>
			success = registers->WriteVectorRegister<T>(element.element_register.address, values); // previously &values
 8012a26:	686e      	ldr	r6, [r5, #4]
 8012a28:	f107 0114 	add.w	r1, r7, #20
 8012a2c:	f8bb b000 	ldrh.w	fp, [fp]
 8012a30:	f107 0020 	add.w	r0, r7, #32
 8012a34:	f7ff fe74 	bl	8012720 <_ZNSt6vectorIaSaIaEEC1ERKS1_>
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8012a38:	f04f 31ff 	mov.w	r1, #4294967295
 8012a3c:	6830      	ldr	r0, [r6, #0]
 8012a3e:	f7f9 fd79 	bl	800c534 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8012a42:	f107 020c 	add.w	r2, r7, #12
 8012a46:	4659      	mov	r1, fp
 8012a48:	4630      	mov	r0, r6
 8012a4a:	f005 fb80 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8012a4e:	7b3a      	ldrb	r2, [r7, #12]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8012a50:	4603      	mov	r3, r0
		osSemaphoreRelease(RegistersSemaphore);
 8012a52:	6830      	ldr	r0, [r6, #0]
	if (!success) {
 8012a54:	b962      	cbnz	r2, 8012a70 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x1e8>
		osSemaphoreRelease(RegistersSemaphore);
 8012a56:	f7f9 fda1 	bl	800c59c <osSemaphoreRelease>
		return false;
 8012a5a:	2000      	movs	r0, #0
 8012a5c:	72f8      	strb	r0, [r7, #11]
 8012a5e:	f107 0020 	add.w	r0, r7, #32
 8012a62:	f7fc fdae 	bl	800f5c2 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 8012a66:	f107 0014 	add.w	r0, r7, #20
 8012a6a:	f7fc fdaa 	bl	800f5c2 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 8012a6e:	e73d      	b.n	80128ec <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x64>
	if (!(target_register->register_info.isArray && target_register->register_info.length == 0)) {
 8012a70:	795a      	ldrb	r2, [r3, #5]
 8012a72:	2a00      	cmp	r2, #0
 8012a74:	d0ef      	beq.n	8012a56 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x1ce>
 8012a76:	88db      	ldrh	r3, [r3, #6]
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d1ec      	bne.n	8012a56 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x1ce>
	osSemaphoreRelease(RegistersSemaphore);
 8012a7c:	f7f9 fd8e 	bl	800c59c <osSemaphoreRelease>
	return WriteRegister(ID, value.data(), value.size(), use_semaphore);
 8012a80:	2101      	movs	r1, #1
 8012a82:	4630      	mov	r0, r6
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012a84:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8012a88:	9100      	str	r1, [sp, #0]
 8012a8a:	4659      	mov	r1, fp
 8012a8c:	1a9b      	subs	r3, r3, r2
 8012a8e:	b29b      	uxth	r3, r3
 8012a90:	f7ff fe5f 	bl	8012752 <_ZN9Registers13WriteRegisterIaEEbtPT_tb>
 8012a94:	e7e2      	b.n	8012a5c <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x1d4>
		response_content.data = std::vector<uint8_t>{ERROR};
 8012a96:	21ff      	movs	r1, #255	@ 0xff
 8012a98:	617a      	str	r2, [r7, #20]
 8012a9a:	2201      	movs	r2, #1
 8012a9c:	7339      	strb	r1, [r7, #12]
 8012a9e:	61ba      	str	r2, [r7, #24]
 8012aa0:	e893 0006 	ldmia.w	r3, {r1, r2}
 8012aa4:	e732      	b.n	801290c <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x84>

08012aa6 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt>:
uint16_t Communication::ProcessCommand(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 8012aa6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012aaa:	460f      	mov	r7, r1
 8012aac:	b0b1      	sub	sp, #196	@ 0xc4
 8012aae:	461c      	mov	r4, r3
 8012ab0:	4680      	mov	r8, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012ab2:	f04f 0900 	mov.w	r9, #0
 8012ab6:	f8bd a0e8 	ldrh.w	sl, [sp, #232]	@ 0xe8
 8012aba:	9203      	str	r2, [sp, #12]
 8012abc:	ad2a      	add	r5, sp, #168	@ 0xa8
 8012abe:	f8cd 9074 	str.w	r9, [sp, #116]	@ 0x74
	response_content.element_register = element.element_register;
 8012ac2:	e9d3 0100 	ldrd	r0, r1, [r3]
	response_content.ack = true;
 8012ac6:	2301      	movs	r3, #1
	response_content.element_register = element.element_register;
 8012ac8:	9018      	str	r0, [sp, #96]	@ 0x60
	response_content.ack = true;
 8012aca:	f8ad 3066 	strh.w	r3, [sp, #102]	@ 0x66
	response_content.access = element.access;
 8012ace:	7a23      	ldrb	r3, [r4, #8]
	response_content.element_register = element.element_register;
 8012ad0:	f8ad 1064 	strh.w	r1, [sp, #100]	@ 0x64
	CommunicationLED(leds, message.interface);
 8012ad4:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8012ad8:	7839      	ldrb	r1, [r7, #0]
	response_content.access = element.access;
 8012ada:	f88d 3068 	strb.w	r3, [sp, #104]	@ 0x68
 8012ade:	e9cd 991b 	strd	r9, r9, [sp, #108]	@ 0x6c
	CommunicationLED(leds, message.interface);
 8012ae2:	f7fb fe64 	bl	800e7ae <_Z16CommunicationLEDP4LEDSh>
	if (element.access == WRITE) {
 8012ae6:	7a23      	ldrb	r3, [r4, #8]
		return ProcessWrite<T>(message, response, response_content, element, start_index);
 8012ae8:	4639      	mov	r1, r7
	if (element.access == WRITE) {
 8012aea:	bb1b      	cbnz	r3, 8012b34 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x8e>
		return ProcessWrite<T>(message, response, response_content, element, start_index);
 8012aec:	a81e      	add	r0, sp, #120	@ 0x78
 8012aee:	f7fc fee0 	bl	800f8b2 <_ZN13MessageHeaderC1ERKS_>
 8012af2:	a918      	add	r1, sp, #96	@ 0x60
 8012af4:	a824      	add	r0, sp, #144	@ 0x90
 8012af6:	f7fc fec9 	bl	800f88c <_ZN14MessageElementC1ERKS_>
 8012afa:	4621      	mov	r1, r4
 8012afc:	4628      	mov	r0, r5
 8012afe:	f7fc fec5 	bl	800f88c <_ZN14MessageElementC1ERKS_>
 8012b02:	ab24      	add	r3, sp, #144	@ 0x90
 8012b04:	9a03      	ldr	r2, [sp, #12]
 8012b06:	a91e      	add	r1, sp, #120	@ 0x78
 8012b08:	4640      	mov	r0, r8
 8012b0a:	e9cd 5a00 	strd	r5, sl, [sp]
 8012b0e:	f7ff febb 	bl	8012888 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t>
 8012b12:	4682      	mov	sl, r0
      }
 8012b14:	a82d      	add	r0, sp, #180	@ 0xb4
 8012b16:	f7ee f87d 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012b1a:	a827      	add	r0, sp, #156	@ 0x9c
 8012b1c:	f7ee f87a 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012b20:	a81f      	add	r0, sp, #124	@ 0x7c
 8012b22:	f7ee f877 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012b26:	a81b      	add	r0, sp, #108	@ 0x6c
 8012b28:	f7ee f874 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 8012b2c:	4650      	mov	r0, sl
 8012b2e:	b031      	add	sp, #196	@ 0xc4
 8012b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return ProcessRead<T>(message, response, response_content, element, start_index);
 8012b34:	a813      	add	r0, sp, #76	@ 0x4c
 8012b36:	f7fc febc 	bl	800f8b2 <_ZN13MessageHeaderC1ERKS_>
 8012b3a:	a918      	add	r1, sp, #96	@ 0x60
 8012b3c:	a81e      	add	r0, sp, #120	@ 0x78
 8012b3e:	f7fc fea5 	bl	800f88c <_ZN14MessageElementC1ERKS_>
 8012b42:	4621      	mov	r1, r4
 8012b44:	a824      	add	r0, sp, #144	@ 0x90
 8012b46:	f7fc fea1 	bl	800f88c <_ZN14MessageElementC1ERKS_>
uint16_t Communication::ProcessRead(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 8012b4a:	f8d8 7004 	ldr.w	r7, [r8, #4]
	*success = registers->ReadRegister<T>(element->element_register.address, &register_read, &length);
 8012b4e:	f8bd b090 	ldrh.w	fp, [sp, #144]	@ 0x90
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8012b52:	f04f 31ff 	mov.w	r1, #4294967295
 8012b56:	6838      	ldr	r0, [r7, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012b58:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 8012b5c:	e9cd 9907 	strd	r9, r9, [sp, #28]
 8012b60:	f7f9 fce8 	bl	800c534 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8012b64:	462a      	mov	r2, r5
 8012b66:	4659      	mov	r1, fp
 8012b68:	4638      	mov	r0, r7
 8012b6a:	f005 faf0 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8012b6e:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8012b72:	4604      	mov	r4, r0
	if (!success) {
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d15b      	bne.n	8012c30 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x18a>
		osSemaphoreRelease(RegistersSemaphore);
 8012b78:	6838      	ldr	r0, [r7, #0]
 8012b7a:	f7f9 fd0f 	bl	800c59c <osSemaphoreRelease>
		return false;
 8012b7e:	2300      	movs	r3, #0
 8012b80:	9304      	str	r3, [sp, #16]
	response_content.data = ReadElement<T>(&element, &success);
 8012b82:	a907      	add	r1, sp, #28
 8012b84:	a821      	add	r0, sp, #132	@ 0x84
 8012b86:	f7fc fa0a 	bl	800ef9e <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8012b8a:	a807      	add	r0, sp, #28
 8012b8c:	f7ee f842 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not success) {
 8012b90:	9b04      	ldr	r3, [sp, #16]
 8012b92:	b9a3      	cbnz	r3, 8012bbe <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x118>
		response_content.data = std::vector<uint8_t>{ERROR};
 8012b94:	22ff      	movs	r2, #255	@ 0xff
		response_content.command = true; // this is an error flag for a read ack
 8012b96:	2301      	movs	r3, #1
		response_content.data = std::vector<uint8_t>{ERROR};
 8012b98:	4628      	mov	r0, r5
 8012b9a:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
 8012b9e:	aa0d      	add	r2, sp, #52	@ 0x34
		response_content.command = true; // this is an error flag for a read ack
 8012ba0:	f88d 307f 	strb.w	r3, [sp, #127]	@ 0x7f
		response_content.data = std::vector<uint8_t>{ERROR};
 8012ba4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8012ba8:	461a      	mov	r2, r3
 8012baa:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8012bac:	f7fe fae4 	bl	8011178 <_ZNSt6vectorIhSaIhEEC2ESt16initializer_listIhERKS0_.constprop.0.isra.0>
 8012bb0:	a821      	add	r0, sp, #132	@ 0x84
 8012bb2:	4629      	mov	r1, r5
 8012bb4:	f7fc f9f3 	bl	800ef9e <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 8012bb8:	4628      	mov	r0, r5
 8012bba:	f7ee f82b 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not BuildPayload(response, response_content) && response->payload.size() > 0) { // if no space available, send the data and then rebuild a new response
 8012bbe:	a91e      	add	r1, sp, #120	@ 0x78
 8012bc0:	4628      	mov	r0, r5
 8012bc2:	f7fc fe63 	bl	800f88c <_ZN14MessageElementC1ERKS_>
 8012bc6:	462a      	mov	r2, r5
 8012bc8:	9903      	ldr	r1, [sp, #12]
 8012bca:	4640      	mov	r0, r8
 8012bcc:	f7fe fbb6 	bl	801133c <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8012bd0:	2800      	cmp	r0, #0
 8012bd2:	f040 812e 	bne.w	8012e32 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x38c>
 8012bd6:	9b03      	ldr	r3, [sp, #12]
 8012bd8:	e9d3 3401 	ldrd	r3, r4, [r3, #4]
 8012bdc:	1ae4      	subs	r4, r4, r3
 8012bde:	bf18      	it	ne
 8012be0:	2401      	movne	r4, #1
 8012be2:	a82d      	add	r0, sp, #180	@ 0xb4
 8012be4:	f7ee f816 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012be8:	b1d4      	cbz	r4, 8012c20 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x17a>
		Send(*response);
 8012bea:	9903      	ldr	r1, [sp, #12]
 8012bec:	a82a      	add	r0, sp, #168	@ 0xa8
 8012bee:	f7fc fe60 	bl	800f8b2 <_ZN13MessageHeaderC1ERKS_>
 8012bf2:	a92a      	add	r1, sp, #168	@ 0xa8
 8012bf4:	4640      	mov	r0, r8
 8012bf6:	f7fc ff4b 	bl	800fa90 <_ZN13Communication4SendE13MessageHeader>
 8012bfa:	a82b      	add	r0, sp, #172	@ 0xac
 8012bfc:	f7ee f80a 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		response->payload.clear();
 8012c00:	9b03      	ldr	r3, [sp, #12]
 8012c02:	1d18      	adds	r0, r3, #4
 8012c04:	f7fc f9e2 	bl	800efcc <_ZNSt6vectorIhSaIhEE5clearEv>
		BuildPayload(response, response_content);
 8012c08:	a91e      	add	r1, sp, #120	@ 0x78
 8012c0a:	a82a      	add	r0, sp, #168	@ 0xa8
 8012c0c:	f7fc fe3e 	bl	800f88c <_ZN14MessageElementC1ERKS_>
 8012c10:	aa2a      	add	r2, sp, #168	@ 0xa8
 8012c12:	9903      	ldr	r1, [sp, #12]
 8012c14:	4640      	mov	r0, r8
 8012c16:	f7fe fb91 	bl	801133c <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8012c1a:	a82d      	add	r0, sp, #180	@ 0xb4
 8012c1c:	f7ed fffa 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012c20:	a827      	add	r0, sp, #156	@ 0x9c
 8012c22:	f7ed fff7 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012c26:	a821      	add	r0, sp, #132	@ 0x84
 8012c28:	f7ed fff4 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012c2c:	a814      	add	r0, sp, #80	@ 0x50
 8012c2e:	e778      	b.n	8012b22 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x7c>
	uint8_t registered_type = GetTypeID<T>(&success);
 8012c30:	4628      	mov	r0, r5
 8012c32:	f7fb ff75 	bl	800eb20 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0>
	if (!success) {
 8012c36:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
 8012c3a:	9304      	str	r3, [sp, #16]
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d09b      	beq.n	8012b78 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0xd2>
	if (target_register->register_info.type != registered_type) {
 8012c40:	7923      	ldrb	r3, [r4, #4]
 8012c42:	4298      	cmp	r0, r3
 8012c44:	d198      	bne.n	8012b78 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0xd2>
	if (callbacks[target_register->register_info.type] == NULL) {
 8012c46:	3004      	adds	r0, #4
 8012c48:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8012c4c:	2800      	cmp	r0, #0
 8012c4e:	d093      	beq.n	8012b78 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0xd2>
	if (target_register->access.read) {
 8012c50:	7a63      	ldrb	r3, [r4, #9]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d031      	beq.n	8012cba <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x214>
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8012c56:	8961      	ldrh	r1, [r4, #10]
		success = false; // false by default to use pointer mode if the callback doesn't update the flag
 8012c58:	f88d 90a8 	strb.w	r9, [sp, #168]	@ 0xa8
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8012c5c:	f7fc fd7a 	bl	800f754 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE2atEj>
 8012c60:	e9d0 9300 	ldrd	r9, r3, [r0]
 8012c64:	9305      	str	r3, [sp, #20]
 8012c66:	68c3      	ldr	r3, [r0, #12]
 8012c68:	461e      	mov	r6, r3
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8012c6a:	68e3      	ldr	r3, [r4, #12]
 8012c6c:	b123      	cbz	r3, 8012c78 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x1d2>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 8012c6e:	f04f 31ff 	mov.w	r1, #4294967295
 8012c72:	6818      	ldr	r0, [r3, #0]
 8012c74:	f7f9 fc5e 	bl	800c534 <osSemaphoreAcquire>
		if (target_register->mode.callbacks) {
 8012c78:	7863      	ldrb	r3, [r4, #1]
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d161      	bne.n	8012d42 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x29c>
		if (not success && target_register->mode.pointer) {
 8012c7e:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
 8012c82:	b9ab      	cbnz	r3, 8012cb0 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x20a>
 8012c84:	7823      	ldrb	r3, [r4, #0]
 8012c86:	b19b      	cbz	r3, 8012cb0 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x20a>
			success = true;
 8012c88:	2301      	movs	r3, #1
 8012c8a:	f88d 30a8 	strb.w	r3, [sp, #168]	@ 0xa8
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 8012c8e:	7962      	ldrb	r2, [r4, #5]
 8012c90:	2a00      	cmp	r2, #0
 8012c92:	f000 8088 	beq.w	8012da6 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x300>
 8012c96:	88e1      	ldrh	r1, [r4, #6]
 8012c98:	2900      	cmp	r1, #0
 8012c9a:	d17c      	bne.n	8012d96 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x2f0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012c9c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8012ca0:	1a9b      	subs	r3, r3, r2
 8012ca2:	aa06      	add	r2, sp, #24
				*length = register_vector->size();
 8012ca4:	b29b      	uxth	r3, r3
 8012ca6:	f8ad 301a 	strh.w	r3, [sp, #26]
					for (uint16_t index = 0; index < *length; index++) {
 8012caa:	b288      	uxth	r0, r1
 8012cac:	4283      	cmp	r3, r0
 8012cae:	d86b      	bhi.n	8012d88 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x2e2>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8012cb0:	68e3      	ldr	r3, [r4, #12]
 8012cb2:	b113      	cbz	r3, 8012cba <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x214>
			osSemaphoreRelease(*(target_register->register_semaphore));
 8012cb4:	6818      	ldr	r0, [r3, #0]
 8012cb6:	f7f9 fc71 	bl	800c59c <osSemaphoreRelease>
	osSemaphoreRelease(RegistersSemaphore);
 8012cba:	6838      	ldr	r0, [r7, #0]
 8012cbc:	f7f9 fc6e 	bl	800c59c <osSemaphoreRelease>
	std::vector<T> register_read_vector_cast = BuildTVector(*element, &register_read);
 8012cc0:	a924      	add	r1, sp, #144	@ 0x90
 8012cc2:	4628      	mov	r0, r5
 8012cc4:	f7fc fde2 	bl	800f88c <_ZN14MessageElementC1ERKS_>
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012cc8:	2300      	movs	r3, #0
 8012cca:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 8012cce:	930c      	str	r3, [sp, #48]	@ 0x30
	if (not element.element_register.isArray) {
 8012cd0:	f89d 30ab 	ldrb.w	r3, [sp, #171]	@ 0xab
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d16d      	bne.n	8012db4 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x30e>
		vector = std::vector<T>{*data};
 8012cd8:	f89d 3018 	ldrb.w	r3, [sp, #24]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8012cdc:	2001      	movs	r0, #1
 8012cde:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8012ce2:	f7fb fe9e 	bl	800ea22 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>
			      _Category>::__copy_m(__first, __last, __result);
 8012ce6:	f10d 0135 	add.w	r1, sp, #53	@ 0x35
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8012cea:	1c43      	adds	r3, r0, #1
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8012cec:	4602      	mov	r2, r0
 8012cee:	9010      	str	r0, [sp, #64]	@ 0x40
 8012cf0:	a80d      	add	r0, sp, #52	@ 0x34
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8012cf2:	9312      	str	r3, [sp, #72]	@ 0x48
 8012cf4:	f7ff fd08 	bl	8012708 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
		vector = std::vector<T>(data, data + element.element_register.length);
 8012cf8:	a910      	add	r1, sp, #64	@ 0x40
	  this->_M_impl._M_finish =
 8012cfa:	9011      	str	r0, [sp, #68]	@ 0x44
 8012cfc:	a80a      	add	r0, sp, #40	@ 0x28
 8012cfe:	f7fc fc6a 	bl	800f5d6 <_ZNSt6vectorIaSaIaEEaSEOS1_.isra.0>
      }
 8012d02:	a810      	add	r0, sp, #64	@ 0x40
 8012d04:	f7fc fc5d 	bl	800f5c2 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 8012d08:	a82d      	add	r0, sp, #180	@ 0xb4
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012d0a:	2400      	movs	r4, #0
      }
 8012d0c:	f7ed ff82 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	data = BuildVector<T>(register_read_vector_cast);
 8012d10:	a90a      	add	r1, sp, #40	@ 0x28
 8012d12:	a810      	add	r0, sp, #64	@ 0x40
 8012d14:	f7ff fd04 	bl	8012720 <_ZNSt6vectorIaSaIaEEC1ERKS1_>
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012d18:	940f      	str	r4, [sp, #60]	@ 0x3c
      : _M_current(__i) { }
 8012d1a:	e9dd 7910 	ldrd	r7, r9, [sp, #64]	@ 0x40
 8012d1e:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
    for (T input : inputs) {
 8012d22:	45b9      	cmp	r9, r7
 8012d24:	d16f      	bne.n	8012e06 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x360>
	data = BuildVector<T>(register_read_vector_cast);
 8012d26:	a90d      	add	r1, sp, #52	@ 0x34
 8012d28:	a807      	add	r0, sp, #28
 8012d2a:	f7fc f938 	bl	800ef9e <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8012d2e:	a80d      	add	r0, sp, #52	@ 0x34
 8012d30:	f7ed ff70 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012d34:	a810      	add	r0, sp, #64	@ 0x40
 8012d36:	f7fc fc44 	bl	800f5c2 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 8012d3a:	a80a      	add	r0, sp, #40	@ 0x28
 8012d3c:	f7fc fc41 	bl	800f5c2 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 8012d40:	e71f      	b.n	8012b82 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0xdc>
				*callback_output = output;
 8012d42:	2200      	movs	r2, #0
 8012d44:	ab06      	add	r3, sp, #24
 8012d46:	6013      	str	r3, [r2, #0]
			if (callbacks.read != NULL) {
 8012d48:	2e00      	cmp	r6, #0
 8012d4a:	d098      	beq.n	8012c7e <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x1d8>
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 8012d4c:	f10d 031a 	add.w	r3, sp, #26
 8012d50:	4659      	mov	r1, fp
 8012d52:	9805      	ldr	r0, [sp, #20]
 8012d54:	47b0      	blx	r6
 8012d56:	f88d 00a8 	strb.w	r0, [sp, #168]	@ 0xa8
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 8012d5a:	7963      	ldrb	r3, [r4, #5]
 8012d5c:	b143      	cbz	r3, 8012d70 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x2ca>
 8012d5e:	88e3      	ldrh	r3, [r4, #6]
 8012d60:	b10b      	cbz	r3, 8012d66 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x2c0>
					*length = 1;
 8012d62:	f8ad 301a 	strh.w	r3, [sp, #26]
					for (uint16_t index = 0; index < *length; index++) {
 8012d66:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 8012d6a:	a906      	add	r1, sp, #24
 8012d6c:	2300      	movs	r3, #0
 8012d6e:	e007      	b.n	8012d80 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x2da>
					*length = 1;
 8012d70:	2301      	movs	r3, #1
 8012d72:	e7f6      	b.n	8012d62 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x2bc>
						output[index] = (*callback_output )[index];
 8012d74:	2200      	movs	r2, #0
 8012d76:	6812      	ldr	r2, [r2, #0]
 8012d78:	5cd2      	ldrb	r2, [r2, r3]
 8012d7a:	3301      	adds	r3, #1
 8012d7c:	f801 2b01 	strb.w	r2, [r1], #1
					for (uint16_t index = 0; index < *length; index++) {
 8012d80:	b29a      	uxth	r2, r3
 8012d82:	4290      	cmp	r0, r2
 8012d84:	d8f6      	bhi.n	8012d74 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x2ce>
 8012d86:	e77a      	b.n	8012c7e <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x1d8>
						output[index] = (*register_vector)[index];
 8012d88:	f8d9 0000 	ldr.w	r0, [r9]
 8012d8c:	5640      	ldrsb	r0, [r0, r1]
 8012d8e:	3101      	adds	r1, #1
 8012d90:	f802 0b01 	strb.w	r0, [r2], #1
					for (uint16_t index = 0; index < *length; index++) {
 8012d94:	e789      	b.n	8012caa <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x204>
				*length = target_register->register_info.length;
 8012d96:	f8ad 101a 	strh.w	r1, [sp, #26]
 8012d9a:	aa06      	add	r2, sp, #24
 8012d9c:	4449      	add	r1, r9
 8012d9e:	4648      	mov	r0, r9
 8012da0:	f7ff fcb2 	bl	8012708 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8012da4:	e784      	b.n	8012cb0 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x20a>
				*length = 1;
 8012da6:	f8ad 301a 	strh.w	r3, [sp, #26]
					*output = *callbacks.pointer;
 8012daa:	f999 3000 	ldrsb.w	r3, [r9]
 8012dae:	f88d 3018 	strb.w	r3, [sp, #24]
 8012db2:	e77d      	b.n	8012cb0 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x20a>
	} else if (element.element_register.isArray && element.element_register.length > 0)
 8012db4:	f8bd 40ac 	ldrh.w	r4, [sp, #172]	@ 0xac
 8012db8:	b154      	cbz	r4, 8012dd0 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x32a>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8012dba:	4620      	mov	r0, r4
 8012dbc:	f7fb fe31 	bl	800ea22 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8012dc0:	1903      	adds	r3, r0, r4
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8012dc2:	4602      	mov	r2, r0
 8012dc4:	9010      	str	r0, [sp, #64]	@ 0x40
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8012dc6:	9312      	str	r3, [sp, #72]	@ 0x48
			      _Category>::__copy_m(__first, __last, __result);
 8012dc8:	ab06      	add	r3, sp, #24
 8012dca:	1919      	adds	r1, r3, r4
 8012dcc:	4618      	mov	r0, r3
 8012dce:	e791      	b.n	8012cf4 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x24e>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012dd0:	e9dd 9b06 	ldrd	r9, fp, [sp, #24]
	  if (__xlen > capacity())
 8012dd4:	ebbb 0709 	subs.w	r7, fp, r9
 8012dd8:	d00f      	beq.n	8012dfa <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x354>
	  pointer __result = this->_M_allocate(__n);
 8012dda:	4638      	mov	r0, r7
 8012ddc:	f7fb fe21 	bl	800ea22 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>
 8012de0:	4604      	mov	r4, r0
 8012de2:	4602      	mov	r2, r0
 8012de4:	4659      	mov	r1, fp
 8012de6:	4648      	mov	r0, r9
 8012de8:	f7ff fc8e 	bl	8012708 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
	      this->_M_impl._M_start = __tmp;
 8012dec:	940a      	str	r4, [sp, #40]	@ 0x28
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8012dee:	443c      	add	r4, r7
 8012df0:	940c      	str	r4, [sp, #48]	@ 0x30
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8012df2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012df4:	443b      	add	r3, r7
 8012df6:	930b      	str	r3, [sp, #44]	@ 0x2c
      return *this;
 8012df8:	e786      	b.n	8012d08 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x262>
 8012dfa:	463a      	mov	r2, r7
 8012dfc:	4659      	mov	r1, fp
 8012dfe:	4648      	mov	r0, r9
 8012e00:	f7ff fc82 	bl	8012708 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8012e04:	e7f5      	b.n	8012df2 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x34c>
    for (T input : inputs) {
 8012e06:	f917 3b01 	ldrsb.w	r3, [r7], #1
      { emplace_back(std::move(__x)); }
 8012e0a:	f10d 0119 	add.w	r1, sp, #25
 8012e0e:	4628      	mov	r0, r5
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012e10:	942c      	str	r4, [sp, #176]	@ 0xb0
		data.push_back((uint8_t) ((reinterpreted_input >> ((type_length - 1 - index) << 3)) & 0xFF)); // previously (8 * (type_length - 1 - index))) & 0xFF))
 8012e12:	f88d 3019 	strb.w	r3, [sp, #25]
 8012e16:	e9cd 442a 	strd	r4, r4, [sp, #168]	@ 0xa8
      { emplace_back(std::move(__x)); }
 8012e1a:	f7fc fc0b 	bl	800f634 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
        data.insert(data.end(), single.begin(), single.end());
 8012e1e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8012e20:	a80d      	add	r0, sp, #52	@ 0x34
 8012e22:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	@ 0xa8
 8012e26:	f7fe fa15 	bl	8011254 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_>
      }
 8012e2a:	4628      	mov	r0, r5
 8012e2c:	f7ed fef2 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return *this;
 8012e30:	e777      	b.n	8012d22 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x27c>
	if (not BuildPayload(response, response_content) && response->payload.size() > 0) { // if no space available, send the data and then rebuild a new response
 8012e32:	2400      	movs	r4, #0
 8012e34:	e6d5      	b.n	8012be2 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x13c>

08012e36 <_ZN13Communication14ProcessElementIaEEt13MessageHeaderPS1_14MessageElementt>:
uint16_t Communication::ProcessElement(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 8012e36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e38:	461c      	mov	r4, r3
 8012e3a:	b08f      	sub	sp, #60	@ 0x3c
	if (not element.ack && element.command) {
 8012e3c:	799b      	ldrb	r3, [r3, #6]
uint16_t Communication::ProcessElement(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 8012e3e:	4605      	mov	r5, r0
 8012e40:	4617      	mov	r7, r2
 8012e42:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
	if (not element.ack && element.command) {
 8012e46:	b9cb      	cbnz	r3, 8012e7c <_ZN13Communication14ProcessElementIaEEt13MessageHeaderPS1_14MessageElementt+0x46>
 8012e48:	79e3      	ldrb	r3, [r4, #7]
		return ProcessCommand<T>(message, response, element, start_index);
 8012e4a:	a803      	add	r0, sp, #12
	if (not element.ack && element.command) {
 8012e4c:	b323      	cbz	r3, 8012e98 <_ZN13Communication14ProcessElementIaEEt13MessageHeaderPS1_14MessageElementt+0x62>
		return ProcessCommand<T>(message, response, element, start_index);
 8012e4e:	f7fc fd30 	bl	800f8b2 <_ZN13MessageHeaderC1ERKS_>
 8012e52:	4621      	mov	r1, r4
 8012e54:	a808      	add	r0, sp, #32
 8012e56:	f7fc fd19 	bl	800f88c <_ZN14MessageElementC1ERKS_>
 8012e5a:	ab08      	add	r3, sp, #32
 8012e5c:	463a      	mov	r2, r7
 8012e5e:	a903      	add	r1, sp, #12
 8012e60:	4628      	mov	r0, r5
 8012e62:	9600      	str	r6, [sp, #0]
 8012e64:	f7ff fe1f 	bl	8012aa6 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt>
		return ProcessSubscriber<T>(message, element, start_index);
 8012e68:	4604      	mov	r4, r0
 8012e6a:	a80b      	add	r0, sp, #44	@ 0x2c
 8012e6c:	f7ed fed2 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012e70:	a804      	add	r0, sp, #16
 8012e72:	f7ed fecf 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 8012e76:	4620      	mov	r0, r4
 8012e78:	b00f      	add	sp, #60	@ 0x3c
 8012e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ProcessService<T>(message, element, start_index);
 8012e7c:	a803      	add	r0, sp, #12
 8012e7e:	f7fc fd18 	bl	800f8b2 <_ZN13MessageHeaderC1ERKS_>
 8012e82:	4621      	mov	r1, r4
 8012e84:	a808      	add	r0, sp, #32
 8012e86:	f7fc fd01 	bl	800f88c <_ZN14MessageElementC1ERKS_>
 8012e8a:	4633      	mov	r3, r6
 8012e8c:	aa08      	add	r2, sp, #32
 8012e8e:	a903      	add	r1, sp, #12
 8012e90:	4628      	mov	r0, r5
 8012e92:	f7fd fbaa 	bl	80105ea <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt>
 8012e96:	e7e7      	b.n	8012e68 <_ZN13Communication14ProcessElementIaEEt13MessageHeaderPS1_14MessageElementt+0x32>
		return ProcessSubscriber<T>(message, element, start_index);
 8012e98:	f7fc fd0b 	bl	800f8b2 <_ZN13MessageHeaderC1ERKS_>
 8012e9c:	4621      	mov	r1, r4
 8012e9e:	a808      	add	r0, sp, #32
 8012ea0:	f7fc fcf4 	bl	800f88c <_ZN14MessageElementC1ERKS_>
 8012ea4:	4633      	mov	r3, r6
 8012ea6:	aa08      	add	r2, sp, #32
 8012ea8:	a903      	add	r1, sp, #12
 8012eaa:	4628      	mov	r0, r5
 8012eac:	f7fd fb1b 	bl	80104e6 <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt>
 8012eb0:	e7da      	b.n	8012e68 <_ZN13Communication14ProcessElementIaEEt13MessageHeaderPS1_14MessageElementt+0x32>

08012eb2 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPfjEET_S3_T0_>:
 8012eb2:	4603      	mov	r3, r0
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 8012eb4:	b510      	push	{r4, lr}
	  if (__n > 0)
 8012eb6:	b179      	cbz	r1, 8012ed8 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPfjEET_S3_T0_+0x26>
 8012eb8:	2200      	movs	r2, #0
      if (__n <= 0)
 8012eba:	1e4c      	subs	r4, r1, #1
 8012ebc:	f843 2b04 	str.w	r2, [r3], #4
 8012ec0:	d00a      	beq.n	8012ed8 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPfjEET_S3_T0_+0x26>
      std::__fill_a(__first, __first + __n, __value);
 8012ec2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
	*__first = __tmp;
 8012ec6:	2100      	movs	r1, #0
 8012ec8:	1a24      	subs	r4, r4, r0
 8012eca:	4618      	mov	r0, r3
 8012ecc:	3c04      	subs	r4, #4
 8012ece:	4622      	mov	r2, r4
 8012ed0:	f007 ffe6 	bl	801aea0 <memset>
 8012ed4:	4603      	mov	r3, r0
 8012ed6:	4423      	add	r3, r4
	}
 8012ed8:	4618      	mov	r0, r3
 8012eda:	bd10      	pop	{r4, pc}

08012edc <_ZNSt6vectorIfSaIfEE17_M_default_appendEj>:
    vector<_Tp, _Alloc>::
 8012edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ee0:	4604      	mov	r4, r0
      if (__n != 0)
 8012ee2:	460e      	mov	r6, r1
 8012ee4:	b171      	cbz	r1, 8012f04 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x28>
					 - this->_M_impl._M_finish);
 8012ee6:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012ee8:	e9d0 8200 	ldrd	r8, r2, [r0]
 8012eec:	1a9b      	subs	r3, r3, r2
 8012eee:	eba2 0a08 	sub.w	sl, r2, r8
	  if (__navail >= __n)
 8012ef2:	ebb1 0fa3 	cmp.w	r1, r3, asr #2
 8012ef6:	ea4f 07aa 	mov.w	r7, sl, asr #2
 8012efa:	d805      	bhi.n	8012f08 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x2c>
	__uninit_default_n(__first, __n);
 8012efc:	4610      	mov	r0, r2
 8012efe:	f7ff ffd8 	bl	8012eb2 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPfjEET_S3_T0_>
	      this->_M_impl._M_finish =
 8012f02:	6060      	str	r0, [r4, #4]
    }
 8012f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		_M_check_len(__n, "vector::_M_default_append");
 8012f08:	4a13      	ldr	r2, [pc, #76]	@ (8012f58 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x7c>)
 8012f0a:	f7fc fc7b 	bl	800f804 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>
 8012f0e:	4681      	mov	r9, r0
	      pointer __new_start(this->_M_allocate(__len));
 8012f10:	f7fb fd75 	bl	800e9fe <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
 8012f14:	4631      	mov	r1, r6
 8012f16:	4605      	mov	r5, r0
 8012f18:	4450      	add	r0, sl
 8012f1a:	f7ff ffca 	bl	8012eb2 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPfjEET_S3_T0_>
      if (__count > 0)
 8012f1e:	f1ba 0f00 	cmp.w	sl, #0
 8012f22:	d00c      	beq.n	8012f3e <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x62>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8012f24:	4652      	mov	r2, sl
 8012f26:	4641      	mov	r1, r8
 8012f28:	4628      	mov	r0, r5
 8012f2a:	f007 ff9f 	bl	801ae6c <memmove>
			    this->_M_impl._M_end_of_storage - __old_start);
 8012f2e:	68a1      	ldr	r1, [r4, #8]
 8012f30:	4640      	mov	r0, r8
 8012f32:	eba1 0108 	sub.w	r1, r1, r8
 8012f36:	1089      	asrs	r1, r1, #2
 8012f38:	f7fb fd5e 	bl	800e9f8 <_ZNSt12_Vector_baseIP21CommunicationProtocolSaIS1_EE13_M_deallocateEPS1_j.part.0>
 8012f3c:	e002      	b.n	8012f44 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x68>
	if (__p)
 8012f3e:	f1b8 0f00 	cmp.w	r8, #0
 8012f42:	d1f4      	bne.n	8012f2e <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x52>
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8012f44:	4437      	add	r7, r6
	      this->_M_impl._M_start = __new_start;
 8012f46:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8012f48:	eb05 0787 	add.w	r7, r5, r7, lsl #2
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 8012f4c:	eb05 0589 	add.w	r5, r5, r9, lsl #2
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8012f50:	6067      	str	r7, [r4, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 8012f52:	60a5      	str	r5, [r4, #8]
    }
 8012f54:	e7d6      	b.n	8012f04 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x28>
 8012f56:	bf00      	nop
 8012f58:	0801b406 	.word	0x0801b406

08012f5c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	  if (_Num)
 8012f5c:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8012f5e:	4613      	mov	r3, r2
 8012f60:	b510      	push	{r4, lr}
	  const ptrdiff_t _Num = __last - __first;
 8012f62:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
 8012f66:	d005      	beq.n	8012f74 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8012f68:	4601      	mov	r1, r0
 8012f6a:	4622      	mov	r2, r4
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	f007 ff7d 	bl	801ae6c <memmove>
 8012f72:	4603      	mov	r3, r0
	}
 8012f74:	1918      	adds	r0, r3, r4
 8012f76:	bd10      	pop	{r4, pc}

08012f78 <_ZNSt6vectorIfSaIfEEC1ERKS1_>:
      vector(const vector& __x)
 8012f78:	b570      	push	{r4, r5, r6, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012f7a:	e9d1 3600 	ldrd	r3, r6, [r1]
      vector(const vector& __x)
 8012f7e:	4604      	mov	r4, r0
 8012f80:	460d      	mov	r5, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012f82:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012f84:	2300      	movs	r3, #0
 8012f86:	e9c0 3300 	strd	r3, r3, [r0]
 8012f8a:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8012f8c:	10b0      	asrs	r0, r6, #2
 8012f8e:	f7fb fd36 	bl	800e9fe <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8012f92:	4406      	add	r6, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8012f94:	4602      	mov	r2, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8012f96:	60a6      	str	r6, [r4, #8]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8012f98:	e9c4 0000 	strd	r0, r0, [r4]
			      _Category>::__copy_m(__first, __last, __result);
 8012f9c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012fa0:	f7ff ffdc 	bl	8012f5c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	this->_M_impl._M_finish =
 8012fa4:	6060      	str	r0, [r4, #4]
      }
 8012fa6:	4620      	mov	r0, r4
 8012fa8:	bd70      	pop	{r4, r5, r6, pc}

08012faa <_ZN9Registers13WriteRegisterIfEEbtPT_tb>:
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 8012faa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fae:	b085      	sub	sp, #20
 8012fb0:	4606      	mov	r6, r0
 8012fb2:	4688      	mov	r8, r1
 8012fb4:	461f      	mov	r7, r3
 8012fb6:	f89d 3038 	ldrb.w	r3, [sp, #56]	@ 0x38
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8012fba:	f04f 31ff 	mov.w	r1, #4294967295
 8012fbe:	6800      	ldr	r0, [r0, #0]
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 8012fc0:	4615      	mov	r5, r2
 8012fc2:	9301      	str	r3, [sp, #4]
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8012fc4:	f7f9 fab6 	bl	800c534 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8012fc8:	f10d 020f 	add.w	r2, sp, #15
 8012fcc:	4641      	mov	r1, r8
 8012fce:	4630      	mov	r0, r6
 8012fd0:	f005 f8bd 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8012fd4:	f89d 300f 	ldrb.w	r3, [sp, #15]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8012fd8:	4604      	mov	r4, r0
	if (!success) {
 8012fda:	b933      	cbnz	r3, 8012fea <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x40>
		osSemaphoreRelease(RegistersSemaphore);
 8012fdc:	6830      	ldr	r0, [r6, #0]
 8012fde:	f7f9 fadd 	bl	800c59c <osSemaphoreRelease>
		return false;
 8012fe2:	2000      	movs	r0, #0
}
 8012fe4:	b005      	add	sp, #20
 8012fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8012fea:	f10d 000f 	add.w	r0, sp, #15
 8012fee:	f7fb fd35 	bl	800ea5c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>
	if (!success) {
 8012ff2:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d0f0      	beq.n	8012fdc <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x32>
	if (target_register->register_info.type != registered_type) {
 8012ffa:	7923      	ldrb	r3, [r4, #4]
 8012ffc:	4283      	cmp	r3, r0
 8012ffe:	d1ed      	bne.n	8012fdc <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x32>
	if (callbacks[target_register->register_info.type] == NULL) {
 8013000:	3304      	adds	r3, #4
 8013002:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 8013006:	2800      	cmp	r0, #0
 8013008:	d0e8      	beq.n	8012fdc <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x32>
	if (target_register->access.write) {
 801300a:	7a23      	ldrb	r3, [r4, #8]
 801300c:	2b00      	cmp	r3, #0
 801300e:	d0e5      	beq.n	8012fdc <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x32>
		success = false;
 8013010:	2300      	movs	r3, #0
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8013012:	8961      	ldrh	r1, [r4, #10]
		success = false;
 8013014:	f88d 300f 	strb.w	r3, [sp, #15]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8013018:	f7fc fbae 	bl	800f778 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE2atEj>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 801301c:	9b01      	ldr	r3, [sp, #4]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 801301e:	f8d0 9008 	ldr.w	r9, [r0, #8]
 8013022:	e9d0 ba00 	ldrd	fp, sl, [r0]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8013026:	b133      	cbz	r3, 8013036 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x8c>
 8013028:	68e3      	ldr	r3, [r4, #12]
 801302a:	b123      	cbz	r3, 8013036 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x8c>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 801302c:	f04f 31ff 	mov.w	r1, #4294967295
 8013030:	6818      	ldr	r0, [r3, #0]
 8013032:	f7f9 fa7f 	bl	800c534 <osSemaphoreAcquire>
		if (target_register->mode.pointer) {
 8013036:	7823      	ldrb	r3, [r4, #0]
 8013038:	b1eb      	cbz	r3, 8013076 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xcc>
			success = true;
 801303a:	2301      	movs	r3, #1
 801303c:	f88d 300f 	strb.w	r3, [sp, #15]
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 8013040:	7963      	ldrb	r3, [r4, #5]
 8013042:	2b00      	cmp	r3, #0
 8013044:	d04d      	beq.n	80130e2 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x138>
 8013046:	88e1      	ldrh	r1, [r4, #6]
 8013048:	2900      	cmp	r1, #0
 801304a:	d143      	bne.n	80130d4 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x12a>
	if (size_type __n = this->_M_impl._M_finish - __pos)
 801304c:	e9db 3100 	ldrd	r3, r1, [fp]
 8013050:	428b      	cmp	r3, r1
	    this->_M_impl._M_finish = __pos;
 8013052:	bf18      	it	ne
 8013054:	f8cb 3004 	strne.w	r3, [fp, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013058:	f8db 0004 	ldr.w	r0, [fp, #4]
 801305c:	1ac1      	subs	r1, r0, r3
 801305e:	1089      	asrs	r1, r1, #2
	if (__new_size > size())
 8013060:	428f      	cmp	r7, r1
 8013062:	d925      	bls.n	80130b0 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x106>
	  _M_default_append(__new_size - size());
 8013064:	1a79      	subs	r1, r7, r1
 8013066:	4658      	mov	r0, fp
 8013068:	f7ff ff38 	bl	8012edc <_ZNSt6vectorIfSaIfEE17_M_default_appendEj>
 801306c:	4628      	mov	r0, r5
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 801306e:	2300      	movs	r3, #0
				for (uint16_t index = 0; index < length; index++) {
 8013070:	b299      	uxth	r1, r3
 8013072:	42b9      	cmp	r1, r7
 8013074:	d324      	bcc.n	80130c0 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x116>
		if (target_register->mode.callbacks) {
 8013076:	7863      	ldrb	r3, [r4, #1]
 8013078:	b16b      	cbz	r3, 8013096 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xec>
			if (callbacks.write != NULL) {
 801307a:	f1b9 0f00 	cmp.w	r9, #0
 801307e:	d00a      	beq.n	8013096 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xec>
				if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 8013080:	7963      	ldrb	r3, [r4, #5]
 8013082:	b393      	cbz	r3, 80130ea <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x140>
 8013084:	88e3      	ldrh	r3, [r4, #6]
 8013086:	b903      	cbnz	r3, 801308a <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xe0>
					success = callbacks.write(callbacks.context, ID, value, length);
 8013088:	463b      	mov	r3, r7
					success = callbacks.write(callbacks.context, ID, value, 1);
 801308a:	462a      	mov	r2, r5
 801308c:	4641      	mov	r1, r8
 801308e:	4650      	mov	r0, sl
 8013090:	47c8      	blx	r9
 8013092:	f88d 000f 	strb.w	r0, [sp, #15]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8013096:	9b01      	ldr	r3, [sp, #4]
 8013098:	b123      	cbz	r3, 80130a4 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xfa>
 801309a:	68e3      	ldr	r3, [r4, #12]
 801309c:	b113      	cbz	r3, 80130a4 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xfa>
			osSemaphoreRelease(*(target_register->register_semaphore));
 801309e:	6818      	ldr	r0, [r3, #0]
 80130a0:	f7f9 fa7c 	bl	800c59c <osSemaphoreRelease>
		osSemaphoreRelease(RegistersSemaphore);
 80130a4:	6830      	ldr	r0, [r6, #0]
 80130a6:	f7f9 fa79 	bl	800c59c <osSemaphoreRelease>
		return success;
 80130aa:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80130ae:	e799      	b.n	8012fe4 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x3a>
	else if (__new_size < size())
 80130b0:	d2dc      	bcs.n	801306c <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xc2>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 80130b2:	eb03 0387 	add.w	r3, r3, r7, lsl #2
	if (size_type __n = this->_M_impl._M_finish - __pos)
 80130b6:	4298      	cmp	r0, r3
 80130b8:	d0d8      	beq.n	801306c <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xc2>
	    this->_M_impl._M_finish = __pos;
 80130ba:	f8cb 3004 	str.w	r3, [fp, #4]
 80130be:	e7d5      	b.n	801306c <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xc2>
					(*register_vector)[index] = value[index];
 80130c0:	f8db 1000 	ldr.w	r1, [fp]
 80130c4:	f850 cb04 	ldr.w	ip, [r0], #4
 80130c8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80130cc:	3301      	adds	r3, #1
 80130ce:	f8c1 c000 	str.w	ip, [r1]
				for (uint16_t index = 0; index < length; index++) {
 80130d2:	e7cd      	b.n	8013070 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xc6>
 80130d4:	465a      	mov	r2, fp
 80130d6:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 80130da:	4628      	mov	r0, r5
 80130dc:	f7ff ff3e 	bl	8012f5c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80130e0:	e7c9      	b.n	8013076 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xcc>
				*(callbacks.pointer) = *value;
 80130e2:	682b      	ldr	r3, [r5, #0]
 80130e4:	f8cb 3000 	str.w	r3, [fp]
 80130e8:	e7c5      	b.n	8013076 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xcc>
					success = callbacks.write(callbacks.context, ID, value, 1);
 80130ea:	2301      	movs	r3, #1
 80130ec:	e7cd      	b.n	801308a <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xe0>

080130ee <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t>:
uint16_t Communication::ProcessWrite(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 80130ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130f2:	b091      	sub	sp, #68	@ 0x44
 80130f4:	4605      	mov	r5, r0
 80130f6:	4691      	mov	r9, r2
 80130f8:	4608      	mov	r0, r1
 80130fa:	af02      	add	r7, sp, #8
 80130fc:	469a      	mov	sl, r3
		T value = ExtractSingle<T>(message.payload, start_index, &success);
 80130fe:	3104      	adds	r1, #4
uint16_t Communication::ProcessWrite(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 8013100:	f8d7 b060 	ldr.w	fp, [r7, #96]	@ 0x60
 8013104:	f107 060b 	add.w	r6, r7, #11
 8013108:	f8b7 4064 	ldrh.w	r4, [r7, #100]	@ 0x64
	if (not element.element_register.isArray) {
 801310c:	f89b 8003 	ldrb.w	r8, [fp, #3]
 8013110:	f1b8 0f00 	cmp.w	r8, #0
 8013114:	d174      	bne.n	8013200 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x112>
		T value = ExtractSingle<T>(message.payload, start_index, &success);
 8013116:	f107 0020 	add.w	r0, r7, #32
 801311a:	f7ed fe2b 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 801311e:	4632      	mov	r2, r6
 8013120:	4621      	mov	r1, r4
 8013122:	f107 0020 	add.w	r0, r7, #32
 8013126:	f7fb fdd5 	bl	800ecd4 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0>
      }
 801312a:	f107 0020 	add.w	r0, r7, #32
 801312e:	ed87 0a05 	vstr	s0, [r7, #20]
 8013132:	f7ed fd6f 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8013136:	7afb      	ldrb	r3, [r7, #11]
 8013138:	b153      	cbz	r3, 8013150 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x62>
			success = registers->WriteRegister<T>(element.element_register.address, &value);
 801313a:	2301      	movs	r3, #1
 801313c:	f8bb 1000 	ldrh.w	r1, [fp]
 8013140:	f107 0214 	add.w	r2, r7, #20
 8013144:	9300      	str	r3, [sp, #0]
 8013146:	4643      	mov	r3, r8
 8013148:	6868      	ldr	r0, [r5, #4]
 801314a:	f7ff ff2e 	bl	8012faa <_ZN9Registers13WriteRegisterIfEEbtPT_tb>
 801314e:	72f8      	strb	r0, [r7, #11]
		length_to_extract = 1;
 8013150:	f04f 0801 	mov.w	r8, #1
	if (success)
 8013154:	7af9      	ldrb	r1, [r7, #11]
		response_content.data = std::vector<uint8_t>{OK};
 8013156:	f10a 060c 	add.w	r6, sl, #12
 801315a:	f107 0314 	add.w	r3, r7, #20
 801315e:	f107 020c 	add.w	r2, r7, #12
	if (success)
 8013162:	2900      	cmp	r1, #0
 8013164:	f000 80cd 	beq.w	8013302 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x214>
		response_content.data = std::vector<uint8_t>{OK};
 8013168:	2100      	movs	r1, #0
 801316a:	60fb      	str	r3, [r7, #12]
 801316c:	2301      	movs	r3, #1
 801316e:	7539      	strb	r1, [r7, #20]
 8013170:	613b      	str	r3, [r7, #16]
 8013172:	ca06      	ldmia	r2, {r1, r2}
		response_content.data = std::vector<uint8_t>{ERROR};
 8013174:	f107 0020 	add.w	r0, r7, #32
 8013178:	f7fd fffe 	bl	8011178 <_ZNSt6vectorIhSaIhEEC2ESt16initializer_listIhERKS0_.constprop.0.isra.0>
 801317c:	f107 0120 	add.w	r1, r7, #32
 8013180:	4630      	mov	r0, r6
 8013182:	f7fb ff0c 	bl	800ef9e <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 8013186:	f107 0020 	add.w	r0, r7, #32
 801318a:	f7ed fd43 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not BuildPayload(response, response_content)) {
 801318e:	4651      	mov	r1, sl
 8013190:	f107 0020 	add.w	r0, r7, #32
 8013194:	f7fc fb7a 	bl	800f88c <_ZN14MessageElementC1ERKS_>
 8013198:	f107 0220 	add.w	r2, r7, #32
 801319c:	4649      	mov	r1, r9
 801319e:	4628      	mov	r0, r5
 80131a0:	f7fe f8cc 	bl	801133c <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 80131a4:	4606      	mov	r6, r0
 80131a6:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80131aa:	f7ed fd33 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80131ae:	bb06      	cbnz	r6, 80131f2 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x104>
		Send(*response);
 80131b0:	4649      	mov	r1, r9
 80131b2:	f107 0020 	add.w	r0, r7, #32
 80131b6:	f7fc fb7c 	bl	800f8b2 <_ZN13MessageHeaderC1ERKS_>
 80131ba:	f107 0120 	add.w	r1, r7, #32
 80131be:	4628      	mov	r0, r5
 80131c0:	f7fc fc66 	bl	800fa90 <_ZN13Communication4SendE13MessageHeader>
 80131c4:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80131c8:	f7ed fd24 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		response->payload.clear();
 80131cc:	f109 0004 	add.w	r0, r9, #4
 80131d0:	f7fb fefc 	bl	800efcc <_ZNSt6vectorIhSaIhEE5clearEv>
		BuildPayload(response, response_content);
 80131d4:	4651      	mov	r1, sl
 80131d6:	f107 0020 	add.w	r0, r7, #32
 80131da:	f7fc fb57 	bl	800f88c <_ZN14MessageElementC1ERKS_>
 80131de:	f107 0220 	add.w	r2, r7, #32
 80131e2:	4649      	mov	r1, r9
 80131e4:	4628      	mov	r0, r5
 80131e6:	f7fe f8a9 	bl	801133c <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 80131ea:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80131ee:	f7ed fd11 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return start_index + sizeof(T) * length_to_extract;
 80131f2:	eb04 0088 	add.w	r0, r4, r8, lsl #2
}
 80131f6:	373c      	adds	r7, #60	@ 0x3c
 80131f8:	b280      	uxth	r0, r0
 80131fa:	46bd      	mov	sp, r7
 80131fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (element.element_register.isArray && element.element_register.length > 0) {
 8013200:	f8bb 8004 	ldrh.w	r8, [fp, #4]
 8013204:	f1b8 0f00 	cmp.w	r8, #0
 8013208:	d02a      	beq.n	8013260 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x172>
		T values[length_to_extract];
 801320a:	ea4f 0388 	mov.w	r3, r8, lsl #2
 801320e:	466a      	mov	r2, sp
	} else if (element.element_register.isArray && element.element_register.length == 0) {
 8013210:	f8c7 d000 	str.w	sp, [r7]
		ExtractArray<T>(values, message.payload, start_index, length_to_extract, &success);
 8013214:	f107 0020 	add.w	r0, r7, #32
		T values[length_to_extract];
 8013218:	3307      	adds	r3, #7
 801321a:	08db      	lsrs	r3, r3, #3
 801321c:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 8013220:	469d      	mov	sp, r3
 8013222:	ab02      	add	r3, sp, #8
 8013224:	607b      	str	r3, [r7, #4]
		ExtractArray<T>(values, message.payload, start_index, length_to_extract, &success);
 8013226:	f7ed fda5 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 801322a:	9600      	str	r6, [sp, #0]
 801322c:	4643      	mov	r3, r8
 801322e:	4622      	mov	r2, r4
 8013230:	f107 0120 	add.w	r1, r7, #32
 8013234:	6878      	ldr	r0, [r7, #4]
 8013236:	f7fc fed1 	bl	800ffdc <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 801323a:	f107 0020 	add.w	r0, r7, #32
 801323e:	f7ed fce9 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8013242:	7afb      	ldrb	r3, [r7, #11]
 8013244:	b14b      	cbz	r3, 801325a <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x16c>
			success = registers->WriteRegister<T>(element.element_register.address, values);
 8013246:	2301      	movs	r3, #1
 8013248:	f8bb 1000 	ldrh.w	r1, [fp]
 801324c:	9300      	str	r3, [sp, #0]
 801324e:	2300      	movs	r3, #0
 8013250:	687a      	ldr	r2, [r7, #4]
 8013252:	6868      	ldr	r0, [r5, #4]
 8013254:	f7ff fea9 	bl	8012faa <_ZN9Registers13WriteRegisterIfEEbtPT_tb>
 8013258:	72f8      	strb	r0, [r7, #11]
 801325a:	f8d7 d000 	ldr.w	sp, [r7]
	} else if (element.element_register.isArray && element.element_register.length == 0) {
 801325e:	e779      	b.n	8013154 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x66>
		length_to_extract = message.payload[start_index];
 8013260:	6843      	ldr	r3, [r0, #4]
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8013262:	f107 0020 	add.w	r0, r7, #32
		length_to_extract = message.payload[start_index];
 8013266:	f813 8004 	ldrb.w	r8, [r3, r4]
		start_index++;
 801326a:	3401      	adds	r4, #1
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 801326c:	f7ed fd82 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8013270:	f107 0120 	add.w	r1, r7, #32
		start_index++;
 8013274:	b2a4      	uxth	r4, r4
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8013276:	4643      	mov	r3, r8
 8013278:	f107 0014 	add.w	r0, r7, #20
 801327c:	9600      	str	r6, [sp, #0]
 801327e:	4622      	mov	r2, r4
 8013280:	f7fc fe4e 	bl	800ff20 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 8013284:	f107 0020 	add.w	r0, r7, #32
 8013288:	f7ed fcc4 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 801328c:	7afb      	ldrb	r3, [r7, #11]
 801328e:	b1fb      	cbz	r3, 80132d0 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x1e2>
			success = registers->WriteVectorRegister<T>(element.element_register.address, values); // previously &values
 8013290:	686e      	ldr	r6, [r5, #4]
 8013292:	f107 0114 	add.w	r1, r7, #20
 8013296:	f8bb b000 	ldrh.w	fp, [fp]
 801329a:	f107 0020 	add.w	r0, r7, #32
 801329e:	f7ff fe6b 	bl	8012f78 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80132a2:	f04f 31ff 	mov.w	r1, #4294967295
 80132a6:	6830      	ldr	r0, [r6, #0]
 80132a8:	f7f9 f944 	bl	800c534 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80132ac:	f107 020c 	add.w	r2, r7, #12
 80132b0:	4659      	mov	r1, fp
 80132b2:	4630      	mov	r0, r6
 80132b4:	f004 ff4b 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80132b8:	7b3a      	ldrb	r2, [r7, #12]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80132ba:	4603      	mov	r3, r0
		osSemaphoreRelease(RegistersSemaphore);
 80132bc:	6830      	ldr	r0, [r6, #0]
	if (!success) {
 80132be:	b962      	cbnz	r2, 80132da <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x1ec>
		osSemaphoreRelease(RegistersSemaphore);
 80132c0:	f7f9 f96c 	bl	800c59c <osSemaphoreRelease>
		return false;
 80132c4:	2000      	movs	r0, #0
 80132c6:	72f8      	strb	r0, [r7, #11]
 80132c8:	f107 0020 	add.w	r0, r7, #32
 80132cc:	f7ee fea0 	bl	8002010 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 80132d0:	f107 0014 	add.w	r0, r7, #20
 80132d4:	f7ee fe9c 	bl	8002010 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 80132d8:	e73c      	b.n	8013154 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x66>
	if (!(target_register->register_info.isArray && target_register->register_info.length == 0)) {
 80132da:	795a      	ldrb	r2, [r3, #5]
 80132dc:	2a00      	cmp	r2, #0
 80132de:	d0ef      	beq.n	80132c0 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x1d2>
 80132e0:	88db      	ldrh	r3, [r3, #6]
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d1ec      	bne.n	80132c0 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x1d2>
	osSemaphoreRelease(RegistersSemaphore);
 80132e6:	f7f9 f959 	bl	800c59c <osSemaphoreRelease>
	return WriteRegister(ID, value.data(), value.size(), use_semaphore);
 80132ea:	2101      	movs	r1, #1
 80132ec:	4630      	mov	r0, r6
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80132ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80132f2:	9100      	str	r1, [sp, #0]
 80132f4:	4659      	mov	r1, fp
 80132f6:	1a9b      	subs	r3, r3, r2
 80132f8:	f3c3 038f 	ubfx	r3, r3, #2, #16
 80132fc:	f7ff fe55 	bl	8012faa <_ZN9Registers13WriteRegisterIfEEbtPT_tb>
 8013300:	e7e1      	b.n	80132c6 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x1d8>
		response_content.data = std::vector<uint8_t>{ERROR};
 8013302:	21ff      	movs	r1, #255	@ 0xff
 8013304:	617a      	str	r2, [r7, #20]
 8013306:	2201      	movs	r2, #1
 8013308:	7339      	strb	r1, [r7, #12]
 801330a:	61ba      	str	r2, [r7, #24]
 801330c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8013310:	e730      	b.n	8013174 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x86>

08013312 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt>:
uint16_t Communication::ProcessCommand(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 8013312:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013316:	468b      	mov	fp, r1
 8013318:	b0b1      	sub	sp, #196	@ 0xc4
 801331a:	4607      	mov	r7, r0
 801331c:	4698      	mov	r8, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 801331e:	2600      	movs	r6, #0
	response_content.ack = true;
 8013320:	f04f 0a01 	mov.w	sl, #1
uint16_t Communication::ProcessCommand(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 8013324:	4615      	mov	r5, r2
 8013326:	f8bd 90e8 	ldrh.w	r9, [sp, #232]	@ 0xe8
 801332a:	961d      	str	r6, [sp, #116]	@ 0x74
 801332c:	ac2a      	add	r4, sp, #168	@ 0xa8
	response_content.ack = true;
 801332e:	f8ad a066 	strh.w	sl, [sp, #102]	@ 0x66
	response_content.element_register = element.element_register;
 8013332:	e9d3 0100 	ldrd	r0, r1, [r3]
	response_content.access = element.access;
 8013336:	7a1b      	ldrb	r3, [r3, #8]
	response_content.element_register = element.element_register;
 8013338:	9018      	str	r0, [sp, #96]	@ 0x60
 801333a:	f8ad 1064 	strh.w	r1, [sp, #100]	@ 0x64
	CommunicationLED(leds, message.interface);
 801333e:	6938      	ldr	r0, [r7, #16]
 8013340:	f89b 1000 	ldrb.w	r1, [fp]
	response_content.access = element.access;
 8013344:	f88d 3068 	strb.w	r3, [sp, #104]	@ 0x68
 8013348:	e9cd 661b 	strd	r6, r6, [sp, #108]	@ 0x6c
	CommunicationLED(leds, message.interface);
 801334c:	f7fb fa2f 	bl	800e7ae <_Z16CommunicationLEDP4LEDSh>
	if (element.access == WRITE) {
 8013350:	f898 3008 	ldrb.w	r3, [r8, #8]
		return ProcessWrite<T>(message, response, response_content, element, start_index);
 8013354:	4659      	mov	r1, fp
	if (element.access == WRITE) {
 8013356:	bb1b      	cbnz	r3, 80133a0 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x8e>
		return ProcessWrite<T>(message, response, response_content, element, start_index);
 8013358:	a81e      	add	r0, sp, #120	@ 0x78
 801335a:	f7fc faaa 	bl	800f8b2 <_ZN13MessageHeaderC1ERKS_>
 801335e:	a918      	add	r1, sp, #96	@ 0x60
 8013360:	a824      	add	r0, sp, #144	@ 0x90
 8013362:	f7fc fa93 	bl	800f88c <_ZN14MessageElementC1ERKS_>
 8013366:	4641      	mov	r1, r8
 8013368:	4620      	mov	r0, r4
 801336a:	f7fc fa8f 	bl	800f88c <_ZN14MessageElementC1ERKS_>
 801336e:	ab24      	add	r3, sp, #144	@ 0x90
 8013370:	462a      	mov	r2, r5
 8013372:	a91e      	add	r1, sp, #120	@ 0x78
 8013374:	4638      	mov	r0, r7
 8013376:	e9cd 4900 	strd	r4, r9, [sp]
 801337a:	f7ff feb8 	bl	80130ee <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t>
 801337e:	4681      	mov	r9, r0
      }
 8013380:	a82d      	add	r0, sp, #180	@ 0xb4
 8013382:	f7ed fc47 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8013386:	a827      	add	r0, sp, #156	@ 0x9c
 8013388:	f7ed fc44 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801338c:	a81f      	add	r0, sp, #124	@ 0x7c
 801338e:	f7ed fc41 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8013392:	a81b      	add	r0, sp, #108	@ 0x6c
 8013394:	f7ed fc3e 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 8013398:	4648      	mov	r0, r9
 801339a:	b031      	add	sp, #196	@ 0xc4
 801339c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return ProcessRead<T>(message, response, response_content, element, start_index);
 80133a0:	a813      	add	r0, sp, #76	@ 0x4c
 80133a2:	f7fc fa86 	bl	800f8b2 <_ZN13MessageHeaderC1ERKS_>
 80133a6:	a918      	add	r1, sp, #96	@ 0x60
 80133a8:	a81e      	add	r0, sp, #120	@ 0x78
 80133aa:	f7fc fa6f 	bl	800f88c <_ZN14MessageElementC1ERKS_>
 80133ae:	4641      	mov	r1, r8
 80133b0:	a824      	add	r0, sp, #144	@ 0x90
 80133b2:	f7fc fa6b 	bl	800f88c <_ZN14MessageElementC1ERKS_>
	*success = registers->ReadRegister<T>(element->element_register.address, &register_read, &length);
 80133b6:	f8cd a000 	str.w	sl, [sp]
 80133ba:	f10d 0316 	add.w	r3, sp, #22
 80133be:	aa06      	add	r2, sp, #24
 80133c0:	f8bd 1090 	ldrh.w	r1, [sp, #144]	@ 0x90
 80133c4:	6878      	ldr	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80133c6:	9609      	str	r6, [sp, #36]	@ 0x24
 80133c8:	e9cd 6607 	strd	r6, r6, [sp, #28]
 80133cc:	f7fb fa5a 	bl	800e884 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb>
	if (not *success)
 80133d0:	4680      	mov	r8, r0
 80133d2:	2800      	cmp	r0, #0
 80133d4:	d040      	beq.n	8013458 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x146>
	std::vector<T> register_read_vector_cast = BuildTVector(*element, &register_read);
 80133d6:	a924      	add	r1, sp, #144	@ 0x90
 80133d8:	4620      	mov	r0, r4
 80133da:	f7fc fa57 	bl	800f88c <_ZN14MessageElementC1ERKS_>
	if (not element.element_register.isArray) {
 80133de:	f89d 30ab 	ldrb.w	r3, [sp, #171]	@ 0xab
 80133e2:	960c      	str	r6, [sp, #48]	@ 0x30
 80133e4:	e9cd 660a 	strd	r6, r6, [sp, #40]	@ 0x28
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	f040 808b 	bne.w	8013504 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x1f2>
		vector = std::vector<T>{*data};
 80133ee:	9b06      	ldr	r3, [sp, #24]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80133f0:	4650      	mov	r0, sl
 80133f2:	930d      	str	r3, [sp, #52]	@ 0x34
 80133f4:	f7fb fb03 	bl	800e9fe <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
			      _Category>::__copy_m(__first, __last, __result);
 80133f8:	a90e      	add	r1, sp, #56	@ 0x38
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80133fa:	1d03      	adds	r3, r0, #4
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80133fc:	4602      	mov	r2, r0
 80133fe:	9010      	str	r0, [sp, #64]	@ 0x40
 8013400:	a80d      	add	r0, sp, #52	@ 0x34
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8013402:	9312      	str	r3, [sp, #72]	@ 0x48
 8013404:	f7ff fdaa 	bl	8012f5c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
		vector = std::vector<T>(data, data + element.element_register.length);
 8013408:	a910      	add	r1, sp, #64	@ 0x40
	  this->_M_impl._M_finish =
 801340a:	9011      	str	r0, [sp, #68]	@ 0x44
 801340c:	a80a      	add	r0, sp, #40	@ 0x28
 801340e:	f7fc f8f9 	bl	800f604 <_ZNSt6vectorIfSaIfEEaSEOS1_.isra.0>
      }
 8013412:	a810      	add	r0, sp, #64	@ 0x40
 8013414:	f7ee fdfc 	bl	8002010 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8013418:	a82d      	add	r0, sp, #180	@ 0xb4
	: _M_start(), _M_finish(), _M_end_of_storage()
 801341a:	2600      	movs	r6, #0
      }
 801341c:	f7ed fbfa 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	data = BuildVector<T>(register_read_vector_cast);
 8013420:	a90a      	add	r1, sp, #40	@ 0x28
 8013422:	a810      	add	r0, sp, #64	@ 0x40
 8013424:	f7ff fda8 	bl	8012f78 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
      : _M_current(__i) { }
 8013428:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801342a:	f8dd a040 	ldr.w	sl, [sp, #64]	@ 0x40
	: _M_start(), _M_finish(), _M_end_of_storage()
 801342e:	960f      	str	r6, [sp, #60]	@ 0x3c
 8013430:	9302      	str	r3, [sp, #8]
 8013432:	e9cd 660d 	strd	r6, r6, [sp, #52]	@ 0x34
    for (T input : inputs) {
 8013436:	9b02      	ldr	r3, [sp, #8]
 8013438:	4553      	cmp	r3, sl
 801343a:	f040 808d 	bne.w	8013558 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x246>
	data = BuildVector<T>(register_read_vector_cast);
 801343e:	a90d      	add	r1, sp, #52	@ 0x34
 8013440:	a807      	add	r0, sp, #28
 8013442:	f7fb fdac 	bl	800ef9e <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8013446:	a80d      	add	r0, sp, #52	@ 0x34
 8013448:	f7ed fbe4 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801344c:	a810      	add	r0, sp, #64	@ 0x40
 801344e:	f7ee fddf 	bl	8002010 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8013452:	a80a      	add	r0, sp, #40	@ 0x28
 8013454:	f7ee fddc 	bl	8002010 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
	response_content.data = ReadElement<T>(&element, &success);
 8013458:	a821      	add	r0, sp, #132	@ 0x84
 801345a:	a907      	add	r1, sp, #28
 801345c:	f7fb fd9f 	bl	800ef9e <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 8013460:	a807      	add	r0, sp, #28
 8013462:	f7ed fbd7 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not success) {
 8013466:	f1b8 0f00 	cmp.w	r8, #0
 801346a:	d114      	bne.n	8013496 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x184>
		response_content.data = std::vector<uint8_t>{ERROR};
 801346c:	22ff      	movs	r2, #255	@ 0xff
		response_content.command = true; // this is an error flag for a read ack
 801346e:	2301      	movs	r3, #1
		response_content.data = std::vector<uint8_t>{ERROR};
 8013470:	4620      	mov	r0, r4
 8013472:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
 8013476:	aa0d      	add	r2, sp, #52	@ 0x34
		response_content.command = true; // this is an error flag for a read ack
 8013478:	f88d 307f 	strb.w	r3, [sp, #127]	@ 0x7f
		response_content.data = std::vector<uint8_t>{ERROR};
 801347c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8013480:	461a      	mov	r2, r3
 8013482:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8013484:	f7fd fe78 	bl	8011178 <_ZNSt6vectorIhSaIhEEC2ESt16initializer_listIhERKS0_.constprop.0.isra.0>
 8013488:	a821      	add	r0, sp, #132	@ 0x84
 801348a:	4621      	mov	r1, r4
 801348c:	f7fb fd87 	bl	800ef9e <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 8013490:	4620      	mov	r0, r4
 8013492:	f7ed fbbf 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not BuildPayload(response, response_content) && response->payload.size() > 0) { // if no space available, send the data and then rebuild a new response
 8013496:	a91e      	add	r1, sp, #120	@ 0x78
 8013498:	4620      	mov	r0, r4
 801349a:	f7fc f9f7 	bl	800f88c <_ZN14MessageElementC1ERKS_>
 801349e:	4622      	mov	r2, r4
 80134a0:	4629      	mov	r1, r5
 80134a2:	4638      	mov	r0, r7
 80134a4:	f7fd ff4a 	bl	801133c <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 80134a8:	2800      	cmp	r0, #0
 80134aa:	f040 8081 	bne.w	80135b0 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x29e>
 80134ae:	e9d5 3601 	ldrd	r3, r6, [r5, #4]
 80134b2:	1af6      	subs	r6, r6, r3
 80134b4:	bf18      	it	ne
 80134b6:	2601      	movne	r6, #1
 80134b8:	a82d      	add	r0, sp, #180	@ 0xb4
 80134ba:	f7ed fbab 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80134be:	b1ce      	cbz	r6, 80134f4 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x1e2>
		Send(*response);
 80134c0:	4629      	mov	r1, r5
 80134c2:	4620      	mov	r0, r4
 80134c4:	f7fc f9f5 	bl	800f8b2 <_ZN13MessageHeaderC1ERKS_>
 80134c8:	4621      	mov	r1, r4
 80134ca:	4638      	mov	r0, r7
 80134cc:	f7fc fae0 	bl	800fa90 <_ZN13Communication4SendE13MessageHeader>
 80134d0:	a82b      	add	r0, sp, #172	@ 0xac
 80134d2:	f7ed fb9f 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		response->payload.clear();
 80134d6:	1d28      	adds	r0, r5, #4
 80134d8:	f7fb fd78 	bl	800efcc <_ZNSt6vectorIhSaIhEE5clearEv>
		BuildPayload(response, response_content);
 80134dc:	a91e      	add	r1, sp, #120	@ 0x78
 80134de:	4620      	mov	r0, r4
 80134e0:	f7fc f9d4 	bl	800f88c <_ZN14MessageElementC1ERKS_>
 80134e4:	4622      	mov	r2, r4
 80134e6:	4629      	mov	r1, r5
 80134e8:	4638      	mov	r0, r7
 80134ea:	f7fd ff27 	bl	801133c <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 80134ee:	a82d      	add	r0, sp, #180	@ 0xb4
 80134f0:	f7ed fb90 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80134f4:	a827      	add	r0, sp, #156	@ 0x9c
 80134f6:	f7ed fb8d 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80134fa:	a821      	add	r0, sp, #132	@ 0x84
 80134fc:	f7ed fb8a 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8013500:	a814      	add	r0, sp, #80	@ 0x50
 8013502:	e744      	b.n	801338e <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x7c>
	} else if (element.element_register.isArray && element.element_register.length > 0)
 8013504:	f8bd 00ac 	ldrh.w	r0, [sp, #172]	@ 0xac
 8013508:	b150      	cbz	r0, 8013520 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x20e>
		vector = std::vector<T>(data, data + element.element_register.length);
 801350a:	0086      	lsls	r6, r0, #2
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 801350c:	f7fb fa77 	bl	800e9fe <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
 8013510:	4602      	mov	r2, r0
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8013512:	1983      	adds	r3, r0, r6
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8013514:	9010      	str	r0, [sp, #64]	@ 0x40
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8013516:	9312      	str	r3, [sp, #72]	@ 0x48
 8013518:	ab06      	add	r3, sp, #24
 801351a:	1999      	adds	r1, r3, r6
 801351c:	4618      	mov	r0, r3
 801351e:	e771      	b.n	8013404 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0xf2>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013520:	e9dd b106 	ldrd	fp, r1, [sp, #24]
	  if (__xlen > capacity())
 8013524:	ebb1 0a0b 	subs.w	sl, r1, fp
 8013528:	d011      	beq.n	801354e <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x23c>
	  pointer __result = this->_M_allocate(__n);
 801352a:	ea4f 00aa 	mov.w	r0, sl, asr #2
 801352e:	9102      	str	r1, [sp, #8]
 8013530:	f7fb fa65 	bl	800e9fe <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
 8013534:	4606      	mov	r6, r0
 8013536:	4602      	mov	r2, r0
 8013538:	9902      	ldr	r1, [sp, #8]
 801353a:	4658      	mov	r0, fp
 801353c:	f7ff fd0e 	bl	8012f5c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	      this->_M_impl._M_start = __tmp;
 8013540:	960a      	str	r6, [sp, #40]	@ 0x28
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8013542:	4456      	add	r6, sl
 8013544:	960c      	str	r6, [sp, #48]	@ 0x30
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8013546:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013548:	4453      	add	r3, sl
 801354a:	930b      	str	r3, [sp, #44]	@ 0x2c
      return *this;
 801354c:	e764      	b.n	8013418 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x106>
 801354e:	4652      	mov	r2, sl
 8013550:	4658      	mov	r0, fp
 8013552:	f7ff fd03 	bl	8012f5c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8013556:	e7f6      	b.n	8013546 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x234>
    for (T input : inputs) {
 8013558:	f85a 2b04 	ldr.w	r2, [sl], #4
    std::memcpy(&reinterpreted_input, &input, sizeof(T)); // this is mandatory to get rid of the memory alignment problem. A simple cast can't work here
 801355c:	f04f 0b18 	mov.w	fp, #24
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013560:	962c      	str	r6, [sp, #176]	@ 0xb0
 8013562:	e9cd 662a 	strd	r6, r6, [sp, #168]	@ 0xa8
		data.push_back((uint8_t) ((reinterpreted_input >> ((type_length - 1 - index) << 3)) & 0xFF)); // previously (8 * (type_length - 1 - index))) & 0xFF))
 8013566:	f1cb 0c20 	rsb	ip, fp, #32
 801356a:	fa22 f10b 	lsr.w	r1, r2, fp
 801356e:	f1ab 0020 	sub.w	r0, fp, #32
	for (uint8_t index = 0; index < type_length; index++) {
 8013572:	f1ab 0b08 	sub.w	fp, fp, #8
		data.push_back((uint8_t) ((reinterpreted_input >> ((type_length - 1 - index) << 3)) & 0xFF)); // previously (8 * (type_length - 1 - index))) & 0xFF))
 8013576:	fa06 fc0c 	lsl.w	ip, r6, ip
 801357a:	9203      	str	r2, [sp, #12]
 801357c:	fa26 f000 	lsr.w	r0, r6, r0
 8013580:	ea41 010c 	orr.w	r1, r1, ip
 8013584:	4301      	orrs	r1, r0
      { emplace_back(std::move(__x)); }
 8013586:	4620      	mov	r0, r4
 8013588:	f88d 1015 	strb.w	r1, [sp, #21]
 801358c:	f10d 0115 	add.w	r1, sp, #21
 8013590:	f7fc f850 	bl	800f634 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
	for (uint8_t index = 0; index < type_length; index++) {
 8013594:	f11b 0f08 	cmn.w	fp, #8
 8013598:	9a03      	ldr	r2, [sp, #12]
 801359a:	d1e4      	bne.n	8013566 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x254>
        data.insert(data.end(), single.begin(), single.end());
 801359c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801359e:	a80d      	add	r0, sp, #52	@ 0x34
 80135a0:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	@ 0xa8
 80135a4:	f7fd fe56 	bl	8011254 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_>
      }
 80135a8:	4620      	mov	r0, r4
 80135aa:	f7ed fb33 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return *this;
 80135ae:	e742      	b.n	8013436 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x124>
	if (not BuildPayload(response, response_content) && response->payload.size() > 0) { // if no space available, send the data and then rebuild a new response
 80135b0:	2600      	movs	r6, #0
 80135b2:	e781      	b.n	80134b8 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x1a6>

080135b4 <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt>:
uint16_t Communication::ProcessElement(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 80135b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80135b6:	461c      	mov	r4, r3
 80135b8:	b08f      	sub	sp, #60	@ 0x3c
	if (not element.ack && element.command) {
 80135ba:	799b      	ldrb	r3, [r3, #6]
uint16_t Communication::ProcessElement(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 80135bc:	4605      	mov	r5, r0
 80135be:	4617      	mov	r7, r2
 80135c0:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
	if (not element.ack && element.command) {
 80135c4:	b9cb      	cbnz	r3, 80135fa <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt+0x46>
 80135c6:	79e3      	ldrb	r3, [r4, #7]
		return ProcessCommand<T>(message, response, element, start_index);
 80135c8:	a803      	add	r0, sp, #12
	if (not element.ack && element.command) {
 80135ca:	b323      	cbz	r3, 8013616 <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt+0x62>
		return ProcessCommand<T>(message, response, element, start_index);
 80135cc:	f7fc f971 	bl	800f8b2 <_ZN13MessageHeaderC1ERKS_>
 80135d0:	4621      	mov	r1, r4
 80135d2:	a808      	add	r0, sp, #32
 80135d4:	f7fc f95a 	bl	800f88c <_ZN14MessageElementC1ERKS_>
 80135d8:	ab08      	add	r3, sp, #32
 80135da:	463a      	mov	r2, r7
 80135dc:	a903      	add	r1, sp, #12
 80135de:	4628      	mov	r0, r5
 80135e0:	9600      	str	r6, [sp, #0]
 80135e2:	f7ff fe96 	bl	8013312 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt>
		return ProcessSubscriber<T>(message, element, start_index);
 80135e6:	4604      	mov	r4, r0
 80135e8:	a80b      	add	r0, sp, #44	@ 0x2c
 80135ea:	f7ed fb13 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80135ee:	a804      	add	r0, sp, #16
 80135f0:	f7ed fb10 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 80135f4:	4620      	mov	r0, r4
 80135f6:	b00f      	add	sp, #60	@ 0x3c
 80135f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ProcessService<T>(message, element, start_index);
 80135fa:	a803      	add	r0, sp, #12
 80135fc:	f7fc f959 	bl	800f8b2 <_ZN13MessageHeaderC1ERKS_>
 8013600:	4621      	mov	r1, r4
 8013602:	a808      	add	r0, sp, #32
 8013604:	f7fc f942 	bl	800f88c <_ZN14MessageElementC1ERKS_>
 8013608:	4633      	mov	r3, r6
 801360a:	aa08      	add	r2, sp, #32
 801360c:	a903      	add	r1, sp, #12
 801360e:	4628      	mov	r0, r5
 8013610:	f7fc fd98 	bl	8010144 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt>
 8013614:	e7e7      	b.n	80135e6 <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt+0x32>
		return ProcessSubscriber<T>(message, element, start_index);
 8013616:	f7fc f94c 	bl	800f8b2 <_ZN13MessageHeaderC1ERKS_>
 801361a:	4621      	mov	r1, r4
 801361c:	a808      	add	r0, sp, #32
 801361e:	f7fc f935 	bl	800f88c <_ZN14MessageElementC1ERKS_>
 8013622:	4633      	mov	r3, r6
 8013624:	aa08      	add	r2, sp, #32
 8013626:	a903      	add	r1, sp, #12
 8013628:	4628      	mov	r0, r5
 801362a:	f7fc fd06 	bl	801003a <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt>
 801362e:	e7da      	b.n	80135e6 <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt+0x32>

08013630 <_ZN13Communication12ParseMessageE13MessageHeader>:
void Communication::ParseMessage(MessageHeader message) {
 8013630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013632:	b099      	sub	sp, #100	@ 0x64
	response.interface = message.interface;
 8013634:	780b      	ldrb	r3, [r1, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013636:	2400      	movs	r4, #0
void Communication::ParseMessage(MessageHeader message) {
 8013638:	4606      	mov	r6, r0
	response.interface = message.interface;
 801363a:	f88d 3008 	strb.w	r3, [sp, #8]
void Communication::ParseMessage(MessageHeader message) {
 801363e:	460d      	mov	r5, r1
	response.target_address = message.source_address;
 8013640:	7c4b      	ldrb	r3, [r1, #17]
 8013642:	9411      	str	r4, [sp, #68]	@ 0x44
 8013644:	9405      	str	r4, [sp, #20]
 8013646:	f88d 3018 	strb.w	r3, [sp, #24]
 801364a:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
 801364e:	e9cd 4403 	strd	r4, r4, [sp, #12]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013652:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 8013656:	1a9b      	subs	r3, r3, r2
	while (index < message.payload.size()) {
 8013658:	429c      	cmp	r4, r3
 801365a:	d203      	bcs.n	8013664 <_ZN13Communication12ParseMessageE13MessageHeader+0x34>
		if (index + 1 >= (uint16_t) message.payload.size())
 801365c:	1c60      	adds	r0, r4, #1
 801365e:	b29b      	uxth	r3, r3
 8013660:	4298      	cmp	r0, r3
 8013662:	db0c      	blt.n	801367e <_ZN13Communication12ParseMessageE13MessageHeader+0x4e>
	if (response.payload.size() > 0)
 8013664:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8013668:	429a      	cmp	r2, r3
 801366a:	f040 808e 	bne.w	801378a <_ZN13Communication12ParseMessageE13MessageHeader+0x15a>
      }
 801366e:	a803      	add	r0, sp, #12
 8013670:	f7ed fad0 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8013674:	a80f      	add	r0, sp, #60	@ 0x3c
 8013676:	f7ed facd 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 801367a:	b019      	add	sp, #100	@ 0x64
 801367c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		element.ack = message.payload[index] & ACK_MASK;
 801367e:	5d13      	ldrb	r3, [r2, r4]
		element.element_register.address = (message.payload[index] & ~(ACK_MASK | COMMAND_MASK | ACCESS_MASK)) << 8 | message.payload[index + 1];
 8013680:	5c12      	ldrb	r2, [r2, r0]
		bool success = FindRegister(message, &response, &element);
 8013682:	a812      	add	r0, sp, #72	@ 0x48
		element.ack = message.payload[index] & ACK_MASK;
 8013684:	09d9      	lsrs	r1, r3, #7
 8013686:	f88d 1036 	strb.w	r1, [sp, #54]	@ 0x36
		element.command = message.payload[index] & COMMAND_MASK;
 801368a:	f3c3 1180 	ubfx	r1, r3, #6, #1
 801368e:	f88d 1037 	strb.w	r1, [sp, #55]	@ 0x37
		element.access = message.payload[index] & ACCESS_MASK;
 8013692:	f3c3 1140 	ubfx	r1, r3, #5, #1
		element.element_register.address = (message.payload[index] & ~(ACK_MASK | COMMAND_MASK | ACCESS_MASK)) << 8 | message.payload[index + 1];
 8013696:	021b      	lsls	r3, r3, #8
		element.access = message.payload[index] & ACCESS_MASK;
 8013698:	f88d 1038 	strb.w	r1, [sp, #56]	@ 0x38
		bool success = FindRegister(message, &response, &element);
 801369c:	4629      	mov	r1, r5
		element.element_register.address = (message.payload[index] & ~(ACK_MASK | COMMAND_MASK | ACCESS_MASK)) << 8 | message.payload[index + 1];
 801369e:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
 80136a2:	4313      	orrs	r3, r2
 80136a4:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
		bool success = FindRegister(message, &response, &element);
 80136a8:	f7fc f903 	bl	800f8b2 <_ZN13MessageHeaderC1ERKS_>
 80136ac:	ab0c      	add	r3, sp, #48	@ 0x30
 80136ae:	aa02      	add	r2, sp, #8
 80136b0:	a912      	add	r1, sp, #72	@ 0x48
 80136b2:	4630      	mov	r0, r6
 80136b4:	f7fd fe9a 	bl	80113ec <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement>
 80136b8:	4607      	mov	r7, r0
 80136ba:	a813      	add	r0, sp, #76	@ 0x4c
 80136bc:	f7ed faaa 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (not success) break;
 80136c0:	2f00      	cmp	r7, #0
 80136c2:	d0cf      	beq.n	8013664 <_ZN13Communication12ParseMessageE13MessageHeader+0x34>
			index = ProcessElement<uint8_t>(message, &response, element, index + 2);
 80136c4:	3402      	adds	r4, #2
		switch (element.element_register.type) {
 80136c6:	f89d 3032 	ldrb.w	r3, [sp, #50]	@ 0x32
			index = ProcessElement<uint8_t>(message, &response, element, index + 2);
 80136ca:	b2a4      	uxth	r4, r4
		switch (element.element_register.type) {
 80136cc:	2b08      	cmp	r3, #8
 80136ce:	d8c0      	bhi.n	8013652 <_ZN13Communication12ParseMessageE13MessageHeader+0x22>
 80136d0:	a201      	add	r2, pc, #4	@ (adr r2, 80136d8 <_ZN13Communication12ParseMessageE13MessageHeader+0xa8>)
 80136d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80136d6:	bf00      	nop
 80136d8:	080136fd 	.word	0x080136fd
 80136dc:	08013653 	.word	0x08013653
 80136e0:	0801372b 	.word	0x0801372b
 80136e4:	08013653 	.word	0x08013653
 80136e8:	0801374b 	.word	0x0801374b
 80136ec:	08013653 	.word	0x08013653
 80136f0:	08013653 	.word	0x08013653
 80136f4:	08013653 	.word	0x08013653
 80136f8:	0801376b 	.word	0x0801376b
			index = ProcessElement<uint8_t>(message, &response, element, index + 2);
 80136fc:	4629      	mov	r1, r5
 80136fe:	a807      	add	r0, sp, #28
 8013700:	f7fc f8d7 	bl	800f8b2 <_ZN13MessageHeaderC1ERKS_>
 8013704:	a90c      	add	r1, sp, #48	@ 0x30
 8013706:	a812      	add	r0, sp, #72	@ 0x48
 8013708:	f7fc f8c0 	bl	800f88c <_ZN14MessageElementC1ERKS_>
 801370c:	ab12      	add	r3, sp, #72	@ 0x48
 801370e:	aa02      	add	r2, sp, #8
 8013710:	a907      	add	r1, sp, #28
 8013712:	4630      	mov	r0, r6
 8013714:	9400      	str	r4, [sp, #0]
 8013716:	f7fe fb09 	bl	8011d2c <_ZN13Communication14ProcessElementIhEEt13MessageHeaderPS1_14MessageElementt>
			index = ProcessElement<float>(message, &response, element, index + 2);
 801371a:	4604      	mov	r4, r0
 801371c:	a815      	add	r0, sp, #84	@ 0x54
 801371e:	f7ed fa79 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8013722:	a808      	add	r0, sp, #32
 8013724:	f7ed fa76 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
			break;
 8013728:	e793      	b.n	8013652 <_ZN13Communication12ParseMessageE13MessageHeader+0x22>
			index = ProcessElement<uint32_t>(message, &response, element, index + 2);
 801372a:	4629      	mov	r1, r5
 801372c:	a807      	add	r0, sp, #28
 801372e:	f7fc f8c0 	bl	800f8b2 <_ZN13MessageHeaderC1ERKS_>
 8013732:	a90c      	add	r1, sp, #48	@ 0x30
 8013734:	a812      	add	r0, sp, #72	@ 0x48
 8013736:	f7fc f8a9 	bl	800f88c <_ZN14MessageElementC1ERKS_>
 801373a:	ab12      	add	r3, sp, #72	@ 0x48
 801373c:	aa02      	add	r2, sp, #8
 801373e:	a907      	add	r1, sp, #28
 8013740:	4630      	mov	r0, r6
 8013742:	9400      	str	r4, [sp, #0]
 8013744:	f7fe ff58 	bl	80125f8 <_ZN13Communication14ProcessElementImEEt13MessageHeaderPS1_14MessageElementt>
 8013748:	e7e7      	b.n	801371a <_ZN13Communication12ParseMessageE13MessageHeader+0xea>
			index = ProcessElement<int8_t>(message, &response, element, index + 2);
 801374a:	4629      	mov	r1, r5
 801374c:	a807      	add	r0, sp, #28
 801374e:	f7fc f8b0 	bl	800f8b2 <_ZN13MessageHeaderC1ERKS_>
 8013752:	a90c      	add	r1, sp, #48	@ 0x30
 8013754:	a812      	add	r0, sp, #72	@ 0x48
 8013756:	f7fc f899 	bl	800f88c <_ZN14MessageElementC1ERKS_>
 801375a:	ab12      	add	r3, sp, #72	@ 0x48
 801375c:	aa02      	add	r2, sp, #8
 801375e:	a907      	add	r1, sp, #28
 8013760:	4630      	mov	r0, r6
 8013762:	9400      	str	r4, [sp, #0]
 8013764:	f7ff fb67 	bl	8012e36 <_ZN13Communication14ProcessElementIaEEt13MessageHeaderPS1_14MessageElementt>
 8013768:	e7d7      	b.n	801371a <_ZN13Communication12ParseMessageE13MessageHeader+0xea>
			index = ProcessElement<float>(message, &response, element, index + 2);
 801376a:	4629      	mov	r1, r5
 801376c:	a807      	add	r0, sp, #28
 801376e:	f7fc f8a0 	bl	800f8b2 <_ZN13MessageHeaderC1ERKS_>
 8013772:	a90c      	add	r1, sp, #48	@ 0x30
 8013774:	a812      	add	r0, sp, #72	@ 0x48
 8013776:	f7fc f889 	bl	800f88c <_ZN14MessageElementC1ERKS_>
 801377a:	ab12      	add	r3, sp, #72	@ 0x48
 801377c:	aa02      	add	r2, sp, #8
 801377e:	a907      	add	r1, sp, #28
 8013780:	4630      	mov	r0, r6
 8013782:	9400      	str	r4, [sp, #0]
 8013784:	f7ff ff16 	bl	80135b4 <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt>
 8013788:	e7c7      	b.n	801371a <_ZN13Communication12ParseMessageE13MessageHeader+0xea>
		Send(response);
 801378a:	a902      	add	r1, sp, #8
 801378c:	a812      	add	r0, sp, #72	@ 0x48
 801378e:	f7fc f890 	bl	800f8b2 <_ZN13MessageHeaderC1ERKS_>
 8013792:	a912      	add	r1, sp, #72	@ 0x48
 8013794:	4630      	mov	r0, r6
 8013796:	f7fc f97b 	bl	800fa90 <_ZN13Communication4SendE13MessageHeader>
 801379a:	a813      	add	r0, sp, #76	@ 0x4c
 801379c:	f7ed fa3a 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80137a0:	e765      	b.n	801366e <_ZN13Communication12ParseMessageE13MessageHeader+0x3e>
 80137a2:	bf00      	nop

080137a4 <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb>:
uint16_t Communication::Process(uint8_t ID, std::vector<uint8_t> data, bool* success) {
 80137a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80137a8:	461c      	mov	r4, r3
 80137aa:	b08e      	sub	sp, #56	@ 0x38
	uint16_t processed_length = 0;
 80137ac:	2300      	movs	r3, #0
uint16_t Communication::Process(uint8_t ID, std::vector<uint8_t> data, bool* success) {
 80137ae:	4616      	mov	r6, r2
	CommunicationProtocol* protocol = FindProtocol(ID, success);
 80137b0:	4622      	mov	r2, r4
uint16_t Communication::Process(uint8_t ID, std::vector<uint8_t> data, bool* success) {
 80137b2:	4605      	mov	r5, r0
 80137b4:	4688      	mov	r8, r1
	uint16_t processed_length = 0;
 80137b6:	f8ad 300e 	strh.w	r3, [sp, #14]
	CommunicationProtocol* protocol = FindProtocol(ID, success);
 80137ba:	f7fb fb67 	bl	800ee8c <_ZN13Communication12FindProtocolEhPb>
 80137be:	4607      	mov	r7, r0
	if (not *success)
 80137c0:	7820      	ldrb	r0, [r4, #0]
 80137c2:	2800      	cmp	r0, #0
 80137c4:	d039      	beq.n	801383a <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x96>
		MessageHeader message = protocol->DecodeProtocol(ID, data, &processed_length, success);
 80137c6:	f10d 0a0e 	add.w	sl, sp, #14
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever); // TODO ADDED
 80137ca:	f04f 31ff 	mov.w	r1, #4294967295
 80137ce:	6828      	ldr	r0, [r5, #0]
 80137d0:	f7f8 feb0 	bl	800c534 <osSemaphoreAcquire>
	while (processed_length < data.size()) {// && processed_length < data.size()) {
 80137d4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80137d8:	e9d6 1300 	ldrd	r1, r3, [r6]
 80137dc:	1a5b      	subs	r3, r3, r1
 80137de:	429a      	cmp	r2, r3
 80137e0:	d226      	bcs.n	8013830 <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x8c>
		MessageHeader message = protocol->DecodeProtocol(ID, data, &processed_length, success);
 80137e2:	683b      	ldr	r3, [r7, #0]
 80137e4:	4631      	mov	r1, r6
 80137e6:	a809      	add	r0, sp, #36	@ 0x24
 80137e8:	f8d3 9000 	ldr.w	r9, [r3]
 80137ec:	f7ed fac2 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80137f0:	ab09      	add	r3, sp, #36	@ 0x24
 80137f2:	4642      	mov	r2, r8
 80137f4:	4639      	mov	r1, r7
 80137f6:	a804      	add	r0, sp, #16
 80137f8:	e9cd a400 	strd	sl, r4, [sp]
 80137fc:	47c8      	blx	r9
      }
 80137fe:	a809      	add	r0, sp, #36	@ 0x24
 8013800:	f7ed fa08 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (not *success) break;
 8013804:	7823      	ldrb	r3, [r4, #0]
 8013806:	b183      	cbz	r3, 801382a <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x86>
		if (!AcceptMessage(message)) {
 8013808:	a904      	add	r1, sp, #16
 801380a:	a809      	add	r0, sp, #36	@ 0x24
 801380c:	f7fc f851 	bl	800f8b2 <_ZN13MessageHeaderC1ERKS_>
 8013810:	a909      	add	r1, sp, #36	@ 0x24
 8013812:	4628      	mov	r0, r5
 8013814:	f7fb fb5e 	bl	800eed4 <_ZN13Communication13AcceptMessageE13MessageHeader>
 8013818:	4681      	mov	r9, r0
 801381a:	a80a      	add	r0, sp, #40	@ 0x28
 801381c:	f7ed f9fa 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8013820:	f1b9 0f00 	cmp.w	r9, #0
 8013824:	d10c      	bne.n	8013840 <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x9c>
			*success = false;
 8013826:	f884 9000 	strb.w	r9, [r4]
 801382a:	a805      	add	r0, sp, #20
 801382c:	f7ed f9f2 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	osSemaphoreRelease(CommunicationSemaphore);  // TODO ADDED
 8013830:	6828      	ldr	r0, [r5, #0]
 8013832:	f7f8 feb3 	bl	800c59c <osSemaphoreRelease>
	return processed_length;
 8013836:	f8bd 000e 	ldrh.w	r0, [sp, #14]
}
 801383a:	b00e      	add	sp, #56	@ 0x38
 801383c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ParseMessage(message);
 8013840:	a904      	add	r1, sp, #16
 8013842:	a809      	add	r0, sp, #36	@ 0x24
		message.interface = ID;
 8013844:	f88d 8010 	strb.w	r8, [sp, #16]
		ParseMessage(message);
 8013848:	f7fc f833 	bl	800f8b2 <_ZN13MessageHeaderC1ERKS_>
 801384c:	a909      	add	r1, sp, #36	@ 0x24
 801384e:	4628      	mov	r0, r5
 8013850:	f7ff feee 	bl	8013630 <_ZN13Communication12ParseMessageE13MessageHeader>
 8013854:	a80a      	add	r0, sp, #40	@ 0x28
 8013856:	f7ed f9dd 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801385a:	a805      	add	r0, sp, #20
 801385c:	f7ed f9da 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8013860:	e7b8      	b.n	80137d4 <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x30>

08013862 <_ZN13HardwareDelayC1EP17TIM_HandleTypeDef>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013862:	2300      	movs	r3, #0
/**
 * @brief Class constructor
 *
 * @param input timer_: the timer pointer used to generate interrupts
 */
HardwareDelay::HardwareDelay(TIM_HandleTypeDef* timer_) {
 8013864:	b570      	push	{r4, r5, r6, lr}
 8013866:	4604      	mov	r4, r0
 8013868:	6183      	str	r3, [r0, #24]
	timer = timer_;
 801386a:	6041      	str	r1, [r0, #4]
 801386c:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8013870:	2024      	movs	r0, #36	@ 0x24
 8013872:	f006 ffc4 	bl	801a7fe <_Znwj>
 8013876:	4605      	mov	r5, r0
      ptrdiff_t __count = __last - __first;
 8013878:	e9d4 6204 	ldrd	r6, r2, [r4, #16]
 801387c:	1b92      	subs	r2, r2, r6
      if (__count > 0)
 801387e:	2a00      	cmp	r2, #0
 8013880:	dd08      	ble.n	8013894 <_ZN13HardwareDelayC1EP17TIM_HandleTypeDef+0x32>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8013882:	4631      	mov	r1, r6
 8013884:	f007 faf2 	bl	801ae6c <memmove>
			- this->_M_impl._M_start);
 8013888:	69a1      	ldr	r1, [r4, #24]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801388a:	4630      	mov	r0, r6
 801388c:	1b89      	subs	r1, r1, r6
 801388e:	f006 ff91 	bl	801a7b4 <_ZdlPvj>
      }
 8013892:	e001      	b.n	8013898 <_ZN13HardwareDelayC1EP17TIM_HandleTypeDef+0x36>
	if (__p)
 8013894:	2e00      	cmp	r6, #0
 8013896:	d1f7      	bne.n	8013888 <_ZN13HardwareDelayC1EP17TIM_HandleTypeDef+0x26>

	pending_delays.reserve(DELAY_NUMBER_OF_CHANNELS);
}
 8013898:	4620      	mov	r0, r4
	  this->_M_impl._M_finish = __tmp + __old_size;
 801389a:	e9c4 5504 	strd	r5, r5, [r4, #16]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801389e:	3524      	adds	r5, #36	@ 0x24
 80138a0:	61a5      	str	r5, [r4, #24]
 80138a2:	bd70      	pop	{r4, r5, r6, pc}

080138a4 <_ZN13HardwareDelay13AssignedTimerEP17TIM_HandleTypeDef>:
 * @brief Check that the input timer is registered in the class.
 *
 * @param input timer_: the timer pointer to check
 * @return true if input timer is used by the class
 */
bool HardwareDelay::AssignedTimer(TIM_HandleTypeDef* timer_) {
 80138a4:	b570      	push	{r4, r5, r6, lr}
 80138a6:	4604      	mov	r4, r0
 80138a8:	460e      	mov	r6, r1
	osSemaphoreAcquire(DelaySemaphore, osWaitForever);
 80138aa:	6800      	ldr	r0, [r0, #0]
 80138ac:	f04f 31ff 	mov.w	r1, #4294967295
 80138b0:	f7f8 fe40 	bl	800c534 <osSemaphoreAcquire>
	bool result = timer == timer_;
 80138b4:	6865      	ldr	r5, [r4, #4]
	osSemaphoreRelease(DelaySemaphore);
 80138b6:	6820      	ldr	r0, [r4, #0]
	bool result = timer == timer_;
 80138b8:	1bab      	subs	r3, r5, r6
 80138ba:	425d      	negs	r5, r3
 80138bc:	415d      	adcs	r5, r3
	osSemaphoreRelease(DelaySemaphore);
 80138be:	f7f8 fe6d 	bl	800c59c <osSemaphoreRelease>
	return result;
}
 80138c2:	4628      	mov	r0, r5
 80138c4:	bd70      	pop	{r4, r5, r6, pc}

080138c6 <_ZN13HardwareDelay10StartDelayEv>:
}

/**
 * @brief Setup and start the timer based on the active delay
 */
void HardwareDelay::StartDelay(void) {
 80138c6:	4603      	mov	r3, r0
	timer->Instance->CNT = 0;
 80138c8:	6840      	ldr	r0, [r0, #4]
 80138ca:	2200      	movs	r2, #0
 80138cc:	6801      	ldr	r1, [r0, #0]
 80138ce:	624a      	str	r2, [r1, #36]	@ 0x24
	return *(this->_M_impl._M_start + __n);
 80138d0:	7b1a      	ldrb	r2, [r3, #12]
	timer->Instance->ARR = pending_delays[active_delay].delay;
 80138d2:	691b      	ldr	r3, [r3, #16]
 80138d4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80138d8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80138dc:	885b      	ldrh	r3, [r3, #2]
 80138de:	62cb      	str	r3, [r1, #44]	@ 0x2c
	timer->Instance->SR = ~TIM_IT_UPDATE;
 80138e0:	f06f 0301 	mvn.w	r3, #1
 80138e4:	610b      	str	r3, [r1, #16]
	HAL_TIM_Base_Start_IT(timer);
 80138e6:	f7f6 bc2f 	b.w	800a148 <HAL_TIM_Base_Start_IT>
	...

080138ec <_ZN13HardwareDelay14StartNextDelayEv>:
}

/**
 * @brief Active and start the next delay
 */
void HardwareDelay::StartNextDelay(void) {
 80138ec:	b5f0      	push	{r4, r5, r6, r7, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80138ee:	e9d0 5304 	ldrd	r5, r3, [r0, #16]
 80138f2:	4a1a      	ldr	r2, [pc, #104]	@ (801395c <_ZN13HardwareDelay14StartNextDelayEv+0x70>)
 80138f4:	1b59      	subs	r1, r3, r5
	if (pending_delays.size() == 0) return;
 80138f6:	42ab      	cmp	r3, r5
 80138f8:	ea4f 01a1 	mov.w	r1, r1, asr #2
 80138fc:	fb02 f101 	mul.w	r1, r2, r1
 8013900:	d02b      	beq.n	801395a <_ZN13HardwareDelay14StartNextDelayEv+0x6e>

	// Find the smallest delay in memory
	uint8_t min_delay = 0;
	for (uint8_t index = 1; index < pending_delays.size(); index++) {
 8013902:	2301      	movs	r3, #1
	uint8_t min_delay = 0;
 8013904:	2400      	movs	r4, #0
	return *(this->_M_impl._M_start + __n);
 8013906:	b222      	sxth	r2, r4
	for (uint8_t index = 1; index < pending_delays.size(); index++) {
 8013908:	428b      	cmp	r3, r1
 801390a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801390e:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8013912:	d30a      	bcc.n	801392a <_ZN13HardwareDelay14StartNextDelayEv+0x3e>
			min_delay = index;
	}

	// Update other delays based on the active one
	active_delay = min_delay;
	for (uint8_t index = 0; index < pending_delays.size(); index++) {
 8013914:	2600      	movs	r6, #0
 8013916:	f04f 0c0c 	mov.w	ip, #12
	active_delay = min_delay;
 801391a:	7304      	strb	r4, [r0, #12]
	for (uint8_t index = 0; index < pending_delays.size(); index++) {
 801391c:	b2f3      	uxtb	r3, r6
 801391e:	428b      	cmp	r3, r1
 8013920:	d30f      	bcc.n	8013942 <_ZN13HardwareDelay14StartNextDelayEv+0x56>
		}
	}

	// Start the delay
	StartDelay();
}
 8013922:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	StartDelay();
 8013926:	f7ff bfce 	b.w	80138c6 <_ZN13HardwareDelay10StartDelayEv>
 801392a:	eb03 0643 	add.w	r6, r3, r3, lsl #1
		if (pending_delays[index].delay < pending_delays[min_delay].delay)
 801392e:	8852      	ldrh	r2, [r2, #2]
 8013930:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 8013934:	8876      	ldrh	r6, [r6, #2]
			min_delay = index;
 8013936:	4296      	cmp	r6, r2
 8013938:	bf38      	it	cc
 801393a:	461c      	movcc	r4, r3
	for (uint8_t index = 1; index < pending_delays.size(); index++) {
 801393c:	3301      	adds	r3, #1
 801393e:	b2db      	uxtb	r3, r3
 8013940:	e7e1      	b.n	8013906 <_ZN13HardwareDelay14StartNextDelayEv+0x1a>
		if (index != active_delay) {
 8013942:	429c      	cmp	r4, r3
 8013944:	d007      	beq.n	8013956 <_ZN13HardwareDelay14StartNextDelayEv+0x6a>
 8013946:	fb0c 5303 	mla	r3, ip, r3, r5
			pending_delays[index].delay -= pending_delays[active_delay].delay;
 801394a:	f8b2 e002 	ldrh.w	lr, [r2, #2]
 801394e:	885f      	ldrh	r7, [r3, #2]
 8013950:	eba7 070e 	sub.w	r7, r7, lr
 8013954:	805f      	strh	r7, [r3, #2]
	for (uint8_t index = 0; index < pending_delays.size(); index++) {
 8013956:	3601      	adds	r6, #1
 8013958:	e7e0      	b.n	801391c <_ZN13HardwareDelay14StartNextDelayEv+0x30>
}
 801395a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801395c:	aaaaaaab 	.word	0xaaaaaaab

08013960 <_ZNSt6vectorI5DelaySaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>:
    vector<_Tp, _Alloc>::
 8013960:	460b      	mov	r3, r1
      : _M_current(__i) { }
 8013962:	6842      	ldr	r2, [r0, #4]
      { return __normal_iterator(_M_current + __n); }
 8013964:	310c      	adds	r1, #12
      if (__position + 1 != end())
 8013966:	428a      	cmp	r2, r1
    vector<_Tp, _Alloc>::
 8013968:	b510      	push	{r4, lr}
 801396a:	4604      	mov	r4, r0
      if (__position + 1 != end())
 801396c:	d004      	beq.n	8013978 <_ZNSt6vectorI5DelaySaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 801396e:	4618      	mov	r0, r3
 8013970:	1a52      	subs	r2, r2, r1
 8013972:	f007 fa7b 	bl	801ae6c <memmove>
 8013976:	4603      	mov	r3, r0
      --this->_M_impl._M_finish;
 8013978:	6862      	ldr	r2, [r4, #4]
    }
 801397a:	4618      	mov	r0, r3
      --this->_M_impl._M_finish;
 801397c:	3a0c      	subs	r2, #12
 801397e:	6062      	str	r2, [r4, #4]
    }
 8013980:	bd10      	pop	{r4, pc}

08013982 <_ZN13HardwareDelay14TriggeredDelayEv>:

/**
 * @brief ISR called by the timer. Summons the callback then start the next delay
 */
void HardwareDelay::TriggeredDelay(void) {
 8013982:	b510      	push	{r4, lr}
 8013984:	4604      	mov	r4, r0
	HAL_TIM_Base_Stop_IT(timer);
 8013986:	6840      	ldr	r0, [r0, #4]
 8013988:	f7f6 fc26 	bl	800a1d8 <HAL_TIM_Base_Stop_IT>

	osSemaphoreAcquire(DelaySemaphore, osWaitForever);
 801398c:	f04f 31ff 	mov.w	r1, #4294967295
 8013990:	6820      	ldr	r0, [r4, #0]
 8013992:	f7f8 fdcf 	bl	800c534 <osSemaphoreAcquire>
	timer->Instance->SR = ~TIM_IT_UPDATE;
 8013996:	6863      	ldr	r3, [r4, #4]
 8013998:	f06f 0201 	mvn.w	r2, #1
 801399c:	6921      	ldr	r1, [r4, #16]
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	611a      	str	r2, [r3, #16]
 80139a2:	7b23      	ldrb	r3, [r4, #12]
 80139a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80139a8:	0098      	lsls	r0, r3, #2
 80139aa:	eb01 0383 	add.w	r3, r1, r3, lsl #2

	// Summon callback
	if (pending_delays[active_delay].callback != NULL) {
 80139ae:	689a      	ldr	r2, [r3, #8]
 80139b0:	b112      	cbz	r2, 80139b8 <_ZN13HardwareDelay14TriggeredDelayEv+0x36>
		pending_delays[active_delay].callback(pending_delays[active_delay].context, pending_delays[active_delay].ID);
 80139b2:	5c09      	ldrb	r1, [r1, r0]
 80139b4:	6858      	ldr	r0, [r3, #4]
 80139b6:	4790      	blx	r2
 80139b8:	7b21      	ldrb	r1, [r4, #12]
 80139ba:	4620      	mov	r0, r4
 80139bc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80139c0:	f850 3f10 	ldr.w	r3, [r0, #16]!
      { return _M_erase(begin() + (__position - cbegin())); }
 80139c4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80139c8:	f7ff ffca 	bl	8013960 <_ZNSt6vectorI5DelaySaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>

	// Remove delay
	pending_delays.erase(pending_delays.begin() + active_delay);

	// Stat next delay
	StartNextDelay();
 80139cc:	4620      	mov	r0, r4
 80139ce:	f7ff ff8d 	bl	80138ec <_ZN13HardwareDelay14StartNextDelayEv>
	osSemaphoreRelease(DelaySemaphore);
 80139d2:	6820      	ldr	r0, [r4, #0]
}
 80139d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSemaphoreRelease(DelaySemaphore);
 80139d8:	f7f8 bde0 	b.w	800c59c <osSemaphoreRelease>

080139dc <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80139dc:	2800      	cmp	r0, #0
      _M_allocate(size_t __n)
 80139de:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80139e0:	d006      	beq.n	80139f0 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0x14>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80139e2:	da01      	bge.n	80139e8 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0xc>
	    std::__throw_bad_alloc();
 80139e4:	f006 ffba 	bl	801a95c <_ZSt17__throw_bad_allocv>
      }
 80139e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80139ec:	f006 bf07 	b.w	801a7fe <_Znwj>
 80139f0:	bd08      	pop	{r3, pc}
	...

080139f4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>:
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80139f4:	4926      	ldr	r1, [pc, #152]	@ (8013a90 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 80139f6:	b510      	push	{r4, lr}
 80139f8:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80139fa:	4608      	mov	r0, r1
 80139fc:	f006 ff96 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8013a00:	2800      	cmp	r0, #0
 8013a02:	d133      	bne.n	8013a6c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8013a04:	4923      	ldr	r1, [pc, #140]	@ (8013a94 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa0>)
 8013a06:	4822      	ldr	r0, [pc, #136]	@ (8013a90 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8013a08:	f006 ff90 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8013a0c:	2800      	cmp	r0, #0
 8013a0e:	d12f      	bne.n	8013a70 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8013a10:	4921      	ldr	r1, [pc, #132]	@ (8013a98 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa4>)
 8013a12:	481f      	ldr	r0, [pc, #124]	@ (8013a90 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8013a14:	f006 ff8a 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8013a18:	bb60      	cbnz	r0, 8013a74 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8013a1a:	4920      	ldr	r1, [pc, #128]	@ (8013a9c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa8>)
 8013a1c:	481c      	ldr	r0, [pc, #112]	@ (8013a90 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8013a1e:	f006 ff85 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8013a22:	bb48      	cbnz	r0, 8013a78 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8013a24:	491e      	ldr	r1, [pc, #120]	@ (8013aa0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xac>)
 8013a26:	481a      	ldr	r0, [pc, #104]	@ (8013a90 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8013a28:	f006 ff80 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8013a2c:	bb30      	cbnz	r0, 8013a7c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 8013a2e:	491d      	ldr	r1, [pc, #116]	@ (8013aa4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb0>)
 8013a30:	4817      	ldr	r0, [pc, #92]	@ (8013a90 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8013a32:	f006 ff7b 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8013a36:	bb18      	cbnz	r0, 8013a80 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8013a38:	491b      	ldr	r1, [pc, #108]	@ (8013aa8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb4>)
 8013a3a:	4815      	ldr	r0, [pc, #84]	@ (8013a90 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8013a3c:	f006 ff76 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8013a40:	bb00      	cbnz	r0, 8013a84 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 8013a42:	491a      	ldr	r1, [pc, #104]	@ (8013aac <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb8>)
 8013a44:	4812      	ldr	r0, [pc, #72]	@ (8013a90 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8013a46:	f006 ff71 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8013a4a:	b9e8      	cbnz	r0, 8013a88 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8013a4c:	4918      	ldr	r1, [pc, #96]	@ (8013ab0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xbc>)
 8013a4e:	4810      	ldr	r0, [pc, #64]	@ (8013a90 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8013a50:	f006 ff6c 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8013a54:	b9d0      	cbnz	r0, 8013a8c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 8013a56:	4917      	ldr	r1, [pc, #92]	@ (8013ab4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xc0>)
 8013a58:	480d      	ldr	r0, [pc, #52]	@ (8013a90 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8013a5a:	f006 ff67 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 8013a5e:	2800      	cmp	r0, #0
 8013a60:	bf14      	ite	ne
 8013a62:	2309      	movne	r3, #9
 8013a64:	2300      	moveq	r3, #0
 8013a66:	7020      	strb	r0, [r4, #0]
}
 8013a68:	4618      	mov	r0, r3
 8013a6a:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8013a6c:	2300      	movs	r3, #0
 8013a6e:	e7fa      	b.n	8013a66 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8013a70:	2301      	movs	r3, #1
 8013a72:	e7f8      	b.n	8013a66 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8013a74:	2302      	movs	r3, #2
 8013a76:	e7f6      	b.n	8013a66 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8013a78:	2303      	movs	r3, #3
 8013a7a:	e7f4      	b.n	8013a66 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8013a7c:	2304      	movs	r3, #4
 8013a7e:	e7f2      	b.n	8013a66 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 8013a80:	2305      	movs	r3, #5
 8013a82:	e7f0      	b.n	8013a66 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8013a84:	2306      	movs	r3, #6
 8013a86:	e7ee      	b.n	8013a66 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 8013a88:	2307      	movs	r3, #7
 8013a8a:	e7ec      	b.n	8013a66 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8013a8c:	2308      	movs	r3, #8
 8013a8e:	e7ea      	b.n	8013a66 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
 8013a90:	0801b5d4 	.word	0x0801b5d4
 8013a94:	0801b5c4 	.word	0x0801b5c4
 8013a98:	0801b5b4 	.word	0x0801b5b4
 8013a9c:	0801b5a4 	.word	0x0801b5a4
 8013aa0:	0801b5dc 	.word	0x0801b5dc
 8013aa4:	0801b5cc 	.word	0x0801b5cc
 8013aa8:	0801b5bc 	.word	0x0801b5bc
 8013aac:	0801b5ac 	.word	0x0801b5ac
 8013ab0:	0801b59c 	.word	0x0801b59c
 8013ab4:	0801b594 	.word	0x0801b594

08013ab8 <_ZN4LEDSC1Ev>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013ab8:	2200      	movs	r2, #0
 8013aba:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8013abe:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8013ac2:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8013ac6:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8013aca:	e9c0 220a 	strd	r2, r2, [r0, #40]	@ 0x28
 8013ace:	e9c0 220c 	strd	r2, r2, [r0, #48]	@ 0x30
/**
 * @brief Class constructor
 */
LEDS::LEDS()
{
}
 8013ad2:	4770      	bx	lr

08013ad4 <_ZN4LEDS4InitEP9Registers>:
/**
 * @brief Initialize the class with references to other classes. Set default values.
 *
 * @param input registers_: the Registers instance
 */
void LEDS::Init(Registers* registers_) {
 8013ad4:	b510      	push	{r4, lr}
	registers = registers_;
 8013ad6:	6001      	str	r1, [r0, #0]

	LEDsSemaphore = osSemaphoreNew(1,1,NULL);
 8013ad8:	2101      	movs	r1, #1
void LEDS::Init(Registers* registers_) {
 8013ada:	4604      	mov	r4, r0
	LEDsSemaphore = osSemaphoreNew(1,1,NULL);
 8013adc:	2200      	movs	r2, #0
 8013ade:	4608      	mov	r0, r1
 8013ae0:	f7f8 fccc 	bl	800c47c <osSemaphoreNew>
 8013ae4:	6060      	str	r0, [r4, #4]
	osSemaphoreRelease(LEDsSemaphore);
}
 8013ae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSemaphoreRelease(LEDsSemaphore);
 8013aea:	f7f8 bd57 	b.w	800c59c <osSemaphoreRelease>

08013aee <_ZN4LEDS4SpinEv>:
}

/**
 * @brief Function used to process the blinking patterns of SMD LEDs. Called repeatedly in a freeRTOS task
 */
void LEDS::Spin(void) {
 8013aee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013af0:	4605      	mov	r5, r0
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8013af2:	f04f 31ff 	mov.w	r1, #4294967295
 8013af6:	6840      	ldr	r0, [r0, #4]
            }
            HAL_GPIO_WritePin(led.gpio.port, led.gpio.pin, (GPIO_PinState) state);

            led.counter++;
            if (led.counter >= led.T) {
                led.counter = 0;
 8013af8:	2700      	movs	r7, #0
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8013afa:	f7f8 fd1b 	bl	800c534 <osSemaphoreAcquire>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8013afe:	e9d5 4602 	ldrd	r4, r6, [r5, #8]
    for (LED & led : LEDs) {
 8013b02:	42a6      	cmp	r6, r4
 8013b04:	d107      	bne.n	8013b16 <_ZN4LEDS4SpinEv+0x28>
                if (not led.repeat)
                    led.blink = false;
            }
        }
    }
    osSemaphoreRelease(LEDsSemaphore);
 8013b06:	6868      	ldr	r0, [r5, #4]
 8013b08:	f7f8 fd48 	bl	800c59c <osSemaphoreRelease>

    osDelay(DEFAULT_LEDS_PERIOD);
 8013b0c:	2064      	movs	r0, #100	@ 0x64
}
 8013b0e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    osDelay(DEFAULT_LEDS_PERIOD);
 8013b12:	f7f8 bca5 	b.w	800c460 <osDelay>
        if (led.blink) {
 8013b16:	7b22      	ldrb	r2, [r4, #12]
 8013b18:	b1a2      	cbz	r2, 8013b44 <_ZN4LEDS4SpinEv+0x56>
 8013b1a:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
            for(uint8_t t : led.timings) {
 8013b1e:	4299      	cmp	r1, r3
 8013b20:	d005      	beq.n	8013b2e <_ZN4LEDS4SpinEv+0x40>
 8013b22:	f813 0b01 	ldrb.w	r0, [r3], #1
                if (led.counter < t)
 8013b26:	f894 c00e 	ldrb.w	ip, [r4, #14]
 8013b2a:	4584      	cmp	ip, r0
 8013b2c:	d20c      	bcs.n	8013b48 <_ZN4LEDS4SpinEv+0x5a>
            HAL_GPIO_WritePin(led.gpio.port, led.gpio.pin, (GPIO_PinState) state);
 8013b2e:	8921      	ldrh	r1, [r4, #8]
 8013b30:	6860      	ldr	r0, [r4, #4]
 8013b32:	f7f2 fd2f 	bl	8006594 <HAL_GPIO_WritePin>
            led.counter++;
 8013b36:	7ba3      	ldrb	r3, [r4, #14]
            if (led.counter >= led.T) {
 8013b38:	7f22      	ldrb	r2, [r4, #28]
            led.counter++;
 8013b3a:	3301      	adds	r3, #1
 8013b3c:	b2db      	uxtb	r3, r3
            if (led.counter >= led.T) {
 8013b3e:	429a      	cmp	r2, r3
            led.counter++;
 8013b40:	73a3      	strb	r3, [r4, #14]
            if (led.counter >= led.T) {
 8013b42:	d904      	bls.n	8013b4e <_ZN4LEDS4SpinEv+0x60>
      operator++() _GLIBCXX_NOEXCEPT
 8013b44:	3420      	adds	r4, #32
	return *this;
 8013b46:	e7dc      	b.n	8013b02 <_ZN4LEDS4SpinEv+0x14>
                state =  not state;
 8013b48:	f082 0201 	eor.w	r2, r2, #1
 8013b4c:	e7e7      	b.n	8013b1e <_ZN4LEDS4SpinEv+0x30>
                if (not led.repeat)
 8013b4e:	7b63      	ldrb	r3, [r4, #13]
                led.counter = 0;
 8013b50:	73a7      	strb	r7, [r4, #14]
                if (not led.repeat)
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d1f6      	bne.n	8013b44 <_ZN4LEDS4SpinEv+0x56>
                    led.blink = false;
 8013b56:	7323      	strb	r3, [r4, #12]
 8013b58:	e7f4      	b.n	8013b44 <_ZN4LEDS4SpinEv+0x56>

08013b5a <_ZN4LEDS6GetLEDEhPb>:
 *
 * @param input ID: LED ID
 * @param output success: true whether successful
 * @return the LED index
 */
uint8_t LEDS::GetLED(uint8_t ID, bool* success) {
 8013b5a:	b570      	push	{r4, r5, r6, lr}
 8013b5c:	e9d0 3402 	ldrd	r3, r4, [r0, #8]
    uint8_t index = 0;
    for (LED & led : LEDs) {
 8013b60:	2000      	movs	r0, #0
 8013b62:	429c      	cmp	r4, r3
 8013b64:	461d      	mov	r5, r3
 8013b66:	d102      	bne.n	8013b6e <_ZN4LEDS6GetLEDEhPb+0x14>
 8013b68:	2300      	movs	r3, #0
            return index;
        }
        index++;
    }
    *success = false;
    return 0;
 8013b6a:	4618      	mov	r0, r3
 8013b6c:	e006      	b.n	8013b7c <_ZN4LEDS6GetLEDEhPb+0x22>
        if (led.ID == ID) {
 8013b6e:	782d      	ldrb	r5, [r5, #0]
 8013b70:	1c46      	adds	r6, r0, #1
 8013b72:	3320      	adds	r3, #32
 8013b74:	428d      	cmp	r5, r1
 8013b76:	d103      	bne.n	8013b80 <_ZN4LEDS6GetLEDEhPb+0x26>
 8013b78:	b2c0      	uxtb	r0, r0
 8013b7a:	2301      	movs	r3, #1
            *success = true;
 8013b7c:	7013      	strb	r3, [r2, #0]
}
 8013b7e:	bd70      	pop	{r4, r5, r6, pc}
 8013b80:	4630      	mov	r0, r6
 8013b82:	e7ee      	b.n	8013b62 <_ZN4LEDS6GetLEDEhPb+0x8>

08013b84 <_ZN4LEDS6SetLEDEh13GPIO_PinState>:
bool LEDS::SetLED(uint8_t ID, GPIO_PinState state) {
 8013b84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013b86:	4616      	mov	r6, r2
    uint8_t index = GetLED(ID, &success);
 8013b88:	f10d 0207 	add.w	r2, sp, #7
bool LEDS::SetLED(uint8_t ID, GPIO_PinState state) {
 8013b8c:	4604      	mov	r4, r0
    uint8_t index = GetLED(ID, &success);
 8013b8e:	f7ff ffe4 	bl	8013b5a <_ZN4LEDS6GetLEDEhPb>
    if (success) {
 8013b92:	f89d 7007 	ldrb.w	r7, [sp, #7]
    uint8_t index = GetLED(ID, &success);
 8013b96:	4605      	mov	r5, r0
    if (success) {
 8013b98:	b17f      	cbz	r7, 8013bba <_ZN4LEDS6SetLEDEh13GPIO_PinState+0x36>
    	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8013b9a:	f04f 31ff 	mov.w	r1, #4294967295
 8013b9e:	6860      	ldr	r0, [r4, #4]
 8013ba0:	f7f8 fcc8 	bl	800c534 <osSemaphoreAcquire>
	return *(this->_M_impl._M_start + __n);
 8013ba4:	68a3      	ldr	r3, [r4, #8]
 8013ba6:	b22d      	sxth	r5, r5
        LEDs[index].blink = false;
 8013ba8:	2200      	movs	r2, #0
 8013baa:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 8013bae:	731a      	strb	r2, [r3, #12]
        HAL_GPIO_WritePin(LEDs[index].gpio.port, LEDs[index].gpio.pin, state);
 8013bb0:	4632      	mov	r2, r6
 8013bb2:	8919      	ldrh	r1, [r3, #8]
 8013bb4:	6858      	ldr	r0, [r3, #4]
 8013bb6:	f7f2 fced 	bl	8006594 <HAL_GPIO_WritePin>
    osSemaphoreRelease(LEDsSemaphore);
 8013bba:	6860      	ldr	r0, [r4, #4]
 8013bbc:	f7f8 fcee 	bl	800c59c <osSemaphoreRelease>
}
 8013bc0:	4638      	mov	r0, r7
 8013bc2:	b003      	add	sp, #12
 8013bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013bc6 <_ZN4LEDS5BlinkEh>:
bool LEDS::Blink(uint8_t ID) {
 8013bc6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013bc8:	460d      	mov	r5, r1
 8013bca:	4604      	mov	r4, r0
    osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8013bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8013bd0:	6840      	ldr	r0, [r0, #4]
 8013bd2:	f7f8 fcaf 	bl	800c534 <osSemaphoreAcquire>
    uint8_t index = GetLED(ID, &success);
 8013bd6:	4629      	mov	r1, r5
 8013bd8:	f10d 0207 	add.w	r2, sp, #7
 8013bdc:	4620      	mov	r0, r4
 8013bde:	f7ff ffbc 	bl	8013b5a <_ZN4LEDS6GetLEDEhPb>
    if (success) {
 8013be2:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8013be6:	b145      	cbz	r5, 8013bfa <_ZN4LEDS5BlinkEh+0x34>
 8013be8:	68a3      	ldr	r3, [r4, #8]
 8013bea:	b200      	sxth	r0, r0
        LEDs[index].blink = true;
 8013bec:	f240 1201 	movw	r2, #257	@ 0x101
 8013bf0:	eb03 1340 	add.w	r3, r3, r0, lsl #5
 8013bf4:	819a      	strh	r2, [r3, #12]
        LEDs[index].counter = 0;
 8013bf6:	2200      	movs	r2, #0
 8013bf8:	739a      	strb	r2, [r3, #14]
    osSemaphoreRelease(LEDsSemaphore);
 8013bfa:	6860      	ldr	r0, [r4, #4]
 8013bfc:	f7f8 fcce 	bl	800c59c <osSemaphoreRelease>
}
 8013c00:	4628      	mov	r0, r5
 8013c02:	b003      	add	sp, #12
 8013c04:	bd30      	pop	{r4, r5, pc}

08013c06 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE1_4_FUNES0_tS1_t>:
			return self->Blink(*input);
 8013c06:	7811      	ldrb	r1, [r2, #0]
 8013c08:	f7ff bfdd 	b.w	8013bc6 <_ZN4LEDS5BlinkEh>

08013c0c <_ZN4LEDS9BlinkOnceEh>:
bool LEDS::BlinkOnce(uint8_t ID) {
 8013c0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013c0e:	460d      	mov	r5, r1
 8013c10:	4604      	mov	r4, r0
    osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8013c12:	f04f 31ff 	mov.w	r1, #4294967295
 8013c16:	6840      	ldr	r0, [r0, #4]
 8013c18:	f7f8 fc8c 	bl	800c534 <osSemaphoreAcquire>
    uint8_t index = GetLED(ID, &success);
 8013c1c:	4629      	mov	r1, r5
 8013c1e:	f10d 0207 	add.w	r2, sp, #7
 8013c22:	4620      	mov	r0, r4
 8013c24:	f7ff ff99 	bl	8013b5a <_ZN4LEDS6GetLEDEhPb>
    if (success) {
 8013c28:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8013c2c:	b13d      	cbz	r5, 8013c3e <_ZN4LEDS9BlinkOnceEh+0x32>
 8013c2e:	68a3      	ldr	r3, [r4, #8]
 8013c30:	b200      	sxth	r0, r0
        LEDs[index].blink = true;
 8013c32:	2201      	movs	r2, #1
 8013c34:	eb03 1340 	add.w	r3, r3, r0, lsl #5
 8013c38:	819a      	strh	r2, [r3, #12]
        LEDs[index].counter = 0;
 8013c3a:	2200      	movs	r2, #0
 8013c3c:	739a      	strb	r2, [r3, #14]
    osSemaphoreRelease(LEDsSemaphore);
 8013c3e:	6860      	ldr	r0, [r4, #4]
 8013c40:	f7f8 fcac 	bl	800c59c <osSemaphoreRelease>
}
 8013c44:	4628      	mov	r0, r5
 8013c46:	b003      	add	sp, #12
 8013c48:	bd30      	pop	{r4, r5, pc}

08013c4a <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE2_4_FUNES0_tS1_t>:
			return self->BlinkOnce(*input);
 8013c4a:	7811      	ldrb	r1, [r2, #0]
 8013c4c:	f7ff bfde 	b.w	8013c0c <_ZN4LEDS9BlinkOnceEh>

08013c50 <_ZN4LEDS9GetRGBLEDEhPb>:
 *
 * @param input ID: LED ID
 * @param output success: true whether successful
 * @return the LED index
 */
uint8_t LEDS::GetRGBLED(uint8_t ID, bool* success) {
 8013c50:	b570      	push	{r4, r5, r6, lr}
 8013c52:	e9d0 3405 	ldrd	r3, r4, [r0, #20]
    uint8_t index = 0;
    for (RGBLED & led : RGB_LEDs) {
 8013c56:	2000      	movs	r0, #0
 8013c58:	429c      	cmp	r4, r3
 8013c5a:	461d      	mov	r5, r3
 8013c5c:	d102      	bne.n	8013c64 <_ZN4LEDS9GetRGBLEDEhPb+0x14>
 8013c5e:	2300      	movs	r3, #0
            return index;
        }
        index++;
    }
    *success = false;
    return 0;
 8013c60:	4618      	mov	r0, r3
 8013c62:	e006      	b.n	8013c72 <_ZN4LEDS9GetRGBLEDEhPb+0x22>
        if (led.ID == ID) {
 8013c64:	782d      	ldrb	r5, [r5, #0]
 8013c66:	1c46      	adds	r6, r0, #1
 8013c68:	3310      	adds	r3, #16
 8013c6a:	428d      	cmp	r5, r1
 8013c6c:	d103      	bne.n	8013c76 <_ZN4LEDS9GetRGBLEDEhPb+0x26>
 8013c6e:	b2c0      	uxtb	r0, r0
 8013c70:	2301      	movs	r3, #1
            *success = true;
 8013c72:	7013      	strb	r3, [r2, #0]
}
 8013c74:	bd70      	pop	{r4, r5, r6, pc}
 8013c76:	4630      	mov	r0, r6
 8013c78:	e7ee      	b.n	8013c58 <_ZN4LEDS9GetRGBLEDEhPb+0x8>

08013c7a <_ZN4LEDS6SetRGBEhhhh>:
bool LEDS::SetRGB(uint8_t ID, uint8_t R, uint8_t G, uint8_t B) {
 8013c7a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8013c7e:	4617      	mov	r7, r2
    uint8_t index = GetRGBLED(ID, &success);
 8013c80:	f10d 0207 	add.w	r2, sp, #7
bool LEDS::SetRGB(uint8_t ID, uint8_t R, uint8_t G, uint8_t B) {
 8013c84:	4604      	mov	r4, r0
 8013c86:	461e      	mov	r6, r3
    uint8_t index = GetRGBLED(ID, &success);
 8013c88:	f7ff ffe2 	bl	8013c50 <_ZN4LEDS9GetRGBLEDEhPb>
    if (success) {
 8013c8c:	f89d 8007 	ldrb.w	r8, [sp, #7]
    uint8_t index = GetRGBLED(ID, &success);
 8013c90:	4605      	mov	r5, r0
    if (success) {
 8013c92:	f1b8 0f00 	cmp.w	r8, #0
 8013c96:	d010      	beq.n	8013cba <_ZN4LEDS6SetRGBEhhhh+0x40>
    	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8013c98:	f04f 31ff 	mov.w	r1, #4294967295
 8013c9c:	6860      	ldr	r0, [r4, #4]
 8013c9e:	f7f8 fc49 	bl	800c534 <osSemaphoreAcquire>
 8013ca2:	6961      	ldr	r1, [r4, #20]
 8013ca4:	b22d      	sxth	r5, r5
 8013ca6:	eb01 1105 	add.w	r1, r1, r5, lsl #4
        RGBLED led = RGB_LEDs[index];
 8013caa:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
        *led.pulse_red = R;
 8013cae:	6849      	ldr	r1, [r1, #4]
 8013cb0:	600f      	str	r7, [r1, #0]
        *led.pulse_green = G;
 8013cb2:	6016      	str	r6, [r2, #0]
        *led.pulse_blue = B;
 8013cb4:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8013cb8:	601a      	str	r2, [r3, #0]
    osSemaphoreRelease(LEDsSemaphore);
 8013cba:	6860      	ldr	r0, [r4, #4]
 8013cbc:	f7f8 fc6e 	bl	800c59c <osSemaphoreRelease>
}
 8013cc0:	4640      	mov	r0, r8
 8013cc2:	b002      	add	sp, #8
 8013cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013cc8 <_ZN4LEDS9GetI2CLEDEhPb>:
 *
 * @param input ID: LED ID
 * @param output success: true whether successful
 * @return the LED index
 */
uint8_t LEDS::GetI2CLED(uint8_t ID, bool* success) {
 8013cc8:	b570      	push	{r4, r5, r6, lr}
 8013cca:	e9d0 3408 	ldrd	r3, r4, [r0, #32]
    uint8_t index = 0;
    for (I2CLED & led : I2C_LEDs) {
 8013cce:	2000      	movs	r0, #0
 8013cd0:	429c      	cmp	r4, r3
 8013cd2:	461d      	mov	r5, r3
 8013cd4:	d102      	bne.n	8013cdc <_ZN4LEDS9GetI2CLEDEhPb+0x14>
 8013cd6:	2300      	movs	r3, #0
            return index;
        }
        index++;
    }
    *success = false;
    return 0;
 8013cd8:	4618      	mov	r0, r3
 8013cda:	e006      	b.n	8013cea <_ZN4LEDS9GetI2CLEDEhPb+0x22>
        if (led.ID == ID) {
 8013cdc:	782d      	ldrb	r5, [r5, #0]
 8013cde:	1c46      	adds	r6, r0, #1
 8013ce0:	3310      	adds	r3, #16
 8013ce2:	428d      	cmp	r5, r1
 8013ce4:	d103      	bne.n	8013cee <_ZN4LEDS9GetI2CLEDEhPb+0x26>
 8013ce6:	b2c0      	uxtb	r0, r0
 8013ce8:	2301      	movs	r3, #1
            *success = true;
 8013cea:	7013      	strb	r3, [r2, #0]
}
 8013cec:	bd70      	pop	{r4, r5, r6, pc}
 8013cee:	4630      	mov	r0, r6
 8013cf0:	e7ee      	b.n	8013cd0 <_ZN4LEDS9GetI2CLEDEhPb+0x8>

08013cf2 <_ZN4LEDS12GetI2CRGBLEDEhPb>:
 *
 * @param input ID: LED ID
 * @param output success: true whether successful
 * @return the LED index
 */
uint8_t LEDS::GetI2CRGBLED(uint8_t ID, bool* success) {
 8013cf2:	b570      	push	{r4, r5, r6, lr}
 8013cf4:	e9d0 340b 	ldrd	r3, r4, [r0, #44]	@ 0x2c
    uint8_t index = 0;
    for (I2CRGBLED & led : I2C_RGB_LEDs) {
 8013cf8:	2000      	movs	r0, #0
 8013cfa:	429c      	cmp	r4, r3
 8013cfc:	461d      	mov	r5, r3
 8013cfe:	d102      	bne.n	8013d06 <_ZN4LEDS12GetI2CRGBLEDEhPb+0x14>
 8013d00:	2300      	movs	r3, #0
            return index;
        }
        index++;
    }
    *success = false;
    return 0;
 8013d02:	4618      	mov	r0, r3
 8013d04:	e006      	b.n	8013d14 <_ZN4LEDS12GetI2CRGBLEDEhPb+0x22>
        if (led.ID == ID) {
 8013d06:	782d      	ldrb	r5, [r5, #0]
 8013d08:	1c46      	adds	r6, r0, #1
 8013d0a:	3314      	adds	r3, #20
 8013d0c:	428d      	cmp	r5, r1
 8013d0e:	d103      	bne.n	8013d18 <_ZN4LEDS12GetI2CRGBLEDEhPb+0x26>
 8013d10:	b2c0      	uxtb	r0, r0
 8013d12:	2301      	movs	r3, #1
            *success = true;
 8013d14:	7013      	strb	r3, [r2, #0]
}
 8013d16:	bd70      	pop	{r4, r5, r6, pc}
 8013d18:	4630      	mov	r0, r6
 8013d1a:	e7ee      	b.n	8013cfa <_ZN4LEDS12GetI2CRGBLEDEhPb+0x8>

08013d1c <_ZN4LEDS15ConfigureI2CLEDEhtPhtm>:
HAL_StatusTypeDef LEDS::ConfigureI2CLED(uint8_t ID, uint16_t memory_address, uint8_t* data, uint16_t size, uint32_t timeout) {
 8013d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d20:	4604      	mov	r4, r0
 8013d22:	b089      	sub	sp, #36	@ 0x24
 8013d24:	4688      	mov	r8, r1
 8013d26:	461f      	mov	r7, r3
 8013d28:	9205      	str	r2, [sp, #20]
 8013d2a:	f8bd b048 	ldrh.w	fp, [sp, #72]	@ 0x48
	uint32_t end_timestamp = HAL_GetTick() + timeout;
 8013d2e:	f7ef fba5 	bl	800347c <HAL_GetTick>
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8013d32:	f04f 31ff 	mov.w	r1, #4294967295
	uint32_t end_timestamp = HAL_GetTick() + timeout;
 8013d36:	4605      	mov	r5, r0
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8013d38:	6860      	ldr	r0, [r4, #4]
 8013d3a:	f7f8 fbfb 	bl	800c534 <osSemaphoreAcquire>
	index = GetI2CRGBLED(ID, &success);
 8013d3e:	f10d 021f 	add.w	r2, sp, #31
 8013d42:	4641      	mov	r1, r8
 8013d44:	4620      	mov	r0, r4
 8013d46:	f7ff ffd4 	bl	8013cf2 <_ZN4LEDS12GetI2CRGBLEDEhPb>
	if (success) {
 8013d4a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8013d4e:	b323      	cbz	r3, 8013d9a <_ZN4LEDS15ConfigureI2CLEDEhtPhtm+0x7e>
 8013d50:	b200      	sxth	r0, r0
 8013d52:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8013d54:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8013d58:	eb03 0380 	add.w	r3, r3, r0, lsl #2
		present = led->present;
 8013d5c:	785e      	ldrb	r6, [r3, #1]
	osSemaphoreRelease(LEDsSemaphore);
 8013d5e:	6860      	ldr	r0, [r4, #4]
		interface = led->interface;
 8013d60:	f8d3 8004 	ldr.w	r8, [r3, #4]
		device_address = led->device_address;
 8013d64:	f8b3 9008 	ldrh.w	r9, [r3, #8]
		memory_address_size = led->memory_address_size;
 8013d68:	f8b3 a00a 	ldrh.w	sl, [r3, #10]
	osSemaphoreRelease(LEDsSemaphore);
 8013d6c:	f7f8 fc16 	bl	800c59c <osSemaphoreRelease>
	if (present) {
 8013d70:	b18e      	cbz	r6, 8013d96 <_ZN4LEDS15ConfigureI2CLEDEhtPhtm+0x7a>
	uint32_t end_timestamp = HAL_GetTick() + timeout;
 8013d72:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013d74:	441d      	add	r5, r3
			status = HAL_I2C_Mem_Write(interface, device_address, memory_address, memory_address_size, data, size, timeout);
 8013d76:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013d78:	4649      	mov	r1, r9
 8013d7a:	9a05      	ldr	r2, [sp, #20]
 8013d7c:	4640      	mov	r0, r8
 8013d7e:	9700      	str	r7, [sp, #0]
 8013d80:	e9cd b301 	strd	fp, r3, [sp, #4]
 8013d84:	4653      	mov	r3, sl
 8013d86:	f7f2 fded 	bl	8006964 <HAL_I2C_Mem_Write>
		} while ((status == HAL_BUSY) && (HAL_GetTick() < end_timestamp)); // try until the bus is free
 8013d8a:	2802      	cmp	r0, #2
 8013d8c:	d10f      	bne.n	8013dae <_ZN4LEDS15ConfigureI2CLEDEhtPhtm+0x92>
 8013d8e:	f7ef fb75 	bl	800347c <HAL_GetTick>
 8013d92:	42a8      	cmp	r0, r5
 8013d94:	d3ef      	bcc.n	8013d76 <_ZN4LEDS15ConfigureI2CLEDEhtPhtm+0x5a>
	HAL_StatusTypeDef status = HAL_BUSY;
 8013d96:	2002      	movs	r0, #2
 8013d98:	e009      	b.n	8013dae <_ZN4LEDS15ConfigureI2CLEDEhtPhtm+0x92>
		index = GetI2CLED(ID, &success);
 8013d9a:	4620      	mov	r0, r4
 8013d9c:	f7ff ff94 	bl	8013cc8 <_ZN4LEDS9GetI2CLEDEhPb>
		if (!success) {
 8013da0:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8013da4:	b933      	cbnz	r3, 8013db4 <_ZN4LEDS15ConfigureI2CLEDEhtPhtm+0x98>
			osSemaphoreRelease(LEDsSemaphore);
 8013da6:	6860      	ldr	r0, [r4, #4]
 8013da8:	f7f8 fbf8 	bl	800c59c <osSemaphoreRelease>
			return HAL_ERROR;
 8013dac:	2001      	movs	r0, #1
}
 8013dae:	b009      	add	sp, #36	@ 0x24
 8013db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013db4:	b200      	sxth	r0, r0
 8013db6:	6a23      	ldr	r3, [r4, #32]
 8013db8:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8013dbc:	e7ce      	b.n	8013d5c <_ZN4LEDS15ConfigureI2CLEDEhtPhtm+0x40>

08013dbe <_ZN4LEDS15ConfigureI2CLEDEhthm>:
HAL_StatusTypeDef LEDS::ConfigureI2CLED(uint8_t ID, uint16_t memory_address, uint8_t data, uint32_t timeout) {
 8013dbe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buffer = data;
 8013dc0:	f88d 300f 	strb.w	r3, [sp, #15]
	return ConfigureI2CLED(ID, memory_address, &buffer, 1, timeout);
 8013dc4:	9b06      	ldr	r3, [sp, #24]
 8013dc6:	9301      	str	r3, [sp, #4]
 8013dc8:	2301      	movs	r3, #1
 8013dca:	9300      	str	r3, [sp, #0]
 8013dcc:	f10d 030f 	add.w	r3, sp, #15
 8013dd0:	f7ff ffa4 	bl	8013d1c <_ZN4LEDS15ConfigureI2CLEDEhtPhtm>
}
 8013dd4:	b005      	add	sp, #20
 8013dd6:	f85d fb04 	ldr.w	pc, [sp], #4

08013dda <_ZN4LEDS6SetLEDEhhm>:
HAL_StatusTypeDef LEDS::SetLED(uint8_t ID, uint8_t value, uint32_t timeout) {
 8013dda:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8013dde:	4604      	mov	r4, r0
 8013de0:	460d      	mov	r5, r1
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8013de2:	6840      	ldr	r0, [r0, #4]
 8013de4:	f04f 31ff 	mov.w	r1, #4294967295
HAL_StatusTypeDef LEDS::SetLED(uint8_t ID, uint8_t value, uint32_t timeout) {
 8013de8:	461f      	mov	r7, r3
 8013dea:	4616      	mov	r6, r2
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8013dec:	f7f8 fba2 	bl	800c534 <osSemaphoreAcquire>
	uint8_t index = GetI2CLED(ID, &success);
 8013df0:	f10d 020f 	add.w	r2, sp, #15
 8013df4:	4629      	mov	r1, r5
 8013df6:	4620      	mov	r0, r4
 8013df8:	f7ff ff66 	bl	8013cc8 <_ZN4LEDS9GetI2CLEDEhPb>
	if (!success) {
 8013dfc:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8013e00:	b933      	cbnz	r3, 8013e10 <_ZN4LEDS6SetLEDEhhm+0x36>
		osSemaphoreRelease(LEDsSemaphore);
 8013e02:	6860      	ldr	r0, [r4, #4]
 8013e04:	f7f8 fbca 	bl	800c59c <osSemaphoreRelease>
		return HAL_ERROR;
 8013e08:	2001      	movs	r0, #1
}
 8013e0a:	b004      	add	sp, #16
 8013e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e10:	6a23      	ldr	r3, [r4, #32]
 8013e12:	b200      	sxth	r0, r0
 8013e14:	eb03 1800 	add.w	r8, r3, r0, lsl #4
	osSemaphoreRelease(LEDsSemaphore);
 8013e18:	6860      	ldr	r0, [r4, #4]
 8013e1a:	f7f8 fbbf 	bl	800c59c <osSemaphoreRelease>
	return ConfigureI2CLED(ID, led->light_address, value, timeout);
 8013e1e:	4633      	mov	r3, r6
 8013e20:	f8b8 200e 	ldrh.w	r2, [r8, #14]
 8013e24:	4629      	mov	r1, r5
 8013e26:	4620      	mov	r0, r4
 8013e28:	9700      	str	r7, [sp, #0]
 8013e2a:	f7ff ffc8 	bl	8013dbe <_ZN4LEDS15ConfigureI2CLEDEhthm>
 8013e2e:	e7ec      	b.n	8013e0a <_ZN4LEDS6SetLEDEhhm+0x30>

08013e30 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 8013e30:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8013e32:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013e34:	4604      	mov	r4, r0
 8013e36:	4615      	mov	r5, r2
			if (length != 2) return false;
 8013e38:	d002      	beq.n	8013e40 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x10>
 8013e3a:	2000      	movs	r0, #0
		}
 8013e3c:	b003      	add	sp, #12
 8013e3e:	bd30      	pop	{r4, r5, pc}
			self->GetLED(ID, &success);
 8013e40:	f10d 0207 	add.w	r2, sp, #7
 8013e44:	7829      	ldrb	r1, [r5, #0]
 8013e46:	f7ff fe88 	bl	8013b5a <_ZN4LEDS6GetLEDEhPb>
			if (success) {
 8013e4a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013e4e:	b14b      	cbz	r3, 8013e64 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x34>
				return self->SetLED(input[0], (input[1] == 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8013e50:	786a      	ldrb	r2, [r5, #1]
 8013e52:	4620      	mov	r0, r4
 8013e54:	3a00      	subs	r2, #0
 8013e56:	bf18      	it	ne
 8013e58:	2201      	movne	r2, #1
		}
 8013e5a:	b003      	add	sp, #12
 8013e5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
				return self->SetLED(input[0], (input[1] == 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8013e60:	f7ff be90 	b.w	8013b84 <_ZN4LEDS6SetLEDEh13GPIO_PinState>
			self->GetI2CLED(ID, &success);
 8013e64:	4620      	mov	r0, r4
 8013e66:	f7ff ff2f 	bl	8013cc8 <_ZN4LEDS9GetI2CLEDEhPb>
			if (success) {
 8013e6a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d0e3      	beq.n	8013e3a <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0xa>
				return self->SetLED(input[0], input[1]) == HAL_OK;
 8013e72:	f04f 33ff 	mov.w	r3, #4294967295
 8013e76:	786a      	ldrb	r2, [r5, #1]
 8013e78:	4620      	mov	r0, r4
 8013e7a:	f7ff ffae 	bl	8013dda <_ZN4LEDS6SetLEDEhhm>
 8013e7e:	fab0 f080 	clz	r0, r0
 8013e82:	0940      	lsrs	r0, r0, #5
 8013e84:	e7da      	b.n	8013e3c <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0xc>

08013e86 <_ZN4LEDS13SetBrightnessEhhm>:
HAL_StatusTypeDef LEDS::SetBrightness(uint8_t ID, uint8_t brightness, uint32_t timeout) {
 8013e86:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8013e8a:	4604      	mov	r4, r0
 8013e8c:	460d      	mov	r5, r1
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8013e8e:	6840      	ldr	r0, [r0, #4]
 8013e90:	f04f 31ff 	mov.w	r1, #4294967295
HAL_StatusTypeDef LEDS::SetBrightness(uint8_t ID, uint8_t brightness, uint32_t timeout) {
 8013e94:	461f      	mov	r7, r3
 8013e96:	4616      	mov	r6, r2
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8013e98:	f7f8 fb4c 	bl	800c534 <osSemaphoreAcquire>
	uint8_t index = GetI2CRGBLED(ID, &success);
 8013e9c:	f10d 020f 	add.w	r2, sp, #15
 8013ea0:	4629      	mov	r1, r5
 8013ea2:	4620      	mov	r0, r4
 8013ea4:	f7ff ff25 	bl	8013cf2 <_ZN4LEDS12GetI2CRGBLEDEhPb>
	if (!success) {
 8013ea8:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8013eac:	b933      	cbnz	r3, 8013ebc <_ZN4LEDS13SetBrightnessEhhm+0x36>
		osSemaphoreRelease(LEDsSemaphore);
 8013eae:	6860      	ldr	r0, [r4, #4]
 8013eb0:	f7f8 fb74 	bl	800c59c <osSemaphoreRelease>
		return HAL_ERROR;
 8013eb4:	2001      	movs	r0, #1
}
 8013eb6:	b004      	add	sp, #16
 8013eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ebc:	b200      	sxth	r0, r0
 8013ebe:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8013ec0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8013ec4:	eb03 0880 	add.w	r8, r3, r0, lsl #2
	osSemaphoreRelease(LEDsSemaphore);
 8013ec8:	6860      	ldr	r0, [r4, #4]
 8013eca:	f7f8 fb67 	bl	800c59c <osSemaphoreRelease>
	return ConfigureI2CLED(ID, led->brightness_address, brightness, timeout);
 8013ece:	4633      	mov	r3, r6
 8013ed0:	f8b8 200c 	ldrh.w	r2, [r8, #12]
 8013ed4:	4629      	mov	r1, r5
 8013ed6:	4620      	mov	r0, r4
 8013ed8:	9700      	str	r7, [sp, #0]
 8013eda:	f7ff ff70 	bl	8013dbe <_ZN4LEDS15ConfigureI2CLEDEhthm>
 8013ede:	e7ea      	b.n	8013eb6 <_ZN4LEDS13SetBrightnessEhhm+0x30>

08013ee0 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE4_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 8013ee0:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8013ee2:	4611      	mov	r1, r2
 8013ee4:	b508      	push	{r3, lr}
			if (length != 2) return false;
 8013ee6:	d109      	bne.n	8013efc <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE4_4_FUNES0_tS1_t+0x1c>
			return self->SetBrightness(input[0], input[1]) == HAL_OK;
 8013ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8013eec:	7852      	ldrb	r2, [r2, #1]
 8013eee:	7809      	ldrb	r1, [r1, #0]
 8013ef0:	f7ff ffc9 	bl	8013e86 <_ZN4LEDS13SetBrightnessEhhm>
 8013ef4:	fab0 f080 	clz	r0, r0
 8013ef8:	0940      	lsrs	r0, r0, #5
		}
 8013efa:	bd08      	pop	{r3, pc}
			if (length != 2) return false;
 8013efc:	2000      	movs	r0, #0
 8013efe:	e7fc      	b.n	8013efa <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE4_4_FUNES0_tS1_t+0x1a>

08013f00 <_ZN4LEDS9SetI2CRGBEhhhhm>:
HAL_StatusTypeDef LEDS::SetI2CRGB(uint8_t ID, uint8_t R, uint8_t G, uint8_t B, uint32_t timeout) {
 8013f00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013f04:	4604      	mov	r4, r0
 8013f06:	460d      	mov	r5, r1
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8013f08:	6840      	ldr	r0, [r0, #4]
 8013f0a:	f04f 31ff 	mov.w	r1, #4294967295
HAL_StatusTypeDef LEDS::SetI2CRGB(uint8_t ID, uint8_t R, uint8_t G, uint8_t B, uint32_t timeout) {
 8013f0e:	4699      	mov	r9, r3
 8013f10:	4692      	mov	sl, r2
 8013f12:	f89d 8030 	ldrb.w	r8, [sp, #48]	@ 0x30
 8013f16:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8013f18:	f7f8 fb0c 	bl	800c534 <osSemaphoreAcquire>
	uint8_t index = GetI2CRGBLED(ID, &success);
 8013f1c:	f10d 020f 	add.w	r2, sp, #15
 8013f20:	4629      	mov	r1, r5
 8013f22:	4620      	mov	r0, r4
 8013f24:	f7ff fee5 	bl	8013cf2 <_ZN4LEDS12GetI2CRGBLEDEhPb>
	if (!success) {
 8013f28:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8013f2c:	b933      	cbnz	r3, 8013f3c <_ZN4LEDS9SetI2CRGBEhhhhm+0x3c>
		osSemaphoreRelease(LEDsSemaphore);
 8013f2e:	6860      	ldr	r0, [r4, #4]
 8013f30:	f7f8 fb34 	bl	800c59c <osSemaphoreRelease>
		return HAL_ERROR;
 8013f34:	2001      	movs	r0, #1
}
 8013f36:	b004      	add	sp, #16
 8013f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f3c:	b200      	sxth	r0, r0
 8013f3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013f40:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8013f44:	eb06 0680 	add.w	r6, r6, r0, lsl #2
	osSemaphoreRelease(LEDsSemaphore);
 8013f48:	6860      	ldr	r0, [r4, #4]
 8013f4a:	f7f8 fb27 	bl	800c59c <osSemaphoreRelease>
	status = ConfigureI2CLED(ID, led->R_address, R, timeout);
 8013f4e:	4653      	mov	r3, sl
 8013f50:	89f2      	ldrh	r2, [r6, #14]
 8013f52:	4629      	mov	r1, r5
 8013f54:	4620      	mov	r0, r4
 8013f56:	9700      	str	r7, [sp, #0]
 8013f58:	f7ff ff31 	bl	8013dbe <_ZN4LEDS15ConfigureI2CLEDEhthm>
	if (status != HAL_OK) return status;
 8013f5c:	2800      	cmp	r0, #0
 8013f5e:	d1ea      	bne.n	8013f36 <_ZN4LEDS9SetI2CRGBEhhhhm+0x36>
	status = ConfigureI2CLED(ID, led->G_address, G, timeout);
 8013f60:	8a32      	ldrh	r2, [r6, #16]
 8013f62:	464b      	mov	r3, r9
 8013f64:	4629      	mov	r1, r5
 8013f66:	4620      	mov	r0, r4
 8013f68:	9700      	str	r7, [sp, #0]
 8013f6a:	f7ff ff28 	bl	8013dbe <_ZN4LEDS15ConfigureI2CLEDEhthm>
	if (status != HAL_OK) return status;
 8013f6e:	2800      	cmp	r0, #0
 8013f70:	d1e1      	bne.n	8013f36 <_ZN4LEDS9SetI2CRGBEhhhhm+0x36>
	status = ConfigureI2CLED(ID, led->B_address, B, timeout);
 8013f72:	8a72      	ldrh	r2, [r6, #18]
 8013f74:	4643      	mov	r3, r8
 8013f76:	4629      	mov	r1, r5
 8013f78:	4620      	mov	r0, r4
 8013f7a:	970c      	str	r7, [sp, #48]	@ 0x30
}
 8013f7c:	b004      	add	sp, #16
 8013f7e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	status = ConfigureI2CLED(ID, led->B_address, B, timeout);
 8013f82:	f7ff bf1c 	b.w	8013dbe <_ZN4LEDS15ConfigureI2CLEDEhthm>

08013f86 <_ZN4LEDS8ClearLEDEh>:
bool LEDS::ClearLED(uint8_t ID) {
 8013f86:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8013f8a:	4604      	mov	r4, r0
 8013f8c:	460d      	mov	r5, r1
    osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8013f8e:	6840      	ldr	r0, [r0, #4]
 8013f90:	f04f 31ff 	mov.w	r1, #4294967295
 8013f94:	f7f8 face 	bl	800c534 <osSemaphoreAcquire>
    uint8_t index = GetLED(ID, &success);
 8013f98:	f10d 020f 	add.w	r2, sp, #15
 8013f9c:	4629      	mov	r1, r5
 8013f9e:	4620      	mov	r0, r4
 8013fa0:	f7ff fddb 	bl	8013b5a <_ZN4LEDS6GetLEDEhPb>
    if (success) {
 8013fa4:	f89d 600f 	ldrb.w	r6, [sp, #15]
 8013fa8:	b196      	cbz	r6, 8013fd0 <_ZN4LEDS8ClearLEDEh+0x4a>
 8013faa:	68a3      	ldr	r3, [r4, #8]
 8013fac:	b200      	sxth	r0, r0
        LEDs[index].blink = false;
 8013fae:	2200      	movs	r2, #0
 8013fb0:	eb03 1340 	add.w	r3, r3, r0, lsl #5
        HAL_GPIO_WritePin(LEDs[index].gpio.port, LEDs[index].gpio.pin, GPIO_PIN_RESET);
 8013fb4:	6858      	ldr	r0, [r3, #4]
 8013fb6:	8919      	ldrh	r1, [r3, #8]
        LEDs[index].blink = false;
 8013fb8:	819a      	strh	r2, [r3, #12]
        LEDs[index].counter = 0;
 8013fba:	739a      	strb	r2, [r3, #14]
        HAL_GPIO_WritePin(LEDs[index].gpio.port, LEDs[index].gpio.pin, GPIO_PIN_RESET);
 8013fbc:	f7f2 faea 	bl	8006594 <HAL_GPIO_WritePin>
        osSemaphoreRelease(LEDsSemaphore);
 8013fc0:	6860      	ldr	r0, [r4, #4]
 8013fc2:	f7f8 faeb 	bl	800c59c <osSemaphoreRelease>
        return true;
 8013fc6:	2601      	movs	r6, #1
}
 8013fc8:	4630      	mov	r0, r6
 8013fca:	b004      	add	sp, #16
 8013fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    index = GetRGBLED(ID, &success);
 8013fd0:	4620      	mov	r0, r4
 8013fd2:	f7ff fe3d 	bl	8013c50 <_ZN4LEDS9GetRGBLEDEhPb>
	if (success) {
 8013fd6:	f89d 800f 	ldrb.w	r8, [sp, #15]
 8013fda:	f1b8 0f00 	cmp.w	r8, #0
 8013fde:	d00a      	beq.n	8013ff6 <_ZN4LEDS8ClearLEDEh+0x70>
		osSemaphoreRelease(LEDsSemaphore);
 8013fe0:	6860      	ldr	r0, [r4, #4]
 8013fe2:	f7f8 fadb 	bl	800c59c <osSemaphoreRelease>
		SetRGB(ID, 0, 0, 0);
 8013fe6:	4633      	mov	r3, r6
 8013fe8:	4632      	mov	r2, r6
 8013fea:	4629      	mov	r1, r5
 8013fec:	4620      	mov	r0, r4
 8013fee:	9600      	str	r6, [sp, #0]
 8013ff0:	f7ff fe43 	bl	8013c7a <_ZN4LEDS6SetRGBEhhhh>
		return true;
 8013ff4:	e7e7      	b.n	8013fc6 <_ZN4LEDS8ClearLEDEh+0x40>
    index = GetI2CLED(ID, &success);
 8013ff6:	4620      	mov	r0, r4
 8013ff8:	f7ff fe66 	bl	8013cc8 <_ZN4LEDS9GetI2CLEDEhPb>
    if (success) {
 8013ffc:	f89d 700f 	ldrb.w	r7, [sp, #15]
 8014000:	b157      	cbz	r7, 8014018 <_ZN4LEDS8ClearLEDEh+0x92>
    	osSemaphoreRelease(LEDsSemaphore);
 8014002:	6860      	ldr	r0, [r4, #4]
 8014004:	f7f8 faca 	bl	800c59c <osSemaphoreRelease>
    	SetLED(ID, 0);
 8014008:	f04f 33ff 	mov.w	r3, #4294967295
 801400c:	4642      	mov	r2, r8
 801400e:	4629      	mov	r1, r5
 8014010:	4620      	mov	r0, r4
 8014012:	f7ff fee2 	bl	8013dda <_ZN4LEDS6SetLEDEhhm>
    	return true;
 8014016:	e7d6      	b.n	8013fc6 <_ZN4LEDS8ClearLEDEh+0x40>
    index = GetI2CRGBLED(ID, &success);
 8014018:	4620      	mov	r0, r4
 801401a:	f7ff fe6a 	bl	8013cf2 <_ZN4LEDS12GetI2CRGBLEDEhPb>
    if (success) {
 801401e:	f89d 600f 	ldrb.w	r6, [sp, #15]
    	osSemaphoreRelease(LEDsSemaphore);
 8014022:	6860      	ldr	r0, [r4, #4]
    if (success) {
 8014024:	b166      	cbz	r6, 8014040 <_ZN4LEDS8ClearLEDEh+0xba>
    	osSemaphoreRelease(LEDsSemaphore);
 8014026:	f7f8 fab9 	bl	800c59c <osSemaphoreRelease>
		SetI2CRGB(ID, 0, 0, 0);
 801402a:	f04f 33ff 	mov.w	r3, #4294967295
 801402e:	463a      	mov	r2, r7
 8014030:	4629      	mov	r1, r5
 8014032:	4620      	mov	r0, r4
 8014034:	e9cd 7300 	strd	r7, r3, [sp]
 8014038:	463b      	mov	r3, r7
 801403a:	f7ff ff61 	bl	8013f00 <_ZN4LEDS9SetI2CRGBEhhhhm>
		return true;
 801403e:	e7c2      	b.n	8013fc6 <_ZN4LEDS8ClearLEDEh+0x40>
    osSemaphoreRelease(LEDsSemaphore);
 8014040:	f7f8 faac 	bl	800c59c <osSemaphoreRelease>
    return false;
 8014044:	e7c0      	b.n	8013fc8 <_ZN4LEDS8ClearLEDEh+0x42>

08014046 <_ZN4LEDS11ExistingLEDEh>:
bool LEDS::ExistingLED(uint8_t ID) {
 8014046:	b513      	push	{r0, r1, r4, lr}
	GetLED(ID, &success);
 8014048:	f10d 0207 	add.w	r2, sp, #7
bool LEDS::ExistingLED(uint8_t ID) {
 801404c:	4604      	mov	r4, r0
	GetLED(ID, &success);
 801404e:	f7ff fd84 	bl	8013b5a <_ZN4LEDS6GetLEDEhPb>
	if (success) return true;
 8014052:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014056:	b113      	cbz	r3, 801405e <_ZN4LEDS11ExistingLEDEh+0x18>
 8014058:	2001      	movs	r0, #1
}
 801405a:	b002      	add	sp, #8
 801405c:	bd10      	pop	{r4, pc}
	GetRGBLED(ID, &success);
 801405e:	4620      	mov	r0, r4
 8014060:	f7ff fdf6 	bl	8013c50 <_ZN4LEDS9GetRGBLEDEhPb>
	if (success) return true;
 8014064:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014068:	2b00      	cmp	r3, #0
 801406a:	d1f5      	bne.n	8014058 <_ZN4LEDS11ExistingLEDEh+0x12>
	GetI2CLED(ID, &success);
 801406c:	4620      	mov	r0, r4
 801406e:	f7ff fe2b 	bl	8013cc8 <_ZN4LEDS9GetI2CLEDEhPb>
	if (success) return true;
 8014072:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014076:	2b00      	cmp	r3, #0
 8014078:	d1ee      	bne.n	8014058 <_ZN4LEDS11ExistingLEDEh+0x12>
	GetI2CRGBLED(ID, &success);
 801407a:	4620      	mov	r0, r4
 801407c:	f7ff fe39 	bl	8013cf2 <_ZN4LEDS12GetI2CRGBLEDEhPb>
	if (success) return true;
 8014080:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8014084:	e7e9      	b.n	801405a <_ZN4LEDS11ExistingLEDEh+0x14>

08014086 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t>:
			if (length != 4) return false;
 8014086:	2b04      	cmp	r3, #4
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8014088:	b530      	push	{r4, r5, lr}
 801408a:	4605      	mov	r5, r0
 801408c:	b085      	sub	sp, #20
 801408e:	4614      	mov	r4, r2
			if (length != 4) return false;
 8014090:	d002      	beq.n	8014098 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x12>
 8014092:	2000      	movs	r0, #0
		}
 8014094:	b005      	add	sp, #20
 8014096:	bd30      	pop	{r4, r5, pc}
			self->GetRGBLED(ID, &success);
 8014098:	f10d 020f 	add.w	r2, sp, #15
 801409c:	7821      	ldrb	r1, [r4, #0]
 801409e:	f7ff fdd7 	bl	8013c50 <_ZN4LEDS9GetRGBLEDEhPb>
			if (success) {
 80140a2:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80140a6:	b13b      	cbz	r3, 80140b8 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x32>
				return self->SetRGB(ID, input[1], input[2], input[3]);
 80140a8:	78e3      	ldrb	r3, [r4, #3]
 80140aa:	4628      	mov	r0, r5
 80140ac:	9300      	str	r3, [sp, #0]
 80140ae:	78a3      	ldrb	r3, [r4, #2]
 80140b0:	7862      	ldrb	r2, [r4, #1]
 80140b2:	f7ff fde2 	bl	8013c7a <_ZN4LEDS6SetRGBEhhhh>
 80140b6:	e7ed      	b.n	8014094 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0xe>
			self->GetI2CRGBLED(ID, &success);
 80140b8:	4628      	mov	r0, r5
 80140ba:	f7ff fe1a 	bl	8013cf2 <_ZN4LEDS12GetI2CRGBLEDEhPb>
			if (success) {
 80140be:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d0e5      	beq.n	8014092 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0xc>
				return self->SetI2CRGB(ID, input[1], input[2], input[3]) == HAL_OK;
 80140c6:	f04f 33ff 	mov.w	r3, #4294967295
 80140ca:	4628      	mov	r0, r5
 80140cc:	9301      	str	r3, [sp, #4]
 80140ce:	78e3      	ldrb	r3, [r4, #3]
 80140d0:	9300      	str	r3, [sp, #0]
 80140d2:	78a3      	ldrb	r3, [r4, #2]
 80140d4:	7862      	ldrb	r2, [r4, #1]
 80140d6:	f7ff ff13 	bl	8013f00 <_ZN4LEDS9SetI2CRGBEhhhhm>
 80140da:	fab0 f080 	clz	r0, r0
 80140de:	0940      	lsrs	r0, r0, #5
 80140e0:	e7d8      	b.n	8014094 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0xe>

080140e2 <_ZSt14__relocate_a_1IP3LEDS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 80140e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140e4:	4604      	mov	r4, r0
 80140e6:	460e      	mov	r6, r1
 80140e8:	4615      	mov	r5, r2
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 80140ea:	2700      	movs	r7, #0
      for (; __first != __last; ++__first, (void)++__cur)
 80140ec:	42b4      	cmp	r4, r6
 80140ee:	4628      	mov	r0, r5
 80140f0:	f105 0520 	add.w	r5, r5, #32
 80140f4:	d100      	bne.n	80140f8 <_ZSt14__relocate_a_1IP3LEDS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0+0x16>
    }
 80140f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
struct LED {
 80140f8:	4622      	mov	r2, r4
 80140fa:	f812 3b04 	ldrb.w	r3, [r2], #4
 80140fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014102:	f805 3c20 	strb.w	r3, [r5, #-32]
 8014106:	f1a5 031c 	sub.w	r3, r5, #28
 801410a:	e883 0003 	stmia.w	r3, {r0, r1}
 801410e:	7b23      	ldrb	r3, [r4, #12]
      }
 8014110:	f104 0010 	add.w	r0, r4, #16
 8014114:	f805 3c14 	strb.w	r3, [r5, #-20]
 8014118:	7b63      	ldrb	r3, [r4, #13]
 801411a:	f805 3c13 	strb.w	r3, [r5, #-19]
 801411e:	7ba3      	ldrb	r3, [r4, #14]
 8014120:	f805 3c12 	strb.w	r3, [r5, #-18]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8014124:	6923      	ldr	r3, [r4, #16]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8014126:	6127      	str	r7, [r4, #16]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8014128:	f845 3c10 	str.w	r3, [r5, #-16]
 801412c:	6963      	ldr	r3, [r4, #20]
 801412e:	f845 3c0c 	str.w	r3, [r5, #-12]
	  _M_end_of_storage(__x._M_end_of_storage)
 8014132:	69a3      	ldr	r3, [r4, #24]
 8014134:	f845 3c08 	str.w	r3, [r5, #-8]
 8014138:	7f23      	ldrb	r3, [r4, #28]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 801413a:	e9c4 7705 	strd	r7, r7, [r4, #20]
 801413e:	f805 3c04 	strb.w	r3, [r5, #-4]
      for (; __first != __last; ++__first, (void)++__cur)
 8014142:	3420      	adds	r4, #32
      }
 8014144:	f7ec fd66 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8014148:	e7d0      	b.n	80140ec <_ZSt14__relocate_a_1IP3LEDS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0+0xa>
	...

0801414c <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 801414c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8014150:	e9d0 8900 	ldrd	r8, r9, [r0]
 8014154:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 8014156:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801415a:	eba9 0208 	sub.w	r2, r9, r8
 801415e:	4607      	mov	r7, r0
 8014160:	468a      	mov	sl, r1
	if (max_size() - size() < __n)
 8014162:	ebb3 1f22 	cmp.w	r3, r2, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8014166:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
 801416a:	d102      	bne.n	8014172 <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 801416c:	4820      	ldr	r0, [pc, #128]	@ (80141f0 <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa4>)
 801416e:	f006 fbfb 	bl	801a968 <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 8014172:	45c1      	cmp	r9, r8
 8014174:	bf14      	ite	ne
 8014176:	4622      	movne	r2, r4
 8014178:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 801417a:	eba1 0508 	sub.w	r5, r1, r8
 801417e:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8014180:	d231      	bcs.n	80141e6 <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8014182:	b394      	cbz	r4, 80141ea <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9e>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8014184:	429c      	cmp	r4, r3
 8014186:	bf28      	it	cs
 8014188:	461c      	movcs	r4, r3
 801418a:	0120      	lsls	r0, r4, #4
 801418c:	f006 fb37 	bl	801a7fe <_Znwj>
 8014190:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8014192:	eb06 0c05 	add.w	ip, r6, r5
      if (__count > 0)
 8014196:	2d00      	cmp	r5, #0
 8014198:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 801419c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80141a0:	dd04      	ble.n	80141ac <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x60>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80141a2:	462a      	mov	r2, r5
 80141a4:	4641      	mov	r1, r8
 80141a6:	4630      	mov	r0, r6
 80141a8:	f006 fe60 	bl	801ae6c <memmove>
      ptrdiff_t __count = __last - __first;
 80141ac:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
 80141b0:	3510      	adds	r5, #16
      if (__count > 0)
 80141b2:	f1b9 0f00 	cmp.w	r9, #0
 80141b6:	4435      	add	r5, r6
 80141b8:	dd04      	ble.n	80141c4 <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x78>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80141ba:	464a      	mov	r2, r9
 80141bc:	4651      	mov	r1, sl
 80141be:	4628      	mov	r0, r5
 80141c0:	f006 ff4c 	bl	801b05c <memcpy>
      return __result + __count;
 80141c4:	444d      	add	r5, r9
	if (__p)
 80141c6:	f1b8 0f00 	cmp.w	r8, #0
 80141ca:	d005      	beq.n	80141d8 <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
 80141cc:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80141ce:	4640      	mov	r0, r8
 80141d0:	eba1 0108 	sub.w	r1, r1, r8
 80141d4:	f006 faee 	bl	801a7b4 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 80141d8:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80141dc:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 80141e0:	60be      	str	r6, [r7, #8]
    }
 80141e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80141e6:	461c      	mov	r4, r3
 80141e8:	e7cf      	b.n	801418a <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80141ea:	4626      	mov	r6, r4
 80141ec:	e7d1      	b.n	8014192 <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 80141ee:	bf00      	nop
 80141f0:	0801b17a 	.word	0x0801b17a

080141f4 <_ZN4LEDS9AddRGBLEDEhPmS0_S0_>:
bool LEDS::AddRGBLED(uint8_t ID, uint32_t* pulse_red_, uint32_t* pulse_green_, uint32_t* pulse_blue_) {
 80141f4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80141f8:	4604      	mov	r4, r0
 80141fa:	460d      	mov	r5, r1
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 80141fc:	6840      	ldr	r0, [r0, #4]
 80141fe:	f04f 31ff 	mov.w	r1, #4294967295
bool LEDS::AddRGBLED(uint8_t ID, uint32_t* pulse_red_, uint32_t* pulse_green_, uint32_t* pulse_blue_) {
 8014202:	4617      	mov	r7, r2
 8014204:	461e      	mov	r6, r3
 8014206:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 801420a:	f7f8 f993 	bl	800c534 <osSemaphoreAcquire>
	if (ExistingLED(ID)) {
 801420e:	4629      	mov	r1, r5
 8014210:	4620      	mov	r0, r4
 8014212:	f7ff ff18 	bl	8014046 <_ZN4LEDS11ExistingLEDEh>
 8014216:	b130      	cbz	r0, 8014226 <_ZN4LEDS9AddRGBLEDEhPmS0_S0_+0x32>
		osSemaphoreRelease(LEDsSemaphore);
 8014218:	6860      	ldr	r0, [r4, #4]
 801421a:	f7f8 f9bf 	bl	800c59c <osSemaphoreRelease>
		return false;
 801421e:	2000      	movs	r0, #0
}
 8014220:	b004      	add	sp, #16
 8014222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	led.ID = ID;
 8014226:	f88d 5000 	strb.w	r5, [sp]
	led.pulse_red = pulse_red_;
 801422a:	466a      	mov	r2, sp
	led.pulse_blue = pulse_blue_;
 801422c:	f8cd 800c 	str.w	r8, [sp, #12]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8014230:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
	led.pulse_green = pulse_green_;
 8014234:	e9cd 7601 	strd	r7, r6, [sp, #4]
 8014238:	429d      	cmp	r5, r3
 801423a:	d00e      	beq.n	801425a <_ZN4LEDS9AddRGBLEDEhPmS0_S0_+0x66>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801423c:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 801423e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8014242:	3510      	adds	r5, #16
 8014244:	61a5      	str	r5, [r4, #24]
    osSemaphoreRelease(LEDsSemaphore);
 8014246:	6860      	ldr	r0, [r4, #4]
 8014248:	f7f8 f9a8 	bl	800c59c <osSemaphoreRelease>
    *pulse_red_ = 0;
 801424c:	2300      	movs	r3, #0
    return true;
 801424e:	2001      	movs	r0, #1
    *pulse_red_ = 0;
 8014250:	603b      	str	r3, [r7, #0]
    *pulse_green_ = 0;
 8014252:	6033      	str	r3, [r6, #0]
    *pulse_blue_ = 0;
 8014254:	f8c8 3000 	str.w	r3, [r8]
    return true;
 8014258:	e7e2      	b.n	8014220 <_ZN4LEDS9AddRGBLEDEhPmS0_S0_+0x2c>
	  _M_realloc_insert(end(), __x);
 801425a:	4629      	mov	r1, r5
 801425c:	f104 0014 	add.w	r0, r4, #20
 8014260:	f7ff ff74 	bl	801414c <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 8014264:	e7ef      	b.n	8014246 <_ZN4LEDS9AddRGBLEDEhPmS0_S0_+0x52>

08014266 <_ZN9Registers11AddRegisterIhEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 8014266:	b570      	push	{r4, r5, r6, lr}
 8014268:	4604      	mov	r4, r0
 801426a:	b086      	sub	sp, #24
 801426c:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801426e:	6800      	ldr	r0, [r0, #0]
 8014270:	f04f 31ff 	mov.w	r1, #4294967295
 8014274:	f7f8 f95e 	bl	800c534 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 8014278:	f10d 0207 	add.w	r2, sp, #7
 801427c:	4631      	mov	r1, r6
 801427e:	4620      	mov	r0, r4
 8014280:	f003 ff65 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 8014284:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8014288:	b125      	cbz	r5, 8014294 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 801428a:	6820      	ldr	r0, [r4, #0]
 801428c:	f7f8 f986 	bl	800c59c <osSemaphoreRelease>
}
 8014290:	b006      	add	sp, #24
 8014292:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8014294:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 8014298:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 801429c:	f7ff fbaa 	bl	80139f4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	configuration_.register_info = register_;
 80142a0:	2301      	movs	r3, #1
 80142a2:	f8ad 600a 	strh.w	r6, [sp, #10]
 80142a6:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 80142aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 80142ae:	f88d 000c 	strb.w	r0, [sp, #12]
 80142b2:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 80142b6:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d0e5      	beq.n	801428a <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
      push_back(const value_type& __x)
 80142be:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80142c0:	e9d4 5302 	ldrd	r5, r3, [r4, #8]
 80142c4:	429d      	cmp	r5, r3
 80142c6:	d005      	beq.n	80142d4 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x6e>
 80142c8:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 80142ca:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 80142ce:	3510      	adds	r5, #16
 80142d0:	60a5      	str	r5, [r4, #8]
 80142d2:	e7da      	b.n	801428a <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
	  _M_realloc_insert(end(), __x);
 80142d4:	4629      	mov	r1, r5
 80142d6:	1d20      	adds	r0, r4, #4
 80142d8:	f7fa ff3e 	bl	800f158 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 80142dc:	e7d5      	b.n	801428a <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
	...

080142e0 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 80142e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80142e4:	460c      	mov	r4, r1
 80142e6:	b087      	sub	sp, #28
 80142e8:	4606      	mov	r6, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80142ea:	f04f 31ff 	mov.w	r1, #4294967295
 80142ee:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 80142f0:	4698      	mov	r8, r3
 80142f2:	4691      	mov	r9, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80142f4:	f7f8 f91e 	bl	800c534 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80142f8:	4621      	mov	r1, r4
 80142fa:	f10d 0207 	add.w	r2, sp, #7
 80142fe:	4630      	mov	r0, r6
 8014300:	f003 ff25 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8014304:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8014308:	4604      	mov	r4, r0
	if (!success) {
 801430a:	b92b      	cbnz	r3, 8014318 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x38>
	osSemaphoreRelease(RegistersSemaphore);
 801430c:	6830      	ldr	r0, [r6, #0]
 801430e:	f7f8 f945 	bl	800c59c <osSemaphoreRelease>
}
 8014312:	b007      	add	sp, #28
 8014314:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8014318:	f10d 0007 	add.w	r0, sp, #7
 801431c:	f7ff fb6a 	bl	80139f4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 8014320:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014324:	2b00      	cmp	r3, #0
 8014326:	d0f1      	beq.n	801430c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (target_register->register_info.type != registered_type) {
 8014328:	7923      	ldrb	r3, [r4, #4]
 801432a:	4298      	cmp	r0, r3
 801432c:	d1ee      	bne.n	801430c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (callbacks[target_register->register_info.type] == NULL) {
 801432e:	3004      	adds	r0, #4
 8014330:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
 8014334:	2f00      	cmp	r7, #0
 8014336:	d0e9      	beq.n	801430c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 8014338:	7821      	ldrb	r1, [r4, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801433a:	e9d7 3500 	ldrd	r3, r5, [r7]
 801433e:	1aea      	subs	r2, r5, r3
 8014340:	1112      	asrs	r2, r2, #4
 8014342:	b9b1      	cbnz	r1, 8014372 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x92>
 8014344:	7861      	ldrb	r1, [r4, #1]
 8014346:	b9a1      	cbnz	r1, 8014372 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x92>
		callback.read = NULL;
 8014348:	9105      	str	r1, [sp, #20]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801434a:	68b9      	ldr	r1, [r7, #8]
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 801434c:	8162      	strh	r2, [r4, #10]
      push_back(const value_type& __x)
 801434e:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8014350:	42a9      	cmp	r1, r5
		callback.write = write;
 8014352:	e9cd 9803 	strd	r9, r8, [sp, #12]
 8014356:	d008      	beq.n	801436a <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x8a>
 8014358:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 801435a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 801435e:	3510      	adds	r5, #16
 8014360:	607d      	str	r5, [r7, #4]
	target_register->mode.callbacks = true;
 8014362:	2301      	movs	r3, #1
 8014364:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 8014366:	7223      	strb	r3, [r4, #8]
 8014368:	e7d0      	b.n	801430c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	  _M_realloc_insert(end(), __x);
 801436a:	4638      	mov	r0, r7
 801436c:	f7fa ff90 	bl	800f290 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	} else {
 8014370:	e7f7      	b.n	8014362 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x82>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8014372:	8961      	ldrh	r1, [r4, #10]
	if (__n >= this->size())
 8014374:	4291      	cmp	r1, r2
 8014376:	d302      	bcc.n	801437e <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x9e>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8014378:	4803      	ldr	r0, [pc, #12]	@ (8014388 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0xa8>)
 801437a:	f006 faf8 	bl	801a96e <_ZSt24__throw_out_of_range_fmtPKcz>
	return *(this->_M_impl._M_start + __n);
 801437e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
		callback->write = write;
 8014382:	e9c3 9801 	strd	r9, r8, [r3, #4]
 8014386:	e7ec      	b.n	8014362 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x82>
 8014388:	0801b3bc 	.word	0x0801b3bc

0801438c <_ZN4LEDS12AddRegistersEv>:
void LEDS::AddRegisters(void) {
 801438c:	b510      	push	{r4, lr}
 801438e:	4604      	mov	r4, r0
	registers->AddRegister<uint8_t>(REG_LEDS_SET);
 8014390:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8014394:	6800      	ldr	r0, [r0, #0]
 8014396:	f7ff ff66 	bl	8014266 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_LEDS_SET, 2);
 801439a:	2202      	movs	r2, #2
 801439c:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80143a0:	6820      	ldr	r0, [r4, #0]
 80143a2:	f003 ff29 	bl	80181f8 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_LEDS_SET, (void*) this,
 80143a6:	4622      	mov	r2, r4
 80143a8:	4b2f      	ldr	r3, [pc, #188]	@ (8014468 <_ZN4LEDS12AddRegistersEv+0xdc>)
 80143aa:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80143ae:	6820      	ldr	r0, [r4, #0]
 80143b0:	f7ff ff96 	bl	80142e0 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_LEDS_TIMINGS);
 80143b4:	6820      	ldr	r0, [r4, #0]
 80143b6:	f240 3101 	movw	r1, #769	@ 0x301
 80143ba:	f7ff ff54 	bl	8014266 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsVector(REG_LEDS_TIMINGS);
 80143be:	f240 3101 	movw	r1, #769	@ 0x301
 80143c2:	6820      	ldr	r0, [r4, #0]
 80143c4:	f003 ff34 	bl	8018230 <_ZN9Registers19SetRegisterAsVectorEt>
	registers->AddWriteCallback<uint8_t>(REG_LEDS_TIMINGS, (void*) this,
 80143c8:	4622      	mov	r2, r4
 80143ca:	4b28      	ldr	r3, [pc, #160]	@ (801446c <_ZN4LEDS12AddRegistersEv+0xe0>)
 80143cc:	f240 3101 	movw	r1, #769	@ 0x301
 80143d0:	6820      	ldr	r0, [r4, #0]
 80143d2:	f7ff ff85 	bl	80142e0 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_LEDS_BLINK);
 80143d6:	6820      	ldr	r0, [r4, #0]
 80143d8:	f240 3102 	movw	r1, #770	@ 0x302
 80143dc:	f7ff ff43 	bl	8014266 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_LEDS_BLINK);
 80143e0:	f240 3102 	movw	r1, #770	@ 0x302
 80143e4:	6820      	ldr	r0, [r4, #0]
 80143e6:	f003 feeb 	bl	80181c0 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_LEDS_BLINK, (void*) this,
 80143ea:	4622      	mov	r2, r4
 80143ec:	4b20      	ldr	r3, [pc, #128]	@ (8014470 <_ZN4LEDS12AddRegistersEv+0xe4>)
 80143ee:	f240 3102 	movw	r1, #770	@ 0x302
 80143f2:	6820      	ldr	r0, [r4, #0]
 80143f4:	f7ff ff74 	bl	80142e0 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_LEDS_BLINK_ONCE);
 80143f8:	6820      	ldr	r0, [r4, #0]
 80143fa:	f240 3103 	movw	r1, #771	@ 0x303
 80143fe:	f7ff ff32 	bl	8014266 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_LEDS_BLINK_ONCE);
 8014402:	f240 3103 	movw	r1, #771	@ 0x303
 8014406:	6820      	ldr	r0, [r4, #0]
 8014408:	f003 feda 	bl	80181c0 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_LEDS_BLINK_ONCE, (void*) this,
 801440c:	4b19      	ldr	r3, [pc, #100]	@ (8014474 <_ZN4LEDS12AddRegistersEv+0xe8>)
 801440e:	4622      	mov	r2, r4
 8014410:	6820      	ldr	r0, [r4, #0]
 8014412:	f240 3103 	movw	r1, #771	@ 0x303
 8014416:	f7ff ff63 	bl	80142e0 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_LEDS_SET_RGB);
 801441a:	6820      	ldr	r0, [r4, #0]
 801441c:	f44f 7141 	mov.w	r1, #772	@ 0x304
 8014420:	f7ff ff21 	bl	8014266 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_LEDS_SET_RGB, 4);
 8014424:	2204      	movs	r2, #4
 8014426:	f44f 7141 	mov.w	r1, #772	@ 0x304
 801442a:	6820      	ldr	r0, [r4, #0]
 801442c:	f003 fee4 	bl	80181f8 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_LEDS_SET_RGB, (void*) this,
 8014430:	4b11      	ldr	r3, [pc, #68]	@ (8014478 <_ZN4LEDS12AddRegistersEv+0xec>)
 8014432:	4622      	mov	r2, r4
 8014434:	6820      	ldr	r0, [r4, #0]
 8014436:	f44f 7141 	mov.w	r1, #772	@ 0x304
 801443a:	f7ff ff51 	bl	80142e0 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_LEDS_SET_BRIGHNESS);
 801443e:	6820      	ldr	r0, [r4, #0]
 8014440:	f240 3105 	movw	r1, #773	@ 0x305
 8014444:	f7ff ff0f 	bl	8014266 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_LEDS_SET_BRIGHNESS, 2);
 8014448:	2202      	movs	r2, #2
 801444a:	f240 3105 	movw	r1, #773	@ 0x305
 801444e:	6820      	ldr	r0, [r4, #0]
 8014450:	f003 fed2 	bl	80181f8 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_LEDS_SET_BRIGHNESS, (void*) this,
 8014454:	4622      	mov	r2, r4
 8014456:	6820      	ldr	r0, [r4, #0]
 8014458:	f240 3105 	movw	r1, #773	@ 0x305
 801445c:	4b07      	ldr	r3, [pc, #28]	@ (801447c <_ZN4LEDS12AddRegistersEv+0xf0>)
}
 801445e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	registers->AddWriteCallback<uint8_t>(REG_LEDS_SET_BRIGHNESS, (void*) this,
 8014462:	f7ff bf3d 	b.w	80142e0 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
 8014466:	bf00      	nop
 8014468:	08013e31 	.word	0x08013e31
 801446c:	0801472f 	.word	0x0801472f
 8014470:	08013c07 	.word	0x08013c07
 8014474:	08013c4b 	.word	0x08013c4b
 8014478:	08014087 	.word	0x08014087
 801447c:	08013ee1 	.word	0x08013ee1

08014480 <_ZN3LEDC1ERKS_>:
 8014480:	460a      	mov	r2, r1
 8014482:	b538      	push	{r3, r4, r5, lr}
 8014484:	460d      	mov	r5, r1
 8014486:	4603      	mov	r3, r0
 8014488:	f812 1b04 	ldrb.w	r1, [r2], #4
 801448c:	4604      	mov	r4, r0
 801448e:	f803 1b04 	strb.w	r1, [r3], #4
 8014492:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014496:	89aa      	ldrh	r2, [r5, #12]
 8014498:	e883 0003 	stmia.w	r3, {r0, r1}
 801449c:	7bab      	ldrb	r3, [r5, #14]
 801449e:	f105 0110 	add.w	r1, r5, #16
 80144a2:	f104 0010 	add.w	r0, r4, #16
 80144a6:	81a2      	strh	r2, [r4, #12]
 80144a8:	73a3      	strb	r3, [r4, #14]
 80144aa:	f7ec fc63 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80144ae:	7f2b      	ldrb	r3, [r5, #28]
 80144b0:	4620      	mov	r0, r4
 80144b2:	7723      	strb	r3, [r4, #28]
 80144b4:	bd38      	pop	{r3, r4, r5, pc}

080144b6 <_ZN4LEDS8TestLEDsEv>:

/**
 * @brief Testing procedure of LEDs. Light them one after the other
 */
void LEDS::TestLEDs(void) {
 80144b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80144ba:	4604      	mov	r4, r0
 80144bc:	b08b      	sub	sp, #44	@ 0x2c
 80144be:	e9d0 5702 	ldrd	r5, r7, [r0, #8]
#ifdef USE_SMD_LEDs
	for (LED led : LEDs) {
 80144c2:	42af      	cmp	r7, r5
 80144c4:	d109      	bne.n	80144da <_ZN4LEDS8TestLEDsEv+0x24>
		SetLED(led.ID, GPIO_PIN_SET);
		HAL_Delay(100);
		SetLED(led.ID, GPIO_PIN_RESET);
	}
	for (RGBLED led : RGB_LEDs) {
		SetRGB(led.ID, 255, 0, 0);
 80144c6:	2700      	movs	r7, #0
 80144c8:	f04f 09ff 	mov.w	r9, #255	@ 0xff
 80144cc:	e9d4 6805 	ldrd	r6, r8, [r4, #20]
	for (RGBLED led : RGB_LEDs) {
 80144d0:	45b0      	cmp	r8, r6
 80144d2:	d11a      	bne.n	801450a <_ZN4LEDS8TestLEDsEv+0x54>
		SetI2CRGB(led.ID, 0, 0, 255);
		HAL_Delay(100);
		SetI2CRGB(led.ID, 0, 0, 0);
	}
#endif
}
 80144d4:	b00b      	add	sp, #44	@ 0x2c
 80144d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (LED led : LEDs) {
 80144da:	4629      	mov	r1, r5
 80144dc:	a802      	add	r0, sp, #8
 80144de:	f7ff ffcf 	bl	8014480 <_ZN3LEDC1ERKS_>
		SetLED(led.ID, GPIO_PIN_SET);
 80144e2:	f89d 6008 	ldrb.w	r6, [sp, #8]
 80144e6:	2201      	movs	r2, #1
 80144e8:	4620      	mov	r0, r4
 80144ea:	4631      	mov	r1, r6
 80144ec:	3520      	adds	r5, #32
 80144ee:	f7ff fb49 	bl	8013b84 <_ZN4LEDS6SetLEDEh13GPIO_PinState>
		HAL_Delay(100);
 80144f2:	2064      	movs	r0, #100	@ 0x64
 80144f4:	f7ee ffc8 	bl	8003488 <HAL_Delay>
		SetLED(led.ID, GPIO_PIN_RESET);
 80144f8:	2200      	movs	r2, #0
 80144fa:	4631      	mov	r1, r6
 80144fc:	4620      	mov	r0, r4
 80144fe:	f7ff fb41 	bl	8013b84 <_ZN4LEDS6SetLEDEh13GPIO_PinState>
      }
 8014502:	a806      	add	r0, sp, #24
 8014504:	f7ec fb86 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return *this;
 8014508:	e7db      	b.n	80144c2 <_ZN4LEDS8TestLEDsEv+0xc>
	for (RGBLED led : RGB_LEDs) {
 801450a:	f816 5b10 	ldrb.w	r5, [r6], #16
		SetRGB(led.ID, 255, 0, 0);
 801450e:	2300      	movs	r3, #0
 8014510:	22ff      	movs	r2, #255	@ 0xff
 8014512:	4620      	mov	r0, r4
 8014514:	4629      	mov	r1, r5
 8014516:	9700      	str	r7, [sp, #0]
 8014518:	f7ff fbaf 	bl	8013c7a <_ZN4LEDS6SetRGBEhhhh>
		HAL_Delay(100);
 801451c:	2064      	movs	r0, #100	@ 0x64
 801451e:	f7ee ffb3 	bl	8003488 <HAL_Delay>
		SetRGB(led.ID, 0, 255, 0);
 8014522:	4629      	mov	r1, r5
 8014524:	23ff      	movs	r3, #255	@ 0xff
 8014526:	2200      	movs	r2, #0
 8014528:	4620      	mov	r0, r4
 801452a:	9700      	str	r7, [sp, #0]
 801452c:	f7ff fba5 	bl	8013c7a <_ZN4LEDS6SetRGBEhhhh>
		HAL_Delay(100);
 8014530:	2064      	movs	r0, #100	@ 0x64
 8014532:	f7ee ffa9 	bl	8003488 <HAL_Delay>
		SetRGB(led.ID, 0, 0, 255);
 8014536:	2300      	movs	r3, #0
 8014538:	4629      	mov	r1, r5
 801453a:	4620      	mov	r0, r4
 801453c:	461a      	mov	r2, r3
 801453e:	f8cd 9000 	str.w	r9, [sp]
 8014542:	f7ff fb9a 	bl	8013c7a <_ZN4LEDS6SetRGBEhhhh>
		HAL_Delay(100);
 8014546:	2064      	movs	r0, #100	@ 0x64
 8014548:	f7ee ff9e 	bl	8003488 <HAL_Delay>
		SetRGB(led.ID, 0, 0, 0);
 801454c:	2300      	movs	r3, #0
 801454e:	4629      	mov	r1, r5
 8014550:	4620      	mov	r0, r4
 8014552:	461a      	mov	r2, r3
 8014554:	9700      	str	r7, [sp, #0]
 8014556:	f7ff fb90 	bl	8013c7a <_ZN4LEDS6SetRGBEhhhh>
 801455a:	e7b9      	b.n	80144d0 <_ZN4LEDS8TestLEDsEv+0x1a>

0801455c <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 801455c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8014560:	e9d0 7900 	ldrd	r7, r9, [r0]
 8014564:	4692      	mov	sl, r2
	if (max_size() - size() < __n)
 8014566:	f06f 437c 	mvn.w	r3, #4227858432	@ 0xfc000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801456a:	eba9 0207 	sub.w	r2, r9, r7
 801456e:	4606      	mov	r6, r0
 8014570:	4688      	mov	r8, r1
	if (max_size() - size() < __n)
 8014572:	ebb3 1f62 	cmp.w	r3, r2, asr #5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8014576:	ea4f 1462 	mov.w	r4, r2, asr #5
	if (max_size() - size() < __n)
 801457a:	d102      	bne.n	8014582 <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 801457c:	481a      	ldr	r0, [pc, #104]	@ (80145e8 <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>)
 801457e:	f006 f9f3 	bl	801a968 <_ZSt20__throw_length_errorPKc>
 8014582:	45b9      	cmp	r9, r7
 8014584:	bf14      	ite	ne
 8014586:	4622      	movne	r2, r4
 8014588:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 801458a:	eba1 0b07 	sub.w	fp, r1, r7
 801458e:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8014590:	d225      	bcs.n	80145de <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x82>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8014592:	b334      	cbz	r4, 80145e2 <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x86>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8014594:	429c      	cmp	r4, r3
 8014596:	bf28      	it	cs
 8014598:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801459a:	0160      	lsls	r0, r4, #5
 801459c:	f006 f92f 	bl	801a7fe <_Znwj>
 80145a0:	4605      	mov	r5, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80145a2:	4651      	mov	r1, sl
 80145a4:	eb05 000b 	add.w	r0, r5, fp
 80145a8:	f7ff ff6a 	bl	8014480 <_ZN3LEDC1ERKS_>
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
 80145ac:	4641      	mov	r1, r8
 80145ae:	462a      	mov	r2, r5
 80145b0:	4638      	mov	r0, r7
 80145b2:	f7ff fd96 	bl	80140e2 <_ZSt14__relocate_a_1IP3LEDS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>
 80145b6:	4649      	mov	r1, r9
 80145b8:	f100 0220 	add.w	r2, r0, #32
 80145bc:	4640      	mov	r0, r8
 80145be:	f7ff fd90 	bl	80140e2 <_ZSt14__relocate_a_1IP3LEDS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>
 80145c2:	4680      	mov	r8, r0
	if (__p)
 80145c4:	b127      	cbz	r7, 80145d0 <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x74>
		    this->_M_impl._M_end_of_storage - __old_start);
 80145c6:	68b1      	ldr	r1, [r6, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80145c8:	4638      	mov	r0, r7
 80145ca:	1bc9      	subs	r1, r1, r7
 80145cc:	f006 f8f2 	bl	801a7b4 <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80145d0:	eb05 1444 	add.w	r4, r5, r4, lsl #5
      this->_M_impl._M_finish = __new_finish;
 80145d4:	e9c6 5800 	strd	r5, r8, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80145d8:	60b4      	str	r4, [r6, #8]
    }
 80145da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80145de:	461c      	mov	r4, r3
 80145e0:	e7db      	b.n	801459a <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80145e2:	4625      	mov	r5, r4
 80145e4:	e7dd      	b.n	80145a2 <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 80145e6:	bf00      	nop
 80145e8:	0801b17a 	.word	0x0801b17a

080145ec <_ZN4LEDS6AddLEDEh4GPIO>:
bool LEDS::AddLED(uint8_t ID, GPIO gpio) {
 80145ec:	b570      	push	{r4, r5, r6, lr}
 80145ee:	b08a      	sub	sp, #40	@ 0x28
 80145f0:	4604      	mov	r4, r0
 80145f2:	460e      	mov	r6, r1
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 80145f4:	6840      	ldr	r0, [r0, #4]
bool LEDS::AddLED(uint8_t ID, GPIO gpio) {
 80145f6:	466d      	mov	r5, sp
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 80145f8:	f04f 31ff 	mov.w	r1, #4294967295
bool LEDS::AddLED(uint8_t ID, GPIO gpio) {
 80145fc:	e885 000c 	stmia.w	r5, {r2, r3}
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8014600:	f7f7 ff98 	bl	800c534 <osSemaphoreAcquire>
	if (ExistingLED(ID)) {
 8014604:	4631      	mov	r1, r6
 8014606:	4620      	mov	r0, r4
 8014608:	f7ff fd1d 	bl	8014046 <_ZN4LEDS11ExistingLEDEh>
 801460c:	4603      	mov	r3, r0
 801460e:	b128      	cbz	r0, 801461c <_ZN4LEDS6AddLEDEh4GPIO+0x30>
		osSemaphoreRelease(LEDsSemaphore);
 8014610:	6860      	ldr	r0, [r4, #4]
 8014612:	f7f7 ffc3 	bl	800c59c <osSemaphoreRelease>
		return false;
 8014616:	2000      	movs	r0, #0
}
 8014618:	b00a      	add	sp, #40	@ 0x28
 801461a:	bd70      	pop	{r4, r5, r6, pc}
    led.gpio = gpio;
 801461c:	aa03      	add	r2, sp, #12
	: _M_start(), _M_finish(), _M_end_of_storage()
 801461e:	9008      	str	r0, [sp, #32]
    led.ID = ID;
 8014620:	f88d 6008 	strb.w	r6, [sp, #8]
 8014624:	e9cd 0006 	strd	r0, r0, [sp, #24]
    led.gpio = gpio;
 8014628:	e895 0003 	ldmia.w	r5, {r0, r1}
 801462c:	e882 0003 	stmia.w	r2, {r0, r1}
    led.blink = false;
 8014630:	f8ad 3014 	strh.w	r3, [sp, #20]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8014634:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8014638:	4298      	cmp	r0, r3
 801463a:	d013      	beq.n	8014664 <_ZN4LEDS6AddLEDEh4GPIO+0x78>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801463c:	a902      	add	r1, sp, #8
 801463e:	f7ff ff1f 	bl	8014480 <_ZN3LEDC1ERKS_>
	    ++this->_M_impl._M_finish;
 8014642:	68e3      	ldr	r3, [r4, #12]
 8014644:	3320      	adds	r3, #32
 8014646:	60e3      	str	r3, [r4, #12]
    osSemaphoreRelease(LEDsSemaphore);
 8014648:	6860      	ldr	r0, [r4, #4]
 801464a:	f7f7 ffa7 	bl	800c59c <osSemaphoreRelease>
    HAL_GPIO_WritePin(led.gpio.port, led.gpio.pin, GPIO_PIN_RESET);
 801464e:	2200      	movs	r2, #0
 8014650:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8014654:	9803      	ldr	r0, [sp, #12]
 8014656:	f7f1 ff9d 	bl	8006594 <HAL_GPIO_WritePin>
      }
 801465a:	a806      	add	r0, sp, #24
 801465c:	f7ec fada 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
    return true;
 8014660:	2001      	movs	r0, #1
 8014662:	e7d9      	b.n	8014618 <_ZN4LEDS6AddLEDEh4GPIO+0x2c>
	  _M_realloc_insert(end(), __x);
 8014664:	4601      	mov	r1, r0
 8014666:	aa02      	add	r2, sp, #8
 8014668:	f104 0008 	add.w	r0, r4, #8
 801466c:	f7ff ff76 	bl	801455c <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 8014670:	e7ea      	b.n	8014648 <_ZN4LEDS6AddLEDEh4GPIO+0x5c>

08014672 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>:
bool LEDS::ConfigureTimings(uint8_t ID, std::vector<uint8_t> timings, uint8_t T) {
 8014672:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014676:	4605      	mov	r5, r0
 8014678:	b085      	sub	sp, #20
 801467a:	460c      	mov	r4, r1
    osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 801467c:	6840      	ldr	r0, [r0, #4]
 801467e:	f04f 31ff 	mov.w	r1, #4294967295
bool LEDS::ConfigureTimings(uint8_t ID, std::vector<uint8_t> timings, uint8_t T) {
 8014682:	4616      	mov	r6, r2
 8014684:	461f      	mov	r7, r3
    osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8014686:	f7f7 ff55 	bl	800c534 <osSemaphoreAcquire>
    uint8_t index = GetLED(ID, &success);
 801468a:	f10d 020f 	add.w	r2, sp, #15
 801468e:	4621      	mov	r1, r4
 8014690:	4628      	mov	r0, r5
 8014692:	f7ff fa62 	bl	8013b5a <_ZN4LEDS6GetLEDEhPb>
    if (success) {
 8014696:	f89d 800f 	ldrb.w	r8, [sp, #15]
 801469a:	f1b8 0f00 	cmp.w	r8, #0
 801469e:	d02b      	beq.n	80146f8 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh+0x86>
	return *(this->_M_impl._M_start + __n);
 80146a0:	b200      	sxth	r0, r0
 80146a2:	68ac      	ldr	r4, [r5, #8]
 80146a4:	eb04 1440 	add.w	r4, r4, r0, lsl #5
 80146a8:	ea4f 1940 	mov.w	r9, r0, lsl #5
        LEDs[index].timings = timings;
 80146ac:	f104 0310 	add.w	r3, r4, #16
      if (std::__addressof(__x) != this)
 80146b0:	429e      	cmp	r6, r3
 80146b2:	d01e      	beq.n	80146f2 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh+0x80>
			 - this->_M_impl._M_start); }
 80146b4:	6922      	ldr	r2, [r4, #16]
 80146b6:	69a3      	ldr	r3, [r4, #24]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80146b8:	e9d6 b100 	ldrd	fp, r1, [r6]
			 - this->_M_impl._M_start); }
 80146bc:	1a9b      	subs	r3, r3, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80146be:	eba1 0a0b 	sub.w	sl, r1, fp
	  if (__xlen > capacity())
 80146c2:	459a      	cmp	sl, r3
 80146c4:	d91f      	bls.n	8014706 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh+0x94>
	  pointer __result = this->_M_allocate(__n);
 80146c6:	4650      	mov	r0, sl
 80146c8:	9101      	str	r1, [sp, #4]
 80146ca:	f7ff f987 	bl	80139dc <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
			      _Category>::__copy_m(__first, __last, __result);
 80146ce:	9901      	ldr	r1, [sp, #4]
 80146d0:	4602      	mov	r2, r0
 80146d2:	4606      	mov	r6, r0
 80146d4:	4658      	mov	r0, fp
 80146d6:	f7ec fb41 	bl	8000d5c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80146da:	6920      	ldr	r0, [r4, #16]
	if (__p)
 80146dc:	b118      	cbz	r0, 80146e6 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh+0x74>
			    - this->_M_impl._M_start);
 80146de:	69a1      	ldr	r1, [r4, #24]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80146e0:	1a09      	subs	r1, r1, r0
 80146e2:	f006 f867 	bl	801a7b4 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
 80146e6:	6126      	str	r6, [r4, #16]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 80146e8:	4456      	add	r6, sl
 80146ea:	61a6      	str	r6, [r4, #24]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 80146ec:	6923      	ldr	r3, [r4, #16]
 80146ee:	4453      	add	r3, sl
 80146f0:	6163      	str	r3, [r4, #20]
        LEDs[index].T = T;
 80146f2:	68ab      	ldr	r3, [r5, #8]
 80146f4:	444b      	add	r3, r9
 80146f6:	771f      	strb	r7, [r3, #28]
    osSemaphoreRelease(LEDsSemaphore);
 80146f8:	6868      	ldr	r0, [r5, #4]
 80146fa:	f7f7 ff4f 	bl	800c59c <osSemaphoreRelease>
}
 80146fe:	4640      	mov	r0, r8
 8014700:	b005      	add	sp, #20
 8014702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8014706:	6963      	ldr	r3, [r4, #20]
 8014708:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
 801470a:	459a      	cmp	sl, r3
 801470c:	d803      	bhi.n	8014716 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh+0xa4>
 801470e:	4658      	mov	r0, fp
 8014710:	f7ec fb24 	bl	8000d5c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
      return std::uninitialized_copy(__first, __last, __result);
 8014714:	e7ea      	b.n	80146ec <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh+0x7a>
 8014716:	eb0b 0103 	add.w	r1, fp, r3
 801471a:	4658      	mov	r0, fp
 801471c:	f7ec fb1e 	bl	8000d5c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8014720:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 8014724:	e9d6 3100 	ldrd	r3, r1, [r6]
 8014728:	1a10      	subs	r0, r2, r0
 801472a:	4418      	add	r0, r3
 801472c:	e7f0      	b.n	8014710 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh+0x9e>

0801472e <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t>:
			if (length < 3) return false;
 801472e:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8014730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014734:	4606      	mov	r6, r0
 8014736:	b086      	sub	sp, #24
 8014738:	4615      	mov	r5, r2
			if (length < 3) return false;
 801473a:	d925      	bls.n	8014788 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t+0x5a>
			std::vector<uint8_t> timings (&input[1], &input[length-1]);
 801473c:	1e9c      	subs	r4, r3, #2
 801473e:	1e5f      	subs	r7, r3, #1
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8014740:	4620      	mov	r0, r4
 8014742:	eb02 0807 	add.w	r8, r2, r7
 8014746:	f7ff f949 	bl	80139dc <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801474a:	4404      	add	r4, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 801474c:	4602      	mov	r2, r0
 801474e:	4641      	mov	r1, r8
 8014750:	9000      	str	r0, [sp, #0]
 8014752:	1c68      	adds	r0, r5, #1
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8014754:	9402      	str	r4, [sp, #8]
 8014756:	f7ec fb01 	bl	8000d5c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
			return self->ConfigureTimings(input[0], timings, input[length-1]);
 801475a:	782c      	ldrb	r4, [r5, #0]
 801475c:	4669      	mov	r1, sp
	  this->_M_impl._M_finish =
 801475e:	9001      	str	r0, [sp, #4]
 8014760:	a803      	add	r0, sp, #12
 8014762:	f7ec fb07 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8014766:	4621      	mov	r1, r4
 8014768:	5deb      	ldrb	r3, [r5, r7]
 801476a:	aa03      	add	r2, sp, #12
 801476c:	4630      	mov	r0, r6
 801476e:	f7ff ff80 	bl	8014672 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
 8014772:	4604      	mov	r4, r0
      }
 8014774:	a803      	add	r0, sp, #12
 8014776:	f7ec fa4d 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801477a:	4668      	mov	r0, sp
 801477c:	f7ec fa4a 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		}
 8014780:	4620      	mov	r0, r4
 8014782:	b006      	add	sp, #24
 8014784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (length < 3) return false;
 8014788:	2400      	movs	r4, #0
 801478a:	e7f9      	b.n	8014780 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t+0x52>

0801478c <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t>:
	registers->SetRegisterAsSingle(REG_GEN_CONFIGURE_MODULES);
	registers->AddRegisterSemaphore(REG_GEN_GENERATOR_STATUS, &GeneratorSemaphore);
	registers->AddWriteCallback<uint8_t>(REG_GEN_CONFIGURE_MODULES, (void*) this,
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
			MotionGenerator* self = (MotionGenerator*) context;
			self->request_module_configuration = true;
 801478c:	2301      	movs	r3, #1
 801478e:	f880 3064 	strb.w	r3, [r0, #100]	@ 0x64
			return true;
		}
 8014792:	4618      	mov	r0, r3
 8014794:	4770      	bx	lr

08014796 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t>:
	registers->SetRegisterAsSingle(REG_GEN_MODULES_CONTROLLER_STATUS);
	registers->AddRegisterSemaphore(REG_GEN_GENERATOR_STATUS, &GeneratorSemaphore);
	registers->AddWriteCallback<uint8_t>(REG_GEN_MODULES_CONTROLLER_STATUS, (void*) this,
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
			MotionGenerator* self = (MotionGenerator*) context;
			if (*input > 0) {
 8014796:	7812      	ldrb	r2, [r2, #0]
 8014798:	2301      	movs	r3, #1
 801479a:	b11a      	cbz	r2, 80147a4 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t+0xe>
				self->request_module_controller_activation = true;
 801479c:	f880 3065 	strb.w	r3, [r0, #101]	@ 0x65
			} else {
				self->request_module_controller_deactivation = true;
			}
			return true;
		}
 80147a0:	2001      	movs	r0, #1
 80147a2:	4770      	bx	lr
				self->request_module_controller_deactivation = true;
 80147a4:	f880 3066 	strb.w	r3, [r0, #102]	@ 0x66
 80147a8:	e7fa      	b.n	80147a0 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t+0xa>

080147aa <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPPhPtE3_4_FUNES0_tS2_S3_>:

	// Register to access the number of modules
	registers->AddRegister<uint8_t>(REG_GEN_NB_MODULES);
	registers->SetRegisterAsSingle(REG_GEN_NB_MODULES);
	registers->AddReadCallback<uint8_t>(REG_GEN_NB_MODULES, (void*) this,
		[](void* context, uint16_t register_id, uint8_t** output, uint16_t* length) -> bool {
 80147aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147ac:	4604      	mov	r4, r0
 80147ae:	4615      	mov	r5, r2
 80147b0:	461e      	mov	r6, r3
			MotionGenerator* self = (MotionGenerator*) context;
			osSemaphoreAcquire(self->GeneratorSemaphore, osWaitForever);
			*length = 1;
 80147b2:	2701      	movs	r7, #1
			osSemaphoreAcquire(self->GeneratorSemaphore, osWaitForever);
 80147b4:	f04f 31ff 	mov.w	r1, #4294967295
 80147b8:	6900      	ldr	r0, [r0, #16]
 80147ba:	f7f7 febb 	bl	800c534 <osSemaphoreAcquire>
			*length = 1;
 80147be:	8037      	strh	r7, [r6, #0]
			**output = self->number_of_modules;
 80147c0:	682b      	ldr	r3, [r5, #0]
 80147c2:	7f22      	ldrb	r2, [r4, #28]
 80147c4:	701a      	strb	r2, [r3, #0]
			osSemaphoreRelease(self->GeneratorSemaphore);
 80147c6:	6920      	ldr	r0, [r4, #16]
 80147c8:	f7f7 fee8 	bl	800c59c <osSemaphoreRelease>
			return true;
		}
 80147cc:	4638      	mov	r0, r7
 80147ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080147d0 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPPhPtE1_4_FUNES0_tS2_S3_>:
		[](void* context, uint16_t register_id, uint8_t** output, uint16_t* length) -> bool {
 80147d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147d2:	4604      	mov	r4, r0
 80147d4:	4615      	mov	r5, r2
			osSemaphoreAcquire(self->GeneratorSemaphore, osWaitForever);
 80147d6:	f04f 31ff 	mov.w	r1, #4294967295
 80147da:	6900      	ldr	r0, [r0, #16]
		[](void* context, uint16_t register_id, uint8_t** output, uint16_t* length) -> bool {
 80147dc:	461e      	mov	r6, r3
			*length = 1;
 80147de:	2701      	movs	r7, #1
			osSemaphoreAcquire(self->GeneratorSemaphore, osWaitForever);
 80147e0:	f7f7 fea8 	bl	800c534 <osSemaphoreAcquire>
			**output = self->active;
 80147e4:	682b      	ldr	r3, [r5, #0]
 80147e6:	7d22      	ldrb	r2, [r4, #20]
			*length = 1;
 80147e8:	8037      	strh	r7, [r6, #0]
			**output = self->active;
 80147ea:	701a      	strb	r2, [r3, #0]
			osSemaphoreRelease(self->GeneratorSemaphore);
 80147ec:	6920      	ldr	r0, [r4, #16]
 80147ee:	f7f7 fed5 	bl	800c59c <osSemaphoreRelease>
		}
 80147f2:	4638      	mov	r0, r7
 80147f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080147f6 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80147f6:	2800      	cmp	r0, #0
      _M_allocate(size_t __n)
 80147f8:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80147fa:	d006      	beq.n	801480a <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0x14>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80147fc:	da01      	bge.n	8014802 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0xc>
	    std::__throw_bad_alloc();
 80147fe:	f006 f8ad 	bl	801a95c <_ZSt17__throw_bad_allocv>
      }
 8014802:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8014806:	f005 bffa 	b.w	801a7fe <_Znwj>
 801480a:	bd08      	pop	{r3, pc}

0801480c <_ZN9Registers9GetTypeIDImEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 801480c:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801480e:	4926      	ldr	r1, [pc, #152]	@ (80148a8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 8014810:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8014812:	4826      	ldr	r0, [pc, #152]	@ (80148ac <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8014814:	f006 f88a 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8014818:	2800      	cmp	r0, #0
 801481a:	d133      	bne.n	8014884 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 801481c:	4924      	ldr	r1, [pc, #144]	@ (80148b0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa4>)
 801481e:	4823      	ldr	r0, [pc, #140]	@ (80148ac <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8014820:	f006 f884 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8014824:	2800      	cmp	r0, #0
 8014826:	d12f      	bne.n	8014888 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8014828:	4920      	ldr	r1, [pc, #128]	@ (80148ac <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 801482a:	4608      	mov	r0, r1
 801482c:	f006 f87e 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8014830:	bb60      	cbnz	r0, 801488c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8014832:	4920      	ldr	r1, [pc, #128]	@ (80148b4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa8>)
 8014834:	481d      	ldr	r0, [pc, #116]	@ (80148ac <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8014836:	f006 f879 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 801483a:	bb48      	cbnz	r0, 8014890 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 801483c:	491e      	ldr	r1, [pc, #120]	@ (80148b8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xac>)
 801483e:	481b      	ldr	r0, [pc, #108]	@ (80148ac <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8014840:	f006 f874 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8014844:	bb30      	cbnz	r0, 8014894 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 8014846:	491d      	ldr	r1, [pc, #116]	@ (80148bc <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xb0>)
 8014848:	4818      	ldr	r0, [pc, #96]	@ (80148ac <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 801484a:	f006 f86f 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 801484e:	bb18      	cbnz	r0, 8014898 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8014850:	491b      	ldr	r1, [pc, #108]	@ (80148c0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xb4>)
 8014852:	4816      	ldr	r0, [pc, #88]	@ (80148ac <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8014854:	f006 f86a 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8014858:	bb00      	cbnz	r0, 801489c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 801485a:	491a      	ldr	r1, [pc, #104]	@ (80148c4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xb8>)
 801485c:	4813      	ldr	r0, [pc, #76]	@ (80148ac <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 801485e:	f006 f865 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8014862:	b9e8      	cbnz	r0, 80148a0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8014864:	4918      	ldr	r1, [pc, #96]	@ (80148c8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xbc>)
 8014866:	4811      	ldr	r0, [pc, #68]	@ (80148ac <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8014868:	f006 f860 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 801486c:	b9d0      	cbnz	r0, 80148a4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 801486e:	4917      	ldr	r1, [pc, #92]	@ (80148cc <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xc0>)
 8014870:	480e      	ldr	r0, [pc, #56]	@ (80148ac <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8014872:	f006 f85b 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 8014876:	2800      	cmp	r0, #0
 8014878:	bf14      	ite	ne
 801487a:	2309      	movne	r3, #9
 801487c:	2300      	moveq	r3, #0
 801487e:	7020      	strb	r0, [r4, #0]
}
 8014880:	4618      	mov	r0, r3
 8014882:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8014884:	2300      	movs	r3, #0
 8014886:	e7fa      	b.n	801487e <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8014888:	2301      	movs	r3, #1
 801488a:	e7f8      	b.n	801487e <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 801488c:	2302      	movs	r3, #2
 801488e:	e7f6      	b.n	801487e <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8014890:	2303      	movs	r3, #3
 8014892:	e7f4      	b.n	801487e <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8014894:	2304      	movs	r3, #4
 8014896:	e7f2      	b.n	801487e <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 8014898:	2305      	movs	r3, #5
 801489a:	e7f0      	b.n	801487e <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 801489c:	2306      	movs	r3, #6
 801489e:	e7ee      	b.n	801487e <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 80148a0:	2307      	movs	r3, #7
 80148a2:	e7ec      	b.n	801487e <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 80148a4:	2308      	movs	r3, #8
 80148a6:	e7ea      	b.n	801487e <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
 80148a8:	0801b5d4 	.word	0x0801b5d4
 80148ac:	0801b5b4 	.word	0x0801b5b4
 80148b0:	0801b5c4 	.word	0x0801b5c4
 80148b4:	0801b5a4 	.word	0x0801b5a4
 80148b8:	0801b5dc 	.word	0x0801b5dc
 80148bc:	0801b5cc 	.word	0x0801b5cc
 80148c0:	0801b5bc 	.word	0x0801b5bc
 80148c4:	0801b5ac 	.word	0x0801b5ac
 80148c8:	0801b59c 	.word	0x0801b59c
 80148cc:	0801b594 	.word	0x0801b594

080148d0 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 80148d0:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80148d2:	4926      	ldr	r1, [pc, #152]	@ (801496c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 80148d4:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80148d6:	4826      	ldr	r0, [pc, #152]	@ (8014970 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 80148d8:	f006 f828 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 80148dc:	2800      	cmp	r0, #0
 80148de:	d133      	bne.n	8014948 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 80148e0:	4924      	ldr	r1, [pc, #144]	@ (8014974 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa4>)
 80148e2:	4823      	ldr	r0, [pc, #140]	@ (8014970 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 80148e4:	f006 f822 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 80148e8:	2800      	cmp	r0, #0
 80148ea:	d12f      	bne.n	801494c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 80148ec:	4922      	ldr	r1, [pc, #136]	@ (8014978 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa8>)
 80148ee:	4820      	ldr	r0, [pc, #128]	@ (8014970 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 80148f0:	f006 f81c 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 80148f4:	bb60      	cbnz	r0, 8014950 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 80148f6:	4921      	ldr	r1, [pc, #132]	@ (801497c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xac>)
 80148f8:	481d      	ldr	r0, [pc, #116]	@ (8014970 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 80148fa:	f006 f817 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 80148fe:	bb48      	cbnz	r0, 8014954 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8014900:	491f      	ldr	r1, [pc, #124]	@ (8014980 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xb0>)
 8014902:	481b      	ldr	r0, [pc, #108]	@ (8014970 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 8014904:	f006 f812 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8014908:	bb30      	cbnz	r0, 8014958 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 801490a:	491e      	ldr	r1, [pc, #120]	@ (8014984 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xb4>)
 801490c:	4818      	ldr	r0, [pc, #96]	@ (8014970 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 801490e:	f006 f80d 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8014912:	bb18      	cbnz	r0, 801495c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8014914:	491c      	ldr	r1, [pc, #112]	@ (8014988 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xb8>)
 8014916:	4816      	ldr	r0, [pc, #88]	@ (8014970 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 8014918:	f006 f808 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 801491c:	bb00      	cbnz	r0, 8014960 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 801491e:	491b      	ldr	r1, [pc, #108]	@ (801498c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xbc>)
 8014920:	4813      	ldr	r0, [pc, #76]	@ (8014970 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 8014922:	f006 f803 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8014926:	b9e8      	cbnz	r0, 8014964 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8014928:	4911      	ldr	r1, [pc, #68]	@ (8014970 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 801492a:	4608      	mov	r0, r1
 801492c:	f005 fffe 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8014930:	b9d0      	cbnz	r0, 8014968 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 8014932:	4917      	ldr	r1, [pc, #92]	@ (8014990 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xc0>)
 8014934:	480e      	ldr	r0, [pc, #56]	@ (8014970 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 8014936:	f005 fff9 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 801493a:	2800      	cmp	r0, #0
 801493c:	bf14      	ite	ne
 801493e:	2309      	movne	r3, #9
 8014940:	2300      	moveq	r3, #0
 8014942:	7020      	strb	r0, [r4, #0]
}
 8014944:	4618      	mov	r0, r3
 8014946:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8014948:	2300      	movs	r3, #0
 801494a:	e7fa      	b.n	8014942 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 801494c:	2301      	movs	r3, #1
 801494e:	e7f8      	b.n	8014942 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8014950:	2302      	movs	r3, #2
 8014952:	e7f6      	b.n	8014942 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8014954:	2303      	movs	r3, #3
 8014956:	e7f4      	b.n	8014942 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8014958:	2304      	movs	r3, #4
 801495a:	e7f2      	b.n	8014942 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 801495c:	2305      	movs	r3, #5
 801495e:	e7f0      	b.n	8014942 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8014960:	2306      	movs	r3, #6
 8014962:	e7ee      	b.n	8014942 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 8014964:	2307      	movs	r3, #7
 8014966:	e7ec      	b.n	8014942 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8014968:	2308      	movs	r3, #8
 801496a:	e7ea      	b.n	8014942 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
 801496c:	0801b5d4 	.word	0x0801b5d4
 8014970:	0801b59c 	.word	0x0801b59c
 8014974:	0801b5c4 	.word	0x0801b5c4
 8014978:	0801b5b4 	.word	0x0801b5b4
 801497c:	0801b5a4 	.word	0x0801b5a4
 8014980:	0801b5dc 	.word	0x0801b5dc
 8014984:	0801b5cc 	.word	0x0801b5cc
 8014988:	0801b5bc 	.word	0x0801b5bc
 801498c:	0801b5ac 	.word	0x0801b5ac
 8014990:	0801b594 	.word	0x0801b594

08014994 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>:
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8014994:	4926      	ldr	r1, [pc, #152]	@ (8014a30 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 8014996:	b510      	push	{r4, lr}
 8014998:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801499a:	4608      	mov	r0, r1
 801499c:	f005 ffc6 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 80149a0:	2800      	cmp	r0, #0
 80149a2:	d133      	bne.n	8014a0c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 80149a4:	4923      	ldr	r1, [pc, #140]	@ (8014a34 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa0>)
 80149a6:	4822      	ldr	r0, [pc, #136]	@ (8014a30 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 80149a8:	f005 ffc0 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 80149ac:	2800      	cmp	r0, #0
 80149ae:	d12f      	bne.n	8014a10 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 80149b0:	4921      	ldr	r1, [pc, #132]	@ (8014a38 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa4>)
 80149b2:	481f      	ldr	r0, [pc, #124]	@ (8014a30 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 80149b4:	f005 ffba 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 80149b8:	bb60      	cbnz	r0, 8014a14 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 80149ba:	4920      	ldr	r1, [pc, #128]	@ (8014a3c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa8>)
 80149bc:	481c      	ldr	r0, [pc, #112]	@ (8014a30 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 80149be:	f005 ffb5 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 80149c2:	bb48      	cbnz	r0, 8014a18 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 80149c4:	491e      	ldr	r1, [pc, #120]	@ (8014a40 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xac>)
 80149c6:	481a      	ldr	r0, [pc, #104]	@ (8014a30 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 80149c8:	f005 ffb0 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 80149cc:	bb30      	cbnz	r0, 8014a1c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 80149ce:	491d      	ldr	r1, [pc, #116]	@ (8014a44 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb0>)
 80149d0:	4817      	ldr	r0, [pc, #92]	@ (8014a30 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 80149d2:	f005 ffab 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 80149d6:	bb18      	cbnz	r0, 8014a20 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 80149d8:	491b      	ldr	r1, [pc, #108]	@ (8014a48 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb4>)
 80149da:	4815      	ldr	r0, [pc, #84]	@ (8014a30 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 80149dc:	f005 ffa6 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 80149e0:	bb00      	cbnz	r0, 8014a24 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 80149e2:	491a      	ldr	r1, [pc, #104]	@ (8014a4c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb8>)
 80149e4:	4812      	ldr	r0, [pc, #72]	@ (8014a30 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 80149e6:	f005 ffa1 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 80149ea:	b9e8      	cbnz	r0, 8014a28 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 80149ec:	4918      	ldr	r1, [pc, #96]	@ (8014a50 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xbc>)
 80149ee:	4810      	ldr	r0, [pc, #64]	@ (8014a30 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 80149f0:	f005 ff9c 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 80149f4:	b9d0      	cbnz	r0, 8014a2c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 80149f6:	4917      	ldr	r1, [pc, #92]	@ (8014a54 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xc0>)
 80149f8:	480d      	ldr	r0, [pc, #52]	@ (8014a30 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 80149fa:	f005 ff97 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 80149fe:	2800      	cmp	r0, #0
 8014a00:	bf14      	ite	ne
 8014a02:	2309      	movne	r3, #9
 8014a04:	2300      	moveq	r3, #0
 8014a06:	7020      	strb	r0, [r4, #0]
}
 8014a08:	4618      	mov	r0, r3
 8014a0a:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8014a0c:	2300      	movs	r3, #0
 8014a0e:	e7fa      	b.n	8014a06 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8014a10:	2301      	movs	r3, #1
 8014a12:	e7f8      	b.n	8014a06 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8014a14:	2302      	movs	r3, #2
 8014a16:	e7f6      	b.n	8014a06 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8014a18:	2303      	movs	r3, #3
 8014a1a:	e7f4      	b.n	8014a06 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8014a1c:	2304      	movs	r3, #4
 8014a1e:	e7f2      	b.n	8014a06 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 8014a20:	2305      	movs	r3, #5
 8014a22:	e7f0      	b.n	8014a06 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8014a24:	2306      	movs	r3, #6
 8014a26:	e7ee      	b.n	8014a06 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 8014a28:	2307      	movs	r3, #7
 8014a2a:	e7ec      	b.n	8014a06 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8014a2c:	2308      	movs	r3, #8
 8014a2e:	e7ea      	b.n	8014a06 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
 8014a30:	0801b5d4 	.word	0x0801b5d4
 8014a34:	0801b5c4 	.word	0x0801b5c4
 8014a38:	0801b5b4 	.word	0x0801b5b4
 8014a3c:	0801b5a4 	.word	0x0801b5a4
 8014a40:	0801b5dc 	.word	0x0801b5dc
 8014a44:	0801b5cc 	.word	0x0801b5cc
 8014a48:	0801b5bc 	.word	0x0801b5bc
 8014a4c:	0801b5ac 	.word	0x0801b5ac
 8014a50:	0801b59c 	.word	0x0801b59c
 8014a54:	0801b594 	.word	0x0801b594

08014a58 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE6_4_FUNES0_tS1_t>:
	*__first = __tmp;
 8014a58:	e9d0 0209 	ldrd	r0, r2, [r0, #36]	@ 0x24
 8014a5c:	2100      	movs	r1, #0
 8014a5e:	1a12      	subs	r2, r2, r0

	// Register to reset all generator offsets to 0
	registers->AddRegister<uint8_t>(REG_GEN_RESET_GENERATOR_OFFSETS);
	registers->SetRegisterAsSingle(REG_GEN_RESET_GENERATOR_OFFSETS);
	registers->AddWriteCallback<uint8_t>(REG_GEN_RESET_GENERATOR_OFFSETS, (void*) this,
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8014a60:	b508      	push	{r3, lr}
 8014a62:	f006 fa1d 	bl	801aea0 <memset>
			MotionGenerator* self = (MotionGenerator*) context;
			std::fill(self->generator_offsets.begin(), self->generator_offsets.end(), 0);
			return true;
		}
 8014a66:	2001      	movs	r0, #1
 8014a68:	bd08      	pop	{r3, pc}

08014a6a <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE8_4_FUNES0_tS1_t>:
 8014a6a:	e9d0 020c 	ldrd	r0, r2, [r0, #48]	@ 0x30
 8014a6e:	2100      	movs	r1, #0
 8014a70:	1a12      	subs	r2, r2, r0

	// Register to reset all position offsets
	registers->AddRegister<uint8_t>(REG_GEN_RESET_POSITION_OFFSETS);
	registers->SetRegisterAsSingle(REG_GEN_RESET_POSITION_OFFSETS);
	registers->AddWriteCallback<uint8_t>(REG_GEN_RESET_POSITION_OFFSETS, (void*) this,
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8014a72:	b508      	push	{r3, lr}
 8014a74:	f006 fa14 	bl	801aea0 <memset>
			MotionGenerator* self = (MotionGenerator*) context;
			std::fill(self->position_offsets.begin(), self->position_offsets.end(), 0);
			return true;
		}
 8014a78:	2001      	movs	r0, #1
 8014a7a:	bd08      	pop	{r3, pc}

08014a7c <_ZN15MotionGeneratorC1Ev>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 8014a7c:	2200      	movs	r2, #0
 8014a7e:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 8014a82:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 8014a86:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 8014a8a:	e9c0 2214 	strd	r2, r2, [r0, #80]	@ 0x50
 8014a8e:	6582      	str	r2, [r0, #88]	@ 0x58
}
 8014a90:	4770      	bx	lr

08014a92 <_ZN15MotionGenerator18SetGeneratorPeriodEm>:
 * @brief Set the generator period
 *
 * @param input period_ms_: generator period in ms
 * @return whether successful
 */
bool MotionGenerator::SetGeneratorPeriod(uint32_t period_ms_) {
 8014a92:	b538      	push	{r3, r4, r5, lr}
 8014a94:	4604      	mov	r4, r0
 8014a96:	460d      	mov	r5, r1
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 8014a98:	6900      	ldr	r0, [r0, #16]
 8014a9a:	f04f 31ff 	mov.w	r1, #4294967295
 8014a9e:	f7f7 fd49 	bl	800c534 <osSemaphoreAcquire>
	period_ms = period_ms_;
	osSemaphoreRelease(GeneratorSemaphore);
 8014aa2:	6920      	ldr	r0, [r4, #16]
	period_ms = period_ms_;
 8014aa4:	61a5      	str	r5, [r4, #24]
	osSemaphoreRelease(GeneratorSemaphore);
 8014aa6:	f7f7 fd79 	bl	800c59c <osSemaphoreRelease>
	return true;
}
 8014aaa:	2001      	movs	r0, #1
 8014aac:	bd38      	pop	{r3, r4, r5, pc}

08014aae <_ZN15MotionGenerator18SetGeneratorOffsetEhf>:
 *
 * @param input index: module index with 0 = module directly attached to head
 * @param input offset: the generator offset
 * @return whether successful
 */
bool MotionGenerator::SetGeneratorOffset(uint8_t index, float offset) {
 8014aae:	b538      	push	{r3, r4, r5, lr}
 8014ab0:	4604      	mov	r4, r0
 8014ab2:	460d      	mov	r5, r1
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 8014ab4:	6900      	ldr	r0, [r0, #16]
 8014ab6:	f04f 31ff 	mov.w	r1, #4294967295
bool MotionGenerator::SetGeneratorOffset(uint8_t index, float offset) {
 8014aba:	ed2d 8b02 	vpush	{d8}
 8014abe:	eeb0 8a40 	vmov.f32	s16, s0
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 8014ac2:	f7f7 fd37 	bl	800c534 <osSemaphoreAcquire>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8014ac6:	e9d4 3209 	ldrd	r3, r2, [r4, #36]	@ 0x24
 8014aca:	1ad2      	subs	r2, r2, r3
	if (index >= generator_offsets.size()) {osSemaphoreRelease(GeneratorSemaphore); return false;}
 8014acc:	ebb5 0fa2 	cmp.w	r5, r2, asr #2
 8014ad0:	d306      	bcc.n	8014ae0 <_ZN15MotionGenerator18SetGeneratorOffsetEhf+0x32>
 8014ad2:	6920      	ldr	r0, [r4, #16]
 8014ad4:	f7f7 fd62 	bl	800c59c <osSemaphoreRelease>
 8014ad8:	2000      	movs	r0, #0

	generator_offsets[index] = offset;
	osSemaphoreRelease(GeneratorSemaphore);
	return true;
}
 8014ada:	ecbd 8b02 	vpop	{d8}
 8014ade:	bd38      	pop	{r3, r4, r5, pc}
	generator_offsets[index] = offset;
 8014ae0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
	osSemaphoreRelease(GeneratorSemaphore);
 8014ae4:	6920      	ldr	r0, [r4, #16]
	generator_offsets[index] = offset;
 8014ae6:	ed83 8a00 	vstr	s16, [r3]
	osSemaphoreRelease(GeneratorSemaphore);
 8014aea:	f7f7 fd57 	bl	800c59c <osSemaphoreRelease>
	return true;
 8014aee:	2001      	movs	r0, #1
 8014af0:	e7f3      	b.n	8014ada <_ZN15MotionGenerator18SetGeneratorOffsetEhf+0x2c>

08014af2 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPftE5_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 8014af2:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, float* input, uint16_t length) -> bool {
 8014af4:	b082      	sub	sp, #8
			if (length != 2) return false;
 8014af6:	d10c      	bne.n	8014b12 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPftE5_4_FUNES0_tS1_t+0x20>
			return self->SetGeneratorOffset((uint8_t) input[0], input[1]);
 8014af8:	edd2 7a00 	vldr	s15, [r2]
 8014afc:	ed92 0a01 	vldr	s0, [r2, #4]
 8014b00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014b04:	edcd 7a01 	vstr	s15, [sp, #4]
 8014b08:	f89d 1004 	ldrb.w	r1, [sp, #4]
		}
 8014b0c:	b002      	add	sp, #8
			return self->SetGeneratorOffset((uint8_t) input[0], input[1]);
 8014b0e:	f7ff bfce 	b.w	8014aae <_ZN15MotionGenerator18SetGeneratorOffsetEhf>
		}
 8014b12:	2000      	movs	r0, #0
 8014b14:	b002      	add	sp, #8
 8014b16:	4770      	bx	lr

08014b18 <_ZN15MotionGenerator21ResetGeneratorOffsetsEv>:
/**
 * @brief Reset all generator offsets to 0
 *
 * @return whether successful
 */
bool MotionGenerator::ResetGeneratorOffsets(void) {
 8014b18:	b510      	push	{r4, lr}
 8014b1a:	4604      	mov	r4, r0
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 8014b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8014b20:	6900      	ldr	r0, [r0, #16]
 8014b22:	f7f7 fd07 	bl	800c534 <osSemaphoreAcquire>
	for (float &offset : generator_offsets) {
		offset = 0;
 8014b26:	2100      	movs	r1, #0
 8014b28:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	@ 0x24
 8014b2c:	1a12      	subs	r2, r2, r0
 8014b2e:	f006 f9b7 	bl	801aea0 <memset>
	}
	osSemaphoreRelease(GeneratorSemaphore);
 8014b32:	6920      	ldr	r0, [r4, #16]
 8014b34:	f7f7 fd32 	bl	800c59c <osSemaphoreRelease>
	return true;
}
 8014b38:	2001      	movs	r0, #1
 8014b3a:	bd10      	pop	{r4, pc}

08014b3c <_ZN15MotionGenerator17SetPositionOffsetEhf>:
 *
 * @param input index: module index with 0 = module directly attached to head
 * @param input offset: the position offset
 * @return whether successful
 */
bool MotionGenerator::SetPositionOffset(uint8_t index, float offset) {
 8014b3c:	b538      	push	{r3, r4, r5, lr}
 8014b3e:	4604      	mov	r4, r0
 8014b40:	460d      	mov	r5, r1
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 8014b42:	6900      	ldr	r0, [r0, #16]
 8014b44:	f04f 31ff 	mov.w	r1, #4294967295
bool MotionGenerator::SetPositionOffset(uint8_t index, float offset) {
 8014b48:	ed2d 8b02 	vpush	{d8}
 8014b4c:	eeb0 8a40 	vmov.f32	s16, s0
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 8014b50:	f7f7 fcf0 	bl	800c534 <osSemaphoreAcquire>
 8014b54:	e9d4 320c 	ldrd	r3, r2, [r4, #48]	@ 0x30
 8014b58:	1ad2      	subs	r2, r2, r3
	if (index >= position_offsets.size()) {osSemaphoreRelease(GeneratorSemaphore); return false;}
 8014b5a:	ebb5 0fa2 	cmp.w	r5, r2, asr #2
 8014b5e:	d306      	bcc.n	8014b6e <_ZN15MotionGenerator17SetPositionOffsetEhf+0x32>
 8014b60:	6920      	ldr	r0, [r4, #16]
 8014b62:	f7f7 fd1b 	bl	800c59c <osSemaphoreRelease>
 8014b66:	2000      	movs	r0, #0

	position_offsets[index] = offset;
	osSemaphoreRelease(GeneratorSemaphore);
	return true;
}
 8014b68:	ecbd 8b02 	vpop	{d8}
 8014b6c:	bd38      	pop	{r3, r4, r5, pc}
	position_offsets[index] = offset;
 8014b6e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
	osSemaphoreRelease(GeneratorSemaphore);
 8014b72:	6920      	ldr	r0, [r4, #16]
	position_offsets[index] = offset;
 8014b74:	ed83 8a00 	vstr	s16, [r3]
	osSemaphoreRelease(GeneratorSemaphore);
 8014b78:	f7f7 fd10 	bl	800c59c <osSemaphoreRelease>
	return true;
 8014b7c:	2001      	movs	r0, #1
 8014b7e:	e7f3      	b.n	8014b68 <_ZN15MotionGenerator17SetPositionOffsetEhf+0x2c>

08014b80 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPftE7_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 8014b80:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, float* input, uint16_t length) -> bool {
 8014b82:	b082      	sub	sp, #8
			if (length != 2) return false;
 8014b84:	d10c      	bne.n	8014ba0 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPftE7_4_FUNES0_tS1_t+0x20>
			return self->SetPositionOffset((uint8_t) input[0], input[1]);
 8014b86:	edd2 7a00 	vldr	s15, [r2]
 8014b8a:	ed92 0a01 	vldr	s0, [r2, #4]
 8014b8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014b92:	edcd 7a01 	vstr	s15, [sp, #4]
 8014b96:	f89d 1004 	ldrb.w	r1, [sp, #4]
		}
 8014b9a:	b002      	add	sp, #8
			return self->SetPositionOffset((uint8_t) input[0], input[1]);
 8014b9c:	f7ff bfce 	b.w	8014b3c <_ZN15MotionGenerator17SetPositionOffsetEhf>
		}
 8014ba0:	2000      	movs	r0, #0
 8014ba2:	b002      	add	sp, #8
 8014ba4:	4770      	bx	lr

08014ba6 <_ZN15MotionGenerator15SetModuleLengthEf>:
 * @brief Set the module length
 *
 * @param input length: the module length
 * @return whether successful
 */
bool MotionGenerator::SetModuleLength(float length) {
 8014ba6:	b510      	push	{r4, lr}
 8014ba8:	ed2d 8b02 	vpush	{d8}
 8014bac:	eeb0 8a40 	vmov.f32	s16, s0
 8014bb0:	4604      	mov	r4, r0
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 8014bb2:	f04f 31ff 	mov.w	r1, #4294967295
 8014bb6:	6900      	ldr	r0, [r0, #16]
 8014bb8:	f7f7 fcbc 	bl	800c534 <osSemaphoreAcquire>
	module_length = length;
	osSemaphoreRelease(GeneratorSemaphore);
 8014bbc:	6920      	ldr	r0, [r4, #16]
	module_length = length;
 8014bbe:	ed84 8a08 	vstr	s16, [r4, #32]
	osSemaphoreRelease(GeneratorSemaphore);
 8014bc2:	f7f7 fceb 	bl	800c59c <osSemaphoreRelease>
	return true;
}
 8014bc6:	2001      	movs	r0, #1
 8014bc8:	ecbd 8b02 	vpop	{d8}
 8014bcc:	bd10      	pop	{r4, pc}

08014bce <_ZN15MotionGenerator21SetGeneratorAmplitudeEf>:
 * @brief Set the generator amplitude
 *
 * @param input amplitude_: waveform amplitude A with Asin(...)
 * @return whether successful
 */
bool MotionGenerator::SetGeneratorAmplitude(float amplitude_) {
 8014bce:	b510      	push	{r4, lr}
 8014bd0:	ed2d 8b02 	vpush	{d8}
 8014bd4:	eeb0 8a40 	vmov.f32	s16, s0
 8014bd8:	4604      	mov	r4, r0
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 8014bda:	f04f 31ff 	mov.w	r1, #4294967295
 8014bde:	6900      	ldr	r0, [r0, #16]
 8014be0:	f7f7 fca8 	bl	800c534 <osSemaphoreAcquire>
	amplitude = amplitude_;
	osSemaphoreRelease(GeneratorSemaphore);
 8014be4:	6920      	ldr	r0, [r4, #16]
	amplitude = amplitude_;
 8014be6:	ed84 8a0f 	vstr	s16, [r4, #60]	@ 0x3c
	osSemaphoreRelease(GeneratorSemaphore);
 8014bea:	f7f7 fcd7 	bl	800c59c <osSemaphoreRelease>
	return true;
}
 8014bee:	2001      	movs	r0, #1
 8014bf0:	ecbd 8b02 	vpop	{d8}
 8014bf4:	bd10      	pop	{r4, pc}

08014bf6 <_ZN15MotionGenerator21SetGeneratorFrequencyEf>:
 * @brief Set the generator frequency
 *
 * @param input frequency_: waveform frequency
 * @return whether successful
 */
bool MotionGenerator::SetGeneratorFrequency(float frequency_) {
 8014bf6:	b510      	push	{r4, lr}
 8014bf8:	ed2d 8b02 	vpush	{d8}
 8014bfc:	eeb0 8a40 	vmov.f32	s16, s0
 8014c00:	4604      	mov	r4, r0
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 8014c02:	f04f 31ff 	mov.w	r1, #4294967295
 8014c06:	6900      	ldr	r0, [r0, #16]
 8014c08:	f7f7 fc94 	bl	800c534 <osSemaphoreAcquire>
	frequency = frequency_;
	osSemaphoreRelease(GeneratorSemaphore);
 8014c0c:	6920      	ldr	r0, [r4, #16]
	frequency = frequency_;
 8014c0e:	ed84 8a10 	vstr	s16, [r4, #64]	@ 0x40
	osSemaphoreRelease(GeneratorSemaphore);
 8014c12:	f7f7 fcc3 	bl	800c59c <osSemaphoreRelease>
	return true;
}
 8014c16:	2001      	movs	r0, #1
 8014c18:	ecbd 8b02 	vpop	{d8}
 8014c1c:	bd10      	pop	{r4, pc}

08014c1e <_ZN15MotionGenerator29SetGeneratorWavelengthInverseEf>:
 * @brief Set the generator wavelength inverse
 *
 * @param input wavelength_inverse_: waveform wavelength inverse 1/l with Asin(.. + 2*pi*x/l)
 * @return whether successful
 */
bool MotionGenerator::SetGeneratorWavelengthInverse(float wavelength_inverse_) {
 8014c1e:	b510      	push	{r4, lr}
 8014c20:	ed2d 8b02 	vpush	{d8}
 8014c24:	eeb0 8a40 	vmov.f32	s16, s0
 8014c28:	4604      	mov	r4, r0
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 8014c2a:	f04f 31ff 	mov.w	r1, #4294967295
 8014c2e:	6900      	ldr	r0, [r0, #16]
 8014c30:	f7f7 fc80 	bl	800c534 <osSemaphoreAcquire>
	wavelength_inverse = wavelength_inverse_;
	osSemaphoreRelease(GeneratorSemaphore);
 8014c34:	6920      	ldr	r0, [r4, #16]
	wavelength_inverse = wavelength_inverse_;
 8014c36:	ed84 8a11 	vstr	s16, [r4, #68]	@ 0x44
	osSemaphoreRelease(GeneratorSemaphore);
 8014c3a:	f7f7 fcaf 	bl	800c59c <osSemaphoreRelease>
	return true;
}
 8014c3e:	2001      	movs	r0, #1
 8014c40:	ecbd 8b02 	vpop	{d8}
 8014c44:	bd10      	pop	{r4, pc}

08014c46 <_ZN15MotionGenerator17SetGeneratorPhaseEf>:
 * @brief Set the generator phase
 *
 * @param input wavelength_inverse_: waveform phase
 * @return whether successful
 */
bool MotionGenerator::SetGeneratorPhase(float phase_) {
 8014c46:	b510      	push	{r4, lr}
 8014c48:	ed2d 8b02 	vpush	{d8}
 8014c4c:	eeb0 8a40 	vmov.f32	s16, s0
 8014c50:	4604      	mov	r4, r0
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 8014c52:	f04f 31ff 	mov.w	r1, #4294967295
 8014c56:	6900      	ldr	r0, [r0, #16]
 8014c58:	f7f7 fc6c 	bl	800c534 <osSemaphoreAcquire>
	phase = phase_;
	osSemaphoreRelease(GeneratorSemaphore);
 8014c5c:	6920      	ldr	r0, [r4, #16]
	phase = phase_;
 8014c5e:	ed84 8a12 	vstr	s16, [r4, #72]	@ 0x48
	osSemaphoreRelease(GeneratorSemaphore);
 8014c62:	f7f7 fc9b 	bl	800c59c <osSemaphoreRelease>
	return true;
}
 8014c66:	2001      	movs	r0, #1
 8014c68:	ecbd 8b02 	vpop	{d8}
 8014c6c:	bd10      	pop	{r4, pc}

08014c6e <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
 8014c6e:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8014c70:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
      push_back(const value_type& __x)
 8014c74:	4605      	mov	r5, r0
 8014c76:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8014c78:	429c      	cmp	r4, r3
 8014c7a:	d005      	beq.n	8014c88 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_+0x1a>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8014c7c:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 8014c7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8014c82:	3410      	adds	r4, #16
 8014c84:	606c      	str	r4, [r5, #4]
      }
 8014c86:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
 8014c88:	4621      	mov	r1, r4
 8014c8a:	f7fa fa65 	bl	800f158 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 8014c8e:	e7fa      	b.n	8014c86 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_+0x18>

08014c90 <_ZN9Registers11AddRegisterIfEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 8014c90:	b570      	push	{r4, r5, r6, lr}
 8014c92:	4604      	mov	r4, r0
 8014c94:	b086      	sub	sp, #24
 8014c96:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8014c98:	6800      	ldr	r0, [r0, #0]
 8014c9a:	f04f 31ff 	mov.w	r1, #4294967295
 8014c9e:	f7f7 fc49 	bl	800c534 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 8014ca2:	f10d 0207 	add.w	r2, sp, #7
 8014ca6:	4631      	mov	r1, r6
 8014ca8:	4620      	mov	r0, r4
 8014caa:	f003 fa50 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 8014cae:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8014cb2:	b125      	cbz	r5, 8014cbe <_ZN9Registers11AddRegisterIfEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 8014cb4:	6820      	ldr	r0, [r4, #0]
 8014cb6:	f7f7 fc71 	bl	800c59c <osSemaphoreRelease>
}
 8014cba:	b006      	add	sp, #24
 8014cbc:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8014cbe:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 8014cc2:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8014cc6:	f7ff fe03 	bl	80148d0 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>
	configuration_.register_info = register_;
 8014cca:	2301      	movs	r3, #1
 8014ccc:	f8ad 600a 	strh.w	r6, [sp, #10]
 8014cd0:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 8014cd4:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 8014cd8:	f88d 000c 	strb.w	r0, [sp, #12]
 8014cdc:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 8014ce0:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d0e5      	beq.n	8014cb4 <_ZN9Registers11AddRegisterIfEEbt.isra.0+0x24>
		registers.push_back(configuration_);
 8014ce8:	a902      	add	r1, sp, #8
 8014cea:	1d20      	adds	r0, r4, #4
 8014cec:	f7ff ffbf 	bl	8014c6e <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 8014cf0:	e7e0      	b.n	8014cb4 <_ZN9Registers11AddRegisterIfEEbt.isra.0+0x24>

08014cf2 <_ZN9Registers11AddRegisterIhEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 8014cf2:	b570      	push	{r4, r5, r6, lr}
 8014cf4:	4604      	mov	r4, r0
 8014cf6:	b086      	sub	sp, #24
 8014cf8:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8014cfa:	6800      	ldr	r0, [r0, #0]
 8014cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8014d00:	f7f7 fc18 	bl	800c534 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 8014d04:	f10d 0207 	add.w	r2, sp, #7
 8014d08:	4631      	mov	r1, r6
 8014d0a:	4620      	mov	r0, r4
 8014d0c:	f003 fa1f 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 8014d10:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8014d14:	b125      	cbz	r5, 8014d20 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 8014d16:	6820      	ldr	r0, [r4, #0]
 8014d18:	f7f7 fc40 	bl	800c59c <osSemaphoreRelease>
}
 8014d1c:	b006      	add	sp, #24
 8014d1e:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8014d20:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 8014d24:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8014d28:	f7ff fe34 	bl	8014994 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	configuration_.register_info = register_;
 8014d2c:	2301      	movs	r3, #1
 8014d2e:	f8ad 600a 	strh.w	r6, [sp, #10]
 8014d32:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 8014d36:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 8014d3a:	f88d 000c 	strb.w	r0, [sp, #12]
 8014d3e:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 8014d42:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d0e5      	beq.n	8014d16 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
		registers.push_back(configuration_);
 8014d4a:	a902      	add	r1, sp, #8
 8014d4c:	1d20      	adds	r0, r4, #4
 8014d4e:	f7ff ff8e 	bl	8014c6e <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 8014d52:	e7e0      	b.n	8014d16 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>

08014d54 <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0>:
bool Registers::AddReadCallback(uint16_t ID, void* context, bool (*read)(void*, uint16_t, T**, uint16_t*)) {
 8014d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d56:	460c      	mov	r4, r1
 8014d58:	b087      	sub	sp, #28
 8014d5a:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8014d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8014d60:	6800      	ldr	r0, [r0, #0]
bool Registers::AddReadCallback(uint16_t ID, void* context, bool (*read)(void*, uint16_t, T**, uint16_t*)) {
 8014d62:	461e      	mov	r6, r3
 8014d64:	4617      	mov	r7, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8014d66:	f7f7 fbe5 	bl	800c534 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8014d6a:	4621      	mov	r1, r4
 8014d6c:	f10d 0207 	add.w	r2, sp, #7
 8014d70:	4628      	mov	r0, r5
 8014d72:	f003 f9ec 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8014d76:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8014d7a:	4604      	mov	r4, r0
	if (!success) {
 8014d7c:	b923      	cbnz	r3, 8014d88 <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0+0x34>
	osSemaphoreRelease(RegistersSemaphore);
 8014d7e:	6828      	ldr	r0, [r5, #0]
 8014d80:	f7f7 fc0c 	bl	800c59c <osSemaphoreRelease>
}
 8014d84:	b007      	add	sp, #28
 8014d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8014d88:	f10d 0007 	add.w	r0, sp, #7
 8014d8c:	f7ff fe02 	bl	8014994 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 8014d90:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d0f2      	beq.n	8014d7e <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0+0x2a>
	if (target_register->register_info.type != registered_type) {
 8014d98:	7923      	ldrb	r3, [r4, #4]
 8014d9a:	4298      	cmp	r0, r3
 8014d9c:	d1ef      	bne.n	8014d7e <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0+0x2a>
	if (callbacks[target_register->register_info.type] == NULL) {
 8014d9e:	3004      	adds	r0, #4
 8014da0:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8014da4:	2800      	cmp	r0, #0
 8014da6:	d0ea      	beq.n	8014d7e <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0+0x2a>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 8014da8:	7823      	ldrb	r3, [r4, #0]
 8014daa:	b983      	cbnz	r3, 8014dce <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0+0x7a>
 8014dac:	7863      	ldrb	r3, [r4, #1]
 8014dae:	b973      	cbnz	r3, 8014dce <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0+0x7a>
		target_callback_list->push_back(callback);
 8014db0:	a902      	add	r1, sp, #8
		callback.read = read;
 8014db2:	9605      	str	r6, [sp, #20]
		callback.write = NULL;
 8014db4:	e9cd 7303 	strd	r7, r3, [sp, #12]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8014db8:	e9d0 2300 	ldrd	r2, r3, [r0]
 8014dbc:	1a9b      	subs	r3, r3, r2
 8014dbe:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8014dc0:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 8014dc2:	f7fa fab9 	bl	800f338 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_>
	target_register->mode.callbacks = true;
 8014dc6:	2301      	movs	r3, #1
 8014dc8:	7063      	strb	r3, [r4, #1]
	target_register->access.read = true;
 8014dca:	7263      	strb	r3, [r4, #9]
 8014dcc:	e7d7      	b.n	8014d7e <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0+0x2a>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8014dce:	8961      	ldrh	r1, [r4, #10]
 8014dd0:	f7fa f916 	bl	800f000 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
		callback->context = context;
 8014dd4:	6047      	str	r7, [r0, #4]
		callback->read = read;
 8014dd6:	60c6      	str	r6, [r0, #12]
 8014dd8:	e7f5      	b.n	8014dc6 <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0+0x72>

08014dda <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8014dda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ddc:	460c      	mov	r4, r1
 8014dde:	b087      	sub	sp, #28
 8014de0:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8014de2:	f04f 31ff 	mov.w	r1, #4294967295
 8014de6:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8014de8:	461e      	mov	r6, r3
 8014dea:	4617      	mov	r7, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8014dec:	f7f7 fba2 	bl	800c534 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8014df0:	4621      	mov	r1, r4
 8014df2:	f10d 0207 	add.w	r2, sp, #7
 8014df6:	4628      	mov	r0, r5
 8014df8:	f003 f9a9 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8014dfc:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8014e00:	4604      	mov	r4, r0
	if (!success) {
 8014e02:	b923      	cbnz	r3, 8014e0e <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x34>
	osSemaphoreRelease(RegistersSemaphore);
 8014e04:	6828      	ldr	r0, [r5, #0]
 8014e06:	f7f7 fbc9 	bl	800c59c <osSemaphoreRelease>
}
 8014e0a:	b007      	add	sp, #28
 8014e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8014e0e:	f10d 0007 	add.w	r0, sp, #7
 8014e12:	f7ff fdbf 	bl	8014994 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 8014e16:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d0f2      	beq.n	8014e04 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (target_register->register_info.type != registered_type) {
 8014e1e:	7923      	ldrb	r3, [r4, #4]
 8014e20:	4298      	cmp	r0, r3
 8014e22:	d1ef      	bne.n	8014e04 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (callbacks[target_register->register_info.type] == NULL) {
 8014e24:	3004      	adds	r0, #4
 8014e26:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8014e2a:	2800      	cmp	r0, #0
 8014e2c:	d0ea      	beq.n	8014e04 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 8014e2e:	7823      	ldrb	r3, [r4, #0]
 8014e30:	b983      	cbnz	r3, 8014e54 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
 8014e32:	7863      	ldrb	r3, [r4, #1]
 8014e34:	b973      	cbnz	r3, 8014e54 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
		callback.read = NULL;
 8014e36:	9305      	str	r3, [sp, #20]
		target_callback_list->push_back(callback);
 8014e38:	a902      	add	r1, sp, #8
 8014e3a:	e9d0 2300 	ldrd	r2, r3, [r0]
		callback.write = write;
 8014e3e:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8014e42:	1a9b      	subs	r3, r3, r2
 8014e44:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8014e46:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 8014e48:	f7fa fa76 	bl	800f338 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_>
	target_register->mode.callbacks = true;
 8014e4c:	2301      	movs	r3, #1
 8014e4e:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 8014e50:	7223      	strb	r3, [r4, #8]
 8014e52:	e7d7      	b.n	8014e04 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8014e54:	8961      	ldrh	r1, [r4, #10]
 8014e56:	f7fa f8d3 	bl	800f000 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
		callback->write = write;
 8014e5a:	e9c0 7601 	strd	r7, r6, [r0, #4]
 8014e5e:	e7f5      	b.n	8014e4c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x72>

08014e60 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8014e60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e64:	e9d0 8900 	ldrd	r8, r9, [r0]
 8014e68:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 8014e6a:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8014e6e:	eba9 0208 	sub.w	r2, r9, r8
 8014e72:	4607      	mov	r7, r0
 8014e74:	468a      	mov	sl, r1
	if (max_size() - size() < __n)
 8014e76:	ebb3 1f22 	cmp.w	r3, r2, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8014e7a:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
 8014e7e:	d102      	bne.n	8014e86 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8014e80:	4820      	ldr	r0, [pc, #128]	@ (8014f04 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa4>)
 8014e82:	f005 fd71 	bl	801a968 <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 8014e86:	45c1      	cmp	r9, r8
 8014e88:	bf14      	ite	ne
 8014e8a:	4622      	movne	r2, r4
 8014e8c:	2201      	moveq	r2, #1
 8014e8e:	eba1 0508 	sub.w	r5, r1, r8
 8014e92:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8014e94:	d231      	bcs.n	8014efa <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8014e96:	b394      	cbz	r4, 8014efe <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9e>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8014e98:	429c      	cmp	r4, r3
 8014e9a:	bf28      	it	cs
 8014e9c:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8014e9e:	0120      	lsls	r0, r4, #4
 8014ea0:	f005 fcad 	bl	801a7fe <_Znwj>
 8014ea4:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8014ea6:	eb06 0c05 	add.w	ip, r6, r5
      if (__count > 0)
 8014eaa:	2d00      	cmp	r5, #0
 8014eac:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8014eb0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8014eb4:	dd04      	ble.n	8014ec0 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x60>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8014eb6:	462a      	mov	r2, r5
 8014eb8:	4641      	mov	r1, r8
 8014eba:	4630      	mov	r0, r6
 8014ebc:	f005 ffd6 	bl	801ae6c <memmove>
      ptrdiff_t __count = __last - __first;
 8014ec0:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
 8014ec4:	3510      	adds	r5, #16
      if (__count > 0)
 8014ec6:	f1b9 0f00 	cmp.w	r9, #0
 8014eca:	4435      	add	r5, r6
 8014ecc:	dd04      	ble.n	8014ed8 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x78>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8014ece:	464a      	mov	r2, r9
 8014ed0:	4651      	mov	r1, sl
 8014ed2:	4628      	mov	r0, r5
 8014ed4:	f006 f8c2 	bl	801b05c <memcpy>
      return __result + __count;
 8014ed8:	444d      	add	r5, r9
	if (__p)
 8014eda:	f1b8 0f00 	cmp.w	r8, #0
 8014ede:	d005      	beq.n	8014eec <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
 8014ee0:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8014ee2:	4640      	mov	r0, r8
 8014ee4:	eba1 0108 	sub.w	r1, r1, r8
 8014ee8:	f005 fc64 	bl	801a7b4 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8014eec:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8014ef0:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 8014ef4:	60be      	str	r6, [r7, #8]
    }
 8014ef6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8014efa:	461c      	mov	r4, r3
 8014efc:	e7cf      	b.n	8014e9e <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8014efe:	4626      	mov	r6, r4
 8014f00:	e7d1      	b.n	8014ea6 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
 8014f02:	bf00      	nop
 8014f04:	0801b17a 	.word	0x0801b17a

08014f08 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8014f08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8014f0c:	e9d0 8900 	ldrd	r8, r9, [r0]
 8014f10:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 8014f12:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8014f16:	eba9 0208 	sub.w	r2, r9, r8
 8014f1a:	4607      	mov	r7, r0
 8014f1c:	468a      	mov	sl, r1
	if (max_size() - size() < __n)
 8014f1e:	ebb3 1f22 	cmp.w	r3, r2, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8014f22:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
 8014f26:	d102      	bne.n	8014f2e <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8014f28:	4820      	ldr	r0, [pc, #128]	@ (8014fac <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa4>)
 8014f2a:	f005 fd1d 	bl	801a968 <_ZSt20__throw_length_errorPKc>
 8014f2e:	45c1      	cmp	r9, r8
 8014f30:	bf14      	ite	ne
 8014f32:	4622      	movne	r2, r4
 8014f34:	2201      	moveq	r2, #1
 8014f36:	eba1 0508 	sub.w	r5, r1, r8
 8014f3a:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8014f3c:	d231      	bcs.n	8014fa2 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8014f3e:	b394      	cbz	r4, 8014fa6 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9e>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8014f40:	429c      	cmp	r4, r3
 8014f42:	bf28      	it	cs
 8014f44:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8014f46:	0120      	lsls	r0, r4, #4
 8014f48:	f005 fc59 	bl	801a7fe <_Znwj>
 8014f4c:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8014f4e:	eb06 0c05 	add.w	ip, r6, r5
      if (__count > 0)
 8014f52:	2d00      	cmp	r5, #0
 8014f54:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8014f58:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8014f5c:	dd04      	ble.n	8014f68 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x60>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8014f5e:	462a      	mov	r2, r5
 8014f60:	4641      	mov	r1, r8
 8014f62:	4630      	mov	r0, r6
 8014f64:	f005 ff82 	bl	801ae6c <memmove>
      ptrdiff_t __count = __last - __first;
 8014f68:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
 8014f6c:	3510      	adds	r5, #16
      if (__count > 0)
 8014f6e:	f1b9 0f00 	cmp.w	r9, #0
 8014f72:	4435      	add	r5, r6
 8014f74:	dd04      	ble.n	8014f80 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x78>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8014f76:	464a      	mov	r2, r9
 8014f78:	4651      	mov	r1, sl
 8014f7a:	4628      	mov	r0, r5
 8014f7c:	f006 f86e 	bl	801b05c <memcpy>
      return __result + __count;
 8014f80:	444d      	add	r5, r9
	if (__p)
 8014f82:	f1b8 0f00 	cmp.w	r8, #0
 8014f86:	d005      	beq.n	8014f94 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
 8014f88:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8014f8a:	4640      	mov	r0, r8
 8014f8c:	eba1 0108 	sub.w	r1, r1, r8
 8014f90:	f005 fc10 	bl	801a7b4 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8014f94:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8014f98:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 8014f9c:	60be      	str	r6, [r7, #8]
    }
 8014f9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8014fa2:	461c      	mov	r4, r3
 8014fa4:	e7cf      	b.n	8014f46 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8014fa6:	4626      	mov	r6, r4
 8014fa8:	e7d1      	b.n	8014f4e <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
 8014faa:	bf00      	nop
 8014fac:	0801b17a 	.word	0x0801b17a

08014fb0 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 8014fb0:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8014fb2:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
      push_back(const value_type& __x)
 8014fb6:	4605      	mov	r5, r0
 8014fb8:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8014fba:	429c      	cmp	r4, r3
 8014fbc:	d005      	beq.n	8014fca <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE9push_backERKS1_+0x1a>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8014fbe:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 8014fc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8014fc4:	3410      	adds	r4, #16
 8014fc6:	606c      	str	r4, [r5, #4]
      }
 8014fc8:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
 8014fca:	4621      	mov	r1, r4
 8014fcc:	f7ff ff9c 	bl	8014f08 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8014fd0:	e7fa      	b.n	8014fc8 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE9push_backERKS1_+0x18>

08014fd2 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>:
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 8014fd2:	b570      	push	{r4, r5, r6, lr}
 8014fd4:	460c      	mov	r4, r1
 8014fd6:	b086      	sub	sp, #24
 8014fd8:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8014fda:	f04f 31ff 	mov.w	r1, #4294967295
 8014fde:	6800      	ldr	r0, [r0, #0]
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 8014fe0:	4616      	mov	r6, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8014fe2:	f7f7 faa7 	bl	800c534 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8014fe6:	4621      	mov	r1, r4
 8014fe8:	f10d 0207 	add.w	r2, sp, #7
 8014fec:	4628      	mov	r0, r5
 8014fee:	f003 f8ae 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8014ff2:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8014ff6:	4604      	mov	r4, r0
	if (!success) {
 8014ff8:	b923      	cbnz	r3, 8015004 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x32>
	osSemaphoreRelease(RegistersSemaphore);
 8014ffa:	6828      	ldr	r0, [r5, #0]
 8014ffc:	f7f7 face 	bl	800c59c <osSemaphoreRelease>
}
 8015000:	b006      	add	sp, #24
 8015002:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8015004:	f10d 0007 	add.w	r0, sp, #7
 8015008:	f7ff fc62 	bl	80148d0 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>
	if (!success) {
 801500c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8015010:	2b00      	cmp	r3, #0
 8015012:	d0f2      	beq.n	8014ffa <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x28>
	if (target_register->register_info.type != registered_type) {
 8015014:	7923      	ldrb	r3, [r4, #4]
 8015016:	4298      	cmp	r0, r3
 8015018:	d1ef      	bne.n	8014ffa <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x28>
	if (callbacks[target_register->register_info.type] == NULL) {
 801501a:	3004      	adds	r0, #4
 801501c:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8015020:	2800      	cmp	r0, #0
 8015022:	d0ea      	beq.n	8014ffa <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x28>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 8015024:	7823      	ldrb	r3, [r4, #0]
 8015026:	b983      	cbnz	r3, 801504a <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x78>
 8015028:	7863      	ldrb	r3, [r4, #1]
 801502a:	b973      	cbnz	r3, 801504a <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x78>
		target_callback_list->push_back(callback);
 801502c:	a902      	add	r1, sp, #8
		callback.pointer = pointer;
 801502e:	9602      	str	r6, [sp, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015030:	e9d0 2300 	ldrd	r2, r3, [r0]
 8015034:	1a9b      	subs	r3, r3, r2
 8015036:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8015038:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 801503a:	f7ff ffb9 	bl	8014fb0 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE9push_backERKS1_>
	target_register->mode.pointer = true;
 801503e:	2301      	movs	r3, #1
 8015040:	7023      	strb	r3, [r4, #0]
	target_register->access.write = true;
 8015042:	f240 1301 	movw	r3, #257	@ 0x101
 8015046:	8123      	strh	r3, [r4, #8]
 8015048:	e7d7      	b.n	8014ffa <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x28>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 801504a:	8961      	ldrh	r1, [r4, #10]
 801504c:	f7fa fb94 	bl	800f778 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE2atEj>
		callback->pointer = pointer;
 8015050:	6006      	str	r6, [r0, #0]
 8015052:	e7f4      	b.n	801503e <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x6c>

08015054 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8015054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015056:	460c      	mov	r4, r1
 8015058:	b087      	sub	sp, #28
 801505a:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801505c:	f04f 31ff 	mov.w	r1, #4294967295
 8015060:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8015062:	461e      	mov	r6, r3
 8015064:	4617      	mov	r7, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8015066:	f7f7 fa65 	bl	800c534 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801506a:	4621      	mov	r1, r4
 801506c:	f10d 0207 	add.w	r2, sp, #7
 8015070:	4628      	mov	r0, r5
 8015072:	f003 f86c 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8015076:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801507a:	4604      	mov	r4, r0
	if (!success) {
 801507c:	b923      	cbnz	r3, 8015088 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x34>
	osSemaphoreRelease(RegistersSemaphore);
 801507e:	6828      	ldr	r0, [r5, #0]
 8015080:	f7f7 fa8c 	bl	800c59c <osSemaphoreRelease>
}
 8015084:	b007      	add	sp, #28
 8015086:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8015088:	f10d 0007 	add.w	r0, sp, #7
 801508c:	f7ff fc20 	bl	80148d0 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>
	if (!success) {
 8015090:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8015094:	2b00      	cmp	r3, #0
 8015096:	d0f2      	beq.n	801507e <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (target_register->register_info.type != registered_type) {
 8015098:	7923      	ldrb	r3, [r4, #4]
 801509a:	4298      	cmp	r0, r3
 801509c:	d1ef      	bne.n	801507e <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (callbacks[target_register->register_info.type] == NULL) {
 801509e:	3004      	adds	r0, #4
 80150a0:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 80150a4:	2800      	cmp	r0, #0
 80150a6:	d0ea      	beq.n	801507e <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 80150a8:	7823      	ldrb	r3, [r4, #0]
 80150aa:	b983      	cbnz	r3, 80150ce <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
 80150ac:	7863      	ldrb	r3, [r4, #1]
 80150ae:	b973      	cbnz	r3, 80150ce <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
		callback.read = NULL;
 80150b0:	9305      	str	r3, [sp, #20]
		target_callback_list->push_back(callback);
 80150b2:	a902      	add	r1, sp, #8
 80150b4:	e9d0 2300 	ldrd	r2, r3, [r0]
		callback.write = write;
 80150b8:	e9cd 7603 	strd	r7, r6, [sp, #12]
 80150bc:	1a9b      	subs	r3, r3, r2
 80150be:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 80150c0:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 80150c2:	f7ff ff75 	bl	8014fb0 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE9push_backERKS1_>
	target_register->mode.callbacks = true;
 80150c6:	2301      	movs	r3, #1
 80150c8:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 80150ca:	7223      	strb	r3, [r4, #8]
 80150cc:	e7d7      	b.n	801507e <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 80150ce:	8961      	ldrh	r1, [r4, #10]
 80150d0:	f7fa fb52 	bl	800f778 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE2atEj>
		callback->write = write;
 80150d4:	e9c0 7601 	strd	r7, r6, [r0, #4]
 80150d8:	e7f5      	b.n	80150c6 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x72>
	...

080150dc <_ZN15MotionGenerator12AddRegistersEv>:
void MotionGenerator::AddRegisters(void) {
 80150dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150e0:	4604      	mov	r4, r0
 80150e2:	b086      	sub	sp, #24
	registers->AddRegister<uint8_t>(REG_GEN_CONFIGURE_MODULES);
 80150e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80150e8:	6800      	ldr	r0, [r0, #0]
	registers->SetRegisterAsSingle(REG_GEN_CONFIGURE_MODULES);
 80150ea:	4625      	mov	r5, r4
	registers->AddRegister<uint8_t>(REG_GEN_CONFIGURE_MODULES);
 80150ec:	f7ff fe01 	bl	8014cf2 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_GEN_CONFIGURE_MODULES);
 80150f0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
	registers->AddRegisterSemaphore(REG_GEN_SETPOINTS, &GeneratorSemaphore);
 80150f4:	4626      	mov	r6, r4
	registers->SetRegisterAsSingle(REG_GEN_CONFIGURE_MODULES);
 80150f6:	f855 0b10 	ldr.w	r0, [r5], #16
 80150fa:	f003 f861 	bl	80181c0 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_GEN_GENERATOR_STATUS, &GeneratorSemaphore);
 80150fe:	f240 4102 	movw	r1, #1026	@ 0x402
 8015102:	462a      	mov	r2, r5
 8015104:	6820      	ldr	r0, [r4, #0]
 8015106:	f003 f841 	bl	801818c <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddWriteCallback<uint8_t>(REG_GEN_CONFIGURE_MODULES, (void*) this,
 801510a:	4bc2      	ldr	r3, [pc, #776]	@ (8015414 <_ZN15MotionGenerator12AddRegistersEv+0x338>)
 801510c:	4622      	mov	r2, r4
 801510e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8015112:	6820      	ldr	r0, [r4, #0]
 8015114:	f7ff fe61 	bl	8014dda <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_GEN_MODULES_CONTROLLER_STATUS);
 8015118:	f240 4101 	movw	r1, #1025	@ 0x401
 801511c:	6820      	ldr	r0, [r4, #0]
 801511e:	f7ff fde8 	bl	8014cf2 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_GEN_MODULES_CONTROLLER_STATUS);
 8015122:	f240 4101 	movw	r1, #1025	@ 0x401
 8015126:	6820      	ldr	r0, [r4, #0]
 8015128:	f003 f84a 	bl	80181c0 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_GEN_GENERATOR_STATUS, &GeneratorSemaphore);
 801512c:	462a      	mov	r2, r5
 801512e:	f240 4102 	movw	r1, #1026	@ 0x402
 8015132:	6820      	ldr	r0, [r4, #0]
 8015134:	f003 f82a 	bl	801818c <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddWriteCallback<uint8_t>(REG_GEN_MODULES_CONTROLLER_STATUS, (void*) this,
 8015138:	4bb7      	ldr	r3, [pc, #732]	@ (8015418 <_ZN15MotionGenerator12AddRegistersEv+0x33c>)
 801513a:	4622      	mov	r2, r4
 801513c:	f240 4101 	movw	r1, #1025	@ 0x401
 8015140:	6820      	ldr	r0, [r4, #0]
 8015142:	f7ff fe4a 	bl	8014dda <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_GEN_GENERATOR_STATUS);
 8015146:	f240 4102 	movw	r1, #1026	@ 0x402
 801514a:	6820      	ldr	r0, [r4, #0]
 801514c:	f7ff fdd1 	bl	8014cf2 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_GEN_GENERATOR_STATUS);
 8015150:	f240 4102 	movw	r1, #1026	@ 0x402
 8015154:	6820      	ldr	r0, [r4, #0]
 8015156:	f003 f833 	bl	80181c0 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_GEN_GENERATOR_STATUS, &GeneratorSemaphore);
 801515a:	462a      	mov	r2, r5
 801515c:	f240 4102 	movw	r1, #1026	@ 0x402
 8015160:	6820      	ldr	r0, [r4, #0]
 8015162:	f003 f813 	bl	801818c <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddReadCallback<uint8_t>(REG_GEN_GENERATOR_STATUS, (void*) this,
 8015166:	4bad      	ldr	r3, [pc, #692]	@ (801541c <_ZN15MotionGenerator12AddRegistersEv+0x340>)
 8015168:	4622      	mov	r2, r4
 801516a:	f240 4102 	movw	r1, #1026	@ 0x402
 801516e:	6820      	ldr	r0, [r4, #0]
 8015170:	f7ff fdf0 	bl	8014d54 <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0>
	registers->AddWriteCallback<uint8_t>(REG_GEN_GENERATOR_STATUS, (void*) this,
 8015174:	4baa      	ldr	r3, [pc, #680]	@ (8015420 <_ZN15MotionGenerator12AddRegistersEv+0x344>)
 8015176:	4622      	mov	r2, r4
 8015178:	f240 4102 	movw	r1, #1026	@ 0x402
 801517c:	6820      	ldr	r0, [r4, #0]
 801517e:	f7ff fe2c 	bl	8014dda <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<float>(REG_GEN_SETPOINTS);
 8015182:	f240 4103 	movw	r1, #1027	@ 0x403
 8015186:	6820      	ldr	r0, [r4, #0]
 8015188:	f7ff fd82 	bl	8014c90 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsVector(REG_GEN_SETPOINTS);
 801518c:	f240 4103 	movw	r1, #1027	@ 0x403
 8015190:	6820      	ldr	r0, [r4, #0]
 8015192:	f003 f84d 	bl	8018230 <_ZN9Registers19SetRegisterAsVectorEt>
	registers->AddRegisterSemaphore(REG_GEN_SETPOINTS, &GeneratorSemaphore);
 8015196:	f856 0b50 	ldr.w	r0, [r6], #80
 801519a:	462a      	mov	r2, r5
 801519c:	f240 4103 	movw	r1, #1027	@ 0x403
 80151a0:	f002 fff4 	bl	801818c <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	return AddRegisterPointer(ID, reinterpreted_pointer);
 80151a4:	4632      	mov	r2, r6
 80151a6:	f240 4103 	movw	r1, #1027	@ 0x403
 80151aa:	6820      	ldr	r0, [r4, #0]
 80151ac:	f7ff ff11 	bl	8014fd2 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->SetRegisterPermissions(REG_GEN_SETPOINTS, READ_PERMISSION);
 80151b0:	2202      	movs	r2, #2
 80151b2:	f240 4103 	movw	r1, #1027	@ 0x403
 80151b6:	6820      	ldr	r0, [r4, #0]
 80151b8:	f003 f83d 	bl	8018236 <_ZN9Registers22SetRegisterPermissionsEth>
	registers->AddRegister<uint32_t>(REG_GEN_PERIOD);
 80151bc:	6826      	ldr	r6, [r4, #0]
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80151be:	f04f 31ff 	mov.w	r1, #4294967295
 80151c2:	6830      	ldr	r0, [r6, #0]
 80151c4:	f7f7 f9b6 	bl	800c534 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 80151c8:	f10d 0207 	add.w	r2, sp, #7
 80151cc:	f240 4104 	movw	r1, #1028	@ 0x404
 80151d0:	4630      	mov	r0, r6
 80151d2:	f002 ffbc 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 80151d6:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80151da:	2f00      	cmp	r7, #0
 80151dc:	f000 8100 	beq.w	80153e0 <_ZN15MotionGenerator12AddRegistersEv+0x304>
	osSemaphoreRelease(RegistersSemaphore);
 80151e0:	6830      	ldr	r0, [r6, #0]
 80151e2:	f7f7 f9db 	bl	800c59c <osSemaphoreRelease>
	registers->SetRegisterAsSingle(REG_GEN_PERIOD);
 80151e6:	f240 4104 	movw	r1, #1028	@ 0x404
 80151ea:	6820      	ldr	r0, [r4, #0]
 80151ec:	f002 ffe8 	bl	80181c0 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_GEN_PERIOD, &GeneratorSemaphore);
 80151f0:	462a      	mov	r2, r5
 80151f2:	f240 4104 	movw	r1, #1028	@ 0x404
 80151f6:	6820      	ldr	r0, [r4, #0]
 80151f8:	f002 ffc8 	bl	801818c <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<uint32_t>(REG_GEN_PERIOD, &period_ms);
 80151fc:	f8d4 8000 	ldr.w	r8, [r4]
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8015200:	f04f 31ff 	mov.w	r1, #4294967295
 8015204:	f8d8 0000 	ldr.w	r0, [r8]
 8015208:	f7f7 f994 	bl	800c534 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801520c:	f10d 0207 	add.w	r2, sp, #7
 8015210:	f240 4104 	movw	r1, #1028	@ 0x404
 8015214:	4640      	mov	r0, r8
 8015216:	f002 ff9a 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801521a:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801521e:	4606      	mov	r6, r0
	if (!success) {
 8015220:	2b00      	cmp	r3, #0
 8015222:	f040 810d 	bne.w	8015440 <_ZN15MotionGenerator12AddRegistersEv+0x364>
	osSemaphoreRelease(RegistersSemaphore);
 8015226:	f8d8 0000 	ldr.w	r0, [r8]
	registers->AddRegisterSemaphore(REG_GEN_MODULE_LENGTH, &GeneratorSemaphore);
 801522a:	4626      	mov	r6, r4
 801522c:	f7f7 f9b6 	bl	800c59c <osSemaphoreRelease>
	registers->AddRegister<uint8_t>(REG_GEN_NB_MODULES);
 8015230:	6820      	ldr	r0, [r4, #0]
 8015232:	f240 4105 	movw	r1, #1029	@ 0x405
 8015236:	f7ff fd5c 	bl	8014cf2 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_GEN_NB_MODULES);
 801523a:	f240 4105 	movw	r1, #1029	@ 0x405
 801523e:	6820      	ldr	r0, [r4, #0]
 8015240:	f002 ffbe 	bl	80181c0 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddReadCallback<uint8_t>(REG_GEN_NB_MODULES, (void*) this,
 8015244:	4622      	mov	r2, r4
 8015246:	6820      	ldr	r0, [r4, #0]
 8015248:	f240 4105 	movw	r1, #1029	@ 0x405
 801524c:	4b75      	ldr	r3, [pc, #468]	@ (8015424 <_ZN15MotionGenerator12AddRegistersEv+0x348>)
 801524e:	f7ff fd81 	bl	8014d54 <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0>
	registers->AddWriteCallback<uint8_t>(REG_GEN_NB_MODULES, (void*) this,
 8015252:	4b75      	ldr	r3, [pc, #468]	@ (8015428 <_ZN15MotionGenerator12AddRegistersEv+0x34c>)
 8015254:	4622      	mov	r2, r4
 8015256:	6820      	ldr	r0, [r4, #0]
 8015258:	f240 4105 	movw	r1, #1029	@ 0x405
 801525c:	f7ff fdbd 	bl	8014dda <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<float>(REG_GEN_GENERATOR_OFFSET);
 8015260:	6820      	ldr	r0, [r4, #0]
 8015262:	f240 4106 	movw	r1, #1030	@ 0x406
 8015266:	f7ff fd13 	bl	8014c90 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsArray(REG_GEN_GENERATOR_OFFSET, 2);
 801526a:	2202      	movs	r2, #2
 801526c:	f240 4106 	movw	r1, #1030	@ 0x406
 8015270:	6820      	ldr	r0, [r4, #0]
 8015272:	f002 ffc1 	bl	80181f8 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<float>(REG_GEN_GENERATOR_OFFSET, (void*) this,
 8015276:	4622      	mov	r2, r4
 8015278:	4b6c      	ldr	r3, [pc, #432]	@ (801542c <_ZN15MotionGenerator12AddRegistersEv+0x350>)
 801527a:	f240 4106 	movw	r1, #1030	@ 0x406
 801527e:	6820      	ldr	r0, [r4, #0]
 8015280:	f7ff fee8 	bl	8015054 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_GEN_RESET_GENERATOR_OFFSETS);
 8015284:	6820      	ldr	r0, [r4, #0]
 8015286:	f240 4107 	movw	r1, #1031	@ 0x407
 801528a:	f7ff fd32 	bl	8014cf2 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_GEN_RESET_GENERATOR_OFFSETS);
 801528e:	f240 4107 	movw	r1, #1031	@ 0x407
 8015292:	6820      	ldr	r0, [r4, #0]
 8015294:	f002 ff94 	bl	80181c0 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_GEN_RESET_GENERATOR_OFFSETS, (void*) this,
 8015298:	4b65      	ldr	r3, [pc, #404]	@ (8015430 <_ZN15MotionGenerator12AddRegistersEv+0x354>)
 801529a:	4622      	mov	r2, r4
 801529c:	6820      	ldr	r0, [r4, #0]
 801529e:	f240 4107 	movw	r1, #1031	@ 0x407
 80152a2:	f7ff fd9a 	bl	8014dda <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<float>(REG_GEN_POSITION_OFFSET);
 80152a6:	6820      	ldr	r0, [r4, #0]
 80152a8:	f44f 6181 	mov.w	r1, #1032	@ 0x408
 80152ac:	f7ff fcf0 	bl	8014c90 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsArray(REG_GEN_POSITION_OFFSET, 2);
 80152b0:	2202      	movs	r2, #2
 80152b2:	f44f 6181 	mov.w	r1, #1032	@ 0x408
 80152b6:	6820      	ldr	r0, [r4, #0]
 80152b8:	f002 ff9e 	bl	80181f8 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<float>(REG_GEN_POSITION_OFFSET, (void*) this,
 80152bc:	4622      	mov	r2, r4
 80152be:	4b5d      	ldr	r3, [pc, #372]	@ (8015434 <_ZN15MotionGenerator12AddRegistersEv+0x358>)
 80152c0:	f44f 6181 	mov.w	r1, #1032	@ 0x408
 80152c4:	6820      	ldr	r0, [r4, #0]
 80152c6:	f7ff fec5 	bl	8015054 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_GEN_RESET_POSITION_OFFSETS);
 80152ca:	6820      	ldr	r0, [r4, #0]
 80152cc:	f240 4109 	movw	r1, #1033	@ 0x409
 80152d0:	f7ff fd0f 	bl	8014cf2 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_GEN_RESET_POSITION_OFFSETS);
 80152d4:	f240 4109 	movw	r1, #1033	@ 0x409
 80152d8:	6820      	ldr	r0, [r4, #0]
 80152da:	f002 ff71 	bl	80181c0 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_GEN_RESET_POSITION_OFFSETS, (void*) this,
 80152de:	4b56      	ldr	r3, [pc, #344]	@ (8015438 <_ZN15MotionGenerator12AddRegistersEv+0x35c>)
 80152e0:	4622      	mov	r2, r4
 80152e2:	6820      	ldr	r0, [r4, #0]
 80152e4:	f240 4109 	movw	r1, #1033	@ 0x409
 80152e8:	f7ff fd77 	bl	8014dda <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<float>(REG_GEN_MODULE_LENGTH);
 80152ec:	6820      	ldr	r0, [r4, #0]
 80152ee:	f240 410a 	movw	r1, #1034	@ 0x40a
 80152f2:	f7ff fccd 	bl	8014c90 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_GEN_MODULE_LENGTH);
 80152f6:	f240 410a 	movw	r1, #1034	@ 0x40a
 80152fa:	6820      	ldr	r0, [r4, #0]
 80152fc:	f002 ff60 	bl	80181c0 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_GEN_MODULE_LENGTH, &GeneratorSemaphore);
 8015300:	f856 0b20 	ldr.w	r0, [r6], #32
 8015304:	462a      	mov	r2, r5
 8015306:	f240 410a 	movw	r1, #1034	@ 0x40a
 801530a:	f002 ff3f 	bl	801818c <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_GEN_MODULE_LENGTH, &module_length);
 801530e:	4632      	mov	r2, r6
 8015310:	6820      	ldr	r0, [r4, #0]
 8015312:	f240 410a 	movw	r1, #1034	@ 0x40a
 8015316:	f7ff fe5c 	bl	8014fd2 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->AddRegisterSemaphore(REG_GEN_AMPLITUDE, &GeneratorSemaphore);
 801531a:	4626      	mov	r6, r4
	registers->AddRegister<float>(REG_GEN_AMPLITUDE);
 801531c:	6820      	ldr	r0, [r4, #0]
 801531e:	f240 410b 	movw	r1, #1035	@ 0x40b
 8015322:	f7ff fcb5 	bl	8014c90 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_GEN_AMPLITUDE);
 8015326:	f240 410b 	movw	r1, #1035	@ 0x40b
 801532a:	6820      	ldr	r0, [r4, #0]
 801532c:	f002 ff48 	bl	80181c0 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_GEN_AMPLITUDE, &GeneratorSemaphore);
 8015330:	f856 0b3c 	ldr.w	r0, [r6], #60
 8015334:	462a      	mov	r2, r5
 8015336:	f240 410b 	movw	r1, #1035	@ 0x40b
 801533a:	f002 ff27 	bl	801818c <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_GEN_AMPLITUDE, &amplitude);
 801533e:	4632      	mov	r2, r6
 8015340:	6820      	ldr	r0, [r4, #0]
 8015342:	f240 410b 	movw	r1, #1035	@ 0x40b
 8015346:	f7ff fe44 	bl	8014fd2 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->AddRegisterSemaphore(REG_GEN_FREQUENCY, &GeneratorSemaphore);
 801534a:	4626      	mov	r6, r4
	registers->AddRegister<float>(REG_GEN_FREQUENCY);
 801534c:	6820      	ldr	r0, [r4, #0]
 801534e:	f240 410c 	movw	r1, #1036	@ 0x40c
 8015352:	f7ff fc9d 	bl	8014c90 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_GEN_FREQUENCY);
 8015356:	f240 410c 	movw	r1, #1036	@ 0x40c
 801535a:	6820      	ldr	r0, [r4, #0]
 801535c:	f002 ff30 	bl	80181c0 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_GEN_FREQUENCY, &GeneratorSemaphore);
 8015360:	f856 0b40 	ldr.w	r0, [r6], #64
 8015364:	462a      	mov	r2, r5
 8015366:	f240 410c 	movw	r1, #1036	@ 0x40c
 801536a:	f002 ff0f 	bl	801818c <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_GEN_FREQUENCY, &frequency);
 801536e:	4632      	mov	r2, r6
 8015370:	6820      	ldr	r0, [r4, #0]
 8015372:	f240 410c 	movw	r1, #1036	@ 0x40c
 8015376:	f7ff fe2c 	bl	8014fd2 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->AddRegisterSemaphore(REG_GEN_WAVELENGTH_INVERSE, &GeneratorSemaphore);
 801537a:	4626      	mov	r6, r4
	registers->AddRegister<float>(REG_GEN_WAVELENGTH_INVERSE);
 801537c:	6820      	ldr	r0, [r4, #0]
 801537e:	f240 410d 	movw	r1, #1037	@ 0x40d
 8015382:	f7ff fc85 	bl	8014c90 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_GEN_WAVELENGTH_INVERSE);
 8015386:	f240 410d 	movw	r1, #1037	@ 0x40d
 801538a:	6820      	ldr	r0, [r4, #0]
 801538c:	f002 ff18 	bl	80181c0 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_GEN_WAVELENGTH_INVERSE, &GeneratorSemaphore);
 8015390:	f856 0b44 	ldr.w	r0, [r6], #68
 8015394:	462a      	mov	r2, r5
 8015396:	f240 410d 	movw	r1, #1037	@ 0x40d
 801539a:	f002 fef7 	bl	801818c <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_GEN_WAVELENGTH_INVERSE, &wavelength_inverse);
 801539e:	4632      	mov	r2, r6
 80153a0:	6820      	ldr	r0, [r4, #0]
 80153a2:	f240 410d 	movw	r1, #1037	@ 0x40d
 80153a6:	f7ff fe14 	bl	8014fd2 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->AddRegister<float>(REG_GEN_PHASE);
 80153aa:	6820      	ldr	r0, [r4, #0]
 80153ac:	f240 410e 	movw	r1, #1038	@ 0x40e
 80153b0:	f7ff fc6e 	bl	8014c90 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_GEN_PHASE);
 80153b4:	f240 410e 	movw	r1, #1038	@ 0x40e
 80153b8:	6820      	ldr	r0, [r4, #0]
 80153ba:	f002 ff01 	bl	80181c0 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_GEN_PHASE, &GeneratorSemaphore);
 80153be:	462a      	mov	r2, r5
 80153c0:	4625      	mov	r5, r4
 80153c2:	f240 410e 	movw	r1, #1038	@ 0x40e
 80153c6:	f855 0b48 	ldr.w	r0, [r5], #72
 80153ca:	f002 fedf 	bl	801818c <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_GEN_PHASE, &phase);
 80153ce:	f240 410e 	movw	r1, #1038	@ 0x40e
 80153d2:	462a      	mov	r2, r5
 80153d4:	6820      	ldr	r0, [r4, #0]
}
 80153d6:	b006      	add	sp, #24
 80153d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	registers->AddRegisterPointer<float>(REG_GEN_PHASE, &phase);
 80153dc:	f7ff bdf9 	b.w	8014fd2 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 80153e0:	f10d 0007 	add.w	r0, sp, #7
 80153e4:	f7ff fa12 	bl	801480c <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	configuration_.mode = mode;
 80153e8:	4b14      	ldr	r3, [pc, #80]	@ (801543c <_ZN15MotionGenerator12AddRegistersEv+0x360>)
	configuration_.register_info = register_;
 80153ea:	f88d 000c 	strb.w	r0, [sp, #12]
	configuration_.mode = mode;
 80153ee:	9302      	str	r3, [sp, #8]
	configuration_.register_info = register_;
 80153f0:	2301      	movs	r3, #1
 80153f2:	f88d 700d 	strb.w	r7, [sp, #13]
 80153f6:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 80153fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_semaphore = NULL;
 80153fe:	e9cd 7704 	strd	r7, r7, [sp, #16]
	if (success) {
 8015402:	2b00      	cmp	r3, #0
 8015404:	f43f aeec 	beq.w	80151e0 <_ZN15MotionGenerator12AddRegistersEv+0x104>
		registers.push_back(configuration_);
 8015408:	a902      	add	r1, sp, #8
 801540a:	1d30      	adds	r0, r6, #4
 801540c:	f7ff fc2f 	bl	8014c6e <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 8015410:	e6e6      	b.n	80151e0 <_ZN15MotionGenerator12AddRegistersEv+0x104>
 8015412:	bf00      	nop
 8015414:	0801478d 	.word	0x0801478d
 8015418:	08014797 	.word	0x08014797
 801541c:	080147d1 	.word	0x080147d1
 8015420:	0801568d 	.word	0x0801568d
 8015424:	080147ab 	.word	0x080147ab
 8015428:	080155d9 	.word	0x080155d9
 801542c:	08014af3 	.word	0x08014af3
 8015430:	08014a59 	.word	0x08014a59
 8015434:	08014b81 	.word	0x08014b81
 8015438:	08014a6b 	.word	0x08014a6b
 801543c:	04040000 	.word	0x04040000
	uint8_t registered_type = GetTypeID<T>(&success);
 8015440:	f10d 0007 	add.w	r0, sp, #7
 8015444:	f7ff f9e2 	bl	801480c <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	if (!success) {
 8015448:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801544c:	2b00      	cmp	r3, #0
 801544e:	f43f aeea 	beq.w	8015226 <_ZN15MotionGenerator12AddRegistersEv+0x14a>
	if (target_register->register_info.type != registered_type) {
 8015452:	7933      	ldrb	r3, [r6, #4]
 8015454:	4298      	cmp	r0, r3
 8015456:	f47f aee6 	bne.w	8015226 <_ZN15MotionGenerator12AddRegistersEv+0x14a>
	if (callbacks[target_register->register_info.type] == NULL) {
 801545a:	3004      	adds	r0, #4
 801545c:	f858 c020 	ldr.w	ip, [r8, r0, lsl #2]
 8015460:	f1bc 0f00 	cmp.w	ip, #0
 8015464:	f43f aedf 	beq.w	8015226 <_ZN15MotionGenerator12AddRegistersEv+0x14a>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 8015468:	7831      	ldrb	r1, [r6, #0]
	registers->AddRegisterPointer<uint32_t>(REG_GEN_PERIOD, &period_ms);
 801546a:	f104 0018 	add.w	r0, r4, #24
 801546e:	e9dc 3700 	ldrd	r3, r7, [ip]
 8015472:	1afa      	subs	r2, r7, r3
 8015474:	1112      	asrs	r2, r2, #4
 8015476:	b9c1      	cbnz	r1, 80154aa <_ZN15MotionGenerator12AddRegistersEv+0x3ce>
 8015478:	7871      	ldrb	r1, [r6, #1]
 801547a:	b9b1      	cbnz	r1, 80154aa <_ZN15MotionGenerator12AddRegistersEv+0x3ce>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801547c:	f8dc 1008 	ldr.w	r1, [ip, #8]
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8015480:	8172      	strh	r2, [r6, #10]
 8015482:	aa02      	add	r2, sp, #8
 8015484:	42b9      	cmp	r1, r7
		callback.pointer = pointer;
 8015486:	9002      	str	r0, [sp, #8]
 8015488:	d00b      	beq.n	80154a2 <_ZN15MotionGenerator12AddRegistersEv+0x3c6>
 801548a:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 801548c:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8015490:	3710      	adds	r7, #16
 8015492:	f8cc 7004 	str.w	r7, [ip, #4]
	target_register->mode.pointer = true;
 8015496:	2301      	movs	r3, #1
 8015498:	7033      	strb	r3, [r6, #0]
	target_register->access.write = true;
 801549a:	f240 1301 	movw	r3, #257	@ 0x101
 801549e:	8133      	strh	r3, [r6, #8]
 80154a0:	e6c1      	b.n	8015226 <_ZN15MotionGenerator12AddRegistersEv+0x14a>
	  _M_realloc_insert(end(), __x);
 80154a2:	4660      	mov	r0, ip
 80154a4:	f7ff fcdc 	bl	8014e60 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	} else {
 80154a8:	e7f5      	b.n	8015496 <_ZN15MotionGenerator12AddRegistersEv+0x3ba>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 80154aa:	8971      	ldrh	r1, [r6, #10]
	if (__n >= this->size())
 80154ac:	4291      	cmp	r1, r2
 80154ae:	d302      	bcc.n	80154b6 <_ZN15MotionGenerator12AddRegistersEv+0x3da>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 80154b0:	4802      	ldr	r0, [pc, #8]	@ (80154bc <_ZN15MotionGenerator12AddRegistersEv+0x3e0>)
 80154b2:	f005 fa5c 	bl	801a96e <_ZSt24__throw_out_of_range_fmtPKcz>
		callback->pointer = pointer;
 80154b6:	0109      	lsls	r1, r1, #4
 80154b8:	5058      	str	r0, [r3, r1]
 80154ba:	e7ec      	b.n	8015496 <_ZN15MotionGenerator12AddRegistersEv+0x3ba>
 80154bc:	0801b3bc 	.word	0x0801b3bc

080154c0 <_ZNSt6vectorIfSaIfEE6resizeEj>:
      resize(size_type __new_size)
 80154c0:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80154c2:	e9d0 2500 	ldrd	r2, r5, [r0]
 80154c6:	1aac      	subs	r4, r5, r2
 80154c8:	10a4      	asrs	r4, r4, #2
	if (__new_size > size())
 80154ca:	42a1      	cmp	r1, r4
 80154cc:	d903      	bls.n	80154d6 <_ZNSt6vectorIfSaIfEE6resizeEj+0x16>
	  _M_default_append(__new_size - size());
 80154ce:	1b09      	subs	r1, r1, r4
 80154d0:	f7fd fd04 	bl	8012edc <_ZNSt6vectorIfSaIfEE17_M_default_appendEj>
      }
 80154d4:	bd38      	pop	{r3, r4, r5, pc}
	else if (__new_size < size())
 80154d6:	d2fd      	bcs.n	80154d4 <_ZNSt6vectorIfSaIfEE6resizeEj+0x14>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 80154d8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	if (size_type __n = this->_M_impl._M_finish - __pos)
 80154dc:	42aa      	cmp	r2, r5
	    this->_M_impl._M_finish = __pos;
 80154de:	bf18      	it	ne
 80154e0:	6042      	strne	r2, [r0, #4]
      }
 80154e2:	e7f7      	b.n	80154d4 <_ZNSt6vectorIfSaIfEE6resizeEj+0x14>

080154e4 <_ZN15MotionGenerator18SetNumberOfModulesEh>:
bool MotionGenerator::SetNumberOfModules(uint8_t nb_modules) {
 80154e4:	b570      	push	{r4, r5, r6, lr}
 80154e6:	4604      	mov	r4, r0
 80154e8:	460e      	mov	r6, r1
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 80154ea:	6900      	ldr	r0, [r0, #16]
 80154ec:	f04f 31ff 	mov.w	r1, #4294967295
 80154f0:	f7f7 f820 	bl	800c534 <osSemaphoreAcquire>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80154f4:	4620      	mov	r0, r4
 80154f6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
	generator_offsets.resize(nb_modules);
 80154f8:	4631      	mov	r1, r6
	number_of_modules = nb_modules;
 80154fa:	7726      	strb	r6, [r4, #28]
 80154fc:	f850 2f24 	ldr.w	r2, [r0, #36]!
 8015500:	1a9b      	subs	r3, r3, r2
 8015502:	109d      	asrs	r5, r3, #2
	generator_offsets.resize(nb_modules);
 8015504:	f7ff ffdc 	bl	80154c0 <_ZNSt6vectorIfSaIfEE6resizeEj>
      { return __normal_iterator(_M_current + __n); }
 8015508:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 801550a:	b2ed      	uxtb	r5, r5
	*__first = __tmp;
 801550c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801550e:	2100      	movs	r1, #0
 8015510:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 8015514:	1a12      	subs	r2, r2, r0
 8015516:	f005 fcc3 	bl	801aea0 <memset>
 801551a:	4620      	mov	r0, r4
 801551c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
	position_offsets.resize(nb_modules);
 801551e:	4631      	mov	r1, r6
 8015520:	f850 2f30 	ldr.w	r2, [r0, #48]!
 8015524:	1a9b      	subs	r3, r3, r2
 8015526:	109d      	asrs	r5, r3, #2
 8015528:	f7ff ffca 	bl	80154c0 <_ZNSt6vectorIfSaIfEE6resizeEj>
 801552c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801552e:	b2ed      	uxtb	r5, r5
 8015530:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8015532:	2100      	movs	r1, #0
 8015534:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 8015538:	1a12      	subs	r2, r2, r0
 801553a:	f005 fcb1 	bl	801aea0 <memset>
	osSemaphoreRelease(GeneratorSemaphore);
 801553e:	6920      	ldr	r0, [r4, #16]
 8015540:	f7f7 f82c 	bl	800c59c <osSemaphoreRelease>
}
 8015544:	2001      	movs	r0, #1
 8015546:	bd70      	pop	{r4, r5, r6, pc}

08015548 <_ZN15MotionGenerator4InitEP9RegistersP10PublishersP8ServicesP4LEDS>:
void MotionGenerator::Init(Registers* registers_, Publishers* publishers_, Services* services_, LEDS* leds_) {
 8015548:	b538      	push	{r3, r4, r5, lr}
	publishers = publishers_;
 801554a:	e9c0 1200 	strd	r1, r2, [r0]
	services = services_;
 801554e:	6083      	str	r3, [r0, #8]
	GeneratorSemaphore = osSemaphoreNew(1,1,NULL);
 8015550:	2101      	movs	r1, #1
	leds = leds_;
 8015552:	9b04      	ldr	r3, [sp, #16]
void MotionGenerator::Init(Registers* registers_, Publishers* publishers_, Services* services_, LEDS* leds_) {
 8015554:	4604      	mov	r4, r0
	GeneratorSemaphore = osSemaphoreNew(1,1,NULL);
 8015556:	2200      	movs	r2, #0
	GeneratorInterface = ServiceInterface{.interface=GENERATOR_INTERFACE};
 8015558:	2500      	movs	r5, #0
	leds = leds_;
 801555a:	60c3      	str	r3, [r0, #12]
	GeneratorSemaphore = osSemaphoreNew(1,1,NULL);
 801555c:	4608      	mov	r0, r1
 801555e:	f7f6 ff8d 	bl	800c47c <osSemaphoreNew>
 8015562:	6120      	str	r0, [r4, #16]
	osSemaphoreRelease(GeneratorSemaphore);
 8015564:	f7f7 f81a 	bl	800c59c <osSemaphoreRelease>
	MoveToRegister = Register{.address=REG_MOTOR_MOVETO, .type=FLOAT_TYPE, .isArray=false, .length=1};
 8015568:	4b18      	ldr	r3, [pc, #96]	@ (80155cc <_ZN15MotionGenerator4InitEP9RegistersP10PublishersP8ServicesP4LEDS+0x84>)
	SetGeneratorPeriod(DEFAULT_GENERATOR_PERIOD);
 801556a:	210a      	movs	r1, #10
	GeneratorInterface = ServiceInterface{.interface=GENERATOR_INTERFACE};
 801556c:	f8a4 5062 	strh.w	r5, [r4, #98]	@ 0x62
	MoveToRegister = Register{.address=REG_MOTOR_MOVETO, .type=FLOAT_TYPE, .isArray=false, .length=1};
 8015570:	6818      	ldr	r0, [r3, #0]
 8015572:	889b      	ldrh	r3, [r3, #4]
 8015574:	65e0      	str	r0, [r4, #92]	@ 0x5c
	SetGeneratorPeriod(DEFAULT_GENERATOR_PERIOD);
 8015576:	4620      	mov	r0, r4
	MoveToRegister = Register{.address=REG_MOTOR_MOVETO, .type=FLOAT_TYPE, .isArray=false, .length=1};
 8015578:	f8a4 3060 	strh.w	r3, [r4, #96]	@ 0x60
	SetGeneratorPeriod(DEFAULT_GENERATOR_PERIOD);
 801557c:	f7ff fa89 	bl	8014a92 <_ZN15MotionGenerator18SetGeneratorPeriodEm>
	SetNumberOfModules(DEFAULT_GENERATOR_NB_NODULES);
 8015580:	4629      	mov	r1, r5
 8015582:	4620      	mov	r0, r4
 8015584:	f7ff ffae 	bl	80154e4 <_ZN15MotionGenerator18SetNumberOfModulesEh>
	ResetGeneratorOffsets();
 8015588:	4620      	mov	r0, r4
 801558a:	f7ff fac5 	bl	8014b18 <_ZN15MotionGenerator21ResetGeneratorOffsetsEv>
	SetModuleLength(DEFAULT_MODULE_LENGTH);
 801558e:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 80155d0 <_ZN15MotionGenerator4InitEP9RegistersP10PublishersP8ServicesP4LEDS+0x88>
 8015592:	4620      	mov	r0, r4
 8015594:	f7ff fb07 	bl	8014ba6 <_ZN15MotionGenerator15SetModuleLengthEf>
	SetGeneratorAmplitude(DEFAULT_GENERATOR_AMPLITUDE);
 8015598:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 801559c:	4620      	mov	r0, r4
 801559e:	f7ff fb16 	bl	8014bce <_ZN15MotionGenerator21SetGeneratorAmplitudeEf>
	SetGeneratorFrequency(DEFAULT_GENERATOR_FREQUENCY);
 80155a2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80155a6:	4620      	mov	r0, r4
 80155a8:	f7ff fb25 	bl	8014bf6 <_ZN15MotionGenerator21SetGeneratorFrequencyEf>
	SetGeneratorWavelengthInverse(1 / DEFAULT_GENERATOR_WAVELENGTH);
 80155ac:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80155b0:	4620      	mov	r0, r4
 80155b2:	f7ff fb34 	bl	8014c1e <_ZN15MotionGenerator29SetGeneratorWavelengthInverseEf>
	SetGeneratorPhase(DEFAULT_GENERATOR_PHASE);
 80155b6:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 80155d4 <_ZN15MotionGenerator4InitEP9RegistersP10PublishersP8ServicesP4LEDS+0x8c>
 80155ba:	4620      	mov	r0, r4
 80155bc:	f7ff fb43 	bl	8014c46 <_ZN15MotionGenerator17SetGeneratorPhaseEf>
	request_module_configuration = false;
 80155c0:	f8a4 5064 	strh.w	r5, [r4, #100]	@ 0x64
	request_module_controller_deactivation = false;
 80155c4:	f884 5066 	strb.w	r5, [r4, #102]	@ 0x66
}
 80155c8:	bd38      	pop	{r3, r4, r5, pc}
 80155ca:	bf00      	nop
 80155cc:	0801b174 	.word	0x0801b174
 80155d0:	3dfbe76d 	.word	0x3dfbe76d
 80155d4:	00000000 	.word	0x00000000

080155d8 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE4_4_FUNES0_tS1_t>:
			return self->SetNumberOfModules(*input);
 80155d8:	7811      	ldrb	r1, [r2, #0]
 80155da:	f7ff bf83 	b.w	80154e4 <_ZN15MotionGenerator18SetNumberOfModulesEh>
	...

080155e0 <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag.isra.0>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 80155e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 80155e2:	1a57      	subs	r7, r2, r1
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 80155e4:	4604      	mov	r4, r0
 80155e6:	460d      	mov	r5, r1
 80155e8:	4616      	mov	r6, r2
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 80155ea:	d502      	bpl.n	80155f2 <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag.isra.0+0x12>
	  __throw_length_error(
 80155ec:	4807      	ldr	r0, [pc, #28]	@ (801560c <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag.isra.0+0x2c>)
 80155ee:	f005 f9bb 	bl	801a968 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80155f2:	4638      	mov	r0, r7
 80155f4:	f7ff f8ff 	bl	80147f6 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80155f8:	4407      	add	r7, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80155fa:	4602      	mov	r2, r0
 80155fc:	6020      	str	r0, [r4, #0]
			      _Category>::__copy_m(__first, __last, __result);
 80155fe:	4631      	mov	r1, r6
 8015600:	4628      	mov	r0, r5
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8015602:	60a7      	str	r7, [r4, #8]
 8015604:	f7eb fbaa 	bl	8000d5c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	  this->_M_impl._M_finish =
 8015608:	6060      	str	r0, [r4, #4]
	}
 801560a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801560c:	0801b194 	.word	0x0801b194

08015610 <_ZN15MotionGenerator18SetGeneratorStatusEb>:
bool MotionGenerator::SetGeneratorStatus(bool status) {
 8015610:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8015612:	460d      	mov	r5, r1
 8015614:	4604      	mov	r4, r0
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 8015616:	f04f 31ff 	mov.w	r1, #4294967295
 801561a:	6900      	ldr	r0, [r0, #16]
 801561c:	f7f6 ff8a 	bl	800c534 <osSemaphoreAcquire>
	if (status) {
 8015620:	b30d      	cbz	r5, 8015666 <_ZN15MotionGenerator18SetGeneratorStatusEb+0x56>
		leds->ConfigureTimings(LED_ACTIVITY, std::vector<uint8_t>{1}, 10);
 8015622:	2301      	movs	r3, #1
 8015624:	68e6      	ldr	r6, [r4, #12]
	_M_range_initialize(__l.begin(), __l.end(),
 8015626:	f10d 0201 	add.w	r2, sp, #1
 801562a:	4669      	mov	r1, sp
 801562c:	f88d 3000 	strb.w	r3, [sp]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8015630:	2300      	movs	r3, #0
	_M_range_initialize(__l.begin(), __l.end(),
 8015632:	a801      	add	r0, sp, #4
	: _M_start(), _M_finish(), _M_end_of_storage()
 8015634:	9303      	str	r3, [sp, #12]
 8015636:	e9cd 3301 	strd	r3, r3, [sp, #4]
	_M_range_initialize(__l.begin(), __l.end(),
 801563a:	f7ff ffd1 	bl	80155e0 <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag.isra.0>
 801563e:	2108      	movs	r1, #8
 8015640:	230a      	movs	r3, #10
 8015642:	aa01      	add	r2, sp, #4
 8015644:	4630      	mov	r0, r6
 8015646:	f7ff f814 	bl	8014672 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
      }
 801564a:	a801      	add	r0, sp, #4
 801564c:	f7eb fae2 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		leds->Blink(LED_ACTIVITY);
 8015650:	2108      	movs	r1, #8
 8015652:	68e0      	ldr	r0, [r4, #12]
 8015654:	f7fe fab7 	bl	8013bc6 <_ZN4LEDS5BlinkEh>
	osSemaphoreRelease(GeneratorSemaphore);
 8015658:	6920      	ldr	r0, [r4, #16]
	active = status;
 801565a:	7525      	strb	r5, [r4, #20]
	osSemaphoreRelease(GeneratorSemaphore);
 801565c:	f7f6 ff9e 	bl	800c59c <osSemaphoreRelease>
}
 8015660:	2001      	movs	r0, #1
 8015662:	b004      	add	sp, #16
 8015664:	bd70      	pop	{r4, r5, r6, pc}
		leds->ClearLED(LED_ACTIVITY);
 8015666:	2108      	movs	r1, #8
 8015668:	68e0      	ldr	r0, [r4, #12]
 801566a:	f7fe fc8c 	bl	8013f86 <_ZN4LEDS8ClearLEDEh>
 801566e:	e7f3      	b.n	8015658 <_ZN15MotionGenerator18SetGeneratorStatusEb+0x48>

08015670 <_ZN15MotionGenerator17ActivateGeneratorEv>:
bool MotionGenerator::ActivateGenerator(void) {
 8015670:	b510      	push	{r4, lr}
 8015672:	4604      	mov	r4, r0
	start_time = HAL_GetTick();
 8015674:	f7ed ff02 	bl	800347c <HAL_GetTick>
	return SetGeneratorStatus(true);
 8015678:	2101      	movs	r1, #1
	start_time = HAL_GetTick();
 801567a:	64e0      	str	r0, [r4, #76]	@ 0x4c
	return SetGeneratorStatus(true);
 801567c:	4620      	mov	r0, r4
}
 801567e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return SetGeneratorStatus(true);
 8015682:	f7ff bfc5 	b.w	8015610 <_ZN15MotionGenerator18SetGeneratorStatusEb>

08015686 <_ZN15MotionGenerator19DeactivateGeneratorEv>:
	return SetGeneratorStatus(false);
 8015686:	2100      	movs	r1, #0
 8015688:	f7ff bfc2 	b.w	8015610 <_ZN15MotionGenerator18SetGeneratorStatusEb>

0801568c <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE2_4_FUNES0_tS1_t>:
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 801568c:	b508      	push	{r3, lr}
			if (*input > 0)
 801568e:	7813      	ldrb	r3, [r2, #0]
 8015690:	b11b      	cbz	r3, 801569a <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE2_4_FUNES0_tS1_t+0xe>
				self->ActivateGenerator();
 8015692:	f7ff ffed 	bl	8015670 <_ZN15MotionGenerator17ActivateGeneratorEv>
		}
 8015696:	2001      	movs	r0, #1
 8015698:	bd08      	pop	{r3, pc}
				self->DeactivateGenerator();
 801569a:	f7ff fff4 	bl	8015686 <_ZN15MotionGenerator19DeactivateGeneratorEv>
 801569e:	e7fa      	b.n	8015696 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE2_4_FUNES0_tS1_t+0xa>

080156a0 <_ZN21CommunicationProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb>:
 * @param input data: message to decode
 * @param output index: processed length in the data
 * @param output success: true if message decoded
 * @return the decoded and parsed message based on the custom protocol
 */
MessageHeader CommunicationProtocol::DecodeProtocol(uint8_t ID, std::vector<uint8_t> data, uint16_t* index, bool* success) {*success = false; MessageHeader empty_message; return empty_message;}
 80156a0:	2200      	movs	r2, #0
 80156a2:	9901      	ldr	r1, [sp, #4]
 80156a4:	700a      	strb	r2, [r1, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80156a6:	60c2      	str	r2, [r0, #12]
 80156a8:	e9c0 2201 	strd	r2, r2, [r0, #4]
 80156ac:	4770      	bx	lr

080156ae <_ZN21CommunicationProtocol17ActivateReceptionEh>:
 * @brief WEAK Activate reception of the associated hardware interface
 *
 * @param input ID: interface ID
 * @return the interface access status
 */
HAL_StatusTypeDef CommunicationProtocol::ActivateReception(uint8_t ID) {return HAL_ERROR;}
 80156ae:	2001      	movs	r0, #1
 80156b0:	4770      	bx	lr

080156b2 <_ZN21CommunicationProtocol4SendE13MessageHeader>:
 * @brief WEAK Send a message over an interface with this protocol
 *
 * @param input ID: message to send
 * @return the interface access status
 */
HAL_StatusTypeDef CommunicationProtocol::Send(MessageHeader message) {return HAL_ERROR;}
 80156b2:	2001      	movs	r0, #1
 80156b4:	4770      	bx	lr

080156b6 <_ZN21CommunicationProtocol5GetIDEPvPb>:
 *
 * @param input pointer: the hardware interface handle pointer
 * @param output success: whether successful
 * @return the interface ID associated to the input handle
 */
uint8_t CommunicationProtocol::GetID(void* pointer, bool* success) {*success = false; return 0;}
 80156b6:	2000      	movs	r0, #0
 80156b8:	7010      	strb	r0, [r2, #0]
 80156ba:	4770      	bx	lr

080156bc <_ZN21CommunicationProtocol14AddInterfaceIDEh>:
void CommunicationProtocol::AddInterfaceID(uint8_t ID_) {
 80156bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80156c0:	e9d0 4305 	ldrd	r4, r3, [r0, #20]
 80156c4:	4606      	mov	r6, r0
 80156c6:	4689      	mov	r9, r1
 80156c8:	429c      	cmp	r4, r3
 80156ca:	d005      	beq.n	80156d8 <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x1c>
 80156cc:	7021      	strb	r1, [r4, #0]
	    ++this->_M_impl._M_finish;
 80156ce:	6943      	ldr	r3, [r0, #20]
 80156d0:	3301      	adds	r3, #1
 80156d2:	6143      	str	r3, [r0, #20]
}
 80156d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80156d8:	f8d0 8010 	ldr.w	r8, [r0, #16]
	if (max_size() - size() < __n)
 80156dc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80156e0:	eba4 0408 	sub.w	r4, r4, r8
	if (max_size() - size() < __n)
 80156e4:	429c      	cmp	r4, r3
 80156e6:	d102      	bne.n	80156ee <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x32>
	  __throw_length_error(__N(__s));
 80156e8:	4816      	ldr	r0, [pc, #88]	@ (8015744 <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x88>)
 80156ea:	f005 f93d 	bl	801a968 <_ZSt20__throw_length_errorPKc>
 80156ee:	2c01      	cmp	r4, #1
 80156f0:	4625      	mov	r5, r4
 80156f2:	bf38      	it	cc
 80156f4:	2501      	movcc	r5, #1
 80156f6:	1965      	adds	r5, r4, r5
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80156f8:	d220      	bcs.n	801573c <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x80>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80156fa:	b30d      	cbz	r5, 8015740 <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x84>
 80156fc:	429d      	cmp	r5, r3
 80156fe:	bf28      	it	cs
 8015700:	461d      	movcs	r5, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8015702:	4628      	mov	r0, r5
 8015704:	f005 f87b 	bl	801a7fe <_Znwj>
 8015708:	4607      	mov	r7, r0
      if (__count > 0)
 801570a:	2c00      	cmp	r4, #0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801570c:	f807 9004 	strb.w	r9, [r7, r4]
 8015710:	dd04      	ble.n	801571c <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x60>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8015712:	4622      	mov	r2, r4
 8015714:	4641      	mov	r1, r8
 8015716:	4638      	mov	r0, r7
 8015718:	f005 fba8 	bl	801ae6c <memmove>
	      ++__new_finish;
 801571c:	3401      	adds	r4, #1
 801571e:	443c      	add	r4, r7
	if (__p)
 8015720:	f1b8 0f00 	cmp.w	r8, #0
 8015724:	d005      	beq.n	8015732 <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x76>
		    this->_M_impl._M_end_of_storage - __old_start);
 8015726:	69b1      	ldr	r1, [r6, #24]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8015728:	4640      	mov	r0, r8
 801572a:	eba1 0108 	sub.w	r1, r1, r8
 801572e:	f005 f841 	bl	801a7b4 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8015732:	e9c6 7404 	strd	r7, r4, [r6, #16]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8015736:	442f      	add	r7, r5
 8015738:	61b7      	str	r7, [r6, #24]
 801573a:	e7cb      	b.n	80156d4 <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x18>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801573c:	461d      	mov	r5, r3
 801573e:	e7e0      	b.n	8015702 <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x46>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015740:	462f      	mov	r7, r5
 8015742:	e7e2      	b.n	801570a <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x4e>
 8015744:	0801b17a 	.word	0x0801b17a

08015748 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>:
uint8_t CommunicationProtocol::GetInterfaceIndex(uint8_t ID_, bool* success) {
 8015748:	b570      	push	{r4, r5, r6, lr}
 801574a:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
	for (uint8_t ID : interfaces_id) {
 801574e:	4620      	mov	r0, r4
 8015750:	42a8      	cmp	r0, r5
 8015752:	d102      	bne.n	801575a <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb+0x12>
 8015754:	2300      	movs	r3, #0
	return 0;
 8015756:	4618      	mov	r0, r3
 8015758:	e007      	b.n	801576a <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb+0x22>
 801575a:	4603      	mov	r3, r0
		if (ID == ID_) {
 801575c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8015760:	428e      	cmp	r6, r1
 8015762:	d104      	bne.n	801576e <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb+0x26>
 8015764:	1b00      	subs	r0, r0, r4
 8015766:	2301      	movs	r3, #1
 8015768:	b2c0      	uxtb	r0, r0
			*success = true;
 801576a:	7013      	strb	r3, [r2, #0]
}
 801576c:	bd70      	pop	{r4, r5, r6, pc}
 801576e:	4618      	mov	r0, r3
 8015770:	e7ee      	b.n	8015750 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb+0x8>

08015772 <_ZN21CommunicationProtocol15InterfaceExistsEh>:
bool CommunicationProtocol::InterfaceExists(uint8_t ID) {
 8015772:	b507      	push	{r0, r1, r2, lr}
	GetInterfaceIndex(ID, &success);
 8015774:	f10d 0207 	add.w	r2, sp, #7
 8015778:	f7ff ffe6 	bl	8015748 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
}
 801577c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8015780:	b003      	add	sp, #12
 8015782:	f85d fb04 	ldr.w	pc, [sp], #4

08015786 <_ZN21CommunicationProtocol14GetIDFromIndexEhPb>:
 *
 * @param input index: interface index in the vector
 * @param output success: whether successful
 * @return the associated interface ID
 */
uint8_t CommunicationProtocol::GetIDFromIndex(uint8_t index, bool* success) {
 8015786:	b510      	push	{r4, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015788:	e9d0 4304 	ldrd	r4, r3, [r0, #16]
 801578c:	1b1b      	subs	r3, r3, r4
	if (index < interfaces_id.size()) {
 801578e:	4299      	cmp	r1, r3
		*success = true;
 8015790:	bf35      	itete	cc
 8015792:	2301      	movcc	r3, #1
		return interfaces_id[index];
	} else {
		*success = false;
 8015794:	2000      	movcs	r0, #0
		*success = true;
 8015796:	7013      	strbcc	r3, [r2, #0]
		*success = false;
 8015798:	7010      	strbcs	r0, [r2, #0]
		return interfaces_id[index];
 801579a:	bf38      	it	cc
 801579c:	5c60      	ldrbcc	r0, [r4, r1]
		return 0;
	}
}
 801579e:	bd10      	pop	{r4, pc}

080157a0 <_ZN21CommunicationProtocol9GetBufferEhPb>:
 *
 * @param input ID: interface ID
 * @param output success: whether successful
 * @return the associated buffer memory base pointer
 */
std::vector<uint8_t>* CommunicationProtocol::GetBuffer(uint8_t ID, bool* success) {
 80157a0:	b538      	push	{r3, r4, r5, lr}
 80157a2:	4604      	mov	r4, r0
	uint8_t index = GetInterfaceIndex(ID, success);
 80157a4:	f7ff ffd0 	bl	8015748 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
 80157a8:	4603      	mov	r3, r0
	if (*success)
 80157aa:	7810      	ldrb	r0, [r2, #0]
 80157ac:	b128      	cbz	r0, 80157ba <_ZN21CommunicationProtocol9GetBufferEhPb+0x1a>
	return *(this->_M_impl._M_start + __n);
 80157ae:	b21b      	sxth	r3, r3
 80157b0:	6a20      	ldr	r0, [r4, #32]
 80157b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80157b6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
		return &buffers[index];
	return NULL;
}
 80157ba:	bd38      	pop	{r3, r4, r5, pc}

080157bc <_ZN21CommunicationProtocol14GetBufferIndexEhPb>:
 *
 * @param input ID: interface ID
 * @param output success: whether successful
 * @return the associated buffer index pointer
 */
uint16_t* CommunicationProtocol::GetBufferIndex(uint8_t ID, bool* success) {
 80157bc:	b538      	push	{r3, r4, r5, lr}
 80157be:	4604      	mov	r4, r0
	uint8_t index = GetInterfaceIndex(ID, success);
 80157c0:	f7ff ffc2 	bl	8015748 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
 80157c4:	4603      	mov	r3, r0
	if (*success)
 80157c6:	7810      	ldrb	r0, [r2, #0]
 80157c8:	b118      	cbz	r0, 80157d2 <_ZN21CommunicationProtocol14GetBufferIndexEhPb+0x16>
 80157ca:	b21b      	sxth	r3, r3
 80157cc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80157ce:	eb00 0043 	add.w	r0, r0, r3, lsl #1
		return &buffers_index[index];
	return NULL;
}
 80157d2:	bd38      	pop	{r3, r4, r5, pc}

080157d4 <_ZN21CommunicationProtocol27SetProtocolPayloadMaxLengthEt>:
 * @brief Set the maximum payload length for the protocol
 *
 * @param input length: the maximum payload length
 */
void CommunicationProtocol::SetProtocolPayloadMaxLength(uint16_t length) {
	max_payload_length = length;
 80157d4:	8381      	strh	r1, [r0, #28]
}
 80157d6:	4770      	bx	lr

080157d8 <_ZN21CommunicationProtocol27GetProtocolPayloadMaxLengthEv>:
 *
 * @return the maximum payload length of the protocol
 */
uint16_t CommunicationProtocol::GetProtocolPayloadMaxLength(void) {
	return max_payload_length;
}
 80157d8:	8b80      	ldrh	r0, [r0, #28]
 80157da:	4770      	bx	lr

080157dc <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80157dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80157e0:	e9d0 8a00 	ldrd	r8, sl, [r0]
 80157e4:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 80157e6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80157ea:	ebaa 0208 	sub.w	r2, sl, r8
 80157ee:	4607      	mov	r7, r0
 80157f0:	4689      	mov	r9, r1
	if (max_size() - size() < __n)
 80157f2:	ebb3 0f62 	cmp.w	r3, r2, asr #1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80157f6:	ea4f 0462 	mov.w	r4, r2, asr #1
	if (max_size() - size() < __n)
 80157fa:	d102      	bne.n	8015802 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 80157fc:	481e      	ldr	r0, [pc, #120]	@ (8015878 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x9c>)
 80157fe:	f005 f8b3 	bl	801a968 <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 8015802:	45c2      	cmp	sl, r8
 8015804:	bf14      	ite	ne
 8015806:	4622      	movne	r2, r4
 8015808:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 801580a:	eba1 0508 	sub.w	r5, r1, r8
 801580e:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8015810:	d22e      	bcs.n	8015870 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x94>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015812:	b37c      	cbz	r4, 8015874 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x98>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8015814:	429c      	cmp	r4, r3
 8015816:	bf28      	it	cs
 8015818:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801581a:	0060      	lsls	r0, r4, #1
 801581c:	f004 ffef 	bl	801a7fe <_Znwj>
 8015820:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8015822:	f8bb 3000 	ldrh.w	r3, [fp]
      if (__count > 0)
 8015826:	2d00      	cmp	r5, #0
 8015828:	5373      	strh	r3, [r6, r5]
 801582a:	dd04      	ble.n	8015836 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x5a>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801582c:	462a      	mov	r2, r5
 801582e:	4641      	mov	r1, r8
 8015830:	4630      	mov	r0, r6
 8015832:	f005 fb1b 	bl	801ae6c <memmove>
      ptrdiff_t __count = __last - __first;
 8015836:	ebaa 0a09 	sub.w	sl, sl, r9
	      ++__new_finish;
 801583a:	3502      	adds	r5, #2
      if (__count > 0)
 801583c:	f1ba 0f00 	cmp.w	sl, #0
 8015840:	4435      	add	r5, r6
 8015842:	dd04      	ble.n	801584e <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x72>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8015844:	4652      	mov	r2, sl
 8015846:	4649      	mov	r1, r9
 8015848:	4628      	mov	r0, r5
 801584a:	f005 fc07 	bl	801b05c <memcpy>
      return __result + __count;
 801584e:	4455      	add	r5, sl
	if (__p)
 8015850:	f1b8 0f00 	cmp.w	r8, #0
 8015854:	d005      	beq.n	8015862 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x86>
		    this->_M_impl._M_end_of_storage - __old_start);
 8015856:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8015858:	4640      	mov	r0, r8
 801585a:	eba1 0108 	sub.w	r1, r1, r8
 801585e:	f004 ffa9 	bl	801a7b4 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8015862:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8015866:	eb06 0644 	add.w	r6, r6, r4, lsl #1
 801586a:	60be      	str	r6, [r7, #8]
    }
 801586c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8015870:	461c      	mov	r4, r3
 8015872:	e7d2      	b.n	801581a <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015874:	4626      	mov	r6, r4
 8015876:	e7d4      	b.n	8015822 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x46>
 8015878:	0801b17a 	.word	0x0801b17a

0801587c <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 801587c:	b538      	push	{r3, r4, r5, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801587e:	1e0c      	subs	r4, r1, #0
      _M_create_storage(size_t __n)
 8015880:	4605      	mov	r5, r0
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015882:	d00a      	beq.n	801589a <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj+0x1e>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8015884:	da01      	bge.n	801588a <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj+0xe>
	    std::__throw_bad_alloc();
 8015886:	f005 f869 	bl	801a95c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801588a:	4620      	mov	r0, r4
 801588c:	f004 ffb7 	bl	801a7fe <_Znwj>
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8015890:	e9c5 0000 	strd	r0, r0, [r5]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8015894:	4420      	add	r0, r4
 8015896:	60a8      	str	r0, [r5, #8]
      }
 8015898:	bd38      	pop	{r3, r4, r5, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801589a:	4620      	mov	r0, r4
 801589c:	e7f8      	b.n	8015890 <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj+0x14>
	...

080158a0 <_ZNSt6vectorIhSaIhEEC1EjRKS0_>:
      vector(size_type __n, const allocator_type& __a = allocator_type())
 80158a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 80158a2:	1e0d      	subs	r5, r1, #0
      vector(size_type __n, const allocator_type& __a = allocator_type())
 80158a4:	4604      	mov	r4, r0
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 80158a6:	da02      	bge.n	80158ae <_ZNSt6vectorIhSaIhEEC1EjRKS0_+0xe>
	  __throw_length_error(
 80158a8:	480c      	ldr	r0, [pc, #48]	@ (80158dc <_ZNSt6vectorIhSaIhEEC1EjRKS0_+0x3c>)
 80158aa:	f005 f85d 	bl	801a968 <_ZSt20__throw_length_errorPKc>
	: _M_start(), _M_finish(), _M_end_of_storage()
 80158ae:	2700      	movs	r7, #0
 80158b0:	e9c0 7700 	strd	r7, r7, [r0]
 80158b4:	6087      	str	r7, [r0, #8]
      { _M_create_storage(__n); }
 80158b6:	f7ff ffe1 	bl	801587c <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj>
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 80158ba:	6826      	ldr	r6, [r4, #0]
	  if (__n > 0)
 80158bc:	b14d      	cbz	r5, 80158d2 <_ZNSt6vectorIhSaIhEEC1EjRKS0_+0x32>
 80158be:	4630      	mov	r0, r6
      if (__n <= 0)
 80158c0:	2d01      	cmp	r5, #1
 80158c2:	f800 7b01 	strb.w	r7, [r0], #1
 80158c6:	d007      	beq.n	80158d8 <_ZNSt6vectorIhSaIhEEC1EjRKS0_+0x38>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 80158c8:	1e6a      	subs	r2, r5, #1
 80158ca:	4639      	mov	r1, r7
      std::__fill_a(__first, __first + __n, __value);
 80158cc:	442e      	add	r6, r5
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 80158ce:	f005 fae7 	bl	801aea0 <memset>
      { _M_default_initialize(__n); }
 80158d2:	4620      	mov	r0, r4
	this->_M_impl._M_finish =
 80158d4:	6066      	str	r6, [r4, #4]
      { _M_default_initialize(__n); }
 80158d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	      ++__first;
 80158d8:	4606      	mov	r6, r0
 80158da:	e7fa      	b.n	80158d2 <_ZNSt6vectorIhSaIhEEC1EjRKS0_+0x32>
 80158dc:	0801b194 	.word	0x0801b194

080158e0 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80158e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80158e4:	e9d0 7900 	ldrd	r7, r9, [r0]
 80158e8:	4b35      	ldr	r3, [pc, #212]	@ (80159c0 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xe0>)
 80158ea:	4606      	mov	r6, r0
 80158ec:	eba9 0507 	sub.w	r5, r9, r7
 80158f0:	4688      	mov	r8, r1
 80158f2:	4614      	mov	r4, r2
 80158f4:	10ad      	asrs	r5, r5, #2
 80158f6:	435d      	muls	r5, r3
	if (max_size() - size() < __n)
 80158f8:	4b32      	ldr	r3, [pc, #200]	@ (80159c4 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xe4>)
 80158fa:	429d      	cmp	r5, r3
 80158fc:	d102      	bne.n	8015904 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
 80158fe:	4832      	ldr	r0, [pc, #200]	@ (80159c8 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xe8>)
 8015900:	f005 f832 	bl	801a968 <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 8015904:	45b9      	cmp	r9, r7
 8015906:	bf14      	ite	ne
 8015908:	462a      	movne	r2, r5
 801590a:	2201      	moveq	r2, #1
 801590c:	eba1 0b07 	sub.w	fp, r1, r7
 8015910:	18ad      	adds	r5, r5, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8015912:	d22d      	bcs.n	8015970 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x90>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015914:	b375      	cbz	r5, 8015974 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x94>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8015916:	429d      	cmp	r5, r3
 8015918:	bf28      	it	cs
 801591a:	461d      	movcs	r5, r3
 801591c:	200c      	movs	r0, #12
 801591e:	4368      	muls	r0, r5
 8015920:	f004 ff6d 	bl	801a7fe <_Znwj>
 8015924:	4682      	mov	sl, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8015926:	4621      	mov	r1, r4
 8015928:	eb0a 000b 	add.w	r0, sl, fp
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801592c:	463c      	mov	r4, r7
      _ForwardIterator __cur = __result;
 801592e:	46d3      	mov	fp, sl
 8015930:	f7eb fa20 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
      for (; __first != __last; ++__first, (void)++__cur)
 8015934:	45a0      	cmp	r8, r4
 8015936:	f04f 0300 	mov.w	r3, #0
 801593a:	f10b 0b0c 	add.w	fp, fp, #12
 801593e:	d11b      	bne.n	8015978 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x98>
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8015940:	f04f 0800 	mov.w	r8, #0
 8015944:	454c      	cmp	r4, r9
 8015946:	465b      	mov	r3, fp
 8015948:	f10b 0b0c 	add.w	fp, fp, #12
 801594c:	d125      	bne.n	801599a <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xba>
	if (__p)
 801594e:	b137      	cbz	r7, 801595e <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x7e>
		    this->_M_impl._M_end_of_storage - __old_start);
 8015950:	68b1      	ldr	r1, [r6, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8015952:	4638      	mov	r0, r7
 8015954:	9301      	str	r3, [sp, #4]
 8015956:	1bc9      	subs	r1, r1, r7
 8015958:	f004 ff2c 	bl	801a7b4 <_ZdlPvj>
 801595c:	9b01      	ldr	r3, [sp, #4]
      this->_M_impl._M_finish = __new_finish;
 801595e:	e9c6 a300 	strd	sl, r3, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8015962:	230c      	movs	r3, #12
 8015964:	fb03 a305 	mla	r3, r3, r5, sl
 8015968:	60b3      	str	r3, [r6, #8]
    }
 801596a:	b003      	add	sp, #12
 801596c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015970:	461d      	mov	r5, r3
 8015972:	e7d3      	b.n	801591c <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015974:	46aa      	mov	sl, r5
 8015976:	e7d6      	b.n	8015926 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8015978:	6822      	ldr	r2, [r4, #0]
      }
 801597a:	4620      	mov	r0, r4
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 801597c:	6023      	str	r3, [r4, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 801597e:	f84b 2c0c 	str.w	r2, [fp, #-12]
 8015982:	6862      	ldr	r2, [r4, #4]
 8015984:	f84b 2c08 	str.w	r2, [fp, #-8]
	  _M_end_of_storage(__x._M_end_of_storage)
 8015988:	68a2      	ldr	r2, [r4, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 801598a:	e9c4 3301 	strd	r3, r3, [r4, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 801598e:	f84b 2c04 	str.w	r2, [fp, #-4]
 8015992:	340c      	adds	r4, #12
      }
 8015994:	f7eb f93e 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8015998:	e7cc      	b.n	8015934 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x54>
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 801599a:	6823      	ldr	r3, [r4, #0]
      }
 801599c:	4620      	mov	r0, r4
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 801599e:	f8c4 8000 	str.w	r8, [r4]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 80159a2:	f84b 3c0c 	str.w	r3, [fp, #-12]
 80159a6:	6863      	ldr	r3, [r4, #4]
 80159a8:	f84b 3c08 	str.w	r3, [fp, #-8]
	  _M_end_of_storage(__x._M_end_of_storage)
 80159ac:	68a3      	ldr	r3, [r4, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 80159ae:	e9c4 8801 	strd	r8, r8, [r4, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 80159b2:	f84b 3c04 	str.w	r3, [fp, #-4]
 80159b6:	340c      	adds	r4, #12
      }
 80159b8:	f7eb f92c 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80159bc:	e7c2      	b.n	8015944 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x64>
 80159be:	bf00      	nop
 80159c0:	aaaaaaab 	.word	0xaaaaaaab
 80159c4:	0aaaaaaa 	.word	0x0aaaaaaa
 80159c8:	0801b17a 	.word	0x0801b17a

080159cc <_ZNSt6vectorIS_IhSaIhEESaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 80159cc:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80159ce:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
      push_back(const value_type& __x)
 80159d2:	4604      	mov	r4, r0
 80159d4:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80159d6:	42ab      	cmp	r3, r5
 80159d8:	d006      	beq.n	80159e8 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE9push_backERKS1_+0x1c>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80159da:	4618      	mov	r0, r3
 80159dc:	f7eb f9ca 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
	    ++this->_M_impl._M_finish;
 80159e0:	6863      	ldr	r3, [r4, #4]
 80159e2:	330c      	adds	r3, #12
 80159e4:	6063      	str	r3, [r4, #4]
      }
 80159e6:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
 80159e8:	4619      	mov	r1, r3
 80159ea:	f7ff ff79 	bl	80158e0 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 80159ee:	e7fa      	b.n	80159e6 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE9push_backERKS1_+0x1a>

080159f0 <_ZN21CommunicationProtocol18AddInterfaceBufferEv>:
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80159f0:	e9d0 120c 	ldrd	r1, r2, [r0, #48]	@ 0x30
void CommunicationProtocol::AddInterfaceBuffer() {
 80159f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	buffers_index.push_back(0);
 80159f6:	2300      	movs	r3, #0
void CommunicationProtocol::AddInterfaceBuffer() {
 80159f8:	b089      	sub	sp, #36	@ 0x24
 80159fa:	4291      	cmp	r1, r2
 80159fc:	4604      	mov	r4, r0
	buffers_index.push_back(0);
 80159fe:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015a02:	d036      	beq.n	8015a72 <_ZN21CommunicationProtocol18AddInterfaceBufferEv+0x82>
 8015a04:	f821 3b02 	strh.w	r3, [r1], #2
	    ++this->_M_impl._M_finish;
 8015a08:	6301      	str	r1, [r0, #48]	@ 0x30
	std::vector<uint8_t> buffer(BUFFER_SIZE);
 8015a0a:	aa05      	add	r2, sp, #20
 8015a0c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8015a10:	a802      	add	r0, sp, #8
 8015a12:	f7ff ff45 	bl	80158a0 <_ZNSt6vectorIhSaIhEEC1EjRKS0_>
	buffers.push_back(buffer);
 8015a16:	f104 0020 	add.w	r0, r4, #32
 8015a1a:	a902      	add	r1, sp, #8
 8015a1c:	f7ff ffd6 	bl	80159cc <_ZNSt6vectorIS_IhSaIhEESaIS1_EE9push_backERKS1_>
	std::vector<uint8_t> data_to_send(BUFFER_SIZE);
 8015a20:	aa01      	add	r2, sp, #4
 8015a22:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8015a26:	a805      	add	r0, sp, #20
 8015a28:	f7ff ff3a 	bl	80158a0 <_ZNSt6vectorIhSaIhEEC1EjRKS0_>
	buffers_to_transfer.push_back(data_to_send);
 8015a2c:	1d20      	adds	r0, r4, #4
 8015a2e:	a905      	add	r1, sp, #20
 8015a30:	f7ff ffcc 	bl	80159cc <_ZNSt6vectorIS_IhSaIhEESaIS1_EE9push_backERKS1_>
      : _M_current(__i) { }
 8015a34:	68a4      	ldr	r4, [r4, #8]
			 - this->_M_impl._M_start); }
 8015a36:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 8015a3a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8015a3e:	1a9b      	subs	r3, r3, r2
      if (this->capacity() < __n)
 8015a40:	2bff      	cmp	r3, #255	@ 0xff
 8015a42:	d826      	bhi.n	8015a92 <_ZN21CommunicationProtocol18AddInterfaceBufferEv+0xa2>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015a44:	f854 6c08 	ldr.w	r6, [r4, #-8]
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8015a48:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8015a4c:	1ab6      	subs	r6, r6, r2
 8015a4e:	f004 fed6 	bl	801a7fe <_Znwj>
 8015a52:	4605      	mov	r5, r0
      ptrdiff_t __count = __last - __first;
 8015a54:	e954 7203 	ldrd	r7, r2, [r4, #-12]
 8015a58:	1bd2      	subs	r2, r2, r7
      if (__count > 0)
 8015a5a:	2a00      	cmp	r2, #0
 8015a5c:	dd0e      	ble.n	8015a7c <_ZN21CommunicationProtocol18AddInterfaceBufferEv+0x8c>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8015a5e:	4639      	mov	r1, r7
 8015a60:	f005 fa04 	bl	801ae6c <memmove>
			- this->_M_impl._M_start);
 8015a64:	f854 1c04 	ldr.w	r1, [r4, #-4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8015a68:	4638      	mov	r0, r7
 8015a6a:	1bc9      	subs	r1, r1, r7
 8015a6c:	f004 fea2 	bl	801a7b4 <_ZdlPvj>
 8015a70:	e006      	b.n	8015a80 <_ZN21CommunicationProtocol18AddInterfaceBufferEv+0x90>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8015a72:	aa05      	add	r2, sp, #20
 8015a74:	302c      	adds	r0, #44	@ 0x2c
 8015a76:	f7ff feb1 	bl	80157dc <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_>
 8015a7a:	e7c6      	b.n	8015a0a <_ZN21CommunicationProtocol18AddInterfaceBufferEv+0x1a>
	if (__p)
 8015a7c:	2f00      	cmp	r7, #0
 8015a7e:	d1f1      	bne.n	8015a64 <_ZN21CommunicationProtocol18AddInterfaceBufferEv+0x74>
	  this->_M_impl._M_finish = __tmp + __old_size;
 8015a80:	442e      	add	r6, r5
	  this->_M_impl._M_start = __tmp;
 8015a82:	f844 5c0c 	str.w	r5, [r4, #-12]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8015a86:	f505 7580 	add.w	r5, r5, #256	@ 0x100
	  this->_M_impl._M_finish = __tmp + __old_size;
 8015a8a:	f844 6c08 	str.w	r6, [r4, #-8]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8015a8e:	f844 5c04 	str.w	r5, [r4, #-4]
      }
 8015a92:	a805      	add	r0, sp, #20
 8015a94:	f7eb f8be 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8015a98:	a802      	add	r0, sp, #8
 8015a9a:	f7eb f8bb 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 8015a9e:	b009      	add	sp, #36	@ 0x24
 8015aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015aa2 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015aa2:	2800      	cmp	r0, #0
      _M_allocate(size_t __n)
 8015aa4:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015aa6:	d006      	beq.n	8015ab6 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0x14>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8015aa8:	da01      	bge.n	8015aae <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0xc>
	    std::__throw_bad_alloc();
 8015aaa:	f004 ff57 	bl	801a95c <_ZSt17__throw_bad_allocv>
      }
 8015aae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8015ab2:	f004 bea4 	b.w	801a7fe <_Znwj>
 8015ab6:	bd08      	pop	{r3, pc}

08015ab8 <_ZN11CANProtocolC1Ev>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 8015ab8:	2200      	movs	r2, #0
#include <Protocols/Communication/FDCAN/CANProtocol.hpp>

/**
 * @brief Class constructor
 */
CANProtocol::CANProtocol() {
 8015aba:	490b      	ldr	r1, [pc, #44]	@ (8015ae8 <_ZN11CANProtocolC1Ev+0x30>)
 8015abc:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8015ac0:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8015ac4:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8015ac8:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8015acc:	e9c0 220a 	strd	r2, r2, [r0, #40]	@ 0x28
 8015ad0:	e9c0 220c 	strd	r2, r2, [r0, #48]	@ 0x30
 8015ad4:	e9c0 220e 	strd	r2, r2, [r0, #56]	@ 0x38
 8015ad8:	6402      	str	r2, [r0, #64]	@ 0x40
 8015ada:	6001      	str	r1, [r0, #0]
 8015adc:	6502      	str	r2, [r0, #80]	@ 0x50
	marker = 0;
 8015ade:	6442      	str	r2, [r0, #68]	@ 0x44
 8015ae0:	e9c0 2212 	strd	r2, r2, [r0, #72]	@ 0x48
}
 8015ae4:	4770      	bx	lr
 8015ae6:	bf00      	nop
 8015ae8:	0801b47c 	.word	0x0801b47c

08015aec <_ZN11CANProtocol17GetProtocolLengthEt>:
 *
 * @param input length: the CAN payload length
 * @return the minimum DLC value that fits the given length inside
 */
uint32_t CANProtocol::GetProtocolLength(uint16_t length) {
	if (length <= 0) return FDCAN_DLC_BYTES_0;
 8015aec:	b301      	cbz	r1, 8015b30 <_ZN11CANProtocol17GetProtocolLengthEt+0x44>
	if (length <= 1) return FDCAN_DLC_BYTES_1;
 8015aee:	2901      	cmp	r1, #1
 8015af0:	d020      	beq.n	8015b34 <_ZN11CANProtocol17GetProtocolLengthEt+0x48>
	if (length <= 2) return FDCAN_DLC_BYTES_2;
 8015af2:	2902      	cmp	r1, #2
 8015af4:	d021      	beq.n	8015b3a <_ZN11CANProtocol17GetProtocolLengthEt+0x4e>
	if (length <= 3) return FDCAN_DLC_BYTES_3;
 8015af6:	2903      	cmp	r1, #3
 8015af8:	d022      	beq.n	8015b40 <_ZN11CANProtocol17GetProtocolLengthEt+0x54>
	if (length <= 4) return FDCAN_DLC_BYTES_4;
 8015afa:	2904      	cmp	r1, #4
 8015afc:	d023      	beq.n	8015b46 <_ZN11CANProtocol17GetProtocolLengthEt+0x5a>
	if (length <= 5) return FDCAN_DLC_BYTES_5;
 8015afe:	2905      	cmp	r1, #5
 8015b00:	d024      	beq.n	8015b4c <_ZN11CANProtocol17GetProtocolLengthEt+0x60>
	if (length <= 6) return FDCAN_DLC_BYTES_6;
 8015b02:	2906      	cmp	r1, #6
 8015b04:	d025      	beq.n	8015b52 <_ZN11CANProtocol17GetProtocolLengthEt+0x66>
	if (length <= 7) return FDCAN_DLC_BYTES_7;
 8015b06:	2907      	cmp	r1, #7
 8015b08:	d026      	beq.n	8015b58 <_ZN11CANProtocol17GetProtocolLengthEt+0x6c>
	if (length <= 8) return FDCAN_DLC_BYTES_8;
 8015b0a:	2908      	cmp	r1, #8
 8015b0c:	d027      	beq.n	8015b5e <_ZN11CANProtocol17GetProtocolLengthEt+0x72>
	if (length <= 12) return FDCAN_DLC_BYTES_12;
 8015b0e:	290c      	cmp	r1, #12
 8015b10:	d928      	bls.n	8015b64 <_ZN11CANProtocol17GetProtocolLengthEt+0x78>
	if (length <= 16) return FDCAN_DLC_BYTES_16;
 8015b12:	2910      	cmp	r1, #16
 8015b14:	d929      	bls.n	8015b6a <_ZN11CANProtocol17GetProtocolLengthEt+0x7e>
	if (length <= 20) return FDCAN_DLC_BYTES_20;
 8015b16:	2914      	cmp	r1, #20
 8015b18:	d92a      	bls.n	8015b70 <_ZN11CANProtocol17GetProtocolLengthEt+0x84>
	if (length <= 24) return FDCAN_DLC_BYTES_24;
 8015b1a:	2918      	cmp	r1, #24
 8015b1c:	d92b      	bls.n	8015b76 <_ZN11CANProtocol17GetProtocolLengthEt+0x8a>
	if (length <= 32) return FDCAN_DLC_BYTES_32;
 8015b1e:	2920      	cmp	r1, #32
 8015b20:	d92c      	bls.n	8015b7c <_ZN11CANProtocol17GetProtocolLengthEt+0x90>
	if (length <= 48) return FDCAN_DLC_BYTES_48;
	if (length <= 64) return FDCAN_DLC_BYTES_64;
 8015b22:	2931      	cmp	r1, #49	@ 0x31
 8015b24:	bf34      	ite	cc
 8015b26:	f44f 2060 	movcc.w	r0, #917504	@ 0xe0000
 8015b2a:	f44f 2070 	movcs.w	r0, #983040	@ 0xf0000
 8015b2e:	4770      	bx	lr
	if (length <= 0) return FDCAN_DLC_BYTES_0;
 8015b30:	4608      	mov	r0, r1
 8015b32:	4770      	bx	lr
	if (length <= 1) return FDCAN_DLC_BYTES_1;
 8015b34:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8015b38:	4770      	bx	lr
	if (length <= 2) return FDCAN_DLC_BYTES_2;
 8015b3a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8015b3e:	4770      	bx	lr
	if (length <= 3) return FDCAN_DLC_BYTES_3;
 8015b40:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8015b44:	4770      	bx	lr
	if (length <= 4) return FDCAN_DLC_BYTES_4;
 8015b46:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8015b4a:	4770      	bx	lr
	if (length <= 5) return FDCAN_DLC_BYTES_5;
 8015b4c:	f44f 20a0 	mov.w	r0, #327680	@ 0x50000
 8015b50:	4770      	bx	lr
	if (length <= 6) return FDCAN_DLC_BYTES_6;
 8015b52:	f44f 20c0 	mov.w	r0, #393216	@ 0x60000
 8015b56:	4770      	bx	lr
	if (length <= 7) return FDCAN_DLC_BYTES_7;
 8015b58:	f44f 20e0 	mov.w	r0, #458752	@ 0x70000
 8015b5c:	4770      	bx	lr
	if (length <= 8) return FDCAN_DLC_BYTES_8;
 8015b5e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8015b62:	4770      	bx	lr
	if (length <= 12) return FDCAN_DLC_BYTES_12;
 8015b64:	f44f 2010 	mov.w	r0, #589824	@ 0x90000
 8015b68:	4770      	bx	lr
	if (length <= 16) return FDCAN_DLC_BYTES_16;
 8015b6a:	f44f 2020 	mov.w	r0, #655360	@ 0xa0000
 8015b6e:	4770      	bx	lr
	if (length <= 20) return FDCAN_DLC_BYTES_20;
 8015b70:	f44f 2030 	mov.w	r0, #720896	@ 0xb0000
 8015b74:	4770      	bx	lr
	if (length <= 24) return FDCAN_DLC_BYTES_24;
 8015b76:	f44f 2040 	mov.w	r0, #786432	@ 0xc0000
 8015b7a:	4770      	bx	lr
	if (length <= 32) return FDCAN_DLC_BYTES_32;
 8015b7c:	f44f 2050 	mov.w	r0, #851968	@ 0xd0000
	return FDCAN_DLC_BYTES_64;
}
 8015b80:	4770      	bx	lr

08015b82 <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE.isra.0>:
      // Constant-time move assignment when source object's memory can be
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      _GLIBCXX20_CONSTEXPR
      void
      _M_move_assign(vector&& __x, true_type) noexcept
 8015b82:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 8015b84:	680d      	ldr	r5, [r1, #0]
      _M_move_assign(vector&& __x, true_type) noexcept
 8015b86:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 8015b88:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 8015b8a:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 8015b8e:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 8015b90:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8015b92:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 8015b94:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 8015b96:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8015b98:	688d      	ldr	r5, [r1, #8]
 8015b9a:	6085      	str	r5, [r0, #8]
      }
 8015b9c:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 8015b9e:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 8015ba0:	e9c1 3300 	strd	r3, r3, [r1]
 8015ba4:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 8015ba8:	f7eb f834 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      {
	vector __tmp(get_allocator());
	this->_M_impl._M_swap_data(__x._M_impl);
	__tmp._M_impl._M_swap_data(__x._M_impl);
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
      }
 8015bac:	b005      	add	sp, #20
 8015bae:	bd30      	pop	{r4, r5, pc}

08015bb0 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12GetInterfaceEhPb>:
H* TemplateCommunicationProtocol<H>::GetInterface(uint8_t ID, bool* success) {
 8015bb0:	b538      	push	{r3, r4, r5, lr}
 8015bb2:	4615      	mov	r5, r2
 8015bb4:	4604      	mov	r4, r0
	uint8_t index = GetInterfaceIndex(ID, success);
 8015bb6:	f7ff fdc7 	bl	8015748 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
 8015bba:	4603      	mov	r3, r0
	if (*success) {
 8015bbc:	7828      	ldrb	r0, [r5, #0]
 8015bbe:	b118      	cbz	r0, 8015bc8 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12GetInterfaceEhPb+0x18>
	return *(this->_M_impl._M_start + __n);
 8015bc0:	b21b      	sxth	r3, r3
		return interfaces[index];
 8015bc2:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8015bc4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
}
 8015bc8:	bd38      	pop	{r3, r4, r5, pc}

08015bca <_ZN11CANProtocol16ConfigureFiltersEh>:
HAL_StatusTypeDef CANProtocol::ConfigureFilters(uint8_t ID) {
 8015bca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	FDCAN_HandleTypeDef* handle = GetInterface(ID, &success);
 8015bcc:	f10d 020f 	add.w	r2, sp, #15
 8015bd0:	f7ff ffee 	bl	8015bb0 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12GetInterfaceEhPb>
	if (not success) return HAL_ERROR;
 8015bd4:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8015bd8:	2301      	movs	r3, #1
 8015bda:	b13a      	cbz	r2, 8015bec <_ZN11CANProtocol16ConfigureFiltersEh+0x22>
	return HAL_FDCAN_ConfigGlobalFilter(handle, FDCAN_ACCEPT_IN_RX_FIFO0, FDCAN_ACCEPT_IN_RX_FIFO0, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);
 8015bdc:	2200      	movs	r2, #0
 8015bde:	9300      	str	r3, [sp, #0]
 8015be0:	4611      	mov	r1, r2
 8015be2:	f7f0 f883 	bl	8005cec <HAL_FDCAN_ConfigGlobalFilter>
}
 8015be6:	b005      	add	sp, #20
 8015be8:	f85d fb04 	ldr.w	pc, [sp], #4
	if (not success) return HAL_ERROR;
 8015bec:	4618      	mov	r0, r3
 8015bee:	e7fa      	b.n	8015be6 <_ZN11CANProtocol16ConfigureFiltersEh+0x1c>

08015bf0 <_ZN11CANProtocol17ActivateReceptionEh>:
HAL_StatusTypeDef CANProtocol::ActivateReception(uint8_t ID) {
 8015bf0:	b507      	push	{r0, r1, r2, lr}
	FDCAN_HandleTypeDef* handle = GetInterface(ID, &success);
 8015bf2:	f10d 0207 	add.w	r2, sp, #7
 8015bf6:	f7ff ffdb 	bl	8015bb0 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12GetInterfaceEhPb>
	if (not success) return HAL_ERROR;
 8015bfa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8015bfe:	b133      	cbz	r3, 8015c0e <_ZN11CANProtocol17ActivateReceptionEh+0x1e>
	return HAL_FDCAN_ActivateNotification(handle, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8015c00:	2200      	movs	r2, #0
 8015c02:	2101      	movs	r1, #1
 8015c04:	f7f0 f9d0 	bl	8005fa8 <HAL_FDCAN_ActivateNotification>
}
 8015c08:	b003      	add	sp, #12
 8015c0a:	f85d fb04 	ldr.w	pc, [sp], #4
	if (not success) return HAL_ERROR;
 8015c0e:	2001      	movs	r0, #1
 8015c10:	e7fa      	b.n	8015c08 <_ZN11CANProtocol17ActivateReceptionEh+0x18>

08015c12 <_ZN11CANProtocol5StartEh>:
HAL_StatusTypeDef CANProtocol::Start(uint8_t ID) {
 8015c12:	b507      	push	{r0, r1, r2, lr}
	FDCAN_HandleTypeDef* handle = GetInterface(ID, &success);
 8015c14:	f10d 0207 	add.w	r2, sp, #7
 8015c18:	f7ff ffca 	bl	8015bb0 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12GetInterfaceEhPb>
	if (not success) return HAL_ERROR;
 8015c1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8015c20:	b123      	cbz	r3, 8015c2c <_ZN11CANProtocol5StartEh+0x1a>
	return HAL_FDCAN_Start(handle);
 8015c22:	f7f0 f87e 	bl	8005d22 <HAL_FDCAN_Start>
}
 8015c26:	b003      	add	sp, #12
 8015c28:	f85d fb04 	ldr.w	pc, [sp], #4
	if (not success) return HAL_ERROR;
 8015c2c:	2001      	movs	r0, #1
 8015c2e:	e7fa      	b.n	8015c26 <_ZN11CANProtocol5StartEh+0x14>

08015c30 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 8015c30:	460a      	mov	r2, r1
 8015c32:	b510      	push	{r4, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8015c34:	e9d0 1401 	ldrd	r1, r4, [r0, #4]
 8015c38:	42a1      	cmp	r1, r4
 8015c3a:	d004      	beq.n	8015c46 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE9push_backERKS1_+0x16>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8015c3c:	6812      	ldr	r2, [r2, #0]
 8015c3e:	f841 2b04 	str.w	r2, [r1], #4
	    ++this->_M_impl._M_finish;
 8015c42:	6041      	str	r1, [r0, #4]
      }
 8015c44:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), __x);
 8015c46:	f7ec fa47 	bl	80020d8 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8015c4a:	e7fb      	b.n	8015c44 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE9push_backERKS1_+0x14>

08015c4c <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8015c4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015c50:	e9d0 9a00 	ldrd	r9, sl, [r0]
 8015c54:	4b2a      	ldr	r3, [pc, #168]	@ (8015d00 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb4>)
 8015c56:	4680      	mov	r8, r0
 8015c58:	ebaa 0409 	sub.w	r4, sl, r9
 8015c5c:	468b      	mov	fp, r1
 8015c5e:	4615      	mov	r5, r2
 8015c60:	10a4      	asrs	r4, r4, #2
 8015c62:	435c      	muls	r4, r3
	if (max_size() - size() < __n)
 8015c64:	4b27      	ldr	r3, [pc, #156]	@ (8015d04 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb8>)
 8015c66:	429c      	cmp	r4, r3
 8015c68:	d102      	bne.n	8015c70 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
 8015c6a:	4827      	ldr	r0, [pc, #156]	@ (8015d08 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xbc>)
 8015c6c:	f004 fe7c 	bl	801a968 <_ZSt20__throw_length_errorPKc>
 8015c70:	45ca      	cmp	sl, r9
 8015c72:	bf14      	ite	ne
 8015c74:	4622      	movne	r2, r4
 8015c76:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 8015c78:	eba1 0609 	sub.w	r6, r1, r9
 8015c7c:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8015c7e:	d23a      	bcs.n	8015cf6 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xaa>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015c80:	b3dc      	cbz	r4, 8015cfa <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xae>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8015c82:	429c      	cmp	r4, r3
 8015c84:	bf28      	it	cs
 8015c86:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8015c88:	2024      	movs	r0, #36	@ 0x24
 8015c8a:	4360      	muls	r0, r4
 8015c8c:	f004 fdb7 	bl	801a7fe <_Znwj>
 8015c90:	4607      	mov	r7, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8015c92:	eb07 0c06 	add.w	ip, r7, r6
      if (__count > 0)
 8015c96:	2e00      	cmp	r6, #0
 8015c98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015c9a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015c9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015ca0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015ca4:	682b      	ldr	r3, [r5, #0]
 8015ca6:	f8cc 3000 	str.w	r3, [ip]
 8015caa:	dd04      	ble.n	8015cb6 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x6a>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8015cac:	4632      	mov	r2, r6
 8015cae:	4649      	mov	r1, r9
 8015cb0:	4638      	mov	r0, r7
 8015cb2:	f005 f8db 	bl	801ae6c <memmove>
      ptrdiff_t __count = __last - __first;
 8015cb6:	ebaa 0a0b 	sub.w	sl, sl, fp
	      ++__new_finish;
 8015cba:	3624      	adds	r6, #36	@ 0x24
      if (__count > 0)
 8015cbc:	f1ba 0f00 	cmp.w	sl, #0
 8015cc0:	443e      	add	r6, r7
 8015cc2:	dd04      	ble.n	8015cce <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x82>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8015cc4:	4652      	mov	r2, sl
 8015cc6:	4659      	mov	r1, fp
 8015cc8:	4630      	mov	r0, r6
 8015cca:	f005 f9c7 	bl	801b05c <memcpy>
      return __result + __count;
 8015cce:	4456      	add	r6, sl
	if (__p)
 8015cd0:	f1b9 0f00 	cmp.w	r9, #0
 8015cd4:	d006      	beq.n	8015ce4 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x98>
		    this->_M_impl._M_end_of_storage - __old_start);
 8015cd6:	f8d8 1008 	ldr.w	r1, [r8, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8015cda:	4648      	mov	r0, r9
 8015cdc:	eba1 0109 	sub.w	r1, r1, r9
 8015ce0:	f004 fd68 	bl	801a7b4 <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8015ce4:	2324      	movs	r3, #36	@ 0x24
      this->_M_impl._M_finish = __new_finish;
 8015ce6:	e9c8 7600 	strd	r7, r6, [r8]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8015cea:	fb03 7704 	mla	r7, r3, r4, r7
 8015cee:	f8c8 7008 	str.w	r7, [r8, #8]
    }
 8015cf2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cf6:	461c      	mov	r4, r3
 8015cf8:	e7c6      	b.n	8015c88 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015cfa:	4627      	mov	r7, r4
 8015cfc:	e7c9      	b.n	8015c92 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 8015cfe:	bf00      	nop
 8015d00:	38e38e39 	.word	0x38e38e39
 8015d04:	038e38e3 	.word	0x038e38e3
 8015d08:	0801b17a 	.word	0x0801b17a

08015d0c <_ZN11CANProtocol12AddInterfaceEhP19FDCAN_HandleTypeDef>:
void CANProtocol::AddInterface(uint8_t ID, FDCAN_HandleTypeDef* interface) {
 8015d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d0e:	4606      	mov	r6, r0
 8015d10:	b08d      	sub	sp, #52	@ 0x34
 8015d12:	9201      	str	r2, [sp, #4]
	AddInterfaceID(ID);
 8015d14:	f7ff fcd2 	bl	80156bc <_ZN21CommunicationProtocol14AddInterfaceIDEh>
	AddInterfaceBuffer();
 8015d18:	4630      	mov	r0, r6
 8015d1a:	f7ff fe69 	bl	80159f0 <_ZN21CommunicationProtocol18AddInterfaceBufferEv>
	interfaces.push_back(interface);
 8015d1e:	a901      	add	r1, sp, #4
 8015d20:	f106 0038 	add.w	r0, r6, #56	@ 0x38
 8015d24:	f7ff ff84 	bl	8015c30 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE9push_backERKS1_>
	FDCANTxHeader.BitRateSwitch = FDCAN_BRS_ON; 				// FDCAN_BRS_ON FDCAN_BRS_OFF
 8015d28:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8015d2c:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
	FDCANTxHeader.IdType = FDCAN_STANDARD_ID; 				// FDCAN_STANDARD_ID or FDCAN_CLASSIC_CAN
 8015d30:	2300      	movs	r3, #0
	FDCANTxHeader.BitRateSwitch = FDCAN_BRS_ON; 				// FDCAN_BRS_ON FDCAN_BRS_OFF
 8015d32:	e9cd 1207 	strd	r1, r2, [sp, #28]
	FDCANTxHeader.FDFormat = FDCAN_FD_CAN; 					// FDCAN_FD_CAN or FDCAN_CLASSIC_CAN
 8015d36:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
	FDCANTxHeader.TxFrameType = FDCAN_DATA_FRAME; 			// FDCAN_DATA_FRAME or FDCAN_REMOTE_FRAME
 8015d3a:	e9cd 3304 	strd	r3, r3, [sp, #16]
	FDCANTxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS; 	// FDCAN_NO_TX_EVENTS or FDCAN_STORE_TX_EVENTS
 8015d3e:	e9cd 2309 	strd	r2, r3, [sp, #36]	@ 0x24
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8015d42:	e9d6 7313 	ldrd	r7, r3, [r6, #76]	@ 0x4c
 8015d46:	429f      	cmp	r7, r3
 8015d48:	d00b      	beq.n	8015d62 <_ZN11CANProtocol12AddInterfaceEhP19FDCAN_HandleTypeDef+0x56>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8015d4a:	ad03      	add	r5, sp, #12
 8015d4c:	463c      	mov	r4, r7
	    ++this->_M_impl._M_finish;
 8015d4e:	3724      	adds	r7, #36	@ 0x24
 8015d50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015d52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015d54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015d56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015d58:	682b      	ldr	r3, [r5, #0]
 8015d5a:	6023      	str	r3, [r4, #0]
 8015d5c:	64f7      	str	r7, [r6, #76]	@ 0x4c
}
 8015d5e:	b00d      	add	sp, #52	@ 0x34
 8015d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  _M_realloc_insert(end(), __x);
 8015d62:	aa03      	add	r2, sp, #12
 8015d64:	4639      	mov	r1, r7
 8015d66:	f106 0048 	add.w	r0, r6, #72	@ 0x48
 8015d6a:	f7ff ff6f 	bl	8015c4c <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 8015d6e:	e7f6      	b.n	8015d5e <_ZN11CANProtocol12AddInterfaceEhP19FDCAN_HandleTypeDef+0x52>

08015d70 <_ZN11CANProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb>:
 * @param input data: message to decode
 * @param output index: processed length in the data
 * @param output success: true if message decoded
 * @return the decoded and parsed message based on the custom protocol
 */
MessageHeader CANProtocol::DecodeProtocol(uint8_t ID, std::vector<uint8_t> message, uint16_t* index, bool* success) {
 8015d70:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8015d74:	461d      	mov	r5, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8015d76:	2300      	movs	r3, #0
 8015d78:	4604      	mov	r4, r0
 8015d7a:	60c3      	str	r3, [r0, #12]
 8015d7c:	e9c0 3301 	strd	r3, r3, [r0, #4]
	return *(this->_M_impl._M_start + __n);
 8015d80:	682b      	ldr	r3, [r5, #0]
	MessageHeader decoded_message;

	decoded_message.target_address = message[0];
 8015d82:	781a      	ldrb	r2, [r3, #0]
      { return __normal_iterator(_M_current + __n); }
 8015d84:	1cdf      	adds	r7, r3, #3
 8015d86:	7402      	strb	r2, [r0, #16]
	decoded_message.source_address = message[1];
 8015d88:	785a      	ldrb	r2, [r3, #1]
 8015d8a:	7442      	strb	r2, [r0, #17]
 8015d8c:	789e      	ldrb	r6, [r3, #2]
 8015d8e:	eb07 0806 	add.w	r8, r7, r6
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8015d92:	4630      	mov	r0, r6
 8015d94:	f7ff fe85 	bl	8015aa2 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8015d98:	4406      	add	r6, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8015d9a:	4602      	mov	r2, r0
			      _Category>::__copy_m(__first, __last, __result);
 8015d9c:	4641      	mov	r1, r8
 8015d9e:	9001      	str	r0, [sp, #4]
 8015da0:	4638      	mov	r0, r7
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8015da2:	9603      	str	r6, [sp, #12]
 8015da4:	f7ea ffda 	bl	8000d5c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8015da8:	a901      	add	r1, sp, #4
	  this->_M_impl._M_finish =
 8015daa:	9002      	str	r0, [sp, #8]
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8015dac:	1d20      	adds	r0, r4, #4
 8015dae:	f7ff fee8 	bl	8015b82 <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE.isra.0>
      }
 8015db2:	a801      	add	r0, sp, #4
 8015db4:	f7ea ff2e 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	uint16_t length = message[2];

	// Retrieve payload based on length byte
	decoded_message.payload = std::vector<uint8_t>(message.begin() + 3, message.begin() + 3 + length);

	*success = true;
 8015db8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015dba:	2201      	movs	r2, #1
	*index = message.size();

	return decoded_message;
}
 8015dbc:	4620      	mov	r0, r4
	*success = true;
 8015dbe:	701a      	strb	r2, [r3, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015dc0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015dc4:	1a9b      	subs	r3, r3, r2
	*index = message.size();
 8015dc6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015dc8:	8013      	strh	r3, [r2, #0]
}
 8015dca:	b004      	add	sp, #16
 8015dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015dd0 <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef>:
std::vector<uint8_t> CANProtocol::CodeProtocol(MessageHeader message, FDCAN_TxHeaderTypeDef* TxHeader) {
 8015dd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015dd4:	4698      	mov	r8, r3
	TxHeader->Identifier = message.target_address;
 8015dd6:	7c13      	ldrb	r3, [r2, #16]
std::vector<uint8_t> CANProtocol::CodeProtocol(MessageHeader message, FDCAN_TxHeaderTypeDef* TxHeader) {
 8015dd8:	4617      	mov	r7, r2
 8015dda:	4689      	mov	r9, r1
	TxHeader->Identifier = message.target_address;
 8015ddc:	f8c8 3000 	str.w	r3, [r8]
std::vector<uint8_t> CANProtocol::CodeProtocol(MessageHeader message, FDCAN_TxHeaderTypeDef* TxHeader) {
 8015de0:	4604      	mov	r4, r0
	TxHeader->MessageMarker = marker;
 8015de2:	6c4b      	ldr	r3, [r1, #68]	@ 0x44
	if (marker >= 4294967295)
 8015de4:	1c5a      	adds	r2, r3, #1
 8015de6:	f04f 0200 	mov.w	r2, #0
	TxHeader->MessageMarker = marker;
 8015dea:	f8c8 3020 	str.w	r3, [r8, #32]
		marker = 0;
 8015dee:	bf0c      	ite	eq
 8015df0:	4613      	moveq	r3, r2
		marker++;
 8015df2:	3301      	addne	r3, #1
 8015df4:	644b      	str	r3, [r1, #68]	@ 0x44
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8015df6:	2101      	movs	r1, #1
	: _M_start(), _M_finish(), _M_end_of_storage()
 8015df8:	6082      	str	r2, [r0, #8]
 8015dfa:	e9c0 2200 	strd	r2, r2, [r0]
 8015dfe:	4a41      	ldr	r2, [pc, #260]	@ (8015f04 <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0x134>)
 8015e00:	f7ea ff29 	bl	8000c56 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8015e04:	4606      	mov	r6, r0
      pointer __new_start(this->_M_allocate(__len));
 8015e06:	f7ff fe4c 	bl	8015aa2 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
 8015e0a:	7c7b      	ldrb	r3, [r7, #17]
 8015e0c:	4601      	mov	r1, r0
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8015e0e:	4406      	add	r6, r0
      pointer __new_start(this->_M_allocate(__len));
 8015e10:	4605      	mov	r5, r0
 8015e12:	f801 3b01 	strb.w	r3, [r1], #1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8015e16:	42b1      	cmp	r1, r6
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8015e18:	60a6      	str	r6, [r4, #8]
      this->_M_impl._M_finish = __new_finish;
 8015e1a:	e9c4 0100 	strd	r0, r1, [r4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015e1e:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
 8015e22:	eba3 0302 	sub.w	r3, r3, r2
	coded_message.push_back((uint8_t) message.payload.size());
 8015e26:	fa5f fa83 	uxtb.w	sl, r3
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8015e2a:	d02d      	beq.n	8015e88 <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0xb8>
	    ++this->_M_impl._M_finish;
 8015e2c:	3502      	adds	r5, #2
 8015e2e:	f880 a001 	strb.w	sl, [r0, #1]
 8015e32:	6065      	str	r5, [r4, #4]
      : _M_current(__i) { }
 8015e34:	e9d7 a301 	ldrd	sl, r3, [r7, #4]
	if (__first != __last)
 8015e38:	4553      	cmp	r3, sl
 8015e3a:	d018      	beq.n	8015e6e <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0x9e>
			  - this->_M_impl._M_finish) >= __n)
 8015e3c:	68a2      	ldr	r2, [r4, #8]
    { return __lhs.base() - __rhs.base(); }
 8015e3e:	eba3 050a 	sub.w	r5, r3, sl
      : _M_current(__i) { }
 8015e42:	e9d4 7600 	ldrd	r7, r6, [r4]
 8015e46:	1b92      	subs	r2, r2, r6
	    if (size_type(this->_M_impl._M_end_of_storage
 8015e48:	4295      	cmp	r5, r2
 8015e4a:	d835      	bhi.n	8015eb8 <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0xe8>
 8015e4c:	4619      	mov	r1, r3
 8015e4e:	4632      	mov	r2, r6
 8015e50:	4650      	mov	r0, sl
 8015e52:	f7ea ff83 	bl	8000d5c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		    this->_M_impl._M_finish += __n - __elems_after;
 8015e56:	6862      	ldr	r2, [r4, #4]
 8015e58:	4631      	mov	r1, r6
 8015e5a:	4630      	mov	r0, r6
 8015e5c:	442a      	add	r2, r5
 8015e5e:	6062      	str	r2, [r4, #4]
 8015e60:	f7eb ff08 	bl	8001c74 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8015e64:	4632      	mov	r2, r6
 8015e66:	4651      	mov	r1, sl
 8015e68:	4650      	mov	r0, sl
 8015e6a:	f7ea ff77 	bl	8000d5c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	TxHeader->DataLength = GetProtocolLength(coded_message.size());
 8015e6e:	4648      	mov	r0, r9
 8015e70:	e9d4 3100 	ldrd	r3, r1, [r4]
 8015e74:	1ac9      	subs	r1, r1, r3
 8015e76:	b289      	uxth	r1, r1
 8015e78:	f7ff fe38 	bl	8015aec <_ZN11CANProtocol17GetProtocolLengthEt>
 8015e7c:	f8c8 000c 	str.w	r0, [r8, #12]
}
 8015e80:	4620      	mov	r0, r4
 8015e82:	b003      	add	sp, #12
 8015e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8015e88:	4a1e      	ldr	r2, [pc, #120]	@ (8015f04 <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0x134>)
 8015e8a:	2101      	movs	r1, #1
 8015e8c:	4620      	mov	r0, r4
 8015e8e:	f7ea fee2 	bl	8000c56 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8015e92:	4683      	mov	fp, r0
      pointer __new_start(this->_M_allocate(__len));
 8015e94:	f7ff fe05 	bl	8015aa2 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8015e98:	782b      	ldrb	r3, [r5, #0]
		    this->_M_impl._M_end_of_storage - __old_start);
 8015e9a:	68a1      	ldr	r1, [r4, #8]
      pointer __new_start(this->_M_allocate(__len));
 8015e9c:	4606      	mov	r6, r0
 8015e9e:	7003      	strb	r3, [r0, #0]
 8015ea0:	f880 a001 	strb.w	sl, [r0, #1]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8015ea4:	1b49      	subs	r1, r1, r5
 8015ea6:	4628      	mov	r0, r5
 8015ea8:	f004 fc84 	bl	801a7b4 <_ZdlPvj>
	      ++__new_finish;
 8015eac:	1cb3      	adds	r3, r6, #2
      this->_M_impl._M_start = __new_start;
 8015eae:	6026      	str	r6, [r4, #0]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8015eb0:	445e      	add	r6, fp
      this->_M_impl._M_finish = __new_finish;
 8015eb2:	6063      	str	r3, [r4, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8015eb4:	60a6      	str	r6, [r4, #8]
 8015eb6:	e7bd      	b.n	8015e34 <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0x64>
		  _M_check_len(__n, "vector::_M_range_insert");
 8015eb8:	4629      	mov	r1, r5
 8015eba:	4a13      	ldr	r2, [pc, #76]	@ (8015f08 <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0x138>)
 8015ebc:	4620      	mov	r0, r4
 8015ebe:	9301      	str	r3, [sp, #4]
 8015ec0:	f7ea fec9 	bl	8000c56 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8015ec4:	4683      	mov	fp, r0
		pointer __new_start(this->_M_allocate(__len));
 8015ec6:	f7ff fdec 	bl	8015aa2 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
 8015eca:	4631      	mov	r1, r6
 8015ecc:	4602      	mov	r2, r0
 8015ece:	4605      	mov	r5, r0
 8015ed0:	4638      	mov	r0, r7
 8015ed2:	f7eb fecf 	bl	8001c74 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8015ed6:	9b01      	ldr	r3, [sp, #4]
 8015ed8:	4602      	mov	r2, r0
 8015eda:	4650      	mov	r0, sl
 8015edc:	4619      	mov	r1, r3
 8015ede:	f7ea ff3d 	bl	8000d5c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8015ee2:	4631      	mov	r1, r6
 8015ee4:	4602      	mov	r2, r0
 8015ee6:	4630      	mov	r0, r6
 8015ee8:	f7eb fec4 	bl	8001c74 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8015eec:	4606      	mov	r6, r0
	if (__p)
 8015eee:	b127      	cbz	r7, 8015efa <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0x12a>
			      this->_M_impl._M_end_of_storage - __old_start);
 8015ef0:	68a1      	ldr	r1, [r4, #8]
 8015ef2:	4638      	mov	r0, r7
 8015ef4:	1bc9      	subs	r1, r1, r7
 8015ef6:	f004 fc5d 	bl	801a7b4 <_ZdlPvj>
		this->_M_impl._M_finish = __new_finish;
 8015efa:	e9c4 5600 	strd	r5, r6, [r4]
		this->_M_impl._M_end_of_storage = __new_start + __len;
 8015efe:	445d      	add	r5, fp
 8015f00:	60a5      	str	r5, [r4, #8]
 8015f02:	e7b4      	b.n	8015e6e <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0x9e>
 8015f04:	0801b17a 	.word	0x0801b17a
 8015f08:	0801b1c5 	.word	0x0801b1c5

08015f0c <_ZN11CANProtocol4SendE13MessageHeader>:
HAL_StatusTypeDef CANProtocol::Send(MessageHeader message) {
 8015f0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015f10:	b093      	sub	sp, #76	@ 0x4c
 8015f12:	460e      	mov	r6, r1
	FDCAN_HandleTypeDef* interface_ = GetInterface(message.interface, &success);
 8015f14:	7809      	ldrb	r1, [r1, #0]
HAL_StatusTypeDef CANProtocol::Send(MessageHeader message) {
 8015f16:	4680      	mov	r8, r0
	FDCAN_HandleTypeDef* interface_ = GetInterface(message.interface, &success);
 8015f18:	f10d 0203 	add.w	r2, sp, #3
 8015f1c:	f7ff fe48 	bl	8015bb0 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12GetInterfaceEhPb>
	if (!success) return HAL_ERROR;
 8015f20:	f89d 3003 	ldrb.w	r3, [sp, #3]
	FDCAN_HandleTypeDef* interface_ = GetInterface(message.interface, &success);
 8015f24:	4681      	mov	r9, r0
	if (!success) return HAL_ERROR;
 8015f26:	b91b      	cbnz	r3, 8015f30 <_ZN11CANProtocol4SendE13MessageHeader+0x24>
 8015f28:	2001      	movs	r0, #1
}
 8015f2a:	b013      	add	sp, #76	@ 0x4c
 8015f2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (interface_->State != HAL_FDCAN_STATE_BUSY) return HAL_ERROR;
 8015f30:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 8015f34:	2b02      	cmp	r3, #2
 8015f36:	d1f7      	bne.n	8015f28 <_ZN11CANProtocol4SendE13MessageHeader+0x1c>
	uint8_t index = GetInterfaceIndex(message.interface, &success);
 8015f38:	f10d 0203 	add.w	r2, sp, #3
 8015f3c:	7831      	ldrb	r1, [r6, #0]
 8015f3e:	4640      	mov	r0, r8
	FDCAN_TxHeaderTypeDef TxHeader = FDCANTxHeaders[index];
 8015f40:	ad09      	add	r5, sp, #36	@ 0x24
	uint8_t index = GetInterfaceIndex(message.interface, &success);
 8015f42:	f7ff fc01 	bl	8015748 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
	FDCAN_TxHeaderTypeDef TxHeader = FDCANTxHeaders[index];
 8015f46:	f8d8 4048 	ldr.w	r4, [r8, #72]	@ 0x48
	return *(this->_M_impl._M_start + __n);
 8015f4a:	b207      	sxth	r7, r0
 8015f4c:	eb07 03c7 	add.w	r3, r7, r7, lsl #3
 8015f50:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8015f54:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8015f58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015f5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015f5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015f5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015f60:	6823      	ldr	r3, [r4, #0]
 8015f62:	602b      	str	r3, [r5, #0]
 8015f64:	00bd      	lsls	r5, r7, #2
 8015f66:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015f6a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8015f6e:	7833      	ldrb	r3, [r6, #0]
 8015f70:	f88d 3010 	strb.w	r3, [sp, #16]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015f74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015f78:	1ae4      	subs	r4, r4, r3
	this->_M_impl._M_start = this->_M_allocate(__n);
 8015f7a:	4620      	mov	r0, r4
 8015f7c:	f7ff fd91 	bl	8015aa2 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8015f80:	4404      	add	r4, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8015f82:	4602      	mov	r2, r0
 8015f84:	9005      	str	r0, [sp, #20]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8015f86:	9407      	str	r4, [sp, #28]
 8015f88:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
 8015f8c:	f7ea fee6 	bl	8000d5c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8015f90:	8a33      	ldrh	r3, [r6, #16]
	buffers_to_transfer[index] = CodeProtocol(message, &TxHeader);
 8015f92:	aa04      	add	r2, sp, #16
 8015f94:	4641      	mov	r1, r8
	this->_M_impl._M_finish =
 8015f96:	9006      	str	r0, [sp, #24]
 8015f98:	a801      	add	r0, sp, #4
 8015f9a:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015f9e:	ab09      	add	r3, sp, #36	@ 0x24
 8015fa0:	f7ff ff16 	bl	8015dd0 <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef>
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8015fa4:	a901      	add	r1, sp, #4
 8015fa6:	4638      	mov	r0, r7
 8015fa8:	f7ff fdeb 	bl	8015b82 <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE.isra.0>
      }
 8015fac:	a801      	add	r0, sp, #4
 8015fae:	f7ea fe31 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8015fb2:	a805      	add	r0, sp, #20
 8015fb4:	f7ea fe2e 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return *(this->_M_impl._M_start + __n);
 8015fb8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015fbc:	1959      	adds	r1, r3, r5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015fbe:	595a      	ldr	r2, [r3, r5]
 8015fc0:	684b      	ldr	r3, [r1, #4]
 8015fc2:	1a9b      	subs	r3, r3, r2
	if (buffers_to_transfer[index].size() > 64) return HAL_ERROR;
 8015fc4:	2b40      	cmp	r3, #64	@ 0x40
 8015fc6:	d8af      	bhi.n	8015f28 <_ZN11CANProtocol4SendE13MessageHeader+0x1c>
	return HAL_FDCAN_AddMessageToTxFifoQ(interface_, &TxHeader, &(buffers_to_transfer[index])[0]);
 8015fc8:	a909      	add	r1, sp, #36	@ 0x24
 8015fca:	4648      	mov	r0, r9
 8015fcc:	f7ef fec3 	bl	8005d56 <HAL_FDCAN_AddMessageToTxFifoQ>
 8015fd0:	e7ab      	b.n	8015f2a <_ZN11CANProtocol4SendE13MessageHeader+0x1e>

08015fd2 <_ZN12UARTProtocol17ActivateReceptionEh>:
 * @brief OVERRIDE Activate reception of the associated hardware interface
 *
 * @param input ID: interface ID
 * @return the interface access status
 */
HAL_StatusTypeDef UARTProtocol::ActivateReception(uint8_t ID) {
 8015fd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t index = GetInterfaceIndex(ID, success);
 8015fd4:	f10d 0207 	add.w	r2, sp, #7
 8015fd8:	4604      	mov	r4, r0
 8015fda:	460d      	mov	r5, r1
 8015fdc:	f7ff fbb4 	bl	8015748 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
	if (*success) {
 8015fe0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8015fe4:	b1d3      	cbz	r3, 801601c <_ZN12UARTProtocol17ActivateReceptionEh+0x4a>
	return *(this->_M_impl._M_start + __n);
 8015fe6:	b203      	sxth	r3, r0
		return interfaces[index];
 8015fe8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
	bool success;
	UART_HandleTypeDef* handle = GetInterface(ID, &success);
	if (not success) return HAL_ERROR;
	std::vector<uint8_t>* buffer = GetBuffer(ID, &success);
 8015fea:	4620      	mov	r0, r4
 8015fec:	4629      	mov	r1, r5
 8015fee:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8015ff2:	f10d 0207 	add.w	r2, sp, #7
 8015ff6:	f7ff fbd3 	bl	80157a0 <_ZN21CommunicationProtocol9GetBufferEhPb>
	if (not success) return HAL_ERROR;
 8015ffa:	f89d 3007 	ldrb.w	r3, [sp, #7]
	std::vector<uint8_t>* buffer = GetBuffer(ID, &success);
 8015ffe:	4604      	mov	r4, r0
	if (not success) return HAL_ERROR;
 8016000:	b163      	cbz	r3, 801601c <_ZN12UARTProtocol17ActivateReceptionEh+0x4a>

	HAL_StatusTypeDef status;
	status = UART_CheckIdleState(handle); // to reset UART RxState
 8016002:	4630      	mov	r0, r6
 8016004:	f7f5 fc67 	bl	800b8d6 <UART_CheckIdleState>
	do {
		status = HAL_UARTEx_ReceiveToIdle_DMA(handle, buffer->data(), BUFFER_SIZE);
 8016008:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801600c:	6821      	ldr	r1, [r4, #0]
 801600e:	4630      	mov	r0, r6
 8016010:	f7f5 fdfe 	bl	800bc10 <HAL_UARTEx_ReceiveToIdle_DMA>
	} while (status == HAL_BUSY);
 8016014:	2802      	cmp	r0, #2
 8016016:	d0f7      	beq.n	8016008 <_ZN12UARTProtocol17ActivateReceptionEh+0x36>
	return status;
}
 8016018:	b002      	add	sp, #8
 801601a:	bd70      	pop	{r4, r5, r6, pc}
	if (not success) return HAL_ERROR;
 801601c:	2001      	movs	r0, #1
 801601e:	e7fb      	b.n	8016018 <_ZN12UARTProtocol17ActivateReceptionEh+0x46>

08016020 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8016020:	2800      	cmp	r0, #0
      _M_allocate(size_t __n)
 8016022:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8016024:	d006      	beq.n	8016034 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0x14>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8016026:	da01      	bge.n	801602c <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0xc>
	    std::__throw_bad_alloc();
 8016028:	f004 fc98 	bl	801a95c <_ZSt17__throw_bad_allocv>
      }
 801602c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8016030:	f004 bbe5 	b.w	801a7fe <_Znwj>
 8016034:	bd08      	pop	{r3, pc}

08016036 <_ZN12UARTProtocol13DetectPatternESt6vectorIhSaIhEES2_tPb>:
 * @param input pattern: patter to detect
 * @param input start_index: the detection of the pattern starts at this index
 * @param output success: whether successful
 * @return the base index of the first iteration of the detected pattern in message
 */
uint16_t UARTProtocol::DetectPattern(std::vector<uint8_t> message, std::vector<uint8_t> pattern, uint16_t start_index, bool* success) {
 8016036:	b5f0      	push	{r4, r5, r6, r7, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016038:	e9d1 5000 	ldrd	r5, r0, [r1]
	uint8_t counter = 0;
 801603c:	2100      	movs	r1, #0
 801603e:	1b40      	subs	r0, r0, r5
	for (uint16_t index = start_index; index < message.size(); index++) {
 8016040:	4283      	cmp	r3, r0
 8016042:	d302      	bcc.n	801604a <_ZN12UARTProtocol13DetectPatternESt6vectorIhSaIhEES2_tPb+0x14>
 8016044:	2300      	movs	r3, #0
			*success = true;
			return index - counter + 1;
		}
	}
	*success = false;
	return 0;
 8016046:	4618      	mov	r0, r3
 8016048:	e00e      	b.n	8016068 <_ZN12UARTProtocol13DetectPatternESt6vectorIhSaIhEES2_tPb+0x32>
	return *(this->_M_impl._M_start + __n);
 801604a:	6816      	ldr	r6, [r2, #0]
		if (message[index] != pattern[counter]) {
 801604c:	5cef      	ldrb	r7, [r5, r3]
 801604e:	3301      	adds	r3, #1
 8016050:	5c74      	ldrb	r4, [r6, r1]
 8016052:	42a7      	cmp	r7, r4
 8016054:	d10b      	bne.n	801606e <_ZN12UARTProtocol13DetectPatternESt6vectorIhSaIhEES2_tPb+0x38>
		counter++;
 8016056:	3101      	adds	r1, #1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016058:	6854      	ldr	r4, [r2, #4]
 801605a:	b2c9      	uxtb	r1, r1
 801605c:	1ba4      	subs	r4, r4, r6
		if (counter >= pattern.size()) {
 801605e:	42a1      	cmp	r1, r4
 8016060:	d306      	bcc.n	8016070 <_ZN12UARTProtocol13DetectPatternESt6vectorIhSaIhEES2_tPb+0x3a>
			return index - counter + 1;
 8016062:	1a5b      	subs	r3, r3, r1
 8016064:	b298      	uxth	r0, r3
 8016066:	2301      	movs	r3, #1
			*success = true;
 8016068:	9a05      	ldr	r2, [sp, #20]
 801606a:	7013      	strb	r3, [r2, #0]
}
 801606c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			counter = 0;
 801606e:	2100      	movs	r1, #0
	for (uint16_t index = start_index; index < message.size(); index++) {
 8016070:	b29b      	uxth	r3, r3
 8016072:	e7e5      	b.n	8016040 <_ZN12UARTProtocol13DetectPatternESt6vectorIhSaIhEES2_tPb+0xa>

08016074 <_ZN12UARTProtocol16PatternPresentAtEtSt6vectorIhSaIhEES2_>:
 * @param input start_index: the detection of the pattern starts at this index
 * @param input message: message used to find the pattern
 * @param input pattern: patter to detect
 * @param output success: true if pattern detected
 */
bool UARTProtocol::PatternPresentAt(uint16_t start_index, std::vector<uint8_t> message, std::vector<uint8_t> pattern) {
 8016074:	b570      	push	{r4, r5, r6, lr}
    uint16_t index = start_index;
    for (uint8_t byte : pattern) {
 8016076:	e9d3 3400 	ldrd	r3, r4, [r3]
 801607a:	1ac9      	subs	r1, r1, r3
 801607c:	18c8      	adds	r0, r1, r3
 801607e:	42a3      	cmp	r3, r4
 8016080:	b280      	uxth	r0, r0
 8016082:	d101      	bne.n	8016088 <_ZN12UARTProtocol16PatternPresentAtEtSt6vectorIhSaIhEES2_+0x14>
        if (byte != message[index])
            return false;
        index++;
    }
    return true;
 8016084:	2001      	movs	r0, #1
}
 8016086:	bd70      	pop	{r4, r5, r6, pc}
        if (byte != message[index])
 8016088:	6816      	ldr	r6, [r2, #0]
    for (uint8_t byte : pattern) {
 801608a:	f813 5b01 	ldrb.w	r5, [r3], #1
        if (byte != message[index])
 801608e:	5c30      	ldrb	r0, [r6, r0]
 8016090:	42a8      	cmp	r0, r5
 8016092:	d0f3      	beq.n	801607c <_ZN12UARTProtocol16PatternPresentAtEtSt6vectorIhSaIhEES2_+0x8>
            return false;
 8016094:	2000      	movs	r0, #0
 8016096:	e7f6      	b.n	8016086 <_ZN12UARTProtocol16PatternPresentAtEtSt6vectorIhSaIhEES2_+0x12>

08016098 <_ZN12UARTProtocol11GetChecksumESt6vectorIhSaIhEE>:
 8016098:	e9d1 3200 	ldrd	r3, r2, [r1]
 *
 * @param input message: vector of bytes to derive the checksum
 * @return the 1-byte checksum
 */
uint8_t UARTProtocol::GetChecksum(std::vector<uint8_t> message) {
	uint8_t checksum = 0;
 801609c:	2000      	movs	r0, #0
	for (uint8_t byte : message)
 801609e:	429a      	cmp	r2, r3
 80160a0:	d102      	bne.n	80160a8 <_ZN12UARTProtocol11GetChecksumESt6vectorIhSaIhEE+0x10>
		checksum += byte;
	checksum = ~checksum + 1;
 80160a2:	4240      	negs	r0, r0
	return checksum;
}
 80160a4:	b2c0      	uxtb	r0, r0
 80160a6:	4770      	bx	lr
		checksum += byte;
 80160a8:	f813 1b01 	ldrb.w	r1, [r3], #1
 80160ac:	4408      	add	r0, r1
 80160ae:	b2c0      	uxtb	r0, r0
	return *this;
 80160b0:	e7f5      	b.n	801609e <_ZN12UARTProtocol11GetChecksumESt6vectorIhSaIhEE+0x6>

080160b2 <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE>:
 80160b2:	e9d3 0300 	ldrd	r0, r3, [r3]
 * @param input start_index: index (included) from which the checksum check is started
 * @param input end_index: index (excluded) from which the checksum check is finished
 * @param input message: byte vector message
 * @return true if the checksum is valid
 */
bool UARTProtocol::Checksum(uint16_t start_index, uint16_t end_index, std::vector<uint8_t> message) {
 80160b6:	b510      	push	{r4, lr}
 80160b8:	1a1b      	subs	r3, r3, r0
	uint8_t sum = 0;
	if (start_index > message.size()) return false;
 80160ba:	4299      	cmp	r1, r3
 80160bc:	d812      	bhi.n	80160e4 <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE+0x32>
	if (end_index > message.size()) return false;
 80160be:	429a      	cmp	r2, r3
 80160c0:	d810      	bhi.n	80160e4 <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE+0x32>
	if (start_index > end_index) return false;
 80160c2:	4291      	cmp	r1, r2
 80160c4:	d80e      	bhi.n	80160e4 <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE+0x32>
 80160c6:	1843      	adds	r3, r0, r1
	uint8_t sum = 0;
 80160c8:	2000      	movs	r0, #0
	for (uint16_t index = start_index; index < end_index; index++) {
 80160ca:	4291      	cmp	r1, r2
 80160cc:	d103      	bne.n	80160d6 <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE+0x24>
		sum += message[index];
	}
	return (sum == 0);
 80160ce:	fab0 f080 	clz	r0, r0
 80160d2:	0940      	lsrs	r0, r0, #5
}
 80160d4:	bd10      	pop	{r4, pc}
		sum += message[index];
 80160d6:	f813 4b01 	ldrb.w	r4, [r3], #1
	for (uint16_t index = start_index; index < end_index; index++) {
 80160da:	3101      	adds	r1, #1
		sum += message[index];
 80160dc:	4420      	add	r0, r4
	for (uint16_t index = start_index; index < end_index; index++) {
 80160de:	b289      	uxth	r1, r1
		sum += message[index];
 80160e0:	b2c0      	uxtb	r0, r0
	for (uint16_t index = start_index; index < end_index; index++) {
 80160e2:	e7f2      	b.n	80160ca <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE+0x18>
	if (start_index > message.size()) return false;
 80160e4:	2000      	movs	r0, #0
 80160e6:	e7f5      	b.n	80160d4 <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE+0x22>

080160e8 <_ZN12UARTProtocol7IsRS485Eh>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80160e8:	e9d0 3217 	ldrd	r3, r2, [r0, #92]	@ 0x5c
 *
 * @param input ID: interface ID
 * @return true if interface is RS485
 */
bool UARTProtocol::IsRS485(uint8_t ID) {
	for (uint8_t &RS485_interface : RS485_interfaces) {
 80160ec:	4293      	cmp	r3, r2
 80160ee:	d101      	bne.n	80160f4 <_ZN12UARTProtocol7IsRS485Eh+0xc>
		if (RS485_interface == ID) return true;
	}
	return false;
 80160f0:	2000      	movs	r0, #0
 80160f2:	4770      	bx	lr
		if (RS485_interface == ID) return true;
 80160f4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80160f8:	4288      	cmp	r0, r1
 80160fa:	d1f7      	bne.n	80160ec <_ZN12UARTProtocol7IsRS485Eh+0x4>
 80160fc:	2001      	movs	r0, #1
}
 80160fe:	4770      	bx	lr

08016100 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8016100:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 8016102:	680d      	ldr	r5, [r1, #0]
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8016104:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 8016106:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 8016108:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 801610c:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 801610e:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8016110:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 8016112:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 8016114:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8016116:	688d      	ldr	r5, [r1, #8]
 8016118:	6085      	str	r5, [r0, #8]
      }
 801611a:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 801611c:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 801611e:	e9c1 3300 	strd	r3, r3, [r1]
 8016122:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 8016126:	f7ea fd75 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      }
 801612a:	b005      	add	sp, #20
 801612c:	bd30      	pop	{r4, r5, pc}

0801612e <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb>:
MessageHeader UARTProtocol::DecodeProtocol(uint8_t ID, std::vector<uint8_t> message, uint16_t* index, bool* success) {
 801612e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016132:	460c      	mov	r4, r1
 8016134:	469a      	mov	sl, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8016136:	2300      	movs	r3, #0
 8016138:	b08d      	sub	sp, #52	@ 0x34
	if (IsRS485(ID)) RS485_offset = 1;
 801613a:	4611      	mov	r1, r2
MessageHeader UARTProtocol::DecodeProtocol(uint8_t ID, std::vector<uint8_t> message, uint16_t* index, bool* success) {
 801613c:	4605      	mov	r5, r0
 801613e:	60c3      	str	r3, [r0, #12]
 8016140:	4616      	mov	r6, r2
 8016142:	e9c0 3301 	strd	r3, r3, [r0, #4]
	if (IsRS485(ID)) RS485_offset = 1;
 8016146:	4620      	mov	r0, r4
 8016148:	f7ff ffce 	bl	80160e8 <_ZN12UARTProtocol7IsRS485Eh>
	uint16_t start_index = DetectPattern(message, protocol_start, *index, success);
 801614c:	4651      	mov	r1, sl
	if (IsRS485(ID)) RS485_offset = 1;
 801614e:	4607      	mov	r7, r0
	uint16_t start_index = DetectPattern(message, protocol_start, *index, success);
 8016150:	a806      	add	r0, sp, #24
 8016152:	f7ea fe0f 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8016156:	f104 0144 	add.w	r1, r4, #68	@ 0x44
 801615a:	a809      	add	r0, sp, #36	@ 0x24
 801615c:	f7ea fe0a 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8016160:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016162:	aa09      	add	r2, sp, #36	@ 0x24
 8016164:	a906      	add	r1, sp, #24
 8016166:	9300      	str	r3, [sp, #0]
 8016168:	4620      	mov	r0, r4
 801616a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801616c:	881b      	ldrh	r3, [r3, #0]
 801616e:	f7ff ff62 	bl	8016036 <_ZN12UARTProtocol13DetectPatternESt6vectorIhSaIhEES2_tPb>
 8016172:	4680      	mov	r8, r0
      }
 8016174:	a809      	add	r0, sp, #36	@ 0x24
 8016176:	f7ea fd4d 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801617a:	a806      	add	r0, sp, #24
 801617c:	f7ea fd4a 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (*success) {
 8016180:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016182:	781b      	ldrb	r3, [r3, #0]
 8016184:	b193      	cbz	r3, 80161ac <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x7e>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016186:	e9da 3200 	ldrd	r3, r2, [sl]
 801618a:	1ad2      	subs	r2, r2, r3
 801618c:	9203      	str	r2, [sp, #12]
 801618e:	e9d4 1211 	ldrd	r1, r2, [r4, #68]	@ 0x44
 8016192:	1a52      	subs	r2, r2, r1
		if (message.size() <= start_index + protocol_start.size() + 1 + RS485_offset) {*success = false; return decoded_message;} // Error - discard message
 8016194:	9903      	ldr	r1, [sp, #12]
 8016196:	eb02 0b08 	add.w	fp, r2, r8
 801619a:	eb0b 0907 	add.w	r9, fp, r7
 801619e:	f109 0201 	add.w	r2, r9, #1
 80161a2:	428a      	cmp	r2, r1
 80161a4:	d306      	bcc.n	80161b4 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x86>
 80161a6:	2300      	movs	r3, #0
 80161a8:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80161aa:	7013      	strb	r3, [r2, #0]
}
 80161ac:	4628      	mov	r0, r5
 80161ae:	b00d      	add	sp, #52	@ 0x34
 80161b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (IsRS485(ID))
 80161b4:	4631      	mov	r1, r6
 80161b6:	4620      	mov	r0, r4
 80161b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80161bc:	f7ff ff94 	bl	80160e8 <_ZN12UARTProtocol7IsRS485Eh>
 80161c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80161c4:	2800      	cmp	r0, #0
 80161c6:	d079      	beq.n	80162bc <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x18e>
			decoded_message.target_address = message[start_index + protocol_start.size()];
 80161c8:	f813 100b 	ldrb.w	r1, [r3, fp]
 80161cc:	7429      	strb	r1, [r5, #16]
		decoded_message.source_address = message[start_index + protocol_start.size() + RS485_offset];
 80161ce:	f813 1009 	ldrb.w	r1, [r3, r9]
 80161d2:	7469      	strb	r1, [r5, #17]
		uint16_t length = message[start_index + protocol_start.size() + 1 + RS485_offset];
 80161d4:	5c9e      	ldrb	r6, [r3, r2]
 80161d6:	e9d4 1214 	ldrd	r1, r2, [r4, #80]	@ 0x50
 80161da:	1a52      	subs	r2, r2, r1
		if (message.size() <= start_index + protocol_start.size() + length + 2 + RS485_offset + protocol_end.size()) {*success = false; return decoded_message;} // Error - discard message
 80161dc:	9903      	ldr	r1, [sp, #12]
 80161de:	3202      	adds	r2, #2
 80161e0:	443a      	add	r2, r7
 80161e2:	445a      	add	r2, fp
 80161e4:	4432      	add	r2, r6
 80161e6:	428a      	cmp	r2, r1
 80161e8:	d2dd      	bcs.n	80161a6 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x78>
      { return __normal_iterator(_M_current + __n); }
 80161ea:	f109 0902 	add.w	r9, r9, #2
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80161ee:	4630      	mov	r0, r6
 80161f0:	4499      	add	r9, r3
 80161f2:	f7ff ff15 	bl	8016020 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80161f6:	1983      	adds	r3, r0, r6
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80161f8:	4602      	mov	r2, r0
 80161fa:	eb09 0b06 	add.w	fp, r9, r6
 80161fe:	9009      	str	r0, [sp, #36]	@ 0x24
 8016200:	4648      	mov	r0, r9
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8016202:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016204:	4659      	mov	r1, fp
 8016206:	f7ea fda9 	bl	8000d5c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		decoded_message.payload = std::vector<uint8_t>(message.begin() + start_index + protocol_start.size() + 2 + RS485_offset, message.begin() + start_index + protocol_start.size() + 2 + RS485_offset + length);
 801620a:	a909      	add	r1, sp, #36	@ 0x24
	  this->_M_impl._M_finish =
 801620c:	900a      	str	r0, [sp, #40]	@ 0x28
 801620e:	1d28      	adds	r0, r5, #4
 8016210:	f7ff ff76 	bl	8016100 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8016214:	a809      	add	r0, sp, #36	@ 0x24
 8016216:	f7ea fcfd 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (!Checksum(start_index, start_index + protocol_start.size() + length + 3 + RS485_offset, message)) {*success = false; return decoded_message;} // Checksum Error - discard message
 801621a:	4651      	mov	r1, sl
 801621c:	a809      	add	r0, sp, #36	@ 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801621e:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	@ 0x44
 8016222:	eba3 0902 	sub.w	r9, r3, r2
 8016226:	f7ea fda5 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 801622a:	ab09      	add	r3, sp, #36	@ 0x24
 801622c:	4641      	mov	r1, r8
 801622e:	f109 0903 	add.w	r9, r9, #3
 8016232:	4620      	mov	r0, r4
 8016234:	44c1      	add	r9, r8
 8016236:	44b9      	add	r9, r7
 8016238:	44b1      	add	r9, r6
 801623a:	fa1f f989 	uxth.w	r9, r9
 801623e:	464a      	mov	r2, r9
 8016240:	f7ff ff37 	bl	80160b2 <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE>
 8016244:	4681      	mov	r9, r0
      }
 8016246:	a809      	add	r0, sp, #36	@ 0x24
 8016248:	f7ea fce4 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801624c:	f1b9 0f00 	cmp.w	r9, #0
 8016250:	d0a9      	beq.n	80161a6 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x78>
		if (!PatternPresentAt(start_index + protocol_start.size() + length + 3 + RS485_offset, message, protocol_end)) {*success = false; return decoded_message;} // Checksum Error - discard message
 8016252:	4651      	mov	r1, sl
 8016254:	a806      	add	r0, sp, #24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016256:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	@ 0x44
 801625a:	eba3 0902 	sub.w	r9, r3, r2
 801625e:	f7ea fd89 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8016262:	f104 0150 	add.w	r1, r4, #80	@ 0x50
 8016266:	a809      	add	r0, sp, #36	@ 0x24
 8016268:	f109 0903 	add.w	r9, r9, #3
 801626c:	f7ea fd82 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8016270:	ab09      	add	r3, sp, #36	@ 0x24
 8016272:	aa06      	add	r2, sp, #24
 8016274:	44c1      	add	r9, r8
 8016276:	4620      	mov	r0, r4
 8016278:	44b9      	add	r9, r7
 801627a:	44b1      	add	r9, r6
 801627c:	fa1f f989 	uxth.w	r9, r9
 8016280:	4649      	mov	r1, r9
 8016282:	f7ff fef7 	bl	8016074 <_ZN12UARTProtocol16PatternPresentAtEtSt6vectorIhSaIhEES2_>
 8016286:	4681      	mov	r9, r0
      }
 8016288:	a809      	add	r0, sp, #36	@ 0x24
 801628a:	f7ea fcc3 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801628e:	a806      	add	r0, sp, #24
 8016290:	f7ea fcc0 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8016294:	f1b9 0f00 	cmp.w	r9, #0
 8016298:	d085      	beq.n	80161a6 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x78>
		*success = true;
 801629a:	2301      	movs	r3, #1
 801629c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801629e:	7013      	strb	r3, [r2, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80162a0:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	@ 0x44
 80162a4:	1a9b      	subs	r3, r3, r2
 80162a6:	e9d4 1214 	ldrd	r1, r2, [r4, #80]	@ 0x50
 80162aa:	1a52      	subs	r2, r2, r1
		*index = start_index + protocol_start.size() + length + 3 + RS485_offset + protocol_end.size();
 80162ac:	4413      	add	r3, r2
 80162ae:	3303      	adds	r3, #3
 80162b0:	4498      	add	r8, r3
 80162b2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80162b4:	4447      	add	r7, r8
 80162b6:	443e      	add	r6, r7
 80162b8:	801e      	strh	r6, [r3, #0]
 80162ba:	e777      	b.n	80161ac <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x7e>
			decoded_message.target_address = ALL;
 80162bc:	21ff      	movs	r1, #255	@ 0xff
 80162be:	e785      	b.n	80161cc <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x9e>

080162c0 <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag.isra.0>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 80162c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 80162c2:	1a57      	subs	r7, r2, r1
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 80162c4:	4604      	mov	r4, r0
 80162c6:	460d      	mov	r5, r1
 80162c8:	4616      	mov	r6, r2
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 80162ca:	d502      	bpl.n	80162d2 <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag.isra.0+0x12>
	  __throw_length_error(
 80162cc:	4807      	ldr	r0, [pc, #28]	@ (80162ec <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag.isra.0+0x2c>)
 80162ce:	f004 fb4b 	bl	801a968 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80162d2:	4638      	mov	r0, r7
 80162d4:	f7ff fea4 	bl	8016020 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80162d8:	4407      	add	r7, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80162da:	4602      	mov	r2, r0
 80162dc:	6020      	str	r0, [r4, #0]
 80162de:	4631      	mov	r1, r6
 80162e0:	4628      	mov	r0, r5
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80162e2:	60a7      	str	r7, [r4, #8]
 80162e4:	f7ea fd3a 	bl	8000d5c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	  this->_M_impl._M_finish =
 80162e8:	6060      	str	r0, [r4, #4]
	}
 80162ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80162ec:	0801b194 	.word	0x0801b194

080162f0 <_ZN12UARTProtocolC1Ev>:
UARTProtocol::UARTProtocol() {
 80162f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80162f2:	4b17      	ldr	r3, [pc, #92]	@ (8016350 <_ZN12UARTProtocolC1Ev+0x60>)
	: _M_start(), _M_finish(), _M_end_of_storage()
 80162f4:	2500      	movs	r5, #0
	_M_range_initialize(__l.begin(), __l.end(),
 80162f6:	4a17      	ldr	r2, [pc, #92]	@ (8016354 <_ZN12UARTProtocolC1Ev+0x64>)
 80162f8:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
 80162fa:	6405      	str	r5, [r0, #64]	@ 0x40
 80162fc:	6003      	str	r3, [r0, #0]
	_M_range_initialize(__l.begin(), __l.end(),
 80162fe:	1e91      	subs	r1, r2, #2
	: _M_start(), _M_finish(), _M_end_of_storage()
 8016300:	64c5      	str	r5, [r0, #76]	@ 0x4c
 8016302:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016306:	e9c0 5503 	strd	r5, r5, [r0, #12]
 801630a:	e9c0 5505 	strd	r5, r5, [r0, #20]
 801630e:	e9c0 5508 	strd	r5, r5, [r0, #32]
 8016312:	e9c0 550a 	strd	r5, r5, [r0, #40]	@ 0x28
 8016316:	e9c0 550c 	strd	r5, r5, [r0, #48]	@ 0x30
 801631a:	e9c0 550e 	strd	r5, r5, [r0, #56]	@ 0x38
 801631e:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
	_M_range_initialize(__l.begin(), __l.end(),
 8016322:	3044      	adds	r0, #68	@ 0x44
 8016324:	f7ff ffcc 	bl	80162c0 <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag.isra.0>
 8016328:	23ff      	movs	r3, #255	@ 0xff
 801632a:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801632e:	f10d 0205 	add.w	r2, sp, #5
 8016332:	a901      	add	r1, sp, #4
	: _M_start(), _M_finish(), _M_end_of_storage()
 8016334:	65a5      	str	r5, [r4, #88]	@ 0x58
 8016336:	f88d 3004 	strb.w	r3, [sp, #4]
 801633a:	e9c4 5514 	strd	r5, r5, [r4, #80]	@ 0x50
	_M_range_initialize(__l.begin(), __l.end(),
 801633e:	f7ff ffbf 	bl	80162c0 <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag.isra.0>
}
 8016342:	4620      	mov	r0, r4
	: _M_start(), _M_finish(), _M_end_of_storage()
 8016344:	6665      	str	r5, [r4, #100]	@ 0x64
 8016346:	e9c4 5517 	strd	r5, r5, [r4, #92]	@ 0x5c
 801634a:	b003      	add	sp, #12
 801634c:	bd30      	pop	{r4, r5, pc}
 801634e:	bf00      	nop
 8016350:	0801b4b8 	.word	0x0801b4b8
 8016354:	0801b492 	.word	0x0801b492

08016358 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0>:
	if (__first != __last)
 8016358:	429a      	cmp	r2, r3
	insert(const_iterator __position, _InputIterator __first,
 801635a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801635e:	4604      	mov	r4, r0
 8016360:	460d      	mov	r5, r1
 8016362:	4617      	mov	r7, r2
 8016364:	4699      	mov	r9, r3
 8016366:	d022      	beq.n	80163ae <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x56>
    { return __lhs.base() - __rhs.base(); }
 8016368:	eba3 0802 	sub.w	r8, r3, r2
      : _M_current(__i) { }
 801636c:	f8d0 a000 	ldr.w	sl, [r0]
			  - this->_M_impl._M_finish) >= __n)
 8016370:	e9d0 6301 	ldrd	r6, r3, [r0, #4]
 8016374:	1b9b      	subs	r3, r3, r6
	    if (size_type(this->_M_impl._M_end_of_storage
 8016376:	4598      	cmp	r8, r3
 8016378:	d831      	bhi.n	80163de <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x86>
    { return __lhs.base() - __rhs.base(); }
 801637a:	eba6 0a01 	sub.w	sl, r6, r1
		if (__elems_after > __n)
 801637e:	45d0      	cmp	r8, sl
 8016380:	d217      	bcs.n	80163b2 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x5a>
		    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 8016382:	eba6 0a08 	sub.w	sl, r6, r8
 8016386:	4632      	mov	r2, r6
 8016388:	4631      	mov	r1, r6
 801638a:	4650      	mov	r0, sl
 801638c:	f7eb fc72 	bl	8001c74 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		    this->_M_impl._M_finish += __n;
 8016390:	6863      	ldr	r3, [r4, #4]
	  if (_Num)
 8016392:	ebba 0205 	subs.w	r2, sl, r5
 8016396:	4443      	add	r3, r8
 8016398:	6063      	str	r3, [r4, #4]
 801639a:	d003      	beq.n	80163a4 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x4c>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 801639c:	4629      	mov	r1, r5
 801639e:	1ab0      	subs	r0, r6, r2
 80163a0:	f004 fd64 	bl	801ae6c <memmove>
			      _Category>::__copy_m(__first, __last, __result);
 80163a4:	462a      	mov	r2, r5
 80163a6:	4649      	mov	r1, r9
 80163a8:	4638      	mov	r0, r7
 80163aa:	f7ea fcd7 	bl	8000d5c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	}
 80163ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { _M_current += __n; return *this; }
 80163b2:	eb02 0b0a 	add.w	fp, r2, sl
 80163b6:	4649      	mov	r1, r9
 80163b8:	4632      	mov	r2, r6
		    this->_M_impl._M_finish += __n - __elems_after;
 80163ba:	eba8 080a 	sub.w	r8, r8, sl
 80163be:	4658      	mov	r0, fp
 80163c0:	f7ea fccc 	bl	8000d5c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 80163c4:	6862      	ldr	r2, [r4, #4]
 80163c6:	4631      	mov	r1, r6
 80163c8:	4628      	mov	r0, r5
 80163ca:	4442      	add	r2, r8
 80163cc:	6062      	str	r2, [r4, #4]
 80163ce:	f7eb fc51 	bl	8001c74 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		    this->_M_impl._M_finish += __elems_after;
 80163d2:	6863      	ldr	r3, [r4, #4]
 80163d4:	462a      	mov	r2, r5
 80163d6:	4659      	mov	r1, fp
 80163d8:	4453      	add	r3, sl
 80163da:	6063      	str	r3, [r4, #4]
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80163dc:	e7e4      	b.n	80163a8 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x50>
		  _M_check_len(__n, "vector::_M_range_insert");
 80163de:	4641      	mov	r1, r8
 80163e0:	4a12      	ldr	r2, [pc, #72]	@ (801642c <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0xd4>)
 80163e2:	f7ea fc38 	bl	8000c56 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 80163e6:	4683      	mov	fp, r0
		pointer __new_start(this->_M_allocate(__len));
 80163e8:	f7ff fe1a 	bl	8016020 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
			      _Category>::__copy_m(__first, __last, __result);
 80163ec:	4629      	mov	r1, r5
 80163ee:	4602      	mov	r2, r0
 80163f0:	4680      	mov	r8, r0
 80163f2:	4650      	mov	r0, sl
 80163f4:	f7eb fc3e 	bl	8001c74 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 80163f8:	4649      	mov	r1, r9
 80163fa:	4602      	mov	r2, r0
 80163fc:	4638      	mov	r0, r7
 80163fe:	f7ea fcad 	bl	8000d5c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8016402:	4631      	mov	r1, r6
 8016404:	4602      	mov	r2, r0
 8016406:	4628      	mov	r0, r5
 8016408:	f7eb fc34 	bl	8001c74 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 801640c:	4605      	mov	r5, r0
	if (__p)
 801640e:	f1ba 0f00 	cmp.w	sl, #0
 8016412:	d005      	beq.n	8016420 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0xc8>
			      this->_M_impl._M_end_of_storage - __old_start);
 8016414:	68a1      	ldr	r1, [r4, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8016416:	4650      	mov	r0, sl
 8016418:	eba1 010a 	sub.w	r1, r1, sl
 801641c:	f004 f9ca 	bl	801a7b4 <_ZdlPvj>
		this->_M_impl._M_end_of_storage = __new_start + __len;
 8016420:	eb08 000b 	add.w	r0, r8, fp
		this->_M_impl._M_finish = __new_finish;
 8016424:	e9c4 8500 	strd	r8, r5, [r4]
		this->_M_impl._M_end_of_storage = __new_start + __len;
 8016428:	60a0      	str	r0, [r4, #8]
	  return begin() + __offset;
 801642a:	e7c0      	b.n	80163ae <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x56>
 801642c:	0801b1c5 	.word	0x0801b1c5

08016430 <_ZN12UARTProtocol12CodeProtocolE13MessageHeader>:
std::vector<uint8_t> UARTProtocol::CodeProtocol(MessageHeader message) {
 8016430:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8016432:	460e      	mov	r6, r1
	: _M_start(), _M_finish(), _M_end_of_storage()
 8016434:	2100      	movs	r1, #0
 8016436:	4615      	mov	r5, r2
 8016438:	4604      	mov	r4, r0
 801643a:	6081      	str	r1, [r0, #8]
 801643c:	e9c0 1100 	strd	r1, r1, [r0]
	coded_message.insert(coded_message.end(), std::begin(protocol_start), std::end(protocol_start));
 8016440:	e9d6 2311 	ldrd	r2, r3, [r6, #68]	@ 0x44
 8016444:	f7ff ff88 	bl	8016358 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0>
	if (IsRS485(message.interface)) coded_message.push_back(message.target_address);
 8016448:	7829      	ldrb	r1, [r5, #0]
 801644a:	4630      	mov	r0, r6
 801644c:	f7ff fe4c 	bl	80160e8 <_ZN12UARTProtocol7IsRS485Eh>
 8016450:	b120      	cbz	r0, 801645c <_ZN12UARTProtocol12CodeProtocolE13MessageHeader+0x2c>
 8016452:	f105 0110 	add.w	r1, r5, #16
 8016456:	4620      	mov	r0, r4
 8016458:	f7f9 f91e 	bl	800f698 <_ZNSt6vectorIhSaIhEE9push_backERKh>
	coded_message.push_back(message.source_address);
 801645c:	f105 0111 	add.w	r1, r5, #17
 8016460:	4620      	mov	r0, r4
 8016462:	f7f9 f919 	bl	800f698 <_ZNSt6vectorIhSaIhEE9push_backERKh>
      { emplace_back(std::move(__x)); }
 8016466:	a901      	add	r1, sp, #4
 8016468:	4620      	mov	r0, r4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801646a:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 801646e:	1a9b      	subs	r3, r3, r2
	coded_message.push_back((uint8_t) message.payload.size());
 8016470:	f88d 3004 	strb.w	r3, [sp, #4]
      { emplace_back(std::move(__x)); }
 8016474:	f7f9 f8de 	bl	800f634 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
	coded_message.insert(coded_message.end(), message.payload.begin(), message.payload.end());
 8016478:	6861      	ldr	r1, [r4, #4]
 801647a:	4620      	mov	r0, r4
 801647c:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 8016480:	f7ff ff6a 	bl	8016358 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0>
	coded_message.push_back(GetChecksum(coded_message));
 8016484:	4621      	mov	r1, r4
 8016486:	a801      	add	r0, sp, #4
 8016488:	f7ea fc74 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 801648c:	a901      	add	r1, sp, #4
 801648e:	4630      	mov	r0, r6
 8016490:	f7ff fe02 	bl	8016098 <_ZN12UARTProtocol11GetChecksumESt6vectorIhSaIhEE>
 8016494:	f10d 0103 	add.w	r1, sp, #3
 8016498:	f88d 0003 	strb.w	r0, [sp, #3]
 801649c:	4620      	mov	r0, r4
 801649e:	f7f9 f8c9 	bl	800f634 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
      }
 80164a2:	a801      	add	r0, sp, #4
 80164a4:	f7ea fbb6 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	coded_message.insert(coded_message.end(), std::begin(protocol_end), std::end(protocol_end));
 80164a8:	4620      	mov	r0, r4
 80164aa:	6861      	ldr	r1, [r4, #4]
 80164ac:	e9d6 2314 	ldrd	r2, r3, [r6, #80]	@ 0x50
 80164b0:	f7ff ff52 	bl	8016358 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0>
}
 80164b4:	4620      	mov	r0, r4
 80164b6:	b004      	add	sp, #16
 80164b8:	bd70      	pop	{r4, r5, r6, pc}

080164ba <_ZN12UARTProtocol4SendE13MessageHeader>:
HAL_StatusTypeDef UARTProtocol::Send(MessageHeader message) {
 80164ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80164be:	b08a      	sub	sp, #40	@ 0x28
 80164c0:	460d      	mov	r5, r1
	uint8_t index = GetInterfaceIndex(ID, success);
 80164c2:	7809      	ldrb	r1, [r1, #0]
 80164c4:	4604      	mov	r4, r0
 80164c6:	f10d 0207 	add.w	r2, sp, #7
 80164ca:	f7ff f93d 	bl	8015748 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
	if (*success) {
 80164ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80164d2:	2b00      	cmp	r3, #0
 80164d4:	d042      	beq.n	801655c <_ZN12UARTProtocol4SendE13MessageHeader+0xa2>
		return interfaces[index];
 80164d6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
	return *(this->_M_impl._M_start + __n);
 80164d8:	b200      	sxth	r0, r0
 80164da:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
	if (interface_->hdmatx->State != HAL_DMA_STATE_READY || interface_->gState != HAL_UART_STATE_READY) return HAL_BUSY;
 80164de:	6fb3      	ldr	r3, [r6, #120]	@ 0x78
 80164e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80164e4:	2b01      	cmp	r3, #1
 80164e6:	d13b      	bne.n	8016560 <_ZN12UARTProtocol4SendE13MessageHeader+0xa6>
 80164e8:	f8d6 3084 	ldr.w	r3, [r6, #132]	@ 0x84
 80164ec:	2b20      	cmp	r3, #32
 80164ee:	d137      	bne.n	8016560 <_ZN12UARTProtocol4SendE13MessageHeader+0xa6>
	uint8_t index = GetInterfaceIndex(message.interface, &success);
 80164f0:	f10d 0207 	add.w	r2, sp, #7
 80164f4:	7829      	ldrb	r1, [r5, #0]
 80164f6:	4620      	mov	r0, r4
 80164f8:	f7ff f926 	bl	8015748 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
 80164fc:	4629      	mov	r1, r5
 80164fe:	b200      	sxth	r0, r0
 8016500:	6867      	ldr	r7, [r4, #4]
 8016502:	f811 3b04 	ldrb.w	r3, [r1], #4
 8016506:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801650a:	f88d 3014 	strb.w	r3, [sp, #20]
 801650e:	ea4f 0880 	mov.w	r8, r0, lsl #2
 8016512:	eb07 0780 	add.w	r7, r7, r0, lsl #2
 8016516:	a806      	add	r0, sp, #24
 8016518:	f7ea fc2c 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 801651c:	8a2b      	ldrh	r3, [r5, #16]
	buffers_to_transfer[index] = CodeProtocol(message); //std::vector<uint8_t>
 801651e:	aa05      	add	r2, sp, #20
 8016520:	4621      	mov	r1, r4
 8016522:	a802      	add	r0, sp, #8
 8016524:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8016528:	f7ff ff82 	bl	8016430 <_ZN12UARTProtocol12CodeProtocolE13MessageHeader>
 801652c:	a902      	add	r1, sp, #8
 801652e:	4638      	mov	r0, r7
 8016530:	f7ff fde6 	bl	8016100 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8016534:	a802      	add	r0, sp, #8
 8016536:	f7ea fb6d 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801653a:	a806      	add	r0, sp, #24
 801653c:	f7ea fb6a 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return *(this->_M_impl._M_start + __n);
 8016540:	6863      	ldr	r3, [r4, #4]
	return HAL_UART_Transmit_DMA(interface_, &(buffers_to_transfer[index])[0], buffers_to_transfer[index].size());
 8016542:	4630      	mov	r0, r6
 8016544:	eb03 0208 	add.w	r2, r3, r8
 8016548:	f853 1008 	ldr.w	r1, [r3, r8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801654c:	6852      	ldr	r2, [r2, #4]
 801654e:	1a52      	subs	r2, r2, r1
 8016550:	b292      	uxth	r2, r2
 8016552:	f7f4 faff 	bl	800ab54 <HAL_UART_Transmit_DMA>
}
 8016556:	b00a      	add	sp, #40	@ 0x28
 8016558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!success) return HAL_ERROR;
 801655c:	2001      	movs	r0, #1
 801655e:	e7fa      	b.n	8016556 <_ZN12UARTProtocol4SendE13MessageHeader+0x9c>
	if (interface_->hdmatx->State != HAL_DMA_STATE_READY || interface_->gState != HAL_UART_STATE_READY) return HAL_BUSY;
 8016560:	2002      	movs	r0, #2
 8016562:	e7f8      	b.n	8016556 <_ZN12UARTProtocol4SendE13MessageHeader+0x9c>

08016564 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
 8016564:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8016566:	b170      	cbz	r0, 8016586 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0+0x22>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8016568:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 801656c:	d306      	bcc.n	801657c <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0+0x18>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 801656e:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8016572:	d301      	bcc.n	8016578 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0+0x14>
	      std::__throw_bad_array_new_length();
 8016574:	f004 f9f5 	bl	801a962 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8016578:	f004 f9f0 	bl	801a95c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801657c:	0080      	lsls	r0, r0, #2
      }
 801657e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016582:	f004 b93c 	b.w	801a7fe <_Znwj>
 8016586:	bd08      	pop	{r3, pc}

08016588 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8016588:	2800      	cmp	r0, #0
      _M_allocate(size_t __n)
 801658a:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801658c:	d006      	beq.n	801659c <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0+0x14>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 801658e:	da01      	bge.n	8016594 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0+0xc>
	    std::__throw_bad_alloc();
 8016590:	f004 f9e4 	bl	801a95c <_ZSt17__throw_bad_allocv>
      }
 8016594:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8016598:	f004 b931 	b.w	801a7fe <_Znwj>
 801659c:	bd08      	pop	{r3, pc}

0801659e <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
 801659e:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80165a0:	b170      	cbz	r0, 80165c0 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0+0x22>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80165a2:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 80165a6:	d306      	bcc.n	80165b6 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0+0x18>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 80165a8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80165ac:	d301      	bcc.n	80165b2 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0+0x14>
	      std::__throw_bad_array_new_length();
 80165ae:	f004 f9d8 	bl	801a962 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 80165b2:	f004 f9d3 	bl	801a95c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80165b6:	0080      	lsls	r0, r0, #2
      }
 80165b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80165bc:	f004 b91f 	b.w	801a7fe <_Znwj>
 80165c0:	bd08      	pop	{r3, pc}

080165c2 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80165c2:	2800      	cmp	r0, #0
      _M_allocate(size_t __n)
 80165c4:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80165c6:	d006      	beq.n	80165d6 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0x14>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80165c8:	da01      	bge.n	80165ce <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0xc>
	    std::__throw_bad_alloc();
 80165ca:	f004 f9c7 	bl	801a95c <_ZSt17__throw_bad_allocv>
      }
 80165ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80165d2:	f004 b914 	b.w	801a7fe <_Znwj>
 80165d6:	bd08      	pop	{r3, pc}

080165d8 <_ZN9Registers9GetTypeIDItEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 80165d8:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80165da:	4926      	ldr	r1, [pc, #152]	@ (8016674 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 80165dc:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80165de:	4826      	ldr	r0, [pc, #152]	@ (8016678 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 80165e0:	f004 f9a4 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 80165e4:	2800      	cmp	r0, #0
 80165e6:	d133      	bne.n	8016650 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 80165e8:	4923      	ldr	r1, [pc, #140]	@ (8016678 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 80165ea:	4608      	mov	r0, r1
 80165ec:	f004 f99e 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 80165f0:	2800      	cmp	r0, #0
 80165f2:	d12f      	bne.n	8016654 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 80165f4:	4921      	ldr	r1, [pc, #132]	@ (801667c <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa4>)
 80165f6:	4820      	ldr	r0, [pc, #128]	@ (8016678 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 80165f8:	f004 f998 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 80165fc:	bb60      	cbnz	r0, 8016658 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 80165fe:	4920      	ldr	r1, [pc, #128]	@ (8016680 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa8>)
 8016600:	481d      	ldr	r0, [pc, #116]	@ (8016678 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 8016602:	f004 f993 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8016606:	bb48      	cbnz	r0, 801665c <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8016608:	491e      	ldr	r1, [pc, #120]	@ (8016684 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xac>)
 801660a:	481b      	ldr	r0, [pc, #108]	@ (8016678 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 801660c:	f004 f98e 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8016610:	bb30      	cbnz	r0, 8016660 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 8016612:	491d      	ldr	r1, [pc, #116]	@ (8016688 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xb0>)
 8016614:	4818      	ldr	r0, [pc, #96]	@ (8016678 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 8016616:	f004 f989 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 801661a:	bb18      	cbnz	r0, 8016664 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 801661c:	491b      	ldr	r1, [pc, #108]	@ (801668c <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xb4>)
 801661e:	4816      	ldr	r0, [pc, #88]	@ (8016678 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 8016620:	f004 f984 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8016624:	bb00      	cbnz	r0, 8016668 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 8016626:	491a      	ldr	r1, [pc, #104]	@ (8016690 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xb8>)
 8016628:	4813      	ldr	r0, [pc, #76]	@ (8016678 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 801662a:	f004 f97f 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 801662e:	b9e8      	cbnz	r0, 801666c <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8016630:	4918      	ldr	r1, [pc, #96]	@ (8016694 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xbc>)
 8016632:	4811      	ldr	r0, [pc, #68]	@ (8016678 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 8016634:	f004 f97a 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8016638:	b9d0      	cbnz	r0, 8016670 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 801663a:	4917      	ldr	r1, [pc, #92]	@ (8016698 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xc0>)
 801663c:	480e      	ldr	r0, [pc, #56]	@ (8016678 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 801663e:	f004 f975 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 8016642:	2800      	cmp	r0, #0
 8016644:	bf14      	ite	ne
 8016646:	2309      	movne	r3, #9
 8016648:	2300      	moveq	r3, #0
 801664a:	7020      	strb	r0, [r4, #0]
}
 801664c:	4618      	mov	r0, r3
 801664e:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8016650:	2300      	movs	r3, #0
 8016652:	e7fa      	b.n	801664a <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8016654:	2301      	movs	r3, #1
 8016656:	e7f8      	b.n	801664a <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8016658:	2302      	movs	r3, #2
 801665a:	e7f6      	b.n	801664a <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 801665c:	2303      	movs	r3, #3
 801665e:	e7f4      	b.n	801664a <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8016660:	2304      	movs	r3, #4
 8016662:	e7f2      	b.n	801664a <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 8016664:	2305      	movs	r3, #5
 8016666:	e7f0      	b.n	801664a <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8016668:	2306      	movs	r3, #6
 801666a:	e7ee      	b.n	801664a <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 801666c:	2307      	movs	r3, #7
 801666e:	e7ec      	b.n	801664a <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8016670:	2308      	movs	r3, #8
 8016672:	e7ea      	b.n	801664a <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
 8016674:	0801b5d4 	.word	0x0801b5d4
 8016678:	0801b5c4 	.word	0x0801b5c4
 801667c:	0801b5b4 	.word	0x0801b5b4
 8016680:	0801b5a4 	.word	0x0801b5a4
 8016684:	0801b5dc 	.word	0x0801b5dc
 8016688:	0801b5cc 	.word	0x0801b5cc
 801668c:	0801b5bc 	.word	0x0801b5bc
 8016690:	0801b5ac 	.word	0x0801b5ac
 8016694:	0801b59c 	.word	0x0801b59c
 8016698:	0801b594 	.word	0x0801b594

0801669c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>:
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801669c:	4926      	ldr	r1, [pc, #152]	@ (8016738 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 801669e:	b510      	push	{r4, lr}
 80166a0:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80166a2:	4608      	mov	r0, r1
 80166a4:	f004 f942 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 80166a8:	2800      	cmp	r0, #0
 80166aa:	d133      	bne.n	8016714 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 80166ac:	4923      	ldr	r1, [pc, #140]	@ (801673c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa0>)
 80166ae:	4822      	ldr	r0, [pc, #136]	@ (8016738 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 80166b0:	f004 f93c 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 80166b4:	2800      	cmp	r0, #0
 80166b6:	d12f      	bne.n	8016718 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 80166b8:	4921      	ldr	r1, [pc, #132]	@ (8016740 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa4>)
 80166ba:	481f      	ldr	r0, [pc, #124]	@ (8016738 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 80166bc:	f004 f936 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 80166c0:	bb60      	cbnz	r0, 801671c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 80166c2:	4920      	ldr	r1, [pc, #128]	@ (8016744 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa8>)
 80166c4:	481c      	ldr	r0, [pc, #112]	@ (8016738 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 80166c6:	f004 f931 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 80166ca:	bb48      	cbnz	r0, 8016720 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 80166cc:	491e      	ldr	r1, [pc, #120]	@ (8016748 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xac>)
 80166ce:	481a      	ldr	r0, [pc, #104]	@ (8016738 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 80166d0:	f004 f92c 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 80166d4:	bb30      	cbnz	r0, 8016724 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 80166d6:	491d      	ldr	r1, [pc, #116]	@ (801674c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb0>)
 80166d8:	4817      	ldr	r0, [pc, #92]	@ (8016738 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 80166da:	f004 f927 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 80166de:	bb18      	cbnz	r0, 8016728 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 80166e0:	491b      	ldr	r1, [pc, #108]	@ (8016750 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb4>)
 80166e2:	4815      	ldr	r0, [pc, #84]	@ (8016738 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 80166e4:	f004 f922 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 80166e8:	bb00      	cbnz	r0, 801672c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 80166ea:	491a      	ldr	r1, [pc, #104]	@ (8016754 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb8>)
 80166ec:	4812      	ldr	r0, [pc, #72]	@ (8016738 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 80166ee:	f004 f91d 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 80166f2:	b9e8      	cbnz	r0, 8016730 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 80166f4:	4918      	ldr	r1, [pc, #96]	@ (8016758 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xbc>)
 80166f6:	4810      	ldr	r0, [pc, #64]	@ (8016738 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 80166f8:	f004 f918 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 80166fc:	b9d0      	cbnz	r0, 8016734 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 80166fe:	4917      	ldr	r1, [pc, #92]	@ (801675c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xc0>)
 8016700:	480d      	ldr	r0, [pc, #52]	@ (8016738 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8016702:	f004 f913 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 8016706:	2800      	cmp	r0, #0
 8016708:	bf14      	ite	ne
 801670a:	2309      	movne	r3, #9
 801670c:	2300      	moveq	r3, #0
 801670e:	7020      	strb	r0, [r4, #0]
}
 8016710:	4618      	mov	r0, r3
 8016712:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8016714:	2300      	movs	r3, #0
 8016716:	e7fa      	b.n	801670e <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8016718:	2301      	movs	r3, #1
 801671a:	e7f8      	b.n	801670e <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 801671c:	2302      	movs	r3, #2
 801671e:	e7f6      	b.n	801670e <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8016720:	2303      	movs	r3, #3
 8016722:	e7f4      	b.n	801670e <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8016724:	2304      	movs	r3, #4
 8016726:	e7f2      	b.n	801670e <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 8016728:	2305      	movs	r3, #5
 801672a:	e7f0      	b.n	801670e <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 801672c:	2306      	movs	r3, #6
 801672e:	e7ee      	b.n	801670e <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 8016730:	2307      	movs	r3, #7
 8016732:	e7ec      	b.n	801670e <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8016734:	2308      	movs	r3, #8
 8016736:	e7ea      	b.n	801670e <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
 8016738:	0801b5d4 	.word	0x0801b5d4
 801673c:	0801b5c4 	.word	0x0801b5c4
 8016740:	0801b5b4 	.word	0x0801b5b4
 8016744:	0801b5a4 	.word	0x0801b5a4
 8016748:	0801b5dc 	.word	0x0801b5dc
 801674c:	0801b5cc 	.word	0x0801b5cc
 8016750:	0801b5bc 	.word	0x0801b5bc
 8016754:	0801b5ac 	.word	0x0801b5ac
 8016758:	0801b59c 	.word	0x0801b59c
 801675c:	0801b594 	.word	0x0801b594

08016760 <_ZN10Publishers4InitEP9RegistersP13Communication>:
 * @brief Initialize the class with references to other classes. Set default values.
 *
 * @param input registers_: the Registers instance
 * @param input communication_: the Communication instance
 */
void Publishers::Init(Registers* registers_, Communication* communication_) {
 8016760:	b510      	push	{r4, lr}
	registers = registers_;
	communication = communication_;
 8016762:	e9c0 1201 	strd	r1, r2, [r0, #4]

	PublishersSemaphore = osSemaphoreNew(1,1,NULL);
 8016766:	2101      	movs	r1, #1
void Publishers::Init(Registers* registers_, Communication* communication_) {
 8016768:	4604      	mov	r4, r0
	PublishersSemaphore = osSemaphoreNew(1,1,NULL);
 801676a:	2200      	movs	r2, #0
 801676c:	4608      	mov	r0, r1
 801676e:	f7f5 fe85 	bl	800c47c <osSemaphoreNew>
 8016772:	6020      	str	r0, [r4, #0]
	osSemaphoreRelease(PublishersSemaphore);
}
 8016774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSemaphoreRelease(PublishersSemaphore);
 8016778:	f7f5 bf10 	b.w	800c59c <osSemaphoreRelease>

0801677c <_ZN10Publishers13FindPublisherEhPb>:
 *
 * @param input ID: the publisher ID
 * @param output success: whether successful
 * @return the publisher pointer
 */
Publisher* Publishers::FindPublisher(uint8_t ID, bool* success) {
 801677c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801677e:	4604      	mov	r4, r0
 8016780:	460f      	mov	r7, r1
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8016782:	6800      	ldr	r0, [r0, #0]
 8016784:	f04f 31ff 	mov.w	r1, #4294967295
Publisher* Publishers::FindPublisher(uint8_t ID, bool* success) {
 8016788:	4616      	mov	r6, r2
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 801678a:	f7f5 fed3 	bl	800c534 <osSemaphoreAcquire>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801678e:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
	for (Publisher &publisher : publishers) {
 8016792:	429a      	cmp	r2, r3
 8016794:	461d      	mov	r5, r3
 8016796:	d105      	bne.n	80167a4 <_ZN10Publishers13FindPublisherEhPb+0x28>
			osSemaphoreRelease(PublishersSemaphore);
			*success = true;
			return publisher_pointer;
		}
	}
	osSemaphoreRelease(PublishersSemaphore);
 8016798:	6820      	ldr	r0, [r4, #0]
 801679a:	f7f5 feff 	bl	800c59c <osSemaphoreRelease>
	*success = false;
	return NULL;
 801679e:	2300      	movs	r3, #0
 80167a0:	461d      	mov	r5, r3
 80167a2:	e008      	b.n	80167b6 <_ZN10Publishers13FindPublisherEhPb+0x3a>
		if (publisher.ID == ID) {
 80167a4:	462b      	mov	r3, r5
 80167a6:	f813 1b20 	ldrb.w	r1, [r3], #32
 80167aa:	42b9      	cmp	r1, r7
 80167ac:	d1f1      	bne.n	8016792 <_ZN10Publishers13FindPublisherEhPb+0x16>
			osSemaphoreRelease(PublishersSemaphore);
 80167ae:	6820      	ldr	r0, [r4, #0]
 80167b0:	f7f5 fef4 	bl	800c59c <osSemaphoreRelease>
 80167b4:	2301      	movs	r3, #1
}
 80167b6:	4628      	mov	r0, r5
			*success = true;
 80167b8:	7033      	strb	r3, [r6, #0]
}
 80167ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080167bc <_ZN10Publishers18SetPublisherStatusEhb>:
bool Publishers::SetPublisherStatus(uint8_t ID, bool status) {
 80167bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80167be:	4616      	mov	r6, r2
	Publisher* publisher = FindPublisher(ID, &success);
 80167c0:	f10d 0207 	add.w	r2, sp, #7
bool Publishers::SetPublisherStatus(uint8_t ID, bool status) {
 80167c4:	4604      	mov	r4, r0
	Publisher* publisher = FindPublisher(ID, &success);
 80167c6:	f7ff ffd9 	bl	801677c <_ZN10Publishers13FindPublisherEhPb>
	if (!success) return false;
 80167ca:	f89d 7007 	ldrb.w	r7, [sp, #7]
	Publisher* publisher = FindPublisher(ID, &success);
 80167ce:	4605      	mov	r5, r0
	if (!success) return false;
 80167d0:	b157      	cbz	r7, 80167e8 <_ZN10Publishers18SetPublisherStatusEhb+0x2c>
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 80167d2:	f04f 31ff 	mov.w	r1, #4294967295
 80167d6:	6820      	ldr	r0, [r4, #0]
 80167d8:	f7f5 feac 	bl	800c534 <osSemaphoreAcquire>
	publisher->counter = 0;
 80167dc:	2300      	movs	r3, #0
	osSemaphoreRelease(PublishersSemaphore);
 80167de:	6820      	ldr	r0, [r4, #0]
	publisher->counter = 0;
 80167e0:	80ab      	strh	r3, [r5, #4]
	publisher->activated = status;
 80167e2:	706e      	strb	r6, [r5, #1]
	osSemaphoreRelease(PublishersSemaphore);
 80167e4:	f7f5 feda 	bl	800c59c <osSemaphoreRelease>
}
 80167e8:	4638      	mov	r0, r7
 80167ea:	b003      	add	sp, #12
 80167ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080167ee <_ZN10Publishers17ActivatePublisherEh>:
	return SetPublisherStatus(ID, true);
 80167ee:	2201      	movs	r2, #1
 80167f0:	f7ff bfe4 	b.w	80167bc <_ZN10Publishers18SetPublisherStatusEhb>

080167f4 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 80167f4:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 80167f6:	4611      	mov	r1, r2
 80167f8:	b508      	push	{r3, lr}
			if (length != 2) return false;
 80167fa:	d108      	bne.n	801680e <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x1a>
			self->SetPublisherStatus(input[0], (bool) input[1]);
 80167fc:	7852      	ldrb	r2, [r2, #1]
 80167fe:	7809      	ldrb	r1, [r1, #0]
 8016800:	3a00      	subs	r2, #0
 8016802:	bf18      	it	ne
 8016804:	2201      	movne	r2, #1
 8016806:	f7ff ffd9 	bl	80167bc <_ZN10Publishers18SetPublisherStatusEhb>
			return true;
 801680a:	2001      	movs	r0, #1
		}
 801680c:	bd08      	pop	{r3, pc}
			if (length != 2) return false;
 801680e:	2000      	movs	r0, #0
 8016810:	e7fc      	b.n	801680c <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x18>

08016812 <_ZN10Publishers21SetPublisherPrescalerEht>:
bool Publishers::SetPublisherPrescaler(uint8_t ID, uint16_t prescaler) {
 8016812:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016814:	4616      	mov	r6, r2
	Publisher* publisher = FindPublisher(ID, &success);
 8016816:	f10d 0207 	add.w	r2, sp, #7
bool Publishers::SetPublisherPrescaler(uint8_t ID, uint16_t prescaler) {
 801681a:	4604      	mov	r4, r0
	Publisher* publisher = FindPublisher(ID, &success);
 801681c:	f7ff ffae 	bl	801677c <_ZN10Publishers13FindPublisherEhPb>
	if (!success) return false;
 8016820:	f89d 7007 	ldrb.w	r7, [sp, #7]
	Publisher* publisher = FindPublisher(ID, &success);
 8016824:	4605      	mov	r5, r0
	if (!success) return false;
 8016826:	b147      	cbz	r7, 801683a <_ZN10Publishers21SetPublisherPrescalerEht+0x28>
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8016828:	f04f 31ff 	mov.w	r1, #4294967295
 801682c:	6820      	ldr	r0, [r4, #0]
 801682e:	f7f5 fe81 	bl	800c534 <osSemaphoreAcquire>
	osSemaphoreRelease(PublishersSemaphore);
 8016832:	6820      	ldr	r0, [r4, #0]
	publisher->prescaler = prescaler;
 8016834:	806e      	strh	r6, [r5, #2]
	osSemaphoreRelease(PublishersSemaphore);
 8016836:	f7f5 feb1 	bl	800c59c <osSemaphoreRelease>
}
 801683a:	4638      	mov	r0, r7
 801683c:	b003      	add	sp, #12
 801683e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016840 <_ZZN10Publishers12AddRegistersEvENUlPvtPttE1_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 8016840:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint16_t* input, uint16_t length) -> bool {
 8016842:	4611      	mov	r1, r2
 8016844:	b508      	push	{r3, lr}
			if (length != 2) return false;
 8016846:	d105      	bne.n	8016854 <_ZZN10Publishers12AddRegistersEvENUlPvtPttE1_4_FUNES0_tS1_t+0x14>
			self->SetPublisherPrescaler((uint8_t) input[0], input[1]);
 8016848:	8852      	ldrh	r2, [r2, #2]
 801684a:	7809      	ldrb	r1, [r1, #0]
 801684c:	f7ff ffe1 	bl	8016812 <_ZN10Publishers21SetPublisherPrescalerEht>
 8016850:	2001      	movs	r0, #1
		}
 8016852:	bd08      	pop	{r3, pc}
			if (length != 2) return false;
 8016854:	2000      	movs	r0, #0
 8016856:	e7fc      	b.n	8016852 <_ZZN10Publishers12AddRegistersEvENUlPvtPttE1_4_FUNES0_tS1_t+0x12>

08016858 <_ZN10Publishers10StopTopicsEh>:
bool Publishers::StopTopics(uint8_t ID) {
 8016858:	b573      	push	{r0, r1, r4, r5, r6, lr}
	Publisher* publisher = FindPublisher(ID, &success);
 801685a:	f10d 0207 	add.w	r2, sp, #7
bool Publishers::StopTopics(uint8_t ID) {
 801685e:	4604      	mov	r4, r0
	Publisher* publisher = FindPublisher(ID, &success);
 8016860:	f7ff ff8c 	bl	801677c <_ZN10Publishers13FindPublisherEhPb>
	if (!success) return false;
 8016864:	f89d 6007 	ldrb.w	r6, [sp, #7]
	Publisher* publisher = FindPublisher(ID, &success);
 8016868:	4605      	mov	r5, r0
	if (!success) return false;
 801686a:	b166      	cbz	r6, 8016886 <_ZN10Publishers10StopTopicsEh+0x2e>
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 801686c:	f04f 31ff 	mov.w	r1, #4294967295
 8016870:	6820      	ldr	r0, [r4, #0]
 8016872:	f7f5 fe5f 	bl	800c534 <osSemaphoreAcquire>
		topic.activated = false;
 8016876:	2100      	movs	r1, #0
 8016878:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
	for (Topic &topic : publisher->topics) {
 801687c:	429a      	cmp	r2, r3
 801687e:	d105      	bne.n	801688c <_ZN10Publishers10StopTopicsEh+0x34>
	osSemaphoreRelease(PublishersSemaphore);
 8016880:	6820      	ldr	r0, [r4, #0]
 8016882:	f7f5 fe8b 	bl	800c59c <osSemaphoreRelease>
}
 8016886:	4630      	mov	r0, r6
 8016888:	b002      	add	sp, #8
 801688a:	bd70      	pop	{r4, r5, r6, pc}
		topic.activated = false;
 801688c:	f803 1b04 	strb.w	r1, [r3], #4
	return *this;
 8016890:	e7f4      	b.n	801687c <_ZN10Publishers10StopTopicsEh+0x24>

08016892 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE2_4_FUNES0_tS1_t>:
			self->StopTopics(*input);
 8016892:	7811      	ldrb	r1, [r2, #0]
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8016894:	b508      	push	{r3, lr}
			self->StopTopics(*input);
 8016896:	f7ff ffdf 	bl	8016858 <_ZN10Publishers10StopTopicsEh>
		}
 801689a:	2001      	movs	r0, #1
 801689c:	bd08      	pop	{r3, pc}

0801689e <_ZN10Publishers23UnlinkFromAllInterfacesEh>:
bool Publishers::UnlinkFromAllInterfaces(uint8_t ID) {
 801689e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	Publisher* publisher = FindPublisher(ID, &success);
 80168a0:	f10d 0207 	add.w	r2, sp, #7
bool Publishers::UnlinkFromAllInterfaces(uint8_t ID) {
 80168a4:	4605      	mov	r5, r0
	Publisher* publisher = FindPublisher(ID, &success);
 80168a6:	f7ff ff69 	bl	801677c <_ZN10Publishers13FindPublisherEhPb>
	if (!success) return false;
 80168aa:	f89d 6007 	ldrb.w	r6, [sp, #7]
	Publisher* publisher = FindPublisher(ID, &success);
 80168ae:	4604      	mov	r4, r0
	if (!success) return false;
 80168b0:	b166      	cbz	r6, 80168cc <_ZN10Publishers23UnlinkFromAllInterfacesEh+0x2e>
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 80168b2:	f04f 31ff 	mov.w	r1, #4294967295
 80168b6:	6828      	ldr	r0, [r5, #0]
 80168b8:	f7f5 fe3c 	bl	800c534 <osSemaphoreAcquire>
	osSemaphoreRelease(PublishersSemaphore);
 80168bc:	6828      	ldr	r0, [r5, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 80168be:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 80168c2:	4293      	cmp	r3, r2
	    this->_M_impl._M_finish = __pos;
 80168c4:	bf18      	it	ne
 80168c6:	60e3      	strne	r3, [r4, #12]
 80168c8:	f7f5 fe68 	bl	800c59c <osSemaphoreRelease>
}
 80168cc:	4630      	mov	r0, r6
 80168ce:	b002      	add	sp, #8
 80168d0:	bd70      	pop	{r4, r5, r6, pc}

080168d2 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE5_4_FUNES0_tS1_t>:
			self->UnlinkFromAllInterfaces(*input);
 80168d2:	7811      	ldrb	r1, [r2, #0]
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 80168d4:	b508      	push	{r3, lr}
			self->UnlinkFromAllInterfaces(*input);
 80168d6:	f7ff ffe2 	bl	801689e <_ZN10Publishers23UnlinkFromAllInterfacesEh>
		}
 80168da:	2001      	movs	r0, #1
 80168dc:	bd08      	pop	{r3, pc}

080168de <_ZN10Publishers9FindTopicEhtPb>:
 * @param input ID: the publisher ID
 * @param input topic_ID: the topic ID / register address to find
 * @param output success: whether successful
 * @return the topic pointer
 */
Topic* Publishers::FindTopic(uint8_t ID, uint16_t topic_ID, bool* success) {
 80168de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168e0:	461c      	mov	r4, r3
 80168e2:	4617      	mov	r7, r2
	Publisher* publisher = FindPublisher(ID, success);
 80168e4:	461a      	mov	r2, r3
Topic* Publishers::FindTopic(uint8_t ID, uint16_t topic_ID, bool* success) {
 80168e6:	4606      	mov	r6, r0
	Publisher* publisher = FindPublisher(ID, success);
 80168e8:	f7ff ff48 	bl	801677c <_ZN10Publishers13FindPublisherEhPb>
	if (not *success)
 80168ec:	7823      	ldrb	r3, [r4, #0]
	Publisher* publisher = FindPublisher(ID, success);
 80168ee:	4605      	mov	r5, r0
	if (not *success)
 80168f0:	b173      	cbz	r3, 8016910 <_ZN10Publishers9FindTopicEhtPb+0x32>
		return NULL;

	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 80168f2:	f04f 31ff 	mov.w	r1, #4294967295
 80168f6:	6830      	ldr	r0, [r6, #0]
 80168f8:	f7f5 fe1c 	bl	800c534 <osSemaphoreAcquire>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80168fc:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
	for (Topic &topic : publisher->topics) {
 8016900:	429a      	cmp	r2, r3
 8016902:	461d      	mov	r5, r3
 8016904:	d106      	bne.n	8016914 <_ZN10Publishers9FindTopicEhtPb+0x36>
			osSemaphoreRelease(PublishersSemaphore);
			*success = true;
			return topic_pointer;
		}
	}
	osSemaphoreRelease(PublishersSemaphore);
 8016906:	6830      	ldr	r0, [r6, #0]
 8016908:	f7f5 fe48 	bl	800c59c <osSemaphoreRelease>
	*success = false;
 801690c:	2300      	movs	r3, #0
 801690e:	7023      	strb	r3, [r4, #0]
		return NULL;
 8016910:	2500      	movs	r5, #0
 8016912:	e008      	b.n	8016926 <_ZN10Publishers9FindTopicEhtPb+0x48>
		if (topic.ID == topic_ID) {
 8016914:	8869      	ldrh	r1, [r5, #2]
 8016916:	1d2b      	adds	r3, r5, #4
 8016918:	42b9      	cmp	r1, r7
 801691a:	d1f1      	bne.n	8016900 <_ZN10Publishers9FindTopicEhtPb+0x22>
			osSemaphoreRelease(PublishersSemaphore);
 801691c:	6830      	ldr	r0, [r6, #0]
 801691e:	f7f5 fe3d 	bl	800c59c <osSemaphoreRelease>
			*success = true;
 8016922:	2301      	movs	r3, #1
 8016924:	7023      	strb	r3, [r4, #0]
	return NULL;
}
 8016926:	4628      	mov	r0, r5
 8016928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801692a <_ZN10Publishers14SetTopicStatusEhtb>:
bool Publishers::SetTopicStatus(uint8_t ID, uint16_t topic_ID, bool status) {
 801692a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801692c:	461e      	mov	r6, r3
	Topic* topic = FindTopic(ID, topic_ID, &success);
 801692e:	f10d 0307 	add.w	r3, sp, #7
bool Publishers::SetTopicStatus(uint8_t ID, uint16_t topic_ID, bool status) {
 8016932:	4604      	mov	r4, r0
	Topic* topic = FindTopic(ID, topic_ID, &success);
 8016934:	f7ff ffd3 	bl	80168de <_ZN10Publishers9FindTopicEhtPb>
	if (!success) return false;
 8016938:	f89d 7007 	ldrb.w	r7, [sp, #7]
	Topic* topic = FindTopic(ID, topic_ID, &success);
 801693c:	4605      	mov	r5, r0
	if (!success) return false;
 801693e:	b147      	cbz	r7, 8016952 <_ZN10Publishers14SetTopicStatusEhtb+0x28>
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8016940:	f04f 31ff 	mov.w	r1, #4294967295
 8016944:	6820      	ldr	r0, [r4, #0]
 8016946:	f7f5 fdf5 	bl	800c534 <osSemaphoreAcquire>
	osSemaphoreRelease(PublishersSemaphore);
 801694a:	6820      	ldr	r0, [r4, #0]
	topic->activated = status;
 801694c:	702e      	strb	r6, [r5, #0]
	osSemaphoreRelease(PublishersSemaphore);
 801694e:	f7f5 fe25 	bl	800c59c <osSemaphoreRelease>
}
 8016952:	4638      	mov	r0, r7
 8016954:	b003      	add	sp, #12
 8016956:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016958 <_ZN10Publishers13ActivateTopicEht>:
	return SetTopicStatus(ID, topic_ID, true);
 8016958:	2301      	movs	r3, #1
 801695a:	f7ff bfe6 	b.w	801692a <_ZN10Publishers14SetTopicStatusEhtb>

0801695e <_ZZN10Publishers12AddRegistersEvENUlPvtPttE0_4_FUNES0_tS1_t>:
			if (length != 3) return false;
 801695e:	2b03      	cmp	r3, #3
		[](void* context, uint16_t register_id, uint16_t* input, uint16_t length) -> bool {
 8016960:	4611      	mov	r1, r2
 8016962:	b508      	push	{r3, lr}
			if (length != 3) return false;
 8016964:	d109      	bne.n	801697a <_ZZN10Publishers12AddRegistersEvENUlPvtPttE0_4_FUNES0_tS1_t+0x1c>
			self->SetTopicStatus((uint8_t) input[0], input[1], (bool) input[2]);
 8016966:	8893      	ldrh	r3, [r2, #4]
 8016968:	7809      	ldrb	r1, [r1, #0]
 801696a:	3b00      	subs	r3, #0
 801696c:	8852      	ldrh	r2, [r2, #2]
 801696e:	bf18      	it	ne
 8016970:	2301      	movne	r3, #1
 8016972:	f7ff ffda 	bl	801692a <_ZN10Publishers14SetTopicStatusEhtb>
			return true;
 8016976:	2001      	movs	r0, #1
		}
 8016978:	bd08      	pop	{r3, pc}
			if (length != 3) return false;
 801697a:	2000      	movs	r0, #0
 801697c:	e7fc      	b.n	8016978 <_ZZN10Publishers12AddRegistersEvENUlPvtPttE0_4_FUNES0_tS1_t+0x1a>

0801697e <_ZN10Publishers20FindPublishInterfaceEhhPb>:
 * @param input ID: the publisher ID
 * @param input interface_ID: the interface ID to find
 * @param output success: whether successful
 * @return the interface information pointer
 */
PublishInterface* Publishers::FindPublishInterface(uint8_t ID, uint8_t interface_ID, bool* success) {
 801697e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016980:	461c      	mov	r4, r3
 8016982:	4617      	mov	r7, r2
	Publisher* publisher = FindPublisher(ID, success);
 8016984:	461a      	mov	r2, r3
PublishInterface* Publishers::FindPublishInterface(uint8_t ID, uint8_t interface_ID, bool* success) {
 8016986:	4605      	mov	r5, r0
	Publisher* publisher = FindPublisher(ID, success);
 8016988:	f7ff fef8 	bl	801677c <_ZN10Publishers13FindPublisherEhPb>
	if (not *success)
 801698c:	7823      	ldrb	r3, [r4, #0]
	Publisher* publisher = FindPublisher(ID, success);
 801698e:	4606      	mov	r6, r0
	if (not *success)
 8016990:	b173      	cbz	r3, 80169b0 <_ZN10Publishers20FindPublishInterfaceEhhPb+0x32>
		return NULL;

	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8016992:	f04f 31ff 	mov.w	r1, #4294967295
 8016996:	6828      	ldr	r0, [r5, #0]
 8016998:	f7f5 fdcc 	bl	800c534 <osSemaphoreAcquire>
 801699c:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
	for (PublishInterface &interface : publisher->interfaces) {
 80169a0:	429a      	cmp	r2, r3
 80169a2:	461e      	mov	r6, r3
 80169a4:	d106      	bne.n	80169b4 <_ZN10Publishers20FindPublishInterfaceEhhPb+0x36>
			osSemaphoreRelease(PublishersSemaphore);
			*success = true;
			return publish_interface_pointer;
		}
	}
	osSemaphoreRelease(PublishersSemaphore);
 80169a6:	6828      	ldr	r0, [r5, #0]
 80169a8:	f7f5 fdf8 	bl	800c59c <osSemaphoreRelease>
	*success = false;
 80169ac:	2300      	movs	r3, #0
 80169ae:	7023      	strb	r3, [r4, #0]
		return NULL;
 80169b0:	2600      	movs	r6, #0
 80169b2:	e009      	b.n	80169c8 <_ZN10Publishers20FindPublishInterfaceEhhPb+0x4a>
		if (interface.interface == interface_ID) {
 80169b4:	4633      	mov	r3, r6
 80169b6:	f813 1b02 	ldrb.w	r1, [r3], #2
 80169ba:	42b9      	cmp	r1, r7
 80169bc:	d1f0      	bne.n	80169a0 <_ZN10Publishers20FindPublishInterfaceEhhPb+0x22>
			osSemaphoreRelease(PublishersSemaphore);
 80169be:	6828      	ldr	r0, [r5, #0]
 80169c0:	f7f5 fdec 	bl	800c59c <osSemaphoreRelease>
			*success = true;
 80169c4:	2301      	movs	r3, #1
 80169c6:	7023      	strb	r3, [r4, #0]
	return NULL;
}
 80169c8:	4630      	mov	r0, r6
 80169ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080169cc <_ZN10Publishers17SetPublishAddressEhhh>:
bool Publishers::SetPublishAddress(uint8_t ID, uint8_t interface_ID, uint8_t address) {
 80169cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80169ce:	461e      	mov	r6, r3
	PublishInterface* interface = FindPublishInterface(ID, interface_ID, &success);
 80169d0:	f10d 0307 	add.w	r3, sp, #7
bool Publishers::SetPublishAddress(uint8_t ID, uint8_t interface_ID, uint8_t address) {
 80169d4:	4604      	mov	r4, r0
	PublishInterface* interface = FindPublishInterface(ID, interface_ID, &success);
 80169d6:	f7ff ffd2 	bl	801697e <_ZN10Publishers20FindPublishInterfaceEhhPb>
	if (success) return false;
 80169da:	f89d 3007 	ldrb.w	r3, [sp, #7]
	PublishInterface* interface = FindPublishInterface(ID, interface_ID, &success);
 80169de:	4605      	mov	r5, r0
	if (success) return false;
 80169e0:	b95b      	cbnz	r3, 80169fa <_ZN10Publishers17SetPublishAddressEhhh+0x2e>
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 80169e2:	f04f 31ff 	mov.w	r1, #4294967295
 80169e6:	6820      	ldr	r0, [r4, #0]
 80169e8:	f7f5 fda4 	bl	800c534 <osSemaphoreAcquire>
	interface->address = address;
 80169ec:	706e      	strb	r6, [r5, #1]
	osSemaphoreRelease(PublishersSemaphore);
 80169ee:	6820      	ldr	r0, [r4, #0]
 80169f0:	f7f5 fdd4 	bl	800c59c <osSemaphoreRelease>
	return true;
 80169f4:	2001      	movs	r0, #1
}
 80169f6:	b002      	add	sp, #8
 80169f8:	bd70      	pop	{r4, r5, r6, pc}
	if (success) return false;
 80169fa:	2000      	movs	r0, #0
 80169fc:	e7fb      	b.n	80169f6 <_ZN10Publishers17SetPublishAddressEhhh+0x2a>

080169fe <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE6_4_FUNES0_tS1_t>:
			if (length != 3) return false;
 80169fe:	2b03      	cmp	r3, #3
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8016a00:	4611      	mov	r1, r2
 8016a02:	b508      	push	{r3, lr}
			if (length != 3) return false;
 8016a04:	d106      	bne.n	8016a14 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE6_4_FUNES0_tS1_t+0x16>
			self->SetPublishAddress(input[0], input[1], input[2]);
 8016a06:	7893      	ldrb	r3, [r2, #2]
 8016a08:	7809      	ldrb	r1, [r1, #0]
 8016a0a:	7852      	ldrb	r2, [r2, #1]
 8016a0c:	f7ff ffde 	bl	80169cc <_ZN10Publishers17SetPublishAddressEhhh>
			return true;
 8016a10:	2001      	movs	r0, #1
		}
 8016a12:	bd08      	pop	{r3, pc}
			if (length != 3) return false;
 8016a14:	2000      	movs	r0, #0
 8016a16:	e7fc      	b.n	8016a12 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE6_4_FUNES0_tS1_t+0x14>

08016a18 <_ZN10Publishers25FindPublishInterfaceIndexEhhPb>:
 * @param input ID: the publisher ID
 * @param input interface_ID: the interface ID to find
 * @param output success: whether successful
 * @return the interface information index
 */
uint8_t Publishers::FindPublishInterfaceIndex(uint8_t ID, uint8_t interface_ID, bool* success) {
 8016a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a1a:	461d      	mov	r5, r3
 8016a1c:	4617      	mov	r7, r2
	Publisher* publisher = FindPublisher(ID, success);
 8016a1e:	461a      	mov	r2, r3
uint8_t Publishers::FindPublishInterfaceIndex(uint8_t ID, uint8_t interface_ID, bool* success) {
 8016a20:	4606      	mov	r6, r0
	Publisher* publisher = FindPublisher(ID, success);
 8016a22:	f7ff feab 	bl	801677c <_ZN10Publishers13FindPublisherEhPb>
	if (not *success)
 8016a26:	782b      	ldrb	r3, [r5, #0]
	Publisher* publisher = FindPublisher(ID, success);
 8016a28:	4604      	mov	r4, r0
	if (not *success)
 8016a2a:	b18b      	cbz	r3, 8016a50 <_ZN10Publishers25FindPublishInterfaceIndexEhhPb+0x38>
		return 0;

	uint8_t index = 0;
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8016a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8016a30:	6830      	ldr	r0, [r6, #0]
 8016a32:	f7f5 fd7f 	bl	800c534 <osSemaphoreAcquire>
	for (PublishInterface &interface : publisher->interfaces) {
 8016a36:	2100      	movs	r1, #0
      : _M_current(__i) { }
 8016a38:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
		if (interface.interface == interface_ID) {
 8016a3c:	1e9c      	subs	r4, r3, #2
	for (PublishInterface &interface : publisher->interfaces) {
 8016a3e:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8016a42:	4290      	cmp	r0, r2
 8016a44:	d106      	bne.n	8016a54 <_ZN10Publishers25FindPublishInterfaceIndexEhhPb+0x3c>
			*success = true;
			return index;
		}
		index++;
	}
	osSemaphoreRelease(PublishersSemaphore);
 8016a46:	6830      	ldr	r0, [r6, #0]
 8016a48:	f7f5 fda8 	bl	800c59c <osSemaphoreRelease>
	*success = false;
 8016a4c:	2300      	movs	r3, #0
 8016a4e:	702b      	strb	r3, [r5, #0]
		return 0;
 8016a50:	2400      	movs	r4, #0
 8016a52:	e00a      	b.n	8016a6a <_ZN10Publishers25FindPublishInterfaceIndexEhhPb+0x52>
		if (interface.interface == interface_ID) {
 8016a54:	1c4a      	adds	r2, r1, #1
 8016a56:	f814 c012 	ldrb.w	ip, [r4, r2, lsl #1]
 8016a5a:	45bc      	cmp	ip, r7
 8016a5c:	d107      	bne.n	8016a6e <_ZN10Publishers25FindPublishInterfaceIndexEhhPb+0x56>
			osSemaphoreRelease(PublishersSemaphore);
 8016a5e:	6830      	ldr	r0, [r6, #0]
 8016a60:	b2cc      	uxtb	r4, r1
 8016a62:	f7f5 fd9b 	bl	800c59c <osSemaphoreRelease>
			*success = true;
 8016a66:	2301      	movs	r3, #1
 8016a68:	702b      	strb	r3, [r5, #0]
	return 0;
}
 8016a6a:	4620      	mov	r0, r4
 8016a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a6e:	4611      	mov	r1, r2
 8016a70:	e7e5      	b.n	8016a3e <_ZN10Publishers25FindPublishInterfaceIndexEhhPb+0x26>

08016a72 <_ZN10Publishers19UnlinkFromInterfaceEhh>:
bool Publishers::UnlinkFromInterface(uint8_t ID, uint8_t interface_ID) {
 8016a72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016a74:	4617      	mov	r7, r2
	Publisher* publisher = FindPublisher(ID, &success);
 8016a76:	f10d 0207 	add.w	r2, sp, #7
bool Publishers::UnlinkFromInterface(uint8_t ID, uint8_t interface_ID) {
 8016a7a:	4605      	mov	r5, r0
 8016a7c:	460e      	mov	r6, r1
	Publisher* publisher = FindPublisher(ID, &success);
 8016a7e:	f7ff fe7d 	bl	801677c <_ZN10Publishers13FindPublisherEhPb>
	if (!success) return false;
 8016a82:	f89d 3007 	ldrb.w	r3, [sp, #7]
	Publisher* publisher = FindPublisher(ID, &success);
 8016a86:	4604      	mov	r4, r0
	if (!success) return false;
 8016a88:	b91b      	cbnz	r3, 8016a92 <_ZN10Publishers19UnlinkFromInterfaceEhh+0x20>
 8016a8a:	2700      	movs	r7, #0
}
 8016a8c:	4638      	mov	r0, r7
 8016a8e:	b003      	add	sp, #12
 8016a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t index = FindPublishInterfaceIndex(ID, interface_ID, &success);
 8016a92:	463a      	mov	r2, r7
 8016a94:	4631      	mov	r1, r6
 8016a96:	f10d 0307 	add.w	r3, sp, #7
 8016a9a:	4628      	mov	r0, r5
 8016a9c:	f7ff ffbc 	bl	8016a18 <_ZN10Publishers25FindPublishInterfaceIndexEhhPb>
	if (!success) return false;
 8016aa0:	f89d 7007 	ldrb.w	r7, [sp, #7]
	uint8_t index = FindPublishInterfaceIndex(ID, interface_ID, &success);
 8016aa4:	4606      	mov	r6, r0
	if (!success) return false;
 8016aa6:	2f00      	cmp	r7, #0
 8016aa8:	d0ef      	beq.n	8016a8a <_ZN10Publishers19UnlinkFromInterfaceEhh+0x18>
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8016aaa:	f04f 31ff 	mov.w	r1, #4294967295
 8016aae:	6828      	ldr	r0, [r5, #0]
 8016ab0:	f7f5 fd40 	bl	800c534 <osSemaphoreAcquire>
      { return __normal_iterator(_M_current + __n); }
 8016ab4:	68a0      	ldr	r0, [r4, #8]
 8016ab6:	b236      	sxth	r6, r6
      : _M_current(__i) { }
 8016ab8:	68e2      	ldr	r2, [r4, #12]
      { return __normal_iterator(_M_current + __n); }
 8016aba:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8016abe:	1c81      	adds	r1, r0, #2
      if (__position + 1 != end())
 8016ac0:	4291      	cmp	r1, r2
 8016ac2:	d002      	beq.n	8016aca <_ZN10Publishers19UnlinkFromInterfaceEhh+0x58>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8016ac4:	1a52      	subs	r2, r2, r1
 8016ac6:	f004 f9d1 	bl	801ae6c <memmove>
      --this->_M_impl._M_finish;
 8016aca:	68e3      	ldr	r3, [r4, #12]
	osSemaphoreRelease(PublishersSemaphore);
 8016acc:	6828      	ldr	r0, [r5, #0]
 8016ace:	3b02      	subs	r3, #2
 8016ad0:	60e3      	str	r3, [r4, #12]
 8016ad2:	f7f5 fd63 	bl	800c59c <osSemaphoreRelease>
	return true;
 8016ad6:	e7d9      	b.n	8016a8c <_ZN10Publishers19UnlinkFromInterfaceEhh+0x1a>

08016ad8 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE4_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 8016ad8:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8016ada:	4611      	mov	r1, r2
 8016adc:	b508      	push	{r3, lr}
			if (length != 2) return false;
 8016ade:	d105      	bne.n	8016aec <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE4_4_FUNES0_tS1_t+0x14>
			self->UnlinkFromInterface(input[0], input[1]);
 8016ae0:	7852      	ldrb	r2, [r2, #1]
 8016ae2:	7809      	ldrb	r1, [r1, #0]
 8016ae4:	f7ff ffc5 	bl	8016a72 <_ZN10Publishers19UnlinkFromInterfaceEhh>
 8016ae8:	2001      	movs	r0, #1
		}
 8016aea:	bd08      	pop	{r3, pc}
			if (length != 2) return false;
 8016aec:	2000      	movs	r0, #0
 8016aee:	e7fc      	b.n	8016aea <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE4_4_FUNES0_tS1_t+0x12>

08016af0 <_ZNSt12_Vector_baseI16PublishInterfaceSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8016af0:	b510      	push	{r4, lr}
 8016af2:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8016af4:	6800      	ldr	r0, [r0, #0]
	if (__p)
 8016af6:	b118      	cbz	r0, 8016b00 <_ZNSt12_Vector_baseI16PublishInterfaceSaIS0_EED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8016af8:	68a1      	ldr	r1, [r4, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8016afa:	1a09      	subs	r1, r1, r0
 8016afc:	f003 fe5a 	bl	801a7b4 <_ZdlPvj>
      }
 8016b00:	4620      	mov	r0, r4
 8016b02:	bd10      	pop	{r4, pc}

08016b04 <_ZNSt12_Vector_baseI5TopicSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8016b04:	b510      	push	{r4, lr}
 8016b06:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8016b08:	6800      	ldr	r0, [r0, #0]
	if (__p)
 8016b0a:	b118      	cbz	r0, 8016b14 <_ZNSt12_Vector_baseI5TopicSaIS0_EED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8016b0c:	68a1      	ldr	r1, [r4, #8]
 8016b0e:	1a09      	subs	r1, r1, r0
 8016b10:	f003 fe50 	bl	801a7b4 <_ZdlPvj>
      }
 8016b14:	4620      	mov	r0, r4
 8016b16:	bd10      	pop	{r4, pc}

08016b18 <_ZN9PublisherD1Ev>:
struct Publisher {
 8016b18:	b510      	push	{r4, lr}
 8016b1a:	4604      	mov	r4, r0
      }
 8016b1c:	3014      	adds	r0, #20
 8016b1e:	f7ff fff1 	bl	8016b04 <_ZNSt12_Vector_baseI5TopicSaIS0_EED1Ev>
 8016b22:	f104 0008 	add.w	r0, r4, #8
 8016b26:	f7ff ffe3 	bl	8016af0 <_ZNSt12_Vector_baseI16PublishInterfaceSaIS0_EED1Ev>
 8016b2a:	4620      	mov	r0, r4
 8016b2c:	bd10      	pop	{r4, pc}

08016b2e <_ZN10PublishersC1Ev>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 8016b2e:	2200      	movs	r2, #0
 8016b30:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8016b34:	6142      	str	r2, [r0, #20]
}
 8016b36:	4770      	bx	lr

08016b38 <_ZSt14__relocate_a_1IP9PublisherS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 8016b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b3a:	4604      	mov	r4, r0
 8016b3c:	460f      	mov	r7, r1
 8016b3e:	4615      	mov	r5, r2
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8016b40:	2600      	movs	r6, #0
      for (; __first != __last; ++__first, (void)++__cur)
 8016b42:	42bc      	cmp	r4, r7
 8016b44:	4628      	mov	r0, r5
 8016b46:	f105 0520 	add.w	r5, r5, #32
 8016b4a:	d100      	bne.n	8016b4e <_ZSt14__relocate_a_1IP9PublisherS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0+0x16>
    }
 8016b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016b4e:	7823      	ldrb	r3, [r4, #0]

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8016b50:	4620      	mov	r0, r4
 8016b52:	f805 3c20 	strb.w	r3, [r5, #-32]
 8016b56:	7863      	ldrb	r3, [r4, #1]
 8016b58:	f805 3c1f 	strb.w	r3, [r5, #-31]
 8016b5c:	8863      	ldrh	r3, [r4, #2]
 8016b5e:	f825 3c1e 	strh.w	r3, [r5, #-30]
 8016b62:	88a3      	ldrh	r3, [r4, #4]
 8016b64:	f825 3c1c 	strh.w	r3, [r5, #-28]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8016b68:	68a3      	ldr	r3, [r4, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8016b6a:	60a6      	str	r6, [r4, #8]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8016b6c:	f845 3c18 	str.w	r3, [r5, #-24]
 8016b70:	68e3      	ldr	r3, [r4, #12]
 8016b72:	f845 3c14 	str.w	r3, [r5, #-20]
	  _M_end_of_storage(__x._M_end_of_storage)
 8016b76:	6923      	ldr	r3, [r4, #16]
 8016b78:	f845 3c10 	str.w	r3, [r5, #-16]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8016b7c:	6963      	ldr	r3, [r4, #20]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8016b7e:	6166      	str	r6, [r4, #20]
 8016b80:	e9c4 6603 	strd	r6, r6, [r4, #12]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8016b84:	f845 3c0c 	str.w	r3, [r5, #-12]
 8016b88:	69a3      	ldr	r3, [r4, #24]
 8016b8a:	f845 3c08 	str.w	r3, [r5, #-8]
	  _M_end_of_storage(__x._M_end_of_storage)
 8016b8e:	69e3      	ldr	r3, [r4, #28]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8016b90:	e9c4 6606 	strd	r6, r6, [r4, #24]
	  _M_end_of_storage(__x._M_end_of_storage)
 8016b94:	f845 3c04 	str.w	r3, [r5, #-4]
      for (; __first != __last; ++__first, (void)++__cur)
 8016b98:	3420      	adds	r4, #32
 8016b9a:	f7ff ffbd 	bl	8016b18 <_ZN9PublisherD1Ev>
 8016b9e:	e7d0      	b.n	8016b42 <_ZSt14__relocate_a_1IP9PublisherS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0+0xa>

08016ba0 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8016ba0:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 8016ba2:	680d      	ldr	r5, [r1, #0]
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8016ba4:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 8016ba6:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 8016ba8:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 8016bac:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 8016bae:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8016bb0:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 8016bb2:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 8016bb4:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8016bb6:	688d      	ldr	r5, [r1, #8]
 8016bb8:	6085      	str	r5, [r0, #8]
      }
 8016bba:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 8016bbc:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 8016bbe:	e9c1 3300 	strd	r3, r3, [r1]
 8016bc2:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 8016bc6:	f7ea f825 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      }
 8016bca:	b005      	add	sp, #20
 8016bcc:	bd30      	pop	{r4, r5, pc}
	...

08016bd0 <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8016bd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016bd4:	e9d0 8a00 	ldrd	r8, sl, [r0]
 8016bd8:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 8016bda:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016bde:	ebaa 0208 	sub.w	r2, sl, r8
 8016be2:	4607      	mov	r7, r0
 8016be4:	4689      	mov	r9, r1
	if (max_size() - size() < __n)
 8016be6:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016bea:	ea4f 04a2 	mov.w	r4, r2, asr #2
	if (max_size() - size() < __n)
 8016bee:	d102      	bne.n	8016bf6 <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8016bf0:	481e      	ldr	r0, [pc, #120]	@ (8016c6c <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9c>)
 8016bf2:	f003 feb9 	bl	801a968 <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 8016bf6:	45c2      	cmp	sl, r8
 8016bf8:	bf14      	ite	ne
 8016bfa:	4622      	movne	r2, r4
 8016bfc:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 8016bfe:	eba1 0508 	sub.w	r5, r1, r8
 8016c02:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8016c04:	d22e      	bcs.n	8016c64 <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x94>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8016c06:	b37c      	cbz	r4, 8016c68 <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x98>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8016c08:	429c      	cmp	r4, r3
 8016c0a:	bf28      	it	cs
 8016c0c:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8016c0e:	00a0      	lsls	r0, r4, #2
 8016c10:	f003 fdf5 	bl	801a7fe <_Znwj>
 8016c14:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8016c16:	f8db 3000 	ldr.w	r3, [fp]
      if (__count > 0)
 8016c1a:	2d00      	cmp	r5, #0
 8016c1c:	5173      	str	r3, [r6, r5]
 8016c1e:	dd04      	ble.n	8016c2a <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x5a>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8016c20:	462a      	mov	r2, r5
 8016c22:	4641      	mov	r1, r8
 8016c24:	4630      	mov	r0, r6
 8016c26:	f004 f921 	bl	801ae6c <memmove>
      ptrdiff_t __count = __last - __first;
 8016c2a:	ebaa 0a09 	sub.w	sl, sl, r9
	      ++__new_finish;
 8016c2e:	3504      	adds	r5, #4
      if (__count > 0)
 8016c30:	f1ba 0f00 	cmp.w	sl, #0
 8016c34:	4435      	add	r5, r6
 8016c36:	dd04      	ble.n	8016c42 <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x72>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8016c38:	4652      	mov	r2, sl
 8016c3a:	4649      	mov	r1, r9
 8016c3c:	4628      	mov	r0, r5
 8016c3e:	f004 fa0d 	bl	801b05c <memcpy>
      return __result + __count;
 8016c42:	4455      	add	r5, sl
	if (__p)
 8016c44:	f1b8 0f00 	cmp.w	r8, #0
 8016c48:	d005      	beq.n	8016c56 <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x86>
		    this->_M_impl._M_end_of_storage - __old_start);
 8016c4a:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8016c4c:	4640      	mov	r0, r8
 8016c4e:	eba1 0108 	sub.w	r1, r1, r8
 8016c52:	f003 fdaf 	bl	801a7b4 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8016c56:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8016c5a:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8016c5e:	60be      	str	r6, [r7, #8]
    }
 8016c60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8016c64:	461c      	mov	r4, r3
 8016c66:	e7d2      	b.n	8016c0e <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8016c68:	4626      	mov	r6, r4
 8016c6a:	e7d4      	b.n	8016c16 <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 8016c6c:	0801b17a 	.word	0x0801b17a

08016c70 <_ZN10Publishers8AddTopicEht>:
bool Publishers::AddTopic(uint8_t ID, uint16_t topic_ID) {
 8016c70:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016c74:	4616      	mov	r6, r2
	Publisher* publisher = FindPublisher(ID, &success);
 8016c76:	f10d 0203 	add.w	r2, sp, #3
bool Publishers::AddTopic(uint8_t ID, uint16_t topic_ID) {
 8016c7a:	4605      	mov	r5, r0
 8016c7c:	4688      	mov	r8, r1
	Publisher* publisher = FindPublisher(ID, &success);
 8016c7e:	f7ff fd7d 	bl	801677c <_ZN10Publishers13FindPublisherEhPb>
	if (!success) return false;
 8016c82:	f89d 7003 	ldrb.w	r7, [sp, #3]
	Publisher* publisher = FindPublisher(ID, &success);
 8016c86:	4604      	mov	r4, r0
	if (!success) return false;
 8016c88:	b927      	cbnz	r7, 8016c94 <_ZN10Publishers8AddTopicEht+0x24>
 8016c8a:	2700      	movs	r7, #0
}
 8016c8c:	4638      	mov	r0, r7
 8016c8e:	b002      	add	sp, #8
 8016c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	FindTopic(ID, topic_ID, &success);
 8016c94:	f10d 0303 	add.w	r3, sp, #3
 8016c98:	4632      	mov	r2, r6
 8016c9a:	4641      	mov	r1, r8
 8016c9c:	4628      	mov	r0, r5
 8016c9e:	f7ff fe1e 	bl	80168de <_ZN10Publishers9FindTopicEhtPb>
	if (success) return false;
 8016ca2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8016ca6:	2b00      	cmp	r3, #0
 8016ca8:	d1ef      	bne.n	8016c8a <_ZN10Publishers8AddTopicEht+0x1a>
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8016caa:	f04f 31ff 	mov.w	r1, #4294967295
 8016cae:	6828      	ldr	r0, [r5, #0]
	topic.activated = false;
 8016cb0:	f88d 3004 	strb.w	r3, [sp, #4]
	topic.ID = topic_ID;
 8016cb4:	f8ad 6006 	strh.w	r6, [sp, #6]
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8016cb8:	f7f5 fc3c 	bl	800c534 <osSemaphoreAcquire>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8016cbc:	e9d4 1306 	ldrd	r1, r3, [r4, #24]
 8016cc0:	4299      	cmp	r1, r3
 8016cc2:	d007      	beq.n	8016cd4 <_ZN10Publishers8AddTopicEht+0x64>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8016cc4:	9801      	ldr	r0, [sp, #4]
 8016cc6:	f841 0b04 	str.w	r0, [r1], #4
	    ++this->_M_impl._M_finish;
 8016cca:	61a1      	str	r1, [r4, #24]
	osSemaphoreRelease(PublishersSemaphore);
 8016ccc:	6828      	ldr	r0, [r5, #0]
 8016cce:	f7f5 fc65 	bl	800c59c <osSemaphoreRelease>
	return true;
 8016cd2:	e7db      	b.n	8016c8c <_ZN10Publishers8AddTopicEht+0x1c>
	  _M_realloc_insert(end(), __x);
 8016cd4:	aa01      	add	r2, sp, #4
 8016cd6:	f104 0014 	add.w	r0, r4, #20
 8016cda:	f7ff ff79 	bl	8016bd0 <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 8016cde:	e7f5      	b.n	8016ccc <_ZN10Publishers8AddTopicEht+0x5c>

08016ce0 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8016ce0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016ce4:	e9d0 8a00 	ldrd	r8, sl, [r0]
 8016ce8:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 8016cea:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016cee:	ebaa 0208 	sub.w	r2, sl, r8
 8016cf2:	4607      	mov	r7, r0
 8016cf4:	4689      	mov	r9, r1
	if (max_size() - size() < __n)
 8016cf6:	ebb3 0f62 	cmp.w	r3, r2, asr #1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016cfa:	ea4f 0462 	mov.w	r4, r2, asr #1
	if (max_size() - size() < __n)
 8016cfe:	d102      	bne.n	8016d06 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8016d00:	481e      	ldr	r0, [pc, #120]	@ (8016d7c <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9c>)
 8016d02:	f003 fe31 	bl	801a968 <_ZSt20__throw_length_errorPKc>
 8016d06:	45c2      	cmp	sl, r8
 8016d08:	bf14      	ite	ne
 8016d0a:	4622      	movne	r2, r4
 8016d0c:	2201      	moveq	r2, #1
 8016d0e:	eba1 0508 	sub.w	r5, r1, r8
 8016d12:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8016d14:	d22e      	bcs.n	8016d74 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x94>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8016d16:	b37c      	cbz	r4, 8016d78 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x98>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8016d18:	429c      	cmp	r4, r3
 8016d1a:	bf28      	it	cs
 8016d1c:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8016d1e:	0060      	lsls	r0, r4, #1
 8016d20:	f003 fd6d 	bl	801a7fe <_Znwj>
 8016d24:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8016d26:	f8bb 3000 	ldrh.w	r3, [fp]
      if (__count > 0)
 8016d2a:	2d00      	cmp	r5, #0
 8016d2c:	5373      	strh	r3, [r6, r5]
 8016d2e:	dd04      	ble.n	8016d3a <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x5a>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8016d30:	462a      	mov	r2, r5
 8016d32:	4641      	mov	r1, r8
 8016d34:	4630      	mov	r0, r6
 8016d36:	f004 f899 	bl	801ae6c <memmove>
      ptrdiff_t __count = __last - __first;
 8016d3a:	ebaa 0a09 	sub.w	sl, sl, r9
	      ++__new_finish;
 8016d3e:	3502      	adds	r5, #2
      if (__count > 0)
 8016d40:	f1ba 0f00 	cmp.w	sl, #0
 8016d44:	4435      	add	r5, r6
 8016d46:	dd04      	ble.n	8016d52 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x72>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8016d48:	4652      	mov	r2, sl
 8016d4a:	4649      	mov	r1, r9
 8016d4c:	4628      	mov	r0, r5
 8016d4e:	f004 f985 	bl	801b05c <memcpy>
      return __result + __count;
 8016d52:	4455      	add	r5, sl
	if (__p)
 8016d54:	f1b8 0f00 	cmp.w	r8, #0
 8016d58:	d005      	beq.n	8016d66 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x86>
		    this->_M_impl._M_end_of_storage - __old_start);
 8016d5a:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8016d5c:	4640      	mov	r0, r8
 8016d5e:	eba1 0108 	sub.w	r1, r1, r8
 8016d62:	f003 fd27 	bl	801a7b4 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8016d66:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8016d6a:	eb06 0644 	add.w	r6, r6, r4, lsl #1
 8016d6e:	60be      	str	r6, [r7, #8]
    }
 8016d70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8016d74:	461c      	mov	r4, r3
 8016d76:	e7d2      	b.n	8016d1e <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8016d78:	4626      	mov	r6, r4
 8016d7a:	e7d4      	b.n	8016d26 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 8016d7c:	0801b17a 	.word	0x0801b17a

08016d80 <_ZN10Publishers15LinkToInterfaceEhh>:
bool Publishers::LinkToInterface(uint8_t ID, uint8_t interface_ID) {
 8016d80:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016d84:	4616      	mov	r6, r2
	Publisher* publisher = FindPublisher(ID, &success);
 8016d86:	f10d 0203 	add.w	r2, sp, #3
bool Publishers::LinkToInterface(uint8_t ID, uint8_t interface_ID) {
 8016d8a:	4605      	mov	r5, r0
 8016d8c:	4688      	mov	r8, r1
	Publisher* publisher = FindPublisher(ID, &success);
 8016d8e:	f7ff fcf5 	bl	801677c <_ZN10Publishers13FindPublisherEhPb>
	if (!success) return false;
 8016d92:	f89d 7003 	ldrb.w	r7, [sp, #3]
	Publisher* publisher = FindPublisher(ID, &success);
 8016d96:	4604      	mov	r4, r0
	if (!success) return false;
 8016d98:	b927      	cbnz	r7, 8016da4 <_ZN10Publishers15LinkToInterfaceEhh+0x24>
 8016d9a:	2700      	movs	r7, #0
}
 8016d9c:	4638      	mov	r0, r7
 8016d9e:	b002      	add	sp, #8
 8016da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	FindPublishInterface(ID, interface_ID, &success);
 8016da4:	f10d 0303 	add.w	r3, sp, #3
 8016da8:	4632      	mov	r2, r6
 8016daa:	4641      	mov	r1, r8
 8016dac:	4628      	mov	r0, r5
 8016dae:	f7ff fde6 	bl	801697e <_ZN10Publishers20FindPublishInterfaceEhhPb>
	if (success) return false;
 8016db2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8016db6:	2b00      	cmp	r3, #0
 8016db8:	d1ef      	bne.n	8016d9a <_ZN10Publishers15LinkToInterfaceEhh+0x1a>
	interface.address = ALL;
 8016dba:	23ff      	movs	r3, #255	@ 0xff
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8016dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8016dc0:	6828      	ldr	r0, [r5, #0]
	interface.address = ALL;
 8016dc2:	f88d 3005 	strb.w	r3, [sp, #5]
	interface.interface = interface_ID;
 8016dc6:	f88d 6004 	strb.w	r6, [sp, #4]
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8016dca:	f7f5 fbb3 	bl	800c534 <osSemaphoreAcquire>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8016dce:	e9d4 1303 	ldrd	r1, r3, [r4, #12]
 8016dd2:	4299      	cmp	r1, r3
 8016dd4:	d008      	beq.n	8016de8 <_ZN10Publishers15LinkToInterfaceEhh+0x68>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8016dd6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016dda:	f821 3b02 	strh.w	r3, [r1], #2
	    ++this->_M_impl._M_finish;
 8016dde:	60e1      	str	r1, [r4, #12]
	osSemaphoreRelease(PublishersSemaphore);
 8016de0:	6828      	ldr	r0, [r5, #0]
 8016de2:	f7f5 fbdb 	bl	800c59c <osSemaphoreRelease>
	return true;
 8016de6:	e7d9      	b.n	8016d9c <_ZN10Publishers15LinkToInterfaceEhh+0x1c>
	  _M_realloc_insert(end(), __x);
 8016de8:	aa01      	add	r2, sp, #4
 8016dea:	f104 0008 	add.w	r0, r4, #8
 8016dee:	f7ff ff77 	bl	8016ce0 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 8016df2:	e7f5      	b.n	8016de0 <_ZN10Publishers15LinkToInterfaceEhh+0x60>

08016df4 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 8016df4:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8016df6:	4611      	mov	r1, r2
 8016df8:	b508      	push	{r3, lr}
			if (length != 2) return false;
 8016dfa:	d105      	bne.n	8016e08 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x14>
			self->LinkToInterface(input[0], input[1]);
 8016dfc:	7852      	ldrb	r2, [r2, #1]
 8016dfe:	7809      	ldrb	r1, [r1, #0]
 8016e00:	f7ff ffbe 	bl	8016d80 <_ZN10Publishers15LinkToInterfaceEhh>
 8016e04:	2001      	movs	r0, #1
		}
 8016e06:	bd08      	pop	{r3, pc}
			if (length != 2) return false;
 8016e08:	2000      	movs	r0, #0
 8016e0a:	e7fc      	b.n	8016e06 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x12>

08016e0c <_ZNSt6vectorImSaImEE14_M_move_assignEOS1_St17integral_constantIbLb1EE.isra.0>:
      _M_move_assign(vector&& __x, true_type) noexcept
 8016e0c:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 8016e0e:	680d      	ldr	r5, [r1, #0]
      _M_move_assign(vector&& __x, true_type) noexcept
 8016e10:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 8016e12:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 8016e14:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 8016e18:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 8016e1a:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8016e1c:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 8016e1e:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 8016e20:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8016e22:	688d      	ldr	r5, [r1, #8]
 8016e24:	6085      	str	r5, [r0, #8]
      }
 8016e26:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 8016e28:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 8016e2a:	e9c1 3300 	strd	r3, r3, [r1]
 8016e2e:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 8016e32:	f7f8 fba4 	bl	800f57e <_ZNSt12_Vector_baseImSaImEED1Ev>
      }
 8016e36:	b005      	add	sp, #20
 8016e38:	bd30      	pop	{r4, r5, pc}

08016e3a <_ZNSt6vectorIaSaIaEE14_M_move_assignEOS1_St17integral_constantIbLb1EE.isra.0>:
      _M_move_assign(vector&& __x, true_type) noexcept
 8016e3a:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 8016e3c:	680d      	ldr	r5, [r1, #0]
      _M_move_assign(vector&& __x, true_type) noexcept
 8016e3e:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 8016e40:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 8016e42:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 8016e46:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 8016e48:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8016e4a:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 8016e4c:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 8016e4e:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8016e50:	688d      	ldr	r5, [r1, #8]
 8016e52:	6085      	str	r5, [r0, #8]
      }
 8016e54:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 8016e56:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 8016e58:	e9c1 3300 	strd	r3, r3, [r1]
 8016e5c:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 8016e60:	f7f8 fbaf 	bl	800f5c2 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
      }
 8016e64:	b005      	add	sp, #20
 8016e66:	bd30      	pop	{r4, r5, pc}

08016e68 <_ZNSt6vectorIfSaIfEE14_M_move_assignEOS1_St17integral_constantIbLb1EE.isra.0>:
      _M_move_assign(vector&& __x, true_type) noexcept
 8016e68:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 8016e6a:	680d      	ldr	r5, [r1, #0]
      _M_move_assign(vector&& __x, true_type) noexcept
 8016e6c:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 8016e6e:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 8016e70:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 8016e74:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 8016e76:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8016e78:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 8016e7a:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 8016e7c:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8016e7e:	688d      	ldr	r5, [r1, #8]
 8016e80:	6085      	str	r5, [r0, #8]
      }
 8016e82:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 8016e84:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 8016e86:	e9c1 3300 	strd	r3, r3, [r1]
 8016e8a:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 8016e8e:	f7eb f8bf 	bl	8002010 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
      }
 8016e92:	b005      	add	sp, #20
 8016e94:	bd30      	pop	{r4, r5, pc}

08016e96 <_ZN9Registers11AddRegisterItEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 8016e96:	b570      	push	{r4, r5, r6, lr}
 8016e98:	4604      	mov	r4, r0
 8016e9a:	b086      	sub	sp, #24
 8016e9c:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8016e9e:	6800      	ldr	r0, [r0, #0]
 8016ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8016ea4:	f7f5 fb46 	bl	800c534 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 8016ea8:	f10d 0207 	add.w	r2, sp, #7
 8016eac:	4631      	mov	r1, r6
 8016eae:	4620      	mov	r0, r4
 8016eb0:	f001 f94d 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 8016eb4:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8016eb8:	b125      	cbz	r5, 8016ec4 <_ZN9Registers11AddRegisterItEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 8016eba:	6820      	ldr	r0, [r4, #0]
 8016ebc:	f7f5 fb6e 	bl	800c59c <osSemaphoreRelease>
}
 8016ec0:	b006      	add	sp, #24
 8016ec2:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8016ec4:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 8016ec8:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8016ecc:	f7ff fb84 	bl	80165d8 <_ZN9Registers9GetTypeIDItEEhPb.isra.0>
	configuration_.register_info = register_;
 8016ed0:	2301      	movs	r3, #1
 8016ed2:	f8ad 600a 	strh.w	r6, [sp, #10]
 8016ed6:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 8016eda:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 8016ede:	f88d 000c 	strb.w	r0, [sp, #12]
 8016ee2:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 8016ee6:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	d0e5      	beq.n	8016eba <_ZN9Registers11AddRegisterItEEbt.isra.0+0x24>
		registers.push_back(configuration_);
 8016eee:	a902      	add	r1, sp, #8
 8016ef0:	1d20      	adds	r0, r4, #4
 8016ef2:	f7fd febc 	bl	8014c6e <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 8016ef6:	e7e0      	b.n	8016eba <_ZN9Registers11AddRegisterItEEbt.isra.0+0x24>

08016ef8 <_ZN9Registers11AddRegisterIhEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 8016ef8:	b570      	push	{r4, r5, r6, lr}
 8016efa:	4604      	mov	r4, r0
 8016efc:	b086      	sub	sp, #24
 8016efe:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8016f00:	6800      	ldr	r0, [r0, #0]
 8016f02:	f04f 31ff 	mov.w	r1, #4294967295
 8016f06:	f7f5 fb15 	bl	800c534 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 8016f0a:	f10d 0207 	add.w	r2, sp, #7
 8016f0e:	4631      	mov	r1, r6
 8016f10:	4620      	mov	r0, r4
 8016f12:	f001 f91c 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 8016f16:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8016f1a:	b125      	cbz	r5, 8016f26 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 8016f1c:	6820      	ldr	r0, [r4, #0]
 8016f1e:	f7f5 fb3d 	bl	800c59c <osSemaphoreRelease>
}
 8016f22:	b006      	add	sp, #24
 8016f24:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8016f26:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 8016f2a:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8016f2e:	f7ff fbb5 	bl	801669c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	configuration_.register_info = register_;
 8016f32:	2301      	movs	r3, #1
 8016f34:	f8ad 600a 	strh.w	r6, [sp, #10]
 8016f38:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 8016f3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 8016f40:	f88d 000c 	strb.w	r0, [sp, #12]
 8016f44:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 8016f48:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 8016f4c:	2b00      	cmp	r3, #0
 8016f4e:	d0e5      	beq.n	8016f1c <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
		registers.push_back(configuration_);
 8016f50:	a902      	add	r1, sp, #8
 8016f52:	1d20      	adds	r0, r4, #4
 8016f54:	f7fd fe8b 	bl	8014c6e <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 8016f58:	e7e0      	b.n	8016f1c <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>

08016f5a <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8016f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f5e:	460d      	mov	r5, r1
 8016f60:	b086      	sub	sp, #24
 8016f62:	4606      	mov	r6, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8016f64:	f04f 31ff 	mov.w	r1, #4294967295
 8016f68:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8016f6a:	461c      	mov	r4, r3
 8016f6c:	4690      	mov	r8, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8016f6e:	f7f5 fae1 	bl	800c534 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8016f72:	4629      	mov	r1, r5
 8016f74:	f10d 0207 	add.w	r2, sp, #7
 8016f78:	4630      	mov	r0, r6
 8016f7a:	f001 f8e8 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8016f7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8016f82:	4605      	mov	r5, r0
	if (!success) {
 8016f84:	b92b      	cbnz	r3, 8016f92 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x38>
	osSemaphoreRelease(RegistersSemaphore);
 8016f86:	6830      	ldr	r0, [r6, #0]
 8016f88:	f7f5 fb08 	bl	800c59c <osSemaphoreRelease>
}
 8016f8c:	b006      	add	sp, #24
 8016f8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8016f92:	f10d 0007 	add.w	r0, sp, #7
 8016f96:	f7ff fb81 	bl	801669c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 8016f9a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8016f9e:	2b00      	cmp	r3, #0
 8016fa0:	d0f1      	beq.n	8016f86 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (target_register->register_info.type != registered_type) {
 8016fa2:	792b      	ldrb	r3, [r5, #4]
 8016fa4:	4298      	cmp	r0, r3
 8016fa6:	d1ee      	bne.n	8016f86 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (callbacks[target_register->register_info.type] == NULL) {
 8016fa8:	3004      	adds	r0, #4
 8016faa:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
 8016fae:	2f00      	cmp	r7, #0
 8016fb0:	d0e9      	beq.n	8016f86 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 8016fb2:	782b      	ldrb	r3, [r5, #0]
 8016fb4:	b9db      	cbnz	r3, 8016fee <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x94>
 8016fb6:	786b      	ldrb	r3, [r5, #1]
 8016fb8:	b9cb      	cbnz	r3, 8016fee <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x94>
		callback.read = NULL;
 8016fba:	9305      	str	r3, [sp, #20]
      size() const _GLIBCXX_NOEXCEPT
 8016fbc:	aa02      	add	r2, sp, #8
		callback.write = write;
 8016fbe:	e9cd 8403 	strd	r8, r4, [sp, #12]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016fc2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8016fc6:	1ae3      	subs	r3, r4, r3
 8016fc8:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8016fca:	816b      	strh	r3, [r5, #10]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8016fcc:	68bb      	ldr	r3, [r7, #8]
 8016fce:	429c      	cmp	r4, r3
 8016fd0:	d008      	beq.n	8016fe4 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x8a>
 8016fd2:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8016fd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8016fd8:	3410      	adds	r4, #16
 8016fda:	607c      	str	r4, [r7, #4]
	target_register->mode.callbacks = true;
 8016fdc:	2301      	movs	r3, #1
 8016fde:	706b      	strb	r3, [r5, #1]
	target_register->access.write = true;
 8016fe0:	722b      	strb	r3, [r5, #8]
 8016fe2:	e7d0      	b.n	8016f86 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	  _M_realloc_insert(end(), __x);
 8016fe4:	4621      	mov	r1, r4
 8016fe6:	4638      	mov	r0, r7
 8016fe8:	f7f8 f952 	bl	800f290 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	} else {
 8016fec:	e7f6      	b.n	8016fdc <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x82>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8016fee:	8969      	ldrh	r1, [r5, #10]
 8016ff0:	4638      	mov	r0, r7
 8016ff2:	f7f8 f805 	bl	800f000 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
		callback->write = write;
 8016ff6:	e9c0 8401 	strd	r8, r4, [r0, #4]
 8016ffa:	e7ef      	b.n	8016fdc <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x82>

08016ffc <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8016ffc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017000:	e9d0 8900 	ldrd	r8, r9, [r0]
 8017004:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 8017006:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801700a:	eba9 0208 	sub.w	r2, r9, r8
 801700e:	4607      	mov	r7, r0
 8017010:	468a      	mov	sl, r1
	if (max_size() - size() < __n)
 8017012:	ebb3 1f22 	cmp.w	r3, r2, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017016:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
 801701a:	d102      	bne.n	8017022 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 801701c:	4820      	ldr	r0, [pc, #128]	@ (80170a0 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa4>)
 801701e:	f003 fca3 	bl	801a968 <_ZSt20__throw_length_errorPKc>
 8017022:	45c1      	cmp	r9, r8
 8017024:	bf14      	ite	ne
 8017026:	4622      	movne	r2, r4
 8017028:	2201      	moveq	r2, #1
 801702a:	eba1 0508 	sub.w	r5, r1, r8
 801702e:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8017030:	d231      	bcs.n	8017096 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8017032:	b394      	cbz	r4, 801709a <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9e>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8017034:	429c      	cmp	r4, r3
 8017036:	bf28      	it	cs
 8017038:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801703a:	0120      	lsls	r0, r4, #4
 801703c:	f003 fbdf 	bl	801a7fe <_Znwj>
 8017040:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8017042:	eb06 0c05 	add.w	ip, r6, r5
      if (__count > 0)
 8017046:	2d00      	cmp	r5, #0
 8017048:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 801704c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8017050:	dd04      	ble.n	801705c <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x60>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8017052:	462a      	mov	r2, r5
 8017054:	4641      	mov	r1, r8
 8017056:	4630      	mov	r0, r6
 8017058:	f003 ff08 	bl	801ae6c <memmove>
      ptrdiff_t __count = __last - __first;
 801705c:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
 8017060:	3510      	adds	r5, #16
      if (__count > 0)
 8017062:	f1b9 0f00 	cmp.w	r9, #0
 8017066:	4435      	add	r5, r6
 8017068:	dd04      	ble.n	8017074 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x78>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801706a:	464a      	mov	r2, r9
 801706c:	4651      	mov	r1, sl
 801706e:	4628      	mov	r0, r5
 8017070:	f003 fff4 	bl	801b05c <memcpy>
      return __result + __count;
 8017074:	444d      	add	r5, r9
	if (__p)
 8017076:	f1b8 0f00 	cmp.w	r8, #0
 801707a:	d005      	beq.n	8017088 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
 801707c:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801707e:	4640      	mov	r0, r8
 8017080:	eba1 0108 	sub.w	r1, r1, r8
 8017084:	f003 fb96 	bl	801a7b4 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8017088:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801708c:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 8017090:	60be      	str	r6, [r7, #8]
    }
 8017092:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8017096:	461c      	mov	r4, r3
 8017098:	e7cf      	b.n	801703a <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801709a:	4626      	mov	r6, r4
 801709c:	e7d1      	b.n	8017042 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
 801709e:	bf00      	nop
 80170a0:	0801b17a 	.word	0x0801b17a

080170a4 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 80170a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80170a8:	460c      	mov	r4, r1
 80170aa:	b087      	sub	sp, #28
 80170ac:	4606      	mov	r6, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80170ae:	f04f 31ff 	mov.w	r1, #4294967295
 80170b2:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 80170b4:	4698      	mov	r8, r3
 80170b6:	4691      	mov	r9, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80170b8:	f7f5 fa3c 	bl	800c534 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80170bc:	4621      	mov	r1, r4
 80170be:	f10d 0207 	add.w	r2, sp, #7
 80170c2:	4630      	mov	r0, r6
 80170c4:	f001 f843 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80170c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80170cc:	4604      	mov	r4, r0
	if (!success) {
 80170ce:	b92b      	cbnz	r3, 80170dc <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x38>
	osSemaphoreRelease(RegistersSemaphore);
 80170d0:	6830      	ldr	r0, [r6, #0]
 80170d2:	f7f5 fa63 	bl	800c59c <osSemaphoreRelease>
}
 80170d6:	b007      	add	sp, #28
 80170d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 80170dc:	f10d 0007 	add.w	r0, sp, #7
 80170e0:	f7ff fa7a 	bl	80165d8 <_ZN9Registers9GetTypeIDItEEhPb.isra.0>
	if (!success) {
 80170e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80170e8:	2b00      	cmp	r3, #0
 80170ea:	d0f1      	beq.n	80170d0 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (target_register->register_info.type != registered_type) {
 80170ec:	7923      	ldrb	r3, [r4, #4]
 80170ee:	4298      	cmp	r0, r3
 80170f0:	d1ee      	bne.n	80170d0 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (callbacks[target_register->register_info.type] == NULL) {
 80170f2:	3004      	adds	r0, #4
 80170f4:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
 80170f8:	2f00      	cmp	r7, #0
 80170fa:	d0e9      	beq.n	80170d0 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 80170fc:	7821      	ldrb	r1, [r4, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80170fe:	e9d7 3500 	ldrd	r3, r5, [r7]
 8017102:	1aea      	subs	r2, r5, r3
 8017104:	1112      	asrs	r2, r2, #4
 8017106:	b9b1      	cbnz	r1, 8017136 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x92>
 8017108:	7861      	ldrb	r1, [r4, #1]
 801710a:	b9a1      	cbnz	r1, 8017136 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x92>
		callback.read = NULL;
 801710c:	9105      	str	r1, [sp, #20]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801710e:	68b9      	ldr	r1, [r7, #8]
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8017110:	8162      	strh	r2, [r4, #10]
      push_back(const value_type& __x)
 8017112:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8017114:	42a9      	cmp	r1, r5
		callback.write = write;
 8017116:	e9cd 9803 	strd	r9, r8, [sp, #12]
 801711a:	d008      	beq.n	801712e <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x8a>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801711c:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 801711e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8017122:	3510      	adds	r5, #16
 8017124:	607d      	str	r5, [r7, #4]
	target_register->mode.callbacks = true;
 8017126:	2301      	movs	r3, #1
 8017128:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 801712a:	7223      	strb	r3, [r4, #8]
 801712c:	e7d0      	b.n	80170d0 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	  _M_realloc_insert(end(), __x);
 801712e:	4638      	mov	r0, r7
 8017130:	f7ff ff64 	bl	8016ffc <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	} else {
 8017134:	e7f7      	b.n	8017126 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x82>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8017136:	8961      	ldrh	r1, [r4, #10]
	if (__n >= this->size())
 8017138:	4291      	cmp	r1, r2
 801713a:	d302      	bcc.n	8017142 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x9e>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 801713c:	4803      	ldr	r0, [pc, #12]	@ (801714c <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0xa8>)
 801713e:	f003 fc16 	bl	801a96e <_ZSt24__throw_out_of_range_fmtPKcz>
	return *(this->_M_impl._M_start + __n);
 8017142:	eb03 1301 	add.w	r3, r3, r1, lsl #4
		callback->write = write;
 8017146:	e9c3 9801 	strd	r9, r8, [r3, #4]
 801714a:	e7ec      	b.n	8017126 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x82>
 801714c:	0801b3bc 	.word	0x0801b3bc

08017150 <_ZN10Publishers12AddRegistersEv>:
void Publishers::AddRegisters(void) {
 8017150:	b510      	push	{r4, lr}
 8017152:	4604      	mov	r4, r0
	registers->AddRegister<uint8_t>(REG_PUB_SET_STATUS);
 8017154:	2110      	movs	r1, #16
 8017156:	6840      	ldr	r0, [r0, #4]
 8017158:	f7ff fece 	bl	8016ef8 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_PUB_SET_STATUS, 2);
 801715c:	2202      	movs	r2, #2
 801715e:	2110      	movs	r1, #16
 8017160:	6860      	ldr	r0, [r4, #4]
 8017162:	f001 f849 	bl	80181f8 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_PUB_SET_STATUS, (void*) this,
 8017166:	4b37      	ldr	r3, [pc, #220]	@ (8017244 <_ZN10Publishers12AddRegistersEv+0xf4>)
 8017168:	4622      	mov	r2, r4
 801716a:	6860      	ldr	r0, [r4, #4]
 801716c:	2110      	movs	r1, #16
 801716e:	f7ff fef4 	bl	8016f5a <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint16_t>(REG_PUB_SET_TOPIC_STATUS);
 8017172:	6860      	ldr	r0, [r4, #4]
 8017174:	2111      	movs	r1, #17
 8017176:	f7ff fe8e 	bl	8016e96 <_ZN9Registers11AddRegisterItEEbt.isra.0>
	registers->SetRegisterAsArray(REG_PUB_SET_TOPIC_STATUS, 3);
 801717a:	2203      	movs	r2, #3
 801717c:	2111      	movs	r1, #17
 801717e:	6860      	ldr	r0, [r4, #4]
 8017180:	f001 f83a 	bl	80181f8 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint16_t>(REG_PUB_SET_TOPIC_STATUS, (void*) this,
 8017184:	4b30      	ldr	r3, [pc, #192]	@ (8017248 <_ZN10Publishers12AddRegistersEv+0xf8>)
 8017186:	4622      	mov	r2, r4
 8017188:	6860      	ldr	r0, [r4, #4]
 801718a:	2111      	movs	r1, #17
 801718c:	f7ff ff8a 	bl	80170a4 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint16_t>(REG_PUB_SET_PRESCALER);
 8017190:	6860      	ldr	r0, [r4, #4]
 8017192:	2112      	movs	r1, #18
 8017194:	f7ff fe7f 	bl	8016e96 <_ZN9Registers11AddRegisterItEEbt.isra.0>
	registers->SetRegisterAsArray(REG_PUB_SET_PRESCALER, 2);
 8017198:	2202      	movs	r2, #2
 801719a:	2112      	movs	r1, #18
 801719c:	6860      	ldr	r0, [r4, #4]
 801719e:	f001 f82b 	bl	80181f8 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint16_t>(REG_PUB_SET_PRESCALER, (void*) this,
 80171a2:	4622      	mov	r2, r4
 80171a4:	4b29      	ldr	r3, [pc, #164]	@ (801724c <_ZN10Publishers12AddRegistersEv+0xfc>)
 80171a6:	2112      	movs	r1, #18
 80171a8:	6860      	ldr	r0, [r4, #4]
 80171aa:	f7ff ff7b 	bl	80170a4 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_PUB_STOP_TOPICS);
 80171ae:	6860      	ldr	r0, [r4, #4]
 80171b0:	2113      	movs	r1, #19
 80171b2:	f7ff fea1 	bl	8016ef8 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_PUB_STOP_TOPICS);
 80171b6:	2113      	movs	r1, #19
 80171b8:	6860      	ldr	r0, [r4, #4]
 80171ba:	f001 f801 	bl	80181c0 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_PUB_STOP_TOPICS, (void*) this,
 80171be:	4b24      	ldr	r3, [pc, #144]	@ (8017250 <_ZN10Publishers12AddRegistersEv+0x100>)
 80171c0:	4622      	mov	r2, r4
 80171c2:	6860      	ldr	r0, [r4, #4]
 80171c4:	2113      	movs	r1, #19
 80171c6:	f7ff fec8 	bl	8016f5a <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_PUB_LINK_INTERFACE);
 80171ca:	6860      	ldr	r0, [r4, #4]
 80171cc:	2114      	movs	r1, #20
 80171ce:	f7ff fe93 	bl	8016ef8 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_PUB_LINK_INTERFACE, 2);
 80171d2:	2202      	movs	r2, #2
 80171d4:	2114      	movs	r1, #20
 80171d6:	6860      	ldr	r0, [r4, #4]
 80171d8:	f001 f80e 	bl	80181f8 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_PUB_LINK_INTERFACE, (void*) this,
 80171dc:	4b1d      	ldr	r3, [pc, #116]	@ (8017254 <_ZN10Publishers12AddRegistersEv+0x104>)
 80171de:	4622      	mov	r2, r4
 80171e0:	6860      	ldr	r0, [r4, #4]
 80171e2:	2114      	movs	r1, #20
 80171e4:	f7ff feb9 	bl	8016f5a <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_PUB_UNLINK_INTERFACE);
 80171e8:	6860      	ldr	r0, [r4, #4]
 80171ea:	2115      	movs	r1, #21
 80171ec:	f7ff fe84 	bl	8016ef8 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_PUB_UNLINK_INTERFACE, 2);
 80171f0:	2202      	movs	r2, #2
 80171f2:	2115      	movs	r1, #21
 80171f4:	6860      	ldr	r0, [r4, #4]
 80171f6:	f000 ffff 	bl	80181f8 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_PUB_UNLINK_INTERFACE, (void*) this,
 80171fa:	4622      	mov	r2, r4
 80171fc:	4b16      	ldr	r3, [pc, #88]	@ (8017258 <_ZN10Publishers12AddRegistersEv+0x108>)
 80171fe:	2115      	movs	r1, #21
 8017200:	6860      	ldr	r0, [r4, #4]
 8017202:	f7ff feaa 	bl	8016f5a <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_PUB_CLEAR_INTERFACES);
 8017206:	6860      	ldr	r0, [r4, #4]
 8017208:	2116      	movs	r1, #22
 801720a:	f7ff fe75 	bl	8016ef8 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_PUB_CLEAR_INTERFACES);
 801720e:	2116      	movs	r1, #22
 8017210:	6860      	ldr	r0, [r4, #4]
 8017212:	f000 ffd5 	bl	80181c0 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_PUB_CLEAR_INTERFACES, (void*) this,
 8017216:	4b11      	ldr	r3, [pc, #68]	@ (801725c <_ZN10Publishers12AddRegistersEv+0x10c>)
 8017218:	4622      	mov	r2, r4
 801721a:	6860      	ldr	r0, [r4, #4]
 801721c:	2116      	movs	r1, #22
 801721e:	f7ff fe9c 	bl	8016f5a <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_PUB_SET_TARGET_ADDRESS);
 8017222:	6860      	ldr	r0, [r4, #4]
 8017224:	2117      	movs	r1, #23
 8017226:	f7ff fe67 	bl	8016ef8 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_PUB_SET_TARGET_ADDRESS, 3);
 801722a:	2203      	movs	r2, #3
 801722c:	2117      	movs	r1, #23
 801722e:	6860      	ldr	r0, [r4, #4]
 8017230:	f000 ffe2 	bl	80181f8 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_PUB_SET_TARGET_ADDRESS, (void*) this,
 8017234:	4622      	mov	r2, r4
 8017236:	6860      	ldr	r0, [r4, #4]
 8017238:	2117      	movs	r1, #23
 801723a:	4b09      	ldr	r3, [pc, #36]	@ (8017260 <_ZN10Publishers12AddRegistersEv+0x110>)
}
 801723c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	registers->AddWriteCallback<uint8_t>(REG_PUB_SET_TARGET_ADDRESS, (void*) this,
 8017240:	f7ff be8b 	b.w	8016f5a <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
 8017244:	080167f5 	.word	0x080167f5
 8017248:	0801695f 	.word	0x0801695f
 801724c:	08016841 	.word	0x08016841
 8017250:	08016893 	.word	0x08016893
 8017254:	08016df5 	.word	0x08016df5
 8017258:	08016ad9 	.word	0x08016ad9
 801725c:	080168d3 	.word	0x080168d3
 8017260:	080169ff 	.word	0x080169ff

08017264 <_ZN9PublisherC1ERKS_>:
 8017264:	b570      	push	{r4, r5, r6, lr}
 8017266:	680a      	ldr	r2, [r1, #0]
 8017268:	4604      	mov	r4, r0
 801726a:	888b      	ldrh	r3, [r1, #4]
 801726c:	460d      	mov	r5, r1
 801726e:	6002      	str	r2, [r0, #0]
 8017270:	8083      	strh	r3, [r0, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017272:	2300      	movs	r3, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017274:	e9d1 2602 	ldrd	r2, r6, [r1, #8]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017278:	e9c0 3302 	strd	r3, r3, [r0, #8]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801727c:	1ab6      	subs	r6, r6, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
 801727e:	6103      	str	r3, [r0, #16]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8017280:	d03c      	beq.n	80172fc <_ZN9PublisherC1ERKS_+0x98>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8017282:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017286:	429e      	cmp	r6, r3
 8017288:	d301      	bcc.n	801728e <_ZN9PublisherC1ERKS_+0x2a>
	      std::__throw_bad_array_new_length();
 801728a:	f003 fb6a 	bl	801a962 <_ZSt28__throw_bad_array_new_lengthv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801728e:	4630      	mov	r0, r6
 8017290:	f003 fab5 	bl	801a7fe <_Znwj>
 8017294:	4603      	mov	r3, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017296:	441e      	add	r6, r3
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8017298:	e9c4 3302 	strd	r3, r3, [r4, #8]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801729c:	6126      	str	r6, [r4, #16]
      : _M_current(__i) { }
 801729e:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
	  if (_Num)
 80172a2:	4291      	cmp	r1, r2
	  const ptrdiff_t _Num = __last - __first;
 80172a4:	eba2 0601 	sub.w	r6, r2, r1
	  if (_Num)
 80172a8:	d004      	beq.n	80172b4 <_ZN9PublisherC1ERKS_+0x50>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80172aa:	4618      	mov	r0, r3
 80172ac:	4632      	mov	r2, r6
 80172ae:	f003 fddd 	bl	801ae6c <memmove>
 80172b2:	4603      	mov	r3, r0
	  return __result + _Num;
 80172b4:	4433      	add	r3, r6
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80172b6:	e9d5 2605 	ldrd	r2, r6, [r5, #20]
	this->_M_impl._M_finish =
 80172ba:	60e3      	str	r3, [r4, #12]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80172bc:	2300      	movs	r3, #0
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80172be:	1ab6      	subs	r6, r6, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
 80172c0:	61e3      	str	r3, [r4, #28]
 80172c2:	e9c4 3305 	strd	r3, r3, [r4, #20]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80172c6:	d01b      	beq.n	8017300 <_ZN9PublisherC1ERKS_+0x9c>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80172c8:	4b0e      	ldr	r3, [pc, #56]	@ (8017304 <_ZN9PublisherC1ERKS_+0xa0>)
 80172ca:	429e      	cmp	r6, r3
 80172cc:	d8dd      	bhi.n	801728a <_ZN9PublisherC1ERKS_+0x26>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80172ce:	4630      	mov	r0, r6
 80172d0:	f003 fa95 	bl	801a7fe <_Znwj>
 80172d4:	4603      	mov	r3, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80172d6:	441e      	add	r6, r3
	this->_M_impl._M_finish = this->_M_impl._M_start;
 80172d8:	e9c4 3305 	strd	r3, r3, [r4, #20]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80172dc:	61e6      	str	r6, [r4, #28]
 80172de:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
	  if (_Num)
 80172e2:	4291      	cmp	r1, r2
	  const ptrdiff_t _Num = __last - __first;
 80172e4:	eba2 0501 	sub.w	r5, r2, r1
	  if (_Num)
 80172e8:	d004      	beq.n	80172f4 <_ZN9PublisherC1ERKS_+0x90>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80172ea:	4618      	mov	r0, r3
 80172ec:	462a      	mov	r2, r5
 80172ee:	f003 fdbd 	bl	801ae6c <memmove>
 80172f2:	4603      	mov	r3, r0
	  return __result + _Num;
 80172f4:	442b      	add	r3, r5
 80172f6:	4620      	mov	r0, r4
	this->_M_impl._M_finish =
 80172f8:	61a3      	str	r3, [r4, #24]
 80172fa:	bd70      	pop	{r4, r5, r6, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80172fc:	4633      	mov	r3, r6
 80172fe:	e7ca      	b.n	8017296 <_ZN9PublisherC1ERKS_+0x32>
 8017300:	4633      	mov	r3, r6
 8017302:	e7e8      	b.n	80172d6 <_ZN9PublisherC1ERKS_+0x72>
 8017304:	7ffffffc 	.word	0x7ffffffc

08017308 <_ZNSt6vectorI9PublisherSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8017308:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801730c:	e9d0 7900 	ldrd	r7, r9, [r0]
 8017310:	4692      	mov	sl, r2
	if (max_size() - size() < __n)
 8017312:	f06f 437c 	mvn.w	r3, #4227858432	@ 0xfc000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017316:	eba9 0207 	sub.w	r2, r9, r7
 801731a:	4606      	mov	r6, r0
 801731c:	4688      	mov	r8, r1
	if (max_size() - size() < __n)
 801731e:	ebb3 1f62 	cmp.w	r3, r2, asr #5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017322:	ea4f 1462 	mov.w	r4, r2, asr #5
	if (max_size() - size() < __n)
 8017326:	d102      	bne.n	801732e <_ZNSt6vectorI9PublisherSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8017328:	481a      	ldr	r0, [pc, #104]	@ (8017394 <_ZNSt6vectorI9PublisherSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>)
 801732a:	f003 fb1d 	bl	801a968 <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 801732e:	45b9      	cmp	r9, r7
 8017330:	bf14      	ite	ne
 8017332:	4622      	movne	r2, r4
 8017334:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 8017336:	eba1 0b07 	sub.w	fp, r1, r7
 801733a:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801733c:	d225      	bcs.n	801738a <_ZNSt6vectorI9PublisherSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x82>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801733e:	b334      	cbz	r4, 801738e <_ZNSt6vectorI9PublisherSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x86>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8017340:	429c      	cmp	r4, r3
 8017342:	bf28      	it	cs
 8017344:	461c      	movcs	r4, r3
 8017346:	0160      	lsls	r0, r4, #5
 8017348:	f003 fa59 	bl	801a7fe <_Znwj>
 801734c:	4605      	mov	r5, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801734e:	4651      	mov	r1, sl
 8017350:	eb05 000b 	add.w	r0, r5, fp
 8017354:	f7ff ff86 	bl	8017264 <_ZN9PublisherC1ERKS_>
      return std::__relocate_a_1(std::__niter_base(__first),
 8017358:	4641      	mov	r1, r8
 801735a:	462a      	mov	r2, r5
 801735c:	4638      	mov	r0, r7
 801735e:	f7ff fbeb 	bl	8016b38 <_ZSt14__relocate_a_1IP9PublisherS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>
 8017362:	4649      	mov	r1, r9
 8017364:	f100 0220 	add.w	r2, r0, #32
 8017368:	4640      	mov	r0, r8
 801736a:	f7ff fbe5 	bl	8016b38 <_ZSt14__relocate_a_1IP9PublisherS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>
 801736e:	4680      	mov	r8, r0
	if (__p)
 8017370:	b127      	cbz	r7, 801737c <_ZNSt6vectorI9PublisherSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x74>
		    this->_M_impl._M_end_of_storage - __old_start);
 8017372:	68b1      	ldr	r1, [r6, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8017374:	4638      	mov	r0, r7
 8017376:	1bc9      	subs	r1, r1, r7
 8017378:	f003 fa1c 	bl	801a7b4 <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801737c:	eb05 1444 	add.w	r4, r5, r4, lsl #5
      this->_M_impl._M_finish = __new_finish;
 8017380:	e9c6 5800 	strd	r5, r8, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8017384:	60b4      	str	r4, [r6, #8]
    }
 8017386:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801738a:	461c      	mov	r4, r3
 801738c:	e7db      	b.n	8017346 <_ZNSt6vectorI9PublisherSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801738e:	4625      	mov	r5, r4
 8017390:	e7dd      	b.n	801734e <_ZNSt6vectorI9PublisherSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 8017392:	bf00      	nop
 8017394:	0801b17a 	.word	0x0801b17a

08017398 <_ZN10Publishers12AddPublisherEh>:
bool Publishers::AddPublisher(uint8_t ID) {
 8017398:	b530      	push	{r4, r5, lr}
 801739a:	b08b      	sub	sp, #44	@ 0x2c
 801739c:	4604      	mov	r4, r0
 801739e:	460d      	mov	r5, r1
	FindPublisher(ID, &success);
 80173a0:	f10d 0207 	add.w	r2, sp, #7
 80173a4:	f7ff f9ea 	bl	801677c <_ZN10Publishers13FindPublisherEhPb>
	if (success)
 80173a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80173ac:	bb6b      	cbnz	r3, 801740a <_ZN10Publishers12AddPublisherEh+0x72>
	publisher.prescaler = 1;
 80173ae:	2201      	movs	r2, #1
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 80173b0:	f04f 31ff 	mov.w	r1, #4294967295
 80173b4:	6820      	ldr	r0, [r4, #0]
	publisher.activated = false;
 80173b6:	f88d 3009 	strb.w	r3, [sp, #9]
	publisher.counter = 0;
 80173ba:	f8ad 300c 	strh.w	r3, [sp, #12]
	publisher.ID = ID;
 80173be:	f88d 5008 	strb.w	r5, [sp, #8]
	publisher.prescaler = 1;
 80173c2:	f8ad 200a 	strh.w	r2, [sp, #10]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80173c6:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80173ca:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80173ce:	e9cd 3308 	strd	r3, r3, [sp, #32]
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 80173d2:	f7f5 f8af 	bl	800c534 <osSemaphoreAcquire>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80173d6:	e9d4 0304 	ldrd	r0, r3, [r4, #16]
 80173da:	4298      	cmp	r0, r3
 80173dc:	d00e      	beq.n	80173fc <_ZN10Publishers12AddPublisherEh+0x64>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80173de:	a902      	add	r1, sp, #8
 80173e0:	f7ff ff40 	bl	8017264 <_ZN9PublisherC1ERKS_>
	    ++this->_M_impl._M_finish;
 80173e4:	6923      	ldr	r3, [r4, #16]
 80173e6:	3320      	adds	r3, #32
 80173e8:	6123      	str	r3, [r4, #16]
	osSemaphoreRelease(PublishersSemaphore);
 80173ea:	6820      	ldr	r0, [r4, #0]
 80173ec:	f7f5 f8d6 	bl	800c59c <osSemaphoreRelease>
}
 80173f0:	a802      	add	r0, sp, #8
 80173f2:	f7ff fb91 	bl	8016b18 <_ZN9PublisherD1Ev>
	return true;
 80173f6:	2001      	movs	r0, #1
}
 80173f8:	b00b      	add	sp, #44	@ 0x2c
 80173fa:	bd30      	pop	{r4, r5, pc}
	  _M_realloc_insert(end(), __x);
 80173fc:	4601      	mov	r1, r0
 80173fe:	aa02      	add	r2, sp, #8
 8017400:	f104 000c 	add.w	r0, r4, #12
 8017404:	f7ff ff80 	bl	8017308 <_ZNSt6vectorI9PublisherSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 8017408:	e7ef      	b.n	80173ea <_ZN10Publishers12AddPublisherEh+0x52>
		return false;
 801740a:	2000      	movs	r0, #0
 801740c:	e7f4      	b.n	80173f8 <_ZN10Publishers12AddPublisherEh+0x60>

0801740e <_ZNSt6vectorIhSaIhEEaSERKS1_.isra.0>:
      if (std::__addressof(__x) != this)
 801740e:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
 8017410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017414:	4604      	mov	r4, r0
 8017416:	460d      	mov	r5, r1
      if (std::__addressof(__x) != this)
 8017418:	d01d      	beq.n	8017456 <_ZNSt6vectorIhSaIhEEaSERKS1_.isra.0+0x48>
			 - this->_M_impl._M_start); }
 801741a:	6802      	ldr	r2, [r0, #0]
 801741c:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801741e:	e9d1 7800 	ldrd	r7, r8, [r1]
			 - this->_M_impl._M_start); }
 8017422:	1a9b      	subs	r3, r3, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017424:	eba8 0607 	sub.w	r6, r8, r7
	  if (__xlen > capacity())
 8017428:	429e      	cmp	r6, r3
 801742a:	d916      	bls.n	801745a <_ZNSt6vectorIhSaIhEEaSERKS1_.isra.0+0x4c>
	  pointer __result = this->_M_allocate(__n);
 801742c:	4630      	mov	r0, r6
 801742e:	f7ff f8c8 	bl	80165c2 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
			      _Category>::__copy_m(__first, __last, __result);
 8017432:	4641      	mov	r1, r8
 8017434:	4602      	mov	r2, r0
 8017436:	4605      	mov	r5, r0
 8017438:	4638      	mov	r0, r7
 801743a:	f7e9 fc8f 	bl	8000d5c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 801743e:	6820      	ldr	r0, [r4, #0]
	if (__p)
 8017440:	b118      	cbz	r0, 801744a <_ZNSt6vectorIhSaIhEEaSERKS1_.isra.0+0x3c>
			    - this->_M_impl._M_start);
 8017442:	68a1      	ldr	r1, [r4, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8017444:	1a09      	subs	r1, r1, r0
 8017446:	f003 f9b5 	bl	801a7b4 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
 801744a:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 801744c:	4435      	add	r5, r6
 801744e:	60a5      	str	r5, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8017450:	6823      	ldr	r3, [r4, #0]
 8017452:	4433      	add	r3, r6
 8017454:	6063      	str	r3, [r4, #4]
    }
 8017456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801745a:	6843      	ldr	r3, [r0, #4]
 801745c:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
 801745e:	429e      	cmp	r6, r3
 8017460:	d804      	bhi.n	801746c <_ZNSt6vectorIhSaIhEEaSERKS1_.isra.0+0x5e>
 8017462:	4641      	mov	r1, r8
 8017464:	4638      	mov	r0, r7
 8017466:	f7e9 fc79 	bl	8000d5c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
      return std::uninitialized_copy(__first, __last, __result);
 801746a:	e7f1      	b.n	8017450 <_ZNSt6vectorIhSaIhEEaSERKS1_.isra.0+0x42>
 801746c:	18f9      	adds	r1, r7, r3
 801746e:	4638      	mov	r0, r7
 8017470:	f7e9 fc74 	bl	8000d5c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8017474:	e9d4 0200 	ldrd	r0, r2, [r4]
 8017478:	e9d5 3100 	ldrd	r3, r1, [r5]
 801747c:	1a10      	subs	r0, r2, r0
 801747e:	4418      	add	r0, r3
 8017480:	e7f1      	b.n	8017466 <_ZNSt6vectorIhSaIhEEaSERKS1_.isra.0+0x58>
	...

08017484 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb>:
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 8017484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017488:	4680      	mov	r8, r0
 801748a:	b0c5      	sub	sp, #276	@ 0x114
 801748c:	468a      	mov	sl, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801748e:	6800      	ldr	r0, [r0, #0]
 8017490:	f04f 31ff 	mov.w	r1, #4294967295
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 8017494:	9300      	str	r3, [sp, #0]
 8017496:	4616      	mov	r6, r2
 8017498:	f89d b138 	ldrb.w	fp, [sp, #312]	@ 0x138
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801749c:	f7f5 f84a 	bl	800c534 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80174a0:	f10d 020f 	add.w	r2, sp, #15
 80174a4:	4651      	mov	r1, sl
 80174a6:	4640      	mov	r0, r8
 80174a8:	f000 fe51 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80174ac:	f89d 300f 	ldrb.w	r3, [sp, #15]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80174b0:	4605      	mov	r5, r0
	if (!success) {
 80174b2:	b943      	cbnz	r3, 80174c6 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x42>
		return false;
 80174b4:	2400      	movs	r4, #0
		osSemaphoreRelease(RegistersSemaphore);
 80174b6:	f8d8 0000 	ldr.w	r0, [r8]
 80174ba:	f7f5 f86f 	bl	800c59c <osSemaphoreRelease>
}
 80174be:	4620      	mov	r0, r4
 80174c0:	b045      	add	sp, #276	@ 0x114
 80174c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80174c6:	497b      	ldr	r1, [pc, #492]	@ (80176b4 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x230>)
 80174c8:	487b      	ldr	r0, [pc, #492]	@ (80176b8 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x234>)
 80174ca:	f003 fa2f 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 80174ce:	4604      	mov	r4, r0
 80174d0:	2800      	cmp	r0, #0
 80174d2:	d15d      	bne.n	8017590 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x10c>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 80174d4:	4979      	ldr	r1, [pc, #484]	@ (80176bc <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x238>)
 80174d6:	4878      	ldr	r0, [pc, #480]	@ (80176b8 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x234>)
 80174d8:	f003 fa28 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 80174dc:	4604      	mov	r4, r0
 80174de:	2800      	cmp	r0, #0
 80174e0:	d158      	bne.n	8017594 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x110>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 80174e2:	4977      	ldr	r1, [pc, #476]	@ (80176c0 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x23c>)
 80174e4:	4874      	ldr	r0, [pc, #464]	@ (80176b8 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x234>)
 80174e6:	f003 fa21 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 80174ea:	4604      	mov	r4, r0
 80174ec:	2800      	cmp	r0, #0
 80174ee:	d153      	bne.n	8017598 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x114>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 80174f0:	4974      	ldr	r1, [pc, #464]	@ (80176c4 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x240>)
 80174f2:	4871      	ldr	r0, [pc, #452]	@ (80176b8 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x234>)
 80174f4:	f003 fa1a 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 80174f8:	4604      	mov	r4, r0
 80174fa:	2800      	cmp	r0, #0
 80174fc:	d14e      	bne.n	801759c <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x118>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 80174fe:	496e      	ldr	r1, [pc, #440]	@ (80176b8 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x234>)
 8017500:	4608      	mov	r0, r1
 8017502:	f003 fa13 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8017506:	4604      	mov	r4, r0
 8017508:	2800      	cmp	r0, #0
 801750a:	d149      	bne.n	80175a0 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x11c>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 801750c:	496e      	ldr	r1, [pc, #440]	@ (80176c8 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x244>)
 801750e:	486a      	ldr	r0, [pc, #424]	@ (80176b8 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x234>)
 8017510:	f003 fa0c 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8017514:	4604      	mov	r4, r0
 8017516:	2800      	cmp	r0, #0
 8017518:	d144      	bne.n	80175a4 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x120>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 801751a:	496c      	ldr	r1, [pc, #432]	@ (80176cc <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x248>)
 801751c:	4866      	ldr	r0, [pc, #408]	@ (80176b8 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x234>)
 801751e:	f003 fa05 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8017522:	4604      	mov	r4, r0
 8017524:	2800      	cmp	r0, #0
 8017526:	d13f      	bne.n	80175a8 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x124>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 8017528:	4969      	ldr	r1, [pc, #420]	@ (80176d0 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x24c>)
 801752a:	4863      	ldr	r0, [pc, #396]	@ (80176b8 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x234>)
 801752c:	f003 f9fe 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8017530:	4604      	mov	r4, r0
 8017532:	2800      	cmp	r0, #0
 8017534:	d13a      	bne.n	80175ac <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x128>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8017536:	4967      	ldr	r1, [pc, #412]	@ (80176d4 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x250>)
 8017538:	485f      	ldr	r0, [pc, #380]	@ (80176b8 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x234>)
 801753a:	f003 f9f7 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 801753e:	4604      	mov	r4, r0
 8017540:	2800      	cmp	r0, #0
 8017542:	d135      	bne.n	80175b0 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x12c>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 8017544:	4964      	ldr	r1, [pc, #400]	@ (80176d8 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x254>)
 8017546:	485c      	ldr	r0, [pc, #368]	@ (80176b8 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x234>)
 8017548:	f003 f9f0 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 801754c:	1e04      	subs	r4, r0, #0
 801754e:	bf14      	ite	ne
 8017550:	2309      	movne	r3, #9
 8017552:	2300      	moveq	r3, #0
 8017554:	f88d 400f 	strb.w	r4, [sp, #15]
	if (!success) {
 8017558:	2c00      	cmp	r4, #0
 801755a:	d0ab      	beq.n	80174b4 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x30>
	if (target_register->register_info.type != registered_type) {
 801755c:	792a      	ldrb	r2, [r5, #4]
 801755e:	429a      	cmp	r2, r3
 8017560:	d1a8      	bne.n	80174b4 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x30>
	if (callbacks[target_register->register_info.type] == NULL) {
 8017562:	3304      	adds	r3, #4
 8017564:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8017568:	2b00      	cmp	r3, #0
 801756a:	d0a3      	beq.n	80174b4 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x30>
	if (target_register->access.read) {
 801756c:	7a6a      	ldrb	r2, [r5, #9]
 801756e:	2a00      	cmp	r2, #0
 8017570:	d06a      	beq.n	8017648 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1c4>
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8017572:	8969      	ldrh	r1, [r5, #10]
		success = false; // false by default to use pointer mode if the callback doesn't update the flag
 8017574:	2200      	movs	r2, #0
 8017576:	e9d3 0300 	ldrd	r0, r3, [r3]
 801757a:	f88d 200f 	strb.w	r2, [sp, #15]
 801757e:	1a1b      	subs	r3, r3, r0
	if (__n >= this->size())
 8017580:	ebb1 1f23 	cmp.w	r1, r3, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017584:	ea4f 1223 	mov.w	r2, r3, asr #4
	if (__n >= this->size())
 8017588:	d314      	bcc.n	80175b4 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x130>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 801758a:	4854      	ldr	r0, [pc, #336]	@ (80176dc <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x258>)
 801758c:	f003 f9ef 	bl	801a96e <_ZSt24__throw_out_of_range_fmtPKcz>
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8017590:	2300      	movs	r3, #0
 8017592:	e7df      	b.n	8017554 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0xd0>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8017594:	2301      	movs	r3, #1
 8017596:	e7dd      	b.n	8017554 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0xd0>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8017598:	2302      	movs	r3, #2
 801759a:	e7db      	b.n	8017554 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0xd0>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 801759c:	2303      	movs	r3, #3
 801759e:	e7d9      	b.n	8017554 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0xd0>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 80175a0:	2304      	movs	r3, #4
 80175a2:	e7d7      	b.n	8017554 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0xd0>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 80175a4:	2305      	movs	r3, #5
 80175a6:	e7d5      	b.n	8017554 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0xd0>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 80175a8:	2306      	movs	r3, #6
 80175aa:	e7d3      	b.n	8017554 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0xd0>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 80175ac:	2307      	movs	r3, #7
 80175ae:	e7d1      	b.n	8017554 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0xd0>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 80175b0:	2308      	movs	r3, #8
 80175b2:	e7cf      	b.n	8017554 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0xd0>
	return *(this->_M_impl._M_start + __n);
 80175b4:	010b      	lsls	r3, r1, #4
 80175b6:	eb00 1101 	add.w	r1, r0, r1, lsl #4
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 80175ba:	f850 9003 	ldr.w	r9, [r0, r3]
 80175be:	684b      	ldr	r3, [r1, #4]
 80175c0:	9301      	str	r3, [sp, #4]
 80175c2:	68cb      	ldr	r3, [r1, #12]
 80175c4:	461f      	mov	r7, r3
		if (use_semaphore && target_register->register_semaphore != NULL) {
 80175c6:	f1bb 0f00 	cmp.w	fp, #0
 80175ca:	d006      	beq.n	80175da <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x156>
 80175cc:	68eb      	ldr	r3, [r5, #12]
 80175ce:	b123      	cbz	r3, 80175da <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x156>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 80175d0:	f04f 31ff 	mov.w	r1, #4294967295
 80175d4:	6818      	ldr	r0, [r3, #0]
 80175d6:	f7f4 ffad 	bl	800c534 <osSemaphoreAcquire>
		if (target_register->mode.callbacks) {
 80175da:	786b      	ldrb	r3, [r5, #1]
 80175dc:	b1c3      	cbz	r3, 8017610 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x18c>
			if (output != NULL) {
 80175de:	2e00      	cmp	r6, #0
 80175e0:	d037      	beq.n	8017652 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1ce>
				*callback_output = output;
 80175e2:	4632      	mov	r2, r6
 80175e4:	2300      	movs	r3, #0
 80175e6:	601a      	str	r2, [r3, #0]
			if (callbacks.read != NULL) {
 80175e8:	b197      	cbz	r7, 8017610 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x18c>
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 80175ea:	9b00      	ldr	r3, [sp, #0]
 80175ec:	2200      	movs	r2, #0
 80175ee:	4651      	mov	r1, sl
 80175f0:	9801      	ldr	r0, [sp, #4]
 80175f2:	47b8      	blx	r7
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 80175f4:	796b      	ldrb	r3, [r5, #5]
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 80175f6:	f88d 000f 	strb.w	r0, [sp, #15]
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 80175fa:	b363      	cbz	r3, 8017656 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1d2>
 80175fc:	88eb      	ldrh	r3, [r5, #6]
 80175fe:	b10b      	cbz	r3, 8017604 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x180>
					*length = 1;
 8017600:	9a00      	ldr	r2, [sp, #0]
 8017602:	8013      	strh	r3, [r2, #0]
				if (*callback_output != output && output != NULL) {
 8017604:	2300      	movs	r3, #0
 8017606:	681b      	ldr	r3, [r3, #0]
 8017608:	42b3      	cmp	r3, r6
 801760a:	d001      	beq.n	8017610 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x18c>
 801760c:	2e00      	cmp	r6, #0
 801760e:	d130      	bne.n	8017672 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1ee>
		if (not success && target_register->mode.pointer) {
 8017610:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8017614:	b983      	cbnz	r3, 8017638 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1b4>
 8017616:	782b      	ldrb	r3, [r5, #0]
 8017618:	b173      	cbz	r3, 8017638 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1b4>
			success = true;
 801761a:	2301      	movs	r3, #1
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 801761c:	796a      	ldrb	r2, [r5, #5]
			success = true;
 801761e:	f88d 300f 	strb.w	r3, [sp, #15]
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 8017622:	2a00      	cmp	r2, #0
 8017624:	d03d      	beq.n	80176a2 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x21e>
 8017626:	88e9      	ldrh	r1, [r5, #6]
 8017628:	2900      	cmp	r1, #0
 801762a:	d130      	bne.n	801768e <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x20a>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801762c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8017630:	1a9b      	subs	r3, r3, r2
				*length = register_vector->size();
 8017632:	9a00      	ldr	r2, [sp, #0]
 8017634:	8013      	strh	r3, [r2, #0]
				if (output != NULL) {
 8017636:	bb26      	cbnz	r6, 8017682 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1fe>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8017638:	f1bb 0f00 	cmp.w	fp, #0
 801763c:	d004      	beq.n	8017648 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1c4>
 801763e:	68eb      	ldr	r3, [r5, #12]
 8017640:	b113      	cbz	r3, 8017648 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1c4>
			osSemaphoreRelease(*(target_register->register_semaphore));
 8017642:	6818      	ldr	r0, [r3, #0]
 8017644:	f7f4 ffaa 	bl	800c59c <osSemaphoreRelease>
	osSemaphoreRelease(RegistersSemaphore);
 8017648:	f8d8 0000 	ldr.w	r0, [r8]
 801764c:	f7f4 ffa6 	bl	800c59c <osSemaphoreRelease>
	return true;
 8017650:	e735      	b.n	80174be <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x3a>
				*callback_output = output_buffer; // use a temporary buffer to store values if not input. TODO the size is limited so there is possibly an issue if output == NULL and length > 256
 8017652:	aa04      	add	r2, sp, #16
 8017654:	e7c6      	b.n	80175e4 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x160>
					*length = 1;
 8017656:	2301      	movs	r3, #1
 8017658:	e7d2      	b.n	8017600 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x17c>
						output[index] = (*callback_output )[index];
 801765a:	2300      	movs	r3, #0
 801765c:	b291      	uxth	r1, r2
 801765e:	3201      	adds	r2, #1
 8017660:	681b      	ldr	r3, [r3, #0]
 8017662:	5c5b      	ldrb	r3, [r3, r1]
 8017664:	5473      	strb	r3, [r6, r1]
					for (uint16_t index = 0; index < *length; index++) {
 8017666:	9b00      	ldr	r3, [sp, #0]
 8017668:	8819      	ldrh	r1, [r3, #0]
 801766a:	b293      	uxth	r3, r2
 801766c:	4299      	cmp	r1, r3
 801766e:	d8f4      	bhi.n	801765a <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1d6>
 8017670:	e7ce      	b.n	8017610 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x18c>
 8017672:	2200      	movs	r2, #0
 8017674:	e7f7      	b.n	8017666 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1e2>
 8017676:	b28b      	uxth	r3, r1
						output[index] = (*register_vector)[index];
 8017678:	f8d9 2000 	ldr.w	r2, [r9]
 801767c:	3101      	adds	r1, #1
 801767e:	56d2      	ldrsb	r2, [r2, r3]
 8017680:	54f2      	strb	r2, [r6, r3]
					for (uint16_t index = 0; index < *length; index++) {
 8017682:	9b00      	ldr	r3, [sp, #0]
 8017684:	881a      	ldrh	r2, [r3, #0]
 8017686:	b28b      	uxth	r3, r1
 8017688:	429a      	cmp	r2, r3
 801768a:	d8f4      	bhi.n	8017676 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1f2>
 801768c:	e7d4      	b.n	8017638 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1b4>
				*length = target_register->register_info.length;
 801768e:	9b00      	ldr	r3, [sp, #0]
 8017690:	8019      	strh	r1, [r3, #0]
				if (output != NULL) {
 8017692:	2e00      	cmp	r6, #0
 8017694:	d0d0      	beq.n	8017638 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1b4>
 8017696:	4632      	mov	r2, r6
 8017698:	4449      	add	r1, r9
 801769a:	4648      	mov	r0, r9
 801769c:	f7fb f834 	bl	8012708 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80176a0:	e7ca      	b.n	8017638 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1b4>
				*length = 1;
 80176a2:	9a00      	ldr	r2, [sp, #0]
 80176a4:	8013      	strh	r3, [r2, #0]
				if (output != NULL) {
 80176a6:	2e00      	cmp	r6, #0
 80176a8:	d0c6      	beq.n	8017638 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1b4>
					*output = *callbacks.pointer;
 80176aa:	f999 3000 	ldrsb.w	r3, [r9]
 80176ae:	7033      	strb	r3, [r6, #0]
 80176b0:	e7c2      	b.n	8017638 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1b4>
 80176b2:	bf00      	nop
 80176b4:	0801b5d4 	.word	0x0801b5d4
 80176b8:	0801b5dc 	.word	0x0801b5dc
 80176bc:	0801b5c4 	.word	0x0801b5c4
 80176c0:	0801b5b4 	.word	0x0801b5b4
 80176c4:	0801b5a4 	.word	0x0801b5a4
 80176c8:	0801b5cc 	.word	0x0801b5cc
 80176cc:	0801b5bc 	.word	0x0801b5bc
 80176d0:	0801b5ac 	.word	0x0801b5ac
 80176d4:	0801b59c 	.word	0x0801b59c
 80176d8:	0801b594 	.word	0x0801b594
 80176dc:	0801b3bc 	.word	0x0801b3bc

080176e0 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0>:
	if (__first != __last)
 80176e0:	429a      	cmp	r2, r3
	insert(const_iterator __position, _InputIterator __first,
 80176e2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176e6:	4604      	mov	r4, r0
 80176e8:	460d      	mov	r5, r1
 80176ea:	4617      	mov	r7, r2
 80176ec:	4699      	mov	r9, r3
 80176ee:	d022      	beq.n	8017736 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x56>
 80176f0:	eba3 0802 	sub.w	r8, r3, r2
      : _M_current(__i) { }
 80176f4:	f8d0 a000 	ldr.w	sl, [r0]
			  - this->_M_impl._M_finish) >= __n)
 80176f8:	e9d0 6301 	ldrd	r6, r3, [r0, #4]
 80176fc:	1b9b      	subs	r3, r3, r6
	    if (size_type(this->_M_impl._M_end_of_storage
 80176fe:	4598      	cmp	r8, r3
 8017700:	d831      	bhi.n	8017766 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x86>
    { return __lhs.base() - __rhs.base(); }
 8017702:	eba6 0a01 	sub.w	sl, r6, r1
		if (__elems_after > __n)
 8017706:	45d0      	cmp	r8, sl
 8017708:	d217      	bcs.n	801773a <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x5a>
		    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 801770a:	eba6 0a08 	sub.w	sl, r6, r8
			      _Category>::__copy_m(__first, __last, __result);
 801770e:	4632      	mov	r2, r6
 8017710:	4631      	mov	r1, r6
 8017712:	4650      	mov	r0, sl
 8017714:	f7ea faae 	bl	8001c74 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		    this->_M_impl._M_finish += __n;
 8017718:	6863      	ldr	r3, [r4, #4]
	  if (_Num)
 801771a:	ebba 0205 	subs.w	r2, sl, r5
 801771e:	4443      	add	r3, r8
 8017720:	6063      	str	r3, [r4, #4]
 8017722:	d003      	beq.n	801772c <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x4c>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8017724:	4629      	mov	r1, r5
 8017726:	1ab0      	subs	r0, r6, r2
 8017728:	f003 fba0 	bl	801ae6c <memmove>
			      _Category>::__copy_m(__first, __last, __result);
 801772c:	462a      	mov	r2, r5
 801772e:	4649      	mov	r1, r9
 8017730:	4638      	mov	r0, r7
 8017732:	f7e9 fb13 	bl	8000d5c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	}
 8017736:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { _M_current += __n; return *this; }
 801773a:	eb02 0b0a 	add.w	fp, r2, sl
 801773e:	4649      	mov	r1, r9
 8017740:	4632      	mov	r2, r6
		    this->_M_impl._M_finish += __n - __elems_after;
 8017742:	eba8 080a 	sub.w	r8, r8, sl
 8017746:	4658      	mov	r0, fp
 8017748:	f7e9 fb08 	bl	8000d5c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 801774c:	6862      	ldr	r2, [r4, #4]
 801774e:	4631      	mov	r1, r6
 8017750:	4628      	mov	r0, r5
 8017752:	4442      	add	r2, r8
 8017754:	6062      	str	r2, [r4, #4]
 8017756:	f7ea fa8d 	bl	8001c74 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		    this->_M_impl._M_finish += __elems_after;
 801775a:	6863      	ldr	r3, [r4, #4]
 801775c:	462a      	mov	r2, r5
 801775e:	4659      	mov	r1, fp
 8017760:	4453      	add	r3, sl
 8017762:	6063      	str	r3, [r4, #4]
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8017764:	e7e4      	b.n	8017730 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x50>
		  _M_check_len(__n, "vector::_M_range_insert");
 8017766:	4641      	mov	r1, r8
 8017768:	4a12      	ldr	r2, [pc, #72]	@ (80177b4 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0xd4>)
 801776a:	f7e9 fa74 	bl	8000c56 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 801776e:	4683      	mov	fp, r0
		pointer __new_start(this->_M_allocate(__len));
 8017770:	f7fe ff27 	bl	80165c2 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
			      _Category>::__copy_m(__first, __last, __result);
 8017774:	4629      	mov	r1, r5
 8017776:	4602      	mov	r2, r0
 8017778:	4680      	mov	r8, r0
 801777a:	4650      	mov	r0, sl
 801777c:	f7ea fa7a 	bl	8001c74 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8017780:	4649      	mov	r1, r9
 8017782:	4602      	mov	r2, r0
 8017784:	4638      	mov	r0, r7
 8017786:	f7e9 fae9 	bl	8000d5c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 801778a:	4631      	mov	r1, r6
 801778c:	4602      	mov	r2, r0
 801778e:	4628      	mov	r0, r5
 8017790:	f7ea fa70 	bl	8001c74 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8017794:	4605      	mov	r5, r0
	if (__p)
 8017796:	f1ba 0f00 	cmp.w	sl, #0
 801779a:	d005      	beq.n	80177a8 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0xc8>
			      this->_M_impl._M_end_of_storage - __old_start);
 801779c:	68a1      	ldr	r1, [r4, #8]
 801779e:	4650      	mov	r0, sl
 80177a0:	eba1 010a 	sub.w	r1, r1, sl
 80177a4:	f003 f806 	bl	801a7b4 <_ZdlPvj>
		this->_M_impl._M_end_of_storage = __new_start + __len;
 80177a8:	eb08 000b 	add.w	r0, r8, fp
		this->_M_impl._M_finish = __new_finish;
 80177ac:	e9c4 8500 	strd	r8, r5, [r4]
		this->_M_impl._M_end_of_storage = __new_start + __len;
 80177b0:	60a0      	str	r0, [r4, #8]
	  return begin() + __offset;
 80177b2:	e7c0      	b.n	8017736 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x56>
 80177b4:	0801b1c5 	.word	0x0801b1c5

080177b8 <_ZN10Publishers13SpinPublisherEh>:
void Publishers::SpinPublisher(uint8_t ID) {
 80177b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177bc:	b0ad      	sub	sp, #180	@ 0xb4
 80177be:	4605      	mov	r5, r0
	Publisher* publisher = FindPublisher(ID, &success);
 80177c0:	aa08      	add	r2, sp, #32
 80177c2:	f7fe ffdb 	bl	801677c <_ZN10Publishers13FindPublisherEhPb>
	if (!success) return;
 80177c6:	f89d 3020 	ldrb.w	r3, [sp, #32]
	Publisher* publisher = FindPublisher(ID, &success);
 80177ca:	4607      	mov	r7, r0
	if (!success) return;
 80177cc:	b14b      	cbz	r3, 80177e2 <_ZN10Publishers13SpinPublisherEh+0x2a>
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 80177ce:	f04f 31ff 	mov.w	r1, #4294967295
 80177d2:	6828      	ldr	r0, [r5, #0]
 80177d4:	f7f4 feae 	bl	800c534 <osSemaphoreAcquire>
	if (not publisher->activated) {
 80177d8:	787b      	ldrb	r3, [r7, #1]
 80177da:	b92b      	cbnz	r3, 80177e8 <_ZN10Publishers13SpinPublisherEh+0x30>
	osSemaphoreRelease(PublishersSemaphore);
 80177dc:	6828      	ldr	r0, [r5, #0]
 80177de:	f7f4 fedd 	bl	800c59c <osSemaphoreRelease>
}
 80177e2:	b02d      	add	sp, #180	@ 0xb4
 80177e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	publisher->counter += 1;
 80177e8:	88bb      	ldrh	r3, [r7, #4]
	if (publisher->counter >= publisher->prescaler) {
 80177ea:	887a      	ldrh	r2, [r7, #2]
	publisher->counter += 1;
 80177ec:	3301      	adds	r3, #1
 80177ee:	b29b      	uxth	r3, r3
	if (publisher->counter >= publisher->prescaler) {
 80177f0:	429a      	cmp	r2, r3
	publisher->counter += 1;
 80177f2:	80bb      	strh	r3, [r7, #4]
	if (publisher->counter >= publisher->prescaler) {
 80177f4:	d8f2      	bhi.n	80177dc <_ZN10Publishers13SpinPublisherEh+0x24>
      : _M_current(__i) { }
 80177f6:	68fb      	ldr	r3, [r7, #12]
		publisher->counter = 0;
 80177f8:	2400      	movs	r4, #0
 80177fa:	9305      	str	r3, [sp, #20]
 80177fc:	68bb      	ldr	r3, [r7, #8]
 80177fe:	80bc      	strh	r4, [r7, #4]
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8017800:	9303      	str	r3, [sp, #12]
		for (PublishInterface interface : publisher->interfaces) {
 8017802:	9a03      	ldr	r2, [sp, #12]
 8017804:	9b05      	ldr	r3, [sp, #20]
 8017806:	4293      	cmp	r3, r2
 8017808:	d0e8      	beq.n	80177dc <_ZN10Publishers13SpinPublisherEh+0x24>
 801780a:	9b03      	ldr	r3, [sp, #12]
 801780c:	781a      	ldrb	r2, [r3, #0]
 801780e:	785b      	ldrb	r3, [r3, #1]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017810:	941e      	str	r4, [sp, #120]	@ 0x78
			message.target_address = interface.address;
 8017812:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
      : _M_current(__i) { }
 8017816:	69bb      	ldr	r3, [r7, #24]
			message.interface = interface.interface;
 8017818:	f88d 206c 	strb.w	r2, [sp, #108]	@ 0x6c
 801781c:	9306      	str	r3, [sp, #24]
 801781e:	697b      	ldr	r3, [r7, #20]
 8017820:	e9cd 441c 	strd	r4, r4, [sp, #112]	@ 0x70
 8017824:	9304      	str	r3, [sp, #16]
			for (Topic topic : publisher->topics) {
 8017826:	9a04      	ldr	r2, [sp, #16]
 8017828:	9b06      	ldr	r3, [sp, #24]
 801782a:	4293      	cmp	r3, r2
 801782c:	d11d      	bne.n	801786a <_ZN10Publishers13SpinPublisherEh+0xb2>
			if (message.payload.size() > 0) {
 801782e:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8017832:	429a      	cmp	r2, r3
 8017834:	d013      	beq.n	801785e <_ZN10Publishers13SpinPublisherEh+0xa6>
 8017836:	f89d 306c 	ldrb.w	r3, [sp, #108]	@ 0x6c
 801783a:	a91c      	add	r1, sp, #112	@ 0x70
				communication->Send(message);
 801783c:	68ae      	ldr	r6, [r5, #8]
 801783e:	a827      	add	r0, sp, #156	@ 0x9c
 8017840:	f88d 3098 	strb.w	r3, [sp, #152]	@ 0x98
 8017844:	f7e9 fa96 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8017848:	f8bd 307c 	ldrh.w	r3, [sp, #124]	@ 0x7c
 801784c:	a926      	add	r1, sp, #152	@ 0x98
 801784e:	4630      	mov	r0, r6
 8017850:	f8ad 30a8 	strh.w	r3, [sp, #168]	@ 0xa8
 8017854:	f7f8 f91c 	bl	800fa90 <_ZN13Communication4SendE13MessageHeader>
      }
 8017858:	a827      	add	r0, sp, #156	@ 0x9c
 801785a:	f7e9 f9db 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801785e:	a81c      	add	r0, sp, #112	@ 0x70
 8017860:	f7e9 f9d8 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      operator++() _GLIBCXX_NOEXCEPT
 8017864:	9b03      	ldr	r3, [sp, #12]
 8017866:	3302      	adds	r3, #2
 8017868:	e7ca      	b.n	8017800 <_ZN10Publishers13SpinPublisherEh+0x48>
				if (topic.activated) {
 801786a:	9b04      	ldr	r3, [sp, #16]
 801786c:	781b      	ldrb	r3, [r3, #0]
 801786e:	2b00      	cmp	r3, #0
 8017870:	d06d      	beq.n	801794e <_ZN10Publishers13SpinPublisherEh+0x196>
					Register element_register = registers->FindRegister(topic.ID, &success);
 8017872:	9a04      	ldr	r2, [sp, #16]
 8017874:	ab08      	add	r3, sp, #32
 8017876:	6869      	ldr	r1, [r5, #4]
 8017878:	a80a      	add	r0, sp, #40	@ 0x28
 801787a:	8852      	ldrh	r2, [r2, #2]
	: _M_start(), _M_finish(), _M_end_of_storage()
 801787c:	9425      	str	r4, [sp, #148]	@ 0x94
					element.ack = false;
 801787e:	f8ad 4086 	strh.w	r4, [sp, #134]	@ 0x86
					element.access = false;
 8017882:	f88d 4088 	strb.w	r4, [sp, #136]	@ 0x88
 8017886:	e9cd 4423 	strd	r4, r4, [sp, #140]	@ 0x8c
					Register element_register = registers->FindRegister(topic.ID, &success);
 801788a:	f000 fc71 	bl	8018170 <_ZN9Registers12FindRegisterEtPb>
					if (not success)
 801788e:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8017892:	2b00      	cmp	r3, #0
 8017894:	d058      	beq.n	8017948 <_ZN10Publishers13SpinPublisherEh+0x190>
					element.element_register = element_register;
 8017896:	ab0a      	add	r3, sp, #40	@ 0x28
 8017898:	e893 0003 	ldmia.w	r3, {r0, r1}
 801789c:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
 80178a0:	9020      	str	r0, [sp, #128]	@ 0x80
					switch (element.element_register.type) {
 80178a2:	f3c0 4007 	ubfx	r0, r0, #16, #8
					element.element_register = element_register;
 80178a6:	f8ad 1084 	strh.w	r1, [sp, #132]	@ 0x84
 80178aa:	940e      	str	r4, [sp, #56]	@ 0x38
					switch (element.element_register.type) {
 80178ac:	2808      	cmp	r0, #8
 80178ae:	f200 834e 	bhi.w	8017f4e <_ZN10Publishers13SpinPublisherEh+0x796>
 80178b2:	e8df f010 	tbh	[pc, r0, lsl #1]
 80178b6:	0009      	.short	0x0009
 80178b8:	013c034c 	.word	0x013c034c
 80178bc:	01f1034c 	.word	0x01f1034c
 80178c0:	034c034c 	.word	0x034c034c
 80178c4:	0297034c 	.word	0x0297034c
						register_read = communication->ReadElement<uint8_t>(&element, &success);
 80178c8:	68ab      	ldr	r3, [r5, #8]
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80178ca:	f04f 31ff 	mov.w	r1, #4294967295
	*success = registers->ReadRegister<T>(element->element_register.address, &register_read, &length);
 80178ce:	f8bd b080 	ldrh.w	fp, [sp, #128]	@ 0x80
 80178d2:	f8d3 8004 	ldr.w	r8, [r3, #4]
 80178d6:	9411      	str	r4, [sp, #68]	@ 0x44
 80178d8:	f8d8 0000 	ldr.w	r0, [r8]
 80178dc:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
 80178e0:	f7f4 fe28 	bl	800c534 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80178e4:	aa26      	add	r2, sp, #152	@ 0x98
 80178e6:	4659      	mov	r1, fp
 80178e8:	4640      	mov	r0, r8
 80178ea:	f000 fc30 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80178ee:	f89d 9098 	ldrb.w	r9, [sp, #152]	@ 0x98
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80178f2:	4606      	mov	r6, r0
	if (!success) {
 80178f4:	f1b9 0f00 	cmp.w	r9, #0
 80178f8:	d106      	bne.n	8017908 <_ZN10Publishers13SpinPublisherEh+0x150>
		osSemaphoreRelease(RegistersSemaphore);
 80178fa:	f8d8 0000 	ldr.w	r0, [r8]
 80178fe:	f7f4 fe4d 	bl	800c59c <osSemaphoreRelease>
 8017902:	f88d 9020 	strb.w	r9, [sp, #32]
 8017906:	e010      	b.n	801792a <_ZN10Publishers13SpinPublisherEh+0x172>
	uint8_t registered_type = GetTypeID<T>(&success);
 8017908:	a826      	add	r0, sp, #152	@ 0x98
 801790a:	f7fe fec7 	bl	801669c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 801790e:	f89d 9098 	ldrb.w	r9, [sp, #152]	@ 0x98
 8017912:	f1b9 0f00 	cmp.w	r9, #0
 8017916:	d0f0      	beq.n	80178fa <_ZN10Publishers13SpinPublisherEh+0x142>
	if (target_register->register_info.type != registered_type) {
 8017918:	7933      	ldrb	r3, [r6, #4]
 801791a:	4298      	cmp	r0, r3
 801791c:	d01a      	beq.n	8017954 <_ZN10Publishers13SpinPublisherEh+0x19c>
		osSemaphoreRelease(RegistersSemaphore);
 801791e:	f8d8 0000 	ldr.w	r0, [r8]
 8017922:	f7f4 fe3b 	bl	800c59c <osSemaphoreRelease>
 8017926:	f88d 4020 	strb.w	r4, [sp, #32]
						register_read = communication->ReadElement<float>(&element, &success);
 801792a:	a90f      	add	r1, sp, #60	@ 0x3c
 801792c:	a80c      	add	r0, sp, #48	@ 0x30
 801792e:	f7ff f937 	bl	8016ba0 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8017932:	a80f      	add	r0, sp, #60	@ 0x3c
 8017934:	f7e9 f96e 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
					if (not success)
 8017938:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801793c:	2b00      	cmp	r3, #0
 801793e:	f040 8309 	bne.w	8017f54 <_ZN10Publishers13SpinPublisherEh+0x79c>
 8017942:	a80c      	add	r0, sp, #48	@ 0x30
 8017944:	f7e9 f966 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8017948:	a823      	add	r0, sp, #140	@ 0x8c
 801794a:	f7e9 f963 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801794e:	9b04      	ldr	r3, [sp, #16]
 8017950:	3304      	adds	r3, #4
 8017952:	e767      	b.n	8017824 <_ZN10Publishers13SpinPublisherEh+0x6c>
	if (callbacks[target_register->register_info.type] == NULL) {
 8017954:	3004      	adds	r0, #4
 8017956:	f858 9020 	ldr.w	r9, [r8, r0, lsl #2]
 801795a:	f1b9 0f00 	cmp.w	r9, #0
 801795e:	d0cc      	beq.n	80178fa <_ZN10Publishers13SpinPublisherEh+0x142>
	if (target_register->access.read) {
 8017960:	7a73      	ldrb	r3, [r6, #9]
 8017962:	2b00      	cmp	r3, #0
 8017964:	d034      	beq.n	80179d0 <_ZN10Publishers13SpinPublisherEh+0x218>
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8017966:	4648      	mov	r0, r9
 8017968:	8971      	ldrh	r1, [r6, #10]
		success = false; // false by default to use pointer mode if the callback doesn't update the flag
 801796a:	f88d 4098 	strb.w	r4, [sp, #152]	@ 0x98
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 801796e:	f7f7 fb47 	bl	800f000 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
 8017972:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8017976:	e9d0 9300 	ldrd	r9, r3, [r0]
 801797a:	9307      	str	r3, [sp, #28]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 801797c:	68f3      	ldr	r3, [r6, #12]
 801797e:	b123      	cbz	r3, 801798a <_ZN10Publishers13SpinPublisherEh+0x1d2>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 8017980:	f04f 31ff 	mov.w	r1, #4294967295
 8017984:	6818      	ldr	r0, [r3, #0]
 8017986:	f7f4 fdd5 	bl	800c534 <osSemaphoreAcquire>
		if (target_register->mode.callbacks) {
 801798a:	7873      	ldrb	r3, [r6, #1]
 801798c:	2b00      	cmp	r3, #0
 801798e:	d167      	bne.n	8017a60 <_ZN10Publishers13SpinPublisherEh+0x2a8>
		if (not success && target_register->mode.pointer) {
 8017990:	f89d 3098 	ldrb.w	r3, [sp, #152]	@ 0x98
 8017994:	b9bb      	cbnz	r3, 80179c6 <_ZN10Publishers13SpinPublisherEh+0x20e>
 8017996:	7833      	ldrb	r3, [r6, #0]
 8017998:	b1ab      	cbz	r3, 80179c6 <_ZN10Publishers13SpinPublisherEh+0x20e>
			success = true;
 801799a:	2301      	movs	r3, #1
 801799c:	f88d 3098 	strb.w	r3, [sp, #152]	@ 0x98
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 80179a0:	7972      	ldrb	r2, [r6, #5]
 80179a2:	2a00      	cmp	r2, #0
 80179a4:	f000 8091 	beq.w	8017aca <_ZN10Publishers13SpinPublisherEh+0x312>
 80179a8:	88f1      	ldrh	r1, [r6, #6]
 80179aa:	2900      	cmp	r1, #0
 80179ac:	f040 8084 	bne.w	8017ab8 <_ZN10Publishers13SpinPublisherEh+0x300>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80179b0:	e9d9 2300 	ldrd	r2, r3, [r9]
 80179b4:	1a9b      	subs	r3, r3, r2
 80179b6:	f10d 0221 	add.w	r2, sp, #33	@ 0x21
				*length = register_vector->size();
 80179ba:	b29b      	uxth	r3, r3
 80179bc:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
					for (uint16_t index = 0; index < *length; index++) {
 80179c0:	b288      	uxth	r0, r1
 80179c2:	4283      	cmp	r3, r0
 80179c4:	d871      	bhi.n	8017aaa <_ZN10Publishers13SpinPublisherEh+0x2f2>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 80179c6:	68f3      	ldr	r3, [r6, #12]
 80179c8:	b113      	cbz	r3, 80179d0 <_ZN10Publishers13SpinPublisherEh+0x218>
			osSemaphoreRelease(*(target_register->register_semaphore));
 80179ca:	6818      	ldr	r0, [r3, #0]
 80179cc:	f7f4 fde6 	bl	800c59c <osSemaphoreRelease>
	osSemaphoreRelease(RegistersSemaphore);
 80179d0:	f8d8 0000 	ldr.w	r0, [r8]
 80179d4:	2601      	movs	r6, #1
 80179d6:	f7f4 fde1 	bl	800c59c <osSemaphoreRelease>
	std::vector<T> register_read_vector_cast = BuildTVector(*element, &register_read);
 80179da:	a920      	add	r1, sp, #128	@ 0x80
 80179dc:	a826      	add	r0, sp, #152	@ 0x98
	*success = registers->ReadRegister<T>(element->element_register.address, &register_read, &length);
 80179de:	f88d 6020 	strb.w	r6, [sp, #32]
	std::vector<T> register_read_vector_cast = BuildTVector(*element, &register_read);
 80179e2:	f7f7 ff53 	bl	800f88c <_ZN14MessageElementC1ERKS_>
	: _M_start(), _M_finish(), _M_end_of_storage()
 80179e6:	2300      	movs	r3, #0
 80179e8:	e9cd 3312 	strd	r3, r3, [sp, #72]	@ 0x48
 80179ec:	9314      	str	r3, [sp, #80]	@ 0x50
	if (not element.element_register.isArray) {
 80179ee:	f89d 309b 	ldrb.w	r3, [sp, #155]	@ 0x9b
 80179f2:	2b00      	cmp	r3, #0
 80179f4:	d170      	bne.n	8017ad8 <_ZN10Publishers13SpinPublisherEh+0x320>
		vector = std::vector<T>{*data};
 80179f6:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80179fa:	4630      	mov	r0, r6
 80179fc:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8017a00:	f7fe fddf 	bl	80165c2 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
 8017a04:	f10d 0155 	add.w	r1, sp, #85	@ 0x55
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017a08:	1983      	adds	r3, r0, r6
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8017a0a:	4602      	mov	r2, r0
 8017a0c:	9018      	str	r0, [sp, #96]	@ 0x60
 8017a0e:	a815      	add	r0, sp, #84	@ 0x54
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017a10:	931a      	str	r3, [sp, #104]	@ 0x68
 8017a12:	f7e9 f9a3 	bl	8000d5c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		vector = std::vector<T>(data, data + element.element_register.length);
 8017a16:	a918      	add	r1, sp, #96	@ 0x60
	  this->_M_impl._M_finish =
 8017a18:	9019      	str	r0, [sp, #100]	@ 0x64
 8017a1a:	a812      	add	r0, sp, #72	@ 0x48
 8017a1c:	f7ff f8c0 	bl	8016ba0 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8017a20:	a818      	add	r0, sp, #96	@ 0x60
 8017a22:	f7e9 f8f7 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8017a26:	a829      	add	r0, sp, #164	@ 0xa4
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017a28:	2600      	movs	r6, #0
      }
 8017a2a:	f7e9 f8f3 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	data = BuildVector<T>(register_read_vector_cast);
 8017a2e:	a912      	add	r1, sp, #72	@ 0x48
 8017a30:	a818      	add	r0, sp, #96	@ 0x60
 8017a32:	f7e9 f99f 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017a36:	9617      	str	r6, [sp, #92]	@ 0x5c
      : _M_current(__i) { }
 8017a38:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	@ 0x60
 8017a3c:	e9cd 6615 	strd	r6, r6, [sp, #84]	@ 0x54
    for (T input : inputs) {
 8017a40:	45c1      	cmp	r9, r8
 8017a42:	d15e      	bne.n	8017b02 <_ZN10Publishers13SpinPublisherEh+0x34a>
	data = BuildVector<T>(register_read_vector_cast);
 8017a44:	a915      	add	r1, sp, #84	@ 0x54
 8017a46:	a80f      	add	r0, sp, #60	@ 0x3c
 8017a48:	f7ff f8aa 	bl	8016ba0 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8017a4c:	a815      	add	r0, sp, #84	@ 0x54
 8017a4e:	f7e9 f8e1 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8017a52:	a818      	add	r0, sp, #96	@ 0x60
 8017a54:	f7e9 f8de 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8017a58:	a812      	add	r0, sp, #72	@ 0x48
 8017a5a:	f7e9 f8db 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8017a5e:	e764      	b.n	801792a <_ZN10Publishers13SpinPublisherEh+0x172>
				*callback_output = output;
 8017a60:	2200      	movs	r2, #0
 8017a62:	f10d 0321 	add.w	r3, sp, #33	@ 0x21
 8017a66:	6013      	str	r3, [r2, #0]
			if (callbacks.read != NULL) {
 8017a68:	f1ba 0f00 	cmp.w	sl, #0
 8017a6c:	d090      	beq.n	8017990 <_ZN10Publishers13SpinPublisherEh+0x1d8>
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 8017a6e:	ab09      	add	r3, sp, #36	@ 0x24
 8017a70:	4659      	mov	r1, fp
 8017a72:	9807      	ldr	r0, [sp, #28]
 8017a74:	47d0      	blx	sl
 8017a76:	f88d 0098 	strb.w	r0, [sp, #152]	@ 0x98
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 8017a7a:	7973      	ldrb	r3, [r6, #5]
 8017a7c:	b14b      	cbz	r3, 8017a92 <_ZN10Publishers13SpinPublisherEh+0x2da>
 8017a7e:	88f3      	ldrh	r3, [r6, #6]
 8017a80:	b10b      	cbz	r3, 8017a86 <_ZN10Publishers13SpinPublisherEh+0x2ce>
					*length = 1;
 8017a82:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
					for (uint16_t index = 0; index < *length; index++) {
 8017a86:	f8bd 0024 	ldrh.w	r0, [sp, #36]	@ 0x24
 8017a8a:	f10d 0121 	add.w	r1, sp, #33	@ 0x21
 8017a8e:	2300      	movs	r3, #0
 8017a90:	e007      	b.n	8017aa2 <_ZN10Publishers13SpinPublisherEh+0x2ea>
					*length = 1;
 8017a92:	2301      	movs	r3, #1
 8017a94:	e7f5      	b.n	8017a82 <_ZN10Publishers13SpinPublisherEh+0x2ca>
						output[index] = (*callback_output )[index];
 8017a96:	2200      	movs	r2, #0
 8017a98:	6812      	ldr	r2, [r2, #0]
 8017a9a:	5cd2      	ldrb	r2, [r2, r3]
 8017a9c:	3301      	adds	r3, #1
 8017a9e:	f801 2b01 	strb.w	r2, [r1], #1
					for (uint16_t index = 0; index < *length; index++) {
 8017aa2:	b29a      	uxth	r2, r3
 8017aa4:	4290      	cmp	r0, r2
 8017aa6:	d8f6      	bhi.n	8017a96 <_ZN10Publishers13SpinPublisherEh+0x2de>
 8017aa8:	e772      	b.n	8017990 <_ZN10Publishers13SpinPublisherEh+0x1d8>
						output[index] = (*register_vector)[index];
 8017aaa:	f8d9 0000 	ldr.w	r0, [r9]
 8017aae:	5c40      	ldrb	r0, [r0, r1]
 8017ab0:	3101      	adds	r1, #1
 8017ab2:	f802 0b01 	strb.w	r0, [r2], #1
					for (uint16_t index = 0; index < *length; index++) {
 8017ab6:	e783      	b.n	80179c0 <_ZN10Publishers13SpinPublisherEh+0x208>
				*length = target_register->register_info.length;
 8017ab8:	f8ad 1024 	strh.w	r1, [sp, #36]	@ 0x24
 8017abc:	f10d 0221 	add.w	r2, sp, #33	@ 0x21
 8017ac0:	4449      	add	r1, r9
 8017ac2:	4648      	mov	r0, r9
 8017ac4:	f7e9 f94a 	bl	8000d5c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8017ac8:	e77d      	b.n	80179c6 <_ZN10Publishers13SpinPublisherEh+0x20e>
				*length = 1;
 8017aca:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
					*output = *callbacks.pointer;
 8017ace:	f899 3000 	ldrb.w	r3, [r9]
 8017ad2:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
 8017ad6:	e776      	b.n	80179c6 <_ZN10Publishers13SpinPublisherEh+0x20e>
	} else if (element.element_register.isArray && element.element_register.length > 0)
 8017ad8:	f8bd 609c 	ldrh.w	r6, [sp, #156]	@ 0x9c
 8017adc:	b15e      	cbz	r6, 8017af6 <_ZN10Publishers13SpinPublisherEh+0x33e>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8017ade:	4630      	mov	r0, r6
 8017ae0:	f7fe fd6f 	bl	80165c2 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017ae4:	1983      	adds	r3, r0, r6
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8017ae6:	4602      	mov	r2, r0
 8017ae8:	9018      	str	r0, [sp, #96]	@ 0x60
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017aea:	931a      	str	r3, [sp, #104]	@ 0x68
			      _Category>::__copy_m(__first, __last, __result);
 8017aec:	f10d 0321 	add.w	r3, sp, #33	@ 0x21
 8017af0:	1999      	adds	r1, r3, r6
 8017af2:	4618      	mov	r0, r3
 8017af4:	e78d      	b.n	8017a12 <_ZN10Publishers13SpinPublisherEh+0x25a>
		vector = *reinterpret_cast<std::vector<T>*>(data);
 8017af6:	f10d 0121 	add.w	r1, sp, #33	@ 0x21
 8017afa:	a812      	add	r0, sp, #72	@ 0x48
 8017afc:	f7ff fc87 	bl	801740e <_ZNSt6vectorIhSaIhEEaSERKS1_.isra.0>
 8017b00:	e791      	b.n	8017a26 <_ZN10Publishers13SpinPublisherEh+0x26e>
    for (T input : inputs) {
 8017b02:	f818 3b01 	ldrb.w	r3, [r8], #1
      { emplace_back(std::move(__x)); }
 8017b06:	f10d 0122 	add.w	r1, sp, #34	@ 0x22
 8017b0a:	a826      	add	r0, sp, #152	@ 0x98
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017b0c:	9628      	str	r6, [sp, #160]	@ 0xa0
		data.push_back((uint8_t) ((reinterpreted_input >> ((type_length - 1 - index) << 3)) & 0xFF)); // previously (8 * (type_length - 1 - index))) & 0xFF))
 8017b0e:	f88d 3022 	strb.w	r3, [sp, #34]	@ 0x22
 8017b12:	e9cd 6626 	strd	r6, r6, [sp, #152]	@ 0x98
      { emplace_back(std::move(__x)); }
 8017b16:	f7f7 fd8d 	bl	800f634 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
        data.insert(data.end(), single.begin(), single.end());
 8017b1a:	a815      	add	r0, sp, #84	@ 0x54
 8017b1c:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8017b1e:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	@ 0x98
 8017b22:	f7ff fddd 	bl	80176e0 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0>
      }
 8017b26:	a826      	add	r0, sp, #152	@ 0x98
 8017b28:	f7e9 f874 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return *this;
 8017b2c:	e788      	b.n	8017a40 <_ZN10Publishers13SpinPublisherEh+0x288>
						register_read = communication->ReadElement<uint32_t>(&element, &success);
 8017b2e:	68ab      	ldr	r3, [r5, #8]
	*success = registers->ReadRegister<T>(element->element_register.address, &register_read, &length);
 8017b30:	2601      	movs	r6, #1
 8017b32:	aa09      	add	r2, sp, #36	@ 0x24
 8017b34:	f8bd 1080 	ldrh.w	r1, [sp, #128]	@ 0x80
 8017b38:	6858      	ldr	r0, [r3, #4]
 8017b3a:	f10d 0322 	add.w	r3, sp, #34	@ 0x22
 8017b3e:	9600      	str	r6, [sp, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017b40:	9411      	str	r4, [sp, #68]	@ 0x44
 8017b42:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
 8017b46:	f7fa f9ac 	bl	8011ea2 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb>
 8017b4a:	f88d 0020 	strb.w	r0, [sp, #32]
	if (not *success)
 8017b4e:	2800      	cmp	r0, #0
 8017b50:	f43f aeeb 	beq.w	801792a <_ZN10Publishers13SpinPublisherEh+0x172>
	std::vector<T> register_read_vector_cast = BuildTVector(*element, &register_read);
 8017b54:	a920      	add	r1, sp, #128	@ 0x80
 8017b56:	a826      	add	r0, sp, #152	@ 0x98
 8017b58:	f7f7 fe98 	bl	800f88c <_ZN14MessageElementC1ERKS_>
	if (not element.element_register.isArray) {
 8017b5c:	f89d 309b 	ldrb.w	r3, [sp, #155]	@ 0x9b
 8017b60:	9414      	str	r4, [sp, #80]	@ 0x50
 8017b62:	e9cd 4412 	strd	r4, r4, [sp, #72]	@ 0x48
 8017b66:	2b00      	cmp	r3, #0
 8017b68:	d141      	bne.n	8017bee <_ZN10Publishers13SpinPublisherEh+0x436>
		vector = std::vector<T>{*data};
 8017b6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8017b6c:	4630      	mov	r0, r6
 8017b6e:	9315      	str	r3, [sp, #84]	@ 0x54
 8017b70:	f7fe fd15 	bl	801659e <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0>
 8017b74:	a916      	add	r1, sp, #88	@ 0x58
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017b76:	1d03      	adds	r3, r0, #4
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8017b78:	4602      	mov	r2, r0
 8017b7a:	9018      	str	r0, [sp, #96]	@ 0x60
 8017b7c:	a815      	add	r0, sp, #84	@ 0x54
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017b7e:	931a      	str	r3, [sp, #104]	@ 0x68
 8017b80:	f7fa f968 	bl	8011e54 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8017b84:	a918      	add	r1, sp, #96	@ 0x60
	  this->_M_impl._M_finish =
 8017b86:	9019      	str	r0, [sp, #100]	@ 0x64
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8017b88:	a812      	add	r0, sp, #72	@ 0x48
 8017b8a:	f7ff f93f 	bl	8016e0c <_ZNSt6vectorImSaImEE14_M_move_assignEOS1_St17integral_constantIbLb1EE.isra.0>
      }
 8017b8e:	a818      	add	r0, sp, #96	@ 0x60
 8017b90:	f7f7 fcf5 	bl	800f57e <_ZNSt12_Vector_baseImSaImEED1Ev>
 8017b94:	a829      	add	r0, sp, #164	@ 0xa4
 8017b96:	f7e9 f83d 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017b9a:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	@ 0x48
 8017b9e:	eba9 0a08 	sub.w	sl, r9, r8
	this->_M_impl._M_start = this->_M_allocate(__n);
 8017ba2:	ea4f 00aa 	mov.w	r0, sl, asr #2
 8017ba6:	f7fe fcfa 	bl	801659e <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017baa:	eb00 030a 	add.w	r3, r0, sl
 8017bae:	4602      	mov	r2, r0
 8017bb0:	4649      	mov	r1, r9
	this->_M_impl._M_start = this->_M_allocate(__n);
 8017bb2:	9018      	str	r0, [sp, #96]	@ 0x60
 8017bb4:	4606      	mov	r6, r0
 8017bb6:	4640      	mov	r0, r8
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017bb8:	931a      	str	r3, [sp, #104]	@ 0x68
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017bba:	f04f 0800 	mov.w	r8, #0
 8017bbe:	f7fa f949 	bl	8011e54 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>
 8017bc2:	4681      	mov	r9, r0
	this->_M_impl._M_finish =
 8017bc4:	9019      	str	r0, [sp, #100]	@ 0x64
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017bc6:	f8cd 805c 	str.w	r8, [sp, #92]	@ 0x5c
 8017bca:	e9cd 8815 	strd	r8, r8, [sp, #84]	@ 0x54
    for (T input : inputs) {
 8017bce:	45b1      	cmp	r9, r6
 8017bd0:	d138      	bne.n	8017c44 <_ZN10Publishers13SpinPublisherEh+0x48c>
	data = BuildVector<T>(register_read_vector_cast);
 8017bd2:	a915      	add	r1, sp, #84	@ 0x54
 8017bd4:	a80f      	add	r0, sp, #60	@ 0x3c
 8017bd6:	f7fe ffe3 	bl	8016ba0 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8017bda:	a815      	add	r0, sp, #84	@ 0x54
 8017bdc:	f7e9 f81a 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8017be0:	a818      	add	r0, sp, #96	@ 0x60
 8017be2:	f7f7 fccc 	bl	800f57e <_ZNSt12_Vector_baseImSaImEED1Ev>
 8017be6:	a812      	add	r0, sp, #72	@ 0x48
 8017be8:	f7f7 fcc9 	bl	800f57e <_ZNSt12_Vector_baseImSaImEED1Ev>
 8017bec:	e69d      	b.n	801792a <_ZN10Publishers13SpinPublisherEh+0x172>
	} else if (element.element_register.isArray && element.element_register.length > 0)
 8017bee:	f8bd 009c 	ldrh.w	r0, [sp, #156]	@ 0x9c
 8017bf2:	b150      	cbz	r0, 8017c0a <_ZN10Publishers13SpinPublisherEh+0x452>
		vector = std::vector<T>(data, data + element.element_register.length);
 8017bf4:	0086      	lsls	r6, r0, #2
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8017bf6:	f7fe fcd2 	bl	801659e <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0>
 8017bfa:	4602      	mov	r2, r0
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017bfc:	1983      	adds	r3, r0, r6
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8017bfe:	9018      	str	r0, [sp, #96]	@ 0x60
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017c00:	931a      	str	r3, [sp, #104]	@ 0x68
 8017c02:	ab09      	add	r3, sp, #36	@ 0x24
 8017c04:	1999      	adds	r1, r3, r6
 8017c06:	4618      	mov	r0, r3
 8017c08:	e7ba      	b.n	8017b80 <_ZN10Publishers13SpinPublisherEh+0x3c8>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017c0a:	e9dd 8a09 	ldrd	r8, sl, [sp, #36]	@ 0x24
	  if (__xlen > capacity())
 8017c0e:	ebba 0608 	subs.w	r6, sl, r8
 8017c12:	d011      	beq.n	8017c38 <_ZN10Publishers13SpinPublisherEh+0x480>
	  pointer __result = this->_M_allocate(__n);
 8017c14:	10b0      	asrs	r0, r6, #2
 8017c16:	f7fe fcc2 	bl	801659e <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0>
 8017c1a:	4681      	mov	r9, r0
 8017c1c:	4602      	mov	r2, r0
 8017c1e:	4651      	mov	r1, sl
 8017c20:	4640      	mov	r0, r8
 8017c22:	f7fa f917 	bl	8011e54 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8017c26:	eb09 0006 	add.w	r0, r9, r6
	      this->_M_impl._M_start = __tmp;
 8017c2a:	f8cd 9048 	str.w	r9, [sp, #72]	@ 0x48
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8017c2e:	9014      	str	r0, [sp, #80]	@ 0x50
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8017c30:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8017c32:	4433      	add	r3, r6
 8017c34:	9313      	str	r3, [sp, #76]	@ 0x4c
      return *this;
 8017c36:	e7ad      	b.n	8017b94 <_ZN10Publishers13SpinPublisherEh+0x3dc>
 8017c38:	4632      	mov	r2, r6
 8017c3a:	4651      	mov	r1, sl
 8017c3c:	4640      	mov	r0, r8
 8017c3e:	f7fa f909 	bl	8011e54 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8017c42:	e7f5      	b.n	8017c30 <_ZN10Publishers13SpinPublisherEh+0x478>
    for (T input : inputs) {
 8017c44:	f856 bb04 	ldr.w	fp, [r6], #4
    std::memcpy(&reinterpreted_input, &input, sizeof(T)); // this is mandatory to get rid of the memory alignment problem. A simple cast can't work here
 8017c48:	f04f 0a18 	mov.w	sl, #24
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017c4c:	f8cd 80a0 	str.w	r8, [sp, #160]	@ 0xa0
 8017c50:	e9cd 8826 	strd	r8, r8, [sp, #152]	@ 0x98
		data.push_back((uint8_t) ((reinterpreted_input >> ((type_length - 1 - index) << 3)) & 0xFF)); // previously (8 * (type_length - 1 - index))) & 0xFF))
 8017c54:	f1ca 0120 	rsb	r1, sl, #32
 8017c58:	f1aa 0220 	sub.w	r2, sl, #32
 8017c5c:	fa2b f30a 	lsr.w	r3, fp, sl
	for (uint8_t index = 0; index < type_length; index++) {
 8017c60:	f1aa 0a08 	sub.w	sl, sl, #8
		data.push_back((uint8_t) ((reinterpreted_input >> ((type_length - 1 - index) << 3)) & 0xFF)); // previously (8 * (type_length - 1 - index))) & 0xFF))
 8017c64:	fa08 f101 	lsl.w	r1, r8, r1
 8017c68:	fa28 f202 	lsr.w	r2, r8, r2
      { emplace_back(std::move(__x)); }
 8017c6c:	a826      	add	r0, sp, #152	@ 0x98
 8017c6e:	430b      	orrs	r3, r1
 8017c70:	f10d 0121 	add.w	r1, sp, #33	@ 0x21
 8017c74:	4313      	orrs	r3, r2
 8017c76:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
 8017c7a:	f7f7 fcdb 	bl	800f634 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
	for (uint8_t index = 0; index < type_length; index++) {
 8017c7e:	f11a 0f08 	cmn.w	sl, #8
 8017c82:	d1e7      	bne.n	8017c54 <_ZN10Publishers13SpinPublisherEh+0x49c>
        data.insert(data.end(), single.begin(), single.end());
 8017c84:	a815      	add	r0, sp, #84	@ 0x54
 8017c86:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8017c88:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	@ 0x98
 8017c8c:	f7ff fd28 	bl	80176e0 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0>
      }
 8017c90:	a826      	add	r0, sp, #152	@ 0x98
 8017c92:	f7e8 ffbf 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return *this;
 8017c96:	e79a      	b.n	8017bce <_ZN10Publishers13SpinPublisherEh+0x416>
						register_read = communication->ReadElement<int8_t>(&element, &success);
 8017c98:	68ab      	ldr	r3, [r5, #8]
	*success = registers->ReadRegister<T>(element->element_register.address, &register_read, &length);
 8017c9a:	2601      	movs	r6, #1
 8017c9c:	f10d 0221 	add.w	r2, sp, #33	@ 0x21
 8017ca0:	f8bd 1080 	ldrh.w	r1, [sp, #128]	@ 0x80
 8017ca4:	6858      	ldr	r0, [r3, #4]
 8017ca6:	ab09      	add	r3, sp, #36	@ 0x24
 8017ca8:	9600      	str	r6, [sp, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017caa:	9411      	str	r4, [sp, #68]	@ 0x44
 8017cac:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
 8017cb0:	f7ff fbe8 	bl	8017484 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb>
 8017cb4:	f88d 0020 	strb.w	r0, [sp, #32]
	if (not *success)
 8017cb8:	2800      	cmp	r0, #0
 8017cba:	f43f ae36 	beq.w	801792a <_ZN10Publishers13SpinPublisherEh+0x172>
	std::vector<T> register_read_vector_cast = BuildTVector(*element, &register_read);
 8017cbe:	a920      	add	r1, sp, #128	@ 0x80
 8017cc0:	a826      	add	r0, sp, #152	@ 0x98
 8017cc2:	f7f7 fde3 	bl	800f88c <_ZN14MessageElementC1ERKS_>
	if (not element.element_register.isArray) {
 8017cc6:	f89d 309b 	ldrb.w	r3, [sp, #155]	@ 0x9b
 8017cca:	9414      	str	r4, [sp, #80]	@ 0x50
 8017ccc:	e9cd 4412 	strd	r4, r4, [sp, #72]	@ 0x48
 8017cd0:	2b00      	cmp	r3, #0
 8017cd2:	d142      	bne.n	8017d5a <_ZN10Publishers13SpinPublisherEh+0x5a2>
		vector = std::vector<T>{*data};
 8017cd4:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8017cd8:	4630      	mov	r0, r6
 8017cda:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8017cde:	f7fe fc53 	bl	8016588 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>
 8017ce2:	f10d 0155 	add.w	r1, sp, #85	@ 0x55
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017ce6:	1983      	adds	r3, r0, r6
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8017ce8:	4602      	mov	r2, r0
 8017cea:	9018      	str	r0, [sp, #96]	@ 0x60
 8017cec:	a815      	add	r0, sp, #84	@ 0x54
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017cee:	931a      	str	r3, [sp, #104]	@ 0x68
 8017cf0:	f7fa fd0a 	bl	8012708 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8017cf4:	a918      	add	r1, sp, #96	@ 0x60
	  this->_M_impl._M_finish =
 8017cf6:	9019      	str	r0, [sp, #100]	@ 0x64
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8017cf8:	a812      	add	r0, sp, #72	@ 0x48
 8017cfa:	f7ff f89e 	bl	8016e3a <_ZNSt6vectorIaSaIaEE14_M_move_assignEOS1_St17integral_constantIbLb1EE.isra.0>
      }
 8017cfe:	a818      	add	r0, sp, #96	@ 0x60
 8017d00:	f7f7 fc5f 	bl	800f5c2 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 8017d04:	a829      	add	r0, sp, #164	@ 0xa4
 8017d06:	f7e8 ff85 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017d0a:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	@ 0x48
 8017d0e:	eba9 0a08 	sub.w	sl, r9, r8
	this->_M_impl._M_start = this->_M_allocate(__n);
 8017d12:	4650      	mov	r0, sl
 8017d14:	f7fe fc38 	bl	8016588 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>
 8017d18:	4606      	mov	r6, r0
 8017d1a:	9018      	str	r0, [sp, #96]	@ 0x60
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017d1c:	4450      	add	r0, sl
 8017d1e:	4649      	mov	r1, r9
 8017d20:	4632      	mov	r2, r6
 8017d22:	901a      	str	r0, [sp, #104]	@ 0x68
 8017d24:	4640      	mov	r0, r8
 8017d26:	f7fa fcef 	bl	8012708 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017d2a:	f04f 0800 	mov.w	r8, #0
 8017d2e:	4681      	mov	r9, r0
	this->_M_impl._M_finish =
 8017d30:	9019      	str	r0, [sp, #100]	@ 0x64
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017d32:	f8cd 805c 	str.w	r8, [sp, #92]	@ 0x5c
 8017d36:	e9cd 8815 	strd	r8, r8, [sp, #84]	@ 0x54
    for (T input : inputs) {
 8017d3a:	454e      	cmp	r6, r9
 8017d3c:	d13b      	bne.n	8017db6 <_ZN10Publishers13SpinPublisherEh+0x5fe>
	data = BuildVector<T>(register_read_vector_cast);
 8017d3e:	a915      	add	r1, sp, #84	@ 0x54
 8017d40:	a80f      	add	r0, sp, #60	@ 0x3c
 8017d42:	f7fe ff2d 	bl	8016ba0 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8017d46:	a815      	add	r0, sp, #84	@ 0x54
 8017d48:	f7e8 ff64 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8017d4c:	a818      	add	r0, sp, #96	@ 0x60
 8017d4e:	f7f7 fc38 	bl	800f5c2 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 8017d52:	a812      	add	r0, sp, #72	@ 0x48
 8017d54:	f7f7 fc35 	bl	800f5c2 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 8017d58:	e5e7      	b.n	801792a <_ZN10Publishers13SpinPublisherEh+0x172>
	} else if (element.element_register.isArray && element.element_register.length > 0)
 8017d5a:	f8bd 609c 	ldrh.w	r6, [sp, #156]	@ 0x9c
 8017d5e:	b15e      	cbz	r6, 8017d78 <_ZN10Publishers13SpinPublisherEh+0x5c0>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8017d60:	4630      	mov	r0, r6
 8017d62:	f7fe fc11 	bl	8016588 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017d66:	1983      	adds	r3, r0, r6
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8017d68:	4602      	mov	r2, r0
 8017d6a:	9018      	str	r0, [sp, #96]	@ 0x60
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017d6c:	931a      	str	r3, [sp, #104]	@ 0x68
 8017d6e:	f10d 0321 	add.w	r3, sp, #33	@ 0x21
 8017d72:	1999      	adds	r1, r3, r6
 8017d74:	4618      	mov	r0, r3
 8017d76:	e7bb      	b.n	8017cf0 <_ZN10Publishers13SpinPublisherEh+0x538>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017d78:	f8dd a025 	ldr.w	sl, [sp, #37]	@ 0x25
 8017d7c:	f8dd 8021 	ldr.w	r8, [sp, #33]	@ 0x21
	  if (__xlen > capacity())
 8017d80:	ebba 0608 	subs.w	r6, sl, r8
 8017d84:	d011      	beq.n	8017daa <_ZN10Publishers13SpinPublisherEh+0x5f2>
	  pointer __result = this->_M_allocate(__n);
 8017d86:	4630      	mov	r0, r6
 8017d88:	f7fe fbfe 	bl	8016588 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>
 8017d8c:	4681      	mov	r9, r0
 8017d8e:	4602      	mov	r2, r0
 8017d90:	4651      	mov	r1, sl
 8017d92:	4640      	mov	r0, r8
 8017d94:	f7fa fcb8 	bl	8012708 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8017d98:	eb09 0006 	add.w	r0, r9, r6
	      this->_M_impl._M_start = __tmp;
 8017d9c:	f8cd 9048 	str.w	r9, [sp, #72]	@ 0x48
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8017da0:	9014      	str	r0, [sp, #80]	@ 0x50
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8017da2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8017da4:	4433      	add	r3, r6
 8017da6:	9313      	str	r3, [sp, #76]	@ 0x4c
      return *this;
 8017da8:	e7ac      	b.n	8017d04 <_ZN10Publishers13SpinPublisherEh+0x54c>
 8017daa:	4632      	mov	r2, r6
 8017dac:	4651      	mov	r1, sl
 8017dae:	4640      	mov	r0, r8
 8017db0:	f7fa fcaa 	bl	8012708 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8017db4:	e7f5      	b.n	8017da2 <_ZN10Publishers13SpinPublisherEh+0x5ea>
    for (T input : inputs) {
 8017db6:	f916 3b01 	ldrsb.w	r3, [r6], #1
      { emplace_back(std::move(__x)); }
 8017dba:	f10d 0122 	add.w	r1, sp, #34	@ 0x22
 8017dbe:	a826      	add	r0, sp, #152	@ 0x98
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017dc0:	f8cd 80a0 	str.w	r8, [sp, #160]	@ 0xa0
		data.push_back((uint8_t) ((reinterpreted_input >> ((type_length - 1 - index) << 3)) & 0xFF)); // previously (8 * (type_length - 1 - index))) & 0xFF))
 8017dc4:	f88d 3022 	strb.w	r3, [sp, #34]	@ 0x22
 8017dc8:	e9cd 8826 	strd	r8, r8, [sp, #152]	@ 0x98
      { emplace_back(std::move(__x)); }
 8017dcc:	f7f7 fc32 	bl	800f634 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
        data.insert(data.end(), single.begin(), single.end());
 8017dd0:	a815      	add	r0, sp, #84	@ 0x54
 8017dd2:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8017dd4:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	@ 0x98
 8017dd8:	f7ff fc82 	bl	80176e0 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0>
      }
 8017ddc:	a826      	add	r0, sp, #152	@ 0x98
 8017dde:	f7e8 ff19 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return *this;
 8017de2:	e7aa      	b.n	8017d3a <_ZN10Publishers13SpinPublisherEh+0x582>
						register_read = communication->ReadElement<float>(&element, &success);
 8017de4:	68ab      	ldr	r3, [r5, #8]
	*success = registers->ReadRegister<T>(element->element_register.address, &register_read, &length);
 8017de6:	2601      	movs	r6, #1
 8017de8:	aa09      	add	r2, sp, #36	@ 0x24
 8017dea:	f8bd 1080 	ldrh.w	r1, [sp, #128]	@ 0x80
 8017dee:	6858      	ldr	r0, [r3, #4]
 8017df0:	f10d 0322 	add.w	r3, sp, #34	@ 0x22
 8017df4:	9600      	str	r6, [sp, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017df6:	9411      	str	r4, [sp, #68]	@ 0x44
 8017df8:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
 8017dfc:	f7f6 fd42 	bl	800e884 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb>
 8017e00:	f88d 0020 	strb.w	r0, [sp, #32]
	if (not *success)
 8017e04:	2800      	cmp	r0, #0
 8017e06:	f43f ad90 	beq.w	801792a <_ZN10Publishers13SpinPublisherEh+0x172>
	std::vector<T> register_read_vector_cast = BuildTVector(*element, &register_read);
 8017e0a:	a920      	add	r1, sp, #128	@ 0x80
 8017e0c:	a826      	add	r0, sp, #152	@ 0x98
 8017e0e:	f7f7 fd3d 	bl	800f88c <_ZN14MessageElementC1ERKS_>
	if (not element.element_register.isArray) {
 8017e12:	f89d 309b 	ldrb.w	r3, [sp, #155]	@ 0x9b
 8017e16:	9414      	str	r4, [sp, #80]	@ 0x50
 8017e18:	e9cd 4412 	strd	r4, r4, [sp, #72]	@ 0x48
 8017e1c:	2b00      	cmp	r3, #0
 8017e1e:	d141      	bne.n	8017ea4 <_ZN10Publishers13SpinPublisherEh+0x6ec>
		vector = std::vector<T>{*data};
 8017e20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8017e22:	4630      	mov	r0, r6
 8017e24:	9315      	str	r3, [sp, #84]	@ 0x54
 8017e26:	f7fe fb9d 	bl	8016564 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
 8017e2a:	a916      	add	r1, sp, #88	@ 0x58
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017e2c:	1d03      	adds	r3, r0, #4
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8017e2e:	4602      	mov	r2, r0
 8017e30:	9018      	str	r0, [sp, #96]	@ 0x60
 8017e32:	a815      	add	r0, sp, #84	@ 0x54
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017e34:	931a      	str	r3, [sp, #104]	@ 0x68
 8017e36:	f7fb f891 	bl	8012f5c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8017e3a:	a918      	add	r1, sp, #96	@ 0x60
	  this->_M_impl._M_finish =
 8017e3c:	9019      	str	r0, [sp, #100]	@ 0x64
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8017e3e:	a812      	add	r0, sp, #72	@ 0x48
 8017e40:	f7ff f812 	bl	8016e68 <_ZNSt6vectorIfSaIfEE14_M_move_assignEOS1_St17integral_constantIbLb1EE.isra.0>
      }
 8017e44:	a818      	add	r0, sp, #96	@ 0x60
 8017e46:	f7ea f8e3 	bl	8002010 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8017e4a:	a829      	add	r0, sp, #164	@ 0xa4
 8017e4c:	f7e8 fee2 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017e50:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	@ 0x48
 8017e54:	eba9 0a08 	sub.w	sl, r9, r8
	this->_M_impl._M_start = this->_M_allocate(__n);
 8017e58:	ea4f 00aa 	mov.w	r0, sl, asr #2
 8017e5c:	f7fe fb82 	bl	8016564 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017e60:	eb00 030a 	add.w	r3, r0, sl
 8017e64:	4602      	mov	r2, r0
 8017e66:	4649      	mov	r1, r9
	this->_M_impl._M_start = this->_M_allocate(__n);
 8017e68:	9018      	str	r0, [sp, #96]	@ 0x60
 8017e6a:	4606      	mov	r6, r0
 8017e6c:	4640      	mov	r0, r8
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017e6e:	931a      	str	r3, [sp, #104]	@ 0x68
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017e70:	f04f 0800 	mov.w	r8, #0
 8017e74:	f7fb f872 	bl	8012f5c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 8017e78:	4681      	mov	r9, r0
	this->_M_impl._M_finish =
 8017e7a:	9019      	str	r0, [sp, #100]	@ 0x64
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017e7c:	f8cd 805c 	str.w	r8, [sp, #92]	@ 0x5c
 8017e80:	e9cd 8815 	strd	r8, r8, [sp, #84]	@ 0x54
    for (T input : inputs) {
 8017e84:	45b1      	cmp	r9, r6
 8017e86:	d138      	bne.n	8017efa <_ZN10Publishers13SpinPublisherEh+0x742>
	data = BuildVector<T>(register_read_vector_cast);
 8017e88:	a915      	add	r1, sp, #84	@ 0x54
 8017e8a:	a80f      	add	r0, sp, #60	@ 0x3c
 8017e8c:	f7fe fe88 	bl	8016ba0 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8017e90:	a815      	add	r0, sp, #84	@ 0x54
 8017e92:	f7e8 febf 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8017e96:	a818      	add	r0, sp, #96	@ 0x60
 8017e98:	f7ea f8ba 	bl	8002010 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8017e9c:	a812      	add	r0, sp, #72	@ 0x48
 8017e9e:	f7ea f8b7 	bl	8002010 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8017ea2:	e542      	b.n	801792a <_ZN10Publishers13SpinPublisherEh+0x172>
	} else if (element.element_register.isArray && element.element_register.length > 0)
 8017ea4:	f8bd 009c 	ldrh.w	r0, [sp, #156]	@ 0x9c
 8017ea8:	b150      	cbz	r0, 8017ec0 <_ZN10Publishers13SpinPublisherEh+0x708>
		vector = std::vector<T>(data, data + element.element_register.length);
 8017eaa:	0086      	lsls	r6, r0, #2
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8017eac:	f7fe fb5a 	bl	8016564 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
 8017eb0:	4602      	mov	r2, r0
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017eb2:	1983      	adds	r3, r0, r6
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8017eb4:	9018      	str	r0, [sp, #96]	@ 0x60
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017eb6:	931a      	str	r3, [sp, #104]	@ 0x68
 8017eb8:	ab09      	add	r3, sp, #36	@ 0x24
 8017eba:	1999      	adds	r1, r3, r6
 8017ebc:	4618      	mov	r0, r3
 8017ebe:	e7ba      	b.n	8017e36 <_ZN10Publishers13SpinPublisherEh+0x67e>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017ec0:	e9dd 8a09 	ldrd	r8, sl, [sp, #36]	@ 0x24
	  if (__xlen > capacity())
 8017ec4:	ebba 0608 	subs.w	r6, sl, r8
 8017ec8:	d011      	beq.n	8017eee <_ZN10Publishers13SpinPublisherEh+0x736>
	  pointer __result = this->_M_allocate(__n);
 8017eca:	10b0      	asrs	r0, r6, #2
 8017ecc:	f7fe fb4a 	bl	8016564 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
 8017ed0:	4681      	mov	r9, r0
 8017ed2:	4602      	mov	r2, r0
 8017ed4:	4651      	mov	r1, sl
 8017ed6:	4640      	mov	r0, r8
 8017ed8:	f7fb f840 	bl	8012f5c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8017edc:	eb09 0006 	add.w	r0, r9, r6
	      this->_M_impl._M_start = __tmp;
 8017ee0:	f8cd 9048 	str.w	r9, [sp, #72]	@ 0x48
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8017ee4:	9014      	str	r0, [sp, #80]	@ 0x50
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8017ee6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8017ee8:	4433      	add	r3, r6
 8017eea:	9313      	str	r3, [sp, #76]	@ 0x4c
      return *this;
 8017eec:	e7ad      	b.n	8017e4a <_ZN10Publishers13SpinPublisherEh+0x692>
 8017eee:	4632      	mov	r2, r6
 8017ef0:	4651      	mov	r1, sl
 8017ef2:	4640      	mov	r0, r8
 8017ef4:	f7fb f832 	bl	8012f5c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8017ef8:	e7f5      	b.n	8017ee6 <_ZN10Publishers13SpinPublisherEh+0x72e>
    for (T input : inputs) {
 8017efa:	f856 bb04 	ldr.w	fp, [r6], #4
    std::memcpy(&reinterpreted_input, &input, sizeof(T)); // this is mandatory to get rid of the memory alignment problem. A simple cast can't work here
 8017efe:	f04f 0a18 	mov.w	sl, #24
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017f02:	f8cd 80a0 	str.w	r8, [sp, #160]	@ 0xa0
 8017f06:	e9cd 8826 	strd	r8, r8, [sp, #152]	@ 0x98
		data.push_back((uint8_t) ((reinterpreted_input >> ((type_length - 1 - index) << 3)) & 0xFF)); // previously (8 * (type_length - 1 - index))) & 0xFF))
 8017f0a:	f1ca 0120 	rsb	r1, sl, #32
 8017f0e:	f1aa 0220 	sub.w	r2, sl, #32
 8017f12:	fa2b f30a 	lsr.w	r3, fp, sl
	for (uint8_t index = 0; index < type_length; index++) {
 8017f16:	f1aa 0a08 	sub.w	sl, sl, #8
		data.push_back((uint8_t) ((reinterpreted_input >> ((type_length - 1 - index) << 3)) & 0xFF)); // previously (8 * (type_length - 1 - index))) & 0xFF))
 8017f1a:	fa08 f101 	lsl.w	r1, r8, r1
 8017f1e:	fa28 f202 	lsr.w	r2, r8, r2
      { emplace_back(std::move(__x)); }
 8017f22:	a826      	add	r0, sp, #152	@ 0x98
 8017f24:	430b      	orrs	r3, r1
 8017f26:	f10d 0121 	add.w	r1, sp, #33	@ 0x21
 8017f2a:	4313      	orrs	r3, r2
 8017f2c:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
 8017f30:	f7f7 fb80 	bl	800f634 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
	for (uint8_t index = 0; index < type_length; index++) {
 8017f34:	f11a 0f08 	cmn.w	sl, #8
 8017f38:	d1e7      	bne.n	8017f0a <_ZN10Publishers13SpinPublisherEh+0x752>
        data.insert(data.end(), single.begin(), single.end());
 8017f3a:	a815      	add	r0, sp, #84	@ 0x54
 8017f3c:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8017f3e:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	@ 0x98
 8017f42:	f7ff fbcd 	bl	80176e0 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0>
      }
 8017f46:	a826      	add	r0, sp, #152	@ 0x98
 8017f48:	f7e8 fe64 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return *this;
 8017f4c:	e79a      	b.n	8017e84 <_ZN10Publishers13SpinPublisherEh+0x6cc>
						success = false;
 8017f4e:	f88d 4020 	strb.w	r4, [sp, #32]
					if (not success)
 8017f52:	e4f6      	b.n	8017942 <_ZN10Publishers13SpinPublisherEh+0x18a>
					element.data = register_read;
 8017f54:	a90c      	add	r1, sp, #48	@ 0x30
 8017f56:	a823      	add	r0, sp, #140	@ 0x8c
 8017f58:	f7ff fa59 	bl	801740e <_ZNSt6vectorIhSaIhEEaSERKS1_.isra.0>
					if (not communication->BuildPayload(&message, element) && message.payload.size() > 0) {
 8017f5c:	68ae      	ldr	r6, [r5, #8]
 8017f5e:	a920      	add	r1, sp, #128	@ 0x80
 8017f60:	a826      	add	r0, sp, #152	@ 0x98
 8017f62:	f7f7 fc93 	bl	800f88c <_ZN14MessageElementC1ERKS_>
 8017f66:	aa26      	add	r2, sp, #152	@ 0x98
 8017f68:	a91b      	add	r1, sp, #108	@ 0x6c
 8017f6a:	4630      	mov	r0, r6
 8017f6c:	f7f9 f9e6 	bl	801133c <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8017f70:	2800      	cmp	r0, #0
 8017f72:	d131      	bne.n	8017fd8 <_ZN10Publishers13SpinPublisherEh+0x820>
 8017f74:	e9dd 361c 	ldrd	r3, r6, [sp, #112]	@ 0x70
 8017f78:	1af6      	subs	r6, r6, r3
 8017f7a:	bf18      	it	ne
 8017f7c:	2601      	movne	r6, #1
 8017f7e:	a829      	add	r0, sp, #164	@ 0xa4
 8017f80:	f7e8 fe48 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8017f84:	2e00      	cmp	r6, #0
 8017f86:	f43f acdc 	beq.w	8017942 <_ZN10Publishers13SpinPublisherEh+0x18a>
 8017f8a:	f89d 306c 	ldrb.w	r3, [sp, #108]	@ 0x6c
 8017f8e:	a91c      	add	r1, sp, #112	@ 0x70
						communication->Send(message);
 8017f90:	68ae      	ldr	r6, [r5, #8]
 8017f92:	a827      	add	r0, sp, #156	@ 0x9c
 8017f94:	f88d 3098 	strb.w	r3, [sp, #152]	@ 0x98
 8017f98:	f7e8 feec 	bl	8000d74 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8017f9c:	f8bd 307c 	ldrh.w	r3, [sp, #124]	@ 0x7c
 8017fa0:	a926      	add	r1, sp, #152	@ 0x98
 8017fa2:	4630      	mov	r0, r6
 8017fa4:	f8ad 30a8 	strh.w	r3, [sp, #168]	@ 0xa8
 8017fa8:	f7f7 fd72 	bl	800fa90 <_ZN13Communication4SendE13MessageHeader>
 8017fac:	a827      	add	r0, sp, #156	@ 0x9c
 8017fae:	f7e8 fe31 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
						communication->BuildPayload(&message, element);
 8017fb2:	68ae      	ldr	r6, [r5, #8]
 8017fb4:	a920      	add	r1, sp, #128	@ 0x80
 8017fb6:	a826      	add	r0, sp, #152	@ 0x98
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8017fb8:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8017fbc:	4293      	cmp	r3, r2
	    this->_M_impl._M_finish = __pos;
 8017fbe:	bf18      	it	ne
 8017fc0:	931d      	strne	r3, [sp, #116]	@ 0x74
 8017fc2:	f7f7 fc63 	bl	800f88c <_ZN14MessageElementC1ERKS_>
 8017fc6:	aa26      	add	r2, sp, #152	@ 0x98
 8017fc8:	a91b      	add	r1, sp, #108	@ 0x6c
 8017fca:	4630      	mov	r0, r6
 8017fcc:	f7f9 f9b6 	bl	801133c <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
      }
 8017fd0:	a829      	add	r0, sp, #164	@ 0xa4
 8017fd2:	f7e8 fe1f 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8017fd6:	e4b4      	b.n	8017942 <_ZN10Publishers13SpinPublisherEh+0x18a>
					if (not communication->BuildPayload(&message, element) && message.payload.size() > 0) {
 8017fd8:	2600      	movs	r6, #0
 8017fda:	e7d0      	b.n	8017f7e <_ZN10Publishers13SpinPublisherEh+0x7c6>

08017fdc <_ZZN9Registers16AddBaseRegistersEvENUlPvtPPmPtE_4_FUNES0_tS2_S3_>:
void Registers::AddBaseRegisters(void) {
	// Register to get the timestamp in ms
	AddRegister<uint32_t>(REG_TIMEBASE);
	SetRegisterAsSingle(REG_TIMEBASE);
	AddReadCallback<uint32_t>(REG_TIMEBASE, NULL,
		[](void* context, uint16_t register_id, uint32_t** output, uint16_t* length) -> bool {
 8017fdc:	b538      	push	{r3, r4, r5, lr}
			*length = 1;
 8017fde:	2401      	movs	r4, #1
			**output = HAL_GetTick();
 8017fe0:	6815      	ldr	r5, [r2, #0]
			*length = 1;
 8017fe2:	801c      	strh	r4, [r3, #0]
			**output = HAL_GetTick();
 8017fe4:	f7eb fa4a 	bl	800347c <HAL_GetTick>
 8017fe8:	6028      	str	r0, [r5, #0]
			return true;
		}
 8017fea:	4620      	mov	r0, r4
 8017fec:	bd38      	pop	{r3, r4, r5, pc}
	...

08017ff0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 8017ff0:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8017ff2:	4926      	ldr	r1, [pc, #152]	@ (801808c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 8017ff4:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8017ff6:	4826      	ldr	r0, [pc, #152]	@ (8018090 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8017ff8:	f002 fc98 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8017ffc:	2800      	cmp	r0, #0
 8017ffe:	d133      	bne.n	8018068 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8018000:	4924      	ldr	r1, [pc, #144]	@ (8018094 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa4>)
 8018002:	4823      	ldr	r0, [pc, #140]	@ (8018090 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8018004:	f002 fc92 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8018008:	2800      	cmp	r0, #0
 801800a:	d12f      	bne.n	801806c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 801800c:	4920      	ldr	r1, [pc, #128]	@ (8018090 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 801800e:	4608      	mov	r0, r1
 8018010:	f002 fc8c 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8018014:	bb60      	cbnz	r0, 8018070 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8018016:	4920      	ldr	r1, [pc, #128]	@ (8018098 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa8>)
 8018018:	481d      	ldr	r0, [pc, #116]	@ (8018090 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 801801a:	f002 fc87 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 801801e:	bb48      	cbnz	r0, 8018074 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8018020:	491e      	ldr	r1, [pc, #120]	@ (801809c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xac>)
 8018022:	481b      	ldr	r0, [pc, #108]	@ (8018090 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8018024:	f002 fc82 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8018028:	bb30      	cbnz	r0, 8018078 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 801802a:	491d      	ldr	r1, [pc, #116]	@ (80180a0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xb0>)
 801802c:	4818      	ldr	r0, [pc, #96]	@ (8018090 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 801802e:	f002 fc7d 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8018032:	bb18      	cbnz	r0, 801807c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8018034:	491b      	ldr	r1, [pc, #108]	@ (80180a4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xb4>)
 8018036:	4816      	ldr	r0, [pc, #88]	@ (8018090 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8018038:	f002 fc78 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 801803c:	bb00      	cbnz	r0, 8018080 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 801803e:	491a      	ldr	r1, [pc, #104]	@ (80180a8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xb8>)
 8018040:	4813      	ldr	r0, [pc, #76]	@ (8018090 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8018042:	f002 fc73 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8018046:	b9e8      	cbnz	r0, 8018084 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8018048:	4918      	ldr	r1, [pc, #96]	@ (80180ac <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xbc>)
 801804a:	4811      	ldr	r0, [pc, #68]	@ (8018090 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 801804c:	f002 fc6e 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8018050:	b9d0      	cbnz	r0, 8018088 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 8018052:	4917      	ldr	r1, [pc, #92]	@ (80180b0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xc0>)
 8018054:	480e      	ldr	r0, [pc, #56]	@ (8018090 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8018056:	f002 fc69 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 801805a:	2800      	cmp	r0, #0
 801805c:	bf14      	ite	ne
 801805e:	2309      	movne	r3, #9
 8018060:	2300      	moveq	r3, #0
 8018062:	7020      	strb	r0, [r4, #0]
}
 8018064:	4618      	mov	r0, r3
 8018066:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8018068:	2300      	movs	r3, #0
 801806a:	e7fa      	b.n	8018062 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 801806c:	2301      	movs	r3, #1
 801806e:	e7f8      	b.n	8018062 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8018070:	2302      	movs	r3, #2
 8018072:	e7f6      	b.n	8018062 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8018074:	2303      	movs	r3, #3
 8018076:	e7f4      	b.n	8018062 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8018078:	2304      	movs	r3, #4
 801807a:	e7f2      	b.n	8018062 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 801807c:	2305      	movs	r3, #5
 801807e:	e7f0      	b.n	8018062 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8018080:	2306      	movs	r3, #6
 8018082:	e7ee      	b.n	8018062 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 8018084:	2307      	movs	r3, #7
 8018086:	e7ec      	b.n	8018062 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8018088:	2308      	movs	r3, #8
 801808a:	e7ea      	b.n	8018062 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
 801808c:	0801b5d4 	.word	0x0801b5d4
 8018090:	0801b5b4 	.word	0x0801b5b4
 8018094:	0801b5c4 	.word	0x0801b5c4
 8018098:	0801b5a4 	.word	0x0801b5a4
 801809c:	0801b5dc 	.word	0x0801b5dc
 80180a0:	0801b5cc 	.word	0x0801b5cc
 80180a4:	0801b5bc 	.word	0x0801b5bc
 80180a8:	0801b5ac 	.word	0x0801b5ac
 80180ac:	0801b59c 	.word	0x0801b59c
 80180b0:	0801b594 	.word	0x0801b594

080180b4 <_ZN9RegistersC1Ev>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 80180b4:	2200      	movs	r2, #0
 80180b6:	e9c0 2201 	strd	r2, r2, [r0, #4]
 80180ba:	60c2      	str	r2, [r0, #12]
 80180bc:	e9c0 220e 	strd	r2, r2, [r0, #56]	@ 0x38
 80180c0:	e9c0 2210 	strd	r2, r2, [r0, #64]	@ 0x40
 80180c4:	e9c0 2212 	strd	r2, r2, [r0, #72]	@ 0x48
 80180c8:	e9c0 2214 	strd	r2, r2, [r0, #80]	@ 0x50
 80180cc:	e9c0 2216 	strd	r2, r2, [r0, #88]	@ 0x58
 80180d0:	e9c0 2218 	strd	r2, r2, [r0, #96]	@ 0x60
 80180d4:	e9c0 221a 	strd	r2, r2, [r0, #104]	@ 0x68
 80180d8:	e9c0 221c 	strd	r2, r2, [r0, #112]	@ 0x70
 80180dc:	e9c0 221e 	strd	r2, r2, [r0, #120]	@ 0x78
 80180e0:	e9c0 2220 	strd	r2, r2, [r0, #128]	@ 0x80
 80180e4:	e9c0 2222 	strd	r2, r2, [r0, #136]	@ 0x88
 80180e8:	e9c0 2224 	strd	r2, r2, [r0, #144]	@ 0x90
 80180ec:	e9c0 2226 	strd	r2, r2, [r0, #152]	@ 0x98
 80180f0:	e9c0 2228 	strd	r2, r2, [r0, #160]	@ 0xa0
 80180f4:	e9c0 222a 	strd	r2, r2, [r0, #168]	@ 0xa8
Registers::Registers() {
 80180f8:	f100 0238 	add.w	r2, r0, #56	@ 0x38
	callbacks[UINT8_TYPE] = &uint8_t_callbacks;
 80180fc:	6102      	str	r2, [r0, #16]
Registers::Registers() {
 80180fe:	f100 0244 	add.w	r2, r0, #68	@ 0x44
	callbacks[UINT16_TYPE] = &uint16_t_callbacks;
 8018102:	6142      	str	r2, [r0, #20]
Registers::Registers() {
 8018104:	f100 0250 	add.w	r2, r0, #80	@ 0x50
	callbacks[UINT32_TYPE] = &uint32_t_callbacks;
 8018108:	6182      	str	r2, [r0, #24]
Registers::Registers() {
 801810a:	f100 025c 	add.w	r2, r0, #92	@ 0x5c
	callbacks[UINT64_TYPE] = &uint64_t_callbacks;
 801810e:	61c2      	str	r2, [r0, #28]
Registers::Registers() {
 8018110:	f100 0268 	add.w	r2, r0, #104	@ 0x68
	callbacks[INT8_TYPE] = &int8_t_callbacks;
 8018114:	6202      	str	r2, [r0, #32]
Registers::Registers() {
 8018116:	f100 0274 	add.w	r2, r0, #116	@ 0x74
	callbacks[INT16_TYPE] = &int16_t_callbacks;
 801811a:	6242      	str	r2, [r0, #36]	@ 0x24
Registers::Registers() {
 801811c:	f100 0280 	add.w	r2, r0, #128	@ 0x80
	callbacks[INT32_TYPE] = &int32_t_callbacks;
 8018120:	6282      	str	r2, [r0, #40]	@ 0x28
Registers::Registers() {
 8018122:	f100 028c 	add.w	r2, r0, #140	@ 0x8c
	callbacks[INT64_TYPE] = &int64_t_callbacks;
 8018126:	62c2      	str	r2, [r0, #44]	@ 0x2c
Registers::Registers() {
 8018128:	f100 0298 	add.w	r2, r0, #152	@ 0x98
	callbacks[FLOAT_TYPE] = &float_callbacks;
 801812c:	6302      	str	r2, [r0, #48]	@ 0x30
Registers::Registers() {
 801812e:	f100 02a4 	add.w	r2, r0, #164	@ 0xa4
	callbacks[DOUBLE_TYPE] = &double_callbacks;
 8018132:	6342      	str	r2, [r0, #52]	@ 0x34
}
 8018134:	4770      	bx	lr

08018136 <_ZN9Registers4InitEv>:
	RegistersSemaphore = osSemaphoreNew(1,1,NULL);
 8018136:	2101      	movs	r1, #1
 8018138:	2200      	movs	r2, #0
void Registers::Init(void) {
 801813a:	b510      	push	{r4, lr}
 801813c:	4604      	mov	r4, r0
	RegistersSemaphore = osSemaphoreNew(1,1,NULL);
 801813e:	4608      	mov	r0, r1
 8018140:	f7f4 f99c 	bl	800c47c <osSemaphoreNew>
 8018144:	6020      	str	r0, [r4, #0]
}
 8018146:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSemaphoreRelease(RegistersSemaphore);
 801814a:	f7f4 ba27 	b.w	800c59c <osSemaphoreRelease>

0801814e <_ZN9Registers25FindRegisterConfigurationEtPb>:
 *
 * @param input ID: register address
 * @param output success: whether successful
 * @return the pointer to the register configuration
 */
RegisterConfiguration* Registers::FindRegisterConfiguration(uint16_t ID, bool* success) {
 801814e:	b530      	push	{r4, r5, lr}
 8018150:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
	for (RegisterConfiguration &register_configuration : registers) {
 8018154:	429c      	cmp	r4, r3
 8018156:	4618      	mov	r0, r3
 8018158:	d103      	bne.n	8018162 <_ZN9Registers25FindRegisterConfigurationEtPb+0x14>
 801815a:	2300      	movs	r3, #0
			*success = true;
			return &register_configuration;
		}
	}
	*success = false;
	return NULL;
 801815c:	4618      	mov	r0, r3
			*success = true;
 801815e:	7013      	strb	r3, [r2, #0]
}
 8018160:	bd30      	pop	{r4, r5, pc}
		if (register_configuration.register_info.address == ID) {
 8018162:	8845      	ldrh	r5, [r0, #2]
 8018164:	f100 0310 	add.w	r3, r0, #16
 8018168:	428d      	cmp	r5, r1
 801816a:	d1f3      	bne.n	8018154 <_ZN9Registers25FindRegisterConfigurationEtPb+0x6>
 801816c:	2301      	movs	r3, #1
 801816e:	e7f6      	b.n	801815e <_ZN9Registers25FindRegisterConfigurationEtPb+0x10>

08018170 <_ZN9Registers12FindRegisterEtPb>:
Register Registers::FindRegister(uint16_t ID, bool* success) {
 8018170:	b510      	push	{r4, lr}
 8018172:	4604      	mov	r4, r0
 8018174:	4608      	mov	r0, r1
 8018176:	4611      	mov	r1, r2
	RegisterConfiguration* register_configuration = FindRegisterConfiguration(ID, success);
 8018178:	461a      	mov	r2, r3
 801817a:	f7ff ffe8 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	return register_configuration->register_info;
 801817e:	f8d0 3002 	ldr.w	r3, [r0, #2]
 8018182:	6023      	str	r3, [r4, #0]
 8018184:	88c3      	ldrh	r3, [r0, #6]
}
 8018186:	4620      	mov	r0, r4
	return register_configuration->register_info;
 8018188:	80a3      	strh	r3, [r4, #4]
}
 801818a:	bd10      	pop	{r4, pc}

0801818c <_ZN9Registers20AddRegisterSemaphoreEtPPv>:
 *
 * @param input ID: register address
 * @param input register_semaphore: pointer to the semaphore to link
 * @return whether successful
 */
bool Registers::AddRegisterSemaphore(uint16_t ID, osSemaphoreId_t* register_semaphore) {
 801818c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801818e:	460e      	mov	r6, r1
 8018190:	4604      	mov	r4, r0
	bool success;
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8018192:	f04f 31ff 	mov.w	r1, #4294967295
 8018196:	6800      	ldr	r0, [r0, #0]
bool Registers::AddRegisterSemaphore(uint16_t ID, osSemaphoreId_t* register_semaphore) {
 8018198:	4615      	mov	r5, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801819a:	f7f4 f9cb 	bl	800c534 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801819e:	4631      	mov	r1, r6
 80181a0:	f10d 0207 	add.w	r2, sp, #7
 80181a4:	4620      	mov	r0, r4
 80181a6:	f7ff ffd2 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80181aa:	f89d 6007 	ldrb.w	r6, [sp, #7]
 80181ae:	b92e      	cbnz	r6, 80181bc <_ZN9Registers20AddRegisterSemaphoreEtPPv+0x30>
		osSemaphoreRelease(RegistersSemaphore);
		return false;
	}

	target_register->register_semaphore = register_semaphore;
	osSemaphoreRelease(RegistersSemaphore);
 80181b0:	6820      	ldr	r0, [r4, #0]
 80181b2:	f7f4 f9f3 	bl	800c59c <osSemaphoreRelease>
	return true;
}
 80181b6:	4630      	mov	r0, r6
 80181b8:	b002      	add	sp, #8
 80181ba:	bd70      	pop	{r4, r5, r6, pc}
	target_register->register_semaphore = register_semaphore;
 80181bc:	60c5      	str	r5, [r0, #12]
 80181be:	e7f7      	b.n	80181b0 <_ZN9Registers20AddRegisterSemaphoreEtPPv+0x24>

080181c0 <_ZN9Registers19SetRegisterAsSingleEt>:
 * @brief Set the register as a single value (not an array nor a vector)
 *
 * @param input ID: register address
 * @return whether successful
 */
bool Registers::SetRegisterAsSingle(uint16_t ID) {
 80181c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80181c2:	460d      	mov	r5, r1
 80181c4:	4604      	mov	r4, r0
	bool success;
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80181c6:	f04f 31ff 	mov.w	r1, #4294967295
 80181ca:	6800      	ldr	r0, [r0, #0]
 80181cc:	f7f4 f9b2 	bl	800c534 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80181d0:	4629      	mov	r1, r5
 80181d2:	f10d 0207 	add.w	r2, sp, #7
 80181d6:	4620      	mov	r0, r4
 80181d8:	f7ff ffb9 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80181dc:	f89d 5007 	ldrb.w	r5, [sp, #7]
 80181e0:	b92d      	cbnz	r5, 80181ee <_ZN9Registers19SetRegisterAsSingleEt+0x2e>
		return false;
	}

	target_register->register_info.isArray = false;
	target_register->register_info.length = 1;
	osSemaphoreRelease(RegistersSemaphore);
 80181e2:	6820      	ldr	r0, [r4, #0]
 80181e4:	f7f4 f9da 	bl	800c59c <osSemaphoreRelease>
	return true;
}
 80181e8:	4628      	mov	r0, r5
 80181ea:	b003      	add	sp, #12
 80181ec:	bd30      	pop	{r4, r5, pc}
	target_register->register_info.isArray = false;
 80181ee:	2300      	movs	r3, #0
 80181f0:	7143      	strb	r3, [r0, #5]
	target_register->register_info.length = 1;
 80181f2:	2301      	movs	r3, #1
 80181f4:	80c3      	strh	r3, [r0, #6]
 80181f6:	e7f4      	b.n	80181e2 <_ZN9Registers19SetRegisterAsSingleEt+0x22>

080181f8 <_ZN9Registers18SetRegisterAsArrayEtt>:
 *
 * @param input ID: register address
 * @param input length_: length of the array
 * @return whether successful
 */
bool Registers::SetRegisterAsArray(uint16_t ID, uint16_t length_) {
 80181f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80181fa:	460e      	mov	r6, r1
 80181fc:	4604      	mov	r4, r0
	bool success;
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80181fe:	f04f 31ff 	mov.w	r1, #4294967295
 8018202:	6800      	ldr	r0, [r0, #0]
bool Registers::SetRegisterAsArray(uint16_t ID, uint16_t length_) {
 8018204:	4615      	mov	r5, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8018206:	f7f4 f995 	bl	800c534 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801820a:	4631      	mov	r1, r6
 801820c:	f10d 0207 	add.w	r2, sp, #7
 8018210:	4620      	mov	r0, r4
 8018212:	f7ff ff9c 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8018216:	f89d 6007 	ldrb.w	r6, [sp, #7]
 801821a:	b92e      	cbnz	r6, 8018228 <_ZN9Registers18SetRegisterAsArrayEtt+0x30>
		return false;
	}

	target_register->register_info.isArray = true;
	target_register->register_info.length = length_;
	osSemaphoreRelease(RegistersSemaphore);
 801821c:	6820      	ldr	r0, [r4, #0]
 801821e:	f7f4 f9bd 	bl	800c59c <osSemaphoreRelease>
	return true;
}
 8018222:	4630      	mov	r0, r6
 8018224:	b002      	add	sp, #8
 8018226:	bd70      	pop	{r4, r5, r6, pc}
	target_register->register_info.isArray = true;
 8018228:	2301      	movs	r3, #1
	target_register->register_info.length = length_;
 801822a:	80c5      	strh	r5, [r0, #6]
	target_register->register_info.isArray = true;
 801822c:	7143      	strb	r3, [r0, #5]
	target_register->register_info.length = length_;
 801822e:	e7f5      	b.n	801821c <_ZN9Registers18SetRegisterAsArrayEtt+0x24>

08018230 <_ZN9Registers19SetRegisterAsVectorEt>:
 *
 * @param input ID: register address
 * @return whether successful
 */
bool Registers::SetRegisterAsVector(uint16_t ID) {
	return SetRegisterAsArray(ID, 0);
 8018230:	2200      	movs	r2, #0
 8018232:	f7ff bfe1 	b.w	80181f8 <_ZN9Registers18SetRegisterAsArrayEtt>

08018236 <_ZN9Registers22SetRegisterPermissionsEth>:
 *
 * @param input ID: register address
 * @param input permissions_: WRITE_PERMISSION or READ_PERMISSION
 * @return whether successful
 */
bool Registers::SetRegisterPermissions(uint16_t ID, uint8_t permissions_) {
 8018236:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018238:	460e      	mov	r6, r1
 801823a:	4604      	mov	r4, r0
	bool success;
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801823c:	f04f 31ff 	mov.w	r1, #4294967295
 8018240:	6800      	ldr	r0, [r0, #0]
bool Registers::SetRegisterPermissions(uint16_t ID, uint8_t permissions_) {
 8018242:	4615      	mov	r5, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8018244:	f7f4 f976 	bl	800c534 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8018248:	4631      	mov	r1, r6
 801824a:	f10d 0207 	add.w	r2, sp, #7
 801824e:	4620      	mov	r0, r4
 8018250:	f7ff ff7d 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8018254:	f89d 6007 	ldrb.w	r6, [sp, #7]
 8018258:	b92e      	cbnz	r6, 8018266 <_ZN9Registers22SetRegisterPermissionsEth+0x30>
		return false;
	}

	target_register->access.write = permissions_ & WRITE_PERMISSION;
	target_register->access.read = permissions_ & READ_PERMISSION;
	osSemaphoreRelease(RegistersSemaphore);
 801825a:	6820      	ldr	r0, [r4, #0]
 801825c:	f7f4 f99e 	bl	800c59c <osSemaphoreRelease>
	return true;
}
 8018260:	4630      	mov	r0, r6
 8018262:	b002      	add	sp, #8
 8018264:	bd70      	pop	{r4, r5, r6, pc}
	target_register->access.write = permissions_ & WRITE_PERMISSION;
 8018266:	f005 0301 	and.w	r3, r5, #1
	target_register->access.read = permissions_ & READ_PERMISSION;
 801826a:	f3c5 0540 	ubfx	r5, r5, #1, #1
	target_register->access.write = permissions_ & WRITE_PERMISSION;
 801826e:	7203      	strb	r3, [r0, #8]
	target_register->access.read = permissions_ & READ_PERMISSION;
 8018270:	7245      	strb	r5, [r0, #9]
 8018272:	e7f2      	b.n	801825a <_ZN9Registers22SetRegisterPermissionsEth+0x24>

08018274 <_ZN9Registers12IsRegisteredEt>:
 * @brief Check the register exists
 *
 * @param input ID: register address to check
 * @return true if the register is found
 */
bool Registers::IsRegistered(uint16_t ID) {
 8018274:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018276:	4604      	mov	r4, r0
 8018278:	460d      	mov	r5, r1
	bool success;
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801827a:	6800      	ldr	r0, [r0, #0]
 801827c:	f04f 31ff 	mov.w	r1, #4294967295
 8018280:	f7f4 f958 	bl	800c534 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 8018284:	f10d 0207 	add.w	r2, sp, #7
 8018288:	4629      	mov	r1, r5
 801828a:	4620      	mov	r0, r4
 801828c:	f7ff ff5f 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	osSemaphoreRelease(RegistersSemaphore);
 8018290:	6820      	ldr	r0, [r4, #0]
 8018292:	f7f4 f983 	bl	800c59c <osSemaphoreRelease>
	return success;
}
 8018296:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801829a:	b003      	add	sp, #12
 801829c:	bd30      	pop	{r4, r5, pc}
	...

080182a0 <_ZN9Registers16AddBaseRegistersEv>:
void Registers::AddBaseRegisters(void) {
 80182a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80182a2:	4604      	mov	r4, r0
 80182a4:	b087      	sub	sp, #28
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80182a6:	f04f 31ff 	mov.w	r1, #4294967295
 80182aa:	6800      	ldr	r0, [r0, #0]
 80182ac:	f7f4 f942 	bl	800c534 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 80182b0:	f10d 0207 	add.w	r2, sp, #7
 80182b4:	2100      	movs	r1, #0
 80182b6:	4620      	mov	r0, r4
 80182b8:	f7ff ff49 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 80182bc:	f89d 5007 	ldrb.w	r5, [sp, #7]
 80182c0:	b1dd      	cbz	r5, 80182fa <_ZN9Registers16AddBaseRegistersEv+0x5a>
	osSemaphoreRelease(RegistersSemaphore);
 80182c2:	6820      	ldr	r0, [r4, #0]
 80182c4:	f7f4 f96a 	bl	800c59c <osSemaphoreRelease>
	SetRegisterAsSingle(REG_TIMEBASE);
 80182c8:	2100      	movs	r1, #0
 80182ca:	4620      	mov	r0, r4
 80182cc:	f7ff ff78 	bl	80181c0 <_ZN9Registers19SetRegisterAsSingleEt>
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80182d0:	f04f 31ff 	mov.w	r1, #4294967295
 80182d4:	6820      	ldr	r0, [r4, #0]
 80182d6:	f7f4 f92d 	bl	800c534 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80182da:	f10d 0207 	add.w	r2, sp, #7
 80182de:	2100      	movs	r1, #0
 80182e0:	4620      	mov	r0, r4
 80182e2:	f7ff ff34 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80182e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80182ea:	4605      	mov	r5, r0
	if (!success) {
 80182ec:	bb3b      	cbnz	r3, 801833e <_ZN9Registers16AddBaseRegistersEv+0x9e>
	osSemaphoreRelease(RegistersSemaphore);
 80182ee:	6820      	ldr	r0, [r4, #0]
}
 80182f0:	b007      	add	sp, #28
 80182f2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80182f6:	f7f4 b951 	b.w	800c59c <osSemaphoreRelease>
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 80182fa:	f10d 0007 	add.w	r0, sp, #7
 80182fe:	f7ff fe77 	bl	8017ff0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	configuration_.register_info = register_;
 8018302:	2301      	movs	r3, #1
	configuration_.mode = mode;
 8018304:	9502      	str	r5, [sp, #8]
	configuration_.register_info = register_;
 8018306:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 801830a:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 801830e:	f88d 000c 	strb.w	r0, [sp, #12]
 8018312:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 8018316:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 801831a:	2b00      	cmp	r3, #0
 801831c:	d0d1      	beq.n	80182c2 <_ZN9Registers16AddBaseRegistersEv+0x22>
      push_back(const value_type& __x)
 801831e:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8018320:	e9d4 5302 	ldrd	r5, r3, [r4, #8]
 8018324:	429d      	cmp	r5, r3
 8018326:	d005      	beq.n	8018334 <_ZN9Registers16AddBaseRegistersEv+0x94>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8018328:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 801832a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 801832e:	3510      	adds	r5, #16
 8018330:	60a5      	str	r5, [r4, #8]
 8018332:	e7c6      	b.n	80182c2 <_ZN9Registers16AddBaseRegistersEv+0x22>
	  _M_realloc_insert(end(), __x);
 8018334:	4629      	mov	r1, r5
 8018336:	1d20      	adds	r0, r4, #4
 8018338:	f7f6 ff0e 	bl	800f158 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 801833c:	e7c1      	b.n	80182c2 <_ZN9Registers16AddBaseRegistersEv+0x22>
	uint8_t registered_type = GetTypeID<T>(&success);
 801833e:	f10d 0007 	add.w	r0, sp, #7
 8018342:	f7ff fe55 	bl	8017ff0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	if (!success) {
 8018346:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801834a:	2b00      	cmp	r3, #0
 801834c:	d0cf      	beq.n	80182ee <_ZN9Registers16AddBaseRegistersEv+0x4e>
	if (target_register->register_info.type != registered_type) {
 801834e:	792b      	ldrb	r3, [r5, #4]
 8018350:	4298      	cmp	r0, r3
 8018352:	d1cc      	bne.n	80182ee <_ZN9Registers16AddBaseRegistersEv+0x4e>
	if (callbacks[target_register->register_info.type] == NULL) {
 8018354:	3004      	adds	r0, #4
 8018356:	f854 7020 	ldr.w	r7, [r4, r0, lsl #2]
 801835a:	2f00      	cmp	r7, #0
 801835c:	d0c7      	beq.n	80182ee <_ZN9Registers16AddBaseRegistersEv+0x4e>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 801835e:	7829      	ldrb	r1, [r5, #0]
 8018360:	4814      	ldr	r0, [pc, #80]	@ (80183b4 <_ZN9Registers16AddBaseRegistersEv+0x114>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8018362:	e9d7 3600 	ldrd	r3, r6, [r7]
 8018366:	1af2      	subs	r2, r6, r3
 8018368:	1112      	asrs	r2, r2, #4
 801836a:	b9b1      	cbnz	r1, 801839a <_ZN9Registers16AddBaseRegistersEv+0xfa>
 801836c:	7869      	ldrb	r1, [r5, #1]
 801836e:	b9a1      	cbnz	r1, 801839a <_ZN9Registers16AddBaseRegistersEv+0xfa>
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8018370:	816a      	strh	r2, [r5, #10]
 8018372:	aa02      	add	r2, sp, #8
		callback.read = read;
 8018374:	9005      	str	r0, [sp, #20]
		callback.write = NULL;
 8018376:	e9cd 1103 	strd	r1, r1, [sp, #12]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801837a:	68b9      	ldr	r1, [r7, #8]
 801837c:	42b1      	cmp	r1, r6
 801837e:	d008      	beq.n	8018392 <_ZN9Registers16AddBaseRegistersEv+0xf2>
 8018380:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8018382:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8018386:	3610      	adds	r6, #16
 8018388:	607e      	str	r6, [r7, #4]
	target_register->mode.callbacks = true;
 801838a:	2301      	movs	r3, #1
 801838c:	706b      	strb	r3, [r5, #1]
	target_register->access.read = true;
 801838e:	726b      	strb	r3, [r5, #9]
 8018390:	e7ad      	b.n	80182ee <_ZN9Registers16AddBaseRegistersEv+0x4e>
	  _M_realloc_insert(end(), __x);
 8018392:	4638      	mov	r0, r7
 8018394:	f7fc fd64 	bl	8014e60 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	} else {
 8018398:	e7f7      	b.n	801838a <_ZN9Registers16AddBaseRegistersEv+0xea>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 801839a:	8969      	ldrh	r1, [r5, #10]
	if (__n >= this->size())
 801839c:	4291      	cmp	r1, r2
 801839e:	d302      	bcc.n	80183a6 <_ZN9Registers16AddBaseRegistersEv+0x106>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 80183a0:	4805      	ldr	r0, [pc, #20]	@ (80183b8 <_ZN9Registers16AddBaseRegistersEv+0x118>)
 80183a2:	f002 fae4 	bl	801a96e <_ZSt24__throw_out_of_range_fmtPKcz>
	return *(this->_M_impl._M_start + __n);
 80183a6:	eb03 1301 	add.w	r3, r3, r1, lsl #4
		callback->context = context;
 80183aa:	2200      	movs	r2, #0
		callback->read = read;
 80183ac:	60d8      	str	r0, [r3, #12]
		callback->context = context;
 80183ae:	605a      	str	r2, [r3, #4]
 80183b0:	e7eb      	b.n	801838a <_ZN9Registers16AddBaseRegistersEv+0xea>
 80183b2:	bf00      	nop
 80183b4:	08017fdd 	.word	0x08017fdd
 80183b8:	0801b3bc 	.word	0x0801b3bc

080183bc <_ZZN7Sensors12AddRegistersEvENUlPvtPPhPtE_4_FUNES0_tS2_S3_>:
void Sensors::AddRegisters(void) {
	// Register to access the general sensor reading status
	registers->AddRegister<uint8_t>(REG_SENSORS_READING_STATUS);
	registers->SetRegisterAsSingle(REG_SENSORS_READING_STATUS);
	registers->AddReadCallback<uint8_t>(REG_SENSORS_READING_STATUS, (void*) this,
			[](void* context, uint16_t register_id, uint8_t** output, uint16_t* length) -> bool {
 80183bc:	b538      	push	{r3, r4, r5, lr}
 80183be:	4604      	mov	r4, r0
 80183c0:	4615      	mov	r5, r2
			Sensors* self = (Sensors*) context;
			osSemaphoreAcquire(self->SensorsSemaphore, osWaitForever);
 80183c2:	f04f 31ff 	mov.w	r1, #4294967295
 80183c6:	6800      	ldr	r0, [r0, #0]
 80183c8:	f7f4 f8b4 	bl	800c534 <osSemaphoreAcquire>
			**output = (uint8_t) self->active;
 80183cc:	682b      	ldr	r3, [r5, #0]
 80183ce:	7922      	ldrb	r2, [r4, #4]
 80183d0:	701a      	strb	r2, [r3, #0]
			osSemaphoreRelease(self->SensorsSemaphore);
 80183d2:	6820      	ldr	r0, [r4, #0]
 80183d4:	f7f4 f8e2 	bl	800c59c <osSemaphoreRelease>
			return true;
		}
 80183d8:	2001      	movs	r0, #1
 80183da:	bd38      	pop	{r3, r4, r5, pc}

080183dc <_ZN9Registers9GetTypeIDImEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 80183dc:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80183de:	4926      	ldr	r1, [pc, #152]	@ (8018478 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 80183e0:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80183e2:	4826      	ldr	r0, [pc, #152]	@ (801847c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 80183e4:	f002 faa2 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 80183e8:	2800      	cmp	r0, #0
 80183ea:	d133      	bne.n	8018454 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 80183ec:	4924      	ldr	r1, [pc, #144]	@ (8018480 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa4>)
 80183ee:	4823      	ldr	r0, [pc, #140]	@ (801847c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 80183f0:	f002 fa9c 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 80183f4:	2800      	cmp	r0, #0
 80183f6:	d12f      	bne.n	8018458 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 80183f8:	4920      	ldr	r1, [pc, #128]	@ (801847c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 80183fa:	4608      	mov	r0, r1
 80183fc:	f002 fa96 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8018400:	bb60      	cbnz	r0, 801845c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8018402:	4920      	ldr	r1, [pc, #128]	@ (8018484 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa8>)
 8018404:	481d      	ldr	r0, [pc, #116]	@ (801847c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8018406:	f002 fa91 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 801840a:	bb48      	cbnz	r0, 8018460 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 801840c:	491e      	ldr	r1, [pc, #120]	@ (8018488 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xac>)
 801840e:	481b      	ldr	r0, [pc, #108]	@ (801847c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8018410:	f002 fa8c 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8018414:	bb30      	cbnz	r0, 8018464 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 8018416:	491d      	ldr	r1, [pc, #116]	@ (801848c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xb0>)
 8018418:	4818      	ldr	r0, [pc, #96]	@ (801847c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 801841a:	f002 fa87 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 801841e:	bb18      	cbnz	r0, 8018468 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8018420:	491b      	ldr	r1, [pc, #108]	@ (8018490 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xb4>)
 8018422:	4816      	ldr	r0, [pc, #88]	@ (801847c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8018424:	f002 fa82 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8018428:	bb00      	cbnz	r0, 801846c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 801842a:	491a      	ldr	r1, [pc, #104]	@ (8018494 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xb8>)
 801842c:	4813      	ldr	r0, [pc, #76]	@ (801847c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 801842e:	f002 fa7d 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8018432:	b9e8      	cbnz	r0, 8018470 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8018434:	4918      	ldr	r1, [pc, #96]	@ (8018498 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xbc>)
 8018436:	4811      	ldr	r0, [pc, #68]	@ (801847c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8018438:	f002 fa78 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 801843c:	b9d0      	cbnz	r0, 8018474 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 801843e:	4917      	ldr	r1, [pc, #92]	@ (801849c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xc0>)
 8018440:	480e      	ldr	r0, [pc, #56]	@ (801847c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8018442:	f002 fa73 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 8018446:	2800      	cmp	r0, #0
 8018448:	bf14      	ite	ne
 801844a:	2309      	movne	r3, #9
 801844c:	2300      	moveq	r3, #0
 801844e:	7020      	strb	r0, [r4, #0]
}
 8018450:	4618      	mov	r0, r3
 8018452:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8018454:	2300      	movs	r3, #0
 8018456:	e7fa      	b.n	801844e <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8018458:	2301      	movs	r3, #1
 801845a:	e7f8      	b.n	801844e <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 801845c:	2302      	movs	r3, #2
 801845e:	e7f6      	b.n	801844e <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8018460:	2303      	movs	r3, #3
 8018462:	e7f4      	b.n	801844e <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8018464:	2304      	movs	r3, #4
 8018466:	e7f2      	b.n	801844e <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 8018468:	2305      	movs	r3, #5
 801846a:	e7f0      	b.n	801844e <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 801846c:	2306      	movs	r3, #6
 801846e:	e7ee      	b.n	801844e <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 8018470:	2307      	movs	r3, #7
 8018472:	e7ec      	b.n	801844e <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8018474:	2308      	movs	r3, #8
 8018476:	e7ea      	b.n	801844e <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
 8018478:	0801b5d4 	.word	0x0801b5d4
 801847c:	0801b5b4 	.word	0x0801b5b4
 8018480:	0801b5c4 	.word	0x0801b5c4
 8018484:	0801b5a4 	.word	0x0801b5a4
 8018488:	0801b5dc 	.word	0x0801b5dc
 801848c:	0801b5cc 	.word	0x0801b5cc
 8018490:	0801b5bc 	.word	0x0801b5bc
 8018494:	0801b5ac 	.word	0x0801b5ac
 8018498:	0801b59c 	.word	0x0801b59c
 801849c:	0801b594 	.word	0x0801b594

080184a0 <_ZN9Registers9GetTypeIDItEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 80184a0:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80184a2:	4926      	ldr	r1, [pc, #152]	@ (801853c <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 80184a4:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80184a6:	4826      	ldr	r0, [pc, #152]	@ (8018540 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 80184a8:	f002 fa40 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 80184ac:	2800      	cmp	r0, #0
 80184ae:	d133      	bne.n	8018518 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 80184b0:	4923      	ldr	r1, [pc, #140]	@ (8018540 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 80184b2:	4608      	mov	r0, r1
 80184b4:	f002 fa3a 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 80184b8:	2800      	cmp	r0, #0
 80184ba:	d12f      	bne.n	801851c <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 80184bc:	4921      	ldr	r1, [pc, #132]	@ (8018544 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa4>)
 80184be:	4820      	ldr	r0, [pc, #128]	@ (8018540 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 80184c0:	f002 fa34 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 80184c4:	bb60      	cbnz	r0, 8018520 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 80184c6:	4920      	ldr	r1, [pc, #128]	@ (8018548 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa8>)
 80184c8:	481d      	ldr	r0, [pc, #116]	@ (8018540 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 80184ca:	f002 fa2f 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 80184ce:	bb48      	cbnz	r0, 8018524 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 80184d0:	491e      	ldr	r1, [pc, #120]	@ (801854c <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xac>)
 80184d2:	481b      	ldr	r0, [pc, #108]	@ (8018540 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 80184d4:	f002 fa2a 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 80184d8:	bb30      	cbnz	r0, 8018528 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 80184da:	491d      	ldr	r1, [pc, #116]	@ (8018550 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xb0>)
 80184dc:	4818      	ldr	r0, [pc, #96]	@ (8018540 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 80184de:	f002 fa25 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 80184e2:	bb18      	cbnz	r0, 801852c <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 80184e4:	491b      	ldr	r1, [pc, #108]	@ (8018554 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xb4>)
 80184e6:	4816      	ldr	r0, [pc, #88]	@ (8018540 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 80184e8:	f002 fa20 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 80184ec:	bb00      	cbnz	r0, 8018530 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 80184ee:	491a      	ldr	r1, [pc, #104]	@ (8018558 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xb8>)
 80184f0:	4813      	ldr	r0, [pc, #76]	@ (8018540 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 80184f2:	f002 fa1b 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 80184f6:	b9e8      	cbnz	r0, 8018534 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 80184f8:	4918      	ldr	r1, [pc, #96]	@ (801855c <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xbc>)
 80184fa:	4811      	ldr	r0, [pc, #68]	@ (8018540 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 80184fc:	f002 fa16 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8018500:	b9d0      	cbnz	r0, 8018538 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 8018502:	4917      	ldr	r1, [pc, #92]	@ (8018560 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xc0>)
 8018504:	480e      	ldr	r0, [pc, #56]	@ (8018540 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 8018506:	f002 fa11 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 801850a:	2800      	cmp	r0, #0
 801850c:	bf14      	ite	ne
 801850e:	2309      	movne	r3, #9
 8018510:	2300      	moveq	r3, #0
 8018512:	7020      	strb	r0, [r4, #0]
}
 8018514:	4618      	mov	r0, r3
 8018516:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8018518:	2300      	movs	r3, #0
 801851a:	e7fa      	b.n	8018512 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 801851c:	2301      	movs	r3, #1
 801851e:	e7f8      	b.n	8018512 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8018520:	2302      	movs	r3, #2
 8018522:	e7f6      	b.n	8018512 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8018524:	2303      	movs	r3, #3
 8018526:	e7f4      	b.n	8018512 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8018528:	2304      	movs	r3, #4
 801852a:	e7f2      	b.n	8018512 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 801852c:	2305      	movs	r3, #5
 801852e:	e7f0      	b.n	8018512 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8018530:	2306      	movs	r3, #6
 8018532:	e7ee      	b.n	8018512 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 8018534:	2307      	movs	r3, #7
 8018536:	e7ec      	b.n	8018512 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8018538:	2308      	movs	r3, #8
 801853a:	e7ea      	b.n	8018512 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
 801853c:	0801b5d4 	.word	0x0801b5d4
 8018540:	0801b5c4 	.word	0x0801b5c4
 8018544:	0801b5b4 	.word	0x0801b5b4
 8018548:	0801b5a4 	.word	0x0801b5a4
 801854c:	0801b5dc 	.word	0x0801b5dc
 8018550:	0801b5cc 	.word	0x0801b5cc
 8018554:	0801b5bc 	.word	0x0801b5bc
 8018558:	0801b5ac 	.word	0x0801b5ac
 801855c:	0801b59c 	.word	0x0801b59c
 8018560:	0801b594 	.word	0x0801b594

08018564 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>:
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8018564:	4926      	ldr	r1, [pc, #152]	@ (8018600 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 8018566:	b510      	push	{r4, lr}
 8018568:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801856a:	4608      	mov	r0, r1
 801856c:	f002 f9de 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8018570:	2800      	cmp	r0, #0
 8018572:	d133      	bne.n	80185dc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8018574:	4923      	ldr	r1, [pc, #140]	@ (8018604 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa0>)
 8018576:	4822      	ldr	r0, [pc, #136]	@ (8018600 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8018578:	f002 f9d8 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 801857c:	2800      	cmp	r0, #0
 801857e:	d12f      	bne.n	80185e0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8018580:	4921      	ldr	r1, [pc, #132]	@ (8018608 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa4>)
 8018582:	481f      	ldr	r0, [pc, #124]	@ (8018600 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8018584:	f002 f9d2 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8018588:	bb60      	cbnz	r0, 80185e4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 801858a:	4920      	ldr	r1, [pc, #128]	@ (801860c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa8>)
 801858c:	481c      	ldr	r0, [pc, #112]	@ (8018600 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 801858e:	f002 f9cd 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8018592:	bb48      	cbnz	r0, 80185e8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8018594:	491e      	ldr	r1, [pc, #120]	@ (8018610 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xac>)
 8018596:	481a      	ldr	r0, [pc, #104]	@ (8018600 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8018598:	f002 f9c8 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 801859c:	bb30      	cbnz	r0, 80185ec <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 801859e:	491d      	ldr	r1, [pc, #116]	@ (8018614 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb0>)
 80185a0:	4817      	ldr	r0, [pc, #92]	@ (8018600 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 80185a2:	f002 f9c3 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 80185a6:	bb18      	cbnz	r0, 80185f0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 80185a8:	491b      	ldr	r1, [pc, #108]	@ (8018618 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb4>)
 80185aa:	4815      	ldr	r0, [pc, #84]	@ (8018600 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 80185ac:	f002 f9be 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 80185b0:	bb00      	cbnz	r0, 80185f4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 80185b2:	491a      	ldr	r1, [pc, #104]	@ (801861c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb8>)
 80185b4:	4812      	ldr	r0, [pc, #72]	@ (8018600 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 80185b6:	f002 f9b9 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 80185ba:	b9e8      	cbnz	r0, 80185f8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 80185bc:	4918      	ldr	r1, [pc, #96]	@ (8018620 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xbc>)
 80185be:	4810      	ldr	r0, [pc, #64]	@ (8018600 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 80185c0:	f002 f9b4 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 80185c4:	b9d0      	cbnz	r0, 80185fc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 80185c6:	4917      	ldr	r1, [pc, #92]	@ (8018624 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xc0>)
 80185c8:	480d      	ldr	r0, [pc, #52]	@ (8018600 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 80185ca:	f002 f9af 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 80185ce:	2800      	cmp	r0, #0
 80185d0:	bf14      	ite	ne
 80185d2:	2309      	movne	r3, #9
 80185d4:	2300      	moveq	r3, #0
 80185d6:	7020      	strb	r0, [r4, #0]
}
 80185d8:	4618      	mov	r0, r3
 80185da:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80185dc:	2300      	movs	r3, #0
 80185de:	e7fa      	b.n	80185d6 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 80185e0:	2301      	movs	r3, #1
 80185e2:	e7f8      	b.n	80185d6 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 80185e4:	2302      	movs	r3, #2
 80185e6:	e7f6      	b.n	80185d6 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 80185e8:	2303      	movs	r3, #3
 80185ea:	e7f4      	b.n	80185d6 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 80185ec:	2304      	movs	r3, #4
 80185ee:	e7f2      	b.n	80185d6 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 80185f0:	2305      	movs	r3, #5
 80185f2:	e7f0      	b.n	80185d6 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 80185f4:	2306      	movs	r3, #6
 80185f6:	e7ee      	b.n	80185d6 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 80185f8:	2307      	movs	r3, #7
 80185fa:	e7ec      	b.n	80185d6 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 80185fc:	2308      	movs	r3, #8
 80185fe:	e7ea      	b.n	80185d6 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
 8018600:	0801b5d4 	.word	0x0801b5d4
 8018604:	0801b5c4 	.word	0x0801b5c4
 8018608:	0801b5b4 	.word	0x0801b5b4
 801860c:	0801b5a4 	.word	0x0801b5a4
 8018610:	0801b5dc 	.word	0x0801b5dc
 8018614:	0801b5cc 	.word	0x0801b5cc
 8018618:	0801b5bc 	.word	0x0801b5bc
 801861c:	0801b5ac 	.word	0x0801b5ac
 8018620:	0801b59c 	.word	0x0801b59c
 8018624:	0801b594 	.word	0x0801b594

08018628 <_ZN7SensorsC1Ev>:
Sensors::Sensors() {
 8018628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
 801862a:	2300      	movs	r3, #0
 801862c:	4604      	mov	r4, r0
 801862e:	f100 0750 	add.w	r7, r0, #80	@ 0x50
 8018632:	6583      	str	r3, [r0, #88]	@ 0x58
 8018634:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018638:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801863c:	e9c0 3308 	strd	r3, r3, [r0, #32]
 8018640:	e9c0 3314 	strd	r3, r3, [r0, #80]	@ 0x50
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8018644:	2050      	movs	r0, #80	@ 0x50
 8018646:	f002 f8da 	bl	801a7fe <_Znwj>
 801864a:	4605      	mov	r5, r0
      ptrdiff_t __count = __last - __first;
 801864c:	e9d4 6207 	ldrd	r6, r2, [r4, #28]
 8018650:	1b92      	subs	r2, r2, r6
      if (__count > 0)
 8018652:	2a00      	cmp	r2, #0
 8018654:	dd08      	ble.n	8018668 <_ZN7SensorsC1Ev+0x40>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8018656:	4631      	mov	r1, r6
 8018658:	f002 fc08 	bl	801ae6c <memmove>
			- this->_M_impl._M_start);
 801865c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801865e:	4630      	mov	r0, r6
 8018660:	1b89      	subs	r1, r1, r6
 8018662:	f002 f8a7 	bl	801a7b4 <_ZdlPvj>
      }
 8018666:	e001      	b.n	801866c <_ZN7SensorsC1Ev+0x44>
	if (__p)
 8018668:	2e00      	cmp	r6, #0
 801866a:	d1f7      	bne.n	801865c <_ZN7SensorsC1Ev+0x34>
	functions[UINT8_TYPE] = NULL;
 801866c:	2300      	movs	r3, #0
}
 801866e:	4620      	mov	r0, r4
	  this->_M_impl._M_finish = __tmp + __old_size;
 8018670:	e9c4 5507 	strd	r5, r5, [r4, #28]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8018674:	3550      	adds	r5, #80	@ 0x50
	functions[UINT16_TYPE] = NULL;
 8018676:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 801867a:	6265      	str	r5, [r4, #36]	@ 0x24
	functions[UINT64_TYPE] = NULL;
 801867c:	e9c4 330c 	strd	r3, r3, [r4, #48]	@ 0x30
	functions[INT16_TYPE] = NULL;
 8018680:	e9c4 330e 	strd	r3, r3, [r4, #56]	@ 0x38
	functions[INT64_TYPE] = NULL;
 8018684:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
	functions[FLOAT_TYPE] = &float_sensor_functions;
 8018688:	e9c4 7312 	strd	r7, r3, [r4, #72]	@ 0x48
}
 801868c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801868e <_ZN7Sensors4InitEP9RegistersP10PublishersP13HardwareDelayP4LEDS>:
void Sensors::Init(Registers* registers_, Publishers* publishers_, HardwareDelay* hardware_delay_, LEDS* leds_) {
 801868e:	b510      	push	{r4, lr}
	publishers = publishers_;
 8018690:	e9c0 1217 	strd	r1, r2, [r0, #92]	@ 0x5c
	hardware_delay = hardware_delay_;
 8018694:	6643      	str	r3, [r0, #100]	@ 0x64
	SensorsSemaphore = osSemaphoreNew(1, 1, NULL);
 8018696:	2101      	movs	r1, #1
	leds = leds_;
 8018698:	9b02      	ldr	r3, [sp, #8]
void Sensors::Init(Registers* registers_, Publishers* publishers_, HardwareDelay* hardware_delay_, LEDS* leds_) {
 801869a:	4604      	mov	r4, r0
	SensorsSemaphore = osSemaphoreNew(1, 1, NULL);
 801869c:	2200      	movs	r2, #0
	leds = leds_;
 801869e:	6683      	str	r3, [r0, #104]	@ 0x68
	SensorsSemaphore = osSemaphoreNew(1, 1, NULL);
 80186a0:	4608      	mov	r0, r1
 80186a2:	f7f3 feeb 	bl	800c47c <osSemaphoreNew>
 80186a6:	6020      	str	r0, [r4, #0]
	osSemaphoreRelease(SensorsSemaphore);
 80186a8:	f7f3 ff78 	bl	800c59c <osSemaphoreRelease>
	active = false;
 80186ac:	2300      	movs	r3, #0
 80186ae:	7123      	strb	r3, [r4, #4]
	delayed_index = 0;
 80186b0:	7363      	strb	r3, [r4, #13]
	period_ms = DEFAULT_SENSORS_PERIOD;
 80186b2:	230a      	movs	r3, #10
 80186b4:	60a3      	str	r3, [r4, #8]
}
 80186b6:	bd10      	pop	{r4, pc}

080186b8 <_ZN7Sensors16SetReadingStatusEb>:
 * @brief Set the reading status of the class
 *
 * @param input status: reading status. true = read sensors
 * @return whether successful
 */
bool Sensors::SetReadingStatus(bool status) {
 80186b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80186ba:	4604      	mov	r4, r0
 80186bc:	460d      	mov	r5, r1
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 80186be:	6800      	ldr	r0, [r0, #0]
 80186c0:	f04f 31ff 	mov.w	r1, #4294967295
 80186c4:	f7f3 ff36 	bl	800c534 <osSemaphoreAcquire>
	active = status;
 80186c8:	7125      	strb	r5, [r4, #4]

	// Reset all read indexes if reading is stopped to restart a new reading from zero
	if (!status) {
 80186ca:	b91d      	cbnz	r5, 80186d4 <_ZN7Sensors16SetReadingStatusEb+0x1c>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80186cc:	e9d4 3004 	ldrd	r3, r0, [r4, #16]
		for (I2CInterface &interface : interfaces) {
 80186d0:	4298      	cmp	r0, r3
 80186d2:	d104      	bne.n	80186de <_ZN7Sensors16SetReadingStatusEb+0x26>
				}
			}
		}
	}

	osSemaphoreRelease(SensorsSemaphore);
 80186d4:	6820      	ldr	r0, [r4, #0]
 80186d6:	f7f3 ff61 	bl	800c59c <osSemaphoreRelease>
	return true;
}
 80186da:	2001      	movs	r0, #1
 80186dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			interface.read_index = 0;
 80186de:	e9d3 2616 	ldrd	r2, r6, [r3, #88]	@ 0x58
 80186e2:	f883 5055 	strb.w	r5, [r3, #85]	@ 0x55
			for (SensorGroup &sensor_group : interface.sensor_groups) {
 80186e6:	4296      	cmp	r6, r2
 80186e8:	d101      	bne.n	80186ee <_ZN7Sensors16SetReadingStatusEb+0x36>
      operator++() _GLIBCXX_NOEXCEPT
 80186ea:	337c      	adds	r3, #124	@ 0x7c
	return *this;
 80186ec:	e7f0      	b.n	80186d0 <_ZN7Sensors16SetReadingStatusEb+0x18>
				sensor_group.read_index = 0;
 80186ee:	e9d2 1703 	ldrd	r1, r7, [r2, #12]
 80186f2:	7215      	strb	r5, [r2, #8]
				for (Sensor &sensor : sensor_group.sensors) {
 80186f4:	428f      	cmp	r7, r1
 80186f6:	d101      	bne.n	80186fc <_ZN7Sensors16SetReadingStatusEb+0x44>
      operator++() _GLIBCXX_NOEXCEPT
 80186f8:	3218      	adds	r2, #24
	return *this;
 80186fa:	e7f4      	b.n	80186e6 <_ZN7Sensors16SetReadingStatusEb+0x2e>
					sensor.read_index = 0;
 80186fc:	740d      	strb	r5, [r1, #16]
      operator++() _GLIBCXX_NOEXCEPT
 80186fe:	3128      	adds	r1, #40	@ 0x28
	return *this;
 8018700:	e7f8      	b.n	80186f4 <_ZN7Sensors16SetReadingStatusEb+0x3c>

08018702 <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t>:
			return self->SetReadingStatus((bool) *input);
 8018702:	7811      	ldrb	r1, [r2, #0]
 8018704:	3900      	subs	r1, #0
 8018706:	bf18      	it	ne
 8018708:	2101      	movne	r1, #1
 801870a:	f7ff bfd5 	b.w	80186b8 <_ZN7Sensors16SetReadingStatusEb>

0801870e <_ZN7Sensors25DeactivateAllSensorGroupsEv>:
/**
 * @brief Deactivate all sensor groups on all interfaces
 *
 * @return whether successful
 */
bool Sensors::DeactivateAllSensorGroups(void) {
 801870e:	b538      	push	{r3, r4, r5, lr}
 8018710:	4604      	mov	r4, r0
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 8018712:	f04f 31ff 	mov.w	r1, #4294967295
 8018716:	6800      	ldr	r0, [r0, #0]
 8018718:	f7f3 ff0c 	bl	800c534 <osSemaphoreAcquire>
	for (I2CInterface &interface : interfaces) {
		for (SensorGroup &sensor_group : interface.sensor_groups) {
			sensor_group.active = false;
 801871c:	2000      	movs	r0, #0
 801871e:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
	for (I2CInterface &interface : interfaces) {
 8018722:	4299      	cmp	r1, r3
 8018724:	d104      	bne.n	8018730 <_ZN7Sensors25DeactivateAllSensorGroupsEv+0x22>
		}
	}
	osSemaphoreRelease(SensorsSemaphore);
 8018726:	6820      	ldr	r0, [r4, #0]
 8018728:	f7f3 ff38 	bl	800c59c <osSemaphoreRelease>
	return true;
}
 801872c:	2001      	movs	r0, #1
 801872e:	bd38      	pop	{r3, r4, r5, pc}
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8018730:	e9d3 2516 	ldrd	r2, r5, [r3, #88]	@ 0x58
		for (SensorGroup &sensor_group : interface.sensor_groups) {
 8018734:	4295      	cmp	r5, r2
 8018736:	d101      	bne.n	801873c <_ZN7Sensors25DeactivateAllSensorGroupsEv+0x2e>
      operator++() _GLIBCXX_NOEXCEPT
 8018738:	337c      	adds	r3, #124	@ 0x7c
	return *this;
 801873a:	e7f2      	b.n	8018722 <_ZN7Sensors25DeactivateAllSensorGroupsEv+0x14>
			sensor_group.active = false;
 801873c:	f802 0b18 	strb.w	r0, [r2], #24
 8018740:	e7f8      	b.n	8018734 <_ZN7Sensors25DeactivateAllSensorGroupsEv+0x26>

08018742 <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE2_4_FUNES0_tS1_t>:
			return self->DeactivateAllSensorGroups();
 8018742:	f7ff bfe4 	b.w	801870e <_ZN7Sensors25DeactivateAllSensorGroupsEv>

08018746 <_ZN7Sensors13DetectSensorsEmm>:
 * @brief Force a detection of I2C sensors to update presence flag. Can be useful if a sensor if plugged after creation
 *
 * @param input trials: number of trials used to detect the sensor
 * @param input timeout: maximum time in ms left to detect a sensor
 */
void Sensors::DetectSensors(uint32_t trials, uint32_t timeout) {
 8018746:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801874a:	4605      	mov	r5, r0
 801874c:	9101      	str	r1, [sp, #4]
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801874e:	6800      	ldr	r0, [r0, #0]
 8018750:	f04f 31ff 	mov.w	r1, #4294967295
void Sensors::DetectSensors(uint32_t trials, uint32_t timeout) {
 8018754:	4690      	mov	r8, r2
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 8018756:	f7f3 feed 	bl	800c534 <osSemaphoreAcquire>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801875a:	e9d5 4904 	ldrd	r4, r9, [r5, #16]
	HAL_StatusTypeDef status;
	for (I2CInterface &interface : interfaces) {
 801875e:	45a1      	cmp	r9, r4
 8018760:	d105      	bne.n	801876e <_ZN7Sensors13DetectSensorsEmm+0x28>
					// If not I2C, force presence
					sensor.present = true;
			}
		}
	}
	osSemaphoreRelease(SensorsSemaphore);
 8018762:	6828      	ldr	r0, [r5, #0]
}
 8018764:	b003      	add	sp, #12
 8018766:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	osSemaphoreRelease(SensorsSemaphore);
 801876a:	f7f3 bf17 	b.w	800c59c <osSemaphoreRelease>
 801876e:	e9d4 6a16 	ldrd	r6, sl, [r4, #88]	@ 0x58
		for (SensorGroup &sensor_group : interface.sensor_groups) {
 8018772:	45b2      	cmp	sl, r6
 8018774:	d101      	bne.n	801877a <_ZN7Sensors13DetectSensorsEmm+0x34>
      operator++() _GLIBCXX_NOEXCEPT
 8018776:	347c      	adds	r4, #124	@ 0x7c
	return *this;
 8018778:	e7f1      	b.n	801875e <_ZN7Sensors13DetectSensorsEmm+0x18>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801877a:	e9d6 7b03 	ldrd	r7, fp, [r6, #12]
			for (Sensor &sensor : sensor_group.sensors) {
 801877e:	45bb      	cmp	fp, r7
 8018780:	d101      	bne.n	8018786 <_ZN7Sensors13DetectSensorsEmm+0x40>
      operator++() _GLIBCXX_NOEXCEPT
 8018782:	3618      	adds	r6, #24
	return *this;
 8018784:	e7f5      	b.n	8018772 <_ZN7Sensors13DetectSensorsEmm+0x2c>
				if (interface.ID != INTERNAL) {
 8018786:	7823      	ldrb	r3, [r4, #0]
 8018788:	2b0a      	cmp	r3, #10
 801878a:	d00b      	beq.n	80187a4 <_ZN7Sensors13DetectSensorsEmm+0x5e>
					status = HAL_I2C_IsDeviceReady(interface.interface, sensor.address, trials, timeout);
 801878c:	4643      	mov	r3, r8
 801878e:	9a01      	ldr	r2, [sp, #4]
 8018790:	88f9      	ldrh	r1, [r7, #6]
 8018792:	68e0      	ldr	r0, [r4, #12]
 8018794:	f7ee f9bc 	bl	8006b10 <HAL_I2C_IsDeviceReady>
					sensor.present = (status == HAL_OK);
 8018798:	fab0 f080 	clz	r0, r0
 801879c:	0940      	lsrs	r0, r0, #5
 801879e:	70b8      	strb	r0, [r7, #2]
      operator++() _GLIBCXX_NOEXCEPT
 80187a0:	3728      	adds	r7, #40	@ 0x28
	return *this;
 80187a2:	e7ec      	b.n	801877e <_ZN7Sensors13DetectSensorsEmm+0x38>
 80187a4:	2001      	movs	r0, #1
 80187a6:	e7fa      	b.n	801879e <_ZN7Sensors13DetectSensorsEmm+0x58>

080187a8 <_ZZN7Sensors12AddRegistersEvENUlPvtPmtE8_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 80187a8:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint32_t* input, uint16_t length) -> bool {
 80187aa:	b508      	push	{r3, lr}
			if (length != 2) return false;
 80187ac:	d105      	bne.n	80187ba <_ZZN7Sensors12AddRegistersEvENUlPvtPmtE8_4_FUNES0_tS1_t+0x12>
			self->DetectSensors(input[0], input[1]);
 80187ae:	e9d2 1200 	ldrd	r1, r2, [r2]
 80187b2:	f7ff ffc8 	bl	8018746 <_ZN7Sensors13DetectSensorsEmm>
 80187b6:	2001      	movs	r0, #1
		}
 80187b8:	bd08      	pop	{r3, pc}
			if (length != 2) return false;
 80187ba:	2000      	movs	r0, #0
 80187bc:	e7fc      	b.n	80187b8 <_ZZN7Sensors12AddRegistersEvENUlPvtPmtE8_4_FUNES0_tS1_t+0x10>

080187be <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb>:
 * @param input group_ID: the group ID to find
 * @param output interface_: interface linked to the sensor group
 * @param output success: whether successful
 * @return the sensor group pointer
 */
SensorGroup* Sensors::FindSensorGroupPath(uint8_t group_ID, I2CInterface** interface_, bool* success) {
 80187be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80187c0:	e9d0 4604 	ldrd	r4, r6, [r0, #16]
	for (I2CInterface &interface : interfaces) {
 80187c4:	42a6      	cmp	r6, r4
 80187c6:	d102      	bne.n	80187ce <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb+0x10>
 80187c8:	2200      	movs	r2, #0
				return sensor_group_pointer;
			}
		}
	}
	*success = false;
	return NULL;
 80187ca:	4610      	mov	r0, r2
 80187cc:	e00f      	b.n	80187ee <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb+0x30>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80187ce:	e9d4 5716 	ldrd	r5, r7, [r4, #88]	@ 0x58
		for (SensorGroup &sensor_group : interface.sensor_groups) {
 80187d2:	42bd      	cmp	r5, r7
 80187d4:	4628      	mov	r0, r5
 80187d6:	d101      	bne.n	80187dc <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb+0x1e>
      operator++() _GLIBCXX_NOEXCEPT
 80187d8:	347c      	adds	r4, #124	@ 0x7c
	return *this;
 80187da:	e7f3      	b.n	80187c4 <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb+0x6>
			if (sensor_group.ID == group_ID) {
 80187dc:	f890 c002 	ldrb.w	ip, [r0, #2]
 80187e0:	f100 0518 	add.w	r5, r0, #24
 80187e4:	458c      	cmp	ip, r1
 80187e6:	d1f4      	bne.n	80187d2 <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb+0x14>
				if (interface_ != NULL) *interface_ = &interface;
 80187e8:	b102      	cbz	r2, 80187ec <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb+0x2e>
 80187ea:	6014      	str	r4, [r2, #0]
SensorGroup* Sensors::FindSensorGroupPath(uint8_t group_ID, I2CInterface** interface_, bool* success) {
 80187ec:	2201      	movs	r2, #1
				*success = true;
 80187ee:	701a      	strb	r2, [r3, #0]
}
 80187f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080187f2 <_ZN7Sensors15FindSensorGroupEhPb>:
SensorGroup* Sensors::FindSensorGroup(uint8_t group_ID, bool* success) {
 80187f2:	4613      	mov	r3, r2
	return FindSensorGroupPath(group_ID, NULL, success);
 80187f4:	2200      	movs	r2, #0
 80187f6:	f7ff bfe2 	b.w	80187be <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb>

080187fa <_ZN7Sensors23SetSensorGroupPrescalerEht>:
bool Sensors::SetSensorGroupPrescaler(uint8_t group_ID, uint16_t prescaler) {
 80187fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80187fc:	4616      	mov	r6, r2
	SensorGroup* sensor_group = FindSensorGroup(group_ID, &success);
 80187fe:	f10d 0207 	add.w	r2, sp, #7
bool Sensors::SetSensorGroupPrescaler(uint8_t group_ID, uint16_t prescaler) {
 8018802:	4604      	mov	r4, r0
	SensorGroup* sensor_group = FindSensorGroup(group_ID, &success);
 8018804:	f7ff fff5 	bl	80187f2 <_ZN7Sensors15FindSensorGroupEhPb>
	if (!success) return false;
 8018808:	f89d 7007 	ldrb.w	r7, [sp, #7]
	SensorGroup* sensor_group = FindSensorGroup(group_ID, &success);
 801880c:	4605      	mov	r5, r0
	if (!success) return false;
 801880e:	b147      	cbz	r7, 8018822 <_ZN7Sensors23SetSensorGroupPrescalerEht+0x28>
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 8018810:	f04f 31ff 	mov.w	r1, #4294967295
 8018814:	6820      	ldr	r0, [r4, #0]
 8018816:	f7f3 fe8d 	bl	800c534 <osSemaphoreAcquire>
	osSemaphoreRelease(SensorsSemaphore);
 801881a:	6820      	ldr	r0, [r4, #0]
	sensor_group->prescaler = prescaler;
 801881c:	80ae      	strh	r6, [r5, #4]
	osSemaphoreRelease(SensorsSemaphore);
 801881e:	f7f3 febd 	bl	800c59c <osSemaphoreRelease>
}
 8018822:	4638      	mov	r0, r7
 8018824:	b003      	add	sp, #12
 8018826:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018828 <_ZZN7Sensors12AddRegistersEvENUlPvtPttE7_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 8018828:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint16_t* input, uint16_t length) -> bool {
 801882a:	4611      	mov	r1, r2
			if (length != 2) return false;
 801882c:	d103      	bne.n	8018836 <_ZZN7Sensors12AddRegistersEvENUlPvtPttE7_4_FUNES0_tS1_t+0xe>
			return self->SetSensorGroupPrescaler((uint8_t) input[0], input[1]);
 801882e:	8852      	ldrh	r2, [r2, #2]
 8018830:	7809      	ldrb	r1, [r1, #0]
 8018832:	f7ff bfe2 	b.w	80187fa <_ZN7Sensors23SetSensorGroupPrescalerEht>
		}
 8018836:	2000      	movs	r0, #0
 8018838:	4770      	bx	lr

0801883a <_ZN7Sensors20SetSensorGroupStatusEhb>:
bool Sensors::SetSensorGroupStatus(uint8_t group_ID, bool status) {
 801883a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801883c:	4614      	mov	r4, r2
	SensorGroup* sensor_group = FindSensorGroup(group_ID, &success);
 801883e:	f10d 0207 	add.w	r2, sp, #7
bool Sensors::SetSensorGroupStatus(uint8_t group_ID, bool status) {
 8018842:	4606      	mov	r6, r0
	SensorGroup* sensor_group = FindSensorGroup(group_ID, &success);
 8018844:	f7ff ffd5 	bl	80187f2 <_ZN7Sensors15FindSensorGroupEhPb>
	if (!success) return false;
 8018848:	f89d 7007 	ldrb.w	r7, [sp, #7]
	SensorGroup* sensor_group = FindSensorGroup(group_ID, &success);
 801884c:	4605      	mov	r5, r0
	if (!success) return false;
 801884e:	b14f      	cbz	r7, 8018864 <_ZN7Sensors20SetSensorGroupStatusEhb+0x2a>
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 8018850:	f04f 31ff 	mov.w	r1, #4294967295
 8018854:	6830      	ldr	r0, [r6, #0]
 8018856:	f7f3 fe6d 	bl	800c534 <osSemaphoreAcquire>
	sensor_group->active = status;
 801885a:	702c      	strb	r4, [r5, #0]
	if (!status) {
 801885c:	b12c      	cbz	r4, 801886a <_ZN7Sensors20SetSensorGroupStatusEhb+0x30>
	osSemaphoreRelease(SensorsSemaphore);
 801885e:	6830      	ldr	r0, [r6, #0]
 8018860:	f7f3 fe9c 	bl	800c59c <osSemaphoreRelease>
}
 8018864:	4638      	mov	r0, r7
 8018866:	b003      	add	sp, #12
 8018868:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sensor_group->read_index = 0;
 801886a:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 801886e:	722c      	strb	r4, [r5, #8]
		for (Sensor &sensor : sensor_group->sensors) {
 8018870:	429a      	cmp	r2, r3
 8018872:	d0f4      	beq.n	801885e <_ZN7Sensors20SetSensorGroupStatusEhb+0x24>
			sensor.read_index = 0;
 8018874:	741c      	strb	r4, [r3, #16]
      operator++() _GLIBCXX_NOEXCEPT
 8018876:	3328      	adds	r3, #40	@ 0x28
	return *this;
 8018878:	e7fa      	b.n	8018870 <_ZN7Sensors20SetSensorGroupStatusEhb+0x36>

0801887a <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE1_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 801887a:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 801887c:	4611      	mov	r1, r2
			if (length != 2) return false;
 801887e:	d106      	bne.n	801888e <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE1_4_FUNES0_tS1_t+0x14>
			return self->SetSensorGroupStatus(input[0], (bool) input[1]);
 8018880:	7852      	ldrb	r2, [r2, #1]
 8018882:	7809      	ldrb	r1, [r1, #0]
 8018884:	3a00      	subs	r2, #0
 8018886:	bf18      	it	ne
 8018888:	2201      	movne	r2, #1
 801888a:	f7ff bfd6 	b.w	801883a <_ZN7Sensors20SetSensorGroupStatusEhb>
		}
 801888e:	2000      	movs	r0, #0
 8018890:	4770      	bx	lr

08018892 <_ZN7Sensors20DeactivateAllSensorsEh>:
bool Sensors::DeactivateAllSensors(uint8_t group_ID) {
 8018892:	b573      	push	{r0, r1, r4, r5, r6, lr}
	SensorGroup* sensor_group = FindSensorGroupPath(group_ID, &interface, &success);
 8018894:	f10d 0303 	add.w	r3, sp, #3
 8018898:	aa01      	add	r2, sp, #4
bool Sensors::DeactivateAllSensors(uint8_t group_ID) {
 801889a:	4604      	mov	r4, r0
	SensorGroup* sensor_group = FindSensorGroupPath(group_ID, &interface, &success);
 801889c:	f7ff ff8f 	bl	80187be <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb>
	if (!success) return false;
 80188a0:	f89d 6003 	ldrb.w	r6, [sp, #3]
	SensorGroup* sensor_group = FindSensorGroupPath(group_ID, &interface, &success);
 80188a4:	4605      	mov	r5, r0
	if (!success) return false;
 80188a6:	b166      	cbz	r6, 80188c2 <_ZN7Sensors20DeactivateAllSensorsEh+0x30>
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 80188a8:	f04f 31ff 	mov.w	r1, #4294967295
 80188ac:	6820      	ldr	r0, [r4, #0]
 80188ae:	f7f3 fe41 	bl	800c534 <osSemaphoreAcquire>
		sensor.active = false;
 80188b2:	2100      	movs	r1, #0
 80188b4:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
	for (Sensor &sensor : sensor_group->sensors) {
 80188b8:	429a      	cmp	r2, r3
 80188ba:	d105      	bne.n	80188c8 <_ZN7Sensors20DeactivateAllSensorsEh+0x36>
	osSemaphoreRelease(SensorsSemaphore);
 80188bc:	6820      	ldr	r0, [r4, #0]
 80188be:	f7f3 fe6d 	bl	800c59c <osSemaphoreRelease>
}
 80188c2:	4630      	mov	r0, r6
 80188c4:	b002      	add	sp, #8
 80188c6:	bd70      	pop	{r4, r5, r6, pc}
		sensor.active = false;
 80188c8:	f803 1b28 	strb.w	r1, [r3], #40
 80188cc:	e7f4      	b.n	80188b8 <_ZN7Sensors20DeactivateAllSensorsEh+0x26>

080188ce <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE4_4_FUNES0_tS1_t>:
			return self->DeactivateAllSensors(*input);
 80188ce:	7811      	ldrb	r1, [r2, #0]
 80188d0:	f7ff bfdf 	b.w	8018892 <_ZN7Sensors20DeactivateAllSensorsEh>

080188d4 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb>:
 * @param output interface_: interface linked to the sensor
 * @param output sensor_group_: the sensor group linked to the sensor
 * @param output success: whether successful
 * @return the sensor pointer
 */
Sensor* Sensors::FindSensorPath(uint8_t sensor_ID, I2CInterface** interface_, SensorGroup** sensor_group_, bool* success) {
 80188d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80188d8:	e9d0 4704 	ldrd	r4, r7, [r0, #16]
	for (I2CInterface &interface : interfaces) {
 80188dc:	42a7      	cmp	r7, r4
 80188de:	d102      	bne.n	80188e6 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x12>
 80188e0:	2300      	movs	r3, #0
				}
			}
		}
	}
	*success = false;
	return NULL;
 80188e2:	4618      	mov	r0, r3
 80188e4:	e017      	b.n	8018916 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x42>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80188e6:	e9d4 5c16 	ldrd	r5, ip, [r4, #88]	@ 0x58
		for (SensorGroup &sensor_group : interface.sensor_groups) {
 80188ea:	4565      	cmp	r5, ip
 80188ec:	d101      	bne.n	80188f2 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x1e>
      operator++() _GLIBCXX_NOEXCEPT
 80188ee:	347c      	adds	r4, #124	@ 0x7c
	return *this;
 80188f0:	e7f4      	b.n	80188dc <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x8>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80188f2:	e9d5 6e03 	ldrd	r6, lr, [r5, #12]
			for (Sensor &sensor : sensor_group.sensors) {
 80188f6:	45b6      	cmp	lr, r6
 80188f8:	4630      	mov	r0, r6
 80188fa:	d101      	bne.n	8018900 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x2c>
      operator++() _GLIBCXX_NOEXCEPT
 80188fc:	3518      	adds	r5, #24
	return *this;
 80188fe:	e7f4      	b.n	80188ea <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x16>
				if (sensor.ID == sensor_ID) {
 8018900:	f890 8004 	ldrb.w	r8, [r0, #4]
 8018904:	f100 0628 	add.w	r6, r0, #40	@ 0x28
 8018908:	4588      	cmp	r8, r1
 801890a:	d1f4      	bne.n	80188f6 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x22>
					if (interface_ != NULL) *interface_ = &interface;
 801890c:	b102      	cbz	r2, 8018910 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x3c>
 801890e:	6014      	str	r4, [r2, #0]
					if (sensor_group_ != NULL) *sensor_group_ = &sensor_group;
 8018910:	b103      	cbz	r3, 8018914 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x40>
 8018912:	601d      	str	r5, [r3, #0]
Sensor* Sensors::FindSensorPath(uint8_t sensor_ID, I2CInterface** interface_, SensorGroup** sensor_group_, bool* success) {
 8018914:	2301      	movs	r3, #1
					*success = true;
 8018916:	9a06      	ldr	r2, [sp, #24]
 8018918:	7013      	strb	r3, [r2, #0]
}
 801891a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801891e <_ZN7Sensors10FindSensorEhPb>:
	return FindSensorPath(sensor_ID, NULL, NULL, success);
 801891e:	2300      	movs	r3, #0
Sensor* Sensors::FindSensor(uint8_t sensor_ID, bool* success) {
 8018920:	b507      	push	{r0, r1, r2, lr}
	return FindSensorPath(sensor_ID, NULL, NULL, success);
 8018922:	9200      	str	r2, [sp, #0]
 8018924:	461a      	mov	r2, r3
 8018926:	f7ff ffd5 	bl	80188d4 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb>
}
 801892a:	b003      	add	sp, #12
 801892c:	f85d fb04 	ldr.w	pc, [sp], #4

08018930 <_ZN7Sensors15SetSensorStatusEhb>:
bool Sensors::SetSensorStatus(uint8_t sensor_ID, bool status) {
 8018930:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018932:	4616      	mov	r6, r2
	Sensor* sensor = FindSensor(sensor_ID, &success);
 8018934:	f10d 0207 	add.w	r2, sp, #7
bool Sensors::SetSensorStatus(uint8_t sensor_ID, bool status) {
 8018938:	4604      	mov	r4, r0
	Sensor* sensor = FindSensor(sensor_ID, &success);
 801893a:	f7ff fff0 	bl	801891e <_ZN7Sensors10FindSensorEhPb>
	if (!success) return false;
 801893e:	f89d 7007 	ldrb.w	r7, [sp, #7]
	Sensor* sensor = FindSensor(sensor_ID, &success);
 8018942:	4605      	mov	r5, r0
	if (!success) return false;
 8018944:	b147      	cbz	r7, 8018958 <_ZN7Sensors15SetSensorStatusEhb+0x28>
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 8018946:	f04f 31ff 	mov.w	r1, #4294967295
 801894a:	6820      	ldr	r0, [r4, #0]
 801894c:	f7f3 fdf2 	bl	800c534 <osSemaphoreAcquire>
	osSemaphoreRelease(SensorsSemaphore);
 8018950:	6820      	ldr	r0, [r4, #0]
	sensor->active = status;
 8018952:	702e      	strb	r6, [r5, #0]
	osSemaphoreRelease(SensorsSemaphore);
 8018954:	f7f3 fe22 	bl	800c59c <osSemaphoreRelease>
}
 8018958:	4638      	mov	r0, r7
 801895a:	b003      	add	sp, #12
 801895c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801895e <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 801895e:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8018960:	4611      	mov	r1, r2
			if (length != 2) return false;
 8018962:	d106      	bne.n	8018972 <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x14>
			return self->SetSensorStatus(input[0], (bool) input[1]);
 8018964:	7852      	ldrb	r2, [r2, #1]
 8018966:	7809      	ldrb	r1, [r1, #0]
 8018968:	3a00      	subs	r2, #0
 801896a:	bf18      	it	ne
 801896c:	2201      	movne	r2, #1
 801896e:	f7ff bfdf 	b.w	8018930 <_ZN7Sensors15SetSensorStatusEhb>
		}
 8018972:	2000      	movs	r0, #0
 8018974:	4770      	bx	lr

08018976 <_ZN7Sensors23DeactivateAllSensorDataEh>:
bool Sensors::DeactivateAllSensorData(uint8_t sensor_ID) {
 8018976:	b573      	push	{r0, r1, r4, r5, r6, lr}
	Sensor* sensor = FindSensor(sensor_ID, &success);
 8018978:	f10d 0207 	add.w	r2, sp, #7
bool Sensors::DeactivateAllSensorData(uint8_t sensor_ID) {
 801897c:	4604      	mov	r4, r0
	Sensor* sensor = FindSensor(sensor_ID, &success);
 801897e:	f7ff ffce 	bl	801891e <_ZN7Sensors10FindSensorEhPb>
	if (!success) return false;
 8018982:	f89d 6007 	ldrb.w	r6, [sp, #7]
	Sensor* sensor = FindSensor(sensor_ID, &success);
 8018986:	4605      	mov	r5, r0
	if (!success) return false;
 8018988:	b166      	cbz	r6, 80189a4 <_ZN7Sensors23DeactivateAllSensorDataEh+0x2e>
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801898a:	f04f 31ff 	mov.w	r1, #4294967295
 801898e:	6820      	ldr	r0, [r4, #0]
 8018990:	f7f3 fdd0 	bl	800c534 <osSemaphoreAcquire>
		data.active = false;
 8018994:	2100      	movs	r1, #0
 8018996:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
	for (SensorData &data : sensor->data) {
 801899a:	429a      	cmp	r2, r3
 801899c:	d105      	bne.n	80189aa <_ZN7Sensors23DeactivateAllSensorDataEh+0x34>
	osSemaphoreRelease(SensorsSemaphore);
 801899e:	6820      	ldr	r0, [r4, #0]
 80189a0:	f7f3 fdfc 	bl	800c59c <osSemaphoreRelease>
}
 80189a4:	4630      	mov	r0, r6
 80189a6:	b002      	add	sp, #8
 80189a8:	bd70      	pop	{r4, r5, r6, pc}
		data.active = false;
 80189aa:	f803 1b18 	strb.w	r1, [r3], #24
 80189ae:	e7f4      	b.n	801899a <_ZN7Sensors23DeactivateAllSensorDataEh+0x24>

080189b0 <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE6_4_FUNES0_tS1_t>:
			return self->DeactivateAllSensorData(*input);
 80189b0:	7811      	ldrb	r1, [r2, #0]
 80189b2:	f7ff bfe0 	b.w	8018976 <_ZN7Sensors23DeactivateAllSensorDataEh>

080189b6 <_ZN7Sensors14FindSensorDataEhtPb>:
SensorData* Sensors::FindSensorData(uint8_t sensor_ID, uint16_t sensor_register, bool* success) {
 80189b6:	b538      	push	{r3, r4, r5, lr}
 80189b8:	461c      	mov	r4, r3
 80189ba:	4615      	mov	r5, r2
	Sensor* sensor = FindSensor(sensor_ID, success);
 80189bc:	461a      	mov	r2, r3
 80189be:	f7ff ffae 	bl	801891e <_ZN7Sensors10FindSensorEhPb>
	if (not *success) return NULL;
 80189c2:	7823      	ldrb	r3, [r4, #0]
 80189c4:	b133      	cbz	r3, 80189d4 <_ZN7Sensors14FindSensorDataEhtPb+0x1e>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80189c6:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
	for (SensorData &data : sensor->data) {
 80189ca:	429a      	cmp	r2, r3
 80189cc:	4618      	mov	r0, r3
 80189ce:	d103      	bne.n	80189d8 <_ZN7Sensors14FindSensorDataEhtPb+0x22>
	*success = false;
 80189d0:	2300      	movs	r3, #0
 80189d2:	7023      	strb	r3, [r4, #0]
	if (not *success) return NULL;
 80189d4:	2000      	movs	r0, #0
 80189d6:	e003      	b.n	80189e0 <_ZN7Sensors14FindSensorDataEhtPb+0x2a>
		if (data.register_address == sensor_register) {
 80189d8:	8899      	ldrh	r1, [r3, #4]
 80189da:	3318      	adds	r3, #24
 80189dc:	42a9      	cmp	r1, r5
 80189de:	d1f4      	bne.n	80189ca <_ZN7Sensors14FindSensorDataEhtPb+0x14>
}
 80189e0:	bd38      	pop	{r3, r4, r5, pc}

080189e2 <_ZN7Sensors19SetSensorDataStatusEhtb>:
bool Sensors::SetSensorDataStatus(uint8_t sensor_ID, uint16_t sensor_register, bool status) {
 80189e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80189e4:	461e      	mov	r6, r3
	SensorData* sensor_data = FindSensorData(sensor_ID, sensor_register, &success);
 80189e6:	f10d 0307 	add.w	r3, sp, #7
bool Sensors::SetSensorDataStatus(uint8_t sensor_ID, uint16_t sensor_register, bool status) {
 80189ea:	4604      	mov	r4, r0
	SensorData* sensor_data = FindSensorData(sensor_ID, sensor_register, &success);
 80189ec:	f7ff ffe3 	bl	80189b6 <_ZN7Sensors14FindSensorDataEhtPb>
	if (!success) return false;
 80189f0:	f89d 7007 	ldrb.w	r7, [sp, #7]
	SensorData* sensor_data = FindSensorData(sensor_ID, sensor_register, &success);
 80189f4:	4605      	mov	r5, r0
	if (!success) return false;
 80189f6:	b147      	cbz	r7, 8018a0a <_ZN7Sensors19SetSensorDataStatusEhtb+0x28>
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 80189f8:	f04f 31ff 	mov.w	r1, #4294967295
 80189fc:	6820      	ldr	r0, [r4, #0]
 80189fe:	f7f3 fd99 	bl	800c534 <osSemaphoreAcquire>
	osSemaphoreRelease(SensorsSemaphore);
 8018a02:	6820      	ldr	r0, [r4, #0]
	sensor_data->active = status;
 8018a04:	702e      	strb	r6, [r5, #0]
	osSemaphoreRelease(SensorsSemaphore);
 8018a06:	f7f3 fdc9 	bl	800c59c <osSemaphoreRelease>
}
 8018a0a:	4638      	mov	r0, r7
 8018a0c:	b003      	add	sp, #12
 8018a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018a10 <_ZZN7Sensors12AddRegistersEvENUlPvtPttE5_4_FUNES0_tS1_t>:
			if (length != 3) return false;
 8018a10:	2b03      	cmp	r3, #3
		[](void* context, uint16_t register_id, uint16_t* input, uint16_t length) -> bool {
 8018a12:	4611      	mov	r1, r2
			if (length != 3) return false;
 8018a14:	d107      	bne.n	8018a26 <_ZZN7Sensors12AddRegistersEvENUlPvtPttE5_4_FUNES0_tS1_t+0x16>
			return self->SetSensorDataStatus((uint8_t) input[0], input[1], (bool) input[2]);
 8018a16:	8893      	ldrh	r3, [r2, #4]
 8018a18:	7809      	ldrb	r1, [r1, #0]
 8018a1a:	3b00      	subs	r3, #0
 8018a1c:	8852      	ldrh	r2, [r2, #2]
 8018a1e:	bf18      	it	ne
 8018a20:	2301      	movne	r3, #1
 8018a22:	f7ff bfde 	b.w	80189e2 <_ZN7Sensors19SetSensorDataStatusEhtb>
		}
 8018a26:	2000      	movs	r0, #0
 8018a28:	4770      	bx	lr

08018a2a <_ZN9Registers11AddRegisterItEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 8018a2a:	b570      	push	{r4, r5, r6, lr}
 8018a2c:	4604      	mov	r4, r0
 8018a2e:	b086      	sub	sp, #24
 8018a30:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8018a32:	6800      	ldr	r0, [r0, #0]
 8018a34:	f04f 31ff 	mov.w	r1, #4294967295
 8018a38:	f7f3 fd7c 	bl	800c534 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 8018a3c:	f10d 0207 	add.w	r2, sp, #7
 8018a40:	4631      	mov	r1, r6
 8018a42:	4620      	mov	r0, r4
 8018a44:	f7ff fb83 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 8018a48:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8018a4c:	b125      	cbz	r5, 8018a58 <_ZN9Registers11AddRegisterItEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 8018a4e:	6820      	ldr	r0, [r4, #0]
 8018a50:	f7f3 fda4 	bl	800c59c <osSemaphoreRelease>
}
 8018a54:	b006      	add	sp, #24
 8018a56:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8018a58:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 8018a5c:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8018a60:	f7ff fd1e 	bl	80184a0 <_ZN9Registers9GetTypeIDItEEhPb.isra.0>
	configuration_.register_info = register_;
 8018a64:	2301      	movs	r3, #1
 8018a66:	f8ad 600a 	strh.w	r6, [sp, #10]
 8018a6a:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 8018a6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 8018a72:	f88d 000c 	strb.w	r0, [sp, #12]
 8018a76:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 8018a7a:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 8018a7e:	2b00      	cmp	r3, #0
 8018a80:	d0e5      	beq.n	8018a4e <_ZN9Registers11AddRegisterItEEbt.isra.0+0x24>
		registers.push_back(configuration_);
 8018a82:	a902      	add	r1, sp, #8
 8018a84:	1d20      	adds	r0, r4, #4
 8018a86:	f7fc f8f2 	bl	8014c6e <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 8018a8a:	e7e0      	b.n	8018a4e <_ZN9Registers11AddRegisterItEEbt.isra.0+0x24>

08018a8c <_ZN9Registers11AddRegisterIhEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 8018a8c:	b570      	push	{r4, r5, r6, lr}
 8018a8e:	4604      	mov	r4, r0
 8018a90:	b086      	sub	sp, #24
 8018a92:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8018a94:	6800      	ldr	r0, [r0, #0]
 8018a96:	f04f 31ff 	mov.w	r1, #4294967295
 8018a9a:	f7f3 fd4b 	bl	800c534 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 8018a9e:	f10d 0207 	add.w	r2, sp, #7
 8018aa2:	4631      	mov	r1, r6
 8018aa4:	4620      	mov	r0, r4
 8018aa6:	f7ff fb52 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 8018aaa:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8018aae:	b125      	cbz	r5, 8018aba <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 8018ab0:	6820      	ldr	r0, [r4, #0]
 8018ab2:	f7f3 fd73 	bl	800c59c <osSemaphoreRelease>
}
 8018ab6:	b006      	add	sp, #24
 8018ab8:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8018aba:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 8018abe:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8018ac2:	f7ff fd4f 	bl	8018564 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	configuration_.register_info = register_;
 8018ac6:	2301      	movs	r3, #1
 8018ac8:	f8ad 600a 	strh.w	r6, [sp, #10]
 8018acc:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 8018ad0:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 8018ad4:	f88d 000c 	strb.w	r0, [sp, #12]
 8018ad8:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 8018adc:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 8018ae0:	2b00      	cmp	r3, #0
 8018ae2:	d0e5      	beq.n	8018ab0 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
		registers.push_back(configuration_);
 8018ae4:	a902      	add	r1, sp, #8
 8018ae6:	1d20      	adds	r0, r4, #4
 8018ae8:	f7fc f8c1 	bl	8014c6e <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 8018aec:	e7e0      	b.n	8018ab0 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>

08018aee <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8018aee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018af0:	460c      	mov	r4, r1
 8018af2:	b087      	sub	sp, #28
 8018af4:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8018af6:	f04f 31ff 	mov.w	r1, #4294967295
 8018afa:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8018afc:	461e      	mov	r6, r3
 8018afe:	4617      	mov	r7, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8018b00:	f7f3 fd18 	bl	800c534 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8018b04:	4621      	mov	r1, r4
 8018b06:	f10d 0207 	add.w	r2, sp, #7
 8018b0a:	4628      	mov	r0, r5
 8018b0c:	f7ff fb1f 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8018b10:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8018b14:	4604      	mov	r4, r0
	if (!success) {
 8018b16:	b923      	cbnz	r3, 8018b22 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x34>
	osSemaphoreRelease(RegistersSemaphore);
 8018b18:	6828      	ldr	r0, [r5, #0]
 8018b1a:	f7f3 fd3f 	bl	800c59c <osSemaphoreRelease>
}
 8018b1e:	b007      	add	sp, #28
 8018b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8018b22:	f10d 0007 	add.w	r0, sp, #7
 8018b26:	f7ff fd1d 	bl	8018564 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 8018b2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8018b2e:	2b00      	cmp	r3, #0
 8018b30:	d0f2      	beq.n	8018b18 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (target_register->register_info.type != registered_type) {
 8018b32:	7923      	ldrb	r3, [r4, #4]
 8018b34:	4298      	cmp	r0, r3
 8018b36:	d1ef      	bne.n	8018b18 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (callbacks[target_register->register_info.type] == NULL) {
 8018b38:	3004      	adds	r0, #4
 8018b3a:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8018b3e:	2800      	cmp	r0, #0
 8018b40:	d0ea      	beq.n	8018b18 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 8018b42:	7823      	ldrb	r3, [r4, #0]
 8018b44:	b983      	cbnz	r3, 8018b68 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
 8018b46:	7863      	ldrb	r3, [r4, #1]
 8018b48:	b973      	cbnz	r3, 8018b68 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
		callback.read = NULL;
 8018b4a:	9305      	str	r3, [sp, #20]
		target_callback_list->push_back(callback);
 8018b4c:	a902      	add	r1, sp, #8
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8018b4e:	e9d0 2300 	ldrd	r2, r3, [r0]
		callback.write = write;
 8018b52:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8018b56:	1a9b      	subs	r3, r3, r2
 8018b58:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8018b5a:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 8018b5c:	f7f6 fbec 	bl	800f338 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_>
	target_register->mode.callbacks = true;
 8018b60:	2301      	movs	r3, #1
 8018b62:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 8018b64:	7223      	strb	r3, [r4, #8]
 8018b66:	e7d7      	b.n	8018b18 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8018b68:	8961      	ldrh	r1, [r4, #10]
 8018b6a:	f7f6 fa49 	bl	800f000 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
		callback->write = write;
 8018b6e:	e9c0 7601 	strd	r7, r6, [r0, #4]
 8018b72:	e7f5      	b.n	8018b60 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x72>

08018b74 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8018b74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018b78:	460c      	mov	r4, r1
 8018b7a:	b087      	sub	sp, #28
 8018b7c:	4606      	mov	r6, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8018b7e:	f04f 31ff 	mov.w	r1, #4294967295
 8018b82:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8018b84:	4698      	mov	r8, r3
 8018b86:	4691      	mov	r9, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8018b88:	f7f3 fcd4 	bl	800c534 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8018b8c:	4621      	mov	r1, r4
 8018b8e:	f10d 0207 	add.w	r2, sp, #7
 8018b92:	4630      	mov	r0, r6
 8018b94:	f7ff fadb 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8018b98:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8018b9c:	4604      	mov	r4, r0
	if (!success) {
 8018b9e:	b92b      	cbnz	r3, 8018bac <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x38>
	osSemaphoreRelease(RegistersSemaphore);
 8018ba0:	6830      	ldr	r0, [r6, #0]
 8018ba2:	f7f3 fcfb 	bl	800c59c <osSemaphoreRelease>
}
 8018ba6:	b007      	add	sp, #28
 8018ba8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8018bac:	f10d 0007 	add.w	r0, sp, #7
 8018bb0:	f7ff fc76 	bl	80184a0 <_ZN9Registers9GetTypeIDItEEhPb.isra.0>
	if (!success) {
 8018bb4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8018bb8:	2b00      	cmp	r3, #0
 8018bba:	d0f1      	beq.n	8018ba0 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (target_register->register_info.type != registered_type) {
 8018bbc:	7923      	ldrb	r3, [r4, #4]
 8018bbe:	4298      	cmp	r0, r3
 8018bc0:	d1ee      	bne.n	8018ba0 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (callbacks[target_register->register_info.type] == NULL) {
 8018bc2:	3004      	adds	r0, #4
 8018bc4:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
 8018bc8:	2f00      	cmp	r7, #0
 8018bca:	d0e9      	beq.n	8018ba0 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 8018bcc:	7821      	ldrb	r1, [r4, #0]
 8018bce:	e9d7 3500 	ldrd	r3, r5, [r7]
 8018bd2:	1aea      	subs	r2, r5, r3
 8018bd4:	1112      	asrs	r2, r2, #4
 8018bd6:	b9b1      	cbnz	r1, 8018c06 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x92>
 8018bd8:	7861      	ldrb	r1, [r4, #1]
 8018bda:	b9a1      	cbnz	r1, 8018c06 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x92>
		callback.read = NULL;
 8018bdc:	9105      	str	r1, [sp, #20]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8018bde:	68b9      	ldr	r1, [r7, #8]
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8018be0:	8162      	strh	r2, [r4, #10]
      push_back(const value_type& __x)
 8018be2:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8018be4:	42a9      	cmp	r1, r5
		callback.write = write;
 8018be6:	e9cd 9803 	strd	r9, r8, [sp, #12]
 8018bea:	d008      	beq.n	8018bfe <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x8a>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8018bec:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8018bee:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8018bf2:	3510      	adds	r5, #16
 8018bf4:	607d      	str	r5, [r7, #4]
	target_register->mode.callbacks = true;
 8018bf6:	2301      	movs	r3, #1
 8018bf8:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 8018bfa:	7223      	strb	r3, [r4, #8]
 8018bfc:	e7d0      	b.n	8018ba0 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	  _M_realloc_insert(end(), __x);
 8018bfe:	4638      	mov	r0, r7
 8018c00:	f7fe f9fc 	bl	8016ffc <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	} else {
 8018c04:	e7f7      	b.n	8018bf6 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x82>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8018c06:	8961      	ldrh	r1, [r4, #10]
	if (__n >= this->size())
 8018c08:	4291      	cmp	r1, r2
 8018c0a:	d302      	bcc.n	8018c12 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x9e>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8018c0c:	4803      	ldr	r0, [pc, #12]	@ (8018c1c <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0xa8>)
 8018c0e:	f001 feae 	bl	801a96e <_ZSt24__throw_out_of_range_fmtPKcz>
	return *(this->_M_impl._M_start + __n);
 8018c12:	eb03 1301 	add.w	r3, r3, r1, lsl #4
		callback->write = write;
 8018c16:	e9c3 9801 	strd	r9, r8, [r3, #4]
 8018c1a:	e7ec      	b.n	8018bf6 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x82>
 8018c1c:	0801b3bc 	.word	0x0801b3bc

08018c20 <_ZN7Sensors12AddRegistersEv>:
void Sensors::AddRegisters(void) {
 8018c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018c22:	4604      	mov	r4, r0
 8018c24:	b087      	sub	sp, #28
	registers->AddRegister<uint8_t>(REG_SENSORS_READING_STATUS);
 8018c26:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8018c2a:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 8018c2c:	f7ff ff2e 	bl	8018a8c <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_SENSORS_READING_STATUS);
 8018c30:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8018c34:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8018c36:	f7ff fac3 	bl	80181c0 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddReadCallback<uint8_t>(REG_SENSORS_READING_STATUS, (void*) this,
 8018c3a:	6de6      	ldr	r6, [r4, #92]	@ 0x5c
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8018c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8018c40:	6830      	ldr	r0, [r6, #0]
 8018c42:	f7f3 fc77 	bl	800c534 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8018c46:	f10d 0207 	add.w	r2, sp, #7
 8018c4a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8018c4e:	4630      	mov	r0, r6
 8018c50:	f7ff fa7d 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8018c54:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8018c58:	4605      	mov	r5, r0
	if (!success) {
 8018c5a:	2b00      	cmp	r3, #0
 8018c5c:	f040 80b6 	bne.w	8018dcc <_ZN7Sensors12AddRegistersEv+0x1ac>
	osSemaphoreRelease(RegistersSemaphore);
 8018c60:	6830      	ldr	r0, [r6, #0]
 8018c62:	f7f3 fc9b 	bl	800c59c <osSemaphoreRelease>
	registers->AddWriteCallback<uint8_t>(REG_SENSORS_READING_STATUS, (void*) this,
 8018c66:	4b9a      	ldr	r3, [pc, #616]	@ (8018ed0 <_ZN7Sensors12AddRegistersEv+0x2b0>)
 8018c68:	4622      	mov	r2, r4
 8018c6a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8018c6e:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8018c70:	f7ff ff3d 	bl	8018aee <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_SENSORS_GROUP_STATUS);
 8018c74:	f240 2101 	movw	r1, #513	@ 0x201
 8018c78:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8018c7a:	f7ff ff07 	bl	8018a8c <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_SENSORS_GROUP_STATUS, 2);
 8018c7e:	2202      	movs	r2, #2
 8018c80:	f240 2101 	movw	r1, #513	@ 0x201
 8018c84:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8018c86:	f7ff fab7 	bl	80181f8 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_SENSORS_GROUP_STATUS, (void*) this,
 8018c8a:	4b92      	ldr	r3, [pc, #584]	@ (8018ed4 <_ZN7Sensors12AddRegistersEv+0x2b4>)
 8018c8c:	4622      	mov	r2, r4
 8018c8e:	f240 2101 	movw	r1, #513	@ 0x201
 8018c92:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8018c94:	f7ff ff2b 	bl	8018aee <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_SENSORS_DEACTIVATE_GROUPS);
 8018c98:	f240 2102 	movw	r1, #514	@ 0x202
 8018c9c:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8018c9e:	f7ff fef5 	bl	8018a8c <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_SENSORS_DEACTIVATE_GROUPS);
 8018ca2:	f240 2102 	movw	r1, #514	@ 0x202
 8018ca6:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8018ca8:	f7ff fa8a 	bl	80181c0 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_SENSORS_DEACTIVATE_GROUPS, (void*) this,
 8018cac:	4b8a      	ldr	r3, [pc, #552]	@ (8018ed8 <_ZN7Sensors12AddRegistersEv+0x2b8>)
 8018cae:	4622      	mov	r2, r4
 8018cb0:	f240 2102 	movw	r1, #514	@ 0x202
 8018cb4:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8018cb6:	f7ff ff1a 	bl	8018aee <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_SENSORS_SENSOR_STATUS);
 8018cba:	f240 2103 	movw	r1, #515	@ 0x203
 8018cbe:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8018cc0:	f7ff fee4 	bl	8018a8c <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_SENSORS_SENSOR_STATUS, 2);
 8018cc4:	2202      	movs	r2, #2
 8018cc6:	f240 2103 	movw	r1, #515	@ 0x203
 8018cca:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8018ccc:	f7ff fa94 	bl	80181f8 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_SENSORS_SENSOR_STATUS, (void*) this,
 8018cd0:	4b82      	ldr	r3, [pc, #520]	@ (8018edc <_ZN7Sensors12AddRegistersEv+0x2bc>)
 8018cd2:	4622      	mov	r2, r4
 8018cd4:	f240 2103 	movw	r1, #515	@ 0x203
 8018cd8:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8018cda:	f7ff ff08 	bl	8018aee <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_SENSORS_DEACTIVATE_SENSORS);
 8018cde:	f44f 7101 	mov.w	r1, #516	@ 0x204
 8018ce2:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8018ce4:	f7ff fed2 	bl	8018a8c <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_SENSORS_DEACTIVATE_SENSORS);
 8018ce8:	f44f 7101 	mov.w	r1, #516	@ 0x204
 8018cec:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8018cee:	f7ff fa67 	bl	80181c0 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_SENSORS_DEACTIVATE_SENSORS, (void*) this,
 8018cf2:	4b7b      	ldr	r3, [pc, #492]	@ (8018ee0 <_ZN7Sensors12AddRegistersEv+0x2c0>)
 8018cf4:	4622      	mov	r2, r4
 8018cf6:	f44f 7101 	mov.w	r1, #516	@ 0x204
 8018cfa:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8018cfc:	f7ff fef7 	bl	8018aee <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint16_t>(REG_SENSORS_DATA_STATUS);
 8018d00:	f240 2105 	movw	r1, #517	@ 0x205
 8018d04:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8018d06:	f7ff fe90 	bl	8018a2a <_ZN9Registers11AddRegisterItEEbt.isra.0>
	registers->SetRegisterAsArray(REG_SENSORS_DATA_STATUS, 3);
 8018d0a:	2203      	movs	r2, #3
 8018d0c:	f240 2105 	movw	r1, #517	@ 0x205
 8018d10:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8018d12:	f7ff fa71 	bl	80181f8 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint16_t>(REG_SENSORS_DATA_STATUS, (void*) this,
 8018d16:	4b73      	ldr	r3, [pc, #460]	@ (8018ee4 <_ZN7Sensors12AddRegistersEv+0x2c4>)
 8018d18:	4622      	mov	r2, r4
 8018d1a:	f240 2105 	movw	r1, #517	@ 0x205
 8018d1e:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8018d20:	f7ff ff28 	bl	8018b74 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_SENSORS_DEACTIVATE_ALL_DATA);
 8018d24:	f240 2106 	movw	r1, #518	@ 0x206
 8018d28:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8018d2a:	f7ff feaf 	bl	8018a8c <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_SENSORS_DEACTIVATE_ALL_DATA);
 8018d2e:	f240 2106 	movw	r1, #518	@ 0x206
 8018d32:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8018d34:	f7ff fa44 	bl	80181c0 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_SENSORS_DEACTIVATE_ALL_DATA, (void*) this,
 8018d38:	4b6b      	ldr	r3, [pc, #428]	@ (8018ee8 <_ZN7Sensors12AddRegistersEv+0x2c8>)
 8018d3a:	4622      	mov	r2, r4
 8018d3c:	f240 2106 	movw	r1, #518	@ 0x206
 8018d40:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8018d42:	f7ff fed4 	bl	8018aee <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint16_t>(REG_SENSORS_GROUP_PRESCALER);
 8018d46:	f240 2107 	movw	r1, #519	@ 0x207
 8018d4a:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8018d4c:	f7ff fe6d 	bl	8018a2a <_ZN9Registers11AddRegisterItEEbt.isra.0>
	registers->SetRegisterAsArray(REG_SENSORS_GROUP_PRESCALER, 2);
 8018d50:	2202      	movs	r2, #2
 8018d52:	f240 2107 	movw	r1, #519	@ 0x207
 8018d56:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8018d58:	f7ff fa4e 	bl	80181f8 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint16_t>(REG_SENSORS_GROUP_PRESCALER, (void*) this,
 8018d5c:	4b63      	ldr	r3, [pc, #396]	@ (8018eec <_ZN7Sensors12AddRegistersEv+0x2cc>)
 8018d5e:	4622      	mov	r2, r4
 8018d60:	f240 2107 	movw	r1, #519	@ 0x207
 8018d64:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8018d66:	f7ff ff05 	bl	8018b74 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint32_t>(REG_SENSORS_DETECT_SENSORS);
 8018d6a:	6de5      	ldr	r5, [r4, #92]	@ 0x5c
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8018d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8018d70:	6828      	ldr	r0, [r5, #0]
 8018d72:	f7f3 fbdf 	bl	800c534 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 8018d76:	f10d 0207 	add.w	r2, sp, #7
 8018d7a:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8018d7e:	4628      	mov	r0, r5
 8018d80:	f7ff f9e5 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 8018d84:	f89d 6007 	ldrb.w	r6, [sp, #7]
 8018d88:	2e00      	cmp	r6, #0
 8018d8a:	d04c      	beq.n	8018e26 <_ZN7Sensors12AddRegistersEv+0x206>
	osSemaphoreRelease(RegistersSemaphore);
 8018d8c:	6828      	ldr	r0, [r5, #0]
 8018d8e:	f7f3 fc05 	bl	800c59c <osSemaphoreRelease>
	registers->SetRegisterAsArray(REG_SENSORS_DETECT_SENSORS, 2);
 8018d92:	2202      	movs	r2, #2
 8018d94:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8018d98:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8018d9a:	f7ff fa2d 	bl	80181f8 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint32_t>(REG_SENSORS_DETECT_SENSORS, (void*) this,
 8018d9e:	6de7      	ldr	r7, [r4, #92]	@ 0x5c
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8018da0:	f04f 31ff 	mov.w	r1, #4294967295
 8018da4:	6838      	ldr	r0, [r7, #0]
 8018da6:	f7f3 fbc5 	bl	800c534 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8018daa:	f10d 0207 	add.w	r2, sp, #7
 8018dae:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8018db2:	4638      	mov	r0, r7
 8018db4:	f7ff f9cb 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8018db8:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8018dbc:	4605      	mov	r5, r0
	if (!success) {
 8018dbe:	2b00      	cmp	r3, #0
 8018dc0:	d14a      	bne.n	8018e58 <_ZN7Sensors12AddRegistersEv+0x238>
	osSemaphoreRelease(RegistersSemaphore);
 8018dc2:	6838      	ldr	r0, [r7, #0]
 8018dc4:	f7f3 fbea 	bl	800c59c <osSemaphoreRelease>
}
 8018dc8:	b007      	add	sp, #28
 8018dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8018dcc:	f10d 0007 	add.w	r0, sp, #7
 8018dd0:	f7ff fbc8 	bl	8018564 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 8018dd4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8018dd8:	2b00      	cmp	r3, #0
 8018dda:	f43f af41 	beq.w	8018c60 <_ZN7Sensors12AddRegistersEv+0x40>
	if (target_register->register_info.type != registered_type) {
 8018dde:	792b      	ldrb	r3, [r5, #4]
 8018de0:	4298      	cmp	r0, r3
 8018de2:	f47f af3d 	bne.w	8018c60 <_ZN7Sensors12AddRegistersEv+0x40>
	if (callbacks[target_register->register_info.type] == NULL) {
 8018de6:	3004      	adds	r0, #4
 8018de8:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8018dec:	2800      	cmp	r0, #0
 8018dee:	f43f af37 	beq.w	8018c60 <_ZN7Sensors12AddRegistersEv+0x40>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 8018df2:	782b      	ldrb	r3, [r5, #0]
 8018df4:	4f3e      	ldr	r7, [pc, #248]	@ (8018ef0 <_ZN7Sensors12AddRegistersEv+0x2d0>)
 8018df6:	b983      	cbnz	r3, 8018e1a <_ZN7Sensors12AddRegistersEv+0x1fa>
 8018df8:	786b      	ldrb	r3, [r5, #1]
 8018dfa:	b973      	cbnz	r3, 8018e1a <_ZN7Sensors12AddRegistersEv+0x1fa>
		target_callback_list->push_back(callback);
 8018dfc:	a902      	add	r1, sp, #8
		callback.read = read;
 8018dfe:	9705      	str	r7, [sp, #20]
		callback.write = NULL;
 8018e00:	e9cd 4303 	strd	r4, r3, [sp, #12]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8018e04:	e9d0 2300 	ldrd	r2, r3, [r0]
 8018e08:	1a9b      	subs	r3, r3, r2
 8018e0a:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8018e0c:	816b      	strh	r3, [r5, #10]
		target_callback_list->push_back(callback);
 8018e0e:	f7f6 fa93 	bl	800f338 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_>
	target_register->mode.callbacks = true;
 8018e12:	2301      	movs	r3, #1
 8018e14:	706b      	strb	r3, [r5, #1]
	target_register->access.read = true;
 8018e16:	726b      	strb	r3, [r5, #9]
 8018e18:	e722      	b.n	8018c60 <_ZN7Sensors12AddRegistersEv+0x40>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8018e1a:	8969      	ldrh	r1, [r5, #10]
 8018e1c:	f7f6 f8f0 	bl	800f000 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
		callback->context = context;
 8018e20:	6044      	str	r4, [r0, #4]
		callback->read = read;
 8018e22:	60c7      	str	r7, [r0, #12]
 8018e24:	e7f5      	b.n	8018e12 <_ZN7Sensors12AddRegistersEv+0x1f2>
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8018e26:	f10d 0007 	add.w	r0, sp, #7
 8018e2a:	f7ff fad7 	bl	80183dc <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	configuration_.mode = mode;
 8018e2e:	f04f 7302 	mov.w	r3, #34078720	@ 0x2080000
	configuration_.register_info = register_;
 8018e32:	f88d 000c 	strb.w	r0, [sp, #12]
	configuration_.mode = mode;
 8018e36:	9302      	str	r3, [sp, #8]
	configuration_.register_info = register_;
 8018e38:	2301      	movs	r3, #1
 8018e3a:	f88d 600d 	strb.w	r6, [sp, #13]
 8018e3e:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 8018e42:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_semaphore = NULL;
 8018e46:	e9cd 6604 	strd	r6, r6, [sp, #16]
	if (success) {
 8018e4a:	2b00      	cmp	r3, #0
 8018e4c:	d09e      	beq.n	8018d8c <_ZN7Sensors12AddRegistersEv+0x16c>
		registers.push_back(configuration_);
 8018e4e:	a902      	add	r1, sp, #8
 8018e50:	1d28      	adds	r0, r5, #4
 8018e52:	f7fb ff0c 	bl	8014c6e <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 8018e56:	e799      	b.n	8018d8c <_ZN7Sensors12AddRegistersEv+0x16c>
	uint8_t registered_type = GetTypeID<T>(&success);
 8018e58:	f10d 0007 	add.w	r0, sp, #7
 8018e5c:	f7ff fabe 	bl	80183dc <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	if (!success) {
 8018e60:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8018e64:	2b00      	cmp	r3, #0
 8018e66:	d0ac      	beq.n	8018dc2 <_ZN7Sensors12AddRegistersEv+0x1a2>
	if (target_register->register_info.type != registered_type) {
 8018e68:	792b      	ldrb	r3, [r5, #4]
 8018e6a:	4298      	cmp	r0, r3
 8018e6c:	d1a9      	bne.n	8018dc2 <_ZN7Sensors12AddRegistersEv+0x1a2>
	if (callbacks[target_register->register_info.type] == NULL) {
 8018e6e:	3004      	adds	r0, #4
 8018e70:	f857 c020 	ldr.w	ip, [r7, r0, lsl #2]
 8018e74:	f1bc 0f00 	cmp.w	ip, #0
 8018e78:	d0a3      	beq.n	8018dc2 <_ZN7Sensors12AddRegistersEv+0x1a2>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 8018e7a:	7829      	ldrb	r1, [r5, #0]
 8018e7c:	481d      	ldr	r0, [pc, #116]	@ (8018ef4 <_ZN7Sensors12AddRegistersEv+0x2d4>)
 8018e7e:	e9dc 3600 	ldrd	r3, r6, [ip]
 8018e82:	1af2      	subs	r2, r6, r3
 8018e84:	1112      	asrs	r2, r2, #4
 8018e86:	b9c1      	cbnz	r1, 8018eba <_ZN7Sensors12AddRegistersEv+0x29a>
 8018e88:	7869      	ldrb	r1, [r5, #1]
 8018e8a:	b9b1      	cbnz	r1, 8018eba <_ZN7Sensors12AddRegistersEv+0x29a>
		callback.read = NULL;
 8018e8c:	9105      	str	r1, [sp, #20]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8018e8e:	f8dc 1008 	ldr.w	r1, [ip, #8]
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8018e92:	816a      	strh	r2, [r5, #10]
      push_back(const value_type& __x)
 8018e94:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8018e96:	42b1      	cmp	r1, r6
		callback.write = write;
 8018e98:	e9cd 4003 	strd	r4, r0, [sp, #12]
 8018e9c:	d009      	beq.n	8018eb2 <_ZN7Sensors12AddRegistersEv+0x292>
 8018e9e:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8018ea0:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8018ea4:	3610      	adds	r6, #16
 8018ea6:	f8cc 6004 	str.w	r6, [ip, #4]
	target_register->mode.callbacks = true;
 8018eaa:	2301      	movs	r3, #1
 8018eac:	706b      	strb	r3, [r5, #1]
	target_register->access.write = true;
 8018eae:	722b      	strb	r3, [r5, #8]
 8018eb0:	e787      	b.n	8018dc2 <_ZN7Sensors12AddRegistersEv+0x1a2>
	  _M_realloc_insert(end(), __x);
 8018eb2:	4660      	mov	r0, ip
 8018eb4:	f7fb ffd4 	bl	8014e60 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	} else {
 8018eb8:	e7f7      	b.n	8018eaa <_ZN7Sensors12AddRegistersEv+0x28a>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8018eba:	8969      	ldrh	r1, [r5, #10]
	if (__n >= this->size())
 8018ebc:	4291      	cmp	r1, r2
 8018ebe:	d302      	bcc.n	8018ec6 <_ZN7Sensors12AddRegistersEv+0x2a6>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8018ec0:	480d      	ldr	r0, [pc, #52]	@ (8018ef8 <_ZN7Sensors12AddRegistersEv+0x2d8>)
 8018ec2:	f001 fd54 	bl	801a96e <_ZSt24__throw_out_of_range_fmtPKcz>
	return *(this->_M_impl._M_start + __n);
 8018ec6:	eb03 1301 	add.w	r3, r3, r1, lsl #4
		callback->write = write;
 8018eca:	e9c3 4001 	strd	r4, r0, [r3, #4]
 8018ece:	e7ec      	b.n	8018eaa <_ZN7Sensors12AddRegistersEv+0x28a>
 8018ed0:	08018703 	.word	0x08018703
 8018ed4:	0801887b 	.word	0x0801887b
 8018ed8:	08018743 	.word	0x08018743
 8018edc:	0801895f 	.word	0x0801895f
 8018ee0:	080188cf 	.word	0x080188cf
 8018ee4:	08018a11 	.word	0x08018a11
 8018ee8:	080189b1 	.word	0x080189b1
 8018eec:	08018829 	.word	0x08018829
 8018ef0:	080183bd 	.word	0x080183bd
 8018ef4:	080187a9 	.word	0x080187a9
 8018ef8:	0801b3bc 	.word	0x0801b3bc

08018efc <_ZN8Services4InitEP9RegistersP13CommunicationP4LEDS>:
 *
 * @param input registers_: the Registers instance
 * @param input communication_: the Communication instance
 * @param input leds_: the LEDS instance
 */
void Services::Init(Registers* registers_, Communication* communication_, LEDS* leds_) {
 8018efc:	b510      	push	{r4, lr}
 8018efe:	4604      	mov	r4, r0
	registers = registers_;
 8018f00:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 8018f04:	f8c0 1438 	str.w	r1, [r0, #1080]	@ 0x438
	communication = communication_;
	leds = leds_;

	ServiceSemaphore = osSemaphoreNew(1,1,NULL);
 8018f08:	2101      	movs	r1, #1
	communication = communication_;
 8018f0a:	f8c0 243c 	str.w	r2, [r0, #1084]	@ 0x43c
	ServiceSemaphore = osSemaphoreNew(1,1,NULL);
 8018f0e:	2200      	movs	r2, #0
	leds = leds_;
 8018f10:	f8c0 3440 	str.w	r3, [r0, #1088]	@ 0x440
	ServiceSemaphore = osSemaphoreNew(1,1,NULL);
 8018f14:	4608      	mov	r0, r1
 8018f16:	f7f3 fab1 	bl	800c47c <osSemaphoreNew>
 8018f1a:	6020      	str	r0, [r4, #0]
	osSemaphoreRelease(ServiceSemaphore);
}
 8018f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSemaphoreRelease(ServiceSemaphore);
 8018f20:	f7f3 bb3c 	b.w	800c59c <osSemaphoreRelease>

08018f24 <_ZN8Services10ResetQueueEv>:

/**
 * @brief Reset the pending services
 */
void Services::ResetQueue(void) {
 8018f24:	b538      	push	{r3, r4, r5, lr}
	queue_size = 0;
 8018f26:	2500      	movs	r5, #0
void Services::ResetQueue(void) {
 8018f28:	4604      	mov	r4, r0
	osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 8018f2a:	f04f 31ff 	mov.w	r1, #4294967295
	queue_size = 0;
 8018f2e:	7105      	strb	r5, [r0, #4]
	osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 8018f30:	6800      	ldr	r0, [r0, #0]
 8018f32:	f7f3 faff 	bl	800c534 <osSemaphoreAcquire>
	for (uint8_t index = 0; index < NUMBER_OF_SERVICES; index++) {
		services[index].active = false;
		services[index].reception_flag = false;
		services[index].error = false;
	}
	osSemaphoreRelease(ServiceSemaphore);
 8018f36:	6820      	ldr	r0, [r4, #0]
		services[index].active = false;
 8018f38:	8125      	strh	r5, [r4, #8]
		services[index].error = false;
 8018f3a:	7725      	strb	r5, [r4, #28]
		services[index].active = false;
 8018f3c:	8425      	strh	r5, [r4, #32]
		services[index].error = false;
 8018f3e:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
}
 8018f42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	osSemaphoreRelease(ServiceSemaphore);
 8018f46:	f7f3 bb29 	b.w	800c59c <osSemaphoreRelease>

08018f4a <_ZN8ServicesC1Ev>:
Services::Services() {
 8018f4a:	b510      	push	{r4, lr}
 8018f4c:	4604      	mov	r4, r0
	ResetQueue();
 8018f4e:	f7ff ffe9 	bl	8018f24 <_ZN8Services10ResetQueueEv>
}
 8018f52:	4620      	mov	r0, r4
 8018f54:	bd10      	pop	{r4, pc}

08018f56 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb>:
 * @param input interface: the interface from which the data comes from, used to find the service
 * @param input access: whether WRITE or READ
 * @param output success: whether successful
 * @return service index
 */
uint8_t Services::FindQueueIndex(uint8_t start_index, Register remote_register, ServiceInterface interface, bool access, bool* success) {
 8018f56:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018f5a:	460c      	mov	r4, r1
 8018f5c:	a902      	add	r1, sp, #8
 8018f5e:	4605      	mov	r5, r0
	osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 8018f60:	6800      	ldr	r0, [r0, #0]
uint8_t Services::FindQueueIndex(uint8_t start_index, Register remote_register, ServiceInterface interface, bool access, bool* success) {
 8018f62:	f89d 8024 	ldrb.w	r8, [sp, #36]	@ 0x24
 8018f66:	e901 000c 	stmdb	r1, {r2, r3}
	osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 8018f6a:	f04f 31ff 	mov.w	r1, #4294967295
 8018f6e:	f89d 7021 	ldrb.w	r7, [sp, #33]	@ 0x21
 8018f72:	f7f3 fadf 	bl	800c534 <osSemaphoreAcquire>
		if (services[index].active) {
			Register registered_register = services[index].configuration.register_;
			ServiceInterface registered_interface =services[index].configuration.interface;

			// Check register address
			if (remote_register.address == registered_register.address) {
 8018f76:	f8bd 1000 	ldrh.w	r1, [sp]
 8018f7a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
				// Check interface
				if (interface.interface == registered_interface.interface) {
 8018f7e:	f89d 0020 	ldrb.w	r0, [sp, #32]
 8018f82:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
	for (uint8_t index = start_index; index < NUMBER_OF_SERVICES; index++) {
 8018f86:	2c01      	cmp	r4, #1
 8018f88:	d905      	bls.n	8018f96 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x40>
			}
		}
	}
	osSemaphoreRelease(ServiceSemaphore);
	*success = false;
	return 0;
 8018f8a:	2400      	movs	r4, #0
	osSemaphoreRelease(ServiceSemaphore);
 8018f8c:	6828      	ldr	r0, [r5, #0]
 8018f8e:	f7f3 fb05 	bl	800c59c <osSemaphoreRelease>
	return 0;
 8018f92:	4626      	mov	r6, r4
 8018f94:	e014      	b.n	8018fc0 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x6a>
		if (services[index].active) {
 8018f96:	7a1e      	ldrb	r6, [r3, #8]
 8018f98:	b1c6      	cbz	r6, 8018fcc <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x76>
			if (remote_register.address == registered_register.address) {
 8018f9a:	895a      	ldrh	r2, [r3, #10]
 8018f9c:	428a      	cmp	r2, r1
 8018f9e:	d115      	bne.n	8018fcc <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x76>
				if (interface.interface == registered_interface.interface) {
 8018fa0:	7c9a      	ldrb	r2, [r3, #18]
 8018fa2:	4282      	cmp	r2, r0
 8018fa4:	d112      	bne.n	8018fcc <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x76>
			ServiceInterface registered_interface =services[index].configuration.interface;
 8018fa6:	7cda      	ldrb	r2, [r3, #19]
					if (interface.address == registered_interface.address || registered_interface.address == ALL || interface.address == ALL) {
 8018fa8:	4297      	cmp	r7, r2
 8018faa:	d003      	beq.n	8018fb4 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x5e>
 8018fac:	2aff      	cmp	r2, #255	@ 0xff
 8018fae:	d001      	beq.n	8018fb4 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x5e>
 8018fb0:	2fff      	cmp	r7, #255	@ 0xff
 8018fb2:	d10b      	bne.n	8018fcc <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x76>
						if (access == services[index].configuration.access) { // check access type
 8018fb4:	7d1a      	ldrb	r2, [r3, #20]
 8018fb6:	4542      	cmp	r2, r8
 8018fb8:	d108      	bne.n	8018fcc <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x76>
							osSemaphoreRelease(ServiceSemaphore);
 8018fba:	6828      	ldr	r0, [r5, #0]
 8018fbc:	f7f3 faee 	bl	800c59c <osSemaphoreRelease>
							*success = true;
 8018fc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
}
 8018fc2:	4620      	mov	r0, r4
							*success = true;
 8018fc4:	701e      	strb	r6, [r3, #0]
}
 8018fc6:	b002      	add	sp, #8
 8018fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (uint8_t index = start_index; index < NUMBER_OF_SERVICES; index++) {
 8018fcc:	3401      	adds	r4, #1
 8018fce:	3318      	adds	r3, #24
 8018fd0:	b2e4      	uxtb	r4, r4
 8018fd2:	e7d8      	b.n	8018f86 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x30>

08018fd4 <_ZN8Services12ReceiveWriteE20ServiceConfigurationh>:
 * @brief Receive a write service access acknowledgment
 *
 * @param input information: service information associated to the write acknowledgment
 * @param input status: value returned by the remote module
 */
void Services::ReceiveWrite(ServiceConfiguration information, uint8_t status) {
 8018fd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018fd8:	b08b      	sub	sp, #44	@ 0x2c
 8018fda:	4605      	mov	r5, r0
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
		if (not success) return;

		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
		buffer_uint8[index][0] = status;
		services[index].reception_flag = true;
 8018fdc:	f04f 0918 	mov.w	r9, #24
void Services::ReceiveWrite(ServiceConfiguration information, uint8_t status) {
 8018fe0:	ae05      	add	r6, sp, #20
 8018fe2:	f89d 7048 	ldrb.w	r7, [sp, #72]	@ 0x48
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 8018fe6:	f10d 0827 	add.w	r8, sp, #39	@ 0x27
void Services::ReceiveWrite(ServiceConfiguration information, uint8_t status) {
 8018fea:	e886 000e 	stmia.w	r6, {r1, r2, r3}
	bool success = true;
 8018fee:	2301      	movs	r3, #1
	uint8_t start_index = 0;
 8018ff0:	2100      	movs	r1, #0
	bool success = true;
 8018ff2:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
	while (success) {
 8018ff6:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8018ffa:	b913      	cbnz	r3, 8019002 <_ZN8Services12ReceiveWriteE20ServiceConfigurationh+0x2e>
		osSemaphoreRelease(ServiceSemaphore);

		start_index = index + 1;
	}
}
 8018ffc:	b00b      	add	sp, #44	@ 0x2c
 8018ffe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 8019002:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8019006:	4628      	mov	r0, r5
 8019008:	f8cd 8008 	str.w	r8, [sp, #8]
 801900c:	9301      	str	r3, [sp, #4]
 801900e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8019012:	f8ad 3000 	strh.w	r3, [sp]
 8019016:	e896 000c 	ldmia.w	r6, {r2, r3}
 801901a:	f7ff ff9c 	bl	8018f56 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb>
		if (not success) return;
 801901e:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 8019022:	4604      	mov	r4, r0
		if (not success) return;
 8019024:	2b00      	cmp	r3, #0
 8019026:	d0e9      	beq.n	8018ffc <_ZN8Services12ReceiveWriteE20ServiceConfigurationh+0x28>
		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 8019028:	f04f 31ff 	mov.w	r1, #4294967295
 801902c:	6828      	ldr	r0, [r5, #0]
 801902e:	f7f3 fa81 	bl	800c534 <osSemaphoreAcquire>
		services[index].reception_flag = true;
 8019032:	2201      	movs	r2, #1
		buffer_uint8[index][0] = status;
 8019034:	eb05 2304 	add.w	r3, r5, r4, lsl #8
 8019038:	f883 7038 	strb.w	r7, [r3, #56]	@ 0x38
		services[index].reception_flag = true;
 801903c:	fb09 5304 	mla	r3, r9, r4, r5
		osSemaphoreRelease(ServiceSemaphore);
 8019040:	6828      	ldr	r0, [r5, #0]
		services[index].reception_flag = true;
 8019042:	725a      	strb	r2, [r3, #9]
		osSemaphoreRelease(ServiceSemaphore);
 8019044:	f7f3 faaa 	bl	800c59c <osSemaphoreRelease>
		start_index = index + 1;
 8019048:	1c61      	adds	r1, r4, #1
 801904a:	b2c9      	uxtb	r1, r1
 801904c:	e7d3      	b.n	8018ff6 <_ZN8Services12ReceiveWriteE20ServiceConfigurationh+0x22>

0801904e <_ZN8Services12ReceiveErrorE20ServiceConfigurationh>:
 * @brief Receive an service access error
 *
 * @param input information: service information associated to the acknowledgment
 * @param input error: error flag returned by the remote module
 */
void Services::ReceiveError(ServiceConfiguration information, uint8_t error) {
 801904e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019052:	b08a      	sub	sp, #40	@ 0x28
 8019054:	4604      	mov	r4, r0
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
		if (not success) return;

		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
		buffer_uint8[index][0] = error;
		services[index].error = true;
 8019056:	2718      	movs	r7, #24
void Services::ReceiveError(ServiceConfiguration information, uint8_t error) {
 8019058:	ae05      	add	r6, sp, #20
 801905a:	f89d 8048 	ldrb.w	r8, [sp, #72]	@ 0x48
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 801905e:	f10d 0927 	add.w	r9, sp, #39	@ 0x27
void Services::ReceiveError(ServiceConfiguration information, uint8_t error) {
 8019062:	e886 000e 	stmia.w	r6, {r1, r2, r3}
	bool success = true;
 8019066:	2301      	movs	r3, #1
	uint8_t start_index = 0;
 8019068:	2100      	movs	r1, #0
	bool success = true;
 801906a:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
	while (success) {
 801906e:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8019072:	b913      	cbnz	r3, 801907a <_ZN8Services12ReceiveErrorE20ServiceConfigurationh+0x2c>
		services[index].reception_flag = true;
		osSemaphoreRelease(ServiceSemaphore);

		start_index = index + 1;
	}
}
 8019074:	b00a      	add	sp, #40	@ 0x28
 8019076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 801907a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801907e:	4620      	mov	r0, r4
 8019080:	f8cd 9008 	str.w	r9, [sp, #8]
 8019084:	9301      	str	r3, [sp, #4]
 8019086:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801908a:	f8ad 3000 	strh.w	r3, [sp]
 801908e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8019092:	f7ff ff60 	bl	8018f56 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb>
		if (not success) return;
 8019096:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 801909a:	4605      	mov	r5, r0
		if (not success) return;
 801909c:	2b00      	cmp	r3, #0
 801909e:	d0e9      	beq.n	8019074 <_ZN8Services12ReceiveErrorE20ServiceConfigurationh+0x26>
		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 80190a0:	f04f 31ff 	mov.w	r1, #4294967295
 80190a4:	6820      	ldr	r0, [r4, #0]
 80190a6:	f7f3 fa45 	bl	800c534 <osSemaphoreAcquire>
		services[index].error = true;
 80190aa:	f105 0a01 	add.w	sl, r5, #1
		buffer_uint8[index][0] = error;
 80190ae:	eb04 2305 	add.w	r3, r4, r5, lsl #8
		services[index].error = true;
 80190b2:	2201      	movs	r2, #1
		buffer_uint8[index][0] = error;
 80190b4:	f883 8038 	strb.w	r8, [r3, #56]	@ 0x38
		services[index].error = true;
 80190b8:	fb05 7307 	mla	r3, r5, r7, r7
		osSemaphoreRelease(ServiceSemaphore);
 80190bc:	6820      	ldr	r0, [r4, #0]
		services[index].reception_flag = true;
 80190be:	fb07 4505 	mla	r5, r7, r5, r4
		services[index].error = true;
 80190c2:	4423      	add	r3, r4
 80190c4:	711a      	strb	r2, [r3, #4]
		services[index].reception_flag = true;
 80190c6:	726a      	strb	r2, [r5, #9]
		osSemaphoreRelease(ServiceSemaphore);
 80190c8:	f7f3 fa68 	bl	800c59c <osSemaphoreRelease>
		start_index = index + 1;
 80190cc:	fa5f f18a 	uxtb.w	r1, sl
 80190d0:	e7cd      	b.n	801906e <_ZN8Services12ReceiveErrorE20ServiceConfigurationh+0x20>

080190d2 <_ZN8Services18FindRemoteRegisterE8Register16ServiceInterfacebPb>:
 * @param input interface: interface associated to the register to find
 * @param input access: access mode of the register to find
 * @param output success: whether successful
 * @return the Register complete configuration (type, isArray, length)
 */
Register Services::FindRemoteRegister(Register remote_register, ServiceInterface interface, bool access, bool* success) {
 80190d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80190d6:	b087      	sub	sp, #28
 80190d8:	460d      	mov	r5, r1
 80190da:	4604      	mov	r4, r0
 80190dc:	a904      	add	r1, sp, #16
 80190de:	9f10      	ldr	r7, [sp, #64]	@ 0x40
	uint8_t index;
	index = FindQueueIndex(0, remote_register, interface, access, success);
 80190e0:	4628      	mov	r0, r5
Register Services::FindRemoteRegister(Register remote_register, ServiceInterface interface, bool access, bool* success) {
 80190e2:	e881 000c 	stmia.w	r1, {r2, r3}
	index = FindQueueIndex(0, remote_register, interface, access, success);
 80190e6:	f89d 303c 	ldrb.w	r3, [sp, #60]	@ 0x3c
 80190ea:	9702      	str	r7, [sp, #8]
 80190ec:	9301      	str	r3, [sp, #4]
 80190ee:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 80190f2:	f8ad 3000 	strh.w	r3, [sp]
 80190f6:	e891 000c 	ldmia.w	r1, {r2, r3}
 80190fa:	2100      	movs	r1, #0
 80190fc:	f7ff ff2b 	bl	8018f56 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb>
	if (*success) {
 8019100:	783b      	ldrb	r3, [r7, #0]
	index = FindQueueIndex(0, remote_register, interface, access, success);
 8019102:	4606      	mov	r6, r0
	if (*success) {
 8019104:	b1f3      	cbz	r3, 8019144 <_ZN8Services18FindRemoteRegisterE8Register16ServiceInterfacebPb+0x72>
		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 8019106:	f04f 31ff 	mov.w	r1, #4294967295
 801910a:	6828      	ldr	r0, [r5, #0]
 801910c:	f7f3 fa12 	bl	800c534 <osSemaphoreAcquire>
		Register found_register = services[index].configuration.register_;
 8019110:	2318      	movs	r3, #24
 8019112:	210a      	movs	r1, #10
		osSemaphoreRelease(ServiceSemaphore);
 8019114:	6828      	ldr	r0, [r5, #0]
		Register found_register = services[index].configuration.register_;
 8019116:	fb03 5206 	mla	r2, r3, r6, r5
 801911a:	fb13 1306 	smlabb	r3, r3, r6, r1
 801911e:	f8b2 900a 	ldrh.w	r9, [r2, #10]
 8019122:	442b      	add	r3, r5
 8019124:	f892 800c 	ldrb.w	r8, [r2, #12]
 8019128:	89d6      	ldrh	r6, [r2, #14]
 801912a:	78df      	ldrb	r7, [r3, #3]
		osSemaphoreRelease(ServiceSemaphore);
 801912c:	f7f3 fa36 	bl	800c59c <osSemaphoreRelease>

		return found_register;
 8019130:	f8a4 9000 	strh.w	r9, [r4]
 8019134:	f884 8002 	strb.w	r8, [r4, #2]
 8019138:	70e7      	strb	r7, [r4, #3]
 801913a:	80a6      	strh	r6, [r4, #4]
	}

	*success = false;
	return Register();
}
 801913c:	4620      	mov	r0, r4
 801913e:	b007      	add	sp, #28
 8019140:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return Register();
 8019144:	6023      	str	r3, [r4, #0]
 8019146:	80a3      	strh	r3, [r4, #4]
 8019148:	e7f8      	b.n	801913c <_ZN8Services18FindRemoteRegisterE8Register16ServiceInterfacebPb+0x6a>
	...

0801914c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>:
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801914c:	4926      	ldr	r1, [pc, #152]	@ (80191e8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 801914e:	b510      	push	{r4, lr}
 8019150:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8019152:	4608      	mov	r0, r1
 8019154:	f001 fbea 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8019158:	2800      	cmp	r0, #0
 801915a:	d133      	bne.n	80191c4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 801915c:	4923      	ldr	r1, [pc, #140]	@ (80191ec <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa0>)
 801915e:	4822      	ldr	r0, [pc, #136]	@ (80191e8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8019160:	f001 fbe4 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8019164:	2800      	cmp	r0, #0
 8019166:	d12f      	bne.n	80191c8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8019168:	4921      	ldr	r1, [pc, #132]	@ (80191f0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa4>)
 801916a:	481f      	ldr	r0, [pc, #124]	@ (80191e8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 801916c:	f001 fbde 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8019170:	bb60      	cbnz	r0, 80191cc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8019172:	4920      	ldr	r1, [pc, #128]	@ (80191f4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa8>)
 8019174:	481c      	ldr	r0, [pc, #112]	@ (80191e8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8019176:	f001 fbd9 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 801917a:	bb48      	cbnz	r0, 80191d0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 801917c:	491e      	ldr	r1, [pc, #120]	@ (80191f8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xac>)
 801917e:	481a      	ldr	r0, [pc, #104]	@ (80191e8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8019180:	f001 fbd4 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8019184:	bb30      	cbnz	r0, 80191d4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 8019186:	491d      	ldr	r1, [pc, #116]	@ (80191fc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb0>)
 8019188:	4817      	ldr	r0, [pc, #92]	@ (80191e8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 801918a:	f001 fbcf 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 801918e:	bb18      	cbnz	r0, 80191d8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8019190:	491b      	ldr	r1, [pc, #108]	@ (8019200 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb4>)
 8019192:	4815      	ldr	r0, [pc, #84]	@ (80191e8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8019194:	f001 fbca 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8019198:	bb00      	cbnz	r0, 80191dc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 801919a:	491a      	ldr	r1, [pc, #104]	@ (8019204 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb8>)
 801919c:	4812      	ldr	r0, [pc, #72]	@ (80191e8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 801919e:	f001 fbc5 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 80191a2:	b9e8      	cbnz	r0, 80191e0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 80191a4:	4918      	ldr	r1, [pc, #96]	@ (8019208 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xbc>)
 80191a6:	4810      	ldr	r0, [pc, #64]	@ (80191e8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 80191a8:	f001 fbc0 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 80191ac:	b9d0      	cbnz	r0, 80191e4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 80191ae:	4917      	ldr	r1, [pc, #92]	@ (801920c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xc0>)
 80191b0:	480d      	ldr	r0, [pc, #52]	@ (80191e8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 80191b2:	f001 fbbb 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 80191b6:	2800      	cmp	r0, #0
 80191b8:	bf14      	ite	ne
 80191ba:	2309      	movne	r3, #9
 80191bc:	2300      	moveq	r3, #0
 80191be:	7020      	strb	r0, [r4, #0]
}
 80191c0:	4618      	mov	r0, r3
 80191c2:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80191c4:	2300      	movs	r3, #0
 80191c6:	e7fa      	b.n	80191be <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 80191c8:	2301      	movs	r3, #1
 80191ca:	e7f8      	b.n	80191be <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 80191cc:	2302      	movs	r3, #2
 80191ce:	e7f6      	b.n	80191be <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 80191d0:	2303      	movs	r3, #3
 80191d2:	e7f4      	b.n	80191be <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 80191d4:	2304      	movs	r3, #4
 80191d6:	e7f2      	b.n	80191be <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 80191d8:	2305      	movs	r3, #5
 80191da:	e7f0      	b.n	80191be <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 80191dc:	2306      	movs	r3, #6
 80191de:	e7ee      	b.n	80191be <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 80191e0:	2307      	movs	r3, #7
 80191e2:	e7ec      	b.n	80191be <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 80191e4:	2308      	movs	r3, #8
 80191e6:	e7ea      	b.n	80191be <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
 80191e8:	0801b5d4 	.word	0x0801b5d4
 80191ec:	0801b5c4 	.word	0x0801b5c4
 80191f0:	0801b5b4 	.word	0x0801b5b4
 80191f4:	0801b5a4 	.word	0x0801b5a4
 80191f8:	0801b5dc 	.word	0x0801b5dc
 80191fc:	0801b5cc 	.word	0x0801b5cc
 8019200:	0801b5bc 	.word	0x0801b5bc
 8019204:	0801b5ac 	.word	0x0801b5ac
 8019208:	0801b59c 	.word	0x0801b59c
 801920c:	0801b594 	.word	0x0801b594

08019210 <_ZN17MasterSubscribersC1Ev>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 8019210:	2200      	movs	r2, #0
 8019212:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8019216:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801921a:	e9c0 2207 	strd	r2, r2, [r0, #28]

/**
 * @brief Class constructor
 */
MasterSubscribers::MasterSubscribers() {
}
 801921e:	4770      	bx	lr

08019220 <_ZN17MasterSubscribers4InitEP9RegistersP4LEDS>:
 * @brief Initialize the class with references to other classes. Set default values.
 *
 * @param input registers_: the Registers instance
 * @param input leds_: the LEDS instance
 */
void MasterSubscribers::Init(Registers* registers_, LEDS* leds_) {
 8019220:	b510      	push	{r4, lr}
	registers = registers_;
	leds = leds_;
 8019222:	e9c0 1200 	strd	r1, r2, [r0]

	SubscribersSemaphore = osSemaphoreNew(1,1,NULL);
 8019226:	2101      	movs	r1, #1
void MasterSubscribers::Init(Registers* registers_, LEDS* leds_) {
 8019228:	4604      	mov	r4, r0
	SubscribersSemaphore = osSemaphoreNew(1,1,NULL);
 801922a:	2200      	movs	r2, #0
 801922c:	4608      	mov	r0, r1
 801922e:	f7f3 f925 	bl	800c47c <osSemaphoreNew>
 8019232:	60a0      	str	r0, [r4, #8]
	osSemaphoreRelease(SubscribersSemaphore);
}
 8019234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSemaphoreRelease(SubscribersSemaphore);
 8019238:	f7f3 b9b0 	b.w	800c59c <osSemaphoreRelease>

0801923c <_ZN17MasterSubscribers19FindSubscriberIndexEhPb>:
 *
 * @param input ID: subscriber ID
 * @param output success: whether successful
 * @return the subscriber index
 */
uint8_t MasterSubscribers::FindSubscriberIndex(uint8_t ID, bool* success) {
 801923c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801923e:	4604      	mov	r4, r0
 8019240:	460d      	mov	r5, r1
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 8019242:	6880      	ldr	r0, [r0, #8]
 8019244:	f04f 31ff 	mov.w	r1, #4294967295
uint8_t MasterSubscribers::FindSubscriberIndex(uint8_t ID, bool* success) {
 8019248:	4616      	mov	r6, r2
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 801924a:	f7f3 f973 	bl	800c534 <osSemaphoreAcquire>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801924e:	4a10      	ldr	r2, [pc, #64]	@ (8019290 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb+0x54>)
	for (uint8_t index = 0; index < configurations.size(); index++) {
		if (configurations[index].ID == ID) {
 8019250:	2728      	movs	r7, #40	@ 0x28
 8019252:	e9d4 1303 	ldrd	r1, r3, [r4, #12]
 8019256:	1a5b      	subs	r3, r3, r1
 8019258:	10db      	asrs	r3, r3, #3
 801925a:	4353      	muls	r3, r2
	for (uint8_t index = 0; index < configurations.size(); index++) {
 801925c:	2200      	movs	r2, #0
 801925e:	b2d0      	uxtb	r0, r2
 8019260:	4298      	cmp	r0, r3
 8019262:	d305      	bcc.n	8019270 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb+0x34>
			osSemaphoreRelease(SubscribersSemaphore);
			*success = true;
			return index;
		}
	}
	osSemaphoreRelease(SubscribersSemaphore);
 8019264:	68a0      	ldr	r0, [r4, #8]
 8019266:	f7f3 f999 	bl	800c59c <osSemaphoreRelease>
	*success = false;
	return 0;
 801926a:	2300      	movs	r3, #0
 801926c:	461d      	mov	r5, r3
 801926e:	e00b      	b.n	8019288 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb+0x4c>
		if (configurations[index].ID == ID) {
 8019270:	fb07 fc00 	mul.w	ip, r7, r0
 8019274:	3201      	adds	r2, #1
 8019276:	f811 c00c 	ldrb.w	ip, [r1, ip]
 801927a:	45ac      	cmp	ip, r5
 801927c:	d1ef      	bne.n	801925e <_ZN17MasterSubscribers19FindSubscriberIndexEhPb+0x22>
 801927e:	4605      	mov	r5, r0
			osSemaphoreRelease(SubscribersSemaphore);
 8019280:	68a0      	ldr	r0, [r4, #8]
 8019282:	f7f3 f98b 	bl	800c59c <osSemaphoreRelease>
			return index;
 8019286:	2301      	movs	r3, #1
}
 8019288:	4628      	mov	r0, r5
			*success = true;
 801928a:	7033      	strb	r3, [r6, #0]
}
 801928c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801928e:	bf00      	nop
 8019290:	cccccccd 	.word	0xcccccccd

08019294 <_ZN17MasterSubscribers19SetSubscriberStatusEhb>:
bool MasterSubscribers::SetSubscriberStatus(uint8_t ID, bool status) {
 8019294:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019296:	4616      	mov	r6, r2
	uint8_t index = FindSubscriberIndex(ID, &success);
 8019298:	f10d 0207 	add.w	r2, sp, #7
bool MasterSubscribers::SetSubscriberStatus(uint8_t ID, bool status) {
 801929c:	4605      	mov	r5, r0
	uint8_t index = FindSubscriberIndex(ID, &success);
 801929e:	f7ff ffcd 	bl	801923c <_ZN17MasterSubscribers19FindSubscriberIndexEhPb>
	if (!success) return false;
 80192a2:	f89d 7007 	ldrb.w	r7, [sp, #7]
	uint8_t index = FindSubscriberIndex(ID, &success);
 80192a6:	4604      	mov	r4, r0
	if (!success) return false;
 80192a8:	b177      	cbz	r7, 80192c8 <_ZN17MasterSubscribers19SetSubscriberStatusEhb+0x34>
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 80192aa:	f04f 31ff 	mov.w	r1, #4294967295
 80192ae:	68a8      	ldr	r0, [r5, #8]
 80192b0:	f7f3 f940 	bl	800c534 <osSemaphoreAcquire>
	configurations[index].activated = status;
 80192b4:	68e9      	ldr	r1, [r5, #12]
	return *(this->_M_impl._M_start + __n);
 80192b6:	b223      	sxth	r3, r4
	osSemaphoreRelease(SubscribersSemaphore);
 80192b8:	68a8      	ldr	r0, [r5, #8]
 80192ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	configurations[index].activated = status;
 80192be:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80192c2:	704e      	strb	r6, [r1, #1]
	osSemaphoreRelease(SubscribersSemaphore);
 80192c4:	f7f3 f96a 	bl	800c59c <osSemaphoreRelease>
}
 80192c8:	4638      	mov	r0, r7
 80192ca:	b003      	add	sp, #12
 80192cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080192ce <_ZZN17MasterSubscribers12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 80192ce:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 80192d0:	4611      	mov	r1, r2
 80192d2:	b508      	push	{r3, lr}
			if (length != 2) return false;
 80192d4:	d108      	bne.n	80192e8 <_ZZN17MasterSubscribers12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x1a>
			self->SetSubscriberStatus(input[0], (bool) input[1]);
 80192d6:	7852      	ldrb	r2, [r2, #1]
 80192d8:	7809      	ldrb	r1, [r1, #0]
 80192da:	3a00      	subs	r2, #0
 80192dc:	bf18      	it	ne
 80192de:	2201      	movne	r2, #1
 80192e0:	f7ff ffd8 	bl	8019294 <_ZN17MasterSubscribers19SetSubscriberStatusEhb>
			return true;
 80192e4:	2001      	movs	r0, #1
		}
 80192e6:	bd08      	pop	{r3, pc}
			if (length != 2) return false;
 80192e8:	2000      	movs	r0, #0
 80192ea:	e7fc      	b.n	80192e6 <_ZZN17MasterSubscribers12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x18>

080192ec <_ZN17MasterSubscribers15AddressAcceptedEhh>:
bool MasterSubscribers::AddressAccepted(uint8_t ID, uint8_t address) {
 80192ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80192ee:	4616      	mov	r6, r2
	uint8_t index = FindSubscriberIndex(ID, &success);
 80192f0:	f10d 0207 	add.w	r2, sp, #7
bool MasterSubscribers::AddressAccepted(uint8_t ID, uint8_t address) {
 80192f4:	4605      	mov	r5, r0
	uint8_t index = FindSubscriberIndex(ID, &success);
 80192f6:	f7ff ffa1 	bl	801923c <_ZN17MasterSubscribers19FindSubscriberIndexEhPb>
	if (!success) return false;
 80192fa:	f89d 7007 	ldrb.w	r7, [sp, #7]
	uint8_t index = FindSubscriberIndex(ID, &success);
 80192fe:	4604      	mov	r4, r0
	if (!success) return false;
 8019300:	b1ef      	cbz	r7, 801933e <_ZN17MasterSubscribers15AddressAcceptedEhh+0x52>
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 8019302:	f04f 31ff 	mov.w	r1, #4294967295
 8019306:	68a8      	ldr	r0, [r5, #8]
 8019308:	f7f3 f914 	bl	800c534 <osSemaphoreAcquire>
 801930c:	68ea      	ldr	r2, [r5, #12]
 801930e:	b223      	sxth	r3, r4
 8019310:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8019314:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8019318:	e9d3 3207 	ldrd	r3, r2, [r3, #28]
	if (configurations[index].filters.size() == 0) {
 801931c:	429a      	cmp	r2, r3
 801931e:	d109      	bne.n	8019334 <_ZN17MasterSubscribers15AddressAcceptedEhh+0x48>
		osSemaphoreRelease(SubscribersSemaphore);
 8019320:	68a8      	ldr	r0, [r5, #8]
 8019322:	f7f3 f93b 	bl	800c59c <osSemaphoreRelease>
}
 8019326:	4638      	mov	r0, r7
 8019328:	b003      	add	sp, #12
 801932a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (uint8_t filtered_address : configurations[index].filters) {
 801932c:	f813 1b01 	ldrb.w	r1, [r3], #1
		if (filtered_address == address) {
 8019330:	42b1      	cmp	r1, r6
 8019332:	e7f4      	b.n	801931e <_ZN17MasterSubscribers15AddressAcceptedEhh+0x32>
	for (uint8_t filtered_address : configurations[index].filters) {
 8019334:	4293      	cmp	r3, r2
 8019336:	d1f9      	bne.n	801932c <_ZN17MasterSubscribers15AddressAcceptedEhh+0x40>
	osSemaphoreRelease(SubscribersSemaphore);
 8019338:	68a8      	ldr	r0, [r5, #8]
 801933a:	f7f3 f92f 	bl	800c59c <osSemaphoreRelease>
	if (!success) return false;
 801933e:	2700      	movs	r7, #0
 8019340:	e7f1      	b.n	8019326 <_ZN17MasterSubscribers15AddressAcceptedEhh+0x3a>

08019342 <_ZN17MasterSubscribers12ClearFiltersEh>:
bool MasterSubscribers::ClearFilters(uint8_t ID) {
 8019342:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t index = FindSubscriberIndex(ID, &success);
 8019344:	f10d 0207 	add.w	r2, sp, #7
bool MasterSubscribers::ClearFilters(uint8_t ID) {
 8019348:	4605      	mov	r5, r0
	uint8_t index = FindSubscriberIndex(ID, &success);
 801934a:	f7ff ff77 	bl	801923c <_ZN17MasterSubscribers19FindSubscriberIndexEhPb>
	if (!success) return false;
 801934e:	f89d 6007 	ldrb.w	r6, [sp, #7]
	uint8_t index = FindSubscriberIndex(ID, &success);
 8019352:	4604      	mov	r4, r0
	if (!success) return false;
 8019354:	b196      	cbz	r6, 801937c <_ZN17MasterSubscribers12ClearFiltersEh+0x3a>
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 8019356:	f04f 31ff 	mov.w	r1, #4294967295
 801935a:	68a8      	ldr	r0, [r5, #8]
 801935c:	f7f3 f8ea 	bl	800c534 <osSemaphoreAcquire>
	return *(this->_M_impl._M_start + __n);
 8019360:	68ea      	ldr	r2, [r5, #12]
 8019362:	b223      	sxth	r3, r4
	osSemaphoreRelease(SubscribersSemaphore);
 8019364:	68a8      	ldr	r0, [r5, #8]
 8019366:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801936a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	if (size_type __n = this->_M_impl._M_finish - __pos)
 801936e:	e9d3 2107 	ldrd	r2, r1, [r3, #28]
 8019372:	428a      	cmp	r2, r1
	    this->_M_impl._M_finish = __pos;
 8019374:	bf18      	it	ne
 8019376:	621a      	strne	r2, [r3, #32]
 8019378:	f7f3 f910 	bl	800c59c <osSemaphoreRelease>
}
 801937c:	4630      	mov	r0, r6
 801937e:	b002      	add	sp, #8
 8019380:	bd70      	pop	{r4, r5, r6, pc}

08019382 <_ZZN17MasterSubscribers12AddRegistersEvENUlPvtPhtE1_4_FUNES0_tS1_t>:
			self->ClearFilters(*input);
 8019382:	7811      	ldrb	r1, [r2, #0]
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8019384:	b508      	push	{r3, lr}
			self->ClearFilters(*input);
 8019386:	f7ff ffdc 	bl	8019342 <_ZN17MasterSubscribers12ClearFiltersEh>
		}
 801938a:	2001      	movs	r0, #1
 801938c:	bd08      	pop	{r3, pc}
	...

08019390 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb>:
 * @param input remote_register: register configuration with only address filled
 * @param input interface: interface from which the published data comes from
 * @param output success: whether successful
 * @return the register configuration index from the subscriber
 */
uint8_t MasterSubscribers::FindRemoteRegisterIndex(uint8_t ID, Register remote_register, SubscriberInterface interface, bool* success) {
 8019390:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8019394:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8019396:	ac02      	add	r4, sp, #8
 8019398:	4605      	mov	r5, r0
 801939a:	e904 000c 	stmdb	r4, {r2, r3}
	uint8_t subscriber_index = FindSubscriberIndex(ID, success);
 801939e:	4632      	mov	r2, r6
 80193a0:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 80193a4:	f89d 7029 	ldrb.w	r7, [sp, #41]	@ 0x29
 80193a8:	f7ff ff48 	bl	801923c <_ZN17MasterSubscribers19FindSubscriberIndexEhPb>
	if (not *success)
 80193ac:	7833      	ldrb	r3, [r6, #0]
	uint8_t subscriber_index = FindSubscriberIndex(ID, success);
 80193ae:	4604      	mov	r4, r0
	if (not *success)
 80193b0:	b1eb      	cbz	r3, 80193ee <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x5e>
		return 0;

	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 80193b2:	f04f 31ff 	mov.w	r1, #4294967295
 80193b6:	68a8      	ldr	r0, [r5, #8]
 80193b8:	f7f3 f8bc 	bl	800c534 <osSemaphoreAcquire>
	return *(this->_M_impl._M_start + __n);
 80193bc:	68ea      	ldr	r2, [r5, #12]
 80193be:	b223      	sxth	r3, r4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80193c0:	4920      	ldr	r1, [pc, #128]	@ (8019444 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0xb4>)
	for (uint8_t index = 0; index < configurations[subscriber_index].remote_registers.size(); index++) {
		Register subscribed_register = configurations[subscriber_index].remote_registers[index];
		SubscriberInterface subscribed_interface = configurations[subscriber_index].interfaces[index];

		if (remote_register.address == subscribed_register.address) {
 80193c2:	f8bd e000 	ldrh.w	lr, [sp]
		Register subscribed_register = configurations[subscriber_index].remote_registers[index];
 80193c6:	f04f 0906 	mov.w	r9, #6
	return *(this->_M_impl._M_start + __n);
 80193ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80193ce:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80193d2:	e9d2 4301 	ldrd	r4, r3, [r2, #4]
 80193d6:	1b1b      	subs	r3, r3, r4
 80193d8:	105b      	asrs	r3, r3, #1
 80193da:	434b      	muls	r3, r1
	for (uint8_t index = 0; index < configurations[subscriber_index].remote_registers.size(); index++) {
 80193dc:	2100      	movs	r1, #0
 80193de:	b2c8      	uxtb	r0, r1
 80193e0:	4298      	cmp	r0, r3
 80193e2:	d306      	bcc.n	80193f2 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x62>
//					}
				}
			}
		}
	}
	osSemaphoreRelease(SubscribersSemaphore);
 80193e4:	68a8      	ldr	r0, [r5, #8]
 80193e6:	f7f3 f8d9 	bl	800c59c <osSemaphoreRelease>
	*success = false;
 80193ea:	2300      	movs	r3, #0
 80193ec:	7033      	strb	r3, [r6, #0]
		return 0;
 80193ee:	2400      	movs	r4, #0
 80193f0:	e01d      	b.n	801942e <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x9e>
		Register subscribed_register = configurations[subscriber_index].remote_registers[index];
 80193f2:	fb09 fc00 	mul.w	ip, r9, r0
		if (remote_register.address == subscribed_register.address) {
 80193f6:	f834 c00c 	ldrh.w	ip, [r4, ip]
 80193fa:	45f4      	cmp	ip, lr
 80193fc:	d120      	bne.n	8019440 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0xb0>
	return *(this->_M_impl._M_start + __n);
 80193fe:	f8d2 c010 	ldr.w	ip, [r2, #16]
 8019402:	eb0c 0a40 	add.w	sl, ip, r0, lsl #1
		SubscriberInterface subscribed_interface = configurations[subscriber_index].interfaces[index];
 8019406:	f81c c010 	ldrb.w	ip, [ip, r0, lsl #1]
			if (interface.interface == subscribed_interface.interface || subscribed_interface.interface == ALL_INTERFACES || interface.interface == ALL_INTERFACES) {
 801940a:	45c4      	cmp	ip, r8
 801940c:	d005      	beq.n	801941a <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x8a>
 801940e:	f1bc 0f07 	cmp.w	ip, #7
 8019412:	d002      	beq.n	801941a <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x8a>
 8019414:	f1b8 0f07 	cmp.w	r8, #7
 8019418:	d112      	bne.n	8019440 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0xb0>
		SubscriberInterface subscribed_interface = configurations[subscriber_index].interfaces[index];
 801941a:	f89a c001 	ldrb.w	ip, [sl, #1]
				if (interface.address == subscribed_interface.address || subscribed_interface.address == ALL || interface.address == ALL) {
 801941e:	4567      	cmp	r7, ip
 8019420:	d109      	bne.n	8019436 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0xa6>
 8019422:	4604      	mov	r4, r0
					osSemaphoreRelease(SubscribersSemaphore);
 8019424:	68a8      	ldr	r0, [r5, #8]
 8019426:	f7f3 f8b9 	bl	800c59c <osSemaphoreRelease>
					*success = true;
 801942a:	2301      	movs	r3, #1
 801942c:	7033      	strb	r3, [r6, #0]
	return 0;

}
 801942e:	4620      	mov	r0, r4
 8019430:	b002      	add	sp, #8
 8019432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (interface.address == subscribed_interface.address || subscribed_interface.address == ALL || interface.address == ALL) {
 8019436:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801943a:	d0f2      	beq.n	8019422 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x92>
 801943c:	2fff      	cmp	r7, #255	@ 0xff
 801943e:	d0f0      	beq.n	8019422 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x92>
	for (uint8_t index = 0; index < configurations[subscriber_index].remote_registers.size(); index++) {
 8019440:	3101      	adds	r1, #1
 8019442:	e7cc      	b.n	80193de <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x4e>
 8019444:	aaaaaaab 	.word	0xaaaaaaab

08019448 <_ZN17MasterSubscribers26SubscribedToRemoteRegisterEh8Register19SubscriberInterface>:
bool MasterSubscribers::SubscribedToRemoteRegister(uint8_t ID, Register remote_register, SubscriberInterface interface) {
 8019448:	b510      	push	{r4, lr}
 801944a:	b086      	sub	sp, #24
 801944c:	ac02      	add	r4, sp, #8
 801944e:	e884 000c 	stmia.w	r4, {r2, r3}
	FindRemoteRegisterIndex(ID, remote_register, interface, &success);
 8019452:	f10d 0317 	add.w	r3, sp, #23
 8019456:	9301      	str	r3, [sp, #4]
 8019458:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801945c:	f8ad 3000 	strh.w	r3, [sp]
 8019460:	e894 000c 	ldmia.w	r4, {r2, r3}
 8019464:	f7ff ff94 	bl	8019390 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb>
}
 8019468:	f89d 0017 	ldrb.w	r0, [sp, #23]
 801946c:	b006      	add	sp, #24
 801946e:	bd10      	pop	{r4, pc}

08019470 <_ZN17MasterSubscribers18FindRemoteRegisterE8Register19SubscriberInterfacePb>:
Register MasterSubscribers::FindRemoteRegister(Register remote_register, SubscriberInterface interface, bool* success) {
 8019470:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019474:	460d      	mov	r5, r1
 8019476:	af02      	add	r7, sp, #8
 8019478:	4604      	mov	r4, r0
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 801947a:	f04f 31ff 	mov.w	r1, #4294967295
 801947e:	68a8      	ldr	r0, [r5, #8]
Register MasterSubscribers::FindRemoteRegister(Register remote_register, SubscriberInterface interface, bool* success) {
 8019480:	f8dd 9034 	ldr.w	r9, [sp, #52]	@ 0x34
 8019484:	e887 000c 	stmia.w	r7, {r2, r3}
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 8019488:	f7f3 f854 	bl	800c534 <osSemaphoreAcquire>
 801948c:	e9d5 6a03 	ldrd	r6, sl, [r5, #12]
	for (SubscriberConfiguration &configuration : configurations) {
 8019490:	4556      	cmp	r6, sl
 8019492:	46b0      	mov	r8, r6
 8019494:	d108      	bne.n	80194a8 <_ZN17MasterSubscribers18FindRemoteRegisterE8Register19SubscriberInterfacePb+0x38>
	osSemaphoreRelease(SubscribersSemaphore);
 8019496:	68a8      	ldr	r0, [r5, #8]
 8019498:	f7f3 f880 	bl	800c59c <osSemaphoreRelease>
	*success = false;
 801949c:	2300      	movs	r3, #0
 801949e:	f889 3000 	strb.w	r3, [r9]
	return Register();
 80194a2:	6023      	str	r3, [r4, #0]
 80194a4:	80a3      	strh	r3, [r4, #4]
 80194a6:	e022      	b.n	80194ee <_ZN17MasterSubscribers18FindRemoteRegisterE8Register19SubscriberInterfacePb+0x7e>
		index = FindRemoteRegisterIndex(configuration.ID, remote_register, interface, success);
 80194a8:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 80194ac:	4628      	mov	r0, r5
 80194ae:	f816 1b28 	ldrb.w	r1, [r6], #40
 80194b2:	f8cd 9004 	str.w	r9, [sp, #4]
 80194b6:	f8ad 3000 	strh.w	r3, [sp]
 80194ba:	e897 000c 	ldmia.w	r7, {r2, r3}
 80194be:	f7ff ff67 	bl	8019390 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb>
		if (*success) {
 80194c2:	f899 2000 	ldrb.w	r2, [r9]
 80194c6:	2a00      	cmp	r2, #0
 80194c8:	d0e2      	beq.n	8019490 <_ZN17MasterSubscribers18FindRemoteRegisterE8Register19SubscriberInterfacePb+0x20>
 80194ca:	b203      	sxth	r3, r0
 80194cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
			osSemaphoreRelease(SubscribersSemaphore);
 80194d0:	68a8      	ldr	r0, [r5, #8]
 80194d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80194d6:	eb01 0243 	add.w	r2, r1, r3, lsl #1
			Register found_register = configuration.remote_registers[index];
 80194da:	f831 8013 	ldrh.w	r8, [r1, r3, lsl #1]
 80194de:	8896      	ldrh	r6, [r2, #4]
 80194e0:	8857      	ldrh	r7, [r2, #2]
			osSemaphoreRelease(SubscribersSemaphore);
 80194e2:	f7f3 f85b 	bl	800c59c <osSemaphoreRelease>
			return found_register;
 80194e6:	f8a4 8000 	strh.w	r8, [r4]
 80194ea:	8067      	strh	r7, [r4, #2]
 80194ec:	80a6      	strh	r6, [r4, #4]
}
 80194ee:	4620      	mov	r0, r4
 80194f0:	b004      	add	sp, #16
 80194f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080194f8 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80194f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80194fc:	e9d0 8900 	ldrd	r8, r9, [r0]
	if (max_size() - size() < __n)
 8019500:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8019504:	4607      	mov	r7, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8019506:	eba9 0408 	sub.w	r4, r9, r8
 801950a:	468a      	mov	sl, r1
 801950c:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 801950e:	429c      	cmp	r4, r3
 8019510:	d102      	bne.n	8019518 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x20>
	  __throw_length_error(__N(__s));
 8019512:	481e      	ldr	r0, [pc, #120]	@ (801958c <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x94>)
 8019514:	f001 fa28 	bl	801a968 <_ZSt20__throw_length_errorPKc>
 8019518:	2c01      	cmp	r4, #1
 801951a:	4622      	mov	r2, r4
    { return __lhs.base() - __rhs.base(); }
 801951c:	eba1 0508 	sub.w	r5, r1, r8
 8019520:	bf38      	it	cc
 8019522:	2201      	movcc	r2, #1
 8019524:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8019526:	d22d      	bcs.n	8019584 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x8c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8019528:	b374      	cbz	r4, 8019588 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x90>
 801952a:	429c      	cmp	r4, r3
 801952c:	bf28      	it	cs
 801952e:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8019530:	4620      	mov	r0, r4
 8019532:	f001 f964 	bl	801a7fe <_Znwj>
 8019536:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8019538:	f89b 3000 	ldrb.w	r3, [fp]
      if (__count > 0)
 801953c:	2d00      	cmp	r5, #0
 801953e:	5573      	strb	r3, [r6, r5]
 8019540:	dd04      	ble.n	801954c <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x54>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8019542:	462a      	mov	r2, r5
 8019544:	4641      	mov	r1, r8
 8019546:	4630      	mov	r0, r6
 8019548:	f001 fc90 	bl	801ae6c <memmove>
      ptrdiff_t __count = __last - __first;
 801954c:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
 8019550:	3501      	adds	r5, #1
      if (__count > 0)
 8019552:	f1b9 0f00 	cmp.w	r9, #0
 8019556:	4435      	add	r5, r6
 8019558:	dd04      	ble.n	8019564 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x6c>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801955a:	464a      	mov	r2, r9
 801955c:	4651      	mov	r1, sl
 801955e:	4628      	mov	r0, r5
 8019560:	f001 fd7c 	bl	801b05c <memcpy>
      return __result + __count;
 8019564:	444d      	add	r5, r9
	if (__p)
 8019566:	f1b8 0f00 	cmp.w	r8, #0
 801956a:	d005      	beq.n	8019578 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x80>
		    this->_M_impl._M_end_of_storage - __old_start);
 801956c:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801956e:	4640      	mov	r0, r8
 8019570:	eba1 0108 	sub.w	r1, r1, r8
 8019574:	f001 f91e 	bl	801a7b4 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8019578:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801957c:	4426      	add	r6, r4
 801957e:	60be      	str	r6, [r7, #8]
    }
 8019580:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8019584:	461c      	mov	r4, r3
 8019586:	e7d3      	b.n	8019530 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x38>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8019588:	4626      	mov	r6, r4
 801958a:	e7d5      	b.n	8019538 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x40>
 801958c:	0801b17a 	.word	0x0801b17a

08019590 <_ZN17MasterSubscribers9AddFilterEhh>:
bool MasterSubscribers::AddFilter(uint8_t ID, uint8_t address) {
 8019590:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8019592:	f88d 2007 	strb.w	r2, [sp, #7]
	uint8_t index = FindSubscriberIndex(ID, &success);
 8019596:	f10d 020f 	add.w	r2, sp, #15
bool MasterSubscribers::AddFilter(uint8_t ID, uint8_t address) {
 801959a:	4604      	mov	r4, r0
	uint8_t index = FindSubscriberIndex(ID, &success);
 801959c:	f7ff fe4e 	bl	801923c <_ZN17MasterSubscribers19FindSubscriberIndexEhPb>
	if (!success) return false;
 80195a0:	f89d 500f 	ldrb.w	r5, [sp, #15]
	uint8_t index = FindSubscriberIndex(ID, &success);
 80195a4:	4601      	mov	r1, r0
	if (!success) return false;
 80195a6:	b91d      	cbnz	r5, 80195b0 <_ZN17MasterSubscribers9AddFilterEhh+0x20>
 80195a8:	2500      	movs	r5, #0
}
 80195aa:	4628      	mov	r0, r5
 80195ac:	b004      	add	sp, #16
 80195ae:	bd70      	pop	{r4, r5, r6, pc}
	return *(this->_M_impl._M_start + __n);
 80195b0:	b203      	sxth	r3, r0
 80195b2:	68e2      	ldr	r2, [r4, #12]
 80195b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80195b8:	00de      	lsls	r6, r3, #3
 80195ba:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	if (configurations[index].filters.size() > 0 && AddressAccepted(index, address)) // if address already filtered, return
 80195be:	e9d3 2307 	ldrd	r2, r3, [r3, #28]
 80195c2:	429a      	cmp	r2, r3
 80195c4:	d110      	bne.n	80195e8 <_ZN17MasterSubscribers9AddFilterEhh+0x58>
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 80195c6:	f04f 31ff 	mov.w	r1, #4294967295
 80195ca:	68a0      	ldr	r0, [r4, #8]
 80195cc:	f7f2 ffb2 	bl	800c534 <osSemaphoreAcquire>
 80195d0:	68e0      	ldr	r0, [r4, #12]
 80195d2:	4430      	add	r0, r6
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80195d4:	e9d0 1308 	ldrd	r1, r3, [r0, #32]
 80195d8:	4299      	cmp	r1, r3
 80195da:	d10d      	bne.n	80195f8 <_ZN17MasterSubscribers9AddFilterEhh+0x68>
	  _M_realloc_insert(end(), __x);
 80195dc:	f10d 0207 	add.w	r2, sp, #7
 80195e0:	301c      	adds	r0, #28
 80195e2:	f7ff ff89 	bl	80194f8 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>
 80195e6:	e00d      	b.n	8019604 <_ZN17MasterSubscribers9AddFilterEhh+0x74>
	if (configurations[index].filters.size() > 0 && AddressAccepted(index, address)) // if address already filtered, return
 80195e8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80195ec:	4620      	mov	r0, r4
 80195ee:	f7ff fe7d 	bl	80192ec <_ZN17MasterSubscribers15AddressAcceptedEhh>
 80195f2:	2800      	cmp	r0, #0
 80195f4:	d0e7      	beq.n	80195c6 <_ZN17MasterSubscribers9AddFilterEhh+0x36>
 80195f6:	e7d7      	b.n	80195a8 <_ZN17MasterSubscribers9AddFilterEhh+0x18>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80195f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80195fc:	700b      	strb	r3, [r1, #0]
	    ++this->_M_impl._M_finish;
 80195fe:	6a03      	ldr	r3, [r0, #32]
 8019600:	3301      	adds	r3, #1
 8019602:	6203      	str	r3, [r0, #32]
	osSemaphoreRelease(SubscribersSemaphore);
 8019604:	68a0      	ldr	r0, [r4, #8]
 8019606:	f7f2 ffc9 	bl	800c59c <osSemaphoreRelease>
	return true;
 801960a:	e7ce      	b.n	80195aa <_ZN17MasterSubscribers9AddFilterEhh+0x1a>

0801960c <_ZZN17MasterSubscribers12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 801960c:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 801960e:	4611      	mov	r1, r2
 8019610:	b508      	push	{r3, lr}
			if (length != 2) return false;
 8019612:	d105      	bne.n	8019620 <_ZZN17MasterSubscribers12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t+0x14>
			self->AddFilter(input[0], input[1]);
 8019614:	7852      	ldrb	r2, [r2, #1]
 8019616:	7809      	ldrb	r1, [r1, #0]
 8019618:	f7ff ffba 	bl	8019590 <_ZN17MasterSubscribers9AddFilterEhh>
 801961c:	2001      	movs	r0, #1
		}
 801961e:	bd08      	pop	{r3, pc}
			if (length != 2) return false;
 8019620:	2000      	movs	r0, #0
 8019622:	e7fc      	b.n	801961e <_ZZN17MasterSubscribers12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t+0x12>

08019624 <_ZN9Registers11AddRegisterIhEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 8019624:	b570      	push	{r4, r5, r6, lr}
 8019626:	4604      	mov	r4, r0
 8019628:	b086      	sub	sp, #24
 801962a:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801962c:	6800      	ldr	r0, [r0, #0]
 801962e:	f04f 31ff 	mov.w	r1, #4294967295
 8019632:	f7f2 ff7f 	bl	800c534 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 8019636:	f10d 0207 	add.w	r2, sp, #7
 801963a:	4631      	mov	r1, r6
 801963c:	4620      	mov	r0, r4
 801963e:	f7fe fd86 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 8019642:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8019646:	b125      	cbz	r5, 8019652 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 8019648:	6820      	ldr	r0, [r4, #0]
 801964a:	f7f2 ffa7 	bl	800c59c <osSemaphoreRelease>
}
 801964e:	b006      	add	sp, #24
 8019650:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8019652:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 8019656:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 801965a:	f7ff fd77 	bl	801914c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	configuration_.register_info = register_;
 801965e:	2301      	movs	r3, #1
 8019660:	f8ad 600a 	strh.w	r6, [sp, #10]
 8019664:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 8019668:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 801966c:	f88d 000c 	strb.w	r0, [sp, #12]
 8019670:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 8019674:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 8019678:	2b00      	cmp	r3, #0
 801967a:	d0e5      	beq.n	8019648 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
      push_back(const value_type& __x)
 801967c:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801967e:	e9d4 5302 	ldrd	r5, r3, [r4, #8]
 8019682:	429d      	cmp	r5, r3
 8019684:	d005      	beq.n	8019692 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x6e>
 8019686:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8019688:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 801968c:	3510      	adds	r5, #16
 801968e:	60a5      	str	r5, [r4, #8]
 8019690:	e7da      	b.n	8019648 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
	  _M_realloc_insert(end(), __x);
 8019692:	4629      	mov	r1, r5
 8019694:	1d20      	adds	r0, r4, #4
 8019696:	f7f5 fd5f 	bl	800f158 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 801969a:	e7d5      	b.n	8019648 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>

0801969c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 801969c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80196a0:	460c      	mov	r4, r1
 80196a2:	b087      	sub	sp, #28
 80196a4:	4606      	mov	r6, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80196a6:	f04f 31ff 	mov.w	r1, #4294967295
 80196aa:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 80196ac:	4698      	mov	r8, r3
 80196ae:	4691      	mov	r9, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80196b0:	f7f2 ff40 	bl	800c534 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80196b4:	4621      	mov	r1, r4
 80196b6:	f10d 0207 	add.w	r2, sp, #7
 80196ba:	4630      	mov	r0, r6
 80196bc:	f7fe fd47 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80196c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80196c4:	4604      	mov	r4, r0
	if (!success) {
 80196c6:	b92b      	cbnz	r3, 80196d4 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x38>
	osSemaphoreRelease(RegistersSemaphore);
 80196c8:	6830      	ldr	r0, [r6, #0]
 80196ca:	f7f2 ff67 	bl	800c59c <osSemaphoreRelease>
}
 80196ce:	b007      	add	sp, #28
 80196d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 80196d4:	f10d 0007 	add.w	r0, sp, #7
 80196d8:	f7ff fd38 	bl	801914c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 80196dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80196e0:	2b00      	cmp	r3, #0
 80196e2:	d0f1      	beq.n	80196c8 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (target_register->register_info.type != registered_type) {
 80196e4:	7923      	ldrb	r3, [r4, #4]
 80196e6:	4298      	cmp	r0, r3
 80196e8:	d1ee      	bne.n	80196c8 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (callbacks[target_register->register_info.type] == NULL) {
 80196ea:	3004      	adds	r0, #4
 80196ec:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
 80196f0:	2f00      	cmp	r7, #0
 80196f2:	d0e9      	beq.n	80196c8 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 80196f4:	7821      	ldrb	r1, [r4, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80196f6:	e9d7 3500 	ldrd	r3, r5, [r7]
 80196fa:	1aea      	subs	r2, r5, r3
 80196fc:	1112      	asrs	r2, r2, #4
 80196fe:	b9b1      	cbnz	r1, 801972e <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x92>
 8019700:	7861      	ldrb	r1, [r4, #1]
 8019702:	b9a1      	cbnz	r1, 801972e <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x92>
		callback.read = NULL;
 8019704:	9105      	str	r1, [sp, #20]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8019706:	68b9      	ldr	r1, [r7, #8]
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8019708:	8162      	strh	r2, [r4, #10]
      push_back(const value_type& __x)
 801970a:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801970c:	42a9      	cmp	r1, r5
		callback.write = write;
 801970e:	e9cd 9803 	strd	r9, r8, [sp, #12]
 8019712:	d008      	beq.n	8019726 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x8a>
 8019714:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8019716:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 801971a:	3510      	adds	r5, #16
 801971c:	607d      	str	r5, [r7, #4]
	target_register->mode.callbacks = true;
 801971e:	2301      	movs	r3, #1
 8019720:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 8019722:	7223      	strb	r3, [r4, #8]
 8019724:	e7d0      	b.n	80196c8 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	  _M_realloc_insert(end(), __x);
 8019726:	4638      	mov	r0, r7
 8019728:	f7f5 fdb2 	bl	800f290 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	} else {
 801972c:	e7f7      	b.n	801971e <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x82>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 801972e:	8961      	ldrh	r1, [r4, #10]
	if (__n >= this->size())
 8019730:	4291      	cmp	r1, r2
 8019732:	d302      	bcc.n	801973a <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x9e>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8019734:	4803      	ldr	r0, [pc, #12]	@ (8019744 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0xa8>)
 8019736:	f001 f91a 	bl	801a96e <_ZSt24__throw_out_of_range_fmtPKcz>
	return *(this->_M_impl._M_start + __n);
 801973a:	eb03 1301 	add.w	r3, r3, r1, lsl #4
		callback->write = write;
 801973e:	e9c3 9801 	strd	r9, r8, [r3, #4]
 8019742:	e7ec      	b.n	801971e <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x82>
 8019744:	0801b3bc 	.word	0x0801b3bc

08019748 <_ZN17MasterSubscribers12AddRegistersEv>:
void MasterSubscribers::AddRegisters(void) {
 8019748:	b510      	push	{r4, lr}
 801974a:	4604      	mov	r4, r0
	registers->AddRegister<uint8_t>(REG_SUB_SET_STATUS);
 801974c:	2120      	movs	r1, #32
 801974e:	6800      	ldr	r0, [r0, #0]
 8019750:	f7ff ff68 	bl	8019624 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_SUB_SET_STATUS, 2);
 8019754:	2202      	movs	r2, #2
 8019756:	2120      	movs	r1, #32
 8019758:	6820      	ldr	r0, [r4, #0]
 801975a:	f7fe fd4d 	bl	80181f8 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_SUB_SET_STATUS, (void*) this,
 801975e:	4b12      	ldr	r3, [pc, #72]	@ (80197a8 <_ZN17MasterSubscribers12AddRegistersEv+0x60>)
 8019760:	4622      	mov	r2, r4
 8019762:	6820      	ldr	r0, [r4, #0]
 8019764:	2120      	movs	r1, #32
 8019766:	f7ff ff99 	bl	801969c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_SUB_ADD_FILTER);
 801976a:	6820      	ldr	r0, [r4, #0]
 801976c:	2121      	movs	r1, #33	@ 0x21
 801976e:	f7ff ff59 	bl	8019624 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_SUB_ADD_FILTER, 2);
 8019772:	2202      	movs	r2, #2
 8019774:	2121      	movs	r1, #33	@ 0x21
 8019776:	6820      	ldr	r0, [r4, #0]
 8019778:	f7fe fd3e 	bl	80181f8 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_SUB_ADD_FILTER, (void*) this,
 801977c:	4622      	mov	r2, r4
 801977e:	4b0b      	ldr	r3, [pc, #44]	@ (80197ac <_ZN17MasterSubscribers12AddRegistersEv+0x64>)
 8019780:	2121      	movs	r1, #33	@ 0x21
 8019782:	6820      	ldr	r0, [r4, #0]
 8019784:	f7ff ff8a 	bl	801969c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_SUB_CLEAR_FILTERS);
 8019788:	6820      	ldr	r0, [r4, #0]
 801978a:	2122      	movs	r1, #34	@ 0x22
 801978c:	f7ff ff4a 	bl	8019624 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_SUB_CLEAR_FILTERS);
 8019790:	2122      	movs	r1, #34	@ 0x22
 8019792:	6820      	ldr	r0, [r4, #0]
 8019794:	f7fe fd14 	bl	80181c0 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_SUB_CLEAR_FILTERS, (void*) this,
 8019798:	4622      	mov	r2, r4
 801979a:	6820      	ldr	r0, [r4, #0]
 801979c:	2122      	movs	r1, #34	@ 0x22
 801979e:	4b04      	ldr	r3, [pc, #16]	@ (80197b0 <_ZN17MasterSubscribers12AddRegistersEv+0x68>)
}
 80197a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	registers->AddWriteCallback<uint8_t>(REG_SUB_CLEAR_FILTERS, (void*) this,
 80197a4:	f7ff bf7a 	b.w	801969c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
 80197a8:	080192cf 	.word	0x080192cf
 80197ac:	0801960d 	.word	0x0801960d
 80197b0:	08019383 	.word	0x08019383
 80197b4:	00000000 	.word	0x00000000

080197b8 <_ZN3CPG4stepEPaf>:
    //initialize the coupling and the phase shift matrices
    update_matrices();
    reset();
}

void CPG::step(int8_t* output, float delta_ms) {
 80197b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    float coupling_term;
    //Update CPG oscillators amplitude and phase
    for(uint8_t i=0;i<number_oscillators;i++) {
 80197bc:	f500 5600 	add.w	r6, r0, #8192	@ 0x2000
void CPG::step(int8_t* output, float delta_ms) {
 80197c0:	4604      	mov	r4, r0
 80197c2:	4605      	mov	r5, r0
 80197c4:	f200 331f 	addw	r3, r0, #799	@ 0x31f
 80197c8:	f500 6b16 	add.w	fp, r0, #2400	@ 0x960
    for(uint8_t i=0;i<number_oscillators;i++) {
 80197cc:	4607      	mov	r7, r0
 80197ce:	f04f 0800 	mov.w	r8, #0
void CPG::step(int8_t* output, float delta_ms) {
 80197d2:	ed2d 8b0a 	vpush	{d8-d12}
 80197d6:	b089      	sub	sp, #36	@ 0x24
    for(uint8_t i=0;i<number_oscillators;i++) {
 80197d8:	f896 227d 	ldrb.w	r2, [r6, #637]	@ 0x27d
void CPG::step(int8_t* output, float delta_ms) {
 80197dc:	eef0 aa40 	vmov.f32	s21, s0
 80197e0:	eeb6 ba00 	vmov.f32	s22, #96	@ 0x3f000000  0.5
 80197e4:	9103      	str	r1, [sp, #12]
            ampl_r=(ampl-ampl*param_direction)/2.0;
        }
        else {
            ampl_r=(ampl+ampl*param_direction)/2.0;
        }
        osc_ddr[i]  = param_a_r * (0.25*param_a_r * (ampl_r - osc_r[i]) - osc_dr[i]);
 80197e6:	eeb5 9b00 	vmov.f64	d9, #80	@ 0x3e800000  0.250
 80197ea:	eb00 0182 	add.w	r1, r0, r2, lsl #2
        osc_dtheta[i] = (2*M_PI*param_frequency + coupling_term);
 80197ee:	ed9f 8b94 	vldr	d8, [pc, #592]	@ 8019a40 <_ZN3CPG4stepEPaf+0x288>
 80197f2:	9101      	str	r1, [sp, #4]
    for(uint8_t i=0;i<number_oscillators;i++) {
 80197f4:	fa5f fa88 	uxtb.w	sl, r8
 80197f8:	4552      	cmp	r2, sl
 80197fa:	d81d      	bhi.n	8019838 <_ZN3CPG4stepEPaf+0x80>
    }
    for(uint8_t i=0;i<number_oscillators;i++) {
        //Euler integration
        osc_theta[i] += osc_dtheta[i]*delta_ms/1000.0;
 80197fc:	ed9f 5b92 	vldr	d5, [pc, #584]	@ 8019a48 <_ZN3CPG4stepEPaf+0x290>
    for(uint8_t i=0;i<number_oscillators;i++) {
 8019800:	9b01      	ldr	r3, [sp, #4]
 8019802:	42ab      	cmp	r3, r5
 8019804:	f040 80a4 	bne.w	8019950 <_ZN3CPG4stepEPaf+0x198>
        osc_dr[i] +=  osc_ddr[i]*delta_ms/1000.0;
        osc_r[i] +=   osc_dr[i]*delta_ms/1000.0;
    }
    //Compute joint positions by using left and right oscillators (and convert from radian to degree)
    for(uint8_t i=0;i<number_modules;i++) {
        float setpoint = (osc_r[i+number_modules]*(1.0+cos(osc_theta[i+number_modules])) - osc_r[i]*(1.0+cos(osc_theta[i])))*180/M_PI;
 8019808:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 801980c:	2700      	movs	r7, #0
    for(uint8_t i=0;i<number_modules;i++) {
 801980e:	f504 5900 	add.w	r9, r4, #8192	@ 0x2000
        //set a max angle for each joint
        setpoint = (MAX(setpoint, (-60)));
 8019812:	eddf ba93 	vldr	s23, [pc, #588]	@ 8019a60 <_ZN3CPG4stepEPaf+0x2a8>
        output[i] = (int8_t)(MIN(setpoint, (60)));
 8019816:	ed9f ca93 	vldr	s24, [pc, #588]	@ 8019a64 <_ZN3CPG4stepEPaf+0x2ac>
        float setpoint = (osc_r[i+number_modules]*(1.0+cos(osc_theta[i+number_modules])) - osc_r[i]*(1.0+cos(osc_theta[i])))*180/M_PI;
 801981a:	ed9f 8b8d 	vldr	d8, [pc, #564]	@ 8019a50 <_ZN3CPG4stepEPaf+0x298>
 801981e:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 8019a58 <_ZN3CPG4stepEPaf+0x2a0>
    for(uint8_t i=0;i<number_modules;i++) {
 8019822:	f899 527c 	ldrb.w	r5, [r9, #636]	@ 0x27c
 8019826:	b2fe      	uxtb	r6, r7
 8019828:	42b5      	cmp	r5, r6
 801982a:	f200 80c6 	bhi.w	80199ba <_ZN3CPG4stepEPaf+0x202>
    }
}
 801982e:	b009      	add	sp, #36	@ 0x24
 8019830:	ecbd 8b0a 	vpop	{d8-d12}
 8019834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            coupling_term += param_coupling_strength*osc_w[i][j]*osc_r[j]*sin(osc_theta[j]-osc_theta[i]-osc_phi[i][j]);
 8019838:	ed96 ca9d 	vldr	s24, [r6, #628]	@ 0x274
 801983c:	4658      	mov	r0, fp
 801983e:	edd7 ca78 	vldr	s25, [r7, #480]	@ 0x1e0
 8019842:	46a1      	mov	r9, r4
 8019844:	4619      	mov	r1, r3
        coupling_term = 0;
 8019846:	ed9f aa88 	vldr	s20, [pc, #544]	@ 8019a68 <_ZN3CPG4stepEPaf+0x2b0>
 801984a:	9702      	str	r7, [sp, #8]
            coupling_term += param_coupling_strength*osc_w[i][j]*osc_r[j]*sin(osc_theta[j]-osc_theta[i]-osc_phi[i][j]);
 801984c:	ecf9 ba01 	vldmia	r9!, {s23}
 8019850:	ecb0 0a01 	vldmia	r0!, {s0}
 8019854:	edd9 7a77 	vldr	s15, [r9, #476]	@ 0x1dc
 8019858:	9205      	str	r2, [sp, #20]
 801985a:	ee77 7aec 	vsub.f32	s15, s15, s25
 801985e:	9004      	str	r0, [sp, #16]
 8019860:	e9cd 3106 	strd	r3, r1, [sp, #24]
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8019864:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8019868:	f001 f8ba 	bl	801a9e0 <sinf>
 801986c:	9907      	ldr	r1, [sp, #28]
 801986e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8019872:	ee07 3a90 	vmov	s15, r3
        for(uint8_t j=0;j<number_oscillators;j++) {
 8019876:	9b01      	ldr	r3, [sp, #4]
            coupling_term += param_coupling_strength*osc_w[i][j]*osc_r[j]*sin(osc_theta[j]-osc_theta[i]-osc_phi[i][j]);
 8019878:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        for(uint8_t j=0;j<number_oscillators;j++) {
 801987c:	454b      	cmp	r3, r9
 801987e:	9b06      	ldr	r3, [sp, #24]
            coupling_term += param_coupling_strength*osc_w[i][j]*osc_r[j]*sin(osc_theta[j]-osc_theta[i]-osc_phi[i][j]);
 8019880:	ee67 7a8c 	vmul.f32	s15, s15, s24
        for(uint8_t j=0;j<number_oscillators;j++) {
 8019884:	e9dd 0204 	ldrd	r0, r2, [sp, #16]
            coupling_term += param_coupling_strength*osc_w[i][j]*osc_r[j]*sin(osc_theta[j]-osc_theta[i]-osc_phi[i][j]);
 8019888:	ee67 7aab 	vmul.f32	s15, s15, s23
 801988c:	eea7 aa80 	vfma.f32	s20, s15, s0
        for(uint8_t j=0;j<number_oscillators;j++) {
 8019890:	d1dc      	bne.n	801984c <_ZN3CPG4stepEPaf+0x94>
        osc_dtheta[i] = (2*M_PI*param_frequency + coupling_term);
 8019892:	ed96 6a98 	vldr	s12, [r6, #608]	@ 0x260
 8019896:	eeb7 7aca 	vcvt.f64.f32	d7, s20
 801989a:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 801989e:	eea6 7b08 	vfma.f64	d7, d6, d8
 80198a2:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 80198a6:	ed87 7aa0 	vstr	s14, [r7, #640]	@ 0x280
        if(number_modules > 1) {
 80198aa:	f896 127c 	ldrb.w	r1, [r6, #636]	@ 0x27c
                ampl = param_amplh + (param_amplc - param_amplh)/(number_modules-1)*(number_modules-i-1);
 80198ae:	ed96 7a9b 	vldr	s14, [r6, #620]	@ 0x26c
        if(number_modules > 1) {
 80198b2:	2901      	cmp	r1, #1
 80198b4:	d949      	bls.n	801994a <_ZN3CPG4stepEPaf+0x192>
                ampl = param_amplh + (param_amplc - param_amplh)/(number_modules-1)*(number_modules-i-1);
 80198b6:	1e48      	subs	r0, r1, #1
 80198b8:	edd6 6a9a 	vldr	s13, [r6, #616]	@ 0x268
            if(i < number_modules) {
 80198bc:	4551      	cmp	r1, sl
                ampl = param_amplh + (param_amplc - param_amplh)/(number_modules-1)*(number_modules-i-1);
 80198be:	ee07 0a90 	vmov	s15, r0
 80198c2:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80198c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80198ca:	ee86 6aa7 	vdiv.f32	s12, s13, s15
            if(i < number_modules) {
 80198ce:	d92e      	bls.n	801992e <_ZN3CPG4stepEPaf+0x176>
                ampl = param_amplh + (param_amplc - param_amplh)/(number_modules-1)*(number_modules-i-1);
 80198d0:	eba1 0108 	sub.w	r1, r1, r8
 80198d4:	3901      	subs	r1, #1
 80198d6:	ee07 1a90 	vmov	s15, r1
 80198da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80198de:	eea7 7a86 	vfma.f32	s14, s15, s12
            ampl_r=(ampl-ampl*param_direction)/2.0;
 80198e2:	edd6 7a99 	vldr	s15, [r6, #612]	@ 0x264
 80198e6:	eea7 7ac7 	vfms.f32	s14, s15, s14
        osc_ddr[i]  = param_a_r * (0.25*param_a_r * (ampl_r - osc_r[i]) - osc_dr[i]);
 80198ea:	ed96 6a9e 	vldr	s12, [r6, #632]	@ 0x278
            ampl_r=(ampl+ampl*param_direction)/2.0;
 80198ee:	ee27 7a0b 	vmul.f32	s14, s14, s22
        osc_ddr[i]  = param_a_r * (0.25*param_a_r * (ampl_r - osc_r[i]) - osc_dr[i]);
 80198f2:	9902      	ldr	r1, [sp, #8]
 80198f4:	3704      	adds	r7, #4
 80198f6:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 80198fa:	ed97 5a27 	vldr	s10, [r7, #156]	@ 0x9c
 80198fe:	edd1 7a00 	vldr	s15, [r1]
 8019902:	f108 0801 	add.w	r8, r8, #1
 8019906:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 801990a:	3328      	adds	r3, #40	@ 0x28
 801990c:	ee26 4b09 	vmul.f64	d4, d6, d9
 8019910:	f10b 0ba0 	add.w	fp, fp, #160	@ 0xa0
 8019914:	ee37 7a67 	vsub.f32	s14, s14, s15
 8019918:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 801991c:	ee94 5b07 	vfnms.f64	d5, d4, d7
 8019920:	ee26 6b05 	vmul.f64	d6, d6, d5
 8019924:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
 8019928:	ed87 6a4f 	vstr	s12, [r7, #316]	@ 0x13c
    for(uint8_t i=0;i<number_oscillators;i++) {
 801992c:	e762      	b.n	80197f4 <_ZN3CPG4stepEPaf+0x3c>
                ampl = param_amplh + (param_amplc - param_amplh)/(number_modules-1)*(2*number_modules-i-1);
 801992e:	ebc8 0141 	rsb	r1, r8, r1, lsl #1
 8019932:	3901      	subs	r1, #1
 8019934:	ee07 1a90 	vmov	s15, r1
 8019938:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801993c:	eea7 7a86 	vfma.f32	s14, s15, s12
            ampl_r=(ampl+ampl*param_direction)/2.0;
 8019940:	edd6 7a99 	vldr	s15, [r6, #612]	@ 0x264
 8019944:	eea7 7a87 	vfma.f32	s14, s15, s14
 8019948:	e7cf      	b.n	80198ea <_ZN3CPG4stepEPaf+0x132>
        if(i < number_modules) {
 801994a:	4551      	cmp	r1, sl
 801994c:	d9f8      	bls.n	8019940 <_ZN3CPG4stepEPaf+0x188>
 801994e:	e7c8      	b.n	80198e2 <_ZN3CPG4stepEPaf+0x12a>
        osc_theta[i] += osc_dtheta[i]*delta_ms/1000.0;
 8019950:	ed95 6aa0 	vldr	s12, [r5, #640]	@ 0x280
 8019954:	ee2a 6a86 	vmul.f32	s12, s21, s12
 8019958:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 801995c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8019960:	ed95 6a78 	vldr	s12, [r5, #480]	@ 0x1e0
 8019964:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8019968:	ee37 7b06 	vadd.f64	d7, d7, d6
        osc_dr[i] +=  osc_ddr[i]*delta_ms/1000.0;
 801996c:	ed95 6a50 	vldr	s12, [r5, #320]	@ 0x140
 8019970:	ee2a 6a86 	vmul.f32	s12, s21, s12
        osc_theta[i] += osc_dtheta[i]*delta_ms/1000.0;
 8019974:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
        osc_dr[i] +=  osc_ddr[i]*delta_ms/1000.0;
 8019978:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
        osc_theta[i] += osc_dtheta[i]*delta_ms/1000.0;
 801997c:	ed85 7a78 	vstr	s14, [r5, #480]	@ 0x1e0
        osc_dr[i] +=  osc_ddr[i]*delta_ms/1000.0;
 8019980:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8019984:	ed95 6a28 	vldr	s12, [r5, #160]	@ 0xa0
 8019988:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 801998c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8019990:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8019994:	ed85 7a28 	vstr	s14, [r5, #160]	@ 0xa0
        osc_r[i] +=   osc_dr[i]*delta_ms/1000.0;
 8019998:	ee27 7a2a 	vmul.f32	s14, s14, s21
 801999c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80199a0:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80199a4:	ed95 7a00 	vldr	s14, [r5]
 80199a8:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80199ac:	ee36 7b07 	vadd.f64	d7, d6, d7
 80199b0:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 80199b4:	eca5 7a01 	vstmia	r5!, {s14}
    for(uint8_t i=0;i<number_oscillators;i++) {
 80199b8:	e722      	b.n	8019800 <_ZN3CPG4stepEPaf+0x48>
        float setpoint = (osc_r[i+number_modules]*(1.0+cos(osc_theta[i+number_modules])) - osc_r[i]*(1.0+cos(osc_theta[i])))*180/M_PI;
 80199ba:	4435      	add	r5, r6
 80199bc:	eb04 0886 	add.w	r8, r4, r6, lsl #2
 80199c0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
  { return __builtin_cosf(__x); }
 80199c4:	ed95 0a78 	vldr	s0, [r5, #480]	@ 0x1e0
 80199c8:	f001 f8ce 	bl	801ab68 <cosf>
 80199cc:	eeb0 ba40 	vmov.f32	s22, s0
 80199d0:	ed98 0a78 	vldr	s0, [r8, #480]	@ 0x1e0
 80199d4:	f001 f8c8 	bl	801ab68 <cosf>
 80199d8:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 80199dc:	ed98 4a00 	vldr	s8, [r8]
 80199e0:	eeb7 6acb 	vcvt.f64.f32	d6, s22
 80199e4:	ed95 5a00 	vldr	s10, [r5]
 80199e8:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
 80199ec:	ee37 7b0a 	vadd.f64	d7, d7, d10
 80199f0:	ee36 6b0a 	vadd.f64	d6, d6, d10
 80199f4:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 80199f8:	ee27 7b44 	vnmul.f64	d7, d7, d4
 80199fc:	eea5 7b06 	vfma.f64	d7, d5, d6
 8019a00:	ee27 7b08 	vmul.f64	d7, d7, d8
 8019a04:	ee87 6b09 	vdiv.f64	d6, d7, d9
 8019a08:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
        setpoint = (MAX(setpoint, (-60)));
 8019a0c:	eeb4 6aeb 	vcmpe.f32	s12, s23
 8019a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a14:	dd0e      	ble.n	8019a34 <_ZN3CPG4stepEPaf+0x27c>
        output[i] = (int8_t)(MIN(setpoint, (60)));
 8019a16:	eeb4 6acc 	vcmpe.f32	s12, s24
 8019a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a1e:	d50c      	bpl.n	8019a3a <_ZN3CPG4stepEPaf+0x282>
 8019a20:	eefd 7ac6 	vcvt.s32.f32	s15, s12
 8019a24:	edcd 7a01 	vstr	s15, [sp, #4]
 8019a28:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 8019a2c:	9a03      	ldr	r2, [sp, #12]
 8019a2e:	3701      	adds	r7, #1
 8019a30:	5593      	strb	r3, [r2, r6]
    for(uint8_t i=0;i<number_modules;i++) {
 8019a32:	e6f6      	b.n	8019822 <_ZN3CPG4stepEPaf+0x6a>
        setpoint = (MAX(setpoint, (-60)));
 8019a34:	eeb0 6a6b 	vmov.f32	s12, s23
 8019a38:	e7f2      	b.n	8019a20 <_ZN3CPG4stepEPaf+0x268>
        output[i] = (int8_t)(MIN(setpoint, (60)));
 8019a3a:	233c      	movs	r3, #60	@ 0x3c
 8019a3c:	e7f6      	b.n	8019a2c <_ZN3CPG4stepEPaf+0x274>
 8019a3e:	bf00      	nop
 8019a40:	54442d18 	.word	0x54442d18
 8019a44:	401921fb 	.word	0x401921fb
 8019a48:	00000000 	.word	0x00000000
 8019a4c:	408f4000 	.word	0x408f4000
 8019a50:	00000000 	.word	0x00000000
 8019a54:	40668000 	.word	0x40668000
 8019a58:	54442d18 	.word	0x54442d18
 8019a5c:	400921fb 	.word	0x400921fb
 8019a60:	c2700000 	.word	0xc2700000
 8019a64:	42700000 	.word	0x42700000
 8019a68:	00000000 	.word	0x00000000

08019a6c <_ZN3CPG5resetEv>:

void CPG::reset(void) {
    //reset the oscillators states
    for(uint8_t i=0;i<MAX_OSCILLATORS;i++) {
        osc_r[i] = 0;
 8019a6c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8019a70:	2100      	movs	r1, #0
 8019a72:	f001 ba15 	b.w	801aea0 <memset>

08019a76 <_ZN3CPG13set_frequencyEf>:
    update_matrices();
    reset();
}

void CPG::set_frequency(float frequency) {
    param_frequency = frequency;
 8019a76:	f500 5000 	add.w	r0, r0, #8192	@ 0x2000
 8019a7a:	ed80 0a98 	vstr	s0, [r0, #608]	@ 0x260
}
 8019a7e:	4770      	bx	lr

08019a80 <_ZN3CPG13set_directionEf>:

void CPG::set_direction(float direction) {
    param_direction = direction;
 8019a80:	f500 5000 	add.w	r0, r0, #8192	@ 0x2000
 8019a84:	ed80 0a99 	vstr	s0, [r0, #612]	@ 0x264
}
 8019a88:	4770      	bx	lr

08019a8a <_ZN3CPG9set_amplcEf>:

void CPG::set_amplc(float amplc) {
    param_amplc = amplc;
 8019a8a:	f500 5000 	add.w	r0, r0, #8192	@ 0x2000
 8019a8e:	ed80 0a9a 	vstr	s0, [r0, #616]	@ 0x268
}
 8019a92:	4770      	bx	lr

08019a94 <_ZN3CPG9set_amplhEf>:

void CPG::set_amplh(float amplh) {
    param_amplh = amplh;
 8019a94:	f500 5000 	add.w	r0, r0, #8192	@ 0x2000
 8019a98:	ed80 0a9b 	vstr	s0, [r0, #620]	@ 0x26c
}
 8019a9c:	4770      	bx	lr

08019a9e <_ZN3CPG21set_coupling_strengthEf>:
    param_nwave = nwave;
    update_matrices();
}

void CPG::set_coupling_strength(float coupling_strength) {
    param_coupling_strength = coupling_strength;
 8019a9e:	f500 5000 	add.w	r0, r0, #8192	@ 0x2000
 8019aa2:	ed80 0a9d 	vstr	s0, [r0, #628]	@ 0x274
}
 8019aa6:	4770      	bx	lr

08019aa8 <_ZN3CPG7set_a_rEf>:

void CPG::set_a_r(float a_r) {
    param_a_r = a_r;
 8019aa8:	f500 5000 	add.w	r0, r0, #8192	@ 0x2000
 8019aac:	ed80 0a9e 	vstr	s0, [r0, #632]	@ 0x278
}
 8019ab0:	4770      	bx	lr
 8019ab2:	0000      	movs	r0, r0
 8019ab4:	0000      	movs	r0, r0
	...

08019ab8 <_ZN3CPG15update_matricesEv>:

//function to update the phi matrix called when the value of param_nwave or number_modules changes
void CPG::update_matrices(void) {
    //determines the phase shifts between modules to have the desired phase shift between head and end of tail
    float dphi = (param_nwave*2.0*M_PI)/(number_modules);
 8019ab8:	f500 5300 	add.w	r3, r0, #8192	@ 0x2000
    //fill the coupling matrix and the phase shift matrix
    for(uint8_t i=0;i<number_oscillators;i++) {
 8019abc:	2200      	movs	r2, #0
    float dphi = (param_nwave*2.0*M_PI)/(number_modules);
 8019abe:	ed93 7a9c 	vldr	s14, [r3, #624]	@ 0x270
 8019ac2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8019ac6:	ed9f 6b2a 	vldr	d6, [pc, #168]	@ 8019b70 <_ZN3CPG15update_matricesEv+0xb8>
 8019aca:	ee37 7b07 	vadd.f64	d7, d7, d7
void CPG::update_matrices(void) {
 8019ace:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    float dphi = (param_nwave*2.0*M_PI)/(number_modules);
 8019ad2:	f893 127c 	ldrb.w	r1, [r3, #636]	@ 0x27c
 8019ad6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019ada:	f200 351f 	addw	r5, r0, #799	@ 0x31f
    for(uint8_t i=0;i<number_oscillators;i++) {
 8019ade:	f893 627d 	ldrb.w	r6, [r3, #637]	@ 0x27d
    float dphi = (param_nwave*2.0*M_PI)/(number_modules);
 8019ae2:	ee06 1a90 	vmov	s13, r1
 8019ae6:	f500 6016 	add.w	r0, r0, #2400	@ 0x960
 8019aea:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8019aee:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8019af2:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8019b78 <_ZN3CPG15update_matricesEv+0xc0>
 8019af6:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
            else if((j==(number_modules+i))) {
                osc_w[i][j] = 1;
                osc_phi[i][j] = M_PI;
            }
            //if both oscillators are on the same joint
            else if((j==(i-number_modules))) {
 8019afa:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8019b7c <_ZN3CPG15update_matricesEv+0xc4>
                osc_phi[i][j] = -dphi;
 8019afe:	eef1 5a46 	vneg.f32	s11, s12
    for(uint8_t i=0;i<number_oscillators;i++) {
 8019b02:	b2d3      	uxtb	r3, r2
 8019b04:	429e      	cmp	r6, r3
 8019b06:	d801      	bhi.n	8019b0c <_ZN3CPG15update_matricesEv+0x54>
                osc_w[i][j] = 0;
                osc_phi[i][j] = 0;
            }
        }
    }
 8019b08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019b0c:	1c57      	adds	r7, r2, #1
            else if((j==(i-1)) && (j!=number_modules)) {
 8019b0e:	f102 38ff 	add.w	r8, r2, #4294967295
            else if((j==(number_modules+i))) {
 8019b12:	eb02 0901 	add.w	r9, r2, r1
 8019b16:	4684      	mov	ip, r0
 8019b18:	46ae      	mov	lr, r5
 8019b1a:	2300      	movs	r3, #0
            else if((j==(i-number_modules))) {
 8019b1c:	1a52      	subs	r2, r2, r1
            if ((j==(i+1)) && (j!=number_modules)) {
 8019b1e:	42bb      	cmp	r3, r7
 8019b20:	d106      	bne.n	8019b30 <_ZN3CPG15update_matricesEv+0x78>
 8019b22:	b2dc      	uxtb	r4, r3
 8019b24:	42a1      	cmp	r1, r4
 8019b26:	d003      	beq.n	8019b30 <_ZN3CPG15update_matricesEv+0x78>
                osc_phi[i][j] = -dphi;
 8019b28:	eef0 7a65 	vmov.f32	s15, s11
 8019b2c:	2401      	movs	r4, #1
 8019b2e:	e00c      	b.n	8019b4a <_ZN3CPG15update_matricesEv+0x92>
            else if((j==(i-1)) && (j!=number_modules)) {
 8019b30:	4543      	cmp	r3, r8
 8019b32:	d102      	bne.n	8019b3a <_ZN3CPG15update_matricesEv+0x82>
 8019b34:	b2dc      	uxtb	r4, r3
 8019b36:	42a1      	cmp	r1, r4
 8019b38:	d113      	bne.n	8019b62 <_ZN3CPG15update_matricesEv+0xaa>
            else if((j==(number_modules+i))) {
 8019b3a:	454b      	cmp	r3, r9
 8019b3c:	d014      	beq.n	8019b68 <_ZN3CPG15update_matricesEv+0xb0>
            else if((j==(i-number_modules))) {
 8019b3e:	4293      	cmp	r3, r2
 8019b40:	bf14      	ite	ne
 8019b42:	2400      	movne	r4, #0
 8019b44:	2401      	moveq	r4, #1
 8019b46:	fe47 7a26 	vseleq.f32	s15, s14, s13
        for(uint8_t j=0;j<number_oscillators;j++) {
 8019b4a:	3301      	adds	r3, #1
                osc_w[i][j] = 1;
 8019b4c:	f80e 4f01 	strb.w	r4, [lr, #1]!
                osc_phi[i][j] = -dphi;
 8019b50:	ecec 7a01 	vstmia	ip!, {s15}
        for(uint8_t j=0;j<number_oscillators;j++) {
 8019b54:	b2dc      	uxtb	r4, r3
 8019b56:	42a6      	cmp	r6, r4
 8019b58:	d8e1      	bhi.n	8019b1e <_ZN3CPG15update_matricesEv+0x66>
    for(uint8_t i=0;i<number_oscillators;i++) {
 8019b5a:	3528      	adds	r5, #40	@ 0x28
 8019b5c:	30a0      	adds	r0, #160	@ 0xa0
        for(uint8_t j=0;j<number_oscillators;j++) {
 8019b5e:	463a      	mov	r2, r7
 8019b60:	e7cf      	b.n	8019b02 <_ZN3CPG15update_matricesEv+0x4a>
 8019b62:	eef0 7a46 	vmov.f32	s15, s12
 8019b66:	e7e1      	b.n	8019b2c <_ZN3CPG15update_matricesEv+0x74>
 8019b68:	eef0 7a47 	vmov.f32	s15, s14
 8019b6c:	2401      	movs	r4, #1
 8019b6e:	e7ec      	b.n	8019b4a <_ZN3CPG15update_matricesEv+0x92>
 8019b70:	54442d18 	.word	0x54442d18
 8019b74:	400921fb 	.word	0x400921fb
 8019b78:	40490fdb 	.word	0x40490fdb
 8019b7c:	00000000 	.word	0x00000000

08019b80 <_ZN3CPG4initEhfffffff>:
    number_modules = nb_modules;
 8019b80:	f500 5300 	add.w	r3, r0, #8192	@ 0x2000
    float a_r) {
 8019b84:	b510      	push	{r4, lr}
    number_modules = nb_modules;
 8019b86:	f883 127c 	strb.w	r1, [r3, #636]	@ 0x27c
    number_oscillators = number_modules*2;
 8019b8a:	0049      	lsls	r1, r1, #1
    float a_r) {
 8019b8c:	4604      	mov	r4, r0
    param_frequency = frequency;
 8019b8e:	ed83 0a98 	vstr	s0, [r3, #608]	@ 0x260
    number_oscillators = number_modules*2;
 8019b92:	f883 127d 	strb.w	r1, [r3, #637]	@ 0x27d
    param_direction = direction;
 8019b96:	edc3 0a99 	vstr	s1, [r3, #612]	@ 0x264
    param_amplc = amplc;
 8019b9a:	ed83 1a9a 	vstr	s2, [r3, #616]	@ 0x268
    param_amplh = amplh;
 8019b9e:	edc3 1a9b 	vstr	s3, [r3, #620]	@ 0x26c
    param_nwave = nwave;
 8019ba2:	ed83 2a9c 	vstr	s4, [r3, #624]	@ 0x270
    param_coupling_strength = coupling_strength;
 8019ba6:	edc3 2a9d 	vstr	s5, [r3, #628]	@ 0x274
    param_a_r = a_r;
 8019baa:	ed83 3a9e 	vstr	s6, [r3, #632]	@ 0x278
    update_matrices();
 8019bae:	f7ff ff83 	bl	8019ab8 <_ZN3CPG15update_matricesEv>
    reset();
 8019bb2:	4620      	mov	r0, r4
}
 8019bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    reset();
 8019bb8:	f7ff bf58 	b.w	8019a6c <_ZN3CPG5resetEv>

08019bbc <_ZN3CPG9set_nwaveEf>:
    param_nwave = nwave;
 8019bbc:	f500 5300 	add.w	r3, r0, #8192	@ 0x2000
 8019bc0:	ed83 0a9c 	vstr	s0, [r3, #624]	@ 0x270
    update_matrices();
 8019bc4:	f7ff bf78 	b.w	8019ab8 <_ZN3CPG15update_matricesEv>

08019bc8 <_ZZL8UserTaskPvENUlS_tPatE_4_FUNES_tS0_t>:
	registers->SetRegisterAsSingle(REG_CPG_RESET);
	registers->AddRegisterPointer<int8_t>(REG_CPG_RESET, &reg_cpg_reset);
	registers->SetRegisterPermissions(REG_CPG_RESET, WRITE_PERMISSION);
	registers->AddWriteCallback<int8_t>(REG_CPG_RESET, argument,
		[](void* context , uint16_t register_ID , int8_t* input , uint16_t length) -> bool {
		cpg.reset();
 8019bc8:	4802      	ldr	r0, [pc, #8]	@ (8019bd4 <_ZZL8UserTaskPvENUlS_tPatE_4_FUNES_tS0_t+0xc>)
		[](void* context , uint16_t register_ID , int8_t* input , uint16_t length) -> bool {
 8019bca:	b508      	push	{r3, lr}
		cpg.reset();
 8019bcc:	f7ff ff4e 	bl	8019a6c <_ZN3CPG5resetEv>
		return true;
	});
 8019bd0:	2001      	movs	r0, #1
 8019bd2:	bd08      	pop	{r3, pc}
 8019bd4:	240071b0 	.word	0x240071b0

08019bd8 <_ZZL8UserTaskPvENUlS_tPftE0_4_FUNES_tS0_t>:
	registers->SetRegisterAsSingle(REG_CPG_FREQUENCY);
	registers->AddRegisterPointer<float>(REG_CPG_FREQUENCY, &reg_cpg_frequency);
	registers->SetRegisterPermissions(REG_CPG_FREQUENCY, WRITE_PERMISSION);
	registers->AddWriteCallback<float>(REG_CPG_FREQUENCY, argument,
		[](void* context , uint16_t register_ID , float* input , uint16_t length) -> bool {
		cpg.set_frequency(*input);
 8019bd8:	ed92 0a00 	vldr	s0, [r2]
 8019bdc:	4802      	ldr	r0, [pc, #8]	@ (8019be8 <_ZZL8UserTaskPvENUlS_tPftE0_4_FUNES_tS0_t+0x10>)
		[](void* context , uint16_t register_ID , float* input , uint16_t length) -> bool {
 8019bde:	b508      	push	{r3, lr}
		cpg.set_frequency(*input);
 8019be0:	f7ff ff49 	bl	8019a76 <_ZN3CPG13set_frequencyEf>
		return true;
	});
 8019be4:	2001      	movs	r0, #1
 8019be6:	bd08      	pop	{r3, pc}
 8019be8:	240071b0 	.word	0x240071b0

08019bec <_ZZL8UserTaskPvENUlS_tPftE1_4_FUNES_tS0_t>:
	registers->SetRegisterAsSingle(REG_CPG_DIRECTION);
	registers->AddRegisterPointer<float>(REG_CPG_DIRECTION, &reg_cpg_direction);
	registers->SetRegisterPermissions(REG_CPG_DIRECTION, WRITE_PERMISSION);
	registers->AddWriteCallback<float>(REG_CPG_DIRECTION, argument,
		[](void* context , uint16_t register_ID , float* input , uint16_t length) -> bool {
		cpg.set_direction(*input);
 8019bec:	ed92 0a00 	vldr	s0, [r2]
 8019bf0:	4802      	ldr	r0, [pc, #8]	@ (8019bfc <_ZZL8UserTaskPvENUlS_tPftE1_4_FUNES_tS0_t+0x10>)
		[](void* context , uint16_t register_ID , float* input , uint16_t length) -> bool {
 8019bf2:	b508      	push	{r3, lr}
		cpg.set_direction(*input);
 8019bf4:	f7ff ff44 	bl	8019a80 <_ZN3CPG13set_directionEf>
		return true;
	});
 8019bf8:	2001      	movs	r0, #1
 8019bfa:	bd08      	pop	{r3, pc}
 8019bfc:	240071b0 	.word	0x240071b0

08019c00 <_ZZL8UserTaskPvENUlS_tPftE2_4_FUNES_tS0_t>:
	registers->SetRegisterAsSingle(REG_CPG_AMPLC);
	registers->AddRegisterPointer<float>(REG_CPG_AMPLC, &reg_cpg_amplc);
	registers->SetRegisterPermissions(REG_CPG_AMPLC, WRITE_PERMISSION);
	registers->AddWriteCallback<float>(REG_CPG_AMPLC, argument,
		[](void* context , uint16_t register_ID , float* input , uint16_t length) -> bool {
		cpg.set_amplc(*input);
 8019c00:	ed92 0a00 	vldr	s0, [r2]
 8019c04:	4802      	ldr	r0, [pc, #8]	@ (8019c10 <_ZZL8UserTaskPvENUlS_tPftE2_4_FUNES_tS0_t+0x10>)
		[](void* context , uint16_t register_ID , float* input , uint16_t length) -> bool {
 8019c06:	b508      	push	{r3, lr}
		cpg.set_amplc(*input);
 8019c08:	f7ff ff3f 	bl	8019a8a <_ZN3CPG9set_amplcEf>
		return true;
	});
 8019c0c:	2001      	movs	r0, #1
 8019c0e:	bd08      	pop	{r3, pc}
 8019c10:	240071b0 	.word	0x240071b0

08019c14 <_ZZL8UserTaskPvENUlS_tPftE3_4_FUNES_tS0_t>:
	registers->SetRegisterAsSingle(REG_CPG_AMPLH);
	registers->AddRegisterPointer<float>(REG_CPG_AMPLH, &reg_cpg_amplh);
	registers->SetRegisterPermissions(REG_CPG_AMPLH, WRITE_PERMISSION);
	registers->AddWriteCallback<float>(REG_CPG_AMPLH, argument,
		[](void* context , uint16_t register_ID , float* input , uint16_t length) -> bool {
		cpg.set_amplh(*input);
 8019c14:	ed92 0a00 	vldr	s0, [r2]
 8019c18:	4802      	ldr	r0, [pc, #8]	@ (8019c24 <_ZZL8UserTaskPvENUlS_tPftE3_4_FUNES_tS0_t+0x10>)
		[](void* context , uint16_t register_ID , float* input , uint16_t length) -> bool {
 8019c1a:	b508      	push	{r3, lr}
		cpg.set_amplh(*input);
 8019c1c:	f7ff ff3a 	bl	8019a94 <_ZN3CPG9set_amplhEf>
		return true;
	});
 8019c20:	2001      	movs	r0, #1
 8019c22:	bd08      	pop	{r3, pc}
 8019c24:	240071b0 	.word	0x240071b0

08019c28 <_ZZL8UserTaskPvENUlS_tPftE4_4_FUNES_tS0_t>:
	registers->SetRegisterAsSingle(REG_CPG_NWAVE);
	registers->AddRegisterPointer<float>(REG_CPG_NWAVE, &reg_cpg_nwave);
	registers->SetRegisterPermissions(REG_CPG_NWAVE, WRITE_PERMISSION);
	registers->AddWriteCallback<float>(REG_CPG_NWAVE, argument,
		[](void* context , uint16_t register_ID , float* input , uint16_t length) -> bool {
		cpg.set_nwave(*input);
 8019c28:	ed92 0a00 	vldr	s0, [r2]
 8019c2c:	4802      	ldr	r0, [pc, #8]	@ (8019c38 <_ZZL8UserTaskPvENUlS_tPftE4_4_FUNES_tS0_t+0x10>)
		[](void* context , uint16_t register_ID , float* input , uint16_t length) -> bool {
 8019c2e:	b508      	push	{r3, lr}
		cpg.set_nwave(*input);
 8019c30:	f7ff ffc4 	bl	8019bbc <_ZN3CPG9set_nwaveEf>
		return true;
	});
 8019c34:	2001      	movs	r0, #1
 8019c36:	bd08      	pop	{r3, pc}
 8019c38:	240071b0 	.word	0x240071b0

08019c3c <_ZZL8UserTaskPvENUlS_tPftE5_4_FUNES_tS0_t>:
	registers->SetRegisterAsSingle(REG_CPG_COUPLING_STRENGTH);
	registers->AddRegisterPointer<float>(REG_CPG_COUPLING_STRENGTH, &reg_cpg_coupling_strength);
	registers->SetRegisterPermissions(REG_CPG_COUPLING_STRENGTH, WRITE_PERMISSION);
	registers->AddWriteCallback<float>(REG_CPG_COUPLING_STRENGTH, argument,
		[](void* context , uint16_t register_ID , float* input , uint16_t length) -> bool {
		cpg.set_coupling_strength(*input);
 8019c3c:	ed92 0a00 	vldr	s0, [r2]
 8019c40:	4802      	ldr	r0, [pc, #8]	@ (8019c4c <_ZZL8UserTaskPvENUlS_tPftE5_4_FUNES_tS0_t+0x10>)
		[](void* context , uint16_t register_ID , float* input , uint16_t length) -> bool {
 8019c42:	b508      	push	{r3, lr}
		cpg.set_coupling_strength(*input);
 8019c44:	f7ff ff2b 	bl	8019a9e <_ZN3CPG21set_coupling_strengthEf>
		return true;
	});
 8019c48:	2001      	movs	r0, #1
 8019c4a:	bd08      	pop	{r3, pc}
 8019c4c:	240071b0 	.word	0x240071b0

08019c50 <_ZZL8UserTaskPvENUlS_tPftE6_4_FUNES_tS0_t>:
	registers->SetRegisterAsSingle(REG_CPG_A_R);
	registers->AddRegisterPointer<float>(REG_CPG_A_R, &reg_cpg_a_r);
	registers->SetRegisterPermissions(REG_CPG_A_R, WRITE_PERMISSION);
	registers->AddWriteCallback<float>(REG_CPG_A_R, argument,
		[](void* context , uint16_t register_ID , float* input , uint16_t length) -> bool {
		cpg.set_a_r(*input);
 8019c50:	ed92 0a00 	vldr	s0, [r2]
 8019c54:	4802      	ldr	r0, [pc, #8]	@ (8019c60 <_ZZL8UserTaskPvENUlS_tPftE6_4_FUNES_tS0_t+0x10>)
		[](void* context , uint16_t register_ID , float* input , uint16_t length) -> bool {
 8019c56:	b508      	push	{r3, lr}
		cpg.set_a_r(*input);
 8019c58:	f7ff ff26 	bl	8019aa8 <_ZN3CPG7set_a_rEf>
		return true;
	});
 8019c5c:	2001      	movs	r0, #1
 8019c5e:	bd08      	pop	{r3, pc}
 8019c60:	240071b0 	.word	0x240071b0

08019c64 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 8019c64:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8019c66:	4926      	ldr	r1, [pc, #152]	@ (8019d00 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 8019c68:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8019c6a:	4826      	ldr	r0, [pc, #152]	@ (8019d04 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 8019c6c:	f000 fe5e 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8019c70:	2800      	cmp	r0, #0
 8019c72:	d133      	bne.n	8019cdc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8019c74:	4924      	ldr	r1, [pc, #144]	@ (8019d08 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa4>)
 8019c76:	4823      	ldr	r0, [pc, #140]	@ (8019d04 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 8019c78:	f000 fe58 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8019c7c:	2800      	cmp	r0, #0
 8019c7e:	d12f      	bne.n	8019ce0 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8019c80:	4922      	ldr	r1, [pc, #136]	@ (8019d0c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa8>)
 8019c82:	4820      	ldr	r0, [pc, #128]	@ (8019d04 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 8019c84:	f000 fe52 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8019c88:	bb60      	cbnz	r0, 8019ce4 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8019c8a:	4921      	ldr	r1, [pc, #132]	@ (8019d10 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xac>)
 8019c8c:	481d      	ldr	r0, [pc, #116]	@ (8019d04 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 8019c8e:	f000 fe4d 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8019c92:	bb48      	cbnz	r0, 8019ce8 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8019c94:	491f      	ldr	r1, [pc, #124]	@ (8019d14 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xb0>)
 8019c96:	481b      	ldr	r0, [pc, #108]	@ (8019d04 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 8019c98:	f000 fe48 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8019c9c:	bb30      	cbnz	r0, 8019cec <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 8019c9e:	491e      	ldr	r1, [pc, #120]	@ (8019d18 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xb4>)
 8019ca0:	4818      	ldr	r0, [pc, #96]	@ (8019d04 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 8019ca2:	f000 fe43 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8019ca6:	bb18      	cbnz	r0, 8019cf0 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8019ca8:	491c      	ldr	r1, [pc, #112]	@ (8019d1c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xb8>)
 8019caa:	4816      	ldr	r0, [pc, #88]	@ (8019d04 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 8019cac:	f000 fe3e 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8019cb0:	bb00      	cbnz	r0, 8019cf4 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 8019cb2:	491b      	ldr	r1, [pc, #108]	@ (8019d20 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xbc>)
 8019cb4:	4813      	ldr	r0, [pc, #76]	@ (8019d04 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 8019cb6:	f000 fe39 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8019cba:	b9e8      	cbnz	r0, 8019cf8 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8019cbc:	4911      	ldr	r1, [pc, #68]	@ (8019d04 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 8019cbe:	4608      	mov	r0, r1
 8019cc0:	f000 fe34 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8019cc4:	b9d0      	cbnz	r0, 8019cfc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 8019cc6:	4917      	ldr	r1, [pc, #92]	@ (8019d24 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xc0>)
 8019cc8:	480e      	ldr	r0, [pc, #56]	@ (8019d04 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 8019cca:	f000 fe2f 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 8019cce:	2800      	cmp	r0, #0
 8019cd0:	bf14      	ite	ne
 8019cd2:	2309      	movne	r3, #9
 8019cd4:	2300      	moveq	r3, #0
 8019cd6:	7020      	strb	r0, [r4, #0]
}
 8019cd8:	4618      	mov	r0, r3
 8019cda:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8019cdc:	2300      	movs	r3, #0
 8019cde:	e7fa      	b.n	8019cd6 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8019ce0:	2301      	movs	r3, #1
 8019ce2:	e7f8      	b.n	8019cd6 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8019ce4:	2302      	movs	r3, #2
 8019ce6:	e7f6      	b.n	8019cd6 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8019ce8:	2303      	movs	r3, #3
 8019cea:	e7f4      	b.n	8019cd6 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8019cec:	2304      	movs	r3, #4
 8019cee:	e7f2      	b.n	8019cd6 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 8019cf0:	2305      	movs	r3, #5
 8019cf2:	e7f0      	b.n	8019cd6 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8019cf4:	2306      	movs	r3, #6
 8019cf6:	e7ee      	b.n	8019cd6 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 8019cf8:	2307      	movs	r3, #7
 8019cfa:	e7ec      	b.n	8019cd6 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8019cfc:	2308      	movs	r3, #8
 8019cfe:	e7ea      	b.n	8019cd6 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
 8019d00:	0801b5d4 	.word	0x0801b5d4
 8019d04:	0801b59c 	.word	0x0801b59c
 8019d08:	0801b5c4 	.word	0x0801b5c4
 8019d0c:	0801b5b4 	.word	0x0801b5b4
 8019d10:	0801b5a4 	.word	0x0801b5a4
 8019d14:	0801b5dc 	.word	0x0801b5dc
 8019d18:	0801b5cc 	.word	0x0801b5cc
 8019d1c:	0801b5bc 	.word	0x0801b5bc
 8019d20:	0801b5ac 	.word	0x0801b5ac
 8019d24:	0801b594 	.word	0x0801b594

08019d28 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 8019d28:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8019d2a:	4926      	ldr	r1, [pc, #152]	@ (8019dc4 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 8019d2c:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8019d2e:	4826      	ldr	r0, [pc, #152]	@ (8019dc8 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 8019d30:	f000 fdfc 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8019d34:	2800      	cmp	r0, #0
 8019d36:	d133      	bne.n	8019da0 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8019d38:	4924      	ldr	r1, [pc, #144]	@ (8019dcc <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa4>)
 8019d3a:	4823      	ldr	r0, [pc, #140]	@ (8019dc8 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 8019d3c:	f000 fdf6 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8019d40:	2800      	cmp	r0, #0
 8019d42:	d12f      	bne.n	8019da4 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8019d44:	4922      	ldr	r1, [pc, #136]	@ (8019dd0 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa8>)
 8019d46:	4820      	ldr	r0, [pc, #128]	@ (8019dc8 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 8019d48:	f000 fdf0 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8019d4c:	bb60      	cbnz	r0, 8019da8 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8019d4e:	4921      	ldr	r1, [pc, #132]	@ (8019dd4 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xac>)
 8019d50:	481d      	ldr	r0, [pc, #116]	@ (8019dc8 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 8019d52:	f000 fdeb 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8019d56:	bb48      	cbnz	r0, 8019dac <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8019d58:	491b      	ldr	r1, [pc, #108]	@ (8019dc8 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 8019d5a:	4608      	mov	r0, r1
 8019d5c:	f000 fde6 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8019d60:	bb30      	cbnz	r0, 8019db0 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 8019d62:	491d      	ldr	r1, [pc, #116]	@ (8019dd8 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xb0>)
 8019d64:	4818      	ldr	r0, [pc, #96]	@ (8019dc8 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 8019d66:	f000 fde1 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8019d6a:	bb18      	cbnz	r0, 8019db4 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8019d6c:	491b      	ldr	r1, [pc, #108]	@ (8019ddc <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xb4>)
 8019d6e:	4816      	ldr	r0, [pc, #88]	@ (8019dc8 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 8019d70:	f000 fddc 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8019d74:	bb00      	cbnz	r0, 8019db8 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 8019d76:	491a      	ldr	r1, [pc, #104]	@ (8019de0 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xb8>)
 8019d78:	4813      	ldr	r0, [pc, #76]	@ (8019dc8 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 8019d7a:	f000 fdd7 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8019d7e:	b9e8      	cbnz	r0, 8019dbc <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8019d80:	4918      	ldr	r1, [pc, #96]	@ (8019de4 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xbc>)
 8019d82:	4811      	ldr	r0, [pc, #68]	@ (8019dc8 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 8019d84:	f000 fdd2 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 8019d88:	b9d0      	cbnz	r0, 8019dc0 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 8019d8a:	4917      	ldr	r1, [pc, #92]	@ (8019de8 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xc0>)
 8019d8c:	480e      	ldr	r0, [pc, #56]	@ (8019dc8 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 8019d8e:	f000 fdcd 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 8019d92:	2800      	cmp	r0, #0
 8019d94:	bf14      	ite	ne
 8019d96:	2309      	movne	r3, #9
 8019d98:	2300      	moveq	r3, #0
 8019d9a:	7020      	strb	r0, [r4, #0]
}
 8019d9c:	4618      	mov	r0, r3
 8019d9e:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8019da0:	2300      	movs	r3, #0
 8019da2:	e7fa      	b.n	8019d9a <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8019da4:	2301      	movs	r3, #1
 8019da6:	e7f8      	b.n	8019d9a <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8019da8:	2302      	movs	r3, #2
 8019daa:	e7f6      	b.n	8019d9a <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8019dac:	2303      	movs	r3, #3
 8019dae:	e7f4      	b.n	8019d9a <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8019db0:	2304      	movs	r3, #4
 8019db2:	e7f2      	b.n	8019d9a <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 8019db4:	2305      	movs	r3, #5
 8019db6:	e7f0      	b.n	8019d9a <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8019db8:	2306      	movs	r3, #6
 8019dba:	e7ee      	b.n	8019d9a <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 8019dbc:	2307      	movs	r3, #7
 8019dbe:	e7ec      	b.n	8019d9a <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8019dc0:	2308      	movs	r3, #8
 8019dc2:	e7ea      	b.n	8019d9a <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
 8019dc4:	0801b5d4 	.word	0x0801b5d4
 8019dc8:	0801b5dc 	.word	0x0801b5dc
 8019dcc:	0801b5c4 	.word	0x0801b5c4
 8019dd0:	0801b5b4 	.word	0x0801b5b4
 8019dd4:	0801b5a4 	.word	0x0801b5a4
 8019dd8:	0801b5cc 	.word	0x0801b5cc
 8019ddc:	0801b5bc 	.word	0x0801b5bc
 8019de0:	0801b5ac 	.word	0x0801b5ac
 8019de4:	0801b59c 	.word	0x0801b59c
 8019de8:	0801b594 	.word	0x0801b594

08019dec <_ZN4UserC1EP9RegistersP17MasterSubscribersP13CommunicationP8ServicesP10PublishersP13HardwareDelayP7SensorsP4LEDS>:
User::User(	Registers* registers_,
 8019dec:	b510      	push	{r4, lr}
	communication = communication_;
 8019dee:	6083      	str	r3, [r0, #8]
	services = services_;
 8019df0:	9b02      	ldr	r3, [sp, #8]
 8019df2:	60c3      	str	r3, [r0, #12]
	publishers = publishers_;
 8019df4:	9b03      	ldr	r3, [sp, #12]
 8019df6:	6103      	str	r3, [r0, #16]
	hardware_delay = hardware_delay_;
 8019df8:	9b04      	ldr	r3, [sp, #16]
 8019dfa:	6143      	str	r3, [r0, #20]
	sensors = sensors_;
 8019dfc:	9b05      	ldr	r3, [sp, #20]
 8019dfe:	6183      	str	r3, [r0, #24]
	leds = leds_;
 8019e00:	9b06      	ldr	r3, [sp, #24]
	subscribers = subscribers_;
 8019e02:	e9c0 1200 	strd	r1, r2, [r0]
	leds = leds_;
 8019e06:	61c3      	str	r3, [r0, #28]
}
 8019e08:	bd10      	pop	{r4, pc}

08019e0a <_ZN4User4InitEv>:
}
 8019e0a:	4770      	bx	lr

08019e0c <_ZN4User12AddOSThreadsEv>:
void User::AddOSThreads(void) {
 8019e0c:	b530      	push	{r4, r5, lr}
	};
 8019e0e:	4d19      	ldr	r5, [pc, #100]	@ (8019e74 <_ZN4User12AddOSThreadsEv+0x68>)
void User::AddOSThreads(void) {
 8019e10:	b08b      	sub	sp, #44	@ 0x2c
 8019e12:	4604      	mov	r4, r0
	};
 8019e14:	682b      	ldr	r3, [r5, #0]
 8019e16:	f3bf 8f5b 	dmb	ish
 8019e1a:	07d9      	lsls	r1, r3, #31
 8019e1c:	d417      	bmi.n	8019e4e <_ZN4User12AddOSThreadsEv+0x42>
 8019e1e:	4628      	mov	r0, r5
 8019e20:	f000 fcde 	bl	801a7e0 <__cxa_guard_acquire>
 8019e24:	b198      	cbz	r0, 8019e4e <_ZN4User12AddOSThreadsEv+0x42>
 8019e26:	6822      	ldr	r2, [r4, #0]
 8019e28:	4628      	mov	r0, r5
 8019e2a:	4b13      	ldr	r3, [pc, #76]	@ (8019e78 <_ZN4User12AddOSThreadsEv+0x6c>)
 8019e2c:	601a      	str	r2, [r3, #0]
 8019e2e:	6862      	ldr	r2, [r4, #4]
 8019e30:	605a      	str	r2, [r3, #4]
 8019e32:	68a2      	ldr	r2, [r4, #8]
 8019e34:	609a      	str	r2, [r3, #8]
 8019e36:	68e2      	ldr	r2, [r4, #12]
 8019e38:	60da      	str	r2, [r3, #12]
 8019e3a:	6922      	ldr	r2, [r4, #16]
 8019e3c:	611a      	str	r2, [r3, #16]
 8019e3e:	6962      	ldr	r2, [r4, #20]
 8019e40:	615a      	str	r2, [r3, #20]
 8019e42:	69a2      	ldr	r2, [r4, #24]
 8019e44:	619a      	str	r2, [r3, #24]
 8019e46:	69e2      	ldr	r2, [r4, #28]
 8019e48:	61da      	str	r2, [r3, #28]
 8019e4a:	f000 fcd5 	bl	801a7f8 <__cxa_guard_release>
	const osThreadAttr_t UserTask_attributes = {
 8019e4e:	2220      	movs	r2, #32
 8019e50:	2100      	movs	r1, #0
 8019e52:	a802      	add	r0, sp, #8
 8019e54:	f001 f824 	bl	801aea0 <memset>
 8019e58:	4b08      	ldr	r3, [pc, #32]	@ (8019e7c <_ZN4User12AddOSThreadsEv+0x70>)
 8019e5a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
	osThreadNew(UserTask, &class_instances_argument, &UserTask_attributes);
 8019e5e:	4906      	ldr	r1, [pc, #24]	@ (8019e78 <_ZN4User12AddOSThreadsEv+0x6c>)
	const osThreadAttr_t UserTask_attributes = {
 8019e60:	9301      	str	r3, [sp, #4]
 8019e62:	2308      	movs	r3, #8
	osThreadNew(UserTask, &class_instances_argument, &UserTask_attributes);
 8019e64:	4806      	ldr	r0, [pc, #24]	@ (8019e80 <_ZN4User12AddOSThreadsEv+0x74>)
	const osThreadAttr_t UserTask_attributes = {
 8019e66:	e9cd 2306 	strd	r2, r3, [sp, #24]
	osThreadNew(UserTask, &class_instances_argument, &UserTask_attributes);
 8019e6a:	aa01      	add	r2, sp, #4
 8019e6c:	f7f2 fa9a 	bl	800c3a4 <osThreadNew>
}
 8019e70:	b00b      	add	sp, #44	@ 0x2c
 8019e72:	bd30      	pop	{r4, r5, pc}
 8019e74:	24009430 	.word	0x24009430
 8019e78:	24009434 	.word	0x24009434
 8019e7c:	0801b4cc 	.word	0x0801b4cc
 8019e80:	0801a1f9 	.word	0x0801a1f9

08019e84 <_ZN3CPGC1Ev>:
#include <stdint.h>
//defines the max number of modules
#define MAX_MODULES     20
#define MAX_OSCILLATORS (MAX_MODULES*2)

class CPG {
 8019e84:	b538      	push	{r3, r4, r5, lr}
 8019e86:	25a0      	movs	r5, #160	@ 0xa0
 8019e88:	4604      	mov	r4, r0
 8019e8a:	2100      	movs	r1, #0
 8019e8c:	462a      	mov	r2, r5
 8019e8e:	f001 f807 	bl	801aea0 <memset>
 8019e92:	462a      	mov	r2, r5
 8019e94:	2100      	movs	r1, #0
 8019e96:	1960      	adds	r0, r4, r5
 8019e98:	f001 f802 	bl	801aea0 <memset>
 8019e9c:	462a      	mov	r2, r5
 8019e9e:	2100      	movs	r1, #0
 8019ea0:	f504 70a0 	add.w	r0, r4, #320	@ 0x140
 8019ea4:	f000 fffc 	bl	801aea0 <memset>
 8019ea8:	462a      	mov	r2, r5
 8019eaa:	2100      	movs	r1, #0
 8019eac:	f504 70f0 	add.w	r0, r4, #480	@ 0x1e0
 8019eb0:	f000 fff6 	bl	801aea0 <memset>
 8019eb4:	462a      	mov	r2, r5
 8019eb6:	2100      	movs	r1, #0
 8019eb8:	f504 7020 	add.w	r0, r4, #640	@ 0x280
 8019ebc:	f000 fff0 	bl	801aea0 <memset>
 8019ec0:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8019ec4:	2100      	movs	r1, #0
 8019ec6:	f504 7048 	add.w	r0, r4, #800	@ 0x320
 8019eca:	f000 ffe9 	bl	801aea0 <memset>
 8019ece:	f44f 52c8 	mov.w	r2, #6400	@ 0x1900
 8019ed2:	2100      	movs	r1, #0
 8019ed4:	f504 6016 	add.w	r0, r4, #2400	@ 0x960
 8019ed8:	f000 ffe2 	bl	801aea0 <memset>
 8019edc:	4620      	mov	r0, r4
 8019ede:	bd38      	pop	{r3, r4, r5, pc}

08019ee0 <_ZN9Registers11AddRegisterIfEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 8019ee0:	b570      	push	{r4, r5, r6, lr}
 8019ee2:	4604      	mov	r4, r0
 8019ee4:	b086      	sub	sp, #24
 8019ee6:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8019ee8:	6800      	ldr	r0, [r0, #0]
 8019eea:	f04f 31ff 	mov.w	r1, #4294967295
 8019eee:	f7f2 fb21 	bl	800c534 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 8019ef2:	f10d 0207 	add.w	r2, sp, #7
 8019ef6:	4631      	mov	r1, r6
 8019ef8:	4620      	mov	r0, r4
 8019efa:	f7fe f928 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 8019efe:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8019f02:	b125      	cbz	r5, 8019f0e <_ZN9Registers11AddRegisterIfEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 8019f04:	6820      	ldr	r0, [r4, #0]
 8019f06:	f7f2 fb49 	bl	800c59c <osSemaphoreRelease>
}
 8019f0a:	b006      	add	sp, #24
 8019f0c:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8019f0e:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 8019f12:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8019f16:	f7ff fea5 	bl	8019c64 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>
	configuration_.register_info = register_;
 8019f1a:	2301      	movs	r3, #1
 8019f1c:	f8ad 600a 	strh.w	r6, [sp, #10]
 8019f20:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 8019f24:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 8019f28:	f88d 000c 	strb.w	r0, [sp, #12]
 8019f2c:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 8019f30:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 8019f34:	2b00      	cmp	r3, #0
 8019f36:	d0e5      	beq.n	8019f04 <_ZN9Registers11AddRegisterIfEEbt.isra.0+0x24>
		registers.push_back(configuration_);
 8019f38:	a902      	add	r1, sp, #8
 8019f3a:	1d20      	adds	r0, r4, #4
 8019f3c:	f7fa fe97 	bl	8014c6e <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 8019f40:	e7e0      	b.n	8019f04 <_ZN9Registers11AddRegisterIfEEbt.isra.0+0x24>

08019f42 <_ZN9Registers11AddRegisterIaEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 8019f42:	b570      	push	{r4, r5, r6, lr}
 8019f44:	4604      	mov	r4, r0
 8019f46:	b086      	sub	sp, #24
 8019f48:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8019f4a:	6800      	ldr	r0, [r0, #0]
 8019f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8019f50:	f7f2 faf0 	bl	800c534 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 8019f54:	f10d 0207 	add.w	r2, sp, #7
 8019f58:	4631      	mov	r1, r6
 8019f5a:	4620      	mov	r0, r4
 8019f5c:	f7fe f8f7 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 8019f60:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8019f64:	b125      	cbz	r5, 8019f70 <_ZN9Registers11AddRegisterIaEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 8019f66:	6820      	ldr	r0, [r4, #0]
 8019f68:	f7f2 fb18 	bl	800c59c <osSemaphoreRelease>
}
 8019f6c:	b006      	add	sp, #24
 8019f6e:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8019f70:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 8019f74:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8019f78:	f7ff fed6 	bl	8019d28 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0>
	configuration_.register_info = register_;
 8019f7c:	2301      	movs	r3, #1
 8019f7e:	f8ad 600a 	strh.w	r6, [sp, #10]
 8019f82:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 8019f86:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 8019f8a:	f88d 000c 	strb.w	r0, [sp, #12]
 8019f8e:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 8019f92:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 8019f96:	2b00      	cmp	r3, #0
 8019f98:	d0e5      	beq.n	8019f66 <_ZN9Registers11AddRegisterIaEEbt.isra.0+0x24>
		registers.push_back(configuration_);
 8019f9a:	a902      	add	r1, sp, #8
 8019f9c:	1d20      	adds	r0, r4, #4
 8019f9e:	f7fa fe66 	bl	8014c6e <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 8019fa2:	e7e0      	b.n	8019f66 <_ZN9Registers11AddRegisterIaEEbt.isra.0+0x24>

08019fa4 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8019fa4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8019fa8:	e9d0 8900 	ldrd	r8, r9, [r0]
 8019fac:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 8019fae:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8019fb2:	eba9 0208 	sub.w	r2, r9, r8
 8019fb6:	4607      	mov	r7, r0
 8019fb8:	468a      	mov	sl, r1
	if (max_size() - size() < __n)
 8019fba:	ebb3 1f22 	cmp.w	r3, r2, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8019fbe:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
 8019fc2:	d102      	bne.n	8019fca <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8019fc4:	4820      	ldr	r0, [pc, #128]	@ (801a048 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa4>)
 8019fc6:	f000 fccf 	bl	801a968 <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 8019fca:	45c1      	cmp	r9, r8
 8019fcc:	bf14      	ite	ne
 8019fce:	4622      	movne	r2, r4
 8019fd0:	2201      	moveq	r2, #1
 8019fd2:	eba1 0508 	sub.w	r5, r1, r8
 8019fd6:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8019fd8:	d231      	bcs.n	801a03e <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8019fda:	b394      	cbz	r4, 801a042 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9e>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8019fdc:	429c      	cmp	r4, r3
 8019fde:	bf28      	it	cs
 8019fe0:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8019fe2:	0120      	lsls	r0, r4, #4
 8019fe4:	f000 fc0b 	bl	801a7fe <_Znwj>
 8019fe8:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8019fea:	eb06 0c05 	add.w	ip, r6, r5
      if (__count > 0)
 8019fee:	2d00      	cmp	r5, #0
 8019ff0:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8019ff4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8019ff8:	dd04      	ble.n	801a004 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x60>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8019ffa:	462a      	mov	r2, r5
 8019ffc:	4641      	mov	r1, r8
 8019ffe:	4630      	mov	r0, r6
 801a000:	f000 ff34 	bl	801ae6c <memmove>
      ptrdiff_t __count = __last - __first;
 801a004:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
 801a008:	3510      	adds	r5, #16
      if (__count > 0)
 801a00a:	f1b9 0f00 	cmp.w	r9, #0
 801a00e:	4435      	add	r5, r6
 801a010:	dd04      	ble.n	801a01c <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x78>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801a012:	464a      	mov	r2, r9
 801a014:	4651      	mov	r1, sl
 801a016:	4628      	mov	r0, r5
 801a018:	f001 f820 	bl	801b05c <memcpy>
      return __result + __count;
 801a01c:	444d      	add	r5, r9
	if (__p)
 801a01e:	f1b8 0f00 	cmp.w	r8, #0
 801a022:	d005      	beq.n	801a030 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
 801a024:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801a026:	4640      	mov	r0, r8
 801a028:	eba1 0108 	sub.w	r1, r1, r8
 801a02c:	f000 fbc2 	bl	801a7b4 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 801a030:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801a034:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 801a038:	60be      	str	r6, [r7, #8]
    }
 801a03a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801a03e:	461c      	mov	r4, r3
 801a040:	e7cf      	b.n	8019fe2 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801a042:	4626      	mov	r6, r4
 801a044:	e7d1      	b.n	8019fea <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
 801a046:	bf00      	nop
 801a048:	0801b17a 	.word	0x0801b17a

0801a04c <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 801a04c:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801a04e:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
      push_back(const value_type& __x)
 801a052:	4605      	mov	r5, r0
 801a054:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801a056:	429c      	cmp	r4, r3
 801a058:	d005      	beq.n	801a066 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE9push_backERKS1_+0x1a>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801a05a:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 801a05c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 801a060:	3410      	adds	r4, #16
 801a062:	606c      	str	r4, [r5, #4]
      }
 801a064:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
 801a066:	4621      	mov	r1, r4
 801a068:	f7ff ff9c 	bl	8019fa4 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 801a06c:	e7fa      	b.n	801a064 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE9push_backERKS1_+0x18>

0801a06e <_ZN9Registers18AddRegisterPointerIaEEbtPT_.isra.0>:
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 801a06e:	b570      	push	{r4, r5, r6, lr}
 801a070:	460c      	mov	r4, r1
 801a072:	b086      	sub	sp, #24
 801a074:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801a076:	f04f 31ff 	mov.w	r1, #4294967295
 801a07a:	6800      	ldr	r0, [r0, #0]
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 801a07c:	4616      	mov	r6, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801a07e:	f7f2 fa59 	bl	800c534 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801a082:	4621      	mov	r1, r4
 801a084:	f10d 0207 	add.w	r2, sp, #7
 801a088:	4628      	mov	r0, r5
 801a08a:	f7fe f860 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801a08e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801a092:	4604      	mov	r4, r0
	if (!success) {
 801a094:	b923      	cbnz	r3, 801a0a0 <_ZN9Registers18AddRegisterPointerIaEEbtPT_.isra.0+0x32>
	osSemaphoreRelease(RegistersSemaphore);
 801a096:	6828      	ldr	r0, [r5, #0]
 801a098:	f7f2 fa80 	bl	800c59c <osSemaphoreRelease>
}
 801a09c:	b006      	add	sp, #24
 801a09e:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 801a0a0:	f10d 0007 	add.w	r0, sp, #7
 801a0a4:	f7ff fe40 	bl	8019d28 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0>
	if (!success) {
 801a0a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801a0ac:	2b00      	cmp	r3, #0
 801a0ae:	d0f2      	beq.n	801a096 <_ZN9Registers18AddRegisterPointerIaEEbtPT_.isra.0+0x28>
	if (target_register->register_info.type != registered_type) {
 801a0b0:	7923      	ldrb	r3, [r4, #4]
 801a0b2:	4298      	cmp	r0, r3
 801a0b4:	d1ef      	bne.n	801a096 <_ZN9Registers18AddRegisterPointerIaEEbtPT_.isra.0+0x28>
	if (callbacks[target_register->register_info.type] == NULL) {
 801a0b6:	3004      	adds	r0, #4
 801a0b8:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801a0bc:	2800      	cmp	r0, #0
 801a0be:	d0ea      	beq.n	801a096 <_ZN9Registers18AddRegisterPointerIaEEbtPT_.isra.0+0x28>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 801a0c0:	7823      	ldrb	r3, [r4, #0]
 801a0c2:	b983      	cbnz	r3, 801a0e6 <_ZN9Registers18AddRegisterPointerIaEEbtPT_.isra.0+0x78>
 801a0c4:	7863      	ldrb	r3, [r4, #1]
 801a0c6:	b973      	cbnz	r3, 801a0e6 <_ZN9Registers18AddRegisterPointerIaEEbtPT_.isra.0+0x78>
		target_callback_list->push_back(callback);
 801a0c8:	a902      	add	r1, sp, #8
		callback.pointer = pointer;
 801a0ca:	9602      	str	r6, [sp, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801a0cc:	e9d0 2300 	ldrd	r2, r3, [r0]
 801a0d0:	1a9b      	subs	r3, r3, r2
 801a0d2:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 801a0d4:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 801a0d6:	f7ff ffb9 	bl	801a04c <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE9push_backERKS1_>
	target_register->mode.pointer = true;
 801a0da:	2301      	movs	r3, #1
 801a0dc:	7023      	strb	r3, [r4, #0]
	target_register->access.write = true;
 801a0de:	f240 1301 	movw	r3, #257	@ 0x101
 801a0e2:	8123      	strh	r3, [r4, #8]
 801a0e4:	e7d7      	b.n	801a096 <_ZN9Registers18AddRegisterPointerIaEEbtPT_.isra.0+0x28>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 801a0e6:	8961      	ldrh	r1, [r4, #10]
 801a0e8:	f7f5 fb34 	bl	800f754 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE2atEj>
		callback->pointer = pointer;
 801a0ec:	6006      	str	r6, [r0, #0]
 801a0ee:	e7f4      	b.n	801a0da <_ZN9Registers18AddRegisterPointerIaEEbtPT_.isra.0+0x6c>

0801a0f0 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 801a0f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a0f2:	460c      	mov	r4, r1
 801a0f4:	b087      	sub	sp, #28
 801a0f6:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801a0f8:	f04f 31ff 	mov.w	r1, #4294967295
 801a0fc:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 801a0fe:	461e      	mov	r6, r3
 801a100:	4617      	mov	r7, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801a102:	f7f2 fa17 	bl	800c534 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801a106:	4621      	mov	r1, r4
 801a108:	f10d 0207 	add.w	r2, sp, #7
 801a10c:	4628      	mov	r0, r5
 801a10e:	f7fe f81e 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801a112:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801a116:	4604      	mov	r4, r0
	if (!success) {
 801a118:	b923      	cbnz	r3, 801a124 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x34>
	osSemaphoreRelease(RegistersSemaphore);
 801a11a:	6828      	ldr	r0, [r5, #0]
 801a11c:	f7f2 fa3e 	bl	800c59c <osSemaphoreRelease>
}
 801a120:	b007      	add	sp, #28
 801a122:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 801a124:	f10d 0007 	add.w	r0, sp, #7
 801a128:	f7ff fd9c 	bl	8019c64 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>
	if (!success) {
 801a12c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801a130:	2b00      	cmp	r3, #0
 801a132:	d0f2      	beq.n	801a11a <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (target_register->register_info.type != registered_type) {
 801a134:	7923      	ldrb	r3, [r4, #4]
 801a136:	4298      	cmp	r0, r3
 801a138:	d1ef      	bne.n	801a11a <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (callbacks[target_register->register_info.type] == NULL) {
 801a13a:	3004      	adds	r0, #4
 801a13c:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801a140:	2800      	cmp	r0, #0
 801a142:	d0ea      	beq.n	801a11a <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 801a144:	7823      	ldrb	r3, [r4, #0]
 801a146:	b983      	cbnz	r3, 801a16a <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
 801a148:	7863      	ldrb	r3, [r4, #1]
 801a14a:	b973      	cbnz	r3, 801a16a <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
		callback.read = NULL;
 801a14c:	9305      	str	r3, [sp, #20]
		target_callback_list->push_back(callback);
 801a14e:	a902      	add	r1, sp, #8
 801a150:	e9d0 2300 	ldrd	r2, r3, [r0]
		callback.write = write;
 801a154:	e9cd 7603 	strd	r7, r6, [sp, #12]
 801a158:	1a9b      	subs	r3, r3, r2
 801a15a:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 801a15c:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 801a15e:	f7fa ff27 	bl	8014fb0 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE9push_backERKS1_>
	target_register->mode.callbacks = true;
 801a162:	2301      	movs	r3, #1
 801a164:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 801a166:	7223      	strb	r3, [r4, #8]
 801a168:	e7d7      	b.n	801a11a <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 801a16a:	8961      	ldrh	r1, [r4, #10]
 801a16c:	f7f5 fb04 	bl	800f778 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE2atEj>
		callback->write = write;
 801a170:	e9c0 7601 	strd	r7, r6, [r0, #4]
 801a174:	e7f5      	b.n	801a162 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x72>

0801a176 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>:
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 801a176:	b570      	push	{r4, r5, r6, lr}
 801a178:	460c      	mov	r4, r1
 801a17a:	b086      	sub	sp, #24
 801a17c:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801a17e:	f04f 31ff 	mov.w	r1, #4294967295
 801a182:	6800      	ldr	r0, [r0, #0]
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 801a184:	4616      	mov	r6, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801a186:	f7f2 f9d5 	bl	800c534 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801a18a:	4621      	mov	r1, r4
 801a18c:	f10d 0207 	add.w	r2, sp, #7
 801a190:	4628      	mov	r0, r5
 801a192:	f7fd ffdc 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801a196:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801a19a:	4604      	mov	r4, r0
	if (!success) {
 801a19c:	b923      	cbnz	r3, 801a1a8 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x32>
	osSemaphoreRelease(RegistersSemaphore);
 801a19e:	6828      	ldr	r0, [r5, #0]
 801a1a0:	f7f2 f9fc 	bl	800c59c <osSemaphoreRelease>
}
 801a1a4:	b006      	add	sp, #24
 801a1a6:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 801a1a8:	f10d 0007 	add.w	r0, sp, #7
 801a1ac:	f7ff fd5a 	bl	8019c64 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>
	if (!success) {
 801a1b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801a1b4:	2b00      	cmp	r3, #0
 801a1b6:	d0f2      	beq.n	801a19e <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x28>
	if (target_register->register_info.type != registered_type) {
 801a1b8:	7923      	ldrb	r3, [r4, #4]
 801a1ba:	4298      	cmp	r0, r3
 801a1bc:	d1ef      	bne.n	801a19e <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x28>
	if (callbacks[target_register->register_info.type] == NULL) {
 801a1be:	3004      	adds	r0, #4
 801a1c0:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801a1c4:	2800      	cmp	r0, #0
 801a1c6:	d0ea      	beq.n	801a19e <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x28>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 801a1c8:	7823      	ldrb	r3, [r4, #0]
 801a1ca:	b983      	cbnz	r3, 801a1ee <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x78>
 801a1cc:	7863      	ldrb	r3, [r4, #1]
 801a1ce:	b973      	cbnz	r3, 801a1ee <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x78>
		target_callback_list->push_back(callback);
 801a1d0:	a902      	add	r1, sp, #8
		callback.pointer = pointer;
 801a1d2:	9602      	str	r6, [sp, #8]
 801a1d4:	e9d0 2300 	ldrd	r2, r3, [r0]
 801a1d8:	1a9b      	subs	r3, r3, r2
 801a1da:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 801a1dc:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 801a1de:	f7fa fee7 	bl	8014fb0 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE9push_backERKS1_>
	target_register->mode.pointer = true;
 801a1e2:	2301      	movs	r3, #1
 801a1e4:	7023      	strb	r3, [r4, #0]
	target_register->access.write = true;
 801a1e6:	f240 1301 	movw	r3, #257	@ 0x101
 801a1ea:	8123      	strh	r3, [r4, #8]
 801a1ec:	e7d7      	b.n	801a19e <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x28>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 801a1ee:	8961      	ldrh	r1, [r4, #10]
 801a1f0:	f7f5 fac2 	bl	800f778 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE2atEj>
		callback->pointer = pointer;
 801a1f4:	6006      	str	r6, [r0, #0]
 801a1f6:	e7f4      	b.n	801a1e2 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x6c>

0801a1f8 <_ZL8UserTaskPv>:
static void UserTask(void *argument) {
 801a1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	Registers* registers = class_instances_pointer->registers;
 801a1fc:	6804      	ldr	r4, [r0, #0]
static void UserTask(void *argument) {
 801a1fe:	b089      	sub	sp, #36	@ 0x24
	LEDS* leds = class_instances_pointer->leds;
 801a200:	69c3      	ldr	r3, [r0, #28]
	registers->AddRegister<int8_t>(REG_CPG_SETPOINTS);
 801a202:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
	Publishers* publishers = class_instances_pointer->publishers;
 801a206:	f8d0 b010 	ldr.w	fp, [r0, #16]
static void UserTask(void *argument) {
 801a20a:	4605      	mov	r5, r0
	registers->AddRegister<int8_t>(REG_CPG_SETPOINTS);
 801a20c:	4620      	mov	r0, r4
	LEDS* leds = class_instances_pointer->leds;
 801a20e:	9301      	str	r3, [sp, #4]
	registers->AddRegister<int8_t>(REG_CPG_SETPOINTS);
 801a210:	f7ff fe97 	bl	8019f42 <_ZN9Registers11AddRegisterIaEEbt.isra.0>
	registers->SetRegisterAsArray(REG_CPG_SETPOINTS, MODULE_NUMBER);
 801a214:	2204      	movs	r2, #4
 801a216:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 801a21a:	4620      	mov	r0, r4
 801a21c:	f7fd ffec 	bl	80181f8 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddRegisterPointer<int8_t>(REG_CPG_SETPOINTS, reg_cpg_setpoints);
 801a220:	4adb      	ldr	r2, [pc, #876]	@ (801a590 <_ZL8UserTaskPv+0x398>)
 801a222:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 801a226:	4620      	mov	r0, r4
 801a228:	f7ff ff21 	bl	801a06e <_ZN9Registers18AddRegisterPointerIaEEbtPT_.isra.0>
	registers->AddRegister<int8_t>(REG_CPG_ENABLED);
 801a22c:	f240 5101 	movw	r1, #1281	@ 0x501
 801a230:	4620      	mov	r0, r4
 801a232:	f7ff fe86 	bl	8019f42 <_ZN9Registers11AddRegisterIaEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_CPG_ENABLED);
 801a236:	f240 5101 	movw	r1, #1281	@ 0x501
 801a23a:	4620      	mov	r0, r4
 801a23c:	f7fd ffc0 	bl	80181c0 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterPointer<int8_t>(REG_CPG_ENABLED, &reg_cpg_enabled);
 801a240:	4ad4      	ldr	r2, [pc, #848]	@ (801a594 <_ZL8UserTaskPv+0x39c>)
 801a242:	f240 5101 	movw	r1, #1281	@ 0x501
 801a246:	4620      	mov	r0, r4
 801a248:	f7ff ff11 	bl	801a06e <_ZN9Registers18AddRegisterPointerIaEEbtPT_.isra.0>
	registers->AddRegister<int8_t>(REG_CPG_RESET);
 801a24c:	f240 5102 	movw	r1, #1282	@ 0x502
 801a250:	4620      	mov	r0, r4
 801a252:	f7ff fe76 	bl	8019f42 <_ZN9Registers11AddRegisterIaEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_CPG_RESET);
 801a256:	f240 5102 	movw	r1, #1282	@ 0x502
 801a25a:	4620      	mov	r0, r4
 801a25c:	f7fd ffb0 	bl	80181c0 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterPointer<int8_t>(REG_CPG_RESET, &reg_cpg_reset);
 801a260:	4acd      	ldr	r2, [pc, #820]	@ (801a598 <_ZL8UserTaskPv+0x3a0>)
 801a262:	f240 5102 	movw	r1, #1282	@ 0x502
 801a266:	4620      	mov	r0, r4
 801a268:	f7ff ff01 	bl	801a06e <_ZN9Registers18AddRegisterPointerIaEEbtPT_.isra.0>
	registers->SetRegisterPermissions(REG_CPG_RESET, WRITE_PERMISSION);
 801a26c:	2201      	movs	r2, #1
 801a26e:	f240 5102 	movw	r1, #1282	@ 0x502
 801a272:	4620      	mov	r0, r4
 801a274:	f7fd ffdf 	bl	8018236 <_ZN9Registers22SetRegisterPermissionsEth>
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801a278:	f04f 31ff 	mov.w	r1, #4294967295
 801a27c:	6820      	ldr	r0, [r4, #0]
 801a27e:	f7f2 f959 	bl	800c534 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801a282:	f10d 020f 	add.w	r2, sp, #15
 801a286:	f240 5102 	movw	r1, #1282	@ 0x502
 801a28a:	4620      	mov	r0, r4
 801a28c:	f7fd ff5f 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801a290:	f89d 300f 	ldrb.w	r3, [sp, #15]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801a294:	4606      	mov	r6, r0
	if (!success) {
 801a296:	2b00      	cmp	r3, #0
 801a298:	f040 814c 	bne.w	801a534 <_ZL8UserTaskPv+0x33c>
	osSemaphoreRelease(RegistersSemaphore);
 801a29c:	6820      	ldr	r0, [r4, #0]
 801a29e:	f7f2 f97d 	bl	800c59c <osSemaphoreRelease>
	registers->AddRegisterPointer<float>(REG_CPG_FREQUENCY, &reg_cpg_frequency);
 801a2a2:	4ebe      	ldr	r6, [pc, #760]	@ (801a59c <_ZL8UserTaskPv+0x3a4>)
	registers->AddRegister<float>(REG_CPG_FREQUENCY);
 801a2a4:	f44f 61a2 	mov.w	r1, #1296	@ 0x510
 801a2a8:	4620      	mov	r0, r4
 801a2aa:	f7ff fe19 	bl	8019ee0 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_CPG_FREQUENCY);
 801a2ae:	f44f 61a2 	mov.w	r1, #1296	@ 0x510
 801a2b2:	4620      	mov	r0, r4
	registers->AddRegisterPointer<float>(REG_CPG_DIRECTION, &reg_cpg_direction);
 801a2b4:	4fba      	ldr	r7, [pc, #744]	@ (801a5a0 <_ZL8UserTaskPv+0x3a8>)
	registers->SetRegisterAsSingle(REG_CPG_FREQUENCY);
 801a2b6:	f7fd ff83 	bl	80181c0 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterPointer<float>(REG_CPG_FREQUENCY, &reg_cpg_frequency);
 801a2ba:	4632      	mov	r2, r6
 801a2bc:	f44f 61a2 	mov.w	r1, #1296	@ 0x510
 801a2c0:	4620      	mov	r0, r4
 801a2c2:	f7ff ff58 	bl	801a176 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->SetRegisterPermissions(REG_CPG_FREQUENCY, WRITE_PERMISSION);
 801a2c6:	2201      	movs	r2, #1
 801a2c8:	f44f 61a2 	mov.w	r1, #1296	@ 0x510
 801a2cc:	4620      	mov	r0, r4
 801a2ce:	f7fd ffb2 	bl	8018236 <_ZN9Registers22SetRegisterPermissionsEth>
	registers->AddWriteCallback<float>(REG_CPG_FREQUENCY, argument,
 801a2d2:	4bb4      	ldr	r3, [pc, #720]	@ (801a5a4 <_ZL8UserTaskPv+0x3ac>)
 801a2d4:	462a      	mov	r2, r5
 801a2d6:	f44f 61a2 	mov.w	r1, #1296	@ 0x510
 801a2da:	4620      	mov	r0, r4
	registers->AddRegisterPointer<float>(REG_CPG_NWAVE, &reg_cpg_nwave);
 801a2dc:	f8df 82f0 	ldr.w	r8, [pc, #752]	@ 801a5d0 <_ZL8UserTaskPv+0x3d8>
	registers->AddWriteCallback<float>(REG_CPG_FREQUENCY, argument,
 801a2e0:	f7ff ff06 	bl	801a0f0 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<float>(REG_CPG_DIRECTION);
 801a2e4:	f240 5111 	movw	r1, #1297	@ 0x511
 801a2e8:	4620      	mov	r0, r4
	registers->AddRegisterPointer<float>(REG_CPG_COUPLING_STRENGTH, &reg_cpg_coupling_strength);
 801a2ea:	f8df 92e8 	ldr.w	r9, [pc, #744]	@ 801a5d4 <_ZL8UserTaskPv+0x3dc>
	registers->AddRegister<float>(REG_CPG_DIRECTION);
 801a2ee:	f7ff fdf7 	bl	8019ee0 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_CPG_DIRECTION);
 801a2f2:	f240 5111 	movw	r1, #1297	@ 0x511
 801a2f6:	4620      	mov	r0, r4
	registers->AddRegisterPointer<float>(REG_CPG_A_R, &reg_cpg_a_r);
 801a2f8:	f8df a2dc 	ldr.w	sl, [pc, #732]	@ 801a5d8 <_ZL8UserTaskPv+0x3e0>
	registers->SetRegisterAsSingle(REG_CPG_DIRECTION);
 801a2fc:	f7fd ff60 	bl	80181c0 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterPointer<float>(REG_CPG_DIRECTION, &reg_cpg_direction);
 801a300:	463a      	mov	r2, r7
 801a302:	f240 5111 	movw	r1, #1297	@ 0x511
 801a306:	4620      	mov	r0, r4
 801a308:	f7ff ff35 	bl	801a176 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->SetRegisterPermissions(REG_CPG_DIRECTION, WRITE_PERMISSION);
 801a30c:	2201      	movs	r2, #1
 801a30e:	f240 5111 	movw	r1, #1297	@ 0x511
 801a312:	4620      	mov	r0, r4
 801a314:	f7fd ff8f 	bl	8018236 <_ZN9Registers22SetRegisterPermissionsEth>
	registers->AddWriteCallback<float>(REG_CPG_DIRECTION, argument,
 801a318:	4ba3      	ldr	r3, [pc, #652]	@ (801a5a8 <_ZL8UserTaskPv+0x3b0>)
 801a31a:	462a      	mov	r2, r5
 801a31c:	f240 5111 	movw	r1, #1297	@ 0x511
 801a320:	4620      	mov	r0, r4
 801a322:	f7ff fee5 	bl	801a0f0 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<float>(REG_CPG_AMPLC);
 801a326:	f240 5112 	movw	r1, #1298	@ 0x512
 801a32a:	4620      	mov	r0, r4
 801a32c:	f7ff fdd8 	bl	8019ee0 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_CPG_AMPLC);
 801a330:	f240 5112 	movw	r1, #1298	@ 0x512
 801a334:	4620      	mov	r0, r4
 801a336:	f7fd ff43 	bl	80181c0 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterPointer<float>(REG_CPG_AMPLC, &reg_cpg_amplc);
 801a33a:	4a9c      	ldr	r2, [pc, #624]	@ (801a5ac <_ZL8UserTaskPv+0x3b4>)
 801a33c:	f240 5112 	movw	r1, #1298	@ 0x512
 801a340:	4620      	mov	r0, r4
 801a342:	f7ff ff18 	bl	801a176 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->SetRegisterPermissions(REG_CPG_AMPLC, WRITE_PERMISSION);
 801a346:	2201      	movs	r2, #1
 801a348:	f240 5112 	movw	r1, #1298	@ 0x512
 801a34c:	4620      	mov	r0, r4
 801a34e:	f7fd ff72 	bl	8018236 <_ZN9Registers22SetRegisterPermissionsEth>
	registers->AddWriteCallback<float>(REG_CPG_AMPLC, argument,
 801a352:	4b97      	ldr	r3, [pc, #604]	@ (801a5b0 <_ZL8UserTaskPv+0x3b8>)
 801a354:	462a      	mov	r2, r5
 801a356:	f240 5112 	movw	r1, #1298	@ 0x512
 801a35a:	4620      	mov	r0, r4
 801a35c:	f7ff fec8 	bl	801a0f0 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<float>(REG_CPG_AMPLH);
 801a360:	f240 5113 	movw	r1, #1299	@ 0x513
 801a364:	4620      	mov	r0, r4
 801a366:	f7ff fdbb 	bl	8019ee0 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_CPG_AMPLH);
 801a36a:	f240 5113 	movw	r1, #1299	@ 0x513
 801a36e:	4620      	mov	r0, r4
 801a370:	f7fd ff26 	bl	80181c0 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterPointer<float>(REG_CPG_AMPLH, &reg_cpg_amplh);
 801a374:	4a8f      	ldr	r2, [pc, #572]	@ (801a5b4 <_ZL8UserTaskPv+0x3bc>)
 801a376:	f240 5113 	movw	r1, #1299	@ 0x513
 801a37a:	4620      	mov	r0, r4
 801a37c:	f7ff fefb 	bl	801a176 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->SetRegisterPermissions(REG_CPG_AMPLH, WRITE_PERMISSION);
 801a380:	2201      	movs	r2, #1
 801a382:	f240 5113 	movw	r1, #1299	@ 0x513
 801a386:	4620      	mov	r0, r4
 801a388:	f7fd ff55 	bl	8018236 <_ZN9Registers22SetRegisterPermissionsEth>
	registers->AddWriteCallback<float>(REG_CPG_AMPLH, argument,
 801a38c:	4b8a      	ldr	r3, [pc, #552]	@ (801a5b8 <_ZL8UserTaskPv+0x3c0>)
 801a38e:	462a      	mov	r2, r5
 801a390:	f240 5113 	movw	r1, #1299	@ 0x513
 801a394:	4620      	mov	r0, r4
 801a396:	f7ff feab 	bl	801a0f0 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<float>(REG_CPG_NWAVE);
 801a39a:	f240 5114 	movw	r1, #1300	@ 0x514
 801a39e:	4620      	mov	r0, r4
 801a3a0:	f7ff fd9e 	bl	8019ee0 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_CPG_NWAVE);
 801a3a4:	f240 5114 	movw	r1, #1300	@ 0x514
 801a3a8:	4620      	mov	r0, r4
 801a3aa:	f7fd ff09 	bl	80181c0 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterPointer<float>(REG_CPG_NWAVE, &reg_cpg_nwave);
 801a3ae:	4642      	mov	r2, r8
 801a3b0:	f240 5114 	movw	r1, #1300	@ 0x514
 801a3b4:	4620      	mov	r0, r4
 801a3b6:	f7ff fede 	bl	801a176 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->SetRegisterPermissions(REG_CPG_NWAVE, WRITE_PERMISSION);
 801a3ba:	2201      	movs	r2, #1
 801a3bc:	f240 5114 	movw	r1, #1300	@ 0x514
 801a3c0:	4620      	mov	r0, r4
 801a3c2:	f7fd ff38 	bl	8018236 <_ZN9Registers22SetRegisterPermissionsEth>
	registers->AddWriteCallback<float>(REG_CPG_NWAVE, argument,
 801a3c6:	4b7d      	ldr	r3, [pc, #500]	@ (801a5bc <_ZL8UserTaskPv+0x3c4>)
 801a3c8:	462a      	mov	r2, r5
 801a3ca:	f240 5114 	movw	r1, #1300	@ 0x514
 801a3ce:	4620      	mov	r0, r4
 801a3d0:	f7ff fe8e 	bl	801a0f0 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<float>(REG_CPG_COUPLING_STRENGTH);
 801a3d4:	f240 5115 	movw	r1, #1301	@ 0x515
 801a3d8:	4620      	mov	r0, r4
 801a3da:	f7ff fd81 	bl	8019ee0 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_CPG_COUPLING_STRENGTH);
 801a3de:	f240 5115 	movw	r1, #1301	@ 0x515
 801a3e2:	4620      	mov	r0, r4
 801a3e4:	f7fd feec 	bl	80181c0 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterPointer<float>(REG_CPG_COUPLING_STRENGTH, &reg_cpg_coupling_strength);
 801a3e8:	464a      	mov	r2, r9
 801a3ea:	f240 5115 	movw	r1, #1301	@ 0x515
 801a3ee:	4620      	mov	r0, r4
 801a3f0:	f7ff fec1 	bl	801a176 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->SetRegisterPermissions(REG_CPG_COUPLING_STRENGTH, WRITE_PERMISSION);
 801a3f4:	2201      	movs	r2, #1
 801a3f6:	f240 5115 	movw	r1, #1301	@ 0x515
 801a3fa:	4620      	mov	r0, r4
 801a3fc:	f7fd ff1b 	bl	8018236 <_ZN9Registers22SetRegisterPermissionsEth>
	registers->AddWriteCallback<float>(REG_CPG_COUPLING_STRENGTH, argument,
 801a400:	4b6f      	ldr	r3, [pc, #444]	@ (801a5c0 <_ZL8UserTaskPv+0x3c8>)
 801a402:	462a      	mov	r2, r5
 801a404:	f240 5115 	movw	r1, #1301	@ 0x515
 801a408:	4620      	mov	r0, r4
 801a40a:	f7ff fe71 	bl	801a0f0 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<float>(REG_CPG_A_R);
 801a40e:	f240 5116 	movw	r1, #1302	@ 0x516
 801a412:	4620      	mov	r0, r4
 801a414:	f7ff fd64 	bl	8019ee0 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_CPG_A_R);
 801a418:	f240 5116 	movw	r1, #1302	@ 0x516
 801a41c:	4620      	mov	r0, r4
 801a41e:	f7fd fecf 	bl	80181c0 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterPointer<float>(REG_CPG_A_R, &reg_cpg_a_r);
 801a422:	4652      	mov	r2, sl
 801a424:	f240 5116 	movw	r1, #1302	@ 0x516
 801a428:	4620      	mov	r0, r4
 801a42a:	f7ff fea4 	bl	801a176 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->SetRegisterPermissions(REG_CPG_A_R, WRITE_PERMISSION);
 801a42e:	2201      	movs	r2, #1
 801a430:	f240 5116 	movw	r1, #1302	@ 0x516
 801a434:	4620      	mov	r0, r4
 801a436:	f7fd fefe 	bl	8018236 <_ZN9Registers22SetRegisterPermissionsEth>
	registers->AddWriteCallback<float>(REG_CPG_A_R, argument,
 801a43a:	4b62      	ldr	r3, [pc, #392]	@ (801a5c4 <_ZL8UserTaskPv+0x3cc>)
 801a43c:	462a      	mov	r2, r5
 801a43e:	f240 5116 	movw	r1, #1302	@ 0x516
 801a442:	4620      	mov	r0, r4
 801a444:	f7ff fe54 	bl	801a0f0 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0>

	// === Publisher Setup === //
	publishers->AddPublisher(PUB_CPG);
 801a448:	2101      	movs	r1, #1
 801a44a:	4658      	mov	r0, fp
 801a44c:	f7fc ffa4 	bl	8017398 <_ZN10Publishers12AddPublisherEh>
	publishers->SetPublisherPrescaler(PUB_CPG, 1);
 801a450:	2201      	movs	r2, #1
 801a452:	4658      	mov	r0, fp
 801a454:	4611      	mov	r1, r2
 801a456:	f7fc f9dc 	bl	8016812 <_ZN10Publishers21SetPublisherPrescalerEht>
	publishers->LinkToInterface(PUB_CPG, CANFD1);
 801a45a:	2200      	movs	r2, #0
 801a45c:	2101      	movs	r1, #1
 801a45e:	4658      	mov	r0, fp
 801a460:	f7fc fc8e 	bl	8016d80 <_ZN10Publishers15LinkToInterfaceEhh>
	publishers->SetPublishAddress(PUB_CPG, CANFD1, ALL);
 801a464:	23ff      	movs	r3, #255	@ 0xff
 801a466:	2200      	movs	r2, #0
 801a468:	2101      	movs	r1, #1
 801a46a:	4658      	mov	r0, fp
 801a46c:	f7fc faae 	bl	80169cc <_ZN10Publishers17SetPublishAddressEhhh>

	publishers->AddTopic(PUB_CPG, REG_CPG_SETPOINTS);
 801a470:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 801a474:	2101      	movs	r1, #1
 801a476:	4658      	mov	r0, fp
 801a478:	f7fc fbfa 	bl	8016c70 <_ZN10Publishers8AddTopicEht>
	publishers->ActivateTopic(PUB_CPG, REG_CPG_SETPOINTS);
 801a47c:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 801a480:	2101      	movs	r1, #1
 801a482:	4658      	mov	r0, fp
 801a484:	f7fc fa68 	bl	8016958 <_ZN10Publishers13ActivateTopicEht>

	publishers->AddTopic(PUB_CPG, REG_TIMEBASE);
 801a488:	2200      	movs	r2, #0
 801a48a:	2101      	movs	r1, #1
 801a48c:	4658      	mov	r0, fp
 801a48e:	f7fc fbef 	bl	8016c70 <_ZN10Publishers8AddTopicEht>
	publishers->ActivateTopic(PUB_CPG, REG_TIMEBASE);
 801a492:	2200      	movs	r2, #0
 801a494:	2101      	movs	r1, #1
 801a496:	4658      	mov	r0, fp
 801a498:	f7fc fa5e 	bl	8016958 <_ZN10Publishers13ActivateTopicEht>

	publishers->ActivatePublisher(PUB_CPG);
 801a49c:	2101      	movs	r1, #1
 801a49e:	4658      	mov	r0, fp
 801a4a0:	f7fc f9a5 	bl	80167ee <_ZN10Publishers17ActivatePublisherEh>

	// === CPG Setup === //
	cpg.init(MODULE_NUMBER, reg_cpg_frequency, reg_cpg_direction, reg_cpg_amplc, reg_cpg_amplc, reg_cpg_nwave, reg_cpg_coupling_strength, reg_cpg_a_r);
 801a4a4:	4b41      	ldr	r3, [pc, #260]	@ (801a5ac <_ZL8UserTaskPv+0x3b4>)
 801a4a6:	ed9a 3a00 	vldr	s6, [sl]
	int8_t setpoints[MODULE_NUMBER];
	for(;;) {
		if(reg_cpg_enabled) {
			leds->SetLED(LED_USER3, GPIO_PIN_SET);
 801a4aa:	f04f 0a01 	mov.w	sl, #1
	cpg.init(MODULE_NUMBER, reg_cpg_frequency, reg_cpg_direction, reg_cpg_amplc, reg_cpg_amplc, reg_cpg_nwave, reg_cpg_coupling_strength, reg_cpg_a_r);
 801a4ae:	edd3 1a00 	vldr	s3, [r3]
 801a4b2:	2104      	movs	r1, #4
 801a4b4:	edd9 2a00 	vldr	s5, [r9]
 801a4b8:	eeb0 1a61 	vmov.f32	s2, s3
 801a4bc:	ed98 2a00 	vldr	s4, [r8]
 801a4c0:	edd7 0a00 	vldr	s1, [r7]
 801a4c4:	ed96 0a00 	vldr	s0, [r6]
 801a4c8:	483f      	ldr	r0, [pc, #252]	@ (801a5c8 <_ZL8UserTaskPv+0x3d0>)
 801a4ca:	f7ff fb59 	bl	8019b80 <_ZN3CPG4initEhfffffff>
		if(reg_cpg_enabled) {
 801a4ce:	4b31      	ldr	r3, [pc, #196]	@ (801a594 <_ZL8UserTaskPv+0x39c>)
 801a4d0:	f993 3000 	ldrsb.w	r3, [r3]
 801a4d4:	b353      	cbz	r3, 801a52c <_ZL8UserTaskPv+0x334>
			leds->SetLED(LED_USER3, GPIO_PIN_SET);
 801a4d6:	260a      	movs	r6, #10
 801a4d8:	2201      	movs	r2, #1
 801a4da:	210c      	movs	r1, #12
 801a4dc:	9801      	ldr	r0, [sp, #4]
 801a4de:	f7f9 fb51 	bl	8013b84 <_ZN4LEDS6SetLEDEh13GPIO_PinState>
			for(uint32_t j=0;j<10;j++) {
				cpg.step(setpoints, 1);
 801a4e2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801a4e6:	a904      	add	r1, sp, #16
 801a4e8:	4837      	ldr	r0, [pc, #220]	@ (801a5c8 <_ZL8UserTaskPv+0x3d0>)
 801a4ea:	f7ff f965 	bl	80197b8 <_ZN3CPG4stepEPaf>
			for(uint32_t j=0;j<10;j++) {
 801a4ee:	3e01      	subs	r6, #1
 801a4f0:	d1f7      	bne.n	801a4e2 <_ZL8UserTaskPv+0x2ea>
			}
			leds->SetLED(LED_USER3, GPIO_PIN_RESET);
 801a4f2:	4632      	mov	r2, r6
 801a4f4:	210c      	movs	r1, #12
 801a4f6:	9801      	ldr	r0, [sp, #4]
 801a4f8:	f7f9 fb44 	bl	8013b84 <_ZN4LEDS6SetLEDEh13GPIO_PinState>
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801a4fc:	f04f 31ff 	mov.w	r1, #4294967295
 801a500:	6820      	ldr	r0, [r4, #0]
 801a502:	f7f2 f817 	bl	800c534 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801a506:	f10d 020f 	add.w	r2, sp, #15
 801a50a:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 801a50e:	4620      	mov	r0, r4
 801a510:	f7fd fe1d 	bl	801814e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801a514:	f89d 300f 	ldrb.w	r3, [sp, #15]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801a518:	4605      	mov	r5, r0
	if (!success) {
 801a51a:	2b00      	cmp	r3, #0
 801a51c:	d15e      	bne.n	801a5dc <_ZL8UserTaskPv+0x3e4>
	osSemaphoreRelease(RegistersSemaphore);
 801a51e:	6820      	ldr	r0, [r4, #0]
 801a520:	f7f2 f83c 	bl	800c59c <osSemaphoreRelease>
			registers->WriteRegister<int8_t>(REG_CPG_SETPOINTS, setpoints, MODULE_NUMBER);
			publishers->SpinPublisher(PUB_CPG);
 801a524:	2101      	movs	r1, #1
 801a526:	4658      	mov	r0, fp
 801a528:	f7fd f946 	bl	80177b8 <_ZN10Publishers13SpinPublisherEh>
		}
		osDelay(10);
 801a52c:	200a      	movs	r0, #10
 801a52e:	f7f1 ff97 	bl	800c460 <osDelay>
	}
 801a532:	e7cc      	b.n	801a4ce <_ZL8UserTaskPv+0x2d6>
	uint8_t registered_type = GetTypeID<T>(&success);
 801a534:	f10d 000f 	add.w	r0, sp, #15
 801a538:	f7ff fbf6 	bl	8019d28 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0>
	if (!success) {
 801a53c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801a540:	2b00      	cmp	r3, #0
 801a542:	f43f aeab 	beq.w	801a29c <_ZL8UserTaskPv+0xa4>
	if (target_register->register_info.type != registered_type) {
 801a546:	7933      	ldrb	r3, [r6, #4]
 801a548:	4298      	cmp	r0, r3
 801a54a:	f47f aea7 	bne.w	801a29c <_ZL8UserTaskPv+0xa4>
	if (callbacks[target_register->register_info.type] == NULL) {
 801a54e:	3004      	adds	r0, #4
 801a550:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 801a554:	2800      	cmp	r0, #0
 801a556:	f43f aea1 	beq.w	801a29c <_ZL8UserTaskPv+0xa4>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 801a55a:	7833      	ldrb	r3, [r6, #0]
 801a55c:	4f1b      	ldr	r7, [pc, #108]	@ (801a5cc <_ZL8UserTaskPv+0x3d4>)
 801a55e:	b983      	cbnz	r3, 801a582 <_ZL8UserTaskPv+0x38a>
 801a560:	7873      	ldrb	r3, [r6, #1]
 801a562:	b973      	cbnz	r3, 801a582 <_ZL8UserTaskPv+0x38a>
		callback.read = NULL;
 801a564:	9307      	str	r3, [sp, #28]
		target_callback_list->push_back(callback);
 801a566:	a904      	add	r1, sp, #16
 801a568:	e9d0 2300 	ldrd	r2, r3, [r0]
		callback.write = write;
 801a56c:	e9cd 5705 	strd	r5, r7, [sp, #20]
 801a570:	1a9b      	subs	r3, r3, r2
 801a572:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 801a574:	8173      	strh	r3, [r6, #10]
		target_callback_list->push_back(callback);
 801a576:	f7ff fd69 	bl	801a04c <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE9push_backERKS1_>
	target_register->mode.callbacks = true;
 801a57a:	2301      	movs	r3, #1
 801a57c:	7073      	strb	r3, [r6, #1]
	target_register->access.write = true;
 801a57e:	7233      	strb	r3, [r6, #8]
 801a580:	e68c      	b.n	801a29c <_ZL8UserTaskPv+0xa4>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 801a582:	8971      	ldrh	r1, [r6, #10]
 801a584:	f7f5 f8e6 	bl	800f754 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE2atEj>
		callback->write = write;
 801a588:	e9c0 5701 	strd	r5, r7, [r0, #4]
 801a58c:	e7f5      	b.n	801a57a <_ZL8UserTaskPv+0x382>
 801a58e:	bf00      	nop
 801a590:	240071aa 	.word	0x240071aa
 801a594:	240071a9 	.word	0x240071a9
 801a598:	240071a8 	.word	0x240071a8
 801a59c:	24000028 	.word	0x24000028
 801a5a0:	240071a4 	.word	0x240071a4
 801a5a4:	08019bd9 	.word	0x08019bd9
 801a5a8:	08019bed 	.word	0x08019bed
 801a5ac:	24000024 	.word	0x24000024
 801a5b0:	08019c01 	.word	0x08019c01
 801a5b4:	24000020 	.word	0x24000020
 801a5b8:	08019c15 	.word	0x08019c15
 801a5bc:	08019c29 	.word	0x08019c29
 801a5c0:	08019c3d 	.word	0x08019c3d
 801a5c4:	08019c51 	.word	0x08019c51
 801a5c8:	240071b0 	.word	0x240071b0
 801a5cc:	08019bc9 	.word	0x08019bc9
 801a5d0:	2400001c 	.word	0x2400001c
 801a5d4:	24000018 	.word	0x24000018
 801a5d8:	24000014 	.word	0x24000014
	uint8_t registered_type = GetTypeID<T>(&success);
 801a5dc:	f10d 000f 	add.w	r0, sp, #15
 801a5e0:	f7ff fba2 	bl	8019d28 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0>
	if (!success) {
 801a5e4:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801a5e8:	2b00      	cmp	r3, #0
 801a5ea:	d098      	beq.n	801a51e <_ZL8UserTaskPv+0x326>
	if (target_register->register_info.type != registered_type) {
 801a5ec:	792b      	ldrb	r3, [r5, #4]
 801a5ee:	4298      	cmp	r0, r3
 801a5f0:	d195      	bne.n	801a51e <_ZL8UserTaskPv+0x326>
	if (callbacks[target_register->register_info.type] == NULL) {
 801a5f2:	3004      	adds	r0, #4
 801a5f4:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 801a5f8:	2800      	cmp	r0, #0
 801a5fa:	d090      	beq.n	801a51e <_ZL8UserTaskPv+0x326>
	if (target_register->access.write) {
 801a5fc:	7a2b      	ldrb	r3, [r5, #8]
 801a5fe:	2b00      	cmp	r3, #0
 801a600:	d08d      	beq.n	801a51e <_ZL8UserTaskPv+0x326>
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 801a602:	8969      	ldrh	r1, [r5, #10]
		success = false;
 801a604:	f88d 600f 	strb.w	r6, [sp, #15]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 801a608:	f7f5 f8a4 	bl	800f754 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE2atEj>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 801a60c:	68ea      	ldr	r2, [r5, #12]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 801a60e:	6887      	ldr	r7, [r0, #8]
 801a610:	e9d0 9800 	ldrd	r9, r8, [r0]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 801a614:	b122      	cbz	r2, 801a620 <_ZL8UserTaskPv+0x428>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 801a616:	f04f 31ff 	mov.w	r1, #4294967295
 801a61a:	6810      	ldr	r0, [r2, #0]
 801a61c:	f7f1 ff8a 	bl	800c534 <osSemaphoreAcquire>
		if (target_register->mode.pointer) {
 801a620:	782a      	ldrb	r2, [r5, #0]
 801a622:	b302      	cbz	r2, 801a666 <_ZL8UserTaskPv+0x46e>
			success = true;
 801a624:	f88d a00f 	strb.w	sl, [sp, #15]
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 801a628:	796a      	ldrb	r2, [r5, #5]
 801a62a:	2a00      	cmp	r2, #0
 801a62c:	d03f      	beq.n	801a6ae <_ZL8UserTaskPv+0x4b6>
 801a62e:	88ea      	ldrh	r2, [r5, #6]
 801a630:	2a00      	cmp	r2, #0
 801a632:	d137      	bne.n	801a6a4 <_ZL8UserTaskPv+0x4ac>
	if (size_type __n = this->_M_impl._M_finish - __pos)
 801a634:	e9d9 2100 	ldrd	r2, r1, [r9]
 801a638:	428a      	cmp	r2, r1
	    this->_M_impl._M_finish = __pos;
 801a63a:	bf18      	it	ne
 801a63c:	f8c9 2004 	strne.w	r2, [r9, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801a640:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801a644:	1a81      	subs	r1, r0, r2
	if (__new_size > size())
 801a646:	2903      	cmp	r1, #3
 801a648:	d824      	bhi.n	801a694 <_ZL8UserTaskPv+0x49c>
	  _M_default_append(__new_size - size());
 801a64a:	f1c1 0104 	rsb	r1, r1, #4
 801a64e:	4648      	mov	r0, r9
 801a650:	f7f8 f822 	bl	8012698 <_ZNSt6vectorIaSaIaEE17_M_default_appendEj>
				for (uint16_t index = 0; index < length; index++) {
 801a654:	aa04      	add	r2, sp, #16
					(*register_vector)[index] = value[index];
 801a656:	f912 0b01 	ldrsb.w	r0, [r2], #1
 801a65a:	f8d9 1000 	ldr.w	r1, [r9]
 801a65e:	5588      	strb	r0, [r1, r6]
				for (uint16_t index = 0; index < length; index++) {
 801a660:	3601      	adds	r6, #1
 801a662:	2e04      	cmp	r6, #4
 801a664:	d1f7      	bne.n	801a656 <_ZL8UserTaskPv+0x45e>
		if (target_register->mode.callbacks) {
 801a666:	786b      	ldrb	r3, [r5, #1]
 801a668:	b163      	cbz	r3, 801a684 <_ZL8UserTaskPv+0x48c>
			if (callbacks.write != NULL) {
 801a66a:	b15f      	cbz	r7, 801a684 <_ZL8UserTaskPv+0x48c>
				if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 801a66c:	796b      	ldrb	r3, [r5, #5]
 801a66e:	b31b      	cbz	r3, 801a6b8 <_ZL8UserTaskPv+0x4c0>
 801a670:	88eb      	ldrh	r3, [r5, #6]
 801a672:	b903      	cbnz	r3, 801a676 <_ZL8UserTaskPv+0x47e>
					success = callbacks.write(callbacks.context, ID, value, length);
 801a674:	2304      	movs	r3, #4
					success = callbacks.write(callbacks.context, ID, value, 1);
 801a676:	aa04      	add	r2, sp, #16
 801a678:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 801a67c:	4640      	mov	r0, r8
 801a67e:	47b8      	blx	r7
 801a680:	f88d 000f 	strb.w	r0, [sp, #15]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 801a684:	68eb      	ldr	r3, [r5, #12]
 801a686:	2b00      	cmp	r3, #0
 801a688:	f43f af49 	beq.w	801a51e <_ZL8UserTaskPv+0x326>
			osSemaphoreRelease(*(target_register->register_semaphore));
 801a68c:	6818      	ldr	r0, [r3, #0]
 801a68e:	f7f1 ff85 	bl	800c59c <osSemaphoreRelease>
 801a692:	e744      	b.n	801a51e <_ZL8UserTaskPv+0x326>
	else if (__new_size < size())
 801a694:	2904      	cmp	r1, #4
 801a696:	d0dd      	beq.n	801a654 <_ZL8UserTaskPv+0x45c>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 801a698:	3204      	adds	r2, #4
	if (size_type __n = this->_M_impl._M_finish - __pos)
 801a69a:	4290      	cmp	r0, r2
	    this->_M_impl._M_finish = __pos;
 801a69c:	bf18      	it	ne
 801a69e:	f8c9 2004 	strne.w	r2, [r9, #4]
				for (uint16_t index = 0; index < length; index++) {
 801a6a2:	e7d7      	b.n	801a654 <_ZL8UserTaskPv+0x45c>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 801a6a4:	a904      	add	r1, sp, #16
 801a6a6:	4648      	mov	r0, r9
 801a6a8:	f000 fbe0 	bl	801ae6c <memmove>
	  return __result + _Num;
 801a6ac:	e7db      	b.n	801a666 <_ZL8UserTaskPv+0x46e>
				*(callbacks.pointer) = *value;
 801a6ae:	f99d 2010 	ldrsb.w	r2, [sp, #16]
 801a6b2:	f889 2000 	strb.w	r2, [r9]
 801a6b6:	e7d6      	b.n	801a666 <_ZL8UserTaskPv+0x46e>
					success = callbacks.write(callbacks.context, ID, value, 1);
 801a6b8:	2301      	movs	r3, #1
 801a6ba:	e7dc      	b.n	801a676 <_ZL8UserTaskPv+0x47e>

0801a6bc <_GLOBAL__sub_I__ZN4UserC2EP9RegistersP17MasterSubscribersP13CommunicationP8ServicesP10PublishersP13HardwareDelayP7SensorsP4LEDS>:
}
 801a6bc:	b508      	push	{r3, lr}
CPG cpg;
 801a6be:	4802      	ldr	r0, [pc, #8]	@ (801a6c8 <_GLOBAL__sub_I__ZN4UserC2EP9RegistersP17MasterSubscribersP13CommunicationP8ServicesP10PublishersP13HardwareDelayP7SensorsP4LEDS+0xc>)
 801a6c0:	f7ff fbe0 	bl	8019e84 <_ZN3CPGC1Ev>
}
 801a6c4:	bd08      	pop	{r3, pc}
 801a6c6:	bf00      	nop
 801a6c8:	240071b0 	.word	0x240071b0

0801a6cc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 801a6cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801a6ce:	2400      	movs	r4, #0
 801a6d0:	2310      	movs	r3, #16
 801a6d2:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801a6d6:	6803      	ldr	r3, [r0, #0]
 801a6d8:	4615      	mov	r5, r2
 801a6da:	699e      	ldr	r6, [r3, #24]
 801a6dc:	6812      	ldr	r2, [r2, #0]
 801a6de:	466b      	mov	r3, sp
 801a6e0:	e9cd 4400 	strd	r4, r4, [sp]
 801a6e4:	47b0      	blx	r6
 801a6e6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801a6ea:	f003 0306 	and.w	r3, r3, #6
 801a6ee:	2b06      	cmp	r3, #6
 801a6f0:	bf03      	ittte	eq
 801a6f2:	9b00      	ldreq	r3, [sp, #0]
 801a6f4:	602b      	streq	r3, [r5, #0]
 801a6f6:	2001      	moveq	r0, #1
 801a6f8:	4620      	movne	r0, r4
 801a6fa:	b004      	add	sp, #16
 801a6fc:	bd70      	pop	{r4, r5, r6, pc}

0801a6fe <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 801a6fe:	9800      	ldr	r0, [sp, #0]
 801a700:	4290      	cmp	r0, r2
 801a702:	bf0c      	ite	eq
 801a704:	2006      	moveq	r0, #6
 801a706:	2001      	movne	r0, #1
 801a708:	4770      	bx	lr
	...

0801a70c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 801a70c:	b510      	push	{r4, lr}
 801a70e:	4b03      	ldr	r3, [pc, #12]	@ (801a71c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 801a710:	6003      	str	r3, [r0, #0]
 801a712:	4604      	mov	r4, r0
 801a714:	f000 f905 	bl	801a922 <_ZNSt9type_infoD1Ev>
 801a718:	4620      	mov	r0, r4
 801a71a:	bd10      	pop	{r4, pc}
 801a71c:	0801b508 	.word	0x0801b508

0801a720 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 801a720:	b510      	push	{r4, lr}
 801a722:	4604      	mov	r4, r0
 801a724:	f7ff fff2 	bl	801a70c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 801a728:	4620      	mov	r0, r4
 801a72a:	2108      	movs	r1, #8
 801a72c:	f000 f842 	bl	801a7b4 <_ZdlPvj>
 801a730:	4620      	mov	r0, r4
 801a732:	bd10      	pop	{r4, pc}

0801a734 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 801a734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a738:	461f      	mov	r7, r3
 801a73a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 801a73e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801a742:	4598      	cmp	r8, r3
 801a744:	4606      	mov	r6, r0
 801a746:	4615      	mov	r5, r2
 801a748:	d107      	bne.n	801a75a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 801a74a:	9907      	ldr	r1, [sp, #28]
 801a74c:	f000 f8ee 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 801a750:	b118      	cbz	r0, 801a75a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 801a752:	7165      	strb	r5, [r4, #5]
 801a754:	2000      	movs	r0, #0
 801a756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a75a:	4639      	mov	r1, r7
 801a75c:	4630      	mov	r0, r6
 801a75e:	f000 f8e5 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 801a762:	2800      	cmp	r0, #0
 801a764:	d0f6      	beq.n	801a754 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 801a766:	2301      	movs	r3, #1
 801a768:	f8c4 8000 	str.w	r8, [r4]
 801a76c:	7125      	strb	r5, [r4, #4]
 801a76e:	71a3      	strb	r3, [r4, #6]
 801a770:	e7f0      	b.n	801a754 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

0801a772 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 801a772:	b538      	push	{r3, r4, r5, lr}
 801a774:	4615      	mov	r5, r2
 801a776:	461c      	mov	r4, r3
 801a778:	f000 f8d8 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 801a77c:	b120      	cbz	r0, 801a788 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 801a77e:	2308      	movs	r3, #8
 801a780:	60e3      	str	r3, [r4, #12]
 801a782:	2306      	movs	r3, #6
 801a784:	6025      	str	r5, [r4, #0]
 801a786:	7123      	strb	r3, [r4, #4]
 801a788:	bd38      	pop	{r3, r4, r5, pc}

0801a78a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 801a78a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a78e:	4605      	mov	r5, r0
 801a790:	460c      	mov	r4, r1
 801a792:	4616      	mov	r6, r2
 801a794:	461f      	mov	r7, r3
 801a796:	f000 f8c9 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 801a79a:	b948      	cbnz	r0, 801a7b0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 801a79c:	2f03      	cmp	r7, #3
 801a79e:	d807      	bhi.n	801a7b0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 801a7a0:	6823      	ldr	r3, [r4, #0]
 801a7a2:	4632      	mov	r2, r6
 801a7a4:	4629      	mov	r1, r5
 801a7a6:	4620      	mov	r0, r4
 801a7a8:	695b      	ldr	r3, [r3, #20]
 801a7aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a7ae:	4718      	bx	r3
 801a7b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a7b4 <_ZdlPvj>:
 801a7b4:	f000 b8df 	b.w	801a976 <_ZdlPv>

0801a7b8 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>:
 801a7b8:	b510      	push	{r4, lr}
 801a7ba:	4b03      	ldr	r3, [pc, #12]	@ (801a7c8 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev+0x10>)
 801a7bc:	6003      	str	r3, [r0, #0]
 801a7be:	4604      	mov	r4, r0
 801a7c0:	f000 f8af 	bl	801a922 <_ZNSt9type_infoD1Ev>
 801a7c4:	4620      	mov	r0, r4
 801a7c6:	bd10      	pop	{r4, pc}
 801a7c8:	0801b57c 	.word	0x0801b57c

0801a7cc <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>:
 801a7cc:	b510      	push	{r4, lr}
 801a7ce:	4604      	mov	r4, r0
 801a7d0:	f7ff fff2 	bl	801a7b8 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>
 801a7d4:	4620      	mov	r0, r4
 801a7d6:	2108      	movs	r1, #8
 801a7d8:	f7ff ffec 	bl	801a7b4 <_ZdlPvj>
 801a7dc:	4620      	mov	r0, r4
 801a7de:	bd10      	pop	{r4, pc}

0801a7e0 <__cxa_guard_acquire>:
 801a7e0:	6802      	ldr	r2, [r0, #0]
 801a7e2:	07d2      	lsls	r2, r2, #31
 801a7e4:	4603      	mov	r3, r0
 801a7e6:	d405      	bmi.n	801a7f4 <__cxa_guard_acquire+0x14>
 801a7e8:	7842      	ldrb	r2, [r0, #1]
 801a7ea:	b102      	cbz	r2, 801a7ee <__cxa_guard_acquire+0xe>
 801a7ec:	deff      	udf	#255	@ 0xff
 801a7ee:	2001      	movs	r0, #1
 801a7f0:	7058      	strb	r0, [r3, #1]
 801a7f2:	4770      	bx	lr
 801a7f4:	2000      	movs	r0, #0
 801a7f6:	4770      	bx	lr

0801a7f8 <__cxa_guard_release>:
 801a7f8:	2301      	movs	r3, #1
 801a7fa:	6003      	str	r3, [r0, #0]
 801a7fc:	4770      	bx	lr

0801a7fe <_Znwj>:
 801a7fe:	2801      	cmp	r0, #1
 801a800:	bf38      	it	cc
 801a802:	2001      	movcc	r0, #1
 801a804:	b510      	push	{r4, lr}
 801a806:	4604      	mov	r4, r0
 801a808:	4620      	mov	r0, r4
 801a80a:	f000 fa71 	bl	801acf0 <malloc>
 801a80e:	b100      	cbz	r0, 801a812 <_Znwj+0x14>
 801a810:	bd10      	pop	{r4, pc}
 801a812:	f000 f8b3 	bl	801a97c <_ZSt15get_new_handlerv>
 801a816:	b908      	cbnz	r0, 801a81c <_Znwj+0x1e>
 801a818:	f000 fa63 	bl	801ace2 <abort>
 801a81c:	4780      	blx	r0
 801a81e:	e7f3      	b.n	801a808 <_Znwj+0xa>

0801a820 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 801a820:	b510      	push	{r4, lr}
 801a822:	4b03      	ldr	r3, [pc, #12]	@ (801a830 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 801a824:	6003      	str	r3, [r0, #0]
 801a826:	4604      	mov	r4, r0
 801a828:	f7ff ff70 	bl	801a70c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 801a82c:	4620      	mov	r0, r4
 801a82e:	bd10      	pop	{r4, pc}
 801a830:	0801b620 	.word	0x0801b620

0801a834 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 801a834:	b510      	push	{r4, lr}
 801a836:	4604      	mov	r4, r0
 801a838:	f7ff fff2 	bl	801a820 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 801a83c:	4620      	mov	r0, r4
 801a83e:	210c      	movs	r1, #12
 801a840:	f7ff ffb8 	bl	801a7b4 <_ZdlPvj>
 801a844:	4620      	mov	r0, r4
 801a846:	bd10      	pop	{r4, pc}

0801a848 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 801a848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a84c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801a850:	4590      	cmp	r8, r2
 801a852:	4606      	mov	r6, r0
 801a854:	460f      	mov	r7, r1
 801a856:	4615      	mov	r5, r2
 801a858:	461c      	mov	r4, r3
 801a85a:	d00b      	beq.n	801a874 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 801a85c:	68b0      	ldr	r0, [r6, #8]
 801a85e:	6803      	ldr	r3, [r0, #0]
 801a860:	f8cd 8018 	str.w	r8, [sp, #24]
 801a864:	6a1e      	ldr	r6, [r3, #32]
 801a866:	462a      	mov	r2, r5
 801a868:	4623      	mov	r3, r4
 801a86a:	4639      	mov	r1, r7
 801a86c:	46b4      	mov	ip, r6
 801a86e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a872:	4760      	bx	ip
 801a874:	4619      	mov	r1, r3
 801a876:	f000 f859 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 801a87a:	2800      	cmp	r0, #0
 801a87c:	d0ee      	beq.n	801a85c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 801a87e:	2006      	movs	r0, #6
 801a880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a884 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 801a884:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a888:	460d      	mov	r5, r1
 801a88a:	4619      	mov	r1, r3
 801a88c:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	@ 0x28
 801a890:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	@ 0x30
 801a894:	4681      	mov	r9, r0
 801a896:	4617      	mov	r7, r2
 801a898:	4698      	mov	r8, r3
 801a89a:	f000 f847 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 801a89e:	b190      	cbz	r0, 801a8c6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 801a8a0:	2d00      	cmp	r5, #0
 801a8a2:	6034      	str	r4, [r6, #0]
 801a8a4:	7137      	strb	r7, [r6, #4]
 801a8a6:	db09      	blt.n	801a8bc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 801a8a8:	442c      	add	r4, r5
 801a8aa:	45a2      	cmp	sl, r4
 801a8ac:	bf14      	ite	ne
 801a8ae:	2401      	movne	r4, #1
 801a8b0:	2406      	moveq	r4, #6
 801a8b2:	71b4      	strb	r4, [r6, #6]
 801a8b4:	2000      	movs	r0, #0
 801a8b6:	b001      	add	sp, #4
 801a8b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a8bc:	3502      	adds	r5, #2
 801a8be:	d1f9      	bne.n	801a8b4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 801a8c0:	2301      	movs	r3, #1
 801a8c2:	71b3      	strb	r3, [r6, #6]
 801a8c4:	e7f6      	b.n	801a8b4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 801a8c6:	4554      	cmp	r4, sl
 801a8c8:	d106      	bne.n	801a8d8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 801a8ca:	4659      	mov	r1, fp
 801a8cc:	4648      	mov	r0, r9
 801a8ce:	f000 f82d 	bl	801a92c <_ZNKSt9type_info7__equalERKS_>
 801a8d2:	b108      	cbz	r0, 801a8d8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 801a8d4:	7177      	strb	r7, [r6, #5]
 801a8d6:	e7ed      	b.n	801a8b4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 801a8d8:	f8d9 0008 	ldr.w	r0, [r9, #8]
 801a8dc:	6803      	ldr	r3, [r0, #0]
 801a8de:	e9cd a60c 	strd	sl, r6, [sp, #48]	@ 0x30
 801a8e2:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	@ 0x28
 801a8e6:	69dc      	ldr	r4, [r3, #28]
 801a8e8:	463a      	mov	r2, r7
 801a8ea:	4643      	mov	r3, r8
 801a8ec:	4629      	mov	r1, r5
 801a8ee:	46a4      	mov	ip, r4
 801a8f0:	b001      	add	sp, #4
 801a8f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8f6:	4760      	bx	ip

0801a8f8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 801a8f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a8fc:	4607      	mov	r7, r0
 801a8fe:	460c      	mov	r4, r1
 801a900:	4615      	mov	r5, r2
 801a902:	461e      	mov	r6, r3
 801a904:	f7ff ff35 	bl	801a772 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 801a908:	b948      	cbnz	r0, 801a91e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 801a90a:	68b8      	ldr	r0, [r7, #8]
 801a90c:	6803      	ldr	r3, [r0, #0]
 801a90e:	699f      	ldr	r7, [r3, #24]
 801a910:	462a      	mov	r2, r5
 801a912:	4633      	mov	r3, r6
 801a914:	4621      	mov	r1, r4
 801a916:	46bc      	mov	ip, r7
 801a918:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a91c:	4760      	bx	ip
 801a91e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a922 <_ZNSt9type_infoD1Ev>:
 801a922:	4770      	bx	lr

0801a924 <_ZNKSt9type_info14__is_pointer_pEv>:
 801a924:	2000      	movs	r0, #0
 801a926:	4770      	bx	lr

0801a928 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
 801a928:	2000      	movs	r0, #0
 801a92a:	4770      	bx	lr

0801a92c <_ZNKSt9type_info7__equalERKS_>:
 801a92c:	4281      	cmp	r1, r0
 801a92e:	b508      	push	{r3, lr}
 801a930:	d00e      	beq.n	801a950 <_ZNKSt9type_info7__equalERKS_+0x24>
 801a932:	6840      	ldr	r0, [r0, #4]
 801a934:	7803      	ldrb	r3, [r0, #0]
 801a936:	2b2a      	cmp	r3, #42	@ 0x2a
 801a938:	d00c      	beq.n	801a954 <_ZNKSt9type_info7__equalERKS_+0x28>
 801a93a:	6849      	ldr	r1, [r1, #4]
 801a93c:	780b      	ldrb	r3, [r1, #0]
 801a93e:	2b2a      	cmp	r3, #42	@ 0x2a
 801a940:	bf08      	it	eq
 801a942:	3101      	addeq	r1, #1
 801a944:	f7e5 fccc 	bl	80002e0 <strcmp>
 801a948:	fab0 f080 	clz	r0, r0
 801a94c:	0940      	lsrs	r0, r0, #5
 801a94e:	bd08      	pop	{r3, pc}
 801a950:	2001      	movs	r0, #1
 801a952:	e7fc      	b.n	801a94e <_ZNKSt9type_info7__equalERKS_+0x22>
 801a954:	2000      	movs	r0, #0
 801a956:	e7fa      	b.n	801a94e <_ZNKSt9type_info7__equalERKS_+0x22>

0801a958 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
 801a958:	f7ff bfe8 	b.w	801a92c <_ZNKSt9type_info7__equalERKS_>

0801a95c <_ZSt17__throw_bad_allocv>:
 801a95c:	b508      	push	{r3, lr}
 801a95e:	f000 f9c0 	bl	801ace2 <abort>

0801a962 <_ZSt28__throw_bad_array_new_lengthv>:
 801a962:	b508      	push	{r3, lr}
 801a964:	f000 f9bd 	bl	801ace2 <abort>

0801a968 <_ZSt20__throw_length_errorPKc>:
 801a968:	b508      	push	{r3, lr}
 801a96a:	f000 f9ba 	bl	801ace2 <abort>

0801a96e <_ZSt24__throw_out_of_range_fmtPKcz>:
 801a96e:	b40f      	push	{r0, r1, r2, r3}
 801a970:	b508      	push	{r3, lr}
 801a972:	f000 f9b6 	bl	801ace2 <abort>

0801a976 <_ZdlPv>:
 801a976:	f000 b9c3 	b.w	801ad00 <free>
	...

0801a97c <_ZSt15get_new_handlerv>:
 801a97c:	4b02      	ldr	r3, [pc, #8]	@ (801a988 <_ZSt15get_new_handlerv+0xc>)
 801a97e:	6818      	ldr	r0, [r3, #0]
 801a980:	f3bf 8f5b 	dmb	ish
 801a984:	4770      	bx	lr
 801a986:	bf00      	nop
 801a988:	24009454 	.word	0x24009454

0801a98c <sinf_poly>:
 801a98c:	07cb      	lsls	r3, r1, #31
 801a98e:	d412      	bmi.n	801a9b6 <sinf_poly+0x2a>
 801a990:	ee21 5b00 	vmul.f64	d5, d1, d0
 801a994:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 801a998:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 801a99c:	eea6 7b01 	vfma.f64	d7, d6, d1
 801a9a0:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 801a9a4:	ee21 1b05 	vmul.f64	d1, d1, d5
 801a9a8:	eea6 0b05 	vfma.f64	d0, d6, d5
 801a9ac:	eea7 0b01 	vfma.f64	d0, d7, d1
 801a9b0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801a9b4:	4770      	bx	lr
 801a9b6:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 801a9ba:	ee21 5b01 	vmul.f64	d5, d1, d1
 801a9be:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 801a9c2:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 801a9c6:	eea1 7b06 	vfma.f64	d7, d1, d6
 801a9ca:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 801a9ce:	eea1 0b06 	vfma.f64	d0, d1, d6
 801a9d2:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 801a9d6:	ee21 1b05 	vmul.f64	d1, d1, d5
 801a9da:	eea5 0b06 	vfma.f64	d0, d5, d6
 801a9de:	e7e5      	b.n	801a9ac <sinf_poly+0x20>

0801a9e0 <sinf>:
 801a9e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a9e2:	ee10 4a10 	vmov	r4, s0
 801a9e6:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801a9ea:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 801a9ee:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 801a9f2:	eef0 7a40 	vmov.f32	s15, s0
 801a9f6:	ea4f 5214 	mov.w	r2, r4, lsr #20
 801a9fa:	d218      	bcs.n	801aa2e <sinf+0x4e>
 801a9fc:	ee26 1b06 	vmul.f64	d1, d6, d6
 801aa00:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 801aa04:	d20a      	bcs.n	801aa1c <sinf+0x3c>
 801aa06:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 801aa0a:	d103      	bne.n	801aa14 <sinf+0x34>
 801aa0c:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 801aa10:	ed8d 1a01 	vstr	s2, [sp, #4]
 801aa14:	eeb0 0a67 	vmov.f32	s0, s15
 801aa18:	b003      	add	sp, #12
 801aa1a:	bd30      	pop	{r4, r5, pc}
 801aa1c:	483a      	ldr	r0, [pc, #232]	@ (801ab08 <sinf+0x128>)
 801aa1e:	eeb0 0b46 	vmov.f64	d0, d6
 801aa22:	2100      	movs	r1, #0
 801aa24:	b003      	add	sp, #12
 801aa26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801aa2a:	f7ff bfaf 	b.w	801a98c <sinf_poly>
 801aa2e:	f240 422e 	movw	r2, #1070	@ 0x42e
 801aa32:	4293      	cmp	r3, r2
 801aa34:	d824      	bhi.n	801aa80 <sinf+0xa0>
 801aa36:	4b34      	ldr	r3, [pc, #208]	@ (801ab08 <sinf+0x128>)
 801aa38:	ed93 7b08 	vldr	d7, [r3, #32]
 801aa3c:	ee26 7b07 	vmul.f64	d7, d6, d7
 801aa40:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801aa44:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801aa48:	ee17 1a90 	vmov	r1, s15
 801aa4c:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 801aa50:	1609      	asrs	r1, r1, #24
 801aa52:	ee07 1a90 	vmov	s15, r1
 801aa56:	f001 0203 	and.w	r2, r1, #3
 801aa5a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801aa5e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801aa62:	ed92 0b00 	vldr	d0, [r2]
 801aa66:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 801aa6a:	f011 0f02 	tst.w	r1, #2
 801aa6e:	eea5 6b47 	vfms.f64	d6, d5, d7
 801aa72:	bf08      	it	eq
 801aa74:	4618      	moveq	r0, r3
 801aa76:	ee26 1b06 	vmul.f64	d1, d6, d6
 801aa7a:	ee20 0b06 	vmul.f64	d0, d0, d6
 801aa7e:	e7d1      	b.n	801aa24 <sinf+0x44>
 801aa80:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 801aa84:	d237      	bcs.n	801aaf6 <sinf+0x116>
 801aa86:	4921      	ldr	r1, [pc, #132]	@ (801ab0c <sinf+0x12c>)
 801aa88:	f3c4 6083 	ubfx	r0, r4, #26, #4
 801aa8c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 801aa90:	f3c4 0316 	ubfx	r3, r4, #0, #23
 801aa94:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 801aa98:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801aa9c:	6a10      	ldr	r0, [r2, #32]
 801aa9e:	6912      	ldr	r2, [r2, #16]
 801aaa0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801aaa4:	40ab      	lsls	r3, r5
 801aaa6:	fba0 5003 	umull	r5, r0, r0, r3
 801aaaa:	4359      	muls	r1, r3
 801aaac:	fbe3 0102 	umlal	r0, r1, r3, r2
 801aab0:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 801aab4:	0f9d      	lsrs	r5, r3, #30
 801aab6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 801aaba:	1ac9      	subs	r1, r1, r3
 801aabc:	f7e5 fda8 	bl	8000610 <__aeabi_l2d>
 801aac0:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 801aac4:	4b10      	ldr	r3, [pc, #64]	@ (801ab08 <sinf+0x128>)
 801aac6:	f004 0203 	and.w	r2, r4, #3
 801aaca:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801aace:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 801ab00 <sinf+0x120>
 801aad2:	ed92 0b00 	vldr	d0, [r2]
 801aad6:	ec41 0b17 	vmov	d7, r0, r1
 801aada:	f014 0f02 	tst.w	r4, #2
 801aade:	ee27 7b06 	vmul.f64	d7, d7, d6
 801aae2:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801aae6:	4629      	mov	r1, r5
 801aae8:	bf08      	it	eq
 801aaea:	4618      	moveq	r0, r3
 801aaec:	ee27 1b07 	vmul.f64	d1, d7, d7
 801aaf0:	ee20 0b07 	vmul.f64	d0, d0, d7
 801aaf4:	e796      	b.n	801aa24 <sinf+0x44>
 801aaf6:	b003      	add	sp, #12
 801aaf8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801aafc:	f000 b8e2 	b.w	801acc4 <__math_invalidf>
 801ab00:	54442d18 	.word	0x54442d18
 801ab04:	3c1921fb 	.word	0x3c1921fb
 801ab08:	0801b6c0 	.word	0x0801b6c0
 801ab0c:	0801b65c 	.word	0x0801b65c

0801ab10 <sinf_poly>:
 801ab10:	07cb      	lsls	r3, r1, #31
 801ab12:	d412      	bmi.n	801ab3a <sinf_poly+0x2a>
 801ab14:	ee21 5b00 	vmul.f64	d5, d1, d0
 801ab18:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 801ab1c:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 801ab20:	eea6 7b01 	vfma.f64	d7, d6, d1
 801ab24:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 801ab28:	ee21 1b05 	vmul.f64	d1, d1, d5
 801ab2c:	eea6 0b05 	vfma.f64	d0, d6, d5
 801ab30:	eea7 0b01 	vfma.f64	d0, d7, d1
 801ab34:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801ab38:	4770      	bx	lr
 801ab3a:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 801ab3e:	ee21 5b01 	vmul.f64	d5, d1, d1
 801ab42:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 801ab46:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 801ab4a:	eea1 7b06 	vfma.f64	d7, d1, d6
 801ab4e:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 801ab52:	eea1 0b06 	vfma.f64	d0, d1, d6
 801ab56:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 801ab5a:	ee21 1b05 	vmul.f64	d1, d1, d5
 801ab5e:	eea5 0b06 	vfma.f64	d0, d5, d6
 801ab62:	e7e5      	b.n	801ab30 <sinf_poly+0x20>
 801ab64:	0000      	movs	r0, r0
	...

0801ab68 <cosf>:
 801ab68:	b538      	push	{r3, r4, r5, lr}
 801ab6a:	ee10 4a10 	vmov	r4, s0
 801ab6e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801ab72:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 801ab76:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 801ab7a:	d21f      	bcs.n	801abbc <cosf+0x54>
 801ab7c:	ee27 7b07 	vmul.f64	d7, d7, d7
 801ab80:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 801ab84:	f0c0 8082 	bcc.w	801ac8c <cosf+0x124>
 801ab88:	ee27 4b07 	vmul.f64	d4, d7, d7
 801ab8c:	4b44      	ldr	r3, [pc, #272]	@ (801aca0 <cosf+0x138>)
 801ab8e:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 801ab92:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 801ab96:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 801ab9a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801ab9e:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 801aba2:	eea7 0b05 	vfma.f64	d0, d7, d5
 801aba6:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 801abaa:	ee27 7b04 	vmul.f64	d7, d7, d4
 801abae:	eea4 0b05 	vfma.f64	d0, d4, d5
 801abb2:	eea6 0b07 	vfma.f64	d0, d6, d7
 801abb6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801abba:	bd38      	pop	{r3, r4, r5, pc}
 801abbc:	f240 422e 	movw	r2, #1070	@ 0x42e
 801abc0:	4293      	cmp	r3, r2
 801abc2:	d829      	bhi.n	801ac18 <cosf+0xb0>
 801abc4:	4b36      	ldr	r3, [pc, #216]	@ (801aca0 <cosf+0x138>)
 801abc6:	ed93 6b08 	vldr	d6, [r3, #32]
 801abca:	ee27 6b06 	vmul.f64	d6, d7, d6
 801abce:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 801abd2:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801abd6:	ee16 1a90 	vmov	r1, s13
 801abda:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 801abde:	1609      	asrs	r1, r1, #24
 801abe0:	ee06 1a90 	vmov	s13, r1
 801abe4:	f001 0203 	and.w	r2, r1, #3
 801abe8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801abec:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 801abf0:	ed92 0b00 	vldr	d0, [r2]
 801abf4:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 801abf8:	f011 0f02 	tst.w	r1, #2
 801abfc:	f081 0101 	eor.w	r1, r1, #1
 801ac00:	eea5 7b46 	vfms.f64	d7, d5, d6
 801ac04:	bf08      	it	eq
 801ac06:	4618      	moveq	r0, r3
 801ac08:	ee27 1b07 	vmul.f64	d1, d7, d7
 801ac0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ac10:	ee20 0b07 	vmul.f64	d0, d0, d7
 801ac14:	f7ff bf7c 	b.w	801ab10 <sinf_poly>
 801ac18:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 801ac1c:	d232      	bcs.n	801ac84 <cosf+0x11c>
 801ac1e:	4921      	ldr	r1, [pc, #132]	@ (801aca4 <cosf+0x13c>)
 801ac20:	f3c4 6083 	ubfx	r0, r4, #26, #4
 801ac24:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 801ac28:	f3c4 0316 	ubfx	r3, r4, #0, #23
 801ac2c:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 801ac30:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801ac34:	6a10      	ldr	r0, [r2, #32]
 801ac36:	6912      	ldr	r2, [r2, #16]
 801ac38:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801ac3c:	40ab      	lsls	r3, r5
 801ac3e:	fba0 5003 	umull	r5, r0, r0, r3
 801ac42:	4359      	muls	r1, r3
 801ac44:	fbe3 0102 	umlal	r0, r1, r3, r2
 801ac48:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 801ac4c:	0f9d      	lsrs	r5, r3, #30
 801ac4e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 801ac52:	1ac9      	subs	r1, r1, r3
 801ac54:	f7e5 fcdc 	bl	8000610 <__aeabi_l2d>
 801ac58:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 801ac5c:	4b10      	ldr	r3, [pc, #64]	@ (801aca0 <cosf+0x138>)
 801ac5e:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 801ac98 <cosf+0x130>
 801ac62:	ec41 0b17 	vmov	d7, r0, r1
 801ac66:	f004 0203 	and.w	r2, r4, #3
 801ac6a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801ac6e:	ed92 0b00 	vldr	d0, [r2]
 801ac72:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ac76:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801ac7a:	f014 0f02 	tst.w	r4, #2
 801ac7e:	f085 0101 	eor.w	r1, r5, #1
 801ac82:	e7bf      	b.n	801ac04 <cosf+0x9c>
 801ac84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ac88:	f000 b81c 	b.w	801acc4 <__math_invalidf>
 801ac8c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801ac90:	e793      	b.n	801abba <cosf+0x52>
 801ac92:	bf00      	nop
 801ac94:	f3af 8000 	nop.w
 801ac98:	54442d18 	.word	0x54442d18
 801ac9c:	3c1921fb 	.word	0x3c1921fb
 801aca0:	0801b6c0 	.word	0x0801b6c0
 801aca4:	0801b65c 	.word	0x0801b65c

0801aca8 <with_errnof>:
 801aca8:	b510      	push	{r4, lr}
 801acaa:	ed2d 8b02 	vpush	{d8}
 801acae:	eeb0 8a40 	vmov.f32	s16, s0
 801acb2:	4604      	mov	r4, r0
 801acb4:	f000 f9a6 	bl	801b004 <__errno>
 801acb8:	eeb0 0a48 	vmov.f32	s0, s16
 801acbc:	ecbd 8b02 	vpop	{d8}
 801acc0:	6004      	str	r4, [r0, #0]
 801acc2:	bd10      	pop	{r4, pc}

0801acc4 <__math_invalidf>:
 801acc4:	eef0 7a40 	vmov.f32	s15, s0
 801acc8:	ee30 7a40 	vsub.f32	s14, s0, s0
 801accc:	eef4 7a67 	vcmp.f32	s15, s15
 801acd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801acd4:	ee87 0a07 	vdiv.f32	s0, s14, s14
 801acd8:	d602      	bvs.n	801ace0 <__math_invalidf+0x1c>
 801acda:	2021      	movs	r0, #33	@ 0x21
 801acdc:	f7ff bfe4 	b.w	801aca8 <with_errnof>
 801ace0:	4770      	bx	lr

0801ace2 <abort>:
 801ace2:	b508      	push	{r3, lr}
 801ace4:	2006      	movs	r0, #6
 801ace6:	f000 f90b 	bl	801af00 <raise>
 801acea:	2001      	movs	r0, #1
 801acec:	f7e8 fad2 	bl	8003294 <_exit>

0801acf0 <malloc>:
 801acf0:	4b02      	ldr	r3, [pc, #8]	@ (801acfc <malloc+0xc>)
 801acf2:	4601      	mov	r1, r0
 801acf4:	6818      	ldr	r0, [r3, #0]
 801acf6:	f000 b82d 	b.w	801ad54 <_malloc_r>
 801acfa:	bf00      	nop
 801acfc:	2400002c 	.word	0x2400002c

0801ad00 <free>:
 801ad00:	4b02      	ldr	r3, [pc, #8]	@ (801ad0c <free+0xc>)
 801ad02:	4601      	mov	r1, r0
 801ad04:	6818      	ldr	r0, [r3, #0]
 801ad06:	f000 b9b7 	b.w	801b078 <_free_r>
 801ad0a:	bf00      	nop
 801ad0c:	2400002c 	.word	0x2400002c

0801ad10 <sbrk_aligned>:
 801ad10:	b570      	push	{r4, r5, r6, lr}
 801ad12:	4e0f      	ldr	r6, [pc, #60]	@ (801ad50 <sbrk_aligned+0x40>)
 801ad14:	460c      	mov	r4, r1
 801ad16:	6831      	ldr	r1, [r6, #0]
 801ad18:	4605      	mov	r5, r0
 801ad1a:	b911      	cbnz	r1, 801ad22 <sbrk_aligned+0x12>
 801ad1c:	f000 f962 	bl	801afe4 <_sbrk_r>
 801ad20:	6030      	str	r0, [r6, #0]
 801ad22:	4621      	mov	r1, r4
 801ad24:	4628      	mov	r0, r5
 801ad26:	f000 f95d 	bl	801afe4 <_sbrk_r>
 801ad2a:	1c43      	adds	r3, r0, #1
 801ad2c:	d103      	bne.n	801ad36 <sbrk_aligned+0x26>
 801ad2e:	f04f 34ff 	mov.w	r4, #4294967295
 801ad32:	4620      	mov	r0, r4
 801ad34:	bd70      	pop	{r4, r5, r6, pc}
 801ad36:	1cc4      	adds	r4, r0, #3
 801ad38:	f024 0403 	bic.w	r4, r4, #3
 801ad3c:	42a0      	cmp	r0, r4
 801ad3e:	d0f8      	beq.n	801ad32 <sbrk_aligned+0x22>
 801ad40:	1a21      	subs	r1, r4, r0
 801ad42:	4628      	mov	r0, r5
 801ad44:	f000 f94e 	bl	801afe4 <_sbrk_r>
 801ad48:	3001      	adds	r0, #1
 801ad4a:	d1f2      	bne.n	801ad32 <sbrk_aligned+0x22>
 801ad4c:	e7ef      	b.n	801ad2e <sbrk_aligned+0x1e>
 801ad4e:	bf00      	nop
 801ad50:	24009458 	.word	0x24009458

0801ad54 <_malloc_r>:
 801ad54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ad58:	1ccd      	adds	r5, r1, #3
 801ad5a:	f025 0503 	bic.w	r5, r5, #3
 801ad5e:	3508      	adds	r5, #8
 801ad60:	2d0c      	cmp	r5, #12
 801ad62:	bf38      	it	cc
 801ad64:	250c      	movcc	r5, #12
 801ad66:	2d00      	cmp	r5, #0
 801ad68:	4606      	mov	r6, r0
 801ad6a:	db01      	blt.n	801ad70 <_malloc_r+0x1c>
 801ad6c:	42a9      	cmp	r1, r5
 801ad6e:	d904      	bls.n	801ad7a <_malloc_r+0x26>
 801ad70:	230c      	movs	r3, #12
 801ad72:	6033      	str	r3, [r6, #0]
 801ad74:	2000      	movs	r0, #0
 801ad76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ad7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801ae50 <_malloc_r+0xfc>
 801ad7e:	f000 f869 	bl	801ae54 <__malloc_lock>
 801ad82:	f8d8 3000 	ldr.w	r3, [r8]
 801ad86:	461c      	mov	r4, r3
 801ad88:	bb44      	cbnz	r4, 801addc <_malloc_r+0x88>
 801ad8a:	4629      	mov	r1, r5
 801ad8c:	4630      	mov	r0, r6
 801ad8e:	f7ff ffbf 	bl	801ad10 <sbrk_aligned>
 801ad92:	1c43      	adds	r3, r0, #1
 801ad94:	4604      	mov	r4, r0
 801ad96:	d158      	bne.n	801ae4a <_malloc_r+0xf6>
 801ad98:	f8d8 4000 	ldr.w	r4, [r8]
 801ad9c:	4627      	mov	r7, r4
 801ad9e:	2f00      	cmp	r7, #0
 801ada0:	d143      	bne.n	801ae2a <_malloc_r+0xd6>
 801ada2:	2c00      	cmp	r4, #0
 801ada4:	d04b      	beq.n	801ae3e <_malloc_r+0xea>
 801ada6:	6823      	ldr	r3, [r4, #0]
 801ada8:	4639      	mov	r1, r7
 801adaa:	4630      	mov	r0, r6
 801adac:	eb04 0903 	add.w	r9, r4, r3
 801adb0:	f000 f918 	bl	801afe4 <_sbrk_r>
 801adb4:	4581      	cmp	r9, r0
 801adb6:	d142      	bne.n	801ae3e <_malloc_r+0xea>
 801adb8:	6821      	ldr	r1, [r4, #0]
 801adba:	1a6d      	subs	r5, r5, r1
 801adbc:	4629      	mov	r1, r5
 801adbe:	4630      	mov	r0, r6
 801adc0:	f7ff ffa6 	bl	801ad10 <sbrk_aligned>
 801adc4:	3001      	adds	r0, #1
 801adc6:	d03a      	beq.n	801ae3e <_malloc_r+0xea>
 801adc8:	6823      	ldr	r3, [r4, #0]
 801adca:	442b      	add	r3, r5
 801adcc:	6023      	str	r3, [r4, #0]
 801adce:	f8d8 3000 	ldr.w	r3, [r8]
 801add2:	685a      	ldr	r2, [r3, #4]
 801add4:	bb62      	cbnz	r2, 801ae30 <_malloc_r+0xdc>
 801add6:	f8c8 7000 	str.w	r7, [r8]
 801adda:	e00f      	b.n	801adfc <_malloc_r+0xa8>
 801addc:	6822      	ldr	r2, [r4, #0]
 801adde:	1b52      	subs	r2, r2, r5
 801ade0:	d420      	bmi.n	801ae24 <_malloc_r+0xd0>
 801ade2:	2a0b      	cmp	r2, #11
 801ade4:	d917      	bls.n	801ae16 <_malloc_r+0xc2>
 801ade6:	1961      	adds	r1, r4, r5
 801ade8:	42a3      	cmp	r3, r4
 801adea:	6025      	str	r5, [r4, #0]
 801adec:	bf18      	it	ne
 801adee:	6059      	strne	r1, [r3, #4]
 801adf0:	6863      	ldr	r3, [r4, #4]
 801adf2:	bf08      	it	eq
 801adf4:	f8c8 1000 	streq.w	r1, [r8]
 801adf8:	5162      	str	r2, [r4, r5]
 801adfa:	604b      	str	r3, [r1, #4]
 801adfc:	4630      	mov	r0, r6
 801adfe:	f000 f82f 	bl	801ae60 <__malloc_unlock>
 801ae02:	f104 000b 	add.w	r0, r4, #11
 801ae06:	1d23      	adds	r3, r4, #4
 801ae08:	f020 0007 	bic.w	r0, r0, #7
 801ae0c:	1ac2      	subs	r2, r0, r3
 801ae0e:	bf1c      	itt	ne
 801ae10:	1a1b      	subne	r3, r3, r0
 801ae12:	50a3      	strne	r3, [r4, r2]
 801ae14:	e7af      	b.n	801ad76 <_malloc_r+0x22>
 801ae16:	6862      	ldr	r2, [r4, #4]
 801ae18:	42a3      	cmp	r3, r4
 801ae1a:	bf0c      	ite	eq
 801ae1c:	f8c8 2000 	streq.w	r2, [r8]
 801ae20:	605a      	strne	r2, [r3, #4]
 801ae22:	e7eb      	b.n	801adfc <_malloc_r+0xa8>
 801ae24:	4623      	mov	r3, r4
 801ae26:	6864      	ldr	r4, [r4, #4]
 801ae28:	e7ae      	b.n	801ad88 <_malloc_r+0x34>
 801ae2a:	463c      	mov	r4, r7
 801ae2c:	687f      	ldr	r7, [r7, #4]
 801ae2e:	e7b6      	b.n	801ad9e <_malloc_r+0x4a>
 801ae30:	461a      	mov	r2, r3
 801ae32:	685b      	ldr	r3, [r3, #4]
 801ae34:	42a3      	cmp	r3, r4
 801ae36:	d1fb      	bne.n	801ae30 <_malloc_r+0xdc>
 801ae38:	2300      	movs	r3, #0
 801ae3a:	6053      	str	r3, [r2, #4]
 801ae3c:	e7de      	b.n	801adfc <_malloc_r+0xa8>
 801ae3e:	230c      	movs	r3, #12
 801ae40:	6033      	str	r3, [r6, #0]
 801ae42:	4630      	mov	r0, r6
 801ae44:	f000 f80c 	bl	801ae60 <__malloc_unlock>
 801ae48:	e794      	b.n	801ad74 <_malloc_r+0x20>
 801ae4a:	6005      	str	r5, [r0, #0]
 801ae4c:	e7d6      	b.n	801adfc <_malloc_r+0xa8>
 801ae4e:	bf00      	nop
 801ae50:	2400945c 	.word	0x2400945c

0801ae54 <__malloc_lock>:
 801ae54:	4801      	ldr	r0, [pc, #4]	@ (801ae5c <__malloc_lock+0x8>)
 801ae56:	f000 b8ff 	b.w	801b058 <__retarget_lock_acquire_recursive>
 801ae5a:	bf00      	nop
 801ae5c:	2400959c 	.word	0x2400959c

0801ae60 <__malloc_unlock>:
 801ae60:	4801      	ldr	r0, [pc, #4]	@ (801ae68 <__malloc_unlock+0x8>)
 801ae62:	f000 b8fa 	b.w	801b05a <__retarget_lock_release_recursive>
 801ae66:	bf00      	nop
 801ae68:	2400959c 	.word	0x2400959c

0801ae6c <memmove>:
 801ae6c:	4288      	cmp	r0, r1
 801ae6e:	b510      	push	{r4, lr}
 801ae70:	eb01 0402 	add.w	r4, r1, r2
 801ae74:	d902      	bls.n	801ae7c <memmove+0x10>
 801ae76:	4284      	cmp	r4, r0
 801ae78:	4623      	mov	r3, r4
 801ae7a:	d807      	bhi.n	801ae8c <memmove+0x20>
 801ae7c:	1e43      	subs	r3, r0, #1
 801ae7e:	42a1      	cmp	r1, r4
 801ae80:	d008      	beq.n	801ae94 <memmove+0x28>
 801ae82:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ae86:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ae8a:	e7f8      	b.n	801ae7e <memmove+0x12>
 801ae8c:	4402      	add	r2, r0
 801ae8e:	4601      	mov	r1, r0
 801ae90:	428a      	cmp	r2, r1
 801ae92:	d100      	bne.n	801ae96 <memmove+0x2a>
 801ae94:	bd10      	pop	{r4, pc}
 801ae96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ae9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ae9e:	e7f7      	b.n	801ae90 <memmove+0x24>

0801aea0 <memset>:
 801aea0:	4402      	add	r2, r0
 801aea2:	4603      	mov	r3, r0
 801aea4:	4293      	cmp	r3, r2
 801aea6:	d100      	bne.n	801aeaa <memset+0xa>
 801aea8:	4770      	bx	lr
 801aeaa:	f803 1b01 	strb.w	r1, [r3], #1
 801aeae:	e7f9      	b.n	801aea4 <memset+0x4>

0801aeb0 <_raise_r>:
 801aeb0:	291f      	cmp	r1, #31
 801aeb2:	b538      	push	{r3, r4, r5, lr}
 801aeb4:	4605      	mov	r5, r0
 801aeb6:	460c      	mov	r4, r1
 801aeb8:	d904      	bls.n	801aec4 <_raise_r+0x14>
 801aeba:	2316      	movs	r3, #22
 801aebc:	6003      	str	r3, [r0, #0]
 801aebe:	f04f 30ff 	mov.w	r0, #4294967295
 801aec2:	bd38      	pop	{r3, r4, r5, pc}
 801aec4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801aec6:	b112      	cbz	r2, 801aece <_raise_r+0x1e>
 801aec8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801aecc:	b94b      	cbnz	r3, 801aee2 <_raise_r+0x32>
 801aece:	4628      	mov	r0, r5
 801aed0:	f000 f886 	bl	801afe0 <_getpid_r>
 801aed4:	4622      	mov	r2, r4
 801aed6:	4601      	mov	r1, r0
 801aed8:	4628      	mov	r0, r5
 801aeda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801aede:	f000 b86d 	b.w	801afbc <_kill_r>
 801aee2:	2b01      	cmp	r3, #1
 801aee4:	d00a      	beq.n	801aefc <_raise_r+0x4c>
 801aee6:	1c59      	adds	r1, r3, #1
 801aee8:	d103      	bne.n	801aef2 <_raise_r+0x42>
 801aeea:	2316      	movs	r3, #22
 801aeec:	6003      	str	r3, [r0, #0]
 801aeee:	2001      	movs	r0, #1
 801aef0:	e7e7      	b.n	801aec2 <_raise_r+0x12>
 801aef2:	2100      	movs	r1, #0
 801aef4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801aef8:	4620      	mov	r0, r4
 801aefa:	4798      	blx	r3
 801aefc:	2000      	movs	r0, #0
 801aefe:	e7e0      	b.n	801aec2 <_raise_r+0x12>

0801af00 <raise>:
 801af00:	4b02      	ldr	r3, [pc, #8]	@ (801af0c <raise+0xc>)
 801af02:	4601      	mov	r1, r0
 801af04:	6818      	ldr	r0, [r3, #0]
 801af06:	f7ff bfd3 	b.w	801aeb0 <_raise_r>
 801af0a:	bf00      	nop
 801af0c:	2400002c 	.word	0x2400002c

0801af10 <_reclaim_reent>:
 801af10:	4b29      	ldr	r3, [pc, #164]	@ (801afb8 <_reclaim_reent+0xa8>)
 801af12:	681b      	ldr	r3, [r3, #0]
 801af14:	4283      	cmp	r3, r0
 801af16:	b570      	push	{r4, r5, r6, lr}
 801af18:	4604      	mov	r4, r0
 801af1a:	d04b      	beq.n	801afb4 <_reclaim_reent+0xa4>
 801af1c:	69c3      	ldr	r3, [r0, #28]
 801af1e:	b1ab      	cbz	r3, 801af4c <_reclaim_reent+0x3c>
 801af20:	68db      	ldr	r3, [r3, #12]
 801af22:	b16b      	cbz	r3, 801af40 <_reclaim_reent+0x30>
 801af24:	2500      	movs	r5, #0
 801af26:	69e3      	ldr	r3, [r4, #28]
 801af28:	68db      	ldr	r3, [r3, #12]
 801af2a:	5959      	ldr	r1, [r3, r5]
 801af2c:	2900      	cmp	r1, #0
 801af2e:	d13b      	bne.n	801afa8 <_reclaim_reent+0x98>
 801af30:	3504      	adds	r5, #4
 801af32:	2d80      	cmp	r5, #128	@ 0x80
 801af34:	d1f7      	bne.n	801af26 <_reclaim_reent+0x16>
 801af36:	69e3      	ldr	r3, [r4, #28]
 801af38:	4620      	mov	r0, r4
 801af3a:	68d9      	ldr	r1, [r3, #12]
 801af3c:	f000 f89c 	bl	801b078 <_free_r>
 801af40:	69e3      	ldr	r3, [r4, #28]
 801af42:	6819      	ldr	r1, [r3, #0]
 801af44:	b111      	cbz	r1, 801af4c <_reclaim_reent+0x3c>
 801af46:	4620      	mov	r0, r4
 801af48:	f000 f896 	bl	801b078 <_free_r>
 801af4c:	6961      	ldr	r1, [r4, #20]
 801af4e:	b111      	cbz	r1, 801af56 <_reclaim_reent+0x46>
 801af50:	4620      	mov	r0, r4
 801af52:	f000 f891 	bl	801b078 <_free_r>
 801af56:	69e1      	ldr	r1, [r4, #28]
 801af58:	b111      	cbz	r1, 801af60 <_reclaim_reent+0x50>
 801af5a:	4620      	mov	r0, r4
 801af5c:	f000 f88c 	bl	801b078 <_free_r>
 801af60:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801af62:	b111      	cbz	r1, 801af6a <_reclaim_reent+0x5a>
 801af64:	4620      	mov	r0, r4
 801af66:	f000 f887 	bl	801b078 <_free_r>
 801af6a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801af6c:	b111      	cbz	r1, 801af74 <_reclaim_reent+0x64>
 801af6e:	4620      	mov	r0, r4
 801af70:	f000 f882 	bl	801b078 <_free_r>
 801af74:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801af76:	b111      	cbz	r1, 801af7e <_reclaim_reent+0x6e>
 801af78:	4620      	mov	r0, r4
 801af7a:	f000 f87d 	bl	801b078 <_free_r>
 801af7e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801af80:	b111      	cbz	r1, 801af88 <_reclaim_reent+0x78>
 801af82:	4620      	mov	r0, r4
 801af84:	f000 f878 	bl	801b078 <_free_r>
 801af88:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801af8a:	b111      	cbz	r1, 801af92 <_reclaim_reent+0x82>
 801af8c:	4620      	mov	r0, r4
 801af8e:	f000 f873 	bl	801b078 <_free_r>
 801af92:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801af94:	b111      	cbz	r1, 801af9c <_reclaim_reent+0x8c>
 801af96:	4620      	mov	r0, r4
 801af98:	f000 f86e 	bl	801b078 <_free_r>
 801af9c:	6a23      	ldr	r3, [r4, #32]
 801af9e:	b14b      	cbz	r3, 801afb4 <_reclaim_reent+0xa4>
 801afa0:	4620      	mov	r0, r4
 801afa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801afa6:	4718      	bx	r3
 801afa8:	680e      	ldr	r6, [r1, #0]
 801afaa:	4620      	mov	r0, r4
 801afac:	f000 f864 	bl	801b078 <_free_r>
 801afb0:	4631      	mov	r1, r6
 801afb2:	e7bb      	b.n	801af2c <_reclaim_reent+0x1c>
 801afb4:	bd70      	pop	{r4, r5, r6, pc}
 801afb6:	bf00      	nop
 801afb8:	2400002c 	.word	0x2400002c

0801afbc <_kill_r>:
 801afbc:	b538      	push	{r3, r4, r5, lr}
 801afbe:	4d07      	ldr	r5, [pc, #28]	@ (801afdc <_kill_r+0x20>)
 801afc0:	2300      	movs	r3, #0
 801afc2:	4604      	mov	r4, r0
 801afc4:	4608      	mov	r0, r1
 801afc6:	4611      	mov	r1, r2
 801afc8:	602b      	str	r3, [r5, #0]
 801afca:	f7e8 f95b 	bl	8003284 <_kill>
 801afce:	1c43      	adds	r3, r0, #1
 801afd0:	d102      	bne.n	801afd8 <_kill_r+0x1c>
 801afd2:	682b      	ldr	r3, [r5, #0]
 801afd4:	b103      	cbz	r3, 801afd8 <_kill_r+0x1c>
 801afd6:	6023      	str	r3, [r4, #0]
 801afd8:	bd38      	pop	{r3, r4, r5, pc}
 801afda:	bf00      	nop
 801afdc:	24009598 	.word	0x24009598

0801afe0 <_getpid_r>:
 801afe0:	f7e8 b94e 	b.w	8003280 <_getpid>

0801afe4 <_sbrk_r>:
 801afe4:	b538      	push	{r3, r4, r5, lr}
 801afe6:	4d06      	ldr	r5, [pc, #24]	@ (801b000 <_sbrk_r+0x1c>)
 801afe8:	2300      	movs	r3, #0
 801afea:	4604      	mov	r4, r0
 801afec:	4608      	mov	r0, r1
 801afee:	602b      	str	r3, [r5, #0]
 801aff0:	f7e8 f956 	bl	80032a0 <_sbrk>
 801aff4:	1c43      	adds	r3, r0, #1
 801aff6:	d102      	bne.n	801affe <_sbrk_r+0x1a>
 801aff8:	682b      	ldr	r3, [r5, #0]
 801affa:	b103      	cbz	r3, 801affe <_sbrk_r+0x1a>
 801affc:	6023      	str	r3, [r4, #0]
 801affe:	bd38      	pop	{r3, r4, r5, pc}
 801b000:	24009598 	.word	0x24009598

0801b004 <__errno>:
 801b004:	4b01      	ldr	r3, [pc, #4]	@ (801b00c <__errno+0x8>)
 801b006:	6818      	ldr	r0, [r3, #0]
 801b008:	4770      	bx	lr
 801b00a:	bf00      	nop
 801b00c:	2400002c 	.word	0x2400002c

0801b010 <__libc_init_array>:
 801b010:	b570      	push	{r4, r5, r6, lr}
 801b012:	4d0d      	ldr	r5, [pc, #52]	@ (801b048 <__libc_init_array+0x38>)
 801b014:	4c0d      	ldr	r4, [pc, #52]	@ (801b04c <__libc_init_array+0x3c>)
 801b016:	1b64      	subs	r4, r4, r5
 801b018:	10a4      	asrs	r4, r4, #2
 801b01a:	2600      	movs	r6, #0
 801b01c:	42a6      	cmp	r6, r4
 801b01e:	d109      	bne.n	801b034 <__libc_init_array+0x24>
 801b020:	4d0b      	ldr	r5, [pc, #44]	@ (801b050 <__libc_init_array+0x40>)
 801b022:	4c0c      	ldr	r4, [pc, #48]	@ (801b054 <__libc_init_array+0x44>)
 801b024:	f000 f872 	bl	801b10c <_init>
 801b028:	1b64      	subs	r4, r4, r5
 801b02a:	10a4      	asrs	r4, r4, #2
 801b02c:	2600      	movs	r6, #0
 801b02e:	42a6      	cmp	r6, r4
 801b030:	d105      	bne.n	801b03e <__libc_init_array+0x2e>
 801b032:	bd70      	pop	{r4, r5, r6, pc}
 801b034:	f855 3b04 	ldr.w	r3, [r5], #4
 801b038:	4798      	blx	r3
 801b03a:	3601      	adds	r6, #1
 801b03c:	e7ee      	b.n	801b01c <__libc_init_array+0xc>
 801b03e:	f855 3b04 	ldr.w	r3, [r5], #4
 801b042:	4798      	blx	r3
 801b044:	3601      	adds	r6, #1
 801b046:	e7f2      	b.n	801b02e <__libc_init_array+0x1e>
 801b048:	0801b7a8 	.word	0x0801b7a8
 801b04c:	0801b7a8 	.word	0x0801b7a8
 801b050:	0801b7a8 	.word	0x0801b7a8
 801b054:	0801b7b4 	.word	0x0801b7b4

0801b058 <__retarget_lock_acquire_recursive>:
 801b058:	4770      	bx	lr

0801b05a <__retarget_lock_release_recursive>:
 801b05a:	4770      	bx	lr

0801b05c <memcpy>:
 801b05c:	440a      	add	r2, r1
 801b05e:	4291      	cmp	r1, r2
 801b060:	f100 33ff 	add.w	r3, r0, #4294967295
 801b064:	d100      	bne.n	801b068 <memcpy+0xc>
 801b066:	4770      	bx	lr
 801b068:	b510      	push	{r4, lr}
 801b06a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b06e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b072:	4291      	cmp	r1, r2
 801b074:	d1f9      	bne.n	801b06a <memcpy+0xe>
 801b076:	bd10      	pop	{r4, pc}

0801b078 <_free_r>:
 801b078:	b538      	push	{r3, r4, r5, lr}
 801b07a:	4605      	mov	r5, r0
 801b07c:	2900      	cmp	r1, #0
 801b07e:	d041      	beq.n	801b104 <_free_r+0x8c>
 801b080:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b084:	1f0c      	subs	r4, r1, #4
 801b086:	2b00      	cmp	r3, #0
 801b088:	bfb8      	it	lt
 801b08a:	18e4      	addlt	r4, r4, r3
 801b08c:	f7ff fee2 	bl	801ae54 <__malloc_lock>
 801b090:	4a1d      	ldr	r2, [pc, #116]	@ (801b108 <_free_r+0x90>)
 801b092:	6813      	ldr	r3, [r2, #0]
 801b094:	b933      	cbnz	r3, 801b0a4 <_free_r+0x2c>
 801b096:	6063      	str	r3, [r4, #4]
 801b098:	6014      	str	r4, [r2, #0]
 801b09a:	4628      	mov	r0, r5
 801b09c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b0a0:	f7ff bede 	b.w	801ae60 <__malloc_unlock>
 801b0a4:	42a3      	cmp	r3, r4
 801b0a6:	d908      	bls.n	801b0ba <_free_r+0x42>
 801b0a8:	6820      	ldr	r0, [r4, #0]
 801b0aa:	1821      	adds	r1, r4, r0
 801b0ac:	428b      	cmp	r3, r1
 801b0ae:	bf01      	itttt	eq
 801b0b0:	6819      	ldreq	r1, [r3, #0]
 801b0b2:	685b      	ldreq	r3, [r3, #4]
 801b0b4:	1809      	addeq	r1, r1, r0
 801b0b6:	6021      	streq	r1, [r4, #0]
 801b0b8:	e7ed      	b.n	801b096 <_free_r+0x1e>
 801b0ba:	461a      	mov	r2, r3
 801b0bc:	685b      	ldr	r3, [r3, #4]
 801b0be:	b10b      	cbz	r3, 801b0c4 <_free_r+0x4c>
 801b0c0:	42a3      	cmp	r3, r4
 801b0c2:	d9fa      	bls.n	801b0ba <_free_r+0x42>
 801b0c4:	6811      	ldr	r1, [r2, #0]
 801b0c6:	1850      	adds	r0, r2, r1
 801b0c8:	42a0      	cmp	r0, r4
 801b0ca:	d10b      	bne.n	801b0e4 <_free_r+0x6c>
 801b0cc:	6820      	ldr	r0, [r4, #0]
 801b0ce:	4401      	add	r1, r0
 801b0d0:	1850      	adds	r0, r2, r1
 801b0d2:	4283      	cmp	r3, r0
 801b0d4:	6011      	str	r1, [r2, #0]
 801b0d6:	d1e0      	bne.n	801b09a <_free_r+0x22>
 801b0d8:	6818      	ldr	r0, [r3, #0]
 801b0da:	685b      	ldr	r3, [r3, #4]
 801b0dc:	6053      	str	r3, [r2, #4]
 801b0de:	4408      	add	r0, r1
 801b0e0:	6010      	str	r0, [r2, #0]
 801b0e2:	e7da      	b.n	801b09a <_free_r+0x22>
 801b0e4:	d902      	bls.n	801b0ec <_free_r+0x74>
 801b0e6:	230c      	movs	r3, #12
 801b0e8:	602b      	str	r3, [r5, #0]
 801b0ea:	e7d6      	b.n	801b09a <_free_r+0x22>
 801b0ec:	6820      	ldr	r0, [r4, #0]
 801b0ee:	1821      	adds	r1, r4, r0
 801b0f0:	428b      	cmp	r3, r1
 801b0f2:	bf04      	itt	eq
 801b0f4:	6819      	ldreq	r1, [r3, #0]
 801b0f6:	685b      	ldreq	r3, [r3, #4]
 801b0f8:	6063      	str	r3, [r4, #4]
 801b0fa:	bf04      	itt	eq
 801b0fc:	1809      	addeq	r1, r1, r0
 801b0fe:	6021      	streq	r1, [r4, #0]
 801b100:	6054      	str	r4, [r2, #4]
 801b102:	e7ca      	b.n	801b09a <_free_r+0x22>
 801b104:	bd38      	pop	{r3, r4, r5, pc}
 801b106:	bf00      	nop
 801b108:	2400945c 	.word	0x2400945c

0801b10c <_init>:
 801b10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b10e:	bf00      	nop
 801b110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b112:	bc08      	pop	{r3}
 801b114:	469e      	mov	lr, r3
 801b116:	4770      	bx	lr

0801b118 <_fini>:
 801b118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b11a:	bf00      	nop
 801b11c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b11e:	bc08      	pop	{r3}
 801b120:	469e      	mov	lr, r3
 801b122:	4770      	bx	lr
