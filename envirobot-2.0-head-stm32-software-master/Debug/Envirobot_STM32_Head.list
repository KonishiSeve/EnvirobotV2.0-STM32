
Envirobot_STM32_Head.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019b4c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  08019dec  08019dec  0001adec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801a320  0801a320  0001b320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   0000000c  0801a328  0801a328  0001b328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  0801a334  0801a334  0001b334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  24000000  0801a33c  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00009524  2400007c  0801a3b8  0001c07c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240095a0  0801a3b8  0001c5a0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001c07c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0033c8cd  00000000  00000000  0001c0aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00010e32  00000000  00000000  00358977  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 00069290  00000000  00000000  003697a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003d20  00000000  00000000  003d2a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000b51c  00000000  00000000  003d6760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00012b8f  00000000  00000000  003e1c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000822df  00000000  00000000  003f480b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0023870c  00000000  00000000  00476aea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  006af1f6  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000d010  00000000  00000000  006af23c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000007d  00000000  00000000  006bc24c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400007c 	.word	0x2400007c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08019dd4 	.word	0x08019dd4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000080 	.word	0x24000080
 80002dc:	08019dd4 	.word	0x08019dd4

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <__aeabi_uldivmod>:
 80002f4:	b953      	cbnz	r3, 800030c <__aeabi_uldivmod+0x18>
 80002f6:	b94a      	cbnz	r2, 800030c <__aeabi_uldivmod+0x18>
 80002f8:	2900      	cmp	r1, #0
 80002fa:	bf08      	it	eq
 80002fc:	2800      	cmpeq	r0, #0
 80002fe:	bf1c      	itt	ne
 8000300:	f04f 31ff 	movne.w	r1, #4294967295
 8000304:	f04f 30ff 	movne.w	r0, #4294967295
 8000308:	f000 b96a 	b.w	80005e0 <__aeabi_idiv0>
 800030c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000310:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000314:	f000 f806 	bl	8000324 <__udivmoddi4>
 8000318:	f8dd e004 	ldr.w	lr, [sp, #4]
 800031c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000320:	b004      	add	sp, #16
 8000322:	4770      	bx	lr

08000324 <__udivmoddi4>:
 8000324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000328:	9d08      	ldr	r5, [sp, #32]
 800032a:	460c      	mov	r4, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14e      	bne.n	80003ce <__udivmoddi4+0xaa>
 8000330:	4694      	mov	ip, r2
 8000332:	458c      	cmp	ip, r1
 8000334:	4686      	mov	lr, r0
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	d962      	bls.n	8000402 <__udivmoddi4+0xde>
 800033c:	b14a      	cbz	r2, 8000352 <__udivmoddi4+0x2e>
 800033e:	f1c2 0320 	rsb	r3, r2, #32
 8000342:	4091      	lsls	r1, r2
 8000344:	fa20 f303 	lsr.w	r3, r0, r3
 8000348:	fa0c fc02 	lsl.w	ip, ip, r2
 800034c:	4319      	orrs	r1, r3
 800034e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000352:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000356:	fa1f f68c 	uxth.w	r6, ip
 800035a:	fbb1 f4f7 	udiv	r4, r1, r7
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb07 1114 	mls	r1, r7, r4, r1
 8000366:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800036a:	fb04 f106 	mul.w	r1, r4, r6
 800036e:	4299      	cmp	r1, r3
 8000370:	d90a      	bls.n	8000388 <__udivmoddi4+0x64>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f104 30ff 	add.w	r0, r4, #4294967295
 800037a:	f080 8112 	bcs.w	80005a2 <__udivmoddi4+0x27e>
 800037e:	4299      	cmp	r1, r3
 8000380:	f240 810f 	bls.w	80005a2 <__udivmoddi4+0x27e>
 8000384:	3c02      	subs	r4, #2
 8000386:	4463      	add	r3, ip
 8000388:	1a59      	subs	r1, r3, r1
 800038a:	fa1f f38e 	uxth.w	r3, lr
 800038e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000392:	fb07 1110 	mls	r1, r7, r0, r1
 8000396:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800039a:	fb00 f606 	mul.w	r6, r0, r6
 800039e:	429e      	cmp	r6, r3
 80003a0:	d90a      	bls.n	80003b8 <__udivmoddi4+0x94>
 80003a2:	eb1c 0303 	adds.w	r3, ip, r3
 80003a6:	f100 31ff 	add.w	r1, r0, #4294967295
 80003aa:	f080 80fc 	bcs.w	80005a6 <__udivmoddi4+0x282>
 80003ae:	429e      	cmp	r6, r3
 80003b0:	f240 80f9 	bls.w	80005a6 <__udivmoddi4+0x282>
 80003b4:	4463      	add	r3, ip
 80003b6:	3802      	subs	r0, #2
 80003b8:	1b9b      	subs	r3, r3, r6
 80003ba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003be:	2100      	movs	r1, #0
 80003c0:	b11d      	cbz	r5, 80003ca <__udivmoddi4+0xa6>
 80003c2:	40d3      	lsrs	r3, r2
 80003c4:	2200      	movs	r2, #0
 80003c6:	e9c5 3200 	strd	r3, r2, [r5]
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d905      	bls.n	80003de <__udivmoddi4+0xba>
 80003d2:	b10d      	cbz	r5, 80003d8 <__udivmoddi4+0xb4>
 80003d4:	e9c5 0100 	strd	r0, r1, [r5]
 80003d8:	2100      	movs	r1, #0
 80003da:	4608      	mov	r0, r1
 80003dc:	e7f5      	b.n	80003ca <__udivmoddi4+0xa6>
 80003de:	fab3 f183 	clz	r1, r3
 80003e2:	2900      	cmp	r1, #0
 80003e4:	d146      	bne.n	8000474 <__udivmoddi4+0x150>
 80003e6:	42a3      	cmp	r3, r4
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xcc>
 80003ea:	4290      	cmp	r0, r2
 80003ec:	f0c0 80f0 	bcc.w	80005d0 <__udivmoddi4+0x2ac>
 80003f0:	1a86      	subs	r6, r0, r2
 80003f2:	eb64 0303 	sbc.w	r3, r4, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	2d00      	cmp	r5, #0
 80003fa:	d0e6      	beq.n	80003ca <__udivmoddi4+0xa6>
 80003fc:	e9c5 6300 	strd	r6, r3, [r5]
 8000400:	e7e3      	b.n	80003ca <__udivmoddi4+0xa6>
 8000402:	2a00      	cmp	r2, #0
 8000404:	f040 8090 	bne.w	8000528 <__udivmoddi4+0x204>
 8000408:	eba1 040c 	sub.w	r4, r1, ip
 800040c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000410:	fa1f f78c 	uxth.w	r7, ip
 8000414:	2101      	movs	r1, #1
 8000416:	fbb4 f6f8 	udiv	r6, r4, r8
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb08 4416 	mls	r4, r8, r6, r4
 8000422:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000426:	fb07 f006 	mul.w	r0, r7, r6
 800042a:	4298      	cmp	r0, r3
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x11c>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f106 34ff 	add.w	r4, r6, #4294967295
 8000436:	d202      	bcs.n	800043e <__udivmoddi4+0x11a>
 8000438:	4298      	cmp	r0, r3
 800043a:	f200 80cd 	bhi.w	80005d8 <__udivmoddi4+0x2b4>
 800043e:	4626      	mov	r6, r4
 8000440:	1a1c      	subs	r4, r3, r0
 8000442:	fa1f f38e 	uxth.w	r3, lr
 8000446:	fbb4 f0f8 	udiv	r0, r4, r8
 800044a:	fb08 4410 	mls	r4, r8, r0, r4
 800044e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000452:	fb00 f707 	mul.w	r7, r0, r7
 8000456:	429f      	cmp	r7, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x148>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x146>
 8000464:	429f      	cmp	r7, r3
 8000466:	f200 80b0 	bhi.w	80005ca <__udivmoddi4+0x2a6>
 800046a:	4620      	mov	r0, r4
 800046c:	1bdb      	subs	r3, r3, r7
 800046e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0x9c>
 8000474:	f1c1 0620 	rsb	r6, r1, #32
 8000478:	408b      	lsls	r3, r1
 800047a:	fa22 f706 	lsr.w	r7, r2, r6
 800047e:	431f      	orrs	r7, r3
 8000480:	fa20 fc06 	lsr.w	ip, r0, r6
 8000484:	fa04 f301 	lsl.w	r3, r4, r1
 8000488:	ea43 030c 	orr.w	r3, r3, ip
 800048c:	40f4      	lsrs	r4, r6
 800048e:	fa00 f801 	lsl.w	r8, r0, r1
 8000492:	0c38      	lsrs	r0, r7, #16
 8000494:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000498:	fbb4 fef0 	udiv	lr, r4, r0
 800049c:	fa1f fc87 	uxth.w	ip, r7
 80004a0:	fb00 441e 	mls	r4, r0, lr, r4
 80004a4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a8:	fb0e f90c 	mul.w	r9, lr, ip
 80004ac:	45a1      	cmp	r9, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	d90a      	bls.n	80004ca <__udivmoddi4+0x1a6>
 80004b4:	193c      	adds	r4, r7, r4
 80004b6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004ba:	f080 8084 	bcs.w	80005c6 <__udivmoddi4+0x2a2>
 80004be:	45a1      	cmp	r9, r4
 80004c0:	f240 8081 	bls.w	80005c6 <__udivmoddi4+0x2a2>
 80004c4:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c8:	443c      	add	r4, r7
 80004ca:	eba4 0409 	sub.w	r4, r4, r9
 80004ce:	fa1f f983 	uxth.w	r9, r3
 80004d2:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d6:	fb00 4413 	mls	r4, r0, r3, r4
 80004da:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004de:	fb03 fc0c 	mul.w	ip, r3, ip
 80004e2:	45a4      	cmp	ip, r4
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x1d2>
 80004e6:	193c      	adds	r4, r7, r4
 80004e8:	f103 30ff 	add.w	r0, r3, #4294967295
 80004ec:	d267      	bcs.n	80005be <__udivmoddi4+0x29a>
 80004ee:	45a4      	cmp	ip, r4
 80004f0:	d965      	bls.n	80005be <__udivmoddi4+0x29a>
 80004f2:	3b02      	subs	r3, #2
 80004f4:	443c      	add	r4, r7
 80004f6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004fa:	fba0 9302 	umull	r9, r3, r0, r2
 80004fe:	eba4 040c 	sub.w	r4, r4, ip
 8000502:	429c      	cmp	r4, r3
 8000504:	46ce      	mov	lr, r9
 8000506:	469c      	mov	ip, r3
 8000508:	d351      	bcc.n	80005ae <__udivmoddi4+0x28a>
 800050a:	d04e      	beq.n	80005aa <__udivmoddi4+0x286>
 800050c:	b155      	cbz	r5, 8000524 <__udivmoddi4+0x200>
 800050e:	ebb8 030e 	subs.w	r3, r8, lr
 8000512:	eb64 040c 	sbc.w	r4, r4, ip
 8000516:	fa04 f606 	lsl.w	r6, r4, r6
 800051a:	40cb      	lsrs	r3, r1
 800051c:	431e      	orrs	r6, r3
 800051e:	40cc      	lsrs	r4, r1
 8000520:	e9c5 6400 	strd	r6, r4, [r5]
 8000524:	2100      	movs	r1, #0
 8000526:	e750      	b.n	80003ca <__udivmoddi4+0xa6>
 8000528:	f1c2 0320 	rsb	r3, r2, #32
 800052c:	fa20 f103 	lsr.w	r1, r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa24 f303 	lsr.w	r3, r4, r3
 8000538:	4094      	lsls	r4, r2
 800053a:	430c      	orrs	r4, r1
 800053c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000540:	fa00 fe02 	lsl.w	lr, r0, r2
 8000544:	fa1f f78c 	uxth.w	r7, ip
 8000548:	fbb3 f0f8 	udiv	r0, r3, r8
 800054c:	fb08 3110 	mls	r1, r8, r0, r3
 8000550:	0c23      	lsrs	r3, r4, #16
 8000552:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000556:	fb00 f107 	mul.w	r1, r0, r7
 800055a:	4299      	cmp	r1, r3
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x24c>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 36ff 	add.w	r6, r0, #4294967295
 8000566:	d22c      	bcs.n	80005c2 <__udivmoddi4+0x29e>
 8000568:	4299      	cmp	r1, r3
 800056a:	d92a      	bls.n	80005c2 <__udivmoddi4+0x29e>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1a5b      	subs	r3, r3, r1
 8000572:	b2a4      	uxth	r4, r4
 8000574:	fbb3 f1f8 	udiv	r1, r3, r8
 8000578:	fb08 3311 	mls	r3, r8, r1, r3
 800057c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000580:	fb01 f307 	mul.w	r3, r1, r7
 8000584:	42a3      	cmp	r3, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x276>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000590:	d213      	bcs.n	80005ba <__udivmoddi4+0x296>
 8000592:	42a3      	cmp	r3, r4
 8000594:	d911      	bls.n	80005ba <__udivmoddi4+0x296>
 8000596:	3902      	subs	r1, #2
 8000598:	4464      	add	r4, ip
 800059a:	1ae4      	subs	r4, r4, r3
 800059c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005a0:	e739      	b.n	8000416 <__udivmoddi4+0xf2>
 80005a2:	4604      	mov	r4, r0
 80005a4:	e6f0      	b.n	8000388 <__udivmoddi4+0x64>
 80005a6:	4608      	mov	r0, r1
 80005a8:	e706      	b.n	80003b8 <__udivmoddi4+0x94>
 80005aa:	45c8      	cmp	r8, r9
 80005ac:	d2ae      	bcs.n	800050c <__udivmoddi4+0x1e8>
 80005ae:	ebb9 0e02 	subs.w	lr, r9, r2
 80005b2:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b6:	3801      	subs	r0, #1
 80005b8:	e7a8      	b.n	800050c <__udivmoddi4+0x1e8>
 80005ba:	4631      	mov	r1, r6
 80005bc:	e7ed      	b.n	800059a <__udivmoddi4+0x276>
 80005be:	4603      	mov	r3, r0
 80005c0:	e799      	b.n	80004f6 <__udivmoddi4+0x1d2>
 80005c2:	4630      	mov	r0, r6
 80005c4:	e7d4      	b.n	8000570 <__udivmoddi4+0x24c>
 80005c6:	46d6      	mov	lr, sl
 80005c8:	e77f      	b.n	80004ca <__udivmoddi4+0x1a6>
 80005ca:	4463      	add	r3, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e74d      	b.n	800046c <__udivmoddi4+0x148>
 80005d0:	4606      	mov	r6, r0
 80005d2:	4623      	mov	r3, r4
 80005d4:	4608      	mov	r0, r1
 80005d6:	e70f      	b.n	80003f8 <__udivmoddi4+0xd4>
 80005d8:	3e02      	subs	r6, #2
 80005da:	4463      	add	r3, ip
 80005dc:	e730      	b.n	8000440 <__udivmoddi4+0x11c>
 80005de:	bf00      	nop

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <_Z14TrajectoryTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TrajectoryTask */
void TrajectoryTask(void *argument)
{
 80005e4:	b508      	push	{r3, lr}
  for(;;)
  {
#ifdef USE_MOTION_GENERATOR
	  motion_generator.Spin();
#else
	  osDelay(1000);
 80005e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005ea:	f00b fd7d 	bl	800c0e8 <osDelay>
  for(;;)
 80005ee:	e7fa      	b.n	80005e6 <_Z14TrajectoryTaskPv+0x2>

080005f0 <_Z17CommunicationTaskPv>:
{
  /* USER CODE BEGIN CommunicationTask */
  /* Infinite loop */
  for(;;)
  {
	  communication.Spin();
 80005f0:	4c02      	ldr	r4, [pc, #8]	@ (80005fc <_Z17CommunicationTaskPv+0xc>)
{
 80005f2:	b508      	push	{r3, lr}
	  communication.Spin();
 80005f4:	4620      	mov	r0, r4
 80005f6:	f00e ffa9 	bl	800f54c <_ZN13Communication4SpinEv>
  for(;;)
 80005fa:	e7fb      	b.n	80005f4 <_Z17CommunicationTaskPv+0x4>
 80005fc:	24001664 	.word	0x24001664

08000600 <_Z8LEDsTaskPv>:
  /* USER CODE BEGIN LEDsTask */
  /* Infinite loop */
  for(;;)
  {
#ifdef USE_LEDS
	  leds.Spin();
 8000600:	4c02      	ldr	r4, [pc, #8]	@ (800060c <_Z8LEDsTaskPv+0xc>)
{
 8000602:	b508      	push	{r3, lr}
	  leds.Spin();
 8000604:	4620      	mov	r0, r4
 8000606:	f013 f8b2 	bl	801376e <_ZN4LEDS4SpinEv>
  for(;;)
 800060a:	e7fb      	b.n	8000604 <_Z8LEDsTaskPv+0x4>
 800060c:	24000148 	.word	0x24000148

08000610 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE5GetIDEPvPb>:
 * @param input pointer: the hardware interface handle pointer
 * @param output success: whether successful
 * @return the interface ID associated to the input handle
 */
template<typename H>
uint8_t TemplateCommunicationProtocol<H>::GetID(void* pointer, bool* success) {
 8000610:	b4f0      	push	{r4, r5, r6, r7}
 8000612:	e9d0 350e 	ldrd	r3, r5, [r0, #56]	@ 0x38
	uint8_t index = 0;
	for (H* interface : interfaces) {
 8000616:	2400      	movs	r4, #0
 8000618:	429d      	cmp	r5, r3
 800061a:	461e      	mov	r6, r3
 800061c:	d103      	bne.n	8000626 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE5GetIDEPvPb+0x16>
		if (interface == pointer)
			return GetIDFromIndex(index, success);
		index += 1;
	}
	*success = false;
 800061e:	2000      	movs	r0, #0
	return 0;
}
 8000620:	bcf0      	pop	{r4, r5, r6, r7}
	*success = false;
 8000622:	7010      	strb	r0, [r2, #0]
}
 8000624:	4770      	bx	lr
		if (interface == pointer)
 8000626:	6836      	ldr	r6, [r6, #0]
 8000628:	3304      	adds	r3, #4
 800062a:	1c67      	adds	r7, r4, #1
 800062c:	428e      	cmp	r6, r1
 800062e:	d103      	bne.n	8000638 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE5GetIDEPvPb+0x28>
			return GetIDFromIndex(index, success);
 8000630:	b2e1      	uxtb	r1, r4
}
 8000632:	bcf0      	pop	{r4, r5, r6, r7}
			return GetIDFromIndex(index, success);
 8000634:	f014 bee7 	b.w	8015406 <_ZN21CommunicationProtocol14GetIDFromIndexEhPb>
 8000638:	463c      	mov	r4, r7
 800063a:	e7ed      	b.n	8000618 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE5GetIDEPvPb+0x8>

0800063c <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE5GetIDEPvPb>:
uint8_t TemplateCommunicationProtocol<H>::GetID(void* pointer, bool* success) {
 800063c:	b4f0      	push	{r4, r5, r6, r7}
 800063e:	e9d0 350e 	ldrd	r3, r5, [r0, #56]	@ 0x38
	for (H* interface : interfaces) {
 8000642:	2400      	movs	r4, #0
 8000644:	429d      	cmp	r5, r3
 8000646:	461e      	mov	r6, r3
 8000648:	d103      	bne.n	8000652 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE5GetIDEPvPb+0x16>
	*success = false;
 800064a:	2000      	movs	r0, #0
}
 800064c:	bcf0      	pop	{r4, r5, r6, r7}
	*success = false;
 800064e:	7010      	strb	r0, [r2, #0]
}
 8000650:	4770      	bx	lr
		if (interface == pointer)
 8000652:	6836      	ldr	r6, [r6, #0]
 8000654:	3304      	adds	r3, #4
 8000656:	1c67      	adds	r7, r4, #1
 8000658:	428e      	cmp	r6, r1
 800065a:	d103      	bne.n	8000664 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE5GetIDEPvPb+0x28>
			return GetIDFromIndex(index, success);
 800065c:	b2e1      	uxtb	r1, r4
}
 800065e:	bcf0      	pop	{r4, r5, r6, r7}
			return GetIDFromIndex(index, success);
 8000660:	f014 bed1 	b.w	8015406 <_ZN21CommunicationProtocol14GetIDFromIndexEhPb>
 8000664:	463c      	mov	r4, r7
 8000666:	e7ed      	b.n	8000644 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE5GetIDEPvPb+0x8>

08000668 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>:
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8000668:	0089      	lsls	r1, r1, #2
 800066a:	f019 b8b1 	b.w	80197d0 <_ZdlPvj>

0800066e <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>:
 800066e:	0109      	lsls	r1, r1, #4
 8000670:	f019 b8ae 	b.w	80197d0 <_ZdlPvj>

08000674 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>:
      _GLIBCXX20_CONSTEXPR
      pointer
      _M_allocate(size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8000674:	2800      	cmp	r0, #0
      _M_allocate(size_t __n)
 8000676:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8000678:	d006      	beq.n	8000688 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0x14>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800067a:	da01      	bge.n	8000680 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0xc>
	    std::__throw_bad_alloc();
 800067c:	f019 f97c 	bl	8019978 <_ZSt17__throw_bad_allocv>
      }
 8000680:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8000684:	f019 b8c9 	b.w	801981a <_Znwj>
 8000688:	bd08      	pop	{r3, pc}

0800068a <_Z11SensorsTaskPv>:
void SensorsTask(void *argument)
 800068a:	b508      	push	{r3, lr}
 800068c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000690:	f00b fd2a 	bl	800c0e8 <osDelay>
 8000694:	e7fa      	b.n	800068c <_Z11SensorsTaskPv+0x2>
	...

08000698 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8000698:	b513      	push	{r0, r1, r4, lr}
 800069a:	4601      	mov	r1, r0
	uint8_t ID = communication.GetID((void*) huart, &success);
 800069c:	f10d 0207 	add.w	r2, sp, #7
 80006a0:	480a      	ldr	r0, [pc, #40]	@ (80006cc <HAL_UART_ErrorCallback+0x34>)
 80006a2:	f00e fa61 	bl	800eb68 <_ZN13Communication5GetIDEPvPb>
	if (!success) {return;}
 80006a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
	uint8_t ID = communication.GetID((void*) huart, &success);
 80006aa:	4604      	mov	r4, r0
	if (!success) {return;}
 80006ac:	b15b      	cbz	r3, 80006c6 <HAL_UART_ErrorCallback+0x2e>
	uint16_t* buffer_index = communication.GetBufferIndex(ID, &success);
 80006ae:	4601      	mov	r1, r0
 80006b0:	f10d 0207 	add.w	r2, sp, #7
 80006b4:	4805      	ldr	r0, [pc, #20]	@ (80006cc <HAL_UART_ErrorCallback+0x34>)
 80006b6:	f00e fa76 	bl	800eba6 <_ZN13Communication14GetBufferIndexEhPb>
	*buffer_index = 0; // resets the buffer index to the DMA pointer
 80006ba:	2300      	movs	r3, #0
	communication.ActivateReception(ID);
 80006bc:	4621      	mov	r1, r4
	*buffer_index = 0; // resets the buffer index to the DMA pointer
 80006be:	8003      	strh	r3, [r0, #0]
	communication.ActivateReception(ID);
 80006c0:	4802      	ldr	r0, [pc, #8]	@ (80006cc <HAL_UART_ErrorCallback+0x34>)
 80006c2:	f00e fa8b 	bl	800ebdc <_ZN13Communication17ActivateReceptionEh>
}
 80006c6:	b002      	add	sp, #8
 80006c8:	bd10      	pop	{r4, pc}
 80006ca:	bf00      	nop
 80006cc:	24001664 	.word	0x24001664

080006d0 <HAL_FDCAN_ErrorCallback>:
void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan) {
 80006d0:	b507      	push	{r0, r1, r2, lr}
 80006d2:	4601      	mov	r1, r0
	uint8_t ID = communication.GetID((void*) hfdcan, &success);
 80006d4:	f10d 0207 	add.w	r2, sp, #7
 80006d8:	4806      	ldr	r0, [pc, #24]	@ (80006f4 <HAL_FDCAN_ErrorCallback+0x24>)
 80006da:	f00e fa45 	bl	800eb68 <_ZN13Communication5GetIDEPvPb>
	if (!success) {return;}
 80006de:	f89d 3007 	ldrb.w	r3, [sp, #7]
	uint8_t ID = communication.GetID((void*) hfdcan, &success);
 80006e2:	4601      	mov	r1, r0
	if (!success) {return;}
 80006e4:	b113      	cbz	r3, 80006ec <HAL_FDCAN_ErrorCallback+0x1c>
	communication.ActivateReception(ID);
 80006e6:	4803      	ldr	r0, [pc, #12]	@ (80006f4 <HAL_FDCAN_ErrorCallback+0x24>)
 80006e8:	f00e fa78 	bl	800ebdc <_ZN13Communication17ActivateReceptionEh>
}
 80006ec:	b003      	add	sp, #12
 80006ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80006f2:	bf00      	nop
 80006f4:	24001664 	.word	0x24001664

080006f8 <_Z18SystemClock_Configv>:
{
 80006f8:	b510      	push	{r4, lr}
 80006fa:	b09e      	sub	sp, #120	@ 0x78
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fc:	224c      	movs	r2, #76	@ 0x4c
 80006fe:	2100      	movs	r1, #0
 8000700:	a80b      	add	r0, sp, #44	@ 0x2c
 8000702:	f019 fa31 	bl	8019b68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000706:	2220      	movs	r2, #32
 8000708:	2100      	movs	r1, #0
 800070a:	a803      	add	r0, sp, #12
 800070c:	f019 fa2c 	bl	8019b68 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000710:	2002      	movs	r0, #2
 8000712:	f006 f959 	bl	80069c8 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000716:	2300      	movs	r3, #0
 8000718:	9300      	str	r3, [sp, #0]
 800071a:	4b3a      	ldr	r3, [pc, #232]	@ (8000804 <_Z18SystemClock_Configv+0x10c>)
 800071c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800071e:	f022 0201 	bic.w	r2, r2, #1
 8000722:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	9300      	str	r3, [sp, #0]
 800072c:	4b36      	ldr	r3, [pc, #216]	@ (8000808 <_Z18SystemClock_Configv+0x110>)
 800072e:	699a      	ldr	r2, [r3, #24]
 8000730:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000734:	619a      	str	r2, [r3, #24]
 8000736:	699a      	ldr	r2, [r3, #24]
 8000738:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 800073c:	9200      	str	r2, [sp, #0]
 800073e:	9a00      	ldr	r2, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000740:	699a      	ldr	r2, [r3, #24]
 8000742:	0492      	lsls	r2, r2, #18
 8000744:	d5fc      	bpl.n	8000740 <_Z18SystemClock_Configv+0x48>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000746:	4a31      	ldr	r2, [pc, #196]	@ (800080c <_Z18SystemClock_Configv+0x114>)
 8000748:	f8d2 10f4 	ldr.w	r1, [r2, #244]	@ 0xf4
 800074c:	f041 0102 	orr.w	r1, r1, #2
 8000750:	f8c2 10f4 	str.w	r1, [r2, #244]	@ 0xf4
 8000754:	f8d2 10f4 	ldr.w	r1, [r2, #244]	@ 0xf4
 8000758:	f001 0102 	and.w	r1, r1, #2
 800075c:	9101      	str	r1, [sp, #4]
 800075e:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000760:	2100      	movs	r1, #0
 8000762:	9102      	str	r1, [sp, #8]
 8000764:	6999      	ldr	r1, [r3, #24]
 8000766:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 800076a:	6199      	str	r1, [r3, #24]
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000772:	9302      	str	r3, [sp, #8]
 8000774:	4b23      	ldr	r3, [pc, #140]	@ (8000804 <_Z18SystemClock_Configv+0x10c>)
 8000776:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000778:	f041 0101 	orr.w	r1, r1, #1
 800077c:	62d9      	str	r1, [r3, #44]	@ 0x2c
 800077e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000780:	4921      	ldr	r1, [pc, #132]	@ (8000808 <_Z18SystemClock_Configv+0x110>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	9302      	str	r3, [sp, #8]
 8000788:	9b02      	ldr	r3, [sp, #8]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800078a:	698b      	ldr	r3, [r1, #24]
 800078c:	049b      	lsls	r3, r3, #18
 800078e:	d5fc      	bpl.n	800078a <_Z18SystemClock_Configv+0x92>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000790:	6a93      	ldr	r3, [r2, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000792:	2001      	movs	r0, #1
  RCC_OscInitStruct.PLL.PLLR = 4;
 8000794:	2404      	movs	r4, #4
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000796:	f04f 0c0c 	mov.w	ip, #12
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800079a:	f023 0303 	bic.w	r3, r3, #3
 800079e:	f043 0302 	orr.w	r3, r3, #2
 80007a2:	6293      	str	r3, [r2, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  RCC_OscInitStruct.PLL.PLLN = 80;
 80007a8:	2250      	movs	r2, #80	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007aa:	e9cd 030b 	strd	r0, r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ae:	2302      	movs	r3, #2
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b0:	a80b      	add	r0, sp, #44	@ 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007b2:	e9cd 3314 	strd	r3, r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = 2;
 80007b6:	9316      	str	r3, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007b8:	e9cd 2317 	strd	r2, r3, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 80007bc:	2318      	movs	r3, #24
 80007be:	e9cd 3419 	strd	r3, r4, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007c2:	2300      	movs	r3, #0
 80007c4:	e9cd c31b 	strd	ip, r3, [sp, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007c8:	931d      	str	r3, [sp, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ca:	f006 f927 	bl	8006a1c <HAL_RCC_OscConfig>
 80007ce:	b108      	cbz	r0, 80007d4 <_Z18SystemClock_Configv+0xdc>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d2:	e7fe      	b.n	80007d2 <_Z18SystemClock_Configv+0xda>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d4:	223f      	movs	r2, #63	@ 0x3f
 80007d6:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007d8:	2108      	movs	r1, #8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007da:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007dc:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007de:	e9cd 2303 	strd	r2, r3, [sp, #12]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007e2:	2340      	movs	r3, #64	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007e8:	e9cd 1306 	strd	r1, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007ec:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007ee:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007f0:	e9cd 2309 	strd	r2, r3, [sp, #36]	@ 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007f4:	f006 fd46 	bl	8007284 <HAL_RCC_ClockConfig>
 80007f8:	b108      	cbz	r0, 80007fe <_Z18SystemClock_Configv+0x106>
 80007fa:	b672      	cpsid	i
  while (1)
 80007fc:	e7fe      	b.n	80007fc <_Z18SystemClock_Configv+0x104>
}
 80007fe:	b01e      	add	sp, #120	@ 0x78
 8000800:	bd10      	pop	{r4, pc}
 8000802:	bf00      	nop
 8000804:	58000400 	.word	0x58000400
 8000808:	58024800 	.word	0x58024800
 800080c:	58024400 	.word	0x58024400

08000810 <_Z24PeriphCommonClock_Configv>:
{
 8000810:	b500      	push	{lr}
 8000812:	b0b1      	sub	sp, #196	@ 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000814:	22a0      	movs	r2, #160	@ 0xa0
 8000816:	2100      	movs	r1, #0
 8000818:	a808      	add	r0, sp, #32
 800081a:	f019 f9a5 	bl	8019b68 <memset>
  PeriphClkInitStruct.PLL2.PLL2M = 3;
 800081e:	f44f 2308 	mov.w	r3, #557056	@ 0x88000
 8000822:	2203      	movs	r2, #3
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000824:	2119      	movs	r1, #25
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000826:	a801      	add	r0, sp, #4
  PeriphClkInitStruct.PLL2.PLL2M = 3;
 8000828:	e9cd 3201 	strd	r3, r2, [sp, #4]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800082c:	2302      	movs	r3, #2
 800082e:	e9cd 1303 	strd	r1, r3, [sp, #12]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000832:	21c0      	movs	r1, #192	@ 0xc0
  PeriphClkInitStruct.PLL3.PLL3M = 2;
 8000834:	930a      	str	r3, [sp, #40]	@ 0x28
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000836:	9107      	str	r1, [sp, #28]
  PeriphClkInitStruct.PLL3.PLL3N = 40;
 8000838:	2128      	movs	r1, #40	@ 0x28
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800083a:	e9cd 3305 	strd	r3, r3, [sp, #20]
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 800083e:	e9cd 130b 	strd	r1, r3, [sp, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3R = 3;
 8000842:	e9cd 320d 	strd	r3, r2, [sp, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000846:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800084a:	930f      	str	r3, [sp, #60]	@ 0x3c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 800084c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000850:	931c      	str	r3, [sp, #112]	@ 0x70
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8000852:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000856:	9329      	str	r3, [sp, #164]	@ 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000858:	f006 ffda 	bl	8007810 <HAL_RCCEx_PeriphCLKConfig>
 800085c:	b108      	cbz	r0, 8000862 <_Z24PeriphCommonClock_Configv+0x52>
 800085e:	b672      	cpsid	i
  while (1)
 8000860:	e7fe      	b.n	8000860 <_Z24PeriphCommonClock_Configv+0x50>
}
 8000862:	b031      	add	sp, #196	@ 0xc4
 8000864:	f85d fb04 	ldr.w	pc, [sp], #4

08000868 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM5) {
 8000868:	6802      	ldr	r2, [r0, #0]
 800086a:	4b09      	ldr	r3, [pc, #36]	@ (8000890 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800086c:	429a      	cmp	r2, r3
{
 800086e:	b510      	push	{r4, lr}
 8000870:	4604      	mov	r4, r0
  if (htim->Instance == TIM5) {
 8000872:	d101      	bne.n	8000878 <HAL_TIM_PeriodElapsedCallback+0x10>
    HAL_IncTick();
 8000874:	f002 fc3a 	bl	80030ec <HAL_IncTick>
  if (hardware_delay.AssignedTimer(htim)) {
 8000878:	4621      	mov	r1, r4
 800087a:	4806      	ldr	r0, [pc, #24]	@ (8000894 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800087c:	f012 fe52 	bl	8013524 <_ZN13HardwareDelay13AssignedTimerEP17TIM_HandleTypeDef>
 8000880:	b120      	cbz	r0, 800088c <HAL_TIM_PeriodElapsedCallback+0x24>
    hardware_delay.TriggeredDelay();
 8000882:	4804      	ldr	r0, [pc, #16]	@ (8000894 <HAL_TIM_PeriodElapsedCallback+0x2c>)
}
 8000884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hardware_delay.TriggeredDelay();
 8000888:	f012 bebb 	b.w	8013602 <_ZN13HardwareDelay14TriggeredDelayEv>
}
 800088c:	bd10      	pop	{r4, pc}
 800088e:	bf00      	nop
 8000890:	40000c00 	.word	0x40000c00
 8000894:	240001ec 	.word	0x240001ec

08000898 <Error_Handler>:
 8000898:	b672      	cpsid	i
  while (1)
 800089a:	e7fe      	b.n	800089a <Error_Handler+0x2>

0800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800089c:	b510      	push	{r4, lr}
 800089e:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 80008a0:	6800      	ldr	r0, [r0, #0]
      _GLIBCXX20_CONSTEXPR
      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
 80008a2:	b118      	cbz	r0, 80008ac <_ZNSt12_Vector_baseIhSaIhEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80008a4:	68a1      	ldr	r1, [r4, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80008a6:	1a09      	subs	r1, r1, r0
 80008a8:	f018 ff92 	bl	80197d0 <_ZdlPvj>
      }
 80008ac:	4620      	mov	r0, r4
 80008ae:	bd10      	pop	{r4, pc}

080008b0 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>:
       *
       *  Whether the allocator is moved depends on the allocator traits.
       */
      _GLIBCXX20_CONSTEXPR
      vector&
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 80008b0:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 80008b2:	680d      	ldr	r5, [r1, #0]
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 80008b4:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 80008b6:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 80008b8:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 80008bc:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 80008be:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 80008c0:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 80008c2:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 80008c4:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 80008c6:	688d      	ldr	r5, [r1, #8]
 80008c8:	6085      	str	r5, [r0, #8]
      }
 80008ca:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 80008cc:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 80008ce:	e9c1 3300 	strd	r3, r3, [r1]
 80008d2:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 80008d6:	f7ff ffe1 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	constexpr bool __move_storage =
	  _Alloc_traits::_S_propagate_on_move_assign()
	  || _Alloc_traits::_S_always_equal();
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
	return *this;
      }
 80008da:	b005      	add	sp, #20
 80008dc:	bd30      	pop	{r4, r5, pc}

080008de <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>:
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
 80008de:	b510      	push	{r4, lr}
 80008e0:	4604      	mov	r4, r0
 80008e2:	4610      	mov	r0, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80008e4:	e9d4 2300 	ldrd	r2, r3, [r4]
      {
	if (max_size() - size() < __n)
 80008e8:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80008ec:	1a9b      	subs	r3, r3, r2
	if (max_size() - size() < __n)
 80008ee:	1ae2      	subs	r2, r4, r3
 80008f0:	428a      	cmp	r2, r1
 80008f2:	d201      	bcs.n	80008f8 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x1a>
	  __throw_length_error(__N(__s));
 80008f4:	f019 f846 	bl	8019984 <_ZSt20__throw_length_errorPKc>
 80008f8:	4299      	cmp	r1, r3
 80008fa:	bf38      	it	cc
 80008fc:	4619      	movcc	r1, r3
 80008fe:	185b      	adds	r3, r3, r1
 8000900:	d204      	bcs.n	800090c <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x2e>
 8000902:	42a3      	cmp	r3, r4
 8000904:	bf28      	it	cs
 8000906:	4623      	movcs	r3, r4
 8000908:	4618      	mov	r0, r3

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
      }
 800090a:	bd10      	pop	{r4, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800090c:	4620      	mov	r0, r4
 800090e:	e7fc      	b.n	800090a <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x2c>

08000910 <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 8000910:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000914:	e9d0 8a00 	ldrd	r8, sl, [r0]
 8000918:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 800091a:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800091e:	ebaa 0208 	sub.w	r2, sl, r8
 8000922:	4607      	mov	r7, r0
 8000924:	4689      	mov	r9, r1
	if (max_size() - size() < __n)
 8000926:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800092a:	ea4f 04a2 	mov.w	r4, r2, asr #2
	if (max_size() - size() < __n)
 800092e:	d102      	bne.n	8000936 <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8000930:	481f      	ldr	r0, [pc, #124]	@ (80009b0 <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa0>)
 8000932:	f019 f827 	bl	8019984 <_ZSt20__throw_length_errorPKc>
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8000936:	45c2      	cmp	sl, r8
 8000938:	bf14      	ite	ne
 800093a:	4622      	movne	r2, r4
 800093c:	2201      	moveq	r2, #1
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800093e:	eba1 0508 	sub.w	r5, r1, r8
 8000942:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8000944:	d22f      	bcs.n	80009a6 <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x96>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8000946:	b384      	cbz	r4, 80009aa <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8000948:	429c      	cmp	r4, r3
 800094a:	bf28      	it	cs
 800094c:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800094e:	00a0      	lsls	r0, r4, #2
 8000950:	f018 ff63 	bl	801981a <_Znwj>
 8000954:	4606      	mov	r6, r0
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8000956:	f8db 3000 	ldr.w	r3, [fp]
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result,
		   [[__maybe_unused__]] allocator<_Up>& __alloc) noexcept
    {
      ptrdiff_t __count = __last - __first;
      if (__count > 0)
 800095a:	2d00      	cmp	r5, #0
 800095c:	5173      	str	r3, [r6, r5]
 800095e:	dd04      	ble.n	800096a <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x5a>
	      __gnu_cxx::__normal_iterator<_Tp*, void> __out(__result);
	      __out = std::__relocate_a_1(__first, __last, __out, __alloc);
	      return __out.base();
	    }
#endif
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8000960:	462a      	mov	r2, r5
 8000962:	4641      	mov	r1, r8
 8000964:	4630      	mov	r0, r6
 8000966:	f019 f8e5 	bl	8019b34 <memmove>
      ptrdiff_t __count = __last - __first;
 800096a:	ebaa 0a09 	sub.w	sl, sl, r9
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
 800096e:	3504      	adds	r5, #4
      if (__count > 0)
 8000970:	f1ba 0f00 	cmp.w	sl, #0
 8000974:	4435      	add	r5, r6
 8000976:	dd04      	ble.n	8000982 <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x72>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8000978:	4652      	mov	r2, sl
 800097a:	4649      	mov	r1, r9
 800097c:	4628      	mov	r0, r5
 800097e:	f019 f9d1 	bl	8019d24 <memcpy>
	}
      return __result + __count;
 8000982:	4455      	add	r5, sl
	if (__p)
 8000984:	f1b8 0f00 	cmp.w	r8, #0
 8000988:	d006      	beq.n	8000998 <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x88>
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
 800098a:	68b9      	ldr	r1, [r7, #8]
 800098c:	4640      	mov	r0, r8
 800098e:	eba1 0108 	sub.w	r1, r1, r8
 8000992:	1089      	asrs	r1, r1, #2
 8000994:	f7ff fe68 	bl	8000668 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
 8000998:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800099c:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 80009a0:	60be      	str	r6, [r7, #8]
    }
 80009a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80009a6:	461c      	mov	r4, r3
 80009a8:	e7d1      	b.n	800094e <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80009aa:	4626      	mov	r6, r4
 80009ac:	e7d3      	b.n	8000956 <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
 80009ae:	bf00      	nop
 80009b0:	08019e3e 	.word	0x08019e3e

080009b4 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE12AddInterfaceEhPS0_>:
void TemplateCommunicationProtocol<H>::AddInterface(uint8_t ID, H* interface) {
 80009b4:	b513      	push	{r0, r1, r4, lr}
 80009b6:	4604      	mov	r4, r0
 80009b8:	9201      	str	r2, [sp, #4]
	AddInterfaceID(ID);
 80009ba:	f014 fcbf 	bl	801533c <_ZN21CommunicationProtocol14AddInterfaceIDEh>
	AddInterfaceBuffer();
 80009be:	4620      	mov	r0, r4
 80009c0:	f014 fe56 	bl	8015670 <_ZN21CommunicationProtocol18AddInterfaceBufferEv>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80009c4:	e9d4 130f 	ldrd	r1, r3, [r4, #60]	@ 0x3c
 80009c8:	4299      	cmp	r1, r3
 80009ca:	d005      	beq.n	80009d8 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE12AddInterfaceEhPS0_+0x24>
 80009cc:	9b01      	ldr	r3, [sp, #4]
 80009ce:	f841 3b04 	str.w	r3, [r1], #4
	    ++this->_M_impl._M_finish;
 80009d2:	63e1      	str	r1, [r4, #60]	@ 0x3c
}
 80009d4:	b002      	add	sp, #8
 80009d6:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), __x);
 80009d8:	aa01      	add	r2, sp, #4
 80009da:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 80009de:	f7ff ff97 	bl	8000910 <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
 80009e2:	e7f7      	b.n	80009d4 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE12AddInterfaceEhPS0_+0x20>

080009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
    struct __copy_move<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
	_GLIBCXX20_CONSTEXPR
	static _Tp*
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80009e4:	b510      	push	{r4, lr}
					       is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::value, "type must be assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
 80009e6:	1a0c      	subs	r4, r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80009e8:	4613      	mov	r3, r2
	  if (_Num)
 80009ea:	d005      	beq.n	80009f8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x14>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80009ec:	4601      	mov	r1, r0
 80009ee:	4622      	mov	r2, r4
 80009f0:	4618      	mov	r0, r3
 80009f2:	f019 f89f 	bl	8019b34 <memmove>
 80009f6:	4603      	mov	r3, r0
	  return __result + _Num;
	}
 80009f8:	1918      	adds	r0, r3, r4
 80009fa:	bd10      	pop	{r4, pc}

080009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>:
      vector(const vector& __x)
 80009fc:	b570      	push	{r4, r5, r6, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80009fe:	e9d1 3600 	ldrd	r3, r6, [r1]
      vector(const vector& __x)
 8000a02:	4604      	mov	r4, r0
 8000a04:	460d      	mov	r5, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000a06:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000a08:	2300      	movs	r3, #0
 8000a0a:	e9c0 3300 	strd	r3, r3, [r0]
 8000a0e:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8000a10:	4630      	mov	r0, r6
 8000a12:	f7ff fe2f 	bl	8000674 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8000a16:	4406      	add	r6, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8000a18:	4602      	mov	r2, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8000a1a:	60a6      	str	r6, [r4, #8]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8000a1c:	e9c4 0000 	strd	r0, r0, [r4]
      if (std::is_constant_evaluated())
	return std::__copy_move<_IsMove, false, _Category>::
	  __copy_m(__first, __last, __result);
#endif
      return std::__copy_move<_IsMove, __memcpyable<_OI, _II>::__value,
			      _Category>::__copy_m(__first, __last, __result);
 8000a20:	e9d5 0100 	ldrd	r0, r1, [r5]
 8000a24:	f7ff ffde 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	this->_M_impl._M_finish =
 8000a28:	6060      	str	r0, [r4, #4]
      }
 8000a2a:	4620      	mov	r0, r4
 8000a2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08000a30 <HAL_FDCAN_RxFifo0Callback>:
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 8000a30:	07cb      	lsls	r3, r1, #31
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8000a32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000a36:	4604      	mov	r4, r0
 8000a38:	b0a3      	sub	sp, #140	@ 0x8c
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 8000a3a:	d512      	bpl.n	8000a62 <HAL_FDCAN_RxFifo0Callback+0x32>
	    HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData);
 8000a3c:	ab12      	add	r3, sp, #72	@ 0x48
 8000a3e:	aa08      	add	r2, sp, #32
 8000a40:	2140      	movs	r1, #64	@ 0x40
 8000a42:	f005 f807 	bl	8005a54 <HAL_FDCAN_GetRxMessage>
		ID = communication.GetID((void*) hfdcan, &success);
 8000a46:	f10d 0207 	add.w	r2, sp, #7
 8000a4a:	4621      	mov	r1, r4
 8000a4c:	482c      	ldr	r0, [pc, #176]	@ (8000b00 <HAL_FDCAN_RxFifo0Callback+0xd0>)
 8000a4e:	f00e f88b 	bl	800eb68 <_ZN13Communication5GetIDEPvPb>
		if (!success) {communication.ActivateReception(ID); return;}
 8000a52:	f89d 3007 	ldrb.w	r3, [sp, #7]
		ID = communication.GetID((void*) hfdcan, &success);
 8000a56:	4606      	mov	r6, r0
		if (!success) {communication.ActivateReception(ID); return;}
 8000a58:	b933      	cbnz	r3, 8000a68 <HAL_FDCAN_RxFifo0Callback+0x38>
 8000a5a:	4601      	mov	r1, r0
 8000a5c:	4828      	ldr	r0, [pc, #160]	@ (8000b00 <HAL_FDCAN_RxFifo0Callback+0xd0>)
 8000a5e:	f00e f8bd 	bl	800ebdc <_ZN13Communication17ActivateReceptionEh>
}
 8000a62:	b023      	add	sp, #140	@ 0x8c
 8000a64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8000a68:	2040      	movs	r0, #64	@ 0x40
	    uint8_t target_address = (uint8_t) RxHeader.Identifier;
 8000a6a:	f89d 8020 	ldrb.w	r8, [sp, #32]
 8000a6e:	f7ff fe01 	bl	8000674 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8000a72:	ab12      	add	r3, sp, #72	@ 0x48
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8000a74:	f100 0740 	add.w	r7, r0, #64	@ 0x40
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8000a78:	4605      	mov	r5, r0
 8000a7a:	4604      	mov	r4, r0
 8000a7c:	f10d 0c88 	add.w	ip, sp, #136	@ 0x88
 8000a80:	9002      	str	r0, [sp, #8]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8000a82:	9704      	str	r7, [sp, #16]
 8000a84:	461a      	mov	r2, r3
 8000a86:	3408      	adds	r4, #8
 8000a88:	ca03      	ldmia	r2!, {r0, r1}
 8000a8a:	4562      	cmp	r2, ip
 8000a8c:	f844 0c08 	str.w	r0, [r4, #-8]
 8000a90:	f844 1c04 	str.w	r1, [r4, #-4]
 8000a94:	4613      	mov	r3, r2
 8000a96:	d1f5      	bne.n	8000a84 <HAL_FDCAN_RxFifo0Callback+0x54>
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8000a98:	4a1a      	ldr	r2, [pc, #104]	@ (8000b04 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	a802      	add	r0, sp, #8
	  this->_M_impl._M_finish =
 8000a9e:	9703      	str	r7, [sp, #12]
 8000aa0:	f7ff ff1d 	bl	80008de <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8000aa4:	4681      	mov	r9, r0
      pointer __new_start(this->_M_allocate(__len));
 8000aa6:	f7ff fde5 	bl	8000674 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8000aaa:	462a      	mov	r2, r5
 8000aac:	4603      	mov	r3, r0
 8000aae:	4604      	mov	r4, r0
 8000ab0:	f803 8b01 	strb.w	r8, [r3], #1
 8000ab4:	f852 1b04 	ldr.w	r1, [r2], #4
 8000ab8:	42ba      	cmp	r2, r7
 8000aba:	f843 1b04 	str.w	r1, [r3], #4
 8000abe:	d1f9      	bne.n	8000ab4 <HAL_FDCAN_RxFifo0Callback+0x84>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8000ac0:	4628      	mov	r0, r5
 8000ac2:	2140      	movs	r1, #64	@ 0x40
 8000ac4:	f018 fe84 	bl	80197d0 <_ZdlPvj>
      return __result + __count;
 8000ac8:	f104 0341 	add.w	r3, r4, #65	@ 0x41
      this->_M_impl._M_start = __new_start;
 8000acc:	9402      	str	r4, [sp, #8]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8000ace:	444c      	add	r4, r9
		communication.Process(ID, received_data, &success);
 8000ad0:	a902      	add	r1, sp, #8
 8000ad2:	a805      	add	r0, sp, #20
      this->_M_impl._M_finish = __new_finish;
 8000ad4:	9303      	str	r3, [sp, #12]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8000ad6:	9404      	str	r4, [sp, #16]
 8000ad8:	f7ff ff90 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8000adc:	f10d 0307 	add.w	r3, sp, #7
 8000ae0:	aa05      	add	r2, sp, #20
 8000ae2:	4631      	mov	r1, r6
 8000ae4:	4806      	ldr	r0, [pc, #24]	@ (8000b00 <HAL_FDCAN_RxFifo0Callback+0xd0>)
 8000ae6:	f012 fc9d 	bl	8013424 <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb>
      }
 8000aea:	a805      	add	r0, sp, #20
 8000aec:	f7ff fed6 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		communication.ActivateReception(ID);
 8000af0:	4631      	mov	r1, r6
 8000af2:	4803      	ldr	r0, [pc, #12]	@ (8000b00 <HAL_FDCAN_RxFifo0Callback+0xd0>)
 8000af4:	f00e f872 	bl	800ebdc <_ZN13Communication17ActivateReceptionEh>
 8000af8:	a802      	add	r0, sp, #8
 8000afa:	f7ff fecf 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8000afe:	e7b0      	b.n	8000a62 <HAL_FDCAN_RxFifo0Callback+0x32>
 8000b00:	24001664 	.word	0x24001664
 8000b04:	08019e3e 	.word	0x08019e3e

08000b08 <_ZNSt6vectorIhSaIhEEC1IN9__gnu_cxx17__normal_iteratorIPhS1_EEvEET_S7_RKS0_>:
	vector(_InputIterator __first, _InputIterator __last,
 8000b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000b0a:	2300      	movs	r3, #0

      // Called by constructors to check initial size.
      static _GLIBCXX20_CONSTEXPR size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8000b0c:	1a57      	subs	r7, r2, r1
	vector(_InputIterator __first, _InputIterator __last,
 8000b0e:	4604      	mov	r4, r0
 8000b10:	460d      	mov	r5, r1
 8000b12:	4616      	mov	r6, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000b14:	6083      	str	r3, [r0, #8]
 8000b16:	e9c0 3300 	strd	r3, r3, [r0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8000b1a:	d502      	bpl.n	8000b22 <_ZNSt6vectorIhSaIhEEC1IN9__gnu_cxx17__normal_iteratorIPhS1_EEvEET_S7_RKS0_+0x1a>
	  __throw_length_error(
 8000b1c:	4808      	ldr	r0, [pc, #32]	@ (8000b40 <_ZNSt6vectorIhSaIhEEC1IN9__gnu_cxx17__normal_iteratorIPhS1_EEvEET_S7_RKS0_+0x38>)
 8000b1e:	f018 ff31 	bl	8019984 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8000b22:	4638      	mov	r0, r7
 8000b24:	f7ff fda6 	bl	8000674 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8000b28:	4407      	add	r7, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8000b2a:	4602      	mov	r2, r0
 8000b2c:	6020      	str	r0, [r4, #0]
			      _Category>::__copy_m(__first, __last, __result);
 8000b2e:	4631      	mov	r1, r6
 8000b30:	4628      	mov	r0, r5
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8000b32:	60a7      	str	r7, [r4, #8]
 8000b34:	f7ff ff56 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	  this->_M_impl._M_finish =
 8000b38:	6060      	str	r0, [r4, #4]
	}
 8000b3a:	4620      	mov	r0, r4
 8000b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	08019e58 	.word	0x08019e58

08000b44 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>:
      vector(initializer_list<value_type> __l,
 8000b44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000b46:	ab02      	add	r3, sp, #8
 8000b48:	4604      	mov	r4, r0
 8000b4a:	460e      	mov	r6, r1
      constexpr initializer_list() noexcept
      : _M_array(0), _M_len(0) { }

      // Number of elements.
      constexpr size_type
      size() const noexcept { return _M_len; }
 8000b4c:	4615      	mov	r5, r2
      constexpr const_iterator
      begin() const noexcept { return _M_array; }

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8000b4e:	188f      	adds	r7, r1, r2
 8000b50:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000b54:	2300      	movs	r3, #0
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8000b56:	429a      	cmp	r2, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000b58:	6083      	str	r3, [r0, #8]
 8000b5a:	e9c0 3300 	strd	r3, r3, [r0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8000b5e:	da02      	bge.n	8000b66 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_+0x22>
	  __throw_length_error(
 8000b60:	4808      	ldr	r0, [pc, #32]	@ (8000b84 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_+0x40>)
 8000b62:	f018 ff0f 	bl	8019984 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8000b66:	4610      	mov	r0, r2
 8000b68:	f7ff fd84 	bl	8000674 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8000b6c:	4405      	add	r5, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8000b6e:	4602      	mov	r2, r0
 8000b70:	6020      	str	r0, [r4, #0]
 8000b72:	4639      	mov	r1, r7
 8000b74:	4630      	mov	r0, r6
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8000b76:	60a5      	str	r5, [r4, #8]
 8000b78:	f7ff ff34 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	  this->_M_impl._M_finish =
 8000b7c:	6060      	str	r0, [r4, #4]
      }
 8000b7e:	4620      	mov	r0, r4
 8000b80:	b003      	add	sp, #12
 8000b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b84:	08019e58 	.word	0x08019e58

08000b88 <main>:
{
 8000b88:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f04f 0814 	mov.w	r8, #20
{
 8000b90:	b0b7      	sub	sp, #220	@ 0xdc
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b92:	4dd6      	ldr	r5, [pc, #856]	@ (8000eec <main+0x364>)
  HAL_Init();
 8000b94:	f002 fa7c 	bl	8003090 <HAL_Init>
  SystemClock_Config();
 8000b98:	f7ff fdae 	bl	80006f8 <_Z18SystemClock_Configv>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2400      	movs	r4, #0
  PeriphCommonClock_Config();
 8000b9e:	f7ff fe37 	bl	8000810 <_Z24PeriphCommonClock_Configv>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba2:	4642      	mov	r2, r8
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	a82f      	add	r0, sp, #188	@ 0xbc
 8000ba8:	f018 ffde 	bl	8019b68 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bac:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  HAL_GPIO_WritePin(GPIOE, EN_CM4_Pin|nBT_CM4_Pin|nWL_CM4_Pin, GPIO_PIN_SET);
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	2134      	movs	r1, #52	@ 0x34
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bb4:	f043 0310 	orr.w	r3, r3, #16
  HAL_GPIO_WritePin(GPIOE, EN_CM4_Pin|nBT_CM4_Pin|nWL_CM4_Pin, GPIO_PIN_SET);
 8000bb8:	48cd      	ldr	r0, [pc, #820]	@ (8000ef0 <main+0x368>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000bba:	2711      	movs	r7, #17
  GPIO_InitStruct.Pin = PG_CM4_Pin;
 8000bbc:	f04f 0b08 	mov.w	fp, #8
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bc0:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc4:	2601      	movs	r6, #1
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bc6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  GPIO_InitStruct.Pin = nRST_IMU_Pin;
 8000bca:	f04f 0a02 	mov.w	sl, #2
  GPIO_InitStruct.Pin = WAKE_4G_Pin;
 8000bce:	f04f 0910 	mov.w	r9, #16
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bd2:	f003 0310 	and.w	r3, r3, #16
 8000bd6:	9306      	str	r3, [sp, #24]
 8000bd8:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bda:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000bde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000be2:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000be6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000bea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bee:	9307      	str	r3, [sp, #28]
 8000bf0:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000bf6:	f043 0301 	orr.w	r3, r3, #1
 8000bfa:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000bfe:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	9308      	str	r3, [sp, #32]
 8000c08:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000c0e:	f043 0304 	orr.w	r3, r3, #4
 8000c12:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000c16:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000c1a:	f003 0304 	and.w	r3, r3, #4
 8000c1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8000c20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c22:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000c26:	f043 0302 	orr.w	r3, r3, #2
 8000c2a:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000c2e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	930a      	str	r3, [sp, #40]	@ 0x28
 8000c38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c3a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000c3e:	f043 0308 	orr.w	r3, r3, #8
 8000c42:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000c46:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000c4a:	f003 0308 	and.w	r3, r3, #8
 8000c4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000c50:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  HAL_GPIO_WritePin(GPIOE, EN_CM4_Pin|nBT_CM4_Pin|nWL_CM4_Pin, GPIO_PIN_SET);
 8000c52:	f005 fae3 	bl	800621c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, STOP_CM4_Pin|LED_STATUS_Pin|LED_ACTIVITY_Pin|LED_FAULT_Pin
 8000c56:	2200      	movs	r2, #0
 8000c58:	f64f 0140 	movw	r1, #63552	@ 0xf840
 8000c5c:	48a4      	ldr	r0, [pc, #656]	@ (8000ef0 <main+0x368>)
 8000c5e:	f005 fadd 	bl	800621c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(nRST_IMU_GPIO_Port, nRST_IMU_Pin, GPIO_PIN_SET);
 8000c62:	2201      	movs	r2, #1
 8000c64:	2102      	movs	r1, #2
 8000c66:	48a3      	ldr	r0, [pc, #652]	@ (8000ef4 <main+0x36c>)
 8000c68:	f005 fad8 	bl	800621c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(WDISABLE_4G_GPIO_Port, WDISABLE_4G_Pin, GPIO_PIN_SET);
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	2120      	movs	r1, #32
 8000c70:	48a1      	ldr	r0, [pc, #644]	@ (8000ef8 <main+0x370>)
 8000c72:	f005 fad3 	bl	800621c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PERST_4G_GPIO_Port, PERST_4G_Pin, GPIO_PIN_SET);
 8000c76:	2201      	movs	r2, #1
 8000c78:	2102      	movs	r1, #2
 8000c7a:	48a0      	ldr	r0, [pc, #640]	@ (8000efc <main+0x374>)
 8000c7c:	f005 face 	bl	800621c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED_USER3_Pin|LED_UART_CM4_Pin, GPIO_PIN_RESET);
 8000c80:	2200      	movs	r2, #0
 8000c82:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8000c86:	489d      	ldr	r0, [pc, #628]	@ (8000efc <main+0x374>)
 8000c88:	f005 fac8 	bl	800621c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, SW_OUTPUT_Pin|SW_OVERWRITE_Pin|LED_UART_BACK_Pin|LED_FDCAN2_Pin
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f44f 614f 	mov.w	r1, #3312	@ 0xcf0
 8000c92:	489b      	ldr	r0, [pc, #620]	@ (8000f00 <main+0x378>)
 8000c94:	f005 fac2 	bl	800621c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c98:	2334      	movs	r3, #52	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c9a:	a92f      	add	r1, sp, #188	@ 0xbc
 8000c9c:	4894      	ldr	r0, [pc, #592]	@ (8000ef0 <main+0x368>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c9e:	e9cd 372f 	strd	r3, r7, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ca6:	f005 f9a9 	bl	8005ffc <HAL_GPIO_Init>
  HAL_GPIO_Init(PG_CM4_GPIO_Port, &GPIO_InitStruct);
 8000caa:	a92f      	add	r1, sp, #188	@ 0xbc
 8000cac:	4890      	ldr	r0, [pc, #576]	@ (8000ef0 <main+0x368>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	9431      	str	r4, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb0:	e9cd b42f 	strd	fp, r4, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(PG_CM4_GPIO_Port, &GPIO_InitStruct);
 8000cb4:	f005 f9a2 	bl	8005ffc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb8:	f64f 0340 	movw	r3, #63552	@ 0xf840
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cbc:	a92f      	add	r1, sp, #188	@ 0xbc
 8000cbe:	488c      	ldr	r0, [pc, #560]	@ (8000ef0 <main+0x368>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc0:	e9cd 362f 	strd	r3, r6, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cc8:	f005 f998 	bl	8005ffc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DRDY_IMU_Pin|SD_PRESENCE_Pin;
 8000ccc:	f248 0301 	movw	r3, #32769	@ 0x8001
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd0:	a92f      	add	r1, sp, #188	@ 0xbc
 8000cd2:	4888      	ldr	r0, [pc, #544]	@ (8000ef4 <main+0x36c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	9431      	str	r4, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd6:	e9cd 342f 	strd	r3, r4, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cda:	f005 f98f 	bl	8005ffc <HAL_GPIO_Init>
  HAL_GPIO_Init(nRST_IMU_GPIO_Port, &GPIO_InitStruct);
 8000cde:	a92f      	add	r1, sp, #188	@ 0xbc
 8000ce0:	4884      	ldr	r0, [pc, #528]	@ (8000ef4 <main+0x36c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000ce2:	e9cd a72f 	strd	sl, r7, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce6:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  HAL_GPIO_Init(nRST_IMU_GPIO_Port, &GPIO_InitStruct);
 8000cea:	f005 f987 	bl	8005ffc <HAL_GPIO_Init>
  HAL_GPIO_Init(WAKE_4G_GPIO_Port, &GPIO_InitStruct);
 8000cee:	a92f      	add	r1, sp, #188	@ 0xbc
 8000cf0:	4881      	ldr	r0, [pc, #516]	@ (8000ef8 <main+0x370>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cf2:	9631      	str	r6, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf4:	e9cd 942f 	strd	r9, r4, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(WAKE_4G_GPIO_Port, &GPIO_InitStruct);
 8000cf8:	f005 f980 	bl	8005ffc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = WDISABLE_4G_Pin;
 8000cfc:	2320      	movs	r3, #32
  HAL_GPIO_Init(WDISABLE_4G_GPIO_Port, &GPIO_InitStruct);
 8000cfe:	a92f      	add	r1, sp, #188	@ 0xbc
 8000d00:	487d      	ldr	r0, [pc, #500]	@ (8000ef8 <main+0x370>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000d02:	e9cd 372f 	strd	r3, r7, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  HAL_GPIO_Init(WDISABLE_4G_GPIO_Port, &GPIO_InitStruct);
 8000d0a:	f005 f977 	bl	8005ffc <HAL_GPIO_Init>
  HAL_GPIO_Init(PERST_4G_GPIO_Port, &GPIO_InitStruct);
 8000d0e:	a92f      	add	r1, sp, #188	@ 0xbc
 8000d10:	487a      	ldr	r0, [pc, #488]	@ (8000efc <main+0x374>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000d12:	e9cd a72f 	strd	sl, r7, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d16:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d1a:	f44f 1a88 	mov.w	sl, #1114112	@ 0x110000
  HAL_GPIO_Init(PERST_4G_GPIO_Port, &GPIO_InitStruct);
 8000d1e:	f005 f96d 	bl	8005ffc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d22:	2324      	movs	r3, #36	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d24:	a92f      	add	r1, sp, #188	@ 0xbc
 8000d26:	4875      	ldr	r0, [pc, #468]	@ (8000efc <main+0x374>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	9431      	str	r4, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d2a:	e9cd 3a2f 	strd	r3, sl, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2e:	f005 f965 	bl	8005ffc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_USER3_Pin|LED_UART_CM4_Pin;
 8000d32:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d36:	a92f      	add	r1, sp, #188	@ 0xbc
 8000d38:	4870      	ldr	r0, [pc, #448]	@ (8000efc <main+0x374>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3a:	e9cd 362f 	strd	r3, r6, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d42:	f005 f95b 	bl	8005ffc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SW_OUTPUT_Pin|SW_OVERWRITE_Pin|LED_UART_BACK_Pin|LED_FDCAN2_Pin
 8000d46:	f44f 634f 	mov.w	r3, #3312	@ 0xcf0
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d4a:	a92f      	add	r1, sp, #188	@ 0xbc
 8000d4c:	486c      	ldr	r0, [pc, #432]	@ (8000f00 <main+0x378>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4e:	e9cd 362f 	strd	r3, r6, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d52:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d56:	f005 f951 	bl	8005ffc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SW_INPUT_Pin;
 8000d5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  HAL_GPIO_Init(SW_INPUT_GPIO_Port, &GPIO_InitStruct);
 8000d5e:	a92f      	add	r1, sp, #188	@ 0xbc
 8000d60:	4867      	ldr	r0, [pc, #412]	@ (8000f00 <main+0x378>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	9431      	str	r4, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d64:	e9cd 342f 	strd	r3, r4, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(SW_INPUT_GPIO_Port, &GPIO_InitStruct);
 8000d68:	f005 f948 	bl	8005ffc <HAL_GPIO_Init>
  HAL_GPIO_Init(LED_RS485_GPIO_Port, &GPIO_InitStruct);
 8000d6c:	a92f      	add	r1, sp, #188	@ 0xbc
 8000d6e:	4864      	ldr	r0, [pc, #400]	@ (8000f00 <main+0x378>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	9431      	str	r4, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d72:	e9cd ba2f 	strd	fp, sl, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(LED_RS485_GPIO_Port, &GPIO_InitStruct);
 8000d76:	f005 f941 	bl	8005ffc <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d7a:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d7e:	4622      	mov	r2, r4
 8000d80:	2105      	movs	r1, #5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d82:	4333      	orrs	r3, r6
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d84:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d86:	f8c5 30d8 	str.w	r3, [r5, #216]	@ 0xd8
 8000d8a:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
 8000d8e:	4033      	ands	r3, r6
 8000d90:	9304      	str	r3, [sp, #16]
 8000d92:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d94:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
 8000d98:	f043 0302 	orr.w	r3, r3, #2
 8000d9c:	f8c5 30d8 	str.w	r3, [r5, #216]	@ 0xd8
 8000da0:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
  hadc1.Instance = ADC1;
 8000da4:	4d57      	ldr	r5, [pc, #348]	@ (8000f04 <main+0x37c>)
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000da6:	f003 0302 	and.w	r3, r3, #2
 8000daa:	9305      	str	r3, [sp, #20]
 8000dac:	9b05      	ldr	r3, [sp, #20]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000dae:	f002 ffb1 	bl	8003d14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000db2:	200b      	movs	r0, #11
 8000db4:	f002 ffbe 	bl	8003d34 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000db8:	4622      	mov	r2, r4
 8000dba:	2105      	movs	r1, #5
 8000dbc:	200c      	movs	r0, #12
 8000dbe:	f002 ffa9 	bl	8003d14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000dc2:	200c      	movs	r0, #12
 8000dc4:	f002 ffb6 	bl	8003d34 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000dc8:	4622      	mov	r2, r4
 8000dca:	2105      	movs	r1, #5
 8000dcc:	200d      	movs	r0, #13
 8000dce:	f002 ffa1 	bl	8003d14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000dd2:	200d      	movs	r0, #13
 8000dd4:	f002 ffae 	bl	8003d34 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000dd8:	4622      	mov	r2, r4
 8000dda:	2105      	movs	r1, #5
 8000ddc:	200e      	movs	r0, #14
 8000dde:	f002 ff99 	bl	8003d14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000de2:	200e      	movs	r0, #14
 8000de4:	f002 ffa6 	bl	8003d34 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000de8:	4622      	mov	r2, r4
 8000dea:	2105      	movs	r1, #5
 8000dec:	200f      	movs	r0, #15
 8000dee:	f002 ff91 	bl	8003d14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000df2:	200f      	movs	r0, #15
 8000df4:	f002 ff9e 	bl	8003d34 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000df8:	4622      	mov	r2, r4
 8000dfa:	2105      	movs	r1, #5
 8000dfc:	4648      	mov	r0, r9
 8000dfe:	f002 ff89 	bl	8003d14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000e02:	4648      	mov	r0, r9
 8000e04:	f002 ff96 	bl	8003d34 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000e08:	4622      	mov	r2, r4
 8000e0a:	2105      	movs	r1, #5
 8000e0c:	4638      	mov	r0, r7
 8000e0e:	f002 ff81 	bl	8003d14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000e12:	4638      	mov	r0, r7
 8000e14:	f002 ff8e 	bl	8003d34 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000e18:	4622      	mov	r2, r4
 8000e1a:	2105      	movs	r1, #5
 8000e1c:	202f      	movs	r0, #47	@ 0x2f
 8000e1e:	f002 ff79 	bl	8003d14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000e22:	202f      	movs	r0, #47	@ 0x2f
 8000e24:	f002 ff86 	bl	8003d34 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000e28:	4622      	mov	r2, r4
 8000e2a:	2105      	movs	r1, #5
 8000e2c:	2038      	movs	r0, #56	@ 0x38
 8000e2e:	f002 ff71 	bl	8003d14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000e32:	2038      	movs	r0, #56	@ 0x38
 8000e34:	f002 ff7e 	bl	8003d34 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000e38:	4622      	mov	r2, r4
 8000e3a:	2105      	movs	r1, #5
 8000e3c:	2039      	movs	r0, #57	@ 0x39
 8000e3e:	f002 ff69 	bl	8003d14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000e42:	2039      	movs	r0, #57	@ 0x39
 8000e44:	f002 ff76 	bl	8003d34 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000e48:	4622      	mov	r2, r4
 8000e4a:	2105      	movs	r1, #5
 8000e4c:	203a      	movs	r0, #58	@ 0x3a
 8000e4e:	f002 ff61 	bl	8003d14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000e52:	203a      	movs	r0, #58	@ 0x3a
 8000e54:	f002 ff6e 	bl	8003d34 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000e58:	4622      	mov	r2, r4
 8000e5a:	2105      	movs	r1, #5
 8000e5c:	203b      	movs	r0, #59	@ 0x3b
 8000e5e:	f002 ff59 	bl	8003d14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000e62:	203b      	movs	r0, #59	@ 0x3b
 8000e64:	f002 ff66 	bl	8003d34 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8000e68:	4622      	mov	r2, r4
 8000e6a:	2105      	movs	r1, #5
 8000e6c:	203c      	movs	r0, #60	@ 0x3c
 8000e6e:	f002 ff51 	bl	8003d14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000e72:	203c      	movs	r0, #60	@ 0x3c
 8000e74:	f002 ff5e 	bl	8003d34 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 8000e78:	4622      	mov	r2, r4
 8000e7a:	2105      	movs	r1, #5
 8000e7c:	2044      	movs	r0, #68	@ 0x44
 8000e7e:	f002 ff49 	bl	8003d14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000e82:	2044      	movs	r0, #68	@ 0x44
 8000e84:	f002 ff56 	bl	8003d34 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8000e88:	4622      	mov	r2, r4
 8000e8a:	2105      	movs	r1, #5
 8000e8c:	2045      	movs	r0, #69	@ 0x45
 8000e8e:	f002 ff41 	bl	8003d14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000e92:	2045      	movs	r0, #69	@ 0x45
 8000e94:	f002 ff4e 	bl	8003d34 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8000e98:	4622      	mov	r2, r4
 8000e9a:	2105      	movs	r1, #5
 8000e9c:	2046      	movs	r0, #70	@ 0x46
 8000e9e:	f002 ff39 	bl	8003d14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000ea2:	2046      	movs	r0, #70	@ 0x46
 8000ea4:	f002 ff46 	bl	8003d34 <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ea8:	4621      	mov	r1, r4
 8000eaa:	221c      	movs	r2, #28
 8000eac:	a82f      	add	r0, sp, #188	@ 0xbc
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eae:	2704      	movs	r7, #4
  ADC_MultiModeTypeDef multimode = {0};
 8000eb0:	942d      	str	r4, [sp, #180]	@ 0xb4
 8000eb2:	e9cd 442b 	strd	r4, r4, [sp, #172]	@ 0xac
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eb6:	f018 fe57 	bl	8019b68 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8000eba:	4913      	ldr	r1, [pc, #76]	@ (8000f08 <main+0x380>)
 8000ebc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ec0:	4628      	mov	r0, r5
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ec2:	612f      	str	r7, [r5, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ec4:	82ac      	strh	r4, [r5, #20]
  hadc1.Init.NbrOfConversion = 1;
 8000ec6:	61ae      	str	r6, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ec8:	772c      	strb	r4, [r5, #28]
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000eca:	636c      	str	r4, [r5, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000ecc:	f885 4038 	strb.w	r4, [r5, #56]	@ 0x38
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8000ed0:	e9c5 1300 	strd	r1, r3, [r5]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ed4:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ed8:	e9c5 4409 	strd	r4, r4, [r5, #36]	@ 0x24
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000edc:	e9c5 440b 	strd	r4, r4, [r5, #44]	@ 0x2c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ee0:	f002 fc9e 	bl	8003820 <HAL_ADC_Init>
 8000ee4:	b190      	cbz	r0, 8000f0c <main+0x384>
 8000ee6:	b672      	cpsid	i
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <main+0x360>
 8000eea:	bf00      	nop
 8000eec:	58024400 	.word	0x58024400
 8000ef0:	58021000 	.word	0x58021000
 8000ef4:	58020000 	.word	0x58020000
 8000ef8:	58020800 	.word	0x58020800
 8000efc:	58020400 	.word	0x58020400
 8000f00:	58020c00 	.word	0x58020c00
 8000f04:	24002700 	.word	0x24002700
 8000f08:	40022000 	.word	0x40022000
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f0c:	902b      	str	r0, [sp, #172]	@ 0xac
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f0e:	a92b      	add	r1, sp, #172	@ 0xac
 8000f10:	4628      	mov	r0, r5
 8000f12:	f002 fe05 	bl	8003b20 <HAL_ADCEx_MultiModeConfigChannel>
 8000f16:	b108      	cbz	r0, 8000f1c <main+0x394>
 8000f18:	b672      	cpsid	i
  while (1)
 8000f1a:	e7fe      	b.n	8000f1a <main+0x392>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f1c:	4aa5      	ldr	r2, [pc, #660]	@ (80011b4 <main+0x62c>)
 8000f1e:	2306      	movs	r3, #6
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f20:	2403      	movs	r4, #3
  sConfig.OffsetSignedSaturation = DISABLE;
 8000f22:	f88d 00d5 	strb.w	r0, [sp, #213]	@ 0xd5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f26:	a92f      	add	r1, sp, #188	@ 0xbc
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f28:	e9cd 232f 	strd	r2, r3, [sp, #188]	@ 0xbc
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f2c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
  sConfig.Offset = 0;
 8000f30:	e9cd 7033 	strd	r7, r0, [sp, #204]	@ 0xcc
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f34:	4628      	mov	r0, r5
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f36:	e9cd 4331 	strd	r4, r3, [sp, #196]	@ 0xc4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f3a:	f002 f931 	bl	80031a0 <HAL_ADC_ConfigChannel>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	b108      	cbz	r0, 8000f46 <main+0x3be>
 8000f42:	b672      	cpsid	i
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <main+0x3bc>
  hfdcan1.Instance = FDCAN1;
 8000f46:	489c      	ldr	r0, [pc, #624]	@ (80011b8 <main+0x630>)
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 8000f48:	f04f 090a 	mov.w	r9, #10
  hfdcan1.Instance = FDCAN1;
 8000f4c:	4b9b      	ldr	r3, [pc, #620]	@ (80011bc <main+0x634>)
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 8000f4e:	2512      	movs	r5, #18
  hfdcan1.Init.NominalTimeSeg1 = 79;
 8000f50:	f04f 0b4f 	mov.w	fp, #79	@ 0x4f
  hfdcan1.Init.DataTimeSeg1 = 21;
 8000f54:	f04f 0a15 	mov.w	sl, #21
  hfdcan1.Instance = FDCAN1;
 8000f58:	6003      	str	r3, [r0, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000f5a:	f44f 7340 	mov.w	r3, #768	@ 0x300
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000f5e:	8202      	strh	r2, [r0, #16]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000f60:	7482      	strb	r2, [r0, #18]
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000f62:	63c2      	str	r2, [r0, #60]	@ 0x3c
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_64;
 8000f64:	6685      	str	r5, [r0, #104]	@ 0x68
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000f66:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hfdcan1.Init.StdFiltersNbr = 0;
 8000f6a:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000f6e:	e9c0 2712 	strd	r2, r7, [r0, #72]	@ 0x48
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000f72:	e9c0 2714 	strd	r2, r7, [r0, #80]	@ 0x50
  hfdcan1.Init.TxBuffersNbr = 0;
 8000f76:	e9c0 2216 	strd	r2, r2, [r0, #88]	@ 0x58
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000f7a:	e9c0 9218 	strd	r9, r2, [r0, #96]	@ 0x60
  hfdcan1.Init.NominalSyncJumpWidth = 20;
 8000f7e:	e9c0 6805 	strd	r6, r8, [r0, #20]
  hfdcan1.Init.NominalTimeSeg2 = 20;
 8000f82:	e9c0 b807 	strd	fp, r8, [r0, #28]
  hfdcan1.Init.DataSyncJumpWidth = 3;
 8000f86:	e9c0 6409 	strd	r6, r4, [r0, #36]	@ 0x24
  hfdcan1.Init.DataTimeSeg2 = 3;
 8000f8a:	e9c0 a40b 	strd	sl, r4, [r0, #44]	@ 0x2c
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 8000f8e:	e9c0 9510 	strd	r9, r5, [r0, #64]	@ 0x40
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000f92:	f004 fba5 	bl	80056e0 <HAL_FDCAN_Init>
 8000f96:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	b108      	cbz	r0, 8000fa2 <main+0x41a>
 8000f9e:	b672      	cpsid	i
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <main+0x418>
  hfdcan2.Instance = FDCAN2;
 8000fa2:	4887      	ldr	r0, [pc, #540]	@ (80011c0 <main+0x638>)
 8000fa4:	4987      	ldr	r1, [pc, #540]	@ (80011c4 <main+0x63c>)
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000fa6:	8202      	strh	r2, [r0, #16]
  hfdcan2.Instance = FDCAN2;
 8000fa8:	6001      	str	r1, [r0, #0]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000faa:	7482      	strb	r2, [r0, #18]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000fac:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hfdcan2.Init.MessageRAMOffset = 360;
 8000fb0:	f44f 73b4 	mov.w	r3, #360	@ 0x168
  hfdcan2.Init.NominalSyncJumpWidth = 20;
 8000fb4:	e9c0 6805 	strd	r6, r8, [r0, #20]
  hfdcan2.Init.NominalTimeSeg2 = 20;
 8000fb8:	e9c0 b807 	strd	fp, r8, [r0, #28]
  hfdcan2.Init.DataSyncJumpWidth = 3;
 8000fbc:	e9c0 6409 	strd	r6, r4, [r0, #36]	@ 0x24
  hfdcan2.Init.DataTimeSeg2 = 3;
 8000fc0:	e9c0 a40b 	strd	sl, r4, [r0, #44]	@ 0x2c
  hfdcan2.Init.StdFiltersNbr = 0;
 8000fc4:	e9c0 320d 	strd	r3, r2, [r0, #52]	@ 0x34
  hfdcan2.Init.RxFifo0ElmtsNbr = 10;
 8000fc8:	e9c0 290f 	strd	r2, r9, [r0, #60]	@ 0x3c
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000fcc:	e9c0 5211 	strd	r5, r2, [r0, #68]	@ 0x44
  hfdcan2.Init.RxBuffersNbr = 0;
 8000fd0:	e9c0 7213 	strd	r7, r2, [r0, #76]	@ 0x4c
  hfdcan2.Init.TxEventsNbr = 0;
 8000fd4:	e9c0 7215 	strd	r7, r2, [r0, #84]	@ 0x54
  hfdcan2.Init.TxFifoQueueElmtsNbr = 10;
 8000fd8:	e9c0 2917 	strd	r2, r9, [r0, #92]	@ 0x5c
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_64;
 8000fdc:	e9c0 2519 	strd	r2, r5, [r0, #100]	@ 0x64
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000fe0:	f004 fb7e 	bl	80056e0 <HAL_FDCAN_Init>
 8000fe4:	b108      	cbz	r0, 8000fea <main+0x462>
 8000fe6:	b672      	cpsid	i
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <main+0x460>
  hi2c1.Instance = I2C1;
 8000fea:	4c77      	ldr	r4, [pc, #476]	@ (80011c8 <main+0x640>)
  hi2c1.Init.Timing = 0x307075B1;
 8000fec:	4b77      	ldr	r3, [pc, #476]	@ (80011cc <main+0x644>)
 8000fee:	4d78      	ldr	r5, [pc, #480]	@ (80011d0 <main+0x648>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ff0:	6220      	str	r0, [r4, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ff2:	e9c4 0602 	strd	r0, r6, [r4, #8]
  hi2c1.Init.OwnAddress2 = 0;
 8000ff6:	e9c4 0004 	strd	r0, r0, [r4, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ffa:	e9c4 0006 	strd	r0, r0, [r4, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ffe:	4620      	mov	r0, r4
  hi2c1.Init.Timing = 0x307075B1;
 8001000:	e9c4 3500 	strd	r3, r5, [r4]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001004:	f005 fa94 	bl	8006530 <HAL_I2C_Init>
 8001008:	4601      	mov	r1, r0
 800100a:	b108      	cbz	r0, 8001010 <main+0x488>
 800100c:	b672      	cpsid	i
  while (1)
 800100e:	e7fe      	b.n	800100e <main+0x486>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001010:	4620      	mov	r0, r4
 8001012:	f005 fc7f 	bl	8006914 <HAL_I2CEx_ConfigAnalogFilter>
 8001016:	4601      	mov	r1, r0
 8001018:	b108      	cbz	r0, 800101e <main+0x496>
 800101a:	b672      	cpsid	i
  while (1)
 800101c:	e7fe      	b.n	800101c <main+0x494>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800101e:	4620      	mov	r0, r4
 8001020:	f005 fca6 	bl	8006970 <HAL_I2CEx_ConfigDigitalFilter>
 8001024:	b108      	cbz	r0, 800102a <main+0x4a2>
 8001026:	b672      	cpsid	i
  while (1)
 8001028:	e7fe      	b.n	8001028 <main+0x4a0>
  hi2c4.Instance = I2C4;
 800102a:	4c6a      	ldr	r4, [pc, #424]	@ (80011d4 <main+0x64c>)
 800102c:	4b6a      	ldr	r3, [pc, #424]	@ (80011d8 <main+0x650>)
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800102e:	6220      	str	r0, [r4, #32]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001030:	e9c4 0602 	strd	r0, r6, [r4, #8]
  hi2c4.Init.OwnAddress2 = 0;
 8001034:	e9c4 0004 	strd	r0, r0, [r4, #16]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001038:	e9c4 0006 	strd	r0, r0, [r4, #24]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800103c:	4620      	mov	r0, r4
  hi2c4.Init.Timing = 0x307075B1;
 800103e:	e9c4 3500 	strd	r3, r5, [r4]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001042:	f005 fa75 	bl	8006530 <HAL_I2C_Init>
 8001046:	4601      	mov	r1, r0
 8001048:	b108      	cbz	r0, 800104e <main+0x4c6>
 800104a:	b672      	cpsid	i
  while (1)
 800104c:	e7fe      	b.n	800104c <main+0x4c4>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800104e:	4620      	mov	r0, r4
 8001050:	f005 fc60 	bl	8006914 <HAL_I2CEx_ConfigAnalogFilter>
 8001054:	b108      	cbz	r0, 800105a <main+0x4d2>
 8001056:	b672      	cpsid	i
  while (1)
 8001058:	e7fe      	b.n	8001058 <main+0x4d0>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 800105a:	2100      	movs	r1, #0
 800105c:	485d      	ldr	r0, [pc, #372]	@ (80011d4 <main+0x64c>)
 800105e:	f005 fc87 	bl	8006970 <HAL_I2CEx_ConfigDigitalFilter>
 8001062:	b108      	cbz	r0, 8001068 <main+0x4e0>
 8001064:	b672      	cpsid	i
  while (1)
 8001066:	e7fe      	b.n	8001066 <main+0x4de>
  huart1.Instance = USART1;
 8001068:	4c5c      	ldr	r4, [pc, #368]	@ (80011dc <main+0x654>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 800106a:	250c      	movs	r5, #12
  huart1.Init.BaudRate = 115200;
 800106c:	4b5c      	ldr	r3, [pc, #368]	@ (80011e0 <main+0x658>)
 800106e:	f44f 36e1 	mov.w	r6, #115200	@ 0x1c200
  huart1.Init.Parity = UART_PARITY_NONE;
 8001072:	6120      	str	r0, [r4, #16]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001074:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001078:	e9c4 5005 	strd	r5, r0, [r4, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800107c:	e9c4 0007 	strd	r0, r0, [r4, #28]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001080:	e9c4 0009 	strd	r0, r0, [r4, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001084:	4620      	mov	r0, r4
  huart1.Init.BaudRate = 115200;
 8001086:	e9c4 3600 	strd	r3, r6, [r4]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800108a:	f00a faa2 	bl	800b5d2 <HAL_UART_Init>
 800108e:	4601      	mov	r1, r0
 8001090:	b108      	cbz	r0, 8001096 <main+0x50e>
 8001092:	b672      	cpsid	i
  while (1)
 8001094:	e7fe      	b.n	8001094 <main+0x50c>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001096:	4620      	mov	r0, r4
 8001098:	f00a fbb4 	bl	800b804 <HAL_UARTEx_SetTxFifoThreshold>
 800109c:	4601      	mov	r1, r0
 800109e:	b108      	cbz	r0, 80010a4 <main+0x51c>
 80010a0:	b672      	cpsid	i
  while (1)
 80010a2:	e7fe      	b.n	80010a2 <main+0x51a>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010a4:	4620      	mov	r0, r4
 80010a6:	f00a fbd2 	bl	800b84e <HAL_UARTEx_SetRxFifoThreshold>
 80010aa:	b108      	cbz	r0, 80010b0 <main+0x528>
 80010ac:	b672      	cpsid	i
  while (1)
 80010ae:	e7fe      	b.n	80010ae <main+0x526>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80010b0:	4620      	mov	r0, r4
 80010b2:	f00a fb88 	bl	800b7c6 <HAL_UARTEx_DisableFifoMode>
 80010b6:	b108      	cbz	r0, 80010bc <main+0x534>
 80010b8:	b672      	cpsid	i
  while (1)
 80010ba:	e7fe      	b.n	80010ba <main+0x532>
  huart2.Instance = USART2;
 80010bc:	4c49      	ldr	r4, [pc, #292]	@ (80011e4 <main+0x65c>)
 80010be:	4b4a      	ldr	r3, [pc, #296]	@ (80011e8 <main+0x660>)
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010c0:	62a0      	str	r0, [r4, #40]	@ 0x28
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010c2:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010c6:	e9c4 0504 	strd	r0, r5, [r4, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ca:	e9c4 0006 	strd	r0, r0, [r4, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010ce:	e9c4 0008 	strd	r0, r0, [r4, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010d2:	4620      	mov	r0, r4
  huart2.Init.BaudRate = 115200;
 80010d4:	e9c4 3600 	strd	r3, r6, [r4]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010d8:	f00a fa7b 	bl	800b5d2 <HAL_UART_Init>
 80010dc:	4601      	mov	r1, r0
 80010de:	b108      	cbz	r0, 80010e4 <main+0x55c>
 80010e0:	b672      	cpsid	i
  while (1)
 80010e2:	e7fe      	b.n	80010e2 <main+0x55a>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010e4:	4620      	mov	r0, r4
 80010e6:	f00a fb8d 	bl	800b804 <HAL_UARTEx_SetTxFifoThreshold>
 80010ea:	4601      	mov	r1, r0
 80010ec:	b108      	cbz	r0, 80010f2 <main+0x56a>
 80010ee:	b672      	cpsid	i
  while (1)
 80010f0:	e7fe      	b.n	80010f0 <main+0x568>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010f2:	4620      	mov	r0, r4
 80010f4:	f00a fbab 	bl	800b84e <HAL_UARTEx_SetRxFifoThreshold>
 80010f8:	b108      	cbz	r0, 80010fe <main+0x576>
 80010fa:	b672      	cpsid	i
  while (1)
 80010fc:	e7fe      	b.n	80010fc <main+0x574>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80010fe:	4620      	mov	r0, r4
 8001100:	f00a fb61 	bl	800b7c6 <HAL_UARTEx_DisableFifoMode>
 8001104:	4603      	mov	r3, r0
 8001106:	b108      	cbz	r0, 800110c <main+0x584>
 8001108:	b672      	cpsid	i
  while (1)
 800110a:	e7fe      	b.n	800110a <main+0x582>
  huart3.Instance = USART3;
 800110c:	4837      	ldr	r0, [pc, #220]	@ (80011ec <main+0x664>)
  if (HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800110e:	4619      	mov	r1, r3
  huart3.Instance = USART3;
 8001110:	4a37      	ldr	r2, [pc, #220]	@ (80011f0 <main+0x668>)
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001112:	6283      	str	r3, [r0, #40]	@ 0x28
  huart3.Init.BaudRate = 115200;
 8001114:	e9c0 2600 	strd	r2, r6, [r0]
  if (HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8001118:	461a      	mov	r2, r3
  huart3.Init.StopBits = UART_STOPBITS_1;
 800111a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800111e:	e9c0 3504 	strd	r3, r5, [r0, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001122:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001126:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800112a:	f00a fb05 	bl	800b738 <HAL_RS485Ex_Init>
 800112e:	b108      	cbz	r0, 8001134 <main+0x5ac>
 8001130:	b672      	cpsid	i
  while (1)
 8001132:	e7fe      	b.n	8001132 <main+0x5aa>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001134:	2100      	movs	r1, #0
 8001136:	482d      	ldr	r0, [pc, #180]	@ (80011ec <main+0x664>)
 8001138:	f00a fb64 	bl	800b804 <HAL_UARTEx_SetTxFifoThreshold>
 800113c:	4601      	mov	r1, r0
 800113e:	b108      	cbz	r0, 8001144 <main+0x5bc>
 8001140:	b672      	cpsid	i
  while (1)
 8001142:	e7fe      	b.n	8001142 <main+0x5ba>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001144:	4829      	ldr	r0, [pc, #164]	@ (80011ec <main+0x664>)
 8001146:	f00a fb82 	bl	800b84e <HAL_UARTEx_SetRxFifoThreshold>
 800114a:	b108      	cbz	r0, 8001150 <main+0x5c8>
 800114c:	b672      	cpsid	i
  while (1)
 800114e:	e7fe      	b.n	800114e <main+0x5c6>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001150:	4826      	ldr	r0, [pc, #152]	@ (80011ec <main+0x664>)
 8001152:	f00a fb38 	bl	800b7c6 <HAL_UARTEx_DisableFifoMode>
 8001156:	b108      	cbz	r0, 800115c <main+0x5d4>
 8001158:	b672      	cpsid	i
  while (1)
 800115a:	e7fe      	b.n	800115a <main+0x5d2>
  huart6.Instance = USART6;
 800115c:	4c25      	ldr	r4, [pc, #148]	@ (80011f4 <main+0x66c>)
  huart6.Init.BaudRate = 115200;
 800115e:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001162:	f8df a094 	ldr.w	sl, [pc, #148]	@ 80011f8 <main+0x670>
  huart6.Init.Parity = UART_PARITY_NONE;
 8001166:	6120      	str	r0, [r4, #16]
  huart6.Init.BaudRate = 115200;
 8001168:	e9c4 a300 	strd	sl, r3, [r4]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800116c:	230c      	movs	r3, #12
  huart6.Init.StopBits = UART_STOPBITS_1;
 800116e:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001172:	e9c4 3005 	strd	r3, r0, [r4, #20]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001176:	e9c4 0007 	strd	r0, r0, [r4, #28]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800117a:	e9c4 0009 	strd	r0, r0, [r4, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800117e:	4620      	mov	r0, r4
 8001180:	f00a fa27 	bl	800b5d2 <HAL_UART_Init>
 8001184:	4601      	mov	r1, r0
 8001186:	b108      	cbz	r0, 800118c <main+0x604>
 8001188:	b672      	cpsid	i
  while (1)
 800118a:	e7fe      	b.n	800118a <main+0x602>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800118c:	4620      	mov	r0, r4
 800118e:	f00a fb39 	bl	800b804 <HAL_UARTEx_SetTxFifoThreshold>
 8001192:	4601      	mov	r1, r0
 8001194:	b108      	cbz	r0, 800119a <main+0x612>
 8001196:	b672      	cpsid	i
  while (1)
 8001198:	e7fe      	b.n	8001198 <main+0x610>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800119a:	4620      	mov	r0, r4
 800119c:	f00a fb57 	bl	800b84e <HAL_UARTEx_SetRxFifoThreshold>
 80011a0:	b108      	cbz	r0, 80011a6 <main+0x61e>
 80011a2:	b672      	cpsid	i
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <main+0x61c>
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80011a6:	4620      	mov	r0, r4
 80011a8:	f00a fb0d 	bl	800b7c6 <HAL_UARTEx_DisableFifoMode>
 80011ac:	4604      	mov	r4, r0
 80011ae:	b328      	cbz	r0, 80011fc <main+0x674>
 80011b0:	b672      	cpsid	i
  while (1)
 80011b2:	e7fe      	b.n	80011b2 <main+0x62a>
 80011b4:	4b840000 	.word	0x4b840000
 80011b8:	240025fc 	.word	0x240025fc
 80011bc:	4000a000 	.word	0x4000a000
 80011c0:	2400255c 	.word	0x2400255c
 80011c4:	4000a400 	.word	0x4000a400
 80011c8:	24002510 	.word	0x24002510
 80011cc:	40005400 	.word	0x40005400
 80011d0:	307075b1 	.word	0x307075b1
 80011d4:	240024c4 	.word	0x240024c4
 80011d8:	58001c00 	.word	0x58001c00
 80011dc:	24002080 	.word	0x24002080
 80011e0:	40011000 	.word	0x40011000
 80011e4:	24001ff0 	.word	0x24001ff0
 80011e8:	40004400 	.word	0x40004400
 80011ec:	24001f60 	.word	0x24001f60
 80011f0:	40004800 	.word	0x40004800
 80011f4:	24001ed0 	.word	0x24001ed0
 80011f8:	40011400 	.word	0x40011400
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011fc:	4601      	mov	r1, r0
 80011fe:	2210      	movs	r2, #16
 8001200:	a82f      	add	r0, sp, #188	@ 0xbc
  htim4.Instance = TIM4;
 8001202:	4da5      	ldr	r5, [pc, #660]	@ (8001498 <main+0x910>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001204:	f018 fcb0 	bl	8019b68 <memset>
  htim4.Init.Prescaler = 60000;
 8001208:	f8df 92c0 	ldr.w	r9, [pc, #704]	@ 80014cc <main+0x944>
 800120c:	f64e 2360 	movw	r3, #60000	@ 0xea60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001210:	ae2b      	add	r6, sp, #172	@ 0xac
 8001212:	942b      	str	r4, [sp, #172]	@ 0xac
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001214:	4628      	mov	r0, r5
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001216:	60ac      	str	r4, [r5, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001218:	61ac      	str	r4, [r5, #24]
  htim4.Init.Prescaler = 60000;
 800121a:	e9c5 9300 	strd	r9, r3, [r5]
  htim4.Init.Period = 65535;
 800121e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001222:	e9c6 4401 	strd	r4, r4, [r6, #4]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001226:	e9c5 3403 	strd	r3, r4, [r5, #12]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800122a:	f008 ff87 	bl	800a13c <HAL_TIM_Base_Init>
 800122e:	b108      	cbz	r0, 8001234 <main+0x6ac>
 8001230:	b672      	cpsid	i
  while (1)
 8001232:	e7fe      	b.n	8001232 <main+0x6aa>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001234:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001238:	a92f      	add	r1, sp, #188	@ 0xbc
 800123a:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800123c:	932f      	str	r3, [sp, #188]	@ 0xbc
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800123e:	f009 f8d1 	bl	800a3e4 <HAL_TIM_ConfigClockSource>
 8001242:	b108      	cbz	r0, 8001248 <main+0x6c0>
 8001244:	b672      	cpsid	i
  while (1)
 8001246:	e7fe      	b.n	8001246 <main+0x6be>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001248:	902b      	str	r0, [sp, #172]	@ 0xac
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800124a:	4631      	mov	r1, r6
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800124c:	902d      	str	r0, [sp, #180]	@ 0xb4
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800124e:	4628      	mov	r0, r5
 8001250:	f009 fa2c 	bl	800a6ac <HAL_TIMEx_MasterConfigSynchronization>
 8001254:	b108      	cbz	r0, 800125a <main+0x6d2>
 8001256:	b672      	cpsid	i
  while (1)
 8001258:	e7fe      	b.n	8001258 <main+0x6d0>
  ADC_ChannelConfTypeDef sConfig = {0};
 800125a:	221c      	movs	r2, #28
 800125c:	2100      	movs	r1, #0
 800125e:	a82f      	add	r0, sp, #188	@ 0xbc
  hadc3.Instance = ADC3;
 8001260:	4c8e      	ldr	r4, [pc, #568]	@ (800149c <main+0x914>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8001262:	f018 fc81 	bl	8019b68 <memset>
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8001266:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800126a:	f8df e264 	ldr.w	lr, [pc, #612]	@ 80014d0 <main+0x948>
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800126e:	f04f 0808 	mov.w	r8, #8
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001272:	2504      	movs	r5, #4
  hadc3.Init.NbrOfConversion = 1;
 8001274:	2201      	movs	r2, #1
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001276:	4620      	mov	r0, r4
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001278:	6125      	str	r5, [r4, #16]
  hadc3.Init.NbrOfConversion = 1;
 800127a:	61a2      	str	r2, [r4, #24]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 800127c:	e9c4 e300 	strd	lr, r3, [r4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001280:	2300      	movs	r3, #0
 8001282:	e9c4 8302 	strd	r8, r3, [r4, #8]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001286:	82a3      	strh	r3, [r4, #20]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001288:	7723      	strb	r3, [r4, #28]
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800128a:	6363      	str	r3, [r4, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800128c:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001290:	e9c4 3309 	strd	r3, r3, [r4, #36]	@ 0x24
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001294:	e9c4 330b 	strd	r3, r3, [r4, #44]	@ 0x2c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001298:	f002 fac2 	bl	8003820 <HAL_ADC_Init>
 800129c:	b108      	cbz	r0, 80012a2 <main+0x71a>
 800129e:	b672      	cpsid	i
  while (1)
 80012a0:	e7fe      	b.n	80012a0 <main+0x718>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012a2:	2306      	movs	r3, #6
 80012a4:	4f7e      	ldr	r7, [pc, #504]	@ (80014a0 <main+0x918>)
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012a6:	f04f 0c03 	mov.w	ip, #3
  sConfig.OffsetSignedSaturation = DISABLE;
 80012aa:	f88d 00d5 	strb.w	r0, [sp, #213]	@ 0xd5
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012ae:	a92f      	add	r1, sp, #188	@ 0xbc
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012b0:	e9cd 732f 	strd	r7, r3, [sp, #188]	@ 0xbc
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012b4:	f240 73ff 	movw	r3, #2047	@ 0x7ff
  sConfig.Offset = 0;
 80012b8:	e9cd 5033 	strd	r5, r0, [sp, #204]	@ 0xcc
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012bc:	4620      	mov	r0, r4
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012be:	e9cd c331 	strd	ip, r3, [sp, #196]	@ 0xc4
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012c2:	f001 ff6d 	bl	80031a0 <HAL_ADC_ConfigChannel>
 80012c6:	b108      	cbz	r0, 80012cc <main+0x744>
 80012c8:	b672      	cpsid	i
  while (1)
 80012ca:	e7fe      	b.n	80012ca <main+0x742>
  huart4.Instance = UART4;
 80012cc:	4c75      	ldr	r4, [pc, #468]	@ (80014a4 <main+0x91c>)
  huart4.Init.Mode = UART_MODE_TX_RX;
 80012ce:	250c      	movs	r5, #12
  huart4.Init.BaudRate = 115200;
 80012d0:	4b75      	ldr	r3, [pc, #468]	@ (80014a8 <main+0x920>)
 80012d2:	f44f 37e1 	mov.w	r7, #115200	@ 0x1c200
  huart4.Init.Parity = UART_PARITY_NONE;
 80012d6:	6120      	str	r0, [r4, #16]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80012d8:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012dc:	e9c4 5005 	strd	r5, r0, [r4, #20]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012e0:	e9c4 0007 	strd	r0, r0, [r4, #28]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012e4:	e9c4 0009 	strd	r0, r0, [r4, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80012e8:	4620      	mov	r0, r4
  huart4.Init.BaudRate = 115200;
 80012ea:	e9c4 3700 	strd	r3, r7, [r4]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80012ee:	f00a f970 	bl	800b5d2 <HAL_UART_Init>
 80012f2:	4601      	mov	r1, r0
 80012f4:	b108      	cbz	r0, 80012fa <main+0x772>
 80012f6:	b672      	cpsid	i
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <main+0x770>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012fa:	4620      	mov	r0, r4
 80012fc:	f00a fa82 	bl	800b804 <HAL_UARTEx_SetTxFifoThreshold>
 8001300:	4601      	mov	r1, r0
 8001302:	b108      	cbz	r0, 8001308 <main+0x780>
 8001304:	b672      	cpsid	i
  while (1)
 8001306:	e7fe      	b.n	8001306 <main+0x77e>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001308:	4620      	mov	r0, r4
 800130a:	f00a faa0 	bl	800b84e <HAL_UARTEx_SetRxFifoThreshold>
 800130e:	b108      	cbz	r0, 8001314 <main+0x78c>
 8001310:	b672      	cpsid	i
  while (1)
 8001312:	e7fe      	b.n	8001312 <main+0x78a>
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001314:	4620      	mov	r0, r4
 8001316:	f00a fa56 	bl	800b7c6 <HAL_UARTEx_DisableFifoMode>
 800131a:	b108      	cbz	r0, 8001320 <main+0x798>
 800131c:	b672      	cpsid	i
  while (1)
 800131e:	e7fe      	b.n	800131e <main+0x796>
  huart8.Instance = UART8;
 8001320:	4c62      	ldr	r4, [pc, #392]	@ (80014ac <main+0x924>)
 8001322:	4b63      	ldr	r3, [pc, #396]	@ (80014b0 <main+0x928>)
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001324:	62a0      	str	r0, [r4, #40]	@ 0x28
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001326:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800132a:	e9c4 0504 	strd	r0, r5, [r4, #16]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 800132e:	e9c4 0006 	strd	r0, r0, [r4, #24]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001332:	e9c4 0008 	strd	r0, r0, [r4, #32]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001336:	4620      	mov	r0, r4
  huart8.Init.BaudRate = 115200;
 8001338:	e9c4 3700 	strd	r3, r7, [r4]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800133c:	f00a f949 	bl	800b5d2 <HAL_UART_Init>
 8001340:	4601      	mov	r1, r0
 8001342:	b108      	cbz	r0, 8001348 <main+0x7c0>
 8001344:	b672      	cpsid	i
  while (1)
 8001346:	e7fe      	b.n	8001346 <main+0x7be>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001348:	4620      	mov	r0, r4
 800134a:	f00a fa5b 	bl	800b804 <HAL_UARTEx_SetTxFifoThreshold>
 800134e:	4601      	mov	r1, r0
 8001350:	b108      	cbz	r0, 8001356 <main+0x7ce>
 8001352:	b672      	cpsid	i
  while (1)
 8001354:	e7fe      	b.n	8001354 <main+0x7cc>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001356:	4620      	mov	r0, r4
 8001358:	f00a fa79 	bl	800b84e <HAL_UARTEx_SetRxFifoThreshold>
 800135c:	b108      	cbz	r0, 8001362 <main+0x7da>
 800135e:	b672      	cpsid	i
  while (1)
 8001360:	e7fe      	b.n	8001360 <main+0x7d8>
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001362:	4620      	mov	r0, r4
 8001364:	f00a fa2f 	bl	800b7c6 <HAL_UARTEx_DisableFifoMode>
 8001368:	b108      	cbz	r0, 800136e <main+0x7e6>
 800136a:	b672      	cpsid	i
  while (1)
 800136c:	e7fe      	b.n	800136c <main+0x7e4>
  huart7.Instance = UART7;
 800136e:	4c51      	ldr	r4, [pc, #324]	@ (80014b4 <main+0x92c>)
  huart7.Init.BaudRate = 115200;
 8001370:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001374:	4950      	ldr	r1, [pc, #320]	@ (80014b8 <main+0x930>)
  huart7.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001376:	200c      	movs	r0, #12
 8001378:	f44f 7240 	mov.w	r2, #768	@ 0x300
  huart7.Init.BaudRate = 115200;
 800137c:	e9c4 1300 	strd	r1, r3, [r4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001380:	2300      	movs	r3, #0
  huart7.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001382:	e9c4 0205 	strd	r0, r2, [r4, #20]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001386:	4620      	mov	r0, r4
  huart7.Init.Parity = UART_PARITY_NONE;
 8001388:	6123      	str	r3, [r4, #16]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800138a:	e9c4 3302 	strd	r3, r3, [r4, #8]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800138e:	e9c4 3307 	strd	r3, r3, [r4, #28]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001392:	e9c4 3309 	strd	r3, r3, [r4, #36]	@ 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001396:	f00a f91c 	bl	800b5d2 <HAL_UART_Init>
 800139a:	4601      	mov	r1, r0
 800139c:	b108      	cbz	r0, 80013a2 <main+0x81a>
 800139e:	b672      	cpsid	i
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <main+0x818>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013a2:	4620      	mov	r0, r4
 80013a4:	f00a fa2e 	bl	800b804 <HAL_UARTEx_SetTxFifoThreshold>
 80013a8:	4601      	mov	r1, r0
 80013aa:	b108      	cbz	r0, 80013b0 <main+0x828>
 80013ac:	b672      	cpsid	i
  while (1)
 80013ae:	e7fe      	b.n	80013ae <main+0x826>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013b0:	4620      	mov	r0, r4
 80013b2:	f00a fa4c 	bl	800b84e <HAL_UARTEx_SetRxFifoThreshold>
 80013b6:	b108      	cbz	r0, 80013bc <main+0x834>
 80013b8:	b672      	cpsid	i
  while (1)
 80013ba:	e7fe      	b.n	80013ba <main+0x832>
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 80013bc:	4620      	mov	r0, r4
 80013be:	f00a fa02 	bl	800b7c6 <HAL_UARTEx_DisableFifoMode>
 80013c2:	4603      	mov	r3, r0
 80013c4:	b108      	cbz	r0, 80013ca <main+0x842>
 80013c6:	b672      	cpsid	i
  while (1)
 80013c8:	e7fe      	b.n	80013c8 <main+0x840>
  hsd1.Instance = SDMMC1;
 80013ca:	483c      	ldr	r0, [pc, #240]	@ (80014bc <main+0x934>)
 80013cc:	4a3c      	ldr	r2, [pc, #240]	@ (80014c0 <main+0x938>)
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80013ce:	6083      	str	r3, [r0, #8]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80013d0:	e9c0 2300 	strd	r2, r3, [r0]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80013d4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80013d8:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hsd1.Init.ClockDiv = 4;
 80013dc:	2304      	movs	r3, #4
 80013de:	6143      	str	r3, [r0, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80013e0:	f008 fa03 	bl	80097ea <HAL_SD_Init>
 80013e4:	4605      	mov	r5, r0
 80013e6:	b108      	cbz	r0, 80013ec <main+0x864>
 80013e8:	b672      	cpsid	i
  while (1)
 80013ea:	e7fe      	b.n	80013ea <main+0x862>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ec:	af28      	add	r7, sp, #160	@ 0xa0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ee:	4601      	mov	r1, r0
 80013f0:	2210      	movs	r2, #16
 80013f2:	4630      	mov	r0, r6
 80013f4:	f018 fbb8 	bl	8019b68 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013f8:	221c      	movs	r2, #28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013fa:	9528      	str	r5, [sp, #160]	@ 0xa0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013fc:	4629      	mov	r1, r5
 80013fe:	a82f      	add	r0, sp, #188	@ 0xbc
  htim3.Instance = TIM3;
 8001400:	4c30      	ldr	r4, [pc, #192]	@ (80014c4 <main+0x93c>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001402:	e9c7 5501 	strd	r5, r5, [r7, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001406:	f018 fbaf 	bl	8019b68 <memset>
  htim3.Init.Prescaler = 10;
 800140a:	230a      	movs	r3, #10
 800140c:	4a2e      	ldr	r2, [pc, #184]	@ (80014c8 <main+0x940>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800140e:	4620      	mov	r0, r4
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001410:	60a5      	str	r5, [r4, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001412:	61a5      	str	r5, [r4, #24]
  htim3.Init.Prescaler = 10;
 8001414:	e9c4 2300 	strd	r2, r3, [r4]
  htim3.Init.Period = 255;
 8001418:	23ff      	movs	r3, #255	@ 0xff
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800141a:	e9c4 3503 	strd	r3, r5, [r4, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800141e:	f008 fe8d 	bl	800a13c <HAL_TIM_Base_Init>
 8001422:	b108      	cbz	r0, 8001428 <main+0x8a0>
 8001424:	b672      	cpsid	i
  while (1)
 8001426:	e7fe      	b.n	8001426 <main+0x89e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001428:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800142c:	4631      	mov	r1, r6
 800142e:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001430:	932b      	str	r3, [sp, #172]	@ 0xac
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001432:	f008 ffd7 	bl	800a3e4 <HAL_TIM_ConfigClockSource>
 8001436:	b108      	cbz	r0, 800143c <main+0x8b4>
 8001438:	b672      	cpsid	i
  while (1)
 800143a:	e7fe      	b.n	800143a <main+0x8b2>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800143c:	4620      	mov	r0, r4
 800143e:	f008 fead 	bl	800a19c <HAL_TIM_PWM_Init>
 8001442:	b108      	cbz	r0, 8001448 <main+0x8c0>
 8001444:	b672      	cpsid	i
  while (1)
 8001446:	e7fe      	b.n	8001446 <main+0x8be>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001448:	9028      	str	r0, [sp, #160]	@ 0xa0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800144a:	4639      	mov	r1, r7
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800144c:	902a      	str	r0, [sp, #168]	@ 0xa8
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800144e:	4620      	mov	r0, r4
 8001450:	f009 f92c 	bl	800a6ac <HAL_TIMEx_MasterConfigSynchronization>
 8001454:	4602      	mov	r2, r0
 8001456:	b108      	cbz	r0, 800145c <main+0x8d4>
 8001458:	b672      	cpsid	i
  while (1)
 800145a:	e7fe      	b.n	800145a <main+0x8d2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800145c:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800145e:	9033      	str	r0, [sp, #204]	@ 0xcc
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001460:	a92f      	add	r1, sp, #188	@ 0xbc
  sConfigOC.Pulse = 0;
 8001462:	e9cd 302f 	strd	r3, r0, [sp, #188]	@ 0xbc
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001466:	2302      	movs	r3, #2
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001468:	4620      	mov	r0, r4
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800146a:	9331      	str	r3, [sp, #196]	@ 0xc4
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800146c:	f008 ff10 	bl	800a290 <HAL_TIM_PWM_ConfigChannel>
 8001470:	b108      	cbz	r0, 8001476 <main+0x8ee>
 8001472:	b672      	cpsid	i
  while (1)
 8001474:	e7fe      	b.n	8001474 <main+0x8ec>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001476:	2204      	movs	r2, #4
 8001478:	a92f      	add	r1, sp, #188	@ 0xbc
 800147a:	4812      	ldr	r0, [pc, #72]	@ (80014c4 <main+0x93c>)
 800147c:	f008 ff08 	bl	800a290 <HAL_TIM_PWM_ConfigChannel>
 8001480:	b108      	cbz	r0, 8001486 <main+0x8fe>
 8001482:	b672      	cpsid	i
  while (1)
 8001484:	e7fe      	b.n	8001484 <main+0x8fc>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001486:	2208      	movs	r2, #8
 8001488:	a92f      	add	r1, sp, #188	@ 0xbc
 800148a:	480e      	ldr	r0, [pc, #56]	@ (80014c4 <main+0x93c>)
 800148c:	f008 ff00 	bl	800a290 <HAL_TIM_PWM_ConfigChannel>
 8001490:	4605      	mov	r5, r0
 8001492:	b1f8      	cbz	r0, 80014d4 <main+0x94c>
 8001494:	b672      	cpsid	i
  while (1)
 8001496:	e7fe      	b.n	8001496 <main+0x90e>
 8001498:	240022c0 	.word	0x240022c0
 800149c:	2400269c 	.word	0x2400269c
 80014a0:	cfb80000 	.word	0xcfb80000
 80014a4:	24002230 	.word	0x24002230
 80014a8:	40004c00 	.word	0x40004c00
 80014ac:	24002110 	.word	0x24002110
 80014b0:	40007c00 	.word	0x40007c00
 80014b4:	240021a0 	.word	0x240021a0
 80014b8:	40007800 	.word	0x40007800
 80014bc:	24002358 	.word	0x24002358
 80014c0:	52007000 	.word	0x52007000
 80014c4:	2400230c 	.word	0x2400230c
 80014c8:	40000400 	.word	0x40000400
 80014cc:	40000800 	.word	0x40000800
 80014d0:	58026000 	.word	0x58026000
  HAL_TIM_MspPostInit(&htim3);
 80014d4:	48d0      	ldr	r0, [pc, #832]	@ (8001818 <main+0xc90>)
  leds.AddLED(LED_UART_RS485, GPIO {LED_RS485_GPIO_Port, LED_RS485_Pin});
 80014d6:	f04f 0a08 	mov.w	sl, #8
  HAL_TIM_MspPostInit(&htim3);
 80014da:	f000 fffb 	bl	80024d4 <HAL_TIM_MspPostInit>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 80014de:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80014e2:	4629      	mov	r1, r5
 80014e4:	48cd      	ldr	r0, [pc, #820]	@ (800181c <main+0xc94>)
  leds.Init(&registers);
 80014e6:	4cce      	ldr	r4, [pc, #824]	@ (8001820 <main+0xc98>)
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 80014e8:	f002 fac6 	bl	8003a78 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 80014ec:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80014f0:	4629      	mov	r1, r5
 80014f2:	48cc      	ldr	r0, [pc, #816]	@ (8001824 <main+0xc9c>)
  leds.AddLED(LED_UART_CM4, GPIO {LED_UART_CM4_GPIO_Port, LED_UART_CM4_Pin});
 80014f4:	f44f 6b00 	mov.w	fp, #2048	@ 0x800
  HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 80014f8:	f002 fabe 	bl	8003a78 <HAL_ADCEx_Calibration_Start>
  registers.Init();
 80014fc:	48ca      	ldr	r0, [pc, #808]	@ (8001828 <main+0xca0>)
 80014fe:	f015 fddc 	bl	80170ba <_ZN9Registers4InitEv>
  leds.Init(&registers);
 8001502:	49c9      	ldr	r1, [pc, #804]	@ (8001828 <main+0xca0>)
 8001504:	4620      	mov	r0, r4
  leds.AddLED(LED_UART_RS485, GPIO {LED_RS485_GPIO_Port, LED_RS485_Pin});
 8001506:	f8df 8360 	ldr.w	r8, [pc, #864]	@ 8001868 <main+0xce0>
  leds.Init(&registers);
 800150a:	f012 f923 	bl	8013754 <_ZN4LEDS4InitEP9Registers>
  registers.Init(); 																registers.AddBaseRegisters();
 800150e:	48c6      	ldr	r0, [pc, #792]	@ (8001828 <main+0xca0>)
 8001510:	f015 fdd3 	bl	80170ba <_ZN9Registers4InitEv>
 8001514:	48c4      	ldr	r0, [pc, #784]	@ (8001828 <main+0xca0>)
 8001516:	f015 fe85 	bl	8017224 <_ZN9Registers16AddBaseRegistersEv>
  communication.Init(&registers, &services, &subscribers, &leds);					communication.AddRegisters();
 800151a:	4bc4      	ldr	r3, [pc, #784]	@ (800182c <main+0xca4>)
 800151c:	4ac4      	ldr	r2, [pc, #784]	@ (8001830 <main+0xca8>)
 800151e:	49c2      	ldr	r1, [pc, #776]	@ (8001828 <main+0xca0>)
 8001520:	48c4      	ldr	r0, [pc, #784]	@ (8001834 <main+0xcac>)
 8001522:	9400      	str	r4, [sp, #0]
 8001524:	f00d fae1 	bl	800eaea <_ZN13Communication4InitEP9RegistersP8ServicesP17MasterSubscribersP4LEDS>
 8001528:	48c2      	ldr	r0, [pc, #776]	@ (8001834 <main+0xcac>)
 800152a:	f00d fddb 	bl	800f0e4 <_ZN13Communication12AddRegistersEv>
  services.Init(&registers, &communication, &leds);
 800152e:	4623      	mov	r3, r4
 8001530:	4ac0      	ldr	r2, [pc, #768]	@ (8001834 <main+0xcac>)
 8001532:	49bd      	ldr	r1, [pc, #756]	@ (8001828 <main+0xca0>)
 8001534:	48be      	ldr	r0, [pc, #760]	@ (8001830 <main+0xca8>)
 8001536:	f016 fca3 	bl	8017e80 <_ZN8Services4InitEP9RegistersP13CommunicationP4LEDS>
  publishers.Init(&registers, &communication); 										publishers.AddRegisters();
 800153a:	4abe      	ldr	r2, [pc, #760]	@ (8001834 <main+0xcac>)
 800153c:	49ba      	ldr	r1, [pc, #744]	@ (8001828 <main+0xca0>)
 800153e:	48be      	ldr	r0, [pc, #760]	@ (8001838 <main+0xcb0>)
 8001540:	f014 ff14 	bl	801636c <_ZN10Publishers4InitEP9RegistersP13Communication>
 8001544:	48bc      	ldr	r0, [pc, #752]	@ (8001838 <main+0xcb0>)
 8001546:	f015 fbad 	bl	8016ca4 <_ZN10Publishers12AddRegistersEv>
  subscribers.Init(&registers, &leds);												subscribers.AddRegisters();
 800154a:	4622      	mov	r2, r4
 800154c:	49b6      	ldr	r1, [pc, #728]	@ (8001828 <main+0xca0>)
 800154e:	48b7      	ldr	r0, [pc, #732]	@ (800182c <main+0xca4>)
 8001550:	f016 fef2 	bl	8018338 <_ZN17MasterSubscribers4InitEP9RegistersP4LEDS>
 8001554:	48b5      	ldr	r0, [pc, #724]	@ (800182c <main+0xca4>)
 8001556:	f017 f983 	bl	8018860 <_ZN17MasterSubscribers12AddRegistersEv>
  sensors.Init(&registers, &publishers, &hardware_delay, &leds);					sensors.AddRegisters();
 800155a:	4bb8      	ldr	r3, [pc, #736]	@ (800183c <main+0xcb4>)
 800155c:	4ab6      	ldr	r2, [pc, #728]	@ (8001838 <main+0xcb0>)
 800155e:	49b2      	ldr	r1, [pc, #712]	@ (8001828 <main+0xca0>)
 8001560:	48b7      	ldr	r0, [pc, #732]	@ (8001840 <main+0xcb8>)
 8001562:	9400      	str	r4, [sp, #0]
 8001564:	f016 f855 	bl	8017612 <_ZN7Sensors4InitEP9RegistersP10PublishersP13HardwareDelayP4LEDS>
 8001568:	48b5      	ldr	r0, [pc, #724]	@ (8001840 <main+0xcb8>)
 800156a:	f016 fb1b 	bl	8017ba4 <_ZN7Sensors12AddRegistersEv>
  leds.Init(&registers);															leds.AddRegisters();
 800156e:	49ae      	ldr	r1, [pc, #696]	@ (8001828 <main+0xca0>)
 8001570:	4620      	mov	r0, r4
  leds.AddLED(LED_UART_CM4, GPIO {LED_UART_CM4_GPIO_Port, LED_UART_CM4_Pin});
 8001572:	f8df 92f8 	ldr.w	r9, [pc, #760]	@ 800186c <main+0xce4>
  leds.Init(&registers);															leds.AddRegisters();
 8001576:	f012 f8ed 	bl	8013754 <_ZN4LEDS4InitEP9Registers>
 800157a:	4620      	mov	r0, r4
 800157c:	f012 fd46 	bl	801400c <_ZN4LEDS12AddRegistersEv>
  motion_generator.Init(&registers, &publishers, &services, &leds);					motion_generator.AddRegisters();
 8001580:	4bab      	ldr	r3, [pc, #684]	@ (8001830 <main+0xca8>)
 8001582:	4aad      	ldr	r2, [pc, #692]	@ (8001838 <main+0xcb0>)
 8001584:	49a8      	ldr	r1, [pc, #672]	@ (8001828 <main+0xca0>)
 8001586:	48af      	ldr	r0, [pc, #700]	@ (8001844 <main+0xcbc>)
 8001588:	9400      	str	r4, [sp, #0]
 800158a:	f013 fe1d 	bl	80151c8 <_ZN15MotionGenerator4InitEP9RegistersP10PublishersP8ServicesP4LEDS>
 800158e:	48ad      	ldr	r0, [pc, #692]	@ (8001844 <main+0xcbc>)
 8001590:	f013 fbe4 	bl	8014d5c <_ZN15MotionGenerator12AddRegistersEv>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); 			// R LED
 8001594:	4629      	mov	r1, r5
 8001596:	48a0      	ldr	r0, [pc, #640]	@ (8001818 <main+0xc90>)
 8001598:	f008 ffd0 	bl	800a53c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); 			// G LED
 800159c:	2104      	movs	r1, #4
 800159e:	489e      	ldr	r0, [pc, #632]	@ (8001818 <main+0xc90>)
 80015a0:	f008 ffcc 	bl	800a53c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); 			// B LED
 80015a4:	2108      	movs	r1, #8
 80015a6:	489c      	ldr	r0, [pc, #624]	@ (8001818 <main+0xc90>)
 80015a8:	f008 ffc8 	bl	800a53c <HAL_TIM_PWM_Start>
  leds.AddLED(LED_UART_RS485, GPIO {LED_RS485_GPIO_Port, LED_RS485_Pin});
 80015ac:	f8ad a05c 	strh.w	sl, [sp, #92]	@ 0x5c
 80015b0:	4642      	mov	r2, r8
 80015b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80015b4:	2104      	movs	r1, #4
 80015b6:	4620      	mov	r0, r4
 80015b8:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
 80015bc:	f012 fe56 	bl	801426c <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_UART_BACK, GPIO {LED_UART_BACK_GPIO_Port, LED_UART_BACK_Pin});
 80015c0:	2310      	movs	r3, #16
 80015c2:	4642      	mov	r2, r8
 80015c4:	2103      	movs	r1, #3
 80015c6:	4620      	mov	r0, r4
 80015c8:	f8ad 3064 	strh.w	r3, [sp, #100]	@ 0x64
 80015cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80015ce:	f8cd 8060 	str.w	r8, [sp, #96]	@ 0x60
 80015d2:	f012 fe4b 	bl	801426c <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_CANFD2, GPIO {LED_FDCAN2_GPIO_Port, LED_FDCAN2_Pin});
 80015d6:	2320      	movs	r3, #32
 80015d8:	4642      	mov	r2, r8
 80015da:	2101      	movs	r1, #1
 80015dc:	4620      	mov	r0, r4
 80015de:	f8ad 306c 	strh.w	r3, [sp, #108]	@ 0x6c
 80015e2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80015e4:	f8cd 8068 	str.w	r8, [sp, #104]	@ 0x68
 80015e8:	f012 fe40 	bl	801426c <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_CANFD1, GPIO {LED_FDCAN1_GPIO_Port, LED_FDCAN1_Pin});
 80015ec:	2340      	movs	r3, #64	@ 0x40
 80015ee:	4642      	mov	r2, r8
 80015f0:	4629      	mov	r1, r5
 80015f2:	4620      	mov	r0, r4
 80015f4:	f8ad 3074 	strh.w	r3, [sp, #116]	@ 0x74
 80015f8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80015fa:	f8cd 8070 	str.w	r8, [sp, #112]	@ 0x70
 80015fe:	f012 fe35 	bl	801426c <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_UART_CM4, GPIO {LED_UART_CM4_GPIO_Port, LED_UART_CM4_Pin});
 8001602:	f8ad b07c 	strh.w	fp, [sp, #124]	@ 0x7c
  leds.AddLED(LED_STATUS, GPIO {LED_STATUS_GPIO_Port, LED_STATUS_Pin});
 8001606:	f508 6880 	add.w	r8, r8, #1024	@ 0x400
  leds.AddLED(LED_UART_CM4, GPIO {LED_UART_CM4_GPIO_Port, LED_UART_CM4_Pin});
 800160a:	464a      	mov	r2, r9
 800160c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800160e:	2102      	movs	r1, #2
 8001610:	4620      	mov	r0, r4
 8001612:	f8cd 9078 	str.w	r9, [sp, #120]	@ 0x78
 8001616:	f012 fe29 	bl	801426c <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_STATUS, GPIO {LED_STATUS_GPIO_Port, LED_STATUS_Pin});
 800161a:	f8ad b084 	strh.w	fp, [sp, #132]	@ 0x84
 800161e:	4642      	mov	r2, r8
 8001620:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8001622:	2107      	movs	r1, #7
 8001624:	4620      	mov	r0, r4
 8001626:	f8cd 8080 	str.w	r8, [sp, #128]	@ 0x80
 800162a:	f012 fe1f 	bl	801426c <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_ACTIVITY, GPIO {LED_ACTIVITY_GPIO_Port, LED_ACTIVITY_Pin});
 800162e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001632:	4642      	mov	r2, r8
 8001634:	4651      	mov	r1, sl
 8001636:	f8ad 308c 	strh.w	r3, [sp, #140]	@ 0x8c
 800163a:	4620      	mov	r0, r4
 800163c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800163e:	f8cd 8088 	str.w	r8, [sp, #136]	@ 0x88
 8001642:	f012 fe13 	bl	801426c <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_FAULT, GPIO {LED_FAULT_GPIO_Port, LED_FAULT_Pin});
 8001646:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800164a:	4642      	mov	r2, r8
 800164c:	2109      	movs	r1, #9
 800164e:	4620      	mov	r0, r4
 8001650:	f8ad 3094 	strh.w	r3, [sp, #148]	@ 0x94
 8001654:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8001656:	f8cd 8090 	str.w	r8, [sp, #144]	@ 0x90
 800165a:	f012 fe07 	bl	801426c <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_USER1, GPIO {LED_USER1_GPIO_Port, LED_USER1_Pin});
 800165e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001662:	4642      	mov	r2, r8
 8001664:	210a      	movs	r1, #10
 8001666:	4620      	mov	r0, r4
 8001668:	f8ad 309c 	strh.w	r3, [sp, #156]	@ 0x9c
 800166c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800166e:	f8cd 8098 	str.w	r8, [sp, #152]	@ 0x98
 8001672:	f012 fdfb 	bl	801426c <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_USER2, GPIO {LED_USER2_GPIO_Port, LED_USER2_Pin});
 8001676:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800167a:	f8cd 80a0 	str.w	r8, [sp, #160]	@ 0xa0
 800167e:	210b      	movs	r1, #11
 8001680:	4620      	mov	r0, r4
 8001682:	f8ad 30a4 	strh.w	r3, [sp, #164]	@ 0xa4
  leds.ConfigureTimings(LED_CANFD1, std::vector<uint8_t>{1}, 2);
 8001686:	f10d 0848 	add.w	r8, sp, #72	@ 0x48
  leds.AddLED(LED_USER2, GPIO {LED_USER2_GPIO_Port, LED_USER2_Pin});
 800168a:	e897 000c 	ldmia.w	r7, {r2, r3}
 800168e:	f012 fded 	bl	801426c <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_USER3, GPIO {LED_USER3_GPIO_Port, LED_USER3_Pin});
 8001692:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  leds.ConfigureTimings(LED_CANFD1, std::vector<uint8_t>{1}, 2);
 8001696:	af14      	add	r7, sp, #80	@ 0x50
  leds.AddLED(LED_USER3, GPIO {LED_USER3_GPIO_Port, LED_USER3_Pin});
 8001698:	f8cd 90ac 	str.w	r9, [sp, #172]	@ 0xac
 800169c:	f8ad 30b0 	strh.w	r3, [sp, #176]	@ 0xb0
 80016a0:	210c      	movs	r1, #12
 80016a2:	4620      	mov	r0, r4
  leds.ConfigureTimings(LED_UART_BACK, std::vector<uint8_t>{1}, 2);
 80016a4:	f10d 090c 	add.w	r9, sp, #12
  leds.AddLED(LED_USER3, GPIO {LED_USER3_GPIO_Port, LED_USER3_Pin});
 80016a8:	e896 000c 	ldmia.w	r6, {r2, r3}
  leds.ConfigureTimings(LED_CANFD1, std::vector<uint8_t>{1}, 2);
 80016ac:	2601      	movs	r6, #1
  leds.AddLED(LED_USER3, GPIO {LED_USER3_GPIO_Port, LED_USER3_Pin});
 80016ae:	f012 fddd 	bl	801426c <_ZN4LEDS6AddLEDEh4GPIO>
  leds.ConfigureTimings(LED_CANFD1, std::vector<uint8_t>{1}, 2);
 80016b2:	463b      	mov	r3, r7
 80016b4:	4641      	mov	r1, r8
 80016b6:	4632      	mov	r2, r6
 80016b8:	a82f      	add	r0, sp, #188	@ 0xbc
 80016ba:	f88d 6048 	strb.w	r6, [sp, #72]	@ 0x48
 80016be:	e9cd 860c 	strd	r8, r6, [sp, #48]	@ 0x30
 80016c2:	f7ff fa3f 	bl	8000b44 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 80016c6:	2302      	movs	r3, #2
 80016c8:	aa2f      	add	r2, sp, #188	@ 0xbc
 80016ca:	4629      	mov	r1, r5
 80016cc:	4620      	mov	r0, r4
 80016ce:	f012 fe10 	bl	80142f2 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
      }
 80016d2:	a82f      	add	r0, sp, #188	@ 0xbc
 80016d4:	f7ff f8e2 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
  leds.ConfigureTimings(LED_CANFD2, std::vector<uint8_t>{1}, 2);
 80016d8:	463b      	mov	r3, r7
 80016da:	4632      	mov	r2, r6
 80016dc:	4641      	mov	r1, r8
 80016de:	a82f      	add	r0, sp, #188	@ 0xbc
 80016e0:	f88d 6048 	strb.w	r6, [sp, #72]	@ 0x48
 80016e4:	e9cd 860e 	strd	r8, r6, [sp, #56]	@ 0x38
 80016e8:	f7ff fa2c 	bl	8000b44 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 80016ec:	2302      	movs	r3, #2
 80016ee:	aa2f      	add	r2, sp, #188	@ 0xbc
 80016f0:	4631      	mov	r1, r6
 80016f2:	4620      	mov	r0, r4
 80016f4:	f012 fdfd 	bl	80142f2 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
 80016f8:	a82f      	add	r0, sp, #188	@ 0xbc
 80016fa:	f7ff f8cf 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
  leds.ConfigureTimings(LED_UART_CM4, std::vector<uint8_t>{1}, 2);
 80016fe:	463b      	mov	r3, r7
 8001700:	4632      	mov	r2, r6
 8001702:	4641      	mov	r1, r8
 8001704:	a82f      	add	r0, sp, #188	@ 0xbc
 8001706:	f88d 6048 	strb.w	r6, [sp, #72]	@ 0x48
 800170a:	e9cd 8610 	strd	r8, r6, [sp, #64]	@ 0x40
 800170e:	f7ff fa19 	bl	8000b44 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8001712:	2302      	movs	r3, #2
 8001714:	aa2f      	add	r2, sp, #188	@ 0xbc
 8001716:	4620      	mov	r0, r4
 8001718:	4619      	mov	r1, r3
 800171a:	f012 fdea 	bl	80142f2 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
 800171e:	a82f      	add	r0, sp, #188	@ 0xbc
 8001720:	f7ff f8bc 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
  leds.ConfigureTimings(LED_UART_BACK, std::vector<uint8_t>{1}, 2);
 8001724:	463b      	mov	r3, r7
 8001726:	a82f      	add	r0, sp, #188	@ 0xbc
 8001728:	f88d 600c 	strb.w	r6, [sp, #12]
 800172c:	e9cd 9612 	strd	r9, r6, [sp, #72]	@ 0x48
 8001730:	e898 0006 	ldmia.w	r8, {r1, r2}
 8001734:	f7ff fa06 	bl	8000b44 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8001738:	2302      	movs	r3, #2
 800173a:	aa2f      	add	r2, sp, #188	@ 0xbc
 800173c:	2103      	movs	r1, #3
 800173e:	4620      	mov	r0, r4
 8001740:	f012 fdd7 	bl	80142f2 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
 8001744:	a82f      	add	r0, sp, #188	@ 0xbc
 8001746:	f7ff f8a9 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
  leds.ConfigureTimings(LED_UART_RS485, std::vector<uint8_t>{1}, 2);
 800174a:	eb0d 030a 	add.w	r3, sp, sl
 800174e:	a82f      	add	r0, sp, #188	@ 0xbc
 8001750:	f88d 6008 	strb.w	r6, [sp, #8]
 8001754:	e9cd 3614 	strd	r3, r6, [sp, #80]	@ 0x50
 8001758:	464b      	mov	r3, r9
 800175a:	e897 0006 	ldmia.w	r7, {r1, r2}
 800175e:	f7ff f9f1 	bl	8000b44 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8001762:	2302      	movs	r3, #2
 8001764:	aa2f      	add	r2, sp, #188	@ 0xbc
 8001766:	2104      	movs	r1, #4
 8001768:	4620      	mov	r0, r4
 800176a:	f012 fdc2 	bl	80142f2 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
 800176e:	a82f      	add	r0, sp, #188	@ 0xbc
 8001770:	f7ff f894 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
  leds.AddRGBLED(LED_RGB, const_cast<uint32_t*>(&(TIM3->CCR1)), const_cast<uint32_t*>(&(TIM3->CCR2)), const_cast<uint32_t*>(&(TIM3->CCR3)));
 8001774:	4b34      	ldr	r3, [pc, #208]	@ (8001848 <main+0xcc0>)
 8001776:	4a35      	ldr	r2, [pc, #212]	@ (800184c <main+0xcc4>)
 8001778:	210d      	movs	r1, #13
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	4620      	mov	r0, r4
 800177e:	3b04      	subs	r3, #4
 8001780:	f012 fb78 	bl	8013e74 <_ZN4LEDS9AddRGBLEDEhPmS0_S0_>
  leds.TestLEDs();
 8001784:	4620      	mov	r0, r4
 8001786:	f012 fcd6 	bl	8014136 <_ZN4LEDS8TestLEDsEv>
  StartupLEDS(&leds);
 800178a:	4620      	mov	r0, r4
 800178c:	f00c fe22 	bl	800e3d4 <_Z11StartupLEDSP4LEDS>
  communication.SetModuleAddress(STM32_HEAD);
 8001790:	4631      	mov	r1, r6
 8001792:	4828      	ldr	r0, [pc, #160]	@ (8001834 <main+0xcac>)
 8001794:	f00d fa35 	bl	800ec02 <_ZN13Communication16SetModuleAddressEh>
  protocol_uart.SetProtocolPayloadMaxLength(256);
 8001798:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800179c:	482c      	ldr	r0, [pc, #176]	@ (8001850 <main+0xcc8>)
 800179e:	f013 fe59 	bl	8015454 <_ZN21CommunicationProtocol27SetProtocolPayloadMaxLengthEt>
  protocol_uart.AddInterface(UART_CM4, &huart1);
 80017a2:	4a2c      	ldr	r2, [pc, #176]	@ (8001854 <main+0xccc>)
 80017a4:	2102      	movs	r1, #2
 80017a6:	482a      	ldr	r0, [pc, #168]	@ (8001850 <main+0xcc8>)
 80017a8:	f7ff f904 	bl	80009b4 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE12AddInterfaceEhPS0_>
  protocol_uart.AddInterface(UART_BACK, &huart6);
 80017ac:	4a2a      	ldr	r2, [pc, #168]	@ (8001858 <main+0xcd0>)
 80017ae:	2103      	movs	r1, #3
 80017b0:	4827      	ldr	r0, [pc, #156]	@ (8001850 <main+0xcc8>)
 80017b2:	f7ff f8ff 	bl	80009b4 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE12AddInterfaceEhPS0_>
  protocol_uart.AddInterface(UART_PIC, &huart2);
 80017b6:	4a29      	ldr	r2, [pc, #164]	@ (800185c <main+0xcd4>)
 80017b8:	2105      	movs	r1, #5
 80017ba:	4825      	ldr	r0, [pc, #148]	@ (8001850 <main+0xcc8>)
 80017bc:	f7ff f8fa 	bl	80009b4 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE12AddInterfaceEhPS0_>
  communication.AddProtocol(&protocol_uart);
 80017c0:	4923      	ldr	r1, [pc, #140]	@ (8001850 <main+0xcc8>)
 80017c2:	481c      	ldr	r0, [pc, #112]	@ (8001834 <main+0xcac>)
 80017c4:	f00d faec 	bl	800eda0 <_ZN13Communication11AddProtocolEP21CommunicationProtocol>
  communication.ActivateReception(UART_CM4);
 80017c8:	2102      	movs	r1, #2
 80017ca:	481a      	ldr	r0, [pc, #104]	@ (8001834 <main+0xcac>)
 80017cc:	f00d fa06 	bl	800ebdc <_ZN13Communication17ActivateReceptionEh>
  communication.ActivateReception(UART_BACK);
 80017d0:	2103      	movs	r1, #3
 80017d2:	4818      	ldr	r0, [pc, #96]	@ (8001834 <main+0xcac>)
 80017d4:	f00d fa02 	bl	800ebdc <_ZN13Communication17ActivateReceptionEh>
  communication.ActivateReception(UART_PIC);
 80017d8:	2105      	movs	r1, #5
 80017da:	4816      	ldr	r0, [pc, #88]	@ (8001834 <main+0xcac>)
 80017dc:	f00d f9fe 	bl	800ebdc <_ZN13Communication17ActivateReceptionEh>
  protocol_canfd.SetProtocolPayloadMaxLength(62);
 80017e0:	213e      	movs	r1, #62	@ 0x3e
 80017e2:	481f      	ldr	r0, [pc, #124]	@ (8001860 <main+0xcd8>)
 80017e4:	f013 fe36 	bl	8015454 <_ZN21CommunicationProtocol27SetProtocolPayloadMaxLengthEt>
  protocol_canfd.AddInterface(CANFD1, &hfdcan1);
 80017e8:	4a1e      	ldr	r2, [pc, #120]	@ (8001864 <main+0xcdc>)
 80017ea:	4629      	mov	r1, r5
 80017ec:	481c      	ldr	r0, [pc, #112]	@ (8001860 <main+0xcd8>)
 80017ee:	f014 f8cd 	bl	801598c <_ZN11CANProtocol12AddInterfaceEhP19FDCAN_HandleTypeDef>
  protocol_canfd.ConfigureFilters(CANFD1);
 80017f2:	4629      	mov	r1, r5
 80017f4:	481a      	ldr	r0, [pc, #104]	@ (8001860 <main+0xcd8>)
 80017f6:	f014 f828 	bl	801584a <_ZN11CANProtocol16ConfigureFiltersEh>
  protocol_canfd.ActivateReception(CANFD1);
 80017fa:	4629      	mov	r1, r5
 80017fc:	4818      	ldr	r0, [pc, #96]	@ (8001860 <main+0xcd8>)
 80017fe:	f014 f837 	bl	8015870 <_ZN11CANProtocol17ActivateReceptionEh>
  protocol_canfd.Start(CANFD1);
 8001802:	4629      	mov	r1, r5
 8001804:	4816      	ldr	r0, [pc, #88]	@ (8001860 <main+0xcd8>)
 8001806:	f014 f844 	bl	8015892 <_ZN11CANProtocol5StartEh>
  communication.AddProtocol(&protocol_canfd);
 800180a:	4915      	ldr	r1, [pc, #84]	@ (8001860 <main+0xcd8>)
 800180c:	4809      	ldr	r0, [pc, #36]	@ (8001834 <main+0xcac>)
 800180e:	f00d fac7 	bl	800eda0 <_ZN13Communication11AddProtocolEP21CommunicationProtocol>
  communication.ActivateReception(CANFD1);
 8001812:	4629      	mov	r1, r5
 8001814:	e02c      	b.n	8001870 <main+0xce8>
 8001816:	bf00      	nop
 8001818:	2400230c 	.word	0x2400230c
 800181c:	24002700 	.word	0x24002700
 8001820:	24000148 	.word	0x24000148
 8001824:	2400269c 	.word	0x2400269c
 8001828:	24001780 	.word	0x24001780
 800182c:	240016a0 	.word	0x240016a0
 8001830:	24000220 	.word	0x24000220
 8001834:	24001664 	.word	0x24001664
 8001838:	24000208 	.word	0x24000208
 800183c:	240001ec 	.word	0x240001ec
 8001840:	24000180 	.word	0x24000180
 8001844:	240000e0 	.word	0x240000e0
 8001848:	4000043c 	.word	0x4000043c
 800184c:	40000434 	.word	0x40000434
 8001850:	24001718 	.word	0x24001718
 8001854:	24002080 	.word	0x24002080
 8001858:	24001ed0 	.word	0x24001ed0
 800185c:	24001ff0 	.word	0x24001ff0
 8001860:	240016c4 	.word	0x240016c4
 8001864:	240025fc 	.word	0x240025fc
 8001868:	58020c00 	.word	0x58020c00
 800186c:	58020400 	.word	0x58020400
 8001870:	4814      	ldr	r0, [pc, #80]	@ (80018c4 <main+0xd3c>)
 8001872:	f00d f9b3 	bl	800ebdc <_ZN13Communication17ActivateReceptionEh>
  user.Init();
 8001876:	4814      	ldr	r0, [pc, #80]	@ (80018c8 <main+0xd40>)
 8001878:	f017 fa59 	bl	8018d2e <_ZN4User4InitEv>
  osKernelInitialize();
 800187c:	f00a fba8 	bl	800bfd0 <osKernelInitialize>
  TrajectoryHandle = osThreadNew(TrajectoryTask, NULL, &Trajectory_attributes);
 8001880:	4a12      	ldr	r2, [pc, #72]	@ (80018cc <main+0xd44>)
 8001882:	4629      	mov	r1, r5
 8001884:	4812      	ldr	r0, [pc, #72]	@ (80018d0 <main+0xd48>)
 8001886:	f00a fbd1 	bl	800c02c <osThreadNew>
 800188a:	4b12      	ldr	r3, [pc, #72]	@ (80018d4 <main+0xd4c>)
  SensorsHandle = osThreadNew(SensorsTask, NULL, &Sensors_attributes);
 800188c:	4a12      	ldr	r2, [pc, #72]	@ (80018d8 <main+0xd50>)
 800188e:	4629      	mov	r1, r5
  TrajectoryHandle = osThreadNew(TrajectoryTask, NULL, &Trajectory_attributes);
 8001890:	6018      	str	r0, [r3, #0]
  SensorsHandle = osThreadNew(SensorsTask, NULL, &Sensors_attributes);
 8001892:	4812      	ldr	r0, [pc, #72]	@ (80018dc <main+0xd54>)
 8001894:	f00a fbca 	bl	800c02c <osThreadNew>
 8001898:	4b11      	ldr	r3, [pc, #68]	@ (80018e0 <main+0xd58>)
  CommunicationHandle = osThreadNew(CommunicationTask, NULL, &Communication_attributes);
 800189a:	4a12      	ldr	r2, [pc, #72]	@ (80018e4 <main+0xd5c>)
 800189c:	4629      	mov	r1, r5
  SensorsHandle = osThreadNew(SensorsTask, NULL, &Sensors_attributes);
 800189e:	6018      	str	r0, [r3, #0]
  CommunicationHandle = osThreadNew(CommunicationTask, NULL, &Communication_attributes);
 80018a0:	4811      	ldr	r0, [pc, #68]	@ (80018e8 <main+0xd60>)
 80018a2:	f00a fbc3 	bl	800c02c <osThreadNew>
 80018a6:	4b11      	ldr	r3, [pc, #68]	@ (80018ec <main+0xd64>)
  LEDsHandle = osThreadNew(LEDsTask, NULL, &LEDs_attributes);
 80018a8:	4a11      	ldr	r2, [pc, #68]	@ (80018f0 <main+0xd68>)
 80018aa:	4629      	mov	r1, r5
  CommunicationHandle = osThreadNew(CommunicationTask, NULL, &Communication_attributes);
 80018ac:	6018      	str	r0, [r3, #0]
  LEDsHandle = osThreadNew(LEDsTask, NULL, &LEDs_attributes);
 80018ae:	4811      	ldr	r0, [pc, #68]	@ (80018f4 <main+0xd6c>)
 80018b0:	f00a fbbc 	bl	800c02c <osThreadNew>
 80018b4:	4b10      	ldr	r3, [pc, #64]	@ (80018f8 <main+0xd70>)
 80018b6:	6018      	str	r0, [r3, #0]
  user.AddOSThreads();
 80018b8:	4803      	ldr	r0, [pc, #12]	@ (80018c8 <main+0xd40>)
 80018ba:	f017 fa39 	bl	8018d30 <_ZN4User12AddOSThreadsEv>
  osKernelStart();
 80018be:	f00a fb99 	bl	800bff4 <osKernelStart>
  while (1)
 80018c2:	e7fe      	b.n	80018c2 <main+0xd3a>
 80018c4:	24001664 	.word	0x24001664
 80018c8:	24000098 	.word	0x24000098
 80018cc:	08019ff4 	.word	0x08019ff4
 80018d0:	080005e5 	.word	0x080005e5
 80018d4:	2400183c 	.word	0x2400183c
 80018d8:	08019fd0 	.word	0x08019fd0
 80018dc:	0800068b 	.word	0x0800068b
 80018e0:	24001838 	.word	0x24001838
 80018e4:	08019fac 	.word	0x08019fac
 80018e8:	080005f1 	.word	0x080005f1
 80018ec:	24001834 	.word	0x24001834
 80018f0:	08019f88 	.word	0x08019f88
 80018f4:	08000601 	.word	0x08000601
 80018f8:	24001830 	.word	0x24001830

080018fc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80018fc:	b510      	push	{r4, lr}
	  if (_Num)
 80018fe:	1a0c      	subs	r4, r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8001900:	4613      	mov	r3, r2
	  if (_Num)
 8001902:	d005      	beq.n	8001910 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x14>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8001904:	4601      	mov	r1, r0
 8001906:	4622      	mov	r2, r4
 8001908:	4618      	mov	r0, r3
 800190a:	f018 f913 	bl	8019b34 <memmove>
 800190e:	4603      	mov	r3, r0
	}
 8001910:	1918      	adds	r0, r3, r4
 8001912:	bd10      	pop	{r4, pc}

08001914 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001918:	b08b      	sub	sp, #44	@ 0x2c
	: _M_start(), _M_finish(), _M_end_of_storage()
 800191a:	2300      	movs	r3, #0
 800191c:	460c      	mov	r4, r1
	ID = communication.GetID((void*) huart, &success);
 800191e:	4601      	mov	r1, r0
 8001920:	f10d 020f 	add.w	r2, sp, #15
 8001924:	4852      	ldr	r0, [pc, #328]	@ (8001a70 <HAL_UARTEx_RxEventCallback+0x15c>)
 8001926:	9306      	str	r3, [sp, #24]
 8001928:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800192c:	f00d f91c 	bl	800eb68 <_ZN13Communication5GetIDEPvPb>
	if (!success) {return;}
 8001930:	f89d 300f 	ldrb.w	r3, [sp, #15]
	ID = communication.GetID((void*) huart, &success);
 8001934:	4605      	mov	r5, r0
	if (!success) {return;}
 8001936:	b1a3      	cbz	r3, 8001962 <HAL_UARTEx_RxEventCallback+0x4e>
	std::vector<uint8_t>* buffer = communication.GetBuffer(ID, &success);
 8001938:	4601      	mov	r1, r0
 800193a:	f10d 020f 	add.w	r2, sp, #15
 800193e:	484c      	ldr	r0, [pc, #304]	@ (8001a70 <HAL_UARTEx_RxEventCallback+0x15c>)
 8001940:	f00d f926 	bl	800eb90 <_ZN13Communication9GetBufferEhPb>
	uint16_t* buffer_index = communication.GetBufferIndex(ID, &success);
 8001944:	f10d 020f 	add.w	r2, sp, #15
	std::vector<uint8_t>* buffer = communication.GetBuffer(ID, &success);
 8001948:	4607      	mov	r7, r0
	uint16_t* buffer_index = communication.GetBufferIndex(ID, &success);
 800194a:	4629      	mov	r1, r5
 800194c:	4848      	ldr	r0, [pc, #288]	@ (8001a70 <HAL_UARTEx_RxEventCallback+0x15c>)
 800194e:	f00d f92a 	bl	800eba6 <_ZN13Communication14GetBufferIndexEhPb>
	if (!success) {communication.ActivateReception(ID); return;}
 8001952:	f89d 300f 	ldrb.w	r3, [sp, #15]
	uint16_t* buffer_index = communication.GetBufferIndex(ID, &success);
 8001956:	4680      	mov	r8, r0
	if (!success) {communication.ActivateReception(ID); return;}
 8001958:	b94b      	cbnz	r3, 800196e <HAL_UARTEx_RxEventCallback+0x5a>
	communication.ActivateReception(ID);
 800195a:	4629      	mov	r1, r5
 800195c:	4844      	ldr	r0, [pc, #272]	@ (8001a70 <HAL_UARTEx_RxEventCallback+0x15c>)
 800195e:	f00d f93d 	bl	800ebdc <_ZN13Communication17ActivateReceptionEh>
      }
 8001962:	a804      	add	r0, sp, #16
 8001964:	f7fe ff9a 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 8001968:	b00b      	add	sp, #44	@ 0x2c
 800196a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (Size == *buffer_index) {communication.ActivateReception(ID); return;}
 800196e:	8801      	ldrh	r1, [r0, #0]
 8001970:	42a1      	cmp	r1, r4
 8001972:	d0f2      	beq.n	800195a <HAL_UARTEx_RxEventCallback+0x46>
      : _M_current(__i) { }
 8001974:	683a      	ldr	r2, [r7, #0]
		received_data = std::vector<uint8_t>(buffer->begin() + *buffer_index, buffer->begin() + Size);
 8001976:	ab03      	add	r3, sp, #12
      { return __normal_iterator(_M_current + __n); }
 8001978:	4411      	add	r1, r2
	if (Size > *buffer_index)
 800197a:	d228      	bcs.n	80019ce <HAL_UARTEx_RxEventCallback+0xba>
		received_data = std::vector<uint8_t>(buffer->begin() + *buffer_index, buffer->begin() + Size);
 800197c:	4422      	add	r2, r4
 800197e:	a807      	add	r0, sp, #28
 8001980:	f7ff f8c2 	bl	8000b08 <_ZNSt6vectorIhSaIhEEC1IN9__gnu_cxx17__normal_iteratorIPhS1_EEvEET_S7_RKS0_>
 8001984:	a804      	add	r0, sp, #16
 8001986:	a907      	add	r1, sp, #28
 8001988:	f7fe ff92 	bl	80008b0 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 800198c:	a807      	add	r0, sp, #28
 800198e:	f7fe ff85 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	uint16_t processed_length = communication.Process(ID, received_data, &success);
 8001992:	a904      	add	r1, sp, #16
 8001994:	a807      	add	r0, sp, #28
 8001996:	f7ff f831 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 800199a:	f10d 030f 	add.w	r3, sp, #15
 800199e:	aa07      	add	r2, sp, #28
 80019a0:	4629      	mov	r1, r5
 80019a2:	4833      	ldr	r0, [pc, #204]	@ (8001a70 <HAL_UARTEx_RxEventCallback+0x15c>)
 80019a4:	f011 fd3e 	bl	8013424 <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb>
 80019a8:	4604      	mov	r4, r0
 80019aa:	a807      	add	r0, sp, #28
 80019ac:	f7fe ff76 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	*buffer_index += processed_length;
 80019b0:	f8b8 3000 	ldrh.w	r3, [r8]
 80019b4:	18e0      	adds	r0, r4, r3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80019b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019ba:	b280      	uxth	r0, r0
 80019bc:	1a9b      	subs	r3, r3, r2
 80019be:	f8a8 0000 	strh.w	r0, [r8]
	if (*buffer_index >= buffer->size())
 80019c2:	4298      	cmp	r0, r3
		*buffer_index -= buffer->size();
 80019c4:	bf24      	itt	cs
 80019c6:	1ac0      	subcs	r0, r0, r3
 80019c8:	f8a8 0000 	strhcs.w	r0, [r8]
 80019cc:	e7c5      	b.n	800195a <HAL_UARTEx_RxEventCallback+0x46>
		received_data = std::vector<uint8_t>(buffer->begin() + *buffer_index, buffer->end());
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	a807      	add	r0, sp, #28
 80019d2:	f7ff f899 	bl	8000b08 <_ZNSt6vectorIhSaIhEEC1IN9__gnu_cxx17__normal_iteratorIPhS1_EEvEET_S7_RKS0_>
 80019d6:	a907      	add	r1, sp, #28
 80019d8:	a804      	add	r0, sp, #16
 80019da:	f7fe ff69 	bl	80008b0 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 80019de:	a807      	add	r0, sp, #28
 80019e0:	f7fe ff5c 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      : _M_current(__i) { }
 80019e4:	f8d7 9000 	ldr.w	r9, [r7]
      { return __normal_iterator(_M_current + __n); }
 80019e8:	eb09 0b04 	add.w	fp, r9, r4
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __position, _ForwardIterator __first,
		      _ForwardIterator __last, std::forward_iterator_tag)
      {
	if (__first != __last)
 80019ec:	45cb      	cmp	fp, r9
 80019ee:	d0d0      	beq.n	8001992 <HAL_UARTEx_RxEventCallback+0x7e>
	  {
	    const size_type __n = std::distance(__first, __last);
	    if (size_type(this->_M_impl._M_end_of_storage
 80019f0:	9b06      	ldr	r3, [sp, #24]
      : _M_current(__i) { }
 80019f2:	e9dd a604 	ldrd	sl, r6, [sp, #16]
			  - this->_M_impl._M_finish) >= __n)
 80019f6:	1b9a      	subs	r2, r3, r6
	    if (size_type(this->_M_impl._M_end_of_storage
 80019f8:	42a2      	cmp	r2, r4
 80019fa:	d310      	bcc.n	8001a1e <HAL_UARTEx_RxEventCallback+0x10a>
			      _Category>::__copy_m(__first, __last, __result);
 80019fc:	4632      	mov	r2, r6
 80019fe:	4659      	mov	r1, fp
 8001a00:	4648      	mov	r0, r9
 8001a02:	f7fe ffef 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		    std::advance(__mid, __elems_after);
		    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
		    std::__uninitialized_copy_a(__mid, __last,
						this->_M_impl._M_finish,
						_M_get_Tp_allocator());
		    this->_M_impl._M_finish += __n - __elems_after;
 8001a06:	1932      	adds	r2, r6, r4
 8001a08:	4631      	mov	r1, r6
 8001a0a:	4630      	mov	r0, r6
 8001a0c:	9205      	str	r2, [sp, #20]
 8001a0e:	f7ff ff75 	bl	80018fc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8001a12:	4632      	mov	r2, r6
 8001a14:	4649      	mov	r1, r9
 8001a16:	4648      	mov	r0, r9
 8001a18:	f7fe ffe4 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8001a1c:	e7b9      	b.n	8001992 <HAL_UARTEx_RxEventCallback+0x7e>
		// reachable.
		pointer __old_start = this->_M_impl._M_start;
		pointer __old_finish = this->_M_impl._M_finish;

		const size_type __len =
		  _M_check_len(__n, "vector::_M_range_insert");
 8001a1e:	4621      	mov	r1, r4
 8001a20:	4a14      	ldr	r2, [pc, #80]	@ (8001a74 <HAL_UARTEx_RxEventCallback+0x160>)
 8001a22:	a804      	add	r0, sp, #16
 8001a24:	9301      	str	r3, [sp, #4]
 8001a26:	f7fe ff5a 	bl	80008de <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8001a2a:	9000      	str	r0, [sp, #0]
		pointer __new_start(this->_M_allocate(__len));
 8001a2c:	f7fe fe22 	bl	8000674 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
 8001a30:	4631      	mov	r1, r6
 8001a32:	4602      	mov	r2, r0
 8001a34:	4604      	mov	r4, r0
 8001a36:	4650      	mov	r0, sl
 8001a38:	f7ff ff60 	bl	80018fc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8001a3c:	4659      	mov	r1, fp
 8001a3e:	4602      	mov	r2, r0
 8001a40:	4648      	mov	r0, r9
 8001a42:	f7fe ffcf 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8001a46:	4631      	mov	r1, r6
 8001a48:	4602      	mov	r2, r0
 8001a4a:	4630      	mov	r0, r6
 8001a4c:	f7ff ff56 	bl	80018fc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8001a50:	4606      	mov	r6, r0
	if (__p)
 8001a52:	f1ba 0f00 	cmp.w	sl, #0
 8001a56:	d005      	beq.n	8001a64 <HAL_UARTEx_RxEventCallback+0x150>
 8001a58:	9b01      	ldr	r3, [sp, #4]
 8001a5a:	4650      	mov	r0, sl
 8001a5c:	eba3 010a 	sub.w	r1, r3, sl
 8001a60:	f017 feb6 	bl	80197d0 <_ZdlPvj>
		_GLIBCXX_ASAN_ANNOTATE_REINIT;
		_M_deallocate(__old_start,
			      this->_M_impl._M_end_of_storage - __old_start);
		this->_M_impl._M_start = __new_start;
		this->_M_impl._M_finish = __new_finish;
		this->_M_impl._M_end_of_storage = __new_start + __len;
 8001a64:	9b00      	ldr	r3, [sp, #0]
		this->_M_impl._M_finish = __new_finish;
 8001a66:	e9cd 4604 	strd	r4, r6, [sp, #16]
		this->_M_impl._M_end_of_storage = __new_start + __len;
 8001a6a:	441c      	add	r4, r3
 8001a6c:	9406      	str	r4, [sp, #24]
 8001a6e:	e790      	b.n	8001992 <HAL_UARTEx_RxEventCallback+0x7e>
 8001a70:	24001664 	.word	0x24001664
 8001a74:	08019e89 	.word	0x08019e89

08001a78 <_ZN4LEDSD1Ev>:
    uint16_t G_address;
    uint16_t B_address;
};

// LEDS class used to control the LED
class LEDS {
 8001a78:	b570      	push	{r4, r5, r6, lr}
 8001a7a:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8001a7c:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
	if (__p)
 8001a7e:	b118      	cbz	r0, 8001a88 <_ZN4LEDSD1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001a80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001a82:	1a09      	subs	r1, r1, r0
 8001a84:	f017 fea4 	bl	80197d0 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8001a88:	6a20      	ldr	r0, [r4, #32]
	if (__p)
 8001a8a:	b120      	cbz	r0, 8001a96 <_ZN4LEDSD1Ev+0x1e>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001a8c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001a8e:	1a09      	subs	r1, r1, r0
 8001a90:	1109      	asrs	r1, r1, #4
 8001a92:	f7fe fdec 	bl	800066e <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001a96:	6960      	ldr	r0, [r4, #20]
	if (__p)
 8001a98:	b120      	cbz	r0, 8001aa4 <_ZN4LEDSD1Ev+0x2c>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001a9a:	69e1      	ldr	r1, [r4, #28]
 8001a9c:	1a09      	subs	r1, r1, r0
 8001a9e:	1109      	asrs	r1, r1, #4
 8001aa0:	f7fe fde5 	bl	800066e <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001aa4:	e9d4 5602 	ldrd	r5, r6, [r4, #8]
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
 8001aa8:	42ae      	cmp	r6, r5
 8001aaa:	d107      	bne.n	8001abc <_ZN4LEDSD1Ev+0x44>
	_M_deallocate(_M_impl._M_start,
 8001aac:	68a0      	ldr	r0, [r4, #8]
	if (__p)
 8001aae:	b118      	cbz	r0, 8001ab8 <_ZN4LEDSD1Ev+0x40>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001ab0:	6921      	ldr	r1, [r4, #16]
 8001ab2:	1a09      	subs	r1, r1, r0
 8001ab4:	f017 fe8c 	bl	80197d0 <_ZdlPvj>
 8001ab8:	4620      	mov	r0, r4
 8001aba:	bd70      	pop	{r4, r5, r6, pc}
      }
 8001abc:	f105 0010 	add.w	r0, r5, #16
 8001ac0:	3520      	adds	r5, #32
 8001ac2:	f7fe feeb 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8001ac6:	e7ef      	b.n	8001aa8 <_ZN4LEDSD1Ev+0x30>

08001ac8 <_ZN13CommunicationD1Ev>:

	std::vector<uint8_t> data; // TODO, set as the register type with template
};

// Communication Class to communication with other modules
class Communication {
 8001ac8:	b570      	push	{r4, r5, r6, lr}
 8001aca:	4604      	mov	r4, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001acc:	e9d0 560c 	ldrd	r5, r6, [r0, #48]	@ 0x30
 8001ad0:	42ae      	cmp	r6, r5
 8001ad2:	d112      	bne.n	8001afa <_ZN13CommunicationD1Ev+0x32>
	_M_deallocate(_M_impl._M_start,
 8001ad4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
	if (__p)
 8001ad6:	b118      	cbz	r0, 8001ae0 <_ZN13CommunicationD1Ev+0x18>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001ad8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8001ada:	1a09      	subs	r1, r1, r0
 8001adc:	f017 fe78 	bl	80197d0 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8001ae0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
	if (__p)
 8001ae2:	b120      	cbz	r0, 8001aee <_ZN13CommunicationD1Ev+0x26>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001ae4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8001ae6:	1a09      	subs	r1, r1, r0
 8001ae8:	1089      	asrs	r1, r1, #2
 8001aea:	f7fe fdbd 	bl	8000668 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
      }
 8001aee:	f104 0018 	add.w	r0, r4, #24
 8001af2:	f7fe fed3 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8001af6:	4620      	mov	r0, r4
 8001af8:	bd70      	pop	{r4, r5, r6, pc}
 8001afa:	1d28      	adds	r0, r5, #4
 8001afc:	3514      	adds	r5, #20
 8001afe:	f7fe fecd 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8001b02:	e7e5      	b.n	8001ad0 <_ZN13CommunicationD1Ev+0x8>

08001b04 <_ZN17MasterSubscribersD1Ev>:
	std::vector<SubscriberInterface> interfaces;    // interfaces associated to remote_registers (index by index)
	std::vector<uint8_t> filters;					// list of module address filters
};

// MasterSubscribers class used to receive published data from other modules
class MasterSubscribers {
 8001b04:	b570      	push	{r4, r5, r6, lr}
 8001b06:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8001b08:	6980      	ldr	r0, [r0, #24]
	if (__p)
 8001b0a:	b120      	cbz	r0, 8001b16 <_ZN17MasterSubscribersD1Ev+0x12>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001b0c:	6a21      	ldr	r1, [r4, #32]
 8001b0e:	1a09      	subs	r1, r1, r0
 8001b10:	1089      	asrs	r1, r1, #2
 8001b12:	f7fe fda9 	bl	8000668 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001b16:	e9d4 5603 	ldrd	r5, r6, [r4, #12]
 8001b1a:	42ae      	cmp	r6, r5
 8001b1c:	d107      	bne.n	8001b2e <_ZN17MasterSubscribersD1Ev+0x2a>
	_M_deallocate(_M_impl._M_start,
 8001b1e:	68e0      	ldr	r0, [r4, #12]
	if (__p)
 8001b20:	b118      	cbz	r0, 8001b2a <_ZN17MasterSubscribersD1Ev+0x26>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001b22:	6961      	ldr	r1, [r4, #20]
 8001b24:	1a09      	subs	r1, r1, r0
 8001b26:	f017 fe53 	bl	80197d0 <_ZdlPvj>
 8001b2a:	4620      	mov	r0, r4
 8001b2c:	bd70      	pop	{r4, r5, r6, pc}
      }
 8001b2e:	f105 001c 	add.w	r0, r5, #28
 8001b32:	f7fe feb3 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	_M_deallocate(_M_impl._M_start,
 8001b36:	6928      	ldr	r0, [r5, #16]
	if (__p)
 8001b38:	b118      	cbz	r0, 8001b42 <_ZN17MasterSubscribersD1Ev+0x3e>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001b3a:	69a9      	ldr	r1, [r5, #24]
 8001b3c:	1a09      	subs	r1, r1, r0
 8001b3e:	f017 fe47 	bl	80197d0 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8001b42:	6868      	ldr	r0, [r5, #4]
	if (__p)
 8001b44:	b118      	cbz	r0, 8001b4e <_ZN17MasterSubscribersD1Ev+0x4a>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001b46:	68e9      	ldr	r1, [r5, #12]
 8001b48:	1a09      	subs	r1, r1, r0
 8001b4a:	f017 fe41 	bl	80197d0 <_ZdlPvj>
 8001b4e:	3528      	adds	r5, #40	@ 0x28
 8001b50:	e7e3      	b.n	8001b1a <_ZN17MasterSubscribersD1Ev+0x16>

08001b52 <_ZN9RegistersD1Ev>:
	bool (*write)(void*, uint16_t, T*, uint16_t);	// write callback
	bool (*read)(void*, uint16_t, T**, uint16_t*);	// read callback
};

// Registers class used to interface memory addresses to memory pointers and / or callbacks
class Registers {
 8001b52:	b510      	push	{r4, lr}
 8001b54:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8001b56:	f8d0 00a4 	ldr.w	r0, [r0, #164]	@ 0xa4
	if (__p)
 8001b5a:	b128      	cbz	r0, 8001b68 <_ZN9RegistersD1Ev+0x16>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001b5c:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 8001b60:	1a09      	subs	r1, r1, r0
 8001b62:	1109      	asrs	r1, r1, #4
 8001b64:	f7fe fd83 	bl	800066e <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001b68:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
	if (__p)
 8001b6c:	b128      	cbz	r0, 8001b7a <_ZN9RegistersD1Ev+0x28>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001b6e:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 8001b72:	1a09      	subs	r1, r1, r0
 8001b74:	1109      	asrs	r1, r1, #4
 8001b76:	f7fe fd7a 	bl	800066e <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001b7a:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
	if (__p)
 8001b7e:	b128      	cbz	r0, 8001b8c <_ZN9RegistersD1Ev+0x3a>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001b80:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8001b84:	1a09      	subs	r1, r1, r0
 8001b86:	1109      	asrs	r1, r1, #4
 8001b88:	f7fe fd71 	bl	800066e <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001b8c:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
	if (__p)
 8001b90:	b128      	cbz	r0, 8001b9e <_ZN9RegistersD1Ev+0x4c>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001b92:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 8001b96:	1a09      	subs	r1, r1, r0
 8001b98:	1109      	asrs	r1, r1, #4
 8001b9a:	f7fe fd68 	bl	800066e <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001b9e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
	if (__p)
 8001ba0:	b120      	cbz	r0, 8001bac <_ZN9RegistersD1Ev+0x5a>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001ba2:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8001ba4:	1a09      	subs	r1, r1, r0
 8001ba6:	1109      	asrs	r1, r1, #4
 8001ba8:	f7fe fd61 	bl	800066e <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001bac:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
	if (__p)
 8001bae:	b120      	cbz	r0, 8001bba <_ZN9RegistersD1Ev+0x68>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001bb0:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8001bb2:	1a09      	subs	r1, r1, r0
 8001bb4:	1109      	asrs	r1, r1, #4
 8001bb6:	f7fe fd5a 	bl	800066e <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001bba:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
	if (__p)
 8001bbc:	b120      	cbz	r0, 8001bc8 <_ZN9RegistersD1Ev+0x76>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001bbe:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8001bc0:	1a09      	subs	r1, r1, r0
 8001bc2:	1109      	asrs	r1, r1, #4
 8001bc4:	f7fe fd53 	bl	800066e <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001bc8:	6d20      	ldr	r0, [r4, #80]	@ 0x50
	if (__p)
 8001bca:	b120      	cbz	r0, 8001bd6 <_ZN9RegistersD1Ev+0x84>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001bcc:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8001bce:	1a09      	subs	r1, r1, r0
 8001bd0:	1109      	asrs	r1, r1, #4
 8001bd2:	f7fe fd4c 	bl	800066e <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001bd6:	6c60      	ldr	r0, [r4, #68]	@ 0x44
	if (__p)
 8001bd8:	b120      	cbz	r0, 8001be4 <_ZN9RegistersD1Ev+0x92>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001bda:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8001bdc:	1a09      	subs	r1, r1, r0
 8001bde:	1109      	asrs	r1, r1, #4
 8001be0:	f7fe fd45 	bl	800066e <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001be4:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
	if (__p)
 8001be6:	b120      	cbz	r0, 8001bf2 <_ZN9RegistersD1Ev+0xa0>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001be8:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8001bea:	1a09      	subs	r1, r1, r0
 8001bec:	1109      	asrs	r1, r1, #4
 8001bee:	f7fe fd3e 	bl	800066e <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001bf2:	6860      	ldr	r0, [r4, #4]
	if (__p)
 8001bf4:	b120      	cbz	r0, 8001c00 <_ZN9RegistersD1Ev+0xae>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001bf6:	68e1      	ldr	r1, [r4, #12]
 8001bf8:	1a09      	subs	r1, r1, r0
 8001bfa:	1109      	asrs	r1, r1, #4
 8001bfc:	f7fe fd37 	bl	800066e <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
 8001c00:	4620      	mov	r0, r4
 8001c02:	bd10      	pop	{r4, pc}

08001c04 <_ZNSt6vectorI9PublisherSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8001c04:	b570      	push	{r4, r5, r6, lr}
 8001c06:	4604      	mov	r4, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001c08:	e9d0 5600 	ldrd	r5, r6, [r0]
 8001c0c:	42ae      	cmp	r6, r5
 8001c0e:	d107      	bne.n	8001c20 <_ZNSt6vectorI9PublisherSaIS0_EED1Ev+0x1c>
	_M_deallocate(_M_impl._M_start,
 8001c10:	6820      	ldr	r0, [r4, #0]
	if (__p)
 8001c12:	b118      	cbz	r0, 8001c1c <_ZNSt6vectorI9PublisherSaIS0_EED1Ev+0x18>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001c14:	68a1      	ldr	r1, [r4, #8]
 8001c16:	1a09      	subs	r1, r1, r0
 8001c18:	f017 fdda 	bl	80197d0 <_ZdlPvj>
      }
 8001c1c:	4620      	mov	r0, r4
 8001c1e:	bd70      	pop	{r4, r5, r6, pc}
	_M_deallocate(_M_impl._M_start,
 8001c20:	6968      	ldr	r0, [r5, #20]
	if (__p)
 8001c22:	b120      	cbz	r0, 8001c2e <_ZNSt6vectorI9PublisherSaIS0_EED1Ev+0x2a>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001c24:	69e9      	ldr	r1, [r5, #28]
 8001c26:	1a09      	subs	r1, r1, r0
 8001c28:	1089      	asrs	r1, r1, #2
 8001c2a:	f7fe fd1d 	bl	8000668 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001c2e:	68a8      	ldr	r0, [r5, #8]
	if (__p)
 8001c30:	b118      	cbz	r0, 8001c3a <_ZNSt6vectorI9PublisherSaIS0_EED1Ev+0x36>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001c32:	6929      	ldr	r1, [r5, #16]
 8001c34:	1a09      	subs	r1, r1, r0
 8001c36:	f017 fdcb 	bl	80197d0 <_ZdlPvj>
 8001c3a:	3520      	adds	r5, #32
 8001c3c:	e7e6      	b.n	8001c0c <_ZNSt6vectorI9PublisherSaIS0_EED1Ev+0x8>

08001c3e <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8001c3e:	b570      	push	{r4, r5, r6, lr}
 8001c40:	4604      	mov	r4, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001c42:	e9d0 5600 	ldrd	r5, r6, [r0]
 8001c46:	42ae      	cmp	r6, r5
 8001c48:	d107      	bne.n	8001c5a <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev+0x1c>
	_M_deallocate(_M_impl._M_start,
 8001c4a:	6820      	ldr	r0, [r4, #0]
	if (__p)
 8001c4c:	b118      	cbz	r0, 8001c56 <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev+0x18>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001c4e:	68a1      	ldr	r1, [r4, #8]
 8001c50:	1a09      	subs	r1, r1, r0
 8001c52:	f017 fdbd 	bl	80197d0 <_ZdlPvj>
      }
 8001c56:	4620      	mov	r0, r4
 8001c58:	bd70      	pop	{r4, r5, r6, pc}
 8001c5a:	4628      	mov	r0, r5
 8001c5c:	350c      	adds	r5, #12
 8001c5e:	f7fe fe1d 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8001c62:	e7f0      	b.n	8001c46 <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev+0x8>

08001c64 <_ZN21CommunicationProtocolD1Ev>:
	uint8_t target_address;
	uint8_t source_address;
};

// CommunicationProtocol class used as a basis to derive custom Protocols
class CommunicationProtocol {
 8001c64:	4b0b      	ldr	r3, [pc, #44]	@ (8001c94 <_ZN21CommunicationProtocolD1Ev+0x30>)
 8001c66:	b510      	push	{r4, lr}
 8001c68:	4604      	mov	r4, r0
 8001c6a:	6003      	str	r3, [r0, #0]
	_M_deallocate(_M_impl._M_start,
 8001c6c:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
	if (__p)
 8001c6e:	b118      	cbz	r0, 8001c78 <_ZN21CommunicationProtocolD1Ev+0x14>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001c70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001c72:	1a09      	subs	r1, r1, r0
 8001c74:	f017 fdac 	bl	80197d0 <_ZdlPvj>
 8001c78:	f104 0020 	add.w	r0, r4, #32
 8001c7c:	f7ff ffdf 	bl	8001c3e <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev>
      }
 8001c80:	f104 0010 	add.w	r0, r4, #16
 8001c84:	f7fe fe0a 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8001c88:	1d20      	adds	r0, r4, #4
 8001c8a:	f7ff ffd8 	bl	8001c3e <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev>
 8001c8e:	4620      	mov	r0, r4
 8001c90:	bd10      	pop	{r4, pc}
 8001c92:	bf00      	nop
 8001c94:	0801a10c 	.word	0x0801a10c

08001c98 <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001c98:	b510      	push	{r4, lr}
 8001c9a:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8001c9c:	6800      	ldr	r0, [r0, #0]
	if (__p)
 8001c9e:	b120      	cbz	r0, 8001caa <_ZNSt12_Vector_baseIfSaIfEED1Ev+0x12>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001ca0:	68a1      	ldr	r1, [r4, #8]
 8001ca2:	1a09      	subs	r1, r1, r0
 8001ca4:	1089      	asrs	r1, r1, #2
 8001ca6:	f7fe fcdf 	bl	8000668 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
      }
 8001caa:	4620      	mov	r0, r4
 8001cac:	bd10      	pop	{r4, pc}

08001cae <_ZNSt12_Vector_baseI9I2CAccessSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001cae:	b510      	push	{r4, lr}
 8001cb0:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8001cb2:	6800      	ldr	r0, [r0, #0]
	if (__p)
 8001cb4:	b118      	cbz	r0, 8001cbe <_ZNSt12_Vector_baseI9I2CAccessSaIS0_EED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001cb6:	68a1      	ldr	r1, [r4, #8]
 8001cb8:	1a09      	subs	r1, r1, r0
 8001cba:	f017 fd89 	bl	80197d0 <_ZdlPvj>
      }
 8001cbe:	4620      	mov	r0, r4
 8001cc0:	bd10      	pop	{r4, pc}

08001cc2 <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001cc2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001cc6:	4604      	mov	r4, r0
 8001cc8:	460f      	mov	r7, r1
	  for (; __first != __last; ++__first)
 8001cca:	42bc      	cmp	r4, r7
 8001ccc:	d101      	bne.n	8001cd2 <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_+0x10>
	    std::_Destroy(std::__addressof(*__first));
	}
 8001cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001cd2:	e9d4 5803 	ldrd	r5, r8, [r4, #12]
	  for (; __first != __last; ++__first)
 8001cd6:	45a8      	cmp	r8, r5
 8001cd8:	d107      	bne.n	8001cea <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_+0x28>
	_M_deallocate(_M_impl._M_start,
 8001cda:	68e0      	ldr	r0, [r4, #12]
	if (__p)
 8001cdc:	b118      	cbz	r0, 8001ce6 <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_+0x24>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001cde:	6961      	ldr	r1, [r4, #20]
 8001ce0:	1a09      	subs	r1, r1, r0
 8001ce2:	f017 fd75 	bl	80197d0 <_ZdlPvj>
 8001ce6:	3418      	adds	r4, #24
 8001ce8:	e7ef      	b.n	8001cca <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_+0x8>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001cea:	e9d5 6905 	ldrd	r6, r9, [r5, #20]
 8001cee:	45b1      	cmp	r9, r6
 8001cf0:	d107      	bne.n	8001d02 <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_+0x40>
	_M_deallocate(_M_impl._M_start,
 8001cf2:	6968      	ldr	r0, [r5, #20]
	if (__p)
 8001cf4:	b118      	cbz	r0, 8001cfe <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_+0x3c>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001cf6:	69e9      	ldr	r1, [r5, #28]
 8001cf8:	1a09      	subs	r1, r1, r0
 8001cfa:	f017 fd69 	bl	80197d0 <_ZdlPvj>
 8001cfe:	3528      	adds	r5, #40	@ 0x28
 8001d00:	e7e9      	b.n	8001cd6 <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_+0x14>
      }
 8001d02:	f106 000c 	add.w	r0, r6, #12
 8001d06:	3618      	adds	r6, #24
 8001d08:	f7ff ffd1 	bl	8001cae <_ZNSt12_Vector_baseI9I2CAccessSaIS0_EED1Ev>
 8001d0c:	e7ef      	b.n	8001cee <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_+0x2c>

08001d0e <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001d0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d10:	4604      	mov	r4, r0
 8001d12:	460e      	mov	r6, r1
	  for (; __first != __last; ++__first)
 8001d14:	42b4      	cmp	r4, r6
 8001d16:	d100      	bne.n	8001d1a <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_+0xc>
	}
 8001d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001d1a:	e9d4 571c 	ldrd	r5, r7, [r4, #112]	@ 0x70
	  for (; __first != __last; ++__first)
 8001d1e:	42af      	cmp	r7, r5
 8001d20:	d118      	bne.n	8001d54 <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_+0x46>
	_M_deallocate(_M_impl._M_start,
 8001d22:	6f20      	ldr	r0, [r4, #112]	@ 0x70
	if (__p)
 8001d24:	b118      	cbz	r0, 8001d2e <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_+0x20>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001d26:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8001d28:	1a09      	subs	r1, r1, r0
 8001d2a:	f017 fd51 	bl	80197d0 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8001d2e:	6e60      	ldr	r0, [r4, #100]	@ 0x64
	if (__p)
 8001d30:	b120      	cbz	r0, 8001d3c <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_+0x2e>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001d32:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8001d34:	1a09      	subs	r1, r1, r0
 8001d36:	1089      	asrs	r1, r1, #2
 8001d38:	f7fe fc96 	bl	8000668 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8001d3c:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	@ 0x58
 8001d40:	f7ff ffbf 	bl	8001cc2 <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_>
	_M_deallocate(_M_impl._M_start,
 8001d44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
	if (__p)
 8001d46:	b118      	cbz	r0, 8001d50 <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_+0x42>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001d48:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8001d4a:	1a09      	subs	r1, r1, r0
 8001d4c:	f017 fd40 	bl	80197d0 <_ZdlPvj>
	  for (; __first != __last; ++__first)
 8001d50:	347c      	adds	r4, #124	@ 0x7c
 8001d52:	e7df      	b.n	8001d14 <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_+0x6>
      }
 8001d54:	f105 0014 	add.w	r0, r5, #20
 8001d58:	3520      	adds	r5, #32
 8001d5a:	f7ff ffa8 	bl	8001cae <_ZNSt12_Vector_baseI9I2CAccessSaIS0_EED1Ev>
 8001d5e:	e7de      	b.n	8001d1e <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_+0x10>

08001d60 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8001d60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001d64:	e9d0 8a00 	ldrd	r8, sl, [r0]
 8001d68:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 8001d6a:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001d6e:	ebaa 0208 	sub.w	r2, sl, r8
 8001d72:	4607      	mov	r7, r0
 8001d74:	4689      	mov	r9, r1
	if (max_size() - size() < __n)
 8001d76:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001d7a:	ea4f 04a2 	mov.w	r4, r2, asr #2
	if (max_size() - size() < __n)
 8001d7e:	d102      	bne.n	8001d86 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8001d80:	481f      	ldr	r0, [pc, #124]	@ (8001e00 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa0>)
 8001d82:	f017 fdff 	bl	8019984 <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 8001d86:	45c2      	cmp	sl, r8
 8001d88:	bf14      	ite	ne
 8001d8a:	4622      	movne	r2, r4
 8001d8c:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 8001d8e:	eba1 0508 	sub.w	r5, r1, r8
 8001d92:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8001d94:	d22f      	bcs.n	8001df6 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x96>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8001d96:	b384      	cbz	r4, 8001dfa <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8001d98:	429c      	cmp	r4, r3
 8001d9a:	bf28      	it	cs
 8001d9c:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8001d9e:	00a0      	lsls	r0, r4, #2
 8001da0:	f017 fd3b 	bl	801981a <_Znwj>
 8001da4:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8001da6:	f8db 3000 	ldr.w	r3, [fp]
      if (__count > 0)
 8001daa:	2d00      	cmp	r5, #0
 8001dac:	5173      	str	r3, [r6, r5]
 8001dae:	dd04      	ble.n	8001dba <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x5a>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8001db0:	462a      	mov	r2, r5
 8001db2:	4641      	mov	r1, r8
 8001db4:	4630      	mov	r0, r6
 8001db6:	f017 febd 	bl	8019b34 <memmove>
      ptrdiff_t __count = __last - __first;
 8001dba:	ebaa 0a09 	sub.w	sl, sl, r9
	      ++__new_finish;
 8001dbe:	3504      	adds	r5, #4
      if (__count > 0)
 8001dc0:	f1ba 0f00 	cmp.w	sl, #0
 8001dc4:	4435      	add	r5, r6
 8001dc6:	dd04      	ble.n	8001dd2 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x72>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8001dc8:	4652      	mov	r2, sl
 8001dca:	4649      	mov	r1, r9
 8001dcc:	4628      	mov	r0, r5
 8001dce:	f017 ffa9 	bl	8019d24 <memcpy>
      return __result + __count;
 8001dd2:	4455      	add	r5, sl
	if (__p)
 8001dd4:	f1b8 0f00 	cmp.w	r8, #0
 8001dd8:	d006      	beq.n	8001de8 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x88>
		    this->_M_impl._M_end_of_storage - __old_start);
 8001dda:	68b9      	ldr	r1, [r7, #8]
 8001ddc:	4640      	mov	r0, r8
 8001dde:	eba1 0108 	sub.w	r1, r1, r8
 8001de2:	1089      	asrs	r1, r1, #2
 8001de4:	f7fe fc40 	bl	8000668 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
      this->_M_impl._M_finish = __new_finish;
 8001de8:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8001dec:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8001df0:	60be      	str	r6, [r7, #8]
    }
 8001df2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8001df6:	461c      	mov	r4, r3
 8001df8:	e7d1      	b.n	8001d9e <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8001dfa:	4626      	mov	r6, r4
 8001dfc:	e7d3      	b.n	8001da6 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
 8001dfe:	bf00      	nop
 8001e00:	08019e3e 	.word	0x08019e3e

08001e04 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12AddInterfaceEhPS0_>:
void TemplateCommunicationProtocol<H>::AddInterface(uint8_t ID, H* interface) {
 8001e04:	b513      	push	{r0, r1, r4, lr}
 8001e06:	4604      	mov	r4, r0
 8001e08:	9201      	str	r2, [sp, #4]
	AddInterfaceID(ID);
 8001e0a:	f013 fa97 	bl	801533c <_ZN21CommunicationProtocol14AddInterfaceIDEh>
	AddInterfaceBuffer();
 8001e0e:	4620      	mov	r0, r4
 8001e10:	f013 fc2e 	bl	8015670 <_ZN21CommunicationProtocol18AddInterfaceBufferEv>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8001e14:	e9d4 130f 	ldrd	r1, r3, [r4, #60]	@ 0x3c
 8001e18:	4299      	cmp	r1, r3
 8001e1a:	d005      	beq.n	8001e28 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12AddInterfaceEhPS0_+0x24>
 8001e1c:	9b01      	ldr	r3, [sp, #4]
 8001e1e:	f841 3b04 	str.w	r3, [r1], #4
	    ++this->_M_impl._M_finish;
 8001e22:	63e1      	str	r1, [r4, #60]	@ 0x3c
}
 8001e24:	b002      	add	sp, #8
 8001e26:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), __x);
 8001e28:	aa01      	add	r2, sp, #4
 8001e2a:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8001e2e:	f7ff ff97 	bl	8001d60 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
 8001e32:	e7f7      	b.n	8001e24 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12AddInterfaceEhPS0_+0x20>

08001e34 <_GLOBAL__sub_I_hadc1>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
Registers registers;
 8001e38:	4c1f      	ldr	r4, [pc, #124]	@ (8001eb8 <_GLOBAL__sub_I_hadc1+0x84>)
}
 8001e3a:	b087      	sub	sp, #28
MasterSubscribers subscribers;
 8001e3c:	4d1f      	ldr	r5, [pc, #124]	@ (8001ebc <_GLOBAL__sub_I_hadc1+0x88>)
Registers registers;
 8001e3e:	4620      	mov	r0, r4
Communication communication;
 8001e40:	4e1f      	ldr	r6, [pc, #124]	@ (8001ec0 <_GLOBAL__sub_I_hadc1+0x8c>)
Registers registers;
 8001e42:	f015 f8f9 	bl	8017038 <_ZN9RegistersC1Ev>
UARTProtocol protocol_uart;
 8001e46:	481f      	ldr	r0, [pc, #124]	@ (8001ec4 <_GLOBAL__sub_I_hadc1+0x90>)
 8001e48:	f014 f892 	bl	8015f70 <_ZN12UARTProtocolC1Ev>
CANProtocol protocol_canfd;
 8001e4c:	481e      	ldr	r0, [pc, #120]	@ (8001ec8 <_GLOBAL__sub_I_hadc1+0x94>)
 8001e4e:	f013 fc73 	bl	8015738 <_ZN11CANProtocolC1Ev>
Services services;
 8001e52:	4f1e      	ldr	r7, [pc, #120]	@ (8001ecc <_GLOBAL__sub_I_hadc1+0x98>)
MasterSubscribers subscribers;
 8001e54:	4628      	mov	r0, r5
Publishers publishers;
 8001e56:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 8001ee0 <_GLOBAL__sub_I_hadc1+0xac>
MasterSubscribers subscribers;
 8001e5a:	f016 fa65 	bl	8018328 <_ZN17MasterSubscribersC1Ev>
Communication communication;
 8001e5e:	4630      	mov	r0, r6
 8001e60:	f00c fe36 	bl	800ead0 <_ZN13CommunicationC1Ev>
HardwareDelay hardware_delay(&htim4);
 8001e64:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 8001ee4 <_GLOBAL__sub_I_hadc1+0xb0>
Services services;
 8001e68:	4638      	mov	r0, r7
Sensors sensors;
 8001e6a:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8001ee8 <_GLOBAL__sub_I_hadc1+0xb4>
Services services;
 8001e6e:	f016 f82e 	bl	8017ece <_ZN8ServicesC1Ev>
Publishers publishers;
 8001e72:	4640      	mov	r0, r8
 8001e74:	f014 fc61 	bl	801673a <_ZN10PublishersC1Ev>
LEDS leds;
 8001e78:	f8df b070 	ldr.w	fp, [pc, #112]	@ 8001eec <_GLOBAL__sub_I_hadc1+0xb8>
HardwareDelay hardware_delay(&htim4);
 8001e7c:	4914      	ldr	r1, [pc, #80]	@ (8001ed0 <_GLOBAL__sub_I_hadc1+0x9c>)
 8001e7e:	4648      	mov	r0, r9
 8001e80:	f011 fb2f 	bl	80134e2 <_ZN13HardwareDelayC1EP17TIM_HandleTypeDef>
Sensors sensors;
 8001e84:	4650      	mov	r0, sl
 8001e86:	f015 fb91 	bl	80175ac <_ZN7SensorsC1Ev>
LEDS leds;
 8001e8a:	4658      	mov	r0, fp
 8001e8c:	f011 fc54 	bl	8013738 <_ZN4LEDSC1Ev>
MotionGenerator motion_generator;
 8001e90:	4810      	ldr	r0, [pc, #64]	@ (8001ed4 <_GLOBAL__sub_I_hadc1+0xa0>)
 8001e92:	f012 fc33 	bl	80146fc <_ZN15MotionGeneratorC1Ev>
PlatformSensors platform_sensors;
 8001e96:	4810      	ldr	r0, [pc, #64]	@ (8001ed8 <_GLOBAL__sub_I_hadc1+0xa4>)
 8001e98:	f00c fb32 	bl	800e500 <_ZN15PlatformSensorsC1Ev>
User user(&registers, &subscribers, &communication, &services, &publishers, &hardware_delay, &sensors, &leds);
 8001e9c:	4633      	mov	r3, r6
 8001e9e:	462a      	mov	r2, r5
 8001ea0:	4621      	mov	r1, r4
 8001ea2:	9700      	str	r7, [sp, #0]
 8001ea4:	480d      	ldr	r0, [pc, #52]	@ (8001edc <_GLOBAL__sub_I_hadc1+0xa8>)
 8001ea6:	e9cd ab03 	strd	sl, fp, [sp, #12]
 8001eaa:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8001eae:	f016 ff2f 	bl	8018d10 <_ZN4UserC1EP9RegistersP17MasterSubscribersP13CommunicationP8ServicesP10PublishersP13HardwareDelayP7SensorsP4LEDS>
}
 8001eb2:	b007      	add	sp, #28
 8001eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001eb8:	24001780 	.word	0x24001780
 8001ebc:	240016a0 	.word	0x240016a0
 8001ec0:	24001664 	.word	0x24001664
 8001ec4:	24001718 	.word	0x24001718
 8001ec8:	240016c4 	.word	0x240016c4
 8001ecc:	24000220 	.word	0x24000220
 8001ed0:	240022c0 	.word	0x240022c0
 8001ed4:	240000e0 	.word	0x240000e0
 8001ed8:	240000b8 	.word	0x240000b8
 8001edc:	24000098 	.word	0x24000098
 8001ee0:	24000208 	.word	0x24000208
 8001ee4:	240001ec 	.word	0x240001ec
 8001ee8:	24000180 	.word	0x24000180
 8001eec:	24000148 	.word	0x24000148

08001ef0 <_GLOBAL__sub_D_hadc1>:
 8001ef0:	b510      	push	{r4, lr}
      }
 8001ef2:	4832      	ldr	r0, [pc, #200]	@ (8001fbc <_GLOBAL__sub_D_hadc1+0xcc>)
 8001ef4:	f7ff fed0 	bl	8001c98 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8001ef8:	4831      	ldr	r0, [pc, #196]	@ (8001fc0 <_GLOBAL__sub_D_hadc1+0xd0>)
 8001efa:	f7ff fecd 	bl	8001c98 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
	_M_deallocate(_M_impl._M_start,
 8001efe:	4c31      	ldr	r4, [pc, #196]	@ (8001fc4 <_GLOBAL__sub_D_hadc1+0xd4>)
      }
 8001f00:	4831      	ldr	r0, [pc, #196]	@ (8001fc8 <_GLOBAL__sub_D_hadc1+0xd8>)
 8001f02:	f7ff fec9 	bl	8001c98 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
LEDS leds;
 8001f06:	4831      	ldr	r0, [pc, #196]	@ (8001fcc <_GLOBAL__sub_D_hadc1+0xdc>)
 8001f08:	f7ff fdb6 	bl	8001a78 <_ZN4LEDSD1Ev>
	_M_deallocate(_M_impl._M_start,
 8001f0c:	6d20      	ldr	r0, [r4, #80]	@ 0x50
	if (__p)
 8001f0e:	b118      	cbz	r0, 8001f18 <_GLOBAL__sub_D_hadc1+0x28>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001f10:	6da1      	ldr	r1, [r4, #88]	@ 0x58
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8001f12:	1a09      	subs	r1, r1, r0
 8001f14:	f017 fc5c 	bl	80197d0 <_ZdlPvj>
      }
 8001f18:	482d      	ldr	r0, [pc, #180]	@ (8001fd0 <_GLOBAL__sub_D_hadc1+0xe0>)
 8001f1a:	f7ff febd 	bl	8001c98 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
	__destroy(__first, __last);
 8001f1e:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8001f22:	f7ff fef4 	bl	8001d0e <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_>
	_M_deallocate(_M_impl._M_start,
 8001f26:	6920      	ldr	r0, [r4, #16]
	if (__p)
 8001f28:	b118      	cbz	r0, 8001f32 <_GLOBAL__sub_D_hadc1+0x42>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001f2a:	69a1      	ldr	r1, [r4, #24]
 8001f2c:	1a09      	subs	r1, r1, r0
 8001f2e:	f017 fc4f 	bl	80197d0 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8001f32:	4b28      	ldr	r3, [pc, #160]	@ (8001fd4 <_GLOBAL__sub_D_hadc1+0xe4>)
 8001f34:	6918      	ldr	r0, [r3, #16]
	if (__p)
 8001f36:	b118      	cbz	r0, 8001f40 <_GLOBAL__sub_D_hadc1+0x50>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001f38:	6999      	ldr	r1, [r3, #24]
 8001f3a:	1a09      	subs	r1, r1, r0
 8001f3c:	f017 fc48 	bl	80197d0 <_ZdlPvj>
	std::vector<PublishInterface> interfaces; 	// links interfaces to the publisher
	std::vector<Topic> topics;					// topics of the publisher
};

// Publishers class used to broadcast registers on the bus
class Publishers {
 8001f40:	4825      	ldr	r0, [pc, #148]	@ (8001fd8 <_GLOBAL__sub_D_hadc1+0xe8>)
 8001f42:	f7ff fe5f 	bl	8001c04 <_ZNSt6vectorI9PublisherSaIS0_EED1Ev>
#include <stm32h7xx_hal.h>

#include "Protocols/Communication/Core/TemplateCommunicationProtocol.hpp"

// CANProtocol class used to interface with every CANFD interface
class CANProtocol : public TemplateCommunicationProtocol<FDCAN_HandleTypeDef> {
 8001f46:	4c25      	ldr	r4, [pc, #148]	@ (8001fdc <_GLOBAL__sub_D_hadc1+0xec>)
Communication communication;
 8001f48:	4825      	ldr	r0, [pc, #148]	@ (8001fe0 <_GLOBAL__sub_D_hadc1+0xf0>)
 8001f4a:	f7ff fdbd 	bl	8001ac8 <_ZN13CommunicationD1Ev>
MasterSubscribers subscribers;
 8001f4e:	4825      	ldr	r0, [pc, #148]	@ (8001fe4 <_GLOBAL__sub_D_hadc1+0xf4>)
 8001f50:	f7ff fdd8 	bl	8001b04 <_ZN17MasterSubscribersD1Ev>
 8001f54:	4b24      	ldr	r3, [pc, #144]	@ (8001fe8 <_GLOBAL__sub_D_hadc1+0xf8>)
	_M_deallocate(_M_impl._M_start,
 8001f56:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8001f58:	6023      	str	r3, [r4, #0]
	if (__p)
 8001f5a:	b118      	cbz	r0, 8001f64 <_GLOBAL__sub_D_hadc1+0x74>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001f5c:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8001f5e:	1a09      	subs	r1, r1, r0
 8001f60:	f017 fc36 	bl	80197d0 <_ZdlPvj>
class TemplateCommunicationProtocol : public CommunicationProtocol {
 8001f64:	4b21      	ldr	r3, [pc, #132]	@ (8001fec <_GLOBAL__sub_D_hadc1+0xfc>)
	_M_deallocate(_M_impl._M_start,
 8001f66:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001f68:	6023      	str	r3, [r4, #0]
	if (__p)
 8001f6a:	b120      	cbz	r0, 8001f76 <_GLOBAL__sub_D_hadc1+0x86>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001f6c:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8001f6e:	1a09      	subs	r1, r1, r0
 8001f70:	1089      	asrs	r1, r1, #2
 8001f72:	f7fe fb79 	bl	8000668 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
#include "Protocols/Communication/Core/TemplateCommunicationProtocol.hpp"

#include "Definitions/CommunicationDefinition.h"

// UARTProtocol class used to interface with every UART interface
class UARTProtocol : public TemplateCommunicationProtocol<UART_HandleTypeDef> {
 8001f76:	4c1e      	ldr	r4, [pc, #120]	@ (8001ff0 <_GLOBAL__sub_D_hadc1+0x100>)
 8001f78:	4818      	ldr	r0, [pc, #96]	@ (8001fdc <_GLOBAL__sub_D_hadc1+0xec>)
 8001f7a:	f7ff fe73 	bl	8001c64 <_ZN21CommunicationProtocolD1Ev>
 8001f7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ff4 <_GLOBAL__sub_D_hadc1+0x104>)
 8001f80:	4620      	mov	r0, r4
 8001f82:	f840 3b5c 	str.w	r3, [r0], #92
      }
 8001f86:	f7fe fc89 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8001f8a:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8001f8e:	f7fe fc85 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8001f92:	f104 0044 	add.w	r0, r4, #68	@ 0x44
 8001f96:	f7fe fc81 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8001f9a:	4b17      	ldr	r3, [pc, #92]	@ (8001ff8 <_GLOBAL__sub_D_hadc1+0x108>)
	_M_deallocate(_M_impl._M_start,
 8001f9c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001f9e:	6023      	str	r3, [r4, #0]
	if (__p)
 8001fa0:	b120      	cbz	r0, 8001fac <_GLOBAL__sub_D_hadc1+0xbc>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001fa2:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8001fa4:	1a09      	subs	r1, r1, r0
 8001fa6:	1089      	asrs	r1, r1, #2
 8001fa8:	f7fe fb5e 	bl	8000668 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
 8001fac:	4810      	ldr	r0, [pc, #64]	@ (8001ff0 <_GLOBAL__sub_D_hadc1+0x100>)
 8001fae:	f7ff fe59 	bl	8001c64 <_ZN21CommunicationProtocolD1Ev>
Registers registers;
 8001fb2:	4812      	ldr	r0, [pc, #72]	@ (8001ffc <_GLOBAL__sub_D_hadc1+0x10c>)
 8001fb4:	f7ff fdcd 	bl	8001b52 <_ZN9RegistersD1Ev>
}
 8001fb8:	bd10      	pop	{r4, pc}
 8001fba:	bf00      	nop
 8001fbc:	24000130 	.word	0x24000130
 8001fc0:	24000110 	.word	0x24000110
 8001fc4:	24000180 	.word	0x24000180
 8001fc8:	24000104 	.word	0x24000104
 8001fcc:	24000148 	.word	0x24000148
 8001fd0:	2400019c 	.word	0x2400019c
 8001fd4:	240001ec 	.word	0x240001ec
 8001fd8:	24000214 	.word	0x24000214
 8001fdc:	240016c4 	.word	0x240016c4
 8001fe0:	24001664 	.word	0x24001664
 8001fe4:	240016a0 	.word	0x240016a0
 8001fe8:	0801a140 	.word	0x0801a140
 8001fec:	08019f4c 	.word	0x08019f4c
 8001ff0:	24001718 	.word	0x24001718
 8001ff4:	0801a17c 	.word	0x0801a17c
 8001ff8:	08019f30 	.word	0x08019f30
 8001ffc:	24001780 	.word	0x24001780

08002000 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002000:	b500      	push	{lr}
 8002002:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002004:	4b0a      	ldr	r3, [pc, #40]	@ (8002030 <HAL_MspInit+0x30>)
 8002006:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 800200a:	f042 0202 	orr.w	r2, r2, #2
 800200e:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8002012:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	9301      	str	r3, [sp, #4]
 800201c:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800201e:	2200      	movs	r2, #0
 8002020:	210f      	movs	r1, #15
 8002022:	f06f 0001 	mvn.w	r0, #1
 8002026:	f001 fe75 	bl	8003d14 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800202a:	b003      	add	sp, #12
 800202c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002030:	58024400 	.word	0x58024400

08002034 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002034:	b500      	push	{lr}
 8002036:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002038:	2300      	movs	r3, #0
 800203a:	9303      	str	r3, [sp, #12]
 800203c:	9304      	str	r3, [sp, #16]
 800203e:	9305      	str	r3, [sp, #20]
 8002040:	9306      	str	r3, [sp, #24]
 8002042:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 8002044:	6803      	ldr	r3, [r0, #0]
 8002046:	4a1c      	ldr	r2, [pc, #112]	@ (80020b8 <HAL_ADC_MspInit+0x84>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d005      	beq.n	8002058 <HAL_ADC_MspInit+0x24>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC3)
 800204c:	4a1b      	ldr	r2, [pc, #108]	@ (80020bc <HAL_ADC_MspInit+0x88>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d024      	beq.n	800209c <HAL_ADC_MspInit+0x68>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002052:	b009      	add	sp, #36	@ 0x24
 8002054:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002058:	4b19      	ldr	r3, [pc, #100]	@ (80020c0 <HAL_ADC_MspInit+0x8c>)
 800205a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 800205e:	f042 0220 	orr.w	r2, r2, #32
 8002062:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 8002066:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 800206a:	f002 0220 	and.w	r2, r2, #32
 800206e:	9200      	str	r2, [sp, #0]
 8002070:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002072:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002076:	f042 0201 	orr.w	r2, r2, #1
 800207a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800207e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	9301      	str	r3, [sp, #4]
 8002088:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800208a:	2310      	movs	r3, #16
 800208c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800208e:	2303      	movs	r3, #3
 8002090:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002092:	a903      	add	r1, sp, #12
 8002094:	480b      	ldr	r0, [pc, #44]	@ (80020c4 <HAL_ADC_MspInit+0x90>)
 8002096:	f003 ffb1 	bl	8005ffc <HAL_GPIO_Init>
 800209a:	e7da      	b.n	8002052 <HAL_ADC_MspInit+0x1e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800209c:	4b08      	ldr	r3, [pc, #32]	@ (80020c0 <HAL_ADC_MspInit+0x8c>)
 800209e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80020a2:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80020a6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80020aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020b2:	9302      	str	r3, [sp, #8]
 80020b4:	9b02      	ldr	r3, [sp, #8]
}
 80020b6:	e7cc      	b.n	8002052 <HAL_ADC_MspInit+0x1e>
 80020b8:	40022000 	.word	0x40022000
 80020bc:	58026000 	.word	0x58026000
 80020c0:	58024400 	.word	0x58024400
 80020c4:	58020000 	.word	0x58020000

080020c8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80020c8:	b500      	push	{lr}
 80020ca:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020cc:	2300      	movs	r3, #0
 80020ce:	9305      	str	r3, [sp, #20]
 80020d0:	9306      	str	r3, [sp, #24]
 80020d2:	9307      	str	r3, [sp, #28]
 80020d4:	9308      	str	r3, [sp, #32]
 80020d6:	9309      	str	r3, [sp, #36]	@ 0x24
  if(hfdcan->Instance==FDCAN1)
 80020d8:	6803      	ldr	r3, [r0, #0]
 80020da:	4a3b      	ldr	r2, [pc, #236]	@ (80021c8 <HAL_FDCAN_MspInit+0x100>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d005      	beq.n	80020ec <HAL_FDCAN_MspInit+0x24>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
  else if(hfdcan->Instance==FDCAN2)
 80020e0:	4a3a      	ldr	r2, [pc, #232]	@ (80021cc <HAL_FDCAN_MspInit+0x104>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d039      	beq.n	800215a <HAL_FDCAN_MspInit+0x92>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 80020e6:	b00b      	add	sp, #44	@ 0x2c
 80020e8:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80020ec:	4a38      	ldr	r2, [pc, #224]	@ (80021d0 <HAL_FDCAN_MspInit+0x108>)
 80020ee:	6813      	ldr	r3, [r2, #0]
 80020f0:	3301      	adds	r3, #1
 80020f2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d022      	beq.n	800213e <HAL_FDCAN_MspInit+0x76>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f8:	4b36      	ldr	r3, [pc, #216]	@ (80021d4 <HAL_FDCAN_MspInit+0x10c>)
 80020fa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80020fe:	f042 0201 	orr.w	r2, r2, #1
 8002102:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002106:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	9302      	str	r3, [sp, #8]
 8002110:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002112:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002116:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002118:	2302      	movs	r3, #2
 800211a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800211c:	2303      	movs	r3, #3
 800211e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002120:	2309      	movs	r3, #9
 8002122:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002124:	a905      	add	r1, sp, #20
 8002126:	482c      	ldr	r0, [pc, #176]	@ (80021d8 <HAL_FDCAN_MspInit+0x110>)
 8002128:	f003 ff68 	bl	8005ffc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 800212c:	2200      	movs	r2, #0
 800212e:	2105      	movs	r1, #5
 8002130:	2013      	movs	r0, #19
 8002132:	f001 fdef 	bl	8003d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002136:	2013      	movs	r0, #19
 8002138:	f001 fdfc 	bl	8003d34 <HAL_NVIC_EnableIRQ>
 800213c:	e7d3      	b.n	80020e6 <HAL_FDCAN_MspInit+0x1e>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800213e:	4b25      	ldr	r3, [pc, #148]	@ (80021d4 <HAL_FDCAN_MspInit+0x10c>)
 8002140:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 8002144:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002148:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
 800214c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002150:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002154:	9301      	str	r3, [sp, #4]
 8002156:	9b01      	ldr	r3, [sp, #4]
 8002158:	e7ce      	b.n	80020f8 <HAL_FDCAN_MspInit+0x30>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800215a:	4a1d      	ldr	r2, [pc, #116]	@ (80021d0 <HAL_FDCAN_MspInit+0x108>)
 800215c:	6813      	ldr	r3, [r2, #0]
 800215e:	3301      	adds	r3, #1
 8002160:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002162:	2b01      	cmp	r3, #1
 8002164:	d021      	beq.n	80021aa <HAL_FDCAN_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002166:	4b1b      	ldr	r3, [pc, #108]	@ (80021d4 <HAL_FDCAN_MspInit+0x10c>)
 8002168:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800216c:	f042 0202 	orr.w	r2, r2, #2
 8002170:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	9304      	str	r3, [sp, #16]
 800217e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002180:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002184:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002186:	2302      	movs	r3, #2
 8002188:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800218a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800218c:	2309      	movs	r3, #9
 800218e:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002190:	a905      	add	r1, sp, #20
 8002192:	4812      	ldr	r0, [pc, #72]	@ (80021dc <HAL_FDCAN_MspInit+0x114>)
 8002194:	f003 ff32 	bl	8005ffc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 5, 0);
 8002198:	2200      	movs	r2, #0
 800219a:	2105      	movs	r1, #5
 800219c:	2014      	movs	r0, #20
 800219e:	f001 fdb9 	bl	8003d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 80021a2:	2014      	movs	r0, #20
 80021a4:	f001 fdc6 	bl	8003d34 <HAL_NVIC_EnableIRQ>
}
 80021a8:	e79d      	b.n	80020e6 <HAL_FDCAN_MspInit+0x1e>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80021aa:	4b0a      	ldr	r3, [pc, #40]	@ (80021d4 <HAL_FDCAN_MspInit+0x10c>)
 80021ac:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 80021b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021b4:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
 80021b8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80021bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021c0:	9303      	str	r3, [sp, #12]
 80021c2:	9b03      	ldr	r3, [sp, #12]
 80021c4:	e7cf      	b.n	8002166 <HAL_FDCAN_MspInit+0x9e>
 80021c6:	bf00      	nop
 80021c8:	4000a000 	.word	0x4000a000
 80021cc:	4000a400 	.word	0x4000a400
 80021d0:	24002764 	.word	0x24002764
 80021d4:	58024400 	.word	0x58024400
 80021d8:	58020000 	.word	0x58020000
 80021dc:	58020400 	.word	0x58020400

080021e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021e0:	b570      	push	{r4, r5, r6, lr}
 80021e2:	b0b8      	sub	sp, #224	@ 0xe0
 80021e4:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e6:	2100      	movs	r1, #0
 80021e8:	9133      	str	r1, [sp, #204]	@ 0xcc
 80021ea:	9134      	str	r1, [sp, #208]	@ 0xd0
 80021ec:	9135      	str	r1, [sp, #212]	@ 0xd4
 80021ee:	9136      	str	r1, [sp, #216]	@ 0xd8
 80021f0:	9137      	str	r1, [sp, #220]	@ 0xdc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021f2:	22bc      	movs	r2, #188	@ 0xbc
 80021f4:	a804      	add	r0, sp, #16
 80021f6:	f017 fcb7 	bl	8019b68 <memset>
  if(hi2c->Instance==I2C1)
 80021fa:	6823      	ldr	r3, [r4, #0]
 80021fc:	4a52      	ldr	r2, [pc, #328]	@ (8002348 <HAL_I2C_MspInit+0x168>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d004      	beq.n	800220c <HAL_I2C_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C4)
 8002202:	4a52      	ldr	r2, [pc, #328]	@ (800234c <HAL_I2C_MspInit+0x16c>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d06c      	beq.n	80022e2 <HAL_I2C_MspInit+0x102>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8002208:	b038      	add	sp, #224	@ 0xe0
 800220a:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800220c:	2308      	movs	r3, #8
 800220e:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002210:	a804      	add	r0, sp, #16
 8002212:	f005 fafd 	bl	8007810 <HAL_RCCEx_PeriphCLKConfig>
 8002216:	2800      	cmp	r0, #0
 8002218:	d15a      	bne.n	80022d0 <HAL_I2C_MspInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800221a:	4e4d      	ldr	r6, [pc, #308]	@ (8002350 <HAL_I2C_MspInit+0x170>)
 800221c:	f8d6 30e0 	ldr.w	r3, [r6, #224]	@ 0xe0
 8002220:	f043 0302 	orr.w	r3, r3, #2
 8002224:	f8c6 30e0 	str.w	r3, [r6, #224]	@ 0xe0
 8002228:	f8d6 30e0 	ldr.w	r3, [r6, #224]	@ 0xe0
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002234:	23c0      	movs	r3, #192	@ 0xc0
 8002236:	9333      	str	r3, [sp, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002238:	2312      	movs	r3, #18
 800223a:	9334      	str	r3, [sp, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2500      	movs	r5, #0
 800223e:	9535      	str	r5, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002240:	9536      	str	r5, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002242:	2304      	movs	r3, #4
 8002244:	9337      	str	r3, [sp, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002246:	a933      	add	r1, sp, #204	@ 0xcc
 8002248:	4842      	ldr	r0, [pc, #264]	@ (8002354 <HAL_I2C_MspInit+0x174>)
 800224a:	f003 fed7 	bl	8005ffc <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800224e:	f8d6 30e8 	ldr.w	r3, [r6, #232]	@ 0xe8
 8002252:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002256:	f8c6 30e8 	str.w	r3, [r6, #232]	@ 0xe8
 800225a:	f8d6 30e8 	ldr.w	r3, [r6, #232]	@ 0xe8
 800225e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002262:	9301      	str	r3, [sp, #4]
 8002264:	9b01      	ldr	r3, [sp, #4]
    hdma_i2c1_tx.Instance = DMA2_Stream0;
 8002266:	483c      	ldr	r0, [pc, #240]	@ (8002358 <HAL_I2C_MspInit+0x178>)
 8002268:	4b3c      	ldr	r3, [pc, #240]	@ (800235c <HAL_I2C_MspInit+0x17c>)
 800226a:	6003      	str	r3, [r0, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 800226c:	2322      	movs	r3, #34	@ 0x22
 800226e:	6043      	str	r3, [r0, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002270:	2340      	movs	r3, #64	@ 0x40
 8002272:	6083      	str	r3, [r0, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002274:	60c5      	str	r5, [r0, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002276:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800227a:	6103      	str	r3, [r0, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800227c:	6145      	str	r5, [r0, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800227e:	6185      	str	r5, [r0, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002280:	61c5      	str	r5, [r0, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002282:	6205      	str	r5, [r0, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002284:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002286:	f001 ff6b 	bl	8004160 <HAL_DMA_Init>
 800228a:	bb20      	cbnz	r0, 80022d6 <HAL_I2C_MspInit+0xf6>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800228c:	4b32      	ldr	r3, [pc, #200]	@ (8002358 <HAL_I2C_MspInit+0x178>)
 800228e:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002290:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_i2c1_rx.Instance = DMA2_Stream1;
 8002292:	4833      	ldr	r0, [pc, #204]	@ (8002360 <HAL_I2C_MspInit+0x180>)
 8002294:	4b33      	ldr	r3, [pc, #204]	@ (8002364 <HAL_I2C_MspInit+0x184>)
 8002296:	6003      	str	r3, [r0, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8002298:	2321      	movs	r3, #33	@ 0x21
 800229a:	6043      	str	r3, [r0, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800229c:	2300      	movs	r3, #0
 800229e:	6083      	str	r3, [r0, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022a0:	60c3      	str	r3, [r0, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022a6:	6102      	str	r2, [r0, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022a8:	6143      	str	r3, [r0, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022aa:	6183      	str	r3, [r0, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80022ac:	61c3      	str	r3, [r0, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80022ae:	6203      	str	r3, [r0, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022b0:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80022b2:	f001 ff55 	bl	8004160 <HAL_DMA_Init>
 80022b6:	b988      	cbnz	r0, 80022dc <HAL_I2C_MspInit+0xfc>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80022b8:	4b29      	ldr	r3, [pc, #164]	@ (8002360 <HAL_I2C_MspInit+0x180>)
 80022ba:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80022bc:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80022be:	2200      	movs	r2, #0
 80022c0:	2105      	movs	r1, #5
 80022c2:	201f      	movs	r0, #31
 80022c4:	f001 fd26 	bl	8003d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80022c8:	201f      	movs	r0, #31
 80022ca:	f001 fd33 	bl	8003d34 <HAL_NVIC_EnableIRQ>
 80022ce:	e79b      	b.n	8002208 <HAL_I2C_MspInit+0x28>
      Error_Handler();
 80022d0:	f7fe fae2 	bl	8000898 <Error_Handler>
 80022d4:	e7a1      	b.n	800221a <HAL_I2C_MspInit+0x3a>
      Error_Handler();
 80022d6:	f7fe fadf 	bl	8000898 <Error_Handler>
 80022da:	e7d7      	b.n	800228c <HAL_I2C_MspInit+0xac>
      Error_Handler();
 80022dc:	f7fe fadc 	bl	8000898 <Error_Handler>
 80022e0:	e7ea      	b.n	80022b8 <HAL_I2C_MspInit+0xd8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80022e2:	2310      	movs	r3, #16
 80022e4:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022e6:	eb0d 0003 	add.w	r0, sp, r3
 80022ea:	f005 fa91 	bl	8007810 <HAL_RCCEx_PeriphCLKConfig>
 80022ee:	bb38      	cbnz	r0, 8002340 <HAL_I2C_MspInit+0x160>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f0:	4c17      	ldr	r4, [pc, #92]	@ (8002350 <HAL_I2C_MspInit+0x170>)
 80022f2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80022f6:	f043 0302 	orr.w	r3, r3, #2
 80022fa:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80022fe:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	9302      	str	r3, [sp, #8]
 8002308:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800230a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800230e:	9333      	str	r3, [sp, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002310:	2312      	movs	r3, #18
 8002312:	9334      	str	r3, [sp, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002314:	2300      	movs	r3, #0
 8002316:	9335      	str	r3, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002318:	9336      	str	r3, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 800231a:	2306      	movs	r3, #6
 800231c:	9337      	str	r3, [sp, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800231e:	a933      	add	r1, sp, #204	@ 0xcc
 8002320:	480c      	ldr	r0, [pc, #48]	@ (8002354 <HAL_I2C_MspInit+0x174>)
 8002322:	f003 fe6b 	bl	8005ffc <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8002326:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
 800232a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800232e:	f8c4 30f4 	str.w	r3, [r4, #244]	@ 0xf4
 8002332:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
 8002336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800233a:	9303      	str	r3, [sp, #12]
 800233c:	9b03      	ldr	r3, [sp, #12]
}
 800233e:	e763      	b.n	8002208 <HAL_I2C_MspInit+0x28>
      Error_Handler();
 8002340:	f7fe faaa 	bl	8000898 <Error_Handler>
 8002344:	e7d4      	b.n	80022f0 <HAL_I2C_MspInit+0x110>
 8002346:	bf00      	nop
 8002348:	40005400 	.word	0x40005400
 800234c:	58001c00 	.word	0x58001c00
 8002350:	58024400 	.word	0x58024400
 8002354:	58020400 	.word	0x58020400
 8002358:	2400244c 	.word	0x2400244c
 800235c:	40020410 	.word	0x40020410
 8002360:	240023d4 	.word	0x240023d4
 8002364:	40020428 	.word	0x40020428

08002368 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002368:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800236c:	b0b9      	sub	sp, #228	@ 0xe4
 800236e:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002370:	2100      	movs	r1, #0
 8002372:	9133      	str	r1, [sp, #204]	@ 0xcc
 8002374:	9134      	str	r1, [sp, #208]	@ 0xd0
 8002376:	9135      	str	r1, [sp, #212]	@ 0xd4
 8002378:	9136      	str	r1, [sp, #216]	@ 0xd8
 800237a:	9137      	str	r1, [sp, #220]	@ 0xdc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800237c:	22bc      	movs	r2, #188	@ 0xbc
 800237e:	a804      	add	r0, sp, #16
 8002380:	f017 fbf2 	bl	8019b68 <memset>
  if(hsd->Instance==SDMMC1)
 8002384:	6822      	ldr	r2, [r4, #0]
 8002386:	4b34      	ldr	r3, [pc, #208]	@ (8002458 <HAL_SD_MspInit+0xf0>)
 8002388:	429a      	cmp	r2, r3
 800238a:	d002      	beq.n	8002392 <HAL_SD_MspInit+0x2a>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800238c:	b039      	add	sp, #228	@ 0xe4
 800238e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8002392:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002396:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002398:	a804      	add	r0, sp, #16
 800239a:	f005 fa39 	bl	8007810 <HAL_RCCEx_PeriphCLKConfig>
 800239e:	2800      	cmp	r0, #0
 80023a0:	d157      	bne.n	8002452 <HAL_SD_MspInit+0xea>
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80023a2:	4b2e      	ldr	r3, [pc, #184]	@ (800245c <HAL_SD_MspInit+0xf4>)
 80023a4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80023a8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80023ac:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 80023b0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80023b4:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 80023b8:	9201      	str	r2, [sp, #4]
 80023ba:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023bc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80023c0:	f042 0204 	orr.w	r2, r2, #4
 80023c4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80023c8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80023cc:	f002 0204 	and.w	r2, r2, #4
 80023d0:	9202      	str	r2, [sp, #8]
 80023d2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023d4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80023d8:	f042 0208 	orr.w	r2, r2, #8
 80023dc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80023e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023e4:	f003 0308 	and.w	r3, r3, #8
 80023e8:	9303      	str	r3, [sp, #12]
 80023ea:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80023ec:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80023f0:	9333      	str	r3, [sp, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f2:	2602      	movs	r6, #2
 80023f4:	9634      	str	r6, [sp, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023f6:	f04f 0801 	mov.w	r8, #1
 80023fa:	f8cd 80d4 	str.w	r8, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023fe:	2503      	movs	r5, #3
 8002400:	9536      	str	r5, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002402:	240c      	movs	r4, #12
 8002404:	9437      	str	r4, [sp, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002406:	f8df 905c 	ldr.w	r9, [pc, #92]	@ 8002464 <HAL_SD_MspInit+0xfc>
 800240a:	a933      	add	r1, sp, #204	@ 0xcc
 800240c:	4648      	mov	r0, r9
 800240e:	f003 fdf5 	bl	8005ffc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002412:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002416:	9333      	str	r3, [sp, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002418:	9634      	str	r6, [sp, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241a:	2700      	movs	r7, #0
 800241c:	9735      	str	r7, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800241e:	9536      	str	r5, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002420:	9437      	str	r4, [sp, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002422:	a933      	add	r1, sp, #204	@ 0xcc
 8002424:	4648      	mov	r0, r9
 8002426:	f003 fde9 	bl	8005ffc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800242a:	2304      	movs	r3, #4
 800242c:	9333      	str	r3, [sp, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242e:	9634      	str	r6, [sp, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002430:	f8cd 80d4 	str.w	r8, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002434:	9536      	str	r5, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002436:	9437      	str	r4, [sp, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002438:	a933      	add	r1, sp, #204	@ 0xcc
 800243a:	4809      	ldr	r0, [pc, #36]	@ (8002460 <HAL_SD_MspInit+0xf8>)
 800243c:	f003 fdde 	bl	8005ffc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8002440:	463a      	mov	r2, r7
 8002442:	2105      	movs	r1, #5
 8002444:	2031      	movs	r0, #49	@ 0x31
 8002446:	f001 fc65 	bl	8003d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800244a:	2031      	movs	r0, #49	@ 0x31
 800244c:	f001 fc72 	bl	8003d34 <HAL_NVIC_EnableIRQ>
}
 8002450:	e79c      	b.n	800238c <HAL_SD_MspInit+0x24>
      Error_Handler();
 8002452:	f7fe fa21 	bl	8000898 <Error_Handler>
 8002456:	e7a4      	b.n	80023a2 <HAL_SD_MspInit+0x3a>
 8002458:	52007000 	.word	0x52007000
 800245c:	58024400 	.word	0x58024400
 8002460:	58020c00 	.word	0x58020c00
 8002464:	58020800 	.word	0x58020800

08002468 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002468:	b500      	push	{lr}
 800246a:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM3)
 800246c:	6803      	ldr	r3, [r0, #0]
 800246e:	4a16      	ldr	r2, [pc, #88]	@ (80024c8 <HAL_TIM_Base_MspInit+0x60>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d005      	beq.n	8002480 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8002474:	4a15      	ldr	r2, [pc, #84]	@ (80024cc <HAL_TIM_Base_MspInit+0x64>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d010      	beq.n	800249c <HAL_TIM_Base_MspInit+0x34>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800247a:	b003      	add	sp, #12
 800247c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002480:	4b13      	ldr	r3, [pc, #76]	@ (80024d0 <HAL_TIM_Base_MspInit+0x68>)
 8002482:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002486:	f042 0202 	orr.w	r2, r2, #2
 800248a:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 800248e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	9b00      	ldr	r3, [sp, #0]
 800249a:	e7ee      	b.n	800247a <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800249c:	4b0c      	ldr	r3, [pc, #48]	@ (80024d0 <HAL_TIM_Base_MspInit+0x68>)
 800249e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80024a2:	f042 0204 	orr.w	r2, r2, #4
 80024a6:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 80024aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80024ae:	f003 0304 	and.w	r3, r3, #4
 80024b2:	9301      	str	r3, [sp, #4]
 80024b4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80024b6:	2200      	movs	r2, #0
 80024b8:	2105      	movs	r1, #5
 80024ba:	201e      	movs	r0, #30
 80024bc:	f001 fc2a 	bl	8003d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80024c0:	201e      	movs	r0, #30
 80024c2:	f001 fc37 	bl	8003d34 <HAL_NVIC_EnableIRQ>
}
 80024c6:	e7d8      	b.n	800247a <HAL_TIM_Base_MspInit+0x12>
 80024c8:	40000400 	.word	0x40000400
 80024cc:	40000800 	.word	0x40000800
 80024d0:	58024400 	.word	0x58024400

080024d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024d4:	b510      	push	{r4, lr}
 80024d6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d8:	2300      	movs	r3, #0
 80024da:	9303      	str	r3, [sp, #12]
 80024dc:	9304      	str	r3, [sp, #16]
 80024de:	9305      	str	r3, [sp, #20]
 80024e0:	9306      	str	r3, [sp, #24]
 80024e2:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM3)
 80024e4:	6802      	ldr	r2, [r0, #0]
 80024e6:	4b19      	ldr	r3, [pc, #100]	@ (800254c <HAL_TIM_MspPostInit+0x78>)
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d001      	beq.n	80024f0 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80024ec:	b008      	add	sp, #32
 80024ee:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f0:	4b17      	ldr	r3, [pc, #92]	@ (8002550 <HAL_TIM_MspPostInit+0x7c>)
 80024f2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80024f6:	f042 0201 	orr.w	r2, r2, #1
 80024fa:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80024fe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002502:	f002 0201 	and.w	r2, r2, #1
 8002506:	9201      	str	r2, [sp, #4]
 8002508:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800250a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800250e:	f042 0202 	orr.w	r2, r2, #2
 8002512:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	9302      	str	r3, [sp, #8]
 8002520:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin;
 8002522:	23c0      	movs	r3, #192	@ 0xc0
 8002524:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002526:	2402      	movs	r4, #2
 8002528:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800252a:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800252c:	a903      	add	r1, sp, #12
 800252e:	4809      	ldr	r0, [pc, #36]	@ (8002554 <HAL_TIM_MspPostInit+0x80>)
 8002530:	f003 fd64 	bl	8005ffc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LED_B_Pin;
 8002534:	2301      	movs	r3, #1
 8002536:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002538:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253a:	2300      	movs	r3, #0
 800253c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002540:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 8002542:	a903      	add	r1, sp, #12
 8002544:	4804      	ldr	r0, [pc, #16]	@ (8002558 <HAL_TIM_MspPostInit+0x84>)
 8002546:	f003 fd59 	bl	8005ffc <HAL_GPIO_Init>
}
 800254a:	e7cf      	b.n	80024ec <HAL_TIM_MspPostInit+0x18>
 800254c:	40000400 	.word	0x40000400
 8002550:	58024400 	.word	0x58024400
 8002554:	58020000 	.word	0x58020000
 8002558:	58020400 	.word	0x58020400

0800255c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800255c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255e:	b0c5      	sub	sp, #276	@ 0x114
 8002560:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002562:	2100      	movs	r1, #0
 8002564:	913f      	str	r1, [sp, #252]	@ 0xfc
 8002566:	9140      	str	r1, [sp, #256]	@ 0x100
 8002568:	9141      	str	r1, [sp, #260]	@ 0x104
 800256a:	9142      	str	r1, [sp, #264]	@ 0x108
 800256c:	9143      	str	r1, [sp, #268]	@ 0x10c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800256e:	22bc      	movs	r2, #188	@ 0xbc
 8002570:	a810      	add	r0, sp, #64	@ 0x40
 8002572:	f017 faf9 	bl	8019b68 <memset>
  if(huart->Instance==UART4)
 8002576:	6823      	ldr	r3, [r4, #0]
 8002578:	4a7b      	ldr	r2, [pc, #492]	@ (8002768 <HAL_UART_MspInit+0x20c>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d019      	beq.n	80025b2 <HAL_UART_MspInit+0x56>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(huart->Instance==UART7)
 800257e:	4a7b      	ldr	r2, [pc, #492]	@ (800276c <HAL_UART_MspInit+0x210>)
 8002580:	4293      	cmp	r3, r2
 8002582:	f000 8082 	beq.w	800268a <HAL_UART_MspInit+0x12e>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
  else if(huart->Instance==UART8)
 8002586:	4a7a      	ldr	r2, [pc, #488]	@ (8002770 <HAL_UART_MspInit+0x214>)
 8002588:	4293      	cmp	r3, r2
 800258a:	f000 8111 	beq.w	80027b0 <HAL_UART_MspInit+0x254>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
  else if(huart->Instance==USART1)
 800258e:	4a79      	ldr	r2, [pc, #484]	@ (8002774 <HAL_UART_MspInit+0x218>)
 8002590:	4293      	cmp	r3, r2
 8002592:	f000 817a 	beq.w	800288a <HAL_UART_MspInit+0x32e>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8002596:	4a78      	ldr	r2, [pc, #480]	@ (8002778 <HAL_UART_MspInit+0x21c>)
 8002598:	4293      	cmp	r3, r2
 800259a:	f000 81e4 	beq.w	8002966 <HAL_UART_MspInit+0x40a>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 800259e:	4a77      	ldr	r2, [pc, #476]	@ (800277c <HAL_UART_MspInit+0x220>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	f000 826b 	beq.w	8002a7c <HAL_UART_MspInit+0x520>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 80025a6:	4a76      	ldr	r2, [pc, #472]	@ (8002780 <HAL_UART_MspInit+0x224>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	f000 82ec 	beq.w	8002b86 <HAL_UART_MspInit+0x62a>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80025ae:	b045      	add	sp, #276	@ 0x114
 80025b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80025b2:	2302      	movs	r3, #2
 80025b4:	9310      	str	r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025b6:	a810      	add	r0, sp, #64	@ 0x40
 80025b8:	f005 f92a 	bl	8007810 <HAL_RCCEx_PeriphCLKConfig>
 80025bc:	2800      	cmp	r0, #0
 80025be:	d15b      	bne.n	8002678 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_UART4_CLK_ENABLE();
 80025c0:	4b70      	ldr	r3, [pc, #448]	@ (8002784 <HAL_UART_MspInit+0x228>)
 80025c2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80025c6:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80025ca:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 80025ce:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80025d2:	f402 2200 	and.w	r2, r2, #524288	@ 0x80000
 80025d6:	9201      	str	r2, [sp, #4]
 80025d8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025da:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80025de:	f042 0208 	orr.w	r2, r2, #8
 80025e2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80025e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025ea:	f003 0308 	and.w	r3, r3, #8
 80025ee:	9302      	str	r3, [sp, #8]
 80025f0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = RX4_GNSS_Pin|TX4_GNSS_Pin;
 80025f2:	2303      	movs	r3, #3
 80025f4:	933f      	str	r3, [sp, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f6:	2302      	movs	r3, #2
 80025f8:	9340      	str	r3, [sp, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fa:	2500      	movs	r5, #0
 80025fc:	9541      	str	r5, [sp, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fe:	9542      	str	r5, [sp, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002600:	2308      	movs	r3, #8
 8002602:	9343      	str	r3, [sp, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002604:	a93f      	add	r1, sp, #252	@ 0xfc
 8002606:	4860      	ldr	r0, [pc, #384]	@ (8002788 <HAL_UART_MspInit+0x22c>)
 8002608:	f003 fcf8 	bl	8005ffc <HAL_GPIO_Init>
    hdma_uart4_tx.Instance = DMA2_Stream2;
 800260c:	485f      	ldr	r0, [pc, #380]	@ (800278c <HAL_UART_MspInit+0x230>)
 800260e:	4b60      	ldr	r3, [pc, #384]	@ (8002790 <HAL_UART_MspInit+0x234>)
 8002610:	6003      	str	r3, [r0, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8002612:	2340      	movs	r3, #64	@ 0x40
 8002614:	6043      	str	r3, [r0, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002616:	6083      	str	r3, [r0, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002618:	60c5      	str	r5, [r0, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800261a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800261e:	6103      	str	r3, [r0, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002620:	6145      	str	r5, [r0, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002622:	6185      	str	r5, [r0, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8002624:	61c5      	str	r5, [r0, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002626:	6205      	str	r5, [r0, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002628:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800262a:	f001 fd99 	bl	8004160 <HAL_DMA_Init>
 800262e:	bb30      	cbnz	r0, 800267e <HAL_UART_MspInit+0x122>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8002630:	4b56      	ldr	r3, [pc, #344]	@ (800278c <HAL_UART_MspInit+0x230>)
 8002632:	67a3      	str	r3, [r4, #120]	@ 0x78
 8002634:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_uart4_rx.Instance = DMA2_Stream3;
 8002636:	4857      	ldr	r0, [pc, #348]	@ (8002794 <HAL_UART_MspInit+0x238>)
 8002638:	4b57      	ldr	r3, [pc, #348]	@ (8002798 <HAL_UART_MspInit+0x23c>)
 800263a:	6003      	str	r3, [r0, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 800263c:	233f      	movs	r3, #63	@ 0x3f
 800263e:	6043      	str	r3, [r0, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002640:	2300      	movs	r3, #0
 8002642:	6083      	str	r3, [r0, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002644:	60c3      	str	r3, [r0, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002646:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800264a:	6102      	str	r2, [r0, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800264c:	6143      	str	r3, [r0, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800264e:	6183      	str	r3, [r0, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8002650:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002654:	61c2      	str	r2, [r0, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002656:	6203      	str	r3, [r0, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002658:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800265a:	f001 fd81 	bl	8004160 <HAL_DMA_Init>
 800265e:	b988      	cbnz	r0, 8002684 <HAL_UART_MspInit+0x128>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8002660:	4b4c      	ldr	r3, [pc, #304]	@ (8002794 <HAL_UART_MspInit+0x238>)
 8002662:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8002664:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8002666:	2200      	movs	r2, #0
 8002668:	2105      	movs	r1, #5
 800266a:	2034      	movs	r0, #52	@ 0x34
 800266c:	f001 fb52 	bl	8003d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002670:	2034      	movs	r0, #52	@ 0x34
 8002672:	f001 fb5f 	bl	8003d34 <HAL_NVIC_EnableIRQ>
 8002676:	e79a      	b.n	80025ae <HAL_UART_MspInit+0x52>
      Error_Handler();
 8002678:	f7fe f90e 	bl	8000898 <Error_Handler>
 800267c:	e7a0      	b.n	80025c0 <HAL_UART_MspInit+0x64>
      Error_Handler();
 800267e:	f7fe f90b 	bl	8000898 <Error_Handler>
 8002682:	e7d5      	b.n	8002630 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8002684:	f7fe f908 	bl	8000898 <Error_Handler>
 8002688:	e7ea      	b.n	8002660 <HAL_UART_MspInit+0x104>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 800268a:	2302      	movs	r3, #2
 800268c:	9310      	str	r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800268e:	a810      	add	r0, sp, #64	@ 0x40
 8002690:	f005 f8be 	bl	8007810 <HAL_RCCEx_PeriphCLKConfig>
 8002694:	2800      	cmp	r0, #0
 8002696:	d15d      	bne.n	8002754 <HAL_UART_MspInit+0x1f8>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002698:	4b3a      	ldr	r3, [pc, #232]	@ (8002784 <HAL_UART_MspInit+0x228>)
 800269a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800269e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80026a2:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 80026a6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80026aa:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80026ae:	9203      	str	r2, [sp, #12]
 80026b0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80026b2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80026b6:	f042 0210 	orr.w	r2, r2, #16
 80026ba:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80026be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026c2:	f003 0310 	and.w	r3, r3, #16
 80026c6:	9304      	str	r3, [sp, #16]
 80026c8:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = RX7_4G_Pin|TX7_4G_Pin|RTS7_4G_Pin|CTS7_4G_Pin;
 80026ca:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 80026ce:	933f      	str	r3, [sp, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d0:	2302      	movs	r3, #2
 80026d2:	9340      	str	r3, [sp, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d4:	2500      	movs	r5, #0
 80026d6:	9541      	str	r5, [sp, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d8:	9542      	str	r5, [sp, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80026da:	2307      	movs	r3, #7
 80026dc:	9343      	str	r3, [sp, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026de:	a93f      	add	r1, sp, #252	@ 0xfc
 80026e0:	482e      	ldr	r0, [pc, #184]	@ (800279c <HAL_UART_MspInit+0x240>)
 80026e2:	f003 fc8b 	bl	8005ffc <HAL_GPIO_Init>
    hdma_uart7_tx.Instance = DMA2_Stream4;
 80026e6:	482e      	ldr	r0, [pc, #184]	@ (80027a0 <HAL_UART_MspInit+0x244>)
 80026e8:	4b2e      	ldr	r3, [pc, #184]	@ (80027a4 <HAL_UART_MspInit+0x248>)
 80026ea:	6003      	str	r3, [r0, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 80026ec:	2350      	movs	r3, #80	@ 0x50
 80026ee:	6043      	str	r3, [r0, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026f0:	2340      	movs	r3, #64	@ 0x40
 80026f2:	6083      	str	r3, [r0, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026f4:	60c5      	str	r5, [r0, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80026fa:	6103      	str	r3, [r0, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026fc:	6145      	str	r5, [r0, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026fe:	6185      	str	r5, [r0, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 8002700:	61c5      	str	r5, [r0, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002702:	6205      	str	r5, [r0, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002704:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 8002706:	f001 fd2b 	bl	8004160 <HAL_DMA_Init>
 800270a:	bb30      	cbnz	r0, 800275a <HAL_UART_MspInit+0x1fe>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart7_tx);
 800270c:	4b24      	ldr	r3, [pc, #144]	@ (80027a0 <HAL_UART_MspInit+0x244>)
 800270e:	67a3      	str	r3, [r4, #120]	@ 0x78
 8002710:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_uart7_rx.Instance = DMA2_Stream5;
 8002712:	4825      	ldr	r0, [pc, #148]	@ (80027a8 <HAL_UART_MspInit+0x24c>)
 8002714:	4b25      	ldr	r3, [pc, #148]	@ (80027ac <HAL_UART_MspInit+0x250>)
 8002716:	6003      	str	r3, [r0, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 8002718:	234f      	movs	r3, #79	@ 0x4f
 800271a:	6043      	str	r3, [r0, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800271c:	2300      	movs	r3, #0
 800271e:	6083      	str	r3, [r0, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002720:	60c3      	str	r3, [r0, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002722:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002726:	6102      	str	r2, [r0, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002728:	6143      	str	r3, [r0, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800272a:	6183      	str	r3, [r0, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 800272c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002730:	61c2      	str	r2, [r0, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002732:	6203      	str	r3, [r0, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002734:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8002736:	f001 fd13 	bl	8004160 <HAL_DMA_Init>
 800273a:	b988      	cbnz	r0, 8002760 <HAL_UART_MspInit+0x204>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 800273c:	4b1a      	ldr	r3, [pc, #104]	@ (80027a8 <HAL_UART_MspInit+0x24c>)
 800273e:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8002740:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8002742:	2200      	movs	r2, #0
 8002744:	2105      	movs	r1, #5
 8002746:	2052      	movs	r0, #82	@ 0x52
 8002748:	f001 fae4 	bl	8003d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 800274c:	2052      	movs	r0, #82	@ 0x52
 800274e:	f001 faf1 	bl	8003d34 <HAL_NVIC_EnableIRQ>
 8002752:	e72c      	b.n	80025ae <HAL_UART_MspInit+0x52>
      Error_Handler();
 8002754:	f7fe f8a0 	bl	8000898 <Error_Handler>
 8002758:	e79e      	b.n	8002698 <HAL_UART_MspInit+0x13c>
      Error_Handler();
 800275a:	f7fe f89d 	bl	8000898 <Error_Handler>
 800275e:	e7d5      	b.n	800270c <HAL_UART_MspInit+0x1b0>
      Error_Handler();
 8002760:	f7fe f89a 	bl	8000898 <Error_Handler>
 8002764:	e7ea      	b.n	800273c <HAL_UART_MspInit+0x1e0>
 8002766:	bf00      	nop
 8002768:	40004c00 	.word	0x40004c00
 800276c:	40007800 	.word	0x40007800
 8002770:	40007c00 	.word	0x40007c00
 8002774:	40011000 	.word	0x40011000
 8002778:	40004400 	.word	0x40004400
 800277c:	40004800 	.word	0x40004800
 8002780:	40011400 	.word	0x40011400
 8002784:	58024400 	.word	0x58024400
 8002788:	58020c00 	.word	0x58020c00
 800278c:	24001e58 	.word	0x24001e58
 8002790:	40020440 	.word	0x40020440
 8002794:	24001de0 	.word	0x24001de0
 8002798:	40020458 	.word	0x40020458
 800279c:	58021000 	.word	0x58021000
 80027a0:	24001d68 	.word	0x24001d68
 80027a4:	40020470 	.word	0x40020470
 80027a8:	24001cf0 	.word	0x24001cf0
 80027ac:	40020488 	.word	0x40020488
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 80027b0:	2302      	movs	r3, #2
 80027b2:	9310      	str	r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027b4:	a810      	add	r0, sp, #64	@ 0x40
 80027b6:	f005 f82b 	bl	8007810 <HAL_RCCEx_PeriphCLKConfig>
 80027ba:	2800      	cmp	r0, #0
 80027bc:	d15c      	bne.n	8002878 <HAL_UART_MspInit+0x31c>
    __HAL_RCC_UART8_CLK_ENABLE();
 80027be:	4ba0      	ldr	r3, [pc, #640]	@ (8002a40 <HAL_UART_MspInit+0x4e4>)
 80027c0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80027c4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80027c8:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 80027cc:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80027d0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80027d4:	9205      	str	r2, [sp, #20]
 80027d6:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80027d8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80027dc:	f042 0210 	orr.w	r2, r2, #16
 80027e0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80027e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027e8:	f003 0310 	and.w	r3, r3, #16
 80027ec:	9306      	str	r3, [sp, #24]
 80027ee:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = RX8_EXT_Pin|TX8_EXT_Pin;
 80027f0:	2303      	movs	r3, #3
 80027f2:	933f      	str	r3, [sp, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f4:	2302      	movs	r3, #2
 80027f6:	9340      	str	r3, [sp, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f8:	2500      	movs	r5, #0
 80027fa:	9541      	str	r5, [sp, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027fc:	9542      	str	r5, [sp, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80027fe:	2308      	movs	r3, #8
 8002800:	9343      	str	r3, [sp, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002802:	a93f      	add	r1, sp, #252	@ 0xfc
 8002804:	488f      	ldr	r0, [pc, #572]	@ (8002a44 <HAL_UART_MspInit+0x4e8>)
 8002806:	f003 fbf9 	bl	8005ffc <HAL_GPIO_Init>
    hdma_uart8_tx.Instance = DMA2_Stream6;
 800280a:	488f      	ldr	r0, [pc, #572]	@ (8002a48 <HAL_UART_MspInit+0x4ec>)
 800280c:	4b8f      	ldr	r3, [pc, #572]	@ (8002a4c <HAL_UART_MspInit+0x4f0>)
 800280e:	6003      	str	r3, [r0, #0]
    hdma_uart8_tx.Init.Request = DMA_REQUEST_UART8_TX;
 8002810:	2352      	movs	r3, #82	@ 0x52
 8002812:	6043      	str	r3, [r0, #4]
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002814:	2340      	movs	r3, #64	@ 0x40
 8002816:	6083      	str	r3, [r0, #8]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002818:	60c5      	str	r5, [r0, #12]
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 800281a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800281e:	6103      	str	r3, [r0, #16]
    hdma_uart8_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002820:	6145      	str	r5, [r0, #20]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002822:	6185      	str	r5, [r0, #24]
    hdma_uart8_tx.Init.Mode = DMA_NORMAL;
 8002824:	61c5      	str	r5, [r0, #28]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002826:	6205      	str	r5, [r0, #32]
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002828:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 800282a:	f001 fc99 	bl	8004160 <HAL_DMA_Init>
 800282e:	bb30      	cbnz	r0, 800287e <HAL_UART_MspInit+0x322>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart8_tx);
 8002830:	4b85      	ldr	r3, [pc, #532]	@ (8002a48 <HAL_UART_MspInit+0x4ec>)
 8002832:	67a3      	str	r3, [r4, #120]	@ 0x78
 8002834:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_uart8_rx.Instance = DMA2_Stream7;
 8002836:	4886      	ldr	r0, [pc, #536]	@ (8002a50 <HAL_UART_MspInit+0x4f4>)
 8002838:	4b86      	ldr	r3, [pc, #536]	@ (8002a54 <HAL_UART_MspInit+0x4f8>)
 800283a:	6003      	str	r3, [r0, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 800283c:	2351      	movs	r3, #81	@ 0x51
 800283e:	6043      	str	r3, [r0, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002840:	2300      	movs	r3, #0
 8002842:	6083      	str	r3, [r0, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002844:	60c3      	str	r3, [r0, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002846:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800284a:	6102      	str	r2, [r0, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800284c:	6143      	str	r3, [r0, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800284e:	6183      	str	r3, [r0, #24]
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 8002850:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002854:	61c2      	str	r2, [r0, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002856:	6203      	str	r3, [r0, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002858:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 800285a:	f001 fc81 	bl	8004160 <HAL_DMA_Init>
 800285e:	b988      	cbnz	r0, 8002884 <HAL_UART_MspInit+0x328>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 8002860:	4b7b      	ldr	r3, [pc, #492]	@ (8002a50 <HAL_UART_MspInit+0x4f4>)
 8002862:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8002864:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 8002866:	2200      	movs	r2, #0
 8002868:	2105      	movs	r1, #5
 800286a:	2053      	movs	r0, #83	@ 0x53
 800286c:	f001 fa52 	bl	8003d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8002870:	2053      	movs	r0, #83	@ 0x53
 8002872:	f001 fa5f 	bl	8003d34 <HAL_NVIC_EnableIRQ>
 8002876:	e69a      	b.n	80025ae <HAL_UART_MspInit+0x52>
      Error_Handler();
 8002878:	f7fe f80e 	bl	8000898 <Error_Handler>
 800287c:	e79f      	b.n	80027be <HAL_UART_MspInit+0x262>
      Error_Handler();
 800287e:	f7fe f80b 	bl	8000898 <Error_Handler>
 8002882:	e7d5      	b.n	8002830 <HAL_UART_MspInit+0x2d4>
      Error_Handler();
 8002884:	f7fe f808 	bl	8000898 <Error_Handler>
 8002888:	e7ea      	b.n	8002860 <HAL_UART_MspInit+0x304>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800288a:	2301      	movs	r3, #1
 800288c:	9310      	str	r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800288e:	a810      	add	r0, sp, #64	@ 0x40
 8002890:	f004 ffbe 	bl	8007810 <HAL_RCCEx_PeriphCLKConfig>
 8002894:	2800      	cmp	r0, #0
 8002896:	d15d      	bne.n	8002954 <HAL_UART_MspInit+0x3f8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002898:	4b69      	ldr	r3, [pc, #420]	@ (8002a40 <HAL_UART_MspInit+0x4e4>)
 800289a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800289e:	f042 0210 	orr.w	r2, r2, #16
 80028a2:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 80028a6:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80028aa:	f002 0210 	and.w	r2, r2, #16
 80028ae:	9207      	str	r2, [sp, #28]
 80028b0:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80028b6:	f042 0201 	orr.w	r2, r2, #1
 80028ba:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80028be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	9308      	str	r3, [sp, #32]
 80028c8:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Pin = TX1_FRONT_Pin|RX1_FRONT_Pin;
 80028ca:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80028ce:	933f      	str	r3, [sp, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d0:	2302      	movs	r3, #2
 80028d2:	9340      	str	r3, [sp, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d4:	2500      	movs	r5, #0
 80028d6:	9541      	str	r5, [sp, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d8:	9542      	str	r5, [sp, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028da:	2307      	movs	r3, #7
 80028dc:	9343      	str	r3, [sp, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028de:	a93f      	add	r1, sp, #252	@ 0xfc
 80028e0:	485d      	ldr	r0, [pc, #372]	@ (8002a58 <HAL_UART_MspInit+0x4fc>)
 80028e2:	f003 fb8b 	bl	8005ffc <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Stream0;
 80028e6:	485d      	ldr	r0, [pc, #372]	@ (8002a5c <HAL_UART_MspInit+0x500>)
 80028e8:	4b5d      	ldr	r3, [pc, #372]	@ (8002a60 <HAL_UART_MspInit+0x504>)
 80028ea:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80028ec:	232a      	movs	r3, #42	@ 0x2a
 80028ee:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028f0:	2340      	movs	r3, #64	@ 0x40
 80028f2:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028f4:	60c5      	str	r5, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028fa:	6103      	str	r3, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028fc:	6145      	str	r5, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028fe:	6185      	str	r5, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002900:	61c5      	str	r5, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002902:	6205      	str	r5, [r0, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002904:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002906:	f001 fc2b 	bl	8004160 <HAL_DMA_Init>
 800290a:	bb30      	cbnz	r0, 800295a <HAL_UART_MspInit+0x3fe>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800290c:	4b53      	ldr	r3, [pc, #332]	@ (8002a5c <HAL_UART_MspInit+0x500>)
 800290e:	67a3      	str	r3, [r4, #120]	@ 0x78
 8002910:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_usart1_rx.Instance = DMA1_Stream1;
 8002912:	4854      	ldr	r0, [pc, #336]	@ (8002a64 <HAL_UART_MspInit+0x508>)
 8002914:	4b54      	ldr	r3, [pc, #336]	@ (8002a68 <HAL_UART_MspInit+0x50c>)
 8002916:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002918:	2329      	movs	r3, #41	@ 0x29
 800291a:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800291c:	2300      	movs	r3, #0
 800291e:	6083      	str	r3, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002920:	60c3      	str	r3, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002922:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002926:	6102      	str	r2, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002928:	6143      	str	r3, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800292a:	6183      	str	r3, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800292c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002930:	61c2      	str	r2, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002932:	6203      	str	r3, [r0, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002934:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002936:	f001 fc13 	bl	8004160 <HAL_DMA_Init>
 800293a:	b988      	cbnz	r0, 8002960 <HAL_UART_MspInit+0x404>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800293c:	4b49      	ldr	r3, [pc, #292]	@ (8002a64 <HAL_UART_MspInit+0x508>)
 800293e:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8002940:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002942:	2200      	movs	r2, #0
 8002944:	2105      	movs	r1, #5
 8002946:	2025      	movs	r0, #37	@ 0x25
 8002948:	f001 f9e4 	bl	8003d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800294c:	2025      	movs	r0, #37	@ 0x25
 800294e:	f001 f9f1 	bl	8003d34 <HAL_NVIC_EnableIRQ>
 8002952:	e62c      	b.n	80025ae <HAL_UART_MspInit+0x52>
      Error_Handler();
 8002954:	f7fd ffa0 	bl	8000898 <Error_Handler>
 8002958:	e79e      	b.n	8002898 <HAL_UART_MspInit+0x33c>
      Error_Handler();
 800295a:	f7fd ff9d 	bl	8000898 <Error_Handler>
 800295e:	e7d5      	b.n	800290c <HAL_UART_MspInit+0x3b0>
      Error_Handler();
 8002960:	f7fd ff9a 	bl	8000898 <Error_Handler>
 8002964:	e7ea      	b.n	800293c <HAL_UART_MspInit+0x3e0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002966:	2302      	movs	r3, #2
 8002968:	9310      	str	r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800296a:	a810      	add	r0, sp, #64	@ 0x40
 800296c:	f004 ff50 	bl	8007810 <HAL_RCCEx_PeriphCLKConfig>
 8002970:	2800      	cmp	r0, #0
 8002972:	d15c      	bne.n	8002a2e <HAL_UART_MspInit+0x4d2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002974:	4b32      	ldr	r3, [pc, #200]	@ (8002a40 <HAL_UART_MspInit+0x4e4>)
 8002976:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800297a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800297e:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8002982:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002986:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 800298a:	9209      	str	r2, [sp, #36]	@ 0x24
 800298c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800298e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002992:	f042 0201 	orr.w	r2, r2, #1
 8002996:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800299a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80029a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pin = TX2_RADIO_Pin|RX2_RADIO_Pin;
 80029a6:	230c      	movs	r3, #12
 80029a8:	933f      	str	r3, [sp, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029aa:	2302      	movs	r3, #2
 80029ac:	9340      	str	r3, [sp, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ae:	2500      	movs	r5, #0
 80029b0:	9541      	str	r5, [sp, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b2:	9542      	str	r5, [sp, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029b4:	2307      	movs	r3, #7
 80029b6:	9343      	str	r3, [sp, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b8:	a93f      	add	r1, sp, #252	@ 0xfc
 80029ba:	4827      	ldr	r0, [pc, #156]	@ (8002a58 <HAL_UART_MspInit+0x4fc>)
 80029bc:	f003 fb1e 	bl	8005ffc <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream2;
 80029c0:	482a      	ldr	r0, [pc, #168]	@ (8002a6c <HAL_UART_MspInit+0x510>)
 80029c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002a70 <HAL_UART_MspInit+0x514>)
 80029c4:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80029c6:	232c      	movs	r3, #44	@ 0x2c
 80029c8:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029ca:	2340      	movs	r3, #64	@ 0x40
 80029cc:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029ce:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80029d4:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029d6:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029d8:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80029da:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80029dc:	6205      	str	r5, [r0, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029de:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80029e0:	f001 fbbe 	bl	8004160 <HAL_DMA_Init>
 80029e4:	bb30      	cbnz	r0, 8002a34 <HAL_UART_MspInit+0x4d8>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80029e6:	4b21      	ldr	r3, [pc, #132]	@ (8002a6c <HAL_UART_MspInit+0x510>)
 80029e8:	67a3      	str	r3, [r4, #120]	@ 0x78
 80029ea:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_usart2_rx.Instance = DMA1_Stream3;
 80029ec:	4821      	ldr	r0, [pc, #132]	@ (8002a74 <HAL_UART_MspInit+0x518>)
 80029ee:	4b22      	ldr	r3, [pc, #136]	@ (8002a78 <HAL_UART_MspInit+0x51c>)
 80029f0:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80029f2:	232b      	movs	r3, #43	@ 0x2b
 80029f4:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029f6:	2300      	movs	r3, #0
 80029f8:	6083      	str	r3, [r0, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029fa:	60c3      	str	r3, [r0, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029fc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a00:	6102      	str	r2, [r0, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a02:	6143      	str	r3, [r0, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a04:	6183      	str	r3, [r0, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002a06:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a0a:	61c2      	str	r2, [r0, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a0c:	6203      	str	r3, [r0, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a0e:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002a10:	f001 fba6 	bl	8004160 <HAL_DMA_Init>
 8002a14:	b988      	cbnz	r0, 8002a3a <HAL_UART_MspInit+0x4de>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002a16:	4b17      	ldr	r3, [pc, #92]	@ (8002a74 <HAL_UART_MspInit+0x518>)
 8002a18:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8002a1a:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	2105      	movs	r1, #5
 8002a20:	2026      	movs	r0, #38	@ 0x26
 8002a22:	f001 f977 	bl	8003d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a26:	2026      	movs	r0, #38	@ 0x26
 8002a28:	f001 f984 	bl	8003d34 <HAL_NVIC_EnableIRQ>
 8002a2c:	e5bf      	b.n	80025ae <HAL_UART_MspInit+0x52>
      Error_Handler();
 8002a2e:	f7fd ff33 	bl	8000898 <Error_Handler>
 8002a32:	e79f      	b.n	8002974 <HAL_UART_MspInit+0x418>
      Error_Handler();
 8002a34:	f7fd ff30 	bl	8000898 <Error_Handler>
 8002a38:	e7d5      	b.n	80029e6 <HAL_UART_MspInit+0x48a>
      Error_Handler();
 8002a3a:	f7fd ff2d 	bl	8000898 <Error_Handler>
 8002a3e:	e7ea      	b.n	8002a16 <HAL_UART_MspInit+0x4ba>
 8002a40:	58024400 	.word	0x58024400
 8002a44:	58021000 	.word	0x58021000
 8002a48:	24001c78 	.word	0x24001c78
 8002a4c:	400204a0 	.word	0x400204a0
 8002a50:	24001c00 	.word	0x24001c00
 8002a54:	400204b8 	.word	0x400204b8
 8002a58:	58020000 	.word	0x58020000
 8002a5c:	24001b88 	.word	0x24001b88
 8002a60:	40020010 	.word	0x40020010
 8002a64:	24001b10 	.word	0x24001b10
 8002a68:	40020028 	.word	0x40020028
 8002a6c:	24001a98 	.word	0x24001a98
 8002a70:	40020040 	.word	0x40020040
 8002a74:	24001a20 	.word	0x24001a20
 8002a78:	40020058 	.word	0x40020058
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	9310      	str	r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a80:	a810      	add	r0, sp, #64	@ 0x40
 8002a82:	f004 fec5 	bl	8007810 <HAL_RCCEx_PeriphCLKConfig>
 8002a86:	2800      	cmp	r0, #0
 8002a88:	d174      	bne.n	8002b74 <HAL_UART_MspInit+0x618>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a8a:	4b75      	ldr	r3, [pc, #468]	@ (8002c60 <HAL_UART_MspInit+0x704>)
 8002a8c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002a90:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002a94:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8002a98:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002a9c:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8002aa0:	920b      	str	r2, [sp, #44]	@ 0x2c
 8002aa2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aa4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002aa8:	f042 0202 	orr.w	r2, r2, #2
 8002aac:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002ab0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002ab4:	f002 0202 	and.w	r2, r2, #2
 8002ab8:	920c      	str	r2, [sp, #48]	@ 0x30
 8002aba:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002abc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002ac0:	f042 0208 	orr.w	r2, r2, #8
 8002ac4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002acc:	f003 0308 	and.w	r3, r3, #8
 8002ad0:	930d      	str	r3, [sp, #52]	@ 0x34
 8002ad2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
    GPIO_InitStruct.Pin = DE3_RS485_Pin;
 8002ad4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002ad8:	933f      	str	r3, [sp, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ada:	2702      	movs	r7, #2
 8002adc:	9740      	str	r7, [sp, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ade:	2500      	movs	r5, #0
 8002ae0:	9541      	str	r5, [sp, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae2:	9542      	str	r5, [sp, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ae4:	2607      	movs	r6, #7
 8002ae6:	9643      	str	r6, [sp, #268]	@ 0x10c
    HAL_GPIO_Init(DE3_RS485_GPIO_Port, &GPIO_InitStruct);
 8002ae8:	a93f      	add	r1, sp, #252	@ 0xfc
 8002aea:	485e      	ldr	r0, [pc, #376]	@ (8002c64 <HAL_UART_MspInit+0x708>)
 8002aec:	f003 fa86 	bl	8005ffc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TX3_RS485_Pin|RX3_RS485_Pin;
 8002af0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002af4:	933f      	str	r3, [sp, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af6:	9740      	str	r7, [sp, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af8:	9541      	str	r5, [sp, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002afa:	9542      	str	r5, [sp, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002afc:	9643      	str	r6, [sp, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002afe:	a93f      	add	r1, sp, #252	@ 0xfc
 8002b00:	4859      	ldr	r0, [pc, #356]	@ (8002c68 <HAL_UART_MspInit+0x70c>)
 8002b02:	f003 fa7b 	bl	8005ffc <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream4;
 8002b06:	4859      	ldr	r0, [pc, #356]	@ (8002c6c <HAL_UART_MspInit+0x710>)
 8002b08:	4b59      	ldr	r3, [pc, #356]	@ (8002c70 <HAL_UART_MspInit+0x714>)
 8002b0a:	6003      	str	r3, [r0, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002b0c:	232e      	movs	r3, #46	@ 0x2e
 8002b0e:	6043      	str	r3, [r0, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b10:	2340      	movs	r3, #64	@ 0x40
 8002b12:	6083      	str	r3, [r0, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b14:	60c5      	str	r5, [r0, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b1a:	6103      	str	r3, [r0, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b1c:	6145      	str	r5, [r0, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b1e:	6185      	str	r5, [r0, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002b20:	61c5      	str	r5, [r0, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b22:	6205      	str	r5, [r0, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b24:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002b26:	f001 fb1b 	bl	8004160 <HAL_DMA_Init>
 8002b2a:	bb30      	cbnz	r0, 8002b7a <HAL_UART_MspInit+0x61e>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002b2c:	4b4f      	ldr	r3, [pc, #316]	@ (8002c6c <HAL_UART_MspInit+0x710>)
 8002b2e:	67a3      	str	r3, [r4, #120]	@ 0x78
 8002b30:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_usart3_rx.Instance = DMA1_Stream5;
 8002b32:	4850      	ldr	r0, [pc, #320]	@ (8002c74 <HAL_UART_MspInit+0x718>)
 8002b34:	4b50      	ldr	r3, [pc, #320]	@ (8002c78 <HAL_UART_MspInit+0x71c>)
 8002b36:	6003      	str	r3, [r0, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002b38:	232d      	movs	r3, #45	@ 0x2d
 8002b3a:	6043      	str	r3, [r0, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	6083      	str	r3, [r0, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b40:	60c3      	str	r3, [r0, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b46:	6102      	str	r2, [r0, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b48:	6143      	str	r3, [r0, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b4a:	6183      	str	r3, [r0, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002b4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b50:	61c2      	str	r2, [r0, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b52:	6203      	str	r3, [r0, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b54:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002b56:	f001 fb03 	bl	8004160 <HAL_DMA_Init>
 8002b5a:	b988      	cbnz	r0, 8002b80 <HAL_UART_MspInit+0x624>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002b5c:	4b45      	ldr	r3, [pc, #276]	@ (8002c74 <HAL_UART_MspInit+0x718>)
 8002b5e:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8002b60:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002b62:	2200      	movs	r2, #0
 8002b64:	2105      	movs	r1, #5
 8002b66:	2027      	movs	r0, #39	@ 0x27
 8002b68:	f001 f8d4 	bl	8003d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002b6c:	2027      	movs	r0, #39	@ 0x27
 8002b6e:	f001 f8e1 	bl	8003d34 <HAL_NVIC_EnableIRQ>
 8002b72:	e51c      	b.n	80025ae <HAL_UART_MspInit+0x52>
      Error_Handler();
 8002b74:	f7fd fe90 	bl	8000898 <Error_Handler>
 8002b78:	e787      	b.n	8002a8a <HAL_UART_MspInit+0x52e>
      Error_Handler();
 8002b7a:	f7fd fe8d 	bl	8000898 <Error_Handler>
 8002b7e:	e7d5      	b.n	8002b2c <HAL_UART_MspInit+0x5d0>
      Error_Handler();
 8002b80:	f7fd fe8a 	bl	8000898 <Error_Handler>
 8002b84:	e7ea      	b.n	8002b5c <HAL_UART_MspInit+0x600>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002b86:	2301      	movs	r3, #1
 8002b88:	9310      	str	r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b8a:	a810      	add	r0, sp, #64	@ 0x40
 8002b8c:	f004 fe40 	bl	8007810 <HAL_RCCEx_PeriphCLKConfig>
 8002b90:	2800      	cmp	r0, #0
 8002b92:	d15c      	bne.n	8002c4e <HAL_UART_MspInit+0x6f2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002b94:	4b32      	ldr	r3, [pc, #200]	@ (8002c60 <HAL_UART_MspInit+0x704>)
 8002b96:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8002b9a:	f042 0220 	orr.w	r2, r2, #32
 8002b9e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8002ba2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8002ba6:	f002 0220 	and.w	r2, r2, #32
 8002baa:	920e      	str	r2, [sp, #56]	@ 0x38
 8002bac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bae:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002bb2:	f042 0204 	orr.w	r2, r2, #4
 8002bb6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bbe:	f003 0304 	and.w	r3, r3, #4
 8002bc2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8002bc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
    GPIO_InitStruct.Pin = TX6_BACK_Pin|RX6_BACK_Pin;
 8002bc6:	23c0      	movs	r3, #192	@ 0xc0
 8002bc8:	933f      	str	r3, [sp, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bca:	2302      	movs	r3, #2
 8002bcc:	9340      	str	r3, [sp, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bce:	2500      	movs	r5, #0
 8002bd0:	9541      	str	r5, [sp, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd2:	9542      	str	r5, [sp, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8002bd4:	2307      	movs	r3, #7
 8002bd6:	9343      	str	r3, [sp, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bd8:	a93f      	add	r1, sp, #252	@ 0xfc
 8002bda:	4828      	ldr	r0, [pc, #160]	@ (8002c7c <HAL_UART_MspInit+0x720>)
 8002bdc:	f003 fa0e 	bl	8005ffc <HAL_GPIO_Init>
    hdma_usart6_tx.Instance = DMA1_Stream6;
 8002be0:	4827      	ldr	r0, [pc, #156]	@ (8002c80 <HAL_UART_MspInit+0x724>)
 8002be2:	4b28      	ldr	r3, [pc, #160]	@ (8002c84 <HAL_UART_MspInit+0x728>)
 8002be4:	6003      	str	r3, [r0, #0]
    hdma_usart6_tx.Init.Request = DMA_REQUEST_USART6_TX;
 8002be6:	2348      	movs	r3, #72	@ 0x48
 8002be8:	6043      	str	r3, [r0, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002bea:	2340      	movs	r3, #64	@ 0x40
 8002bec:	6083      	str	r3, [r0, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bee:	60c5      	str	r5, [r0, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002bf0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002bf4:	6103      	str	r3, [r0, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bf6:	6145      	str	r5, [r0, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bf8:	6185      	str	r5, [r0, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8002bfa:	61c5      	str	r5, [r0, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002bfc:	6205      	str	r5, [r0, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bfe:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8002c00:	f001 faae 	bl	8004160 <HAL_DMA_Init>
 8002c04:	bb30      	cbnz	r0, 8002c54 <HAL_UART_MspInit+0x6f8>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8002c06:	4b1e      	ldr	r3, [pc, #120]	@ (8002c80 <HAL_UART_MspInit+0x724>)
 8002c08:	67a3      	str	r3, [r4, #120]	@ 0x78
 8002c0a:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_usart6_rx.Instance = DMA1_Stream7;
 8002c0c:	481e      	ldr	r0, [pc, #120]	@ (8002c88 <HAL_UART_MspInit+0x72c>)
 8002c0e:	4b1f      	ldr	r3, [pc, #124]	@ (8002c8c <HAL_UART_MspInit+0x730>)
 8002c10:	6003      	str	r3, [r0, #0]
    hdma_usart6_rx.Init.Request = DMA_REQUEST_USART6_RX;
 8002c12:	2347      	movs	r3, #71	@ 0x47
 8002c14:	6043      	str	r3, [r0, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c16:	2300      	movs	r3, #0
 8002c18:	6083      	str	r3, [r0, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c1a:	60c3      	str	r3, [r0, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c1c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c20:	6102      	str	r2, [r0, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c22:	6143      	str	r3, [r0, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c24:	6183      	str	r3, [r0, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8002c26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c2a:	61c2      	str	r2, [r0, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c2c:	6203      	str	r3, [r0, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c2e:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002c30:	f001 fa96 	bl	8004160 <HAL_DMA_Init>
 8002c34:	b988      	cbnz	r0, 8002c5a <HAL_UART_MspInit+0x6fe>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8002c36:	4b14      	ldr	r3, [pc, #80]	@ (8002c88 <HAL_UART_MspInit+0x72c>)
 8002c38:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8002c3a:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	2105      	movs	r1, #5
 8002c40:	2047      	movs	r0, #71	@ 0x47
 8002c42:	f001 f867 	bl	8003d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002c46:	2047      	movs	r0, #71	@ 0x47
 8002c48:	f001 f874 	bl	8003d34 <HAL_NVIC_EnableIRQ>
}
 8002c4c:	e4af      	b.n	80025ae <HAL_UART_MspInit+0x52>
      Error_Handler();
 8002c4e:	f7fd fe23 	bl	8000898 <Error_Handler>
 8002c52:	e79f      	b.n	8002b94 <HAL_UART_MspInit+0x638>
      Error_Handler();
 8002c54:	f7fd fe20 	bl	8000898 <Error_Handler>
 8002c58:	e7d5      	b.n	8002c06 <HAL_UART_MspInit+0x6aa>
      Error_Handler();
 8002c5a:	f7fd fe1d 	bl	8000898 <Error_Handler>
 8002c5e:	e7ea      	b.n	8002c36 <HAL_UART_MspInit+0x6da>
 8002c60:	58024400 	.word	0x58024400
 8002c64:	58020400 	.word	0x58020400
 8002c68:	58020c00 	.word	0x58020c00
 8002c6c:	240019a8 	.word	0x240019a8
 8002c70:	40020070 	.word	0x40020070
 8002c74:	24001930 	.word	0x24001930
 8002c78:	40020088 	.word	0x40020088
 8002c7c:	58020800 	.word	0x58020800
 8002c80:	240018b8 	.word	0x240018b8
 8002c84:	400200a0 	.word	0x400200a0
 8002c88:	24001840 	.word	0x24001840
 8002c8c:	400200b8 	.word	0x400200b8

08002c90 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM5 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c90:	280f      	cmp	r0, #15
 8002c92:	d901      	bls.n	8002c98 <HAL_InitTick+0x8>
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8002c94:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim5);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8002c96:	4770      	bx	lr
{
 8002c98:	b510      	push	{r4, lr}
 8002c9a:	b08a      	sub	sp, #40	@ 0x28
 8002c9c:	4604      	mov	r4, r0
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0U);
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	4601      	mov	r1, r0
 8002ca2:	2032      	movs	r0, #50	@ 0x32
 8002ca4:	f001 f836 	bl	8003d14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002ca8:	2032      	movs	r0, #50	@ 0x32
 8002caa:	f001 f843 	bl	8003d34 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002cae:	4b1a      	ldr	r3, [pc, #104]	@ (8002d18 <HAL_InitTick+0x88>)
 8002cb0:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM5_CLK_ENABLE();
 8002cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8002d1c <HAL_InitTick+0x8c>)
 8002cb4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002cb8:	f042 0208 	orr.w	r2, r2, #8
 8002cbc:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8002cc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002cc4:	f003 0308 	and.w	r3, r3, #8
 8002cc8:	9300      	str	r3, [sp, #0]
 8002cca:	9b00      	ldr	r3, [sp, #0]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ccc:	a901      	add	r1, sp, #4
 8002cce:	a802      	add	r0, sp, #8
 8002cd0:	f004 fc68 	bl	80075a4 <HAL_RCC_GetClockConfig>
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002cd4:	9b07      	ldr	r3, [sp, #28]
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002cd6:	b9bb      	cbnz	r3, 8002d08 <HAL_InitTick+0x78>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002cd8:	f004 fc40 	bl	800755c <HAL_RCC_GetPCLK1Freq>
 8002cdc:	4603      	mov	r3, r0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002cde:	4a10      	ldr	r2, [pc, #64]	@ (8002d20 <HAL_InitTick+0x90>)
 8002ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce4:	0c9b      	lsrs	r3, r3, #18
 8002ce6:	3b01      	subs	r3, #1
  htim5.Instance = TIM5;
 8002ce8:	480e      	ldr	r0, [pc, #56]	@ (8002d24 <HAL_InitTick+0x94>)
 8002cea:	4a0f      	ldr	r2, [pc, #60]	@ (8002d28 <HAL_InitTick+0x98>)
 8002cec:	6002      	str	r2, [r0, #0]
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8002cee:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002cf2:	60c2      	str	r2, [r0, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8002cf4:	6043      	str	r3, [r0, #4]
  htim5.Init.ClockDivision = 0;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	6103      	str	r3, [r0, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cfa:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8002cfc:	f007 fa1e 	bl	800a13c <HAL_TIM_Base_Init>
 8002d00:	b130      	cbz	r0, 8002d10 <HAL_InitTick+0x80>
  return HAL_ERROR;
 8002d02:	2001      	movs	r0, #1
}
 8002d04:	b00a      	add	sp, #40	@ 0x28
 8002d06:	bd10      	pop	{r4, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002d08:	f004 fc28 	bl	800755c <HAL_RCC_GetPCLK1Freq>
 8002d0c:	0043      	lsls	r3, r0, #1
 8002d0e:	e7e6      	b.n	8002cde <HAL_InitTick+0x4e>
    return HAL_TIM_Base_Start_IT(&htim5);
 8002d10:	4804      	ldr	r0, [pc, #16]	@ (8002d24 <HAL_InitTick+0x94>)
 8002d12:	f007 f85d 	bl	8009dd0 <HAL_TIM_Base_Start_IT>
 8002d16:	e7f5      	b.n	8002d04 <HAL_InitTick+0x74>
 8002d18:	2400000c 	.word	0x2400000c
 8002d1c:	58024400 	.word	0x58024400
 8002d20:	431bde83 	.word	0x431bde83
 8002d24:	24002768 	.word	0x24002768
 8002d28:	40000c00 	.word	0x40000c00

08002d2c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d2c:	e7fe      	b.n	8002d2c <NMI_Handler>

08002d2e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d2e:	e7fe      	b.n	8002d2e <HardFault_Handler>

08002d30 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d30:	e7fe      	b.n	8002d30 <MemManage_Handler>

08002d32 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d32:	e7fe      	b.n	8002d32 <BusFault_Handler>

08002d34 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d34:	e7fe      	b.n	8002d34 <UsageFault_Handler>

08002d36 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d36:	4770      	bx	lr

08002d38 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002d38:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002d3a:	4802      	ldr	r0, [pc, #8]	@ (8002d44 <DMA1_Stream0_IRQHandler+0xc>)
 8002d3c:	f002 f806 	bl	8004d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002d40:	bd08      	pop	{r3, pc}
 8002d42:	bf00      	nop
 8002d44:	24001b88 	.word	0x24001b88

08002d48 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002d48:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002d4a:	4802      	ldr	r0, [pc, #8]	@ (8002d54 <DMA1_Stream1_IRQHandler+0xc>)
 8002d4c:	f001 fffe 	bl	8004d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002d50:	bd08      	pop	{r3, pc}
 8002d52:	bf00      	nop
 8002d54:	24001b10 	.word	0x24001b10

08002d58 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002d58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002d5a:	4802      	ldr	r0, [pc, #8]	@ (8002d64 <DMA1_Stream2_IRQHandler+0xc>)
 8002d5c:	f001 fff6 	bl	8004d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002d60:	bd08      	pop	{r3, pc}
 8002d62:	bf00      	nop
 8002d64:	24001a98 	.word	0x24001a98

08002d68 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002d68:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002d6a:	4802      	ldr	r0, [pc, #8]	@ (8002d74 <DMA1_Stream3_IRQHandler+0xc>)
 8002d6c:	f001 ffee 	bl	8004d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002d70:	bd08      	pop	{r3, pc}
 8002d72:	bf00      	nop
 8002d74:	24001a20 	.word	0x24001a20

08002d78 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002d78:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002d7a:	4802      	ldr	r0, [pc, #8]	@ (8002d84 <DMA1_Stream4_IRQHandler+0xc>)
 8002d7c:	f001 ffe6 	bl	8004d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002d80:	bd08      	pop	{r3, pc}
 8002d82:	bf00      	nop
 8002d84:	240019a8 	.word	0x240019a8

08002d88 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002d88:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002d8a:	4802      	ldr	r0, [pc, #8]	@ (8002d94 <DMA1_Stream5_IRQHandler+0xc>)
 8002d8c:	f001 ffde 	bl	8004d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002d90:	bd08      	pop	{r3, pc}
 8002d92:	bf00      	nop
 8002d94:	24001930 	.word	0x24001930

08002d98 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002d98:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8002d9a:	4802      	ldr	r0, [pc, #8]	@ (8002da4 <DMA1_Stream6_IRQHandler+0xc>)
 8002d9c:	f001 ffd6 	bl	8004d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002da0:	bd08      	pop	{r3, pc}
 8002da2:	bf00      	nop
 8002da4:	240018b8 	.word	0x240018b8

08002da8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002da8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002daa:	4802      	ldr	r0, [pc, #8]	@ (8002db4 <FDCAN1_IT0_IRQHandler+0xc>)
 8002dac:	f002 ff98 	bl	8005ce0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8002db0:	bd08      	pop	{r3, pc}
 8002db2:	bf00      	nop
 8002db4:	240025fc 	.word	0x240025fc

08002db8 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8002db8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8002dba:	4802      	ldr	r0, [pc, #8]	@ (8002dc4 <FDCAN2_IT0_IRQHandler+0xc>)
 8002dbc:	f002 ff90 	bl	8005ce0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8002dc0:	bd08      	pop	{r3, pc}
 8002dc2:	bf00      	nop
 8002dc4:	2400255c 	.word	0x2400255c

08002dc8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002dc8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002dca:	4802      	ldr	r0, [pc, #8]	@ (8002dd4 <TIM4_IRQHandler+0xc>)
 8002dcc:	f007 f866 	bl	8009e9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002dd0:	bd08      	pop	{r3, pc}
 8002dd2:	bf00      	nop
 8002dd4:	240022c0 	.word	0x240022c0

08002dd8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002dd8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002dda:	4802      	ldr	r0, [pc, #8]	@ (8002de4 <I2C1_EV_IRQHandler+0xc>)
 8002ddc:	f003 fd92 	bl	8006904 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002de0:	bd08      	pop	{r3, pc}
 8002de2:	bf00      	nop
 8002de4:	24002510 	.word	0x24002510

08002de8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002de8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002dea:	4802      	ldr	r0, [pc, #8]	@ (8002df4 <USART1_IRQHandler+0xc>)
 8002dec:	f007 fdc6 	bl	800a97c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002df0:	bd08      	pop	{r3, pc}
 8002df2:	bf00      	nop
 8002df4:	24002080 	.word	0x24002080

08002df8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002df8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002dfa:	4802      	ldr	r0, [pc, #8]	@ (8002e04 <USART2_IRQHandler+0xc>)
 8002dfc:	f007 fdbe 	bl	800a97c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002e00:	bd08      	pop	{r3, pc}
 8002e02:	bf00      	nop
 8002e04:	24001ff0 	.word	0x24001ff0

08002e08 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002e08:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002e0a:	4802      	ldr	r0, [pc, #8]	@ (8002e14 <USART3_IRQHandler+0xc>)
 8002e0c:	f007 fdb6 	bl	800a97c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002e10:	bd08      	pop	{r3, pc}
 8002e12:	bf00      	nop
 8002e14:	24001f60 	.word	0x24001f60

08002e18 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002e18:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002e1a:	4802      	ldr	r0, [pc, #8]	@ (8002e24 <DMA1_Stream7_IRQHandler+0xc>)
 8002e1c:	f001 ff96 	bl	8004d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002e20:	bd08      	pop	{r3, pc}
 8002e22:	bf00      	nop
 8002e24:	24001840 	.word	0x24001840

08002e28 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8002e28:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8002e2a:	4802      	ldr	r0, [pc, #8]	@ (8002e34 <SDMMC1_IRQHandler+0xc>)
 8002e2c:	f006 fd3e 	bl	80098ac <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8002e30:	bd08      	pop	{r3, pc}
 8002e32:	bf00      	nop
 8002e34:	24002358 	.word	0x24002358

08002e38 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002e38:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002e3a:	4802      	ldr	r0, [pc, #8]	@ (8002e44 <TIM5_IRQHandler+0xc>)
 8002e3c:	f007 f82e 	bl	8009e9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002e40:	bd08      	pop	{r3, pc}
 8002e42:	bf00      	nop
 8002e44:	24002768 	.word	0x24002768

08002e48 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002e48:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002e4a:	4802      	ldr	r0, [pc, #8]	@ (8002e54 <UART4_IRQHandler+0xc>)
 8002e4c:	f007 fd96 	bl	800a97c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002e50:	bd08      	pop	{r3, pc}
 8002e52:	bf00      	nop
 8002e54:	24002230 	.word	0x24002230

08002e58 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002e58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002e5a:	4802      	ldr	r0, [pc, #8]	@ (8002e64 <DMA2_Stream0_IRQHandler+0xc>)
 8002e5c:	f001 ff76 	bl	8004d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002e60:	bd08      	pop	{r3, pc}
 8002e62:	bf00      	nop
 8002e64:	2400244c 	.word	0x2400244c

08002e68 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002e68:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002e6a:	4802      	ldr	r0, [pc, #8]	@ (8002e74 <DMA2_Stream1_IRQHandler+0xc>)
 8002e6c:	f001 ff6e 	bl	8004d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002e70:	bd08      	pop	{r3, pc}
 8002e72:	bf00      	nop
 8002e74:	240023d4 	.word	0x240023d4

08002e78 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002e78:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002e7a:	4802      	ldr	r0, [pc, #8]	@ (8002e84 <DMA2_Stream2_IRQHandler+0xc>)
 8002e7c:	f001 ff66 	bl	8004d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002e80:	bd08      	pop	{r3, pc}
 8002e82:	bf00      	nop
 8002e84:	24001e58 	.word	0x24001e58

08002e88 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002e88:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002e8a:	4802      	ldr	r0, [pc, #8]	@ (8002e94 <DMA2_Stream3_IRQHandler+0xc>)
 8002e8c:	f001 ff5e 	bl	8004d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002e90:	bd08      	pop	{r3, pc}
 8002e92:	bf00      	nop
 8002e94:	24001de0 	.word	0x24001de0

08002e98 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8002e98:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8002e9a:	4802      	ldr	r0, [pc, #8]	@ (8002ea4 <DMA2_Stream4_IRQHandler+0xc>)
 8002e9c:	f001 ff56 	bl	8004d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8002ea0:	bd08      	pop	{r3, pc}
 8002ea2:	bf00      	nop
 8002ea4:	24001d68 	.word	0x24001d68

08002ea8 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8002ea8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8002eaa:	4802      	ldr	r0, [pc, #8]	@ (8002eb4 <DMA2_Stream5_IRQHandler+0xc>)
 8002eac:	f001 ff4e 	bl	8004d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8002eb0:	bd08      	pop	{r3, pc}
 8002eb2:	bf00      	nop
 8002eb4:	24001cf0 	.word	0x24001cf0

08002eb8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002eb8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_tx);
 8002eba:	4802      	ldr	r0, [pc, #8]	@ (8002ec4 <DMA2_Stream6_IRQHandler+0xc>)
 8002ebc:	f001 ff46 	bl	8004d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002ec0:	bd08      	pop	{r3, pc}
 8002ec2:	bf00      	nop
 8002ec4:	24001c78 	.word	0x24001c78

08002ec8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002ec8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8002eca:	4802      	ldr	r0, [pc, #8]	@ (8002ed4 <DMA2_Stream7_IRQHandler+0xc>)
 8002ecc:	f001 ff3e 	bl	8004d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002ed0:	bd08      	pop	{r3, pc}
 8002ed2:	bf00      	nop
 8002ed4:	24001c00 	.word	0x24001c00

08002ed8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002ed8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002eda:	4802      	ldr	r0, [pc, #8]	@ (8002ee4 <USART6_IRQHandler+0xc>)
 8002edc:	f007 fd4e 	bl	800a97c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002ee0:	bd08      	pop	{r3, pc}
 8002ee2:	bf00      	nop
 8002ee4:	24001ed0 	.word	0x24001ed0

08002ee8 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8002ee8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8002eea:	4802      	ldr	r0, [pc, #8]	@ (8002ef4 <UART7_IRQHandler+0xc>)
 8002eec:	f007 fd46 	bl	800a97c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8002ef0:	bd08      	pop	{r3, pc}
 8002ef2:	bf00      	nop
 8002ef4:	240021a0 	.word	0x240021a0

08002ef8 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8002ef8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8002efa:	4802      	ldr	r0, [pc, #8]	@ (8002f04 <UART8_IRQHandler+0xc>)
 8002efc:	f007 fd3e 	bl	800a97c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8002f00:	bd08      	pop	{r3, pc}
 8002f02:	bf00      	nop
 8002f04:	24002110 	.word	0x24002110

08002f08 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8002f08:	2001      	movs	r0, #1
 8002f0a:	4770      	bx	lr

08002f0c <_kill>:

int _kill(int pid, int sig)
{
 8002f0c:	b508      	push	{r3, lr}
	errno = EINVAL;
 8002f0e:	f016 fedd 	bl	8019ccc <__errno>
 8002f12:	2316      	movs	r3, #22
 8002f14:	6003      	str	r3, [r0, #0]
	return -1;
}
 8002f16:	f04f 30ff 	mov.w	r0, #4294967295
 8002f1a:	bd08      	pop	{r3, pc}

08002f1c <_exit>:

void _exit (int status)
{
 8002f1c:	b508      	push	{r3, lr}
	_kill(status, -1);
 8002f1e:	f04f 31ff 	mov.w	r1, #4294967295
 8002f22:	f7ff fff3 	bl	8002f0c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002f26:	e7fe      	b.n	8002f26 <_exit+0xa>

08002f28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f28:	b510      	push	{r4, lr}
 8002f2a:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f2c:	4a0c      	ldr	r2, [pc, #48]	@ (8002f60 <_sbrk+0x38>)
 8002f2e:	490d      	ldr	r1, [pc, #52]	@ (8002f64 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f30:	480d      	ldr	r0, [pc, #52]	@ (8002f68 <_sbrk+0x40>)
 8002f32:	6800      	ldr	r0, [r0, #0]
 8002f34:	b140      	cbz	r0, 8002f48 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f36:	480c      	ldr	r0, [pc, #48]	@ (8002f68 <_sbrk+0x40>)
 8002f38:	6800      	ldr	r0, [r0, #0]
 8002f3a:	4403      	add	r3, r0
 8002f3c:	1a52      	subs	r2, r2, r1
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d806      	bhi.n	8002f50 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002f42:	4a09      	ldr	r2, [pc, #36]	@ (8002f68 <_sbrk+0x40>)
 8002f44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8002f46:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002f48:	4807      	ldr	r0, [pc, #28]	@ (8002f68 <_sbrk+0x40>)
 8002f4a:	4c08      	ldr	r4, [pc, #32]	@ (8002f6c <_sbrk+0x44>)
 8002f4c:	6004      	str	r4, [r0, #0]
 8002f4e:	e7f2      	b.n	8002f36 <_sbrk+0xe>
    errno = ENOMEM;
 8002f50:	f016 febc 	bl	8019ccc <__errno>
 8002f54:	230c      	movs	r3, #12
 8002f56:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002f58:	f04f 30ff 	mov.w	r0, #4294967295
 8002f5c:	e7f3      	b.n	8002f46 <_sbrk+0x1e>
 8002f5e:	bf00      	nop
 8002f60:	24080000 	.word	0x24080000
 8002f64:	00000400 	.word	0x00000400
 8002f68:	240027b4 	.word	0x240027b4
 8002f6c:	240095a0 	.word	0x240095a0

08002f70 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002f70:	4a27      	ldr	r2, [pc, #156]	@ (8003010 <SystemInit+0xa0>)
 8002f72:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002f76:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f7a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002f7e:	4b25      	ldr	r3, [pc, #148]	@ (8003014 <SystemInit+0xa4>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	2b06      	cmp	r3, #6
 8002f88:	d806      	bhi.n	8002f98 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002f8a:	4a22      	ldr	r2, [pc, #136]	@ (8003014 <SystemInit+0xa4>)
 8002f8c:	6813      	ldr	r3, [r2, #0]
 8002f8e:	f023 030f 	bic.w	r3, r3, #15
 8002f92:	f043 0307 	orr.w	r3, r3, #7
 8002f96:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002f98:	4b1f      	ldr	r3, [pc, #124]	@ (8003018 <SystemInit+0xa8>)
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	f042 0201 	orr.w	r2, r2, #1
 8002fa0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002fa6:	6819      	ldr	r1, [r3, #0]
 8002fa8:	4a1c      	ldr	r2, [pc, #112]	@ (800301c <SystemInit+0xac>)
 8002faa:	400a      	ands	r2, r1
 8002fac:	601a      	str	r2, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002fae:	4b19      	ldr	r3, [pc, #100]	@ (8003014 <SystemInit+0xa4>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f013 0f08 	tst.w	r3, #8
 8002fb6:	d006      	beq.n	8002fc6 <SystemInit+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002fb8:	4a16      	ldr	r2, [pc, #88]	@ (8003014 <SystemInit+0xa4>)
 8002fba:	6813      	ldr	r3, [r2, #0]
 8002fbc:	f023 030f 	bic.w	r3, r3, #15
 8002fc0:	f043 0307 	orr.w	r3, r3, #7
 8002fc4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002fc6:	4b14      	ldr	r3, [pc, #80]	@ (8003018 <SystemInit+0xa8>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002fcc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002fce:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002fd0:	4913      	ldr	r1, [pc, #76]	@ (8003020 <SystemInit+0xb0>)
 8002fd2:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002fd4:	4913      	ldr	r1, [pc, #76]	@ (8003024 <SystemInit+0xb4>)
 8002fd6:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002fd8:	4913      	ldr	r1, [pc, #76]	@ (8003028 <SystemInit+0xb8>)
 8002fda:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002fdc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002fde:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002fe0:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002fe2:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002fe4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002fe6:	6819      	ldr	r1, [r3, #0]
 8002fe8:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 8002fec:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002fee:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002ff0:	4b0e      	ldr	r3, [pc, #56]	@ (800302c <SystemInit+0xbc>)
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8003030 <SystemInit+0xc0>)
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ffc:	d203      	bcs.n	8003006 <SystemInit+0x96>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8003034 <SystemInit+0xc4>)
 8003000:	2201      	movs	r2, #1
 8003002:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003006:	4b0c      	ldr	r3, [pc, #48]	@ (8003038 <SystemInit+0xc8>)
 8003008:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800300c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800300e:	4770      	bx	lr
 8003010:	e000ed00 	.word	0xe000ed00
 8003014:	52002000 	.word	0x52002000
 8003018:	58024400 	.word	0x58024400
 800301c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003020:	02020200 	.word	0x02020200
 8003024:	01ff0000 	.word	0x01ff0000
 8003028:	01010280 	.word	0x01010280
 800302c:	5c001000 	.word	0x5c001000
 8003030:	ffff0000 	.word	0xffff0000
 8003034:	51008000 	.word	0x51008000
 8003038:	52004000 	.word	0x52004000

0800303c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800303c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003074 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003040:	f7ff ff96 	bl	8002f70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003044:	480c      	ldr	r0, [pc, #48]	@ (8003078 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003046:	490d      	ldr	r1, [pc, #52]	@ (800307c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003048:	4a0d      	ldr	r2, [pc, #52]	@ (8003080 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800304a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800304c:	e002      	b.n	8003054 <LoopCopyDataInit>

0800304e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800304e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003052:	3304      	adds	r3, #4

08003054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003058:	d3f9      	bcc.n	800304e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800305a:	4a0a      	ldr	r2, [pc, #40]	@ (8003084 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800305c:	4c0a      	ldr	r4, [pc, #40]	@ (8003088 <LoopFillZerobss+0x22>)
  movs r3, #0
 800305e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003060:	e001      	b.n	8003066 <LoopFillZerobss>

08003062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003064:	3204      	adds	r2, #4

08003066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003068:	d3fb      	bcc.n	8003062 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800306a:	f016 fe35 	bl	8019cd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800306e:	f7fd fd8b 	bl	8000b88 <main>
  bx  lr
 8003072:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003074:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003078:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800307c:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 8003080:	0801a33c 	.word	0x0801a33c
  ldr r2, =_sbss
 8003084:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 8003088:	240095a0 	.word	0x240095a0

0800308c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800308c:	e7fe      	b.n	800308c <ADC3_IRQHandler>
	...

08003090 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003090:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003092:	2003      	movs	r0, #3
 8003094:	f000 fe2c 	bl	8003cf0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003098:	f003 fffa 	bl	8007090 <HAL_RCC_GetSysClockFreq>
 800309c:	490f      	ldr	r1, [pc, #60]	@ (80030dc <HAL_Init+0x4c>)
 800309e:	698b      	ldr	r3, [r1, #24]
 80030a0:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80030a4:	4a0e      	ldr	r2, [pc, #56]	@ (80030e0 <HAL_Init+0x50>)
 80030a6:	5cd3      	ldrb	r3, [r2, r3]
 80030a8:	f003 031f 	and.w	r3, r3, #31
 80030ac:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80030ae:	698b      	ldr	r3, [r1, #24]
 80030b0:	f003 030f 	and.w	r3, r3, #15
 80030b4:	5cd3      	ldrb	r3, [r2, r3]
 80030b6:	f003 031f 	and.w	r3, r3, #31
 80030ba:	fa20 f303 	lsr.w	r3, r0, r3
 80030be:	4a09      	ldr	r2, [pc, #36]	@ (80030e4 <HAL_Init+0x54>)
 80030c0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030c2:	4b09      	ldr	r3, [pc, #36]	@ (80030e8 <HAL_Init+0x58>)
 80030c4:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030c6:	2000      	movs	r0, #0
 80030c8:	f7ff fde2 	bl	8002c90 <HAL_InitTick>
 80030cc:	b110      	cbz	r0, 80030d4 <HAL_Init+0x44>
  {
    return HAL_ERROR;
 80030ce:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 80030d0:	4620      	mov	r0, r4
 80030d2:	bd10      	pop	{r4, pc}
 80030d4:	4604      	mov	r4, r0
  HAL_MspInit();
 80030d6:	f7fe ff93 	bl	8002000 <HAL_MspInit>
  return HAL_OK;
 80030da:	e7f9      	b.n	80030d0 <HAL_Init+0x40>
 80030dc:	58024400 	.word	0x58024400
 80030e0:	0801a018 	.word	0x0801a018
 80030e4:	24000000 	.word	0x24000000
 80030e8:	24000004 	.word	0x24000004

080030ec <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80030ec:	4b03      	ldr	r3, [pc, #12]	@ (80030fc <HAL_IncTick+0x10>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	4a03      	ldr	r2, [pc, #12]	@ (8003100 <HAL_IncTick+0x14>)
 80030f2:	6811      	ldr	r1, [r2, #0]
 80030f4:	440b      	add	r3, r1
 80030f6:	6013      	str	r3, [r2, #0]
}
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	24000008 	.word	0x24000008
 8003100:	240027b8 	.word	0x240027b8

08003104 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003104:	4b01      	ldr	r3, [pc, #4]	@ (800310c <HAL_GetTick+0x8>)
 8003106:	6818      	ldr	r0, [r3, #0]
}
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	240027b8 	.word	0x240027b8

08003110 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003110:	b538      	push	{r3, r4, r5, lr}
 8003112:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003114:	f7ff fff6 	bl	8003104 <HAL_GetTick>
 8003118:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800311a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800311e:	d002      	beq.n	8003126 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8003120:	4b04      	ldr	r3, [pc, #16]	@ (8003134 <HAL_Delay+0x24>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003126:	f7ff ffed 	bl	8003104 <HAL_GetTick>
 800312a:	1b40      	subs	r0, r0, r5
 800312c:	42a0      	cmp	r0, r4
 800312e:	d3fa      	bcc.n	8003126 <HAL_Delay+0x16>
  {
  }
}
 8003130:	bd38      	pop	{r3, r4, r5, pc}
 8003132:	bf00      	nop
 8003134:	24000008 	.word	0x24000008

08003138 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8003138:	4b01      	ldr	r3, [pc, #4]	@ (8003140 <HAL_GetREVID+0x8>)
 800313a:	6818      	ldr	r0, [r3, #0]
}
 800313c:	0c00      	lsrs	r0, r0, #16
 800313e:	4770      	bx	lr
 8003140:	5c001000 	.word	0x5c001000

08003144 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003144:	b410      	push	{r4}
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003146:	3030      	adds	r0, #48	@ 0x30
 8003148:	0a0b      	lsrs	r3, r1, #8
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	f003 030c 	and.w	r3, r3, #12

  MODIFY_REG(*preg,
 8003150:	58c4      	ldr	r4, [r0, r3]
 8003152:	f001 011f 	and.w	r1, r1, #31
 8003156:	f04f 0c1f 	mov.w	ip, #31
 800315a:	fa0c fc01 	lsl.w	ip, ip, r1
 800315e:	ea24 0c0c 	bic.w	ip, r4, ip
 8003162:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8003166:	408a      	lsls	r2, r1
 8003168:	ea4c 0202 	orr.w	r2, ip, r2
 800316c:	50c2      	str	r2, [r0, r3]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800316e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003172:	4770      	bx	lr

08003174 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003174:	b410      	push	{r4}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003176:	3014      	adds	r0, #20
 8003178:	0e4b      	lsrs	r3, r1, #25
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	f003 0304 	and.w	r3, r3, #4

  MODIFY_REG(*preg,
 8003180:	58c4      	ldr	r4, [r0, r3]
 8003182:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8003186:	f04f 0c07 	mov.w	ip, #7
 800318a:	fa0c fc01 	lsl.w	ip, ip, r1
 800318e:	ea24 0c0c 	bic.w	ip, r4, ip
 8003192:	408a      	lsls	r2, r1
 8003194:	ea4c 0202 	orr.w	r2, ip, r2
 8003198:	50c2      	str	r2, [r0, r3]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800319a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80031a0:	b570      	push	{r4, r5, r6, lr}
 80031a2:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80031a4:	2300      	movs	r3, #0
 80031a6:	9301      	str	r3, [sp, #4]
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031a8:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	f000 8224 	beq.w	80035fa <HAL_ADC_ConfigChannel+0x45a>
 80031b2:	4604      	mov	r4, r0
 80031b4:	460d      	mov	r5, r1
 80031b6:	2301      	movs	r3, #1
 80031b8:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031bc:	6802      	ldr	r2, [r0, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031be:	6893      	ldr	r3, [r2, #8]
 80031c0:	f013 0f04 	tst.w	r3, #4
 80031c4:	d009      	beq.n	80031da <HAL_ADC_ConfigChannel+0x3a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031c6:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80031c8:	f043 0320 	orr.w	r3, r3, #32
 80031cc:	6543      	str	r3, [r0, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80031ce:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031d0:	2300      	movs	r3, #0
 80031d2:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 80031d6:	b002      	add	sp, #8
 80031d8:	bd70      	pop	{r4, r5, r6, pc}
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80031da:	680b      	ldr	r3, [r1, #0]
 80031dc:	f3c3 0113 	ubfx	r1, r3, #0, #20
 80031e0:	2900      	cmp	r1, #0
 80031e2:	d13c      	bne.n	800325e <HAL_ADC_ConfigChannel+0xbe>
 80031e4:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80031e8:	2101      	movs	r1, #1
 80031ea:	4099      	lsls	r1, r3
 80031ec:	69d3      	ldr	r3, [r2, #28]
 80031ee:	430b      	orrs	r3, r1
 80031f0:	61d3      	str	r3, [r2, #28]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80031f2:	682a      	ldr	r2, [r5, #0]
 80031f4:	6869      	ldr	r1, [r5, #4]
 80031f6:	6820      	ldr	r0, [r4, #0]
 80031f8:	f7ff ffa4 	bl	8003144 <LL_ADC_REG_SetSequencerRanks>
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031fc:	6820      	ldr	r0, [r4, #0]
 80031fe:	6883      	ldr	r3, [r0, #8]
 8003200:	f013 0304 	ands.w	r3, r3, #4
 8003204:	d000      	beq.n	8003208 <HAL_ADC_ConfigChannel+0x68>
 8003206:	2301      	movs	r3, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003208:	6882      	ldr	r2, [r0, #8]
 800320a:	f012 0208 	ands.w	r2, r2, #8
 800320e:	d000      	beq.n	8003212 <HAL_ADC_ConfigChannel+0x72>
 8003210:	2201      	movs	r2, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003212:	ea52 0603 	orrs.w	r6, r2, r3
 8003216:	d02e      	beq.n	8003276 <HAL_ADC_ConfigChannel+0xd6>
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003218:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800321a:	6893      	ldr	r3, [r2, #8]
 800321c:	f013 0f01 	tst.w	r3, #1
 8003220:	f040 81e7 	bne.w	80035f2 <HAL_ADC_ConfigChannel+0x452>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003224:	682b      	ldr	r3, [r5, #0]
 8003226:	68e8      	ldr	r0, [r5, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8003228:	f8d2 10c0 	ldr.w	r1, [r2, #192]	@ 0xc0
 800322c:	f3c3 0613 	ubfx	r6, r3, #0, #20
 8003230:	ea21 0106 	bic.w	r1, r1, r6
 8003234:	f000 0618 	and.w	r6, r0, #24
 8003238:	48ae      	ldr	r0, [pc, #696]	@ (80034f4 <HAL_ADC_ConfigChannel+0x354>)
 800323a:	40f0      	lsrs	r0, r6
 800323c:	4003      	ands	r3, r0
 800323e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003242:	430b      	orrs	r3, r1
 8003244:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003248:	68ea      	ldr	r2, [r5, #12]
 800324a:	4bab      	ldr	r3, [pc, #684]	@ (80034f8 <HAL_ADC_ConfigChannel+0x358>)
 800324c:	429a      	cmp	r2, r3
 800324e:	f000 80a1 	beq.w	8003394 <HAL_ADC_ConfigChannel+0x1f4>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003252:	682b      	ldr	r3, [r5, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	f2c0 8153 	blt.w	8003500 <HAL_ADC_ConfigChannel+0x360>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800325a:	2000      	movs	r0, #0
 800325c:	e7b8      	b.n	80031d0 <HAL_ADC_ConfigChannel+0x30>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325e:	fa93 f3a3 	rbit	r3, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003262:	b133      	cbz	r3, 8003272 <HAL_ADC_ConfigChannel+0xd2>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8003264:	fab3 f383 	clz	r3, r3
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003268:	f003 031f 	and.w	r3, r3, #31
 800326c:	2101      	movs	r1, #1
 800326e:	4099      	lsls	r1, r3
 8003270:	e7bc      	b.n	80031ec <HAL_ADC_ConfigChannel+0x4c>
    return 32U;
 8003272:	2320      	movs	r3, #32
 8003274:	e7f8      	b.n	8003268 <HAL_ADC_ConfigChannel+0xc8>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003276:	68aa      	ldr	r2, [r5, #8]
 8003278:	6829      	ldr	r1, [r5, #0]
 800327a:	f7ff ff7b 	bl	8003174 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800327e:	4b9f      	ldr	r3, [pc, #636]	@ (80034fc <HAL_ADC_ConfigChannel+0x35c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003286:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800328a:	d00b      	beq.n	80032a4 <HAL_ADC_ConfigChannel+0x104>
 800328c:	6822      	ldr	r2, [r4, #0]
 800328e:	68d3      	ldr	r3, [r2, #12]
 8003290:	f013 0f10 	tst.w	r3, #16
 8003294:	d13b      	bne.n	800330e <HAL_ADC_ConfigChannel+0x16e>
 8003296:	696b      	ldr	r3, [r5, #20]
 8003298:	68d2      	ldr	r2, [r2, #12]
 800329a:	f3c2 0282 	ubfx	r2, r2, #2, #3
 800329e:	0052      	lsls	r2, r2, #1
 80032a0:	4093      	lsls	r3, r2
 80032a2:	e006      	b.n	80032b2 <HAL_ADC_ConfigChannel+0x112>
 80032a4:	696b      	ldr	r3, [r5, #20]
 80032a6:	6822      	ldr	r2, [r4, #0]
 80032a8:	68d2      	ldr	r2, [r2, #12]
 80032aa:	f3c2 0282 	ubfx	r2, r2, #2, #3
 80032ae:	0052      	lsls	r2, r2, #1
 80032b0:	4093      	lsls	r3, r2
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80032b2:	6929      	ldr	r1, [r5, #16]
 80032b4:	2904      	cmp	r1, #4
 80032b6:	d038      	beq.n	800332a <HAL_ADC_ConfigChannel+0x18a>
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80032b8:	6822      	ldr	r2, [r4, #0]
 80032ba:	6828      	ldr	r0, [r5, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032bc:	f102 0c60 	add.w	ip, r2, #96	@ 0x60
    MODIFY_REG(*preg,
 80032c0:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
 80032c4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80032c8:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 80032cc:	4303      	orrs	r3, r0
 80032ce:	4313      	orrs	r3, r2
 80032d0:	f84c 3021 	str.w	r3, [ip, r1, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80032d4:	6823      	ldr	r3, [r4, #0]
 80032d6:	6928      	ldr	r0, [r5, #16]
 80032d8:	7e6a      	ldrb	r2, [r5, #25]
 80032da:	2a01      	cmp	r2, #1
 80032dc:	d01f      	beq.n	800331e <HAL_ADC_ConfigChannel+0x17e>
 80032de:	4631      	mov	r1, r6
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032e0:	3360      	adds	r3, #96	@ 0x60
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80032e2:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80032e6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80032ea:	430a      	orrs	r2, r1
 80032ec:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80032f0:	6821      	ldr	r1, [r4, #0]
 80032f2:	692a      	ldr	r2, [r5, #16]
 80032f4:	7e2b      	ldrb	r3, [r5, #24]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d014      	beq.n	8003324 <HAL_ADC_ConfigChannel+0x184>
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80032fa:	690b      	ldr	r3, [r1, #16]
 80032fc:	f423 43f0 	bic.w	r3, r3, #30720	@ 0x7800
 8003300:	f002 021f 	and.w	r2, r2, #31
 8003304:	fa06 f202 	lsl.w	r2, r6, r2
 8003308:	4313      	orrs	r3, r2
 800330a:	610b      	str	r3, [r1, #16]
}
 800330c:	e784      	b.n	8003218 <HAL_ADC_ConfigChannel+0x78>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800330e:	696b      	ldr	r3, [r5, #20]
 8003310:	68d2      	ldr	r2, [r2, #12]
 8003312:	0892      	lsrs	r2, r2, #2
 8003314:	f002 0204 	and.w	r2, r2, #4
 8003318:	0052      	lsls	r2, r2, #1
 800331a:	4093      	lsls	r3, r2
 800331c:	e7c9      	b.n	80032b2 <HAL_ADC_ConfigChannel+0x112>
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800331e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003322:	e7dd      	b.n	80032e0 <HAL_ADC_ConfigChannel+0x140>
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003324:	f44f 6600 	mov.w	r6, #2048	@ 0x800
 8003328:	e7e7      	b.n	80032fa <HAL_ADC_ConfigChannel+0x15a>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800332a:	6822      	ldr	r2, [r4, #0]
 800332c:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 800332e:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
 8003332:	6829      	ldr	r1, [r5, #0]
 8003334:	ebb3 6f81 	cmp.w	r3, r1, lsl #26
 8003338:	d01d      	beq.n	8003376 <HAL_ADC_ConfigChannel+0x1d6>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800333a:	6822      	ldr	r2, [r4, #0]
 800333c:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 800333e:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
 8003342:	6829      	ldr	r1, [r5, #0]
 8003344:	ebb3 6f81 	cmp.w	r3, r1, lsl #26
 8003348:	d01a      	beq.n	8003380 <HAL_ADC_ConfigChannel+0x1e0>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800334a:	6822      	ldr	r2, [r4, #0]
 800334c:	6e93      	ldr	r3, [r2, #104]	@ 0x68
 800334e:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
 8003352:	6829      	ldr	r1, [r5, #0]
 8003354:	ebb3 6f81 	cmp.w	r3, r1, lsl #26
 8003358:	d017      	beq.n	800338a <HAL_ADC_ConfigChannel+0x1ea>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800335a:	6822      	ldr	r2, [r4, #0]
 800335c:	6ed3      	ldr	r3, [r2, #108]	@ 0x6c
 800335e:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
 8003362:	6829      	ldr	r1, [r5, #0]
 8003364:	ebb3 6f81 	cmp.w	r3, r1, lsl #26
 8003368:	f47f af56 	bne.w	8003218 <HAL_ADC_ConfigChannel+0x78>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800336c:	6ed3      	ldr	r3, [r2, #108]	@ 0x6c
 800336e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003372:	66d3      	str	r3, [r2, #108]	@ 0x6c
 8003374:	e750      	b.n	8003218 <HAL_ADC_ConfigChannel+0x78>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003376:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8003378:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800337c:	6613      	str	r3, [r2, #96]	@ 0x60
 800337e:	e7dc      	b.n	800333a <HAL_ADC_ConfigChannel+0x19a>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003380:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 8003382:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003386:	6653      	str	r3, [r2, #100]	@ 0x64
 8003388:	e7df      	b.n	800334a <HAL_ADC_ConfigChannel+0x1aa>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800338a:	6e93      	ldr	r3, [r2, #104]	@ 0x68
 800338c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003390:	6693      	str	r3, [r2, #104]	@ 0x68
 8003392:	e7e2      	b.n	800335a <HAL_ADC_ConfigChannel+0x1ba>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003394:	6820      	ldr	r0, [r4, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003396:	682b      	ldr	r3, [r5, #0]
 8003398:	f3c3 0613 	ubfx	r6, r3, #0, #20
 800339c:	bb3e      	cbnz	r6, 80033ee <HAL_ADC_ConfigChannel+0x24e>
 800339e:	0e9a      	lsrs	r2, r3, #26
 80033a0:	3201      	adds	r2, #1
 80033a2:	f002 021f 	and.w	r2, r2, #31
 80033a6:	2a09      	cmp	r2, #9
 80033a8:	bf8c      	ite	hi
 80033aa:	2200      	movhi	r2, #0
 80033ac:	2201      	movls	r2, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033ae:	2a00      	cmp	r2, #0
 80033b0:	d055      	beq.n	800345e <HAL_ADC_ConfigChannel+0x2be>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80033b2:	bb5e      	cbnz	r6, 800340c <HAL_ADC_ConfigChannel+0x26c>
 80033b4:	0e99      	lsrs	r1, r3, #26
 80033b6:	3101      	adds	r1, #1
 80033b8:	0689      	lsls	r1, r1, #26
 80033ba:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 80033be:	bb8e      	cbnz	r6, 8003424 <HAL_ADC_ConfigChannel+0x284>
 80033c0:	ea4f 6c93 	mov.w	ip, r3, lsr #26
 80033c4:	f10c 0c01 	add.w	ip, ip, #1
 80033c8:	f00c 0c1f 	and.w	ip, ip, #31
 80033cc:	2201      	movs	r2, #1
 80033ce:	fa02 f20c 	lsl.w	r2, r2, ip
 80033d2:	4311      	orrs	r1, r2
 80033d4:	bbae      	cbnz	r6, 8003442 <HAL_ADC_ConfigChannel+0x2a2>
 80033d6:	0e9b      	lsrs	r3, r3, #26
 80033d8:	3301      	adds	r3, #1
 80033da:	f003 031f 	and.w	r3, r3, #31
 80033de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80033e2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033e4:	4319      	orrs	r1, r3
 80033e6:	68aa      	ldr	r2, [r5, #8]
 80033e8:	f7ff fec4 	bl	8003174 <LL_ADC_SetChannelSamplingTime>
 80033ec:	e731      	b.n	8003252 <HAL_ADC_ConfigChannel+0xb2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ee:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 80033f2:	b14a      	cbz	r2, 8003408 <HAL_ADC_ConfigChannel+0x268>
  return __builtin_clz(value);
 80033f4:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80033f8:	3201      	adds	r2, #1
 80033fa:	f002 021f 	and.w	r2, r2, #31
 80033fe:	2a09      	cmp	r2, #9
 8003400:	bf8c      	ite	hi
 8003402:	2200      	movhi	r2, #0
 8003404:	2201      	movls	r2, #1
 8003406:	e7d2      	b.n	80033ae <HAL_ADC_ConfigChannel+0x20e>
    return 32U;
 8003408:	2220      	movs	r2, #32
 800340a:	e7f5      	b.n	80033f8 <HAL_ADC_ConfigChannel+0x258>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340c:	fa93 f1a3 	rbit	r1, r3
  if (value == 0U)
 8003410:	b131      	cbz	r1, 8003420 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8003412:	fab1 f181 	clz	r1, r1
 8003416:	3101      	adds	r1, #1
 8003418:	0689      	lsls	r1, r1, #26
 800341a:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 800341e:	e7ce      	b.n	80033be <HAL_ADC_ConfigChannel+0x21e>
    return 32U;
 8003420:	2120      	movs	r1, #32
 8003422:	e7f8      	b.n	8003416 <HAL_ADC_ConfigChannel+0x276>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003424:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 8003428:	b14a      	cbz	r2, 800343e <HAL_ADC_ConfigChannel+0x29e>
  return __builtin_clz(value);
 800342a:	fab2 f282 	clz	r2, r2
 800342e:	3201      	adds	r2, #1
 8003430:	f002 021f 	and.w	r2, r2, #31
 8003434:	f04f 0c01 	mov.w	ip, #1
 8003438:	fa0c f202 	lsl.w	r2, ip, r2
 800343c:	e7c9      	b.n	80033d2 <HAL_ADC_ConfigChannel+0x232>
    return 32U;
 800343e:	2220      	movs	r2, #32
 8003440:	e7f5      	b.n	800342e <HAL_ADC_ConfigChannel+0x28e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003442:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8003446:	b143      	cbz	r3, 800345a <HAL_ADC_ConfigChannel+0x2ba>
  return __builtin_clz(value);
 8003448:	fab3 f383 	clz	r3, r3
 800344c:	3301      	adds	r3, #1
 800344e:	f003 031f 	and.w	r3, r3, #31
 8003452:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003456:	051b      	lsls	r3, r3, #20
 8003458:	e7c4      	b.n	80033e4 <HAL_ADC_ConfigChannel+0x244>
    return 32U;
 800345a:	2320      	movs	r3, #32
 800345c:	e7f6      	b.n	800344c <HAL_ADC_ConfigChannel+0x2ac>
 800345e:	b9e6      	cbnz	r6, 800349a <HAL_ADC_ConfigChannel+0x2fa>
 8003460:	0e99      	lsrs	r1, r3, #26
 8003462:	3101      	adds	r1, #1
 8003464:	0689      	lsls	r1, r1, #26
 8003466:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 800346a:	bb16      	cbnz	r6, 80034b2 <HAL_ADC_ConfigChannel+0x312>
 800346c:	ea4f 6c93 	mov.w	ip, r3, lsr #26
 8003470:	f10c 0c01 	add.w	ip, ip, #1
 8003474:	f00c 0c1f 	and.w	ip, ip, #31
 8003478:	2201      	movs	r2, #1
 800347a:	fa02 f20c 	lsl.w	r2, r2, ip
 800347e:	4311      	orrs	r1, r2
 8003480:	bb36      	cbnz	r6, 80034d0 <HAL_ADC_ConfigChannel+0x330>
 8003482:	0e9b      	lsrs	r3, r3, #26
 8003484:	3301      	adds	r3, #1
 8003486:	f003 031f 	and.w	r3, r3, #31
 800348a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800348e:	3b1e      	subs	r3, #30
 8003490:	051b      	lsls	r3, r3, #20
 8003492:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003496:	4319      	orrs	r1, r3
 8003498:	e7a5      	b.n	80033e6 <HAL_ADC_ConfigChannel+0x246>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349a:	fa93 f1a3 	rbit	r1, r3
  if (value == 0U)
 800349e:	b131      	cbz	r1, 80034ae <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 80034a0:	fab1 f181 	clz	r1, r1
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80034a4:	3101      	adds	r1, #1
 80034a6:	0689      	lsls	r1, r1, #26
 80034a8:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 80034ac:	e7dd      	b.n	800346a <HAL_ADC_ConfigChannel+0x2ca>
    return 32U;
 80034ae:	2120      	movs	r1, #32
 80034b0:	e7f8      	b.n	80034a4 <HAL_ADC_ConfigChannel+0x304>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b2:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 80034b6:	b14a      	cbz	r2, 80034cc <HAL_ADC_ConfigChannel+0x32c>
  return __builtin_clz(value);
 80034b8:	fab2 f282 	clz	r2, r2
 80034bc:	3201      	adds	r2, #1
 80034be:	f002 021f 	and.w	r2, r2, #31
 80034c2:	f04f 0c01 	mov.w	ip, #1
 80034c6:	fa0c f202 	lsl.w	r2, ip, r2
 80034ca:	e7d8      	b.n	800347e <HAL_ADC_ConfigChannel+0x2de>
    return 32U;
 80034cc:	2220      	movs	r2, #32
 80034ce:	e7f5      	b.n	80034bc <HAL_ADC_ConfigChannel+0x31c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d0:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80034d4:	b15b      	cbz	r3, 80034ee <HAL_ADC_ConfigChannel+0x34e>
  return __builtin_clz(value);
 80034d6:	fab3 f383 	clz	r3, r3
 80034da:	3301      	adds	r3, #1
 80034dc:	f003 031f 	and.w	r3, r3, #31
 80034e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80034e4:	3b1e      	subs	r3, #30
 80034e6:	051b      	lsls	r3, r3, #20
 80034e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80034ec:	e7d3      	b.n	8003496 <HAL_ADC_ConfigChannel+0x2f6>
    return 32U;
 80034ee:	2320      	movs	r3, #32
 80034f0:	e7f3      	b.n	80034da <HAL_ADC_ConfigChannel+0x33a>
 80034f2:	bf00      	nop
 80034f4:	000fffff 	.word	0x000fffff
 80034f8:	47ff0000 	.word	0x47ff0000
 80034fc:	5c001000 	.word	0x5c001000
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003500:	6822      	ldr	r2, [r4, #0]
 8003502:	493f      	ldr	r1, [pc, #252]	@ (8003600 <HAL_ADC_ConfigChannel+0x460>)
 8003504:	483f      	ldr	r0, [pc, #252]	@ (8003604 <HAL_ADC_ConfigChannel+0x464>)
 8003506:	4282      	cmp	r2, r0
 8003508:	bf18      	it	ne
 800350a:	428a      	cmpne	r2, r1
 800350c:	bf0c      	ite	eq
 800350e:	2101      	moveq	r1, #1
 8003510:	2100      	movne	r1, #0
 8003512:	d118      	bne.n	8003546 <HAL_ADC_ConfigChannel+0x3a6>
 8003514:	4e3c      	ldr	r6, [pc, #240]	@ (8003608 <HAL_ADC_ConfigChannel+0x468>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003516:	68b5      	ldr	r5, [r6, #8]
 8003518:	f005 7ce0 	and.w	ip, r5, #29360128	@ 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800351c:	b1a9      	cbz	r1, 800354a <HAL_ADC_ConfigChannel+0x3aa>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800351e:	4938      	ldr	r1, [pc, #224]	@ (8003600 <HAL_ADC_ConfigChannel+0x460>)
 8003520:	6888      	ldr	r0, [r1, #8]
 8003522:	f010 0001 	ands.w	r0, r0, #1
 8003526:	d000      	beq.n	800352a <HAL_ADC_ConfigChannel+0x38a>
 8003528:	2001      	movs	r0, #1
 800352a:	4936      	ldr	r1, [pc, #216]	@ (8003604 <HAL_ADC_ConfigChannel+0x464>)
 800352c:	6889      	ldr	r1, [r1, #8]
 800352e:	f011 0101 	ands.w	r1, r1, #1
 8003532:	d000      	beq.n	8003536 <HAL_ADC_ConfigChannel+0x396>
 8003534:	2101      	movs	r1, #1
 8003536:	4301      	orrs	r1, r0
 8003538:	d00c      	beq.n	8003554 <HAL_ADC_ConfigChannel+0x3b4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800353a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800353c:	f043 0320 	orr.w	r3, r3, #32
 8003540:	6563      	str	r3, [r4, #84]	@ 0x54
          tmp_hal_status = HAL_ERROR;
 8003542:	2001      	movs	r0, #1
 8003544:	e644      	b.n	80031d0 <HAL_ADC_ConfigChannel+0x30>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003546:	4e31      	ldr	r6, [pc, #196]	@ (800360c <HAL_ADC_ConfigChannel+0x46c>)
 8003548:	e7e5      	b.n	8003516 <HAL_ADC_ConfigChannel+0x376>
 800354a:	4931      	ldr	r1, [pc, #196]	@ (8003610 <HAL_ADC_ConfigChannel+0x470>)
 800354c:	6889      	ldr	r1, [r1, #8]
 800354e:	f011 0f01 	tst.w	r1, #1
 8003552:	d1f2      	bne.n	800353a <HAL_ADC_ConfigChannel+0x39a>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003554:	492f      	ldr	r1, [pc, #188]	@ (8003614 <HAL_ADC_ConfigChannel+0x474>)
 8003556:	428b      	cmp	r3, r1
 8003558:	d007      	beq.n	800356a <HAL_ADC_ConfigChannel+0x3ca>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800355a:	492f      	ldr	r1, [pc, #188]	@ (8003618 <HAL_ADC_ConfigChannel+0x478>)
 800355c:	428b      	cmp	r3, r1
 800355e:	d026      	beq.n	80035ae <HAL_ADC_ConfigChannel+0x40e>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003560:	492e      	ldr	r1, [pc, #184]	@ (800361c <HAL_ADC_ConfigChannel+0x47c>)
 8003562:	428b      	cmp	r3, r1
 8003564:	d034      	beq.n	80035d0 <HAL_ADC_ConfigChannel+0x430>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003566:	2000      	movs	r0, #0
 8003568:	e632      	b.n	80031d0 <HAL_ADC_ConfigChannel+0x30>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800356a:	f415 0f00 	tst.w	r5, #8388608	@ 0x800000
 800356e:	d1f4      	bne.n	800355a <HAL_ADC_ConfigChannel+0x3ba>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003570:	4b27      	ldr	r3, [pc, #156]	@ (8003610 <HAL_ADC_ConfigChannel+0x470>)
 8003572:	429a      	cmp	r2, r3
 8003574:	d001      	beq.n	800357a <HAL_ADC_ConfigChannel+0x3da>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003576:	2000      	movs	r0, #0
 8003578:	e62a      	b.n	80031d0 <HAL_ADC_ConfigChannel+0x30>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800357a:	f44c 0300 	orr.w	r3, ip, #8388608	@ 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800357e:	68b2      	ldr	r2, [r6, #8]
 8003580:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8003584:	4313      	orrs	r3, r2
 8003586:	60b3      	str	r3, [r6, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003588:	4b25      	ldr	r3, [pc, #148]	@ (8003620 <HAL_ADC_ConfigChannel+0x480>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	099b      	lsrs	r3, r3, #6
 800358e:	4a25      	ldr	r2, [pc, #148]	@ (8003624 <HAL_ADC_ConfigChannel+0x484>)
 8003590:	fba2 2303 	umull	r2, r3, r2, r3
 8003594:	099b      	lsrs	r3, r3, #6
 8003596:	3301      	adds	r3, #1
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	9301      	str	r3, [sp, #4]
              while (wait_loop_index != 0UL)
 800359c:	e002      	b.n	80035a4 <HAL_ADC_ConfigChannel+0x404>
                wait_loop_index--;
 800359e:	9b01      	ldr	r3, [sp, #4]
 80035a0:	3b01      	subs	r3, #1
 80035a2:	9301      	str	r3, [sp, #4]
              while (wait_loop_index != 0UL)
 80035a4:	9b01      	ldr	r3, [sp, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1f9      	bne.n	800359e <HAL_ADC_ConfigChannel+0x3fe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035aa:	2000      	movs	r0, #0
 80035ac:	e610      	b.n	80031d0 <HAL_ADC_ConfigChannel+0x30>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80035ae:	f015 7f80 	tst.w	r5, #16777216	@ 0x1000000
 80035b2:	d1d5      	bne.n	8003560 <HAL_ADC_ConfigChannel+0x3c0>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035b4:	4b16      	ldr	r3, [pc, #88]	@ (8003610 <HAL_ADC_ConfigChannel+0x470>)
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d001      	beq.n	80035be <HAL_ADC_ConfigChannel+0x41e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035ba:	2000      	movs	r0, #0
 80035bc:	e608      	b.n	80031d0 <HAL_ADC_ConfigChannel+0x30>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80035be:	f04c 7380 	orr.w	r3, ip, #16777216	@ 0x1000000
 80035c2:	68b2      	ldr	r2, [r6, #8]
 80035c4:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 80035c8:	4313      	orrs	r3, r2
 80035ca:	60b3      	str	r3, [r6, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035cc:	2000      	movs	r0, #0
}
 80035ce:	e5ff      	b.n	80031d0 <HAL_ADC_ConfigChannel+0x30>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80035d0:	f415 0f80 	tst.w	r5, #4194304	@ 0x400000
 80035d4:	d10f      	bne.n	80035f6 <HAL_ADC_ConfigChannel+0x456>
            if (ADC_VREFINT_INSTANCE(hadc))
 80035d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003610 <HAL_ADC_ConfigChannel+0x470>)
 80035d8:	429a      	cmp	r2, r3
 80035da:	d001      	beq.n	80035e0 <HAL_ADC_ConfigChannel+0x440>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035dc:	2000      	movs	r0, #0
 80035de:	e5f7      	b.n	80031d0 <HAL_ADC_ConfigChannel+0x30>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80035e0:	f44c 0380 	orr.w	r3, ip, #4194304	@ 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80035e4:	68b2      	ldr	r2, [r6, #8]
 80035e6:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 80035ea:	4313      	orrs	r3, r2
 80035ec:	60b3      	str	r3, [r6, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035ee:	2000      	movs	r0, #0
}
 80035f0:	e5ee      	b.n	80031d0 <HAL_ADC_ConfigChannel+0x30>
 80035f2:	2000      	movs	r0, #0
 80035f4:	e5ec      	b.n	80031d0 <HAL_ADC_ConfigChannel+0x30>
 80035f6:	2000      	movs	r0, #0
 80035f8:	e5ea      	b.n	80031d0 <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 80035fa:	2002      	movs	r0, #2
 80035fc:	e5eb      	b.n	80031d6 <HAL_ADC_ConfigChannel+0x36>
 80035fe:	bf00      	nop
 8003600:	40022000 	.word	0x40022000
 8003604:	40022100 	.word	0x40022100
 8003608:	40022300 	.word	0x40022300
 800360c:	58026300 	.word	0x58026300
 8003610:	58026000 	.word	0x58026000
 8003614:	cb840000 	.word	0xcb840000
 8003618:	c7520000 	.word	0xc7520000
 800361c:	cfb80000 	.word	0xcfb80000
 8003620:	24000004 	.word	0x24000004
 8003624:	053e2d63 	.word	0x053e2d63

08003628 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003628:	b538      	push	{r3, r4, r5, lr}
 800362a:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800362c:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800362e:	6893      	ldr	r3, [r2, #8]
 8003630:	f013 0302 	ands.w	r3, r3, #2
 8003634:	d000      	beq.n	8003638 <ADC_Disable+0x10>
 8003636:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003638:	6891      	ldr	r1, [r2, #8]
 800363a:	f011 0f01 	tst.w	r1, #1
 800363e:	d037      	beq.n	80036b0 <ADC_Disable+0x88>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 8003640:	2b00      	cmp	r3, #0
 8003642:	d137      	bne.n	80036b4 <ADC_Disable+0x8c>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003644:	6893      	ldr	r3, [r2, #8]
 8003646:	f003 030d 	and.w	r3, r3, #13
 800364a:	2b01      	cmp	r3, #1
 800364c:	d009      	beq.n	8003662 <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800364e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003650:	f043 0310 	orr.w	r3, r3, #16
 8003654:	6563      	str	r3, [r4, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003656:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003658:	f043 0301 	orr.w	r3, r3, #1
 800365c:	65a3      	str	r3, [r4, #88]	@ 0x58

      return HAL_ERROR;
 800365e:	2001      	movs	r0, #1
 8003660:	e027      	b.n	80036b2 <ADC_Disable+0x8a>
  MODIFY_REG(ADCx->CR,
 8003662:	6891      	ldr	r1, [r2, #8]
 8003664:	4b14      	ldr	r3, [pc, #80]	@ (80036b8 <ADC_Disable+0x90>)
 8003666:	400b      	ands	r3, r1
 8003668:	f043 0302 	orr.w	r3, r3, #2
 800366c:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800366e:	6823      	ldr	r3, [r4, #0]
 8003670:	2203      	movs	r2, #3
 8003672:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003674:	f7ff fd46 	bl	8003104 <HAL_GetTick>
 8003678:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800367a:	6823      	ldr	r3, [r4, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f013 0f01 	tst.w	r3, #1
 8003682:	d013      	beq.n	80036ac <ADC_Disable+0x84>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003684:	f7ff fd3e 	bl	8003104 <HAL_GetTick>
 8003688:	1b40      	subs	r0, r0, r5
 800368a:	2802      	cmp	r0, #2
 800368c:	d9f5      	bls.n	800367a <ADC_Disable+0x52>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800368e:	6823      	ldr	r3, [r4, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f013 0f01 	tst.w	r3, #1
 8003696:	d0f0      	beq.n	800367a <ADC_Disable+0x52>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003698:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800369a:	f043 0310 	orr.w	r3, r3, #16
 800369e:	6563      	str	r3, [r4, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036a0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80036a2:	f043 0301 	orr.w	r3, r3, #1
 80036a6:	65a3      	str	r3, [r4, #88]	@ 0x58

          return HAL_ERROR;
 80036a8:	2001      	movs	r0, #1
 80036aa:	e002      	b.n	80036b2 <ADC_Disable+0x8a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80036ac:	2000      	movs	r0, #0
 80036ae:	e000      	b.n	80036b2 <ADC_Disable+0x8a>
 80036b0:	2000      	movs	r0, #0
}
 80036b2:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 80036b4:	2000      	movs	r0, #0
 80036b6:	e7fc      	b.n	80036b2 <ADC_Disable+0x8a>
 80036b8:	7fffffc0 	.word	0x7fffffc0

080036bc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80036bc:	b538      	push	{r3, r4, r5, lr}
 80036be:	4604      	mov	r4, r0
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80036c0:	6803      	ldr	r3, [r0, #0]
 80036c2:	494f      	ldr	r1, [pc, #316]	@ (8003800 <ADC_ConfigureBoostMode+0x144>)
 80036c4:	4a4f      	ldr	r2, [pc, #316]	@ (8003804 <ADC_ConfigureBoostMode+0x148>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	bf18      	it	ne
 80036ca:	428b      	cmpne	r3, r1
 80036cc:	d123      	bne.n	8003716 <ADC_ConfigureBoostMode+0x5a>
 80036ce:	4b4e      	ldr	r3, [pc, #312]	@ (8003808 <ADC_ConfigureBoostMode+0x14c>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 80036d6:	bf14      	ite	ne
 80036d8:	2301      	movne	r3, #1
 80036da:	2300      	moveq	r3, #0
 80036dc:	b34b      	cbz	r3, 8003732 <ADC_ConfigureBoostMode+0x76>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80036de:	f003 ff1b 	bl	8007518 <HAL_RCC_GetHCLKFreq>
 80036e2:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 80036e4:	6863      	ldr	r3, [r4, #4]
 80036e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80036ea:	d01c      	beq.n	8003726 <ADC_ConfigureBoostMode+0x6a>
 80036ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80036f0:	d01d      	beq.n	800372e <ADC_ConfigureBoostMode+0x72>
 80036f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036f6:	d016      	beq.n	8003726 <ADC_ConfigureBoostMode+0x6a>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80036f8:	f7ff fd1e 	bl	8003138 <HAL_GetREVID>
 80036fc:	f241 0303 	movw	r3, #4099	@ 0x1003
 8003700:	4298      	cmp	r0, r3
 8003702:	d857      	bhi.n	80037b4 <ADC_ConfigureBoostMode+0xf8>
  {
    if (freq > 20000000UL)
 8003704:	4b41      	ldr	r3, [pc, #260]	@ (800380c <ADC_ConfigureBoostMode+0x150>)
 8003706:	429d      	cmp	r5, r3
 8003708:	d94e      	bls.n	80037a8 <ADC_ConfigureBoostMode+0xec>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800370a:	6822      	ldr	r2, [r4, #0]
 800370c:	6893      	ldr	r3, [r2, #8]
 800370e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003712:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003714:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003716:	4b3e      	ldr	r3, [pc, #248]	@ (8003810 <ADC_ConfigureBoostMode+0x154>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 800371e:	bf14      	ite	ne
 8003720:	2301      	movne	r3, #1
 8003722:	2300      	moveq	r3, #0
 8003724:	e7da      	b.n	80036dc <ADC_ConfigureBoostMode+0x20>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003726:	0c1b      	lsrs	r3, r3, #16
 8003728:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 800372c:	e7e4      	b.n	80036f8 <ADC_ConfigureBoostMode+0x3c>
        freq /= 4UL;
 800372e:	0885      	lsrs	r5, r0, #2
        break;
 8003730:	e7e2      	b.n	80036f8 <ADC_ConfigureBoostMode+0x3c>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003732:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003736:	f005 f859 	bl	80087ec <HAL_RCCEx_GetPeriphCLKFreq>
 800373a:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 800373c:	6863      	ldr	r3, [r4, #4]
 800373e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003742:	d02d      	beq.n	80037a0 <ADC_ConfigureBoostMode+0xe4>
 8003744:	d822      	bhi.n	800378c <ADC_ConfigureBoostMode+0xd0>
 8003746:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800374a:	d027      	beq.n	800379c <ADC_ConfigureBoostMode+0xe0>
 800374c:	d904      	bls.n	8003758 <ADC_ConfigureBoostMode+0x9c>
 800374e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003752:	d1d1      	bne.n	80036f8 <ADC_ConfigureBoostMode+0x3c>
        freq /= 32UL;
 8003754:	0945      	lsrs	r5, r0, #5
        break;
 8003756:	e7cf      	b.n	80036f8 <ADC_ConfigureBoostMode+0x3c>
    switch (hadc->Init.ClockPrescaler)
 8003758:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800375c:	d00d      	beq.n	800377a <ADC_ConfigureBoostMode+0xbe>
 800375e:	d906      	bls.n	800376e <ADC_ConfigureBoostMode+0xb2>
 8003760:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003764:	d009      	beq.n	800377a <ADC_ConfigureBoostMode+0xbe>
 8003766:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800376a:	d006      	beq.n	800377a <ADC_ConfigureBoostMode+0xbe>
 800376c:	e7c4      	b.n	80036f8 <ADC_ConfigureBoostMode+0x3c>
 800376e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003772:	d002      	beq.n	800377a <ADC_ConfigureBoostMode+0xbe>
 8003774:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003778:	d104      	bne.n	8003784 <ADC_ConfigureBoostMode+0xc8>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800377a:	0c9b      	lsrs	r3, r3, #18
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 8003782:	e7b9      	b.n	80036f8 <ADC_ConfigureBoostMode+0x3c>
    switch (hadc->Init.ClockPrescaler)
 8003784:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003788:	d0f7      	beq.n	800377a <ADC_ConfigureBoostMode+0xbe>
 800378a:	e7b5      	b.n	80036f8 <ADC_ConfigureBoostMode+0x3c>
 800378c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003790:	d008      	beq.n	80037a4 <ADC_ConfigureBoostMode+0xe8>
 8003792:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003796:	d1af      	bne.n	80036f8 <ADC_ConfigureBoostMode+0x3c>
        freq /= 256UL;
 8003798:	0a05      	lsrs	r5, r0, #8
        break;
 800379a:	e7ad      	b.n	80036f8 <ADC_ConfigureBoostMode+0x3c>
        freq /= 16UL;
 800379c:	0905      	lsrs	r5, r0, #4
        break;
 800379e:	e7ab      	b.n	80036f8 <ADC_ConfigureBoostMode+0x3c>
        freq /= 64UL;
 80037a0:	0985      	lsrs	r5, r0, #6
        break;
 80037a2:	e7a9      	b.n	80036f8 <ADC_ConfigureBoostMode+0x3c>
        freq /= 128UL;
 80037a4:	09c5      	lsrs	r5, r0, #7
        break;
 80037a6:	e7a7      	b.n	80036f8 <ADC_ConfigureBoostMode+0x3c>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80037a8:	6822      	ldr	r2, [r4, #0]
 80037aa:	6893      	ldr	r3, [r2, #8]
 80037ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037b0:	6093      	str	r3, [r2, #8]
 80037b2:	e7af      	b.n	8003714 <ADC_ConfigureBoostMode+0x58>
    if (freq <= 6250000UL)
 80037b4:	4b17      	ldr	r3, [pc, #92]	@ (8003814 <ADC_ConfigureBoostMode+0x158>)
 80037b6:	429d      	cmp	r5, r3
 80037b8:	d805      	bhi.n	80037c6 <ADC_ConfigureBoostMode+0x10a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80037ba:	6822      	ldr	r2, [r4, #0]
 80037bc:	6893      	ldr	r3, [r2, #8]
 80037be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037c2:	6093      	str	r3, [r2, #8]
 80037c4:	e7a6      	b.n	8003714 <ADC_ConfigureBoostMode+0x58>
    else if (freq <= 12500000UL)
 80037c6:	4b14      	ldr	r3, [pc, #80]	@ (8003818 <ADC_ConfigureBoostMode+0x15c>)
 80037c8:	429d      	cmp	r5, r3
 80037ca:	d807      	bhi.n	80037dc <ADC_ConfigureBoostMode+0x120>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80037cc:	6822      	ldr	r2, [r4, #0]
 80037ce:	6893      	ldr	r3, [r2, #8]
 80037d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037d8:	6093      	str	r3, [r2, #8]
 80037da:	e79b      	b.n	8003714 <ADC_ConfigureBoostMode+0x58>
    else if (freq <= 25000000UL)
 80037dc:	4b0f      	ldr	r3, [pc, #60]	@ (800381c <ADC_ConfigureBoostMode+0x160>)
 80037de:	429d      	cmp	r5, r3
 80037e0:	d807      	bhi.n	80037f2 <ADC_ConfigureBoostMode+0x136>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80037e2:	6822      	ldr	r2, [r4, #0]
 80037e4:	6893      	ldr	r3, [r2, #8]
 80037e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80037ee:	6093      	str	r3, [r2, #8]
 80037f0:	e790      	b.n	8003714 <ADC_ConfigureBoostMode+0x58>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80037f2:	6822      	ldr	r2, [r4, #0]
 80037f4:	6893      	ldr	r3, [r2, #8]
 80037f6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80037fa:	6093      	str	r3, [r2, #8]
}
 80037fc:	e78a      	b.n	8003714 <ADC_ConfigureBoostMode+0x58>
 80037fe:	bf00      	nop
 8003800:	40022000 	.word	0x40022000
 8003804:	40022100 	.word	0x40022100
 8003808:	40022300 	.word	0x40022300
 800380c:	01312d00 	.word	0x01312d00
 8003810:	58026300 	.word	0x58026300
 8003814:	00bebc21 	.word	0x00bebc21
 8003818:	017d7841 	.word	0x017d7841
 800381c:	02faf081 	.word	0x02faf081

08003820 <HAL_ADC_Init>:
{
 8003820:	b530      	push	{r4, r5, lr}
 8003822:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8003824:	2300      	movs	r3, #0
 8003826:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8003828:	2800      	cmp	r0, #0
 800382a:	f000 810a 	beq.w	8003a42 <HAL_ADC_Init+0x222>
 800382e:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003830:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8003832:	b1eb      	cbz	r3, 8003870 <HAL_ADC_Init+0x50>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003834:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	f012 5f00 	tst.w	r2, #536870912	@ 0x20000000
 800383c:	d003      	beq.n	8003846 <HAL_ADC_Init+0x26>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800383e:	6899      	ldr	r1, [r3, #8]
 8003840:	4a81      	ldr	r2, [pc, #516]	@ (8003a48 <HAL_ADC_Init+0x228>)
 8003842:	400a      	ands	r2, r1
 8003844:	609a      	str	r2, [r3, #8]
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003846:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003848:	689a      	ldr	r2, [r3, #8]
 800384a:	f012 5f80 	tst.w	r2, #268435456	@ 0x10000000
 800384e:	d11c      	bne.n	800388a <HAL_ADC_Init+0x6a>
  MODIFY_REG(ADCx->CR,
 8003850:	6899      	ldr	r1, [r3, #8]
 8003852:	4a7e      	ldr	r2, [pc, #504]	@ (8003a4c <HAL_ADC_Init+0x22c>)
 8003854:	400a      	ands	r2, r1
 8003856:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800385a:	609a      	str	r2, [r3, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800385c:	4b7c      	ldr	r3, [pc, #496]	@ (8003a50 <HAL_ADC_Init+0x230>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	099b      	lsrs	r3, r3, #6
 8003862:	4a7c      	ldr	r2, [pc, #496]	@ (8003a54 <HAL_ADC_Init+0x234>)
 8003864:	fba2 2303 	umull	r2, r3, r2, r3
 8003868:	099b      	lsrs	r3, r3, #6
 800386a:	3301      	adds	r3, #1
 800386c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800386e:	e009      	b.n	8003884 <HAL_ADC_Init+0x64>
    HAL_ADC_MspInit(hadc);
 8003870:	f7fe fbe0 	bl	8002034 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003874:	2300      	movs	r3, #0
 8003876:	65a3      	str	r3, [r4, #88]	@ 0x58
    hadc->Lock = HAL_UNLOCKED;
 8003878:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
 800387c:	e7da      	b.n	8003834 <HAL_ADC_Init+0x14>
      wait_loop_index--;
 800387e:	9b01      	ldr	r3, [sp, #4]
 8003880:	3b01      	subs	r3, #1
 8003882:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003884:	9b01      	ldr	r3, [sp, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1f9      	bne.n	800387e <HAL_ADC_Init+0x5e>
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800388a:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800388c:	6893      	ldr	r3, [r2, #8]
 800388e:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8003892:	f040 8099 	bne.w	80039c8 <HAL_ADC_Init+0x1a8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003896:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003898:	f043 0310 	orr.w	r3, r3, #16
 800389c:	6563      	str	r3, [r4, #84]	@ 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800389e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80038a0:	f043 0301 	orr.w	r3, r3, #1
 80038a4:	65a3      	str	r3, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 80038a6:	2501      	movs	r5, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038a8:	6893      	ldr	r3, [r2, #8]
 80038aa:	f013 0304 	ands.w	r3, r3, #4
 80038ae:	d000      	beq.n	80038b2 <HAL_ADC_Init+0x92>
 80038b0:	2301      	movs	r3, #1
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80038b2:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80038b4:	f011 0f10 	tst.w	r1, #16
 80038b8:	f040 80bb 	bne.w	8003a32 <HAL_ADC_Init+0x212>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f040 80b8 	bne.w	8003a32 <HAL_ADC_Init+0x212>
    ADC_STATE_CLR_SET(hadc->State,
 80038c2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80038c4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80038c8:	f043 0302 	orr.w	r3, r3, #2
 80038cc:	6563      	str	r3, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038ce:	6893      	ldr	r3, [r2, #8]
 80038d0:	f013 0f01 	tst.w	r3, #1
 80038d4:	d11e      	bne.n	8003914 <HAL_ADC_Init+0xf4>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038d6:	4960      	ldr	r1, [pc, #384]	@ (8003a58 <HAL_ADC_Init+0x238>)
 80038d8:	4b60      	ldr	r3, [pc, #384]	@ (8003a5c <HAL_ADC_Init+0x23c>)
 80038da:	429a      	cmp	r2, r3
 80038dc:	bf18      	it	ne
 80038de:	428a      	cmpne	r2, r1
 80038e0:	bf0c      	ite	eq
 80038e2:	2201      	moveq	r2, #1
 80038e4:	2200      	movne	r2, #0
 80038e6:	d171      	bne.n	80039cc <HAL_ADC_Init+0x1ac>
 80038e8:	6889      	ldr	r1, [r1, #8]
 80038ea:	f011 0101 	ands.w	r1, r1, #1
 80038ee:	d000      	beq.n	80038f2 <HAL_ADC_Init+0xd2>
 80038f0:	2101      	movs	r1, #1
 80038f2:	4b5a      	ldr	r3, [pc, #360]	@ (8003a5c <HAL_ADC_Init+0x23c>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f013 0301 	ands.w	r3, r3, #1
 80038fa:	d000      	beq.n	80038fe <HAL_ADC_Init+0xde>
 80038fc:	2301      	movs	r3, #1
 80038fe:	430b      	orrs	r3, r1
 8003900:	d108      	bne.n	8003914 <HAL_ADC_Init+0xf4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003902:	2a00      	cmp	r2, #0
 8003904:	d068      	beq.n	80039d8 <HAL_ADC_Init+0x1b8>
 8003906:	4956      	ldr	r1, [pc, #344]	@ (8003a60 <HAL_ADC_Init+0x240>)
 8003908:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800390a:	688a      	ldr	r2, [r1, #8]
 800390c:	f422 127c 	bic.w	r2, r2, #4128768	@ 0x3f0000
 8003910:	4313      	orrs	r3, r2
 8003912:	608b      	str	r3, [r1, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003914:	f7ff fc10 	bl	8003138 <HAL_GetREVID>
 8003918:	f241 0303 	movw	r3, #4099	@ 0x1003
 800391c:	4298      	cmp	r0, r3
 800391e:	d902      	bls.n	8003926 <HAL_ADC_Init+0x106>
 8003920:	68a3      	ldr	r3, [r4, #8]
 8003922:	2b10      	cmp	r3, #16
 8003924:	d05a      	beq.n	80039dc <HAL_ADC_Init+0x1bc>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003926:	7d62      	ldrb	r2, [r4, #21]
                  hadc->Init.Overrun                                                    |
 8003928:	6b23      	ldr	r3, [r4, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800392a:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                  hadc->Init.Resolution                                                 |
 800392e:	68a2      	ldr	r2, [r4, #8]
                  hadc->Init.Overrun                                                    |
 8003930:	4313      	orrs	r3, r2
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003932:	7f22      	ldrb	r2, [r4, #28]
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003934:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003938:	7f22      	ldrb	r2, [r4, #28]
 800393a:	2a01      	cmp	r2, #1
 800393c:	d059      	beq.n	80039f2 <HAL_ADC_Init+0x1d2>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800393e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003940:	b122      	cbz	r2, 800394c <HAL_ADC_Init+0x12c>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003942:	f402 7278 	and.w	r2, r2, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003946:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8003948:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800394a:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800394c:	6821      	ldr	r1, [r4, #0]
 800394e:	68c8      	ldr	r0, [r1, #12]
 8003950:	4a44      	ldr	r2, [pc, #272]	@ (8003a64 <HAL_ADC_Init+0x244>)
 8003952:	4002      	ands	r2, r0
 8003954:	431a      	orrs	r2, r3
 8003956:	60ca      	str	r2, [r1, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003958:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800395a:	688a      	ldr	r2, [r1, #8]
 800395c:	f012 0204 	ands.w	r2, r2, #4
 8003960:	d000      	beq.n	8003964 <HAL_ADC_Init+0x144>
 8003962:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003964:	688b      	ldr	r3, [r1, #8]
 8003966:	f013 0308 	ands.w	r3, r3, #8
 800396a:	d000      	beq.n	800396e <HAL_ADC_Init+0x14e>
 800396c:	2301      	movs	r3, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800396e:	4313      	orrs	r3, r2
 8003970:	d11b      	bne.n	80039aa <HAL_ADC_Init+0x18a>
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003972:	7d22      	ldrb	r2, [r4, #20]
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003974:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
      tmpCFGR = (
 8003976:	ea43 3282 	orr.w	r2, r3, r2, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800397a:	68c8      	ldr	r0, [r1, #12]
 800397c:	4b3a      	ldr	r3, [pc, #232]	@ (8003a68 <HAL_ADC_Init+0x248>)
 800397e:	4003      	ands	r3, r0
 8003980:	4313      	orrs	r3, r2
 8003982:	60cb      	str	r3, [r1, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8003984:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8003988:	2b01      	cmp	r3, #1
 800398a:	d037      	beq.n	80039fc <HAL_ADC_Init+0x1dc>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800398c:	6822      	ldr	r2, [r4, #0]
 800398e:	6913      	ldr	r3, [r2, #16]
 8003990:	f023 0301 	bic.w	r3, r3, #1
 8003994:	6113      	str	r3, [r2, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003996:	6822      	ldr	r2, [r4, #0]
 8003998:	6913      	ldr	r3, [r2, #16]
 800399a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800399e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80039a0:	430b      	orrs	r3, r1
 80039a2:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 80039a4:	4620      	mov	r0, r4
 80039a6:	f7ff fe89 	bl	80036bc <ADC_ConfigureBoostMode>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80039aa:	68e3      	ldr	r3, [r4, #12]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d037      	beq.n	8003a20 <HAL_ADC_Init+0x200>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80039b0:	6822      	ldr	r2, [r4, #0]
 80039b2:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80039b4:	f023 030f 	bic.w	r3, r3, #15
 80039b8:	6313      	str	r3, [r2, #48]	@ 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80039ba:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80039bc:	f023 0303 	bic.w	r3, r3, #3
 80039c0:	f043 0301 	orr.w	r3, r3, #1
 80039c4:	6563      	str	r3, [r4, #84]	@ 0x54
 80039c6:	e039      	b.n	8003a3c <HAL_ADC_Init+0x21c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039c8:	2500      	movs	r5, #0
 80039ca:	e76d      	b.n	80038a8 <HAL_ADC_Init+0x88>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80039cc:	4b27      	ldr	r3, [pc, #156]	@ (8003a6c <HAL_ADC_Init+0x24c>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f013 0f01 	tst.w	r3, #1
 80039d4:	d19e      	bne.n	8003914 <HAL_ADC_Init+0xf4>
 80039d6:	e794      	b.n	8003902 <HAL_ADC_Init+0xe2>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80039d8:	4925      	ldr	r1, [pc, #148]	@ (8003a70 <HAL_ADC_Init+0x250>)
 80039da:	e795      	b.n	8003908 <HAL_ADC_Init+0xe8>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80039dc:	7d61      	ldrb	r1, [r4, #21]
                  hadc->Init.Overrun                                                    |
 80039de:	6b22      	ldr	r2, [r4, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80039e0:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
                  hadc->Init.Overrun                                                    |
 80039e4:	4313      	orrs	r3, r2
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80039e6:	7f22      	ldrb	r2, [r4, #28]
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80039e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80039ec:	f043 030c 	orr.w	r3, r3, #12
 80039f0:	e7a2      	b.n	8003938 <HAL_ADC_Init+0x118>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80039f2:	6a22      	ldr	r2, [r4, #32]
 80039f4:	3a01      	subs	r2, #1
 80039f6:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80039fa:	e7a0      	b.n	800393e <HAL_ADC_Init+0x11e>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80039fc:	6820      	ldr	r0, [r4, #0]
 80039fe:	6902      	ldr	r2, [r0, #16]
 8003a00:	4b1c      	ldr	r3, [pc, #112]	@ (8003a74 <HAL_ADC_Init+0x254>)
 8003a02:	4013      	ands	r3, r2
 8003a04:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003a06:	1e51      	subs	r1, r2, #1
 8003a08:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003a0a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003a0e:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8003a10:	430a      	orrs	r2, r1
 8003a12:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8003a14:	430a      	orrs	r2, r1
 8003a16:	4313      	orrs	r3, r2
 8003a18:	f043 0301 	orr.w	r3, r3, #1
 8003a1c:	6103      	str	r3, [r0, #16]
 8003a1e:	e7ba      	b.n	8003996 <HAL_ADC_Init+0x176>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003a20:	6821      	ldr	r1, [r4, #0]
 8003a22:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8003a24:	f023 030f 	bic.w	r3, r3, #15
 8003a28:	69a2      	ldr	r2, [r4, #24]
 8003a2a:	3a01      	subs	r2, #1
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	630b      	str	r3, [r1, #48]	@ 0x30
 8003a30:	e7c3      	b.n	80039ba <HAL_ADC_Init+0x19a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a32:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003a34:	f043 0310 	orr.w	r3, r3, #16
 8003a38:	6563      	str	r3, [r4, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 8003a3a:	2501      	movs	r5, #1
}
 8003a3c:	4628      	mov	r0, r5
 8003a3e:	b003      	add	sp, #12
 8003a40:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8003a42:	2501      	movs	r5, #1
 8003a44:	e7fa      	b.n	8003a3c <HAL_ADC_Init+0x21c>
 8003a46:	bf00      	nop
 8003a48:	5fffffc0 	.word	0x5fffffc0
 8003a4c:	6fffffc0 	.word	0x6fffffc0
 8003a50:	24000004 	.word	0x24000004
 8003a54:	053e2d63 	.word	0x053e2d63
 8003a58:	40022000 	.word	0x40022000
 8003a5c:	40022100 	.word	0x40022100
 8003a60:	40022300 	.word	0x40022300
 8003a64:	fff0c003 	.word	0xfff0c003
 8003a68:	ffffbffc 	.word	0xffffbffc
 8003a6c:	58026000 	.word	0x58026000
 8003a70:	58026300 	.word	0x58026300
 8003a74:	fc00f81e 	.word	0xfc00f81e

08003a78 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003a78:	b570      	push	{r4, r5, r6, lr}
 8003a7a:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a80:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d043      	beq.n	8003b10 <HAL_ADCEx_Calibration_Start+0x98>
 8003a88:	4604      	mov	r4, r0
 8003a8a:	460d      	mov	r5, r1
 8003a8c:	4616      	mov	r6, r2
 8003a8e:	2301      	movs	r3, #1
 8003a90:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003a94:	f7ff fdc8 	bl	8003628 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003a98:	2800      	cmp	r0, #0
 8003a9a:	d130      	bne.n	8003afe <HAL_ADCEx_Calibration_Start+0x86>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a9c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003a9e:	4b1d      	ldr	r3, [pc, #116]	@ (8003b14 <HAL_ADCEx_Calibration_Start+0x9c>)
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	f043 0302 	orr.w	r3, r3, #2
 8003aa6:	6563      	str	r3, [r4, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8003aa8:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003aaa:	688a      	ldr	r2, [r1, #8]
 8003aac:	4b1a      	ldr	r3, [pc, #104]	@ (8003b18 <HAL_ADCEx_Calibration_Start+0xa0>)
 8003aae:	4013      	ands	r3, r2
 8003ab0:	f405 3580 	and.w	r5, r5, #65536	@ 0x10000
 8003ab4:	f006 4680 	and.w	r6, r6, #1073741824	@ 0x40000000
 8003ab8:	ea45 0206 	orr.w	r2, r5, r6
 8003abc:	4313      	orrs	r3, r2
 8003abe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003ac2:	608b      	str	r3, [r1, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003ac4:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	db06      	blt.n	8003ada <HAL_ADCEx_Calibration_Start+0x62>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003acc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003ace:	f023 0303 	bic.w	r3, r3, #3
 8003ad2:	f043 0301 	orr.w	r3, r3, #1
 8003ad6:	6563      	str	r3, [r4, #84]	@ 0x54
 8003ad8:	e015      	b.n	8003b06 <HAL_ADCEx_Calibration_Start+0x8e>
      wait_loop_index++;
 8003ada:	9b01      	ldr	r3, [sp, #4]
 8003adc:	3301      	adds	r3, #1
 8003ade:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003ae0:	9a01      	ldr	r2, [sp, #4]
 8003ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8003b1c <HAL_ADCEx_Calibration_Start+0xa4>)
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d3ed      	bcc.n	8003ac4 <HAL_ADCEx_Calibration_Start+0x4c>
        ADC_STATE_CLR_SET(hadc->State,
 8003ae8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003aea:	f023 0312 	bic.w	r3, r3, #18
 8003aee:	f043 0310 	orr.w	r3, r3, #16
 8003af2:	6563      	str	r3, [r4, #84]	@ 0x54
        __HAL_UNLOCK(hadc);
 8003af4:	2300      	movs	r3, #0
 8003af6:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_ERROR;
 8003afa:	2001      	movs	r0, #1
 8003afc:	e006      	b.n	8003b0c <HAL_ADCEx_Calibration_Start+0x94>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003afe:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003b00:	f043 0310 	orr.w	r3, r3, #16
 8003b04:	6563      	str	r3, [r4, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b06:	2300      	movs	r3, #0
 8003b08:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8003b0c:	b002      	add	sp, #8
 8003b0e:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hadc);
 8003b10:	2002      	movs	r0, #2
 8003b12:	e7fb      	b.n	8003b0c <HAL_ADCEx_Calibration_Start+0x94>
 8003b14:	ffffeefd 	.word	0xffffeefd
 8003b18:	3ffeffc0 	.word	0x3ffeffc0
 8003b1c:	25c3f800 	.word	0x25c3f800

08003b20 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b20:	f890 2050 	ldrb.w	r2, [r0, #80]	@ 0x50
 8003b24:	2a01      	cmp	r2, #1
 8003b26:	f000 8096 	beq.w	8003c56 <HAL_ADCEx_MultiModeConfigChannel+0x136>
{
 8003b2a:	b430      	push	{r4, r5}
 8003b2c:	b09a      	sub	sp, #104	@ 0x68
 8003b2e:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8003b30:	2201      	movs	r2, #1
 8003b32:	f880 2050 	strb.w	r2, [r0, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003b36:	2200      	movs	r2, #0
 8003b38:	9216      	str	r2, [sp, #88]	@ 0x58
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003b3a:	9217      	str	r2, [sp, #92]	@ 0x5c

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003b3c:	6800      	ldr	r0, [r0, #0]
 8003b3e:	4a47      	ldr	r2, [pc, #284]	@ (8003c5c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003b40:	4290      	cmp	r0, r2
 8003b42:	d036      	beq.n	8003bb2 <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8003b44:	2200      	movs	r2, #0
 8003b46:	9201      	str	r2, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 8003b48:	9a01      	ldr	r2, [sp, #4]
 8003b4a:	2a00      	cmp	r2, #0
 8003b4c:	d035      	beq.n	8003bba <HAL_ADCEx_MultiModeConfigChannel+0x9a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b4e:	6892      	ldr	r2, [r2, #8]
 8003b50:	f012 0204 	ands.w	r2, r2, #4
 8003b54:	d000      	beq.n	8003b58 <HAL_ADCEx_MultiModeConfigChannel+0x38>
 8003b56:	2201      	movs	r2, #1
 8003b58:	6884      	ldr	r4, [r0, #8]
 8003b5a:	f014 0f04 	tst.w	r4, #4
 8003b5e:	d16b      	bne.n	8003c38 <HAL_ADCEx_MultiModeConfigChannel+0x118>
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003b60:	2a00      	cmp	r2, #0
 8003b62:	d169      	bne.n	8003c38 <HAL_ADCEx_MultiModeConfigChannel+0x118>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003b64:	4c3d      	ldr	r4, [pc, #244]	@ (8003c5c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003b66:	4a3e      	ldr	r2, [pc, #248]	@ (8003c60 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003b68:	4290      	cmp	r0, r2
 8003b6a:	bf18      	it	ne
 8003b6c:	42a0      	cmpne	r0, r4
 8003b6e:	d12d      	bne.n	8003bcc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003b70:	f502 7200 	add.w	r2, r2, #512	@ 0x200

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b74:	6808      	ldr	r0, [r1, #0]
 8003b76:	2800      	cmp	r0, #0
 8003b78:	d039      	beq.n	8003bee <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003b7a:	6890      	ldr	r0, [r2, #8]
 8003b7c:	f420 4040 	bic.w	r0, r0, #49152	@ 0xc000
 8003b80:	684c      	ldr	r4, [r1, #4]
 8003b82:	4320      	orrs	r0, r4
 8003b84:	6090      	str	r0, [r2, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b86:	6818      	ldr	r0, [r3, #0]
 8003b88:	4d34      	ldr	r5, [pc, #208]	@ (8003c5c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003b8a:	4c35      	ldr	r4, [pc, #212]	@ (8003c60 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003b8c:	42a0      	cmp	r0, r4
 8003b8e:	bf18      	it	ne
 8003b90:	42a8      	cmpne	r0, r5
 8003b92:	d11d      	bne.n	8003bd0 <HAL_ADCEx_MultiModeConfigChannel+0xb0>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b94:	68ac      	ldr	r4, [r5, #8]
 8003b96:	f014 0401 	ands.w	r4, r4, #1
 8003b9a:	d000      	beq.n	8003b9e <HAL_ADCEx_MultiModeConfigChannel+0x7e>
 8003b9c:	2401      	movs	r4, #1
 8003b9e:	4830      	ldr	r0, [pc, #192]	@ (8003c60 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003ba0:	6880      	ldr	r0, [r0, #8]
 8003ba2:	f010 0001 	ands.w	r0, r0, #1
 8003ba6:	d000      	beq.n	8003baa <HAL_ADCEx_MultiModeConfigChannel+0x8a>
 8003ba8:	2001      	movs	r0, #1
 8003baa:	4320      	orrs	r0, r4
 8003bac:	d015      	beq.n	8003bda <HAL_ADCEx_MultiModeConfigChannel+0xba>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bae:	2000      	movs	r0, #0
 8003bb0:	e047      	b.n	8003c42 <HAL_ADCEx_MultiModeConfigChannel+0x122>
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003bb2:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8003bb6:	9201      	str	r2, [sp, #4]
 8003bb8:	e7c6      	b.n	8003b48 <HAL_ADCEx_MultiModeConfigChannel+0x28>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bba:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003bbc:	f042 0220 	orr.w	r2, r2, #32
 8003bc0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hadc);
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003bc8:	2001      	movs	r0, #1
 8003bca:	e03d      	b.n	8003c48 <HAL_ADCEx_MultiModeConfigChannel+0x128>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003bcc:	4a25      	ldr	r2, [pc, #148]	@ (8003c64 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003bce:	e7d1      	b.n	8003b74 <HAL_ADCEx_MultiModeConfigChannel+0x54>
 8003bd0:	4825      	ldr	r0, [pc, #148]	@ (8003c68 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003bd2:	6880      	ldr	r0, [r0, #8]
 8003bd4:	f010 0f01 	tst.w	r0, #1
 8003bd8:	d139      	bne.n	8003c4e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003bda:	6894      	ldr	r4, [r2, #8]
 8003bdc:	4823      	ldr	r0, [pc, #140]	@ (8003c6c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003bde:	4020      	ands	r0, r4
 8003be0:	680c      	ldr	r4, [r1, #0]
 8003be2:	6889      	ldr	r1, [r1, #8]
 8003be4:	4321      	orrs	r1, r4
 8003be6:	4308      	orrs	r0, r1
 8003be8:	6090      	str	r0, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bea:	2000      	movs	r0, #0
 8003bec:	e029      	b.n	8003c42 <HAL_ADCEx_MultiModeConfigChannel+0x122>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003bee:	6891      	ldr	r1, [r2, #8]
 8003bf0:	f421 4140 	bic.w	r1, r1, #49152	@ 0xc000
 8003bf4:	6091      	str	r1, [r2, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003bf6:	6819      	ldr	r1, [r3, #0]
 8003bf8:	4c18      	ldr	r4, [pc, #96]	@ (8003c5c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003bfa:	4819      	ldr	r0, [pc, #100]	@ (8003c60 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003bfc:	4281      	cmp	r1, r0
 8003bfe:	bf18      	it	ne
 8003c00:	42a1      	cmpne	r1, r4
 8003c02:	d10e      	bne.n	8003c22 <HAL_ADCEx_MultiModeConfigChannel+0x102>
 8003c04:	68a0      	ldr	r0, [r4, #8]
 8003c06:	f010 0001 	ands.w	r0, r0, #1
 8003c0a:	d000      	beq.n	8003c0e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8003c0c:	2001      	movs	r0, #1
 8003c0e:	4914      	ldr	r1, [pc, #80]	@ (8003c60 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003c10:	6889      	ldr	r1, [r1, #8]
 8003c12:	f011 0101 	ands.w	r1, r1, #1
 8003c16:	d000      	beq.n	8003c1a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003c18:	2101      	movs	r1, #1
 8003c1a:	4301      	orrs	r1, r0
 8003c1c:	d006      	beq.n	8003c2c <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c1e:	2000      	movs	r0, #0
 8003c20:	e00f      	b.n	8003c42 <HAL_ADCEx_MultiModeConfigChannel+0x122>
 8003c22:	4911      	ldr	r1, [pc, #68]	@ (8003c68 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003c24:	6889      	ldr	r1, [r1, #8]
 8003c26:	f011 0f01 	tst.w	r1, #1
 8003c2a:	d112      	bne.n	8003c52 <HAL_ADCEx_MultiModeConfigChannel+0x132>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003c2c:	6890      	ldr	r0, [r2, #8]
 8003c2e:	490f      	ldr	r1, [pc, #60]	@ (8003c6c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003c30:	4001      	ands	r1, r0
 8003c32:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c34:	2000      	movs	r0, #0
 8003c36:	e004      	b.n	8003c42 <HAL_ADCEx_MultiModeConfigChannel+0x122>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c38:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003c3a:	f042 0220 	orr.w	r2, r2, #32
 8003c3e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003c40:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8003c48:	b01a      	add	sp, #104	@ 0x68
 8003c4a:	bc30      	pop	{r4, r5}
 8003c4c:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c4e:	2000      	movs	r0, #0
 8003c50:	e7f7      	b.n	8003c42 <HAL_ADCEx_MultiModeConfigChannel+0x122>
 8003c52:	2000      	movs	r0, #0
 8003c54:	e7f5      	b.n	8003c42 <HAL_ADCEx_MultiModeConfigChannel+0x122>
  __HAL_LOCK(hadc);
 8003c56:	2002      	movs	r0, #2
}
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	40022000 	.word	0x40022000
 8003c60:	40022100 	.word	0x40022100
 8003c64:	58026300 	.word	0x58026300
 8003c68:	58026000 	.word	0x58026000
 8003c6c:	fffff0e0 	.word	0xfffff0e0

08003c70 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8003c70:	2800      	cmp	r0, #0
 8003c72:	db07      	blt.n	8003c84 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c74:	f000 021f 	and.w	r2, r0, #31
 8003c78:	0940      	lsrs	r0, r0, #5
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	4093      	lsls	r3, r2
 8003c7e:	4a02      	ldr	r2, [pc, #8]	@ (8003c88 <__NVIC_EnableIRQ+0x18>)
 8003c80:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	e000e100 	.word	0xe000e100

08003c8c <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8003c8c:	2800      	cmp	r0, #0
 8003c8e:	db04      	blt.n	8003c9a <__NVIC_SetPriority+0xe>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c90:	0109      	lsls	r1, r1, #4
 8003c92:	b2c9      	uxtb	r1, r1
 8003c94:	4b04      	ldr	r3, [pc, #16]	@ (8003ca8 <__NVIC_SetPriority+0x1c>)
 8003c96:	5419      	strb	r1, [r3, r0]
 8003c98:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c9a:	f000 000f 	and.w	r0, r0, #15
 8003c9e:	0109      	lsls	r1, r1, #4
 8003ca0:	b2c9      	uxtb	r1, r1
 8003ca2:	4b02      	ldr	r3, [pc, #8]	@ (8003cac <__NVIC_SetPriority+0x20>)
 8003ca4:	5419      	strb	r1, [r3, r0]
  }
}
 8003ca6:	4770      	bx	lr
 8003ca8:	e000e400 	.word	0xe000e400
 8003cac:	e000ed14 	.word	0xe000ed14

08003cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cb0:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cb2:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cb6:	f1c0 0c07 	rsb	ip, r0, #7
 8003cba:	f1bc 0f04 	cmp.w	ip, #4
 8003cbe:	bf28      	it	cs
 8003cc0:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cc4:	1d03      	adds	r3, r0, #4
 8003cc6:	2b06      	cmp	r3, #6
 8003cc8:	d90f      	bls.n	8003cea <NVIC_EncodePriority+0x3a>
 8003cca:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ccc:	f04f 3eff 	mov.w	lr, #4294967295
 8003cd0:	fa0e f00c 	lsl.w	r0, lr, ip
 8003cd4:	ea21 0100 	bic.w	r1, r1, r0
 8003cd8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cda:	fa0e fe03 	lsl.w	lr, lr, r3
 8003cde:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8003ce2:	ea41 0002 	orr.w	r0, r1, r2
 8003ce6:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cea:	2300      	movs	r3, #0
 8003cec:	e7ee      	b.n	8003ccc <NVIC_EncodePriority+0x1c>
	...

08003cf0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cf0:	4906      	ldr	r1, [pc, #24]	@ (8003d0c <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8003cf2:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cf4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003cf8:	041b      	lsls	r3, r3, #16
 8003cfa:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cfc:	0200      	lsls	r0, r0, #8
 8003cfe:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d02:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8003d04:	4a02      	ldr	r2, [pc, #8]	@ (8003d10 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003d06:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8003d08:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003d0a:	4770      	bx	lr
 8003d0c:	e000ed00 	.word	0xe000ed00
 8003d10:	05fa0000 	.word	0x05fa0000

08003d14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d14:	b510      	push	{r4, lr}
 8003d16:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d18:	4b05      	ldr	r3, [pc, #20]	@ (8003d30 <HAL_NVIC_SetPriority+0x1c>)
 8003d1a:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d1c:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8003d20:	f7ff ffc6 	bl	8003cb0 <NVIC_EncodePriority>
 8003d24:	4601      	mov	r1, r0
 8003d26:	4620      	mov	r0, r4
 8003d28:	f7ff ffb0 	bl	8003c8c <__NVIC_SetPriority>
}
 8003d2c:	bd10      	pop	{r4, pc}
 8003d2e:	bf00      	nop
 8003d30:	e000ed00 	.word	0xe000ed00

08003d34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d34:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d36:	f7ff ff9b 	bl	8003c70 <__NVIC_EnableIRQ>
}
 8003d3a:	bd08      	pop	{r3, pc}

08003d3c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d3c:	b4f0      	push	{r4, r5, r6, r7}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d3e:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d40:	6804      	ldr	r4, [r0, #0]
 8003d42:	4e66      	ldr	r6, [pc, #408]	@ (8003edc <DMA_SetConfig+0x1a0>)
 8003d44:	4d66      	ldr	r5, [pc, #408]	@ (8003ee0 <DMA_SetConfig+0x1a4>)
 8003d46:	42ac      	cmp	r4, r5
 8003d48:	bf18      	it	ne
 8003d4a:	42b4      	cmpne	r4, r6
 8003d4c:	d042      	beq.n	8003dd4 <DMA_SetConfig+0x98>
 8003d4e:	3518      	adds	r5, #24
 8003d50:	42ac      	cmp	r4, r5
 8003d52:	d03f      	beq.n	8003dd4 <DMA_SetConfig+0x98>
 8003d54:	3518      	adds	r5, #24
 8003d56:	42ac      	cmp	r4, r5
 8003d58:	d03c      	beq.n	8003dd4 <DMA_SetConfig+0x98>
 8003d5a:	3518      	adds	r5, #24
 8003d5c:	42ac      	cmp	r4, r5
 8003d5e:	d039      	beq.n	8003dd4 <DMA_SetConfig+0x98>
 8003d60:	3518      	adds	r5, #24
 8003d62:	42ac      	cmp	r4, r5
 8003d64:	d036      	beq.n	8003dd4 <DMA_SetConfig+0x98>
 8003d66:	3518      	adds	r5, #24
 8003d68:	42ac      	cmp	r4, r5
 8003d6a:	d033      	beq.n	8003dd4 <DMA_SetConfig+0x98>
 8003d6c:	3518      	adds	r5, #24
 8003d6e:	42ac      	cmp	r4, r5
 8003d70:	d030      	beq.n	8003dd4 <DMA_SetConfig+0x98>
 8003d72:	f505 7556 	add.w	r5, r5, #856	@ 0x358
 8003d76:	42ac      	cmp	r4, r5
 8003d78:	d02c      	beq.n	8003dd4 <DMA_SetConfig+0x98>
 8003d7a:	3518      	adds	r5, #24
 8003d7c:	42ac      	cmp	r4, r5
 8003d7e:	d029      	beq.n	8003dd4 <DMA_SetConfig+0x98>
 8003d80:	3518      	adds	r5, #24
 8003d82:	42ac      	cmp	r4, r5
 8003d84:	d026      	beq.n	8003dd4 <DMA_SetConfig+0x98>
 8003d86:	3518      	adds	r5, #24
 8003d88:	42ac      	cmp	r4, r5
 8003d8a:	d023      	beq.n	8003dd4 <DMA_SetConfig+0x98>
 8003d8c:	3518      	adds	r5, #24
 8003d8e:	42ac      	cmp	r4, r5
 8003d90:	d020      	beq.n	8003dd4 <DMA_SetConfig+0x98>
 8003d92:	3518      	adds	r5, #24
 8003d94:	42ac      	cmp	r4, r5
 8003d96:	d01d      	beq.n	8003dd4 <DMA_SetConfig+0x98>
 8003d98:	3518      	adds	r5, #24
 8003d9a:	42ac      	cmp	r4, r5
 8003d9c:	d01a      	beq.n	8003dd4 <DMA_SetConfig+0x98>
 8003d9e:	3518      	adds	r5, #24
 8003da0:	42ac      	cmp	r4, r5
 8003da2:	d017      	beq.n	8003dd4 <DMA_SetConfig+0x98>
 8003da4:	4d4f      	ldr	r5, [pc, #316]	@ (8003ee4 <DMA_SetConfig+0x1a8>)
 8003da6:	42ac      	cmp	r4, r5
 8003da8:	d014      	beq.n	8003dd4 <DMA_SetConfig+0x98>
 8003daa:	3514      	adds	r5, #20
 8003dac:	42ac      	cmp	r4, r5
 8003dae:	d011      	beq.n	8003dd4 <DMA_SetConfig+0x98>
 8003db0:	3514      	adds	r5, #20
 8003db2:	42ac      	cmp	r4, r5
 8003db4:	d00e      	beq.n	8003dd4 <DMA_SetConfig+0x98>
 8003db6:	3514      	adds	r5, #20
 8003db8:	42ac      	cmp	r4, r5
 8003dba:	d00b      	beq.n	8003dd4 <DMA_SetConfig+0x98>
 8003dbc:	3514      	adds	r5, #20
 8003dbe:	42ac      	cmp	r4, r5
 8003dc0:	d008      	beq.n	8003dd4 <DMA_SetConfig+0x98>
 8003dc2:	3514      	adds	r5, #20
 8003dc4:	42ac      	cmp	r4, r5
 8003dc6:	d005      	beq.n	8003dd4 <DMA_SetConfig+0x98>
 8003dc8:	3514      	adds	r5, #20
 8003dca:	42ac      	cmp	r4, r5
 8003dcc:	d002      	beq.n	8003dd4 <DMA_SetConfig+0x98>
 8003dce:	3514      	adds	r5, #20
 8003dd0:	42ac      	cmp	r4, r5
 8003dd2:	d107      	bne.n	8003de4 <DMA_SetConfig+0xa8>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003dd4:	6e44      	ldr	r4, [r0, #100]	@ 0x64
 8003dd6:	6e85      	ldr	r5, [r0, #104]	@ 0x68
 8003dd8:	6065      	str	r5, [r4, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003dda:	6ec4      	ldr	r4, [r0, #108]	@ 0x6c
 8003ddc:	b114      	cbz	r4, 8003de4 <DMA_SetConfig+0xa8>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dde:	6f04      	ldr	r4, [r0, #112]	@ 0x70
 8003de0:	6f45      	ldr	r5, [r0, #116]	@ 0x74
 8003de2:	6065      	str	r5, [r4, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003de4:	6804      	ldr	r4, [r0, #0]
 8003de6:	4e3d      	ldr	r6, [pc, #244]	@ (8003edc <DMA_SetConfig+0x1a0>)
 8003de8:	4d3d      	ldr	r5, [pc, #244]	@ (8003ee0 <DMA_SetConfig+0x1a4>)
 8003dea:	42ac      	cmp	r4, r5
 8003dec:	bf18      	it	ne
 8003dee:	42b4      	cmpne	r4, r6
 8003df0:	d052      	beq.n	8003e98 <DMA_SetConfig+0x15c>
 8003df2:	3518      	adds	r5, #24
 8003df4:	42ac      	cmp	r4, r5
 8003df6:	d04f      	beq.n	8003e98 <DMA_SetConfig+0x15c>
 8003df8:	3518      	adds	r5, #24
 8003dfa:	42ac      	cmp	r4, r5
 8003dfc:	d04c      	beq.n	8003e98 <DMA_SetConfig+0x15c>
 8003dfe:	3518      	adds	r5, #24
 8003e00:	42ac      	cmp	r4, r5
 8003e02:	d049      	beq.n	8003e98 <DMA_SetConfig+0x15c>
 8003e04:	3518      	adds	r5, #24
 8003e06:	42ac      	cmp	r4, r5
 8003e08:	d046      	beq.n	8003e98 <DMA_SetConfig+0x15c>
 8003e0a:	3518      	adds	r5, #24
 8003e0c:	42ac      	cmp	r4, r5
 8003e0e:	d043      	beq.n	8003e98 <DMA_SetConfig+0x15c>
 8003e10:	3518      	adds	r5, #24
 8003e12:	42ac      	cmp	r4, r5
 8003e14:	d040      	beq.n	8003e98 <DMA_SetConfig+0x15c>
 8003e16:	f505 7556 	add.w	r5, r5, #856	@ 0x358
 8003e1a:	42ac      	cmp	r4, r5
 8003e1c:	d03c      	beq.n	8003e98 <DMA_SetConfig+0x15c>
 8003e1e:	3518      	adds	r5, #24
 8003e20:	42ac      	cmp	r4, r5
 8003e22:	d039      	beq.n	8003e98 <DMA_SetConfig+0x15c>
 8003e24:	3518      	adds	r5, #24
 8003e26:	42ac      	cmp	r4, r5
 8003e28:	d036      	beq.n	8003e98 <DMA_SetConfig+0x15c>
 8003e2a:	3518      	adds	r5, #24
 8003e2c:	42ac      	cmp	r4, r5
 8003e2e:	d033      	beq.n	8003e98 <DMA_SetConfig+0x15c>
 8003e30:	3518      	adds	r5, #24
 8003e32:	42ac      	cmp	r4, r5
 8003e34:	d030      	beq.n	8003e98 <DMA_SetConfig+0x15c>
 8003e36:	3518      	adds	r5, #24
 8003e38:	42ac      	cmp	r4, r5
 8003e3a:	d02d      	beq.n	8003e98 <DMA_SetConfig+0x15c>
 8003e3c:	3518      	adds	r5, #24
 8003e3e:	42ac      	cmp	r4, r5
 8003e40:	d02a      	beq.n	8003e98 <DMA_SetConfig+0x15c>
 8003e42:	3518      	adds	r5, #24
 8003e44:	42ac      	cmp	r4, r5
 8003e46:	d027      	beq.n	8003e98 <DMA_SetConfig+0x15c>

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003e48:	4e26      	ldr	r6, [pc, #152]	@ (8003ee4 <DMA_SetConfig+0x1a8>)
 8003e4a:	4d27      	ldr	r5, [pc, #156]	@ (8003ee8 <DMA_SetConfig+0x1ac>)
 8003e4c:	42ac      	cmp	r4, r5
 8003e4e:	bf18      	it	ne
 8003e50:	42b4      	cmpne	r4, r6
 8003e52:	d011      	beq.n	8003e78 <DMA_SetConfig+0x13c>
 8003e54:	4d25      	ldr	r5, [pc, #148]	@ (8003eec <DMA_SetConfig+0x1b0>)
 8003e56:	42ac      	cmp	r4, r5
 8003e58:	d00e      	beq.n	8003e78 <DMA_SetConfig+0x13c>
 8003e5a:	3514      	adds	r5, #20
 8003e5c:	42ac      	cmp	r4, r5
 8003e5e:	d00b      	beq.n	8003e78 <DMA_SetConfig+0x13c>
 8003e60:	3514      	adds	r5, #20
 8003e62:	42ac      	cmp	r4, r5
 8003e64:	d008      	beq.n	8003e78 <DMA_SetConfig+0x13c>
 8003e66:	3514      	adds	r5, #20
 8003e68:	42ac      	cmp	r4, r5
 8003e6a:	d005      	beq.n	8003e78 <DMA_SetConfig+0x13c>
 8003e6c:	3514      	adds	r5, #20
 8003e6e:	42ac      	cmp	r4, r5
 8003e70:	d002      	beq.n	8003e78 <DMA_SetConfig+0x13c>
 8003e72:	3514      	adds	r5, #20
 8003e74:	42ac      	cmp	r4, r5
 8003e76:	d124      	bne.n	8003ec2 <DMA_SetConfig+0x186>
  {
    /* Clear all flags */
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003e78:	6dc4      	ldr	r4, [r0, #92]	@ 0x5c
 8003e7a:	f004 051f 	and.w	r5, r4, #31
 8003e7e:	2401      	movs	r4, #1
 8003e80:	40ac      	lsls	r4, r5
 8003e82:	607c      	str	r4, [r7, #4]

    /* Configure DMA Channel data length */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003e84:	6804      	ldr	r4, [r0, #0]
 8003e86:	6063      	str	r3, [r4, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e88:	6883      	ldr	r3, [r0, #8]
 8003e8a:	2b40      	cmp	r3, #64	@ 0x40
 8003e8c:	d020      	beq.n	8003ed0 <DMA_SetConfig+0x194>
    }
    /* Memory to Peripheral */
    else
    {
      /* Configure DMA Channel source address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003e8e:	6803      	ldr	r3, [r0, #0]
 8003e90:	6099      	str	r1, [r3, #8]

      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003e92:	6803      	ldr	r3, [r0, #0]
 8003e94:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003e96:	e014      	b.n	8003ec2 <DMA_SetConfig+0x186>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003e98:	6dc4      	ldr	r4, [r0, #92]	@ 0x5c
 8003e9a:	f004 0c1f 	and.w	ip, r4, #31
 8003e9e:	243f      	movs	r4, #63	@ 0x3f
 8003ea0:	fa04 f40c 	lsl.w	r4, r4, ip
 8003ea4:	60bc      	str	r4, [r7, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003ea6:	6805      	ldr	r5, [r0, #0]
 8003ea8:	682c      	ldr	r4, [r5, #0]
 8003eaa:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
 8003eae:	602c      	str	r4, [r5, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003eb0:	6804      	ldr	r4, [r0, #0]
 8003eb2:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003eb4:	6883      	ldr	r3, [r0, #8]
 8003eb6:	2b40      	cmp	r3, #64	@ 0x40
 8003eb8:	d005      	beq.n	8003ec6 <DMA_SetConfig+0x18a>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003eba:	6803      	ldr	r3, [r0, #0]
 8003ebc:	6099      	str	r1, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003ebe:	6803      	ldr	r3, [r0, #0]
 8003ec0:	60da      	str	r2, [r3, #12]
}
 8003ec2:	bcf0      	pop	{r4, r5, r6, r7}
 8003ec4:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003ec6:	6803      	ldr	r3, [r0, #0]
 8003ec8:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003eca:	6803      	ldr	r3, [r0, #0]
 8003ecc:	60d9      	str	r1, [r3, #12]
 8003ece:	e7f8      	b.n	8003ec2 <DMA_SetConfig+0x186>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003ed0:	6803      	ldr	r3, [r0, #0]
 8003ed2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003ed4:	6803      	ldr	r3, [r0, #0]
 8003ed6:	60d9      	str	r1, [r3, #12]
 8003ed8:	e7f3      	b.n	8003ec2 <DMA_SetConfig+0x186>
 8003eda:	bf00      	nop
 8003edc:	40020010 	.word	0x40020010
 8003ee0:	40020028 	.word	0x40020028
 8003ee4:	58025408 	.word	0x58025408
 8003ee8:	5802541c 	.word	0x5802541c
 8003eec:	58025430 	.word	0x58025430

08003ef0 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ef0:	6803      	ldr	r3, [r0, #0]
 8003ef2:	4927      	ldr	r1, [pc, #156]	@ (8003f90 <DMA_CalcBaseAndBitshift+0xa0>)
 8003ef4:	4a27      	ldr	r2, [pc, #156]	@ (8003f94 <DMA_CalcBaseAndBitshift+0xa4>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	bf18      	it	ne
 8003efa:	428b      	cmpne	r3, r1
 8003efc:	d02f      	beq.n	8003f5e <DMA_CalcBaseAndBitshift+0x6e>
 8003efe:	3218      	adds	r2, #24
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d02c      	beq.n	8003f5e <DMA_CalcBaseAndBitshift+0x6e>
 8003f04:	3218      	adds	r2, #24
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d029      	beq.n	8003f5e <DMA_CalcBaseAndBitshift+0x6e>
 8003f0a:	3218      	adds	r2, #24
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d026      	beq.n	8003f5e <DMA_CalcBaseAndBitshift+0x6e>
 8003f10:	3218      	adds	r2, #24
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d023      	beq.n	8003f5e <DMA_CalcBaseAndBitshift+0x6e>
 8003f16:	3218      	adds	r2, #24
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d020      	beq.n	8003f5e <DMA_CalcBaseAndBitshift+0x6e>
 8003f1c:	3218      	adds	r2, #24
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d01d      	beq.n	8003f5e <DMA_CalcBaseAndBitshift+0x6e>
 8003f22:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d019      	beq.n	8003f5e <DMA_CalcBaseAndBitshift+0x6e>
 8003f2a:	3218      	adds	r2, #24
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d016      	beq.n	8003f5e <DMA_CalcBaseAndBitshift+0x6e>
 8003f30:	3218      	adds	r2, #24
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d013      	beq.n	8003f5e <DMA_CalcBaseAndBitshift+0x6e>
 8003f36:	3218      	adds	r2, #24
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d010      	beq.n	8003f5e <DMA_CalcBaseAndBitshift+0x6e>
 8003f3c:	3218      	adds	r2, #24
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d00d      	beq.n	8003f5e <DMA_CalcBaseAndBitshift+0x6e>
 8003f42:	3218      	adds	r2, #24
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d00a      	beq.n	8003f5e <DMA_CalcBaseAndBitshift+0x6e>
 8003f48:	3218      	adds	r2, #24
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d007      	beq.n	8003f5e <DMA_CalcBaseAndBitshift+0x6e>
 8003f4e:	3218      	adds	r2, #24
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d004      	beq.n	8003f5e <DMA_CalcBaseAndBitshift+0x6e>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003f54:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003f58:	6583      	str	r3, [r0, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
}
 8003f5a:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8003f5c:	4770      	bx	lr
{
 8003f5e:	b410      	push	{r4}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003f60:	b2d9      	uxtb	r1, r3
 8003f62:	3910      	subs	r1, #16
 8003f64:	4a0c      	ldr	r2, [pc, #48]	@ (8003f98 <DMA_CalcBaseAndBitshift+0xa8>)
 8003f66:	fba2 4201 	umull	r4, r2, r2, r1
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003f6a:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8003f6e:	4c0b      	ldr	r4, [pc, #44]	@ (8003f9c <DMA_CalcBaseAndBitshift+0xac>)
 8003f70:	5ca2      	ldrb	r2, [r4, r2]
 8003f72:	65c2      	str	r2, [r0, #92]	@ 0x5c
    if (stream_number > 3U)
 8003f74:	295f      	cmp	r1, #95	@ 0x5f
 8003f76:	d907      	bls.n	8003f88 <DMA_CalcBaseAndBitshift+0x98>
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003f78:	4a09      	ldr	r2, [pc, #36]	@ (8003fa0 <DMA_CalcBaseAndBitshift+0xb0>)
 8003f7a:	401a      	ands	r2, r3
 8003f7c:	3204      	adds	r2, #4
 8003f7e:	6582      	str	r2, [r0, #88]	@ 0x58
}
 8003f80:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8003f82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f86:	4770      	bx	lr
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003f88:	4a05      	ldr	r2, [pc, #20]	@ (8003fa0 <DMA_CalcBaseAndBitshift+0xb0>)
 8003f8a:	401a      	ands	r2, r3
 8003f8c:	6582      	str	r2, [r0, #88]	@ 0x58
 8003f8e:	e7f7      	b.n	8003f80 <DMA_CalcBaseAndBitshift+0x90>
 8003f90:	40020010 	.word	0x40020010
 8003f94:	40020028 	.word	0x40020028
 8003f98:	aaaaaaab 	.word	0xaaaaaaab
 8003f9c:	0801a028 	.word	0x0801a028
 8003fa0:	fffffc00 	.word	0xfffffc00

08003fa4 <DMA_CheckFifoParam>:
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003fa4:	6983      	ldr	r3, [r0, #24]
 8003fa6:	b99b      	cbnz	r3, 8003fd0 <DMA_CheckFifoParam+0x2c>
  {
    switch (hdma->Init.FIFOThreshold)
 8003fa8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d00a      	beq.n	8003fc4 <DMA_CheckFifoParam+0x20>
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d002      	beq.n	8003fb8 <DMA_CheckFifoParam+0x14>
 8003fb2:	b10b      	cbz	r3, 8003fb8 <DMA_CheckFifoParam+0x14>
 8003fb4:	2000      	movs	r0, #0
 8003fb6:	4770      	bx	lr
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fb8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8003fba:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8003fbe:	d12a      	bne.n	8004016 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8003fc0:	2000      	movs	r0, #0
 8003fc2:	4770      	bx	lr
          status = HAL_ERROR;
        }
        break;

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003fc4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8003fc6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003fca:	d026      	beq.n	800401a <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8003fcc:	2000      	movs	r0, #0
 8003fce:	4770      	bx	lr
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003fd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fd4:	d00a      	beq.n	8003fec <DMA_CheckFifoParam+0x48>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003fd6:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d926      	bls.n	800402a <DMA_CheckFifoParam+0x86>
 8003fdc:	2b03      	cmp	r3, #3
 8003fde:	d126      	bne.n	800402e <DMA_CheckFifoParam+0x8a>
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;

      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fe0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8003fe2:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8003fe6:	d124      	bne.n	8004032 <DMA_CheckFifoParam+0x8e>
  HAL_StatusTypeDef status = HAL_OK;
 8003fe8:	2000      	movs	r0, #0
 8003fea:	4770      	bx	lr
    switch (hdma->Init.FIFOThreshold)
 8003fec:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003fee:	2b03      	cmp	r3, #3
 8003ff0:	d803      	bhi.n	8003ffa <DMA_CheckFifoParam+0x56>
 8003ff2:	e8df f003 	tbb	[pc, r3]
 8003ff6:	0414      	.short	0x0414
 8003ff8:	0a14      	.short	0x0a14
 8003ffa:	2000      	movs	r0, #0
 8003ffc:	4770      	bx	lr
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ffe:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8004000:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8004004:	d10d      	bne.n	8004022 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8004006:	2000      	movs	r0, #0
 8004008:	4770      	bx	lr
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800400a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800400c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004010:	d009      	beq.n	8004026 <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 8004012:	2000      	movs	r0, #0
 8004014:	4770      	bx	lr
          status = HAL_ERROR;
 8004016:	2001      	movs	r0, #1
 8004018:	4770      	bx	lr
          status = HAL_ERROR;
 800401a:	2001      	movs	r0, #1
 800401c:	4770      	bx	lr
        status = HAL_ERROR;
 800401e:	2001      	movs	r0, #1
 8004020:	4770      	bx	lr
          status = HAL_ERROR;
 8004022:	2001      	movs	r0, #1
 8004024:	4770      	bx	lr
          status = HAL_ERROR;
 8004026:	2001      	movs	r0, #1
 8004028:	4770      	bx	lr
        status = HAL_ERROR;
 800402a:	2001      	movs	r0, #1
 800402c:	4770      	bx	lr
    switch (hdma->Init.FIFOThreshold)
 800402e:	2000      	movs	r0, #0
 8004030:	4770      	bx	lr
        {
          status = HAL_ERROR;
 8004032:	2001      	movs	r0, #1
        break;
    }
  }

  return status;
}
 8004034:	4770      	bx	lr
	...

08004038 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004038:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800403a:	4921      	ldr	r1, [pc, #132]	@ (80040c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800403c:	4a21      	ldr	r2, [pc, #132]	@ (80040c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 800403e:	4293      	cmp	r3, r2
 8004040:	bf18      	it	ne
 8004042:	428b      	cmpne	r3, r1
 8004044:	d027      	beq.n	8004096 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004046:	3214      	adds	r2, #20
 8004048:	4293      	cmp	r3, r2
 800404a:	d024      	beq.n	8004096 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800404c:	3214      	adds	r2, #20
 800404e:	4293      	cmp	r3, r2
 8004050:	d021      	beq.n	8004096 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004052:	3214      	adds	r2, #20
 8004054:	4293      	cmp	r3, r2
 8004056:	d01e      	beq.n	8004096 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004058:	3214      	adds	r2, #20
 800405a:	4293      	cmp	r3, r2
 800405c:	d01b      	beq.n	8004096 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800405e:	3214      	adds	r2, #20
 8004060:	4293      	cmp	r3, r2
 8004062:	d018      	beq.n	8004096 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004064:	3214      	adds	r2, #20
 8004066:	4293      	cmp	r3, r2
 8004068:	d015      	beq.n	8004096 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800406a:	b2da      	uxtb	r2, r3
 800406c:	3a10      	subs	r2, #16
 800406e:	4916      	ldr	r1, [pc, #88]	@ (80040c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8004070:	fba1 1202 	umull	r1, r2, r1, r2
 8004074:	0912      	lsrs	r2, r2, #4

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004076:	4915      	ldr	r1, [pc, #84]	@ (80040cc <DMA_CalcDMAMUXChannelBaseAndMask+0x94>)
 8004078:	4419      	add	r1, r3
 800407a:	29a8      	cmp	r1, #168	@ 0xa8
 800407c:	d91e      	bls.n	80040bc <DMA_CalcDMAMUXChannelBaseAndMask+0x84>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800407e:	4b14      	ldr	r3, [pc, #80]	@ (80040d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x98>)
 8004080:	4413      	add	r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	6603      	str	r3, [r0, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004086:	4b13      	ldr	r3, [pc, #76]	@ (80040d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x9c>)
 8004088:	6643      	str	r3, [r0, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800408a:	f002 021f 	and.w	r2, r2, #31
 800408e:	2301      	movs	r3, #1
 8004090:	4093      	lsls	r3, r2
 8004092:	6683      	str	r3, [r0, #104]	@ 0x68
  }
}
 8004094:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004096:	b2db      	uxtb	r3, r3
 8004098:	3b08      	subs	r3, #8
 800409a:	4a0f      	ldr	r2, [pc, #60]	@ (80040d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 800409c:	fba2 2303 	umull	r2, r3, r2, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80040a0:	4a0e      	ldr	r2, [pc, #56]	@ (80040dc <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
 80040a2:	eb02 1213 	add.w	r2, r2, r3, lsr #4
 80040a6:	0092      	lsls	r2, r2, #2
 80040a8:	6602      	str	r2, [r0, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80040aa:	4a0d      	ldr	r2, [pc, #52]	@ (80040e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 80040ac:	6642      	str	r2, [r0, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80040ae:	f3c3 1304 	ubfx	r3, r3, #4, #5
 80040b2:	2201      	movs	r2, #1
 80040b4:	fa02 f303 	lsl.w	r3, r2, r3
 80040b8:	6683      	str	r3, [r0, #104]	@ 0x68
 80040ba:	4770      	bx	lr
      stream_number += 8U;
 80040bc:	3208      	adds	r2, #8
 80040be:	e7de      	b.n	800407e <DMA_CalcDMAMUXChannelBaseAndMask+0x46>
 80040c0:	58025408 	.word	0x58025408
 80040c4:	5802541c 	.word	0x5802541c
 80040c8:	aaaaaaab 	.word	0xaaaaaaab
 80040cc:	bffdfbf0 	.word	0xbffdfbf0
 80040d0:	10008200 	.word	0x10008200
 80040d4:	40020880 	.word	0x40020880
 80040d8:	cccccccd 	.word	0xcccccccd
 80040dc:	16009600 	.word	0x16009600
 80040e0:	58025880 	.word	0x58025880

080040e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80040e4:	7901      	ldrb	r1, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80040e6:	1e4a      	subs	r2, r1, #1
 80040e8:	2a07      	cmp	r2, #7
 80040ea:	d82b      	bhi.n	8004144 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x60>
{
 80040ec:	b430      	push	{r4, r5}
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80040ee:	6803      	ldr	r3, [r0, #0]
 80040f0:	4d15      	ldr	r5, [pc, #84]	@ (8004148 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x64>)
 80040f2:	4c16      	ldr	r4, [pc, #88]	@ (800414c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>)
 80040f4:	42a3      	cmp	r3, r4
 80040f6:	bf18      	it	ne
 80040f8:	42ab      	cmpne	r3, r5
 80040fa:	d018      	beq.n	800412e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 80040fc:	3414      	adds	r4, #20
 80040fe:	42a3      	cmp	r3, r4
 8004100:	d015      	beq.n	800412e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8004102:	3414      	adds	r4, #20
 8004104:	42a3      	cmp	r3, r4
 8004106:	d012      	beq.n	800412e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8004108:	3414      	adds	r4, #20
 800410a:	42a3      	cmp	r3, r4
 800410c:	d00f      	beq.n	800412e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 800410e:	3414      	adds	r4, #20
 8004110:	42a3      	cmp	r3, r4
 8004112:	d00c      	beq.n	800412e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8004114:	3414      	adds	r4, #20
 8004116:	42a3      	cmp	r3, r4
 8004118:	d009      	beq.n	800412e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 800411a:	3414      	adds	r4, #20
 800411c:	42a3      	cmp	r3, r4
 800411e:	d006      	beq.n	800412e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004120:	4b0b      	ldr	r3, [pc, #44]	@ (8004150 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>)
 8004122:	440b      	add	r3, r1
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	66c3      	str	r3, [r0, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004128:	4b0a      	ldr	r3, [pc, #40]	@ (8004154 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>)
 800412a:	6703      	str	r3, [r0, #112]	@ 0x70
 800412c:	e005      	b.n	800413a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x56>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800412e:	4b0a      	ldr	r3, [pc, #40]	@ (8004158 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x74>)
 8004130:	440b      	add	r3, r1
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	66c3      	str	r3, [r0, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004136:	4b09      	ldr	r3, [pc, #36]	@ (800415c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x78>)
 8004138:	6703      	str	r3, [r0, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800413a:	2301      	movs	r3, #1
 800413c:	4093      	lsls	r3, r2
 800413e:	6743      	str	r3, [r0, #116]	@ 0x74
  }
}
 8004140:	bc30      	pop	{r4, r5}
 8004142:	4770      	bx	lr
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	58025408 	.word	0x58025408
 800414c:	5802541c 	.word	0x5802541c
 8004150:	1000823f 	.word	0x1000823f
 8004154:	40020940 	.word	0x40020940
 8004158:	1600963f 	.word	0x1600963f
 800415c:	58025940 	.word	0x58025940

08004160 <HAL_DMA_Init>:
{
 8004160:	b570      	push	{r4, r5, r6, lr}
 8004162:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004164:	f7fe ffce 	bl	8003104 <HAL_GetTick>
  if(hdma == NULL)
 8004168:	2c00      	cmp	r4, #0
 800416a:	f000 81b6 	beq.w	80044da <HAL_DMA_Init+0x37a>
 800416e:	4605      	mov	r5, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004170:	6823      	ldr	r3, [r4, #0]
 8004172:	4953      	ldr	r1, [pc, #332]	@ (80042c0 <HAL_DMA_Init+0x160>)
 8004174:	4a53      	ldr	r2, [pc, #332]	@ (80042c4 <HAL_DMA_Init+0x164>)
 8004176:	4293      	cmp	r3, r2
 8004178:	bf18      	it	ne
 800417a:	428b      	cmpne	r3, r1
 800417c:	bf0c      	ite	eq
 800417e:	2101      	moveq	r1, #1
 8004180:	2100      	movne	r1, #0
 8004182:	d050      	beq.n	8004226 <HAL_DMA_Init+0xc6>
 8004184:	3218      	adds	r2, #24
 8004186:	4293      	cmp	r3, r2
 8004188:	d04d      	beq.n	8004226 <HAL_DMA_Init+0xc6>
 800418a:	3218      	adds	r2, #24
 800418c:	4293      	cmp	r3, r2
 800418e:	d04a      	beq.n	8004226 <HAL_DMA_Init+0xc6>
 8004190:	3218      	adds	r2, #24
 8004192:	4293      	cmp	r3, r2
 8004194:	d047      	beq.n	8004226 <HAL_DMA_Init+0xc6>
 8004196:	3218      	adds	r2, #24
 8004198:	4293      	cmp	r3, r2
 800419a:	d044      	beq.n	8004226 <HAL_DMA_Init+0xc6>
 800419c:	3218      	adds	r2, #24
 800419e:	4293      	cmp	r3, r2
 80041a0:	d041      	beq.n	8004226 <HAL_DMA_Init+0xc6>
 80041a2:	3218      	adds	r2, #24
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d03e      	beq.n	8004226 <HAL_DMA_Init+0xc6>
 80041a8:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d03a      	beq.n	8004226 <HAL_DMA_Init+0xc6>
 80041b0:	3218      	adds	r2, #24
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d037      	beq.n	8004226 <HAL_DMA_Init+0xc6>
 80041b6:	3218      	adds	r2, #24
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d034      	beq.n	8004226 <HAL_DMA_Init+0xc6>
 80041bc:	3218      	adds	r2, #24
 80041be:	4293      	cmp	r3, r2
 80041c0:	d031      	beq.n	8004226 <HAL_DMA_Init+0xc6>
 80041c2:	3218      	adds	r2, #24
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d02e      	beq.n	8004226 <HAL_DMA_Init+0xc6>
 80041c8:	3218      	adds	r2, #24
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d02b      	beq.n	8004226 <HAL_DMA_Init+0xc6>
 80041ce:	3218      	adds	r2, #24
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d028      	beq.n	8004226 <HAL_DMA_Init+0xc6>
 80041d4:	3218      	adds	r2, #24
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d025      	beq.n	8004226 <HAL_DMA_Init+0xc6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80041da:	493b      	ldr	r1, [pc, #236]	@ (80042c8 <HAL_DMA_Init+0x168>)
 80041dc:	4a3b      	ldr	r2, [pc, #236]	@ (80042cc <HAL_DMA_Init+0x16c>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	bf18      	it	ne
 80041e2:	428b      	cmpne	r3, r1
 80041e4:	f000 8131 	beq.w	800444a <HAL_DMA_Init+0x2ea>
 80041e8:	4a39      	ldr	r2, [pc, #228]	@ (80042d0 <HAL_DMA_Init+0x170>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	f000 812d 	beq.w	800444a <HAL_DMA_Init+0x2ea>
 80041f0:	3214      	adds	r2, #20
 80041f2:	4293      	cmp	r3, r2
 80041f4:	f000 8129 	beq.w	800444a <HAL_DMA_Init+0x2ea>
 80041f8:	3214      	adds	r2, #20
 80041fa:	4293      	cmp	r3, r2
 80041fc:	f000 8125 	beq.w	800444a <HAL_DMA_Init+0x2ea>
 8004200:	3214      	adds	r2, #20
 8004202:	4293      	cmp	r3, r2
 8004204:	f000 8121 	beq.w	800444a <HAL_DMA_Init+0x2ea>
 8004208:	3214      	adds	r2, #20
 800420a:	4293      	cmp	r3, r2
 800420c:	f000 811d 	beq.w	800444a <HAL_DMA_Init+0x2ea>
 8004210:	3214      	adds	r2, #20
 8004212:	4293      	cmp	r3, r2
 8004214:	f000 8119 	beq.w	800444a <HAL_DMA_Init+0x2ea>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004218:	2340      	movs	r3, #64	@ 0x40
 800421a:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800421c:	2303      	movs	r3, #3
 800421e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 8004222:	2001      	movs	r0, #1
 8004224:	e04a      	b.n	80042bc <HAL_DMA_Init+0x15c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8004226:	2202      	movs	r2, #2
 8004228:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 800422c:	2200      	movs	r2, #0
 800422e:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
    __HAL_DMA_DISABLE(hdma);
 8004232:	bb79      	cbnz	r1, 8004294 <HAL_DMA_Init+0x134>
 8004234:	4a27      	ldr	r2, [pc, #156]	@ (80042d4 <HAL_DMA_Init+0x174>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d02c      	beq.n	8004294 <HAL_DMA_Init+0x134>
 800423a:	3218      	adds	r2, #24
 800423c:	4293      	cmp	r3, r2
 800423e:	d029      	beq.n	8004294 <HAL_DMA_Init+0x134>
 8004240:	3218      	adds	r2, #24
 8004242:	4293      	cmp	r3, r2
 8004244:	d026      	beq.n	8004294 <HAL_DMA_Init+0x134>
 8004246:	3218      	adds	r2, #24
 8004248:	4293      	cmp	r3, r2
 800424a:	d023      	beq.n	8004294 <HAL_DMA_Init+0x134>
 800424c:	3218      	adds	r2, #24
 800424e:	4293      	cmp	r3, r2
 8004250:	d020      	beq.n	8004294 <HAL_DMA_Init+0x134>
 8004252:	3218      	adds	r2, #24
 8004254:	4293      	cmp	r3, r2
 8004256:	d01d      	beq.n	8004294 <HAL_DMA_Init+0x134>
 8004258:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 800425c:	4293      	cmp	r3, r2
 800425e:	d019      	beq.n	8004294 <HAL_DMA_Init+0x134>
 8004260:	3218      	adds	r2, #24
 8004262:	4293      	cmp	r3, r2
 8004264:	d016      	beq.n	8004294 <HAL_DMA_Init+0x134>
 8004266:	3218      	adds	r2, #24
 8004268:	4293      	cmp	r3, r2
 800426a:	d013      	beq.n	8004294 <HAL_DMA_Init+0x134>
 800426c:	3218      	adds	r2, #24
 800426e:	4293      	cmp	r3, r2
 8004270:	d010      	beq.n	8004294 <HAL_DMA_Init+0x134>
 8004272:	3218      	adds	r2, #24
 8004274:	4293      	cmp	r3, r2
 8004276:	d00d      	beq.n	8004294 <HAL_DMA_Init+0x134>
 8004278:	3218      	adds	r2, #24
 800427a:	4293      	cmp	r3, r2
 800427c:	d00a      	beq.n	8004294 <HAL_DMA_Init+0x134>
 800427e:	3218      	adds	r2, #24
 8004280:	4293      	cmp	r3, r2
 8004282:	d007      	beq.n	8004294 <HAL_DMA_Init+0x134>
 8004284:	3218      	adds	r2, #24
 8004286:	4293      	cmp	r3, r2
 8004288:	d004      	beq.n	8004294 <HAL_DMA_Init+0x134>
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	f022 0201 	bic.w	r2, r2, #1
 8004290:	601a      	str	r2, [r3, #0]
 8004292:	e003      	b.n	800429c <HAL_DMA_Init+0x13c>
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	f022 0201 	bic.w	r2, r2, #1
 800429a:	601a      	str	r2, [r3, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800429c:	6823      	ldr	r3, [r4, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	f012 0f01 	tst.w	r2, #1
 80042a4:	d018      	beq.n	80042d8 <HAL_DMA_Init+0x178>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80042a6:	f7fe ff2d 	bl	8003104 <HAL_GetTick>
 80042aa:	1b43      	subs	r3, r0, r5
 80042ac:	2b05      	cmp	r3, #5
 80042ae:	d9f5      	bls.n	800429c <HAL_DMA_Init+0x13c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80042b0:	2320      	movs	r3, #32
 80042b2:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 80042b4:	2303      	movs	r3, #3
 80042b6:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        return HAL_ERROR;
 80042ba:	2001      	movs	r0, #1
}
 80042bc:	bd70      	pop	{r4, r5, r6, pc}
 80042be:	bf00      	nop
 80042c0:	40020010 	.word	0x40020010
 80042c4:	40020028 	.word	0x40020028
 80042c8:	58025408 	.word	0x58025408
 80042cc:	5802541c 	.word	0x5802541c
 80042d0:	58025430 	.word	0x58025430
 80042d4:	40020040 	.word	0x40020040
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80042d8:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80042da:	4981      	ldr	r1, [pc, #516]	@ (80044e0 <HAL_DMA_Init+0x380>)
 80042dc:	4011      	ands	r1, r2
    registerValue |=  hdma->Init.Direction           |
 80042de:	68a2      	ldr	r2, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042e0:	68e0      	ldr	r0, [r4, #12]
    registerValue |=  hdma->Init.Direction           |
 80042e2:	4302      	orrs	r2, r0
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042e4:	6920      	ldr	r0, [r4, #16]
 80042e6:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042e8:	6960      	ldr	r0, [r4, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042ea:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042ec:	69a0      	ldr	r0, [r4, #24]
 80042ee:	4302      	orrs	r2, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 80042f0:	69e0      	ldr	r0, [r4, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042f2:	4302      	orrs	r2, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 80042f4:	6a20      	ldr	r0, [r4, #32]
 80042f6:	4302      	orrs	r2, r0
    registerValue |=  hdma->Init.Direction           |
 80042f8:	430a      	orrs	r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042fa:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80042fc:	2904      	cmp	r1, #4
 80042fe:	f000 8099 	beq.w	8004434 <HAL_DMA_Init+0x2d4>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004302:	4978      	ldr	r1, [pc, #480]	@ (80044e4 <HAL_DMA_Init+0x384>)
 8004304:	6808      	ldr	r0, [r1, #0]
 8004306:	4978      	ldr	r1, [pc, #480]	@ (80044e8 <HAL_DMA_Init+0x388>)
 8004308:	4001      	ands	r1, r0
 800430a:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 800430e:	d311      	bcc.n	8004334 <HAL_DMA_Init+0x1d4>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004310:	6861      	ldr	r1, [r4, #4]
 8004312:	f1a1 0529 	sub.w	r5, r1, #41	@ 0x29
 8004316:	f1a1 003f 	sub.w	r0, r1, #63	@ 0x3f
 800431a:	2803      	cmp	r0, #3
 800431c:	bf88      	it	hi
 800431e:	2d05      	cmphi	r5, #5
 8004320:	d906      	bls.n	8004330 <HAL_DMA_Init+0x1d0>
 8004322:	f1a1 0047 	sub.w	r0, r1, #71	@ 0x47
 8004326:	2801      	cmp	r0, #1
 8004328:	d902      	bls.n	8004330 <HAL_DMA_Init+0x1d0>
 800432a:	394f      	subs	r1, #79	@ 0x4f
 800432c:	2903      	cmp	r1, #3
 800432e:	d801      	bhi.n	8004334 <HAL_DMA_Init+0x1d4>
        registerValue |= DMA_SxCR_TRBUFF;
 8004330:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004334:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004336:	6826      	ldr	r6, [r4, #0]
 8004338:	6975      	ldr	r5, [r6, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800433a:	f025 0507 	bic.w	r5, r5, #7
    registerValue |= hdma->Init.FIFOMode;
 800433e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004340:	431d      	orrs	r5, r3
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004342:	2b04      	cmp	r3, #4
 8004344:	d108      	bne.n	8004358 <HAL_DMA_Init+0x1f8>
      registerValue |= hdma->Init.FIFOThreshold;
 8004346:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004348:	431d      	orrs	r5, r3
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800434a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800434c:	b123      	cbz	r3, 8004358 <HAL_DMA_Init+0x1f8>
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800434e:	4620      	mov	r0, r4
 8004350:	f7ff fe28 	bl	8003fa4 <DMA_CheckFifoParam>
 8004354:	2800      	cmp	r0, #0
 8004356:	d172      	bne.n	800443e <HAL_DMA_Init+0x2de>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004358:	6175      	str	r5, [r6, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800435a:	4620      	mov	r0, r4
 800435c:	f7ff fdc8 	bl	8003ef0 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004360:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004362:	f003 021f 	and.w	r2, r3, #31
 8004366:	233f      	movs	r3, #63	@ 0x3f
 8004368:	4093      	lsls	r3, r2
 800436a:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800436c:	6823      	ldr	r3, [r4, #0]
 800436e:	495f      	ldr	r1, [pc, #380]	@ (80044ec <HAL_DMA_Init+0x38c>)
 8004370:	4a5f      	ldr	r2, [pc, #380]	@ (80044f0 <HAL_DMA_Init+0x390>)
 8004372:	4293      	cmp	r3, r2
 8004374:	bf18      	it	ne
 8004376:	428b      	cmpne	r3, r1
 8004378:	d042      	beq.n	8004400 <HAL_DMA_Init+0x2a0>
 800437a:	3218      	adds	r2, #24
 800437c:	4293      	cmp	r3, r2
 800437e:	d03f      	beq.n	8004400 <HAL_DMA_Init+0x2a0>
 8004380:	3218      	adds	r2, #24
 8004382:	4293      	cmp	r3, r2
 8004384:	d03c      	beq.n	8004400 <HAL_DMA_Init+0x2a0>
 8004386:	3218      	adds	r2, #24
 8004388:	4293      	cmp	r3, r2
 800438a:	d039      	beq.n	8004400 <HAL_DMA_Init+0x2a0>
 800438c:	3218      	adds	r2, #24
 800438e:	4293      	cmp	r3, r2
 8004390:	d036      	beq.n	8004400 <HAL_DMA_Init+0x2a0>
 8004392:	3218      	adds	r2, #24
 8004394:	4293      	cmp	r3, r2
 8004396:	d033      	beq.n	8004400 <HAL_DMA_Init+0x2a0>
 8004398:	3218      	adds	r2, #24
 800439a:	4293      	cmp	r3, r2
 800439c:	d030      	beq.n	8004400 <HAL_DMA_Init+0x2a0>
 800439e:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d02c      	beq.n	8004400 <HAL_DMA_Init+0x2a0>
 80043a6:	3218      	adds	r2, #24
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d029      	beq.n	8004400 <HAL_DMA_Init+0x2a0>
 80043ac:	3218      	adds	r2, #24
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d026      	beq.n	8004400 <HAL_DMA_Init+0x2a0>
 80043b2:	3218      	adds	r2, #24
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d023      	beq.n	8004400 <HAL_DMA_Init+0x2a0>
 80043b8:	3218      	adds	r2, #24
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d020      	beq.n	8004400 <HAL_DMA_Init+0x2a0>
 80043be:	3218      	adds	r2, #24
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d01d      	beq.n	8004400 <HAL_DMA_Init+0x2a0>
 80043c4:	3218      	adds	r2, #24
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d01a      	beq.n	8004400 <HAL_DMA_Init+0x2a0>
 80043ca:	3218      	adds	r2, #24
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d017      	beq.n	8004400 <HAL_DMA_Init+0x2a0>
 80043d0:	4a48      	ldr	r2, [pc, #288]	@ (80044f4 <HAL_DMA_Init+0x394>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d014      	beq.n	8004400 <HAL_DMA_Init+0x2a0>
 80043d6:	3214      	adds	r2, #20
 80043d8:	4293      	cmp	r3, r2
 80043da:	d011      	beq.n	8004400 <HAL_DMA_Init+0x2a0>
 80043dc:	3214      	adds	r2, #20
 80043de:	4293      	cmp	r3, r2
 80043e0:	d00e      	beq.n	8004400 <HAL_DMA_Init+0x2a0>
 80043e2:	3214      	adds	r2, #20
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d00b      	beq.n	8004400 <HAL_DMA_Init+0x2a0>
 80043e8:	3214      	adds	r2, #20
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d008      	beq.n	8004400 <HAL_DMA_Init+0x2a0>
 80043ee:	3214      	adds	r2, #20
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d005      	beq.n	8004400 <HAL_DMA_Init+0x2a0>
 80043f4:	3214      	adds	r2, #20
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d002      	beq.n	8004400 <HAL_DMA_Init+0x2a0>
 80043fa:	3214      	adds	r2, #20
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d113      	bne.n	8004428 <HAL_DMA_Init+0x2c8>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004400:	4620      	mov	r0, r4
 8004402:	f7ff fe19 	bl	8004038 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004406:	68a3      	ldr	r3, [r4, #8]
 8004408:	2b80      	cmp	r3, #128	@ 0x80
 800440a:	d059      	beq.n	80044c0 <HAL_DMA_Init+0x360>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800440c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800440e:	7922      	ldrb	r2, [r4, #4]
 8004410:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004412:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004414:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 8004416:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004418:	6863      	ldr	r3, [r4, #4]
 800441a:	3b01      	subs	r3, #1
 800441c:	2b07      	cmp	r3, #7
 800441e:	d952      	bls.n	80044c6 <HAL_DMA_Init+0x366>
      hdma->DMAmuxRequestGen = 0U;
 8004420:	2300      	movs	r3, #0
 8004422:	66e3      	str	r3, [r4, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004424:	6723      	str	r3, [r4, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004426:	6763      	str	r3, [r4, #116]	@ 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004428:	2000      	movs	r0, #0
 800442a:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800442c:	2301      	movs	r3, #1
 800442e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8004432:	e743      	b.n	80042bc <HAL_DMA_Init+0x15c>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004434:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004436:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8004438:	4301      	orrs	r1, r0
 800443a:	430a      	orrs	r2, r1
 800443c:	e761      	b.n	8004302 <HAL_DMA_Init+0x1a2>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800443e:	2340      	movs	r3, #64	@ 0x40
 8004440:	6563      	str	r3, [r4, #84]	@ 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8004442:	2001      	movs	r0, #1
 8004444:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
          return HAL_ERROR;
 8004448:	e738      	b.n	80042bc <HAL_DMA_Init+0x15c>
    hdma->State = HAL_DMA_STATE_BUSY;
 800444a:	2202      	movs	r2, #2
 800444c:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8004450:	2200      	movs	r2, #0
 8004452:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004456:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004458:	4927      	ldr	r1, [pc, #156]	@ (80044f8 <HAL_DMA_Init+0x398>)
 800445a:	4011      	ands	r1, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800445c:	68a2      	ldr	r2, [r4, #8]
 800445e:	2a40      	cmp	r2, #64	@ 0x40
 8004460:	d02c      	beq.n	80044bc <HAL_DMA_Init+0x35c>
 8004462:	2a80      	cmp	r2, #128	@ 0x80
 8004464:	d027      	beq.n	80044b6 <HAL_DMA_Init+0x356>
 8004466:	2200      	movs	r2, #0
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004468:	68e0      	ldr	r0, [r4, #12]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800446a:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800446e:	6920      	ldr	r0, [r4, #16]
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004470:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004474:	6960      	ldr	r0, [r4, #20]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004476:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800447a:	69a0      	ldr	r0, [r4, #24]
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800447c:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004480:	69e0      	ldr	r0, [r4, #28]
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004482:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004486:	6a20      	ldr	r0, [r4, #32]
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004488:	ea42 1210 	orr.w	r2, r2, r0, lsr #4
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800448c:	430a      	orrs	r2, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800448e:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004490:	6822      	ldr	r2, [r4, #0]
 8004492:	4b1a      	ldr	r3, [pc, #104]	@ (80044fc <HAL_DMA_Init+0x39c>)
 8004494:	4413      	add	r3, r2
 8004496:	4a1a      	ldr	r2, [pc, #104]	@ (8004500 <HAL_DMA_Init+0x3a0>)
 8004498:	fba2 2303 	umull	r2, r3, r2, r3
 800449c:	091b      	lsrs	r3, r3, #4
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	65e3      	str	r3, [r4, #92]	@ 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80044a2:	4620      	mov	r0, r4
 80044a4:	f7ff fd24 	bl	8003ef0 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80044a8:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80044aa:	f002 011f 	and.w	r1, r2, #31
 80044ae:	2201      	movs	r2, #1
 80044b0:	408a      	lsls	r2, r1
 80044b2:	6042      	str	r2, [r0, #4]
 80044b4:	e75a      	b.n	800436c <HAL_DMA_Init+0x20c>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80044b6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80044ba:	e7d5      	b.n	8004468 <HAL_DMA_Init+0x308>
 80044bc:	2210      	movs	r2, #16
 80044be:	e7d3      	b.n	8004468 <HAL_DMA_Init+0x308>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80044c0:	2300      	movs	r3, #0
 80044c2:	6063      	str	r3, [r4, #4]
 80044c4:	e7a2      	b.n	800440c <HAL_DMA_Init+0x2ac>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80044c6:	4620      	mov	r0, r4
 80044c8:	f7ff fe0c 	bl	80040e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80044cc:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80044ce:	2200      	movs	r2, #0
 80044d0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044d2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80044d4:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 80044d6:	605a      	str	r2, [r3, #4]
 80044d8:	e7a6      	b.n	8004428 <HAL_DMA_Init+0x2c8>
    return HAL_ERROR;
 80044da:	2001      	movs	r0, #1
 80044dc:	e6ee      	b.n	80042bc <HAL_DMA_Init+0x15c>
 80044de:	bf00      	nop
 80044e0:	fe10803f 	.word	0xfe10803f
 80044e4:	5c001000 	.word	0x5c001000
 80044e8:	ffff0000 	.word	0xffff0000
 80044ec:	40020010 	.word	0x40020010
 80044f0:	40020028 	.word	0x40020028
 80044f4:	58025408 	.word	0x58025408
 80044f8:	fffe000f 	.word	0xfffe000f
 80044fc:	a7fdabf8 	.word	0xa7fdabf8
 8004500:	cccccccd 	.word	0xcccccccd

08004504 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8004504:	2800      	cmp	r0, #0
 8004506:	f000 813e 	beq.w	8004786 <HAL_DMA_Start_IT+0x282>
{
 800450a:	b570      	push	{r4, r5, r6, lr}
 800450c:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 800450e:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 8004512:	2801      	cmp	r0, #1
 8004514:	f000 8139 	beq.w	800478a <HAL_DMA_Start_IT+0x286>
 8004518:	2001      	movs	r0, #1
 800451a:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800451e:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 8004522:	b2c0      	uxtb	r0, r0
 8004524:	2801      	cmp	r0, #1
 8004526:	d007      	beq.n	8004538 <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004528:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800452c:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 800452e:	2300      	movs	r3, #0
 8004530:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    status = HAL_ERROR;
 8004534:	2001      	movs	r0, #1
}
 8004536:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8004538:	2002      	movs	r0, #2
 800453a:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800453e:	2000      	movs	r0, #0
 8004540:	6560      	str	r0, [r4, #84]	@ 0x54
    __HAL_DMA_DISABLE(hdma);
 8004542:	6820      	ldr	r0, [r4, #0]
 8004544:	4e92      	ldr	r6, [pc, #584]	@ (8004790 <HAL_DMA_Start_IT+0x28c>)
 8004546:	4d93      	ldr	r5, [pc, #588]	@ (8004794 <HAL_DMA_Start_IT+0x290>)
 8004548:	42a8      	cmp	r0, r5
 800454a:	bf18      	it	ne
 800454c:	42b0      	cmpne	r0, r6
 800454e:	d02f      	beq.n	80045b0 <HAL_DMA_Start_IT+0xac>
 8004550:	3518      	adds	r5, #24
 8004552:	42a8      	cmp	r0, r5
 8004554:	d02c      	beq.n	80045b0 <HAL_DMA_Start_IT+0xac>
 8004556:	3518      	adds	r5, #24
 8004558:	42a8      	cmp	r0, r5
 800455a:	d029      	beq.n	80045b0 <HAL_DMA_Start_IT+0xac>
 800455c:	3518      	adds	r5, #24
 800455e:	42a8      	cmp	r0, r5
 8004560:	d026      	beq.n	80045b0 <HAL_DMA_Start_IT+0xac>
 8004562:	3518      	adds	r5, #24
 8004564:	42a8      	cmp	r0, r5
 8004566:	d023      	beq.n	80045b0 <HAL_DMA_Start_IT+0xac>
 8004568:	3518      	adds	r5, #24
 800456a:	42a8      	cmp	r0, r5
 800456c:	d020      	beq.n	80045b0 <HAL_DMA_Start_IT+0xac>
 800456e:	3518      	adds	r5, #24
 8004570:	42a8      	cmp	r0, r5
 8004572:	d01d      	beq.n	80045b0 <HAL_DMA_Start_IT+0xac>
 8004574:	f505 7556 	add.w	r5, r5, #856	@ 0x358
 8004578:	42a8      	cmp	r0, r5
 800457a:	d019      	beq.n	80045b0 <HAL_DMA_Start_IT+0xac>
 800457c:	3518      	adds	r5, #24
 800457e:	42a8      	cmp	r0, r5
 8004580:	d016      	beq.n	80045b0 <HAL_DMA_Start_IT+0xac>
 8004582:	3518      	adds	r5, #24
 8004584:	42a8      	cmp	r0, r5
 8004586:	d013      	beq.n	80045b0 <HAL_DMA_Start_IT+0xac>
 8004588:	3518      	adds	r5, #24
 800458a:	42a8      	cmp	r0, r5
 800458c:	d010      	beq.n	80045b0 <HAL_DMA_Start_IT+0xac>
 800458e:	3518      	adds	r5, #24
 8004590:	42a8      	cmp	r0, r5
 8004592:	d00d      	beq.n	80045b0 <HAL_DMA_Start_IT+0xac>
 8004594:	3518      	adds	r5, #24
 8004596:	42a8      	cmp	r0, r5
 8004598:	d00a      	beq.n	80045b0 <HAL_DMA_Start_IT+0xac>
 800459a:	3518      	adds	r5, #24
 800459c:	42a8      	cmp	r0, r5
 800459e:	d007      	beq.n	80045b0 <HAL_DMA_Start_IT+0xac>
 80045a0:	3518      	adds	r5, #24
 80045a2:	42a8      	cmp	r0, r5
 80045a4:	d004      	beq.n	80045b0 <HAL_DMA_Start_IT+0xac>
 80045a6:	6805      	ldr	r5, [r0, #0]
 80045a8:	f025 0501 	bic.w	r5, r5, #1
 80045ac:	6005      	str	r5, [r0, #0]
 80045ae:	e003      	b.n	80045b8 <HAL_DMA_Start_IT+0xb4>
 80045b0:	6805      	ldr	r5, [r0, #0]
 80045b2:	f025 0501 	bic.w	r5, r5, #1
 80045b6:	6005      	str	r5, [r0, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80045b8:	4620      	mov	r0, r4
 80045ba:	f7ff fbbf 	bl	8003d3c <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80045be:	6823      	ldr	r3, [r4, #0]
 80045c0:	4973      	ldr	r1, [pc, #460]	@ (8004790 <HAL_DMA_Start_IT+0x28c>)
 80045c2:	4a74      	ldr	r2, [pc, #464]	@ (8004794 <HAL_DMA_Start_IT+0x290>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	bf18      	it	ne
 80045c8:	428b      	cmpne	r3, r1
 80045ca:	d038      	beq.n	800463e <HAL_DMA_Start_IT+0x13a>
 80045cc:	3218      	adds	r2, #24
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d035      	beq.n	800463e <HAL_DMA_Start_IT+0x13a>
 80045d2:	3218      	adds	r2, #24
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d032      	beq.n	800463e <HAL_DMA_Start_IT+0x13a>
 80045d8:	3218      	adds	r2, #24
 80045da:	4293      	cmp	r3, r2
 80045dc:	d02f      	beq.n	800463e <HAL_DMA_Start_IT+0x13a>
 80045de:	3218      	adds	r2, #24
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d02c      	beq.n	800463e <HAL_DMA_Start_IT+0x13a>
 80045e4:	3218      	adds	r2, #24
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d029      	beq.n	800463e <HAL_DMA_Start_IT+0x13a>
 80045ea:	3218      	adds	r2, #24
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d026      	beq.n	800463e <HAL_DMA_Start_IT+0x13a>
 80045f0:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d022      	beq.n	800463e <HAL_DMA_Start_IT+0x13a>
 80045f8:	3218      	adds	r2, #24
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d01f      	beq.n	800463e <HAL_DMA_Start_IT+0x13a>
 80045fe:	3218      	adds	r2, #24
 8004600:	4293      	cmp	r3, r2
 8004602:	d01c      	beq.n	800463e <HAL_DMA_Start_IT+0x13a>
 8004604:	3218      	adds	r2, #24
 8004606:	4293      	cmp	r3, r2
 8004608:	d019      	beq.n	800463e <HAL_DMA_Start_IT+0x13a>
 800460a:	3218      	adds	r2, #24
 800460c:	4293      	cmp	r3, r2
 800460e:	d016      	beq.n	800463e <HAL_DMA_Start_IT+0x13a>
 8004610:	3218      	adds	r2, #24
 8004612:	4293      	cmp	r3, r2
 8004614:	d013      	beq.n	800463e <HAL_DMA_Start_IT+0x13a>
 8004616:	3218      	adds	r2, #24
 8004618:	4293      	cmp	r3, r2
 800461a:	d010      	beq.n	800463e <HAL_DMA_Start_IT+0x13a>
 800461c:	3218      	adds	r2, #24
 800461e:	4293      	cmp	r3, r2
 8004620:	d00d      	beq.n	800463e <HAL_DMA_Start_IT+0x13a>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	f022 020e 	bic.w	r2, r2, #14
 8004628:	f042 020a 	orr.w	r2, r2, #10
 800462c:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800462e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004630:	b193      	cbz	r3, 8004658 <HAL_DMA_Start_IT+0x154>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004632:	6822      	ldr	r2, [r4, #0]
 8004634:	6813      	ldr	r3, [r2, #0]
 8004636:	f043 0304 	orr.w	r3, r3, #4
 800463a:	6013      	str	r3, [r2, #0]
 800463c:	e00c      	b.n	8004658 <HAL_DMA_Start_IT+0x154>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	f022 021e 	bic.w	r2, r2, #30
 8004644:	f042 0216 	orr.w	r2, r2, #22
 8004648:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800464a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800464c:	b123      	cbz	r3, 8004658 <HAL_DMA_Start_IT+0x154>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800464e:	6822      	ldr	r2, [r4, #0]
 8004650:	6813      	ldr	r3, [r2, #0]
 8004652:	f043 0308 	orr.w	r3, r3, #8
 8004656:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004658:	6823      	ldr	r3, [r4, #0]
 800465a:	494d      	ldr	r1, [pc, #308]	@ (8004790 <HAL_DMA_Start_IT+0x28c>)
 800465c:	4a4d      	ldr	r2, [pc, #308]	@ (8004794 <HAL_DMA_Start_IT+0x290>)
 800465e:	4293      	cmp	r3, r2
 8004660:	bf18      	it	ne
 8004662:	428b      	cmpne	r3, r1
 8004664:	d042      	beq.n	80046ec <HAL_DMA_Start_IT+0x1e8>
 8004666:	3218      	adds	r2, #24
 8004668:	4293      	cmp	r3, r2
 800466a:	d03f      	beq.n	80046ec <HAL_DMA_Start_IT+0x1e8>
 800466c:	3218      	adds	r2, #24
 800466e:	4293      	cmp	r3, r2
 8004670:	d03c      	beq.n	80046ec <HAL_DMA_Start_IT+0x1e8>
 8004672:	3218      	adds	r2, #24
 8004674:	4293      	cmp	r3, r2
 8004676:	d039      	beq.n	80046ec <HAL_DMA_Start_IT+0x1e8>
 8004678:	3218      	adds	r2, #24
 800467a:	4293      	cmp	r3, r2
 800467c:	d036      	beq.n	80046ec <HAL_DMA_Start_IT+0x1e8>
 800467e:	3218      	adds	r2, #24
 8004680:	4293      	cmp	r3, r2
 8004682:	d033      	beq.n	80046ec <HAL_DMA_Start_IT+0x1e8>
 8004684:	3218      	adds	r2, #24
 8004686:	4293      	cmp	r3, r2
 8004688:	d030      	beq.n	80046ec <HAL_DMA_Start_IT+0x1e8>
 800468a:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 800468e:	4293      	cmp	r3, r2
 8004690:	d02c      	beq.n	80046ec <HAL_DMA_Start_IT+0x1e8>
 8004692:	3218      	adds	r2, #24
 8004694:	4293      	cmp	r3, r2
 8004696:	d029      	beq.n	80046ec <HAL_DMA_Start_IT+0x1e8>
 8004698:	3218      	adds	r2, #24
 800469a:	4293      	cmp	r3, r2
 800469c:	d026      	beq.n	80046ec <HAL_DMA_Start_IT+0x1e8>
 800469e:	3218      	adds	r2, #24
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d023      	beq.n	80046ec <HAL_DMA_Start_IT+0x1e8>
 80046a4:	3218      	adds	r2, #24
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d020      	beq.n	80046ec <HAL_DMA_Start_IT+0x1e8>
 80046aa:	3218      	adds	r2, #24
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d01d      	beq.n	80046ec <HAL_DMA_Start_IT+0x1e8>
 80046b0:	3218      	adds	r2, #24
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d01a      	beq.n	80046ec <HAL_DMA_Start_IT+0x1e8>
 80046b6:	3218      	adds	r2, #24
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d017      	beq.n	80046ec <HAL_DMA_Start_IT+0x1e8>
 80046bc:	4a36      	ldr	r2, [pc, #216]	@ (8004798 <HAL_DMA_Start_IT+0x294>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d014      	beq.n	80046ec <HAL_DMA_Start_IT+0x1e8>
 80046c2:	3214      	adds	r2, #20
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d011      	beq.n	80046ec <HAL_DMA_Start_IT+0x1e8>
 80046c8:	3214      	adds	r2, #20
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d00e      	beq.n	80046ec <HAL_DMA_Start_IT+0x1e8>
 80046ce:	3214      	adds	r2, #20
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d00b      	beq.n	80046ec <HAL_DMA_Start_IT+0x1e8>
 80046d4:	3214      	adds	r2, #20
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d008      	beq.n	80046ec <HAL_DMA_Start_IT+0x1e8>
 80046da:	3214      	adds	r2, #20
 80046dc:	4293      	cmp	r3, r2
 80046de:	d005      	beq.n	80046ec <HAL_DMA_Start_IT+0x1e8>
 80046e0:	3214      	adds	r2, #20
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d002      	beq.n	80046ec <HAL_DMA_Start_IT+0x1e8>
 80046e6:	3214      	adds	r2, #20
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d10e      	bne.n	800470a <HAL_DMA_Start_IT+0x206>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80046ec:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 80046f4:	d003      	beq.n	80046fe <HAL_DMA_Start_IT+0x1fa>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046fc:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 80046fe:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8004700:	b11b      	cbz	r3, 800470a <HAL_DMA_Start_IT+0x206>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004708:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 800470a:	6823      	ldr	r3, [r4, #0]
 800470c:	4920      	ldr	r1, [pc, #128]	@ (8004790 <HAL_DMA_Start_IT+0x28c>)
 800470e:	4a21      	ldr	r2, [pc, #132]	@ (8004794 <HAL_DMA_Start_IT+0x290>)
 8004710:	4293      	cmp	r3, r2
 8004712:	bf18      	it	ne
 8004714:	428b      	cmpne	r3, r1
 8004716:	d030      	beq.n	800477a <HAL_DMA_Start_IT+0x276>
 8004718:	3218      	adds	r2, #24
 800471a:	4293      	cmp	r3, r2
 800471c:	d02d      	beq.n	800477a <HAL_DMA_Start_IT+0x276>
 800471e:	3218      	adds	r2, #24
 8004720:	4293      	cmp	r3, r2
 8004722:	d02a      	beq.n	800477a <HAL_DMA_Start_IT+0x276>
 8004724:	3218      	adds	r2, #24
 8004726:	4293      	cmp	r3, r2
 8004728:	d027      	beq.n	800477a <HAL_DMA_Start_IT+0x276>
 800472a:	3218      	adds	r2, #24
 800472c:	4293      	cmp	r3, r2
 800472e:	d024      	beq.n	800477a <HAL_DMA_Start_IT+0x276>
 8004730:	3218      	adds	r2, #24
 8004732:	4293      	cmp	r3, r2
 8004734:	d021      	beq.n	800477a <HAL_DMA_Start_IT+0x276>
 8004736:	3218      	adds	r2, #24
 8004738:	4293      	cmp	r3, r2
 800473a:	d01e      	beq.n	800477a <HAL_DMA_Start_IT+0x276>
 800473c:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004740:	4293      	cmp	r3, r2
 8004742:	d01a      	beq.n	800477a <HAL_DMA_Start_IT+0x276>
 8004744:	3218      	adds	r2, #24
 8004746:	4293      	cmp	r3, r2
 8004748:	d017      	beq.n	800477a <HAL_DMA_Start_IT+0x276>
 800474a:	3218      	adds	r2, #24
 800474c:	4293      	cmp	r3, r2
 800474e:	d014      	beq.n	800477a <HAL_DMA_Start_IT+0x276>
 8004750:	3218      	adds	r2, #24
 8004752:	4293      	cmp	r3, r2
 8004754:	d011      	beq.n	800477a <HAL_DMA_Start_IT+0x276>
 8004756:	3218      	adds	r2, #24
 8004758:	4293      	cmp	r3, r2
 800475a:	d00e      	beq.n	800477a <HAL_DMA_Start_IT+0x276>
 800475c:	3218      	adds	r2, #24
 800475e:	4293      	cmp	r3, r2
 8004760:	d00b      	beq.n	800477a <HAL_DMA_Start_IT+0x276>
 8004762:	3218      	adds	r2, #24
 8004764:	4293      	cmp	r3, r2
 8004766:	d008      	beq.n	800477a <HAL_DMA_Start_IT+0x276>
 8004768:	3218      	adds	r2, #24
 800476a:	4293      	cmp	r3, r2
 800476c:	d005      	beq.n	800477a <HAL_DMA_Start_IT+0x276>
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	f042 0201 	orr.w	r2, r2, #1
 8004774:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004776:	2000      	movs	r0, #0
 8004778:	e6dd      	b.n	8004536 <HAL_DMA_Start_IT+0x32>
    __HAL_DMA_ENABLE(hdma);
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	f042 0201 	orr.w	r2, r2, #1
 8004780:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004782:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8004784:	e6d7      	b.n	8004536 <HAL_DMA_Start_IT+0x32>
    return HAL_ERROR;
 8004786:	2001      	movs	r0, #1
}
 8004788:	4770      	bx	lr
  __HAL_LOCK(hdma);
 800478a:	2002      	movs	r0, #2
 800478c:	e6d3      	b.n	8004536 <HAL_DMA_Start_IT+0x32>
 800478e:	bf00      	nop
 8004790:	40020010 	.word	0x40020010
 8004794:	40020028 	.word	0x40020028
 8004798:	58025408 	.word	0x58025408

0800479c <HAL_DMA_Abort>:
{
 800479c:	b570      	push	{r4, r5, r6, lr}
 800479e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80047a0:	f7fe fcb0 	bl	8003104 <HAL_GetTick>
  if(hdma == NULL)
 80047a4:	2c00      	cmp	r4, #0
 80047a6:	f000 8191 	beq.w	8004acc <HAL_DMA_Abort+0x330>
 80047aa:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047ac:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d006      	beq.n	80047c4 <HAL_DMA_Abort+0x28>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047b6:	2380      	movs	r3, #128	@ 0x80
 80047b8:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 80047ba:	2300      	movs	r3, #0
 80047bc:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 80047c0:	2001      	movs	r0, #1
}
 80047c2:	bd70      	pop	{r4, r5, r6, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80047c4:	6823      	ldr	r3, [r4, #0]
 80047c6:	498c      	ldr	r1, [pc, #560]	@ (80049f8 <HAL_DMA_Abort+0x25c>)
 80047c8:	4a8c      	ldr	r2, [pc, #560]	@ (80049fc <HAL_DMA_Abort+0x260>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	bf18      	it	ne
 80047ce:	428b      	cmpne	r3, r1
 80047d0:	d030      	beq.n	8004834 <HAL_DMA_Abort+0x98>
 80047d2:	3218      	adds	r2, #24
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d02d      	beq.n	8004834 <HAL_DMA_Abort+0x98>
 80047d8:	3218      	adds	r2, #24
 80047da:	4293      	cmp	r3, r2
 80047dc:	d02a      	beq.n	8004834 <HAL_DMA_Abort+0x98>
 80047de:	3218      	adds	r2, #24
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d027      	beq.n	8004834 <HAL_DMA_Abort+0x98>
 80047e4:	3218      	adds	r2, #24
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d024      	beq.n	8004834 <HAL_DMA_Abort+0x98>
 80047ea:	3218      	adds	r2, #24
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d021      	beq.n	8004834 <HAL_DMA_Abort+0x98>
 80047f0:	3218      	adds	r2, #24
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d01e      	beq.n	8004834 <HAL_DMA_Abort+0x98>
 80047f6:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d01a      	beq.n	8004834 <HAL_DMA_Abort+0x98>
 80047fe:	3218      	adds	r2, #24
 8004800:	4293      	cmp	r3, r2
 8004802:	d017      	beq.n	8004834 <HAL_DMA_Abort+0x98>
 8004804:	3218      	adds	r2, #24
 8004806:	4293      	cmp	r3, r2
 8004808:	d014      	beq.n	8004834 <HAL_DMA_Abort+0x98>
 800480a:	3218      	adds	r2, #24
 800480c:	4293      	cmp	r3, r2
 800480e:	d011      	beq.n	8004834 <HAL_DMA_Abort+0x98>
 8004810:	3218      	adds	r2, #24
 8004812:	4293      	cmp	r3, r2
 8004814:	d00e      	beq.n	8004834 <HAL_DMA_Abort+0x98>
 8004816:	3218      	adds	r2, #24
 8004818:	4293      	cmp	r3, r2
 800481a:	d00b      	beq.n	8004834 <HAL_DMA_Abort+0x98>
 800481c:	3218      	adds	r2, #24
 800481e:	4293      	cmp	r3, r2
 8004820:	d008      	beq.n	8004834 <HAL_DMA_Abort+0x98>
 8004822:	3218      	adds	r2, #24
 8004824:	4293      	cmp	r3, r2
 8004826:	d005      	beq.n	8004834 <HAL_DMA_Abort+0x98>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	f022 020e 	bic.w	r2, r2, #14
 800482e:	601a      	str	r2, [r3, #0]
      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004830:	6826      	ldr	r6, [r4, #0]
 8004832:	e009      	b.n	8004848 <HAL_DMA_Abort+0xac>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	f022 021e 	bic.w	r2, r2, #30
 800483a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800483c:	6822      	ldr	r2, [r4, #0]
 800483e:	6953      	ldr	r3, [r2, #20]
 8004840:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004844:	6153      	str	r3, [r2, #20]
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004846:	6826      	ldr	r6, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004848:	6823      	ldr	r3, [r4, #0]
 800484a:	496b      	ldr	r1, [pc, #428]	@ (80049f8 <HAL_DMA_Abort+0x25c>)
 800484c:	4a6b      	ldr	r2, [pc, #428]	@ (80049fc <HAL_DMA_Abort+0x260>)
 800484e:	4293      	cmp	r3, r2
 8004850:	bf18      	it	ne
 8004852:	428b      	cmpne	r3, r1
 8004854:	d042      	beq.n	80048dc <HAL_DMA_Abort+0x140>
 8004856:	3218      	adds	r2, #24
 8004858:	4293      	cmp	r3, r2
 800485a:	d03f      	beq.n	80048dc <HAL_DMA_Abort+0x140>
 800485c:	3218      	adds	r2, #24
 800485e:	4293      	cmp	r3, r2
 8004860:	d03c      	beq.n	80048dc <HAL_DMA_Abort+0x140>
 8004862:	3218      	adds	r2, #24
 8004864:	4293      	cmp	r3, r2
 8004866:	d039      	beq.n	80048dc <HAL_DMA_Abort+0x140>
 8004868:	3218      	adds	r2, #24
 800486a:	4293      	cmp	r3, r2
 800486c:	d036      	beq.n	80048dc <HAL_DMA_Abort+0x140>
 800486e:	3218      	adds	r2, #24
 8004870:	4293      	cmp	r3, r2
 8004872:	d033      	beq.n	80048dc <HAL_DMA_Abort+0x140>
 8004874:	3218      	adds	r2, #24
 8004876:	4293      	cmp	r3, r2
 8004878:	d030      	beq.n	80048dc <HAL_DMA_Abort+0x140>
 800487a:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 800487e:	4293      	cmp	r3, r2
 8004880:	d02c      	beq.n	80048dc <HAL_DMA_Abort+0x140>
 8004882:	3218      	adds	r2, #24
 8004884:	4293      	cmp	r3, r2
 8004886:	d029      	beq.n	80048dc <HAL_DMA_Abort+0x140>
 8004888:	3218      	adds	r2, #24
 800488a:	4293      	cmp	r3, r2
 800488c:	d026      	beq.n	80048dc <HAL_DMA_Abort+0x140>
 800488e:	3218      	adds	r2, #24
 8004890:	4293      	cmp	r3, r2
 8004892:	d023      	beq.n	80048dc <HAL_DMA_Abort+0x140>
 8004894:	3218      	adds	r2, #24
 8004896:	4293      	cmp	r3, r2
 8004898:	d020      	beq.n	80048dc <HAL_DMA_Abort+0x140>
 800489a:	3218      	adds	r2, #24
 800489c:	4293      	cmp	r3, r2
 800489e:	d01d      	beq.n	80048dc <HAL_DMA_Abort+0x140>
 80048a0:	3218      	adds	r2, #24
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d01a      	beq.n	80048dc <HAL_DMA_Abort+0x140>
 80048a6:	3218      	adds	r2, #24
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d017      	beq.n	80048dc <HAL_DMA_Abort+0x140>
 80048ac:	4a54      	ldr	r2, [pc, #336]	@ (8004a00 <HAL_DMA_Abort+0x264>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d014      	beq.n	80048dc <HAL_DMA_Abort+0x140>
 80048b2:	3214      	adds	r2, #20
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d011      	beq.n	80048dc <HAL_DMA_Abort+0x140>
 80048b8:	3214      	adds	r2, #20
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d00e      	beq.n	80048dc <HAL_DMA_Abort+0x140>
 80048be:	3214      	adds	r2, #20
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d00b      	beq.n	80048dc <HAL_DMA_Abort+0x140>
 80048c4:	3214      	adds	r2, #20
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d008      	beq.n	80048dc <HAL_DMA_Abort+0x140>
 80048ca:	3214      	adds	r2, #20
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d005      	beq.n	80048dc <HAL_DMA_Abort+0x140>
 80048d0:	3214      	adds	r2, #20
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d002      	beq.n	80048dc <HAL_DMA_Abort+0x140>
 80048d6:	3214      	adds	r2, #20
 80048d8:	4293      	cmp	r3, r2
 80048da:	d104      	bne.n	80048e6 <HAL_DMA_Abort+0x14a>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80048dc:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80048de:	6813      	ldr	r3, [r2, #0]
 80048e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048e4:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80048e6:	6823      	ldr	r3, [r4, #0]
 80048e8:	4943      	ldr	r1, [pc, #268]	@ (80049f8 <HAL_DMA_Abort+0x25c>)
 80048ea:	4a44      	ldr	r2, [pc, #272]	@ (80049fc <HAL_DMA_Abort+0x260>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	bf18      	it	ne
 80048f0:	428b      	cmpne	r3, r1
 80048f2:	d02f      	beq.n	8004954 <HAL_DMA_Abort+0x1b8>
 80048f4:	3218      	adds	r2, #24
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d02c      	beq.n	8004954 <HAL_DMA_Abort+0x1b8>
 80048fa:	3218      	adds	r2, #24
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d029      	beq.n	8004954 <HAL_DMA_Abort+0x1b8>
 8004900:	3218      	adds	r2, #24
 8004902:	4293      	cmp	r3, r2
 8004904:	d026      	beq.n	8004954 <HAL_DMA_Abort+0x1b8>
 8004906:	3218      	adds	r2, #24
 8004908:	4293      	cmp	r3, r2
 800490a:	d023      	beq.n	8004954 <HAL_DMA_Abort+0x1b8>
 800490c:	3218      	adds	r2, #24
 800490e:	4293      	cmp	r3, r2
 8004910:	d020      	beq.n	8004954 <HAL_DMA_Abort+0x1b8>
 8004912:	3218      	adds	r2, #24
 8004914:	4293      	cmp	r3, r2
 8004916:	d01d      	beq.n	8004954 <HAL_DMA_Abort+0x1b8>
 8004918:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 800491c:	4293      	cmp	r3, r2
 800491e:	d019      	beq.n	8004954 <HAL_DMA_Abort+0x1b8>
 8004920:	3218      	adds	r2, #24
 8004922:	4293      	cmp	r3, r2
 8004924:	d016      	beq.n	8004954 <HAL_DMA_Abort+0x1b8>
 8004926:	3218      	adds	r2, #24
 8004928:	4293      	cmp	r3, r2
 800492a:	d013      	beq.n	8004954 <HAL_DMA_Abort+0x1b8>
 800492c:	3218      	adds	r2, #24
 800492e:	4293      	cmp	r3, r2
 8004930:	d010      	beq.n	8004954 <HAL_DMA_Abort+0x1b8>
 8004932:	3218      	adds	r2, #24
 8004934:	4293      	cmp	r3, r2
 8004936:	d00d      	beq.n	8004954 <HAL_DMA_Abort+0x1b8>
 8004938:	3218      	adds	r2, #24
 800493a:	4293      	cmp	r3, r2
 800493c:	d00a      	beq.n	8004954 <HAL_DMA_Abort+0x1b8>
 800493e:	3218      	adds	r2, #24
 8004940:	4293      	cmp	r3, r2
 8004942:	d007      	beq.n	8004954 <HAL_DMA_Abort+0x1b8>
 8004944:	3218      	adds	r2, #24
 8004946:	4293      	cmp	r3, r2
 8004948:	d004      	beq.n	8004954 <HAL_DMA_Abort+0x1b8>
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	f022 0201 	bic.w	r2, r2, #1
 8004950:	601a      	str	r2, [r3, #0]
 8004952:	e003      	b.n	800495c <HAL_DMA_Abort+0x1c0>
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	f022 0201 	bic.w	r2, r2, #1
 800495a:	601a      	str	r2, [r3, #0]
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800495c:	6833      	ldr	r3, [r6, #0]
 800495e:	f013 0f01 	tst.w	r3, #1
 8004962:	d00e      	beq.n	8004982 <HAL_DMA_Abort+0x1e6>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004964:	f7fe fbce 	bl	8003104 <HAL_GetTick>
 8004968:	1b43      	subs	r3, r0, r5
 800496a:	2b05      	cmp	r3, #5
 800496c:	d9f6      	bls.n	800495c <HAL_DMA_Abort+0x1c0>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800496e:	2320      	movs	r3, #32
 8004970:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8004972:	2303      	movs	r3, #3
 8004974:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8004978:	2300      	movs	r3, #0
 800497a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        return HAL_ERROR;
 800497e:	2001      	movs	r0, #1
 8004980:	e71f      	b.n	80047c2 <HAL_DMA_Abort+0x26>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004982:	6823      	ldr	r3, [r4, #0]
 8004984:	491c      	ldr	r1, [pc, #112]	@ (80049f8 <HAL_DMA_Abort+0x25c>)
 8004986:	4a1d      	ldr	r2, [pc, #116]	@ (80049fc <HAL_DMA_Abort+0x260>)
 8004988:	4293      	cmp	r3, r2
 800498a:	bf18      	it	ne
 800498c:	428b      	cmpne	r3, r1
 800498e:	d039      	beq.n	8004a04 <HAL_DMA_Abort+0x268>
 8004990:	3218      	adds	r2, #24
 8004992:	4293      	cmp	r3, r2
 8004994:	d036      	beq.n	8004a04 <HAL_DMA_Abort+0x268>
 8004996:	3218      	adds	r2, #24
 8004998:	4293      	cmp	r3, r2
 800499a:	d033      	beq.n	8004a04 <HAL_DMA_Abort+0x268>
 800499c:	3218      	adds	r2, #24
 800499e:	4293      	cmp	r3, r2
 80049a0:	d030      	beq.n	8004a04 <HAL_DMA_Abort+0x268>
 80049a2:	3218      	adds	r2, #24
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d02d      	beq.n	8004a04 <HAL_DMA_Abort+0x268>
 80049a8:	3218      	adds	r2, #24
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d02a      	beq.n	8004a04 <HAL_DMA_Abort+0x268>
 80049ae:	3218      	adds	r2, #24
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d027      	beq.n	8004a04 <HAL_DMA_Abort+0x268>
 80049b4:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d023      	beq.n	8004a04 <HAL_DMA_Abort+0x268>
 80049bc:	3218      	adds	r2, #24
 80049be:	4293      	cmp	r3, r2
 80049c0:	d020      	beq.n	8004a04 <HAL_DMA_Abort+0x268>
 80049c2:	3218      	adds	r2, #24
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d01d      	beq.n	8004a04 <HAL_DMA_Abort+0x268>
 80049c8:	3218      	adds	r2, #24
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d01a      	beq.n	8004a04 <HAL_DMA_Abort+0x268>
 80049ce:	3218      	adds	r2, #24
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d017      	beq.n	8004a04 <HAL_DMA_Abort+0x268>
 80049d4:	3218      	adds	r2, #24
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d014      	beq.n	8004a04 <HAL_DMA_Abort+0x268>
 80049da:	3218      	adds	r2, #24
 80049dc:	4293      	cmp	r3, r2
 80049de:	d011      	beq.n	8004a04 <HAL_DMA_Abort+0x268>
 80049e0:	3218      	adds	r2, #24
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d00e      	beq.n	8004a04 <HAL_DMA_Abort+0x268>
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80049e6:	6da1      	ldr	r1, [r4, #88]	@ 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80049e8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80049ea:	f003 021f 	and.w	r2, r3, #31
 80049ee:	2301      	movs	r3, #1
 80049f0:	4093      	lsls	r3, r2
 80049f2:	604b      	str	r3, [r1, #4]
 80049f4:	e00d      	b.n	8004a12 <HAL_DMA_Abort+0x276>
 80049f6:	bf00      	nop
 80049f8:	40020010 	.word	0x40020010
 80049fc:	40020028 	.word	0x40020028
 8004a00:	58025408 	.word	0x58025408
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a04:	6da1      	ldr	r1, [r4, #88]	@ 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a06:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004a08:	f003 021f 	and.w	r2, r3, #31
 8004a0c:	233f      	movs	r3, #63	@ 0x3f
 8004a0e:	4093      	lsls	r3, r2
 8004a10:	608b      	str	r3, [r1, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004a12:	6823      	ldr	r3, [r4, #0]
 8004a14:	492e      	ldr	r1, [pc, #184]	@ (8004ad0 <HAL_DMA_Abort+0x334>)
 8004a16:	4a2f      	ldr	r2, [pc, #188]	@ (8004ad4 <HAL_DMA_Abort+0x338>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	bf18      	it	ne
 8004a1c:	428b      	cmpne	r3, r1
 8004a1e:	d042      	beq.n	8004aa6 <HAL_DMA_Abort+0x30a>
 8004a20:	3218      	adds	r2, #24
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d03f      	beq.n	8004aa6 <HAL_DMA_Abort+0x30a>
 8004a26:	3218      	adds	r2, #24
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d03c      	beq.n	8004aa6 <HAL_DMA_Abort+0x30a>
 8004a2c:	3218      	adds	r2, #24
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d039      	beq.n	8004aa6 <HAL_DMA_Abort+0x30a>
 8004a32:	3218      	adds	r2, #24
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d036      	beq.n	8004aa6 <HAL_DMA_Abort+0x30a>
 8004a38:	3218      	adds	r2, #24
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d033      	beq.n	8004aa6 <HAL_DMA_Abort+0x30a>
 8004a3e:	3218      	adds	r2, #24
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d030      	beq.n	8004aa6 <HAL_DMA_Abort+0x30a>
 8004a44:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d02c      	beq.n	8004aa6 <HAL_DMA_Abort+0x30a>
 8004a4c:	3218      	adds	r2, #24
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d029      	beq.n	8004aa6 <HAL_DMA_Abort+0x30a>
 8004a52:	3218      	adds	r2, #24
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d026      	beq.n	8004aa6 <HAL_DMA_Abort+0x30a>
 8004a58:	3218      	adds	r2, #24
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d023      	beq.n	8004aa6 <HAL_DMA_Abort+0x30a>
 8004a5e:	3218      	adds	r2, #24
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d020      	beq.n	8004aa6 <HAL_DMA_Abort+0x30a>
 8004a64:	3218      	adds	r2, #24
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d01d      	beq.n	8004aa6 <HAL_DMA_Abort+0x30a>
 8004a6a:	3218      	adds	r2, #24
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d01a      	beq.n	8004aa6 <HAL_DMA_Abort+0x30a>
 8004a70:	3218      	adds	r2, #24
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d017      	beq.n	8004aa6 <HAL_DMA_Abort+0x30a>
 8004a76:	4a18      	ldr	r2, [pc, #96]	@ (8004ad8 <HAL_DMA_Abort+0x33c>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d014      	beq.n	8004aa6 <HAL_DMA_Abort+0x30a>
 8004a7c:	3214      	adds	r2, #20
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d011      	beq.n	8004aa6 <HAL_DMA_Abort+0x30a>
 8004a82:	3214      	adds	r2, #20
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d00e      	beq.n	8004aa6 <HAL_DMA_Abort+0x30a>
 8004a88:	3214      	adds	r2, #20
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d00b      	beq.n	8004aa6 <HAL_DMA_Abort+0x30a>
 8004a8e:	3214      	adds	r2, #20
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d008      	beq.n	8004aa6 <HAL_DMA_Abort+0x30a>
 8004a94:	3214      	adds	r2, #20
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d005      	beq.n	8004aa6 <HAL_DMA_Abort+0x30a>
 8004a9a:	3214      	adds	r2, #20
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d002      	beq.n	8004aa6 <HAL_DMA_Abort+0x30a>
 8004aa0:	3214      	adds	r2, #20
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d10b      	bne.n	8004abe <HAL_DMA_Abort+0x322>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004aa6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004aa8:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 8004aaa:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8004aac:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8004aae:	b133      	cbz	r3, 8004abe <HAL_DMA_Abort+0x322>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ab6:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ab8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8004aba:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 8004abc:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8004ac4:	2000      	movs	r0, #0
 8004ac6:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  return HAL_OK;
 8004aca:	e67a      	b.n	80047c2 <HAL_DMA_Abort+0x26>
    return HAL_ERROR;
 8004acc:	2001      	movs	r0, #1
 8004ace:	e678      	b.n	80047c2 <HAL_DMA_Abort+0x26>
 8004ad0:	40020010 	.word	0x40020010
 8004ad4:	40020028 	.word	0x40020028
 8004ad8:	58025408 	.word	0x58025408

08004adc <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8004adc:	2800      	cmp	r0, #0
 8004ade:	f000 8128 	beq.w	8004d32 <HAL_DMA_Abort_IT+0x256>
{
 8004ae2:	b508      	push	{r3, lr}
 8004ae4:	4602      	mov	r2, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ae6:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d003      	beq.n	8004af8 <HAL_DMA_Abort_IT+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004af0:	2380      	movs	r3, #128	@ 0x80
 8004af2:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8004af4:	2001      	movs	r0, #1
}
 8004af6:	bd08      	pop	{r3, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004af8:	6803      	ldr	r3, [r0, #0]
 8004afa:	4890      	ldr	r0, [pc, #576]	@ (8004d3c <HAL_DMA_Abort_IT+0x260>)
 8004afc:	4990      	ldr	r1, [pc, #576]	@ (8004d40 <HAL_DMA_Abort_IT+0x264>)
 8004afe:	428b      	cmp	r3, r1
 8004b00:	bf18      	it	ne
 8004b02:	4283      	cmpne	r3, r0
 8004b04:	bf0c      	ite	eq
 8004b06:	2001      	moveq	r0, #1
 8004b08:	2000      	movne	r0, #0
 8004b0a:	d065      	beq.n	8004bd8 <HAL_DMA_Abort_IT+0xfc>
 8004b0c:	3118      	adds	r1, #24
 8004b0e:	428b      	cmp	r3, r1
 8004b10:	d062      	beq.n	8004bd8 <HAL_DMA_Abort_IT+0xfc>
 8004b12:	3118      	adds	r1, #24
 8004b14:	428b      	cmp	r3, r1
 8004b16:	d05f      	beq.n	8004bd8 <HAL_DMA_Abort_IT+0xfc>
 8004b18:	3118      	adds	r1, #24
 8004b1a:	428b      	cmp	r3, r1
 8004b1c:	d05c      	beq.n	8004bd8 <HAL_DMA_Abort_IT+0xfc>
 8004b1e:	3118      	adds	r1, #24
 8004b20:	428b      	cmp	r3, r1
 8004b22:	d059      	beq.n	8004bd8 <HAL_DMA_Abort_IT+0xfc>
 8004b24:	3118      	adds	r1, #24
 8004b26:	428b      	cmp	r3, r1
 8004b28:	d056      	beq.n	8004bd8 <HAL_DMA_Abort_IT+0xfc>
 8004b2a:	3118      	adds	r1, #24
 8004b2c:	428b      	cmp	r3, r1
 8004b2e:	d053      	beq.n	8004bd8 <HAL_DMA_Abort_IT+0xfc>
 8004b30:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8004b34:	428b      	cmp	r3, r1
 8004b36:	d04f      	beq.n	8004bd8 <HAL_DMA_Abort_IT+0xfc>
 8004b38:	3118      	adds	r1, #24
 8004b3a:	428b      	cmp	r3, r1
 8004b3c:	d04c      	beq.n	8004bd8 <HAL_DMA_Abort_IT+0xfc>
 8004b3e:	3118      	adds	r1, #24
 8004b40:	428b      	cmp	r3, r1
 8004b42:	d049      	beq.n	8004bd8 <HAL_DMA_Abort_IT+0xfc>
 8004b44:	3118      	adds	r1, #24
 8004b46:	428b      	cmp	r3, r1
 8004b48:	d046      	beq.n	8004bd8 <HAL_DMA_Abort_IT+0xfc>
 8004b4a:	3118      	adds	r1, #24
 8004b4c:	428b      	cmp	r3, r1
 8004b4e:	d043      	beq.n	8004bd8 <HAL_DMA_Abort_IT+0xfc>
 8004b50:	3118      	adds	r1, #24
 8004b52:	428b      	cmp	r3, r1
 8004b54:	d040      	beq.n	8004bd8 <HAL_DMA_Abort_IT+0xfc>
 8004b56:	3118      	adds	r1, #24
 8004b58:	428b      	cmp	r3, r1
 8004b5a:	d03d      	beq.n	8004bd8 <HAL_DMA_Abort_IT+0xfc>
 8004b5c:	3118      	adds	r1, #24
 8004b5e:	428b      	cmp	r3, r1
 8004b60:	d03a      	beq.n	8004bd8 <HAL_DMA_Abort_IT+0xfc>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004b62:	6819      	ldr	r1, [r3, #0]
 8004b64:	f021 010e 	bic.w	r1, r1, #14
 8004b68:	6019      	str	r1, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 8004b6a:	6813      	ldr	r3, [r2, #0]
 8004b6c:	4873      	ldr	r0, [pc, #460]	@ (8004d3c <HAL_DMA_Abort_IT+0x260>)
 8004b6e:	4974      	ldr	r1, [pc, #464]	@ (8004d40 <HAL_DMA_Abort_IT+0x264>)
 8004b70:	428b      	cmp	r3, r1
 8004b72:	bf18      	it	ne
 8004b74:	4283      	cmpne	r3, r0
 8004b76:	d06a      	beq.n	8004c4e <HAL_DMA_Abort_IT+0x172>
 8004b78:	4972      	ldr	r1, [pc, #456]	@ (8004d44 <HAL_DMA_Abort_IT+0x268>)
 8004b7a:	428b      	cmp	r3, r1
 8004b7c:	d067      	beq.n	8004c4e <HAL_DMA_Abort_IT+0x172>
 8004b7e:	3118      	adds	r1, #24
 8004b80:	428b      	cmp	r3, r1
 8004b82:	d064      	beq.n	8004c4e <HAL_DMA_Abort_IT+0x172>
 8004b84:	3118      	adds	r1, #24
 8004b86:	428b      	cmp	r3, r1
 8004b88:	d061      	beq.n	8004c4e <HAL_DMA_Abort_IT+0x172>
 8004b8a:	3118      	adds	r1, #24
 8004b8c:	428b      	cmp	r3, r1
 8004b8e:	d05e      	beq.n	8004c4e <HAL_DMA_Abort_IT+0x172>
 8004b90:	3118      	adds	r1, #24
 8004b92:	428b      	cmp	r3, r1
 8004b94:	d05b      	beq.n	8004c4e <HAL_DMA_Abort_IT+0x172>
 8004b96:	3118      	adds	r1, #24
 8004b98:	428b      	cmp	r3, r1
 8004b9a:	d058      	beq.n	8004c4e <HAL_DMA_Abort_IT+0x172>
 8004b9c:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8004ba0:	428b      	cmp	r3, r1
 8004ba2:	d054      	beq.n	8004c4e <HAL_DMA_Abort_IT+0x172>
 8004ba4:	3118      	adds	r1, #24
 8004ba6:	428b      	cmp	r3, r1
 8004ba8:	d051      	beq.n	8004c4e <HAL_DMA_Abort_IT+0x172>
 8004baa:	3118      	adds	r1, #24
 8004bac:	428b      	cmp	r3, r1
 8004bae:	d04e      	beq.n	8004c4e <HAL_DMA_Abort_IT+0x172>
 8004bb0:	3118      	adds	r1, #24
 8004bb2:	428b      	cmp	r3, r1
 8004bb4:	d04b      	beq.n	8004c4e <HAL_DMA_Abort_IT+0x172>
 8004bb6:	3118      	adds	r1, #24
 8004bb8:	428b      	cmp	r3, r1
 8004bba:	d048      	beq.n	8004c4e <HAL_DMA_Abort_IT+0x172>
 8004bbc:	3118      	adds	r1, #24
 8004bbe:	428b      	cmp	r3, r1
 8004bc0:	d045      	beq.n	8004c4e <HAL_DMA_Abort_IT+0x172>
 8004bc2:	3118      	adds	r1, #24
 8004bc4:	428b      	cmp	r3, r1
 8004bc6:	d042      	beq.n	8004c4e <HAL_DMA_Abort_IT+0x172>
 8004bc8:	3118      	adds	r1, #24
 8004bca:	428b      	cmp	r3, r1
 8004bcc:	d03f      	beq.n	8004c4e <HAL_DMA_Abort_IT+0x172>
 8004bce:	6819      	ldr	r1, [r3, #0]
 8004bd0:	f021 0101 	bic.w	r1, r1, #1
 8004bd4:	6019      	str	r1, [r3, #0]
 8004bd6:	e03e      	b.n	8004c56 <HAL_DMA_Abort_IT+0x17a>
      hdma->State = HAL_DMA_STATE_ABORT;
 8004bd8:	2104      	movs	r1, #4
 8004bda:	f882 1035 	strb.w	r1, [r2, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8004bde:	bb80      	cbnz	r0, 8004c42 <HAL_DMA_Abort_IT+0x166>
 8004be0:	4a58      	ldr	r2, [pc, #352]	@ (8004d44 <HAL_DMA_Abort_IT+0x268>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d02d      	beq.n	8004c42 <HAL_DMA_Abort_IT+0x166>
 8004be6:	3218      	adds	r2, #24
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d02a      	beq.n	8004c42 <HAL_DMA_Abort_IT+0x166>
 8004bec:	3218      	adds	r2, #24
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d027      	beq.n	8004c42 <HAL_DMA_Abort_IT+0x166>
 8004bf2:	3218      	adds	r2, #24
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d024      	beq.n	8004c42 <HAL_DMA_Abort_IT+0x166>
 8004bf8:	3218      	adds	r2, #24
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d021      	beq.n	8004c42 <HAL_DMA_Abort_IT+0x166>
 8004bfe:	3218      	adds	r2, #24
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d01e      	beq.n	8004c42 <HAL_DMA_Abort_IT+0x166>
 8004c04:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d01a      	beq.n	8004c42 <HAL_DMA_Abort_IT+0x166>
 8004c0c:	3218      	adds	r2, #24
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d017      	beq.n	8004c42 <HAL_DMA_Abort_IT+0x166>
 8004c12:	3218      	adds	r2, #24
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d014      	beq.n	8004c42 <HAL_DMA_Abort_IT+0x166>
 8004c18:	3218      	adds	r2, #24
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d011      	beq.n	8004c42 <HAL_DMA_Abort_IT+0x166>
 8004c1e:	3218      	adds	r2, #24
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d00e      	beq.n	8004c42 <HAL_DMA_Abort_IT+0x166>
 8004c24:	3218      	adds	r2, #24
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d00b      	beq.n	8004c42 <HAL_DMA_Abort_IT+0x166>
 8004c2a:	3218      	adds	r2, #24
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d008      	beq.n	8004c42 <HAL_DMA_Abort_IT+0x166>
 8004c30:	3218      	adds	r2, #24
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d005      	beq.n	8004c42 <HAL_DMA_Abort_IT+0x166>
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	f022 0201 	bic.w	r2, r2, #1
 8004c3c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004c3e:	2000      	movs	r0, #0
 8004c40:	e759      	b.n	8004af6 <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	f022 0201 	bic.w	r2, r2, #1
 8004c48:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004c4a:	2000      	movs	r0, #0
      __HAL_DMA_DISABLE(hdma);
 8004c4c:	e753      	b.n	8004af6 <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 8004c4e:	6819      	ldr	r1, [r3, #0]
 8004c50:	f021 0101 	bic.w	r1, r1, #1
 8004c54:	6019      	str	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c56:	6813      	ldr	r3, [r2, #0]
 8004c58:	4838      	ldr	r0, [pc, #224]	@ (8004d3c <HAL_DMA_Abort_IT+0x260>)
 8004c5a:	4939      	ldr	r1, [pc, #228]	@ (8004d40 <HAL_DMA_Abort_IT+0x264>)
 8004c5c:	428b      	cmp	r3, r1
 8004c5e:	bf18      	it	ne
 8004c60:	4283      	cmpne	r3, r0
 8004c62:	d042      	beq.n	8004cea <HAL_DMA_Abort_IT+0x20e>
 8004c64:	3118      	adds	r1, #24
 8004c66:	428b      	cmp	r3, r1
 8004c68:	d03f      	beq.n	8004cea <HAL_DMA_Abort_IT+0x20e>
 8004c6a:	3118      	adds	r1, #24
 8004c6c:	428b      	cmp	r3, r1
 8004c6e:	d03c      	beq.n	8004cea <HAL_DMA_Abort_IT+0x20e>
 8004c70:	3118      	adds	r1, #24
 8004c72:	428b      	cmp	r3, r1
 8004c74:	d039      	beq.n	8004cea <HAL_DMA_Abort_IT+0x20e>
 8004c76:	3118      	adds	r1, #24
 8004c78:	428b      	cmp	r3, r1
 8004c7a:	d036      	beq.n	8004cea <HAL_DMA_Abort_IT+0x20e>
 8004c7c:	3118      	adds	r1, #24
 8004c7e:	428b      	cmp	r3, r1
 8004c80:	d033      	beq.n	8004cea <HAL_DMA_Abort_IT+0x20e>
 8004c82:	3118      	adds	r1, #24
 8004c84:	428b      	cmp	r3, r1
 8004c86:	d030      	beq.n	8004cea <HAL_DMA_Abort_IT+0x20e>
 8004c88:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8004c8c:	428b      	cmp	r3, r1
 8004c8e:	d02c      	beq.n	8004cea <HAL_DMA_Abort_IT+0x20e>
 8004c90:	3118      	adds	r1, #24
 8004c92:	428b      	cmp	r3, r1
 8004c94:	d029      	beq.n	8004cea <HAL_DMA_Abort_IT+0x20e>
 8004c96:	3118      	adds	r1, #24
 8004c98:	428b      	cmp	r3, r1
 8004c9a:	d026      	beq.n	8004cea <HAL_DMA_Abort_IT+0x20e>
 8004c9c:	3118      	adds	r1, #24
 8004c9e:	428b      	cmp	r3, r1
 8004ca0:	d023      	beq.n	8004cea <HAL_DMA_Abort_IT+0x20e>
 8004ca2:	3118      	adds	r1, #24
 8004ca4:	428b      	cmp	r3, r1
 8004ca6:	d020      	beq.n	8004cea <HAL_DMA_Abort_IT+0x20e>
 8004ca8:	3118      	adds	r1, #24
 8004caa:	428b      	cmp	r3, r1
 8004cac:	d01d      	beq.n	8004cea <HAL_DMA_Abort_IT+0x20e>
 8004cae:	3118      	adds	r1, #24
 8004cb0:	428b      	cmp	r3, r1
 8004cb2:	d01a      	beq.n	8004cea <HAL_DMA_Abort_IT+0x20e>
 8004cb4:	3118      	adds	r1, #24
 8004cb6:	428b      	cmp	r3, r1
 8004cb8:	d017      	beq.n	8004cea <HAL_DMA_Abort_IT+0x20e>
 8004cba:	4923      	ldr	r1, [pc, #140]	@ (8004d48 <HAL_DMA_Abort_IT+0x26c>)
 8004cbc:	428b      	cmp	r3, r1
 8004cbe:	d014      	beq.n	8004cea <HAL_DMA_Abort_IT+0x20e>
 8004cc0:	3114      	adds	r1, #20
 8004cc2:	428b      	cmp	r3, r1
 8004cc4:	d011      	beq.n	8004cea <HAL_DMA_Abort_IT+0x20e>
 8004cc6:	3114      	adds	r1, #20
 8004cc8:	428b      	cmp	r3, r1
 8004cca:	d00e      	beq.n	8004cea <HAL_DMA_Abort_IT+0x20e>
 8004ccc:	3114      	adds	r1, #20
 8004cce:	428b      	cmp	r3, r1
 8004cd0:	d00b      	beq.n	8004cea <HAL_DMA_Abort_IT+0x20e>
 8004cd2:	3114      	adds	r1, #20
 8004cd4:	428b      	cmp	r3, r1
 8004cd6:	d008      	beq.n	8004cea <HAL_DMA_Abort_IT+0x20e>
 8004cd8:	3114      	adds	r1, #20
 8004cda:	428b      	cmp	r3, r1
 8004cdc:	d005      	beq.n	8004cea <HAL_DMA_Abort_IT+0x20e>
 8004cde:	3114      	adds	r1, #20
 8004ce0:	428b      	cmp	r3, r1
 8004ce2:	d002      	beq.n	8004cea <HAL_DMA_Abort_IT+0x20e>
 8004ce4:	3114      	adds	r1, #20
 8004ce6:	428b      	cmp	r3, r1
 8004ce8:	d117      	bne.n	8004d1a <HAL_DMA_Abort_IT+0x23e>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004cea:	6e11      	ldr	r1, [r2, #96]	@ 0x60
 8004cec:	680b      	ldr	r3, [r1, #0]
 8004cee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cf2:	600b      	str	r3, [r1, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cf4:	6d90      	ldr	r0, [r2, #88]	@ 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004cf6:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8004cf8:	f003 011f 	and.w	r1, r3, #31
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	408b      	lsls	r3, r1
 8004d00:	6043      	str	r3, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d02:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 8004d04:	6e91      	ldr	r1, [r2, #104]	@ 0x68
 8004d06:	6059      	str	r1, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8004d08:	6ed3      	ldr	r3, [r2, #108]	@ 0x6c
 8004d0a:	b133      	cbz	r3, 8004d1a <HAL_DMA_Abort_IT+0x23e>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004d0c:	6819      	ldr	r1, [r3, #0]
 8004d0e:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 8004d12:	6019      	str	r1, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d14:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8004d16:	6f51      	ldr	r1, [r2, #116]	@ 0x74
 8004d18:	6059      	str	r1, [r3, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	f882 3035 	strb.w	r3, [r2, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8004d20:	2300      	movs	r3, #0
 8004d22:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
      if(hdma->XferAbortCallback != NULL)
 8004d26:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8004d28:	b12b      	cbz	r3, 8004d36 <HAL_DMA_Abort_IT+0x25a>
        hdma->XferAbortCallback(hdma);
 8004d2a:	4610      	mov	r0, r2
 8004d2c:	4798      	blx	r3
  return HAL_OK;
 8004d2e:	2000      	movs	r0, #0
 8004d30:	e6e1      	b.n	8004af6 <HAL_DMA_Abort_IT+0x1a>
    return HAL_ERROR;
 8004d32:	2001      	movs	r0, #1
}
 8004d34:	4770      	bx	lr
  return HAL_OK;
 8004d36:	2000      	movs	r0, #0
 8004d38:	e6dd      	b.n	8004af6 <HAL_DMA_Abort_IT+0x1a>
 8004d3a:	bf00      	nop
 8004d3c:	40020010 	.word	0x40020010
 8004d40:	40020028 	.word	0x40020028
 8004d44:	40020040 	.word	0x40020040
 8004d48:	58025408 	.word	0x58025408

08004d4c <HAL_DMA_IRQHandler>:
{
 8004d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8004d52:	2300      	movs	r3, #0
 8004d54:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004d56:	4b7d      	ldr	r3, [pc, #500]	@ (8004f4c <HAL_DMA_IRQHandler+0x200>)
 8004d58:	681d      	ldr	r5, [r3, #0]
 8004d5a:	4b7d      	ldr	r3, [pc, #500]	@ (8004f50 <HAL_DMA_IRQHandler+0x204>)
 8004d5c:	fba3 3505 	umull	r3, r5, r3, r5
 8004d60:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d62:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr_dma  = regs_dma->ISR;
 8004d64:	683e      	ldr	r6, [r7, #0]
  tmpisr_bdma = regs_bdma->ISR;
 8004d66:	f8d7 c000 	ldr.w	ip, [r7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004d6a:	6803      	ldr	r3, [r0, #0]
 8004d6c:	4979      	ldr	r1, [pc, #484]	@ (8004f54 <HAL_DMA_IRQHandler+0x208>)
 8004d6e:	487a      	ldr	r0, [pc, #488]	@ (8004f58 <HAL_DMA_IRQHandler+0x20c>)
 8004d70:	4283      	cmp	r3, r0
 8004d72:	bf18      	it	ne
 8004d74:	428b      	cmpne	r3, r1
 8004d76:	bf0c      	ite	eq
 8004d78:	2001      	moveq	r0, #1
 8004d7a:	2000      	movne	r0, #0
 8004d7c:	d061      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xf6>
 8004d7e:	4a77      	ldr	r2, [pc, #476]	@ (8004f5c <HAL_DMA_IRQHandler+0x210>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d05e      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xf6>
 8004d84:	3218      	adds	r2, #24
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d05b      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xf6>
 8004d8a:	3218      	adds	r2, #24
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d058      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xf6>
 8004d90:	3218      	adds	r2, #24
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d055      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xf6>
 8004d96:	3218      	adds	r2, #24
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d052      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xf6>
 8004d9c:	3218      	adds	r2, #24
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d04f      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xf6>
 8004da2:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d04b      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xf6>
 8004daa:	3218      	adds	r2, #24
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d048      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xf6>
 8004db0:	3218      	adds	r2, #24
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d045      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xf6>
 8004db6:	3218      	adds	r2, #24
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d042      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xf6>
 8004dbc:	3218      	adds	r2, #24
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d03f      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xf6>
 8004dc2:	3218      	adds	r2, #24
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d03c      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xf6>
 8004dc8:	3218      	adds	r2, #24
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d039      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xf6>
 8004dce:	3218      	adds	r2, #24
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d036      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xf6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004dd4:	4962      	ldr	r1, [pc, #392]	@ (8004f60 <HAL_DMA_IRQHandler+0x214>)
 8004dd6:	4a63      	ldr	r2, [pc, #396]	@ (8004f64 <HAL_DMA_IRQHandler+0x218>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	bf18      	it	ne
 8004ddc:	428b      	cmpne	r3, r1
 8004dde:	d012      	beq.n	8004e06 <HAL_DMA_IRQHandler+0xba>
 8004de0:	4a61      	ldr	r2, [pc, #388]	@ (8004f68 <HAL_DMA_IRQHandler+0x21c>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d00f      	beq.n	8004e06 <HAL_DMA_IRQHandler+0xba>
 8004de6:	3214      	adds	r2, #20
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d00c      	beq.n	8004e06 <HAL_DMA_IRQHandler+0xba>
 8004dec:	3214      	adds	r2, #20
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d009      	beq.n	8004e06 <HAL_DMA_IRQHandler+0xba>
 8004df2:	3214      	adds	r2, #20
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d006      	beq.n	8004e06 <HAL_DMA_IRQHandler+0xba>
 8004df8:	3214      	adds	r2, #20
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d003      	beq.n	8004e06 <HAL_DMA_IRQHandler+0xba>
 8004dfe:	3214      	adds	r2, #20
 8004e00:	4293      	cmp	r3, r2
 8004e02:	f040 8261 	bne.w	80052c8 <HAL_DMA_IRQHandler+0x57c>
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004e06:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004e08:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8004e0a:	f001 011f 	and.w	r1, r1, #31
 8004e0e:	2004      	movs	r0, #4
 8004e10:	4088      	lsls	r0, r1
 8004e12:	ea10 0f0c 	tst.w	r0, ip
 8004e16:	f000 82a7 	beq.w	8005368 <HAL_DMA_IRQHandler+0x61c>
 8004e1a:	f012 0f04 	tst.w	r2, #4
 8004e1e:	f000 82a3 	beq.w	8005368 <HAL_DMA_IRQHandler+0x61c>
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004e22:	6078      	str	r0, [r7, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e24:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8004e28:	f000 825a 	beq.w	80052e0 <HAL_DMA_IRQHandler+0x594>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004e2c:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 8004e30:	f040 8250 	bne.w	80052d4 <HAL_DMA_IRQHandler+0x588>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004e34:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f000 8246 	beq.w	80052c8 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferM1HalfCpltCallback(hdma);
 8004e3c:	4620      	mov	r0, r4
 8004e3e:	4798      	blx	r3
 8004e40:	e242      	b.n	80052c8 <HAL_DMA_IRQHandler+0x57c>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004e42:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004e44:	f002 011f 	and.w	r1, r2, #31
 8004e48:	2208      	movs	r2, #8
 8004e4a:	408a      	lsls	r2, r1
 8004e4c:	4232      	tst	r2, r6
 8004e4e:	d041      	beq.n	8004ed4 <HAL_DMA_IRQHandler+0x188>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004e50:	bb70      	cbnz	r0, 8004eb0 <HAL_DMA_IRQHandler+0x164>
 8004e52:	4a42      	ldr	r2, [pc, #264]	@ (8004f5c <HAL_DMA_IRQHandler+0x210>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d02b      	beq.n	8004eb0 <HAL_DMA_IRQHandler+0x164>
 8004e58:	3218      	adds	r2, #24
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d028      	beq.n	8004eb0 <HAL_DMA_IRQHandler+0x164>
 8004e5e:	3218      	adds	r2, #24
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d025      	beq.n	8004eb0 <HAL_DMA_IRQHandler+0x164>
 8004e64:	3218      	adds	r2, #24
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d022      	beq.n	8004eb0 <HAL_DMA_IRQHandler+0x164>
 8004e6a:	3218      	adds	r2, #24
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d01f      	beq.n	8004eb0 <HAL_DMA_IRQHandler+0x164>
 8004e70:	3218      	adds	r2, #24
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d01c      	beq.n	8004eb0 <HAL_DMA_IRQHandler+0x164>
 8004e76:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d018      	beq.n	8004eb0 <HAL_DMA_IRQHandler+0x164>
 8004e7e:	3218      	adds	r2, #24
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d015      	beq.n	8004eb0 <HAL_DMA_IRQHandler+0x164>
 8004e84:	3218      	adds	r2, #24
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d012      	beq.n	8004eb0 <HAL_DMA_IRQHandler+0x164>
 8004e8a:	3218      	adds	r2, #24
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d00f      	beq.n	8004eb0 <HAL_DMA_IRQHandler+0x164>
 8004e90:	3218      	adds	r2, #24
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d00c      	beq.n	8004eb0 <HAL_DMA_IRQHandler+0x164>
 8004e96:	3218      	adds	r2, #24
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d009      	beq.n	8004eb0 <HAL_DMA_IRQHandler+0x164>
 8004e9c:	3218      	adds	r2, #24
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d006      	beq.n	8004eb0 <HAL_DMA_IRQHandler+0x164>
 8004ea2:	3218      	adds	r2, #24
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d003      	beq.n	8004eb0 <HAL_DMA_IRQHandler+0x164>
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8004eae:	e002      	b.n	8004eb6 <HAL_DMA_IRQHandler+0x16a>
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8004eb6:	b16a      	cbz	r2, 8004ed4 <HAL_DMA_IRQHandler+0x188>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	f022 0204 	bic.w	r2, r2, #4
 8004ebe:	601a      	str	r2, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ec0:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004ec2:	f003 021f 	and.w	r2, r3, #31
 8004ec6:	2308      	movs	r3, #8
 8004ec8:	4093      	lsls	r3, r2
 8004eca:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004ecc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004ece:	f043 0301 	orr.w	r3, r3, #1
 8004ed2:	6563      	str	r3, [r4, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ed4:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004ed6:	f002 021f 	and.w	r2, r2, #31
 8004eda:	fa26 f302 	lsr.w	r3, r6, r2
 8004ede:	f013 0f01 	tst.w	r3, #1
 8004ee2:	d047      	beq.n	8004f74 <HAL_DMA_IRQHandler+0x228>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004ee4:	6823      	ldr	r3, [r4, #0]
 8004ee6:	481b      	ldr	r0, [pc, #108]	@ (8004f54 <HAL_DMA_IRQHandler+0x208>)
 8004ee8:	491b      	ldr	r1, [pc, #108]	@ (8004f58 <HAL_DMA_IRQHandler+0x20c>)
 8004eea:	428b      	cmp	r3, r1
 8004eec:	bf18      	it	ne
 8004eee:	4283      	cmpne	r3, r0
 8004ef0:	d03c      	beq.n	8004f6c <HAL_DMA_IRQHandler+0x220>
 8004ef2:	3118      	adds	r1, #24
 8004ef4:	428b      	cmp	r3, r1
 8004ef6:	d039      	beq.n	8004f6c <HAL_DMA_IRQHandler+0x220>
 8004ef8:	3118      	adds	r1, #24
 8004efa:	428b      	cmp	r3, r1
 8004efc:	d036      	beq.n	8004f6c <HAL_DMA_IRQHandler+0x220>
 8004efe:	3118      	adds	r1, #24
 8004f00:	428b      	cmp	r3, r1
 8004f02:	d033      	beq.n	8004f6c <HAL_DMA_IRQHandler+0x220>
 8004f04:	3118      	adds	r1, #24
 8004f06:	428b      	cmp	r3, r1
 8004f08:	d030      	beq.n	8004f6c <HAL_DMA_IRQHandler+0x220>
 8004f0a:	3118      	adds	r1, #24
 8004f0c:	428b      	cmp	r3, r1
 8004f0e:	d02d      	beq.n	8004f6c <HAL_DMA_IRQHandler+0x220>
 8004f10:	3118      	adds	r1, #24
 8004f12:	428b      	cmp	r3, r1
 8004f14:	d02a      	beq.n	8004f6c <HAL_DMA_IRQHandler+0x220>
 8004f16:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8004f1a:	428b      	cmp	r3, r1
 8004f1c:	d026      	beq.n	8004f6c <HAL_DMA_IRQHandler+0x220>
 8004f1e:	3118      	adds	r1, #24
 8004f20:	428b      	cmp	r3, r1
 8004f22:	d023      	beq.n	8004f6c <HAL_DMA_IRQHandler+0x220>
 8004f24:	3118      	adds	r1, #24
 8004f26:	428b      	cmp	r3, r1
 8004f28:	d020      	beq.n	8004f6c <HAL_DMA_IRQHandler+0x220>
 8004f2a:	3118      	adds	r1, #24
 8004f2c:	428b      	cmp	r3, r1
 8004f2e:	d01d      	beq.n	8004f6c <HAL_DMA_IRQHandler+0x220>
 8004f30:	3118      	adds	r1, #24
 8004f32:	428b      	cmp	r3, r1
 8004f34:	d01a      	beq.n	8004f6c <HAL_DMA_IRQHandler+0x220>
 8004f36:	3118      	adds	r1, #24
 8004f38:	428b      	cmp	r3, r1
 8004f3a:	d017      	beq.n	8004f6c <HAL_DMA_IRQHandler+0x220>
 8004f3c:	3118      	adds	r1, #24
 8004f3e:	428b      	cmp	r3, r1
 8004f40:	d014      	beq.n	8004f6c <HAL_DMA_IRQHandler+0x220>
 8004f42:	3118      	adds	r1, #24
 8004f44:	428b      	cmp	r3, r1
 8004f46:	d011      	beq.n	8004f6c <HAL_DMA_IRQHandler+0x220>
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	e013      	b.n	8004f74 <HAL_DMA_IRQHandler+0x228>
 8004f4c:	24000004 	.word	0x24000004
 8004f50:	1b4e81b5 	.word	0x1b4e81b5
 8004f54:	40020010 	.word	0x40020010
 8004f58:	40020028 	.word	0x40020028
 8004f5c:	40020040 	.word	0x40020040
 8004f60:	58025408 	.word	0x58025408
 8004f64:	5802541c 	.word	0x5802541c
 8004f68:	58025430 	.word	0x58025430
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004f72:	d13b      	bne.n	8004fec <HAL_DMA_IRQHandler+0x2a0>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004f74:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004f76:	f003 031f 	and.w	r3, r3, #31
 8004f7a:	2204      	movs	r2, #4
 8004f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f80:	4233      	tst	r3, r6
 8004f82:	d03f      	beq.n	8005004 <HAL_DMA_IRQHandler+0x2b8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004f84:	6822      	ldr	r2, [r4, #0]
 8004f86:	4896      	ldr	r0, [pc, #600]	@ (80051e0 <HAL_DMA_IRQHandler+0x494>)
 8004f88:	4996      	ldr	r1, [pc, #600]	@ (80051e4 <HAL_DMA_IRQHandler+0x498>)
 8004f8a:	428a      	cmp	r2, r1
 8004f8c:	bf18      	it	ne
 8004f8e:	4282      	cmpne	r2, r0
 8004f90:	d034      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x2b0>
 8004f92:	3118      	adds	r1, #24
 8004f94:	428a      	cmp	r2, r1
 8004f96:	d031      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x2b0>
 8004f98:	3118      	adds	r1, #24
 8004f9a:	428a      	cmp	r2, r1
 8004f9c:	d02e      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x2b0>
 8004f9e:	3118      	adds	r1, #24
 8004fa0:	428a      	cmp	r2, r1
 8004fa2:	d02b      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x2b0>
 8004fa4:	3118      	adds	r1, #24
 8004fa6:	428a      	cmp	r2, r1
 8004fa8:	d028      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x2b0>
 8004faa:	3118      	adds	r1, #24
 8004fac:	428a      	cmp	r2, r1
 8004fae:	d025      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x2b0>
 8004fb0:	3118      	adds	r1, #24
 8004fb2:	428a      	cmp	r2, r1
 8004fb4:	d022      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x2b0>
 8004fb6:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8004fba:	428a      	cmp	r2, r1
 8004fbc:	d01e      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x2b0>
 8004fbe:	3118      	adds	r1, #24
 8004fc0:	428a      	cmp	r2, r1
 8004fc2:	d01b      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x2b0>
 8004fc4:	3118      	adds	r1, #24
 8004fc6:	428a      	cmp	r2, r1
 8004fc8:	d018      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x2b0>
 8004fca:	3118      	adds	r1, #24
 8004fcc:	428a      	cmp	r2, r1
 8004fce:	d015      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x2b0>
 8004fd0:	3118      	adds	r1, #24
 8004fd2:	428a      	cmp	r2, r1
 8004fd4:	d012      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x2b0>
 8004fd6:	3118      	adds	r1, #24
 8004fd8:	428a      	cmp	r2, r1
 8004fda:	d00f      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x2b0>
 8004fdc:	3118      	adds	r1, #24
 8004fde:	428a      	cmp	r2, r1
 8004fe0:	d00c      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x2b0>
 8004fe2:	3118      	adds	r1, #24
 8004fe4:	428a      	cmp	r2, r1
 8004fe6:	d009      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x2b0>
 8004fe8:	6813      	ldr	r3, [r2, #0]
 8004fea:	e00b      	b.n	8005004 <HAL_DMA_IRQHandler+0x2b8>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004fec:	2301      	movs	r3, #1
 8004fee:	4093      	lsls	r3, r2
 8004ff0:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004ff2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004ff4:	f043 0302 	orr.w	r3, r3, #2
 8004ff8:	6563      	str	r3, [r4, #84]	@ 0x54
 8004ffa:	e7bb      	b.n	8004f74 <HAL_DMA_IRQHandler+0x228>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004ffc:	6812      	ldr	r2, [r2, #0]
 8004ffe:	f012 0f02 	tst.w	r2, #2
 8005002:	d13d      	bne.n	8005080 <HAL_DMA_IRQHandler+0x334>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005004:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005006:	f003 031f 	and.w	r3, r3, #31
 800500a:	2210      	movs	r2, #16
 800500c:	fa02 f303 	lsl.w	r3, r2, r3
 8005010:	4233      	tst	r3, r6
 8005012:	d05f      	beq.n	80050d4 <HAL_DMA_IRQHandler+0x388>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005014:	6822      	ldr	r2, [r4, #0]
 8005016:	4872      	ldr	r0, [pc, #456]	@ (80051e0 <HAL_DMA_IRQHandler+0x494>)
 8005018:	4972      	ldr	r1, [pc, #456]	@ (80051e4 <HAL_DMA_IRQHandler+0x498>)
 800501a:	428a      	cmp	r2, r1
 800501c:	bf18      	it	ne
 800501e:	4282      	cmpne	r2, r0
 8005020:	d034      	beq.n	800508c <HAL_DMA_IRQHandler+0x340>
 8005022:	3118      	adds	r1, #24
 8005024:	428a      	cmp	r2, r1
 8005026:	d031      	beq.n	800508c <HAL_DMA_IRQHandler+0x340>
 8005028:	3118      	adds	r1, #24
 800502a:	428a      	cmp	r2, r1
 800502c:	d02e      	beq.n	800508c <HAL_DMA_IRQHandler+0x340>
 800502e:	3118      	adds	r1, #24
 8005030:	428a      	cmp	r2, r1
 8005032:	d02b      	beq.n	800508c <HAL_DMA_IRQHandler+0x340>
 8005034:	3118      	adds	r1, #24
 8005036:	428a      	cmp	r2, r1
 8005038:	d028      	beq.n	800508c <HAL_DMA_IRQHandler+0x340>
 800503a:	3118      	adds	r1, #24
 800503c:	428a      	cmp	r2, r1
 800503e:	d025      	beq.n	800508c <HAL_DMA_IRQHandler+0x340>
 8005040:	3118      	adds	r1, #24
 8005042:	428a      	cmp	r2, r1
 8005044:	d022      	beq.n	800508c <HAL_DMA_IRQHandler+0x340>
 8005046:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 800504a:	428a      	cmp	r2, r1
 800504c:	d01e      	beq.n	800508c <HAL_DMA_IRQHandler+0x340>
 800504e:	3118      	adds	r1, #24
 8005050:	428a      	cmp	r2, r1
 8005052:	d01b      	beq.n	800508c <HAL_DMA_IRQHandler+0x340>
 8005054:	3118      	adds	r1, #24
 8005056:	428a      	cmp	r2, r1
 8005058:	d018      	beq.n	800508c <HAL_DMA_IRQHandler+0x340>
 800505a:	3118      	adds	r1, #24
 800505c:	428a      	cmp	r2, r1
 800505e:	d015      	beq.n	800508c <HAL_DMA_IRQHandler+0x340>
 8005060:	3118      	adds	r1, #24
 8005062:	428a      	cmp	r2, r1
 8005064:	d012      	beq.n	800508c <HAL_DMA_IRQHandler+0x340>
 8005066:	3118      	adds	r1, #24
 8005068:	428a      	cmp	r2, r1
 800506a:	d00f      	beq.n	800508c <HAL_DMA_IRQHandler+0x340>
 800506c:	3118      	adds	r1, #24
 800506e:	428a      	cmp	r2, r1
 8005070:	d00c      	beq.n	800508c <HAL_DMA_IRQHandler+0x340>
 8005072:	3118      	adds	r1, #24
 8005074:	428a      	cmp	r2, r1
 8005076:	d009      	beq.n	800508c <HAL_DMA_IRQHandler+0x340>
 8005078:	6812      	ldr	r2, [r2, #0]
 800507a:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800507e:	e008      	b.n	8005092 <HAL_DMA_IRQHandler+0x346>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005080:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005082:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005084:	f043 0304 	orr.w	r3, r3, #4
 8005088:	6563      	str	r3, [r4, #84]	@ 0x54
 800508a:	e7bb      	b.n	8005004 <HAL_DMA_IRQHandler+0x2b8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800508c:	6812      	ldr	r2, [r2, #0]
 800508e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8005092:	b1fa      	cbz	r2, 80050d4 <HAL_DMA_IRQHandler+0x388>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005094:	60bb      	str	r3, [r7, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005096:	6823      	ldr	r3, [r4, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 800509e:	d00d      	beq.n	80050bc <HAL_DMA_IRQHandler+0x370>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 80050a6:	d104      	bne.n	80050b2 <HAL_DMA_IRQHandler+0x366>
            if(hdma->XferHalfCpltCallback != NULL)
 80050a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80050aa:	b19b      	cbz	r3, 80050d4 <HAL_DMA_IRQHandler+0x388>
              hdma->XferHalfCpltCallback(hdma);
 80050ac:	4620      	mov	r0, r4
 80050ae:	4798      	blx	r3
 80050b0:	e010      	b.n	80050d4 <HAL_DMA_IRQHandler+0x388>
            if(hdma->XferM1HalfCpltCallback != NULL)
 80050b2:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80050b4:	b173      	cbz	r3, 80050d4 <HAL_DMA_IRQHandler+0x388>
              hdma->XferM1HalfCpltCallback(hdma);
 80050b6:	4620      	mov	r0, r4
 80050b8:	4798      	blx	r3
 80050ba:	e00b      	b.n	80050d4 <HAL_DMA_IRQHandler+0x388>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80050c2:	d103      	bne.n	80050cc <HAL_DMA_IRQHandler+0x380>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	f022 0208 	bic.w	r2, r2, #8
 80050ca:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 80050cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80050ce:	b10b      	cbz	r3, 80050d4 <HAL_DMA_IRQHandler+0x388>
            hdma->XferHalfCpltCallback(hdma);
 80050d0:	4620      	mov	r0, r4
 80050d2:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80050d4:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80050d6:	f003 031f 	and.w	r3, r3, #31
 80050da:	2220      	movs	r2, #32
 80050dc:	fa02 f303 	lsl.w	r3, r2, r3
 80050e0:	4233      	tst	r3, r6
 80050e2:	f000 8093 	beq.w	800520c <HAL_DMA_IRQHandler+0x4c0>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80050e6:	6822      	ldr	r2, [r4, #0]
 80050e8:	483d      	ldr	r0, [pc, #244]	@ (80051e0 <HAL_DMA_IRQHandler+0x494>)
 80050ea:	493e      	ldr	r1, [pc, #248]	@ (80051e4 <HAL_DMA_IRQHandler+0x498>)
 80050ec:	428a      	cmp	r2, r1
 80050ee:	bf18      	it	ne
 80050f0:	4282      	cmpne	r2, r0
 80050f2:	d02e      	beq.n	8005152 <HAL_DMA_IRQHandler+0x406>
 80050f4:	3118      	adds	r1, #24
 80050f6:	428a      	cmp	r2, r1
 80050f8:	d02b      	beq.n	8005152 <HAL_DMA_IRQHandler+0x406>
 80050fa:	3118      	adds	r1, #24
 80050fc:	428a      	cmp	r2, r1
 80050fe:	d028      	beq.n	8005152 <HAL_DMA_IRQHandler+0x406>
 8005100:	3118      	adds	r1, #24
 8005102:	428a      	cmp	r2, r1
 8005104:	d025      	beq.n	8005152 <HAL_DMA_IRQHandler+0x406>
 8005106:	3118      	adds	r1, #24
 8005108:	428a      	cmp	r2, r1
 800510a:	d022      	beq.n	8005152 <HAL_DMA_IRQHandler+0x406>
 800510c:	3118      	adds	r1, #24
 800510e:	428a      	cmp	r2, r1
 8005110:	d01f      	beq.n	8005152 <HAL_DMA_IRQHandler+0x406>
 8005112:	3118      	adds	r1, #24
 8005114:	428a      	cmp	r2, r1
 8005116:	d01c      	beq.n	8005152 <HAL_DMA_IRQHandler+0x406>
 8005118:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 800511c:	428a      	cmp	r2, r1
 800511e:	d018      	beq.n	8005152 <HAL_DMA_IRQHandler+0x406>
 8005120:	3118      	adds	r1, #24
 8005122:	428a      	cmp	r2, r1
 8005124:	d015      	beq.n	8005152 <HAL_DMA_IRQHandler+0x406>
 8005126:	3118      	adds	r1, #24
 8005128:	428a      	cmp	r2, r1
 800512a:	d012      	beq.n	8005152 <HAL_DMA_IRQHandler+0x406>
 800512c:	3118      	adds	r1, #24
 800512e:	428a      	cmp	r2, r1
 8005130:	d00f      	beq.n	8005152 <HAL_DMA_IRQHandler+0x406>
 8005132:	3118      	adds	r1, #24
 8005134:	428a      	cmp	r2, r1
 8005136:	d00c      	beq.n	8005152 <HAL_DMA_IRQHandler+0x406>
 8005138:	3118      	adds	r1, #24
 800513a:	428a      	cmp	r2, r1
 800513c:	d009      	beq.n	8005152 <HAL_DMA_IRQHandler+0x406>
 800513e:	3118      	adds	r1, #24
 8005140:	428a      	cmp	r2, r1
 8005142:	d006      	beq.n	8005152 <HAL_DMA_IRQHandler+0x406>
 8005144:	3118      	adds	r1, #24
 8005146:	428a      	cmp	r2, r1
 8005148:	d003      	beq.n	8005152 <HAL_DMA_IRQHandler+0x406>
 800514a:	6812      	ldr	r2, [r2, #0]
 800514c:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8005150:	e002      	b.n	8005158 <HAL_DMA_IRQHandler+0x40c>
 8005152:	6812      	ldr	r2, [r2, #0]
 8005154:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8005158:	2a00      	cmp	r2, #0
 800515a:	d057      	beq.n	800520c <HAL_DMA_IRQHandler+0x4c0>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800515c:	60bb      	str	r3, [r7, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800515e:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8005162:	b2db      	uxtb	r3, r3
 8005164:	2b04      	cmp	r3, #4
 8005166:	d00e      	beq.n	8005186 <HAL_DMA_IRQHandler+0x43a>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005168:	6823      	ldr	r3, [r4, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8005170:	d03a      	beq.n	80051e8 <HAL_DMA_IRQHandler+0x49c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8005178:	d12d      	bne.n	80051d6 <HAL_DMA_IRQHandler+0x48a>
            if(hdma->XferM1CpltCallback != NULL)
 800517a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800517c:	2b00      	cmp	r3, #0
 800517e:	d045      	beq.n	800520c <HAL_DMA_IRQHandler+0x4c0>
              hdma->XferM1CpltCallback(hdma);
 8005180:	4620      	mov	r0, r4
 8005182:	4798      	blx	r3
 8005184:	e042      	b.n	800520c <HAL_DMA_IRQHandler+0x4c0>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005186:	6822      	ldr	r2, [r4, #0]
 8005188:	6813      	ldr	r3, [r2, #0]
 800518a:	f023 0316 	bic.w	r3, r3, #22
 800518e:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005190:	6822      	ldr	r2, [r4, #0]
 8005192:	6953      	ldr	r3, [r2, #20]
 8005194:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005198:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800519a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800519c:	b1bb      	cbz	r3, 80051ce <HAL_DMA_IRQHandler+0x482>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800519e:	6822      	ldr	r2, [r4, #0]
 80051a0:	6813      	ldr	r3, [r2, #0]
 80051a2:	f023 0308 	bic.w	r3, r3, #8
 80051a6:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80051a8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80051aa:	f003 021f 	and.w	r2, r3, #31
 80051ae:	233f      	movs	r3, #63	@ 0x3f
 80051b0:	4093      	lsls	r3, r2
 80051b2:	60bb      	str	r3, [r7, #8]
          hdma->State = HAL_DMA_STATE_READY;
 80051b4:	2301      	movs	r3, #1
 80051b6:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 80051ba:	2300      	movs	r3, #0
 80051bc:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
          if(hdma->XferAbortCallback != NULL)
 80051c0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	f000 8080 	beq.w	80052c8 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferAbortCallback(hdma);
 80051c8:	4620      	mov	r0, r4
 80051ca:	4798      	blx	r3
          return;
 80051cc:	e07c      	b.n	80052c8 <HAL_DMA_IRQHandler+0x57c>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80051ce:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1e4      	bne.n	800519e <HAL_DMA_IRQHandler+0x452>
 80051d4:	e7e8      	b.n	80051a8 <HAL_DMA_IRQHandler+0x45c>
            if(hdma->XferCpltCallback != NULL)
 80051d6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80051d8:	b1c3      	cbz	r3, 800520c <HAL_DMA_IRQHandler+0x4c0>
              hdma->XferCpltCallback(hdma);
 80051da:	4620      	mov	r0, r4
 80051dc:	4798      	blx	r3
 80051de:	e015      	b.n	800520c <HAL_DMA_IRQHandler+0x4c0>
 80051e0:	40020010 	.word	0x40020010
 80051e4:	40020028 	.word	0x40020028
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80051ee:	d109      	bne.n	8005204 <HAL_DMA_IRQHandler+0x4b8>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	f022 0210 	bic.w	r2, r2, #16
 80051f6:	601a      	str	r2, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 80051f8:	2301      	movs	r3, #1
 80051fa:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
            __HAL_UNLOCK(hdma);
 80051fe:	2300      	movs	r3, #0
 8005200:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
          if(hdma->XferCpltCallback != NULL)
 8005204:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005206:	b10b      	cbz	r3, 800520c <HAL_DMA_IRQHandler+0x4c0>
            hdma->XferCpltCallback(hdma);
 8005208:	4620      	mov	r0, r4
 800520a:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800520c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800520e:	2b00      	cmp	r3, #0
 8005210:	d05a      	beq.n	80052c8 <HAL_DMA_IRQHandler+0x57c>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005212:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005214:	f013 0f01 	tst.w	r3, #1
 8005218:	d052      	beq.n	80052c0 <HAL_DMA_IRQHandler+0x574>
        hdma->State = HAL_DMA_STATE_ABORT;
 800521a:	2304      	movs	r3, #4
 800521c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_DMA_DISABLE(hdma);
 8005220:	6823      	ldr	r3, [r4, #0]
 8005222:	4996      	ldr	r1, [pc, #600]	@ (800547c <HAL_DMA_IRQHandler+0x730>)
 8005224:	4a96      	ldr	r2, [pc, #600]	@ (8005480 <HAL_DMA_IRQHandler+0x734>)
 8005226:	4293      	cmp	r3, r2
 8005228:	bf18      	it	ne
 800522a:	428b      	cmpne	r3, r1
 800522c:	d02f      	beq.n	800528e <HAL_DMA_IRQHandler+0x542>
 800522e:	3218      	adds	r2, #24
 8005230:	4293      	cmp	r3, r2
 8005232:	d02c      	beq.n	800528e <HAL_DMA_IRQHandler+0x542>
 8005234:	3218      	adds	r2, #24
 8005236:	4293      	cmp	r3, r2
 8005238:	d029      	beq.n	800528e <HAL_DMA_IRQHandler+0x542>
 800523a:	3218      	adds	r2, #24
 800523c:	4293      	cmp	r3, r2
 800523e:	d026      	beq.n	800528e <HAL_DMA_IRQHandler+0x542>
 8005240:	3218      	adds	r2, #24
 8005242:	4293      	cmp	r3, r2
 8005244:	d023      	beq.n	800528e <HAL_DMA_IRQHandler+0x542>
 8005246:	3218      	adds	r2, #24
 8005248:	4293      	cmp	r3, r2
 800524a:	d020      	beq.n	800528e <HAL_DMA_IRQHandler+0x542>
 800524c:	3218      	adds	r2, #24
 800524e:	4293      	cmp	r3, r2
 8005250:	d01d      	beq.n	800528e <HAL_DMA_IRQHandler+0x542>
 8005252:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8005256:	4293      	cmp	r3, r2
 8005258:	d019      	beq.n	800528e <HAL_DMA_IRQHandler+0x542>
 800525a:	3218      	adds	r2, #24
 800525c:	4293      	cmp	r3, r2
 800525e:	d016      	beq.n	800528e <HAL_DMA_IRQHandler+0x542>
 8005260:	3218      	adds	r2, #24
 8005262:	4293      	cmp	r3, r2
 8005264:	d013      	beq.n	800528e <HAL_DMA_IRQHandler+0x542>
 8005266:	3218      	adds	r2, #24
 8005268:	4293      	cmp	r3, r2
 800526a:	d010      	beq.n	800528e <HAL_DMA_IRQHandler+0x542>
 800526c:	3218      	adds	r2, #24
 800526e:	4293      	cmp	r3, r2
 8005270:	d00d      	beq.n	800528e <HAL_DMA_IRQHandler+0x542>
 8005272:	3218      	adds	r2, #24
 8005274:	4293      	cmp	r3, r2
 8005276:	d00a      	beq.n	800528e <HAL_DMA_IRQHandler+0x542>
 8005278:	3218      	adds	r2, #24
 800527a:	4293      	cmp	r3, r2
 800527c:	d007      	beq.n	800528e <HAL_DMA_IRQHandler+0x542>
 800527e:	3218      	adds	r2, #24
 8005280:	4293      	cmp	r3, r2
 8005282:	d004      	beq.n	800528e <HAL_DMA_IRQHandler+0x542>
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	f022 0201 	bic.w	r2, r2, #1
 800528a:	601a      	str	r2, [r3, #0]
 800528c:	e003      	b.n	8005296 <HAL_DMA_IRQHandler+0x54a>
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	f022 0201 	bic.w	r2, r2, #1
 8005294:	601a      	str	r2, [r3, #0]
          if (++count > timeout)
 8005296:	9b01      	ldr	r3, [sp, #4]
 8005298:	3301      	adds	r3, #1
 800529a:	9301      	str	r3, [sp, #4]
 800529c:	42ab      	cmp	r3, r5
 800529e:	d804      	bhi.n	80052aa <HAL_DMA_IRQHandler+0x55e>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80052a0:	6823      	ldr	r3, [r4, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f013 0f01 	tst.w	r3, #1
 80052a8:	d1f5      	bne.n	8005296 <HAL_DMA_IRQHandler+0x54a>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80052aa:	6823      	ldr	r3, [r4, #0]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f013 0f01 	tst.w	r3, #1
 80052b2:	d00b      	beq.n	80052cc <HAL_DMA_IRQHandler+0x580>
          hdma->State = HAL_DMA_STATE_ERROR;
 80052b4:	2303      	movs	r3, #3
 80052b6:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 80052ba:	2300      	movs	r3, #0
 80052bc:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      if(hdma->XferErrorCallback != NULL)
 80052c0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80052c2:	b10b      	cbz	r3, 80052c8 <HAL_DMA_IRQHandler+0x57c>
        hdma->XferErrorCallback(hdma);
 80052c4:	4620      	mov	r0, r4
 80052c6:	4798      	blx	r3
}
 80052c8:	b003      	add	sp, #12
 80052ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hdma->State = HAL_DMA_STATE_READY;
 80052cc:	2301      	movs	r3, #1
 80052ce:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
 80052d2:	e7f2      	b.n	80052ba <HAL_DMA_IRQHandler+0x56e>
          if(hdma->XferHalfCpltCallback != NULL)
 80052d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d0f6      	beq.n	80052c8 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferHalfCpltCallback(hdma);
 80052da:	4620      	mov	r0, r4
 80052dc:	4798      	blx	r3
 80052de:	e7f3      	b.n	80052c8 <HAL_DMA_IRQHandler+0x57c>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80052e0:	f012 0f20 	tst.w	r2, #32
 80052e4:	d13a      	bne.n	800535c <HAL_DMA_IRQHandler+0x610>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80052e6:	6823      	ldr	r3, [r4, #0]
 80052e8:	4964      	ldr	r1, [pc, #400]	@ (800547c <HAL_DMA_IRQHandler+0x730>)
 80052ea:	4a65      	ldr	r2, [pc, #404]	@ (8005480 <HAL_DMA_IRQHandler+0x734>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	bf18      	it	ne
 80052f0:	428b      	cmpne	r3, r1
 80052f2:	d02f      	beq.n	8005354 <HAL_DMA_IRQHandler+0x608>
 80052f4:	3218      	adds	r2, #24
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d02c      	beq.n	8005354 <HAL_DMA_IRQHandler+0x608>
 80052fa:	3218      	adds	r2, #24
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d029      	beq.n	8005354 <HAL_DMA_IRQHandler+0x608>
 8005300:	3218      	adds	r2, #24
 8005302:	4293      	cmp	r3, r2
 8005304:	d026      	beq.n	8005354 <HAL_DMA_IRQHandler+0x608>
 8005306:	3218      	adds	r2, #24
 8005308:	4293      	cmp	r3, r2
 800530a:	d023      	beq.n	8005354 <HAL_DMA_IRQHandler+0x608>
 800530c:	3218      	adds	r2, #24
 800530e:	4293      	cmp	r3, r2
 8005310:	d020      	beq.n	8005354 <HAL_DMA_IRQHandler+0x608>
 8005312:	3218      	adds	r2, #24
 8005314:	4293      	cmp	r3, r2
 8005316:	d01d      	beq.n	8005354 <HAL_DMA_IRQHandler+0x608>
 8005318:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 800531c:	4293      	cmp	r3, r2
 800531e:	d019      	beq.n	8005354 <HAL_DMA_IRQHandler+0x608>
 8005320:	3218      	adds	r2, #24
 8005322:	4293      	cmp	r3, r2
 8005324:	d016      	beq.n	8005354 <HAL_DMA_IRQHandler+0x608>
 8005326:	3218      	adds	r2, #24
 8005328:	4293      	cmp	r3, r2
 800532a:	d013      	beq.n	8005354 <HAL_DMA_IRQHandler+0x608>
 800532c:	3218      	adds	r2, #24
 800532e:	4293      	cmp	r3, r2
 8005330:	d010      	beq.n	8005354 <HAL_DMA_IRQHandler+0x608>
 8005332:	3218      	adds	r2, #24
 8005334:	4293      	cmp	r3, r2
 8005336:	d00d      	beq.n	8005354 <HAL_DMA_IRQHandler+0x608>
 8005338:	3218      	adds	r2, #24
 800533a:	4293      	cmp	r3, r2
 800533c:	d00a      	beq.n	8005354 <HAL_DMA_IRQHandler+0x608>
 800533e:	3218      	adds	r2, #24
 8005340:	4293      	cmp	r3, r2
 8005342:	d007      	beq.n	8005354 <HAL_DMA_IRQHandler+0x608>
 8005344:	3218      	adds	r2, #24
 8005346:	4293      	cmp	r3, r2
 8005348:	d004      	beq.n	8005354 <HAL_DMA_IRQHandler+0x608>
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	f022 0204 	bic.w	r2, r2, #4
 8005350:	601a      	str	r2, [r3, #0]
 8005352:	e003      	b.n	800535c <HAL_DMA_IRQHandler+0x610>
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	f022 0208 	bic.w	r2, r2, #8
 800535a:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 800535c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800535e:	2b00      	cmp	r3, #0
 8005360:	d0b2      	beq.n	80052c8 <HAL_DMA_IRQHandler+0x57c>
          hdma->XferHalfCpltCallback(hdma);
 8005362:	4620      	mov	r0, r4
 8005364:	4798      	blx	r3
 8005366:	e7af      	b.n	80052c8 <HAL_DMA_IRQHandler+0x57c>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005368:	2002      	movs	r0, #2
 800536a:	4088      	lsls	r0, r1
 800536c:	ea10 0f0c 	tst.w	r0, ip
 8005370:	d060      	beq.n	8005434 <HAL_DMA_IRQHandler+0x6e8>
 8005372:	f012 0f02 	tst.w	r2, #2
 8005376:	d05d      	beq.n	8005434 <HAL_DMA_IRQHandler+0x6e8>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005378:	6078      	str	r0, [r7, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800537a:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 800537e:	d00e      	beq.n	800539e <HAL_DMA_IRQHandler+0x652>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005380:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 8005384:	d105      	bne.n	8005392 <HAL_DMA_IRQHandler+0x646>
          if(hdma->XferM1CpltCallback != NULL)
 8005386:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8005388:	2b00      	cmp	r3, #0
 800538a:	d09d      	beq.n	80052c8 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferM1CpltCallback(hdma);
 800538c:	4620      	mov	r0, r4
 800538e:	4798      	blx	r3
 8005390:	e79a      	b.n	80052c8 <HAL_DMA_IRQHandler+0x57c>
          if(hdma->XferCpltCallback != NULL)
 8005392:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005394:	2b00      	cmp	r3, #0
 8005396:	d097      	beq.n	80052c8 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferCpltCallback(hdma);
 8005398:	4620      	mov	r0, r4
 800539a:	4798      	blx	r3
 800539c:	e794      	b.n	80052c8 <HAL_DMA_IRQHandler+0x57c>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800539e:	f012 0f20 	tst.w	r2, #32
 80053a2:	d140      	bne.n	8005426 <HAL_DMA_IRQHandler+0x6da>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80053a4:	6823      	ldr	r3, [r4, #0]
 80053a6:	4935      	ldr	r1, [pc, #212]	@ (800547c <HAL_DMA_IRQHandler+0x730>)
 80053a8:	4a35      	ldr	r2, [pc, #212]	@ (8005480 <HAL_DMA_IRQHandler+0x734>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	bf18      	it	ne
 80053ae:	428b      	cmpne	r3, r1
 80053b0:	d02f      	beq.n	8005412 <HAL_DMA_IRQHandler+0x6c6>
 80053b2:	3218      	adds	r2, #24
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d02c      	beq.n	8005412 <HAL_DMA_IRQHandler+0x6c6>
 80053b8:	3218      	adds	r2, #24
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d029      	beq.n	8005412 <HAL_DMA_IRQHandler+0x6c6>
 80053be:	3218      	adds	r2, #24
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d026      	beq.n	8005412 <HAL_DMA_IRQHandler+0x6c6>
 80053c4:	3218      	adds	r2, #24
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d023      	beq.n	8005412 <HAL_DMA_IRQHandler+0x6c6>
 80053ca:	3218      	adds	r2, #24
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d020      	beq.n	8005412 <HAL_DMA_IRQHandler+0x6c6>
 80053d0:	3218      	adds	r2, #24
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d01d      	beq.n	8005412 <HAL_DMA_IRQHandler+0x6c6>
 80053d6:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 80053da:	4293      	cmp	r3, r2
 80053dc:	d019      	beq.n	8005412 <HAL_DMA_IRQHandler+0x6c6>
 80053de:	3218      	adds	r2, #24
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d016      	beq.n	8005412 <HAL_DMA_IRQHandler+0x6c6>
 80053e4:	3218      	adds	r2, #24
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d013      	beq.n	8005412 <HAL_DMA_IRQHandler+0x6c6>
 80053ea:	3218      	adds	r2, #24
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d010      	beq.n	8005412 <HAL_DMA_IRQHandler+0x6c6>
 80053f0:	3218      	adds	r2, #24
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d00d      	beq.n	8005412 <HAL_DMA_IRQHandler+0x6c6>
 80053f6:	3218      	adds	r2, #24
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d00a      	beq.n	8005412 <HAL_DMA_IRQHandler+0x6c6>
 80053fc:	3218      	adds	r2, #24
 80053fe:	4293      	cmp	r3, r2
 8005400:	d007      	beq.n	8005412 <HAL_DMA_IRQHandler+0x6c6>
 8005402:	3218      	adds	r2, #24
 8005404:	4293      	cmp	r3, r2
 8005406:	d004      	beq.n	8005412 <HAL_DMA_IRQHandler+0x6c6>
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	f022 020a 	bic.w	r2, r2, #10
 800540e:	601a      	str	r2, [r3, #0]
 8005410:	e003      	b.n	800541a <HAL_DMA_IRQHandler+0x6ce>
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	f022 0214 	bic.w	r2, r2, #20
 8005418:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800541a:	2301      	movs	r3, #1
 800541c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8005420:	2300      	movs	r3, #0
 8005422:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 8005426:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005428:	2b00      	cmp	r3, #0
 800542a:	f43f af4d 	beq.w	80052c8 <HAL_DMA_IRQHandler+0x57c>
          hdma->XferCpltCallback(hdma);
 800542e:	4620      	mov	r0, r4
 8005430:	4798      	blx	r3
 8005432:	e749      	b.n	80052c8 <HAL_DMA_IRQHandler+0x57c>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005434:	2008      	movs	r0, #8
 8005436:	fa00 f101 	lsl.w	r1, r0, r1
 800543a:	ea11 0f0c 	tst.w	r1, ip
 800543e:	f43f af43 	beq.w	80052c8 <HAL_DMA_IRQHandler+0x57c>
 8005442:	f012 0f08 	tst.w	r2, #8
 8005446:	f43f af3f 	beq.w	80052c8 <HAL_DMA_IRQHandler+0x57c>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	f022 020e 	bic.w	r2, r2, #14
 8005450:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005452:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005454:	f003 031f 	and.w	r3, r3, #31
 8005458:	2201      	movs	r2, #1
 800545a:	fa02 f303 	lsl.w	r3, r2, r3
 800545e:	607b      	str	r3, [r7, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005460:	6562      	str	r2, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_READY;
 8005462:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8005466:	2300      	movs	r3, #0
 8005468:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      if (hdma->XferErrorCallback != NULL)
 800546c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800546e:	2b00      	cmp	r3, #0
 8005470:	f43f af2a 	beq.w	80052c8 <HAL_DMA_IRQHandler+0x57c>
        hdma->XferErrorCallback(hdma);
 8005474:	4620      	mov	r0, r4
 8005476:	4798      	blx	r3
  }
 8005478:	e726      	b.n	80052c8 <HAL_DMA_IRQHandler+0x57c>
 800547a:	bf00      	nop
 800547c:	40020010 	.word	0x40020010
 8005480:	40020028 	.word	0x40020028

08005484 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005484:	b430      	push	{r4, r5}
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005486:	6b41      	ldr	r1, [r0, #52]	@ 0x34

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005488:	6804      	ldr	r4, [r0, #0]
 800548a:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800548e:	4a6f      	ldr	r2, [pc, #444]	@ (800564c <FDCAN_CalcultateRamBlockAddresses+0x1c8>)
 8005490:	4013      	ands	r3, r2
 8005492:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 8005496:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800549a:	6804      	ldr	r4, [r0, #0]
 800549c:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80054a0:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 80054a4:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 80054a6:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80054aa:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80054ae:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80054b0:	440b      	add	r3, r1
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80054b2:	6804      	ldr	r4, [r0, #0]
 80054b4:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 80054b8:	4011      	ands	r1, r2
 80054ba:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 80054be:	f8c4 1088 	str.w	r1, [r4, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80054c2:	6804      	ldr	r4, [r0, #0]
 80054c4:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 80054c8:	f421 01fe 	bic.w	r1, r1, #8323072	@ 0x7f0000
 80054cc:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 80054ce:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80054d2:	f8c4 1088 	str.w	r1, [r4, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80054d6:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 80054d8:	eb03 0341 	add.w	r3, r3, r1, lsl #1
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80054dc:	6804      	ldr	r4, [r0, #0]
 80054de:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 80054e2:	4011      	ands	r1, r2
 80054e4:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 80054e8:	f8c4 10a0 	str.w	r1, [r4, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80054ec:	6804      	ldr	r4, [r0, #0]
 80054ee:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 80054f2:	f421 01fe 	bic.w	r1, r1, #8323072	@ 0x7f0000
 80054f6:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 80054f8:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80054fc:	f8c4 10a0 	str.w	r1, [r4, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005500:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8005502:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8005504:	fb04 3301 	mla	r3, r4, r1, r3
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005508:	6804      	ldr	r4, [r0, #0]
 800550a:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 800550e:	4011      	ands	r1, r2
 8005510:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 8005514:	f8c4 10b0 	str.w	r1, [r4, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005518:	6804      	ldr	r4, [r0, #0]
 800551a:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 800551e:	f421 01fe 	bic.w	r1, r1, #8323072	@ 0x7f0000
 8005522:	6c85      	ldr	r5, [r0, #72]	@ 0x48
 8005524:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8005528:	f8c4 10b0 	str.w	r1, [r4, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800552c:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 800552e:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
 8005530:	fb04 3301 	mla	r3, r4, r1, r3
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005534:	6804      	ldr	r4, [r0, #0]
 8005536:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 800553a:	4011      	ands	r1, r2
 800553c:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 8005540:	f8c4 10ac 	str.w	r1, [r4, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005544:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8005546:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8005548:	fb04 3301 	mla	r3, r4, r1, r3
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800554c:	6804      	ldr	r4, [r0, #0]
 800554e:	f8d4 10f0 	ldr.w	r1, [r4, #240]	@ 0xf0
 8005552:	4011      	ands	r1, r2
 8005554:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 8005558:	f8c4 10f0 	str.w	r1, [r4, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800555c:	6804      	ldr	r4, [r0, #0]
 800555e:	f8d4 10f0 	ldr.w	r1, [r4, #240]	@ 0xf0
 8005562:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
 8005566:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 8005568:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800556c:	f8c4 10f0 	str.w	r1, [r4, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005570:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8005572:	eb03 0341 	add.w	r3, r3, r1, lsl #1
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005576:	6804      	ldr	r4, [r0, #0]
 8005578:	f8d4 10c0 	ldr.w	r1, [r4, #192]	@ 0xc0
 800557c:	400a      	ands	r2, r1
 800557e:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
 8005582:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005586:	6802      	ldr	r2, [r0, #0]
 8005588:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 800558c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8005590:	6dc1      	ldr	r1, [r0, #92]	@ 0x5c
 8005592:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005596:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800559a:	6802      	ldr	r2, [r0, #0]
 800559c:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 80055a0:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 80055a4:	6e01      	ldr	r1, [r0, #96]	@ 0x60
 80055a6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80055aa:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80055ae:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80055b0:	4a27      	ldr	r2, [pc, #156]	@ (8005650 <FDCAN_CalcultateRamBlockAddresses+0x1cc>)
 80055b2:	441a      	add	r2, r3
 80055b4:	0092      	lsls	r2, r2, #2
 80055b6:	66c2      	str	r2, [r0, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80055b8:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80055ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80055be:	6703      	str	r3, [r0, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80055c0:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 80055c2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80055c6:	6743      	str	r3, [r0, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80055c8:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 80055ca:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 80055cc:	fb04 f101 	mul.w	r1, r4, r1
 80055d0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80055d4:	6783      	str	r3, [r0, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80055d6:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 80055d8:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
 80055da:	fb04 f101 	mul.w	r1, r4, r1
 80055de:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80055e2:	67c3      	str	r3, [r0, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80055e4:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 80055e6:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 80055e8:	fb04 f101 	mul.w	r1, r4, r1
 80055ec:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80055f0:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80055f4:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 80055f6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80055fa:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80055fe:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 8005600:	6dc4      	ldr	r4, [r0, #92]	@ 0x5c
 8005602:	fb01 fc04 	mul.w	ip, r1, r4
 8005606:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 800560a:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800560e:	6e04      	ldr	r4, [r0, #96]	@ 0x60
 8005610:	fb04 f101 	mul.w	r1, r4, r1
 8005614:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8005618:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800561c:	490d      	ldr	r1, [pc, #52]	@ (8005654 <FDCAN_CalcultateRamBlockAddresses+0x1d0>)
 800561e:	428b      	cmp	r3, r1
 8005620:	d90d      	bls.n	800563e <FDCAN_CalcultateRamBlockAddresses+0x1ba>
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005622:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8005626:	f043 0320 	orr.w	r3, r3, #32
 800562a:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800562e:	2303      	movs	r3, #3
 8005630:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98

    return HAL_ERROR;
 8005634:	2001      	movs	r0, #1
 8005636:	e007      	b.n	8005648 <FDCAN_CalcultateRamBlockAddresses+0x1c4>
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005638:	2300      	movs	r3, #0
 800563a:	f842 3b04 	str.w	r3, [r2], #4
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800563e:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
 8005642:	4293      	cmp	r3, r2
 8005644:	d8f8      	bhi.n	8005638 <FDCAN_CalcultateRamBlockAddresses+0x1b4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005646:	2000      	movs	r0, #0
}
 8005648:	bc30      	pop	{r4, r5}
 800564a:	4770      	bx	lr
 800564c:	ffff0003 	.word	0xffff0003
 8005650:	10002b00 	.word	0x10002b00
 8005654:	4000d3fc 	.word	0x4000d3fc

08005658 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8005658:	b570      	push	{r4, r5, r6, lr}
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800565a:	684c      	ldr	r4, [r1, #4]
 800565c:	b9f4      	cbnz	r4, 800569c <FDCAN_CopyMessageToRAM+0x44>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800565e:	690d      	ldr	r5, [r1, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8005660:	688c      	ldr	r4, [r1, #8]
                   FDCAN_STANDARD_ID |
 8005662:	4325      	orrs	r5, r4
                   (pTxHeader->Identifier << 18));
 8005664:	680c      	ldr	r4, [r1, #0]
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005666:	ea45 4584 	orr.w	r5, r5, r4, lsl #18
                   pTxHeader->TxFrameType |
                   pTxHeader->Identifier);
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800566a:	6a0e      	ldr	r6, [r1, #32]
                 pTxHeader->TxEventFifoControl |
 800566c:	69cc      	ldr	r4, [r1, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800566e:	ea44 6406 	orr.w	r4, r4, r6, lsl #24
                 pTxHeader->FDFormat |
 8005672:	698e      	ldr	r6, [r1, #24]
                 pTxHeader->TxEventFifoControl |
 8005674:	4334      	orrs	r4, r6
                 pTxHeader->BitRateSwitch |
 8005676:	694e      	ldr	r6, [r1, #20]
                 pTxHeader->FDFormat |
 8005678:	4334      	orrs	r4, r6
                 pTxHeader->DataLength);
 800567a:	68ce      	ldr	r6, [r1, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800567c:	4334      	orrs	r4, r6

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 800567e:	f8d0 6084 	ldr.w	r6, [r0, #132]	@ 0x84
 8005682:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8005684:	fb00 f303 	mul.w	r3, r0, r3
 8005688:	eb06 0e83 	add.w	lr, r6, r3, lsl #2

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800568c:	f846 5023 	str.w	r5, [r6, r3, lsl #2]
  TxAddress++;
  *TxAddress = TxElementW2;
 8005690:	f8ce 4004 	str.w	r4, [lr, #4]
  TxAddress++;
 8005694:	f10e 0e08 	add.w	lr, lr, #8

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8005698:	2000      	movs	r0, #0
 800569a:	e019      	b.n	80056d0 <FDCAN_CopyMessageToRAM+0x78>
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800569c:	690c      	ldr	r4, [r1, #16]
                   pTxHeader->TxFrameType |
 800569e:	688d      	ldr	r5, [r1, #8]
                   FDCAN_EXTENDED_ID |
 80056a0:	4325      	orrs	r5, r4
                   pTxHeader->Identifier);
 80056a2:	680c      	ldr	r4, [r1, #0]
                   pTxHeader->TxFrameType |
 80056a4:	4325      	orrs	r5, r4
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80056a6:	f045 4580 	orr.w	r5, r5, #1073741824	@ 0x40000000
 80056aa:	e7de      	b.n	800566a <FDCAN_CopyMessageToRAM+0x12>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80056ac:	eb02 0c00 	add.w	ip, r2, r0
 80056b0:	f89c 4003 	ldrb.w	r4, [ip, #3]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80056b4:	f89c 3002 	ldrb.w	r3, [ip, #2]
 80056b8:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80056ba:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80056be:	f89c 4001 	ldrb.w	r4, [ip, #1]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80056c2:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
                  (uint32_t)pTxData[ByteCounter]);
 80056c6:	5c14      	ldrb	r4, [r2, r0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80056c8:	4323      	orrs	r3, r4
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80056ca:	f84e 3b04 	str.w	r3, [lr], #4
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80056ce:	3004      	adds	r0, #4
 80056d0:	89cb      	ldrh	r3, [r1, #14]
 80056d2:	4c02      	ldr	r4, [pc, #8]	@ (80056dc <FDCAN_CopyMessageToRAM+0x84>)
 80056d4:	5ce3      	ldrb	r3, [r4, r3]
 80056d6:	4283      	cmp	r3, r0
 80056d8:	d8e8      	bhi.n	80056ac <FDCAN_CopyMessageToRAM+0x54>
    TxAddress++;
  }
}
 80056da:	bd70      	pop	{r4, r5, r6, pc}
 80056dc:	0801a030 	.word	0x0801a030

080056e0 <HAL_FDCAN_Init>:
{
 80056e0:	b530      	push	{r4, r5, lr}
 80056e2:	b095      	sub	sp, #84	@ 0x54
 80056e4:	4604      	mov	r4, r0
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80056e6:	224c      	movs	r2, #76	@ 0x4c
 80056e8:	49a0      	ldr	r1, [pc, #640]	@ (800596c <HAL_FDCAN_Init+0x28c>)
 80056ea:	a801      	add	r0, sp, #4
 80056ec:	f014 fb1a 	bl	8019d24 <memcpy>
  if (hfdcan == NULL)
 80056f0:	2c00      	cmp	r4, #0
 80056f2:	f000 8138 	beq.w	8005966 <HAL_FDCAN_Init+0x286>
  if (hfdcan->Instance == FDCAN1)
 80056f6:	6823      	ldr	r3, [r4, #0]
 80056f8:	4a9d      	ldr	r2, [pc, #628]	@ (8005970 <HAL_FDCAN_Init+0x290>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d020      	beq.n	8005740 <HAL_FDCAN_Init+0x60>
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80056fe:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
 8005702:	b30b      	cbz	r3, 8005748 <HAL_FDCAN_Init+0x68>
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005704:	6822      	ldr	r2, [r4, #0]
 8005706:	6993      	ldr	r3, [r2, #24]
 8005708:	f023 0310 	bic.w	r3, r3, #16
 800570c:	6193      	str	r3, [r2, #24]
  tickstart = HAL_GetTick();
 800570e:	f7fd fcf9 	bl	8003104 <HAL_GetTick>
 8005712:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005714:	6823      	ldr	r3, [r4, #0]
 8005716:	699a      	ldr	r2, [r3, #24]
 8005718:	f012 0f08 	tst.w	r2, #8
 800571c:	d01a      	beq.n	8005754 <HAL_FDCAN_Init+0x74>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800571e:	f7fd fcf1 	bl	8003104 <HAL_GetTick>
 8005722:	1b43      	subs	r3, r0, r5
 8005724:	2b0a      	cmp	r3, #10
 8005726:	d9f5      	bls.n	8005714 <HAL_FDCAN_Init+0x34>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005728:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 800572c:	f043 0301 	orr.w	r3, r3, #1
 8005730:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005734:	2303      	movs	r3, #3
 8005736:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
      return HAL_ERROR;
 800573a:	2001      	movs	r0, #1
}
 800573c:	b015      	add	sp, #84	@ 0x54
 800573e:	bd30      	pop	{r4, r5, pc}
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8005740:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005744:	6063      	str	r3, [r4, #4]
 8005746:	e7da      	b.n	80056fe <HAL_FDCAN_Init+0x1e>
    hfdcan->Lock = HAL_UNLOCKED;
 8005748:	f884 3099 	strb.w	r3, [r4, #153]	@ 0x99
    HAL_FDCAN_MspInit(hfdcan);
 800574c:	4620      	mov	r0, r4
 800574e:	f7fc fcbb 	bl	80020c8 <HAL_FDCAN_MspInit>
 8005752:	e7d7      	b.n	8005704 <HAL_FDCAN_Init+0x24>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005754:	699a      	ldr	r2, [r3, #24]
 8005756:	f042 0201 	orr.w	r2, r2, #1
 800575a:	619a      	str	r2, [r3, #24]
  tickstart = HAL_GetTick();
 800575c:	f7fd fcd2 	bl	8003104 <HAL_GetTick>
 8005760:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005762:	6823      	ldr	r3, [r4, #0]
 8005764:	699a      	ldr	r2, [r3, #24]
 8005766:	f012 0f01 	tst.w	r2, #1
 800576a:	d10f      	bne.n	800578c <HAL_FDCAN_Init+0xac>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800576c:	f7fd fcca 	bl	8003104 <HAL_GetTick>
 8005770:	1b40      	subs	r0, r0, r5
 8005772:	280a      	cmp	r0, #10
 8005774:	d9f5      	bls.n	8005762 <HAL_FDCAN_Init+0x82>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005776:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 800577a:	f043 0301 	orr.w	r3, r3, #1
 800577e:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005782:	2303      	movs	r3, #3
 8005784:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
      return HAL_ERROR;
 8005788:	2001      	movs	r0, #1
 800578a:	e7d7      	b.n	800573c <HAL_FDCAN_Init+0x5c>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800578c:	699a      	ldr	r2, [r3, #24]
 800578e:	f042 0202 	orr.w	r2, r2, #2
 8005792:	619a      	str	r2, [r3, #24]
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005794:	7c23      	ldrb	r3, [r4, #16]
 8005796:	2b01      	cmp	r3, #1
 8005798:	d040      	beq.n	800581c <HAL_FDCAN_Init+0x13c>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800579a:	6822      	ldr	r2, [r4, #0]
 800579c:	6993      	ldr	r3, [r2, #24]
 800579e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057a2:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.TransmitPause == ENABLE)
 80057a4:	7c63      	ldrb	r3, [r4, #17]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d03e      	beq.n	8005828 <HAL_FDCAN_Init+0x148>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80057aa:	6822      	ldr	r2, [r4, #0]
 80057ac:	6993      	ldr	r3, [r2, #24]
 80057ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80057b2:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.ProtocolException == ENABLE)
 80057b4:	7ca3      	ldrb	r3, [r4, #18]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d03c      	beq.n	8005834 <HAL_FDCAN_Init+0x154>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80057ba:	6822      	ldr	r2, [r4, #0]
 80057bc:	6993      	ldr	r3, [r2, #24]
 80057be:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80057c2:	6193      	str	r3, [r2, #24]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80057c4:	6822      	ldr	r2, [r4, #0]
 80057c6:	6993      	ldr	r3, [r2, #24]
 80057c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057cc:	68a1      	ldr	r1, [r4, #8]
 80057ce:	430b      	orrs	r3, r1
 80057d0:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80057d2:	6822      	ldr	r2, [r4, #0]
 80057d4:	6993      	ldr	r3, [r2, #24]
 80057d6:	f023 03a4 	bic.w	r3, r3, #164	@ 0xa4
 80057da:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80057dc:	6822      	ldr	r2, [r4, #0]
 80057de:	6913      	ldr	r3, [r2, #16]
 80057e0:	f023 0310 	bic.w	r3, r3, #16
 80057e4:	6113      	str	r3, [r2, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80057e6:	68e3      	ldr	r3, [r4, #12]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d029      	beq.n	8005840 <HAL_FDCAN_Init+0x160>
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d02c      	beq.n	800584a <HAL_FDCAN_Init+0x16a>
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	f000 809b 	beq.w	800592c <HAL_FDCAN_Init+0x24c>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80057f6:	6822      	ldr	r2, [r4, #0]
 80057f8:	6993      	ldr	r3, [r2, #24]
 80057fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057fe:	6193      	str	r3, [r2, #24]
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005800:	6822      	ldr	r2, [r4, #0]
 8005802:	6913      	ldr	r3, [r2, #16]
 8005804:	f043 0310 	orr.w	r3, r3, #16
 8005808:	6113      	str	r3, [r2, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800580a:	68e3      	ldr	r3, [r4, #12]
 800580c:	2b03      	cmp	r3, #3
 800580e:	d11c      	bne.n	800584a <HAL_FDCAN_Init+0x16a>
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005810:	6822      	ldr	r2, [r4, #0]
 8005812:	6993      	ldr	r3, [r2, #24]
 8005814:	f043 0320 	orr.w	r3, r3, #32
 8005818:	6193      	str	r3, [r2, #24]
 800581a:	e016      	b.n	800584a <HAL_FDCAN_Init+0x16a>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800581c:	6822      	ldr	r2, [r4, #0]
 800581e:	6993      	ldr	r3, [r2, #24]
 8005820:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005824:	6193      	str	r3, [r2, #24]
 8005826:	e7bd      	b.n	80057a4 <HAL_FDCAN_Init+0xc4>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005828:	6822      	ldr	r2, [r4, #0]
 800582a:	6993      	ldr	r3, [r2, #24]
 800582c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005830:	6193      	str	r3, [r2, #24]
 8005832:	e7bf      	b.n	80057b4 <HAL_FDCAN_Init+0xd4>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005834:	6822      	ldr	r2, [r4, #0]
 8005836:	6993      	ldr	r3, [r2, #24]
 8005838:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800583c:	6193      	str	r3, [r2, #24]
 800583e:	e7c1      	b.n	80057c4 <HAL_FDCAN_Init+0xe4>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005840:	6822      	ldr	r2, [r4, #0]
 8005842:	6993      	ldr	r3, [r2, #24]
 8005844:	f043 0304 	orr.w	r3, r3, #4
 8005848:	6193      	str	r3, [r2, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800584a:	69a3      	ldr	r3, [r4, #24]
 800584c:	1e5a      	subs	r2, r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800584e:	69e3      	ldr	r3, [r4, #28]
 8005850:	3b01      	subs	r3, #1
 8005852:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005854:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005858:	6a22      	ldr	r2, [r4, #32]
 800585a:	3a01      	subs	r2, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800585c:	4313      	orrs	r3, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800585e:	6962      	ldr	r2, [r4, #20]
 8005860:	3a01      	subs	r2, #1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005862:	6821      	ldr	r1, [r4, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005864:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005868:	61cb      	str	r3, [r1, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800586a:	68a3      	ldr	r3, [r4, #8]
 800586c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005870:	d062      	beq.n	8005938 <HAL_FDCAN_Init+0x258>
  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8005872:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8005874:	b133      	cbz	r3, 8005884 <HAL_FDCAN_Init+0x1a4>
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005876:	6822      	ldr	r2, [r4, #0]
 8005878:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 800587c:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 800587e:	430b      	orrs	r3, r1
 8005880:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8005884:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005886:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8005888:	42d3      	cmn	r3, r2
 800588a:	d00d      	beq.n	80058a8 <HAL_FDCAN_Init+0x1c8>
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800588c:	6821      	ldr	r1, [r4, #0]
 800588e:	f8d1 30c8 	ldr.w	r3, [r1, #200]	@ 0xc8
 8005892:	f023 0307 	bic.w	r3, r3, #7
 8005896:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 8005898:	a814      	add	r0, sp, #80	@ 0x50
 800589a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800589e:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	f8c1 30c8 	str.w	r3, [r1, #200]	@ 0xc8
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80058a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80058aa:	b16b      	cbz	r3, 80058c8 <HAL_FDCAN_Init+0x1e8>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80058ac:	6821      	ldr	r1, [r4, #0]
 80058ae:	f8d1 30bc 	ldr.w	r3, [r1, #188]	@ 0xbc
 80058b2:	f023 0307 	bic.w	r3, r3, #7
 80058b6:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80058b8:	a814      	add	r0, sp, #80	@ 0x50
 80058ba:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80058be:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	f8c1 30bc 	str.w	r3, [r1, #188]	@ 0xbc
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80058c8:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80058ca:	b173      	cbz	r3, 80058ea <HAL_FDCAN_Init+0x20a>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80058cc:	6821      	ldr	r1, [r4, #0]
 80058ce:	f8d1 30bc 	ldr.w	r3, [r1, #188]	@ 0xbc
 80058d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058d6:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 80058d8:	a814      	add	r0, sp, #80	@ 0x50
 80058da:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80058de:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 80058e2:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80058e6:	f8c1 30bc 	str.w	r3, [r1, #188]	@ 0xbc
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80058ea:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80058ec:	b173      	cbz	r3, 800590c <HAL_FDCAN_Init+0x22c>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80058ee:	6821      	ldr	r1, [r4, #0]
 80058f0:	f8d1 30bc 	ldr.w	r3, [r1, #188]	@ 0xbc
 80058f4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80058f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80058fa:	a814      	add	r0, sp, #80	@ 0x50
 80058fc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005900:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8005904:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005908:	f8c1 30bc 	str.w	r3, [r1, #188]	@ 0xbc
  if (hfdcan->Instance == FDCAN1)
 800590c:	6822      	ldr	r2, [r4, #0]
 800590e:	4b18      	ldr	r3, [pc, #96]	@ (8005970 <HAL_FDCAN_Init+0x290>)
 8005910:	429a      	cmp	r2, r3
 8005912:	d022      	beq.n	800595a <HAL_FDCAN_Init+0x27a>
  hfdcan->LatestTxFifoQRequest = 0U;
 8005914:	2300      	movs	r3, #0
 8005916:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800591a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800591e:	2301      	movs	r3, #1
 8005920:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005924:	4620      	mov	r0, r4
 8005926:	f7ff fdad 	bl	8005484 <FDCAN_CalcultateRamBlockAddresses>
  return status;
 800592a:	e707      	b.n	800573c <HAL_FDCAN_Init+0x5c>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800592c:	6822      	ldr	r2, [r4, #0]
 800592e:	6993      	ldr	r3, [r2, #24]
 8005930:	f043 0320 	orr.w	r3, r3, #32
 8005934:	6193      	str	r3, [r2, #24]
 8005936:	e788      	b.n	800584a <HAL_FDCAN_Init+0x16a>
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005938:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800593a:	3b01      	subs	r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800593c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800593e:	3a01      	subs	r2, #1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005940:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005944:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8005946:	3a01      	subs	r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005948:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800594c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800594e:	3a01      	subs	r2, #1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005950:	6821      	ldr	r1, [r4, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005952:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005956:	60cb      	str	r3, [r1, #12]
 8005958:	e78b      	b.n	8005872 <HAL_FDCAN_Init+0x192>
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800595a:	6862      	ldr	r2, [r4, #4]
 800595c:	6893      	ldr	r3, [r2, #8]
 800595e:	f023 0303 	bic.w	r3, r3, #3
 8005962:	6093      	str	r3, [r2, #8]
 8005964:	e7d6      	b.n	8005914 <HAL_FDCAN_Init+0x234>
    return HAL_ERROR;
 8005966:	2001      	movs	r0, #1
 8005968:	e6e8      	b.n	800573c <HAL_FDCAN_Init+0x5c>
 800596a:	bf00      	nop
 800596c:	08019dec 	.word	0x08019dec
 8005970:	4000a000 	.word	0x4000a000

08005974 <HAL_FDCAN_ConfigGlobalFilter>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005974:	f890 c098 	ldrb.w	ip, [r0, #152]	@ 0x98
 8005978:	fa5f fc8c 	uxtb.w	ip, ip
 800597c:	f1bc 0f01 	cmp.w	ip, #1
 8005980:	d007      	beq.n	8005992 <HAL_FDCAN_ConfigGlobalFilter+0x1e>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005982:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8005986:	f043 0304 	orr.w	r3, r3, #4
 800598a:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
    return HAL_ERROR;
 800598e:	2001      	movs	r0, #1
}
 8005990:	4770      	bx	lr
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8005992:	0092      	lsls	r2, r2, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8005994:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8005998:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800599c:	6801      	ldr	r1, [r0, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 800599e:	9a00      	ldr	r2, [sp, #0]
 80059a0:	431a      	orrs	r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80059a2:	f8c1 2080 	str.w	r2, [r1, #128]	@ 0x80
    return HAL_OK;
 80059a6:	2000      	movs	r0, #0
 80059a8:	4770      	bx	lr

080059aa <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80059aa:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d007      	beq.n	80059c4 <HAL_FDCAN_Start+0x1a>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80059b4:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 80059b8:	f043 0304 	orr.w	r3, r3, #4
 80059bc:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
    return HAL_ERROR;
 80059c0:	2001      	movs	r0, #1
}
 80059c2:	4770      	bx	lr
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80059c4:	2302      	movs	r3, #2
 80059c6:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80059ca:	6802      	ldr	r2, [r0, #0]
 80059cc:	6993      	ldr	r3, [r2, #24]
 80059ce:	f023 0301 	bic.w	r3, r3, #1
 80059d2:	6193      	str	r3, [r2, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80059d4:	2300      	movs	r3, #0
 80059d6:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
    return HAL_OK;
 80059da:	4618      	mov	r0, r3
 80059dc:	4770      	bx	lr

080059de <HAL_FDCAN_AddMessageToTxFifoQ>:
{
 80059de:	b538      	push	{r3, r4, r5, lr}
 80059e0:	4604      	mov	r4, r0
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80059e2:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d12b      	bne.n	8005a44 <HAL_FDCAN_AddMessageToTxFifoQ+0x66>
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80059ec:	6803      	ldr	r3, [r0, #0]
 80059ee:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 80059f2:	f010 5f7c 	tst.w	r0, #1056964608	@ 0x3f000000
 80059f6:	d00c      	beq.n	8005a12 <HAL_FDCAN_AddMessageToTxFifoQ+0x34>
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80059f8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80059fc:	f410 1f00 	tst.w	r0, #2097152	@ 0x200000
 8005a00:	d00f      	beq.n	8005a22 <HAL_FDCAN_AddMessageToTxFifoQ+0x44>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8005a02:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8005a06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005a0a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
      return HAL_ERROR;
 8005a0e:	2001      	movs	r0, #1
 8005a10:	e01f      	b.n	8005a52 <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005a12:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8005a16:	f043 0320 	orr.w	r3, r3, #32
 8005a1a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
      return HAL_ERROR;
 8005a1e:	2001      	movs	r0, #1
 8005a20:	e017      	b.n	8005a52 <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8005a22:	f8d3 50c4 	ldr.w	r5, [r3, #196]	@ 0xc4
 8005a26:	f3c5 4504 	ubfx	r5, r5, #16, #5
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8005a2a:	462b      	mov	r3, r5
 8005a2c:	4620      	mov	r0, r4
 8005a2e:	f7ff fe13 	bl	8005658 <FDCAN_CopyMessageToRAM>
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8005a32:	6822      	ldr	r2, [r4, #0]
 8005a34:	2301      	movs	r3, #1
 8005a36:	40ab      	lsls	r3, r5
 8005a38:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8005a3c:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
    return HAL_OK;
 8005a40:	2000      	movs	r0, #0
 8005a42:	e006      	b.n	8005a52 <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005a44:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8005a48:	f043 0308 	orr.w	r3, r3, #8
 8005a4c:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
    return HAL_ERROR;
 8005a50:	2001      	movs	r0, #1
}
 8005a52:	bd38      	pop	{r3, r4, r5, pc}

08005a54 <HAL_FDCAN_GetRxMessage>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005a54:	f890 c098 	ldrb.w	ip, [r0, #152]	@ 0x98
 8005a58:	fa5f fc8c 	uxtb.w	ip, ip
  if (state == HAL_FDCAN_STATE_BUSY)
 8005a5c:	f1bc 0f02 	cmp.w	ip, #2
 8005a60:	f040 80db 	bne.w	8005c1a <HAL_FDCAN_GetRxMessage+0x1c6>
{
 8005a64:	b570      	push	{r4, r5, r6, lr}
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005a66:	2940      	cmp	r1, #64	@ 0x40
 8005a68:	d00c      	beq.n	8005a84 <HAL_FDCAN_GetRxMessage+0x30>
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005a6a:	2941      	cmp	r1, #65	@ 0x41
 8005a6c:	d03b      	beq.n	8005ae6 <HAL_FDCAN_GetRxMessage+0x92>
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8005a6e:	6d04      	ldr	r4, [r0, #80]	@ 0x50
 8005a70:	428c      	cmp	r4, r1
 8005a72:	d869      	bhi.n	8005b48 <HAL_FDCAN_GetRxMessage+0xf4>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005a74:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8005a78:	f043 0320 	orr.w	r3, r3, #32
 8005a7c:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
        return HAL_ERROR;
 8005a80:	2001      	movs	r0, #1
 8005a82:	e0bd      	b.n	8005c00 <HAL_FDCAN_GetRxMessage+0x1ac>
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8005a84:	6804      	ldr	r4, [r0, #0]
 8005a86:	f8d4 50a0 	ldr.w	r5, [r4, #160]	@ 0xa0
 8005a8a:	f415 0ffe 	tst.w	r5, #8323072	@ 0x7f0000
 8005a8e:	d00c      	beq.n	8005aaa <HAL_FDCAN_GetRxMessage+0x56>
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005a90:	f8d4 50a4 	ldr.w	r5, [r4, #164]	@ 0xa4
 8005a94:	f015 0f7f 	tst.w	r5, #127	@ 0x7f
 8005a98:	d10f      	bne.n	8005aba <HAL_FDCAN_GetRxMessage+0x66>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005a9a:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8005a9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005aa2:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
        return HAL_ERROR;
 8005aa6:	2001      	movs	r0, #1
 8005aa8:	e0aa      	b.n	8005c00 <HAL_FDCAN_GetRxMessage+0x1ac>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005aaa:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8005aae:	f043 0320 	orr.w	r3, r3, #32
 8005ab2:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
        return HAL_ERROR;
 8005ab6:	2001      	movs	r0, #1
 8005ab8:	e0a2      	b.n	8005c00 <HAL_FDCAN_GetRxMessage+0x1ac>
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8005aba:	f8d4 50a4 	ldr.w	r5, [r4, #164]	@ 0xa4
 8005abe:	f3c5 6600 	ubfx	r6, r5, #24, #1
 8005ac2:	f015 7f80 	tst.w	r5, #16777216	@ 0x1000000
 8005ac6:	d002      	beq.n	8005ace <HAL_FDCAN_GetRxMessage+0x7a>
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005ac8:	f8d4 50a0 	ldr.w	r5, [r4, #160]	@ 0xa0
  uint32_t GetIndex = 0;
 8005acc:	2600      	movs	r6, #0
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005ace:	f8d4 40a4 	ldr.w	r4, [r4, #164]	@ 0xa4
 8005ad2:	f3c4 2405 	ubfx	r4, r4, #8, #6
 8005ad6:	4426      	add	r6, r4
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8005ad8:	6f45      	ldr	r5, [r0, #116]	@ 0x74
 8005ada:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8005adc:	fb06 f404 	mul.w	r4, r6, r4
 8005ae0:	eb05 0e84 	add.w	lr, r5, r4, lsl #2
 8005ae4:	e037      	b.n	8005b56 <HAL_FDCAN_GetRxMessage+0x102>
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8005ae6:	6804      	ldr	r4, [r0, #0]
 8005ae8:	f8d4 50b0 	ldr.w	r5, [r4, #176]	@ 0xb0
 8005aec:	f415 0ffe 	tst.w	r5, #8323072	@ 0x7f0000
 8005af0:	d00c      	beq.n	8005b0c <HAL_FDCAN_GetRxMessage+0xb8>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005af2:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 8005af6:	f015 0f7f 	tst.w	r5, #127	@ 0x7f
 8005afa:	d10f      	bne.n	8005b1c <HAL_FDCAN_GetRxMessage+0xc8>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005afc:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8005b00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b04:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
        return HAL_ERROR;
 8005b08:	2001      	movs	r0, #1
 8005b0a:	e079      	b.n	8005c00 <HAL_FDCAN_GetRxMessage+0x1ac>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005b0c:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8005b10:	f043 0320 	orr.w	r3, r3, #32
 8005b14:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
        return HAL_ERROR;
 8005b18:	2001      	movs	r0, #1
 8005b1a:	e071      	b.n	8005c00 <HAL_FDCAN_GetRxMessage+0x1ac>
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8005b1c:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 8005b20:	f3c5 6600 	ubfx	r6, r5, #24, #1
 8005b24:	f015 7f80 	tst.w	r5, #16777216	@ 0x1000000
 8005b28:	d002      	beq.n	8005b30 <HAL_FDCAN_GetRxMessage+0xdc>
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005b2a:	f8d4 50b0 	ldr.w	r5, [r4, #176]	@ 0xb0
  uint32_t GetIndex = 0;
 8005b2e:	2600      	movs	r6, #0
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005b30:	f8d4 40b4 	ldr.w	r4, [r4, #180]	@ 0xb4
 8005b34:	f3c4 2405 	ubfx	r4, r4, #8, #6
 8005b38:	4426      	add	r6, r4
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8005b3a:	6f85      	ldr	r5, [r0, #120]	@ 0x78
 8005b3c:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
 8005b3e:	fb06 f404 	mul.w	r4, r6, r4
 8005b42:	eb05 0e84 	add.w	lr, r5, r4, lsl #2
 8005b46:	e006      	b.n	8005b56 <HAL_FDCAN_GetRxMessage+0x102>
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8005b48:	6fc5      	ldr	r5, [r0, #124]	@ 0x7c
 8005b4a:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8005b4c:	fb01 f404 	mul.w	r4, r1, r4
 8005b50:	eb05 0e84 	add.w	lr, r5, r4, lsl #2
  uint32_t GetIndex = 0;
 8005b54:	2600      	movs	r6, #0
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005b56:	f8de 4000 	ldr.w	r4, [lr]
 8005b5a:	f004 4480 	and.w	r4, r4, #1073741824	@ 0x40000000
 8005b5e:	6054      	str	r4, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005b60:	bb64      	cbnz	r4, 8005bbc <HAL_FDCAN_GetRxMessage+0x168>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8005b62:	f8de 4000 	ldr.w	r4, [lr]
 8005b66:	f3c4 448a 	ubfx	r4, r4, #18, #11
 8005b6a:	6014      	str	r4, [r2, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005b6c:	f8de 4000 	ldr.w	r4, [lr]
 8005b70:	f004 5400 	and.w	r4, r4, #536870912	@ 0x20000000
 8005b74:	6094      	str	r4, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8005b76:	f8de 4000 	ldr.w	r4, [lr]
 8005b7a:	f004 4400 	and.w	r4, r4, #2147483648	@ 0x80000000
 8005b7e:	6114      	str	r4, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005b80:	f8be 4004 	ldrh.w	r4, [lr, #4]
 8005b84:	61d4      	str	r4, [r2, #28]
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8005b86:	f8de 4004 	ldr.w	r4, [lr, #4]
 8005b8a:	f404 2470 	and.w	r4, r4, #983040	@ 0xf0000
 8005b8e:	60d4      	str	r4, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005b90:	f8de 4004 	ldr.w	r4, [lr, #4]
 8005b94:	f404 1480 	and.w	r4, r4, #1048576	@ 0x100000
 8005b98:	6154      	str	r4, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005b9a:	f8de 4004 	ldr.w	r4, [lr, #4]
 8005b9e:	f404 1400 	and.w	r4, r4, #2097152	@ 0x200000
 8005ba2:	6194      	str	r4, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8005ba4:	f89e 4007 	ldrb.w	r4, [lr, #7]
 8005ba8:	f004 047f 	and.w	r4, r4, #127	@ 0x7f
 8005bac:	6214      	str	r4, [r2, #32]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8005bae:	f8de 4004 	ldr.w	r4, [lr, #4]
 8005bb2:	0fe4      	lsrs	r4, r4, #31
 8005bb4:	6254      	str	r4, [r2, #36]	@ 0x24
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8005bb6:	f04f 0c00 	mov.w	ip, #0
 8005bba:	e00c      	b.n	8005bd6 <HAL_FDCAN_GetRxMessage+0x182>
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005bbc:	f8de 4000 	ldr.w	r4, [lr]
 8005bc0:	f024 4460 	bic.w	r4, r4, #3758096384	@ 0xe0000000
 8005bc4:	6014      	str	r4, [r2, #0]
 8005bc6:	e7d1      	b.n	8005b6c <HAL_FDCAN_GetRxMessage+0x118>
      pRxData[ByteCounter] = pData[ByteCounter];
 8005bc8:	eb0e 040c 	add.w	r4, lr, ip
 8005bcc:	7a24      	ldrb	r4, [r4, #8]
 8005bce:	f803 400c 	strb.w	r4, [r3, ip]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8005bd2:	f10c 0c01 	add.w	ip, ip, #1
 8005bd6:	89d4      	ldrh	r4, [r2, #14]
 8005bd8:	4d14      	ldr	r5, [pc, #80]	@ (8005c2c <HAL_FDCAN_GetRxMessage+0x1d8>)
 8005bda:	5d2c      	ldrb	r4, [r5, r4]
 8005bdc:	4564      	cmp	r4, ip
 8005bde:	d8f3      	bhi.n	8005bc8 <HAL_FDCAN_GetRxMessage+0x174>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005be0:	2940      	cmp	r1, #64	@ 0x40
 8005be2:	d009      	beq.n	8005bf8 <HAL_FDCAN_GetRxMessage+0x1a4>
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005be4:	2941      	cmp	r1, #65	@ 0x41
 8005be6:	d00c      	beq.n	8005c02 <HAL_FDCAN_GetRxMessage+0x1ae>
      if (RxLocation < FDCAN_RX_BUFFER32)
 8005be8:	291f      	cmp	r1, #31
 8005bea:	d80e      	bhi.n	8005c0a <HAL_FDCAN_GetRxMessage+0x1b6>
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8005bec:	6802      	ldr	r2, [r0, #0]
 8005bee:	2301      	movs	r3, #1
 8005bf0:	408b      	lsls	r3, r1
 8005bf2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
 8005bf6:	e002      	b.n	8005bfe <HAL_FDCAN_GetRxMessage+0x1aa>
      hfdcan->Instance->RXF0A = GetIndex;
 8005bf8:	6803      	ldr	r3, [r0, #0]
 8005bfa:	f8c3 60a8 	str.w	r6, [r3, #168]	@ 0xa8
    return HAL_OK;
 8005bfe:	2000      	movs	r0, #0
}
 8005c00:	bd70      	pop	{r4, r5, r6, pc}
      hfdcan->Instance->RXF1A = GetIndex;
 8005c02:	6803      	ldr	r3, [r0, #0]
 8005c04:	f8c3 60b8 	str.w	r6, [r3, #184]	@ 0xb8
 8005c08:	e7f9      	b.n	8005bfe <HAL_FDCAN_GetRxMessage+0x1aa>
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8005c0a:	f001 011f 	and.w	r1, r1, #31
 8005c0e:	6802      	ldr	r2, [r0, #0]
 8005c10:	2301      	movs	r3, #1
 8005c12:	408b      	lsls	r3, r1
 8005c14:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8005c18:	e7f1      	b.n	8005bfe <HAL_FDCAN_GetRxMessage+0x1aa>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005c1a:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8005c1e:	f043 0308 	orr.w	r3, r3, #8
 8005c22:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
    return HAL_ERROR;
 8005c26:	2001      	movs	r0, #1
}
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	0801a030 	.word	0x0801a030

08005c30 <HAL_FDCAN_ActivateNotification>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005c30:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005c34:	3b01      	subs	r3, #1
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d907      	bls.n	8005c4c <HAL_FDCAN_ActivateNotification+0x1c>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005c3c:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8005c40:	f043 0302 	orr.w	r3, r3, #2
 8005c44:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
    return HAL_ERROR;
 8005c48:	2001      	movs	r0, #1
}
 8005c4a:	4770      	bx	lr
{
 8005c4c:	b410      	push	{r4}
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8005c4e:	6803      	ldr	r3, [r0, #0]
 8005c50:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
 8005c52:	420c      	tst	r4, r1
 8005c54:	d124      	bne.n	8005ca0 <HAL_FDCAN_ActivateNotification+0x70>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8005c56:	6ddc      	ldr	r4, [r3, #92]	@ 0x5c
 8005c58:	f044 0401 	orr.w	r4, r4, #1
 8005c5c:	65dc      	str	r4, [r3, #92]	@ 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8005c5e:	f411 7f00 	tst.w	r1, #512	@ 0x200
 8005c62:	d005      	beq.n	8005c70 <HAL_FDCAN_ActivateNotification+0x40>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005c64:	6804      	ldr	r4, [r0, #0]
 8005c66:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005c70:	f411 6f80 	tst.w	r1, #1024	@ 0x400
 8005c74:	d005      	beq.n	8005c82 <HAL_FDCAN_ActivateNotification+0x52>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8005c76:	6804      	ldr	r4, [r0, #0]
 8005c78:	f8d4 30e4 	ldr.w	r3, [r4, #228]	@ 0xe4
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	f8c4 30e4 	str.w	r3, [r4, #228]	@ 0xe4
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8005c82:	6800      	ldr	r0, [r0, #0]
 8005c84:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8005c86:	4a0c      	ldr	r2, [pc, #48]	@ (8005cb8 <HAL_FDCAN_ActivateNotification+0x88>)
 8005c88:	400a      	ands	r2, r1
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	6543      	str	r3, [r0, #84]	@ 0x54
 8005c8e:	4a0b      	ldr	r2, [pc, #44]	@ (8005cbc <HAL_FDCAN_ActivateNotification+0x8c>)
 8005c90:	6953      	ldr	r3, [r2, #20]
 8005c92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c96:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 8005c98:	2000      	movs	r0, #0
}
 8005c9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c9e:	4770      	bx	lr
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8005ca0:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
 8005ca2:	ea31 0404 	bics.w	r4, r1, r4
 8005ca6:	d002      	beq.n	8005cae <HAL_FDCAN_ActivateNotification+0x7e>
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8005ca8:	2403      	movs	r4, #3
 8005caa:	65dc      	str	r4, [r3, #92]	@ 0x5c
 8005cac:	e7d7      	b.n	8005c5e <HAL_FDCAN_ActivateNotification+0x2e>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8005cae:	6ddc      	ldr	r4, [r3, #92]	@ 0x5c
 8005cb0:	f044 0402 	orr.w	r4, r4, #2
 8005cb4:	65dc      	str	r4, [r3, #92]	@ 0x5c
 8005cb6:	e7d2      	b.n	8005c5e <HAL_FDCAN_ActivateNotification+0x2e>
 8005cb8:	3fcfffff 	.word	0x3fcfffff
 8005cbc:	4000a800 	.word	0x4000a800

08005cc0 <HAL_FDCAN_ClockCalibrationCallback>:
}
 8005cc0:	4770      	bx	lr

08005cc2 <HAL_FDCAN_TxEventFifoCallback>:
}
 8005cc2:	4770      	bx	lr

08005cc4 <HAL_FDCAN_RxFifo1Callback>:
}
 8005cc4:	4770      	bx	lr

08005cc6 <HAL_FDCAN_TxFifoEmptyCallback>:
}
 8005cc6:	4770      	bx	lr

08005cc8 <HAL_FDCAN_TxBufferCompleteCallback>:
}
 8005cc8:	4770      	bx	lr

08005cca <HAL_FDCAN_TxBufferAbortCallback>:
}
 8005cca:	4770      	bx	lr

08005ccc <HAL_FDCAN_RxBufferNewMessageCallback>:
}
 8005ccc:	4770      	bx	lr

08005cce <HAL_FDCAN_TimestampWraparoundCallback>:
}
 8005cce:	4770      	bx	lr

08005cd0 <HAL_FDCAN_TimeoutOccurredCallback>:
}
 8005cd0:	4770      	bx	lr

08005cd2 <HAL_FDCAN_HighPriorityMessageCallback>:
}
 8005cd2:	4770      	bx	lr

08005cd4 <HAL_FDCAN_ErrorStatusCallback>:
}
 8005cd4:	4770      	bx	lr

08005cd6 <HAL_FDCAN_TT_ScheduleSyncCallback>:
}
 8005cd6:	4770      	bx	lr

08005cd8 <HAL_FDCAN_TT_TimeMarkCallback>:
}
 8005cd8:	4770      	bx	lr

08005cda <HAL_FDCAN_TT_StopWatchCallback>:
}
 8005cda:	4770      	bx	lr

08005cdc <HAL_FDCAN_TT_GlobalTimeCallback>:
}
 8005cdc:	4770      	bx	lr
	...

08005ce0 <HAL_FDCAN_IRQHandler>:
{
 8005ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ce4:	b083      	sub	sp, #12
 8005ce6:	4604      	mov	r4, r0
  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8005ce8:	4bb0      	ldr	r3, [pc, #704]	@ (8005fac <HAL_FDCAN_IRQHandler+0x2cc>)
 8005cea:	691a      	ldr	r2, [r3, #16]
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	079b      	lsls	r3, r3, #30
 8005cf0:	ea03 7382 	and.w	r3, r3, r2, lsl #30
 8005cf4:	9301      	str	r3, [sp, #4]
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005cf6:	6803      	ldr	r3, [r0, #0]
 8005cf8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005cfa:	f402 4a70 	and.w	sl, r2, #61440	@ 0xf000
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005cfe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d00:	ea0a 0a02 	and.w	sl, sl, r2
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005d04:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005d06:	f002 090f 	and.w	r9, r2, #15
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005d0a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d0c:	ea09 0902 	and.w	r9, r9, r2
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005d10:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005d12:	f002 08f0 	and.w	r8, r2, #240	@ 0xf0
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005d16:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d18:	ea08 0802 	and.w	r8, r8, r2
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005d1c:	6d1e      	ldr	r6, [r3, #80]	@ 0x50
 8005d1e:	f006 5671 	and.w	r6, r6, #1010827264	@ 0x3c400000
  Errors &= hfdcan->Instance->IE;
 8005d22:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d24:	4016      	ands	r6, r2
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005d26:	6d1f      	ldr	r7, [r3, #80]	@ 0x50
 8005d28:	f007 7760 	and.w	r7, r7, #58720256	@ 0x3800000
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005d2c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d2e:	4017      	ands	r7, r2
  itsourceIE = hfdcan->Instance->IE;
 8005d30:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
  itflagIR = hfdcan->Instance->IR;
 8005d32:	f8d3 b050 	ldr.w	fp, [r3, #80]	@ 0x50
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8005d36:	f415 7f80 	tst.w	r5, #256	@ 0x100
 8005d3a:	d002      	beq.n	8005d42 <HAL_FDCAN_IRQHandler+0x62>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005d3c:	f41b 7f80 	tst.w	fp, #256	@ 0x100
 8005d40:	d164      	bne.n	8005e0c <HAL_FDCAN_IRQHandler+0x12c>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8005d42:	f415 6f80 	tst.w	r5, #1024	@ 0x400
 8005d46:	d002      	beq.n	8005d4e <HAL_FDCAN_IRQHandler+0x6e>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8005d48:	f41b 6f80 	tst.w	fp, #1024	@ 0x400
 8005d4c:	d167      	bne.n	8005e1e <HAL_FDCAN_IRQHandler+0x13e>
  if (ClkCalibrationITs != 0U)
 8005d4e:	9b01      	ldr	r3, [sp, #4]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d174      	bne.n	8005e3e <HAL_FDCAN_IRQHandler+0x15e>
  if (TxEventFifoITs != 0U)
 8005d54:	f1ba 0f00 	cmp.w	sl, #0
 8005d58:	d17c      	bne.n	8005e54 <HAL_FDCAN_IRQHandler+0x174>
  if (RxFifo0ITs != 0U)
 8005d5a:	f1b9 0f00 	cmp.w	r9, #0
 8005d5e:	f040 8085 	bne.w	8005e6c <HAL_FDCAN_IRQHandler+0x18c>
  if (RxFifo1ITs != 0U)
 8005d62:	f1b8 0f00 	cmp.w	r8, #0
 8005d66:	f040 808d 	bne.w	8005e84 <HAL_FDCAN_IRQHandler+0x1a4>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005d6a:	f415 6f00 	tst.w	r5, #2048	@ 0x800
 8005d6e:	d003      	beq.n	8005d78 <HAL_FDCAN_IRQHandler+0x98>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8005d70:	f41b 6f00 	tst.w	fp, #2048	@ 0x800
 8005d74:	f040 8092 	bne.w	8005e9c <HAL_FDCAN_IRQHandler+0x1bc>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8005d78:	f415 7f00 	tst.w	r5, #512	@ 0x200
 8005d7c:	d003      	beq.n	8005d86 <HAL_FDCAN_IRQHandler+0xa6>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8005d7e:	f41b 7f00 	tst.w	fp, #512	@ 0x200
 8005d82:	f040 8096 	bne.w	8005eb2 <HAL_FDCAN_IRQHandler+0x1d2>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005d86:	f415 2f00 	tst.w	r5, #524288	@ 0x80000
 8005d8a:	d003      	beq.n	8005d94 <HAL_FDCAN_IRQHandler+0xb4>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005d8c:	f41b 2f00 	tst.w	fp, #524288	@ 0x80000
 8005d90:	f040 809f 	bne.w	8005ed2 <HAL_FDCAN_IRQHandler+0x1f2>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8005d94:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8005d98:	d003      	beq.n	8005da2 <HAL_FDCAN_IRQHandler+0xc2>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8005d9a:	f41b 3f80 	tst.w	fp, #65536	@ 0x10000
 8005d9e:	f040 80a3 	bne.w	8005ee8 <HAL_FDCAN_IRQHandler+0x208>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005da2:	f415 2f80 	tst.w	r5, #262144	@ 0x40000
 8005da6:	d003      	beq.n	8005db0 <HAL_FDCAN_IRQHandler+0xd0>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005da8:	f41b 2f80 	tst.w	fp, #262144	@ 0x40000
 8005dac:	f040 80a7 	bne.w	8005efe <HAL_FDCAN_IRQHandler+0x21e>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8005db0:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
 8005db4:	d00f      	beq.n	8005dd6 <HAL_FDCAN_IRQHandler+0xf6>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8005db6:	f41b 3f00 	tst.w	fp, #131072	@ 0x20000
 8005dba:	d00c      	beq.n	8005dd6 <HAL_FDCAN_IRQHandler+0xf6>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005dbc:	6823      	ldr	r3, [r4, #0]
 8005dbe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005dc2:	651a      	str	r2, [r3, #80]	@ 0x50
 8005dc4:	4b79      	ldr	r3, [pc, #484]	@ (8005fac <HAL_FDCAN_IRQHandler+0x2cc>)
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	611a      	str	r2, [r3, #16]
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005dca:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8005dce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dd2:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
  if (ErrorStatusITs != 0U)
 8005dd6:	2f00      	cmp	r7, #0
 8005dd8:	f040 809c 	bne.w	8005f14 <HAL_FDCAN_IRQHandler+0x234>
  if (Errors != 0U)
 8005ddc:	b14e      	cbz	r6, 8005df2 <HAL_FDCAN_IRQHandler+0x112>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005dde:	6823      	ldr	r3, [r4, #0]
 8005de0:	651e      	str	r6, [r3, #80]	@ 0x50
 8005de2:	0fb2      	lsrs	r2, r6, #30
 8005de4:	4b71      	ldr	r3, [pc, #452]	@ (8005fac <HAL_FDCAN_IRQHandler+0x2cc>)
 8005de6:	611a      	str	r2, [r3, #16]
    hfdcan->ErrorCode |= Errors;
 8005de8:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8005dec:	4333      	orrs	r3, r6
 8005dee:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
  if (hfdcan->Instance == FDCAN1)
 8005df2:	6822      	ldr	r2, [r4, #0]
 8005df4:	4b6e      	ldr	r3, [pc, #440]	@ (8005fb0 <HAL_FDCAN_IRQHandler+0x2d0>)
 8005df6:	429a      	cmp	r2, r3
 8005df8:	f000 8096 	beq.w	8005f28 <HAL_FDCAN_IRQHandler+0x248>
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005dfc:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	f040 80f7 	bne.w	8005ff4 <HAL_FDCAN_IRQHandler+0x314>
}
 8005e06:	b003      	add	sp, #12
 8005e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005e0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005e10:	651a      	str	r2, [r3, #80]	@ 0x50
 8005e12:	4b66      	ldr	r3, [pc, #408]	@ (8005fac <HAL_FDCAN_IRQHandler+0x2cc>)
 8005e14:	2200      	movs	r2, #0
 8005e16:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005e18:	f7ff ff5b 	bl	8005cd2 <HAL_FDCAN_HighPriorityMessageCallback>
 8005e1c:	e791      	b.n	8005d42 <HAL_FDCAN_IRQHandler+0x62>
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005e1e:	6823      	ldr	r3, [r4, #0]
 8005e20:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005e24:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005e28:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8005e2c:	6518      	str	r0, [r3, #80]	@ 0x50
 8005e2e:	4b5f      	ldr	r3, [pc, #380]	@ (8005fac <HAL_FDCAN_IRQHandler+0x2cc>)
 8005e30:	2000      	movs	r0, #0
 8005e32:	6118      	str	r0, [r3, #16]
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005e34:	4011      	ands	r1, r2
 8005e36:	4620      	mov	r0, r4
 8005e38:	f7ff ff47 	bl	8005cca <HAL_FDCAN_TxBufferAbortCallback>
 8005e3c:	e787      	b.n	8005d4e <HAL_FDCAN_IRQHandler+0x6e>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8005e3e:	6823      	ldr	r3, [r4, #0]
 8005e40:	2200      	movs	r2, #0
 8005e42:	651a      	str	r2, [r3, #80]	@ 0x50
 8005e44:	9901      	ldr	r1, [sp, #4]
 8005e46:	0f8a      	lsrs	r2, r1, #30
 8005e48:	4b58      	ldr	r3, [pc, #352]	@ (8005fac <HAL_FDCAN_IRQHandler+0x2cc>)
 8005e4a:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8005e4c:	4620      	mov	r0, r4
 8005e4e:	f7ff ff37 	bl	8005cc0 <HAL_FDCAN_ClockCalibrationCallback>
 8005e52:	e77f      	b.n	8005d54 <HAL_FDCAN_IRQHandler+0x74>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005e54:	6823      	ldr	r3, [r4, #0]
 8005e56:	f8c3 a050 	str.w	sl, [r3, #80]	@ 0x50
 8005e5a:	ea4f 729a 	mov.w	r2, sl, lsr #30
 8005e5e:	4b53      	ldr	r3, [pc, #332]	@ (8005fac <HAL_FDCAN_IRQHandler+0x2cc>)
 8005e60:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005e62:	4651      	mov	r1, sl
 8005e64:	4620      	mov	r0, r4
 8005e66:	f7ff ff2c 	bl	8005cc2 <HAL_FDCAN_TxEventFifoCallback>
 8005e6a:	e776      	b.n	8005d5a <HAL_FDCAN_IRQHandler+0x7a>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005e6c:	6823      	ldr	r3, [r4, #0]
 8005e6e:	f8c3 9050 	str.w	r9, [r3, #80]	@ 0x50
 8005e72:	ea4f 7299 	mov.w	r2, r9, lsr #30
 8005e76:	4b4d      	ldr	r3, [pc, #308]	@ (8005fac <HAL_FDCAN_IRQHandler+0x2cc>)
 8005e78:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005e7a:	4649      	mov	r1, r9
 8005e7c:	4620      	mov	r0, r4
 8005e7e:	f7fa fdd7 	bl	8000a30 <HAL_FDCAN_RxFifo0Callback>
 8005e82:	e76e      	b.n	8005d62 <HAL_FDCAN_IRQHandler+0x82>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005e84:	6823      	ldr	r3, [r4, #0]
 8005e86:	f8c3 8050 	str.w	r8, [r3, #80]	@ 0x50
 8005e8a:	ea4f 7298 	mov.w	r2, r8, lsr #30
 8005e8e:	4b47      	ldr	r3, [pc, #284]	@ (8005fac <HAL_FDCAN_IRQHandler+0x2cc>)
 8005e90:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005e92:	4641      	mov	r1, r8
 8005e94:	4620      	mov	r0, r4
 8005e96:	f7ff ff15 	bl	8005cc4 <HAL_FDCAN_RxFifo1Callback>
 8005e9a:	e766      	b.n	8005d6a <HAL_FDCAN_IRQHandler+0x8a>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005e9c:	6823      	ldr	r3, [r4, #0]
 8005e9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005ea2:	651a      	str	r2, [r3, #80]	@ 0x50
 8005ea4:	4b41      	ldr	r3, [pc, #260]	@ (8005fac <HAL_FDCAN_IRQHandler+0x2cc>)
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005eaa:	4620      	mov	r0, r4
 8005eac:	f7ff ff0b 	bl	8005cc6 <HAL_FDCAN_TxFifoEmptyCallback>
 8005eb0:	e762      	b.n	8005d78 <HAL_FDCAN_IRQHandler+0x98>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005eb2:	6823      	ldr	r3, [r4, #0]
 8005eb4:	f8d3 10d8 	ldr.w	r1, [r3, #216]	@ 0xd8
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005eb8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005ebc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8005ec0:	6518      	str	r0, [r3, #80]	@ 0x50
 8005ec2:	4b3a      	ldr	r3, [pc, #232]	@ (8005fac <HAL_FDCAN_IRQHandler+0x2cc>)
 8005ec4:	2000      	movs	r0, #0
 8005ec6:	6118      	str	r0, [r3, #16]
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005ec8:	4011      	ands	r1, r2
 8005eca:	4620      	mov	r0, r4
 8005ecc:	f7ff fefc 	bl	8005cc8 <HAL_FDCAN_TxBufferCompleteCallback>
 8005ed0:	e759      	b.n	8005d86 <HAL_FDCAN_IRQHandler+0xa6>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8005ed2:	6823      	ldr	r3, [r4, #0]
 8005ed4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005ed8:	651a      	str	r2, [r3, #80]	@ 0x50
 8005eda:	4b34      	ldr	r3, [pc, #208]	@ (8005fac <HAL_FDCAN_IRQHandler+0x2cc>)
 8005edc:	2200      	movs	r2, #0
 8005ede:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8005ee0:	4620      	mov	r0, r4
 8005ee2:	f7ff fef3 	bl	8005ccc <HAL_FDCAN_RxBufferNewMessageCallback>
 8005ee6:	e755      	b.n	8005d94 <HAL_FDCAN_IRQHandler+0xb4>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005ee8:	6823      	ldr	r3, [r4, #0]
 8005eea:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005eee:	651a      	str	r2, [r3, #80]	@ 0x50
 8005ef0:	4b2e      	ldr	r3, [pc, #184]	@ (8005fac <HAL_FDCAN_IRQHandler+0x2cc>)
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005ef6:	4620      	mov	r0, r4
 8005ef8:	f7ff fee9 	bl	8005cce <HAL_FDCAN_TimestampWraparoundCallback>
 8005efc:	e751      	b.n	8005da2 <HAL_FDCAN_IRQHandler+0xc2>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005efe:	6823      	ldr	r3, [r4, #0]
 8005f00:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005f04:	651a      	str	r2, [r3, #80]	@ 0x50
 8005f06:	4b29      	ldr	r3, [pc, #164]	@ (8005fac <HAL_FDCAN_IRQHandler+0x2cc>)
 8005f08:	2200      	movs	r2, #0
 8005f0a:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005f0c:	4620      	mov	r0, r4
 8005f0e:	f7ff fedf 	bl	8005cd0 <HAL_FDCAN_TimeoutOccurredCallback>
 8005f12:	e74d      	b.n	8005db0 <HAL_FDCAN_IRQHandler+0xd0>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005f14:	6823      	ldr	r3, [r4, #0]
 8005f16:	651f      	str	r7, [r3, #80]	@ 0x50
 8005f18:	0fba      	lsrs	r2, r7, #30
 8005f1a:	4b24      	ldr	r3, [pc, #144]	@ (8005fac <HAL_FDCAN_IRQHandler+0x2cc>)
 8005f1c:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005f1e:	4639      	mov	r1, r7
 8005f20:	4620      	mov	r0, r4
 8005f22:	f7ff fed7 	bl	8005cd4 <HAL_FDCAN_ErrorStatusCallback>
 8005f26:	e759      	b.n	8005ddc <HAL_FDCAN_IRQHandler+0xfc>
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8005f28:	6863      	ldr	r3, [r4, #4]
 8005f2a:	689a      	ldr	r2, [r3, #8]
 8005f2c:	f012 0f03 	tst.w	r2, #3
 8005f30:	f43f af64 	beq.w	8005dfc <HAL_FDCAN_IRQHandler+0x11c>
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8005f34:	6a19      	ldr	r1, [r3, #32]
 8005f36:	f001 010f 	and.w	r1, r1, #15
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8005f3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8005f3c:	6a18      	ldr	r0, [r3, #32]
 8005f3e:	f000 0830 	and.w	r8, r0, #48	@ 0x30
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8005f42:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8005f44:	ea08 0800 	and.w	r8, r8, r0
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8005f48:	6a1f      	ldr	r7, [r3, #32]
 8005f4a:	f407 77c0 	and.w	r7, r7, #384	@ 0x180
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8005f4e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8005f50:	4007      	ands	r7, r0
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8005f52:	6a1e      	ldr	r6, [r3, #32]
 8005f54:	f406 46fc 	and.w	r6, r6, #32256	@ 0x7e00
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8005f58:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8005f5a:	4006      	ands	r6, r0
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8005f5c:	6a1d      	ldr	r5, [r3, #32]
 8005f5e:	f405 25f0 	and.w	r5, r5, #491520	@ 0x78000
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8005f62:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8005f64:	4005      	ands	r5, r0
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8005f66:	f8d3 9024 	ldr.w	r9, [r3, #36]	@ 0x24
      itflagTTIR = hfdcan->ttcan->TTIR;
 8005f6a:	f8d3 a020 	ldr.w	sl, [r3, #32]
      if (TTSchedSyncITs != 0U)
 8005f6e:	4011      	ands	r1, r2
 8005f70:	d120      	bne.n	8005fb4 <HAL_FDCAN_IRQHandler+0x2d4>
      if (TTTimeMarkITs != 0U)
 8005f72:	f1b8 0f00 	cmp.w	r8, #0
 8005f76:	d122      	bne.n	8005fbe <HAL_FDCAN_IRQHandler+0x2de>
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8005f78:	f019 0f40 	tst.w	r9, #64	@ 0x40
 8005f7c:	d002      	beq.n	8005f84 <HAL_FDCAN_IRQHandler+0x2a4>
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8005f7e:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8005f82:	d124      	bne.n	8005fce <HAL_FDCAN_IRQHandler+0x2ee>
      if (TTGlobTimeITs != 0U)
 8005f84:	bb7f      	cbnz	r7, 8005fe6 <HAL_FDCAN_IRQHandler+0x306>
      if (TTDistErrors != 0U)
 8005f86:	b136      	cbz	r6, 8005f96 <HAL_FDCAN_IRQHandler+0x2b6>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8005f88:	6863      	ldr	r3, [r4, #4]
 8005f8a:	621e      	str	r6, [r3, #32]
        hfdcan->ErrorCode |= TTDistErrors;
 8005f8c:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8005f90:	4333      	orrs	r3, r6
 8005f92:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
      if (TTFatalErrors != 0U)
 8005f96:	2d00      	cmp	r5, #0
 8005f98:	f43f af30 	beq.w	8005dfc <HAL_FDCAN_IRQHandler+0x11c>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8005f9c:	6863      	ldr	r3, [r4, #4]
 8005f9e:	621d      	str	r5, [r3, #32]
        hfdcan->ErrorCode |= TTFatalErrors;
 8005fa0:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8005fa4:	432b      	orrs	r3, r5
 8005fa6:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 8005faa:	e727      	b.n	8005dfc <HAL_FDCAN_IRQHandler+0x11c>
 8005fac:	4000a800 	.word	0x4000a800
 8005fb0:	4000a000 	.word	0x4000a000
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8005fb4:	6219      	str	r1, [r3, #32]
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8005fb6:	4620      	mov	r0, r4
 8005fb8:	f7ff fe8d 	bl	8005cd6 <HAL_FDCAN_TT_ScheduleSyncCallback>
 8005fbc:	e7d9      	b.n	8005f72 <HAL_FDCAN_IRQHandler+0x292>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8005fbe:	6863      	ldr	r3, [r4, #4]
 8005fc0:	f8c3 8020 	str.w	r8, [r3, #32]
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8005fc4:	4641      	mov	r1, r8
 8005fc6:	4620      	mov	r0, r4
 8005fc8:	f7ff fe86 	bl	8005cd8 <HAL_FDCAN_TT_TimeMarkCallback>
 8005fcc:	e7d4      	b.n	8005f78 <HAL_FDCAN_IRQHandler+0x298>
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8005fce:	6863      	ldr	r3, [r4, #4]
 8005fd0:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8005fd2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8005fd4:	2040      	movs	r0, #64	@ 0x40
 8005fd6:	6218      	str	r0, [r3, #32]
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8005fd8:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8005fdc:	0c09      	lsrs	r1, r1, #16
 8005fde:	4620      	mov	r0, r4
 8005fe0:	f7ff fe7b 	bl	8005cda <HAL_FDCAN_TT_StopWatchCallback>
 8005fe4:	e7ce      	b.n	8005f84 <HAL_FDCAN_IRQHandler+0x2a4>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8005fe6:	6863      	ldr	r3, [r4, #4]
 8005fe8:	621f      	str	r7, [r3, #32]
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8005fea:	4639      	mov	r1, r7
 8005fec:	4620      	mov	r0, r4
 8005fee:	f7ff fe75 	bl	8005cdc <HAL_FDCAN_TT_GlobalTimeCallback>
 8005ff2:	e7c8      	b.n	8005f86 <HAL_FDCAN_IRQHandler+0x2a6>
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005ff4:	4620      	mov	r0, r4
 8005ff6:	f7fa fb6b 	bl	80006d0 <HAL_FDCAN_ErrorCallback>
}
 8005ffa:	e704      	b.n	8005e06 <HAL_FDCAN_IRQHandler+0x126>

08005ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ffe:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8006000:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006002:	e06b      	b.n	80060dc <HAL_GPIO_Init+0xe0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006004:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006006:	005e      	lsls	r6, r3, #1
 8006008:	2403      	movs	r4, #3
 800600a:	40b4      	lsls	r4, r6
 800600c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006010:	68cc      	ldr	r4, [r1, #12]
 8006012:	40b4      	lsls	r4, r6
 8006014:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8006016:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006018:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800601a:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800601e:	684c      	ldr	r4, [r1, #4]
 8006020:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8006024:	409c      	lsls	r4, r3
 8006026:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8006028:	6044      	str	r4, [r0, #4]
 800602a:	e069      	b.n	8006100 <HAL_GPIO_Init+0x104>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800602c:	08dd      	lsrs	r5, r3, #3
 800602e:	3508      	adds	r5, #8
 8006030:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006034:	f003 0c07 	and.w	ip, r3, #7
 8006038:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800603c:	f04f 0e0f 	mov.w	lr, #15
 8006040:	fa0e fe0c 	lsl.w	lr, lr, ip
 8006044:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006048:	690c      	ldr	r4, [r1, #16]
 800604a:	fa04 f40c 	lsl.w	r4, r4, ip
 800604e:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8006052:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8006056:	e06b      	b.n	8006130 <HAL_GPIO_Init+0x134>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006058:	2409      	movs	r4, #9
 800605a:	e000      	b.n	800605e <HAL_GPIO_Init+0x62>
 800605c:	2400      	movs	r4, #0
 800605e:	fa04 f40e 	lsl.w	r4, r4, lr
 8006062:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006064:	f10c 0c02 	add.w	ip, ip, #2
 8006068:	4d69      	ldr	r5, [pc, #420]	@ (8006210 <HAL_GPIO_Init+0x214>)
 800606a:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800606e:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
 8006072:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8006074:	43d4      	mvns	r4, r2
 8006076:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800607a:	684f      	ldr	r7, [r1, #4]
 800607c:	f417 1f80 	tst.w	r7, #1048576	@ 0x100000
 8006080:	d001      	beq.n	8006086 <HAL_GPIO_Init+0x8a>
        {
          temp |= iocurrent;
 8006082:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8006086:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 800608a:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 800608c:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 800608e:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006092:	684f      	ldr	r7, [r1, #4]
 8006094:	f417 1f00 	tst.w	r7, #2097152	@ 0x200000
 8006098:	d001      	beq.n	800609e <HAL_GPIO_Init+0xa2>
        {
          temp |= iocurrent;
 800609a:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 800609e:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 80060a2:	606e      	str	r6, [r5, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80060a4:	f8d5 5084 	ldr.w	r5, [r5, #132]	@ 0x84
        temp &= ~(iocurrent);
 80060a8:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80060ac:	684f      	ldr	r7, [r1, #4]
 80060ae:	f417 3f00 	tst.w	r7, #131072	@ 0x20000
 80060b2:	d001      	beq.n	80060b8 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 80060b4:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80060b8:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 80060bc:	f8c5 6084 	str.w	r6, [r5, #132]	@ 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80060c0:	f8d5 5080 	ldr.w	r5, [r5, #128]	@ 0x80
        temp &= ~(iocurrent);
 80060c4:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80060c6:	684e      	ldr	r6, [r1, #4]
 80060c8:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
 80060cc:	d001      	beq.n	80060d2 <HAL_GPIO_Init+0xd6>
        {
          temp |= iocurrent;
 80060ce:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80060d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80060d6:	f8c2 4080 	str.w	r4, [r2, #128]	@ 0x80
      }
    }

    position++;
 80060da:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80060dc:	680a      	ldr	r2, [r1, #0]
 80060de:	fa32 f403 	lsrs.w	r4, r2, r3
 80060e2:	f000 8092 	beq.w	800620a <HAL_GPIO_Init+0x20e>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80060e6:	f04f 0c01 	mov.w	ip, #1
 80060ea:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00U)
 80060ee:	ea1c 0202 	ands.w	r2, ip, r2
 80060f2:	d0f2      	beq.n	80060da <HAL_GPIO_Init+0xde>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80060f4:	684c      	ldr	r4, [r1, #4]
 80060f6:	f004 0403 	and.w	r4, r4, #3
 80060fa:	3c01      	subs	r4, #1
 80060fc:	2c01      	cmp	r4, #1
 80060fe:	d981      	bls.n	8006004 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006100:	684c      	ldr	r4, [r1, #4]
 8006102:	f004 0403 	and.w	r4, r4, #3
 8006106:	2c03      	cmp	r4, #3
 8006108:	d00c      	beq.n	8006124 <HAL_GPIO_Init+0x128>
      temp = GPIOx->PUPDR;
 800610a:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800610c:	005d      	lsls	r5, r3, #1
 800610e:	f04f 0c03 	mov.w	ip, #3
 8006112:	fa0c fc05 	lsl.w	ip, ip, r5
 8006116:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800611a:	688c      	ldr	r4, [r1, #8]
 800611c:	40ac      	lsls	r4, r5
 800611e:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->PUPDR = temp;
 8006122:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006124:	684c      	ldr	r4, [r1, #4]
 8006126:	f004 0403 	and.w	r4, r4, #3
 800612a:	2c02      	cmp	r4, #2
 800612c:	f43f af7e 	beq.w	800602c <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 8006130:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006132:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8006136:	f04f 0c03 	mov.w	ip, #3
 800613a:	fa0c fc0e 	lsl.w	ip, ip, lr
 800613e:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006142:	684c      	ldr	r4, [r1, #4]
 8006144:	f004 0403 	and.w	r4, r4, #3
 8006148:	fa04 f40e 	lsl.w	r4, r4, lr
 800614c:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8006150:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006152:	684c      	ldr	r4, [r1, #4]
 8006154:	f414 3f40 	tst.w	r4, #196608	@ 0x30000
 8006158:	d0bf      	beq.n	80060da <HAL_GPIO_Init+0xde>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800615a:	4c2e      	ldr	r4, [pc, #184]	@ (8006214 <HAL_GPIO_Init+0x218>)
 800615c:	f8d4 50f4 	ldr.w	r5, [r4, #244]	@ 0xf4
 8006160:	f045 0502 	orr.w	r5, r5, #2
 8006164:	f8c4 50f4 	str.w	r5, [r4, #244]	@ 0xf4
 8006168:	f8d4 40f4 	ldr.w	r4, [r4, #244]	@ 0xf4
 800616c:	f004 0402 	and.w	r4, r4, #2
 8006170:	9401      	str	r4, [sp, #4]
 8006172:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8006174:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8006178:	f10c 0502 	add.w	r5, ip, #2
 800617c:	4c24      	ldr	r4, [pc, #144]	@ (8006210 <HAL_GPIO_Init+0x214>)
 800617e:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006182:	f003 0e03 	and.w	lr, r3, #3
 8006186:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800618a:	240f      	movs	r4, #15
 800618c:	fa04 f40e 	lsl.w	r4, r4, lr
 8006190:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006194:	4c20      	ldr	r4, [pc, #128]	@ (8006218 <HAL_GPIO_Init+0x21c>)
 8006196:	42a0      	cmp	r0, r4
 8006198:	f43f af60 	beq.w	800605c <HAL_GPIO_Init+0x60>
 800619c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80061a0:	42a0      	cmp	r0, r4
 80061a2:	d022      	beq.n	80061ea <HAL_GPIO_Init+0x1ee>
 80061a4:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80061a8:	42a0      	cmp	r0, r4
 80061aa:	d020      	beq.n	80061ee <HAL_GPIO_Init+0x1f2>
 80061ac:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80061b0:	42a0      	cmp	r0, r4
 80061b2:	d01e      	beq.n	80061f2 <HAL_GPIO_Init+0x1f6>
 80061b4:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80061b8:	42a0      	cmp	r0, r4
 80061ba:	d01c      	beq.n	80061f6 <HAL_GPIO_Init+0x1fa>
 80061bc:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80061c0:	42a0      	cmp	r0, r4
 80061c2:	d01a      	beq.n	80061fa <HAL_GPIO_Init+0x1fe>
 80061c4:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80061c8:	42a0      	cmp	r0, r4
 80061ca:	d018      	beq.n	80061fe <HAL_GPIO_Init+0x202>
 80061cc:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80061d0:	42a0      	cmp	r0, r4
 80061d2:	d016      	beq.n	8006202 <HAL_GPIO_Init+0x206>
 80061d4:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80061d8:	42a0      	cmp	r0, r4
 80061da:	d014      	beq.n	8006206 <HAL_GPIO_Init+0x20a>
 80061dc:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80061e0:	42a0      	cmp	r0, r4
 80061e2:	f43f af39 	beq.w	8006058 <HAL_GPIO_Init+0x5c>
 80061e6:	240a      	movs	r4, #10
 80061e8:	e739      	b.n	800605e <HAL_GPIO_Init+0x62>
 80061ea:	2401      	movs	r4, #1
 80061ec:	e737      	b.n	800605e <HAL_GPIO_Init+0x62>
 80061ee:	2402      	movs	r4, #2
 80061f0:	e735      	b.n	800605e <HAL_GPIO_Init+0x62>
 80061f2:	2403      	movs	r4, #3
 80061f4:	e733      	b.n	800605e <HAL_GPIO_Init+0x62>
 80061f6:	2404      	movs	r4, #4
 80061f8:	e731      	b.n	800605e <HAL_GPIO_Init+0x62>
 80061fa:	2405      	movs	r4, #5
 80061fc:	e72f      	b.n	800605e <HAL_GPIO_Init+0x62>
 80061fe:	2406      	movs	r4, #6
 8006200:	e72d      	b.n	800605e <HAL_GPIO_Init+0x62>
 8006202:	2407      	movs	r4, #7
 8006204:	e72b      	b.n	800605e <HAL_GPIO_Init+0x62>
 8006206:	2408      	movs	r4, #8
 8006208:	e729      	b.n	800605e <HAL_GPIO_Init+0x62>
  }
}
 800620a:	b003      	add	sp, #12
 800620c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800620e:	bf00      	nop
 8006210:	58000400 	.word	0x58000400
 8006214:	58024400 	.word	0x58024400
 8006218:	58020000 	.word	0x58020000

0800621c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800621c:	b10a      	cbz	r2, 8006222 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800621e:	6181      	str	r1, [r0, #24]
 8006220:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006222:	0409      	lsls	r1, r1, #16
 8006224:	6181      	str	r1, [r0, #24]
  }
}
 8006226:	4770      	bx	lr

08006228 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006228:	6803      	ldr	r3, [r0, #0]
 800622a:	699a      	ldr	r2, [r3, #24]
 800622c:	f012 0f02 	tst.w	r2, #2
 8006230:	d001      	beq.n	8006236 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006232:	2200      	movs	r2, #0
 8006234:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006236:	6803      	ldr	r3, [r0, #0]
 8006238:	699a      	ldr	r2, [r3, #24]
 800623a:	f012 0f01 	tst.w	r2, #1
 800623e:	d103      	bne.n	8006248 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006240:	699a      	ldr	r2, [r3, #24]
 8006242:	f042 0201 	orr.w	r2, r2, #1
 8006246:	619a      	str	r2, [r3, #24]
  }
}
 8006248:	4770      	bx	lr

0800624a <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800624a:	b410      	push	{r4}
 800624c:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800624e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8006252:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006256:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006258:	4321      	orrs	r1, r4
 800625a:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800625e:	6802      	ldr	r2, [r0, #0]
 8006260:	6853      	ldr	r3, [r2, #4]
 8006262:	0d64      	lsrs	r4, r4, #21
 8006264:	f404 6480 	and.w	r4, r4, #1024	@ 0x400
 8006268:	f044 747f 	orr.w	r4, r4, #66846720	@ 0x3fc0000
 800626c:	f444 3458 	orr.w	r4, r4, #221184	@ 0x36000
 8006270:	f444 747f 	orr.w	r4, r4, #1020	@ 0x3fc
 8006274:	f044 0403 	orr.w	r4, r4, #3
 8006278:	ea23 0304 	bic.w	r3, r3, r4
 800627c:	430b      	orrs	r3, r1
 800627e:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006280:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006284:	4770      	bx	lr

08006286 <I2C_IsErrorOccurred>:
{
 8006286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800628a:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 800628c:	6803      	ldr	r3, [r0, #0]
 800628e:	699f      	ldr	r7, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006290:	f017 0710 	ands.w	r7, r7, #16
 8006294:	d04e      	beq.n	8006334 <I2C_IsErrorOccurred+0xae>
 8006296:	460e      	mov	r6, r1
 8006298:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800629a:	2210      	movs	r2, #16
 800629c:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800629e:	2500      	movs	r5, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80062a0:	6823      	ldr	r3, [r4, #0]
 80062a2:	6998      	ldr	r0, [r3, #24]
 80062a4:	f010 0f20 	tst.w	r0, #32
 80062a8:	d13d      	bne.n	8006326 <I2C_IsErrorOccurred+0xa0>
 80062aa:	2d00      	cmp	r5, #0
 80062ac:	d13b      	bne.n	8006326 <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 80062ae:	f1b6 3fff 	cmp.w	r6, #4294967295
 80062b2:	d0f5      	beq.n	80062a0 <I2C_IsErrorOccurred+0x1a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80062b4:	f7fc ff26 	bl	8003104 <HAL_GetTick>
 80062b8:	eba0 0008 	sub.w	r0, r0, r8
 80062bc:	42b0      	cmp	r0, r6
 80062be:	d801      	bhi.n	80062c4 <I2C_IsErrorOccurred+0x3e>
 80062c0:	2e00      	cmp	r6, #0
 80062c2:	d1ed      	bne.n	80062a0 <I2C_IsErrorOccurred+0x1a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80062c4:	6821      	ldr	r1, [r4, #0]
 80062c6:	684a      	ldr	r2, [r1, #4]
 80062c8:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
          tmp2 = hi2c->Mode;
 80062cc:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 80062d0:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80062d2:	6988      	ldr	r0, [r1, #24]
 80062d4:	f410 4f00 	tst.w	r0, #32768	@ 0x8000
 80062d8:	d004      	beq.n	80062e4 <I2C_IsErrorOccurred+0x5e>
              (tmp2 != HAL_I2C_MODE_SLAVE))
 80062da:	3b20      	subs	r3, #32
 80062dc:	bf18      	it	ne
 80062de:	2301      	movne	r3, #1
              (tmp1 != I2C_CR2_STOP) && \
 80062e0:	b902      	cbnz	r2, 80062e4 <I2C_IsErrorOccurred+0x5e>
 80062e2:	b9c3      	cbnz	r3, 8006316 <I2C_IsErrorOccurred+0x90>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80062e4:	6823      	ldr	r3, [r4, #0]
 80062e6:	699b      	ldr	r3, [r3, #24]
 80062e8:	f013 0f20 	tst.w	r3, #32
 80062ec:	d1d8      	bne.n	80062a0 <I2C_IsErrorOccurred+0x1a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80062ee:	f7fc ff09 	bl	8003104 <HAL_GetTick>
 80062f2:	eba0 0008 	sub.w	r0, r0, r8
 80062f6:	2819      	cmp	r0, #25
 80062f8:	d9f4      	bls.n	80062e4 <I2C_IsErrorOccurred+0x5e>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062fa:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80062fc:	f043 0320 	orr.w	r3, r3, #32
 8006300:	6463      	str	r3, [r4, #68]	@ 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006302:	2320      	movs	r3, #32
 8006304:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006308:	2300      	movs	r3, #0
 800630a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
              __HAL_UNLOCK(hi2c);
 800630e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
              status = HAL_ERROR;
 8006312:	2501      	movs	r5, #1
 8006314:	e7e6      	b.n	80062e4 <I2C_IsErrorOccurred+0x5e>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006316:	684b      	ldr	r3, [r1, #4]
 8006318:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800631c:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 800631e:	f7fc fef1 	bl	8003104 <HAL_GetTick>
 8006322:	4680      	mov	r8, r0
 8006324:	e7de      	b.n	80062e4 <I2C_IsErrorOccurred+0x5e>
    if (status == HAL_OK)
 8006326:	2d00      	cmp	r5, #0
 8006328:	d140      	bne.n	80063ac <I2C_IsErrorOccurred+0x126>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800632a:	2220      	movs	r2, #32
 800632c:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 800632e:	2704      	movs	r7, #4
    status = HAL_ERROR;
 8006330:	2501      	movs	r5, #1
 8006332:	e000      	b.n	8006336 <I2C_IsErrorOccurred+0xb0>
  HAL_StatusTypeDef status = HAL_OK;
 8006334:	2500      	movs	r5, #0
  itflag = hi2c->Instance->ISR;
 8006336:	6822      	ldr	r2, [r4, #0]
 8006338:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800633a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800633e:	d005      	beq.n	800634c <I2C_IsErrorOccurred+0xc6>
    error_code |= HAL_I2C_ERROR_BERR;
 8006340:	f047 0701 	orr.w	r7, r7, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006344:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006348:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 800634a:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800634c:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8006350:	d006      	beq.n	8006360 <I2C_IsErrorOccurred+0xda>
    error_code |= HAL_I2C_ERROR_OVR;
 8006352:	f047 0708 	orr.w	r7, r7, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006356:	6822      	ldr	r2, [r4, #0]
 8006358:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800635c:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 800635e:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006360:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8006364:	d024      	beq.n	80063b0 <I2C_IsErrorOccurred+0x12a>
    error_code |= HAL_I2C_ERROR_ARLO;
 8006366:	f047 0702 	orr.w	r7, r7, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800636a:	6823      	ldr	r3, [r4, #0]
 800636c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006370:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 8006372:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 8006374:	4620      	mov	r0, r4
 8006376:	f7ff ff57 	bl	8006228 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800637a:	6822      	ldr	r2, [r4, #0]
 800637c:	6853      	ldr	r3, [r2, #4]
 800637e:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8006382:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8006386:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 800638a:	f023 0301 	bic.w	r3, r3, #1
 800638e:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8006390:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8006392:	433b      	orrs	r3, r7
 8006394:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006396:	2320      	movs	r3, #32
 8006398:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800639c:	2300      	movs	r3, #0
 800639e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 80063a2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 80063a6:	4628      	mov	r0, r5
 80063a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    error_code |= HAL_I2C_ERROR_AF;
 80063ac:	2704      	movs	r7, #4
 80063ae:	e7c2      	b.n	8006336 <I2C_IsErrorOccurred+0xb0>
  if (status != HAL_OK)
 80063b0:	2d00      	cmp	r5, #0
 80063b2:	d0f8      	beq.n	80063a6 <I2C_IsErrorOccurred+0x120>
 80063b4:	e7de      	b.n	8006374 <I2C_IsErrorOccurred+0xee>

080063b6 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80063b6:	b570      	push	{r4, r5, r6, lr}
 80063b8:	4604      	mov	r4, r0
 80063ba:	460d      	mov	r5, r1
 80063bc:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80063be:	6823      	ldr	r3, [r4, #0]
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	f013 0f02 	tst.w	r3, #2
 80063c6:	d11d      	bne.n	8006404 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80063c8:	4632      	mov	r2, r6
 80063ca:	4629      	mov	r1, r5
 80063cc:	4620      	mov	r0, r4
 80063ce:	f7ff ff5a 	bl	8006286 <I2C_IsErrorOccurred>
 80063d2:	b9c8      	cbnz	r0, 8006408 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 80063d4:	f1b5 3fff 	cmp.w	r5, #4294967295
 80063d8:	d0f1      	beq.n	80063be <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063da:	f7fc fe93 	bl	8003104 <HAL_GetTick>
 80063de:	1b80      	subs	r0, r0, r6
 80063e0:	42a8      	cmp	r0, r5
 80063e2:	d801      	bhi.n	80063e8 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80063e4:	2d00      	cmp	r5, #0
 80063e6:	d1ea      	bne.n	80063be <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063e8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80063ea:	f043 0320 	orr.w	r3, r3, #32
 80063ee:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80063f0:	2320      	movs	r3, #32
 80063f2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80063f6:	2300      	movs	r3, #0
 80063f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 80063fc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return HAL_ERROR;
 8006400:	2001      	movs	r0, #1
 8006402:	e000      	b.n	8006406 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8006404:	2000      	movs	r0, #0
}
 8006406:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8006408:	2001      	movs	r0, #1
 800640a:	e7fc      	b.n	8006406 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

0800640c <I2C_WaitOnFlagUntilTimeout>:
{
 800640c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006410:	4606      	mov	r6, r0
 8006412:	4688      	mov	r8, r1
 8006414:	4617      	mov	r7, r2
 8006416:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006418:	6834      	ldr	r4, [r6, #0]
 800641a:	69a4      	ldr	r4, [r4, #24]
 800641c:	ea38 0404 	bics.w	r4, r8, r4
 8006420:	bf0c      	ite	eq
 8006422:	2401      	moveq	r4, #1
 8006424:	2400      	movne	r4, #0
 8006426:	42bc      	cmp	r4, r7
 8006428:	d118      	bne.n	800645c <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800642a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800642e:	d0f3      	beq.n	8006418 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006430:	f7fc fe68 	bl	8003104 <HAL_GetTick>
 8006434:	9b06      	ldr	r3, [sp, #24]
 8006436:	1ac0      	subs	r0, r0, r3
 8006438:	42a8      	cmp	r0, r5
 800643a:	d801      	bhi.n	8006440 <I2C_WaitOnFlagUntilTimeout+0x34>
 800643c:	2d00      	cmp	r5, #0
 800643e:	d1eb      	bne.n	8006418 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006440:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 8006442:	f043 0320 	orr.w	r3, r3, #32
 8006446:	6473      	str	r3, [r6, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006448:	2320      	movs	r3, #32
 800644a:	f886 3041 	strb.w	r3, [r6, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800644e:	2300      	movs	r3, #0
 8006450:	f886 3042 	strb.w	r3, [r6, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 8006454:	f886 3040 	strb.w	r3, [r6, #64]	@ 0x40
        return HAL_ERROR;
 8006458:	2001      	movs	r0, #1
 800645a:	e000      	b.n	800645e <I2C_WaitOnFlagUntilTimeout+0x52>
  return HAL_OK;
 800645c:	2000      	movs	r0, #0
}
 800645e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006464 <I2C_RequestMemoryWrite>:
{
 8006464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006468:	b082      	sub	sp, #8
 800646a:	4604      	mov	r4, r0
 800646c:	4690      	mov	r8, r2
 800646e:	461d      	mov	r5, r3
 8006470:	9e08      	ldr	r6, [sp, #32]
 8006472:	9f09      	ldr	r7, [sp, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006474:	4b19      	ldr	r3, [pc, #100]	@ (80064dc <I2C_RequestMemoryWrite+0x78>)
 8006476:	9300      	str	r3, [sp, #0]
 8006478:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800647c:	b2ea      	uxtb	r2, r5
 800647e:	f7ff fee4 	bl	800624a <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006482:	463a      	mov	r2, r7
 8006484:	4631      	mov	r1, r6
 8006486:	4620      	mov	r0, r4
 8006488:	f7ff ff95 	bl	80063b6 <I2C_WaitOnTXISFlagUntilTimeout>
 800648c:	b9f8      	cbnz	r0, 80064ce <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800648e:	2d01      	cmp	r5, #1
 8006490:	d10e      	bne.n	80064b0 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006492:	6823      	ldr	r3, [r4, #0]
 8006494:	fa5f f288 	uxtb.w	r2, r8
 8006498:	629a      	str	r2, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800649a:	9700      	str	r7, [sp, #0]
 800649c:	4633      	mov	r3, r6
 800649e:	2200      	movs	r2, #0
 80064a0:	2180      	movs	r1, #128	@ 0x80
 80064a2:	4620      	mov	r0, r4
 80064a4:	f7ff ffb2 	bl	800640c <I2C_WaitOnFlagUntilTimeout>
 80064a8:	b9a8      	cbnz	r0, 80064d6 <I2C_RequestMemoryWrite+0x72>
}
 80064aa:	b002      	add	sp, #8
 80064ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80064b0:	6823      	ldr	r3, [r4, #0]
 80064b2:	ea4f 2218 	mov.w	r2, r8, lsr #8
 80064b6:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064b8:	463a      	mov	r2, r7
 80064ba:	4631      	mov	r1, r6
 80064bc:	4620      	mov	r0, r4
 80064be:	f7ff ff7a 	bl	80063b6 <I2C_WaitOnTXISFlagUntilTimeout>
 80064c2:	b930      	cbnz	r0, 80064d2 <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80064c4:	6823      	ldr	r3, [r4, #0]
 80064c6:	fa5f f288 	uxtb.w	r2, r8
 80064ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80064cc:	e7e5      	b.n	800649a <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 80064ce:	2001      	movs	r0, #1
 80064d0:	e7eb      	b.n	80064aa <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 80064d2:	2001      	movs	r0, #1
 80064d4:	e7e9      	b.n	80064aa <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 80064d6:	2001      	movs	r0, #1
 80064d8:	e7e7      	b.n	80064aa <I2C_RequestMemoryWrite+0x46>
 80064da:	bf00      	nop
 80064dc:	80002000 	.word	0x80002000

080064e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80064e0:	b570      	push	{r4, r5, r6, lr}
 80064e2:	4605      	mov	r5, r0
 80064e4:	460c      	mov	r4, r1
 80064e6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80064e8:	682b      	ldr	r3, [r5, #0]
 80064ea:	699b      	ldr	r3, [r3, #24]
 80064ec:	f013 0f20 	tst.w	r3, #32
 80064f0:	d11a      	bne.n	8006528 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80064f2:	4632      	mov	r2, r6
 80064f4:	4621      	mov	r1, r4
 80064f6:	4628      	mov	r0, r5
 80064f8:	f7ff fec5 	bl	8006286 <I2C_IsErrorOccurred>
 80064fc:	b9b0      	cbnz	r0, 800652c <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064fe:	f7fc fe01 	bl	8003104 <HAL_GetTick>
 8006502:	1b80      	subs	r0, r0, r6
 8006504:	42a0      	cmp	r0, r4
 8006506:	d801      	bhi.n	800650c <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8006508:	2c00      	cmp	r4, #0
 800650a:	d1ed      	bne.n	80064e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800650c:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800650e:	f043 0320 	orr.w	r3, r3, #32
 8006512:	646b      	str	r3, [r5, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006514:	2320      	movs	r3, #32
 8006516:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800651a:	2300      	movs	r3, #0
 800651c:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006520:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
      return HAL_ERROR;
 8006524:	2001      	movs	r0, #1
}
 8006526:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8006528:	2000      	movs	r0, #0
 800652a:	e7fc      	b.n	8006526 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 800652c:	2001      	movs	r0, #1
 800652e:	e7fa      	b.n	8006526 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08006530 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8006530:	2800      	cmp	r0, #0
 8006532:	d057      	beq.n	80065e4 <HAL_I2C_Init+0xb4>
{
 8006534:	b510      	push	{r4, lr}
 8006536:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006538:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800653c:	2b00      	cmp	r3, #0
 800653e:	d041      	beq.n	80065c4 <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006540:	2324      	movs	r3, #36	@ 0x24
 8006542:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8006546:	6822      	ldr	r2, [r4, #0]
 8006548:	6813      	ldr	r3, [r2, #0]
 800654a:	f023 0301 	bic.w	r3, r3, #1
 800654e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006550:	6863      	ldr	r3, [r4, #4]
 8006552:	6822      	ldr	r2, [r4, #0]
 8006554:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8006558:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800655a:	6822      	ldr	r2, [r4, #0]
 800655c:	6893      	ldr	r3, [r2, #8]
 800655e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006562:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006564:	68e3      	ldr	r3, [r4, #12]
 8006566:	2b01      	cmp	r3, #1
 8006568:	d031      	beq.n	80065ce <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800656a:	68a3      	ldr	r3, [r4, #8]
 800656c:	6822      	ldr	r2, [r4, #0]
 800656e:	f443 4304 	orr.w	r3, r3, #33792	@ 0x8400
 8006572:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006574:	68e3      	ldr	r3, [r4, #12]
 8006576:	2b02      	cmp	r3, #2
 8006578:	d02f      	beq.n	80065da <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800657a:	6822      	ldr	r2, [r4, #0]
 800657c:	6851      	ldr	r1, [r2, #4]
 800657e:	4b1a      	ldr	r3, [pc, #104]	@ (80065e8 <HAL_I2C_Init+0xb8>)
 8006580:	430b      	orrs	r3, r1
 8006582:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006584:	6822      	ldr	r2, [r4, #0]
 8006586:	68d3      	ldr	r3, [r2, #12]
 8006588:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800658c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800658e:	6923      	ldr	r3, [r4, #16]
 8006590:	6962      	ldr	r2, [r4, #20]
 8006592:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006594:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006596:	6822      	ldr	r2, [r4, #0]
 8006598:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800659c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800659e:	69e3      	ldr	r3, [r4, #28]
 80065a0:	6a21      	ldr	r1, [r4, #32]
 80065a2:	6822      	ldr	r2, [r4, #0]
 80065a4:	430b      	orrs	r3, r1
 80065a6:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 80065a8:	6822      	ldr	r2, [r4, #0]
 80065aa:	6813      	ldr	r3, [r2, #0]
 80065ac:	f043 0301 	orr.w	r3, r3, #1
 80065b0:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065b2:	2000      	movs	r0, #0
 80065b4:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80065b6:	2320      	movs	r3, #32
 80065b8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80065bc:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065be:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 80065c2:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80065c4:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 80065c8:	f7fb fe0a 	bl	80021e0 <HAL_I2C_MspInit>
 80065cc:	e7b8      	b.n	8006540 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80065ce:	68a3      	ldr	r3, [r4, #8]
 80065d0:	6822      	ldr	r2, [r4, #0]
 80065d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065d6:	6093      	str	r3, [r2, #8]
 80065d8:	e7cc      	b.n	8006574 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80065da:	6823      	ldr	r3, [r4, #0]
 80065dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80065e0:	605a      	str	r2, [r3, #4]
 80065e2:	e7ca      	b.n	800657a <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 80065e4:	2001      	movs	r0, #1
}
 80065e6:	4770      	bx	lr
 80065e8:	02008000 	.word	0x02008000

080065ec <HAL_I2C_Mem_Write>:
{
 80065ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065f0:	b083      	sub	sp, #12
 80065f2:	460d      	mov	r5, r1
 80065f4:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 80065f8:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80065fa:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 80065fe:	b2c9      	uxtb	r1, r1
 8006600:	2920      	cmp	r1, #32
 8006602:	f040 80bc 	bne.w	800677e <HAL_I2C_Mem_Write+0x192>
 8006606:	4604      	mov	r4, r0
 8006608:	4690      	mov	r8, r2
 800660a:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 800660c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800660e:	f1ba 0f00 	cmp.w	sl, #0
 8006612:	bf18      	it	ne
 8006614:	2b00      	cmpne	r3, #0
 8006616:	d016      	beq.n	8006646 <HAL_I2C_Mem_Write+0x5a>
    __HAL_LOCK(hi2c);
 8006618:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800661c:	2b01      	cmp	r3, #1
 800661e:	f000 80b2 	beq.w	8006786 <HAL_I2C_Mem_Write+0x19a>
 8006622:	f04f 0b01 	mov.w	fp, #1
 8006626:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800662a:	f7fc fd6b 	bl	8003104 <HAL_GetTick>
 800662e:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006630:	9000      	str	r0, [sp, #0]
 8006632:	2319      	movs	r3, #25
 8006634:	465a      	mov	r2, fp
 8006636:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800663a:	4620      	mov	r0, r4
 800663c:	f7ff fee6 	bl	800640c <I2C_WaitOnFlagUntilTimeout>
 8006640:	b130      	cbz	r0, 8006650 <HAL_I2C_Mem_Write+0x64>
      return HAL_ERROR;
 8006642:	2001      	movs	r0, #1
 8006644:	e09c      	b.n	8006780 <HAL_I2C_Mem_Write+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006646:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800664a:	6443      	str	r3, [r0, #68]	@ 0x44
      return  HAL_ERROR;
 800664c:	2001      	movs	r0, #1
 800664e:	e097      	b.n	8006780 <HAL_I2C_Mem_Write+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006650:	2321      	movs	r3, #33	@ 0x21
 8006652:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006656:	2340      	movs	r3, #64	@ 0x40
 8006658:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800665c:	2300      	movs	r3, #0
 800665e:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 8006660:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006662:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006664:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006668:	6363      	str	r3, [r4, #52]	@ 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800666a:	9601      	str	r6, [sp, #4]
 800666c:	9700      	str	r7, [sp, #0]
 800666e:	464b      	mov	r3, r9
 8006670:	4642      	mov	r2, r8
 8006672:	4629      	mov	r1, r5
 8006674:	4620      	mov	r0, r4
 8006676:	f7ff fef5 	bl	8006464 <I2C_RequestMemoryWrite>
 800667a:	b970      	cbnz	r0, 800669a <HAL_I2C_Mem_Write+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800667c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800667e:	b29b      	uxth	r3, r3
 8006680:	2bff      	cmp	r3, #255	@ 0xff
 8006682:	d90f      	bls.n	80066a4 <HAL_I2C_Mem_Write+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006684:	22ff      	movs	r2, #255	@ 0xff
 8006686:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006688:	2300      	movs	r3, #0
 800668a:	9300      	str	r3, [sp, #0]
 800668c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006690:	4629      	mov	r1, r5
 8006692:	4620      	mov	r0, r4
 8006694:	f7ff fdd9 	bl	800624a <I2C_TransferConfig>
 8006698:	e021      	b.n	80066de <HAL_I2C_Mem_Write+0xf2>
      __HAL_UNLOCK(hi2c);
 800669a:	2300      	movs	r3, #0
 800669c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80066a0:	4658      	mov	r0, fp
 80066a2:	e06d      	b.n	8006780 <HAL_I2C_Mem_Write+0x194>
      hi2c->XferSize = hi2c->XferCount;
 80066a4:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80066a6:	b292      	uxth	r2, r2
 80066a8:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80066aa:	2300      	movs	r3, #0
 80066ac:	9300      	str	r3, [sp, #0]
 80066ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80066b2:	b2d2      	uxtb	r2, r2
 80066b4:	4629      	mov	r1, r5
 80066b6:	4620      	mov	r0, r4
 80066b8:	f7ff fdc7 	bl	800624a <I2C_TransferConfig>
 80066bc:	e00f      	b.n	80066de <HAL_I2C_Mem_Write+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 80066be:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80066c0:	b292      	uxth	r2, r2
 80066c2:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80066c4:	2300      	movs	r3, #0
 80066c6:	9300      	str	r3, [sp, #0]
 80066c8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80066cc:	b2d2      	uxtb	r2, r2
 80066ce:	4629      	mov	r1, r5
 80066d0:	4620      	mov	r0, r4
 80066d2:	f7ff fdba 	bl	800624a <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80066d6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80066d8:	b29b      	uxth	r3, r3
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d033      	beq.n	8006746 <HAL_I2C_Mem_Write+0x15a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066de:	4632      	mov	r2, r6
 80066e0:	4639      	mov	r1, r7
 80066e2:	4620      	mov	r0, r4
 80066e4:	f7ff fe67 	bl	80063b6 <I2C_WaitOnTXISFlagUntilTimeout>
 80066e8:	2800      	cmp	r0, #0
 80066ea:	d14e      	bne.n	800678a <HAL_I2C_Mem_Write+0x19e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80066ec:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80066ee:	6823      	ldr	r3, [r4, #0]
 80066f0:	7812      	ldrb	r2, [r2, #0]
 80066f2:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->pBuffPtr++;
 80066f4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80066f6:	3301      	adds	r3, #1
 80066f8:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80066fa:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	3b01      	subs	r3, #1
 8006700:	b29b      	uxth	r3, r3
 8006702:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8006704:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8006706:	3b01      	subs	r3, #1
 8006708:	b29b      	uxth	r3, r3
 800670a:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800670c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800670e:	b292      	uxth	r2, r2
 8006710:	2a00      	cmp	r2, #0
 8006712:	d0e0      	beq.n	80066d6 <HAL_I2C_Mem_Write+0xea>
 8006714:	2b00      	cmp	r3, #0
 8006716:	d1de      	bne.n	80066d6 <HAL_I2C_Mem_Write+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006718:	9600      	str	r6, [sp, #0]
 800671a:	463b      	mov	r3, r7
 800671c:	2200      	movs	r2, #0
 800671e:	2180      	movs	r1, #128	@ 0x80
 8006720:	4620      	mov	r0, r4
 8006722:	f7ff fe73 	bl	800640c <I2C_WaitOnFlagUntilTimeout>
 8006726:	bb90      	cbnz	r0, 800678e <HAL_I2C_Mem_Write+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006728:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800672a:	b29b      	uxth	r3, r3
 800672c:	2bff      	cmp	r3, #255	@ 0xff
 800672e:	d9c6      	bls.n	80066be <HAL_I2C_Mem_Write+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006730:	22ff      	movs	r2, #255	@ 0xff
 8006732:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006734:	2300      	movs	r3, #0
 8006736:	9300      	str	r3, [sp, #0]
 8006738:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800673c:	4629      	mov	r1, r5
 800673e:	4620      	mov	r0, r4
 8006740:	f7ff fd83 	bl	800624a <I2C_TransferConfig>
 8006744:	e7c7      	b.n	80066d6 <HAL_I2C_Mem_Write+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006746:	4632      	mov	r2, r6
 8006748:	4639      	mov	r1, r7
 800674a:	4620      	mov	r0, r4
 800674c:	f7ff fec8 	bl	80064e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006750:	b9f8      	cbnz	r0, 8006792 <HAL_I2C_Mem_Write+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006752:	6823      	ldr	r3, [r4, #0]
 8006754:	2220      	movs	r2, #32
 8006756:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8006758:	6821      	ldr	r1, [r4, #0]
 800675a:	684b      	ldr	r3, [r1, #4]
 800675c:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8006760:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8006764:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8006768:	f023 0301 	bic.w	r3, r3, #1
 800676c:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800676e:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006772:	2300      	movs	r3, #0
 8006774:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8006778:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    return HAL_OK;
 800677c:	e000      	b.n	8006780 <HAL_I2C_Mem_Write+0x194>
    return HAL_BUSY;
 800677e:	2002      	movs	r0, #2
}
 8006780:	b003      	add	sp, #12
 8006782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8006786:	2002      	movs	r0, #2
 8006788:	e7fa      	b.n	8006780 <HAL_I2C_Mem_Write+0x194>
        return HAL_ERROR;
 800678a:	2001      	movs	r0, #1
 800678c:	e7f8      	b.n	8006780 <HAL_I2C_Mem_Write+0x194>
          return HAL_ERROR;
 800678e:	2001      	movs	r0, #1
 8006790:	e7f6      	b.n	8006780 <HAL_I2C_Mem_Write+0x194>
      return HAL_ERROR;
 8006792:	2001      	movs	r0, #1
 8006794:	e7f4      	b.n	8006780 <HAL_I2C_Mem_Write+0x194>
	...

08006798 <HAL_I2C_IsDeviceReady>:
{
 8006798:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800679c:	b085      	sub	sp, #20
 800679e:	461d      	mov	r5, r3
  __IO uint32_t I2C_Trials = 0UL;
 80067a0:	2300      	movs	r3, #0
 80067a2:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80067a4:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	2b20      	cmp	r3, #32
 80067ac:	f040 809c 	bne.w	80068e8 <HAL_I2C_IsDeviceReady+0x150>
 80067b0:	4606      	mov	r6, r0
 80067b2:	4689      	mov	r9, r1
 80067b4:	4690      	mov	r8, r2
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80067b6:	6803      	ldr	r3, [r0, #0]
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80067be:	f040 8095 	bne.w	80068ec <HAL_I2C_IsDeviceReady+0x154>
    __HAL_LOCK(hi2c);
 80067c2:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	f000 8092 	beq.w	80068f0 <HAL_I2C_IsDeviceReady+0x158>
 80067cc:	2301      	movs	r3, #1
 80067ce:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 80067d2:	2324      	movs	r3, #36	@ 0x24
 80067d4:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067d8:	2300      	movs	r3, #0
 80067da:	6443      	str	r3, [r0, #68]	@ 0x44
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80067dc:	68f3      	ldr	r3, [r6, #12]
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d010      	beq.n	8006804 <HAL_I2C_IsDeviceReady+0x6c>
 80067e2:	f3c9 0309 	ubfx	r3, r9, #0, #10
 80067e6:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 80067ea:	6832      	ldr	r2, [r6, #0]
 80067ec:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 80067ee:	f7fc fc89 	bl	8003104 <HAL_GetTick>
 80067f2:	4607      	mov	r7, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80067f4:	6832      	ldr	r2, [r6, #0]
 80067f6:	6993      	ldr	r3, [r2, #24]
 80067f8:	f3c3 1c40 	ubfx	ip, r3, #5, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80067fc:	6993      	ldr	r3, [r2, #24]
 80067fe:	f3c3 1300 	ubfx	r3, r3, #4, #1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006802:	e00b      	b.n	800681c <HAL_I2C_IsDeviceReady+0x84>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8006804:	f3c9 0209 	ubfx	r2, r9, #0, #10
 8006808:	4b3d      	ldr	r3, [pc, #244]	@ (8006900 <HAL_I2C_IsDeviceReady+0x168>)
 800680a:	4313      	orrs	r3, r2
 800680c:	e7ed      	b.n	80067ea <HAL_I2C_IsDeviceReady+0x52>
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800680e:	6833      	ldr	r3, [r6, #0]
 8006810:	699c      	ldr	r4, [r3, #24]
 8006812:	f3c4 1c40 	ubfx	ip, r4, #5, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006816:	699b      	ldr	r3, [r3, #24]
 8006818:	f3c3 1300 	ubfx	r3, r3, #4, #1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800681c:	ea5c 0c03 	orrs.w	ip, ip, r3
 8006820:	d117      	bne.n	8006852 <HAL_I2C_IsDeviceReady+0xba>
        if (Timeout != HAL_MAX_DELAY)
 8006822:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006826:	d0f2      	beq.n	800680e <HAL_I2C_IsDeviceReady+0x76>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006828:	f7fc fc6c 	bl	8003104 <HAL_GetTick>
 800682c:	1bc0      	subs	r0, r0, r7
 800682e:	42a8      	cmp	r0, r5
 8006830:	d801      	bhi.n	8006836 <HAL_I2C_IsDeviceReady+0x9e>
 8006832:	2d00      	cmp	r5, #0
 8006834:	d1eb      	bne.n	800680e <HAL_I2C_IsDeviceReady+0x76>
            hi2c->State = HAL_I2C_STATE_READY;
 8006836:	2320      	movs	r3, #32
 8006838:	f886 3041 	strb.w	r3, [r6, #65]	@ 0x41
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800683c:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 800683e:	f043 0320 	orr.w	r3, r3, #32
 8006842:	6473      	str	r3, [r6, #68]	@ 0x44
            __HAL_UNLOCK(hi2c);
 8006844:	2300      	movs	r3, #0
 8006846:	f886 3040 	strb.w	r3, [r6, #64]	@ 0x40
            return HAL_ERROR;
 800684a:	2001      	movs	r0, #1
}
 800684c:	b005      	add	sp, #20
 800684e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8006852:	6833      	ldr	r3, [r6, #0]
 8006854:	699b      	ldr	r3, [r3, #24]
 8006856:	f013 0f10 	tst.w	r3, #16
 800685a:	d023      	beq.n	80068a4 <HAL_I2C_IsDeviceReady+0x10c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800685c:	9700      	str	r7, [sp, #0]
 800685e:	462b      	mov	r3, r5
 8006860:	2200      	movs	r2, #0
 8006862:	2120      	movs	r1, #32
 8006864:	4630      	mov	r0, r6
 8006866:	f7ff fdd1 	bl	800640c <I2C_WaitOnFlagUntilTimeout>
 800686a:	2800      	cmp	r0, #0
 800686c:	d144      	bne.n	80068f8 <HAL_I2C_IsDeviceReady+0x160>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800686e:	6833      	ldr	r3, [r6, #0]
 8006870:	2210      	movs	r2, #16
 8006872:	61da      	str	r2, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006874:	6833      	ldr	r3, [r6, #0]
 8006876:	2220      	movs	r2, #32
 8006878:	61da      	str	r2, [r3, #28]
      if (I2C_Trials == Trials)
 800687a:	9b03      	ldr	r3, [sp, #12]
 800687c:	4543      	cmp	r3, r8
 800687e:	d022      	beq.n	80068c6 <HAL_I2C_IsDeviceReady+0x12e>
      I2C_Trials++;
 8006880:	9b03      	ldr	r3, [sp, #12]
 8006882:	3301      	adds	r3, #1
 8006884:	9303      	str	r3, [sp, #12]
    } while (I2C_Trials < Trials);
 8006886:	9b03      	ldr	r3, [sp, #12]
 8006888:	4543      	cmp	r3, r8
 800688a:	d3a7      	bcc.n	80067dc <HAL_I2C_IsDeviceReady+0x44>
    hi2c->State = HAL_I2C_STATE_READY;
 800688c:	2320      	movs	r3, #32
 800688e:	f886 3041 	strb.w	r3, [r6, #65]	@ 0x41
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006892:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 8006894:	f043 0320 	orr.w	r3, r3, #32
 8006898:	6473      	str	r3, [r6, #68]	@ 0x44
    __HAL_UNLOCK(hi2c);
 800689a:	2300      	movs	r3, #0
 800689c:	f886 3040 	strb.w	r3, [r6, #64]	@ 0x40
    return HAL_ERROR;
 80068a0:	2001      	movs	r0, #1
 80068a2:	e7d3      	b.n	800684c <HAL_I2C_IsDeviceReady+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80068a4:	9700      	str	r7, [sp, #0]
 80068a6:	462b      	mov	r3, r5
 80068a8:	2200      	movs	r2, #0
 80068aa:	2120      	movs	r1, #32
 80068ac:	4630      	mov	r0, r6
 80068ae:	f7ff fdad 	bl	800640c <I2C_WaitOnFlagUntilTimeout>
 80068b2:	b9f8      	cbnz	r0, 80068f4 <HAL_I2C_IsDeviceReady+0x15c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068b4:	6832      	ldr	r2, [r6, #0]
 80068b6:	2320      	movs	r3, #32
 80068b8:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 80068ba:	f886 3041 	strb.w	r3, [r6, #65]	@ 0x41
        __HAL_UNLOCK(hi2c);
 80068be:	2300      	movs	r3, #0
 80068c0:	f886 3040 	strb.w	r3, [r6, #64]	@ 0x40
        return HAL_OK;
 80068c4:	e7c2      	b.n	800684c <HAL_I2C_IsDeviceReady+0xb4>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80068c6:	6832      	ldr	r2, [r6, #0]
 80068c8:	6853      	ldr	r3, [r2, #4]
 80068ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80068ce:	6053      	str	r3, [r2, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80068d0:	9700      	str	r7, [sp, #0]
 80068d2:	462b      	mov	r3, r5
 80068d4:	2200      	movs	r2, #0
 80068d6:	2120      	movs	r1, #32
 80068d8:	4630      	mov	r0, r6
 80068da:	f7ff fd97 	bl	800640c <I2C_WaitOnFlagUntilTimeout>
 80068de:	b968      	cbnz	r0, 80068fc <HAL_I2C_IsDeviceReady+0x164>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068e0:	6833      	ldr	r3, [r6, #0]
 80068e2:	2220      	movs	r2, #32
 80068e4:	61da      	str	r2, [r3, #28]
 80068e6:	e7cb      	b.n	8006880 <HAL_I2C_IsDeviceReady+0xe8>
    return HAL_BUSY;
 80068e8:	2002      	movs	r0, #2
 80068ea:	e7af      	b.n	800684c <HAL_I2C_IsDeviceReady+0xb4>
      return HAL_BUSY;
 80068ec:	2002      	movs	r0, #2
 80068ee:	e7ad      	b.n	800684c <HAL_I2C_IsDeviceReady+0xb4>
    __HAL_LOCK(hi2c);
 80068f0:	2002      	movs	r0, #2
 80068f2:	e7ab      	b.n	800684c <HAL_I2C_IsDeviceReady+0xb4>
          return HAL_ERROR;
 80068f4:	2001      	movs	r0, #1
 80068f6:	e7a9      	b.n	800684c <HAL_I2C_IsDeviceReady+0xb4>
          return HAL_ERROR;
 80068f8:	2001      	movs	r0, #1
 80068fa:	e7a7      	b.n	800684c <HAL_I2C_IsDeviceReady+0xb4>
          return HAL_ERROR;
 80068fc:	2001      	movs	r0, #1
 80068fe:	e7a5      	b.n	800684c <HAL_I2C_IsDeviceReady+0xb4>
 8006900:	02002000 	.word	0x02002000

08006904 <HAL_I2C_EV_IRQHandler>:
{
 8006904:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006906:	6803      	ldr	r3, [r0, #0]
 8006908:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800690a:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 800690c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800690e:	b103      	cbz	r3, 8006912 <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 8006910:	4798      	blx	r3
}
 8006912:	bd08      	pop	{r3, pc}

08006914 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006914:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006916:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 800691a:	b2d2      	uxtb	r2, r2
 800691c:	2a20      	cmp	r2, #32
 800691e:	d123      	bne.n	8006968 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006920:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8006924:	2a01      	cmp	r2, #1
 8006926:	d021      	beq.n	800696c <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8006928:	2201      	movs	r2, #1
 800692a:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800692e:	2224      	movs	r2, #36	@ 0x24
 8006930:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006934:	6800      	ldr	r0, [r0, #0]
 8006936:	6802      	ldr	r2, [r0, #0]
 8006938:	f022 0201 	bic.w	r2, r2, #1
 800693c:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800693e:	6818      	ldr	r0, [r3, #0]
 8006940:	6802      	ldr	r2, [r0, #0]
 8006942:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006946:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006948:	6818      	ldr	r0, [r3, #0]
 800694a:	6802      	ldr	r2, [r0, #0]
 800694c:	4311      	orrs	r1, r2
 800694e:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006950:	6819      	ldr	r1, [r3, #0]
 8006952:	680a      	ldr	r2, [r1, #0]
 8006954:	f042 0201 	orr.w	r2, r2, #1
 8006958:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800695a:	2220      	movs	r2, #32
 800695c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006960:	2000      	movs	r0, #0
 8006962:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 8006966:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8006968:	2002      	movs	r0, #2
 800696a:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800696c:	2002      	movs	r0, #2
  }
}
 800696e:	4770      	bx	lr

08006970 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006970:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006972:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8006976:	b2d2      	uxtb	r2, r2
 8006978:	2a20      	cmp	r2, #32
 800697a:	d121      	bne.n	80069c0 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800697c:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8006980:	2a01      	cmp	r2, #1
 8006982:	d01f      	beq.n	80069c4 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8006984:	2201      	movs	r2, #1
 8006986:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800698a:	2224      	movs	r2, #36	@ 0x24
 800698c:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006990:	6800      	ldr	r0, [r0, #0]
 8006992:	6802      	ldr	r2, [r0, #0]
 8006994:	f022 0201 	bic.w	r2, r2, #1
 8006998:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800699a:	6818      	ldr	r0, [r3, #0]
 800699c:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800699e:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80069a2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80069a6:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 80069a8:	6819      	ldr	r1, [r3, #0]
 80069aa:	680a      	ldr	r2, [r1, #0]
 80069ac:	f042 0201 	orr.w	r2, r2, #1
 80069b0:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80069b2:	2220      	movs	r2, #32
 80069b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069b8:	2000      	movs	r0, #0
 80069ba:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 80069be:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80069c0:	2002      	movs	r0, #2
 80069c2:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80069c4:	2002      	movs	r0, #2
  }
}
 80069c6:	4770      	bx	lr

080069c8 <HAL_PWREx_ConfigSupply>:
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80069c8:	4b13      	ldr	r3, [pc, #76]	@ (8006a18 <HAL_PWREx_ConfigSupply+0x50>)
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	f013 0f04 	tst.w	r3, #4
 80069d0:	d107      	bne.n	80069e2 <HAL_PWREx_ConfigSupply+0x1a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80069d2:	4b11      	ldr	r3, [pc, #68]	@ (8006a18 <HAL_PWREx_ConfigSupply+0x50>)
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	f003 0307 	and.w	r3, r3, #7
 80069da:	4283      	cmp	r3, r0
 80069dc:	d01a      	beq.n	8006a14 <HAL_PWREx_ConfigSupply+0x4c>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80069de:	2001      	movs	r0, #1
 80069e0:	4770      	bx	lr
{
 80069e2:	b510      	push	{r4, lr}
      return HAL_OK;
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80069e4:	4a0c      	ldr	r2, [pc, #48]	@ (8006a18 <HAL_PWREx_ConfigSupply+0x50>)
 80069e6:	68d3      	ldr	r3, [r2, #12]
 80069e8:	f023 0307 	bic.w	r3, r3, #7
 80069ec:	4303      	orrs	r3, r0
 80069ee:	60d3      	str	r3, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80069f0:	f7fc fb88 	bl	8003104 <HAL_GetTick>
 80069f4:	4604      	mov	r4, r0

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80069f6:	4b08      	ldr	r3, [pc, #32]	@ (8006a18 <HAL_PWREx_ConfigSupply+0x50>)
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 80069fe:	d107      	bne.n	8006a10 <HAL_PWREx_ConfigSupply+0x48>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006a00:	f7fc fb80 	bl	8003104 <HAL_GetTick>
 8006a04:	1b00      	subs	r0, r0, r4
 8006a06:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006a0a:	d9f4      	bls.n	80069f6 <HAL_PWREx_ConfigSupply+0x2e>
    {
      return HAL_ERROR;
 8006a0c:	2001      	movs	r0, #1
 8006a0e:	e000      	b.n	8006a12 <HAL_PWREx_ConfigSupply+0x4a>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006a10:	2000      	movs	r0, #0
}
 8006a12:	bd10      	pop	{r4, pc}
      return HAL_OK;
 8006a14:	2000      	movs	r0, #0
}
 8006a16:	4770      	bx	lr
 8006a18:	58024800 	.word	0x58024800

08006a1c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a1c:	2800      	cmp	r0, #0
 8006a1e:	f000 8318 	beq.w	8007052 <HAL_RCC_OscConfig+0x636>
{
 8006a22:	b538      	push	{r3, r4, r5, lr}
 8006a24:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a26:	6803      	ldr	r3, [r0, #0]
 8006a28:	f013 0f01 	tst.w	r3, #1
 8006a2c:	d025      	beq.n	8006a7a <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a2e:	4a94      	ldr	r2, [pc, #592]	@ (8006c80 <HAL_RCC_OscConfig+0x264>)
 8006a30:	6913      	ldr	r3, [r2, #16]
 8006a32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a36:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006a38:	2b10      	cmp	r3, #16
 8006a3a:	d015      	beq.n	8006a68 <HAL_RCC_OscConfig+0x4c>
 8006a3c:	2b18      	cmp	r3, #24
 8006a3e:	d00f      	beq.n	8006a60 <HAL_RCC_OscConfig+0x44>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a40:	6863      	ldr	r3, [r4, #4]
 8006a42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a46:	d03f      	beq.n	8006ac8 <HAL_RCC_OscConfig+0xac>
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d153      	bne.n	8006af4 <HAL_RCC_OscConfig+0xd8>
 8006a4c:	4b8c      	ldr	r3, [pc, #560]	@ (8006c80 <HAL_RCC_OscConfig+0x264>)
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006a54:	601a      	str	r2, [r3, #0]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006a5c:	601a      	str	r2, [r3, #0]
 8006a5e:	e038      	b.n	8006ad2 <HAL_RCC_OscConfig+0xb6>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006a60:	f002 0203 	and.w	r2, r2, #3
 8006a64:	2a02      	cmp	r2, #2
 8006a66:	d1eb      	bne.n	8006a40 <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a68:	4b85      	ldr	r3, [pc, #532]	@ (8006c80 <HAL_RCC_OscConfig+0x264>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8006a70:	d003      	beq.n	8006a7a <HAL_RCC_OscConfig+0x5e>
 8006a72:	6863      	ldr	r3, [r4, #4]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f000 82ee 	beq.w	8007056 <HAL_RCC_OscConfig+0x63a>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a7a:	6823      	ldr	r3, [r4, #0]
 8006a7c:	f013 0f02 	tst.w	r3, #2
 8006a80:	f000 80a1 	beq.w	8006bc6 <HAL_RCC_OscConfig+0x1aa>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a84:	4a7e      	ldr	r2, [pc, #504]	@ (8006c80 <HAL_RCC_OscConfig+0x264>)
 8006a86:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a88:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006a8a:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 8006a8e:	d05a      	beq.n	8006b46 <HAL_RCC_OscConfig+0x12a>
 8006a90:	2b18      	cmp	r3, #24
 8006a92:	d055      	beq.n	8006b40 <HAL_RCC_OscConfig+0x124>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006a94:	68e3      	ldr	r3, [r4, #12]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	f000 80de 	beq.w	8006c58 <HAL_RCC_OscConfig+0x23c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006a9c:	4978      	ldr	r1, [pc, #480]	@ (8006c80 <HAL_RCC_OscConfig+0x264>)
 8006a9e:	680a      	ldr	r2, [r1, #0]
 8006aa0:	f022 0219 	bic.w	r2, r2, #25
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aa8:	f7fc fb2c 	bl	8003104 <HAL_GetTick>
 8006aac:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006aae:	4b74      	ldr	r3, [pc, #464]	@ (8006c80 <HAL_RCC_OscConfig+0x264>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f013 0f04 	tst.w	r3, #4
 8006ab6:	f040 80ad 	bne.w	8006c14 <HAL_RCC_OscConfig+0x1f8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006aba:	f7fc fb23 	bl	8003104 <HAL_GetTick>
 8006abe:	1b40      	subs	r0, r0, r5
 8006ac0:	2802      	cmp	r0, #2
 8006ac2:	d9f4      	bls.n	8006aae <HAL_RCC_OscConfig+0x92>
          {
            return HAL_TIMEOUT;
 8006ac4:	2003      	movs	r0, #3
 8006ac6:	e2cd      	b.n	8007064 <HAL_RCC_OscConfig+0x648>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ac8:	4a6d      	ldr	r2, [pc, #436]	@ (8006c80 <HAL_RCC_OscConfig+0x264>)
 8006aca:	6813      	ldr	r3, [r2, #0]
 8006acc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ad0:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ad2:	6863      	ldr	r3, [r4, #4]
 8006ad4:	b32b      	cbz	r3, 8006b22 <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 8006ad6:	f7fc fb15 	bl	8003104 <HAL_GetTick>
 8006ada:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006adc:	4b68      	ldr	r3, [pc, #416]	@ (8006c80 <HAL_RCC_OscConfig+0x264>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8006ae4:	d1c9      	bne.n	8006a7a <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ae6:	f7fc fb0d 	bl	8003104 <HAL_GetTick>
 8006aea:	1b40      	subs	r0, r0, r5
 8006aec:	2864      	cmp	r0, #100	@ 0x64
 8006aee:	d9f5      	bls.n	8006adc <HAL_RCC_OscConfig+0xc0>
            return HAL_TIMEOUT;
 8006af0:	2003      	movs	r0, #3
 8006af2:	e2b7      	b.n	8007064 <HAL_RCC_OscConfig+0x648>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006af4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006af8:	d009      	beq.n	8006b0e <HAL_RCC_OscConfig+0xf2>
 8006afa:	4b61      	ldr	r3, [pc, #388]	@ (8006c80 <HAL_RCC_OscConfig+0x264>)
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006b02:	601a      	str	r2, [r3, #0]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006b0a:	601a      	str	r2, [r3, #0]
 8006b0c:	e7e1      	b.n	8006ad2 <HAL_RCC_OscConfig+0xb6>
 8006b0e:	4b5c      	ldr	r3, [pc, #368]	@ (8006c80 <HAL_RCC_OscConfig+0x264>)
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006b16:	601a      	str	r2, [r3, #0]
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006b1e:	601a      	str	r2, [r3, #0]
 8006b20:	e7d7      	b.n	8006ad2 <HAL_RCC_OscConfig+0xb6>
        tickstart = HAL_GetTick();
 8006b22:	f7fc faef 	bl	8003104 <HAL_GetTick>
 8006b26:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006b28:	4b55      	ldr	r3, [pc, #340]	@ (8006c80 <HAL_RCC_OscConfig+0x264>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8006b30:	d0a3      	beq.n	8006a7a <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b32:	f7fc fae7 	bl	8003104 <HAL_GetTick>
 8006b36:	1b40      	subs	r0, r0, r5
 8006b38:	2864      	cmp	r0, #100	@ 0x64
 8006b3a:	d9f5      	bls.n	8006b28 <HAL_RCC_OscConfig+0x10c>
            return HAL_TIMEOUT;
 8006b3c:	2003      	movs	r0, #3
 8006b3e:	e291      	b.n	8007064 <HAL_RCC_OscConfig+0x648>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006b40:	f012 0f03 	tst.w	r2, #3
 8006b44:	d1a6      	bne.n	8006a94 <HAL_RCC_OscConfig+0x78>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b46:	4b4e      	ldr	r3, [pc, #312]	@ (8006c80 <HAL_RCC_OscConfig+0x264>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f013 0f04 	tst.w	r3, #4
 8006b4e:	d003      	beq.n	8006b58 <HAL_RCC_OscConfig+0x13c>
 8006b50:	68e3      	ldr	r3, [r4, #12]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	f000 8281 	beq.w	800705a <HAL_RCC_OscConfig+0x63e>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006b58:	4a49      	ldr	r2, [pc, #292]	@ (8006c80 <HAL_RCC_OscConfig+0x264>)
 8006b5a:	6813      	ldr	r3, [r2, #0]
 8006b5c:	f023 0319 	bic.w	r3, r3, #25
 8006b60:	68e1      	ldr	r1, [r4, #12]
 8006b62:	430b      	orrs	r3, r1
 8006b64:	6013      	str	r3, [r2, #0]
          tickstart = HAL_GetTick();
 8006b66:	f7fc facd 	bl	8003104 <HAL_GetTick>
 8006b6a:	4605      	mov	r5, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b6c:	4b44      	ldr	r3, [pc, #272]	@ (8006c80 <HAL_RCC_OscConfig+0x264>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f013 0f04 	tst.w	r3, #4
 8006b74:	d106      	bne.n	8006b84 <HAL_RCC_OscConfig+0x168>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b76:	f7fc fac5 	bl	8003104 <HAL_GetTick>
 8006b7a:	1b40      	subs	r0, r0, r5
 8006b7c:	2802      	cmp	r0, #2
 8006b7e:	d9f5      	bls.n	8006b6c <HAL_RCC_OscConfig+0x150>
              return HAL_TIMEOUT;
 8006b80:	2003      	movs	r0, #3
 8006b82:	e26f      	b.n	8007064 <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b84:	f7fc fad8 	bl	8003138 <HAL_GetREVID>
 8006b88:	f241 0303 	movw	r3, #4099	@ 0x1003
 8006b8c:	4298      	cmp	r0, r3
 8006b8e:	d812      	bhi.n	8006bb6 <HAL_RCC_OscConfig+0x19a>
 8006b90:	6922      	ldr	r2, [r4, #16]
 8006b92:	2a40      	cmp	r2, #64	@ 0x40
 8006b94:	d007      	beq.n	8006ba6 <HAL_RCC_OscConfig+0x18a>
 8006b96:	493a      	ldr	r1, [pc, #232]	@ (8006c80 <HAL_RCC_OscConfig+0x264>)
 8006b98:	684b      	ldr	r3, [r1, #4]
 8006b9a:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006b9e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8006ba2:	604b      	str	r3, [r1, #4]
 8006ba4:	e00f      	b.n	8006bc6 <HAL_RCC_OscConfig+0x1aa>
 8006ba6:	4a36      	ldr	r2, [pc, #216]	@ (8006c80 <HAL_RCC_OscConfig+0x264>)
 8006ba8:	6853      	ldr	r3, [r2, #4]
 8006baa:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006bae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006bb2:	6053      	str	r3, [r2, #4]
 8006bb4:	e007      	b.n	8006bc6 <HAL_RCC_OscConfig+0x1aa>
 8006bb6:	4a32      	ldr	r2, [pc, #200]	@ (8006c80 <HAL_RCC_OscConfig+0x264>)
 8006bb8:	6853      	ldr	r3, [r2, #4]
 8006bba:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8006bbe:	6921      	ldr	r1, [r4, #16]
 8006bc0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006bc4:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006bc6:	6823      	ldr	r3, [r4, #0]
 8006bc8:	f013 0f10 	tst.w	r3, #16
 8006bcc:	f000 8088 	beq.w	8006ce0 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006bd0:	4a2b      	ldr	r2, [pc, #172]	@ (8006c80 <HAL_RCC_OscConfig+0x264>)
 8006bd2:	6913      	ldr	r3, [r2, #16]
 8006bd4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006bd8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006bda:	2b08      	cmp	r3, #8
 8006bdc:	d056      	beq.n	8006c8c <HAL_RCC_OscConfig+0x270>
 8006bde:	2b18      	cmp	r3, #24
 8006be0:	d050      	beq.n	8006c84 <HAL_RCC_OscConfig+0x268>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006be2:	69e3      	ldr	r3, [r4, #28]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f000 80b8 	beq.w	8006d5a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006bea:	4a25      	ldr	r2, [pc, #148]	@ (8006c80 <HAL_RCC_OscConfig+0x264>)
 8006bec:	6813      	ldr	r3, [r2, #0]
 8006bee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bf4:	f7fc fa86 	bl	8003104 <HAL_GetTick>
 8006bf8:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006bfa:	4b21      	ldr	r3, [pc, #132]	@ (8006c80 <HAL_RCC_OscConfig+0x264>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8006c02:	f040 8088 	bne.w	8006d16 <HAL_RCC_OscConfig+0x2fa>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006c06:	f7fc fa7d 	bl	8003104 <HAL_GetTick>
 8006c0a:	1b40      	subs	r0, r0, r5
 8006c0c:	2802      	cmp	r0, #2
 8006c0e:	d9f4      	bls.n	8006bfa <HAL_RCC_OscConfig+0x1de>
          {
            return HAL_TIMEOUT;
 8006c10:	2003      	movs	r0, #3
 8006c12:	e227      	b.n	8007064 <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c14:	f7fc fa90 	bl	8003138 <HAL_GetREVID>
 8006c18:	f241 0303 	movw	r3, #4099	@ 0x1003
 8006c1c:	4298      	cmp	r0, r3
 8006c1e:	d812      	bhi.n	8006c46 <HAL_RCC_OscConfig+0x22a>
 8006c20:	6922      	ldr	r2, [r4, #16]
 8006c22:	2a40      	cmp	r2, #64	@ 0x40
 8006c24:	d007      	beq.n	8006c36 <HAL_RCC_OscConfig+0x21a>
 8006c26:	4916      	ldr	r1, [pc, #88]	@ (8006c80 <HAL_RCC_OscConfig+0x264>)
 8006c28:	684b      	ldr	r3, [r1, #4]
 8006c2a:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006c2e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8006c32:	604b      	str	r3, [r1, #4]
 8006c34:	e7c7      	b.n	8006bc6 <HAL_RCC_OscConfig+0x1aa>
 8006c36:	4a12      	ldr	r2, [pc, #72]	@ (8006c80 <HAL_RCC_OscConfig+0x264>)
 8006c38:	6853      	ldr	r3, [r2, #4]
 8006c3a:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006c3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c42:	6053      	str	r3, [r2, #4]
 8006c44:	e7bf      	b.n	8006bc6 <HAL_RCC_OscConfig+0x1aa>
 8006c46:	4a0e      	ldr	r2, [pc, #56]	@ (8006c80 <HAL_RCC_OscConfig+0x264>)
 8006c48:	6853      	ldr	r3, [r2, #4]
 8006c4a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8006c4e:	6921      	ldr	r1, [r4, #16]
 8006c50:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006c54:	6053      	str	r3, [r2, #4]
 8006c56:	e7b6      	b.n	8006bc6 <HAL_RCC_OscConfig+0x1aa>
        __HAL_RCC_HSI_DISABLE();
 8006c58:	4a09      	ldr	r2, [pc, #36]	@ (8006c80 <HAL_RCC_OscConfig+0x264>)
 8006c5a:	6813      	ldr	r3, [r2, #0]
 8006c5c:	f023 0301 	bic.w	r3, r3, #1
 8006c60:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006c62:	f7fc fa4f 	bl	8003104 <HAL_GetTick>
 8006c66:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006c68:	4b05      	ldr	r3, [pc, #20]	@ (8006c80 <HAL_RCC_OscConfig+0x264>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f013 0f04 	tst.w	r3, #4
 8006c70:	d0a9      	beq.n	8006bc6 <HAL_RCC_OscConfig+0x1aa>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c72:	f7fc fa47 	bl	8003104 <HAL_GetTick>
 8006c76:	1b40      	subs	r0, r0, r5
 8006c78:	2802      	cmp	r0, #2
 8006c7a:	d9f5      	bls.n	8006c68 <HAL_RCC_OscConfig+0x24c>
            return HAL_TIMEOUT;
 8006c7c:	2003      	movs	r0, #3
 8006c7e:	e1f1      	b.n	8007064 <HAL_RCC_OscConfig+0x648>
 8006c80:	58024400 	.word	0x58024400
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006c84:	f002 0203 	and.w	r2, r2, #3
 8006c88:	2a01      	cmp	r2, #1
 8006c8a:	d1aa      	bne.n	8006be2 <HAL_RCC_OscConfig+0x1c6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c8c:	4ba1      	ldr	r3, [pc, #644]	@ (8006f14 <HAL_RCC_OscConfig+0x4f8>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8006c94:	d003      	beq.n	8006c9e <HAL_RCC_OscConfig+0x282>
 8006c96:	69e3      	ldr	r3, [r4, #28]
 8006c98:	2b80      	cmp	r3, #128	@ 0x80
 8006c9a:	f040 81e0 	bne.w	800705e <HAL_RCC_OscConfig+0x642>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c9e:	f7fc fa4b 	bl	8003138 <HAL_GetREVID>
 8006ca2:	f241 0303 	movw	r3, #4099	@ 0x1003
 8006ca6:	4298      	cmp	r0, r3
 8006ca8:	d812      	bhi.n	8006cd0 <HAL_RCC_OscConfig+0x2b4>
 8006caa:	6a22      	ldr	r2, [r4, #32]
 8006cac:	2a20      	cmp	r2, #32
 8006cae:	d007      	beq.n	8006cc0 <HAL_RCC_OscConfig+0x2a4>
 8006cb0:	4998      	ldr	r1, [pc, #608]	@ (8006f14 <HAL_RCC_OscConfig+0x4f8>)
 8006cb2:	684b      	ldr	r3, [r1, #4]
 8006cb4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006cb8:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8006cbc:	604b      	str	r3, [r1, #4]
 8006cbe:	e00f      	b.n	8006ce0 <HAL_RCC_OscConfig+0x2c4>
 8006cc0:	4a94      	ldr	r2, [pc, #592]	@ (8006f14 <HAL_RCC_OscConfig+0x4f8>)
 8006cc2:	6853      	ldr	r3, [r2, #4]
 8006cc4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006cc8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006ccc:	6053      	str	r3, [r2, #4]
 8006cce:	e007      	b.n	8006ce0 <HAL_RCC_OscConfig+0x2c4>
 8006cd0:	4a90      	ldr	r2, [pc, #576]	@ (8006f14 <HAL_RCC_OscConfig+0x4f8>)
 8006cd2:	68d3      	ldr	r3, [r2, #12]
 8006cd4:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8006cd8:	6a21      	ldr	r1, [r4, #32]
 8006cda:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006cde:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ce0:	6823      	ldr	r3, [r4, #0]
 8006ce2:	f013 0f08 	tst.w	r3, #8
 8006ce6:	d060      	beq.n	8006daa <HAL_RCC_OscConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006ce8:	6963      	ldr	r3, [r4, #20]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d049      	beq.n	8006d82 <HAL_RCC_OscConfig+0x366>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006cee:	4a89      	ldr	r2, [pc, #548]	@ (8006f14 <HAL_RCC_OscConfig+0x4f8>)
 8006cf0:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8006cf2:	f043 0301 	orr.w	r3, r3, #1
 8006cf6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cf8:	f7fc fa04 	bl	8003104 <HAL_GetTick>
 8006cfc:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006cfe:	4b85      	ldr	r3, [pc, #532]	@ (8006f14 <HAL_RCC_OscConfig+0x4f8>)
 8006d00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d02:	f013 0f02 	tst.w	r3, #2
 8006d06:	d150      	bne.n	8006daa <HAL_RCC_OscConfig+0x38e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d08:	f7fc f9fc 	bl	8003104 <HAL_GetTick>
 8006d0c:	1b40      	subs	r0, r0, r5
 8006d0e:	2802      	cmp	r0, #2
 8006d10:	d9f5      	bls.n	8006cfe <HAL_RCC_OscConfig+0x2e2>
        {
          return HAL_TIMEOUT;
 8006d12:	2003      	movs	r0, #3
 8006d14:	e1a6      	b.n	8007064 <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d16:	f7fc fa0f 	bl	8003138 <HAL_GetREVID>
 8006d1a:	f241 0303 	movw	r3, #4099	@ 0x1003
 8006d1e:	4298      	cmp	r0, r3
 8006d20:	d812      	bhi.n	8006d48 <HAL_RCC_OscConfig+0x32c>
 8006d22:	6a22      	ldr	r2, [r4, #32]
 8006d24:	2a20      	cmp	r2, #32
 8006d26:	d007      	beq.n	8006d38 <HAL_RCC_OscConfig+0x31c>
 8006d28:	497a      	ldr	r1, [pc, #488]	@ (8006f14 <HAL_RCC_OscConfig+0x4f8>)
 8006d2a:	684b      	ldr	r3, [r1, #4]
 8006d2c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006d30:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8006d34:	604b      	str	r3, [r1, #4]
 8006d36:	e7d3      	b.n	8006ce0 <HAL_RCC_OscConfig+0x2c4>
 8006d38:	4a76      	ldr	r2, [pc, #472]	@ (8006f14 <HAL_RCC_OscConfig+0x4f8>)
 8006d3a:	6853      	ldr	r3, [r2, #4]
 8006d3c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006d40:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006d44:	6053      	str	r3, [r2, #4]
 8006d46:	e7cb      	b.n	8006ce0 <HAL_RCC_OscConfig+0x2c4>
 8006d48:	4a72      	ldr	r2, [pc, #456]	@ (8006f14 <HAL_RCC_OscConfig+0x4f8>)
 8006d4a:	68d3      	ldr	r3, [r2, #12]
 8006d4c:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8006d50:	6a21      	ldr	r1, [r4, #32]
 8006d52:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006d56:	60d3      	str	r3, [r2, #12]
 8006d58:	e7c2      	b.n	8006ce0 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_CSI_DISABLE();
 8006d5a:	4a6e      	ldr	r2, [pc, #440]	@ (8006f14 <HAL_RCC_OscConfig+0x4f8>)
 8006d5c:	6813      	ldr	r3, [r2, #0]
 8006d5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d62:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006d64:	f7fc f9ce 	bl	8003104 <HAL_GetTick>
 8006d68:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006d6a:	4b6a      	ldr	r3, [pc, #424]	@ (8006f14 <HAL_RCC_OscConfig+0x4f8>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8006d72:	d0b5      	beq.n	8006ce0 <HAL_RCC_OscConfig+0x2c4>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006d74:	f7fc f9c6 	bl	8003104 <HAL_GetTick>
 8006d78:	1b40      	subs	r0, r0, r5
 8006d7a:	2802      	cmp	r0, #2
 8006d7c:	d9f5      	bls.n	8006d6a <HAL_RCC_OscConfig+0x34e>
            return HAL_TIMEOUT;
 8006d7e:	2003      	movs	r0, #3
 8006d80:	e170      	b.n	8007064 <HAL_RCC_OscConfig+0x648>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d82:	4a64      	ldr	r2, [pc, #400]	@ (8006f14 <HAL_RCC_OscConfig+0x4f8>)
 8006d84:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8006d86:	f023 0301 	bic.w	r3, r3, #1
 8006d8a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d8c:	f7fc f9ba 	bl	8003104 <HAL_GetTick>
 8006d90:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006d92:	4b60      	ldr	r3, [pc, #384]	@ (8006f14 <HAL_RCC_OscConfig+0x4f8>)
 8006d94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d96:	f013 0f02 	tst.w	r3, #2
 8006d9a:	d006      	beq.n	8006daa <HAL_RCC_OscConfig+0x38e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d9c:	f7fc f9b2 	bl	8003104 <HAL_GetTick>
 8006da0:	1b40      	subs	r0, r0, r5
 8006da2:	2802      	cmp	r0, #2
 8006da4:	d9f5      	bls.n	8006d92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006da6:	2003      	movs	r0, #3
 8006da8:	e15c      	b.n	8007064 <HAL_RCC_OscConfig+0x648>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006daa:	6823      	ldr	r3, [r4, #0]
 8006dac:	f013 0f20 	tst.w	r3, #32
 8006db0:	d029      	beq.n	8006e06 <HAL_RCC_OscConfig+0x3ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006db2:	69a3      	ldr	r3, [r4, #24]
 8006db4:	b19b      	cbz	r3, 8006dde <HAL_RCC_OscConfig+0x3c2>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006db6:	4a57      	ldr	r2, [pc, #348]	@ (8006f14 <HAL_RCC_OscConfig+0x4f8>)
 8006db8:	6813      	ldr	r3, [r2, #0]
 8006dba:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006dbe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006dc0:	f7fc f9a0 	bl	8003104 <HAL_GetTick>
 8006dc4:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006dc6:	4b53      	ldr	r3, [pc, #332]	@ (8006f14 <HAL_RCC_OscConfig+0x4f8>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8006dce:	d11a      	bne.n	8006e06 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006dd0:	f7fc f998 	bl	8003104 <HAL_GetTick>
 8006dd4:	1b40      	subs	r0, r0, r5
 8006dd6:	2802      	cmp	r0, #2
 8006dd8:	d9f5      	bls.n	8006dc6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006dda:	2003      	movs	r0, #3
 8006ddc:	e142      	b.n	8007064 <HAL_RCC_OscConfig+0x648>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006dde:	4a4d      	ldr	r2, [pc, #308]	@ (8006f14 <HAL_RCC_OscConfig+0x4f8>)
 8006de0:	6813      	ldr	r3, [r2, #0]
 8006de2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006de6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006de8:	f7fc f98c 	bl	8003104 <HAL_GetTick>
 8006dec:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006dee:	4b49      	ldr	r3, [pc, #292]	@ (8006f14 <HAL_RCC_OscConfig+0x4f8>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8006df6:	d006      	beq.n	8006e06 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006df8:	f7fc f984 	bl	8003104 <HAL_GetTick>
 8006dfc:	1b40      	subs	r0, r0, r5
 8006dfe:	2802      	cmp	r0, #2
 8006e00:	d9f5      	bls.n	8006dee <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8006e02:	2003      	movs	r0, #3
 8006e04:	e12e      	b.n	8007064 <HAL_RCC_OscConfig+0x648>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e06:	6823      	ldr	r3, [r4, #0]
 8006e08:	f013 0f04 	tst.w	r3, #4
 8006e0c:	d121      	bne.n	8006e52 <HAL_RCC_OscConfig+0x436>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e0e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	f000 8126 	beq.w	8007062 <HAL_RCC_OscConfig+0x646>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006e16:	4a3f      	ldr	r2, [pc, #252]	@ (8006f14 <HAL_RCC_OscConfig+0x4f8>)
 8006e18:	6912      	ldr	r2, [r2, #16]
 8006e1a:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8006e1e:	2a18      	cmp	r2, #24
 8006e20:	f000 80ee 	beq.w	8007000 <HAL_RCC_OscConfig+0x5e4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e24:	2b02      	cmp	r3, #2
 8006e26:	d079      	beq.n	8006f1c <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e28:	4a3a      	ldr	r2, [pc, #232]	@ (8006f14 <HAL_RCC_OscConfig+0x4f8>)
 8006e2a:	6813      	ldr	r3, [r2, #0]
 8006e2c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e32:	f7fc f967 	bl	8003104 <HAL_GetTick>
 8006e36:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e38:	4b36      	ldr	r3, [pc, #216]	@ (8006f14 <HAL_RCC_OscConfig+0x4f8>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8006e40:	f000 80dc 	beq.w	8006ffc <HAL_RCC_OscConfig+0x5e0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e44:	f7fc f95e 	bl	8003104 <HAL_GetTick>
 8006e48:	1b00      	subs	r0, r0, r4
 8006e4a:	2802      	cmp	r0, #2
 8006e4c:	d9f4      	bls.n	8006e38 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006e4e:	2003      	movs	r0, #3
 8006e50:	e108      	b.n	8007064 <HAL_RCC_OscConfig+0x648>
    PWR->CR1 |= PWR_CR1_DBP;
 8006e52:	4a31      	ldr	r2, [pc, #196]	@ (8006f18 <HAL_RCC_OscConfig+0x4fc>)
 8006e54:	6813      	ldr	r3, [r2, #0]
 8006e56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e5a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006e5c:	f7fc f952 	bl	8003104 <HAL_GetTick>
 8006e60:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e62:	4b2d      	ldr	r3, [pc, #180]	@ (8006f18 <HAL_RCC_OscConfig+0x4fc>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8006e6a:	d106      	bne.n	8006e7a <HAL_RCC_OscConfig+0x45e>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006e6c:	f7fc f94a 	bl	8003104 <HAL_GetTick>
 8006e70:	1b40      	subs	r0, r0, r5
 8006e72:	2864      	cmp	r0, #100	@ 0x64
 8006e74:	d9f5      	bls.n	8006e62 <HAL_RCC_OscConfig+0x446>
        return HAL_TIMEOUT;
 8006e76:	2003      	movs	r0, #3
 8006e78:	e0f4      	b.n	8007064 <HAL_RCC_OscConfig+0x648>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e7a:	68a3      	ldr	r3, [r4, #8]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d00a      	beq.n	8006e96 <HAL_RCC_OscConfig+0x47a>
 8006e80:	bb0b      	cbnz	r3, 8006ec6 <HAL_RCC_OscConfig+0x4aa>
 8006e82:	4b24      	ldr	r3, [pc, #144]	@ (8006f14 <HAL_RCC_OscConfig+0x4f8>)
 8006e84:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006e86:	f022 0201 	bic.w	r2, r2, #1
 8006e8a:	671a      	str	r2, [r3, #112]	@ 0x70
 8006e8c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006e8e:	f022 0204 	bic.w	r2, r2, #4
 8006e92:	671a      	str	r2, [r3, #112]	@ 0x70
 8006e94:	e004      	b.n	8006ea0 <HAL_RCC_OscConfig+0x484>
 8006e96:	4a1f      	ldr	r2, [pc, #124]	@ (8006f14 <HAL_RCC_OscConfig+0x4f8>)
 8006e98:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8006e9a:	f043 0301 	orr.w	r3, r3, #1
 8006e9e:	6713      	str	r3, [r2, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ea0:	68a3      	ldr	r3, [r4, #8]
 8006ea2:	b333      	cbz	r3, 8006ef2 <HAL_RCC_OscConfig+0x4d6>
      tickstart = HAL_GetTick();
 8006ea4:	f7fc f92e 	bl	8003104 <HAL_GetTick>
 8006ea8:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006eaa:	4b1a      	ldr	r3, [pc, #104]	@ (8006f14 <HAL_RCC_OscConfig+0x4f8>)
 8006eac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006eae:	f013 0f02 	tst.w	r3, #2
 8006eb2:	d1ac      	bne.n	8006e0e <HAL_RCC_OscConfig+0x3f2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006eb4:	f7fc f926 	bl	8003104 <HAL_GetTick>
 8006eb8:	1b40      	subs	r0, r0, r5
 8006eba:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006ebe:	4298      	cmp	r0, r3
 8006ec0:	d9f3      	bls.n	8006eaa <HAL_RCC_OscConfig+0x48e>
          return HAL_TIMEOUT;
 8006ec2:	2003      	movs	r0, #3
 8006ec4:	e0ce      	b.n	8007064 <HAL_RCC_OscConfig+0x648>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ec6:	2b05      	cmp	r3, #5
 8006ec8:	d009      	beq.n	8006ede <HAL_RCC_OscConfig+0x4c2>
 8006eca:	4b12      	ldr	r3, [pc, #72]	@ (8006f14 <HAL_RCC_OscConfig+0x4f8>)
 8006ecc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006ece:	f022 0201 	bic.w	r2, r2, #1
 8006ed2:	671a      	str	r2, [r3, #112]	@ 0x70
 8006ed4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006ed6:	f022 0204 	bic.w	r2, r2, #4
 8006eda:	671a      	str	r2, [r3, #112]	@ 0x70
 8006edc:	e7e0      	b.n	8006ea0 <HAL_RCC_OscConfig+0x484>
 8006ede:	4b0d      	ldr	r3, [pc, #52]	@ (8006f14 <HAL_RCC_OscConfig+0x4f8>)
 8006ee0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006ee2:	f042 0204 	orr.w	r2, r2, #4
 8006ee6:	671a      	str	r2, [r3, #112]	@ 0x70
 8006ee8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006eea:	f042 0201 	orr.w	r2, r2, #1
 8006eee:	671a      	str	r2, [r3, #112]	@ 0x70
 8006ef0:	e7d6      	b.n	8006ea0 <HAL_RCC_OscConfig+0x484>
      tickstart = HAL_GetTick();
 8006ef2:	f7fc f907 	bl	8003104 <HAL_GetTick>
 8006ef6:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006ef8:	4b06      	ldr	r3, [pc, #24]	@ (8006f14 <HAL_RCC_OscConfig+0x4f8>)
 8006efa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006efc:	f013 0f02 	tst.w	r3, #2
 8006f00:	d085      	beq.n	8006e0e <HAL_RCC_OscConfig+0x3f2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f02:	f7fc f8ff 	bl	8003104 <HAL_GetTick>
 8006f06:	1b40      	subs	r0, r0, r5
 8006f08:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006f0c:	4298      	cmp	r0, r3
 8006f0e:	d9f3      	bls.n	8006ef8 <HAL_RCC_OscConfig+0x4dc>
          return HAL_TIMEOUT;
 8006f10:	2003      	movs	r0, #3
 8006f12:	e0a7      	b.n	8007064 <HAL_RCC_OscConfig+0x648>
 8006f14:	58024400 	.word	0x58024400
 8006f18:	58024800 	.word	0x58024800
        __HAL_RCC_PLL_DISABLE();
 8006f1c:	4a59      	ldr	r2, [pc, #356]	@ (8007084 <HAL_RCC_OscConfig+0x668>)
 8006f1e:	6813      	ldr	r3, [r2, #0]
 8006f20:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f24:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006f26:	f7fc f8ed 	bl	8003104 <HAL_GetTick>
 8006f2a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f2c:	4b55      	ldr	r3, [pc, #340]	@ (8007084 <HAL_RCC_OscConfig+0x668>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8006f34:	d006      	beq.n	8006f44 <HAL_RCC_OscConfig+0x528>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f36:	f7fc f8e5 	bl	8003104 <HAL_GetTick>
 8006f3a:	1b40      	subs	r0, r0, r5
 8006f3c:	2802      	cmp	r0, #2
 8006f3e:	d9f5      	bls.n	8006f2c <HAL_RCC_OscConfig+0x510>
            return HAL_TIMEOUT;
 8006f40:	2003      	movs	r0, #3
 8006f42:	e08f      	b.n	8007064 <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f44:	4b4f      	ldr	r3, [pc, #316]	@ (8007084 <HAL_RCC_OscConfig+0x668>)
 8006f46:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8006f48:	4a4f      	ldr	r2, [pc, #316]	@ (8007088 <HAL_RCC_OscConfig+0x66c>)
 8006f4a:	400a      	ands	r2, r1
 8006f4c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8006f4e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8006f50:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8006f54:	430a      	orrs	r2, r1
 8006f56:	629a      	str	r2, [r3, #40]	@ 0x28
 8006f58:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8006f5a:	3a01      	subs	r2, #1
 8006f5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f62:	3901      	subs	r1, #1
 8006f64:	0249      	lsls	r1, r1, #9
 8006f66:	b289      	uxth	r1, r1
 8006f68:	430a      	orrs	r2, r1
 8006f6a:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006f6c:	3901      	subs	r1, #1
 8006f6e:	0409      	lsls	r1, r1, #16
 8006f70:	f401 01fe 	and.w	r1, r1, #8323072	@ 0x7f0000
 8006f74:	430a      	orrs	r2, r1
 8006f76:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8006f78:	3901      	subs	r1, #1
 8006f7a:	0609      	lsls	r1, r1, #24
 8006f7c:	f001 41fe 	and.w	r1, r1, #2130706432	@ 0x7f000000
 8006f80:	430a      	orrs	r2, r1
 8006f82:	631a      	str	r2, [r3, #48]	@ 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8006f84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f86:	f022 0201 	bic.w	r2, r2, #1
 8006f8a:	62da      	str	r2, [r3, #44]	@ 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006f8c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006f8e:	4a3f      	ldr	r2, [pc, #252]	@ (800708c <HAL_RCC_OscConfig+0x670>)
 8006f90:	400a      	ands	r2, r1
 8006f92:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006f94:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8006f98:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006f9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f9c:	f022 020c 	bic.w	r2, r2, #12
 8006fa0:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8006fa2:	430a      	orrs	r2, r1
 8006fa4:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006fa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fa8:	f022 0202 	bic.w	r2, r2, #2
 8006fac:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006fae:	430a      	orrs	r2, r1
 8006fb0:	62da      	str	r2, [r3, #44]	@ 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006fb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fb4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006fb8:	62da      	str	r2, [r3, #44]	@ 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fbc:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006fc0:	62da      	str	r2, [r3, #44]	@ 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006fc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fc4:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006fc8:	62da      	str	r2, [r3, #44]	@ 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8006fca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fcc:	f042 0201 	orr.w	r2, r2, #1
 8006fd0:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8006fd8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006fda:	f7fc f893 	bl	8003104 <HAL_GetTick>
 8006fde:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006fe0:	4b28      	ldr	r3, [pc, #160]	@ (8007084 <HAL_RCC_OscConfig+0x668>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8006fe8:	d106      	bne.n	8006ff8 <HAL_RCC_OscConfig+0x5dc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fea:	f7fc f88b 	bl	8003104 <HAL_GetTick>
 8006fee:	1b00      	subs	r0, r0, r4
 8006ff0:	2802      	cmp	r0, #2
 8006ff2:	d9f5      	bls.n	8006fe0 <HAL_RCC_OscConfig+0x5c4>
            return HAL_TIMEOUT;
 8006ff4:	2003      	movs	r0, #3
 8006ff6:	e035      	b.n	8007064 <HAL_RCC_OscConfig+0x648>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8006ff8:	2000      	movs	r0, #0
 8006ffa:	e033      	b.n	8007064 <HAL_RCC_OscConfig+0x648>
 8006ffc:	2000      	movs	r0, #0
 8006ffe:	e031      	b.n	8007064 <HAL_RCC_OscConfig+0x648>
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007000:	4a20      	ldr	r2, [pc, #128]	@ (8007084 <HAL_RCC_OscConfig+0x668>)
 8007002:	6a91      	ldr	r1, [r2, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007004:	6b10      	ldr	r0, [r2, #48]	@ 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007006:	2b01      	cmp	r3, #1
 8007008:	d02d      	beq.n	8007066 <HAL_RCC_OscConfig+0x64a>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800700a:	f001 0303 	and.w	r3, r1, #3
 800700e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007010:	4293      	cmp	r3, r2
 8007012:	d12a      	bne.n	800706a <HAL_RCC_OscConfig+0x64e>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007014:	f3c1 1105 	ubfx	r1, r1, #4, #6
 8007018:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800701a:	4299      	cmp	r1, r3
 800701c:	d127      	bne.n	800706e <HAL_RCC_OscConfig+0x652>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800701e:	f3c0 0208 	ubfx	r2, r0, #0, #9
 8007022:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007024:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007026:	429a      	cmp	r2, r3
 8007028:	d123      	bne.n	8007072 <HAL_RCC_OscConfig+0x656>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800702a:	f3c0 2246 	ubfx	r2, r0, #9, #7
 800702e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007030:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007032:	429a      	cmp	r2, r3
 8007034:	d11f      	bne.n	8007076 <HAL_RCC_OscConfig+0x65a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007036:	f3c0 4206 	ubfx	r2, r0, #16, #7
 800703a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800703c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800703e:	429a      	cmp	r2, r3
 8007040:	d11b      	bne.n	800707a <HAL_RCC_OscConfig+0x65e>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007042:	f3c0 6006 	ubfx	r0, r0, #24, #7
 8007046:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007048:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800704a:	4298      	cmp	r0, r3
 800704c:	d117      	bne.n	800707e <HAL_RCC_OscConfig+0x662>
  return HAL_OK;
 800704e:	2000      	movs	r0, #0
 8007050:	e008      	b.n	8007064 <HAL_RCC_OscConfig+0x648>
    return HAL_ERROR;
 8007052:	2001      	movs	r0, #1
}
 8007054:	4770      	bx	lr
        return HAL_ERROR;
 8007056:	2001      	movs	r0, #1
 8007058:	e004      	b.n	8007064 <HAL_RCC_OscConfig+0x648>
        return HAL_ERROR;
 800705a:	2001      	movs	r0, #1
 800705c:	e002      	b.n	8007064 <HAL_RCC_OscConfig+0x648>
        return HAL_ERROR;
 800705e:	2001      	movs	r0, #1
 8007060:	e000      	b.n	8007064 <HAL_RCC_OscConfig+0x648>
  return HAL_OK;
 8007062:	2000      	movs	r0, #0
}
 8007064:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 8007066:	2001      	movs	r0, #1
 8007068:	e7fc      	b.n	8007064 <HAL_RCC_OscConfig+0x648>
 800706a:	2001      	movs	r0, #1
 800706c:	e7fa      	b.n	8007064 <HAL_RCC_OscConfig+0x648>
 800706e:	2001      	movs	r0, #1
 8007070:	e7f8      	b.n	8007064 <HAL_RCC_OscConfig+0x648>
 8007072:	2001      	movs	r0, #1
 8007074:	e7f6      	b.n	8007064 <HAL_RCC_OscConfig+0x648>
 8007076:	2001      	movs	r0, #1
 8007078:	e7f4      	b.n	8007064 <HAL_RCC_OscConfig+0x648>
 800707a:	2001      	movs	r0, #1
 800707c:	e7f2      	b.n	8007064 <HAL_RCC_OscConfig+0x648>
 800707e:	2001      	movs	r0, #1
 8007080:	e7f0      	b.n	8007064 <HAL_RCC_OscConfig+0x648>
 8007082:	bf00      	nop
 8007084:	58024400 	.word	0x58024400
 8007088:	fffffc0c 	.word	0xfffffc0c
 800708c:	ffff0007 	.word	0xffff0007

08007090 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007090:	4b74      	ldr	r3, [pc, #464]	@ (8007264 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007098:	2b10      	cmp	r3, #16
 800709a:	f000 80de 	beq.w	800725a <HAL_RCC_GetSysClockFreq+0x1ca>
 800709e:	2b18      	cmp	r3, #24
 80070a0:	d00f      	beq.n	80070c2 <HAL_RCC_GetSysClockFreq+0x32>
 80070a2:	b10b      	cbz	r3, 80070a8 <HAL_RCC_GetSysClockFreq+0x18>
 80070a4:	4870      	ldr	r0, [pc, #448]	@ (8007268 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80070a6:	4770      	bx	lr
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070a8:	4b6e      	ldr	r3, [pc, #440]	@ (8007264 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f013 0f20 	tst.w	r3, #32
 80070b0:	f000 80d5 	beq.w	800725e <HAL_RCC_GetSysClockFreq+0x1ce>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80070b4:	4b6b      	ldr	r3, [pc, #428]	@ (8007264 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80070bc:	486b      	ldr	r0, [pc, #428]	@ (800726c <HAL_RCC_GetSysClockFreq+0x1dc>)
 80070be:	40d8      	lsrs	r0, r3
 80070c0:	4770      	bx	lr
{
 80070c2:	b410      	push	{r4}
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070c4:	4b67      	ldr	r3, [pc, #412]	@ (8007264 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80070c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80070c8:	f002 0203 	and.w	r2, r2, #3
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80070cc:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 80070ce:	f3c4 1005 	ubfx	r0, r4, #4, #6
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80070d2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80070d4:	f001 0101 	and.w	r1, r1, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80070d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070da:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 80070de:	fb01 f303 	mul.w	r3, r1, r3
 80070e2:	ee07 3a90 	vmov	s15, r3
 80070e6:	eef8 7a67 	vcvt.f32.u32	s15, s15

    if (pllm != 0U)
 80070ea:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
 80070ee:	f000 8094 	beq.w	800721a <HAL_RCC_GetSysClockFreq+0x18a>
    {
      switch (pllsource)
 80070f2:	2a01      	cmp	r2, #1
 80070f4:	d066      	beq.n	80071c4 <HAL_RCC_GetSysClockFreq+0x134>
 80070f6:	2a02      	cmp	r2, #2
 80070f8:	f000 8092 	beq.w	8007220 <HAL_RCC_GetSysClockFreq+0x190>
 80070fc:	b1e2      	cbz	r2, 8007138 <HAL_RCC_GetSysClockFreq+0xa8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80070fe:	ee07 0a10 	vmov	s14, r0
 8007102:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007106:	ed9f 6a5a 	vldr	s12, [pc, #360]	@ 8007270 <HAL_RCC_GetSysClockFreq+0x1e0>
 800710a:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800710e:	4b55      	ldr	r3, [pc, #340]	@ (8007264 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8007110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007116:	ee06 3a90 	vmov	s13, r3
 800711a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800711e:	ed9f 6a55 	vldr	s12, [pc, #340]	@ 8007274 <HAL_RCC_GetSysClockFreq+0x1e4>
 8007122:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800712a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800712e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007132:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8007136:	e061      	b.n	80071fc <HAL_RCC_GetSysClockFreq+0x16c>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007138:	4b4a      	ldr	r3, [pc, #296]	@ (8007264 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f013 0f20 	tst.w	r3, #32
 8007140:	d023      	beq.n	800718a <HAL_RCC_GetSysClockFreq+0xfa>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007142:	4948      	ldr	r1, [pc, #288]	@ (8007264 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8007144:	680a      	ldr	r2, [r1, #0]
 8007146:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800714a:	4b48      	ldr	r3, [pc, #288]	@ (800726c <HAL_RCC_GetSysClockFreq+0x1dc>)
 800714c:	40d3      	lsrs	r3, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800714e:	ee07 3a10 	vmov	s14, r3
 8007152:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007156:	ee07 0a10 	vmov	s14, r0
 800715a:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 800715e:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8007162:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8007164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007168:	ee06 3a90 	vmov	s13, r3
 800716c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007170:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8007274 <HAL_RCC_GetSysClockFreq+0x1e4>
 8007174:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007178:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800717c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007180:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007184:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007188:	e038      	b.n	80071fc <HAL_RCC_GetSysClockFreq+0x16c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800718a:	ee07 0a10 	vmov	s14, r0
 800718e:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007192:	ed9f 6a39 	vldr	s12, [pc, #228]	@ 8007278 <HAL_RCC_GetSysClockFreq+0x1e8>
 8007196:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800719a:	4b32      	ldr	r3, [pc, #200]	@ (8007264 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800719c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800719e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071a2:	ee06 3a90 	vmov	s13, r3
 80071a6:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80071aa:	ed9f 6a32 	vldr	s12, [pc, #200]	@ 8007274 <HAL_RCC_GetSysClockFreq+0x1e4>
 80071ae:	ee67 7a86 	vmul.f32	s15, s15, s12
 80071b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80071c2:	e01b      	b.n	80071fc <HAL_RCC_GetSysClockFreq+0x16c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80071c4:	ee07 0a10 	vmov	s14, r0
 80071c8:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80071cc:	ed9f 6a28 	vldr	s12, [pc, #160]	@ 8007270 <HAL_RCC_GetSysClockFreq+0x1e0>
 80071d0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80071d4:	4b23      	ldr	r3, [pc, #140]	@ (8007264 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80071d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071dc:	ee06 3a90 	vmov	s13, r3
 80071e0:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80071e4:	ed9f 6a23 	vldr	s12, [pc, #140]	@ 8007274 <HAL_RCC_GetSysClockFreq+0x1e4>
 80071e8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80071ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071f8:	ee27 7a27 	vmul.f32	s14, s14, s15
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80071fc:	4b19      	ldr	r3, [pc, #100]	@ (8007264 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80071fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007200:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8007204:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007206:	ee07 3a90 	vmov	s15, r3
 800720a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800720e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007212:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8007216:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 800721a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800721e:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007220:	ee07 0a10 	vmov	s14, r0
 8007224:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007228:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 800727c <HAL_RCC_GetSysClockFreq+0x1ec>
 800722c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007230:	4b0c      	ldr	r3, [pc, #48]	@ (8007264 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8007232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007234:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007238:	ee06 3a90 	vmov	s13, r3
 800723c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007240:	ed9f 6a0c 	vldr	s12, [pc, #48]	@ 8007274 <HAL_RCC_GetSysClockFreq+0x1e4>
 8007244:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007248:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800724c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007250:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007254:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8007258:	e7d0      	b.n	80071fc <HAL_RCC_GetSysClockFreq+0x16c>
    sysclockfreq = HSE_VALUE;
 800725a:	4809      	ldr	r0, [pc, #36]	@ (8007280 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800725c:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800725e:	4803      	ldr	r0, [pc, #12]	@ (800726c <HAL_RCC_GetSysClockFreq+0x1dc>)
}
 8007260:	4770      	bx	lr
 8007262:	bf00      	nop
 8007264:	58024400 	.word	0x58024400
 8007268:	003d0900 	.word	0x003d0900
 800726c:	03d09000 	.word	0x03d09000
 8007270:	4a742400 	.word	0x4a742400
 8007274:	39000000 	.word	0x39000000
 8007278:	4c742400 	.word	0x4c742400
 800727c:	4bb71b00 	.word	0x4bb71b00
 8007280:	016e3600 	.word	0x016e3600

08007284 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8007284:	2800      	cmp	r0, #0
 8007286:	f000 8132 	beq.w	80074ee <HAL_RCC_ClockConfig+0x26a>
{
 800728a:	b570      	push	{r4, r5, r6, lr}
 800728c:	460d      	mov	r5, r1
 800728e:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007290:	4b9b      	ldr	r3, [pc, #620]	@ (8007500 <HAL_RCC_ClockConfig+0x27c>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f003 030f 	and.w	r3, r3, #15
 8007298:	428b      	cmp	r3, r1
 800729a:	d20b      	bcs.n	80072b4 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800729c:	4a98      	ldr	r2, [pc, #608]	@ (8007500 <HAL_RCC_ClockConfig+0x27c>)
 800729e:	6813      	ldr	r3, [r2, #0]
 80072a0:	f023 030f 	bic.w	r3, r3, #15
 80072a4:	430b      	orrs	r3, r1
 80072a6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80072a8:	6813      	ldr	r3, [r2, #0]
 80072aa:	f003 030f 	and.w	r3, r3, #15
 80072ae:	428b      	cmp	r3, r1
 80072b0:	f040 811f 	bne.w	80074f2 <HAL_RCC_ClockConfig+0x26e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80072b4:	6823      	ldr	r3, [r4, #0]
 80072b6:	f013 0f04 	tst.w	r3, #4
 80072ba:	d00c      	beq.n	80072d6 <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80072bc:	6922      	ldr	r2, [r4, #16]
 80072be:	4b91      	ldr	r3, [pc, #580]	@ (8007504 <HAL_RCC_ClockConfig+0x280>)
 80072c0:	699b      	ldr	r3, [r3, #24]
 80072c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d905      	bls.n	80072d6 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80072ca:	498e      	ldr	r1, [pc, #568]	@ (8007504 <HAL_RCC_ClockConfig+0x280>)
 80072cc:	698b      	ldr	r3, [r1, #24]
 80072ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072d2:	431a      	orrs	r2, r3
 80072d4:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072d6:	6823      	ldr	r3, [r4, #0]
 80072d8:	f013 0f08 	tst.w	r3, #8
 80072dc:	d00c      	beq.n	80072f8 <HAL_RCC_ClockConfig+0x74>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80072de:	6962      	ldr	r2, [r4, #20]
 80072e0:	4b88      	ldr	r3, [pc, #544]	@ (8007504 <HAL_RCC_ClockConfig+0x280>)
 80072e2:	69db      	ldr	r3, [r3, #28]
 80072e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d905      	bls.n	80072f8 <HAL_RCC_ClockConfig+0x74>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80072ec:	4985      	ldr	r1, [pc, #532]	@ (8007504 <HAL_RCC_ClockConfig+0x280>)
 80072ee:	69cb      	ldr	r3, [r1, #28]
 80072f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072f4:	431a      	orrs	r2, r3
 80072f6:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072f8:	6823      	ldr	r3, [r4, #0]
 80072fa:	f013 0f10 	tst.w	r3, #16
 80072fe:	d00c      	beq.n	800731a <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007300:	69a2      	ldr	r2, [r4, #24]
 8007302:	4b80      	ldr	r3, [pc, #512]	@ (8007504 <HAL_RCC_ClockConfig+0x280>)
 8007304:	69db      	ldr	r3, [r3, #28]
 8007306:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800730a:	429a      	cmp	r2, r3
 800730c:	d905      	bls.n	800731a <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800730e:	497d      	ldr	r1, [pc, #500]	@ (8007504 <HAL_RCC_ClockConfig+0x280>)
 8007310:	69cb      	ldr	r3, [r1, #28]
 8007312:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8007316:	431a      	orrs	r2, r3
 8007318:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800731a:	6823      	ldr	r3, [r4, #0]
 800731c:	f013 0f20 	tst.w	r3, #32
 8007320:	d00c      	beq.n	800733c <HAL_RCC_ClockConfig+0xb8>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007322:	69e2      	ldr	r2, [r4, #28]
 8007324:	4b77      	ldr	r3, [pc, #476]	@ (8007504 <HAL_RCC_ClockConfig+0x280>)
 8007326:	6a1b      	ldr	r3, [r3, #32]
 8007328:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800732c:	429a      	cmp	r2, r3
 800732e:	d905      	bls.n	800733c <HAL_RCC_ClockConfig+0xb8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007330:	4974      	ldr	r1, [pc, #464]	@ (8007504 <HAL_RCC_ClockConfig+0x280>)
 8007332:	6a0b      	ldr	r3, [r1, #32]
 8007334:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007338:	431a      	orrs	r2, r3
 800733a:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800733c:	6823      	ldr	r3, [r4, #0]
 800733e:	f013 0f02 	tst.w	r3, #2
 8007342:	d00c      	beq.n	800735e <HAL_RCC_ClockConfig+0xda>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007344:	68e2      	ldr	r2, [r4, #12]
 8007346:	4b6f      	ldr	r3, [pc, #444]	@ (8007504 <HAL_RCC_ClockConfig+0x280>)
 8007348:	699b      	ldr	r3, [r3, #24]
 800734a:	f003 030f 	and.w	r3, r3, #15
 800734e:	429a      	cmp	r2, r3
 8007350:	d905      	bls.n	800735e <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007352:	496c      	ldr	r1, [pc, #432]	@ (8007504 <HAL_RCC_ClockConfig+0x280>)
 8007354:	698b      	ldr	r3, [r1, #24]
 8007356:	f023 030f 	bic.w	r3, r3, #15
 800735a:	431a      	orrs	r2, r3
 800735c:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800735e:	6823      	ldr	r3, [r4, #0]
 8007360:	f013 0f01 	tst.w	r3, #1
 8007364:	d041      	beq.n	80073ea <HAL_RCC_ClockConfig+0x166>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007366:	4a67      	ldr	r2, [pc, #412]	@ (8007504 <HAL_RCC_ClockConfig+0x280>)
 8007368:	6993      	ldr	r3, [r2, #24]
 800736a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800736e:	68a1      	ldr	r1, [r4, #8]
 8007370:	430b      	orrs	r3, r1
 8007372:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007374:	6863      	ldr	r3, [r4, #4]
 8007376:	2b02      	cmp	r3, #2
 8007378:	d00a      	beq.n	8007390 <HAL_RCC_ClockConfig+0x10c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800737a:	2b03      	cmp	r3, #3
 800737c:	d027      	beq.n	80073ce <HAL_RCC_ClockConfig+0x14a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800737e:	2b01      	cmp	r3, #1
 8007380:	d02c      	beq.n	80073dc <HAL_RCC_ClockConfig+0x158>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007382:	4a60      	ldr	r2, [pc, #384]	@ (8007504 <HAL_RCC_ClockConfig+0x280>)
 8007384:	6812      	ldr	r2, [r2, #0]
 8007386:	f012 0f04 	tst.w	r2, #4
 800738a:	d106      	bne.n	800739a <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 800738c:	2001      	movs	r0, #1
 800738e:	e0ad      	b.n	80074ec <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007390:	6812      	ldr	r2, [r2, #0]
 8007392:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8007396:	f000 80ae 	beq.w	80074f6 <HAL_RCC_ClockConfig+0x272>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800739a:	495a      	ldr	r1, [pc, #360]	@ (8007504 <HAL_RCC_ClockConfig+0x280>)
 800739c:	690a      	ldr	r2, [r1, #16]
 800739e:	f022 0207 	bic.w	r2, r2, #7
 80073a2:	4313      	orrs	r3, r2
 80073a4:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 80073a6:	f7fb fead 	bl	8003104 <HAL_GetTick>
 80073aa:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073ac:	4b55      	ldr	r3, [pc, #340]	@ (8007504 <HAL_RCC_ClockConfig+0x280>)
 80073ae:	691b      	ldr	r3, [r3, #16]
 80073b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80073b4:	6862      	ldr	r2, [r4, #4]
 80073b6:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80073ba:	d016      	beq.n	80073ea <HAL_RCC_ClockConfig+0x166>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073bc:	f7fb fea2 	bl	8003104 <HAL_GetTick>
 80073c0:	1b80      	subs	r0, r0, r6
 80073c2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80073c6:	4298      	cmp	r0, r3
 80073c8:	d9f0      	bls.n	80073ac <HAL_RCC_ClockConfig+0x128>
            return HAL_TIMEOUT;
 80073ca:	2003      	movs	r0, #3
 80073cc:	e08e      	b.n	80074ec <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80073ce:	4a4d      	ldr	r2, [pc, #308]	@ (8007504 <HAL_RCC_ClockConfig+0x280>)
 80073d0:	6812      	ldr	r2, [r2, #0]
 80073d2:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80073d6:	d1e0      	bne.n	800739a <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 80073d8:	2001      	movs	r0, #1
 80073da:	e087      	b.n	80074ec <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80073dc:	4a49      	ldr	r2, [pc, #292]	@ (8007504 <HAL_RCC_ClockConfig+0x280>)
 80073de:	6812      	ldr	r2, [r2, #0]
 80073e0:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80073e4:	d1d9      	bne.n	800739a <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 80073e6:	2001      	movs	r0, #1
 80073e8:	e080      	b.n	80074ec <HAL_RCC_ClockConfig+0x268>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073ea:	6823      	ldr	r3, [r4, #0]
 80073ec:	f013 0f02 	tst.w	r3, #2
 80073f0:	d00c      	beq.n	800740c <HAL_RCC_ClockConfig+0x188>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80073f2:	68e2      	ldr	r2, [r4, #12]
 80073f4:	4b43      	ldr	r3, [pc, #268]	@ (8007504 <HAL_RCC_ClockConfig+0x280>)
 80073f6:	699b      	ldr	r3, [r3, #24]
 80073f8:	f003 030f 	and.w	r3, r3, #15
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d205      	bcs.n	800740c <HAL_RCC_ClockConfig+0x188>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007400:	4940      	ldr	r1, [pc, #256]	@ (8007504 <HAL_RCC_ClockConfig+0x280>)
 8007402:	698b      	ldr	r3, [r1, #24]
 8007404:	f023 030f 	bic.w	r3, r3, #15
 8007408:	431a      	orrs	r2, r3
 800740a:	618a      	str	r2, [r1, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800740c:	4b3c      	ldr	r3, [pc, #240]	@ (8007500 <HAL_RCC_ClockConfig+0x27c>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f003 030f 	and.w	r3, r3, #15
 8007414:	42ab      	cmp	r3, r5
 8007416:	d90a      	bls.n	800742e <HAL_RCC_ClockConfig+0x1aa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007418:	4a39      	ldr	r2, [pc, #228]	@ (8007500 <HAL_RCC_ClockConfig+0x27c>)
 800741a:	6813      	ldr	r3, [r2, #0]
 800741c:	f023 030f 	bic.w	r3, r3, #15
 8007420:	432b      	orrs	r3, r5
 8007422:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007424:	6813      	ldr	r3, [r2, #0]
 8007426:	f003 030f 	and.w	r3, r3, #15
 800742a:	42ab      	cmp	r3, r5
 800742c:	d165      	bne.n	80074fa <HAL_RCC_ClockConfig+0x276>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800742e:	6823      	ldr	r3, [r4, #0]
 8007430:	f013 0f04 	tst.w	r3, #4
 8007434:	d00c      	beq.n	8007450 <HAL_RCC_ClockConfig+0x1cc>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007436:	6922      	ldr	r2, [r4, #16]
 8007438:	4b32      	ldr	r3, [pc, #200]	@ (8007504 <HAL_RCC_ClockConfig+0x280>)
 800743a:	699b      	ldr	r3, [r3, #24]
 800743c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007440:	429a      	cmp	r2, r3
 8007442:	d205      	bcs.n	8007450 <HAL_RCC_ClockConfig+0x1cc>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007444:	492f      	ldr	r1, [pc, #188]	@ (8007504 <HAL_RCC_ClockConfig+0x280>)
 8007446:	698b      	ldr	r3, [r1, #24]
 8007448:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800744c:	431a      	orrs	r2, r3
 800744e:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007450:	6823      	ldr	r3, [r4, #0]
 8007452:	f013 0f08 	tst.w	r3, #8
 8007456:	d00c      	beq.n	8007472 <HAL_RCC_ClockConfig+0x1ee>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007458:	6962      	ldr	r2, [r4, #20]
 800745a:	4b2a      	ldr	r3, [pc, #168]	@ (8007504 <HAL_RCC_ClockConfig+0x280>)
 800745c:	69db      	ldr	r3, [r3, #28]
 800745e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007462:	429a      	cmp	r2, r3
 8007464:	d205      	bcs.n	8007472 <HAL_RCC_ClockConfig+0x1ee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007466:	4927      	ldr	r1, [pc, #156]	@ (8007504 <HAL_RCC_ClockConfig+0x280>)
 8007468:	69cb      	ldr	r3, [r1, #28]
 800746a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800746e:	431a      	orrs	r2, r3
 8007470:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007472:	6823      	ldr	r3, [r4, #0]
 8007474:	f013 0f10 	tst.w	r3, #16
 8007478:	d00c      	beq.n	8007494 <HAL_RCC_ClockConfig+0x210>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800747a:	69a2      	ldr	r2, [r4, #24]
 800747c:	4b21      	ldr	r3, [pc, #132]	@ (8007504 <HAL_RCC_ClockConfig+0x280>)
 800747e:	69db      	ldr	r3, [r3, #28]
 8007480:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007484:	429a      	cmp	r2, r3
 8007486:	d205      	bcs.n	8007494 <HAL_RCC_ClockConfig+0x210>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007488:	491e      	ldr	r1, [pc, #120]	@ (8007504 <HAL_RCC_ClockConfig+0x280>)
 800748a:	69cb      	ldr	r3, [r1, #28]
 800748c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8007490:	431a      	orrs	r2, r3
 8007492:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007494:	6823      	ldr	r3, [r4, #0]
 8007496:	f013 0f20 	tst.w	r3, #32
 800749a:	d00c      	beq.n	80074b6 <HAL_RCC_ClockConfig+0x232>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800749c:	69e2      	ldr	r2, [r4, #28]
 800749e:	4b19      	ldr	r3, [pc, #100]	@ (8007504 <HAL_RCC_ClockConfig+0x280>)
 80074a0:	6a1b      	ldr	r3, [r3, #32]
 80074a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d205      	bcs.n	80074b6 <HAL_RCC_ClockConfig+0x232>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80074aa:	4916      	ldr	r1, [pc, #88]	@ (8007504 <HAL_RCC_ClockConfig+0x280>)
 80074ac:	6a0b      	ldr	r3, [r1, #32]
 80074ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074b2:	431a      	orrs	r2, r3
 80074b4:	620a      	str	r2, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80074b6:	f7ff fdeb 	bl	8007090 <HAL_RCC_GetSysClockFreq>
 80074ba:	4912      	ldr	r1, [pc, #72]	@ (8007504 <HAL_RCC_ClockConfig+0x280>)
 80074bc:	698b      	ldr	r3, [r1, #24]
 80074be:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80074c2:	4a11      	ldr	r2, [pc, #68]	@ (8007508 <HAL_RCC_ClockConfig+0x284>)
 80074c4:	5cd3      	ldrb	r3, [r2, r3]
 80074c6:	f003 031f 	and.w	r3, r3, #31
 80074ca:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80074cc:	698b      	ldr	r3, [r1, #24]
 80074ce:	f003 030f 	and.w	r3, r3, #15
 80074d2:	5cd3      	ldrb	r3, [r2, r3]
 80074d4:	f003 031f 	and.w	r3, r3, #31
 80074d8:	fa20 f303 	lsr.w	r3, r0, r3
 80074dc:	4a0b      	ldr	r2, [pc, #44]	@ (800750c <HAL_RCC_ClockConfig+0x288>)
 80074de:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 80074e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007510 <HAL_RCC_ClockConfig+0x28c>)
 80074e2:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 80074e4:	4b0b      	ldr	r3, [pc, #44]	@ (8007514 <HAL_RCC_ClockConfig+0x290>)
 80074e6:	6818      	ldr	r0, [r3, #0]
 80074e8:	f7fb fbd2 	bl	8002c90 <HAL_InitTick>
}
 80074ec:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80074ee:	2001      	movs	r0, #1
}
 80074f0:	4770      	bx	lr
      return HAL_ERROR;
 80074f2:	2001      	movs	r0, #1
 80074f4:	e7fa      	b.n	80074ec <HAL_RCC_ClockConfig+0x268>
          return HAL_ERROR;
 80074f6:	2001      	movs	r0, #1
 80074f8:	e7f8      	b.n	80074ec <HAL_RCC_ClockConfig+0x268>
      return HAL_ERROR;
 80074fa:	2001      	movs	r0, #1
 80074fc:	e7f6      	b.n	80074ec <HAL_RCC_ClockConfig+0x268>
 80074fe:	bf00      	nop
 8007500:	52002000 	.word	0x52002000
 8007504:	58024400 	.word	0x58024400
 8007508:	0801a018 	.word	0x0801a018
 800750c:	24000000 	.word	0x24000000
 8007510:	24000004 	.word	0x24000004
 8007514:	2400000c 	.word	0x2400000c

08007518 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007518:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800751a:	f7ff fdb9 	bl	8007090 <HAL_RCC_GetSysClockFreq>
 800751e:	4a0b      	ldr	r2, [pc, #44]	@ (800754c <HAL_RCC_GetHCLKFreq+0x34>)
 8007520:	6993      	ldr	r3, [r2, #24]
 8007522:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8007526:	490a      	ldr	r1, [pc, #40]	@ (8007550 <HAL_RCC_GetHCLKFreq+0x38>)
 8007528:	5ccb      	ldrb	r3, [r1, r3]
 800752a:	f003 031f 	and.w	r3, r3, #31
 800752e:	fa20 f303 	lsr.w	r3, r0, r3
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007532:	6992      	ldr	r2, [r2, #24]
 8007534:	f002 020f 	and.w	r2, r2, #15
 8007538:	5c88      	ldrb	r0, [r1, r2]
 800753a:	f000 001f 	and.w	r0, r0, #31
 800753e:	fa23 f000 	lsr.w	r0, r3, r0
 8007542:	4a04      	ldr	r2, [pc, #16]	@ (8007554 <HAL_RCC_GetHCLKFreq+0x3c>)
 8007544:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007546:	4a04      	ldr	r2, [pc, #16]	@ (8007558 <HAL_RCC_GetHCLKFreq+0x40>)
 8007548:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800754a:	bd08      	pop	{r3, pc}
 800754c:	58024400 	.word	0x58024400
 8007550:	0801a018 	.word	0x0801a018
 8007554:	24000000 	.word	0x24000000
 8007558:	24000004 	.word	0x24000004

0800755c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800755c:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800755e:	f7ff ffdb 	bl	8007518 <HAL_RCC_GetHCLKFreq>
 8007562:	4b05      	ldr	r3, [pc, #20]	@ (8007578 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8007564:	69db      	ldr	r3, [r3, #28]
 8007566:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800756a:	4a04      	ldr	r2, [pc, #16]	@ (800757c <HAL_RCC_GetPCLK1Freq+0x20>)
 800756c:	5cd3      	ldrb	r3, [r2, r3]
 800756e:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007572:	40d8      	lsrs	r0, r3
 8007574:	bd08      	pop	{r3, pc}
 8007576:	bf00      	nop
 8007578:	58024400 	.word	0x58024400
 800757c:	0801a018 	.word	0x0801a018

08007580 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007580:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007582:	f7ff ffc9 	bl	8007518 <HAL_RCC_GetHCLKFreq>
 8007586:	4b05      	ldr	r3, [pc, #20]	@ (800759c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8007588:	69db      	ldr	r3, [r3, #28]
 800758a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800758e:	4a04      	ldr	r2, [pc, #16]	@ (80075a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007590:	5cd3      	ldrb	r3, [r2, r3]
 8007592:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007596:	40d8      	lsrs	r0, r3
 8007598:	bd08      	pop	{r3, pc}
 800759a:	bf00      	nop
 800759c:	58024400 	.word	0x58024400
 80075a0:	0801a018 	.word	0x0801a018

080075a4 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80075a4:	233f      	movs	r3, #63	@ 0x3f
 80075a6:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80075a8:	4b11      	ldr	r3, [pc, #68]	@ (80075f0 <HAL_RCC_GetClockConfig+0x4c>)
 80075aa:	691a      	ldr	r2, [r3, #16]
 80075ac:	f002 0207 	and.w	r2, r2, #7
 80075b0:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80075b2:	699a      	ldr	r2, [r3, #24]
 80075b4:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 80075b8:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80075ba:	699a      	ldr	r2, [r3, #24]
 80075bc:	f002 020f 	and.w	r2, r2, #15
 80075c0:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80075c2:	699a      	ldr	r2, [r3, #24]
 80075c4:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80075c8:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80075ca:	69da      	ldr	r2, [r3, #28]
 80075cc:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80075d0:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80075d2:	69da      	ldr	r2, [r3, #28]
 80075d4:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 80075d8:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80075da:	6a1b      	ldr	r3, [r3, #32]
 80075dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80075e0:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80075e2:	4b04      	ldr	r3, [pc, #16]	@ (80075f4 <HAL_RCC_GetClockConfig+0x50>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f003 030f 	and.w	r3, r3, #15
 80075ea:	600b      	str	r3, [r1, #0]
}
 80075ec:	4770      	bx	lr
 80075ee:	bf00      	nop
 80075f0:	58024400 	.word	0x58024400
 80075f4:	52002000 	.word	0x52002000

080075f8 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80075f8:	4b40      	ldr	r3, [pc, #256]	@ (80076fc <RCCEx_PLL2_Config+0x104>)
 80075fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075fc:	f003 0303 	and.w	r3, r3, #3
 8007600:	2b03      	cmp	r3, #3
 8007602:	d079      	beq.n	80076f8 <RCCEx_PLL2_Config+0x100>
{
 8007604:	b570      	push	{r4, r5, r6, lr}
 8007606:	4605      	mov	r5, r0
 8007608:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800760a:	4a3c      	ldr	r2, [pc, #240]	@ (80076fc <RCCEx_PLL2_Config+0x104>)
 800760c:	6813      	ldr	r3, [r2, #0]
 800760e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007612:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007614:	f7fb fd76 	bl	8003104 <HAL_GetTick>
 8007618:	4604      	mov	r4, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800761a:	4b38      	ldr	r3, [pc, #224]	@ (80076fc <RCCEx_PLL2_Config+0x104>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8007622:	d006      	beq.n	8007632 <RCCEx_PLL2_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007624:	f7fb fd6e 	bl	8003104 <HAL_GetTick>
 8007628:	1b03      	subs	r3, r0, r4
 800762a:	2b02      	cmp	r3, #2
 800762c:	d9f5      	bls.n	800761a <RCCEx_PLL2_Config+0x22>
      {
        return HAL_TIMEOUT;
 800762e:	2003      	movs	r0, #3

  }


  return status;
}
 8007630:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007632:	4b32      	ldr	r3, [pc, #200]	@ (80076fc <RCCEx_PLL2_Config+0x104>)
 8007634:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007636:	f422 327c 	bic.w	r2, r2, #258048	@ 0x3f000
 800763a:	6829      	ldr	r1, [r5, #0]
 800763c:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8007640:	629a      	str	r2, [r3, #40]	@ 0x28
 8007642:	686a      	ldr	r2, [r5, #4]
 8007644:	3a01      	subs	r2, #1
 8007646:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800764a:	68a9      	ldr	r1, [r5, #8]
 800764c:	3901      	subs	r1, #1
 800764e:	0249      	lsls	r1, r1, #9
 8007650:	b289      	uxth	r1, r1
 8007652:	430a      	orrs	r2, r1
 8007654:	68e9      	ldr	r1, [r5, #12]
 8007656:	3901      	subs	r1, #1
 8007658:	0409      	lsls	r1, r1, #16
 800765a:	f401 01fe 	and.w	r1, r1, #8323072	@ 0x7f0000
 800765e:	430a      	orrs	r2, r1
 8007660:	6929      	ldr	r1, [r5, #16]
 8007662:	3901      	subs	r1, #1
 8007664:	0609      	lsls	r1, r1, #24
 8007666:	f001 41fe 	and.w	r1, r1, #2130706432	@ 0x7f000000
 800766a:	430a      	orrs	r2, r1
 800766c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800766e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007670:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8007674:	6969      	ldr	r1, [r5, #20]
 8007676:	430a      	orrs	r2, r1
 8007678:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800767a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800767c:	f022 0220 	bic.w	r2, r2, #32
 8007680:	69a9      	ldr	r1, [r5, #24]
 8007682:	430a      	orrs	r2, r1
 8007684:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007686:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007688:	f022 0210 	bic.w	r2, r2, #16
 800768c:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800768e:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8007690:	4a1b      	ldr	r2, [pc, #108]	@ (8007700 <RCCEx_PLL2_Config+0x108>)
 8007692:	400a      	ands	r2, r1
 8007694:	69e9      	ldr	r1, [r5, #28]
 8007696:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800769a:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_RCC_PLL2FRACN_ENABLE();
 800769c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800769e:	f042 0210 	orr.w	r2, r2, #16
 80076a2:	62da      	str	r2, [r3, #44]	@ 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80076a4:	b9c6      	cbnz	r6, 80076d8 <RCCEx_PLL2_Config+0xe0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80076a6:	461a      	mov	r2, r3
 80076a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076aa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80076ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
    __HAL_RCC_PLL2_ENABLE();
 80076b0:	4a12      	ldr	r2, [pc, #72]	@ (80076fc <RCCEx_PLL2_Config+0x104>)
 80076b2:	6813      	ldr	r3, [r2, #0]
 80076b4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80076b8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80076ba:	f7fb fd23 	bl	8003104 <HAL_GetTick>
 80076be:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80076c0:	4b0e      	ldr	r3, [pc, #56]	@ (80076fc <RCCEx_PLL2_Config+0x104>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 80076c8:	d114      	bne.n	80076f4 <RCCEx_PLL2_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80076ca:	f7fb fd1b 	bl	8003104 <HAL_GetTick>
 80076ce:	1b00      	subs	r0, r0, r4
 80076d0:	2802      	cmp	r0, #2
 80076d2:	d9f5      	bls.n	80076c0 <RCCEx_PLL2_Config+0xc8>
        return HAL_TIMEOUT;
 80076d4:	2003      	movs	r0, #3
 80076d6:	e7ab      	b.n	8007630 <RCCEx_PLL2_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 80076d8:	2e01      	cmp	r6, #1
 80076da:	d005      	beq.n	80076e8 <RCCEx_PLL2_Config+0xf0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80076dc:	4a07      	ldr	r2, [pc, #28]	@ (80076fc <RCCEx_PLL2_Config+0x104>)
 80076de:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80076e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80076e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80076e6:	e7e3      	b.n	80076b0 <RCCEx_PLL2_Config+0xb8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80076e8:	4a04      	ldr	r2, [pc, #16]	@ (80076fc <RCCEx_PLL2_Config+0x104>)
 80076ea:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80076ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80076f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80076f2:	e7dd      	b.n	80076b0 <RCCEx_PLL2_Config+0xb8>
  return status;
 80076f4:	2000      	movs	r0, #0
 80076f6:	e79b      	b.n	8007630 <RCCEx_PLL2_Config+0x38>
    return HAL_ERROR;
 80076f8:	2001      	movs	r0, #1
}
 80076fa:	4770      	bx	lr
 80076fc:	58024400 	.word	0x58024400
 8007700:	ffff0007 	.word	0xffff0007

08007704 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007704:	4b40      	ldr	r3, [pc, #256]	@ (8007808 <RCCEx_PLL3_Config+0x104>)
 8007706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007708:	f003 0303 	and.w	r3, r3, #3
 800770c:	2b03      	cmp	r3, #3
 800770e:	d079      	beq.n	8007804 <RCCEx_PLL3_Config+0x100>
{
 8007710:	b570      	push	{r4, r5, r6, lr}
 8007712:	4605      	mov	r5, r0
 8007714:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007716:	4a3c      	ldr	r2, [pc, #240]	@ (8007808 <RCCEx_PLL3_Config+0x104>)
 8007718:	6813      	ldr	r3, [r2, #0]
 800771a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800771e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007720:	f7fb fcf0 	bl	8003104 <HAL_GetTick>
 8007724:	4604      	mov	r4, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007726:	4b38      	ldr	r3, [pc, #224]	@ (8007808 <RCCEx_PLL3_Config+0x104>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 800772e:	d006      	beq.n	800773e <RCCEx_PLL3_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007730:	f7fb fce8 	bl	8003104 <HAL_GetTick>
 8007734:	1b03      	subs	r3, r0, r4
 8007736:	2b02      	cmp	r3, #2
 8007738:	d9f5      	bls.n	8007726 <RCCEx_PLL3_Config+0x22>
      {
        return HAL_TIMEOUT;
 800773a:	2003      	movs	r0, #3

  }


  return status;
}
 800773c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800773e:	4b32      	ldr	r3, [pc, #200]	@ (8007808 <RCCEx_PLL3_Config+0x104>)
 8007740:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007742:	f022 727c 	bic.w	r2, r2, #66060288	@ 0x3f00000
 8007746:	6829      	ldr	r1, [r5, #0]
 8007748:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800774c:	629a      	str	r2, [r3, #40]	@ 0x28
 800774e:	686a      	ldr	r2, [r5, #4]
 8007750:	3a01      	subs	r2, #1
 8007752:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007756:	68a9      	ldr	r1, [r5, #8]
 8007758:	3901      	subs	r1, #1
 800775a:	0249      	lsls	r1, r1, #9
 800775c:	b289      	uxth	r1, r1
 800775e:	430a      	orrs	r2, r1
 8007760:	68e9      	ldr	r1, [r5, #12]
 8007762:	3901      	subs	r1, #1
 8007764:	0409      	lsls	r1, r1, #16
 8007766:	f401 01fe 	and.w	r1, r1, #8323072	@ 0x7f0000
 800776a:	430a      	orrs	r2, r1
 800776c:	6929      	ldr	r1, [r5, #16]
 800776e:	3901      	subs	r1, #1
 8007770:	0609      	lsls	r1, r1, #24
 8007772:	f001 41fe 	and.w	r1, r1, #2130706432	@ 0x7f000000
 8007776:	430a      	orrs	r2, r1
 8007778:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800777a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800777c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007780:	6969      	ldr	r1, [r5, #20]
 8007782:	430a      	orrs	r2, r1
 8007784:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007788:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800778c:	69a9      	ldr	r1, [r5, #24]
 800778e:	430a      	orrs	r2, r1
 8007790:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007792:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007794:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007798:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800779a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800779c:	4a1b      	ldr	r2, [pc, #108]	@ (800780c <RCCEx_PLL3_Config+0x108>)
 800779e:	400a      	ands	r2, r1
 80077a0:	69e9      	ldr	r1, [r5, #28]
 80077a2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80077a6:	645a      	str	r2, [r3, #68]	@ 0x44
    __HAL_RCC_PLL3FRACN_ENABLE();
 80077a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80077ae:	62da      	str	r2, [r3, #44]	@ 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80077b0:	b9c6      	cbnz	r6, 80077e4 <RCCEx_PLL3_Config+0xe0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80077b2:	461a      	mov	r2, r3
 80077b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077b6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80077ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
    __HAL_RCC_PLL3_ENABLE();
 80077bc:	4a12      	ldr	r2, [pc, #72]	@ (8007808 <RCCEx_PLL3_Config+0x104>)
 80077be:	6813      	ldr	r3, [r2, #0]
 80077c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80077c4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80077c6:	f7fb fc9d 	bl	8003104 <HAL_GetTick>
 80077ca:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80077cc:	4b0e      	ldr	r3, [pc, #56]	@ (8007808 <RCCEx_PLL3_Config+0x104>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 80077d4:	d114      	bne.n	8007800 <RCCEx_PLL3_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80077d6:	f7fb fc95 	bl	8003104 <HAL_GetTick>
 80077da:	1b00      	subs	r0, r0, r4
 80077dc:	2802      	cmp	r0, #2
 80077de:	d9f5      	bls.n	80077cc <RCCEx_PLL3_Config+0xc8>
        return HAL_TIMEOUT;
 80077e0:	2003      	movs	r0, #3
 80077e2:	e7ab      	b.n	800773c <RCCEx_PLL3_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 80077e4:	2e01      	cmp	r6, #1
 80077e6:	d005      	beq.n	80077f4 <RCCEx_PLL3_Config+0xf0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80077e8:	4a07      	ldr	r2, [pc, #28]	@ (8007808 <RCCEx_PLL3_Config+0x104>)
 80077ea:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80077ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80077f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80077f2:	e7e3      	b.n	80077bc <RCCEx_PLL3_Config+0xb8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80077f4:	4a04      	ldr	r2, [pc, #16]	@ (8007808 <RCCEx_PLL3_Config+0x104>)
 80077f6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80077f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80077fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80077fe:	e7dd      	b.n	80077bc <RCCEx_PLL3_Config+0xb8>
  return status;
 8007800:	2000      	movs	r0, #0
 8007802:	e79b      	b.n	800773c <RCCEx_PLL3_Config+0x38>
    return HAL_ERROR;
 8007804:	2001      	movs	r0, #1
}
 8007806:	4770      	bx	lr
 8007808:	58024400 	.word	0x58024400
 800780c:	ffff0007 	.word	0xffff0007

08007810 <HAL_RCCEx_PeriphCLKConfig>:
{
 8007810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007812:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007814:	6803      	ldr	r3, [r0, #0]
 8007816:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 800781a:	d030      	beq.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800781c:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 800781e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007822:	d026      	beq.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8007824:	d80e      	bhi.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8007826:	b1eb      	cbz	r3, 8007864 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8007828:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800782c:	d107      	bne.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800782e:	2102      	movs	r1, #2
 8007830:	3004      	adds	r0, #4
 8007832:	f7ff fee1 	bl	80075f8 <RCCEx_PLL2_Config>
 8007836:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007838:	b145      	cbz	r5, 800784c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800783a:	462e      	mov	r6, r5
 800783c:	e021      	b.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800783e:	2601      	movs	r6, #1
 8007840:	4635      	mov	r5, r6
 8007842:	e01e      	b.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8007844:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007848:	d109      	bne.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800784a:	2500      	movs	r5, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800784c:	4a95      	ldr	r2, [pc, #596]	@ (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800784e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8007850:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007854:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8007856:	430b      	orrs	r3, r1
 8007858:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800785a:	2600      	movs	r6, #0
 800785c:	e011      	b.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800785e:	2601      	movs	r6, #1
 8007860:	4635      	mov	r5, r6
 8007862:	e00e      	b.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007864:	4a8f      	ldr	r2, [pc, #572]	@ (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007866:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007868:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800786c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800786e:	2500      	movs	r5, #0
 8007870:	e7ec      	b.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007872:	2102      	movs	r1, #2
 8007874:	3024      	adds	r0, #36	@ 0x24
 8007876:	f7ff ff45 	bl	8007704 <RCCEx_PLL3_Config>
 800787a:	4605      	mov	r5, r0
      break;
 800787c:	e7dc      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x28>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800787e:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007880:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007882:	6823      	ldr	r3, [r4, #0]
 8007884:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8007888:	d014      	beq.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    switch(PeriphClkInit->Sai1ClockSelection)
 800788a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800788c:	2b04      	cmp	r3, #4
 800788e:	d830      	bhi.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007890:	e8df f003 	tbb	[pc, r3]
 8007894:	08282203 	.word	0x08282203
 8007898:	08          	.byte	0x08
 8007899:	00          	.byte	0x00
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800789a:	4a82      	ldr	r2, [pc, #520]	@ (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800789c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800789e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if(ret == HAL_OK)
 80078a4:	bb45      	cbnz	r5, 80078f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80078a6:	4a7f      	ldr	r2, [pc, #508]	@ (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80078a8:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80078aa:	f023 0307 	bic.w	r3, r3, #7
 80078ae:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80078b0:	430b      	orrs	r3, r1
 80078b2:	6513      	str	r3, [r2, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80078b4:	6823      	ldr	r3, [r4, #0]
 80078b6:	f413 7f00 	tst.w	r3, #512	@ 0x200
 80078ba:	d02f      	beq.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai23ClockSelection)
 80078bc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80078be:	2b80      	cmp	r3, #128	@ 0x80
 80078c0:	d049      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x146>
 80078c2:	d81e      	bhi.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0xf2>
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d040      	beq.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x13a>
 80078c8:	2b40      	cmp	r3, #64	@ 0x40
 80078ca:	d117      	bne.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0xec>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80078cc:	2100      	movs	r1, #0
 80078ce:	1d20      	adds	r0, r4, #4
 80078d0:	f7ff fe92 	bl	80075f8 <RCCEx_PLL2_Config>
 80078d4:	4605      	mov	r5, r0
      break;
 80078d6:	e019      	b.n	800790c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80078d8:	2100      	movs	r1, #0
 80078da:	1d20      	adds	r0, r4, #4
 80078dc:	f7ff fe8c 	bl	80075f8 <RCCEx_PLL2_Config>
 80078e0:	4605      	mov	r5, r0
      break;
 80078e2:	e7df      	b.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x94>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80078e4:	2100      	movs	r1, #0
 80078e6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80078ea:	f7ff ff0b 	bl	8007704 <RCCEx_PLL3_Config>
 80078ee:	4605      	mov	r5, r0
      break;
 80078f0:	e7d8      	b.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch(PeriphClkInit->Sai1ClockSelection)
 80078f2:	2601      	movs	r6, #1
 80078f4:	4635      	mov	r5, r6
 80078f6:	e7dd      	b.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80078f8:	462e      	mov	r6, r5
 80078fa:	e7db      	b.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    switch(PeriphClkInit->Sai23ClockSelection)
 80078fc:	2601      	movs	r6, #1
 80078fe:	4635      	mov	r5, r6
 8007900:	e00c      	b.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8007902:	2bc0      	cmp	r3, #192	@ 0xc0
 8007904:	d002      	beq.n	800790c <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8007906:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800790a:	d11b      	bne.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x134>
    if(ret == HAL_OK)
 800790c:	bb55      	cbnz	r5, 8007964 <HAL_RCCEx_PeriphCLKConfig+0x154>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800790e:	4a65      	ldr	r2, [pc, #404]	@ (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007910:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8007912:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 8007916:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8007918:	430b      	orrs	r3, r1
 800791a:	6513      	str	r3, [r2, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800791c:	6823      	ldr	r3, [r4, #0]
 800791e:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8007922:	d045      	beq.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    switch(PeriphClkInit->Sai4AClockSelection)
 8007924:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 8007928:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800792c:	d038      	beq.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800792e:	d81e      	bhi.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8007930:	b383      	cbz	r3, 8007994 <HAL_RCCEx_PeriphCLKConfig+0x184>
 8007932:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007936:	d117      	bne.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x158>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007938:	2100      	movs	r1, #0
 800793a:	1d20      	adds	r0, r4, #4
 800793c:	f7ff fe5c 	bl	80075f8 <RCCEx_PLL2_Config>
 8007940:	4605      	mov	r5, r0
      break;
 8007942:	e01a      	b.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x16a>
    switch(PeriphClkInit->Sai23ClockSelection)
 8007944:	2601      	movs	r6, #1
 8007946:	4635      	mov	r5, r6
 8007948:	e7e8      	b.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800794a:	4a56      	ldr	r2, [pc, #344]	@ (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800794c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800794e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007952:	62d3      	str	r3, [r2, #44]	@ 0x2c
      break;
 8007954:	e7da      	b.n	800790c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007956:	2100      	movs	r1, #0
 8007958:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800795c:	f7ff fed2 	bl	8007704 <RCCEx_PLL3_Config>
 8007960:	4605      	mov	r5, r0
      break;
 8007962:	e7d3      	b.n	800790c <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8007964:	462e      	mov	r6, r5
 8007966:	e7d9      	b.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai4AClockSelection)
 8007968:	2601      	movs	r6, #1
 800796a:	4635      	mov	r5, r6
 800796c:	e020      	b.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 800796e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007972:	d002      	beq.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8007974:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007978:	d109      	bne.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    if(ret == HAL_OK)
 800797a:	b9c5      	cbnz	r5, 80079ae <HAL_RCCEx_PeriphCLKConfig+0x19e>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800797c:	4a49      	ldr	r2, [pc, #292]	@ (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800797e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8007980:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 8007984:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
 8007988:	430b      	orrs	r3, r1
 800798a:	6593      	str	r3, [r2, #88]	@ 0x58
 800798c:	e010      	b.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    switch(PeriphClkInit->Sai4AClockSelection)
 800798e:	2601      	movs	r6, #1
 8007990:	4635      	mov	r5, r6
 8007992:	e00d      	b.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007994:	4a43      	ldr	r2, [pc, #268]	@ (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007996:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007998:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800799c:	62d3      	str	r3, [r2, #44]	@ 0x2c
      break;
 800799e:	e7ec      	b.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x16a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80079a0:	2100      	movs	r1, #0
 80079a2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80079a6:	f7ff fead 	bl	8007704 <RCCEx_PLL3_Config>
 80079aa:	4605      	mov	r5, r0
      break;
 80079ac:	e7e5      	b.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x16a>
 80079ae:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80079b0:	6823      	ldr	r3, [r4, #0]
 80079b2:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 80079b6:	d023      	beq.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    switch(PeriphClkInit->Sai4BClockSelection)
 80079b8:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
 80079bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80079c0:	d041      	beq.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x236>
 80079c2:	d80d      	bhi.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d038      	beq.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80079c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80079cc:	d105      	bne.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80079ce:	2100      	movs	r1, #0
 80079d0:	1d20      	adds	r0, r4, #4
 80079d2:	f7ff fe11 	bl	80075f8 <RCCEx_PLL2_Config>
 80079d6:	4605      	mov	r5, r0
      break;
 80079d8:	e008      	b.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    switch(PeriphClkInit->Sai4BClockSelection)
 80079da:	2601      	movs	r6, #1
 80079dc:	4635      	mov	r5, r6
 80079de:	e00f      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80079e0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80079e4:	d002      	beq.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80079e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80079ea:	d123      	bne.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x224>
    if(ret == HAL_OK)
 80079ec:	2d00      	cmp	r5, #0
 80079ee:	d131      	bne.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x244>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80079f0:	4a2c      	ldr	r2, [pc, #176]	@ (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80079f2:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80079f4:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80079f8:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 80079fc:	430b      	orrs	r3, r1
 80079fe:	6593      	str	r3, [r2, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007a00:	6823      	ldr	r3, [r4, #0]
 8007a02:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8007a06:	d02e      	beq.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x256>
    switch(PeriphClkInit->QspiClockSelection)
 8007a08:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8007a0a:	2b20      	cmp	r3, #32
 8007a0c:	d03f      	beq.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8007a0e:	d826      	bhi.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8007a10:	b133      	cbz	r3, 8007a20 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8007a12:	2b10      	cmp	r3, #16
 8007a14:	d120      	bne.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x248>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a16:	4a23      	ldr	r2, [pc, #140]	@ (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007a18:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007a1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a1e:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if(ret == HAL_OK)
 8007a20:	2d00      	cmp	r5, #0
 8007a22:	d13a      	bne.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x28a>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007a24:	4a1f      	ldr	r2, [pc, #124]	@ (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007a26:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8007a28:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8007a2c:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007a2e:	430b      	orrs	r3, r1
 8007a30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007a32:	e018      	b.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x256>
    switch(PeriphClkInit->Sai4BClockSelection)
 8007a34:	2601      	movs	r6, #1
 8007a36:	4635      	mov	r5, r6
 8007a38:	e7e2      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a3a:	4a1a      	ldr	r2, [pc, #104]	@ (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007a3c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007a3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a42:	62d3      	str	r3, [r2, #44]	@ 0x2c
      break;
 8007a44:	e7d2      	b.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a46:	2100      	movs	r1, #0
 8007a48:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007a4c:	f7ff fe5a 	bl	8007704 <RCCEx_PLL3_Config>
 8007a50:	4605      	mov	r5, r0
      break;
 8007a52:	e7cb      	b.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007a54:	462e      	mov	r6, r5
 8007a56:	e7d3      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    switch(PeriphClkInit->QspiClockSelection)
 8007a58:	2601      	movs	r6, #1
 8007a5a:	4635      	mov	r5, r6
 8007a5c:	e003      	b.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8007a5e:	2b30      	cmp	r3, #48	@ 0x30
 8007a60:	d0de      	beq.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8007a62:	2601      	movs	r6, #1
 8007a64:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007a66:	6823      	ldr	r3, [r4, #0]
 8007a68:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8007a6c:	d02b      	beq.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    switch(PeriphClkInit->Spi123ClockSelection)
 8007a6e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8007a70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a74:	d04c      	beq.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8007a76:	d817      	bhi.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d043      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8007a7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a80:	d10d      	bne.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0x28e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a82:	2100      	movs	r1, #0
 8007a84:	1d20      	adds	r0, r4, #4
 8007a86:	f7ff fdb7 	bl	80075f8 <RCCEx_PLL2_Config>
 8007a8a:	4605      	mov	r5, r0
      break;
 8007a8c:	e012      	b.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007a8e:	2102      	movs	r1, #2
 8007a90:	1d20      	adds	r0, r4, #4
 8007a92:	f7ff fdb1 	bl	80075f8 <RCCEx_PLL2_Config>
 8007a96:	4605      	mov	r5, r0
      break;
 8007a98:	e7c2      	b.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8007a9a:	462e      	mov	r6, r5
 8007a9c:	e7e3      	b.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x256>
    switch(PeriphClkInit->Spi123ClockSelection)
 8007a9e:	2601      	movs	r6, #1
 8007aa0:	4635      	mov	r5, r6
 8007aa2:	e010      	b.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8007aa4:	58024400 	.word	0x58024400
 8007aa8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007aac:	d002      	beq.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8007aae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ab2:	d124      	bne.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    if(ret == HAL_OK)
 8007ab4:	2d00      	cmp	r5, #0
 8007ab6:	d132      	bne.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007ab8:	4a75      	ldr	r2, [pc, #468]	@ (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007aba:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8007abc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ac0:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8007ac2:	430b      	orrs	r3, r1
 8007ac4:	6513      	str	r3, [r2, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007ac6:	6823      	ldr	r3, [r4, #0]
 8007ac8:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8007acc:	d037      	beq.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x32e>
    switch(PeriphClkInit->Spi45ClockSelection)
 8007ace:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8007ad0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ad4:	d051      	beq.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8007ad6:	d827      	bhi.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8007ad8:	b13b      	cbz	r3, 8007aea <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007ada:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ade:	d120      	bne.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x312>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007ae0:	2101      	movs	r1, #1
 8007ae2:	1d20      	adds	r0, r4, #4
 8007ae4:	f7ff fd88 	bl	80075f8 <RCCEx_PLL2_Config>
 8007ae8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007aea:	2d00      	cmp	r5, #0
 8007aec:	d14c      	bne.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x378>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007aee:	4a68      	ldr	r2, [pc, #416]	@ (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007af0:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8007af2:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8007af6:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8007af8:	430b      	orrs	r3, r1
 8007afa:	6513      	str	r3, [r2, #80]	@ 0x50
 8007afc:	e01f      	b.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x32e>
    switch(PeriphClkInit->Spi123ClockSelection)
 8007afe:	2601      	movs	r6, #1
 8007b00:	4635      	mov	r5, r6
 8007b02:	e7e0      	b.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b04:	4a62      	ldr	r2, [pc, #392]	@ (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007b06:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007b08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
      break;
 8007b0e:	e7d1      	b.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007b10:	2100      	movs	r1, #0
 8007b12:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007b16:	f7ff fdf5 	bl	8007704 <RCCEx_PLL3_Config>
 8007b1a:	4605      	mov	r5, r0
      break;
 8007b1c:	e7ca      	b.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8007b1e:	462e      	mov	r6, r5
 8007b20:	e7d1      	b.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    switch(PeriphClkInit->Spi45ClockSelection)
 8007b22:	2601      	movs	r6, #1
 8007b24:	4635      	mov	r5, r6
 8007b26:	e00a      	b.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8007b28:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007b2c:	d0dd      	beq.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007b2e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007b32:	d0da      	beq.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007b34:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007b38:	d0d7      	beq.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007b3a:	2601      	movs	r6, #1
 8007b3c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007b3e:	6823      	ldr	r3, [r4, #0]
 8007b40:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8007b44:	d030      	beq.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    switch(PeriphClkInit->Spi6ClockSelection)
 8007b46:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
 8007b4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b4e:	d044      	beq.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 8007b50:	d81f      	bhi.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007b52:	b13b      	cbz	r3, 8007b64 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8007b54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b58:	d118      	bne.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x37c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007b5a:	2101      	movs	r1, #1
 8007b5c:	1d20      	adds	r0, r4, #4
 8007b5e:	f7ff fd4b 	bl	80075f8 <RCCEx_PLL2_Config>
 8007b62:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007b64:	2d00      	cmp	r5, #0
 8007b66:	d13f      	bne.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007b68:	4a49      	ldr	r2, [pc, #292]	@ (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007b6a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8007b6c:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 8007b70:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 8007b74:	430b      	orrs	r3, r1
 8007b76:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b78:	e016      	b.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x398>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b7a:	2101      	movs	r1, #1
 8007b7c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007b80:	f7ff fdc0 	bl	8007704 <RCCEx_PLL3_Config>
 8007b84:	4605      	mov	r5, r0
      break;
 8007b86:	e7b0      	b.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007b88:	462e      	mov	r6, r5
 8007b8a:	e7d8      	b.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x32e>
    switch(PeriphClkInit->Spi6ClockSelection)
 8007b8c:	2601      	movs	r6, #1
 8007b8e:	4635      	mov	r5, r6
 8007b90:	e00a      	b.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8007b92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b96:	d0e5      	beq.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8007b98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b9c:	d0e2      	beq.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8007b9e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007ba2:	d0df      	beq.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8007ba4:	2601      	movs	r6, #1
 8007ba6:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007ba8:	6823      	ldr	r3, [r4, #0]
 8007baa:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8007bae:	d009      	beq.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    switch(PeriphClkInit->FdcanClockSelection)
 8007bb0:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8007bb2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007bb6:	d019      	beq.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 8007bb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bbc:	d024      	beq.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007bbe:	b1d3      	cbz	r3, 8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007bc0:	2601      	movs	r6, #1
 8007bc2:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007bc4:	6823      	ldr	r3, [r4, #0]
 8007bc6:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8007bca:	d032      	beq.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x422>
    switch(PeriphClkInit->FmcClockSelection)
 8007bcc:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007bce:	2b03      	cmp	r3, #3
 8007bd0:	d859      	bhi.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007bd2:	e8df f003 	tbb	[pc, r3]
 8007bd6:	2126      	.short	0x2126
 8007bd8:	2652      	.short	0x2652
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007bda:	2101      	movs	r1, #1
 8007bdc:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007be0:	f7ff fd90 	bl	8007704 <RCCEx_PLL3_Config>
 8007be4:	4605      	mov	r5, r0
      break;
 8007be6:	e7bd      	b.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8007be8:	462e      	mov	r6, r5
 8007bea:	e7dd      	b.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x398>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bec:	4a28      	ldr	r2, [pc, #160]	@ (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007bee:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007bf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007bf4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if(ret == HAL_OK)
 8007bf6:	b96d      	cbnz	r5, 8007c14 <HAL_RCCEx_PeriphCLKConfig+0x404>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007bf8:	4a25      	ldr	r2, [pc, #148]	@ (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007bfa:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8007bfc:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8007c00:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8007c02:	430b      	orrs	r3, r1
 8007c04:	6513      	str	r3, [r2, #80]	@ 0x50
 8007c06:	e7dd      	b.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007c08:	2101      	movs	r1, #1
 8007c0a:	1d20      	adds	r0, r4, #4
 8007c0c:	f7ff fcf4 	bl	80075f8 <RCCEx_PLL2_Config>
 8007c10:	4605      	mov	r5, r0
      break;
 8007c12:	e7f0      	b.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007c14:	462e      	mov	r6, r5
 8007c16:	e7d5      	b.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c18:	4a1d      	ldr	r2, [pc, #116]	@ (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007c1a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007c1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c20:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if(ret == HAL_OK)
 8007c22:	bb9d      	cbnz	r5, 8007c8c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007c24:	4a1a      	ldr	r2, [pc, #104]	@ (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007c26:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8007c28:	f023 0303 	bic.w	r3, r3, #3
 8007c2c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007c2e:	430b      	orrs	r3, r1
 8007c30:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007c32:	6823      	ldr	r3, [r4, #0]
 8007c34:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8007c38:	d12c      	bne.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x484>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007c3a:	6823      	ldr	r3, [r4, #0]
 8007c3c:	f013 0f01 	tst.w	r3, #1
 8007c40:	f000 80a3 	beq.w	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x57a>
    switch(PeriphClkInit->Usart16ClockSelection)
 8007c44:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8007c46:	2b28      	cmp	r3, #40	@ 0x28
 8007c48:	f200 809d 	bhi.w	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x576>
 8007c4c:	e8df f003 	tbb	[pc, r3]
 8007c50:	9b9b9b8b 	.word	0x9b9b9b8b
 8007c54:	9b9b9b9b 	.word	0x9b9b9b9b
 8007c58:	9b9b9b86 	.word	0x9b9b9b86
 8007c5c:	9b9b9b9b 	.word	0x9b9b9b9b
 8007c60:	9b9b9b94 	.word	0x9b9b9b94
 8007c64:	9b9b9b9b 	.word	0x9b9b9b9b
 8007c68:	9b9b9b8b 	.word	0x9b9b9b8b
 8007c6c:	9b9b9b9b 	.word	0x9b9b9b9b
 8007c70:	9b9b9b8b 	.word	0x9b9b9b8b
 8007c74:	9b9b9b9b 	.word	0x9b9b9b9b
 8007c78:	8b          	.byte	0x8b
 8007c79:	00          	.byte	0x00
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007c7a:	2102      	movs	r1, #2
 8007c7c:	1d20      	adds	r0, r4, #4
 8007c7e:	f7ff fcbb 	bl	80075f8 <RCCEx_PLL2_Config>
 8007c82:	4605      	mov	r5, r0
      break;
 8007c84:	e7cd      	b.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0x412>
    switch(PeriphClkInit->FmcClockSelection)
 8007c86:	2601      	movs	r6, #1
 8007c88:	4635      	mov	r5, r6
 8007c8a:	e7d2      	b.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x422>
 8007c8c:	462e      	mov	r6, r5
 8007c8e:	e7d0      	b.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x422>
 8007c90:	58024400 	.word	0x58024400
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c94:	4a8f      	ldr	r2, [pc, #572]	@ (8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007c96:	6813      	ldr	r3, [r2, #0]
 8007c98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c9c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8007c9e:	f7fb fa31 	bl	8003104 <HAL_GetTick>
 8007ca2:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ca4:	4b8b      	ldr	r3, [pc, #556]	@ (8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8007cac:	d105      	bne.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0x4aa>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007cae:	f7fb fa29 	bl	8003104 <HAL_GetTick>
 8007cb2:	1bc0      	subs	r0, r0, r7
 8007cb4:	2864      	cmp	r0, #100	@ 0x64
 8007cb6:	d9f5      	bls.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x494>
        ret = HAL_TIMEOUT;
 8007cb8:	2503      	movs	r5, #3
    if(ret == HAL_OK)
 8007cba:	2d00      	cmp	r5, #0
 8007cbc:	d14a      	bne.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x544>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007cbe:	4b86      	ldr	r3, [pc, #536]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cc2:	f8d4 20b0 	ldr.w	r2, [r4, #176]	@ 0xb0
 8007cc6:	4053      	eors	r3, r2
 8007cc8:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8007ccc:	d00c      	beq.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007cce:	4b82      	ldr	r3, [pc, #520]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007cd0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007cd2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8007cd6:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007cd8:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8007cdc:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007cde:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007ce0:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8007ce4:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 8007ce6:	671a      	str	r2, [r3, #112]	@ 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007ce8:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 8007cec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cf0:	d015      	beq.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x50e>
      if(ret == HAL_OK)
 8007cf2:	bb8d      	cbnz	r5, 8007d58 <HAL_RCCEx_PeriphCLKConfig+0x548>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007cf4:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 8007cf8:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8007cfc:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8007d00:	d01e      	beq.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x530>
 8007d02:	4a75      	ldr	r2, [pc, #468]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007d04:	6913      	ldr	r3, [r2, #16]
 8007d06:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007d0a:	6113      	str	r3, [r2, #16]
 8007d0c:	4972      	ldr	r1, [pc, #456]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007d0e:	6f0b      	ldr	r3, [r1, #112]	@ 0x70
 8007d10:	f8d4 20b0 	ldr.w	r2, [r4, #176]	@ 0xb0
 8007d14:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	670b      	str	r3, [r1, #112]	@ 0x70
 8007d1c:	e78d      	b.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x42a>
        tickstart = HAL_GetTick();
 8007d1e:	f7fb f9f1 	bl	8003104 <HAL_GetTick>
 8007d22:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d24:	4b6c      	ldr	r3, [pc, #432]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007d26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d28:	f013 0f02 	tst.w	r3, #2
 8007d2c:	d1e1      	bne.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d2e:	f7fb f9e9 	bl	8003104 <HAL_GetTick>
 8007d32:	1bc0      	subs	r0, r0, r7
 8007d34:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007d38:	4298      	cmp	r0, r3
 8007d3a:	d9f3      	bls.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x514>
            ret = HAL_TIMEOUT;
 8007d3c:	2503      	movs	r5, #3
 8007d3e:	e7d8      	b.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d40:	4865      	ldr	r0, [pc, #404]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007d42:	6902      	ldr	r2, [r0, #16]
 8007d44:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 8007d48:	4964      	ldr	r1, [pc, #400]	@ (8007edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d4a:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	6103      	str	r3, [r0, #16]
 8007d52:	e7db      	b.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      status = ret;
 8007d54:	462e      	mov	r6, r5
 8007d56:	e770      	b.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x42a>
        status = ret;
 8007d58:	462e      	mov	r6, r5
 8007d5a:	e76e      	b.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x42a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007d5c:	2101      	movs	r1, #1
 8007d5e:	1d20      	adds	r0, r4, #4
 8007d60:	f7ff fc4a 	bl	80075f8 <RCCEx_PLL2_Config>
 8007d64:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007d66:	b9e5      	cbnz	r5, 8007da2 <HAL_RCCEx_PeriphCLKConfig+0x592>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007d68:	4a5b      	ldr	r2, [pc, #364]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007d6a:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8007d6c:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8007d70:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8007d72:	430b      	orrs	r3, r1
 8007d74:	6553      	str	r3, [r2, #84]	@ 0x54
 8007d76:	e008      	b.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x57a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007d78:	2101      	movs	r1, #1
 8007d7a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007d7e:	f7ff fcc1 	bl	8007704 <RCCEx_PLL3_Config>
 8007d82:	4605      	mov	r5, r0
      break;
 8007d84:	e7ef      	b.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x556>
    switch(PeriphClkInit->Usart16ClockSelection)
 8007d86:	2601      	movs	r6, #1
 8007d88:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007d8a:	6823      	ldr	r3, [r4, #0]
 8007d8c:	f013 0f02 	tst.w	r3, #2
 8007d90:	d016      	beq.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007d92:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8007d94:	2b05      	cmp	r3, #5
 8007d96:	d827      	bhi.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
 8007d98:	e8df f003 	tbb	[pc, r3]
 8007d9c:	0a1f050a 	.word	0x0a1f050a
 8007da0:	0a0a      	.short	0x0a0a
 8007da2:	462e      	mov	r6, r5
 8007da4:	e7f1      	b.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x57a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007da6:	2101      	movs	r1, #1
 8007da8:	1d20      	adds	r0, r4, #4
 8007daa:	f7ff fc25 	bl	80075f8 <RCCEx_PLL2_Config>
 8007dae:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007db0:	b9ed      	cbnz	r5, 8007dee <HAL_RCCEx_PeriphCLKConfig+0x5de>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007db2:	4a49      	ldr	r2, [pc, #292]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007db4:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8007db6:	f023 0307 	bic.w	r3, r3, #7
 8007dba:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8007dbc:	430b      	orrs	r3, r1
 8007dbe:	6553      	str	r3, [r2, #84]	@ 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007dc0:	6823      	ldr	r3, [r4, #0]
 8007dc2:	f013 0f04 	tst.w	r3, #4
 8007dc6:	d022      	beq.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007dc8:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8007dcc:	2b05      	cmp	r3, #5
 8007dce:	d843      	bhi.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8007dd0:	e8df f003 	tbb	[pc, r3]
 8007dd4:	143b0f14 	.word	0x143b0f14
 8007dd8:	1414      	.short	0x1414
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007dda:	2101      	movs	r1, #1
 8007ddc:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007de0:	f7ff fc90 	bl	8007704 <RCCEx_PLL3_Config>
 8007de4:	4605      	mov	r5, r0
      break;
 8007de6:	e7e3      	b.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007de8:	2601      	movs	r6, #1
 8007dea:	4635      	mov	r5, r6
 8007dec:	e7e8      	b.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
 8007dee:	462e      	mov	r6, r5
 8007df0:	e7e6      	b.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007df2:	2101      	movs	r1, #1
 8007df4:	1d20      	adds	r0, r4, #4
 8007df6:	f7ff fbff 	bl	80075f8 <RCCEx_PLL2_Config>
 8007dfa:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007dfc:	bb7d      	cbnz	r5, 8007e5e <HAL_RCCEx_PeriphCLKConfig+0x64e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007dfe:	4a36      	ldr	r2, [pc, #216]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007e00:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8007e02:	f023 0307 	bic.w	r3, r3, #7
 8007e06:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 8007e0a:	430b      	orrs	r3, r1
 8007e0c:	6593      	str	r3, [r2, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007e0e:	6823      	ldr	r3, [r4, #0]
 8007e10:	f013 0f20 	tst.w	r3, #32
 8007e14:	d033      	beq.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x66e>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007e16:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 8007e1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e1e:	d04c      	beq.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8007e20:	d822      	bhi.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x658>
 8007e22:	b13b      	cbz	r3, 8007e34 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8007e24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e28:	d11b      	bne.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x652>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e2a:	2100      	movs	r1, #0
 8007e2c:	1d20      	adds	r0, r4, #4
 8007e2e:	f7ff fbe3 	bl	80075f8 <RCCEx_PLL2_Config>
 8007e32:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007e34:	2d00      	cmp	r5, #0
 8007e36:	d147      	bne.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007e38:	4a27      	ldr	r2, [pc, #156]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007e3a:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8007e3c:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 8007e40:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
 8007e44:	430b      	orrs	r3, r1
 8007e46:	6553      	str	r3, [r2, #84]	@ 0x54
 8007e48:	e019      	b.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x66e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007e4a:	2101      	movs	r1, #1
 8007e4c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007e50:	f7ff fc58 	bl	8007704 <RCCEx_PLL3_Config>
 8007e54:	4605      	mov	r5, r0
      break;
 8007e56:	e7d1      	b.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007e58:	2601      	movs	r6, #1
 8007e5a:	4635      	mov	r5, r6
 8007e5c:	e7d7      	b.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x5fe>
 8007e5e:	462e      	mov	r6, r5
 8007e60:	e7d5      	b.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007e62:	2601      	movs	r6, #1
 8007e64:	4635      	mov	r5, r6
 8007e66:	e00a      	b.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007e68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e6c:	d0e2      	beq.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8007e6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007e72:	d0df      	beq.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8007e74:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007e78:	d0dc      	beq.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8007e7a:	2601      	movs	r6, #1
 8007e7c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007e7e:	6823      	ldr	r3, [r4, #0]
 8007e80:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8007e84:	d037      	beq.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007e86:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8007e8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e8e:	d052      	beq.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x726>
 8007e90:	d826      	bhi.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 8007e92:	b13b      	cbz	r3, 8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x694>
 8007e94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e98:	d118      	bne.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e9a:	2100      	movs	r1, #0
 8007e9c:	1d20      	adds	r0, r4, #4
 8007e9e:	f7ff fbab 	bl	80075f8 <RCCEx_PLL2_Config>
 8007ea2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007ea4:	2d00      	cmp	r5, #0
 8007ea6:	d14d      	bne.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x734>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007ea8:	4a0b      	ldr	r2, [pc, #44]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007eaa:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8007eac:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8007eb0:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
 8007eb4:	430b      	orrs	r3, r1
 8007eb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8007eb8:	e01d      	b.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007eba:	2102      	movs	r1, #2
 8007ebc:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007ec0:	f7ff fc20 	bl	8007704 <RCCEx_PLL3_Config>
 8007ec4:	4605      	mov	r5, r0
      break;
 8007ec6:	e7b5      	b.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8007ec8:	462e      	mov	r6, r5
 8007eca:	e7d8      	b.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x66e>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007ecc:	2601      	movs	r6, #1
 8007ece:	4635      	mov	r5, r6
 8007ed0:	e011      	b.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
 8007ed2:	bf00      	nop
 8007ed4:	58024800 	.word	0x58024800
 8007ed8:	58024400 	.word	0x58024400
 8007edc:	00ffffcf 	.word	0x00ffffcf
 8007ee0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ee4:	d0de      	beq.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x694>
 8007ee6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007eea:	d0db      	beq.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x694>
 8007eec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007ef0:	d0d8      	beq.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x694>
 8007ef2:	2601      	movs	r6, #1
 8007ef4:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007ef6:	6823      	ldr	r3, [r4, #0]
 8007ef8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007efc:	d032      	beq.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x754>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007efe:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8007f02:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f06:	f000 809d 	beq.w	8008044 <HAL_RCCEx_PeriphCLKConfig+0x834>
 8007f0a:	d820      	bhi.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007f0c:	b13b      	cbz	r3, 8007f1e <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8007f0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f12:	d119      	bne.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x738>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f14:	2100      	movs	r1, #0
 8007f16:	1d20      	adds	r0, r4, #4
 8007f18:	f7ff fb6e 	bl	80075f8 <RCCEx_PLL2_Config>
 8007f1c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007f1e:	2d00      	cmp	r5, #0
 8007f20:	f040 8097 	bne.w	8008052 <HAL_RCCEx_PeriphCLKConfig+0x842>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007f24:	4aa5      	ldr	r2, [pc, #660]	@ (80081bc <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8007f26:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8007f28:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8007f2c:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 8007f30:	430b      	orrs	r3, r1
 8007f32:	6593      	str	r3, [r2, #88]	@ 0x58
 8007f34:	e016      	b.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x754>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007f36:	2102      	movs	r1, #2
 8007f38:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007f3c:	f7ff fbe2 	bl	8007704 <RCCEx_PLL3_Config>
 8007f40:	4605      	mov	r5, r0
      break;
 8007f42:	e7af      	b.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x694>
 8007f44:	462e      	mov	r6, r5
 8007f46:	e7d6      	b.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007f48:	2601      	movs	r6, #1
 8007f4a:	4635      	mov	r5, r6
 8007f4c:	e00a      	b.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8007f4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f52:	d0e4      	beq.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8007f54:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007f58:	d0e1      	beq.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8007f5a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007f5e:	d0de      	beq.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8007f60:	2601      	movs	r6, #1
 8007f62:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007f64:	6823      	ldr	r3, [r4, #0]
 8007f66:	f013 0f08 	tst.w	r3, #8
 8007f6a:	d00c      	beq.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x776>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007f6c:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8007f70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f74:	d06f      	beq.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x846>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007f76:	4a91      	ldr	r2, [pc, #580]	@ (80081bc <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8007f78:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8007f7a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8007f7e:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8007f82:	430b      	orrs	r3, r1
 8007f84:	6553      	str	r3, [r2, #84]	@ 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007f86:	6823      	ldr	r3, [r4, #0]
 8007f88:	f013 0f10 	tst.w	r3, #16
 8007f8c:	d00c      	beq.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x798>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007f8e:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 8007f92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f96:	d067      	beq.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0x858>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007f98:	4a88      	ldr	r2, [pc, #544]	@ (80081bc <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8007f9a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8007f9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007fa0:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8007fa4:	430b      	orrs	r3, r1
 8007fa6:	6593      	str	r3, [r2, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007fa8:	6823      	ldr	r3, [r4, #0]
 8007faa:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8007fae:	d00b      	beq.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    switch(PeriphClkInit->AdcClockSelection)
 8007fb0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 8007fb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fb8:	d06e      	beq.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8007fba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007fbe:	d061      	beq.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x874>
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d05a      	beq.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x86a>
 8007fc4:	2601      	movs	r6, #1
 8007fc6:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007fc8:	6823      	ldr	r3, [r4, #0]
 8007fca:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8007fce:	d00c      	beq.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x7da>
    switch(PeriphClkInit->UsbClockSelection)
 8007fd0:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8007fd4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007fd8:	d076      	beq.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8007fda:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007fde:	d069      	beq.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 8007fe0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007fe4:	d061      	beq.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8007fe6:	2601      	movs	r6, #1
 8007fe8:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007fea:	6823      	ldr	r3, [r4, #0]
 8007fec:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8007ff0:	d007      	beq.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    switch(PeriphClkInit->SdmmcClockSelection)
 8007ff2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d070      	beq.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x8ca>
 8007ff8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ffc:	d07b      	beq.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8007ffe:	2601      	movs	r6, #1
 8008000:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008002:	6823      	ldr	r3, [r4, #0]
 8008004:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8008008:	d17d      	bne.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800800a:	6823      	ldr	r3, [r4, #0]
 800800c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8008010:	f000 8086 	beq.w	8008120 <HAL_RCCEx_PeriphCLKConfig+0x910>
    switch(PeriphClkInit->RngClockSelection)
 8008014:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8008016:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800801a:	f000 80c6 	beq.w	80081aa <HAL_RCCEx_PeriphCLKConfig+0x99a>
 800801e:	d97c      	bls.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8008020:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008024:	d003      	beq.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8008026:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800802a:	f040 80bc 	bne.w	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x996>
    if(ret == HAL_OK)
 800802e:	2d00      	cmp	r5, #0
 8008030:	f040 80c1 	bne.w	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008034:	4a61      	ldr	r2, [pc, #388]	@ (80081bc <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8008036:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8008038:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800803c:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 800803e:	430b      	orrs	r3, r1
 8008040:	6553      	str	r3, [r2, #84]	@ 0x54
 8008042:	e06d      	b.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x910>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008044:	2102      	movs	r1, #2
 8008046:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800804a:	f7ff fb5b 	bl	8007704 <RCCEx_PLL3_Config>
 800804e:	4605      	mov	r5, r0
      break;
 8008050:	e765      	b.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8008052:	462e      	mov	r6, r5
 8008054:	e786      	b.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x754>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008056:	2102      	movs	r1, #2
 8008058:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800805c:	f7ff fb52 	bl	8007704 <RCCEx_PLL3_Config>
 8008060:	2800      	cmp	r0, #0
 8008062:	d088      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x766>
          status = HAL_ERROR;
 8008064:	2601      	movs	r6, #1
 8008066:	e786      	b.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x766>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008068:	2102      	movs	r1, #2
 800806a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800806e:	f7ff fb49 	bl	8007704 <RCCEx_PLL3_Config>
 8008072:	2800      	cmp	r0, #0
 8008074:	d090      	beq.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x788>
        status = HAL_ERROR;
 8008076:	2601      	movs	r6, #1
 8008078:	e78e      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x788>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800807a:	2100      	movs	r1, #0
 800807c:	1d20      	adds	r0, r4, #4
 800807e:	f7ff fabb 	bl	80075f8 <RCCEx_PLL2_Config>
 8008082:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008084:	b97d      	cbnz	r5, 80080a6 <HAL_RCCEx_PeriphCLKConfig+0x896>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008086:	4a4d      	ldr	r2, [pc, #308]	@ (80081bc <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8008088:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800808a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800808e:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 8008092:	430b      	orrs	r3, r1
 8008094:	6593      	str	r3, [r2, #88]	@ 0x58
 8008096:	e797      	b.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008098:	2102      	movs	r1, #2
 800809a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800809e:	f7ff fb31 	bl	8007704 <RCCEx_PLL3_Config>
 80080a2:	4605      	mov	r5, r0
      break;
 80080a4:	e7ee      	b.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x874>
 80080a6:	462e      	mov	r6, r5
 80080a8:	e78e      	b.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080aa:	4a44      	ldr	r2, [pc, #272]	@ (80081bc <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 80080ac:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80080ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if(ret == HAL_OK)
 80080b4:	b97d      	cbnz	r5, 80080d6 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80080b6:	4a41      	ldr	r2, [pc, #260]	@ (80081bc <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 80080b8:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80080ba:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80080be:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 80080c2:	430b      	orrs	r3, r1
 80080c4:	6553      	str	r3, [r2, #84]	@ 0x54
 80080c6:	e790      	b.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x7da>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80080c8:	2101      	movs	r1, #1
 80080ca:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80080ce:	f7ff fb19 	bl	8007704 <RCCEx_PLL3_Config>
 80080d2:	4605      	mov	r5, r0
      break;
 80080d4:	e7ee      	b.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 80080d6:	462e      	mov	r6, r5
 80080d8:	e787      	b.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x7da>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080da:	4a38      	ldr	r2, [pc, #224]	@ (80081bc <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 80080dc:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80080de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if(ret == HAL_OK)
 80080e4:	b96d      	cbnz	r5, 8008102 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80080e6:	4a35      	ldr	r2, [pc, #212]	@ (80081bc <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 80080e8:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80080ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80080ee:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 80080f0:	430b      	orrs	r3, r1
 80080f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80080f4:	e785      	b.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80080f6:	2102      	movs	r1, #2
 80080f8:	1d20      	adds	r0, r4, #4
 80080fa:	f7ff fa7d 	bl	80075f8 <RCCEx_PLL2_Config>
 80080fe:	4605      	mov	r5, r0
      break;
 8008100:	e7f0      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x8d4>
 8008102:	462e      	mov	r6, r5
 8008104:	e77d      	b.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008106:	2102      	movs	r1, #2
 8008108:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800810c:	f7ff fafa 	bl	8007704 <RCCEx_PLL3_Config>
 8008110:	2800      	cmp	r0, #0
 8008112:	f43f af7a 	beq.w	800800a <HAL_RCCEx_PeriphCLKConfig+0x7fa>
      status=HAL_ERROR;
 8008116:	2601      	movs	r6, #1
 8008118:	e777      	b.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x7fa>
    switch(PeriphClkInit->RngClockSelection)
 800811a:	2b00      	cmp	r3, #0
 800811c:	d087      	beq.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x81e>
 800811e:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008120:	6823      	ldr	r3, [r4, #0]
 8008122:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8008126:	d006      	beq.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x926>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008128:	4a24      	ldr	r2, [pc, #144]	@ (80081bc <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800812a:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800812c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008130:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8008132:	430b      	orrs	r3, r1
 8008134:	6513      	str	r3, [r2, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008136:	6823      	ldr	r3, [r4, #0]
 8008138:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800813c:	d007      	beq.n	800814e <HAL_RCCEx_PeriphCLKConfig+0x93e>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800813e:	4a1f      	ldr	r2, [pc, #124]	@ (80081bc <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8008140:	6913      	ldr	r3, [r2, #16]
 8008142:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008146:	f8d4 10b4 	ldr.w	r1, [r4, #180]	@ 0xb4
 800814a:	430b      	orrs	r3, r1
 800814c:	6113      	str	r3, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800814e:	6823      	ldr	r3, [r4, #0]
 8008150:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8008154:	d006      	beq.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x954>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008156:	4a19      	ldr	r2, [pc, #100]	@ (80081bc <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8008158:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800815a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800815e:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8008160:	430b      	orrs	r3, r1
 8008162:	6513      	str	r3, [r2, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008164:	6823      	ldr	r3, [r4, #0]
 8008166:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800816a:	d009      	beq.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x970>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800816c:	4b13      	ldr	r3, [pc, #76]	@ (80081bc <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800816e:	691a      	ldr	r2, [r3, #16]
 8008170:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008174:	611a      	str	r2, [r3, #16]
 8008176:	691a      	ldr	r2, [r3, #16]
 8008178:	f8d4 10b8 	ldr.w	r1, [r4, #184]	@ 0xb8
 800817c:	430a      	orrs	r2, r1
 800817e:	611a      	str	r2, [r3, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008180:	6823      	ldr	r3, [r4, #0]
 8008182:	2b00      	cmp	r3, #0
 8008184:	db1c      	blt.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008186:	6823      	ldr	r3, [r4, #0]
 8008188:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800818c:	d007      	beq.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x98e>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800818e:	4a0b      	ldr	r2, [pc, #44]	@ (80081bc <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8008190:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8008192:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8008196:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 800819a:	430b      	orrs	r3, r1
 800819c:	6553      	str	r3, [r2, #84]	@ 0x54
  if (status == HAL_OK)
 800819e:	b106      	cbz	r6, 80081a2 <HAL_RCCEx_PeriphCLKConfig+0x992>
  return HAL_ERROR;
 80081a0:	2601      	movs	r6, #1
}
 80081a2:	4630      	mov	r0, r6
 80081a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PeriphClkInit->RngClockSelection)
 80081a6:	2601      	movs	r6, #1
 80081a8:	e7ba      	b.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x910>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081aa:	4a04      	ldr	r2, [pc, #16]	@ (80081bc <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 80081ac:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80081ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80081b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
      break;
 80081b4:	e73b      	b.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x81e>
 80081b6:	462e      	mov	r6, r5
 80081b8:	e7b2      	b.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x910>
 80081ba:	bf00      	nop
 80081bc:	58024400 	.word	0x58024400
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80081c0:	4a03      	ldr	r2, [pc, #12]	@ (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80081c2:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80081c4:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 80081c8:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80081ca:	430b      	orrs	r3, r1
 80081cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80081ce:	e7da      	b.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x976>
 80081d0:	58024400 	.word	0x58024400

080081d4 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 80081d4:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80081d6:	f7ff f99f 	bl	8007518 <HAL_RCC_GetHCLKFreq>
 80081da:	4b05      	ldr	r3, [pc, #20]	@ (80081f0 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 80081dc:	6a1b      	ldr	r3, [r3, #32]
 80081de:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80081e2:	4a04      	ldr	r2, [pc, #16]	@ (80081f4 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 80081e4:	5cd3      	ldrb	r3, [r2, r3]
 80081e6:	f003 031f 	and.w	r3, r3, #31
}
 80081ea:	40d8      	lsrs	r0, r3
 80081ec:	bd08      	pop	{r3, pc}
 80081ee:	bf00      	nop
 80081f0:	58024400 	.word	0x58024400
 80081f4:	0801a018 	.word	0x0801a018

080081f8 <HAL_RCCEx_GetPLL2ClockFreq>:
{
 80081f8:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80081fa:	4b78      	ldr	r3, [pc, #480]	@ (80083dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80081fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80081fe:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8008200:	f3c4 3c05 	ubfx	ip, r4, #12, #6
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008204:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008206:	f3c1 1100 	ubfx	r1, r1, #4, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800820a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800820c:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8008210:	fb01 f303 	mul.w	r3, r1, r3
  if (pll2m != 0U)
 8008214:	f414 3f7c 	tst.w	r4, #258048	@ 0x3f000
 8008218:	f000 80db 	beq.w	80083d2 <HAL_RCCEx_GetPLL2ClockFreq+0x1da>
 800821c:	f002 0203 	and.w	r2, r2, #3
 8008220:	ee07 3a90 	vmov	s15, r3
 8008224:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8008228:	2a01      	cmp	r2, #1
 800822a:	d066      	beq.n	80082fa <HAL_RCCEx_GetPLL2ClockFreq+0x102>
 800822c:	2a02      	cmp	r2, #2
 800822e:	f000 80b3 	beq.w	8008398 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008232:	b1e2      	cbz	r2, 800826e <HAL_RCCEx_GetPLL2ClockFreq+0x76>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008234:	ee07 ca10 	vmov	s14, ip
 8008238:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800823c:	ed9f 6a68 	vldr	s12, [pc, #416]	@ 80083e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8008240:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008244:	4b65      	ldr	r3, [pc, #404]	@ (80083dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8008246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800824c:	ee06 3a90 	vmov	s13, r3
 8008250:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8008254:	ed9f 6a63 	vldr	s12, [pc, #396]	@ 80083e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8008258:	ee67 7a86 	vmul.f32	s15, s15, s12
 800825c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008260:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008264:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008268:	ee27 7a27 	vmul.f32	s14, s14, s15
      break;
 800826c:	e061      	b.n	8008332 <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800826e:	4b5b      	ldr	r3, [pc, #364]	@ (80083dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f013 0f20 	tst.w	r3, #32
 8008276:	d023      	beq.n	80082c0 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008278:	4958      	ldr	r1, [pc, #352]	@ (80083dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800827a:	680a      	ldr	r2, [r1, #0]
 800827c:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8008280:	4b59      	ldr	r3, [pc, #356]	@ (80083e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>)
 8008282:	40d3      	lsrs	r3, r2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008284:	ee07 3a10 	vmov	s14, r3
 8008288:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800828c:	ee07 ca10 	vmov	s14, ip
 8008290:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8008294:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8008298:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 800829a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800829e:	ee06 3a90 	vmov	s13, r3
 80082a2:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80082a6:	ed9f 6a4f 	vldr	s12, [pc, #316]	@ 80083e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 80082aa:	ee67 7a86 	vmul.f32	s15, s15, s12
 80082ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80082be:	e038      	b.n	8008332 <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80082c0:	ee07 ca10 	vmov	s14, ip
 80082c4:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80082c8:	ed9f 6a48 	vldr	s12, [pc, #288]	@ 80083ec <HAL_RCCEx_GetPLL2ClockFreq+0x1f4>
 80082cc:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80082d0:	4b42      	ldr	r3, [pc, #264]	@ (80083dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80082d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082d8:	ee06 3a90 	vmov	s13, r3
 80082dc:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80082e0:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 80083e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 80082e4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80082e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80082f8:	e01b      	b.n	8008332 <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80082fa:	ee07 ca10 	vmov	s14, ip
 80082fe:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008302:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 80083e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8008306:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800830a:	4b34      	ldr	r3, [pc, #208]	@ (80083dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800830c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800830e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008312:	ee06 3a90 	vmov	s13, r3
 8008316:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800831a:	ed9f 6a32 	vldr	s12, [pc, #200]	@ 80083e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 800831e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008326:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800832a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800832e:	ee27 7a27 	vmul.f32	s14, s14, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008332:	4a2a      	ldr	r2, [pc, #168]	@ (80083dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8008334:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8008336:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800833a:	ee07 3a90 	vmov	s15, r3
 800833e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008342:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800834a:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800834e:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8008352:	ed80 6a00 	vstr	s12, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008356:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8008358:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800835c:	ee07 3a90 	vmov	s15, r3
 8008360:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008364:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008368:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800836c:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8008370:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008374:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8008376:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800837a:	ee07 3a90 	vmov	s15, r3
 800837e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008386:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800838a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800838e:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8008392:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008396:	4770      	bx	lr
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008398:	ee07 ca10 	vmov	s14, ip
 800839c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80083a0:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80083f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1f8>
 80083a4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80083a8:	4b0c      	ldr	r3, [pc, #48]	@ (80083dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80083aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083b0:	ee06 3a90 	vmov	s13, r3
 80083b4:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80083b8:	ed9f 6a0a 	vldr	s12, [pc, #40]	@ 80083e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 80083bc:	ee67 7a86 	vmul.f32	s15, s15, s12
 80083c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083cc:	ee27 7a27 	vmul.f32	s14, s14, s15
      break;
 80083d0:	e7af      	b.n	8008332 <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80083d2:	2300      	movs	r3, #0
 80083d4:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80083d6:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80083d8:	6083      	str	r3, [r0, #8]
}
 80083da:	e7da      	b.n	8008392 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>
 80083dc:	58024400 	.word	0x58024400
 80083e0:	4a742400 	.word	0x4a742400
 80083e4:	39000000 	.word	0x39000000
 80083e8:	03d09000 	.word	0x03d09000
 80083ec:	4c742400 	.word	0x4c742400
 80083f0:	4bb71b00 	.word	0x4bb71b00

080083f4 <HAL_RCCEx_GetPLL3ClockFreq>:
{
 80083f4:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80083f6:	4b78      	ldr	r3, [pc, #480]	@ (80085d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80083f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80083fa:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 80083fc:	f3c4 5c05 	ubfx	ip, r4, #20, #6
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008400:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008402:	f3c1 2100 	ubfx	r1, r1, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008406:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008408:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 800840c:	fb01 f303 	mul.w	r3, r1, r3
  if (pll3m != 0U)
 8008410:	f014 7f7c 	tst.w	r4, #66060288	@ 0x3f00000
 8008414:	f000 80db 	beq.w	80085ce <HAL_RCCEx_GetPLL3ClockFreq+0x1da>
 8008418:	f002 0203 	and.w	r2, r2, #3
 800841c:	ee07 3a90 	vmov	s15, r3
 8008420:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8008424:	2a01      	cmp	r2, #1
 8008426:	d066      	beq.n	80084f6 <HAL_RCCEx_GetPLL3ClockFreq+0x102>
 8008428:	2a02      	cmp	r2, #2
 800842a:	f000 80b3 	beq.w	8008594 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800842e:	b1e2      	cbz	r2, 800846a <HAL_RCCEx_GetPLL3ClockFreq+0x76>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008430:	ee07 ca10 	vmov	s14, ip
 8008434:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008438:	ed9f 6a68 	vldr	s12, [pc, #416]	@ 80085dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 800843c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008440:	4b65      	ldr	r3, [pc, #404]	@ (80085d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8008442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008448:	ee06 3a90 	vmov	s13, r3
 800844c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8008450:	ed9f 6a63 	vldr	s12, [pc, #396]	@ 80085e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8008454:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008458:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800845c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008460:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008464:	ee27 7a27 	vmul.f32	s14, s14, s15
      break;
 8008468:	e061      	b.n	800852e <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800846a:	4b5b      	ldr	r3, [pc, #364]	@ (80085d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f013 0f20 	tst.w	r3, #32
 8008472:	d023      	beq.n	80084bc <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008474:	4958      	ldr	r1, [pc, #352]	@ (80085d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8008476:	680a      	ldr	r2, [r1, #0]
 8008478:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800847c:	4b59      	ldr	r3, [pc, #356]	@ (80085e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>)
 800847e:	40d3      	lsrs	r3, r2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008480:	ee07 3a10 	vmov	s14, r3
 8008484:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008488:	ee07 ca10 	vmov	s14, ip
 800848c:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8008490:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8008494:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800849a:	ee06 3a90 	vmov	s13, r3
 800849e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80084a2:	ed9f 6a4f 	vldr	s12, [pc, #316]	@ 80085e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 80084a6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80084aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80084ba:	e038      	b.n	800852e <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80084bc:	ee07 ca10 	vmov	s14, ip
 80084c0:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80084c4:	ed9f 6a48 	vldr	s12, [pc, #288]	@ 80085e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1f4>
 80084c8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80084cc:	4b42      	ldr	r3, [pc, #264]	@ (80085d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80084ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084d4:	ee06 3a90 	vmov	s13, r3
 80084d8:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80084dc:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 80085e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 80084e0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80084e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80084f4:	e01b      	b.n	800852e <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80084f6:	ee07 ca10 	vmov	s14, ip
 80084fa:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80084fe:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 80085dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8008502:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008506:	4b34      	ldr	r3, [pc, #208]	@ (80085d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8008508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800850a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800850e:	ee06 3a90 	vmov	s13, r3
 8008512:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8008516:	ed9f 6a32 	vldr	s12, [pc, #200]	@ 80085e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 800851a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800851e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008522:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800852a:	ee27 7a27 	vmul.f32	s14, s14, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800852e:	4a2a      	ldr	r2, [pc, #168]	@ (80085d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8008530:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8008532:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008536:	ee07 3a90 	vmov	s15, r3
 800853a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800853e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008546:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800854a:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 800854e:	ed80 6a00 	vstr	s12, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008552:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8008554:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8008558:	ee07 3a90 	vmov	s15, r3
 800855c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008560:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008564:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8008568:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 800856c:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008570:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8008572:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8008576:	ee07 3a90 	vmov	s15, r3
 800857a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800857e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008582:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008586:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800858a:	edc0 6a02 	vstr	s13, [r0, #8]
}
 800858e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008592:	4770      	bx	lr
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008594:	ee07 ca10 	vmov	s14, ip
 8008598:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800859c:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80085ec <HAL_RCCEx_GetPLL3ClockFreq+0x1f8>
 80085a0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80085a4:	4b0c      	ldr	r3, [pc, #48]	@ (80085d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80085a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085ac:	ee06 3a90 	vmov	s13, r3
 80085b0:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80085b4:	ed9f 6a0a 	vldr	s12, [pc, #40]	@ 80085e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 80085b8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80085bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085c8:	ee27 7a27 	vmul.f32	s14, s14, s15
      break;
 80085cc:	e7af      	b.n	800852e <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80085ce:	2300      	movs	r3, #0
 80085d0:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80085d2:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80085d4:	6083      	str	r3, [r0, #8]
}
 80085d6:	e7da      	b.n	800858e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>
 80085d8:	58024400 	.word	0x58024400
 80085dc:	4a742400 	.word	0x4a742400
 80085e0:	39000000 	.word	0x39000000
 80085e4:	03d09000 	.word	0x03d09000
 80085e8:	4c742400 	.word	0x4c742400
 80085ec:	4bb71b00 	.word	0x4bb71b00

080085f0 <HAL_RCCEx_GetPLL1ClockFreq>:
{
 80085f0:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80085f2:	4b78      	ldr	r3, [pc, #480]	@ (80087d4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 80085f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80085f6:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 80085f8:	f3c4 1c05 	ubfx	ip, r4, #4, #6
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80085fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80085fe:	f001 0101 	and.w	r1, r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008602:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008604:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8008608:	fb01 f303 	mul.w	r3, r1, r3
  if (pll1m != 0U)
 800860c:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
 8008610:	f000 80db 	beq.w	80087ca <HAL_RCCEx_GetPLL1ClockFreq+0x1da>
 8008614:	f002 0203 	and.w	r2, r2, #3
 8008618:	ee07 3a90 	vmov	s15, r3
 800861c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8008620:	2a01      	cmp	r2, #1
 8008622:	d066      	beq.n	80086f2 <HAL_RCCEx_GetPLL1ClockFreq+0x102>
 8008624:	2a02      	cmp	r2, #2
 8008626:	f000 80b3 	beq.w	8008790 <HAL_RCCEx_GetPLL1ClockFreq+0x1a0>
 800862a:	b1e2      	cbz	r2, 8008666 <HAL_RCCEx_GetPLL1ClockFreq+0x76>
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800862c:	ee07 ca10 	vmov	s14, ip
 8008630:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008634:	ed9f 6a68 	vldr	s12, [pc, #416]	@ 80087d8 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8008638:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800863c:	4b65      	ldr	r3, [pc, #404]	@ (80087d4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 800863e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008644:	ee06 3a90 	vmov	s13, r3
 8008648:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800864c:	ed9f 6a63 	vldr	s12, [pc, #396]	@ 80087dc <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8008650:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008654:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008658:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800865c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008660:	ee27 7a27 	vmul.f32	s14, s14, s15
      break;
 8008664:	e061      	b.n	800872a <HAL_RCCEx_GetPLL1ClockFreq+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008666:	4b5b      	ldr	r3, [pc, #364]	@ (80087d4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f013 0f20 	tst.w	r3, #32
 800866e:	d023      	beq.n	80086b8 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008670:	4958      	ldr	r1, [pc, #352]	@ (80087d4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8008672:	680a      	ldr	r2, [r1, #0]
 8008674:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8008678:	4b59      	ldr	r3, [pc, #356]	@ (80087e0 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>)
 800867a:	40d3      	lsrs	r3, r2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800867c:	ee07 3a10 	vmov	s14, r3
 8008680:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008684:	ee07 ca10 	vmov	s14, ip
 8008688:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 800868c:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8008690:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8008692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008696:	ee06 3a90 	vmov	s13, r3
 800869a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800869e:	ed9f 6a4f 	vldr	s12, [pc, #316]	@ 80087dc <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 80086a2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80086a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80086b6:	e038      	b.n	800872a <HAL_RCCEx_GetPLL1ClockFreq+0x13a>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80086b8:	ee07 ca10 	vmov	s14, ip
 80086bc:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80086c0:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 80087d8 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 80086c4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80086c8:	4b42      	ldr	r3, [pc, #264]	@ (80087d4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 80086ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086d0:	ee06 3a90 	vmov	s13, r3
 80086d4:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80086d8:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 80087dc <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 80086dc:	ee67 7a86 	vmul.f32	s15, s15, s12
 80086e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80086f0:	e01b      	b.n	800872a <HAL_RCCEx_GetPLL1ClockFreq+0x13a>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80086f2:	ee07 ca10 	vmov	s14, ip
 80086f6:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80086fa:	ed9f 6a3a 	vldr	s12, [pc, #232]	@ 80087e4 <HAL_RCCEx_GetPLL1ClockFreq+0x1f4>
 80086fe:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008702:	4b34      	ldr	r3, [pc, #208]	@ (80087d4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8008704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800870a:	ee06 3a90 	vmov	s13, r3
 800870e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8008712:	ed9f 6a32 	vldr	s12, [pc, #200]	@ 80087dc <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8008716:	ee67 7a86 	vmul.f32	s15, s15, s12
 800871a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800871e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008726:	ee27 7a27 	vmul.f32	s14, s14, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800872a:	4a2a      	ldr	r2, [pc, #168]	@ (80087d4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 800872c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800872e:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008732:	ee07 3a90 	vmov	s15, r3
 8008736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800873a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800873e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008742:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8008746:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 800874a:	ed80 6a00 	vstr	s12, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800874e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8008750:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8008754:	ee07 3a90 	vmov	s15, r3
 8008758:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800875c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008760:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8008764:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8008768:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800876c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800876e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8008772:	ee07 3a90 	vmov	s15, r3
 8008776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800877a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800877e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008782:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8008786:	edc0 6a02 	vstr	s13, [r0, #8]
}
 800878a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800878e:	4770      	bx	lr
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008790:	ee07 ca10 	vmov	s14, ip
 8008794:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008798:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80087e8 <HAL_RCCEx_GetPLL1ClockFreq+0x1f8>
 800879c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80087a0:	4b0c      	ldr	r3, [pc, #48]	@ (80087d4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 80087a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087a8:	ee06 3a90 	vmov	s13, r3
 80087ac:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80087b0:	ed9f 6a0a 	vldr	s12, [pc, #40]	@ 80087dc <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 80087b4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80087b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087c4:	ee27 7a27 	vmul.f32	s14, s14, s15
      break;
 80087c8:	e7af      	b.n	800872a <HAL_RCCEx_GetPLL1ClockFreq+0x13a>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80087ca:	2300      	movs	r3, #0
 80087cc:	6003      	str	r3, [r0, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80087ce:	6043      	str	r3, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80087d0:	6083      	str	r3, [r0, #8]
}
 80087d2:	e7da      	b.n	800878a <HAL_RCCEx_GetPLL1ClockFreq+0x19a>
 80087d4:	58024400 	.word	0x58024400
 80087d8:	4c742400 	.word	0x4c742400
 80087dc:	39000000 	.word	0x39000000
 80087e0:	03d09000 	.word	0x03d09000
 80087e4:	4a742400 	.word	0x4a742400
 80087e8:	4bb71b00 	.word	0x4bb71b00

080087ec <HAL_RCCEx_GetPeriphCLKFreq>:
{
 80087ec:	b500      	push	{lr}
 80087ee:	b08b      	sub	sp, #44	@ 0x2c
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80087f0:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 80087f4:	d020      	beq.n	8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80087f6:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 80087fa:	d071      	beq.n	80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80087fc:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
 8008800:	f000 80c8 	beq.w	8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008804:	f5b0 6f00 	cmp.w	r0, #2048	@ 0x800
 8008808:	f000 8121 	beq.w	8008a4e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800880c:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8008810:	f000 8182 	beq.w	8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008814:	f5b0 2f00 	cmp.w	r0, #524288	@ 0x80000
 8008818:	f000 81db 	beq.w	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800881c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008820:	f000 821f 	beq.w	8008c62 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008824:	f5b0 4f80 	cmp.w	r0, #16384	@ 0x4000
 8008828:	f000 8239 	beq.w	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800882c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8008830:	f000 8284 	beq.w	8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x550>
      frequency = 0;
 8008834:	2000      	movs	r0, #0
 8008836:	e2b2      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008838:	4b95      	ldr	r3, [pc, #596]	@ (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800883a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800883c:	f003 0307 	and.w	r3, r3, #7
      switch (saiclocksource)
 8008840:	2b04      	cmp	r3, #4
 8008842:	f200 82a3 	bhi.w	8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8008846:	e8df f003 	tbb	[pc, r3]
 800884a:	1005      	.short	0x1005
 800884c:	031b      	.short	0x031b
 800884e:	26          	.byte	0x26
 800884f:	00          	.byte	0x00
 8008850:	4890      	ldr	r0, [pc, #576]	@ (8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8008852:	e2a4      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008854:	4b8e      	ldr	r3, [pc, #568]	@ (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008856:	6818      	ldr	r0, [r3, #0]
 8008858:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 800885c:	f000 829f 	beq.w	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008860:	a807      	add	r0, sp, #28
 8008862:	f7ff fec5 	bl	80085f0 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8008866:	9808      	ldr	r0, [sp, #32]
 8008868:	e299      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800886a:	4b89      	ldr	r3, [pc, #548]	@ (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800886c:	6818      	ldr	r0, [r3, #0]
 800886e:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8008872:	f000 8294 	beq.w	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008876:	a804      	add	r0, sp, #16
 8008878:	f7ff fcbe 	bl	80081f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800887c:	9804      	ldr	r0, [sp, #16]
 800887e:	e28e      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008880:	4b83      	ldr	r3, [pc, #524]	@ (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008882:	6818      	ldr	r0, [r3, #0]
 8008884:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8008888:	f000 8289 	beq.w	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800888c:	a801      	add	r0, sp, #4
 800888e:	f7ff fdb1 	bl	80083f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008892:	9801      	ldr	r0, [sp, #4]
 8008894:	e283      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008896:	4a7e      	ldr	r2, [pc, #504]	@ (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008898:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800889a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800889e:	6812      	ldr	r2, [r2, #0]
 80088a0:	f012 0f04 	tst.w	r2, #4
 80088a4:	d007      	beq.n	80088b6 <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 80088a6:	b933      	cbnz	r3, 80088b6 <HAL_RCCEx_GetPeriphCLKFreq+0xca>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80088a8:	4b79      	ldr	r3, [pc, #484]	@ (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80088b0:	4879      	ldr	r0, [pc, #484]	@ (8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 80088b2:	40d8      	lsrs	r0, r3
 80088b4:	e273      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80088b6:	4a76      	ldr	r2, [pc, #472]	@ (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80088b8:	6812      	ldr	r2, [r2, #0]
 80088ba:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80088be:	d003      	beq.n	80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80088c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80088c4:	f000 8264 	beq.w	8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80088c8:	4a71      	ldr	r2, [pc, #452]	@ (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80088ca:	6812      	ldr	r2, [r2, #0]
 80088cc:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80088d0:	f000 8260 	beq.w	8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80088d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088d8:	f000 825e 	beq.w	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>
            frequency = 0;
 80088dc:	2000      	movs	r0, #0
 80088de:	e25e      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80088e0:	4b6b      	ldr	r3, [pc, #428]	@ (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80088e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088e4:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
      switch (saiclocksource)
 80088e8:	2b80      	cmp	r3, #128	@ 0x80
 80088ea:	d033      	beq.n	8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 80088ec:	d915      	bls.n	800891a <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 80088ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80088f0:	f000 8254 	beq.w	8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 80088f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088f8:	d11f      	bne.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0x14e>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80088fa:	4a65      	ldr	r2, [pc, #404]	@ (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80088fc:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80088fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008902:	6812      	ldr	r2, [r2, #0]
 8008904:	f012 0f04 	tst.w	r2, #4
 8008908:	d02f      	beq.n	800896a <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800890a:	bb73      	cbnz	r3, 800896a <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800890c:	4b60      	ldr	r3, [pc, #384]	@ (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008914:	4860      	ldr	r0, [pc, #384]	@ (8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 8008916:	40d8      	lsrs	r0, r3
 8008918:	e241      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (saiclocksource)
 800891a:	b183      	cbz	r3, 800893e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 800891c:	2b40      	cmp	r3, #64	@ 0x40
 800891e:	d10a      	bne.n	8008936 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008920:	4b5b      	ldr	r3, [pc, #364]	@ (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008922:	6818      	ldr	r0, [r3, #0]
 8008924:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8008928:	f000 8239 	beq.w	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800892c:	a804      	add	r0, sp, #16
 800892e:	f7ff fc63 	bl	80081f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008932:	9804      	ldr	r0, [sp, #16]
 8008934:	e233      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = 0;
 8008936:	2000      	movs	r0, #0
 8008938:	e231      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 800893a:	2000      	movs	r0, #0
 800893c:	e22f      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800893e:	4b54      	ldr	r3, [pc, #336]	@ (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008940:	6818      	ldr	r0, [r3, #0]
 8008942:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8008946:	f000 822a 	beq.w	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800894a:	a807      	add	r0, sp, #28
 800894c:	f7ff fe50 	bl	80085f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008950:	9808      	ldr	r0, [sp, #32]
 8008952:	e224      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008954:	4b4e      	ldr	r3, [pc, #312]	@ (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008956:	6818      	ldr	r0, [r3, #0]
 8008958:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800895c:	f000 821f 	beq.w	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008960:	a801      	add	r0, sp, #4
 8008962:	f7ff fd47 	bl	80083f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008966:	9801      	ldr	r0, [sp, #4]
 8008968:	e219      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800896a:	4a49      	ldr	r2, [pc, #292]	@ (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800896c:	6812      	ldr	r2, [r2, #0]
 800896e:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8008972:	d003      	beq.n	800897c <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8008974:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008978:	f000 8214 	beq.w	8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800897c:	4a44      	ldr	r2, [pc, #272]	@ (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800897e:	6812      	ldr	r2, [r2, #0]
 8008980:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8008984:	f000 8210 	beq.w	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
 8008988:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800898c:	f000 820e 	beq.w	8008dac <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
            frequency = 0;
 8008990:	2000      	movs	r0, #0
 8008992:	e204      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008994:	4b3e      	ldr	r3, [pc, #248]	@ (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008998:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
      switch (saiclocksource)
 800899c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80089a0:	d035      	beq.n	8008a0e <HAL_RCCEx_GetPeriphCLKFreq+0x222>
 80089a2:	d916      	bls.n	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80089a4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80089a8:	f000 8202 	beq.w	8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 80089ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80089b0:	d120      	bne.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80089b2:	4a37      	ldr	r2, [pc, #220]	@ (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80089b4:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80089b6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80089ba:	6812      	ldr	r2, [r2, #0]
 80089bc:	f012 0f04 	tst.w	r2, #4
 80089c0:	d030      	beq.n	8008a24 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 80089c2:	bb7b      	cbnz	r3, 8008a24 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80089c4:	4b32      	ldr	r3, [pc, #200]	@ (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80089cc:	4832      	ldr	r0, [pc, #200]	@ (8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 80089ce:	40d8      	lsrs	r0, r3
 80089d0:	e1e5      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (saiclocksource)
 80089d2:	b18b      	cbz	r3, 80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 80089d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80089d8:	d10a      	bne.n	80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089da:	4b2d      	ldr	r3, [pc, #180]	@ (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80089dc:	6818      	ldr	r0, [r3, #0]
 80089de:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 80089e2:	f000 81dc 	beq.w	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089e6:	a804      	add	r0, sp, #16
 80089e8:	f7ff fc06 	bl	80081f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80089ec:	9804      	ldr	r0, [sp, #16]
 80089ee:	e1d6      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = 0;
 80089f0:	2000      	movs	r0, #0
 80089f2:	e1d4      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 80089f4:	2000      	movs	r0, #0
 80089f6:	e1d2      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80089f8:	4b25      	ldr	r3, [pc, #148]	@ (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80089fa:	6818      	ldr	r0, [r3, #0]
 80089fc:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8008a00:	f000 81cd 	beq.w	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a04:	a807      	add	r0, sp, #28
 8008a06:	f7ff fdf3 	bl	80085f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a0a:	9808      	ldr	r0, [sp, #32]
 8008a0c:	e1c7      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a0e:	4b20      	ldr	r3, [pc, #128]	@ (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008a10:	6818      	ldr	r0, [r3, #0]
 8008a12:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8008a16:	f000 81c2 	beq.w	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a1a:	a801      	add	r0, sp, #4
 8008a1c:	f7ff fcea 	bl	80083f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008a20:	9801      	ldr	r0, [sp, #4]
 8008a22:	e1bc      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a24:	4a1a      	ldr	r2, [pc, #104]	@ (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008a26:	6812      	ldr	r2, [r2, #0]
 8008a28:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8008a2c:	d003      	beq.n	8008a36 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
 8008a2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a32:	f000 81bf 	beq.w	8008db4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a36:	4a16      	ldr	r2, [pc, #88]	@ (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008a38:	6812      	ldr	r2, [r2, #0]
 8008a3a:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8008a3e:	f000 81bb 	beq.w	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8008a42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a46:	f000 81b9 	beq.w	8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>
            frequency = 0;
 8008a4a:	2000      	movs	r0, #0
 8008a4c:	e1a7      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008a4e:	4b10      	ldr	r3, [pc, #64]	@ (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a52:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
      switch (saiclocksource)
 8008a56:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a5a:	d03d      	beq.n	8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
 8008a5c:	d91e      	bls.n	8008a9c <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>
 8008a5e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008a62:	f000 81ad 	beq.w	8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8008a66:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008a6a:	d128      	bne.n	8008abe <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008a6c:	4a08      	ldr	r2, [pc, #32]	@ (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008a6e:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8008a70:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a74:	6812      	ldr	r2, [r2, #0]
 8008a76:	f012 0f04 	tst.w	r2, #4
 8008a7a:	d038      	beq.n	8008aee <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d136      	bne.n	8008aee <HAL_RCCEx_GetPeriphCLKFreq+0x302>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008a80:	4b03      	ldr	r3, [pc, #12]	@ (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008a88:	4803      	ldr	r0, [pc, #12]	@ (8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 8008a8a:	40d8      	lsrs	r0, r3
 8008a8c:	e187      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 8008a8e:	bf00      	nop
 8008a90:	58024400 	.word	0x58024400
 8008a94:	00bb8000 	.word	0x00bb8000
 8008a98:	03d09000 	.word	0x03d09000
      switch (saiclocksource)
 8008a9c:	b18b      	cbz	r3, 8008ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8008a9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008aa2:	d10a      	bne.n	8008aba <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008aa4:	4b99      	ldr	r3, [pc, #612]	@ (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008aa6:	6818      	ldr	r0, [r3, #0]
 8008aa8:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8008aac:	f000 8177 	beq.w	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ab0:	a804      	add	r0, sp, #16
 8008ab2:	f7ff fba1 	bl	80081f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008ab6:	9804      	ldr	r0, [sp, #16]
 8008ab8:	e171      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = 0;
 8008aba:	2000      	movs	r0, #0
 8008abc:	e16f      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 8008abe:	2000      	movs	r0, #0
 8008ac0:	e16d      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008ac2:	4b92      	ldr	r3, [pc, #584]	@ (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008ac4:	6818      	ldr	r0, [r3, #0]
 8008ac6:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8008aca:	f000 8168 	beq.w	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ace:	a807      	add	r0, sp, #28
 8008ad0:	f7ff fd8e 	bl	80085f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ad4:	9808      	ldr	r0, [sp, #32]
 8008ad6:	e162      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008ad8:	4b8c      	ldr	r3, [pc, #560]	@ (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008ada:	6818      	ldr	r0, [r3, #0]
 8008adc:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8008ae0:	f000 815d 	beq.w	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ae4:	a801      	add	r0, sp, #4
 8008ae6:	f7ff fc85 	bl	80083f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008aea:	9801      	ldr	r0, [sp, #4]
 8008aec:	e157      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008aee:	4a87      	ldr	r2, [pc, #540]	@ (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008af0:	6812      	ldr	r2, [r2, #0]
 8008af2:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8008af6:	d003      	beq.n	8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8008af8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008afc:	f000 8162 	beq.w	8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008b00:	4a82      	ldr	r2, [pc, #520]	@ (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008b02:	6812      	ldr	r2, [r2, #0]
 8008b04:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8008b08:	f000 815e 	beq.w	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
 8008b0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b10:	f000 815c 	beq.w	8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
            frequency = 0;
 8008b14:	2000      	movs	r0, #0
 8008b16:	e142      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008b18:	4b7c      	ldr	r3, [pc, #496]	@ (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008b1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b1c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
      switch (srcclk)
 8008b20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b24:	d035      	beq.n	8008b92 <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 8008b26:	d916      	bls.n	8008b56 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 8008b28:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008b2c:	f000 8150 	beq.w	8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8008b30:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b34:	d120      	bne.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008b36:	4a75      	ldr	r2, [pc, #468]	@ (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008b38:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8008b3a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008b3e:	6812      	ldr	r2, [r2, #0]
 8008b40:	f012 0f04 	tst.w	r2, #4
 8008b44:	d030      	beq.n	8008ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8008b46:	bb7b      	cbnz	r3, 8008ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008b48:	4b70      	ldr	r3, [pc, #448]	@ (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008b50:	486f      	ldr	r0, [pc, #444]	@ (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008b52:	40d8      	lsrs	r0, r3
 8008b54:	e123      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (srcclk)
 8008b56:	b18b      	cbz	r3, 8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8008b58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b5c:	d10a      	bne.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b5e:	4b6b      	ldr	r3, [pc, #428]	@ (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008b60:	6818      	ldr	r0, [r3, #0]
 8008b62:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8008b66:	f000 811a 	beq.w	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b6a:	a804      	add	r0, sp, #16
 8008b6c:	f7ff fb44 	bl	80081f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008b70:	9804      	ldr	r0, [sp, #16]
 8008b72:	e114      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = 0;
 8008b74:	2000      	movs	r0, #0
 8008b76:	e112      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 8008b78:	2000      	movs	r0, #0
 8008b7a:	e110      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b7c:	4b63      	ldr	r3, [pc, #396]	@ (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008b7e:	6818      	ldr	r0, [r3, #0]
 8008b80:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8008b84:	f000 810b 	beq.w	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b88:	a807      	add	r0, sp, #28
 8008b8a:	f7ff fd31 	bl	80085f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b8e:	9808      	ldr	r0, [sp, #32]
 8008b90:	e105      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b92:	4b5e      	ldr	r3, [pc, #376]	@ (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008b94:	6818      	ldr	r0, [r3, #0]
 8008b96:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8008b9a:	f000 8100 	beq.w	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b9e:	a801      	add	r0, sp, #4
 8008ba0:	f7ff fc28 	bl	80083f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008ba4:	9801      	ldr	r0, [sp, #4]
 8008ba6:	e0fa      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ba8:	4a58      	ldr	r2, [pc, #352]	@ (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008baa:	6812      	ldr	r2, [r2, #0]
 8008bac:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8008bb0:	d003      	beq.n	8008bba <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8008bb2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008bb6:	f000 810d 	beq.w	8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008bba:	4a54      	ldr	r2, [pc, #336]	@ (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008bbc:	6812      	ldr	r2, [r2, #0]
 8008bbe:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8008bc2:	f000 8109 	beq.w	8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
 8008bc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008bca:	f000 8107 	beq.w	8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
            frequency = 0;
 8008bce:	2000      	movs	r0, #0
 8008bd0:	e0e5      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008bd2:	4b4e      	ldr	r3, [pc, #312]	@ (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bd6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
      switch (srcclk)
 8008bda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008bde:	d010      	beq.n	8008c02 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 8008be0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008be4:	d018      	beq.n	8008c18 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
 8008be6:	b10b      	cbz	r3, 8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x400>
 8008be8:	2000      	movs	r0, #0
 8008bea:	e0d8      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008bec:	4b47      	ldr	r3, [pc, #284]	@ (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008bee:	6818      	ldr	r0, [r3, #0]
 8008bf0:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8008bf4:	f000 80d3 	beq.w	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bf8:	a804      	add	r0, sp, #16
 8008bfa:	f7ff fafd 	bl	80081f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008bfe:	9804      	ldr	r0, [sp, #16]
 8008c00:	e0cd      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c02:	4b42      	ldr	r3, [pc, #264]	@ (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008c04:	6818      	ldr	r0, [r3, #0]
 8008c06:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8008c0a:	f000 80c8 	beq.w	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c0e:	a801      	add	r0, sp, #4
 8008c10:	f7ff fbf0 	bl	80083f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008c14:	9803      	ldr	r0, [sp, #12]
 8008c16:	e0c2      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008c18:	4a3c      	ldr	r2, [pc, #240]	@ (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008c1a:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8008c1c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008c20:	6812      	ldr	r2, [r2, #0]
 8008c22:	f012 0f04 	tst.w	r2, #4
 8008c26:	d007      	beq.n	8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
 8008c28:	b933      	cbnz	r3, 8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008c2a:	4b38      	ldr	r3, [pc, #224]	@ (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008c32:	4837      	ldr	r0, [pc, #220]	@ (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008c34:	40d8      	lsrs	r0, r3
 8008c36:	e0b2      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008c38:	4a34      	ldr	r2, [pc, #208]	@ (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008c3a:	6812      	ldr	r2, [r2, #0]
 8008c3c:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8008c40:	d003      	beq.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
 8008c42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c46:	f000 80cb 	beq.w	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f4>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c4a:	4a30      	ldr	r2, [pc, #192]	@ (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008c4c:	6812      	ldr	r2, [r2, #0]
 8008c4e:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8008c52:	f000 80c7 	beq.w	8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
 8008c56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c5a:	f000 80c5 	beq.w	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
            frequency = 0;
 8008c5e:	2000      	movs	r0, #0
 8008c60:	e09d      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008c62:	4b2a      	ldr	r3, [pc, #168]	@ (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      switch (srcclk)
 8008c66:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 8008c6a:	d002      	beq.n	8008c72 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 8008c6c:	b963      	cbnz	r3, 8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x49c>
 8008c6e:	2000      	movs	r0, #0
 8008c70:	e095      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008c72:	4b26      	ldr	r3, [pc, #152]	@ (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008c74:	6818      	ldr	r0, [r3, #0]
 8008c76:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8008c7a:	f000 8090 	beq.w	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c7e:	a807      	add	r0, sp, #28
 8008c80:	f7ff fcb6 	bl	80085f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c84:	9808      	ldr	r0, [sp, #32]
 8008c86:	e08a      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c88:	4b20      	ldr	r3, [pc, #128]	@ (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008c8a:	6818      	ldr	r0, [r3, #0]
 8008c8c:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8008c90:	f000 8085 	beq.w	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c94:	a804      	add	r0, sp, #16
 8008c96:	f7ff faaf 	bl	80081f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008c9a:	9806      	ldr	r0, [sp, #24]
 8008c9c:	e07f      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8008c9e:	4b1b      	ldr	r3, [pc, #108]	@ (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ca2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
      switch (srcclk)
 8008ca6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008caa:	d035      	beq.n	8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
 8008cac:	d815      	bhi.n	8008cda <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 8008cae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008cb2:	d021      	beq.n	8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
 8008cb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008cb8:	d109      	bne.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008cba:	4b14      	ldr	r3, [pc, #80]	@ (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008cbc:	6818      	ldr	r0, [r3, #0]
 8008cbe:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8008cc2:	d06c      	beq.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cc4:	a801      	add	r0, sp, #4
 8008cc6:	f7ff fb95 	bl	80083f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008cca:	9802      	ldr	r0, [sp, #8]
 8008ccc:	e067      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (srcclk)
 8008cce:	b913      	cbnz	r3, 8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008cd0:	f7ff fa80 	bl	80081d4 <HAL_RCCEx_GetD3PCLK1Freq>
          break;
 8008cd4:	e063      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (srcclk)
 8008cd6:	2000      	movs	r0, #0
 8008cd8:	e061      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 8008cda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cde:	d026      	beq.n	8008d2e <HAL_RCCEx_GetPeriphCLKFreq+0x542>
 8008ce0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008ce4:	d106      	bne.n	8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008ce6:	4b09      	ldr	r3, [pc, #36]	@ (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008ce8:	6818      	ldr	r0, [r3, #0]
 8008cea:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8008cee:	d056      	beq.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = HSE_VALUE;
 8008cf0:	4808      	ldr	r0, [pc, #32]	@ (8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008cf2:	e054      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (srcclk)
 8008cf4:	2000      	movs	r0, #0
 8008cf6:	e052      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008cf8:	4b04      	ldr	r3, [pc, #16]	@ (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008cfa:	6818      	ldr	r0, [r3, #0]
 8008cfc:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8008d00:	d04d      	beq.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d02:	a804      	add	r0, sp, #16
 8008d04:	f7ff fa78 	bl	80081f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008d08:	9805      	ldr	r0, [sp, #20]
 8008d0a:	e048      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 8008d0c:	58024400 	.word	0x58024400
 8008d10:	03d09000 	.word	0x03d09000
 8008d14:	016e3600 	.word	0x016e3600
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008d18:	4b34      	ldr	r3, [pc, #208]	@ (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 8008d1a:	6818      	ldr	r0, [r3, #0]
 8008d1c:	f010 0004 	ands.w	r0, r0, #4
 8008d20:	d03d      	beq.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008d28:	4831      	ldr	r0, [pc, #196]	@ (8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8008d2a:	40d8      	lsrs	r0, r3
 8008d2c:	e037      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008d2e:	4b2f      	ldr	r3, [pc, #188]	@ (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 8008d30:	6818      	ldr	r0, [r3, #0]
 8008d32:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 8008d36:	d032      	beq.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = CSI_VALUE;
 8008d38:	482e      	ldr	r0, [pc, #184]	@ (8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 8008d3a:	e030      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8008d3c:	4b2b      	ldr	r3, [pc, #172]	@ (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 8008d3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d40:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
      switch (srcclk)
 8008d44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d48:	d00c      	beq.n	8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8008d4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d4e:	d013      	beq.n	8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>
 8008d50:	b10b      	cbz	r3, 8008d56 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8008d52:	2000      	movs	r0, #0
  return frequency;
 8008d54:	e023      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008d56:	4b25      	ldr	r3, [pc, #148]	@ (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 8008d58:	6818      	ldr	r0, [r3, #0]
 8008d5a:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8008d5e:	d01e      	beq.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = HSE_VALUE;
 8008d60:	4825      	ldr	r0, [pc, #148]	@ (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 8008d62:	e01c      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008d64:	4b21      	ldr	r3, [pc, #132]	@ (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 8008d66:	6818      	ldr	r0, [r3, #0]
 8008d68:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8008d6c:	d017      	beq.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d6e:	a807      	add	r0, sp, #28
 8008d70:	f7ff fc3e 	bl	80085f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d74:	9808      	ldr	r0, [sp, #32]
 8008d76:	e012      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d78:	4b1c      	ldr	r3, [pc, #112]	@ (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 8008d7a:	6818      	ldr	r0, [r3, #0]
 8008d7c:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8008d80:	d00d      	beq.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d82:	a804      	add	r0, sp, #16
 8008d84:	f7ff fa38 	bl	80081f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008d88:	9805      	ldr	r0, [sp, #20]
 8008d8a:	e008      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = 0;
 8008d8c:	2000      	movs	r0, #0
 8008d8e:	e006      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = CSI_VALUE;
 8008d90:	4818      	ldr	r0, [pc, #96]	@ (8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 8008d92:	e004      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = 0;
 8008d94:	2000      	movs	r0, #0
 8008d96:	e002      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = HSE_VALUE;
 8008d98:	4817      	ldr	r0, [pc, #92]	@ (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 8008d9a:	e000      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (saiclocksource)
 8008d9c:	4817      	ldr	r0, [pc, #92]	@ (8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0x610>)
}
 8008d9e:	b00b      	add	sp, #44	@ 0x2c
 8008da0:	f85d fb04 	ldr.w	pc, [sp], #4
            frequency = CSI_VALUE;
 8008da4:	4813      	ldr	r0, [pc, #76]	@ (8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 8008da6:	e7fa      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = 0;
 8008da8:	2000      	movs	r0, #0
 8008daa:	e7f8      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = HSE_VALUE;
 8008dac:	4812      	ldr	r0, [pc, #72]	@ (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 8008dae:	e7f6      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (saiclocksource)
 8008db0:	4812      	ldr	r0, [pc, #72]	@ (8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0x610>)
 8008db2:	e7f4      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = CSI_VALUE;
 8008db4:	480f      	ldr	r0, [pc, #60]	@ (8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 8008db6:	e7f2      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = 0;
 8008db8:	2000      	movs	r0, #0
 8008dba:	e7f0      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = HSE_VALUE;
 8008dbc:	480e      	ldr	r0, [pc, #56]	@ (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 8008dbe:	e7ee      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (saiclocksource)
 8008dc0:	480e      	ldr	r0, [pc, #56]	@ (8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0x610>)
 8008dc2:	e7ec      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = CSI_VALUE;
 8008dc4:	480b      	ldr	r0, [pc, #44]	@ (8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 8008dc6:	e7ea      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = 0;
 8008dc8:	2000      	movs	r0, #0
 8008dca:	e7e8      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = HSE_VALUE;
 8008dcc:	480a      	ldr	r0, [pc, #40]	@ (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 8008dce:	e7e6      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (srcclk)
 8008dd0:	480a      	ldr	r0, [pc, #40]	@ (8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0x610>)
 8008dd2:	e7e4      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = CSI_VALUE;
 8008dd4:	4807      	ldr	r0, [pc, #28]	@ (8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 8008dd6:	e7e2      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = 0;
 8008dd8:	2000      	movs	r0, #0
 8008dda:	e7e0      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = HSE_VALUE;
 8008ddc:	4806      	ldr	r0, [pc, #24]	@ (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 8008dde:	e7de      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = CSI_VALUE;
 8008de0:	4804      	ldr	r0, [pc, #16]	@ (8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 8008de2:	e7dc      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = 0;
 8008de4:	2000      	movs	r0, #0
 8008de6:	e7da      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = HSE_VALUE;
 8008de8:	4803      	ldr	r0, [pc, #12]	@ (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 8008dea:	e7d8      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 8008dec:	58024400 	.word	0x58024400
 8008df0:	03d09000 	.word	0x03d09000
 8008df4:	003d0900 	.word	0x003d0900
 8008df8:	016e3600 	.word	0x016e3600
 8008dfc:	00bb8000 	.word	0x00bb8000

08008e00 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008e00:	b570      	push	{r4, r5, r6, lr}
 8008e02:	b082      	sub	sp, #8
 8008e04:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8008e06:	2300      	movs	r3, #0
 8008e08:	9301      	str	r3, [sp, #4]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008e0a:	6800      	ldr	r0, [r0, #0]
 8008e0c:	f002 fde4 	bl	800b9d8 <SDMMC_CmdGoIdleState>
  if (errorstate != HAL_SD_ERROR_NONE)
 8008e10:	4605      	mov	r5, r0
 8008e12:	b110      	cbz	r0, 8008e1a <SD_PowerON+0x1a>
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
}
 8008e14:	4628      	mov	r0, r5
 8008e16:	b002      	add	sp, #8
 8008e18:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008e1a:	6820      	ldr	r0, [r4, #0]
 8008e1c:	f003 f8b4 	bl	800bf88 <SDMMC_CmdOperCond>
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8008e20:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8008e24:	d007      	beq.n	8008e36 <SD_PowerON+0x36>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008e26:	2301      	movs	r3, #1
 8008e28:	63e3      	str	r3, [r4, #60]	@ 0x3c
  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8008e2a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d00b      	beq.n	8008e48 <SD_PowerON+0x48>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008e30:	462e      	mov	r6, r5
 8008e32:	4628      	mov	r0, r5
 8008e34:	e014      	b.n	8008e60 <SD_PowerON+0x60>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008e36:	2300      	movs	r3, #0
 8008e38:	63e3      	str	r3, [r4, #60]	@ 0x3c
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008e3a:	6820      	ldr	r0, [r4, #0]
 8008e3c:	f002 fdcc 	bl	800b9d8 <SDMMC_CmdGoIdleState>
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e40:	2800      	cmp	r0, #0
 8008e42:	d0f2      	beq.n	8008e2a <SD_PowerON+0x2a>
      return errorstate;
 8008e44:	4605      	mov	r5, r0
 8008e46:	e7e5      	b.n	8008e14 <SD_PowerON+0x14>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008e48:	2100      	movs	r1, #0
 8008e4a:	6820      	ldr	r0, [r4, #0]
 8008e4c:	f002 fee7 	bl	800bc1e <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e50:	2800      	cmp	r0, #0
 8008e52:	d0ed      	beq.n	8008e30 <SD_PowerON+0x30>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008e54:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8008e58:	e7dc      	b.n	8008e14 <SD_PowerON+0x14>
    count++;
 8008e5a:	9b01      	ldr	r3, [sp, #4]
 8008e5c:	3301      	adds	r3, #1
 8008e5e:	9301      	str	r3, [sp, #4]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008e60:	9a01      	ldr	r2, [sp, #4]
 8008e62:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d813      	bhi.n	8008e92 <SD_PowerON+0x92>
 8008e6a:	b996      	cbnz	r6, 8008e92 <SD_PowerON+0x92>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008e6c:	2100      	movs	r1, #0
 8008e6e:	6820      	ldr	r0, [r4, #0]
 8008e70:	f002 fed5 	bl	800bc1e <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e74:	b9d0      	cbnz	r0, 8008eac <SD_PowerON+0xac>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8008e76:	4912      	ldr	r1, [pc, #72]	@ (8008ec0 <SD_PowerON+0xc0>)
 8008e78:	6820      	ldr	r0, [r4, #0]
 8008e7a:	f002 ffd1 	bl	800be20 <SDMMC_CmdAppOperCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e7e:	4606      	mov	r6, r0
 8008e80:	b9b0      	cbnz	r0, 8008eb0 <SD_PowerON+0xb0>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008e82:	2100      	movs	r1, #0
 8008e84:	6820      	ldr	r0, [r4, #0]
 8008e86:	f002 fd92 	bl	800b9ae <SDMMC_GetResponse>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008e8a:	0fc3      	lsrs	r3, r0, #31
 8008e8c:	d0e5      	beq.n	8008e5a <SD_PowerON+0x5a>
 8008e8e:	461e      	mov	r6, r3
 8008e90:	e7e3      	b.n	8008e5a <SD_PowerON+0x5a>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8008e92:	9a01      	ldr	r2, [sp, #4]
 8008e94:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d80c      	bhi.n	8008eb6 <SD_PowerON+0xb6>
  hsd->SdCard.CardType = CARD_SDSC;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	63a3      	str	r3, [r4, #56]	@ 0x38
  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8008ea0:	f010 4380 	ands.w	r3, r0, #1073741824	@ 0x40000000
 8008ea4:	d00a      	beq.n	8008ebc <SD_PowerON+0xbc>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008eaa:	e7b3      	b.n	8008e14 <SD_PowerON+0x14>
      return errorstate;
 8008eac:	4605      	mov	r5, r0
 8008eae:	e7b1      	b.n	8008e14 <SD_PowerON+0x14>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008eb0:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8008eb4:	e7ae      	b.n	8008e14 <SD_PowerON+0x14>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008eb6:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
 8008eba:	e7ab      	b.n	8008e14 <SD_PowerON+0x14>
  return HAL_SD_ERROR_NONE;
 8008ebc:	461d      	mov	r5, r3
 8008ebe:	e7a9      	b.n	8008e14 <SD_PowerON+0x14>
 8008ec0:	c1100000 	.word	0xc1100000

08008ec4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008ec4:	b570      	push	{r4, r5, r6, lr}
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8008ec6:	6a44      	ldr	r4, [r0, #36]	@ 0x24

  if (hsd->RxXferSize >= 32U)
 8008ec8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8008eca:	2b1f      	cmp	r3, #31
 8008ecc:	d815      	bhi.n	8008efa <SD_Read_IT+0x36>
    }

    hsd->pRxBuffPtr = tmp;
    hsd->RxXferSize -= 32U;
  }
}
 8008ece:	bd70      	pop	{r4, r5, r6, pc}
      data = SDMMC_ReadFIFO(hsd->Instance);
 8008ed0:	6830      	ldr	r0, [r6, #0]
 8008ed2:	f002 fd45 	bl	800b960 <SDMMC_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 8008ed6:	7020      	strb	r0, [r4, #0]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008ed8:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8008edc:	7063      	strb	r3, [r4, #1]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008ede:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8008ee2:	70a3      	strb	r3, [r4, #2]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008ee4:	0e00      	lsrs	r0, r0, #24
 8008ee6:	70e0      	strb	r0, [r4, #3]
      tmp++;
 8008ee8:	3404      	adds	r4, #4
    for (count = 0U; count < 8U; count++)
 8008eea:	3501      	adds	r5, #1
 8008eec:	2d07      	cmp	r5, #7
 8008eee:	d9ef      	bls.n	8008ed0 <SD_Read_IT+0xc>
    hsd->pRxBuffPtr = tmp;
 8008ef0:	6274      	str	r4, [r6, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 8008ef2:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8008ef4:	3b20      	subs	r3, #32
 8008ef6:	62b3      	str	r3, [r6, #40]	@ 0x28
}
 8008ef8:	e7e9      	b.n	8008ece <SD_Read_IT+0xa>
 8008efa:	4606      	mov	r6, r0
    for (count = 0U; count < 8U; count++)
 8008efc:	2500      	movs	r5, #0
 8008efe:	e7f5      	b.n	8008eec <SD_Read_IT+0x28>

08008f00 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008f00:	b570      	push	{r4, r5, r6, lr}
 8008f02:	b082      	sub	sp, #8
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8008f04:	69c4      	ldr	r4, [r0, #28]

  if (hsd->TxXferSize >= 32U)
 8008f06:	6a03      	ldr	r3, [r0, #32]
 8008f08:	2b1f      	cmp	r3, #31
 8008f0a:	d81c      	bhi.n	8008f46 <SD_Write_IT+0x46>
    }

    hsd->pTxBuffPtr = tmp;
    hsd->TxXferSize -= 32U;
  }
}
 8008f0c:	b002      	add	sp, #8
 8008f0e:	bd70      	pop	{r4, r5, r6, pc}
      data = (uint32_t)(*tmp);
 8008f10:	7823      	ldrb	r3, [r4, #0]
 8008f12:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 8008f14:	7862      	ldrb	r2, [r4, #1]
 8008f16:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008f1a:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 8008f1c:	78a2      	ldrb	r2, [r4, #2]
 8008f1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f22:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 8008f24:	78e2      	ldrb	r2, [r4, #3]
 8008f26:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008f2a:	9301      	str	r3, [sp, #4]
      tmp++;
 8008f2c:	3404      	adds	r4, #4
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008f2e:	a901      	add	r1, sp, #4
 8008f30:	6830      	ldr	r0, [r6, #0]
 8008f32:	f002 fd18 	bl	800b966 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8008f36:	3501      	adds	r5, #1
 8008f38:	2d07      	cmp	r5, #7
 8008f3a:	d9e9      	bls.n	8008f10 <SD_Write_IT+0x10>
    hsd->pTxBuffPtr = tmp;
 8008f3c:	61f4      	str	r4, [r6, #28]
    hsd->TxXferSize -= 32U;
 8008f3e:	6a33      	ldr	r3, [r6, #32]
 8008f40:	3b20      	subs	r3, #32
 8008f42:	6233      	str	r3, [r6, #32]
}
 8008f44:	e7e2      	b.n	8008f0c <SD_Write_IT+0xc>
 8008f46:	4606      	mov	r6, r0
    for (count = 0U; count < 8U; count++)
 8008f48:	2500      	movs	r5, #0
 8008f4a:	e7f5      	b.n	8008f38 <SD_Write_IT+0x38>

08008f4c <SD_SendSDStatus>:
{
 8008f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f4e:	b087      	sub	sp, #28
 8008f50:	4605      	mov	r5, r0
 8008f52:	460e      	mov	r6, r1
  uint32_t tickstart = HAL_GetTick();
 8008f54:	f7fa f8d6 	bl	8003104 <HAL_GetTick>
 8008f58:	4607      	mov	r7, r0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008f5a:	2100      	movs	r1, #0
 8008f5c:	6828      	ldr	r0, [r5, #0]
 8008f5e:	f002 fd26 	bl	800b9ae <SDMMC_GetResponse>
 8008f62:	f010 7f00 	tst.w	r0, #33554432	@ 0x2000000
 8008f66:	d164      	bne.n	8009032 <SD_SendSDStatus+0xe6>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8008f68:	2140      	movs	r1, #64	@ 0x40
 8008f6a:	6828      	ldr	r0, [r5, #0]
 8008f6c:	f002 fdf8 	bl	800bb60 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f70:	4603      	mov	r3, r0
 8008f72:	b110      	cbz	r0, 8008f7a <SD_SendSDStatus+0x2e>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008f74:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8008f76:	636a      	str	r2, [r5, #52]	@ 0x34
    return errorstate;
 8008f78:	e05d      	b.n	8009036 <SD_SendSDStatus+0xea>
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008f7a:	6c69      	ldr	r1, [r5, #68]	@ 0x44
 8008f7c:	0409      	lsls	r1, r1, #16
 8008f7e:	6828      	ldr	r0, [r5, #0]
 8008f80:	f002 fe4d 	bl	800bc1e <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f84:	4603      	mov	r3, r0
 8008f86:	b110      	cbz	r0, 8008f8e <SD_SendSDStatus+0x42>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008f88:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8008f8a:	636a      	str	r2, [r5, #52]	@ 0x34
    return errorstate;
 8008f8c:	e053      	b.n	8009036 <SD_SendSDStatus+0xea>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8008f92:	9300      	str	r3, [sp, #0]
  config.DataLength    = 64U;
 8008f94:	2340      	movs	r3, #64	@ 0x40
 8008f96:	9301      	str	r3, [sp, #4]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8008f98:	2360      	movs	r3, #96	@ 0x60
 8008f9a:	9302      	str	r3, [sp, #8]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008f9c:	2302      	movs	r3, #2
 8008f9e:	9303      	str	r3, [sp, #12]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	9304      	str	r3, [sp, #16]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008fa8:	4669      	mov	r1, sp
 8008faa:	6828      	ldr	r0, [r5, #0]
 8008fac:	f002 fd02 	bl	800b9b4 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008fb0:	6828      	ldr	r0, [r5, #0]
 8008fb2:	f002 fe98 	bl	800bce6 <SDMMC_CmdStatusRegister>
  if (errorstate != HAL_SD_ERROR_NONE)
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	b180      	cbz	r0, 8008fdc <SD_SendSDStatus+0x90>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008fba:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8008fbc:	636a      	str	r2, [r5, #52]	@ 0x34
    return errorstate;
 8008fbe:	e03a      	b.n	8009036 <SD_SendSDStatus+0xea>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008fc0:	6828      	ldr	r0, [r5, #0]
 8008fc2:	f002 fccd 	bl	800b960 <SDMMC_ReadFIFO>
 8008fc6:	f846 0b04 	str.w	r0, [r6], #4
      for (count = 0U; count < 8U; count++)
 8008fca:	3401      	adds	r4, #1
 8008fcc:	2c07      	cmp	r4, #7
 8008fce:	d9f7      	bls.n	8008fc0 <SD_SendSDStatus+0x74>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008fd0:	f7fa f898 	bl	8003104 <HAL_GetTick>
 8008fd4:	1bc0      	subs	r0, r0, r7
 8008fd6:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008fda:	d02f      	beq.n	800903c <SD_SendSDStatus+0xf0>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008fdc:	682b      	ldr	r3, [r5, #0]
 8008fde:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8008fe0:	f414 7495 	ands.w	r4, r4, #298	@ 0x12a
 8008fe4:	d104      	bne.n	8008ff0 <SD_SendSDStatus+0xa4>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008fe6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fe8:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8008fec:	d0f0      	beq.n	8008fd0 <SD_SendSDStatus+0x84>
 8008fee:	e7ed      	b.n	8008fcc <SD_SendSDStatus+0x80>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008ff0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ff2:	f012 0f08 	tst.w	r2, #8
 8008ff6:	d124      	bne.n	8009042 <SD_SendSDStatus+0xf6>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008ff8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ffa:	f012 0f02 	tst.w	r2, #2
 8008ffe:	d122      	bne.n	8009046 <SD_SendSDStatus+0xfa>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009000:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009002:	f013 0f20 	tst.w	r3, #32
 8009006:	d120      	bne.n	800904a <SD_SendSDStatus+0xfe>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009008:	6828      	ldr	r0, [r5, #0]
 800900a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800900c:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 8009010:	d00c      	beq.n	800902c <SD_SendSDStatus+0xe0>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009012:	f002 fca5 	bl	800b960 <SDMMC_ReadFIFO>
 8009016:	f846 0b04 	str.w	r0, [r6], #4
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800901a:	f7fa f873 	bl	8003104 <HAL_GetTick>
 800901e:	1bc0      	subs	r0, r0, r7
 8009020:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009024:	d1f0      	bne.n	8009008 <SD_SendSDStatus+0xbc>
      return HAL_SD_ERROR_TIMEOUT;
 8009026:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800902a:	e004      	b.n	8009036 <SD_SendSDStatus+0xea>
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800902c:	4a08      	ldr	r2, [pc, #32]	@ (8009050 <SD_SendSDStatus+0x104>)
 800902e:	6382      	str	r2, [r0, #56]	@ 0x38
  return HAL_SD_ERROR_NONE;
 8009030:	e001      	b.n	8009036 <SD_SendSDStatus+0xea>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009032:	f44f 6300 	mov.w	r3, #2048	@ 0x800
}
 8009036:	4618      	mov	r0, r3
 8009038:	b007      	add	sp, #28
 800903a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_SD_ERROR_TIMEOUT;
 800903c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009040:	e7f9      	b.n	8009036 <SD_SendSDStatus+0xea>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009042:	2308      	movs	r3, #8
 8009044:	e7f7      	b.n	8009036 <SD_SendSDStatus+0xea>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009046:	2302      	movs	r3, #2
 8009048:	e7f5      	b.n	8009036 <SD_SendSDStatus+0xea>
    return HAL_SD_ERROR_RX_OVERRUN;
 800904a:	2320      	movs	r3, #32
 800904c:	e7f3      	b.n	8009036 <SD_SendSDStatus+0xea>
 800904e:	bf00      	nop
 8009050:	18000f3a 	.word	0x18000f3a

08009054 <SD_FindSCR>:
{
 8009054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009056:	b089      	sub	sp, #36	@ 0x24
 8009058:	4604      	mov	r4, r0
 800905a:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800905c:	f7fa f852 	bl	8003104 <HAL_GetTick>
 8009060:	4605      	mov	r5, r0
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009062:	2300      	movs	r3, #0
 8009064:	9300      	str	r3, [sp, #0]
 8009066:	9301      	str	r3, [sp, #4]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009068:	2108      	movs	r1, #8
 800906a:	6820      	ldr	r0, [r4, #0]
 800906c:	f002 fd78 	bl	800bb60 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009070:	4606      	mov	r6, r0
 8009072:	b110      	cbz	r0, 800907a <SD_FindSCR+0x26>
}
 8009074:	4630      	mov	r0, r6
 8009076:	b009      	add	sp, #36	@ 0x24
 8009078:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800907a:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800907c:	0409      	lsls	r1, r1, #16
 800907e:	6820      	ldr	r0, [r4, #0]
 8009080:	f002 fdcd 	bl	800bc1e <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009084:	4606      	mov	r6, r0
 8009086:	2800      	cmp	r0, #0
 8009088:	d1f4      	bne.n	8009074 <SD_FindSCR+0x20>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800908a:	f04f 33ff 	mov.w	r3, #4294967295
 800908e:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 8009090:	2308      	movs	r3, #8
 8009092:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009094:	2330      	movs	r3, #48	@ 0x30
 8009096:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009098:	2302      	movs	r3, #2
 800909a:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800909c:	2300      	movs	r3, #0
 800909e:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80090a0:	2301      	movs	r3, #1
 80090a2:	9307      	str	r3, [sp, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80090a4:	a902      	add	r1, sp, #8
 80090a6:	6820      	ldr	r0, [r4, #0]
 80090a8:	f002 fc84 	bl	800b9b4 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80090ac:	6820      	ldr	r0, [r4, #0]
 80090ae:	f002 fde8 	bl	800bc82 <SDMMC_CmdSendSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 80090b2:	4606      	mov	r6, r0
 80090b4:	b130      	cbz	r0, 80090c4 <SD_FindSCR+0x70>
 80090b6:	e7dd      	b.n	8009074 <SD_FindSCR+0x20>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80090b8:	f7fa f824 	bl	8003104 <HAL_GetTick>
 80090bc:	1b43      	subs	r3, r0, r5
 80090be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090c2:	d046      	beq.n	8009152 <SD_FindSCR+0xfe>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80090c4:	6820      	ldr	r0, [r4, #0]
 80090c6:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80090c8:	f240 532a 	movw	r3, #1322	@ 0x52a
 80090cc:	421a      	tst	r2, r3
 80090ce:	d10e      	bne.n	80090ee <SD_FindSCR+0x9a>
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80090d0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80090d2:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 80090d6:	d1ef      	bne.n	80090b8 <SD_FindSCR+0x64>
 80090d8:	2e00      	cmp	r6, #0
 80090da:	d1ed      	bne.n	80090b8 <SD_FindSCR+0x64>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80090dc:	f002 fc40 	bl	800b960 <SDMMC_ReadFIFO>
 80090e0:	9000      	str	r0, [sp, #0]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80090e2:	6820      	ldr	r0, [r4, #0]
 80090e4:	f002 fc3c 	bl	800b960 <SDMMC_ReadFIFO>
 80090e8:	9001      	str	r0, [sp, #4]
      index++;
 80090ea:	3601      	adds	r6, #1
 80090ec:	e7e4      	b.n	80090b8 <SD_FindSCR+0x64>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80090ee:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80090f0:	f013 0f08 	tst.w	r3, #8
 80090f4:	d124      	bne.n	8009140 <SD_FindSCR+0xec>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80090f6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80090f8:	f013 0f02 	tst.w	r3, #2
 80090fc:	d123      	bne.n	8009146 <SD_FindSCR+0xf2>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80090fe:	6b46      	ldr	r6, [r0, #52]	@ 0x34
 8009100:	f016 0620 	ands.w	r6, r6, #32
 8009104:	d122      	bne.n	800914c <SD_FindSCR+0xf8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009106:	4b14      	ldr	r3, [pc, #80]	@ (8009158 <SD_FindSCR+0x104>)
 8009108:	6383      	str	r3, [r0, #56]	@ 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800910a:	9a01      	ldr	r2, [sp, #4]
 800910c:	0213      	lsls	r3, r2, #8
 800910e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009112:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009116:	0a11      	lsrs	r1, r2, #8
 8009118:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800911c:	430b      	orrs	r3, r1
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800911e:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009122:	603b      	str	r3, [r7, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009124:	9a00      	ldr	r2, [sp, #0]
 8009126:	0213      	lsls	r3, r2, #8
 8009128:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800912c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009130:	0a11      	lsrs	r1, r2, #8
 8009132:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009136:	430b      	orrs	r3, r1
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009138:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800913c:	607b      	str	r3, [r7, #4]
  return HAL_SD_ERROR_NONE;
 800913e:	e799      	b.n	8009074 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009140:	2608      	movs	r6, #8
 8009142:	6386      	str	r6, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009144:	e796      	b.n	8009074 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009146:	2602      	movs	r6, #2
 8009148:	6386      	str	r6, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800914a:	e793      	b.n	8009074 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800914c:	2620      	movs	r6, #32
 800914e:	6386      	str	r6, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8009150:	e790      	b.n	8009074 <SD_FindSCR+0x20>
      return HAL_SD_ERROR_TIMEOUT;
 8009152:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
 8009156:	e78d      	b.n	8009074 <SD_FindSCR+0x20>
 8009158:	18000f3a 	.word	0x18000f3a

0800915c <SD_WideBus_Enable>:
{
 800915c:	b510      	push	{r4, lr}
 800915e:	b082      	sub	sp, #8
 8009160:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0UL, 0UL};
 8009162:	2100      	movs	r1, #0
 8009164:	9100      	str	r1, [sp, #0]
 8009166:	9101      	str	r1, [sp, #4]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009168:	6800      	ldr	r0, [r0, #0]
 800916a:	f002 fc20 	bl	800b9ae <SDMMC_GetResponse>
 800916e:	f010 7f00 	tst.w	r0, #33554432	@ 0x2000000
 8009172:	d113      	bne.n	800919c <SD_WideBus_Enable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 8009174:	4669      	mov	r1, sp
 8009176:	4620      	mov	r0, r4
 8009178:	f7ff ff6c 	bl	8009054 <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 800917c:	b980      	cbnz	r0, 80091a0 <SD_WideBus_Enable+0x44>
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800917e:	9b01      	ldr	r3, [sp, #4]
 8009180:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8009184:	d00e      	beq.n	80091a4 <SD_WideBus_Enable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009186:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009188:	0409      	lsls	r1, r1, #16
 800918a:	6820      	ldr	r0, [r4, #0]
 800918c:	f002 fd47 	bl	800bc1e <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8009190:	b930      	cbnz	r0, 80091a0 <SD_WideBus_Enable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009192:	2102      	movs	r1, #2
 8009194:	6820      	ldr	r0, [r4, #0]
 8009196:	f002 fd5b 	bl	800bc50 <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
 800919a:	e001      	b.n	80091a0 <SD_WideBus_Enable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800919c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
}
 80091a0:	b002      	add	sp, #8
 80091a2:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80091a4:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80091a8:	e7fa      	b.n	80091a0 <SD_WideBus_Enable+0x44>

080091aa <SD_WideBus_Disable>:
{
 80091aa:	b510      	push	{r4, lr}
 80091ac:	b082      	sub	sp, #8
 80091ae:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0UL, 0UL};
 80091b0:	2100      	movs	r1, #0
 80091b2:	9100      	str	r1, [sp, #0]
 80091b4:	9101      	str	r1, [sp, #4]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80091b6:	6800      	ldr	r0, [r0, #0]
 80091b8:	f002 fbf9 	bl	800b9ae <SDMMC_GetResponse>
 80091bc:	f010 7f00 	tst.w	r0, #33554432	@ 0x2000000
 80091c0:	d113      	bne.n	80091ea <SD_WideBus_Disable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 80091c2:	4669      	mov	r1, sp
 80091c4:	4620      	mov	r0, r4
 80091c6:	f7ff ff45 	bl	8009054 <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 80091ca:	b980      	cbnz	r0, 80091ee <SD_WideBus_Disable+0x44>
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80091cc:	9b01      	ldr	r3, [sp, #4]
 80091ce:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80091d2:	d00e      	beq.n	80091f2 <SD_WideBus_Disable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80091d4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80091d6:	0409      	lsls	r1, r1, #16
 80091d8:	6820      	ldr	r0, [r4, #0]
 80091da:	f002 fd20 	bl	800bc1e <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 80091de:	b930      	cbnz	r0, 80091ee <SD_WideBus_Disable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80091e0:	2100      	movs	r1, #0
 80091e2:	6820      	ldr	r0, [r4, #0]
 80091e4:	f002 fd34 	bl	800bc50 <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
 80091e8:	e001      	b.n	80091ee <SD_WideBus_Disable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80091ea:	f44f 6000 	mov.w	r0, #2048	@ 0x800
}
 80091ee:	b002      	add	sp, #8
 80091f0:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80091f2:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80091f6:	e7fa      	b.n	80091ee <SD_WideBus_Disable+0x44>

080091f8 <SD_SendStatus>:
{
 80091f8:	b570      	push	{r4, r5, r6, lr}
  if (pCardStatus == NULL)
 80091fa:	b181      	cbz	r1, 800921e <SD_SendStatus+0x26>
 80091fc:	4604      	mov	r4, r0
 80091fe:	460e      	mov	r6, r1
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009200:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8009202:	0409      	lsls	r1, r1, #16
 8009204:	6800      	ldr	r0, [r0, #0]
 8009206:	f002 fd55 	bl	800bcb4 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 800920a:	4605      	mov	r5, r0
 800920c:	b108      	cbz	r0, 8009212 <SD_SendStatus+0x1a>
}
 800920e:	4628      	mov	r0, r5
 8009210:	bd70      	pop	{r4, r5, r6, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009212:	2100      	movs	r1, #0
 8009214:	6820      	ldr	r0, [r4, #0]
 8009216:	f002 fbca 	bl	800b9ae <SDMMC_GetResponse>
 800921a:	6030      	str	r0, [r6, #0]
  return HAL_SD_ERROR_NONE;
 800921c:	e7f7      	b.n	800920e <SD_SendStatus+0x16>
    return HAL_SD_ERROR_PARAM;
 800921e:	f04f 6500 	mov.w	r5, #134217728	@ 0x8000000
 8009222:	e7f4      	b.n	800920e <SD_SendStatus+0x16>

08009224 <HAL_SD_TxCpltCallback>:
}
 8009224:	4770      	bx	lr

08009226 <HAL_SD_RxCpltCallback>:
}
 8009226:	4770      	bx	lr

08009228 <HAL_SD_ErrorCallback>:
}
 8009228:	4770      	bx	lr
	...

0800922c <HAL_SD_GetCardCSD>:
{
 800922c:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800922e:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8009230:	0f92      	lsrs	r2, r2, #30
 8009232:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009234:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8009236:	f3c2 6283 	ubfx	r2, r2, #26, #4
 800923a:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800923c:	f890 205f 	ldrb.w	r2, [r0, #95]	@ 0x5f
 8009240:	f002 0203 	and.w	r2, r2, #3
 8009244:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009246:	f890 205e 	ldrb.w	r2, [r0, #94]	@ 0x5e
 800924a:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800924c:	f890 205d 	ldrb.w	r2, [r0, #93]	@ 0x5d
 8009250:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009252:	f890 205c 	ldrb.w	r2, [r0, #92]	@ 0x5c
 8009256:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009258:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 800925a:	0d12      	lsrs	r2, r2, #20
 800925c:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800925e:	f8b0 2062 	ldrh.w	r2, [r0, #98]	@ 0x62
 8009262:	f002 020f 	and.w	r2, r2, #15
 8009266:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009268:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 800926a:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800926e:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009270:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8009272:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8009276:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009278:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 800927a:	f3c2 3240 	ubfx	r2, r2, #13, #1
 800927e:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009280:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8009282:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8009286:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009288:	2200      	movs	r2, #0
 800928a:	734a      	strb	r2, [r1, #13]
  if (hsd->SdCard.CardType == CARD_SDSC)
 800928c:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 800928e:	2a00      	cmp	r2, #0
 8009290:	f040 8086 	bne.w	80093a0 <HAL_SD_GetCardCSD+0x174>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009294:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 8009296:	f640 72fc 	movw	r2, #4092	@ 0xffc
 800929a:	ea02 0280 	and.w	r2, r2, r0, lsl #2
 800929e:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 80092a0:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 80092a4:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80092a6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80092a8:	f3c2 62c2 	ubfx	r2, r2, #27, #3
 80092ac:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80092ae:	f893 2067 	ldrb.w	r2, [r3, #103]	@ 0x67
 80092b2:	f002 0207 	and.w	r2, r2, #7
 80092b6:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80092b8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80092ba:	f3c2 5242 	ubfx	r2, r2, #21, #3
 80092be:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80092c0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80092c2:	f3c2 4282 	ubfx	r2, r2, #18, #3
 80092c6:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80092c8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80092ca:	f3c2 32c2 	ubfx	r2, r2, #15, #3
 80092ce:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80092d0:	690a      	ldr	r2, [r1, #16]
 80092d2:	3201      	adds	r2, #1
 80092d4:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80092d6:	7e08      	ldrb	r0, [r1, #24]
 80092d8:	f000 0007 	and.w	r0, r0, #7
 80092dc:	3002      	adds	r0, #2
 80092de:	4082      	lsls	r2, r0
 80092e0:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80092e2:	f891 c008 	ldrb.w	ip, [r1, #8]
 80092e6:	f00c 0c0f 	and.w	ip, ip, #15
 80092ea:	2001      	movs	r0, #1
 80092ec:	fa00 f00c 	lsl.w	r0, r0, ip
 80092f0:	64d8      	str	r0, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80092f2:	0a40      	lsrs	r0, r0, #9
 80092f4:	fb00 f202 	mul.w	r2, r0, r2
 80092f8:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 80092fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80092fe:	655a      	str	r2, [r3, #84]	@ 0x54
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009300:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009302:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8009306:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009308:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800930a:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 800930e:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009310:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009312:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009316:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009318:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800931a:	0fd2      	lsrs	r2, r2, #31
 800931c:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800931e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8009320:	f3c2 7241 	ubfx	r2, r2, #29, #2
 8009324:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009326:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8009328:	f3c2 6282 	ubfx	r2, r2, #26, #3
 800932c:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800932e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8009330:	f3c2 5283 	ubfx	r2, r2, #22, #4
 8009334:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009336:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8009338:	f3c2 5240 	ubfx	r2, r2, #21, #1
 800933c:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 8009340:	2000      	movs	r0, #0
 8009342:	f881 0021 	strb.w	r0, [r1, #33]	@ 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009346:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800934a:	f002 0201 	and.w	r2, r2, #1
 800934e:	f881 2022 	strb.w	r2, [r1, #34]	@ 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009352:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8009354:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8009358:	f881 2023 	strb.w	r2, [r1, #35]	@ 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800935c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800935e:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8009362:	f881 2024 	strb.w	r2, [r1, #36]	@ 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009366:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8009368:	f3c2 3240 	ubfx	r2, r2, #13, #1
 800936c:	f881 2025 	strb.w	r2, [r1, #37]	@ 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009370:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8009372:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8009376:	f881 2026 	strb.w	r2, [r1, #38]	@ 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800937a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800937c:	f3c2 2281 	ubfx	r2, r2, #10, #2
 8009380:	f881 2027 	strb.w	r2, [r1, #39]	@ 0x27
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009384:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8009386:	f3c2 2201 	ubfx	r2, r2, #8, #2
 800938a:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800938e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009390:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8009394:	f881 3029 	strb.w	r3, [r1, #41]	@ 0x29
  pCSD->Reserved4 = 1;
 8009398:	2301      	movs	r3, #1
 800939a:	f881 302a 	strb.w	r3, [r1, #42]	@ 0x2a
}
 800939e:	4770      	bx	lr
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80093a0:	2a01      	cmp	r2, #1
 80093a2:	d111      	bne.n	80093c8 <HAL_SD_GetCardCSD+0x19c>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80093a4:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 80093a6:	0412      	lsls	r2, r2, #16
 80093a8:	f402 127c 	and.w	r2, r2, #4128768	@ 0x3f0000
 80093ac:	f8b0 0066 	ldrh.w	r0, [r0, #102]	@ 0x66
 80093b0:	4302      	orrs	r2, r0
 80093b2:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80093b4:	690a      	ldr	r2, [r1, #16]
 80093b6:	3201      	adds	r2, #1
 80093b8:	0292      	lsls	r2, r2, #10
 80093ba:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80093bc:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 80093be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80093c2:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80093c4:	655a      	str	r2, [r3, #84]	@ 0x54
 80093c6:	e79b      	b.n	8009300 <HAL_SD_GetCardCSD+0xd4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80093c8:	6802      	ldr	r2, [r0, #0]
 80093ca:	4905      	ldr	r1, [pc, #20]	@ (80093e0 <HAL_SD_GetCardCSD+0x1b4>)
 80093cc:	6391      	str	r1, [r2, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80093ce:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80093d0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80093d4:	6342      	str	r2, [r0, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80093d6:	2001      	movs	r0, #1
 80093d8:	f883 0030 	strb.w	r0, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80093dc:	4770      	bx	lr
 80093de:	bf00      	nop
 80093e0:	1fe00fff 	.word	0x1fe00fff

080093e4 <SD_InitCard>:
{
 80093e4:	b530      	push	{r4, r5, lr}
 80093e6:	b08d      	sub	sp, #52	@ 0x34
 80093e8:	4604      	mov	r4, r0
  uint16_t sd_rca = 0U;
 80093ea:	2300      	movs	r3, #0
 80093ec:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint32_t tickstart = HAL_GetTick();
 80093f0:	f7f9 fe88 	bl	8003104 <HAL_GetTick>
 80093f4:	4605      	mov	r5, r0
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 80093f6:	6820      	ldr	r0, [r4, #0]
 80093f8:	f002 fac0 	bl	800b97c <SDMMC_GetPowerState>
 80093fc:	2800      	cmp	r0, #0
 80093fe:	d067      	beq.n	80094d0 <SD_InitCard+0xec>
  if (hsd->SdCard.CardType != CARD_SECURED)
 8009400:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009402:	2b03      	cmp	r3, #3
 8009404:	d117      	bne.n	8009436 <SD_InitCard+0x52>
  if (hsd->SdCard.CardType != CARD_SECURED)
 8009406:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009408:	2b03      	cmp	r3, #3
 800940a:	d02f      	beq.n	800946c <SD_InitCard+0x88>
    while (sd_rca == 0U)
 800940c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8009410:	bb63      	cbnz	r3, 800946c <SD_InitCard+0x88>
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009412:	f10d 0102 	add.w	r1, sp, #2
 8009416:	6820      	ldr	r0, [r4, #0]
 8009418:	f002 fd6a 	bl	800bef0 <SDMMC_CmdSetRelAdd>
      if (errorstate != HAL_SD_ERROR_NONE)
 800941c:	4603      	mov	r3, r0
 800941e:	2800      	cmp	r0, #0
 8009420:	d158      	bne.n	80094d4 <SD_InitCard+0xf0>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8009422:	f7f9 fe6f 	bl	8003104 <HAL_GetTick>
 8009426:	1b43      	subs	r3, r0, r5
 8009428:	f241 3287 	movw	r2, #4999	@ 0x1387
 800942c:	4293      	cmp	r3, r2
 800942e:	d9ed      	bls.n	800940c <SD_InitCard+0x28>
        return HAL_SD_ERROR_TIMEOUT;
 8009430:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009434:	e04e      	b.n	80094d4 <SD_InitCard+0xf0>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009436:	6820      	ldr	r0, [r4, #0]
 8009438:	f002 fc9e 	bl	800bd78 <SDMMC_CmdSendCID>
    if (errorstate != HAL_SD_ERROR_NONE)
 800943c:	4603      	mov	r3, r0
 800943e:	2800      	cmp	r0, #0
 8009440:	d148      	bne.n	80094d4 <SD_InitCard+0xf0>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009442:	2100      	movs	r1, #0
 8009444:	6820      	ldr	r0, [r4, #0]
 8009446:	f002 fab2 	bl	800b9ae <SDMMC_GetResponse>
 800944a:	66e0      	str	r0, [r4, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800944c:	2104      	movs	r1, #4
 800944e:	6820      	ldr	r0, [r4, #0]
 8009450:	f002 faad 	bl	800b9ae <SDMMC_GetResponse>
 8009454:	6720      	str	r0, [r4, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009456:	2108      	movs	r1, #8
 8009458:	6820      	ldr	r0, [r4, #0]
 800945a:	f002 faa8 	bl	800b9ae <SDMMC_GetResponse>
 800945e:	6760      	str	r0, [r4, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009460:	210c      	movs	r1, #12
 8009462:	6820      	ldr	r0, [r4, #0]
 8009464:	f002 faa3 	bl	800b9ae <SDMMC_GetResponse>
 8009468:	67a0      	str	r0, [r4, #120]	@ 0x78
 800946a:	e7cc      	b.n	8009406 <SD_InitCard+0x22>
  if (hsd->SdCard.CardType != CARD_SECURED)
 800946c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800946e:	2b03      	cmp	r3, #3
 8009470:	d01c      	beq.n	80094ac <SD_InitCard+0xc8>
    hsd->SdCard.RelCardAdd = sd_rca;
 8009472:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8009476:	6461      	str	r1, [r4, #68]	@ 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009478:	0409      	lsls	r1, r1, #16
 800947a:	6820      	ldr	r0, [r4, #0]
 800947c:	f002 fc92 	bl	800bda4 <SDMMC_CmdSendCSD>
    if (errorstate != HAL_SD_ERROR_NONE)
 8009480:	4603      	mov	r3, r0
 8009482:	bb38      	cbnz	r0, 80094d4 <SD_InitCard+0xf0>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009484:	2100      	movs	r1, #0
 8009486:	6820      	ldr	r0, [r4, #0]
 8009488:	f002 fa91 	bl	800b9ae <SDMMC_GetResponse>
 800948c:	65e0      	str	r0, [r4, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800948e:	2104      	movs	r1, #4
 8009490:	6820      	ldr	r0, [r4, #0]
 8009492:	f002 fa8c 	bl	800b9ae <SDMMC_GetResponse>
 8009496:	6620      	str	r0, [r4, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009498:	2108      	movs	r1, #8
 800949a:	6820      	ldr	r0, [r4, #0]
 800949c:	f002 fa87 	bl	800b9ae <SDMMC_GetResponse>
 80094a0:	6660      	str	r0, [r4, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80094a2:	210c      	movs	r1, #12
 80094a4:	6820      	ldr	r0, [r4, #0]
 80094a6:	f002 fa82 	bl	800b9ae <SDMMC_GetResponse>
 80094aa:	66a0      	str	r0, [r4, #104]	@ 0x68
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80094ac:	2104      	movs	r1, #4
 80094ae:	6820      	ldr	r0, [r4, #0]
 80094b0:	f002 fa7d 	bl	800b9ae <SDMMC_GetResponse>
 80094b4:	0d00      	lsrs	r0, r0, #20
 80094b6:	6420      	str	r0, [r4, #64]	@ 0x40
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80094b8:	a901      	add	r1, sp, #4
 80094ba:	4620      	mov	r0, r4
 80094bc:	f7ff feb6 	bl	800922c <HAL_SD_GetCardCSD>
 80094c0:	b958      	cbnz	r0, 80094da <SD_InitCard+0xf6>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80094c2:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80094c4:	0409      	lsls	r1, r1, #16
 80094c6:	6820      	ldr	r0, [r4, #0]
 80094c8:	f002 fb90 	bl	800bbec <SDMMC_CmdSelDesel>
 80094cc:	4603      	mov	r3, r0
  if (errorstate != HAL_SD_ERROR_NONE)
 80094ce:	e001      	b.n	80094d4 <SD_InitCard+0xf0>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80094d0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	b00d      	add	sp, #52	@ 0x34
 80094d8:	bd30      	pop	{r4, r5, pc}
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80094da:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80094de:	e7f9      	b.n	80094d4 <SD_InitCard+0xf0>

080094e0 <HAL_SD_InitCard>:
{
 80094e0:	b570      	push	{r4, r5, r6, lr}
 80094e2:	b088      	sub	sp, #32
 80094e4:	4604      	mov	r4, r0
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80094e6:	2300      	movs	r3, #0
 80094e8:	9303      	str	r3, [sp, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80094ea:	9304      	str	r3, [sp, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80094ec:	9305      	str	r3, [sp, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80094ee:	9306      	str	r3, [sp, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80094f0:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80094f4:	f7ff f97a 	bl	80087ec <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
 80094f8:	b938      	cbnz	r0, 800950a <HAL_SD_InitCard+0x2a>
    hsd->State = HAL_SD_STATE_READY;
 80094fa:	2001      	movs	r0, #1
 80094fc:	f884 0030 	strb.w	r0, [r4, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8009500:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009504:	6363      	str	r3, [r4, #52]	@ 0x34
}
 8009506:	b008      	add	sp, #32
 8009508:	bd70      	pop	{r4, r5, r6, pc}
 800950a:	4606      	mov	r6, r0
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800950c:	0a05      	lsrs	r5, r0, #8
 800950e:	4b22      	ldr	r3, [pc, #136]	@ (8009598 <HAL_SD_InitCard+0xb8>)
 8009510:	fba3 3505 	umull	r3, r5, r3, r5
 8009514:	092d      	lsrs	r5, r5, #4
 8009516:	9507      	str	r5, [sp, #28]
  (void)SDMMC_Init(hsd->Instance, Init);
 8009518:	ab08      	add	r3, sp, #32
 800951a:	e913 0003 	ldmdb	r3, {r0, r1}
 800951e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8009522:	ab03      	add	r3, sp, #12
 8009524:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009526:	6820      	ldr	r0, [r4, #0]
 8009528:	f002 fa02 	bl	800b930 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800952c:	6820      	ldr	r0, [r4, #0]
 800952e:	f002 fa1f 	bl	800b970 <SDMMC_PowerState_ON>
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8009532:	006d      	lsls	r5, r5, #1
 8009534:	fbb6 f6f5 	udiv	r6, r6, r5
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8009538:	4818      	ldr	r0, [pc, #96]	@ (800959c <HAL_SD_InitCard+0xbc>)
 800953a:	fbb0 f0f6 	udiv	r0, r0, r6
 800953e:	3001      	adds	r0, #1
 8009540:	f7f9 fde6 	bl	8003110 <HAL_Delay>
  errorstate = SD_PowerON(hsd);
 8009544:	4620      	mov	r0, r4
 8009546:	f7ff fc5b 	bl	8008e00 <SD_PowerON>
  if (errorstate != HAL_SD_ERROR_NONE)
 800954a:	4602      	mov	r2, r0
 800954c:	b130      	cbz	r0, 800955c <HAL_SD_InitCard+0x7c>
    hsd->State = HAL_SD_STATE_READY;
 800954e:	2001      	movs	r0, #1
 8009550:	f884 0030 	strb.w	r0, [r4, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8009554:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009556:	4313      	orrs	r3, r2
 8009558:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 800955a:	e7d4      	b.n	8009506 <HAL_SD_InitCard+0x26>
  errorstate = SD_InitCard(hsd);
 800955c:	4620      	mov	r0, r4
 800955e:	f7ff ff41 	bl	80093e4 <SD_InitCard>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009562:	4602      	mov	r2, r0
 8009564:	b130      	cbz	r0, 8009574 <HAL_SD_InitCard+0x94>
    hsd->State = HAL_SD_STATE_READY;
 8009566:	2001      	movs	r0, #1
 8009568:	f884 0030 	strb.w	r0, [r4, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800956c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800956e:	4313      	orrs	r3, r2
 8009570:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8009572:	e7c8      	b.n	8009506 <HAL_SD_InitCard+0x26>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009574:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009578:	6820      	ldr	r0, [r4, #0]
 800957a:	f002 faf1 	bl	800bb60 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800957e:	b908      	cbnz	r0, 8009584 <HAL_SD_InitCard+0xa4>
  return HAL_OK;
 8009580:	2000      	movs	r0, #0
 8009582:	e7c0      	b.n	8009506 <HAL_SD_InitCard+0x26>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009584:	6823      	ldr	r3, [r4, #0]
 8009586:	4906      	ldr	r1, [pc, #24]	@ (80095a0 <HAL_SD_InitCard+0xc0>)
 8009588:	6399      	str	r1, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800958a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800958c:	4303      	orrs	r3, r0
 800958e:	6363      	str	r3, [r4, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009590:	2001      	movs	r0, #1
 8009592:	f884 0030 	strb.w	r0, [r4, #48]	@ 0x30
    return HAL_ERROR;
 8009596:	e7b6      	b.n	8009506 <HAL_SD_InitCard+0x26>
 8009598:	014f8b59 	.word	0x014f8b59
 800959c:	00012110 	.word	0x00012110
 80095a0:	1fe00fff 	.word	0x1fe00fff

080095a4 <HAL_SD_GetCardStatus>:
{
 80095a4:	b530      	push	{r4, r5, lr}
 80095a6:	b091      	sub	sp, #68	@ 0x44
  if (hsd->State == HAL_SD_STATE_BUSY)
 80095a8:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 80095ac:	b2db      	uxtb	r3, r3
 80095ae:	2b03      	cmp	r3, #3
 80095b0:	d059      	beq.n	8009666 <HAL_SD_GetCardStatus+0xc2>
 80095b2:	4604      	mov	r4, r0
 80095b4:	460d      	mov	r5, r1
  errorstate = SD_SendSDStatus(hsd, sd_status);
 80095b6:	4669      	mov	r1, sp
 80095b8:	f7ff fcc8 	bl	8008f4c <SD_SendSDStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 80095bc:	b1b8      	cbz	r0, 80095ee <HAL_SD_GetCardStatus+0x4a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80095be:	6823      	ldr	r3, [r4, #0]
 80095c0:	492b      	ldr	r1, [pc, #172]	@ (8009670 <HAL_SD_GetCardStatus+0xcc>)
 80095c2:	6399      	str	r1, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80095c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80095c6:	4303      	orrs	r3, r0
 80095c8:	6363      	str	r3, [r4, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80095ca:	2501      	movs	r5, #1
 80095cc:	f884 5030 	strb.w	r5, [r4, #48]	@ 0x30
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80095d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80095d4:	6820      	ldr	r0, [r4, #0]
 80095d6:	f002 fac3 	bl	800bb60 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 80095da:	2800      	cmp	r0, #0
 80095dc:	d044      	beq.n	8009668 <HAL_SD_GetCardStatus+0xc4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80095de:	6822      	ldr	r2, [r4, #0]
 80095e0:	4923      	ldr	r1, [pc, #140]	@ (8009670 <HAL_SD_GetCardStatus+0xcc>)
 80095e2:	6391      	str	r1, [r2, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 80095e4:	6360      	str	r0, [r4, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80095e6:	2501      	movs	r5, #1
 80095e8:	f884 5030 	strb.w	r5, [r4, #48]	@ 0x30
    status = HAL_ERROR;
 80095ec:	e03c      	b.n	8009668 <HAL_SD_GetCardStatus+0xc4>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80095ee:	9a00      	ldr	r2, [sp, #0]
 80095f0:	f3c2 1381 	ubfx	r3, r2, #6, #2
 80095f4:	702b      	strb	r3, [r5, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80095f6:	f3c2 1340 	ubfx	r3, r2, #5, #1
 80095fa:	706b      	strb	r3, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80095fc:	0a13      	lsrs	r3, r2, #8
 80095fe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009602:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8009606:	b29b      	uxth	r3, r3
 8009608:	806b      	strh	r3, [r5, #2]
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800960a:	9a01      	ldr	r2, [sp, #4]
 800960c:	0213      	lsls	r3, r2, #8
 800960e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009612:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009616:	0a11      	lsrs	r1, r2, #8
 8009618:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800961c:	430b      	orrs	r3, r1
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800961e:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009622:	606b      	str	r3, [r5, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009624:	9b02      	ldr	r3, [sp, #8]
 8009626:	b2da      	uxtb	r2, r3
 8009628:	722a      	strb	r2, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800962a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800962e:	726a      	strb	r2, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8009630:	f3c3 5203 	ubfx	r2, r3, #20, #4
 8009634:	72aa      	strb	r2, [r5, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8009636:	0c1b      	lsrs	r3, r3, #16
 8009638:	9a03      	ldr	r2, [sp, #12]
 800963a:	b2d1      	uxtb	r1, r2
 800963c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009640:	430b      	orrs	r3, r1
 8009642:	81ab      	strh	r3, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8009644:	f3c2 2385 	ubfx	r3, r2, #10, #6
 8009648:	73ab      	strb	r3, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800964a:	f3c2 2301 	ubfx	r3, r2, #8, #2
 800964e:	73eb      	strb	r3, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8009650:	f3c2 1303 	ubfx	r3, r2, #4, #4
 8009654:	742b      	strb	r3, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8009656:	f002 020f 	and.w	r2, r2, #15
 800965a:	746a      	strb	r2, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800965c:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8009660:	74ab      	strb	r3, [r5, #18]
  HAL_StatusTypeDef status = HAL_OK;
 8009662:	2500      	movs	r5, #0
 8009664:	e7b4      	b.n	80095d0 <HAL_SD_GetCardStatus+0x2c>
    return HAL_ERROR;
 8009666:	2501      	movs	r5, #1
}
 8009668:	4628      	mov	r0, r5
 800966a:	b011      	add	sp, #68	@ 0x44
 800966c:	bd30      	pop	{r4, r5, pc}
 800966e:	bf00      	nop
 8009670:	1fe00fff 	.word	0x1fe00fff

08009674 <HAL_SD_ConfigWideBusOperation>:
{
 8009674:	b530      	push	{r4, r5, lr}
 8009676:	b089      	sub	sp, #36	@ 0x24
 8009678:	4604      	mov	r4, r0
 800967a:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 800967c:	2303      	movs	r3, #3
 800967e:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
  if (hsd->SdCard.CardType != CARD_SECURED)
 8009682:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8009684:	2b03      	cmp	r3, #3
 8009686:	d01c      	beq.n	80096c2 <HAL_SD_ConfigWideBusOperation+0x4e>
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8009688:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 800968c:	d008      	beq.n	80096a0 <HAL_SD_ConfigWideBusOperation+0x2c>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800968e:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 8009692:	d00a      	beq.n	80096aa <HAL_SD_ConfigWideBusOperation+0x36>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8009694:	b179      	cbz	r1, 80096b6 <HAL_SD_ConfigWideBusOperation+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009696:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8009698:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800969c:	6343      	str	r3, [r0, #52]	@ 0x34
 800969e:	e014      	b.n	80096ca <HAL_SD_ConfigWideBusOperation+0x56>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80096a0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80096a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80096a6:	6343      	str	r3, [r0, #52]	@ 0x34
 80096a8:	e00f      	b.n	80096ca <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Enable(hsd);
 80096aa:	f7ff fd57 	bl	800915c <SD_WideBus_Enable>
      hsd->ErrorCode |= errorstate;
 80096ae:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80096b0:	4303      	orrs	r3, r0
 80096b2:	6363      	str	r3, [r4, #52]	@ 0x34
 80096b4:	e009      	b.n	80096ca <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Disable(hsd);
 80096b6:	f7ff fd78 	bl	80091aa <SD_WideBus_Disable>
      hsd->ErrorCode |= errorstate;
 80096ba:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80096bc:	4303      	orrs	r3, r0
 80096be:	6363      	str	r3, [r4, #52]	@ 0x34
 80096c0:	e003      	b.n	80096ca <HAL_SD_ConfigWideBusOperation+0x56>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80096c2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80096c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80096c8:	6343      	str	r3, [r0, #52]	@ 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80096ca:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80096cc:	b1b3      	cbz	r3, 80096fc <HAL_SD_ConfigWideBusOperation+0x88>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80096ce:	6823      	ldr	r3, [r4, #0]
 80096d0:	4a39      	ldr	r2, [pc, #228]	@ (80097b8 <HAL_SD_ConfigWideBusOperation+0x144>)
 80096d2:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 80096d4:	2501      	movs	r5, #1
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80096d6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80096da:	6820      	ldr	r0, [r4, #0]
 80096dc:	f002 fa40 	bl	800bb60 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 80096e0:	b130      	cbz	r0, 80096f0 <HAL_SD_ConfigWideBusOperation+0x7c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80096e2:	6823      	ldr	r3, [r4, #0]
 80096e4:	4934      	ldr	r1, [pc, #208]	@ (80097b8 <HAL_SD_ConfigWideBusOperation+0x144>)
 80096e6:	6399      	str	r1, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80096e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80096ea:	4303      	orrs	r3, r0
 80096ec:	6363      	str	r3, [r4, #52]	@ 0x34
    status = HAL_ERROR;
 80096ee:	2501      	movs	r5, #1
  hsd->State = HAL_SD_STATE_READY;
 80096f0:	2301      	movs	r3, #1
 80096f2:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
}
 80096f6:	4628      	mov	r0, r5
 80096f8:	b009      	add	sp, #36	@ 0x24
 80096fa:	bd30      	pop	{r4, r5, pc}
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80096fc:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8009700:	f7ff f874 	bl	80087ec <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
 8009704:	4602      	mov	r2, r0
 8009706:	2800      	cmp	r0, #0
 8009708:	d050      	beq.n	80097ac <HAL_SD_ConfigWideBusOperation+0x138>
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800970a:	6863      	ldr	r3, [r4, #4]
 800970c:	9303      	str	r3, [sp, #12]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800970e:	68a3      	ldr	r3, [r4, #8]
 8009710:	9304      	str	r3, [sp, #16]
      Init.BusWide             = WideMode;
 8009712:	9505      	str	r5, [sp, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009714:	6923      	ldr	r3, [r4, #16]
 8009716:	9306      	str	r3, [sp, #24]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8009718:	6961      	ldr	r1, [r4, #20]
 800971a:	4b28      	ldr	r3, [pc, #160]	@ (80097bc <HAL_SD_ConfigWideBusOperation+0x148>)
 800971c:	fba3 0302 	umull	r0, r3, r3, r2
 8009720:	0e18      	lsrs	r0, r3, #24
 8009722:	ebb1 6f13 	cmp.w	r1, r3, lsr #24
 8009726:	d30c      	bcc.n	8009742 <HAL_SD_ConfigWideBusOperation+0xce>
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009728:	9107      	str	r1, [sp, #28]
      (void)SDMMC_Init(hsd->Instance, Init);
 800972a:	ab08      	add	r3, sp, #32
 800972c:	e913 0003 	ldmdb	r3, {r0, r1}
 8009730:	e88d 0003 	stmia.w	sp, {r0, r1}
 8009734:	ab03      	add	r3, sp, #12
 8009736:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009738:	6820      	ldr	r0, [r4, #0]
 800973a:	f002 f8f9 	bl	800b930 <SDMMC_Init>
  HAL_StatusTypeDef status = HAL_OK;
 800973e:	2500      	movs	r5, #0
 8009740:	e7c9      	b.n	80096d6 <HAL_SD_ConfigWideBusOperation+0x62>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8009742:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009744:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009748:	d008      	beq.n	800975c <HAL_SD_ConfigWideBusOperation+0xe8>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800974a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800974e:	d007      	beq.n	8009760 <HAL_SD_ConfigWideBusOperation+0xec>
        if (hsd->Init.ClockDiv == 0U)
 8009750:	bb11      	cbnz	r1, 8009798 <HAL_SD_ConfigWideBusOperation+0x124>
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8009752:	4b1b      	ldr	r3, [pc, #108]	@ (80097c0 <HAL_SD_ConfigWideBusOperation+0x14c>)
 8009754:	429a      	cmp	r2, r3
 8009756:	d91d      	bls.n	8009794 <HAL_SD_ConfigWideBusOperation+0x120>
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8009758:	9007      	str	r0, [sp, #28]
 800975a:	e7e6      	b.n	800972a <HAL_SD_ConfigWideBusOperation+0xb6>
        Init.ClockDiv = hsd->Init.ClockDiv;
 800975c:	9107      	str	r1, [sp, #28]
 800975e:	e7e4      	b.n	800972a <HAL_SD_ConfigWideBusOperation+0xb6>
        if (hsd->Init.ClockDiv == 0U)
 8009760:	b951      	cbnz	r1, 8009778 <HAL_SD_ConfigWideBusOperation+0x104>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8009762:	4b18      	ldr	r3, [pc, #96]	@ (80097c4 <HAL_SD_ConfigWideBusOperation+0x150>)
 8009764:	429a      	cmp	r2, r3
 8009766:	d905      	bls.n	8009774 <HAL_SD_ConfigWideBusOperation+0x100>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009768:	4b14      	ldr	r3, [pc, #80]	@ (80097bc <HAL_SD_ConfigWideBusOperation+0x148>)
 800976a:	fba3 2302 	umull	r2, r3, r3, r2
 800976e:	0e5b      	lsrs	r3, r3, #25
 8009770:	9307      	str	r3, [sp, #28]
 8009772:	e7da      	b.n	800972a <HAL_SD_ConfigWideBusOperation+0xb6>
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009774:	9107      	str	r1, [sp, #28]
 8009776:	e7d8      	b.n	800972a <HAL_SD_ConfigWideBusOperation+0xb6>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8009778:	004b      	lsls	r3, r1, #1
 800977a:	fbb2 f3f3 	udiv	r3, r2, r3
 800977e:	4811      	ldr	r0, [pc, #68]	@ (80097c4 <HAL_SD_ConfigWideBusOperation+0x150>)
 8009780:	4283      	cmp	r3, r0
 8009782:	d905      	bls.n	8009790 <HAL_SD_ConfigWideBusOperation+0x11c>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009784:	4b0d      	ldr	r3, [pc, #52]	@ (80097bc <HAL_SD_ConfigWideBusOperation+0x148>)
 8009786:	fba3 2302 	umull	r2, r3, r3, r2
 800978a:	0e5b      	lsrs	r3, r3, #25
 800978c:	9307      	str	r3, [sp, #28]
 800978e:	e7cc      	b.n	800972a <HAL_SD_ConfigWideBusOperation+0xb6>
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009790:	9107      	str	r1, [sp, #28]
 8009792:	e7ca      	b.n	800972a <HAL_SD_ConfigWideBusOperation+0xb6>
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009794:	9107      	str	r1, [sp, #28]
 8009796:	e7c8      	b.n	800972a <HAL_SD_ConfigWideBusOperation+0xb6>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8009798:	004b      	lsls	r3, r1, #1
 800979a:	fbb2 f2f3 	udiv	r2, r2, r3
 800979e:	4b08      	ldr	r3, [pc, #32]	@ (80097c0 <HAL_SD_ConfigWideBusOperation+0x14c>)
 80097a0:	429a      	cmp	r2, r3
 80097a2:	d901      	bls.n	80097a8 <HAL_SD_ConfigWideBusOperation+0x134>
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80097a4:	9007      	str	r0, [sp, #28]
 80097a6:	e7c0      	b.n	800972a <HAL_SD_ConfigWideBusOperation+0xb6>
            Init.ClockDiv = hsd->Init.ClockDiv;
 80097a8:	9107      	str	r1, [sp, #28]
 80097aa:	e7be      	b.n	800972a <HAL_SD_ConfigWideBusOperation+0xb6>
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80097ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80097ae:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80097b2:	6363      	str	r3, [r4, #52]	@ 0x34
      status = HAL_ERROR;
 80097b4:	2501      	movs	r5, #1
 80097b6:	e78e      	b.n	80096d6 <HAL_SD_ConfigWideBusOperation+0x62>
 80097b8:	1fe00fff 	.word	0x1fe00fff
 80097bc:	55e63b89 	.word	0x55e63b89
 80097c0:	017d7840 	.word	0x017d7840
 80097c4:	02faf080 	.word	0x02faf080

080097c8 <HAL_SD_GetCardState>:
{
 80097c8:	b510      	push	{r4, lr}
 80097ca:	b082      	sub	sp, #8
 80097cc:	4604      	mov	r4, r0
  uint32_t resp1 = 0;
 80097ce:	2300      	movs	r3, #0
 80097d0:	9301      	str	r3, [sp, #4]
  errorstate = SD_SendStatus(hsd, &resp1);
 80097d2:	a901      	add	r1, sp, #4
 80097d4:	f7ff fd10 	bl	80091f8 <SD_SendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 80097d8:	b110      	cbz	r0, 80097e0 <HAL_SD_GetCardState+0x18>
    hsd->ErrorCode |= errorstate;
 80097da:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80097dc:	4303      	orrs	r3, r0
 80097de:	6363      	str	r3, [r4, #52]	@ 0x34
}
 80097e0:	9801      	ldr	r0, [sp, #4]
 80097e2:	f3c0 2043 	ubfx	r0, r0, #9, #4
 80097e6:	b002      	add	sp, #8
 80097e8:	bd10      	pop	{r4, pc}

080097ea <HAL_SD_Init>:
{
 80097ea:	b570      	push	{r4, r5, r6, lr}
 80097ec:	b086      	sub	sp, #24
  if (hsd == NULL)
 80097ee:	2800      	cmp	r0, #0
 80097f0:	d054      	beq.n	800989c <HAL_SD_Init+0xb2>
 80097f2:	4604      	mov	r4, r0
  if (hsd->State == HAL_SD_STATE_RESET)
 80097f4:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 80097f8:	b153      	cbz	r3, 8009810 <HAL_SD_Init+0x26>
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80097fa:	2304      	movs	r3, #4
 80097fc:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009800:	4620      	mov	r0, r4
 8009802:	f7ff fe6d 	bl	80094e0 <HAL_SD_InitCard>
 8009806:	b138      	cbz	r0, 8009818 <HAL_SD_Init+0x2e>
    return HAL_ERROR;
 8009808:	2501      	movs	r5, #1
}
 800980a:	4628      	mov	r0, r5
 800980c:	b006      	add	sp, #24
 800980e:	bd70      	pop	{r4, r5, r6, pc}
    hsd->Lock = HAL_UNLOCKED;
 8009810:	7603      	strb	r3, [r0, #24]
    HAL_SD_MspInit(hsd);
 8009812:	f7f8 fda9 	bl	8002368 <HAL_SD_MspInit>
 8009816:	e7f0      	b.n	80097fa <HAL_SD_Init+0x10>
  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8009818:	a901      	add	r1, sp, #4
 800981a:	4620      	mov	r0, r4
 800981c:	f7ff fec2 	bl	80095a4 <HAL_SD_GetCardStatus>
 8009820:	2800      	cmp	r0, #0
 8009822:	d13d      	bne.n	80098a0 <HAL_SD_Init+0xb6>
  speedgrade = CardStatus.UhsSpeedGrade;
 8009824:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8009828:	b2db      	uxtb	r3, r3
  unitsize = CardStatus.UhsAllocationUnitSize;
 800982a:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800982e:	b2d2      	uxtb	r2, r2
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8009830:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009832:	2901      	cmp	r1, #1
 8009834:	d00b      	beq.n	800984e <HAL_SD_Init+0x64>
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009836:	2901      	cmp	r1, #1
 8009838:	d00f      	beq.n	800985a <HAL_SD_Init+0x70>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800983a:	2300      	movs	r3, #0
 800983c:	65a3      	str	r3, [r4, #88]	@ 0x58
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800983e:	68e1      	ldr	r1, [r4, #12]
 8009840:	4620      	mov	r0, r4
 8009842:	f7ff ff17 	bl	8009674 <HAL_SD_ConfigWideBusOperation>
 8009846:	4605      	mov	r5, r0
 8009848:	b158      	cbz	r0, 8009862 <HAL_SD_Init+0x78>
    return HAL_ERROR;
 800984a:	2501      	movs	r5, #1
 800984c:	e7dd      	b.n	800980a <HAL_SD_Init+0x20>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800984e:	4313      	orrs	r3, r2
 8009850:	d0f1      	beq.n	8009836 <HAL_SD_Init+0x4c>
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009852:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009856:	65a3      	str	r3, [r4, #88]	@ 0x58
 8009858:	e7f1      	b.n	800983e <HAL_SD_Init+0x54>
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800985a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800985e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8009860:	e7ed      	b.n	800983e <HAL_SD_Init+0x54>
  tickstart = HAL_GetTick();
 8009862:	f7f9 fc4f 	bl	8003104 <HAL_GetTick>
 8009866:	4606      	mov	r6, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009868:	4620      	mov	r0, r4
 800986a:	f7ff ffad 	bl	80097c8 <HAL_SD_GetCardState>
 800986e:	2804      	cmp	r0, #4
 8009870:	d00d      	beq.n	800988e <HAL_SD_Init+0xa4>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009872:	f7f9 fc47 	bl	8003104 <HAL_GetTick>
 8009876:	1b80      	subs	r0, r0, r6
 8009878:	f1b0 3fff 	cmp.w	r0, #4294967295
 800987c:	d1f4      	bne.n	8009868 <HAL_SD_Init+0x7e>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800987e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009882:	6363      	str	r3, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009884:	2301      	movs	r3, #1
 8009886:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
      return HAL_TIMEOUT;
 800988a:	2503      	movs	r5, #3
 800988c:	e7bd      	b.n	800980a <HAL_SD_Init+0x20>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800988e:	2300      	movs	r3, #0
 8009890:	6363      	str	r3, [r4, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009892:	62e3      	str	r3, [r4, #44]	@ 0x2c
  hsd->State = HAL_SD_STATE_READY;
 8009894:	2301      	movs	r3, #1
 8009896:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
  return HAL_OK;
 800989a:	e7b6      	b.n	800980a <HAL_SD_Init+0x20>
    return HAL_ERROR;
 800989c:	2501      	movs	r5, #1
 800989e:	e7b4      	b.n	800980a <HAL_SD_Init+0x20>
    return HAL_ERROR;
 80098a0:	2501      	movs	r5, #1
 80098a2:	e7b2      	b.n	800980a <HAL_SD_Init+0x20>

080098a4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80098a4:	4770      	bx	lr

080098a6 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80098a6:	4770      	bx	lr

080098a8 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80098a8:	4770      	bx	lr

080098aa <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80098aa:	4770      	bx	lr

080098ac <HAL_SD_IRQHandler>:
{
 80098ac:	b538      	push	{r3, r4, r5, lr}
 80098ae:	4604      	mov	r4, r0
  uint32_t context = hsd->Context;
 80098b0:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80098b2:	6803      	ldr	r3, [r0, #0]
 80098b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80098b6:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 80098ba:	d002      	beq.n	80098c2 <HAL_SD_IRQHandler+0x16>
 80098bc:	f015 0f08 	tst.w	r5, #8
 80098c0:	d12a      	bne.n	8009918 <HAL_SD_IRQHandler+0x6c>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80098c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80098c4:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80098c8:	d067      	beq.n	800999a <HAL_SD_IRQHandler+0xee>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80098ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80098ce:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80098d0:	6822      	ldr	r2, [r4, #0]
 80098d2:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80098d4:	4b7e      	ldr	r3, [pc, #504]	@ (8009ad0 <HAL_SD_IRQHandler+0x224>)
 80098d6:	400b      	ands	r3, r1
 80098d8:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80098da:	6822      	ldr	r2, [r4, #0]
 80098dc:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80098de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80098e2:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80098e4:	6822      	ldr	r2, [r4, #0]
 80098e6:	68d3      	ldr	r3, [r2, #12]
 80098e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80098ec:	60d3      	str	r3, [r2, #12]
    if ((context & SD_CONTEXT_IT) != 0U)
 80098ee:	f015 0f08 	tst.w	r5, #8
 80098f2:	d025      	beq.n	8009940 <HAL_SD_IRQHandler+0x94>
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80098f4:	f015 0f22 	tst.w	r5, #34	@ 0x22
 80098f8:	d111      	bne.n	800991e <HAL_SD_IRQHandler+0x72>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80098fa:	6823      	ldr	r3, [r4, #0]
 80098fc:	4a75      	ldr	r2, [pc, #468]	@ (8009ad4 <HAL_SD_IRQHandler+0x228>)
 80098fe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009900:	2301      	movs	r3, #1
 8009902:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009906:	2300      	movs	r3, #0
 8009908:	62e3      	str	r3, [r4, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800990a:	f015 0f03 	tst.w	r5, #3
 800990e:	d013      	beq.n	8009938 <HAL_SD_IRQHandler+0x8c>
        HAL_SD_RxCpltCallback(hsd);
 8009910:	4620      	mov	r0, r4
 8009912:	f7ff fc88 	bl	8009226 <HAL_SD_RxCpltCallback>
 8009916:	e001      	b.n	800991c <HAL_SD_IRQHandler+0x70>
    SD_Read_IT(hsd);
 8009918:	f7ff fad4 	bl	8008ec4 <SD_Read_IT>
}
 800991c:	bd38      	pop	{r3, r4, r5, pc}
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800991e:	6820      	ldr	r0, [r4, #0]
 8009920:	f002 f938 	bl	800bb94 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 8009924:	4603      	mov	r3, r0
 8009926:	2800      	cmp	r0, #0
 8009928:	d0e7      	beq.n	80098fa <HAL_SD_IRQHandler+0x4e>
          hsd->ErrorCode |= errorstate;
 800992a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800992c:	4313      	orrs	r3, r2
 800992e:	6363      	str	r3, [r4, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 8009930:	4620      	mov	r0, r4
 8009932:	f7ff fc79 	bl	8009228 <HAL_SD_ErrorCallback>
 8009936:	e7e0      	b.n	80098fa <HAL_SD_IRQHandler+0x4e>
        HAL_SD_TxCpltCallback(hsd);
 8009938:	4620      	mov	r0, r4
 800993a:	f7ff fc73 	bl	8009224 <HAL_SD_TxCpltCallback>
 800993e:	e7ed      	b.n	800991c <HAL_SD_IRQHandler+0x70>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8009940:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8009944:	d0ea      	beq.n	800991c <HAL_SD_IRQHandler+0x70>
      hsd->Instance->DLEN = 0;
 8009946:	6822      	ldr	r2, [r4, #0]
 8009948:	2300      	movs	r3, #0
 800994a:	6293      	str	r3, [r2, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 800994c:	6822      	ldr	r2, [r4, #0]
 800994e:	62d3      	str	r3, [r2, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8009950:	6822      	ldr	r2, [r4, #0]
 8009952:	6513      	str	r3, [r2, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009954:	f015 0f22 	tst.w	r5, #34	@ 0x22
 8009958:	d10e      	bne.n	8009978 <HAL_SD_IRQHandler+0xcc>
      hsd->State = HAL_SD_STATE_READY;
 800995a:	2301      	movs	r3, #1
 800995c:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009960:	2300      	movs	r3, #0
 8009962:	62e3      	str	r3, [r4, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009964:	f015 0f30 	tst.w	r5, #48	@ 0x30
 8009968:	d113      	bne.n	8009992 <HAL_SD_IRQHandler+0xe6>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800996a:	f015 0f03 	tst.w	r5, #3
 800996e:	d0d5      	beq.n	800991c <HAL_SD_IRQHandler+0x70>
        HAL_SD_RxCpltCallback(hsd);
 8009970:	4620      	mov	r0, r4
 8009972:	f7ff fc58 	bl	8009226 <HAL_SD_RxCpltCallback>
 8009976:	e7d1      	b.n	800991c <HAL_SD_IRQHandler+0x70>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009978:	6820      	ldr	r0, [r4, #0]
 800997a:	f002 f90b 	bl	800bb94 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800997e:	4603      	mov	r3, r0
 8009980:	2800      	cmp	r0, #0
 8009982:	d0ea      	beq.n	800995a <HAL_SD_IRQHandler+0xae>
          hsd->ErrorCode |= errorstate;
 8009984:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8009986:	4313      	orrs	r3, r2
 8009988:	6363      	str	r3, [r4, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 800998a:	4620      	mov	r0, r4
 800998c:	f7ff fc4c 	bl	8009228 <HAL_SD_ErrorCallback>
 8009990:	e7e3      	b.n	800995a <HAL_SD_IRQHandler+0xae>
        HAL_SD_TxCpltCallback(hsd);
 8009992:	4620      	mov	r0, r4
 8009994:	f7ff fc46 	bl	8009224 <HAL_SD_TxCpltCallback>
 8009998:	e7e7      	b.n	800996a <HAL_SD_IRQHandler+0xbe>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800999a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800999c:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 80099a0:	d002      	beq.n	80099a8 <HAL_SD_IRQHandler+0xfc>
 80099a2:	f015 0f08 	tst.w	r5, #8
 80099a6:	d162      	bne.n	8009a6e <HAL_SD_IRQHandler+0x1c2>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 80099a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80099aa:	f012 0f3a 	tst.w	r2, #58	@ 0x3a
 80099ae:	d06b      	beq.n	8009a88 <HAL_SD_IRQHandler+0x1dc>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80099b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80099b2:	f012 0f02 	tst.w	r2, #2
 80099b6:	d003      	beq.n	80099c0 <HAL_SD_IRQHandler+0x114>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80099b8:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80099ba:	f042 0202 	orr.w	r2, r2, #2
 80099be:	6362      	str	r2, [r4, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80099c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80099c2:	f012 0f08 	tst.w	r2, #8
 80099c6:	d003      	beq.n	80099d0 <HAL_SD_IRQHandler+0x124>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80099c8:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80099ca:	f042 0208 	orr.w	r2, r2, #8
 80099ce:	6362      	str	r2, [r4, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80099d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80099d2:	f012 0f20 	tst.w	r2, #32
 80099d6:	d003      	beq.n	80099e0 <HAL_SD_IRQHandler+0x134>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80099d8:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80099da:	f042 0220 	orr.w	r2, r2, #32
 80099de:	6362      	str	r2, [r4, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 80099e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80099e2:	f012 0f10 	tst.w	r2, #16
 80099e6:	d003      	beq.n	80099f0 <HAL_SD_IRQHandler+0x144>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80099e8:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80099ea:	f042 0210 	orr.w	r2, r2, #16
 80099ee:	6362      	str	r2, [r4, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80099f0:	4a38      	ldr	r2, [pc, #224]	@ (8009ad4 <HAL_SD_IRQHandler+0x228>)
 80099f2:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80099f4:	6822      	ldr	r2, [r4, #0]
 80099f6:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80099f8:	f423 739d 	bic.w	r3, r3, #314	@ 0x13a
 80099fc:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80099fe:	6822      	ldr	r2, [r4, #0]
 8009a00:	68d3      	ldr	r3, [r2, #12]
 8009a02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a06:	60d3      	str	r3, [r2, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8009a08:	6822      	ldr	r2, [r4, #0]
 8009a0a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8009a0c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8009a10:	62d3      	str	r3, [r2, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8009a12:	6822      	ldr	r2, [r4, #0]
 8009a14:	68d3      	ldr	r3, [r2, #12]
 8009a16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a1a:	60d3      	str	r3, [r2, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009a1c:	6820      	ldr	r0, [r4, #0]
 8009a1e:	f002 f8b9 	bl	800bb94 <SDMMC_CmdStopTransfer>
 8009a22:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009a24:	4303      	orrs	r3, r0
 8009a26:	6363      	str	r3, [r4, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8009a28:	6822      	ldr	r2, [r4, #0]
 8009a2a:	68d3      	ldr	r3, [r2, #12]
 8009a2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a30:	60d3      	str	r3, [r2, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8009a32:	6823      	ldr	r3, [r4, #0]
 8009a34:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009a38:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8009a3a:	f015 0f08 	tst.w	r5, #8
 8009a3e:	d11a      	bne.n	8009a76 <HAL_SD_IRQHandler+0x1ca>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8009a40:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8009a44:	f43f af6a 	beq.w	800991c <HAL_SD_IRQHandler+0x70>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009a48:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	f43f af66 	beq.w	800991c <HAL_SD_IRQHandler+0x70>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8009a50:	6822      	ldr	r2, [r4, #0]
 8009a52:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8009a54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a58:	63d3      	str	r3, [r2, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8009a5a:	6823      	ldr	r3, [r4, #0]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 8009a60:	2301      	movs	r3, #1
 8009a62:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 8009a66:	4620      	mov	r0, r4
 8009a68:	f7ff fbde 	bl	8009228 <HAL_SD_ErrorCallback>
 8009a6c:	e756      	b.n	800991c <HAL_SD_IRQHandler+0x70>
    SD_Write_IT(hsd);
 8009a6e:	4620      	mov	r0, r4
 8009a70:	f7ff fa46 	bl	8008f00 <SD_Write_IT>
 8009a74:	e752      	b.n	800991c <HAL_SD_IRQHandler+0x70>
      hsd->State = HAL_SD_STATE_READY;
 8009a76:	2301      	movs	r3, #1
 8009a78:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	62e3      	str	r3, [r4, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 8009a80:	4620      	mov	r0, r4
 8009a82:	f7ff fbd1 	bl	8009228 <HAL_SD_ErrorCallback>
 8009a86:	e749      	b.n	800991c <HAL_SD_IRQHandler+0x70>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8009a88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009a8a:	f012 5f80 	tst.w	r2, #268435456	@ 0x10000000
 8009a8e:	f43f af45 	beq.w	800991c <HAL_SD_IRQHandler+0x70>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8009a92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a96:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8009a98:	6823      	ldr	r3, [r4, #0]
 8009a9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a9c:	f013 0f04 	tst.w	r3, #4
 8009aa0:	d10a      	bne.n	8009ab8 <HAL_SD_IRQHandler+0x20c>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009aa2:	f015 0f20 	tst.w	r5, #32
 8009aa6:	d003      	beq.n	8009ab0 <HAL_SD_IRQHandler+0x204>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8009aa8:	4620      	mov	r0, r4
 8009aaa:	f7ff fefe 	bl	80098aa <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
 8009aae:	e735      	b.n	800991c <HAL_SD_IRQHandler+0x70>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8009ab0:	4620      	mov	r0, r4
 8009ab2:	f7ff fef8 	bl	80098a6 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
 8009ab6:	e731      	b.n	800991c <HAL_SD_IRQHandler+0x70>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009ab8:	f015 0f20 	tst.w	r5, #32
 8009abc:	d003      	beq.n	8009ac6 <HAL_SD_IRQHandler+0x21a>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8009abe:	4620      	mov	r0, r4
 8009ac0:	f7ff fef2 	bl	80098a8 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
 8009ac4:	e72a      	b.n	800991c <HAL_SD_IRQHandler+0x70>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8009ac6:	4620      	mov	r0, r4
 8009ac8:	f7ff feec 	bl	80098a4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8009acc:	e726      	b.n	800991c <HAL_SD_IRQHandler+0x70>
 8009ace:	bf00      	nop
 8009ad0:	ffff3ec5 	.word	0xffff3ec5
 8009ad4:	18000f3a 	.word	0x18000f3a

08009ad8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ad8:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ada:	6a03      	ldr	r3, [r0, #32]
 8009adc:	f023 0301 	bic.w	r3, r3, #1
 8009ae0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ae2:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ae4:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ae6:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009ae8:	4b1e      	ldr	r3, [pc, #120]	@ (8009b64 <TIM_OC1_SetConfig+0x8c>)
 8009aea:	4023      	ands	r3, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009aec:	680d      	ldr	r5, [r1, #0]
 8009aee:	431d      	orrs	r5, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009af0:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009af4:	688b      	ldr	r3, [r1, #8]
 8009af6:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009af8:	4a1b      	ldr	r2, [pc, #108]	@ (8009b68 <TIM_OC1_SetConfig+0x90>)
 8009afa:	4c1c      	ldr	r4, [pc, #112]	@ (8009b6c <TIM_OC1_SetConfig+0x94>)
 8009afc:	42a0      	cmp	r0, r4
 8009afe:	bf18      	it	ne
 8009b00:	4290      	cmpne	r0, r2
 8009b02:	bf0c      	ite	eq
 8009b04:	2201      	moveq	r2, #1
 8009b06:	2200      	movne	r2, #0
 8009b08:	d00c      	beq.n	8009b24 <TIM_OC1_SetConfig+0x4c>
 8009b0a:	f504 4480 	add.w	r4, r4, #16384	@ 0x4000
 8009b0e:	42a0      	cmp	r0, r4
 8009b10:	bf14      	ite	ne
 8009b12:	2400      	movne	r4, #0
 8009b14:	2401      	moveq	r4, #1
 8009b16:	4f16      	ldr	r7, [pc, #88]	@ (8009b70 <TIM_OC1_SetConfig+0x98>)
 8009b18:	42b8      	cmp	r0, r7
 8009b1a:	d003      	beq.n	8009b24 <TIM_OC1_SetConfig+0x4c>
 8009b1c:	b914      	cbnz	r4, 8009b24 <TIM_OC1_SetConfig+0x4c>
 8009b1e:	4c15      	ldr	r4, [pc, #84]	@ (8009b74 <TIM_OC1_SetConfig+0x9c>)
 8009b20:	42a0      	cmp	r0, r4
 8009b22:	d105      	bne.n	8009b30 <TIM_OC1_SetConfig+0x58>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009b24:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009b28:	68cc      	ldr	r4, [r1, #12]
 8009b2a:	4323      	orrs	r3, r4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009b2c:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b30:	b95a      	cbnz	r2, 8009b4a <TIM_OC1_SetConfig+0x72>
 8009b32:	4a11      	ldr	r2, [pc, #68]	@ (8009b78 <TIM_OC1_SetConfig+0xa0>)
 8009b34:	4290      	cmp	r0, r2
 8009b36:	bf14      	ite	ne
 8009b38:	2200      	movne	r2, #0
 8009b3a:	2201      	moveq	r2, #1
 8009b3c:	4c0c      	ldr	r4, [pc, #48]	@ (8009b70 <TIM_OC1_SetConfig+0x98>)
 8009b3e:	42a0      	cmp	r0, r4
 8009b40:	d003      	beq.n	8009b4a <TIM_OC1_SetConfig+0x72>
 8009b42:	b912      	cbnz	r2, 8009b4a <TIM_OC1_SetConfig+0x72>
 8009b44:	4a0b      	ldr	r2, [pc, #44]	@ (8009b74 <TIM_OC1_SetConfig+0x9c>)
 8009b46:	4290      	cmp	r0, r2
 8009b48:	d105      	bne.n	8009b56 <TIM_OC1_SetConfig+0x7e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009b4a:	f426 7640 	bic.w	r6, r6, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009b4e:	694a      	ldr	r2, [r1, #20]
 8009b50:	4332      	orrs	r2, r6
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009b52:	698e      	ldr	r6, [r1, #24]
 8009b54:	4316      	orrs	r6, r2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b56:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b58:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009b5a:	684a      	ldr	r2, [r1, #4]
 8009b5c:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b5e:	6203      	str	r3, [r0, #32]
}
 8009b60:	bcf0      	pop	{r4, r5, r6, r7}
 8009b62:	4770      	bx	lr
 8009b64:	fffeff8c 	.word	0xfffeff8c
 8009b68:	40010000 	.word	0x40010000
 8009b6c:	40010400 	.word	0x40010400
 8009b70:	40014000 	.word	0x40014000
 8009b74:	40014800 	.word	0x40014800
 8009b78:	40014400 	.word	0x40014400

08009b7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b7c:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009b7e:	6a03      	ldr	r3, [r0, #32]
 8009b80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009b84:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b86:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b88:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b8a:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009b8c:	4a1a      	ldr	r2, [pc, #104]	@ (8009bf8 <TIM_OC3_SetConfig+0x7c>)
 8009b8e:	4022      	ands	r2, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b90:	680e      	ldr	r6, [r1, #0]
 8009b92:	4316      	orrs	r6, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009b94:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009b98:	688a      	ldr	r2, [r1, #8]
 8009b9a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009b9e:	4a17      	ldr	r2, [pc, #92]	@ (8009bfc <TIM_OC3_SetConfig+0x80>)
 8009ba0:	4c17      	ldr	r4, [pc, #92]	@ (8009c00 <TIM_OC3_SetConfig+0x84>)
 8009ba2:	42a0      	cmp	r0, r4
 8009ba4:	bf18      	it	ne
 8009ba6:	4290      	cmpne	r0, r2
 8009ba8:	bf0c      	ite	eq
 8009baa:	2201      	moveq	r2, #1
 8009bac:	2200      	movne	r2, #0
 8009bae:	d106      	bne.n	8009bbe <TIM_OC3_SetConfig+0x42>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009bb0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009bb4:	68cc      	ldr	r4, [r1, #12]
 8009bb6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009bba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bbe:	b95a      	cbnz	r2, 8009bd8 <TIM_OC3_SetConfig+0x5c>
 8009bc0:	4a10      	ldr	r2, [pc, #64]	@ (8009c04 <TIM_OC3_SetConfig+0x88>)
 8009bc2:	4290      	cmp	r0, r2
 8009bc4:	bf14      	ite	ne
 8009bc6:	2200      	movne	r2, #0
 8009bc8:	2201      	moveq	r2, #1
 8009bca:	4c0f      	ldr	r4, [pc, #60]	@ (8009c08 <TIM_OC3_SetConfig+0x8c>)
 8009bcc:	42a0      	cmp	r0, r4
 8009bce:	d003      	beq.n	8009bd8 <TIM_OC3_SetConfig+0x5c>
 8009bd0:	b912      	cbnz	r2, 8009bd8 <TIM_OC3_SetConfig+0x5c>
 8009bd2:	4a0e      	ldr	r2, [pc, #56]	@ (8009c0c <TIM_OC3_SetConfig+0x90>)
 8009bd4:	4290      	cmp	r0, r2
 8009bd6:	d107      	bne.n	8009be8 <TIM_OC3_SetConfig+0x6c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009bd8:	f425 5240 	bic.w	r2, r5, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009bdc:	694c      	ldr	r4, [r1, #20]
 8009bde:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009be2:	698c      	ldr	r4, [r1, #24]
 8009be4:	ea42 1504 	orr.w	r5, r2, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009be8:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009bea:	61c6      	str	r6, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009bec:	684a      	ldr	r2, [r1, #4]
 8009bee:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bf0:	6203      	str	r3, [r0, #32]
}
 8009bf2:	bc70      	pop	{r4, r5, r6}
 8009bf4:	4770      	bx	lr
 8009bf6:	bf00      	nop
 8009bf8:	fffeff8c 	.word	0xfffeff8c
 8009bfc:	40010000 	.word	0x40010000
 8009c00:	40010400 	.word	0x40010400
 8009c04:	40014400 	.word	0x40014400
 8009c08:	40014000 	.word	0x40014000
 8009c0c:	40014800 	.word	0x40014800

08009c10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c10:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009c12:	6a03      	ldr	r3, [r0, #32]
 8009c14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009c18:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c1a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c1c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c1e:	69c5      	ldr	r5, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009c20:	4a14      	ldr	r2, [pc, #80]	@ (8009c74 <TIM_OC4_SetConfig+0x64>)
 8009c22:	402a      	ands	r2, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c24:	680d      	ldr	r5, [r1, #0]
 8009c26:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009c2a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009c2e:	688d      	ldr	r5, [r1, #8]
 8009c30:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c34:	4e10      	ldr	r6, [pc, #64]	@ (8009c78 <TIM_OC4_SetConfig+0x68>)
 8009c36:	4d11      	ldr	r5, [pc, #68]	@ (8009c7c <TIM_OC4_SetConfig+0x6c>)
 8009c38:	42a8      	cmp	r0, r5
 8009c3a:	bf18      	it	ne
 8009c3c:	42b0      	cmpne	r0, r6
 8009c3e:	d00d      	beq.n	8009c5c <TIM_OC4_SetConfig+0x4c>
 8009c40:	f505 4580 	add.w	r5, r5, #16384	@ 0x4000
 8009c44:	42a8      	cmp	r0, r5
 8009c46:	bf14      	ite	ne
 8009c48:	2500      	movne	r5, #0
 8009c4a:	2501      	moveq	r5, #1
 8009c4c:	f506 4680 	add.w	r6, r6, #16384	@ 0x4000
 8009c50:	42b0      	cmp	r0, r6
 8009c52:	d003      	beq.n	8009c5c <TIM_OC4_SetConfig+0x4c>
 8009c54:	b915      	cbnz	r5, 8009c5c <TIM_OC4_SetConfig+0x4c>
 8009c56:	4d0a      	ldr	r5, [pc, #40]	@ (8009c80 <TIM_OC4_SetConfig+0x70>)
 8009c58:	42a8      	cmp	r0, r5
 8009c5a:	d104      	bne.n	8009c66 <TIM_OC4_SetConfig+0x56>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009c5c:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009c60:	694d      	ldr	r5, [r1, #20]
 8009c62:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c66:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c68:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009c6a:	684a      	ldr	r2, [r1, #4]
 8009c6c:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c6e:	6203      	str	r3, [r0, #32]
}
 8009c70:	bc70      	pop	{r4, r5, r6}
 8009c72:	4770      	bx	lr
 8009c74:	feff8cff 	.word	0xfeff8cff
 8009c78:	40010000 	.word	0x40010000
 8009c7c:	40010400 	.word	0x40010400
 8009c80:	40014800 	.word	0x40014800

08009c84 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009c84:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009c86:	6a03      	ldr	r3, [r0, #32]
 8009c88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009c8c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c8e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c90:	6842      	ldr	r2, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009c92:	6d45      	ldr	r5, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009c94:	4e14      	ldr	r6, [pc, #80]	@ (8009ce8 <TIM_OC5_SetConfig+0x64>)
 8009c96:	402e      	ands	r6, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c98:	680d      	ldr	r5, [r1, #0]
 8009c9a:	432e      	orrs	r6, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009c9c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009ca0:	688c      	ldr	r4, [r1, #8]
 8009ca2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ca6:	4d11      	ldr	r5, [pc, #68]	@ (8009cec <TIM_OC5_SetConfig+0x68>)
 8009ca8:	4c11      	ldr	r4, [pc, #68]	@ (8009cf0 <TIM_OC5_SetConfig+0x6c>)
 8009caa:	42a0      	cmp	r0, r4
 8009cac:	bf18      	it	ne
 8009cae:	42a8      	cmpne	r0, r5
 8009cb0:	d00d      	beq.n	8009cce <TIM_OC5_SetConfig+0x4a>
 8009cb2:	f504 4480 	add.w	r4, r4, #16384	@ 0x4000
 8009cb6:	42a0      	cmp	r0, r4
 8009cb8:	bf14      	ite	ne
 8009cba:	2400      	movne	r4, #0
 8009cbc:	2401      	moveq	r4, #1
 8009cbe:	f505 4580 	add.w	r5, r5, #16384	@ 0x4000
 8009cc2:	42a8      	cmp	r0, r5
 8009cc4:	d003      	beq.n	8009cce <TIM_OC5_SetConfig+0x4a>
 8009cc6:	b914      	cbnz	r4, 8009cce <TIM_OC5_SetConfig+0x4a>
 8009cc8:	4c0a      	ldr	r4, [pc, #40]	@ (8009cf4 <TIM_OC5_SetConfig+0x70>)
 8009cca:	42a0      	cmp	r0, r4
 8009ccc:	d104      	bne.n	8009cd8 <TIM_OC5_SetConfig+0x54>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009cce:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009cd2:	694c      	ldr	r4, [r1, #20]
 8009cd4:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cd8:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009cda:	6546      	str	r6, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009cdc:	684a      	ldr	r2, [r1, #4]
 8009cde:	6582      	str	r2, [r0, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ce0:	6203      	str	r3, [r0, #32]
}
 8009ce2:	bc70      	pop	{r4, r5, r6}
 8009ce4:	4770      	bx	lr
 8009ce6:	bf00      	nop
 8009ce8:	fffeff8f 	.word	0xfffeff8f
 8009cec:	40010000 	.word	0x40010000
 8009cf0:	40010400 	.word	0x40010400
 8009cf4:	40014800 	.word	0x40014800

08009cf8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009cf8:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009cfa:	6a03      	ldr	r3, [r0, #32]
 8009cfc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009d00:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d02:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d04:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009d06:	6d45      	ldr	r5, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009d08:	4a14      	ldr	r2, [pc, #80]	@ (8009d5c <TIM_OC6_SetConfig+0x64>)
 8009d0a:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d0c:	680d      	ldr	r5, [r1, #0]
 8009d0e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009d12:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009d16:	688d      	ldr	r5, [r1, #8]
 8009d18:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d1c:	4e10      	ldr	r6, [pc, #64]	@ (8009d60 <TIM_OC6_SetConfig+0x68>)
 8009d1e:	4d11      	ldr	r5, [pc, #68]	@ (8009d64 <TIM_OC6_SetConfig+0x6c>)
 8009d20:	42a8      	cmp	r0, r5
 8009d22:	bf18      	it	ne
 8009d24:	42b0      	cmpne	r0, r6
 8009d26:	d00d      	beq.n	8009d44 <TIM_OC6_SetConfig+0x4c>
 8009d28:	f505 4580 	add.w	r5, r5, #16384	@ 0x4000
 8009d2c:	42a8      	cmp	r0, r5
 8009d2e:	bf14      	ite	ne
 8009d30:	2500      	movne	r5, #0
 8009d32:	2501      	moveq	r5, #1
 8009d34:	f506 4680 	add.w	r6, r6, #16384	@ 0x4000
 8009d38:	42b0      	cmp	r0, r6
 8009d3a:	d003      	beq.n	8009d44 <TIM_OC6_SetConfig+0x4c>
 8009d3c:	b915      	cbnz	r5, 8009d44 <TIM_OC6_SetConfig+0x4c>
 8009d3e:	4d0a      	ldr	r5, [pc, #40]	@ (8009d68 <TIM_OC6_SetConfig+0x70>)
 8009d40:	42a8      	cmp	r0, r5
 8009d42:	d104      	bne.n	8009d4e <TIM_OC6_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009d44:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009d48:	694d      	ldr	r5, [r1, #20]
 8009d4a:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d4e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009d50:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009d52:	684a      	ldr	r2, [r1, #4]
 8009d54:	65c2      	str	r2, [r0, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d56:	6203      	str	r3, [r0, #32]
}
 8009d58:	bc70      	pop	{r4, r5, r6}
 8009d5a:	4770      	bx	lr
 8009d5c:	feff8fff 	.word	0xfeff8fff
 8009d60:	40010000 	.word	0x40010000
 8009d64:	40010400 	.word	0x40010400
 8009d68:	40014800 	.word	0x40014800

08009d6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d6c:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009d6e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d70:	6a04      	ldr	r4, [r0, #32]
 8009d72:	f024 0401 	bic.w	r4, r4, #1
 8009d76:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d78:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009d7a:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009d7e:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009d82:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8009d86:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009d88:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8009d8a:	6203      	str	r3, [r0, #32]
}
 8009d8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d90:	4770      	bx	lr

08009d92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d92:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d94:	6a03      	ldr	r3, [r0, #32]
 8009d96:	f023 0310 	bic.w	r3, r3, #16
 8009d9a:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d9c:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8009d9e:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009da0:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009da4:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009da8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8009dac:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009db0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8009db2:	6203      	str	r3, [r0, #32]
}
 8009db4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009db8:	4770      	bx	lr
	...

08009dbc <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009dbc:	6882      	ldr	r2, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009dbe:	4b03      	ldr	r3, [pc, #12]	@ (8009dcc <TIM_ITRx_SetConfig+0x10>)
 8009dc0:	4013      	ands	r3, r2
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009dc2:	430b      	orrs	r3, r1
 8009dc4:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009dc8:	6083      	str	r3, [r0, #8]
}
 8009dca:	4770      	bx	lr
 8009dcc:	ffcfff8f 	.word	0xffcfff8f

08009dd0 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8009dd0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8009dd4:	b2db      	uxtb	r3, r3
 8009dd6:	2b01      	cmp	r3, #1
 8009dd8:	d13a      	bne.n	8009e50 <HAL_TIM_Base_Start_IT+0x80>
  htim->State = HAL_TIM_STATE_BUSY;
 8009dda:	2302      	movs	r3, #2
 8009ddc:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009de0:	6802      	ldr	r2, [r0, #0]
 8009de2:	68d3      	ldr	r3, [r2, #12]
 8009de4:	f043 0301 	orr.w	r3, r3, #1
 8009de8:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009dea:	6803      	ldr	r3, [r0, #0]
 8009dec:	4a1a      	ldr	r2, [pc, #104]	@ (8009e58 <HAL_TIM_Base_Start_IT+0x88>)
 8009dee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009df2:	bf18      	it	ne
 8009df4:	4293      	cmpne	r3, r2
 8009df6:	d01d      	beq.n	8009e34 <HAL_TIM_Base_Start_IT+0x64>
 8009df8:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d019      	beq.n	8009e34 <HAL_TIM_Base_Start_IT+0x64>
 8009e00:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d015      	beq.n	8009e34 <HAL_TIM_Base_Start_IT+0x64>
 8009e08:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d011      	beq.n	8009e34 <HAL_TIM_Base_Start_IT+0x64>
 8009e10:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d00d      	beq.n	8009e34 <HAL_TIM_Base_Start_IT+0x64>
 8009e18:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d009      	beq.n	8009e34 <HAL_TIM_Base_Start_IT+0x64>
 8009e20:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d005      	beq.n	8009e34 <HAL_TIM_Base_Start_IT+0x64>
    __HAL_TIM_ENABLE(htim);
 8009e28:	681a      	ldr	r2, [r3, #0]
 8009e2a:	f042 0201 	orr.w	r2, r2, #1
 8009e2e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8009e30:	2000      	movs	r0, #0
 8009e32:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e34:	6899      	ldr	r1, [r3, #8]
 8009e36:	4a09      	ldr	r2, [pc, #36]	@ (8009e5c <HAL_TIM_Base_Start_IT+0x8c>)
 8009e38:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e3a:	2a06      	cmp	r2, #6
 8009e3c:	bf18      	it	ne
 8009e3e:	f5b2 3f80 	cmpne.w	r2, #65536	@ 0x10000
 8009e42:	d007      	beq.n	8009e54 <HAL_TIM_Base_Start_IT+0x84>
      __HAL_TIM_ENABLE(htim);
 8009e44:	681a      	ldr	r2, [r3, #0]
 8009e46:	f042 0201 	orr.w	r2, r2, #1
 8009e4a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8009e4c:	2000      	movs	r0, #0
 8009e4e:	4770      	bx	lr
    return HAL_ERROR;
 8009e50:	2001      	movs	r0, #1
 8009e52:	4770      	bx	lr
  return HAL_OK;
 8009e54:	2000      	movs	r0, #0
}
 8009e56:	4770      	bx	lr
 8009e58:	40010000 	.word	0x40010000
 8009e5c:	00010007 	.word	0x00010007

08009e60 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009e60:	6802      	ldr	r2, [r0, #0]
 8009e62:	68d3      	ldr	r3, [r2, #12]
 8009e64:	f023 0301 	bic.w	r3, r3, #1
 8009e68:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 8009e6a:	6803      	ldr	r3, [r0, #0]
 8009e6c:	6a19      	ldr	r1, [r3, #32]
 8009e6e:	f241 1211 	movw	r2, #4369	@ 0x1111
 8009e72:	4211      	tst	r1, r2
 8009e74:	d108      	bne.n	8009e88 <HAL_TIM_Base_Stop_IT+0x28>
 8009e76:	6a19      	ldr	r1, [r3, #32]
 8009e78:	f240 4244 	movw	r2, #1092	@ 0x444
 8009e7c:	4211      	tst	r1, r2
 8009e7e:	d103      	bne.n	8009e88 <HAL_TIM_Base_Stop_IT+0x28>
 8009e80:	681a      	ldr	r2, [r3, #0]
 8009e82:	f022 0201 	bic.w	r2, r2, #1
 8009e86:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8009e88:	2301      	movs	r3, #1
 8009e8a:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
}
 8009e8e:	2000      	movs	r0, #0
 8009e90:	4770      	bx	lr

08009e92 <HAL_TIM_PWM_MspInit>:
}
 8009e92:	4770      	bx	lr

08009e94 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8009e94:	4770      	bx	lr

08009e96 <HAL_TIM_IC_CaptureCallback>:
}
 8009e96:	4770      	bx	lr

08009e98 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8009e98:	4770      	bx	lr

08009e9a <HAL_TIM_TriggerCallback>:
}
 8009e9a:	4770      	bx	lr

08009e9c <HAL_TIM_IRQHandler>:
{
 8009e9c:	b510      	push	{r4, lr}
 8009e9e:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009ea0:	6803      	ldr	r3, [r0, #0]
 8009ea2:	691a      	ldr	r2, [r3, #16]
 8009ea4:	f012 0f02 	tst.w	r2, #2
 8009ea8:	d011      	beq.n	8009ece <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009eaa:	68da      	ldr	r2, [r3, #12]
 8009eac:	f012 0f02 	tst.w	r2, #2
 8009eb0:	d00d      	beq.n	8009ece <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009eb2:	f06f 0202 	mvn.w	r2, #2
 8009eb6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009eb8:	2301      	movs	r3, #1
 8009eba:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009ebc:	6803      	ldr	r3, [r0, #0]
 8009ebe:	699b      	ldr	r3, [r3, #24]
 8009ec0:	f013 0f03 	tst.w	r3, #3
 8009ec4:	d079      	beq.n	8009fba <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8009ec6:	f7ff ffe6 	bl	8009e96 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009ece:	6823      	ldr	r3, [r4, #0]
 8009ed0:	691a      	ldr	r2, [r3, #16]
 8009ed2:	f012 0f04 	tst.w	r2, #4
 8009ed6:	d012      	beq.n	8009efe <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009ed8:	68da      	ldr	r2, [r3, #12]
 8009eda:	f012 0f04 	tst.w	r2, #4
 8009ede:	d00e      	beq.n	8009efe <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009ee0:	f06f 0204 	mvn.w	r2, #4
 8009ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009ee6:	2302      	movs	r3, #2
 8009ee8:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009eea:	6823      	ldr	r3, [r4, #0]
 8009eec:	699b      	ldr	r3, [r3, #24]
 8009eee:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8009ef2:	d068      	beq.n	8009fc6 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8009ef4:	4620      	mov	r0, r4
 8009ef6:	f7ff ffce 	bl	8009e96 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009efa:	2300      	movs	r3, #0
 8009efc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009efe:	6823      	ldr	r3, [r4, #0]
 8009f00:	691a      	ldr	r2, [r3, #16]
 8009f02:	f012 0f08 	tst.w	r2, #8
 8009f06:	d012      	beq.n	8009f2e <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009f08:	68da      	ldr	r2, [r3, #12]
 8009f0a:	f012 0f08 	tst.w	r2, #8
 8009f0e:	d00e      	beq.n	8009f2e <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009f10:	f06f 0208 	mvn.w	r2, #8
 8009f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009f16:	2304      	movs	r3, #4
 8009f18:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009f1a:	6823      	ldr	r3, [r4, #0]
 8009f1c:	69db      	ldr	r3, [r3, #28]
 8009f1e:	f013 0f03 	tst.w	r3, #3
 8009f22:	d057      	beq.n	8009fd4 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8009f24:	4620      	mov	r0, r4
 8009f26:	f7ff ffb6 	bl	8009e96 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009f2e:	6823      	ldr	r3, [r4, #0]
 8009f30:	691a      	ldr	r2, [r3, #16]
 8009f32:	f012 0f10 	tst.w	r2, #16
 8009f36:	d012      	beq.n	8009f5e <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009f38:	68da      	ldr	r2, [r3, #12]
 8009f3a:	f012 0f10 	tst.w	r2, #16
 8009f3e:	d00e      	beq.n	8009f5e <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009f40:	f06f 0210 	mvn.w	r2, #16
 8009f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009f46:	2308      	movs	r3, #8
 8009f48:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009f4a:	6823      	ldr	r3, [r4, #0]
 8009f4c:	69db      	ldr	r3, [r3, #28]
 8009f4e:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8009f52:	d046      	beq.n	8009fe2 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8009f54:	4620      	mov	r0, r4
 8009f56:	f7ff ff9e 	bl	8009e96 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009f5e:	6823      	ldr	r3, [r4, #0]
 8009f60:	691a      	ldr	r2, [r3, #16]
 8009f62:	f012 0f01 	tst.w	r2, #1
 8009f66:	d003      	beq.n	8009f70 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009f68:	68da      	ldr	r2, [r3, #12]
 8009f6a:	f012 0f01 	tst.w	r2, #1
 8009f6e:	d13f      	bne.n	8009ff0 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009f70:	6823      	ldr	r3, [r4, #0]
 8009f72:	691a      	ldr	r2, [r3, #16]
 8009f74:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8009f78:	d003      	beq.n	8009f82 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009f7a:	68da      	ldr	r2, [r3, #12]
 8009f7c:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8009f80:	d13d      	bne.n	8009ffe <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009f82:	6823      	ldr	r3, [r4, #0]
 8009f84:	691a      	ldr	r2, [r3, #16]
 8009f86:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8009f8a:	d003      	beq.n	8009f94 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009f8c:	68da      	ldr	r2, [r3, #12]
 8009f8e:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8009f92:	d13b      	bne.n	800a00c <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009f94:	6823      	ldr	r3, [r4, #0]
 8009f96:	691a      	ldr	r2, [r3, #16]
 8009f98:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8009f9c:	d003      	beq.n	8009fa6 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009f9e:	68da      	ldr	r2, [r3, #12]
 8009fa0:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8009fa4:	d139      	bne.n	800a01a <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009fa6:	6823      	ldr	r3, [r4, #0]
 8009fa8:	691a      	ldr	r2, [r3, #16]
 8009faa:	f012 0f20 	tst.w	r2, #32
 8009fae:	d003      	beq.n	8009fb8 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009fb0:	68da      	ldr	r2, [r3, #12]
 8009fb2:	f012 0f20 	tst.w	r2, #32
 8009fb6:	d137      	bne.n	800a028 <HAL_TIM_IRQHandler+0x18c>
}
 8009fb8:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fba:	f7ff ff6b 	bl	8009e94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fbe:	4620      	mov	r0, r4
 8009fc0:	f7ff ff6a 	bl	8009e98 <HAL_TIM_PWM_PulseFinishedCallback>
 8009fc4:	e781      	b.n	8009eca <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fc6:	4620      	mov	r0, r4
 8009fc8:	f7ff ff64 	bl	8009e94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fcc:	4620      	mov	r0, r4
 8009fce:	f7ff ff63 	bl	8009e98 <HAL_TIM_PWM_PulseFinishedCallback>
 8009fd2:	e792      	b.n	8009efa <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fd4:	4620      	mov	r0, r4
 8009fd6:	f7ff ff5d 	bl	8009e94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fda:	4620      	mov	r0, r4
 8009fdc:	f7ff ff5c 	bl	8009e98 <HAL_TIM_PWM_PulseFinishedCallback>
 8009fe0:	e7a3      	b.n	8009f2a <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	f7ff ff56 	bl	8009e94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fe8:	4620      	mov	r0, r4
 8009fea:	f7ff ff55 	bl	8009e98 <HAL_TIM_PWM_PulseFinishedCallback>
 8009fee:	e7b4      	b.n	8009f5a <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009ff0:	f06f 0201 	mvn.w	r2, #1
 8009ff4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8009ff6:	4620      	mov	r0, r4
 8009ff8:	f7f6 fc36 	bl	8000868 <HAL_TIM_PeriodElapsedCallback>
 8009ffc:	e7b8      	b.n	8009f70 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009ffe:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a002:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800a004:	4620      	mov	r0, r4
 800a006:	f000 fba2 	bl	800a74e <HAL_TIMEx_BreakCallback>
 800a00a:	e7ba      	b.n	8009f82 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a00c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a010:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800a012:	4620      	mov	r0, r4
 800a014:	f000 fb9c 	bl	800a750 <HAL_TIMEx_Break2Callback>
 800a018:	e7bc      	b.n	8009f94 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a01a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a01e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800a020:	4620      	mov	r0, r4
 800a022:	f7ff ff3a 	bl	8009e9a <HAL_TIM_TriggerCallback>
 800a026:	e7be      	b.n	8009fa6 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a028:	f06f 0220 	mvn.w	r2, #32
 800a02c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800a02e:	4620      	mov	r0, r4
 800a030:	f000 fb8c 	bl	800a74c <HAL_TIMEx_CommutCallback>
}
 800a034:	e7c0      	b.n	8009fb8 <HAL_TIM_IRQHandler+0x11c>
	...

0800a038 <TIM_Base_SetConfig>:
{
 800a038:	b530      	push	{r4, r5, lr}
  tmpcr1 = TIMx->CR1;
 800a03a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a03c:	4a39      	ldr	r2, [pc, #228]	@ (800a124 <TIM_Base_SetConfig+0xec>)
 800a03e:	4290      	cmp	r0, r2
 800a040:	bf14      	ite	ne
 800a042:	f04f 0e00 	movne.w	lr, #0
 800a046:	f04f 0e01 	moveq.w	lr, #1
 800a04a:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800a04e:	bf14      	ite	ne
 800a050:	4672      	movne	r2, lr
 800a052:	f04e 0201 	orreq.w	r2, lr, #1
 800a056:	b9aa      	cbnz	r2, 800a084 <TIM_Base_SetConfig+0x4c>
 800a058:	4c33      	ldr	r4, [pc, #204]	@ (800a128 <TIM_Base_SetConfig+0xf0>)
 800a05a:	42a0      	cmp	r0, r4
 800a05c:	bf14      	ite	ne
 800a05e:	2400      	movne	r4, #0
 800a060:	2401      	moveq	r4, #1
 800a062:	4d32      	ldr	r5, [pc, #200]	@ (800a12c <TIM_Base_SetConfig+0xf4>)
 800a064:	42a8      	cmp	r0, r5
 800a066:	d00d      	beq.n	800a084 <TIM_Base_SetConfig+0x4c>
 800a068:	b964      	cbnz	r4, 800a084 <TIM_Base_SetConfig+0x4c>
 800a06a:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 800a06e:	f504 3482 	add.w	r4, r4, #66560	@ 0x10400
 800a072:	42a0      	cmp	r0, r4
 800a074:	bf14      	ite	ne
 800a076:	2400      	movne	r4, #0
 800a078:	2401      	moveq	r4, #1
 800a07a:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 800a07e:	42a8      	cmp	r0, r5
 800a080:	d000      	beq.n	800a084 <TIM_Base_SetConfig+0x4c>
 800a082:	b11c      	cbz	r4, 800a08c <TIM_Base_SetConfig+0x54>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a084:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800a088:	684c      	ldr	r4, [r1, #4]
 800a08a:	4323      	orrs	r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a08c:	bb12      	cbnz	r2, 800a0d4 <TIM_Base_SetConfig+0x9c>
 800a08e:	4a26      	ldr	r2, [pc, #152]	@ (800a128 <TIM_Base_SetConfig+0xf0>)
 800a090:	4290      	cmp	r0, r2
 800a092:	bf14      	ite	ne
 800a094:	2200      	movne	r2, #0
 800a096:	2201      	moveq	r2, #1
 800a098:	4c24      	ldr	r4, [pc, #144]	@ (800a12c <TIM_Base_SetConfig+0xf4>)
 800a09a:	42a0      	cmp	r0, r4
 800a09c:	d01a      	beq.n	800a0d4 <TIM_Base_SetConfig+0x9c>
 800a09e:	b9ca      	cbnz	r2, 800a0d4 <TIM_Base_SetConfig+0x9c>
 800a0a0:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800a0a4:	f502 3282 	add.w	r2, r2, #66560	@ 0x10400
 800a0a8:	4290      	cmp	r0, r2
 800a0aa:	bf14      	ite	ne
 800a0ac:	2200      	movne	r2, #0
 800a0ae:	2201      	moveq	r2, #1
 800a0b0:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
 800a0b4:	42a0      	cmp	r0, r4
 800a0b6:	d00d      	beq.n	800a0d4 <TIM_Base_SetConfig+0x9c>
 800a0b8:	b962      	cbnz	r2, 800a0d4 <TIM_Base_SetConfig+0x9c>
 800a0ba:	4a1d      	ldr	r2, [pc, #116]	@ (800a130 <TIM_Base_SetConfig+0xf8>)
 800a0bc:	4290      	cmp	r0, r2
 800a0be:	bf14      	ite	ne
 800a0c0:	2200      	movne	r2, #0
 800a0c2:	2201      	moveq	r2, #1
 800a0c4:	f504 349a 	add.w	r4, r4, #78848	@ 0x13400
 800a0c8:	42a0      	cmp	r0, r4
 800a0ca:	d003      	beq.n	800a0d4 <TIM_Base_SetConfig+0x9c>
 800a0cc:	b912      	cbnz	r2, 800a0d4 <TIM_Base_SetConfig+0x9c>
 800a0ce:	4a19      	ldr	r2, [pc, #100]	@ (800a134 <TIM_Base_SetConfig+0xfc>)
 800a0d0:	4290      	cmp	r0, r2
 800a0d2:	d104      	bne.n	800a0de <TIM_Base_SetConfig+0xa6>
    tmpcr1 &= ~TIM_CR1_CKD;
 800a0d4:	f423 7c40 	bic.w	ip, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a0d8:	68cb      	ldr	r3, [r1, #12]
 800a0da:	ea43 030c 	orr.w	r3, r3, ip
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a0de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a0e2:	694a      	ldr	r2, [r1, #20]
 800a0e4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800a0e6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a0e8:	688a      	ldr	r2, [r1, #8]
 800a0ea:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800a0ec:	680a      	ldr	r2, [r1, #0]
 800a0ee:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a0f0:	4a11      	ldr	r2, [pc, #68]	@ (800a138 <TIM_Base_SetConfig+0x100>)
 800a0f2:	4290      	cmp	r0, r2
 800a0f4:	bf14      	ite	ne
 800a0f6:	4673      	movne	r3, lr
 800a0f8:	f04e 0301 	orreq.w	r3, lr, #1
 800a0fc:	b963      	cbnz	r3, 800a118 <TIM_Base_SetConfig+0xe0>
 800a0fe:	4b0c      	ldr	r3, [pc, #48]	@ (800a130 <TIM_Base_SetConfig+0xf8>)
 800a100:	4298      	cmp	r0, r3
 800a102:	bf14      	ite	ne
 800a104:	2300      	movne	r3, #0
 800a106:	2301      	moveq	r3, #1
 800a108:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800a10c:	4290      	cmp	r0, r2
 800a10e:	d003      	beq.n	800a118 <TIM_Base_SetConfig+0xe0>
 800a110:	b913      	cbnz	r3, 800a118 <TIM_Base_SetConfig+0xe0>
 800a112:	4b08      	ldr	r3, [pc, #32]	@ (800a134 <TIM_Base_SetConfig+0xfc>)
 800a114:	4298      	cmp	r0, r3
 800a116:	d101      	bne.n	800a11c <TIM_Base_SetConfig+0xe4>
    TIMx->RCR = Structure->RepetitionCounter;
 800a118:	690b      	ldr	r3, [r1, #16]
 800a11a:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 800a11c:	2301      	movs	r3, #1
 800a11e:	6143      	str	r3, [r0, #20]
}
 800a120:	bd30      	pop	{r4, r5, pc}
 800a122:	bf00      	nop
 800a124:	40010000 	.word	0x40010000
 800a128:	40000800 	.word	0x40000800
 800a12c:	40000400 	.word	0x40000400
 800a130:	40014400 	.word	0x40014400
 800a134:	40014800 	.word	0x40014800
 800a138:	40010400 	.word	0x40010400

0800a13c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800a13c:	b360      	cbz	r0, 800a198 <HAL_TIM_Base_Init+0x5c>
{
 800a13e:	b510      	push	{r4, lr}
 800a140:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800a142:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800a146:	b313      	cbz	r3, 800a18e <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800a148:	2302      	movs	r3, #2
 800a14a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a14e:	4621      	mov	r1, r4
 800a150:	f851 0b04 	ldr.w	r0, [r1], #4
 800a154:	f7ff ff70 	bl	800a038 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a158:	2301      	movs	r3, #1
 800a15a:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a15e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800a162:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800a166:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800a16a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800a16e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a172:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a176:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800a17a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800a17e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800a182:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800a186:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800a18a:	2000      	movs	r0, #0
}
 800a18c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800a18e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800a192:	f7f8 f969 	bl	8002468 <HAL_TIM_Base_MspInit>
 800a196:	e7d7      	b.n	800a148 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800a198:	2001      	movs	r0, #1
}
 800a19a:	4770      	bx	lr

0800a19c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800a19c:	b360      	cbz	r0, 800a1f8 <HAL_TIM_PWM_Init+0x5c>
{
 800a19e:	b510      	push	{r4, lr}
 800a1a0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800a1a2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800a1a6:	b313      	cbz	r3, 800a1ee <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800a1a8:	2302      	movs	r3, #2
 800a1aa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a1ae:	4621      	mov	r1, r4
 800a1b0:	f851 0b04 	ldr.w	r0, [r1], #4
 800a1b4:	f7ff ff40 	bl	800a038 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1be:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800a1c2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800a1c6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800a1ca:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800a1ce:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a1d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1d6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800a1da:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800a1de:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800a1e2:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800a1e6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800a1ea:	2000      	movs	r0, #0
}
 800a1ec:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800a1ee:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800a1f2:	f7ff fe4e 	bl	8009e92 <HAL_TIM_PWM_MspInit>
 800a1f6:	e7d7      	b.n	800a1a8 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 800a1f8:	2001      	movs	r0, #1
}
 800a1fa:	4770      	bx	lr

0800a1fc <TIM_OC2_SetConfig>:
{
 800a1fc:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a1fe:	6a03      	ldr	r3, [r0, #32]
 800a200:	f023 0310 	bic.w	r3, r3, #16
 800a204:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800a206:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800a208:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800a20a:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a20c:	4e1a      	ldr	r6, [pc, #104]	@ (800a278 <TIM_OC2_SetConfig+0x7c>)
 800a20e:	4026      	ands	r6, r4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a210:	680c      	ldr	r4, [r1, #0]
 800a212:	ea46 2604 	orr.w	r6, r6, r4, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800a216:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a21a:	688a      	ldr	r2, [r1, #8]
 800a21c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a220:	4a16      	ldr	r2, [pc, #88]	@ (800a27c <TIM_OC2_SetConfig+0x80>)
 800a222:	4c17      	ldr	r4, [pc, #92]	@ (800a280 <TIM_OC2_SetConfig+0x84>)
 800a224:	42a0      	cmp	r0, r4
 800a226:	bf18      	it	ne
 800a228:	4290      	cmpne	r0, r2
 800a22a:	bf0c      	ite	eq
 800a22c:	2201      	moveq	r2, #1
 800a22e:	2200      	movne	r2, #0
 800a230:	d106      	bne.n	800a240 <TIM_OC2_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC2NP;
 800a232:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a236:	68cc      	ldr	r4, [r1, #12]
 800a238:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800a23c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a240:	b95a      	cbnz	r2, 800a25a <TIM_OC2_SetConfig+0x5e>
 800a242:	4a10      	ldr	r2, [pc, #64]	@ (800a284 <TIM_OC2_SetConfig+0x88>)
 800a244:	4290      	cmp	r0, r2
 800a246:	bf14      	ite	ne
 800a248:	2200      	movne	r2, #0
 800a24a:	2201      	moveq	r2, #1
 800a24c:	4c0e      	ldr	r4, [pc, #56]	@ (800a288 <TIM_OC2_SetConfig+0x8c>)
 800a24e:	42a0      	cmp	r0, r4
 800a250:	d003      	beq.n	800a25a <TIM_OC2_SetConfig+0x5e>
 800a252:	b912      	cbnz	r2, 800a25a <TIM_OC2_SetConfig+0x5e>
 800a254:	4a0d      	ldr	r2, [pc, #52]	@ (800a28c <TIM_OC2_SetConfig+0x90>)
 800a256:	4290      	cmp	r0, r2
 800a258:	d107      	bne.n	800a26a <TIM_OC2_SetConfig+0x6e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a25a:	f425 6c40 	bic.w	ip, r5, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a25e:	694a      	ldr	r2, [r1, #20]
 800a260:	ea4c 0c82 	orr.w	ip, ip, r2, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a264:	698a      	ldr	r2, [r1, #24]
 800a266:	ea4c 0582 	orr.w	r5, ip, r2, lsl #2
  TIMx->CR2 = tmpcr2;
 800a26a:	6045      	str	r5, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800a26c:	6186      	str	r6, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800a26e:	684a      	ldr	r2, [r1, #4]
 800a270:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 800a272:	6203      	str	r3, [r0, #32]
}
 800a274:	bc70      	pop	{r4, r5, r6}
 800a276:	4770      	bx	lr
 800a278:	feff8cff 	.word	0xfeff8cff
 800a27c:	40010000 	.word	0x40010000
 800a280:	40010400 	.word	0x40010400
 800a284:	40014400 	.word	0x40014400
 800a288:	40014000 	.word	0x40014000
 800a28c:	40014800 	.word	0x40014800

0800a290 <HAL_TIM_PWM_ConfigChannel>:
{
 800a290:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800a292:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800a296:	2b01      	cmp	r3, #1
 800a298:	f000 8095 	beq.w	800a3c6 <HAL_TIM_PWM_ConfigChannel+0x136>
 800a29c:	4604      	mov	r4, r0
 800a29e:	460d      	mov	r5, r1
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 800a2a6:	2a14      	cmp	r2, #20
 800a2a8:	f200 8088 	bhi.w	800a3bc <HAL_TIM_PWM_ConfigChannel+0x12c>
 800a2ac:	e8df f002 	tbb	[pc, r2]
 800a2b0:	8686860b 	.word	0x8686860b
 800a2b4:	8686861f 	.word	0x8686861f
 800a2b8:	86868634 	.word	0x86868634
 800a2bc:	86868648 	.word	0x86868648
 800a2c0:	8686865d 	.word	0x8686865d
 800a2c4:	71          	.byte	0x71
 800a2c5:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a2c6:	6800      	ldr	r0, [r0, #0]
 800a2c8:	f7ff fc06 	bl	8009ad8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a2cc:	6822      	ldr	r2, [r4, #0]
 800a2ce:	6993      	ldr	r3, [r2, #24]
 800a2d0:	f043 0308 	orr.w	r3, r3, #8
 800a2d4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a2d6:	6822      	ldr	r2, [r4, #0]
 800a2d8:	6993      	ldr	r3, [r2, #24]
 800a2da:	f023 0304 	bic.w	r3, r3, #4
 800a2de:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a2e0:	6822      	ldr	r2, [r4, #0]
 800a2e2:	6993      	ldr	r3, [r2, #24]
 800a2e4:	6929      	ldr	r1, [r5, #16]
 800a2e6:	430b      	orrs	r3, r1
 800a2e8:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800a2ea:	2000      	movs	r0, #0
      break;
 800a2ec:	e067      	b.n	800a3be <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a2ee:	6800      	ldr	r0, [r0, #0]
 800a2f0:	f7ff ff84 	bl	800a1fc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a2f4:	6822      	ldr	r2, [r4, #0]
 800a2f6:	6993      	ldr	r3, [r2, #24]
 800a2f8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a2fc:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a2fe:	6822      	ldr	r2, [r4, #0]
 800a300:	6993      	ldr	r3, [r2, #24]
 800a302:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a306:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a308:	6822      	ldr	r2, [r4, #0]
 800a30a:	6993      	ldr	r3, [r2, #24]
 800a30c:	6929      	ldr	r1, [r5, #16]
 800a30e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800a312:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800a314:	2000      	movs	r0, #0
      break;
 800a316:	e052      	b.n	800a3be <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a318:	6800      	ldr	r0, [r0, #0]
 800a31a:	f7ff fc2f 	bl	8009b7c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a31e:	6822      	ldr	r2, [r4, #0]
 800a320:	69d3      	ldr	r3, [r2, #28]
 800a322:	f043 0308 	orr.w	r3, r3, #8
 800a326:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a328:	6822      	ldr	r2, [r4, #0]
 800a32a:	69d3      	ldr	r3, [r2, #28]
 800a32c:	f023 0304 	bic.w	r3, r3, #4
 800a330:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a332:	6822      	ldr	r2, [r4, #0]
 800a334:	69d3      	ldr	r3, [r2, #28]
 800a336:	6929      	ldr	r1, [r5, #16]
 800a338:	430b      	orrs	r3, r1
 800a33a:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800a33c:	2000      	movs	r0, #0
      break;
 800a33e:	e03e      	b.n	800a3be <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a340:	6800      	ldr	r0, [r0, #0]
 800a342:	f7ff fc65 	bl	8009c10 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a346:	6822      	ldr	r2, [r4, #0]
 800a348:	69d3      	ldr	r3, [r2, #28]
 800a34a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a34e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a350:	6822      	ldr	r2, [r4, #0]
 800a352:	69d3      	ldr	r3, [r2, #28]
 800a354:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a358:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a35a:	6822      	ldr	r2, [r4, #0]
 800a35c:	69d3      	ldr	r3, [r2, #28]
 800a35e:	6929      	ldr	r1, [r5, #16]
 800a360:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800a364:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800a366:	2000      	movs	r0, #0
      break;
 800a368:	e029      	b.n	800a3be <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a36a:	6800      	ldr	r0, [r0, #0]
 800a36c:	f7ff fc8a 	bl	8009c84 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a370:	6822      	ldr	r2, [r4, #0]
 800a372:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a374:	f043 0308 	orr.w	r3, r3, #8
 800a378:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a37a:	6822      	ldr	r2, [r4, #0]
 800a37c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a37e:	f023 0304 	bic.w	r3, r3, #4
 800a382:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a384:	6822      	ldr	r2, [r4, #0]
 800a386:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a388:	6929      	ldr	r1, [r5, #16]
 800a38a:	430b      	orrs	r3, r1
 800a38c:	6553      	str	r3, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 800a38e:	2000      	movs	r0, #0
      break;
 800a390:	e015      	b.n	800a3be <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a392:	6800      	ldr	r0, [r0, #0]
 800a394:	f7ff fcb0 	bl	8009cf8 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a398:	6822      	ldr	r2, [r4, #0]
 800a39a:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a39c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a3a0:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a3a2:	6822      	ldr	r2, [r4, #0]
 800a3a4:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a3a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a3aa:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a3ac:	6822      	ldr	r2, [r4, #0]
 800a3ae:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a3b0:	6929      	ldr	r1, [r5, #16]
 800a3b2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800a3b6:	6553      	str	r3, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 800a3b8:	2000      	movs	r0, #0
      break;
 800a3ba:	e000      	b.n	800a3be <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 800a3bc:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800a3be:	2300      	movs	r3, #0
 800a3c0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800a3c4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 800a3c6:	2002      	movs	r0, #2
 800a3c8:	e7fc      	b.n	800a3c4 <HAL_TIM_PWM_ConfigChannel+0x134>

0800a3ca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a3ca:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a3cc:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a3ce:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a3d2:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800a3d6:	430a      	orrs	r2, r1
 800a3d8:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a3dc:	6082      	str	r2, [r0, #8]
}
 800a3de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3e2:	4770      	bx	lr

0800a3e4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800a3e4:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800a3e8:	2b01      	cmp	r3, #1
 800a3ea:	f000 808f 	beq.w	800a50c <HAL_TIM_ConfigClockSource+0x128>
{
 800a3ee:	b510      	push	{r4, lr}
 800a3f0:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800a3f8:	2302      	movs	r3, #2
 800a3fa:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800a3fe:	6802      	ldr	r2, [r0, #0]
 800a400:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a402:	4b43      	ldr	r3, [pc, #268]	@ (800a510 <HAL_TIM_ConfigClockSource+0x12c>)
 800a404:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 800a406:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800a408:	680b      	ldr	r3, [r1, #0]
 800a40a:	2b70      	cmp	r3, #112	@ 0x70
 800a40c:	d055      	beq.n	800a4ba <HAL_TIM_ConfigClockSource+0xd6>
 800a40e:	d831      	bhi.n	800a474 <HAL_TIM_ConfigClockSource+0x90>
 800a410:	2b50      	cmp	r3, #80	@ 0x50
 800a412:	d06c      	beq.n	800a4ee <HAL_TIM_ConfigClockSource+0x10a>
 800a414:	d90c      	bls.n	800a430 <HAL_TIM_ConfigClockSource+0x4c>
 800a416:	2b60      	cmp	r3, #96	@ 0x60
 800a418:	d12a      	bne.n	800a470 <HAL_TIM_ConfigClockSource+0x8c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a41a:	68ca      	ldr	r2, [r1, #12]
 800a41c:	6849      	ldr	r1, [r1, #4]
 800a41e:	6820      	ldr	r0, [r4, #0]
 800a420:	f7ff fcb7 	bl	8009d92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a424:	2160      	movs	r1, #96	@ 0x60
 800a426:	6820      	ldr	r0, [r4, #0]
 800a428:	f7ff fcc8 	bl	8009dbc <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800a42c:	2000      	movs	r0, #0
      break;
 800a42e:	e035      	b.n	800a49c <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 800a430:	2b40      	cmp	r3, #64	@ 0x40
 800a432:	d10a      	bne.n	800a44a <HAL_TIM_ConfigClockSource+0x66>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a434:	68ca      	ldr	r2, [r1, #12]
 800a436:	6849      	ldr	r1, [r1, #4]
 800a438:	6820      	ldr	r0, [r4, #0]
 800a43a:	f7ff fc97 	bl	8009d6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a43e:	2140      	movs	r1, #64	@ 0x40
 800a440:	6820      	ldr	r0, [r4, #0]
 800a442:	f7ff fcbb 	bl	8009dbc <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800a446:	2000      	movs	r0, #0
      break;
 800a448:	e028      	b.n	800a49c <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 800a44a:	d85b      	bhi.n	800a504 <HAL_TIM_ConfigClockSource+0x120>
 800a44c:	2b20      	cmp	r3, #32
 800a44e:	d007      	beq.n	800a460 <HAL_TIM_ConfigClockSource+0x7c>
 800a450:	d903      	bls.n	800a45a <HAL_TIM_ConfigClockSource+0x76>
 800a452:	2b30      	cmp	r3, #48	@ 0x30
 800a454:	d004      	beq.n	800a460 <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 800a456:	2001      	movs	r0, #1
 800a458:	e020      	b.n	800a49c <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 800a45a:	b10b      	cbz	r3, 800a460 <HAL_TIM_ConfigClockSource+0x7c>
 800a45c:	2b10      	cmp	r3, #16
 800a45e:	d105      	bne.n	800a46c <HAL_TIM_ConfigClockSource+0x88>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a460:	4619      	mov	r1, r3
 800a462:	6820      	ldr	r0, [r4, #0]
 800a464:	f7ff fcaa 	bl	8009dbc <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800a468:	2000      	movs	r0, #0
      break;
 800a46a:	e017      	b.n	800a49c <HAL_TIM_ConfigClockSource+0xb8>
      status = HAL_ERROR;
 800a46c:	2001      	movs	r0, #1
 800a46e:	e015      	b.n	800a49c <HAL_TIM_ConfigClockSource+0xb8>
 800a470:	2001      	movs	r0, #1
 800a472:	e013      	b.n	800a49c <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 800a474:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a478:	d02c      	beq.n	800a4d4 <HAL_TIM_ConfigClockSource+0xf0>
 800a47a:	d90b      	bls.n	800a494 <HAL_TIM_ConfigClockSource+0xb0>
 800a47c:	4a25      	ldr	r2, [pc, #148]	@ (800a514 <HAL_TIM_ConfigClockSource+0x130>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d0ee      	beq.n	800a460 <HAL_TIM_ConfigClockSource+0x7c>
 800a482:	d912      	bls.n	800a4aa <HAL_TIM_ConfigClockSource+0xc6>
 800a484:	4a24      	ldr	r2, [pc, #144]	@ (800a518 <HAL_TIM_ConfigClockSource+0x134>)
 800a486:	4293      	cmp	r3, r2
 800a488:	d0ea      	beq.n	800a460 <HAL_TIM_ConfigClockSource+0x7c>
 800a48a:	3210      	adds	r2, #16
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d0e7      	beq.n	800a460 <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 800a490:	2001      	movs	r0, #1
 800a492:	e003      	b.n	800a49c <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 800a494:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a498:	d136      	bne.n	800a508 <HAL_TIM_ConfigClockSource+0x124>
 800a49a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800a49c:	2301      	movs	r3, #1
 800a49e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800a4a8:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 800a4aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a4ae:	d0d7      	beq.n	800a460 <HAL_TIM_ConfigClockSource+0x7c>
 800a4b0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a4b4:	d0d4      	beq.n	800a460 <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 800a4b6:	2001      	movs	r0, #1
 800a4b8:	e7f0      	b.n	800a49c <HAL_TIM_ConfigClockSource+0xb8>
      TIM_ETR_SetConfig(htim->Instance,
 800a4ba:	68cb      	ldr	r3, [r1, #12]
 800a4bc:	684a      	ldr	r2, [r1, #4]
 800a4be:	6889      	ldr	r1, [r1, #8]
 800a4c0:	6820      	ldr	r0, [r4, #0]
 800a4c2:	f7ff ff82 	bl	800a3ca <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a4c6:	6822      	ldr	r2, [r4, #0]
 800a4c8:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a4ca:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 800a4ce:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800a4d0:	2000      	movs	r0, #0
      break;
 800a4d2:	e7e3      	b.n	800a49c <HAL_TIM_ConfigClockSource+0xb8>
      TIM_ETR_SetConfig(htim->Instance,
 800a4d4:	68cb      	ldr	r3, [r1, #12]
 800a4d6:	684a      	ldr	r2, [r1, #4]
 800a4d8:	6889      	ldr	r1, [r1, #8]
 800a4da:	6820      	ldr	r0, [r4, #0]
 800a4dc:	f7ff ff75 	bl	800a3ca <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a4e0:	6822      	ldr	r2, [r4, #0]
 800a4e2:	6893      	ldr	r3, [r2, #8]
 800a4e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a4e8:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800a4ea:	2000      	movs	r0, #0
      break;
 800a4ec:	e7d6      	b.n	800a49c <HAL_TIM_ConfigClockSource+0xb8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a4ee:	68ca      	ldr	r2, [r1, #12]
 800a4f0:	6849      	ldr	r1, [r1, #4]
 800a4f2:	6820      	ldr	r0, [r4, #0]
 800a4f4:	f7ff fc3a 	bl	8009d6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a4f8:	2150      	movs	r1, #80	@ 0x50
 800a4fa:	6820      	ldr	r0, [r4, #0]
 800a4fc:	f7ff fc5e 	bl	8009dbc <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800a500:	2000      	movs	r0, #0
      break;
 800a502:	e7cb      	b.n	800a49c <HAL_TIM_ConfigClockSource+0xb8>
      status = HAL_ERROR;
 800a504:	2001      	movs	r0, #1
 800a506:	e7c9      	b.n	800a49c <HAL_TIM_ConfigClockSource+0xb8>
 800a508:	2001      	movs	r0, #1
 800a50a:	e7c7      	b.n	800a49c <HAL_TIM_ConfigClockSource+0xb8>
  __HAL_LOCK(htim);
 800a50c:	2002      	movs	r0, #2
}
 800a50e:	4770      	bx	lr
 800a510:	ffce0088 	.word	0xffce0088
 800a514:	00100020 	.word	0x00100020
 800a518:	00100030 	.word	0x00100030

0800a51c <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a51c:	f001 011f 	and.w	r1, r1, #31
 800a520:	f04f 0c01 	mov.w	ip, #1
 800a524:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a528:	6a03      	ldr	r3, [r0, #32]
 800a52a:	ea23 030c 	bic.w	r3, r3, ip
 800a52e:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a530:	6a03      	ldr	r3, [r0, #32]
 800a532:	408a      	lsls	r2, r1
 800a534:	4313      	orrs	r3, r2
 800a536:	6203      	str	r3, [r0, #32]
}
 800a538:	4770      	bx	lr
	...

0800a53c <HAL_TIM_PWM_Start>:
{
 800a53c:	b510      	push	{r4, lr}
 800a53e:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a540:	2910      	cmp	r1, #16
 800a542:	d83d      	bhi.n	800a5c0 <HAL_TIM_PWM_Start+0x84>
 800a544:	e8df f001 	tbb	[pc, r1]
 800a548:	3c3c3c09 	.word	0x3c3c3c09
 800a54c:	3c3c3c20 	.word	0x3c3c3c20
 800a550:	3c3c3c27 	.word	0x3c3c3c27
 800a554:	3c3c3c2e 	.word	0x3c3c3c2e
 800a558:	35          	.byte	0x35
 800a559:	00          	.byte	0x00
 800a55a:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 800a55e:	b2db      	uxtb	r3, r3
 800a560:	3b01      	subs	r3, #1
 800a562:	bf18      	it	ne
 800a564:	2301      	movne	r3, #1
 800a566:	2b00      	cmp	r3, #0
 800a568:	f040 8096 	bne.w	800a698 <HAL_TIM_PWM_Start+0x15c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a56c:	2910      	cmp	r1, #16
 800a56e:	f200 8081 	bhi.w	800a674 <HAL_TIM_PWM_Start+0x138>
 800a572:	e8df f001 	tbb	[pc, r1]
 800a576:	7f2c      	.short	0x7f2c
 800a578:	7f6f7f7f 	.word	0x7f6f7f7f
 800a57c:	7f737f7f 	.word	0x7f737f7f
 800a580:	7f777f7f 	.word	0x7f777f7f
 800a584:	7f7f      	.short	0x7f7f
 800a586:	7b          	.byte	0x7b
 800a587:	00          	.byte	0x00
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a588:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 800a58c:	b2db      	uxtb	r3, r3
 800a58e:	3b01      	subs	r3, #1
 800a590:	bf18      	it	ne
 800a592:	2301      	movne	r3, #1
 800a594:	e7e7      	b.n	800a566 <HAL_TIM_PWM_Start+0x2a>
 800a596:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800a59a:	b2db      	uxtb	r3, r3
 800a59c:	3b01      	subs	r3, #1
 800a59e:	bf18      	it	ne
 800a5a0:	2301      	movne	r3, #1
 800a5a2:	e7e0      	b.n	800a566 <HAL_TIM_PWM_Start+0x2a>
 800a5a4:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800a5a8:	b2db      	uxtb	r3, r3
 800a5aa:	3b01      	subs	r3, #1
 800a5ac:	bf18      	it	ne
 800a5ae:	2301      	movne	r3, #1
 800a5b0:	e7d9      	b.n	800a566 <HAL_TIM_PWM_Start+0x2a>
 800a5b2:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800a5b6:	b2db      	uxtb	r3, r3
 800a5b8:	3b01      	subs	r3, #1
 800a5ba:	bf18      	it	ne
 800a5bc:	2301      	movne	r3, #1
 800a5be:	e7d2      	b.n	800a566 <HAL_TIM_PWM_Start+0x2a>
 800a5c0:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800a5c4:	b2db      	uxtb	r3, r3
 800a5c6:	3b01      	subs	r3, #1
 800a5c8:	bf18      	it	ne
 800a5ca:	2301      	movne	r3, #1
 800a5cc:	e7cb      	b.n	800a566 <HAL_TIM_PWM_Start+0x2a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a5ce:	2302      	movs	r3, #2
 800a5d0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a5d4:	2201      	movs	r2, #1
 800a5d6:	6820      	ldr	r0, [r4, #0]
 800a5d8:	f7ff ffa0 	bl	800a51c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a5dc:	6823      	ldr	r3, [r4, #0]
 800a5de:	4930      	ldr	r1, [pc, #192]	@ (800a6a0 <HAL_TIM_PWM_Start+0x164>)
 800a5e0:	4a30      	ldr	r2, [pc, #192]	@ (800a6a4 <HAL_TIM_PWM_Start+0x168>)
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	bf18      	it	ne
 800a5e6:	428b      	cmpne	r3, r1
 800a5e8:	d00b      	beq.n	800a602 <HAL_TIM_PWM_Start+0xc6>
 800a5ea:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d007      	beq.n	800a602 <HAL_TIM_PWM_Start+0xc6>
 800a5f2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d003      	beq.n	800a602 <HAL_TIM_PWM_Start+0xc6>
 800a5fa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d103      	bne.n	800a60a <HAL_TIM_PWM_Start+0xce>
    __HAL_TIM_MOE_ENABLE(htim);
 800a602:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a604:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a608:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a60a:	6823      	ldr	r3, [r4, #0]
 800a60c:	4a24      	ldr	r2, [pc, #144]	@ (800a6a0 <HAL_TIM_PWM_Start+0x164>)
 800a60e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a612:	bf18      	it	ne
 800a614:	4293      	cmpne	r3, r2
 800a616:	d031      	beq.n	800a67c <HAL_TIM_PWM_Start+0x140>
 800a618:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d02d      	beq.n	800a67c <HAL_TIM_PWM_Start+0x140>
 800a620:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a624:	4293      	cmp	r3, r2
 800a626:	d029      	beq.n	800a67c <HAL_TIM_PWM_Start+0x140>
 800a628:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d025      	beq.n	800a67c <HAL_TIM_PWM_Start+0x140>
 800a630:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800a634:	4293      	cmp	r3, r2
 800a636:	d021      	beq.n	800a67c <HAL_TIM_PWM_Start+0x140>
 800a638:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d01d      	beq.n	800a67c <HAL_TIM_PWM_Start+0x140>
 800a640:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800a644:	4293      	cmp	r3, r2
 800a646:	d019      	beq.n	800a67c <HAL_TIM_PWM_Start+0x140>
    __HAL_TIM_ENABLE(htim);
 800a648:	681a      	ldr	r2, [r3, #0]
 800a64a:	f042 0201 	orr.w	r2, r2, #1
 800a64e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800a650:	2000      	movs	r0, #0
 800a652:	e022      	b.n	800a69a <HAL_TIM_PWM_Start+0x15e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a654:	2302      	movs	r3, #2
 800a656:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800a65a:	e7bb      	b.n	800a5d4 <HAL_TIM_PWM_Start+0x98>
 800a65c:	2302      	movs	r3, #2
 800a65e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800a662:	e7b7      	b.n	800a5d4 <HAL_TIM_PWM_Start+0x98>
 800a664:	2302      	movs	r3, #2
 800a666:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800a66a:	e7b3      	b.n	800a5d4 <HAL_TIM_PWM_Start+0x98>
 800a66c:	2302      	movs	r3, #2
 800a66e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a672:	e7af      	b.n	800a5d4 <HAL_TIM_PWM_Start+0x98>
 800a674:	2302      	movs	r3, #2
 800a676:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a67a:	e7ab      	b.n	800a5d4 <HAL_TIM_PWM_Start+0x98>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a67c:	6899      	ldr	r1, [r3, #8]
 800a67e:	4a0a      	ldr	r2, [pc, #40]	@ (800a6a8 <HAL_TIM_PWM_Start+0x16c>)
 800a680:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a682:	2a06      	cmp	r2, #6
 800a684:	bf18      	it	ne
 800a686:	f5b2 3f80 	cmpne.w	r2, #65536	@ 0x10000
 800a68a:	d007      	beq.n	800a69c <HAL_TIM_PWM_Start+0x160>
      __HAL_TIM_ENABLE(htim);
 800a68c:	681a      	ldr	r2, [r3, #0]
 800a68e:	f042 0201 	orr.w	r2, r2, #1
 800a692:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800a694:	2000      	movs	r0, #0
 800a696:	e000      	b.n	800a69a <HAL_TIM_PWM_Start+0x15e>
    return HAL_ERROR;
 800a698:	2001      	movs	r0, #1
}
 800a69a:	bd10      	pop	{r4, pc}
  return HAL_OK;
 800a69c:	2000      	movs	r0, #0
 800a69e:	e7fc      	b.n	800a69a <HAL_TIM_PWM_Start+0x15e>
 800a6a0:	40010000 	.word	0x40010000
 800a6a4:	40010400 	.word	0x40010400
 800a6a8:	00010007 	.word	0x00010007

0800a6ac <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a6ac:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 800a6b0:	2a01      	cmp	r2, #1
 800a6b2:	d045      	beq.n	800a740 <HAL_TIMEx_MasterConfigSynchronization+0x94>
{
 800a6b4:	b470      	push	{r4, r5, r6}
 800a6b6:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6be:	2202      	movs	r2, #2
 800a6c0:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a6c4:	6802      	ldr	r2, [r0, #0]
 800a6c6:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a6c8:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a6ca:	4e1e      	ldr	r6, [pc, #120]	@ (800a744 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 800a6cc:	4d1e      	ldr	r5, [pc, #120]	@ (800a748 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 800a6ce:	42aa      	cmp	r2, r5
 800a6d0:	bf18      	it	ne
 800a6d2:	42b2      	cmpne	r2, r6
 800a6d4:	d103      	bne.n	800a6de <HAL_TIMEx_MasterConfigSynchronization+0x32>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a6d6:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a6da:	684d      	ldr	r5, [r1, #4]
 800a6dc:	4328      	orrs	r0, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a6de:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a6e2:	680d      	ldr	r5, [r1, #0]
 800a6e4:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a6e6:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6e8:	681a      	ldr	r2, [r3, #0]
 800a6ea:	4816      	ldr	r0, [pc, #88]	@ (800a744 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 800a6ec:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800a6f0:	bf18      	it	ne
 800a6f2:	4282      	cmpne	r2, r0
 800a6f4:	d017      	beq.n	800a726 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a6f6:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 800a6fa:	4282      	cmp	r2, r0
 800a6fc:	d013      	beq.n	800a726 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a6fe:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800a702:	4282      	cmp	r2, r0
 800a704:	d00f      	beq.n	800a726 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a706:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800a70a:	4282      	cmp	r2, r0
 800a70c:	d00b      	beq.n	800a726 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a70e:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 800a712:	4282      	cmp	r2, r0
 800a714:	d007      	beq.n	800a726 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a716:	f5a0 406c 	sub.w	r0, r0, #60416	@ 0xec00
 800a71a:	4282      	cmp	r2, r0
 800a71c:	d003      	beq.n	800a726 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a71e:	f500 3094 	add.w	r0, r0, #75776	@ 0x12800
 800a722:	4282      	cmp	r2, r0
 800a724:	d104      	bne.n	800a730 <HAL_TIMEx_MasterConfigSynchronization+0x84>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a726:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a72a:	6889      	ldr	r1, [r1, #8]
 800a72c:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a72e:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a730:	2201      	movs	r2, #1
 800a732:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a736:	2000      	movs	r0, #0
 800a738:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 800a73c:	bc70      	pop	{r4, r5, r6}
 800a73e:	4770      	bx	lr
  __HAL_LOCK(htim);
 800a740:	2002      	movs	r0, #2
}
 800a742:	4770      	bx	lr
 800a744:	40010000 	.word	0x40010000
 800a748:	40010400 	.word	0x40010400

0800a74c <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a74c:	4770      	bx	lr

0800a74e <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a74e:	4770      	bx	lr

0800a750 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a750:	4770      	bx	lr

0800a752 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a752:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a754:	e852 3f00 	ldrex	r3, [r2]
 800a758:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a75c:	e842 3100 	strex	r1, r3, [r2]
 800a760:	2900      	cmp	r1, #0
 800a762:	d1f6      	bne.n	800a752 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a764:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a766:	f102 0308 	add.w	r3, r2, #8
 800a76a:	e853 3f00 	ldrex	r3, [r3]
 800a76e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a772:	3208      	adds	r2, #8
 800a774:	e842 3100 	strex	r1, r3, [r2]
 800a778:	2900      	cmp	r1, #0
 800a77a:	d1f3      	bne.n	800a764 <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a77c:	2320      	movs	r3, #32
 800a77e:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
}
 800a782:	4770      	bx	lr

0800a784 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a784:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a786:	e852 3f00 	ldrex	r3, [r2]
 800a78a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a78e:	e842 3100 	strex	r1, r3, [r2]
 800a792:	2900      	cmp	r1, #0
 800a794:	d1f6      	bne.n	800a784 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a796:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a798:	f102 0308 	add.w	r3, r2, #8
 800a79c:	e853 1f00 	ldrex	r1, [r3]
 800a7a0:	4b0d      	ldr	r3, [pc, #52]	@ (800a7d8 <UART_EndRxTransfer+0x54>)
 800a7a2:	400b      	ands	r3, r1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7a4:	3208      	adds	r2, #8
 800a7a6:	e842 3100 	strex	r1, r3, [r2]
 800a7aa:	2900      	cmp	r1, #0
 800a7ac:	d1f3      	bne.n	800a796 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7ae:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800a7b0:	2b01      	cmp	r3, #1
 800a7b2:	d006      	beq.n	800a7c2 <UART_EndRxTransfer+0x3e>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a7b4:	2320      	movs	r3, #32
 800a7b6:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a7be:	6703      	str	r3, [r0, #112]	@ 0x70
}
 800a7c0:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7c2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7c4:	e852 3f00 	ldrex	r3, [r2]
 800a7c8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7cc:	e842 3100 	strex	r1, r3, [r2]
 800a7d0:	2900      	cmp	r1, #0
 800a7d2:	d1f6      	bne.n	800a7c2 <UART_EndRxTransfer+0x3e>
 800a7d4:	e7ee      	b.n	800a7b4 <UART_EndRxTransfer+0x30>
 800a7d6:	bf00      	nop
 800a7d8:	effffffe 	.word	0xeffffffe

0800a7dc <HAL_UART_Transmit_DMA>:
{
 800a7dc:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800a7de:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 800a7e2:	2a20      	cmp	r2, #32
 800a7e4:	d14a      	bne.n	800a87c <HAL_UART_Transmit_DMA+0xa0>
{
 800a7e6:	b510      	push	{r4, lr}
 800a7e8:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	bf18      	it	ne
 800a7ee:	2900      	cmpne	r1, #0
 800a7f0:	d046      	beq.n	800a880 <HAL_UART_Transmit_DMA+0xa4>
    __HAL_LOCK(huart);
 800a7f2:	f890 2080 	ldrb.w	r2, [r0, #128]	@ 0x80
 800a7f6:	2a01      	cmp	r2, #1
 800a7f8:	d044      	beq.n	800a884 <HAL_UART_Transmit_DMA+0xa8>
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	f880 2080 	strb.w	r2, [r0, #128]	@ 0x80
    huart->pTxBuffPtr  = pData;
 800a800:	6501      	str	r1, [r0, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800a802:	f8a0 3054 	strh.w	r3, [r0, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a806:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a80a:	2200      	movs	r2, #0
 800a80c:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a810:	2221      	movs	r2, #33	@ 0x21
 800a812:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
    if (huart->hdmatx != NULL)
 800a816:	6f82      	ldr	r2, [r0, #120]	@ 0x78
 800a818:	b1e2      	cbz	r2, 800a854 <HAL_UART_Transmit_DMA+0x78>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a81a:	491b      	ldr	r1, [pc, #108]	@ (800a888 <HAL_UART_Transmit_DMA+0xac>)
 800a81c:	63d1      	str	r1, [r2, #60]	@ 0x3c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a81e:	6f82      	ldr	r2, [r0, #120]	@ 0x78
 800a820:	491a      	ldr	r1, [pc, #104]	@ (800a88c <HAL_UART_Transmit_DMA+0xb0>)
 800a822:	6411      	str	r1, [r2, #64]	@ 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a824:	6f82      	ldr	r2, [r0, #120]	@ 0x78
 800a826:	491a      	ldr	r1, [pc, #104]	@ (800a890 <HAL_UART_Transmit_DMA+0xb4>)
 800a828:	64d1      	str	r1, [r2, #76]	@ 0x4c
      huart->hdmatx->XferAbortCallback = NULL;
 800a82a:	6f82      	ldr	r2, [r0, #120]	@ 0x78
 800a82c:	2100      	movs	r1, #0
 800a82e:	6511      	str	r1, [r2, #80]	@ 0x50
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a830:	6802      	ldr	r2, [r0, #0]
 800a832:	3228      	adds	r2, #40	@ 0x28
 800a834:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 800a836:	6f80      	ldr	r0, [r0, #120]	@ 0x78
 800a838:	f7f9 fe64 	bl	8004504 <HAL_DMA_Start_IT>
 800a83c:	b150      	cbz	r0, 800a854 <HAL_UART_Transmit_DMA+0x78>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a83e:	2310      	movs	r3, #16
 800a840:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        __HAL_UNLOCK(huart);
 800a844:	2300      	movs	r3, #0
 800a846:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
        huart->gState = HAL_UART_STATE_READY;
 800a84a:	2320      	movs	r3, #32
 800a84c:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
        return HAL_ERROR;
 800a850:	2001      	movs	r0, #1
 800a852:	e012      	b.n	800a87a <HAL_UART_Transmit_DMA+0x9e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a854:	6823      	ldr	r3, [r4, #0]
 800a856:	2240      	movs	r2, #64	@ 0x40
 800a858:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 800a85a:	2300      	movs	r3, #0
 800a85c:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a860:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a862:	f102 0308 	add.w	r3, r2, #8
 800a866:	e853 3f00 	ldrex	r3, [r3]
 800a86a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a86e:	3208      	adds	r2, #8
 800a870:	e842 3100 	strex	r1, r3, [r2]
 800a874:	2900      	cmp	r1, #0
 800a876:	d1f3      	bne.n	800a860 <HAL_UART_Transmit_DMA+0x84>
    return HAL_OK;
 800a878:	2000      	movs	r0, #0
}
 800a87a:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800a87c:	2002      	movs	r0, #2
}
 800a87e:	4770      	bx	lr
      return HAL_ERROR;
 800a880:	2001      	movs	r0, #1
 800a882:	e7fa      	b.n	800a87a <HAL_UART_Transmit_DMA+0x9e>
    __HAL_LOCK(huart);
 800a884:	2002      	movs	r0, #2
 800a886:	e7f8      	b.n	800a87a <HAL_UART_Transmit_DMA+0x9e>
 800a888:	0800a897 	.word	0x0800a897
 800a88c:	0800a903 	.word	0x0800a903
 800a890:	0800a911 	.word	0x0800a911

0800a894 <HAL_UART_TxCpltCallback>:
}
 800a894:	4770      	bx	lr

0800a896 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a896:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a898:	6b81      	ldr	r1, [r0, #56]	@ 0x38

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a89a:	69c3      	ldr	r3, [r0, #28]
 800a89c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a8a0:	d018      	beq.n	800a8d4 <UART_DMATransmitCplt+0x3e>
  {
    huart->TxXferCount = 0U;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	f8a1 3056 	strh.w	r3, [r1, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a8a8:	680a      	ldr	r2, [r1, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8aa:	f102 0308 	add.w	r3, r2, #8
 800a8ae:	e853 3f00 	ldrex	r3, [r3]
 800a8b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8b6:	3208      	adds	r2, #8
 800a8b8:	e842 3000 	strex	r0, r3, [r2]
 800a8bc:	2800      	cmp	r0, #0
 800a8be:	d1f3      	bne.n	800a8a8 <UART_DMATransmitCplt+0x12>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a8c0:	680a      	ldr	r2, [r1, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8c2:	e852 3f00 	ldrex	r3, [r2]
 800a8c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ca:	e842 3000 	strex	r0, r3, [r2]
 800a8ce:	2800      	cmp	r0, #0
 800a8d0:	d1f6      	bne.n	800a8c0 <UART_DMATransmitCplt+0x2a>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a8d2:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800a8d4:	4608      	mov	r0, r1
 800a8d6:	f7ff ffdd 	bl	800a894 <HAL_UART_TxCpltCallback>
}
 800a8da:	e7fa      	b.n	800a8d2 <UART_DMATransmitCplt+0x3c>

0800a8dc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a8dc:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a8de:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8e0:	e852 3f00 	ldrex	r3, [r2]
 800a8e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8e8:	e842 3100 	strex	r1, r3, [r2]
 800a8ec:	2900      	cmp	r1, #0
 800a8ee:	d1f6      	bne.n	800a8de <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a8f0:	2320      	movs	r3, #32
 800a8f2:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	6743      	str	r3, [r0, #116]	@ 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a8fa:	f7ff ffcb 	bl	800a894 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a8fe:	bd08      	pop	{r3, pc}

0800a900 <HAL_UART_TxHalfCpltCallback>:
}
 800a900:	4770      	bx	lr

0800a902 <UART_DMATxHalfCplt>:
{
 800a902:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 800a904:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 800a906:	f7ff fffb 	bl	800a900 <HAL_UART_TxHalfCpltCallback>
}
 800a90a:	bd08      	pop	{r3, pc}

0800a90c <HAL_UART_RxCpltCallback>:
}
 800a90c:	4770      	bx	lr

0800a90e <HAL_UART_RxHalfCpltCallback>:
}
 800a90e:	4770      	bx	lr

0800a910 <UART_DMAError>:
{
 800a910:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a912:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a914:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a918:	f8d4 5088 	ldr.w	r5, [r4, #136]	@ 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a91c:	6823      	ldr	r3, [r4, #0]
 800a91e:	689b      	ldr	r3, [r3, #8]
 800a920:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a924:	d001      	beq.n	800a92a <UART_DMAError+0x1a>
 800a926:	2a21      	cmp	r2, #33	@ 0x21
 800a928:	d010      	beq.n	800a94c <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a92a:	6823      	ldr	r3, [r4, #0]
 800a92c:	689b      	ldr	r3, [r3, #8]
 800a92e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800a932:	d001      	beq.n	800a938 <UART_DMAError+0x28>
 800a934:	2d22      	cmp	r5, #34	@ 0x22
 800a936:	d010      	beq.n	800a95a <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a938:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 800a93c:	f043 0310 	orr.w	r3, r3, #16
 800a940:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  HAL_UART_ErrorCallback(huart);
 800a944:	4620      	mov	r0, r4
 800a946:	f7f5 fea7 	bl	8000698 <HAL_UART_ErrorCallback>
}
 800a94a:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 800a94c:	2300      	movs	r3, #0
 800a94e:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a952:	4620      	mov	r0, r4
 800a954:	f7ff fefd 	bl	800a752 <UART_EndTxTransfer>
 800a958:	e7e7      	b.n	800a92a <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 800a95a:	2300      	movs	r3, #0
 800a95c:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a960:	4620      	mov	r0, r4
 800a962:	f7ff ff0f 	bl	800a784 <UART_EndRxTransfer>
 800a966:	e7e7      	b.n	800a938 <UART_DMAError+0x28>

0800a968 <UART_DMAAbortOnError>:
{
 800a968:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a96a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0U;
 800a96c:	2300      	movs	r3, #0
 800a96e:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a972:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
  HAL_UART_ErrorCallback(huart);
 800a976:	f7f5 fe8f 	bl	8000698 <HAL_UART_ErrorCallback>
}
 800a97a:	bd08      	pop	{r3, pc}

0800a97c <HAL_UART_IRQHandler>:
{
 800a97c:	b570      	push	{r4, r5, r6, lr}
 800a97e:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a980:	6802      	ldr	r2, [r0, #0]
 800a982:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a984:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a986:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 800a988:	f640 0c0f 	movw	ip, #2063	@ 0x80f
 800a98c:	ea13 0f0c 	tst.w	r3, ip
 800a990:	d10d      	bne.n	800a9ae <HAL_UART_IRQHandler+0x32>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a992:	f013 0f20 	tst.w	r3, #32
 800a996:	d010      	beq.n	800a9ba <HAL_UART_IRQHandler+0x3e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a998:	f010 0f20 	tst.w	r0, #32
 800a99c:	d102      	bne.n	800a9a4 <HAL_UART_IRQHandler+0x28>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a99e:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 800a9a2:	d00a      	beq.n	800a9ba <HAL_UART_IRQHandler+0x3e>
      if (huart->RxISR != NULL)
 800a9a4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800a9a6:	b393      	cbz	r3, 800aa0e <HAL_UART_IRQHandler+0x92>
        huart->RxISR(huart);
 800a9a8:	4620      	mov	r0, r4
 800a9aa:	4798      	blx	r3
      return;
 800a9ac:	e02f      	b.n	800aa0e <HAL_UART_IRQHandler+0x92>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a9ae:	4d86      	ldr	r5, [pc, #536]	@ (800abc8 <HAL_UART_IRQHandler+0x24c>)
 800a9b0:	400d      	ands	r5, r1
 800a9b2:	d12d      	bne.n	800aa10 <HAL_UART_IRQHandler+0x94>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a9b4:	4e85      	ldr	r6, [pc, #532]	@ (800abcc <HAL_UART_IRQHandler+0x250>)
 800a9b6:	4230      	tst	r0, r6
 800a9b8:	d12a      	bne.n	800aa10 <HAL_UART_IRQHandler+0x94>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9ba:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 800a9bc:	2d01      	cmp	r5, #1
 800a9be:	f000 80bd 	beq.w	800ab3c <HAL_UART_IRQHandler+0x1c0>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a9c2:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800a9c6:	d003      	beq.n	800a9d0 <HAL_UART_IRQHandler+0x54>
 800a9c8:	f411 0f80 	tst.w	r1, #4194304	@ 0x400000
 800a9cc:	f040 818b 	bne.w	800ace6 <HAL_UART_IRQHandler+0x36a>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a9d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a9d4:	d007      	beq.n	800a9e6 <HAL_UART_IRQHandler+0x6a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a9d6:	f010 0f80 	tst.w	r0, #128	@ 0x80
 800a9da:	f040 818b 	bne.w	800acf4 <HAL_UART_IRQHandler+0x378>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a9de:	f411 0f00 	tst.w	r1, #8388608	@ 0x800000
 800a9e2:	f040 8187 	bne.w	800acf4 <HAL_UART_IRQHandler+0x378>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a9e6:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800a9ea:	d003      	beq.n	800a9f4 <HAL_UART_IRQHandler+0x78>
 800a9ec:	f010 0f40 	tst.w	r0, #64	@ 0x40
 800a9f0:	f040 8187 	bne.w	800ad02 <HAL_UART_IRQHandler+0x386>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a9f4:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800a9f8:	d003      	beq.n	800aa02 <HAL_UART_IRQHandler+0x86>
 800a9fa:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 800a9fe:	f040 8184 	bne.w	800ad0a <HAL_UART_IRQHandler+0x38e>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800aa02:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800aa06:	d002      	beq.n	800aa0e <HAL_UART_IRQHandler+0x92>
 800aa08:	2800      	cmp	r0, #0
 800aa0a:	f2c0 8182 	blt.w	800ad12 <HAL_UART_IRQHandler+0x396>
}
 800aa0e:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aa10:	f013 0f01 	tst.w	r3, #1
 800aa14:	d009      	beq.n	800aa2a <HAL_UART_IRQHandler+0xae>
 800aa16:	f410 7f80 	tst.w	r0, #256	@ 0x100
 800aa1a:	d006      	beq.n	800aa2a <HAL_UART_IRQHandler+0xae>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aa1c:	2601      	movs	r6, #1
 800aa1e:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aa20:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 800aa24:	4332      	orrs	r2, r6
 800aa26:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa2a:	f013 0f02 	tst.w	r3, #2
 800aa2e:	d00b      	beq.n	800aa48 <HAL_UART_IRQHandler+0xcc>
 800aa30:	f011 0f01 	tst.w	r1, #1
 800aa34:	d008      	beq.n	800aa48 <HAL_UART_IRQHandler+0xcc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aa36:	6822      	ldr	r2, [r4, #0]
 800aa38:	2602      	movs	r6, #2
 800aa3a:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aa3c:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 800aa40:	f042 0204 	orr.w	r2, r2, #4
 800aa44:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa48:	f013 0f04 	tst.w	r3, #4
 800aa4c:	d00b      	beq.n	800aa66 <HAL_UART_IRQHandler+0xea>
 800aa4e:	f011 0f01 	tst.w	r1, #1
 800aa52:	d008      	beq.n	800aa66 <HAL_UART_IRQHandler+0xea>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aa54:	6822      	ldr	r2, [r4, #0]
 800aa56:	2604      	movs	r6, #4
 800aa58:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aa5a:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 800aa5e:	f042 0202 	orr.w	r2, r2, #2
 800aa62:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 800aa66:	f013 0f08 	tst.w	r3, #8
 800aa6a:	d00b      	beq.n	800aa84 <HAL_UART_IRQHandler+0x108>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800aa6c:	f010 0f20 	tst.w	r0, #32
 800aa70:	d100      	bne.n	800aa74 <HAL_UART_IRQHandler+0xf8>
 800aa72:	b13d      	cbz	r5, 800aa84 <HAL_UART_IRQHandler+0x108>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aa74:	6822      	ldr	r2, [r4, #0]
 800aa76:	2508      	movs	r5, #8
 800aa78:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aa7a:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 800aa7e:	432a      	orrs	r2, r5
 800aa80:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800aa84:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800aa88:	d00c      	beq.n	800aaa4 <HAL_UART_IRQHandler+0x128>
 800aa8a:	f010 6f80 	tst.w	r0, #67108864	@ 0x4000000
 800aa8e:	d009      	beq.n	800aaa4 <HAL_UART_IRQHandler+0x128>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aa90:	6822      	ldr	r2, [r4, #0]
 800aa92:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 800aa96:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800aa98:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 800aa9c:	f042 0220 	orr.w	r2, r2, #32
 800aaa0:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aaa4:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 800aaa8:	2a00      	cmp	r2, #0
 800aaaa:	d0b0      	beq.n	800aa0e <HAL_UART_IRQHandler+0x92>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800aaac:	f013 0f20 	tst.w	r3, #32
 800aab0:	d009      	beq.n	800aac6 <HAL_UART_IRQHandler+0x14a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aab2:	f010 0f20 	tst.w	r0, #32
 800aab6:	d102      	bne.n	800aabe <HAL_UART_IRQHandler+0x142>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aab8:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 800aabc:	d003      	beq.n	800aac6 <HAL_UART_IRQHandler+0x14a>
        if (huart->RxISR != NULL)
 800aabe:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800aac0:	b10b      	cbz	r3, 800aac6 <HAL_UART_IRQHandler+0x14a>
          huart->RxISR(huart);
 800aac2:	4620      	mov	r0, r4
 800aac4:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 800aac6:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aaca:	6823      	ldr	r3, [r4, #0]
 800aacc:	689b      	ldr	r3, [r3, #8]
 800aace:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800aad2:	d102      	bne.n	800aada <HAL_UART_IRQHandler+0x15e>
 800aad4:	f012 0f28 	tst.w	r2, #40	@ 0x28
 800aad8:	d029      	beq.n	800ab2e <HAL_UART_IRQHandler+0x1b2>
        UART_EndRxTransfer(huart);
 800aada:	4620      	mov	r0, r4
 800aadc:	f7ff fe52 	bl	800a784 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aae0:	6823      	ldr	r3, [r4, #0]
 800aae2:	689b      	ldr	r3, [r3, #8]
 800aae4:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800aae8:	d01d      	beq.n	800ab26 <HAL_UART_IRQHandler+0x1aa>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aaea:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaec:	f102 0308 	add.w	r3, r2, #8
 800aaf0:	e853 3f00 	ldrex	r3, [r3]
 800aaf4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf8:	3208      	adds	r2, #8
 800aafa:	e842 3100 	strex	r1, r3, [r2]
 800aafe:	2900      	cmp	r1, #0
 800ab00:	d1f3      	bne.n	800aaea <HAL_UART_IRQHandler+0x16e>
          if (huart->hdmarx != NULL)
 800ab02:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800ab04:	b15b      	cbz	r3, 800ab1e <HAL_UART_IRQHandler+0x1a2>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ab06:	4a32      	ldr	r2, [pc, #200]	@ (800abd0 <HAL_UART_IRQHandler+0x254>)
 800ab08:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ab0a:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 800ab0c:	f7f9 ffe6 	bl	8004adc <HAL_DMA_Abort_IT>
 800ab10:	2800      	cmp	r0, #0
 800ab12:	f43f af7c 	beq.w	800aa0e <HAL_UART_IRQHandler+0x92>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ab16:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 800ab18:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800ab1a:	4798      	blx	r3
 800ab1c:	e777      	b.n	800aa0e <HAL_UART_IRQHandler+0x92>
            HAL_UART_ErrorCallback(huart);
 800ab1e:	4620      	mov	r0, r4
 800ab20:	f7f5 fdba 	bl	8000698 <HAL_UART_ErrorCallback>
 800ab24:	e773      	b.n	800aa0e <HAL_UART_IRQHandler+0x92>
          HAL_UART_ErrorCallback(huart);
 800ab26:	4620      	mov	r0, r4
 800ab28:	f7f5 fdb6 	bl	8000698 <HAL_UART_ErrorCallback>
 800ab2c:	e76f      	b.n	800aa0e <HAL_UART_IRQHandler+0x92>
        HAL_UART_ErrorCallback(huart);
 800ab2e:	4620      	mov	r0, r4
 800ab30:	f7f5 fdb2 	bl	8000698 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab34:	2300      	movs	r3, #0
 800ab36:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
    return;
 800ab3a:	e768      	b.n	800aa0e <HAL_UART_IRQHandler+0x92>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ab3c:	f013 0f10 	tst.w	r3, #16
 800ab40:	f43f af3f 	beq.w	800a9c2 <HAL_UART_IRQHandler+0x46>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ab44:	f010 0f10 	tst.w	r0, #16
 800ab48:	f43f af3b 	beq.w	800a9c2 <HAL_UART_IRQHandler+0x46>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ab4c:	2310      	movs	r3, #16
 800ab4e:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab50:	6823      	ldr	r3, [r4, #0]
 800ab52:	689b      	ldr	r3, [r3, #8]
 800ab54:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800ab58:	f000 808d 	beq.w	800ac76 <HAL_UART_IRQHandler+0x2fa>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ab5c:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800ab5e:	6813      	ldr	r3, [r2, #0]
 800ab60:	481c      	ldr	r0, [pc, #112]	@ (800abd4 <HAL_UART_IRQHandler+0x258>)
 800ab62:	491d      	ldr	r1, [pc, #116]	@ (800abd8 <HAL_UART_IRQHandler+0x25c>)
 800ab64:	428b      	cmp	r3, r1
 800ab66:	bf18      	it	ne
 800ab68:	4283      	cmpne	r3, r0
 800ab6a:	d037      	beq.n	800abdc <HAL_UART_IRQHandler+0x260>
 800ab6c:	3118      	adds	r1, #24
 800ab6e:	428b      	cmp	r3, r1
 800ab70:	d034      	beq.n	800abdc <HAL_UART_IRQHandler+0x260>
 800ab72:	3118      	adds	r1, #24
 800ab74:	428b      	cmp	r3, r1
 800ab76:	d031      	beq.n	800abdc <HAL_UART_IRQHandler+0x260>
 800ab78:	3118      	adds	r1, #24
 800ab7a:	428b      	cmp	r3, r1
 800ab7c:	d02e      	beq.n	800abdc <HAL_UART_IRQHandler+0x260>
 800ab7e:	3118      	adds	r1, #24
 800ab80:	428b      	cmp	r3, r1
 800ab82:	d02b      	beq.n	800abdc <HAL_UART_IRQHandler+0x260>
 800ab84:	3118      	adds	r1, #24
 800ab86:	428b      	cmp	r3, r1
 800ab88:	d028      	beq.n	800abdc <HAL_UART_IRQHandler+0x260>
 800ab8a:	3118      	adds	r1, #24
 800ab8c:	428b      	cmp	r3, r1
 800ab8e:	d025      	beq.n	800abdc <HAL_UART_IRQHandler+0x260>
 800ab90:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 800ab94:	428b      	cmp	r3, r1
 800ab96:	d021      	beq.n	800abdc <HAL_UART_IRQHandler+0x260>
 800ab98:	3118      	adds	r1, #24
 800ab9a:	428b      	cmp	r3, r1
 800ab9c:	d01e      	beq.n	800abdc <HAL_UART_IRQHandler+0x260>
 800ab9e:	3118      	adds	r1, #24
 800aba0:	428b      	cmp	r3, r1
 800aba2:	d01b      	beq.n	800abdc <HAL_UART_IRQHandler+0x260>
 800aba4:	3118      	adds	r1, #24
 800aba6:	428b      	cmp	r3, r1
 800aba8:	d018      	beq.n	800abdc <HAL_UART_IRQHandler+0x260>
 800abaa:	3118      	adds	r1, #24
 800abac:	428b      	cmp	r3, r1
 800abae:	d015      	beq.n	800abdc <HAL_UART_IRQHandler+0x260>
 800abb0:	3118      	adds	r1, #24
 800abb2:	428b      	cmp	r3, r1
 800abb4:	d012      	beq.n	800abdc <HAL_UART_IRQHandler+0x260>
 800abb6:	3118      	adds	r1, #24
 800abb8:	428b      	cmp	r3, r1
 800abba:	d00f      	beq.n	800abdc <HAL_UART_IRQHandler+0x260>
 800abbc:	3118      	adds	r1, #24
 800abbe:	428b      	cmp	r3, r1
 800abc0:	d00c      	beq.n	800abdc <HAL_UART_IRQHandler+0x260>
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	b29b      	uxth	r3, r3
 800abc6:	e00b      	b.n	800abe0 <HAL_UART_IRQHandler+0x264>
 800abc8:	10000001 	.word	0x10000001
 800abcc:	04000120 	.word	0x04000120
 800abd0:	0800a969 	.word	0x0800a969
 800abd4:	40020010 	.word	0x40020010
 800abd8:	40020028 	.word	0x40020028
 800abdc:	685b      	ldr	r3, [r3, #4]
 800abde:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	f43f af14 	beq.w	800aa0e <HAL_UART_IRQHandler+0x92>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800abe6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 800abea:	4299      	cmp	r1, r3
 800abec:	f67f af0f 	bls.w	800aa0e <HAL_UART_IRQHandler+0x92>
        huart->RxXferCount = nb_remaining_rx_data;
 800abf0:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800abf4:	69d3      	ldr	r3, [r2, #28]
 800abf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800abfa:	d031      	beq.n	800ac60 <HAL_UART_IRQHandler+0x2e4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800abfc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abfe:	e852 3f00 	ldrex	r3, [r2]
 800ac02:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac06:	e842 3100 	strex	r1, r3, [r2]
 800ac0a:	2900      	cmp	r1, #0
 800ac0c:	d1f6      	bne.n	800abfc <HAL_UART_IRQHandler+0x280>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac0e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac10:	f102 0308 	add.w	r3, r2, #8
 800ac14:	e853 3f00 	ldrex	r3, [r3]
 800ac18:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac1c:	3208      	adds	r2, #8
 800ac1e:	e842 3100 	strex	r1, r3, [r2]
 800ac22:	2900      	cmp	r1, #0
 800ac24:	d1f3      	bne.n	800ac0e <HAL_UART_IRQHandler+0x292>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac26:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac28:	f102 0308 	add.w	r3, r2, #8
 800ac2c:	e853 3f00 	ldrex	r3, [r3]
 800ac30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac34:	3208      	adds	r2, #8
 800ac36:	e842 3100 	strex	r1, r3, [r2]
 800ac3a:	2900      	cmp	r1, #0
 800ac3c:	d1f3      	bne.n	800ac26 <HAL_UART_IRQHandler+0x2aa>
          huart->RxState = HAL_UART_STATE_READY;
 800ac3e:	2320      	movs	r3, #32
 800ac40:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac44:	2300      	movs	r3, #0
 800ac46:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac48:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac4a:	e852 3f00 	ldrex	r3, [r2]
 800ac4e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac52:	e842 3100 	strex	r1, r3, [r2]
 800ac56:	2900      	cmp	r1, #0
 800ac58:	d1f6      	bne.n	800ac48 <HAL_UART_IRQHandler+0x2cc>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ac5a:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 800ac5c:	f7f9 fd9e 	bl	800479c <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ac60:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 800ac64:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800ac68:	b29b      	uxth	r3, r3
 800ac6a:	1ac9      	subs	r1, r1, r3
 800ac6c:	b289      	uxth	r1, r1
 800ac6e:	4620      	mov	r0, r4
 800ac70:	f7f6 fe50 	bl	8001914 <HAL_UARTEx_RxEventCallback>
      return;
 800ac74:	e6cb      	b.n	800aa0e <HAL_UART_IRQHandler+0x92>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ac76:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 800ac7a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800ac7e:	b29b      	uxth	r3, r3
 800ac80:	1ac9      	subs	r1, r1, r3
 800ac82:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800ac84:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800ac88:	b29b      	uxth	r3, r3
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	f43f aebf 	beq.w	800aa0e <HAL_UART_IRQHandler+0x92>
          && (nb_rx_data > 0U))
 800ac90:	2900      	cmp	r1, #0
 800ac92:	f43f aebc 	beq.w	800aa0e <HAL_UART_IRQHandler+0x92>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ac96:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac98:	e852 3f00 	ldrex	r3, [r2]
 800ac9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aca0:	e842 3000 	strex	r0, r3, [r2]
 800aca4:	2800      	cmp	r0, #0
 800aca6:	d1f6      	bne.n	800ac96 <HAL_UART_IRQHandler+0x31a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aca8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acaa:	f102 0308 	add.w	r3, r2, #8
 800acae:	e853 0f00 	ldrex	r0, [r3]
 800acb2:	4b1a      	ldr	r3, [pc, #104]	@ (800ad1c <HAL_UART_IRQHandler+0x3a0>)
 800acb4:	4003      	ands	r3, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acb6:	3208      	adds	r2, #8
 800acb8:	e842 3000 	strex	r0, r3, [r2]
 800acbc:	2800      	cmp	r0, #0
 800acbe:	d1f3      	bne.n	800aca8 <HAL_UART_IRQHandler+0x32c>
        huart->RxState = HAL_UART_STATE_READY;
 800acc0:	2320      	movs	r3, #32
 800acc2:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acc6:	2300      	movs	r3, #0
 800acc8:	66e3      	str	r3, [r4, #108]	@ 0x6c
        huart->RxISR = NULL;
 800acca:	6723      	str	r3, [r4, #112]	@ 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800accc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acce:	e852 3f00 	ldrex	r3, [r2]
 800acd2:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acd6:	e842 3000 	strex	r0, r3, [r2]
 800acda:	2800      	cmp	r0, #0
 800acdc:	d1f6      	bne.n	800accc <HAL_UART_IRQHandler+0x350>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800acde:	4620      	mov	r0, r4
 800ace0:	f7f6 fe18 	bl	8001914 <HAL_UARTEx_RxEventCallback>
      return;
 800ace4:	e693      	b.n	800aa0e <HAL_UART_IRQHandler+0x92>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ace6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800acea:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800acec:	4620      	mov	r0, r4
 800acee:	f000 fd67 	bl	800b7c0 <HAL_UARTEx_WakeupCallback>
    return;
 800acf2:	e68c      	b.n	800aa0e <HAL_UART_IRQHandler+0x92>
    if (huart->TxISR != NULL)
 800acf4:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	f43f ae89 	beq.w	800aa0e <HAL_UART_IRQHandler+0x92>
      huart->TxISR(huart);
 800acfc:	4620      	mov	r0, r4
 800acfe:	4798      	blx	r3
    return;
 800ad00:	e685      	b.n	800aa0e <HAL_UART_IRQHandler+0x92>
    UART_EndTransmit_IT(huart);
 800ad02:	4620      	mov	r0, r4
 800ad04:	f7ff fdea 	bl	800a8dc <UART_EndTransmit_IT>
    return;
 800ad08:	e681      	b.n	800aa0e <HAL_UART_IRQHandler+0x92>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ad0a:	4620      	mov	r0, r4
 800ad0c:	f000 fd5a 	bl	800b7c4 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 800ad10:	e67d      	b.n	800aa0e <HAL_UART_IRQHandler+0x92>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ad12:	4620      	mov	r0, r4
 800ad14:	f000 fd55 	bl	800b7c2 <HAL_UARTEx_RxFifoFullCallback>
    return;
 800ad18:	e679      	b.n	800aa0e <HAL_UART_IRQHandler+0x92>
 800ad1a:	bf00      	nop
 800ad1c:	effffffe 	.word	0xeffffffe

0800ad20 <UART_DMARxHalfCplt>:
{
 800ad20:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad22:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad24:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800ad26:	2b01      	cmp	r3, #1
 800ad28:	d002      	beq.n	800ad30 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 800ad2a:	f7ff fdf0 	bl	800a90e <HAL_UART_RxHalfCpltCallback>
}
 800ad2e:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ad30:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 800ad34:	0849      	lsrs	r1, r1, #1
 800ad36:	f7f6 fded 	bl	8001914 <HAL_UARTEx_RxEventCallback>
 800ad3a:	e7f8      	b.n	800ad2e <UART_DMARxHalfCplt+0xe>

0800ad3c <UART_DMAReceiveCplt>:
{
 800ad3c:	b508      	push	{r3, lr}
 800ad3e:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad40:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ad42:	69db      	ldr	r3, [r3, #28]
 800ad44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad48:	d029      	beq.n	800ad9e <UART_DMAReceiveCplt+0x62>
    huart->RxXferCount = 0U;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad50:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad52:	e852 3f00 	ldrex	r3, [r2]
 800ad56:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad5a:	e842 3100 	strex	r1, r3, [r2]
 800ad5e:	2900      	cmp	r1, #0
 800ad60:	d1f6      	bne.n	800ad50 <UART_DMAReceiveCplt+0x14>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad62:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad64:	f102 0308 	add.w	r3, r2, #8
 800ad68:	e853 3f00 	ldrex	r3, [r3]
 800ad6c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad70:	3208      	adds	r2, #8
 800ad72:	e842 3100 	strex	r1, r3, [r2]
 800ad76:	2900      	cmp	r1, #0
 800ad78:	d1f3      	bne.n	800ad62 <UART_DMAReceiveCplt+0x26>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad7a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad7c:	f102 0308 	add.w	r3, r2, #8
 800ad80:	e853 3f00 	ldrex	r3, [r3]
 800ad84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad88:	3208      	adds	r2, #8
 800ad8a:	e842 3100 	strex	r1, r3, [r2]
 800ad8e:	2900      	cmp	r1, #0
 800ad90:	d1f3      	bne.n	800ad7a <UART_DMAReceiveCplt+0x3e>
    huart->RxState = HAL_UART_STATE_READY;
 800ad92:	2320      	movs	r3, #32
 800ad94:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad98:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800ad9a:	2b01      	cmp	r3, #1
 800ad9c:	d005      	beq.n	800adaa <UART_DMAReceiveCplt+0x6e>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad9e:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800ada0:	2b01      	cmp	r3, #1
 800ada2:	d00c      	beq.n	800adbe <UART_DMAReceiveCplt+0x82>
    HAL_UART_RxCpltCallback(huart);
 800ada4:	f7ff fdb2 	bl	800a90c <HAL_UART_RxCpltCallback>
}
 800ada8:	bd08      	pop	{r3, pc}
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800adaa:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adac:	e852 3f00 	ldrex	r3, [r2]
 800adb0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adb4:	e842 3100 	strex	r1, r3, [r2]
 800adb8:	2900      	cmp	r1, #0
 800adba:	d1f6      	bne.n	800adaa <UART_DMAReceiveCplt+0x6e>
 800adbc:	e7ef      	b.n	800ad9e <UART_DMAReceiveCplt+0x62>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800adbe:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 800adc2:	f7f6 fda7 	bl	8001914 <HAL_UARTEx_RxEventCallback>
 800adc6:	e7ef      	b.n	800ada8 <UART_DMAReceiveCplt+0x6c>

0800adc8 <UART_SetConfig>:
{
 800adc8:	b570      	push	{r4, r5, r6, lr}
 800adca:	b086      	sub	sp, #24
 800adcc:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800adce:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800add0:	6883      	ldr	r3, [r0, #8]
 800add2:	6902      	ldr	r2, [r0, #16]
 800add4:	4313      	orrs	r3, r2
 800add6:	6942      	ldr	r2, [r0, #20]
 800add8:	4313      	orrs	r3, r2
 800adda:	69c2      	ldr	r2, [r0, #28]
 800addc:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800adde:	6808      	ldr	r0, [r1, #0]
 800ade0:	4a88      	ldr	r2, [pc, #544]	@ (800b004 <UART_SetConfig+0x23c>)
 800ade2:	4002      	ands	r2, r0
 800ade4:	431a      	orrs	r2, r3
 800ade6:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ade8:	6822      	ldr	r2, [r4, #0]
 800adea:	6853      	ldr	r3, [r2, #4]
 800adec:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800adf0:	68e1      	ldr	r1, [r4, #12]
 800adf2:	430b      	orrs	r3, r1
 800adf4:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800adf6:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800adf8:	6822      	ldr	r2, [r4, #0]
 800adfa:	4b83      	ldr	r3, [pc, #524]	@ (800b008 <UART_SetConfig+0x240>)
 800adfc:	429a      	cmp	r2, r3
 800adfe:	d001      	beq.n	800ae04 <UART_SetConfig+0x3c>
    tmpreg |= huart->Init.OneBitSampling;
 800ae00:	6a23      	ldr	r3, [r4, #32]
 800ae02:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ae04:	6890      	ldr	r0, [r2, #8]
 800ae06:	4b81      	ldr	r3, [pc, #516]	@ (800b00c <UART_SetConfig+0x244>)
 800ae08:	4003      	ands	r3, r0
 800ae0a:	430b      	orrs	r3, r1
 800ae0c:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ae0e:	6822      	ldr	r2, [r4, #0]
 800ae10:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800ae12:	f023 030f 	bic.w	r3, r3, #15
 800ae16:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800ae18:	430b      	orrs	r3, r1
 800ae1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ae1c:	6822      	ldr	r2, [r4, #0]
 800ae1e:	4b7c      	ldr	r3, [pc, #496]	@ (800b010 <UART_SetConfig+0x248>)
 800ae20:	429a      	cmp	r2, r3
 800ae22:	d021      	beq.n	800ae68 <UART_SetConfig+0xa0>
 800ae24:	4b7b      	ldr	r3, [pc, #492]	@ (800b014 <UART_SetConfig+0x24c>)
 800ae26:	429a      	cmp	r2, r3
 800ae28:	f000 808c 	beq.w	800af44 <UART_SetConfig+0x17c>
 800ae2c:	4b7a      	ldr	r3, [pc, #488]	@ (800b018 <UART_SetConfig+0x250>)
 800ae2e:	429a      	cmp	r2, r3
 800ae30:	f000 80a2 	beq.w	800af78 <UART_SetConfig+0x1b0>
 800ae34:	4b79      	ldr	r3, [pc, #484]	@ (800b01c <UART_SetConfig+0x254>)
 800ae36:	429a      	cmp	r2, r3
 800ae38:	f000 80b5 	beq.w	800afa6 <UART_SetConfig+0x1de>
 800ae3c:	4b78      	ldr	r3, [pc, #480]	@ (800b020 <UART_SetConfig+0x258>)
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	f000 80c8 	beq.w	800afd4 <UART_SetConfig+0x20c>
 800ae44:	4b77      	ldr	r3, [pc, #476]	@ (800b024 <UART_SetConfig+0x25c>)
 800ae46:	429a      	cmp	r2, r3
 800ae48:	f000 80f4 	beq.w	800b034 <UART_SetConfig+0x26c>
 800ae4c:	4b76      	ldr	r3, [pc, #472]	@ (800b028 <UART_SetConfig+0x260>)
 800ae4e:	429a      	cmp	r2, r3
 800ae50:	f000 8119 	beq.w	800b086 <UART_SetConfig+0x2be>
 800ae54:	4b75      	ldr	r3, [pc, #468]	@ (800b02c <UART_SetConfig+0x264>)
 800ae56:	429a      	cmp	r2, r3
 800ae58:	f000 812c 	beq.w	800b0b4 <UART_SetConfig+0x2ec>
 800ae5c:	4b6a      	ldr	r3, [pc, #424]	@ (800b008 <UART_SetConfig+0x240>)
 800ae5e:	429a      	cmp	r2, r3
 800ae60:	f000 813f 	beq.w	800b0e2 <UART_SetConfig+0x31a>
 800ae64:	2380      	movs	r3, #128	@ 0x80
 800ae66:	e033      	b.n	800aed0 <UART_SetConfig+0x108>
 800ae68:	4b71      	ldr	r3, [pc, #452]	@ (800b030 <UART_SetConfig+0x268>)
 800ae6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae6c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ae70:	2b28      	cmp	r3, #40	@ 0x28
 800ae72:	d865      	bhi.n	800af40 <UART_SetConfig+0x178>
 800ae74:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ae78:	00640029 	.word	0x00640029
 800ae7c:	00640064 	.word	0x00640064
 800ae80:	00640064 	.word	0x00640064
 800ae84:	00640064 	.word	0x00640064
 800ae88:	0064014d 	.word	0x0064014d
 800ae8c:	00640064 	.word	0x00640064
 800ae90:	00640064 	.word	0x00640064
 800ae94:	00640064 	.word	0x00640064
 800ae98:	0064002b 	.word	0x0064002b
 800ae9c:	00640064 	.word	0x00640064
 800aea0:	00640064 	.word	0x00640064
 800aea4:	00640064 	.word	0x00640064
 800aea8:	0064005e 	.word	0x0064005e
 800aeac:	00640064 	.word	0x00640064
 800aeb0:	00640064 	.word	0x00640064
 800aeb4:	00640064 	.word	0x00640064
 800aeb8:	00640060 	.word	0x00640060
 800aebc:	00640064 	.word	0x00640064
 800aec0:	00640064 	.word	0x00640064
 800aec4:	00640064 	.word	0x00640064
 800aec8:	0062      	.short	0x0062
 800aeca:	2301      	movs	r3, #1
 800aecc:	e000      	b.n	800aed0 <UART_SetConfig+0x108>
 800aece:	2308      	movs	r3, #8
  if (UART_INSTANCE_LOWPOWER(huart))
 800aed0:	494d      	ldr	r1, [pc, #308]	@ (800b008 <UART_SetConfig+0x240>)
 800aed2:	428a      	cmp	r2, r1
 800aed4:	f000 812f 	beq.w	800b136 <UART_SetConfig+0x36e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aed8:	69e0      	ldr	r0, [r4, #28]
 800aeda:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800aede:	f000 81af 	beq.w	800b240 <UART_SetConfig+0x478>
    switch (clocksource)
 800aee2:	2b20      	cmp	r3, #32
 800aee4:	f200 8207 	bhi.w	800b2f6 <UART_SetConfig+0x52e>
 800aee8:	2b20      	cmp	r3, #32
 800aeea:	f200 8251 	bhi.w	800b390 <UART_SetConfig+0x5c8>
 800aeee:	e8df f013 	tbh	[pc, r3, lsl #1]
 800aef2:	021e      	.short	0x021e
 800aef4:	024f0224 	.word	0x024f0224
 800aef8:	0227024f 	.word	0x0227024f
 800aefc:	024f024f 	.word	0x024f024f
 800af00:	022c024f 	.word	0x022c024f
 800af04:	024f024f 	.word	0x024f024f
 800af08:	024f024f 	.word	0x024f024f
 800af0c:	024f024f 	.word	0x024f024f
 800af10:	0231024f 	.word	0x0231024f
 800af14:	024f024f 	.word	0x024f024f
 800af18:	024f024f 	.word	0x024f024f
 800af1c:	024f024f 	.word	0x024f024f
 800af20:	024f024f 	.word	0x024f024f
 800af24:	024f024f 	.word	0x024f024f
 800af28:	024f024f 	.word	0x024f024f
 800af2c:	024f024f 	.word	0x024f024f
 800af30:	023d024f 	.word	0x023d024f
  UART_GETCLOCKSOURCE(huart, clocksource);
 800af34:	2310      	movs	r3, #16
 800af36:	e7cb      	b.n	800aed0 <UART_SetConfig+0x108>
 800af38:	2320      	movs	r3, #32
 800af3a:	e7c9      	b.n	800aed0 <UART_SetConfig+0x108>
 800af3c:	2340      	movs	r3, #64	@ 0x40
 800af3e:	e7c7      	b.n	800aed0 <UART_SetConfig+0x108>
 800af40:	2380      	movs	r3, #128	@ 0x80
 800af42:	e7c5      	b.n	800aed0 <UART_SetConfig+0x108>
 800af44:	4b3a      	ldr	r3, [pc, #232]	@ (800b030 <UART_SetConfig+0x268>)
 800af46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af48:	f003 0307 	and.w	r3, r3, #7
 800af4c:	2b05      	cmp	r3, #5
 800af4e:	d811      	bhi.n	800af74 <UART_SetConfig+0x1ac>
 800af50:	e8df f013 	tbh	[pc, r3, lsl #1]
 800af54:	00e10006 	.word	0x00e10006
 800af58:	000a0008 	.word	0x000a0008
 800af5c:	000e000c 	.word	0x000e000c
 800af60:	2300      	movs	r3, #0
 800af62:	e7b5      	b.n	800aed0 <UART_SetConfig+0x108>
 800af64:	2308      	movs	r3, #8
 800af66:	e7b3      	b.n	800aed0 <UART_SetConfig+0x108>
 800af68:	2310      	movs	r3, #16
 800af6a:	e7b1      	b.n	800aed0 <UART_SetConfig+0x108>
 800af6c:	2320      	movs	r3, #32
 800af6e:	e7af      	b.n	800aed0 <UART_SetConfig+0x108>
 800af70:	2340      	movs	r3, #64	@ 0x40
 800af72:	e7ad      	b.n	800aed0 <UART_SetConfig+0x108>
 800af74:	2380      	movs	r3, #128	@ 0x80
 800af76:	e7ab      	b.n	800aed0 <UART_SetConfig+0x108>
 800af78:	4b2d      	ldr	r3, [pc, #180]	@ (800b030 <UART_SetConfig+0x268>)
 800af7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af7c:	f003 0307 	and.w	r3, r3, #7
 800af80:	2b05      	cmp	r3, #5
 800af82:	d80e      	bhi.n	800afa2 <UART_SetConfig+0x1da>
 800af84:	e8df f003 	tbb	[pc, r3]
 800af88:	0705c903 	.word	0x0705c903
 800af8c:	0b09      	.short	0x0b09
 800af8e:	2300      	movs	r3, #0
 800af90:	e79e      	b.n	800aed0 <UART_SetConfig+0x108>
 800af92:	2308      	movs	r3, #8
 800af94:	e79c      	b.n	800aed0 <UART_SetConfig+0x108>
 800af96:	2310      	movs	r3, #16
 800af98:	e79a      	b.n	800aed0 <UART_SetConfig+0x108>
 800af9a:	2320      	movs	r3, #32
 800af9c:	e798      	b.n	800aed0 <UART_SetConfig+0x108>
 800af9e:	2340      	movs	r3, #64	@ 0x40
 800afa0:	e796      	b.n	800aed0 <UART_SetConfig+0x108>
 800afa2:	2380      	movs	r3, #128	@ 0x80
 800afa4:	e794      	b.n	800aed0 <UART_SetConfig+0x108>
 800afa6:	4b22      	ldr	r3, [pc, #136]	@ (800b030 <UART_SetConfig+0x268>)
 800afa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afaa:	f003 0307 	and.w	r3, r3, #7
 800afae:	2b05      	cmp	r3, #5
 800afb0:	d80e      	bhi.n	800afd0 <UART_SetConfig+0x208>
 800afb2:	e8df f003 	tbb	[pc, r3]
 800afb6:	b403      	.short	0xb403
 800afb8:	0b090705 	.word	0x0b090705
 800afbc:	2300      	movs	r3, #0
 800afbe:	e787      	b.n	800aed0 <UART_SetConfig+0x108>
 800afc0:	2308      	movs	r3, #8
 800afc2:	e785      	b.n	800aed0 <UART_SetConfig+0x108>
 800afc4:	2310      	movs	r3, #16
 800afc6:	e783      	b.n	800aed0 <UART_SetConfig+0x108>
 800afc8:	2320      	movs	r3, #32
 800afca:	e781      	b.n	800aed0 <UART_SetConfig+0x108>
 800afcc:	2340      	movs	r3, #64	@ 0x40
 800afce:	e77f      	b.n	800aed0 <UART_SetConfig+0x108>
 800afd0:	2380      	movs	r3, #128	@ 0x80
 800afd2:	e77d      	b.n	800aed0 <UART_SetConfig+0x108>
 800afd4:	4b16      	ldr	r3, [pc, #88]	@ (800b030 <UART_SetConfig+0x268>)
 800afd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afd8:	f003 0307 	and.w	r3, r3, #7
 800afdc:	2b05      	cmp	r3, #5
 800afde:	d80e      	bhi.n	800affe <UART_SetConfig+0x236>
 800afe0:	e8df f003 	tbb	[pc, r3]
 800afe4:	07059f03 	.word	0x07059f03
 800afe8:	0b09      	.short	0x0b09
 800afea:	2300      	movs	r3, #0
 800afec:	e770      	b.n	800aed0 <UART_SetConfig+0x108>
 800afee:	2308      	movs	r3, #8
 800aff0:	e76e      	b.n	800aed0 <UART_SetConfig+0x108>
 800aff2:	2310      	movs	r3, #16
 800aff4:	e76c      	b.n	800aed0 <UART_SetConfig+0x108>
 800aff6:	2320      	movs	r3, #32
 800aff8:	e76a      	b.n	800aed0 <UART_SetConfig+0x108>
 800affa:	2340      	movs	r3, #64	@ 0x40
 800affc:	e768      	b.n	800aed0 <UART_SetConfig+0x108>
 800affe:	2380      	movs	r3, #128	@ 0x80
 800b000:	e766      	b.n	800aed0 <UART_SetConfig+0x108>
 800b002:	bf00      	nop
 800b004:	cfff69f3 	.word	0xcfff69f3
 800b008:	58000c00 	.word	0x58000c00
 800b00c:	11fff4ff 	.word	0x11fff4ff
 800b010:	40011000 	.word	0x40011000
 800b014:	40004400 	.word	0x40004400
 800b018:	40004800 	.word	0x40004800
 800b01c:	40004c00 	.word	0x40004c00
 800b020:	40005000 	.word	0x40005000
 800b024:	40011400 	.word	0x40011400
 800b028:	40007800 	.word	0x40007800
 800b02c:	40007c00 	.word	0x40007c00
 800b030:	58024400 	.word	0x58024400
 800b034:	4b7d      	ldr	r3, [pc, #500]	@ (800b22c <UART_SetConfig+0x464>)
 800b036:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b038:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b03c:	2b28      	cmp	r3, #40	@ 0x28
 800b03e:	d820      	bhi.n	800b082 <UART_SetConfig+0x2ba>
 800b040:	e8df f003 	tbb	[pc, r3]
 800b044:	1f1f1f15 	.word	0x1f1f1f15
 800b048:	1f1f1f1f 	.word	0x1f1f1f1f
 800b04c:	1f1f1f71 	.word	0x1f1f1f71
 800b050:	1f1f1f1f 	.word	0x1f1f1f1f
 800b054:	1f1f1f17 	.word	0x1f1f1f17
 800b058:	1f1f1f1f 	.word	0x1f1f1f1f
 800b05c:	1f1f1f19 	.word	0x1f1f1f19
 800b060:	1f1f1f1f 	.word	0x1f1f1f1f
 800b064:	1f1f1f1b 	.word	0x1f1f1f1b
 800b068:	1f1f1f1f 	.word	0x1f1f1f1f
 800b06c:	1d          	.byte	0x1d
 800b06d:	00          	.byte	0x00
 800b06e:	2301      	movs	r3, #1
 800b070:	e72e      	b.n	800aed0 <UART_SetConfig+0x108>
 800b072:	2308      	movs	r3, #8
 800b074:	e72c      	b.n	800aed0 <UART_SetConfig+0x108>
 800b076:	2310      	movs	r3, #16
 800b078:	e72a      	b.n	800aed0 <UART_SetConfig+0x108>
 800b07a:	2320      	movs	r3, #32
 800b07c:	e728      	b.n	800aed0 <UART_SetConfig+0x108>
 800b07e:	2340      	movs	r3, #64	@ 0x40
 800b080:	e726      	b.n	800aed0 <UART_SetConfig+0x108>
 800b082:	2380      	movs	r3, #128	@ 0x80
 800b084:	e724      	b.n	800aed0 <UART_SetConfig+0x108>
 800b086:	4b69      	ldr	r3, [pc, #420]	@ (800b22c <UART_SetConfig+0x464>)
 800b088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b08a:	f003 0307 	and.w	r3, r3, #7
 800b08e:	2b05      	cmp	r3, #5
 800b090:	d80e      	bhi.n	800b0b0 <UART_SetConfig+0x2e8>
 800b092:	e8df f003 	tbb	[pc, r3]
 800b096:	4a03      	.short	0x4a03
 800b098:	0b090705 	.word	0x0b090705
 800b09c:	2300      	movs	r3, #0
 800b09e:	e717      	b.n	800aed0 <UART_SetConfig+0x108>
 800b0a0:	2308      	movs	r3, #8
 800b0a2:	e715      	b.n	800aed0 <UART_SetConfig+0x108>
 800b0a4:	2310      	movs	r3, #16
 800b0a6:	e713      	b.n	800aed0 <UART_SetConfig+0x108>
 800b0a8:	2320      	movs	r3, #32
 800b0aa:	e711      	b.n	800aed0 <UART_SetConfig+0x108>
 800b0ac:	2340      	movs	r3, #64	@ 0x40
 800b0ae:	e70f      	b.n	800aed0 <UART_SetConfig+0x108>
 800b0b0:	2380      	movs	r3, #128	@ 0x80
 800b0b2:	e70d      	b.n	800aed0 <UART_SetConfig+0x108>
 800b0b4:	4b5d      	ldr	r3, [pc, #372]	@ (800b22c <UART_SetConfig+0x464>)
 800b0b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b0b8:	f003 0307 	and.w	r3, r3, #7
 800b0bc:	2b05      	cmp	r3, #5
 800b0be:	d80e      	bhi.n	800b0de <UART_SetConfig+0x316>
 800b0c0:	e8df f003 	tbb	[pc, r3]
 800b0c4:	07053503 	.word	0x07053503
 800b0c8:	0b09      	.short	0x0b09
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	e700      	b.n	800aed0 <UART_SetConfig+0x108>
 800b0ce:	2308      	movs	r3, #8
 800b0d0:	e6fe      	b.n	800aed0 <UART_SetConfig+0x108>
 800b0d2:	2310      	movs	r3, #16
 800b0d4:	e6fc      	b.n	800aed0 <UART_SetConfig+0x108>
 800b0d6:	2320      	movs	r3, #32
 800b0d8:	e6fa      	b.n	800aed0 <UART_SetConfig+0x108>
 800b0da:	2340      	movs	r3, #64	@ 0x40
 800b0dc:	e6f8      	b.n	800aed0 <UART_SetConfig+0x108>
 800b0de:	2380      	movs	r3, #128	@ 0x80
 800b0e0:	e6f6      	b.n	800aed0 <UART_SetConfig+0x108>
 800b0e2:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
 800b0e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b0e8:	f003 0307 	and.w	r3, r3, #7
 800b0ec:	2b05      	cmp	r3, #5
 800b0ee:	d80e      	bhi.n	800b10e <UART_SetConfig+0x346>
 800b0f0:	e8df f003 	tbb	[pc, r3]
 800b0f4:	07051f03 	.word	0x07051f03
 800b0f8:	0b09      	.short	0x0b09
 800b0fa:	2302      	movs	r3, #2
 800b0fc:	e6e8      	b.n	800aed0 <UART_SetConfig+0x108>
 800b0fe:	2308      	movs	r3, #8
 800b100:	e6e6      	b.n	800aed0 <UART_SetConfig+0x108>
 800b102:	2310      	movs	r3, #16
 800b104:	e6e4      	b.n	800aed0 <UART_SetConfig+0x108>
 800b106:	2320      	movs	r3, #32
 800b108:	e6e2      	b.n	800aed0 <UART_SetConfig+0x108>
 800b10a:	2340      	movs	r3, #64	@ 0x40
 800b10c:	e6e0      	b.n	800aed0 <UART_SetConfig+0x108>
 800b10e:	2380      	movs	r3, #128	@ 0x80
 800b110:	e6de      	b.n	800aed0 <UART_SetConfig+0x108>
 800b112:	2304      	movs	r3, #4
 800b114:	e6dc      	b.n	800aed0 <UART_SetConfig+0x108>
 800b116:	2304      	movs	r3, #4
 800b118:	e6da      	b.n	800aed0 <UART_SetConfig+0x108>
 800b11a:	2304      	movs	r3, #4
 800b11c:	e6d8      	b.n	800aed0 <UART_SetConfig+0x108>
 800b11e:	2304      	movs	r3, #4
 800b120:	e6d6      	b.n	800aed0 <UART_SetConfig+0x108>
 800b122:	2304      	movs	r3, #4
 800b124:	e6d4      	b.n	800aed0 <UART_SetConfig+0x108>
 800b126:	2304      	movs	r3, #4
 800b128:	e6d2      	b.n	800aed0 <UART_SetConfig+0x108>
 800b12a:	2304      	movs	r3, #4
 800b12c:	e6d0      	b.n	800aed0 <UART_SetConfig+0x108>
 800b12e:	2304      	movs	r3, #4
 800b130:	e6ce      	b.n	800aed0 <UART_SetConfig+0x108>
 800b132:	2304      	movs	r3, #4
 800b134:	e6cc      	b.n	800aed0 <UART_SetConfig+0x108>
    switch (clocksource)
 800b136:	2b20      	cmp	r3, #32
 800b138:	d827      	bhi.n	800b18a <UART_SetConfig+0x3c2>
 800b13a:	2b02      	cmp	r3, #2
 800b13c:	f0c0 811a 	bcc.w	800b374 <UART_SetConfig+0x5ac>
 800b140:	3b02      	subs	r3, #2
 800b142:	2b1e      	cmp	r3, #30
 800b144:	f200 8118 	bhi.w	800b378 <UART_SetConfig+0x5b0>
 800b148:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b14c:	01160050 	.word	0x01160050
 800b150:	01160056 	.word	0x01160056
 800b154:	01160116 	.word	0x01160116
 800b158:	0116005b 	.word	0x0116005b
 800b15c:	01160116 	.word	0x01160116
 800b160:	01160116 	.word	0x01160116
 800b164:	01160116 	.word	0x01160116
 800b168:	01160060 	.word	0x01160060
 800b16c:	01160116 	.word	0x01160116
 800b170:	01160116 	.word	0x01160116
 800b174:	01160116 	.word	0x01160116
 800b178:	01160116 	.word	0x01160116
 800b17c:	01160116 	.word	0x01160116
 800b180:	01160116 	.word	0x01160116
 800b184:	01160116 	.word	0x01160116
 800b188:	006c      	.short	0x006c
 800b18a:	2b40      	cmp	r3, #64	@ 0x40
 800b18c:	d12c      	bne.n	800b1e8 <UART_SetConfig+0x420>
        pclk = (uint32_t) LSE_VALUE;
 800b18e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b192:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800b194:	4b26      	ldr	r3, [pc, #152]	@ (800b230 <UART_SetConfig+0x468>)
 800b196:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800b19a:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b19e:	6865      	ldr	r5, [r4, #4]
 800b1a0:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800b1a4:	4299      	cmp	r1, r3
 800b1a6:	f200 80e9 	bhi.w	800b37c <UART_SetConfig+0x5b4>
 800b1aa:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800b1ae:	f200 80e7 	bhi.w	800b380 <UART_SetConfig+0x5b8>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b1b2:	2600      	movs	r6, #0
 800b1b4:	4633      	mov	r3, r6
 800b1b6:	4631      	mov	r1, r6
 800b1b8:	f7f5 f89c 	bl	80002f4 <__aeabi_uldivmod>
 800b1bc:	0209      	lsls	r1, r1, #8
 800b1be:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800b1c2:	0200      	lsls	r0, r0, #8
 800b1c4:	086b      	lsrs	r3, r5, #1
 800b1c6:	18c0      	adds	r0, r0, r3
 800b1c8:	462a      	mov	r2, r5
 800b1ca:	4633      	mov	r3, r6
 800b1cc:	f141 0100 	adc.w	r1, r1, #0
 800b1d0:	f7f5 f890 	bl	80002f4 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b1d4:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 800b1d8:	4b16      	ldr	r3, [pc, #88]	@ (800b234 <UART_SetConfig+0x46c>)
 800b1da:	429a      	cmp	r2, r3
 800b1dc:	f200 80d2 	bhi.w	800b384 <UART_SetConfig+0x5bc>
          huart->Instance->BRR = usartdiv;
 800b1e0:	6823      	ldr	r3, [r4, #0]
 800b1e2:	60d8      	str	r0, [r3, #12]
 800b1e4:	4630      	mov	r0, r6
 800b1e6:	e0d4      	b.n	800b392 <UART_SetConfig+0x5ca>
    switch (clocksource)
 800b1e8:	2001      	movs	r0, #1
 800b1ea:	e0d2      	b.n	800b392 <UART_SetConfig+0x5ca>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b1ec:	f7fc fff2 	bl	80081d4 <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 800b1f0:	2800      	cmp	r0, #0
 800b1f2:	d1ce      	bne.n	800b192 <UART_SetConfig+0x3ca>
 800b1f4:	2000      	movs	r0, #0
 800b1f6:	e0cc      	b.n	800b392 <UART_SetConfig+0x5ca>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1f8:	a803      	add	r0, sp, #12
 800b1fa:	f7fc fffd 	bl	80081f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b1fe:	9804      	ldr	r0, [sp, #16]
        break;
 800b200:	e7f6      	b.n	800b1f0 <UART_SetConfig+0x428>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b202:	4668      	mov	r0, sp
 800b204:	f7fd f8f6 	bl	80083f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b208:	9801      	ldr	r0, [sp, #4]
        break;
 800b20a:	e7f1      	b.n	800b1f0 <UART_SetConfig+0x428>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b20c:	4b07      	ldr	r3, [pc, #28]	@ (800b22c <UART_SetConfig+0x464>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f013 0f20 	tst.w	r3, #32
 800b214:	d008      	beq.n	800b228 <UART_SetConfig+0x460>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b216:	4b05      	ldr	r3, [pc, #20]	@ (800b22c <UART_SetConfig+0x464>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800b21e:	4806      	ldr	r0, [pc, #24]	@ (800b238 <UART_SetConfig+0x470>)
 800b220:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800b222:	e7b6      	b.n	800b192 <UART_SetConfig+0x3ca>
    switch (clocksource)
 800b224:	4805      	ldr	r0, [pc, #20]	@ (800b23c <UART_SetConfig+0x474>)
 800b226:	e7b4      	b.n	800b192 <UART_SetConfig+0x3ca>
          pclk = (uint32_t) HSI_VALUE;
 800b228:	4803      	ldr	r0, [pc, #12]	@ (800b238 <UART_SetConfig+0x470>)
 800b22a:	e7b2      	b.n	800b192 <UART_SetConfig+0x3ca>
 800b22c:	58024400 	.word	0x58024400
 800b230:	0801a040 	.word	0x0801a040
 800b234:	000ffcff 	.word	0x000ffcff
 800b238:	03d09000 	.word	0x03d09000
 800b23c:	003d0900 	.word	0x003d0900
    switch (clocksource)
 800b240:	2b20      	cmp	r3, #32
 800b242:	d815      	bhi.n	800b270 <UART_SetConfig+0x4a8>
 800b244:	2b20      	cmp	r3, #32
 800b246:	f200 809f 	bhi.w	800b388 <UART_SetConfig+0x5c0>
 800b24a:	e8df f003 	tbb	[pc, r3]
 800b24e:	3731      	.short	0x3731
 800b250:	9d3a9d9d 	.word	0x9d3a9d9d
 800b254:	9d3f9d9d 	.word	0x9d3f9d9d
 800b258:	9d9d9d9d 	.word	0x9d9d9d9d
 800b25c:	9d449d9d 	.word	0x9d449d9d
 800b260:	9d9d9d9d 	.word	0x9d9d9d9d
 800b264:	9d9d9d9d 	.word	0x9d9d9d9d
 800b268:	9d9d9d9d 	.word	0x9d9d9d9d
 800b26c:	9d9d      	.short	0x9d9d
 800b26e:	50          	.byte	0x50
 800b26f:	00          	.byte	0x00
 800b270:	2b40      	cmp	r3, #64	@ 0x40
 800b272:	d11b      	bne.n	800b2ac <UART_SetConfig+0x4e4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b274:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800b276:	4b4d      	ldr	r3, [pc, #308]	@ (800b3ac <UART_SetConfig+0x5e4>)
 800b278:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800b27c:	fbb0 f0f3 	udiv	r0, r0, r3
 800b280:	6862      	ldr	r2, [r4, #4]
 800b282:	0853      	lsrs	r3, r2, #1
 800b284:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800b288:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b28c:	f1a3 0110 	sub.w	r1, r3, #16
 800b290:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 800b294:	4291      	cmp	r1, r2
 800b296:	d879      	bhi.n	800b38c <UART_SetConfig+0x5c4>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b298:	b29a      	uxth	r2, r3
 800b29a:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b29e:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800b2a2:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 800b2a4:	6822      	ldr	r2, [r4, #0]
 800b2a6:	60d3      	str	r3, [r2, #12]
 800b2a8:	2000      	movs	r0, #0
 800b2aa:	e072      	b.n	800b392 <UART_SetConfig+0x5ca>
    switch (clocksource)
 800b2ac:	2001      	movs	r0, #1
 800b2ae:	e070      	b.n	800b392 <UART_SetConfig+0x5ca>
        pclk = HAL_RCC_GetPCLK1Freq();
 800b2b0:	f7fc f954 	bl	800755c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800b2b4:	2800      	cmp	r0, #0
 800b2b6:	d1dd      	bne.n	800b274 <UART_SetConfig+0x4ac>
 800b2b8:	2000      	movs	r0, #0
 800b2ba:	e06a      	b.n	800b392 <UART_SetConfig+0x5ca>
        pclk = HAL_RCC_GetPCLK2Freq();
 800b2bc:	f7fc f960 	bl	8007580 <HAL_RCC_GetPCLK2Freq>
        break;
 800b2c0:	e7f8      	b.n	800b2b4 <UART_SetConfig+0x4ec>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2c2:	a803      	add	r0, sp, #12
 800b2c4:	f7fc ff98 	bl	80081f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b2c8:	9804      	ldr	r0, [sp, #16]
        break;
 800b2ca:	e7f3      	b.n	800b2b4 <UART_SetConfig+0x4ec>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2cc:	4668      	mov	r0, sp
 800b2ce:	f7fd f891 	bl	80083f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b2d2:	9801      	ldr	r0, [sp, #4]
        break;
 800b2d4:	e7ee      	b.n	800b2b4 <UART_SetConfig+0x4ec>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2d6:	4b36      	ldr	r3, [pc, #216]	@ (800b3b0 <UART_SetConfig+0x5e8>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f013 0f20 	tst.w	r3, #32
 800b2de:	d008      	beq.n	800b2f2 <UART_SetConfig+0x52a>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b2e0:	4b33      	ldr	r3, [pc, #204]	@ (800b3b0 <UART_SetConfig+0x5e8>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800b2e8:	4832      	ldr	r0, [pc, #200]	@ (800b3b4 <UART_SetConfig+0x5ec>)
 800b2ea:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800b2ec:	e7c2      	b.n	800b274 <UART_SetConfig+0x4ac>
    switch (clocksource)
 800b2ee:	4832      	ldr	r0, [pc, #200]	@ (800b3b8 <UART_SetConfig+0x5f0>)
 800b2f0:	e7c0      	b.n	800b274 <UART_SetConfig+0x4ac>
          pclk = (uint32_t) HSI_VALUE;
 800b2f2:	4830      	ldr	r0, [pc, #192]	@ (800b3b4 <UART_SetConfig+0x5ec>)
 800b2f4:	e7be      	b.n	800b274 <UART_SetConfig+0x4ac>
    switch (clocksource)
 800b2f6:	2b40      	cmp	r3, #64	@ 0x40
 800b2f8:	d117      	bne.n	800b32a <UART_SetConfig+0x562>
        pclk = (uint32_t) LSE_VALUE;
 800b2fa:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b2fe:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800b300:	4b2a      	ldr	r3, [pc, #168]	@ (800b3ac <UART_SetConfig+0x5e4>)
 800b302:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800b306:	fbb0 f0f3 	udiv	r0, r0, r3
 800b30a:	6863      	ldr	r3, [r4, #4]
 800b30c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800b310:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b314:	f1a0 0210 	sub.w	r2, r0, #16
 800b318:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 800b31c:	429a      	cmp	r2, r3
 800b31e:	d842      	bhi.n	800b3a6 <UART_SetConfig+0x5de>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b320:	6823      	ldr	r3, [r4, #0]
 800b322:	b280      	uxth	r0, r0
 800b324:	60d8      	str	r0, [r3, #12]
 800b326:	2000      	movs	r0, #0
 800b328:	e033      	b.n	800b392 <UART_SetConfig+0x5ca>
    switch (clocksource)
 800b32a:	2001      	movs	r0, #1
 800b32c:	e031      	b.n	800b392 <UART_SetConfig+0x5ca>
        pclk = HAL_RCC_GetPCLK1Freq();
 800b32e:	f7fc f915 	bl	800755c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800b332:	2800      	cmp	r0, #0
 800b334:	d1e3      	bne.n	800b2fe <UART_SetConfig+0x536>
 800b336:	2000      	movs	r0, #0
 800b338:	e02b      	b.n	800b392 <UART_SetConfig+0x5ca>
        pclk = HAL_RCC_GetPCLK2Freq();
 800b33a:	f7fc f921 	bl	8007580 <HAL_RCC_GetPCLK2Freq>
        break;
 800b33e:	e7f8      	b.n	800b332 <UART_SetConfig+0x56a>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b340:	a803      	add	r0, sp, #12
 800b342:	f7fc ff59 	bl	80081f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b346:	9804      	ldr	r0, [sp, #16]
        break;
 800b348:	e7f3      	b.n	800b332 <UART_SetConfig+0x56a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b34a:	4668      	mov	r0, sp
 800b34c:	f7fd f852 	bl	80083f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b350:	9801      	ldr	r0, [sp, #4]
        break;
 800b352:	e7ee      	b.n	800b332 <UART_SetConfig+0x56a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b354:	4b16      	ldr	r3, [pc, #88]	@ (800b3b0 <UART_SetConfig+0x5e8>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f013 0f20 	tst.w	r3, #32
 800b35c:	d008      	beq.n	800b370 <UART_SetConfig+0x5a8>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b35e:	4b14      	ldr	r3, [pc, #80]	@ (800b3b0 <UART_SetConfig+0x5e8>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800b366:	4813      	ldr	r0, [pc, #76]	@ (800b3b4 <UART_SetConfig+0x5ec>)
 800b368:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800b36a:	e7c8      	b.n	800b2fe <UART_SetConfig+0x536>
    switch (clocksource)
 800b36c:	4812      	ldr	r0, [pc, #72]	@ (800b3b8 <UART_SetConfig+0x5f0>)
 800b36e:	e7c6      	b.n	800b2fe <UART_SetConfig+0x536>
          pclk = (uint32_t) HSI_VALUE;
 800b370:	4810      	ldr	r0, [pc, #64]	@ (800b3b4 <UART_SetConfig+0x5ec>)
 800b372:	e7c4      	b.n	800b2fe <UART_SetConfig+0x536>
    switch (clocksource)
 800b374:	2001      	movs	r0, #1
 800b376:	e00c      	b.n	800b392 <UART_SetConfig+0x5ca>
 800b378:	2001      	movs	r0, #1
 800b37a:	e00a      	b.n	800b392 <UART_SetConfig+0x5ca>
        ret = HAL_ERROR;
 800b37c:	2001      	movs	r0, #1
 800b37e:	e008      	b.n	800b392 <UART_SetConfig+0x5ca>
 800b380:	2001      	movs	r0, #1
 800b382:	e006      	b.n	800b392 <UART_SetConfig+0x5ca>
          ret = HAL_ERROR;
 800b384:	2001      	movs	r0, #1
 800b386:	e004      	b.n	800b392 <UART_SetConfig+0x5ca>
    switch (clocksource)
 800b388:	2001      	movs	r0, #1
 800b38a:	e002      	b.n	800b392 <UART_SetConfig+0x5ca>
        ret = HAL_ERROR;
 800b38c:	2001      	movs	r0, #1
 800b38e:	e000      	b.n	800b392 <UART_SetConfig+0x5ca>
    switch (clocksource)
 800b390:	2001      	movs	r0, #1
  huart->NbTxDataToProcess = 1;
 800b392:	2301      	movs	r3, #1
 800b394:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b398:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 800b39c:	2300      	movs	r3, #0
 800b39e:	6723      	str	r3, [r4, #112]	@ 0x70
  huart->TxISR = NULL;
 800b3a0:	6763      	str	r3, [r4, #116]	@ 0x74
}
 800b3a2:	b006      	add	sp, #24
 800b3a4:	bd70      	pop	{r4, r5, r6, pc}
        ret = HAL_ERROR;
 800b3a6:	2001      	movs	r0, #1
 800b3a8:	e7f3      	b.n	800b392 <UART_SetConfig+0x5ca>
 800b3aa:	bf00      	nop
 800b3ac:	0801a040 	.word	0x0801a040
 800b3b0:	58024400 	.word	0x58024400
 800b3b4:	03d09000 	.word	0x03d09000
 800b3b8:	003d0900 	.word	0x003d0900

0800b3bc <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b3bc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800b3be:	f013 0f01 	tst.w	r3, #1
 800b3c2:	d006      	beq.n	800b3d2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b3c4:	6802      	ldr	r2, [r0, #0]
 800b3c6:	6853      	ldr	r3, [r2, #4]
 800b3c8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b3cc:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800b3ce:	430b      	orrs	r3, r1
 800b3d0:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b3d2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800b3d4:	f013 0f02 	tst.w	r3, #2
 800b3d8:	d006      	beq.n	800b3e8 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b3da:	6802      	ldr	r2, [r0, #0]
 800b3dc:	6853      	ldr	r3, [r2, #4]
 800b3de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b3e2:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 800b3e4:	430b      	orrs	r3, r1
 800b3e6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b3e8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800b3ea:	f013 0f04 	tst.w	r3, #4
 800b3ee:	d006      	beq.n	800b3fe <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b3f0:	6802      	ldr	r2, [r0, #0]
 800b3f2:	6853      	ldr	r3, [r2, #4]
 800b3f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b3f8:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 800b3fa:	430b      	orrs	r3, r1
 800b3fc:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b3fe:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800b400:	f013 0f08 	tst.w	r3, #8
 800b404:	d006      	beq.n	800b414 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b406:	6802      	ldr	r2, [r0, #0]
 800b408:	6853      	ldr	r3, [r2, #4]
 800b40a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b40e:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800b410:	430b      	orrs	r3, r1
 800b412:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b414:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800b416:	f013 0f10 	tst.w	r3, #16
 800b41a:	d006      	beq.n	800b42a <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b41c:	6802      	ldr	r2, [r0, #0]
 800b41e:	6893      	ldr	r3, [r2, #8]
 800b420:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b424:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 800b426:	430b      	orrs	r3, r1
 800b428:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b42a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800b42c:	f013 0f20 	tst.w	r3, #32
 800b430:	d006      	beq.n	800b440 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b432:	6802      	ldr	r2, [r0, #0]
 800b434:	6893      	ldr	r3, [r2, #8]
 800b436:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b43a:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 800b43c:	430b      	orrs	r3, r1
 800b43e:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b440:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800b442:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800b446:	d00a      	beq.n	800b45e <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b448:	6802      	ldr	r2, [r0, #0]
 800b44a:	6853      	ldr	r3, [r2, #4]
 800b44c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b450:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 800b452:	430b      	orrs	r3, r1
 800b454:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b456:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800b458:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b45c:	d00b      	beq.n	800b476 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b45e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800b460:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b464:	d006      	beq.n	800b474 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b466:	6802      	ldr	r2, [r0, #0]
 800b468:	6853      	ldr	r3, [r2, #4]
 800b46a:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800b46e:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800b470:	430b      	orrs	r3, r1
 800b472:	6053      	str	r3, [r2, #4]
}
 800b474:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b476:	6802      	ldr	r2, [r0, #0]
 800b478:	6853      	ldr	r3, [r2, #4]
 800b47a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800b47e:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 800b480:	430b      	orrs	r3, r1
 800b482:	6053      	str	r3, [r2, #4]
 800b484:	e7eb      	b.n	800b45e <UART_AdvFeatureConfig+0xa2>

0800b486 <UART_WaitOnFlagUntilTimeout>:
{
 800b486:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b48a:	4605      	mov	r5, r0
 800b48c:	460f      	mov	r7, r1
 800b48e:	4616      	mov	r6, r2
 800b490:	4699      	mov	r9, r3
 800b492:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b496:	682b      	ldr	r3, [r5, #0]
 800b498:	69dc      	ldr	r4, [r3, #28]
 800b49a:	ea37 0404 	bics.w	r4, r7, r4
 800b49e:	bf0c      	ite	eq
 800b4a0:	2401      	moveq	r4, #1
 800b4a2:	2400      	movne	r4, #0
 800b4a4:	42b4      	cmp	r4, r6
 800b4a6:	d157      	bne.n	800b558 <UART_WaitOnFlagUntilTimeout+0xd2>
    if (Timeout != HAL_MAX_DELAY)
 800b4a8:	f1b8 3fff 	cmp.w	r8, #4294967295
 800b4ac:	d0f3      	beq.n	800b496 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b4ae:	f7f7 fe29 	bl	8003104 <HAL_GetTick>
 800b4b2:	eba0 0009 	sub.w	r0, r0, r9
 800b4b6:	4540      	cmp	r0, r8
 800b4b8:	d82f      	bhi.n	800b51a <UART_WaitOnFlagUntilTimeout+0x94>
 800b4ba:	f1b8 0f00 	cmp.w	r8, #0
 800b4be:	d02c      	beq.n	800b51a <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b4c0:	682b      	ldr	r3, [r5, #0]
 800b4c2:	681a      	ldr	r2, [r3, #0]
 800b4c4:	f012 0f04 	tst.w	r2, #4
 800b4c8:	d0e5      	beq.n	800b496 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b4ca:	69da      	ldr	r2, [r3, #28]
 800b4cc:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 800b4d0:	d0e1      	beq.n	800b496 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b4d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b4d6:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b4d8:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4da:	e852 3f00 	ldrex	r3, [r2]
 800b4de:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4e2:	e842 3100 	strex	r1, r3, [r2]
 800b4e6:	2900      	cmp	r1, #0
 800b4e8:	d1f6      	bne.n	800b4d8 <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4ea:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ec:	f102 0308 	add.w	r3, r2, #8
 800b4f0:	e853 3f00 	ldrex	r3, [r3]
 800b4f4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4f8:	3208      	adds	r2, #8
 800b4fa:	e842 3100 	strex	r1, r3, [r2]
 800b4fe:	2900      	cmp	r1, #0
 800b500:	d1f3      	bne.n	800b4ea <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 800b502:	2320      	movs	r3, #32
 800b504:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b508:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b50c:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
          __HAL_UNLOCK(huart);
 800b510:	2300      	movs	r3, #0
 800b512:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
          return HAL_TIMEOUT;
 800b516:	2003      	movs	r0, #3
 800b518:	e01f      	b.n	800b55a <UART_WaitOnFlagUntilTimeout+0xd4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b51a:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b51c:	e852 3f00 	ldrex	r3, [r2]
 800b520:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b524:	e842 3100 	strex	r1, r3, [r2]
 800b528:	2900      	cmp	r1, #0
 800b52a:	d1f6      	bne.n	800b51a <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b52c:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b52e:	f102 0308 	add.w	r3, r2, #8
 800b532:	e853 3f00 	ldrex	r3, [r3]
 800b536:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b53a:	3208      	adds	r2, #8
 800b53c:	e842 3100 	strex	r1, r3, [r2]
 800b540:	2900      	cmp	r1, #0
 800b542:	d1f3      	bne.n	800b52c <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 800b544:	2320      	movs	r3, #32
 800b546:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b54a:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
        __HAL_UNLOCK(huart);
 800b54e:	2300      	movs	r3, #0
 800b550:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
        return HAL_TIMEOUT;
 800b554:	2003      	movs	r0, #3
 800b556:	e000      	b.n	800b55a <UART_WaitOnFlagUntilTimeout+0xd4>
  return HAL_OK;
 800b558:	2000      	movs	r0, #0
}
 800b55a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800b55e <UART_CheckIdleState>:
{
 800b55e:	b530      	push	{r4, r5, lr}
 800b560:	b083      	sub	sp, #12
 800b562:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b564:	2300      	movs	r3, #0
 800b566:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  tickstart = HAL_GetTick();
 800b56a:	f7f7 fdcb 	bl	8003104 <HAL_GetTick>
 800b56e:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b570:	6822      	ldr	r2, [r4, #0]
 800b572:	6812      	ldr	r2, [r2, #0]
 800b574:	f012 0f08 	tst.w	r2, #8
 800b578:	d10f      	bne.n	800b59a <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b57a:	6823      	ldr	r3, [r4, #0]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f013 0f04 	tst.w	r3, #4
 800b582:	d118      	bne.n	800b5b6 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 800b584:	2320      	movs	r3, #32
 800b586:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b58a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b58e:	2000      	movs	r0, #0
 800b590:	66e0      	str	r0, [r4, #108]	@ 0x6c
  __HAL_UNLOCK(huart);
 800b592:	f884 0080 	strb.w	r0, [r4, #128]	@ 0x80
}
 800b596:	b003      	add	sp, #12
 800b598:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b59a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b59e:	9300      	str	r3, [sp, #0]
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b5a8:	4620      	mov	r0, r4
 800b5aa:	f7ff ff6c 	bl	800b486 <UART_WaitOnFlagUntilTimeout>
 800b5ae:	2800      	cmp	r0, #0
 800b5b0:	d0e3      	beq.n	800b57a <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 800b5b2:	2003      	movs	r0, #3
 800b5b4:	e7ef      	b.n	800b596 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b5b6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b5ba:	9300      	str	r3, [sp, #0]
 800b5bc:	462b      	mov	r3, r5
 800b5be:	2200      	movs	r2, #0
 800b5c0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b5c4:	4620      	mov	r0, r4
 800b5c6:	f7ff ff5e 	bl	800b486 <UART_WaitOnFlagUntilTimeout>
 800b5ca:	2800      	cmp	r0, #0
 800b5cc:	d0da      	beq.n	800b584 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 800b5ce:	2003      	movs	r0, #3
 800b5d0:	e7e1      	b.n	800b596 <UART_CheckIdleState+0x38>

0800b5d2 <HAL_UART_Init>:
  if (huart == NULL)
 800b5d2:	b378      	cbz	r0, 800b634 <HAL_UART_Init+0x62>
{
 800b5d4:	b510      	push	{r4, lr}
 800b5d6:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800b5d8:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 800b5dc:	b30b      	cbz	r3, 800b622 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800b5de:	2324      	movs	r3, #36	@ 0x24
 800b5e0:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  __HAL_UART_DISABLE(huart);
 800b5e4:	6822      	ldr	r2, [r4, #0]
 800b5e6:	6813      	ldr	r3, [r2, #0]
 800b5e8:	f023 0301 	bic.w	r3, r3, #1
 800b5ec:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b5ee:	4620      	mov	r0, r4
 800b5f0:	f7ff fbea 	bl	800adc8 <UART_SetConfig>
 800b5f4:	2801      	cmp	r0, #1
 800b5f6:	d013      	beq.n	800b620 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b5f8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b5fa:	b9bb      	cbnz	r3, 800b62c <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b5fc:	6822      	ldr	r2, [r4, #0]
 800b5fe:	6853      	ldr	r3, [r2, #4]
 800b600:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 800b604:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b606:	6822      	ldr	r2, [r4, #0]
 800b608:	6893      	ldr	r3, [r2, #8]
 800b60a:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 800b60e:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800b610:	6822      	ldr	r2, [r4, #0]
 800b612:	6813      	ldr	r3, [r2, #0]
 800b614:	f043 0301 	orr.w	r3, r3, #1
 800b618:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800b61a:	4620      	mov	r0, r4
 800b61c:	f7ff ff9f 	bl	800b55e <UART_CheckIdleState>
}
 800b620:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800b622:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
    HAL_UART_MspInit(huart);
 800b626:	f7f6 ff99 	bl	800255c <HAL_UART_MspInit>
 800b62a:	e7d8      	b.n	800b5de <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 800b62c:	4620      	mov	r0, r4
 800b62e:	f7ff fec5 	bl	800b3bc <UART_AdvFeatureConfig>
 800b632:	e7e3      	b.n	800b5fc <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 800b634:	2001      	movs	r0, #1
}
 800b636:	4770      	bx	lr

0800b638 <UART_Start_Receive_DMA>:
{
 800b638:	b510      	push	{r4, lr}
 800b63a:	4604      	mov	r4, r0
 800b63c:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 800b63e:	6581      	str	r1, [r0, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b640:	f8a0 205c 	strh.w	r2, [r0, #92]	@ 0x5c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b644:	2200      	movs	r2, #0
 800b646:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b64a:	2222      	movs	r2, #34	@ 0x22
 800b64c:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  if (huart->hdmarx != NULL)
 800b650:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 800b652:	b18a      	cbz	r2, 800b678 <UART_Start_Receive_DMA+0x40>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b654:	4922      	ldr	r1, [pc, #136]	@ (800b6e0 <UART_Start_Receive_DMA+0xa8>)
 800b656:	63d1      	str	r1, [r2, #60]	@ 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b658:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 800b65a:	4922      	ldr	r1, [pc, #136]	@ (800b6e4 <UART_Start_Receive_DMA+0xac>)
 800b65c:	6411      	str	r1, [r2, #64]	@ 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b65e:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 800b660:	4921      	ldr	r1, [pc, #132]	@ (800b6e8 <UART_Start_Receive_DMA+0xb0>)
 800b662:	64d1      	str	r1, [r2, #76]	@ 0x4c
    huart->hdmarx->XferAbortCallback = NULL;
 800b664:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 800b666:	2100      	movs	r1, #0
 800b668:	6511      	str	r1, [r2, #80]	@ 0x50
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b66a:	6801      	ldr	r1, [r0, #0]
 800b66c:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 800b66e:	3124      	adds	r1, #36	@ 0x24
 800b670:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 800b672:	f7f8 ff47 	bl	8004504 <HAL_DMA_Start_IT>
 800b676:	bb38      	cbnz	r0, 800b6c8 <UART_Start_Receive_DMA+0x90>
  __HAL_UNLOCK(huart);
 800b678:	2300      	movs	r3, #0
 800b67a:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b67e:	6923      	ldr	r3, [r4, #16]
 800b680:	b143      	cbz	r3, 800b694 <UART_Start_Receive_DMA+0x5c>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b682:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b684:	e852 3f00 	ldrex	r3, [r2]
 800b688:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b68c:	e842 3100 	strex	r1, r3, [r2]
 800b690:	2900      	cmp	r1, #0
 800b692:	d1f6      	bne.n	800b682 <UART_Start_Receive_DMA+0x4a>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b694:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b696:	f102 0308 	add.w	r3, r2, #8
 800b69a:	e853 3f00 	ldrex	r3, [r3]
 800b69e:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6a2:	3208      	adds	r2, #8
 800b6a4:	e842 3100 	strex	r1, r3, [r2]
 800b6a8:	2900      	cmp	r1, #0
 800b6aa:	d1f3      	bne.n	800b694 <UART_Start_Receive_DMA+0x5c>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b6ac:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ae:	f102 0308 	add.w	r3, r2, #8
 800b6b2:	e853 3f00 	ldrex	r3, [r3]
 800b6b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6ba:	3208      	adds	r2, #8
 800b6bc:	e842 3100 	strex	r1, r3, [r2]
 800b6c0:	2900      	cmp	r1, #0
 800b6c2:	d1f3      	bne.n	800b6ac <UART_Start_Receive_DMA+0x74>
  return HAL_OK;
 800b6c4:	2000      	movs	r0, #0
}
 800b6c6:	bd10      	pop	{r4, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b6c8:	2310      	movs	r3, #16
 800b6ca:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      __HAL_UNLOCK(huart);
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
      huart->RxState = HAL_UART_STATE_READY;
 800b6d4:	2320      	movs	r3, #32
 800b6d6:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_ERROR;
 800b6da:	2001      	movs	r0, #1
 800b6dc:	e7f3      	b.n	800b6c6 <UART_Start_Receive_DMA+0x8e>
 800b6de:	bf00      	nop
 800b6e0:	0800ad3d 	.word	0x0800ad3d
 800b6e4:	0800ad21 	.word	0x0800ad21
 800b6e8:	0800a911 	.word	0x0800a911

0800b6ec <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b6ec:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 800b6ee:	b92b      	cbnz	r3, 800b6fc <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b6f6:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
 800b6fa:	4770      	bx	lr
{
 800b6fc:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b6fe:	6803      	ldr	r3, [r0, #0]
 800b700:	689a      	ldr	r2, [r3, #8]
 800b702:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b706:	6899      	ldr	r1, [r3, #8]
 800b708:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b70a:	4d09      	ldr	r5, [pc, #36]	@ (800b730 <UARTEx_SetNbDataToProcess+0x44>)
 800b70c:	5c6b      	ldrb	r3, [r5, r1]
 800b70e:	011b      	lsls	r3, r3, #4
                               (uint16_t)denominator[tx_fifo_threshold];
 800b710:	4c08      	ldr	r4, [pc, #32]	@ (800b734 <UARTEx_SetNbDataToProcess+0x48>)
 800b712:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b714:	fb93 f3f1 	sdiv	r3, r3, r1
 800b718:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b71c:	5cab      	ldrb	r3, [r5, r2]
 800b71e:	011b      	lsls	r3, r3, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 800b720:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b722:	fb93 f3f2 	sdiv	r3, r3, r2
 800b726:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
  }
}
 800b72a:	bc30      	pop	{r4, r5}
 800b72c:	4770      	bx	lr
 800b72e:	bf00      	nop
 800b730:	0801a060 	.word	0x0801a060
 800b734:	0801a058 	.word	0x0801a058

0800b738 <HAL_RS485Ex_Init>:
  if (huart == NULL)
 800b738:	2800      	cmp	r0, #0
 800b73a:	d03c      	beq.n	800b7b6 <HAL_RS485Ex_Init+0x7e>
{
 800b73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b73e:	460f      	mov	r7, r1
 800b740:	4616      	mov	r6, r2
 800b742:	461d      	mov	r5, r3
 800b744:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800b746:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 800b74a:	b35b      	cbz	r3, 800b7a4 <HAL_RS485Ex_Init+0x6c>
  huart->gState = HAL_UART_STATE_BUSY;
 800b74c:	2324      	movs	r3, #36	@ 0x24
 800b74e:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  __HAL_UART_DISABLE(huart);
 800b752:	6822      	ldr	r2, [r4, #0]
 800b754:	6813      	ldr	r3, [r2, #0]
 800b756:	f023 0301 	bic.w	r3, r3, #1
 800b75a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b75c:	4620      	mov	r0, r4
 800b75e:	f7ff fb33 	bl	800adc8 <UART_SetConfig>
 800b762:	2801      	cmp	r0, #1
 800b764:	d01d      	beq.n	800b7a2 <HAL_RS485Ex_Init+0x6a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b766:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b768:	bb0b      	cbnz	r3, 800b7ae <HAL_RS485Ex_Init+0x76>
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800b76a:	6822      	ldr	r2, [r4, #0]
 800b76c:	6893      	ldr	r3, [r2, #8]
 800b76e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b772:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800b774:	6822      	ldr	r2, [r4, #0]
 800b776:	6893      	ldr	r3, [r2, #8]
 800b778:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b77c:	433b      	orrs	r3, r7
 800b77e:	6093      	str	r3, [r2, #8]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800b780:	042d      	lsls	r5, r5, #16
 800b782:	ea45 5246 	orr.w	r2, r5, r6, lsl #21
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800b786:	6821      	ldr	r1, [r4, #0]
 800b788:	6808      	ldr	r0, [r1, #0]
 800b78a:	4b0c      	ldr	r3, [pc, #48]	@ (800b7bc <HAL_RS485Ex_Init+0x84>)
 800b78c:	4003      	ands	r3, r0
 800b78e:	4313      	orrs	r3, r2
 800b790:	600b      	str	r3, [r1, #0]
  __HAL_UART_ENABLE(huart);
 800b792:	6822      	ldr	r2, [r4, #0]
 800b794:	6813      	ldr	r3, [r2, #0]
 800b796:	f043 0301 	orr.w	r3, r3, #1
 800b79a:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800b79c:	4620      	mov	r0, r4
 800b79e:	f7ff fede 	bl	800b55e <UART_CheckIdleState>
}
 800b7a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 800b7a4:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
    HAL_UART_MspInit(huart);
 800b7a8:	f7f6 fed8 	bl	800255c <HAL_UART_MspInit>
 800b7ac:	e7ce      	b.n	800b74c <HAL_RS485Ex_Init+0x14>
    UART_AdvFeatureConfig(huart);
 800b7ae:	4620      	mov	r0, r4
 800b7b0:	f7ff fe04 	bl	800b3bc <UART_AdvFeatureConfig>
 800b7b4:	e7d9      	b.n	800b76a <HAL_RS485Ex_Init+0x32>
    return HAL_ERROR;
 800b7b6:	2001      	movs	r0, #1
}
 800b7b8:	4770      	bx	lr
 800b7ba:	bf00      	nop
 800b7bc:	fc00ffff 	.word	0xfc00ffff

0800b7c0 <HAL_UARTEx_WakeupCallback>:
}
 800b7c0:	4770      	bx	lr

0800b7c2 <HAL_UARTEx_RxFifoFullCallback>:
}
 800b7c2:	4770      	bx	lr

0800b7c4 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 800b7c4:	4770      	bx	lr

0800b7c6 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 800b7c6:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 800b7ca:	2b01      	cmp	r3, #1
 800b7cc:	d018      	beq.n	800b800 <HAL_UARTEx_DisableFifoMode+0x3a>
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800b7d4:	2324      	movs	r3, #36	@ 0x24
 800b7d6:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b7da:	6803      	ldr	r3, [r0, #0]
 800b7dc:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800b7de:	6819      	ldr	r1, [r3, #0]
 800b7e0:	f021 0101 	bic.w	r1, r1, #1
 800b7e4:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b7e6:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	6643      	str	r3, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b7ee:	6801      	ldr	r1, [r0, #0]
 800b7f0:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 800b7f2:	2220      	movs	r2, #32
 800b7f4:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
  __HAL_UNLOCK(huart);
 800b7f8:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
  return HAL_OK;
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	4770      	bx	lr
  __HAL_LOCK(huart);
 800b800:	2002      	movs	r0, #2
}
 800b802:	4770      	bx	lr

0800b804 <HAL_UARTEx_SetTxFifoThreshold>:
{
 800b804:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800b806:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 800b80a:	2b01      	cmp	r3, #1
 800b80c:	d01d      	beq.n	800b84a <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800b80e:	4604      	mov	r4, r0
 800b810:	2301      	movs	r3, #1
 800b812:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800b816:	2324      	movs	r3, #36	@ 0x24
 800b818:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b81c:	6803      	ldr	r3, [r0, #0]
 800b81e:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800b820:	681a      	ldr	r2, [r3, #0]
 800b822:	f022 0201 	bic.w	r2, r2, #1
 800b826:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b828:	6802      	ldr	r2, [r0, #0]
 800b82a:	6893      	ldr	r3, [r2, #8]
 800b82c:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 800b830:	4319      	orrs	r1, r3
 800b832:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800b834:	f7ff ff5a 	bl	800b6ec <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b838:	6823      	ldr	r3, [r4, #0]
 800b83a:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800b83c:	2320      	movs	r3, #32
 800b83e:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  __HAL_UNLOCK(huart);
 800b842:	2000      	movs	r0, #0
 800b844:	f884 0080 	strb.w	r0, [r4, #128]	@ 0x80
}
 800b848:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800b84a:	2002      	movs	r0, #2
 800b84c:	e7fc      	b.n	800b848 <HAL_UARTEx_SetTxFifoThreshold+0x44>

0800b84e <HAL_UARTEx_SetRxFifoThreshold>:
{
 800b84e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800b850:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 800b854:	2b01      	cmp	r3, #1
 800b856:	d01d      	beq.n	800b894 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800b858:	4604      	mov	r4, r0
 800b85a:	2301      	movs	r3, #1
 800b85c:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800b860:	2324      	movs	r3, #36	@ 0x24
 800b862:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b866:	6803      	ldr	r3, [r0, #0]
 800b868:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800b86a:	681a      	ldr	r2, [r3, #0]
 800b86c:	f022 0201 	bic.w	r2, r2, #1
 800b870:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b872:	6802      	ldr	r2, [r0, #0]
 800b874:	6893      	ldr	r3, [r2, #8]
 800b876:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 800b87a:	4319      	orrs	r1, r3
 800b87c:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800b87e:	f7ff ff35 	bl	800b6ec <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b882:	6823      	ldr	r3, [r4, #0]
 800b884:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800b886:	2320      	movs	r3, #32
 800b888:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  __HAL_UNLOCK(huart);
 800b88c:	2000      	movs	r0, #0
 800b88e:	f884 0080 	strb.w	r0, [r4, #128]	@ 0x80
}
 800b892:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800b894:	2002      	movs	r0, #2
 800b896:	e7fc      	b.n	800b892 <HAL_UARTEx_SetRxFifoThreshold+0x44>

0800b898 <HAL_UARTEx_ReceiveToIdle_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800b898:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800b89c:	2b20      	cmp	r3, #32
 800b89e:	d122      	bne.n	800b8e6 <HAL_UARTEx_ReceiveToIdle_DMA+0x4e>
{
 800b8a0:	b510      	push	{r4, lr}
 800b8a2:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 800b8a4:	2a00      	cmp	r2, #0
 800b8a6:	bf18      	it	ne
 800b8a8:	2900      	cmpne	r1, #0
 800b8aa:	d01e      	beq.n	800b8ea <HAL_UARTEx_ReceiveToIdle_DMA+0x52>
    __HAL_LOCK(huart);
 800b8ac:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 800b8b0:	2b01      	cmp	r3, #1
 800b8b2:	d01c      	beq.n	800b8ee <HAL_UARTEx_ReceiveToIdle_DMA+0x56>
 800b8b4:	2301      	movs	r3, #1
 800b8b6:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b8ba:	66c3      	str	r3, [r0, #108]	@ 0x6c
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800b8bc:	f7ff febc 	bl	800b638 <UART_Start_Receive_DMA>
    if (status == HAL_OK)
 800b8c0:	b9a0      	cbnz	r0, 800b8ec <HAL_UARTEx_ReceiveToIdle_DMA+0x54>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8c2:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800b8c4:	2b01      	cmp	r3, #1
 800b8c6:	d001      	beq.n	800b8cc <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
        status = HAL_ERROR;
 800b8c8:	2001      	movs	r0, #1
    return status;
 800b8ca:	e00f      	b.n	800b8ec <HAL_UARTEx_ReceiveToIdle_DMA+0x54>
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b8cc:	6823      	ldr	r3, [r4, #0]
 800b8ce:	2210      	movs	r2, #16
 800b8d0:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8d2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8d4:	e852 3f00 	ldrex	r3, [r2]
 800b8d8:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8dc:	e842 3100 	strex	r1, r3, [r2]
 800b8e0:	2900      	cmp	r1, #0
 800b8e2:	d1f6      	bne.n	800b8d2 <HAL_UARTEx_ReceiveToIdle_DMA+0x3a>
 800b8e4:	e002      	b.n	800b8ec <HAL_UARTEx_ReceiveToIdle_DMA+0x54>
    return HAL_BUSY;
 800b8e6:	2002      	movs	r0, #2
}
 800b8e8:	4770      	bx	lr
      return HAL_ERROR;
 800b8ea:	2001      	movs	r0, #1
}
 800b8ec:	bd10      	pop	{r4, pc}
    __HAL_LOCK(huart);
 800b8ee:	2002      	movs	r0, #2
 800b8f0:	e7fc      	b.n	800b8ec <HAL_UARTEx_ReceiveToIdle_DMA+0x54>
	...

0800b8f4 <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b8f4:	4b0b      	ldr	r3, [pc, #44]	@ (800b924 <SDMMC_GetCmdError+0x30>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	4a0b      	ldr	r2, [pc, #44]	@ (800b928 <SDMMC_GetCmdError+0x34>)
 800b8fa:	fba2 2303 	umull	r2, r3, r2, r3
 800b8fe:	0a5b      	lsrs	r3, r3, #9
 800b900:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b904:	fb02 f303 	mul.w	r3, r2, r3

  do
  {
    if (count-- == 0U)
 800b908:	461a      	mov	r2, r3
 800b90a:	3b01      	subs	r3, #1
 800b90c:	b13a      	cbz	r2, 800b91e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b90e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800b910:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800b914:	d0f8      	beq.n	800b908 <SDMMC_GetCmdError+0x14>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b916:	4b05      	ldr	r3, [pc, #20]	@ (800b92c <SDMMC_GetCmdError+0x38>)
 800b918:	6383      	str	r3, [r0, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800b91a:	2000      	movs	r0, #0
 800b91c:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800b91e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800b922:	4770      	bx	lr
 800b924:	24000004 	.word	0x24000004
 800b928:	10624dd3 	.word	0x10624dd3
 800b92c:	002000c5 	.word	0x002000c5

0800b930 <SDMMC_Init>:
{
 800b930:	b084      	sub	sp, #16
 800b932:	f10d 0c04 	add.w	ip, sp, #4
 800b936:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           | \
 800b93a:	460b      	mov	r3, r1
 800b93c:	4313      	orrs	r3, r2
             Init.BusWide             | \
 800b93e:	9a03      	ldr	r2, [sp, #12]
             Init.ClockPowerSave      | \
 800b940:	4313      	orrs	r3, r2
             Init.HardwareFlowControl | \
 800b942:	9a04      	ldr	r2, [sp, #16]
             Init.BusWide             | \
 800b944:	4313      	orrs	r3, r2
             Init.ClockDiv
 800b946:	9a05      	ldr	r2, [sp, #20]
             Init.HardwareFlowControl | \
 800b948:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b94a:	6841      	ldr	r1, [r0, #4]
 800b94c:	4a03      	ldr	r2, [pc, #12]	@ (800b95c <SDMMC_Init+0x2c>)
 800b94e:	400a      	ands	r2, r1
 800b950:	4313      	orrs	r3, r2
 800b952:	6043      	str	r3, [r0, #4]
}
 800b954:	2000      	movs	r0, #0
 800b956:	b004      	add	sp, #16
 800b958:	4770      	bx	lr
 800b95a:	bf00      	nop
 800b95c:	ffc02c00 	.word	0xffc02c00

0800b960 <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 800b960:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
}
 800b964:	4770      	bx	lr

0800b966 <SDMMC_WriteFIFO>:
  SDMMCx->FIFO = *pWriteData;
 800b966:	680b      	ldr	r3, [r1, #0]
 800b968:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
}
 800b96c:	2000      	movs	r0, #0
 800b96e:	4770      	bx	lr

0800b970 <SDMMC_PowerState_ON>:
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b970:	6803      	ldr	r3, [r0, #0]
 800b972:	f043 0303 	orr.w	r3, r3, #3
 800b976:	6003      	str	r3, [r0, #0]
}
 800b978:	2000      	movs	r0, #0
 800b97a:	4770      	bx	lr

0800b97c <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b97c:	6800      	ldr	r0, [r0, #0]
}
 800b97e:	f000 0003 	and.w	r0, r0, #3
 800b982:	4770      	bx	lr

0800b984 <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
 800b984:	680b      	ldr	r3, [r1, #0]
 800b986:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b988:	684b      	ldr	r3, [r1, #4]
                       Command->Response         | \
 800b98a:	688a      	ldr	r2, [r1, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b98c:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt | \
 800b98e:	68ca      	ldr	r2, [r1, #12]
                       Command->Response         | \
 800b990:	4313      	orrs	r3, r2
                       Command->CPSM);
 800b992:	690a      	ldr	r2, [r1, #16]
                       Command->WaitForInterrupt | \
 800b994:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b996:	68c1      	ldr	r1, [r0, #12]
 800b998:	4a02      	ldr	r2, [pc, #8]	@ (800b9a4 <SDMMC_SendCommand+0x20>)
 800b99a:	400a      	ands	r2, r1
 800b99c:	4313      	orrs	r3, r2
 800b99e:	60c3      	str	r3, [r0, #12]
}
 800b9a0:	2000      	movs	r0, #0
 800b9a2:	4770      	bx	lr
 800b9a4:	fffee0c0 	.word	0xfffee0c0

0800b9a8 <SDMMC_GetCommandResponse>:
  return (uint8_t)(SDMMCx->RESPCMD);
 800b9a8:	6900      	ldr	r0, [r0, #16]
}
 800b9aa:	b2c0      	uxtb	r0, r0
 800b9ac:	4770      	bx	lr

0800b9ae <SDMMC_GetResponse>:
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b9ae:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 800b9b0:	5840      	ldr	r0, [r0, r1]
}
 800b9b2:	4770      	bx	lr

0800b9b4 <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b9b4:	680b      	ldr	r3, [r1, #0]
 800b9b6:	6243      	str	r3, [r0, #36]	@ 0x24
  SDMMCx->DLEN = Data->DataLength;
 800b9b8:	684b      	ldr	r3, [r1, #4]
 800b9ba:	6283      	str	r3, [r0, #40]	@ 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b9bc:	688b      	ldr	r3, [r1, #8]
                       Data->TransferDir   | \
 800b9be:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b9c0:	4313      	orrs	r3, r2
                       Data->TransferMode  | \
 800b9c2:	690a      	ldr	r2, [r1, #16]
                       Data->TransferDir   | \
 800b9c4:	4313      	orrs	r3, r2
                       Data->DPSM);
 800b9c6:	694a      	ldr	r2, [r1, #20]
                       Data->TransferMode  | \
 800b9c8:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b9ca:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800b9cc:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800b9d0:	4313      	orrs	r3, r2
 800b9d2:	62c3      	str	r3, [r0, #44]	@ 0x2c
}
 800b9d4:	2000      	movs	r0, #0
 800b9d6:	4770      	bx	lr

0800b9d8 <SDMMC_CmdGoIdleState>:
{
 800b9d8:	b510      	push	{r4, lr}
 800b9da:	b086      	sub	sp, #24
 800b9dc:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b9e2:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b9e4:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b9e6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b9e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b9ec:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b9ee:	a901      	add	r1, sp, #4
 800b9f0:	f7ff ffc8 	bl	800b984 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b9f4:	4620      	mov	r0, r4
 800b9f6:	f7ff ff7d 	bl	800b8f4 <SDMMC_GetCmdError>
}
 800b9fa:	b006      	add	sp, #24
 800b9fc:	bd10      	pop	{r4, pc}
	...

0800ba00 <SDMMC_GetCmdResp1>:
{
 800ba00:	b570      	push	{r4, r5, r6, lr}
 800ba02:	4605      	mov	r5, r0
 800ba04:	460e      	mov	r6, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ba06:	4b51      	ldr	r3, [pc, #324]	@ (800bb4c <SDMMC_GetCmdResp1+0x14c>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	4951      	ldr	r1, [pc, #324]	@ (800bb50 <SDMMC_GetCmdResp1+0x150>)
 800ba0c:	fba1 1303 	umull	r1, r3, r1, r3
 800ba10:	0a5b      	lsrs	r3, r3, #9
 800ba12:	fb03 f202 	mul.w	r2, r3, r2
    if (count-- == 0U)
 800ba16:	4613      	mov	r3, r2
 800ba18:	3a01      	subs	r2, #1
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d05e      	beq.n	800badc <SDMMC_GetCmdResp1+0xdc>
    sta_reg = SDMMCx->STA;
 800ba1e:	6b6c      	ldr	r4, [r5, #52]	@ 0x34
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800ba20:	4b4c      	ldr	r3, [pc, #304]	@ (800bb54 <SDMMC_GetCmdResp1+0x154>)
 800ba22:	4023      	ands	r3, r4
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d0f6      	beq.n	800ba16 <SDMMC_GetCmdResp1+0x16>
 800ba28:	f414 5f00 	tst.w	r4, #8192	@ 0x2000
 800ba2c:	d1f3      	bne.n	800ba16 <SDMMC_GetCmdResp1+0x16>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ba2e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800ba30:	f013 0f04 	tst.w	r3, #4
 800ba34:	d106      	bne.n	800ba44 <SDMMC_GetCmdResp1+0x44>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ba36:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800ba38:	f013 0f01 	tst.w	r3, #1
 800ba3c:	d005      	beq.n	800ba4a <SDMMC_GetCmdResp1+0x4a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ba3e:	2001      	movs	r0, #1
 800ba40:	63a8      	str	r0, [r5, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba42:	e04d      	b.n	800bae0 <SDMMC_GetCmdResp1+0xe0>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ba44:	2004      	movs	r0, #4
 800ba46:	63a8      	str	r0, [r5, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ba48:	e04a      	b.n	800bae0 <SDMMC_GetCmdResp1+0xe0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ba4a:	4b43      	ldr	r3, [pc, #268]	@ (800bb58 <SDMMC_GetCmdResp1+0x158>)
 800ba4c:	63ab      	str	r3, [r5, #56]	@ 0x38
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ba4e:	4628      	mov	r0, r5
 800ba50:	f7ff ffaa 	bl	800b9a8 <SDMMC_GetCommandResponse>
 800ba54:	42b0      	cmp	r0, r6
 800ba56:	d001      	beq.n	800ba5c <SDMMC_GetCmdResp1+0x5c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba58:	2001      	movs	r0, #1
 800ba5a:	e041      	b.n	800bae0 <SDMMC_GetCmdResp1+0xe0>
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ba5c:	2100      	movs	r1, #0
 800ba5e:	4628      	mov	r0, r5
 800ba60:	f7ff ffa5 	bl	800b9ae <SDMMC_GetResponse>
 800ba64:	4603      	mov	r3, r0
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ba66:	483d      	ldr	r0, [pc, #244]	@ (800bb5c <SDMMC_GetCmdResp1+0x15c>)
 800ba68:	4018      	ands	r0, r3
 800ba6a:	b3c8      	cbz	r0, 800bae0 <SDMMC_GetCmdResp1+0xe0>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	db38      	blt.n	800bae2 <SDMMC_GetCmdResp1+0xe2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ba70:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ba74:	d138      	bne.n	800bae8 <SDMMC_GetCmdResp1+0xe8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ba76:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 800ba7a:	d137      	bne.n	800baec <SDMMC_GetCmdResp1+0xec>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ba7c:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800ba80:	d136      	bne.n	800baf0 <SDMMC_GetCmdResp1+0xf0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ba82:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 800ba86:	d136      	bne.n	800baf6 <SDMMC_GetCmdResp1+0xf6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ba88:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 800ba8c:	d136      	bne.n	800bafc <SDMMC_GetCmdResp1+0xfc>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ba8e:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800ba92:	d136      	bne.n	800bb02 <SDMMC_GetCmdResp1+0x102>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ba94:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800ba98:	d136      	bne.n	800bb08 <SDMMC_GetCmdResp1+0x108>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ba9a:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800ba9e:	d136      	bne.n	800bb0e <SDMMC_GetCmdResp1+0x10e>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800baa0:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 800baa4:	d136      	bne.n	800bb14 <SDMMC_GetCmdResp1+0x114>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800baa6:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800baaa:	d136      	bne.n	800bb1a <SDMMC_GetCmdResp1+0x11a>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800baac:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 800bab0:	d136      	bne.n	800bb20 <SDMMC_GetCmdResp1+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bab2:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800bab6:	d136      	bne.n	800bb26 <SDMMC_GetCmdResp1+0x126>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bab8:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800babc:	d136      	bne.n	800bb2c <SDMMC_GetCmdResp1+0x12c>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800babe:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800bac2:	d136      	bne.n	800bb32 <SDMMC_GetCmdResp1+0x132>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bac4:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 800bac8:	d136      	bne.n	800bb38 <SDMMC_GetCmdResp1+0x138>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800baca:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 800bace:	d136      	bne.n	800bb3e <SDMMC_GetCmdResp1+0x13e>
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800bad0:	f013 0f08 	tst.w	r3, #8
 800bad4:	d036      	beq.n	800bb44 <SDMMC_GetCmdResp1+0x144>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800bad6:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800bada:	e001      	b.n	800bae0 <SDMMC_GetCmdResp1+0xe0>
      return SDMMC_ERROR_TIMEOUT;
 800badc:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800bae0:	bd70      	pop	{r4, r5, r6, pc}
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bae2:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800bae6:	e7fb      	b.n	800bae0 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bae8:	2040      	movs	r0, #64	@ 0x40
 800baea:	e7f9      	b.n	800bae0 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800baec:	2080      	movs	r0, #128	@ 0x80
 800baee:	e7f7      	b.n	800bae0 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800baf0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800baf4:	e7f4      	b.n	800bae0 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800baf6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800bafa:	e7f1      	b.n	800bae0 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bafc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800bb00:	e7ee      	b.n	800bae0 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bb02:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800bb06:	e7eb      	b.n	800bae0 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bb08:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800bb0c:	e7e8      	b.n	800bae0 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bb0e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800bb12:	e7e5      	b.n	800bae0 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bb14:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800bb18:	e7e2      	b.n	800bae0 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CC_ERR;
 800bb1a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800bb1e:	e7df      	b.n	800bae0 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bb20:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800bb24:	e7dc      	b.n	800bae0 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bb26:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800bb2a:	e7d9      	b.n	800bae0 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bb2c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800bb30:	e7d6      	b.n	800bae0 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bb32:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800bb36:	e7d3      	b.n	800bae0 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bb38:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800bb3c:	e7d0      	b.n	800bae0 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ERASE_RESET;
 800bb3e:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800bb42:	e7cd      	b.n	800bae0 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bb44:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800bb48:	e7ca      	b.n	800bae0 <SDMMC_GetCmdResp1+0xe0>
 800bb4a:	bf00      	nop
 800bb4c:	24000004 	.word	0x24000004
 800bb50:	10624dd3 	.word	0x10624dd3
 800bb54:	00200045 	.word	0x00200045
 800bb58:	002000c5 	.word	0x002000c5
 800bb5c:	fdffe008 	.word	0xfdffe008

0800bb60 <SDMMC_CmdBlockLength>:
{
 800bb60:	b530      	push	{r4, r5, lr}
 800bb62:	b087      	sub	sp, #28
 800bb64:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800bb66:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800bb68:	2510      	movs	r5, #16
 800bb6a:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bb6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bb70:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb72:	2300      	movs	r3, #0
 800bb74:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bb7a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb7c:	a901      	add	r1, sp, #4
 800bb7e:	f7ff ff01 	bl	800b984 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800bb82:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bb86:	4629      	mov	r1, r5
 800bb88:	4620      	mov	r0, r4
 800bb8a:	f7ff ff39 	bl	800ba00 <SDMMC_GetCmdResp1>
}
 800bb8e:	b007      	add	sp, #28
 800bb90:	bd30      	pop	{r4, r5, pc}
	...

0800bb94 <SDMMC_CmdStopTransfer>:
{
 800bb94:	b530      	push	{r4, r5, lr}
 800bb96:	b087      	sub	sp, #28
 800bb98:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800bb9e:	250c      	movs	r5, #12
 800bba0:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bba2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bba6:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bba8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bbaa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bbae:	9305      	str	r3, [sp, #20]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800bbb0:	68c3      	ldr	r3, [r0, #12]
 800bbb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bbb6:	60c3      	str	r3, [r0, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800bbb8:	68c3      	ldr	r3, [r0, #12]
 800bbba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bbbe:	60c3      	str	r3, [r0, #12]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bbc0:	a901      	add	r1, sp, #4
 800bbc2:	f7ff fedf 	bl	800b984 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800bbc6:	4a08      	ldr	r2, [pc, #32]	@ (800bbe8 <SDMMC_CmdStopTransfer+0x54>)
 800bbc8:	4629      	mov	r1, r5
 800bbca:	4620      	mov	r0, r4
 800bbcc:	f7ff ff18 	bl	800ba00 <SDMMC_GetCmdResp1>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bbd0:	68e3      	ldr	r3, [r4, #12]
 800bbd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bbd6:	60e3      	str	r3, [r4, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bbd8:	f1b0 7f00 	cmp.w	r0, #33554432	@ 0x2000000
 800bbdc:	d001      	beq.n	800bbe2 <SDMMC_CmdStopTransfer+0x4e>
}
 800bbde:	b007      	add	sp, #28
 800bbe0:	bd30      	pop	{r4, r5, pc}
    errorstate = SDMMC_ERROR_NONE;
 800bbe2:	2000      	movs	r0, #0
  return errorstate;
 800bbe4:	e7fb      	b.n	800bbde <SDMMC_CmdStopTransfer+0x4a>
 800bbe6:	bf00      	nop
 800bbe8:	05f5e100 	.word	0x05f5e100

0800bbec <SDMMC_CmdSelDesel>:
{
 800bbec:	b530      	push	{r4, r5, lr}
 800bbee:	b087      	sub	sp, #28
 800bbf0:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800bbf2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800bbf4:	2507      	movs	r5, #7
 800bbf6:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bbf8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bbfc:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bbfe:	2300      	movs	r3, #0
 800bc00:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bc06:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc08:	a901      	add	r1, sp, #4
 800bc0a:	f7ff febb 	bl	800b984 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800bc0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bc12:	4629      	mov	r1, r5
 800bc14:	4620      	mov	r0, r4
 800bc16:	f7ff fef3 	bl	800ba00 <SDMMC_GetCmdResp1>
}
 800bc1a:	b007      	add	sp, #28
 800bc1c:	bd30      	pop	{r4, r5, pc}

0800bc1e <SDMMC_CmdAppCommand>:
{
 800bc1e:	b530      	push	{r4, r5, lr}
 800bc20:	b087      	sub	sp, #28
 800bc22:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800bc24:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800bc26:	2537      	movs	r5, #55	@ 0x37
 800bc28:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bc2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bc2e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc30:	2300      	movs	r3, #0
 800bc32:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bc38:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc3a:	a901      	add	r1, sp, #4
 800bc3c:	f7ff fea2 	bl	800b984 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800bc40:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bc44:	4629      	mov	r1, r5
 800bc46:	4620      	mov	r0, r4
 800bc48:	f7ff feda 	bl	800ba00 <SDMMC_GetCmdResp1>
}
 800bc4c:	b007      	add	sp, #28
 800bc4e:	bd30      	pop	{r4, r5, pc}

0800bc50 <SDMMC_CmdBusWidth>:
{
 800bc50:	b530      	push	{r4, r5, lr}
 800bc52:	b087      	sub	sp, #28
 800bc54:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800bc56:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800bc58:	2506      	movs	r5, #6
 800bc5a:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bc5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bc60:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc62:	2300      	movs	r3, #0
 800bc64:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bc6a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc6c:	a901      	add	r1, sp, #4
 800bc6e:	f7ff fe89 	bl	800b984 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800bc72:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bc76:	4629      	mov	r1, r5
 800bc78:	4620      	mov	r0, r4
 800bc7a:	f7ff fec1 	bl	800ba00 <SDMMC_GetCmdResp1>
}
 800bc7e:	b007      	add	sp, #28
 800bc80:	bd30      	pop	{r4, r5, pc}

0800bc82 <SDMMC_CmdSendSCR>:
{
 800bc82:	b530      	push	{r4, r5, lr}
 800bc84:	b087      	sub	sp, #28
 800bc86:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800bc88:	2300      	movs	r3, #0
 800bc8a:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800bc8c:	2533      	movs	r5, #51	@ 0x33
 800bc8e:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bc90:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bc94:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc96:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bc9c:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc9e:	a901      	add	r1, sp, #4
 800bca0:	f7ff fe70 	bl	800b984 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800bca4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bca8:	4629      	mov	r1, r5
 800bcaa:	4620      	mov	r0, r4
 800bcac:	f7ff fea8 	bl	800ba00 <SDMMC_GetCmdResp1>
}
 800bcb0:	b007      	add	sp, #28
 800bcb2:	bd30      	pop	{r4, r5, pc}

0800bcb4 <SDMMC_CmdSendStatus>:
{
 800bcb4:	b530      	push	{r4, r5, lr}
 800bcb6:	b087      	sub	sp, #28
 800bcb8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800bcba:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800bcbc:	250d      	movs	r5, #13
 800bcbe:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bcc0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bcc4:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bcca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bcce:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bcd0:	a901      	add	r1, sp, #4
 800bcd2:	f7ff fe57 	bl	800b984 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800bcd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bcda:	4629      	mov	r1, r5
 800bcdc:	4620      	mov	r0, r4
 800bcde:	f7ff fe8f 	bl	800ba00 <SDMMC_GetCmdResp1>
}
 800bce2:	b007      	add	sp, #28
 800bce4:	bd30      	pop	{r4, r5, pc}

0800bce6 <SDMMC_CmdStatusRegister>:
{
 800bce6:	b530      	push	{r4, r5, lr}
 800bce8:	b087      	sub	sp, #28
 800bcea:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800bcec:	2300      	movs	r3, #0
 800bcee:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800bcf0:	250d      	movs	r5, #13
 800bcf2:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bcf4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bcf8:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bcfa:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bcfc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bd00:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd02:	a901      	add	r1, sp, #4
 800bd04:	f7ff fe3e 	bl	800b984 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800bd08:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bd0c:	4629      	mov	r1, r5
 800bd0e:	4620      	mov	r0, r4
 800bd10:	f7ff fe76 	bl	800ba00 <SDMMC_GetCmdResp1>
}
 800bd14:	b007      	add	sp, #28
 800bd16:	bd30      	pop	{r4, r5, pc}

0800bd18 <SDMMC_GetCmdResp2>:
{
 800bd18:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bd1a:	4b14      	ldr	r3, [pc, #80]	@ (800bd6c <SDMMC_GetCmdResp2+0x54>)
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	4a14      	ldr	r2, [pc, #80]	@ (800bd70 <SDMMC_GetCmdResp2+0x58>)
 800bd20:	fba2 2303 	umull	r2, r3, r2, r3
 800bd24:	0a5b      	lsrs	r3, r3, #9
 800bd26:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bd2a:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 800bd2e:	461a      	mov	r2, r3
 800bd30:	3b01      	subs	r3, #1
 800bd32:	b1ba      	cbz	r2, 800bd64 <SDMMC_GetCmdResp2+0x4c>
    sta_reg = SDMMCx->STA;
 800bd34:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd36:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800bd3a:	d0f8      	beq.n	800bd2e <SDMMC_GetCmdResp2+0x16>
 800bd3c:	f412 5f00 	tst.w	r2, #8192	@ 0x2000
 800bd40:	d1f5      	bne.n	800bd2e <SDMMC_GetCmdResp2+0x16>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bd42:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800bd44:	f013 0f04 	tst.w	r3, #4
 800bd48:	d106      	bne.n	800bd58 <SDMMC_GetCmdResp2+0x40>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bd4a:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 800bd4c:	f010 0001 	ands.w	r0, r0, #1
 800bd50:	d105      	bne.n	800bd5e <SDMMC_GetCmdResp2+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bd52:	4b08      	ldr	r3, [pc, #32]	@ (800bd74 <SDMMC_GetCmdResp2+0x5c>)
 800bd54:	638b      	str	r3, [r1, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 800bd56:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bd58:	2004      	movs	r0, #4
 800bd5a:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bd5c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bd5e:	2001      	movs	r0, #1
 800bd60:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd62:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800bd64:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800bd68:	4770      	bx	lr
 800bd6a:	bf00      	nop
 800bd6c:	24000004 	.word	0x24000004
 800bd70:	10624dd3 	.word	0x10624dd3
 800bd74:	002000c5 	.word	0x002000c5

0800bd78 <SDMMC_CmdSendCID>:
{
 800bd78:	b510      	push	{r4, lr}
 800bd7a:	b086      	sub	sp, #24
 800bd7c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800bd7e:	2300      	movs	r3, #0
 800bd80:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800bd82:	2202      	movs	r2, #2
 800bd84:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800bd86:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800bd8a:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd8c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bd92:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd94:	a901      	add	r1, sp, #4
 800bd96:	f7ff fdf5 	bl	800b984 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800bd9a:	4620      	mov	r0, r4
 800bd9c:	f7ff ffbc 	bl	800bd18 <SDMMC_GetCmdResp2>
}
 800bda0:	b006      	add	sp, #24
 800bda2:	bd10      	pop	{r4, pc}

0800bda4 <SDMMC_CmdSendCSD>:
{
 800bda4:	b510      	push	{r4, lr}
 800bda6:	b086      	sub	sp, #24
 800bda8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800bdaa:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800bdac:	2309      	movs	r3, #9
 800bdae:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800bdb0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800bdb4:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bdba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bdbe:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bdc0:	a901      	add	r1, sp, #4
 800bdc2:	f7ff fddf 	bl	800b984 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800bdc6:	4620      	mov	r0, r4
 800bdc8:	f7ff ffa6 	bl	800bd18 <SDMMC_GetCmdResp2>
}
 800bdcc:	b006      	add	sp, #24
 800bdce:	bd10      	pop	{r4, pc}

0800bdd0 <SDMMC_GetCmdResp3>:
{
 800bdd0:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bdd2:	4b10      	ldr	r3, [pc, #64]	@ (800be14 <SDMMC_GetCmdResp3+0x44>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	4a10      	ldr	r2, [pc, #64]	@ (800be18 <SDMMC_GetCmdResp3+0x48>)
 800bdd8:	fba2 2303 	umull	r2, r3, r2, r3
 800bddc:	0a5b      	lsrs	r3, r3, #9
 800bdde:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bde2:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 800bde6:	461a      	mov	r2, r3
 800bde8:	3b01      	subs	r3, #1
 800bdea:	b182      	cbz	r2, 800be0e <SDMMC_GetCmdResp3+0x3e>
    sta_reg = SDMMCx->STA;
 800bdec:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bdee:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800bdf2:	d0f8      	beq.n	800bde6 <SDMMC_GetCmdResp3+0x16>
 800bdf4:	f412 5f00 	tst.w	r2, #8192	@ 0x2000
 800bdf8:	d1f5      	bne.n	800bde6 <SDMMC_GetCmdResp3+0x16>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bdfa:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 800bdfc:	f010 0004 	ands.w	r0, r0, #4
 800be00:	d102      	bne.n	800be08 <SDMMC_GetCmdResp3+0x38>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800be02:	4b06      	ldr	r3, [pc, #24]	@ (800be1c <SDMMC_GetCmdResp3+0x4c>)
 800be04:	638b      	str	r3, [r1, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 800be06:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800be08:	2004      	movs	r0, #4
 800be0a:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800be0c:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800be0e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800be12:	4770      	bx	lr
 800be14:	24000004 	.word	0x24000004
 800be18:	10624dd3 	.word	0x10624dd3
 800be1c:	002000c5 	.word	0x002000c5

0800be20 <SDMMC_CmdAppOperCommand>:
{
 800be20:	b510      	push	{r4, lr}
 800be22:	b086      	sub	sp, #24
 800be24:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800be26:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800be28:	2329      	movs	r3, #41	@ 0x29
 800be2a:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800be30:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be32:	2300      	movs	r3, #0
 800be34:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800be3a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be3c:	a901      	add	r1, sp, #4
 800be3e:	f7ff fda1 	bl	800b984 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800be42:	4620      	mov	r0, r4
 800be44:	f7ff ffc4 	bl	800bdd0 <SDMMC_GetCmdResp3>
}
 800be48:	b006      	add	sp, #24
 800be4a:	bd10      	pop	{r4, pc}

0800be4c <SDMMC_GetCmdResp6>:
{
 800be4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be4e:	4605      	mov	r5, r0
 800be50:	460e      	mov	r6, r1
 800be52:	4617      	mov	r7, r2
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800be54:	4b23      	ldr	r3, [pc, #140]	@ (800bee4 <SDMMC_GetCmdResp6+0x98>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	4a23      	ldr	r2, [pc, #140]	@ (800bee8 <SDMMC_GetCmdResp6+0x9c>)
 800be5a:	fba2 2303 	umull	r2, r3, r2, r3
 800be5e:	0a5b      	lsrs	r3, r3, #9
 800be60:	f241 3288 	movw	r2, #5000	@ 0x1388
 800be64:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 800be68:	461a      	mov	r2, r3
 800be6a:	3b01      	subs	r3, #1
 800be6c:	b38a      	cbz	r2, 800bed2 <SDMMC_GetCmdResp6+0x86>
    sta_reg = SDMMCx->STA;
 800be6e:	6b6c      	ldr	r4, [r5, #52]	@ 0x34
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800be70:	f014 0f45 	tst.w	r4, #69	@ 0x45
 800be74:	d0f8      	beq.n	800be68 <SDMMC_GetCmdResp6+0x1c>
 800be76:	f414 5f00 	tst.w	r4, #8192	@ 0x2000
 800be7a:	d1f5      	bne.n	800be68 <SDMMC_GetCmdResp6+0x1c>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800be7c:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800be7e:	f013 0f04 	tst.w	r3, #4
 800be82:	d106      	bne.n	800be92 <SDMMC_GetCmdResp6+0x46>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800be84:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800be86:	f013 0f01 	tst.w	r3, #1
 800be8a:	d005      	beq.n	800be98 <SDMMC_GetCmdResp6+0x4c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800be8c:	2001      	movs	r0, #1
 800be8e:	63a8      	str	r0, [r5, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800be90:	e021      	b.n	800bed6 <SDMMC_GetCmdResp6+0x8a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800be92:	2004      	movs	r0, #4
 800be94:	63a8      	str	r0, [r5, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800be96:	e01e      	b.n	800bed6 <SDMMC_GetCmdResp6+0x8a>
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800be98:	4628      	mov	r0, r5
 800be9a:	f7ff fd85 	bl	800b9a8 <SDMMC_GetCommandResponse>
 800be9e:	42b0      	cmp	r0, r6
 800bea0:	d001      	beq.n	800bea6 <SDMMC_GetCmdResp6+0x5a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bea2:	2001      	movs	r0, #1
 800bea4:	e017      	b.n	800bed6 <SDMMC_GetCmdResp6+0x8a>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bea6:	4b11      	ldr	r3, [pc, #68]	@ (800beec <SDMMC_GetCmdResp6+0xa0>)
 800bea8:	63ab      	str	r3, [r5, #56]	@ 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800beaa:	2100      	movs	r1, #0
 800beac:	4628      	mov	r0, r5
 800beae:	f7ff fd7e 	bl	800b9ae <SDMMC_GetResponse>
 800beb2:	4603      	mov	r3, r0
  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800beb4:	f410 4060 	ands.w	r0, r0, #57344	@ 0xe000
 800beb8:	d008      	beq.n	800becc <SDMMC_GetCmdResp6+0x80>
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800beba:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 800bebe:	d10b      	bne.n	800bed8 <SDMMC_GetCmdResp6+0x8c>
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bec0:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800bec4:	d00b      	beq.n	800bede <SDMMC_GetCmdResp6+0x92>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bec6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800beca:	e004      	b.n	800bed6 <SDMMC_GetCmdResp6+0x8a>
    *pRCA = (uint16_t)(response_r1 >> 16);
 800becc:	0c1b      	lsrs	r3, r3, #16
 800bece:	803b      	strh	r3, [r7, #0]
    return SDMMC_ERROR_NONE;
 800bed0:	e001      	b.n	800bed6 <SDMMC_GetCmdResp6+0x8a>
      return SDMMC_ERROR_TIMEOUT;
 800bed2:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800bed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bed8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800bedc:	e7fb      	b.n	800bed6 <SDMMC_GetCmdResp6+0x8a>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bede:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800bee2:	e7f8      	b.n	800bed6 <SDMMC_GetCmdResp6+0x8a>
 800bee4:	24000004 	.word	0x24000004
 800bee8:	10624dd3 	.word	0x10624dd3
 800beec:	002000c5 	.word	0x002000c5

0800bef0 <SDMMC_CmdSetRelAdd>:
{
 800bef0:	b570      	push	{r4, r5, r6, lr}
 800bef2:	b086      	sub	sp, #24
 800bef4:	4604      	mov	r4, r0
 800bef6:	460d      	mov	r5, r1
  sdmmc_cmdinit.Argument         = 0U;
 800bef8:	2300      	movs	r3, #0
 800befa:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800befc:	2603      	movs	r6, #3
 800befe:	9602      	str	r6, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bf04:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf06:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bf0c:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf0e:	a901      	add	r1, sp, #4
 800bf10:	f7ff fd38 	bl	800b984 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800bf14:	462a      	mov	r2, r5
 800bf16:	4631      	mov	r1, r6
 800bf18:	4620      	mov	r0, r4
 800bf1a:	f7ff ff97 	bl	800be4c <SDMMC_GetCmdResp6>
}
 800bf1e:	b006      	add	sp, #24
 800bf20:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bf24 <SDMMC_GetCmdResp7>:
{
 800bf24:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bf26:	4b16      	ldr	r3, [pc, #88]	@ (800bf80 <SDMMC_GetCmdResp7+0x5c>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	4a16      	ldr	r2, [pc, #88]	@ (800bf84 <SDMMC_GetCmdResp7+0x60>)
 800bf2c:	fba2 2303 	umull	r2, r3, r2, r3
 800bf30:	0a5b      	lsrs	r3, r3, #9
 800bf32:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bf36:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 800bf3a:	461a      	mov	r2, r3
 800bf3c:	3b01      	subs	r3, #1
 800bf3e:	b1e2      	cbz	r2, 800bf7a <SDMMC_GetCmdResp7+0x56>
    sta_reg = SDMMCx->STA;
 800bf40:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bf42:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800bf46:	d0f8      	beq.n	800bf3a <SDMMC_GetCmdResp7+0x16>
 800bf48:	f412 5f00 	tst.w	r2, #8192	@ 0x2000
 800bf4c:	d1f5      	bne.n	800bf3a <SDMMC_GetCmdResp7+0x16>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bf4e:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800bf50:	f013 0f04 	tst.w	r3, #4
 800bf54:	d10b      	bne.n	800bf6e <SDMMC_GetCmdResp7+0x4a>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bf56:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800bf58:	f013 0301 	ands.w	r3, r3, #1
 800bf5c:	d10a      	bne.n	800bf74 <SDMMC_GetCmdResp7+0x50>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800bf5e:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 800bf60:	f010 0040 	ands.w	r0, r0, #64	@ 0x40
 800bf64:	d00b      	beq.n	800bf7e <SDMMC_GetCmdResp7+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800bf66:	2240      	movs	r2, #64	@ 0x40
 800bf68:	638a      	str	r2, [r1, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bf6e:	2004      	movs	r0, #4
 800bf70:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bf72:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bf74:	2001      	movs	r0, #1
 800bf76:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bf78:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800bf7a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800bf7e:	4770      	bx	lr
 800bf80:	24000004 	.word	0x24000004
 800bf84:	10624dd3 	.word	0x10624dd3

0800bf88 <SDMMC_CmdOperCond>:
{
 800bf88:	b510      	push	{r4, lr}
 800bf8a:	b086      	sub	sp, #24
 800bf8c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800bf8e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800bf92:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800bf94:	2308      	movs	r3, #8
 800bf96:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bf9c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bfa2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bfa6:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bfa8:	a901      	add	r1, sp, #4
 800bfaa:	f7ff fceb 	bl	800b984 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800bfae:	4620      	mov	r0, r4
 800bfb0:	f7ff ffb8 	bl	800bf24 <SDMMC_GetCmdResp7>
}
 800bfb4:	b006      	add	sp, #24
 800bfb6:	bd10      	pop	{r4, pc}

0800bfb8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800bfb8:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800bfba:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800bfbe:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800bfc0:	f001 fbf6 	bl	800d7b0 <xTaskGetSchedulerState>
 800bfc4:	2801      	cmp	r0, #1
 800bfc6:	d100      	bne.n	800bfca <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800bfc8:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 800bfca:	f001 fffb 	bl	800dfc4 <xPortSysTickHandler>
}
 800bfce:	e7fb      	b.n	800bfc8 <SysTick_Handler+0x10>

0800bfd0 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bfd0:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800bfd4:	b92b      	cbnz	r3, 800bfe2 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800bfd6:	4b06      	ldr	r3, [pc, #24]	@ (800bff0 <osKernelInitialize+0x20>)
 800bfd8:	6818      	ldr	r0, [r3, #0]
 800bfda:	b928      	cbnz	r0, 800bfe8 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bfdc:	2201      	movs	r2, #1
 800bfde:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bfe0:	4770      	bx	lr
    stat = osErrorISR;
 800bfe2:	f06f 0005 	mvn.w	r0, #5
 800bfe6:	4770      	bx	lr
    } else {
      stat = osError;
 800bfe8:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800bfec:	4770      	bx	lr
 800bfee:	bf00      	nop
 800bff0:	24002f0c 	.word	0x24002f0c

0800bff4 <osKernelStart>:
 800bff4:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800bff8:	b973      	cbnz	r3, 800c018 <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800bffa:	4b0a      	ldr	r3, [pc, #40]	@ (800c024 <osKernelStart+0x30>)
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	2b01      	cmp	r3, #1
 800c000:	d10d      	bne.n	800c01e <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 800c002:	b510      	push	{r4, lr}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c004:	2400      	movs	r4, #0
 800c006:	4b08      	ldr	r3, [pc, #32]	@ (800c028 <osKernelStart+0x34>)
 800c008:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c00a:	4b06      	ldr	r3, [pc, #24]	@ (800c024 <osKernelStart+0x30>)
 800c00c:	2202      	movs	r2, #2
 800c00e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c010:	f001 f91c 	bl	800d24c <vTaskStartScheduler>
      stat = osOK;
 800c014:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800c016:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800c018:	f06f 0005 	mvn.w	r0, #5
 800c01c:	4770      	bx	lr
      stat = osError;
 800c01e:	f04f 30ff 	mov.w	r0, #4294967295
}
 800c022:	4770      	bx	lr
 800c024:	24002f0c 	.word	0x24002f0c
 800c028:	e000ed00 	.word	0xe000ed00

0800c02c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c02c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c02e:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c030:	2400      	movs	r4, #0
 800c032:	9405      	str	r4, [sp, #20]
 800c034:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800c038:	bb74      	cbnz	r4, 800c098 <osThreadNew+0x6c>
 800c03a:	b368      	cbz	r0, 800c098 <osThreadNew+0x6c>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800c03c:	b322      	cbz	r2, 800c088 <osThreadNew+0x5c>
      if (attr->name != NULL) {
 800c03e:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800c040:	6993      	ldr	r3, [r2, #24]
 800c042:	b903      	cbnz	r3, 800c046 <osThreadNew+0x1a>
    prio  = (UBaseType_t)osPriorityNormal;
 800c044:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c046:	1e5c      	subs	r4, r3, #1
 800c048:	2c37      	cmp	r4, #55	@ 0x37
 800c04a:	d849      	bhi.n	800c0e0 <osThreadNew+0xb4>
 800c04c:	6854      	ldr	r4, [r2, #4]
 800c04e:	f014 0f01 	tst.w	r4, #1
 800c052:	d147      	bne.n	800c0e4 <osThreadNew+0xb8>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800c054:	6956      	ldr	r6, [r2, #20]
 800c056:	b16e      	cbz	r6, 800c074 <osThreadNew+0x48>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c058:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c05c:	6894      	ldr	r4, [r2, #8]
 800c05e:	b12c      	cbz	r4, 800c06c <osThreadNew+0x40>
 800c060:	68d7      	ldr	r7, [r2, #12]
 800c062:	2fa7      	cmp	r7, #167	@ 0xa7
 800c064:	d902      	bls.n	800c06c <osThreadNew+0x40>
 800c066:	6917      	ldr	r7, [r2, #16]
 800c068:	b107      	cbz	r7, 800c06c <osThreadNew+0x40>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c06a:	b9c6      	cbnz	r6, 800c09e <osThreadNew+0x72>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c06c:	b12c      	cbz	r4, 800c07a <osThreadNew+0x4e>
    mem  = -1;
 800c06e:	f04f 34ff 	mov.w	r4, #4294967295
 800c072:	e00e      	b.n	800c092 <osThreadNew+0x66>
    stack = configMINIMAL_STACK_SIZE;
 800c074:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 800c078:	e7f0      	b.n	800c05c <osThreadNew+0x30>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c07a:	68d4      	ldr	r4, [r2, #12]
 800c07c:	b98c      	cbnz	r4, 800c0a2 <osThreadNew+0x76>
 800c07e:	6914      	ldr	r4, [r2, #16]
 800c080:	b194      	cbz	r4, 800c0a8 <osThreadNew+0x7c>
    mem  = -1;
 800c082:	f04f 34ff 	mov.w	r4, #4294967295
 800c086:	e004      	b.n	800c092 <osThreadNew+0x66>
    name = NULL;
 800c088:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 800c08a:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 800c08c:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 800c08e:	f04f 0c80 	mov.w	ip, #128	@ 0x80
    }

    if (mem == 1) {
 800c092:	2c01      	cmp	r4, #1
 800c094:	d00a      	beq.n	800c0ac <osThreadNew+0x80>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 800c096:	b1ac      	cbz	r4, 800c0c4 <osThreadNew+0x98>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c098:	9805      	ldr	r0, [sp, #20]
}
 800c09a:	b007      	add	sp, #28
 800c09c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 800c09e:	2401      	movs	r4, #1
 800c0a0:	e7f7      	b.n	800c092 <osThreadNew+0x66>
    mem  = -1;
 800c0a2:	f04f 34ff 	mov.w	r4, #4294967295
 800c0a6:	e7f4      	b.n	800c092 <osThreadNew+0x66>
          mem = 0;
 800c0a8:	2400      	movs	r4, #0
 800c0aa:	e7f2      	b.n	800c092 <osThreadNew+0x66>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c0ac:	6914      	ldr	r4, [r2, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c0ae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c0b0:	9202      	str	r2, [sp, #8]
 800c0b2:	9401      	str	r4, [sp, #4]
 800c0b4:	9300      	str	r3, [sp, #0]
 800c0b6:	460b      	mov	r3, r1
 800c0b8:	4662      	mov	r2, ip
 800c0ba:	4629      	mov	r1, r5
 800c0bc:	f001 f858 	bl	800d170 <xTaskCreateStatic>
 800c0c0:	9005      	str	r0, [sp, #20]
 800c0c2:	e7e9      	b.n	800c098 <osThreadNew+0x6c>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c0c4:	aa05      	add	r2, sp, #20
 800c0c6:	9201      	str	r2, [sp, #4]
 800c0c8:	9300      	str	r3, [sp, #0]
 800c0ca:	460b      	mov	r3, r1
 800c0cc:	fa1f f28c 	uxth.w	r2, ip
 800c0d0:	4629      	mov	r1, r5
 800c0d2:	f001 f888 	bl	800d1e6 <xTaskCreate>
 800c0d6:	2801      	cmp	r0, #1
 800c0d8:	d0de      	beq.n	800c098 <osThreadNew+0x6c>
            hTask = NULL;
 800c0da:	2300      	movs	r3, #0
 800c0dc:	9305      	str	r3, [sp, #20]
 800c0de:	e7db      	b.n	800c098 <osThreadNew+0x6c>
        return (NULL);
 800c0e0:	2000      	movs	r0, #0
 800c0e2:	e7da      	b.n	800c09a <osThreadNew+0x6e>
 800c0e4:	2000      	movs	r0, #0
 800c0e6:	e7d8      	b.n	800c09a <osThreadNew+0x6e>

0800c0e8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c0e8:	b508      	push	{r3, lr}
 800c0ea:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800c0ee:	b933      	cbnz	r3, 800c0fe <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 800c0f0:	b908      	cbnz	r0, 800c0f6 <osDelay+0xe>
    stat = osOK;
 800c0f2:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 800c0f4:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 800c0f6:	f001 fa15 	bl	800d524 <vTaskDelay>
    stat = osOK;
 800c0fa:	2000      	movs	r0, #0
 800c0fc:	e7fa      	b.n	800c0f4 <osDelay+0xc>
    stat = osErrorISR;
 800c0fe:	f06f 0005 	mvn.w	r0, #5
 800c102:	e7f7      	b.n	800c0f4 <osDelay+0xc>

0800c104 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800c104:	b570      	push	{r4, r5, r6, lr}
 800c106:	b082      	sub	sp, #8
 800c108:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d14d      	bne.n	800c1ac <osSemaphoreNew+0xa8>
 800c110:	460e      	mov	r6, r1
 800c112:	4614      	mov	r4, r2
 800c114:	4288      	cmp	r0, r1
 800c116:	bf34      	ite	cc
 800c118:	2300      	movcc	r3, #0
 800c11a:	2301      	movcs	r3, #1
 800c11c:	2800      	cmp	r0, #0
 800c11e:	d049      	beq.n	800c1b4 <osSemaphoreNew+0xb0>
 800c120:	2b00      	cmp	r3, #0
 800c122:	d047      	beq.n	800c1b4 <osSemaphoreNew+0xb0>
    mem = -1;

    if (attr != NULL) {
 800c124:	b14a      	cbz	r2, 800c13a <osSemaphoreNew+0x36>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c126:	6895      	ldr	r5, [r2, #8]
 800c128:	b115      	cbz	r5, 800c130 <osSemaphoreNew+0x2c>
 800c12a:	68d3      	ldr	r3, [r2, #12]
 800c12c:	2b4f      	cmp	r3, #79	@ 0x4f
 800c12e:	d814      	bhi.n	800c15a <osSemaphoreNew+0x56>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c130:	2d00      	cmp	r5, #0
 800c132:	d141      	bne.n	800c1b8 <osSemaphoreNew+0xb4>
 800c134:	68e3      	ldr	r3, [r4, #12]
 800c136:	b10b      	cbz	r3, 800c13c <osSemaphoreNew+0x38>
 800c138:	e039      	b.n	800c1ae <osSemaphoreNew+0xaa>
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 800c13a:	2300      	movs	r3, #0
    }

    if (mem != -1) {
      if (max_count == 1U) {
 800c13c:	2801      	cmp	r0, #1
 800c13e:	d00e      	beq.n	800c15e <osSemaphoreNew+0x5a>
            hSemaphore = NULL;
          }
        }
      }
      else {
        if (mem == 1) {
 800c140:	bb73      	cbnz	r3, 800c1a0 <osSemaphoreNew+0x9c>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800c142:	4631      	mov	r1, r6
 800c144:	f000 fa90 	bl	800c668 <xQueueCreateCountingSemaphore>
 800c148:	4605      	mov	r5, r0
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800c14a:	b385      	cbz	r5, 800c1ae <osSemaphoreNew+0xaa>
        if (attr != NULL) {
 800c14c:	b104      	cbz	r4, 800c150 <osSemaphoreNew+0x4c>
          name = attr->name;
 800c14e:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hSemaphore, name);
 800c150:	4621      	mov	r1, r4
 800c152:	4628      	mov	r0, r5
 800c154:	f000 fe04 	bl	800cd60 <vQueueAddToRegistry>
 800c158:	e029      	b.n	800c1ae <osSemaphoreNew+0xaa>
        mem = 1;
 800c15a:	2301      	movs	r3, #1
 800c15c:	e7ee      	b.n	800c13c <osSemaphoreNew+0x38>
        if (mem == 1) {
 800c15e:	b9b3      	cbnz	r3, 800c18e <osSemaphoreNew+0x8a>
            hSemaphore = xSemaphoreCreateBinary();
 800c160:	2203      	movs	r2, #3
 800c162:	2100      	movs	r1, #0
 800c164:	2001      	movs	r0, #1
 800c166:	f000 fa38 	bl	800c5da <xQueueGenericCreate>
 800c16a:	4605      	mov	r5, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800c16c:	2d00      	cmp	r5, #0
 800c16e:	bf18      	it	ne
 800c170:	2e00      	cmpne	r6, #0
 800c172:	d0ea      	beq.n	800c14a <osSemaphoreNew+0x46>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c174:	2300      	movs	r3, #0
 800c176:	461a      	mov	r2, r3
 800c178:	4619      	mov	r1, r3
 800c17a:	4628      	mov	r0, r5
 800c17c:	f000 fa92 	bl	800c6a4 <xQueueGenericSend>
 800c180:	2801      	cmp	r0, #1
 800c182:	d0e2      	beq.n	800c14a <osSemaphoreNew+0x46>
            vSemaphoreDelete (hSemaphore);
 800c184:	4628      	mov	r0, r5
 800c186:	f000 fe15 	bl	800cdb4 <vQueueDelete>
            hSemaphore = NULL;
 800c18a:	2500      	movs	r5, #0
 800c18c:	e00f      	b.n	800c1ae <osSemaphoreNew+0xaa>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800c18e:	68a3      	ldr	r3, [r4, #8]
 800c190:	2203      	movs	r2, #3
 800c192:	9200      	str	r2, [sp, #0]
 800c194:	2200      	movs	r2, #0
 800c196:	4611      	mov	r1, r2
 800c198:	f000 f9cc 	bl	800c534 <xQueueGenericCreateStatic>
 800c19c:	4605      	mov	r5, r0
 800c19e:	e7e5      	b.n	800c16c <osSemaphoreNew+0x68>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800c1a0:	68a2      	ldr	r2, [r4, #8]
 800c1a2:	4631      	mov	r1, r6
 800c1a4:	f000 fa3d 	bl	800c622 <xQueueCreateCountingSemaphoreStatic>
 800c1a8:	4605      	mov	r5, r0
 800c1aa:	e7ce      	b.n	800c14a <osSemaphoreNew+0x46>
  hSemaphore = NULL;
 800c1ac:	2500      	movs	r5, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800c1ae:	4628      	mov	r0, r5
 800c1b0:	b002      	add	sp, #8
 800c1b2:	bd70      	pop	{r4, r5, r6, pc}
  hSemaphore = NULL;
 800c1b4:	2500      	movs	r5, #0
 800c1b6:	e7fa      	b.n	800c1ae <osSemaphoreNew+0xaa>
 800c1b8:	2500      	movs	r5, #0
  return ((osSemaphoreId_t)hSemaphore);
 800c1ba:	e7f8      	b.n	800c1ae <osSemaphoreNew+0xaa>

0800c1bc <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800c1bc:	b320      	cbz	r0, 800c208 <osSemaphoreAcquire+0x4c>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800c1be:	b510      	push	{r4, lr}
 800c1c0:	b082      	sub	sp, #8
 800c1c2:	460c      	mov	r4, r1
 800c1c4:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800c1c8:	b1b3      	cbz	r3, 800c1f8 <osSemaphoreAcquire+0x3c>
    if (timeout != 0U) {
 800c1ca:	bb01      	cbnz	r1, 800c20e <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 800c1cc:	2100      	movs	r1, #0
 800c1ce:	9101      	str	r1, [sp, #4]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800c1d0:	aa01      	add	r2, sp, #4
 800c1d2:	f000 fd6d 	bl	800ccb0 <xQueueReceiveFromISR>
 800c1d6:	2801      	cmp	r0, #1
 800c1d8:	d11c      	bne.n	800c214 <osSemaphoreAcquire+0x58>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800c1da:	9801      	ldr	r0, [sp, #4]
 800c1dc:	b150      	cbz	r0, 800c1f4 <osSemaphoreAcquire+0x38>
 800c1de:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c1e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1e6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c1ea:	f3bf 8f4f 	dsb	sy
 800c1ee:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800c1f2:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800c1f4:	b002      	add	sp, #8
 800c1f6:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800c1f8:	f000 fc87 	bl	800cb0a <xQueueSemaphoreTake>
 800c1fc:	2801      	cmp	r0, #1
 800c1fe:	d00c      	beq.n	800c21a <osSemaphoreAcquire+0x5e>
      if (timeout != 0U) {
 800c200:	b16c      	cbz	r4, 800c21e <osSemaphoreAcquire+0x62>
        stat = osErrorTimeout;
 800c202:	f06f 0001 	mvn.w	r0, #1
 800c206:	e7f5      	b.n	800c1f4 <osSemaphoreAcquire+0x38>
    stat = osErrorParameter;
 800c208:	f06f 0003 	mvn.w	r0, #3
}
 800c20c:	4770      	bx	lr
      stat = osErrorParameter;
 800c20e:	f06f 0003 	mvn.w	r0, #3
 800c212:	e7ef      	b.n	800c1f4 <osSemaphoreAcquire+0x38>
        stat = osErrorResource;
 800c214:	f06f 0002 	mvn.w	r0, #2
 800c218:	e7ec      	b.n	800c1f4 <osSemaphoreAcquire+0x38>
  stat = osOK;
 800c21a:	2000      	movs	r0, #0
 800c21c:	e7ea      	b.n	800c1f4 <osSemaphoreAcquire+0x38>
        stat = osErrorResource;
 800c21e:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800c222:	e7e7      	b.n	800c1f4 <osSemaphoreAcquire+0x38>

0800c224 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800c224:	b320      	cbz	r0, 800c270 <osSemaphoreRelease+0x4c>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800c226:	b500      	push	{lr}
 800c228:	b083      	sub	sp, #12
 800c22a:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800c22e:	b1a3      	cbz	r3, 800c25a <osSemaphoreRelease+0x36>
    yield = pdFALSE;
 800c230:	2300      	movs	r3, #0
 800c232:	9301      	str	r3, [sp, #4]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c234:	a901      	add	r1, sp, #4
 800c236:	f000 fb60 	bl	800c8fa <xQueueGiveFromISR>
 800c23a:	2801      	cmp	r0, #1
 800c23c:	d11b      	bne.n	800c276 <osSemaphoreRelease+0x52>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 800c23e:	9801      	ldr	r0, [sp, #4]
 800c240:	b198      	cbz	r0, 800c26a <osSemaphoreRelease+0x46>
 800c242:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c246:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c24a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c24e:	f3bf 8f4f 	dsb	sy
 800c252:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800c256:	2000      	movs	r0, #0
 800c258:	e007      	b.n	800c26a <osSemaphoreRelease+0x46>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c25a:	2300      	movs	r3, #0
 800c25c:	461a      	mov	r2, r3
 800c25e:	4619      	mov	r1, r3
 800c260:	f000 fa20 	bl	800c6a4 <xQueueGenericSend>
 800c264:	2801      	cmp	r0, #1
 800c266:	d109      	bne.n	800c27c <osSemaphoreRelease+0x58>
  stat = osOK;
 800c268:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 800c26a:	b003      	add	sp, #12
 800c26c:	f85d fb04 	ldr.w	pc, [sp], #4
    stat = osErrorParameter;
 800c270:	f06f 0003 	mvn.w	r0, #3
}
 800c274:	4770      	bx	lr
      stat = osErrorResource;
 800c276:	f06f 0002 	mvn.w	r0, #2
 800c27a:	e7f6      	b.n	800c26a <osSemaphoreRelease+0x46>
      stat = osErrorResource;
 800c27c:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800c280:	e7f3      	b.n	800c26a <osSemaphoreRelease+0x46>
	...

0800c284 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c284:	4b03      	ldr	r3, [pc, #12]	@ (800c294 <vApplicationGetIdleTaskMemory+0x10>)
 800c286:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c288:	4b03      	ldr	r3, [pc, #12]	@ (800c298 <vApplicationGetIdleTaskMemory+0x14>)
 800c28a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c28c:	2380      	movs	r3, #128	@ 0x80
 800c28e:	6013      	str	r3, [r2, #0]
}
 800c290:	4770      	bx	lr
 800c292:	bf00      	nop
 800c294:	24002e64 	.word	0x24002e64
 800c298:	24002c64 	.word	0x24002c64

0800c29c <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c29c:	4b03      	ldr	r3, [pc, #12]	@ (800c2ac <vApplicationGetTimerTaskMemory+0x10>)
 800c29e:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c2a0:	4b03      	ldr	r3, [pc, #12]	@ (800c2b0 <vApplicationGetTimerTaskMemory+0x14>)
 800c2a2:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c2a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c2a8:	6013      	str	r3, [r2, #0]
}
 800c2aa:	4770      	bx	lr
 800c2ac:	24002bbc 	.word	0x24002bbc
 800c2b0:	240027bc 	.word	0x240027bc

0800c2b4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c2b4:	f100 0308 	add.w	r3, r0, #8
 800c2b8:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c2ba:	f04f 32ff 	mov.w	r2, #4294967295
 800c2be:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c2c0:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c2c2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c2c8:	4770      	bx	lr

0800c2ca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c2ce:	4770      	bx	lr

0800c2d0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800c2d0:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c2d2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c2d4:	689a      	ldr	r2, [r3, #8]
 800c2d6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c2d8:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c2da:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c2dc:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800c2de:	6803      	ldr	r3, [r0, #0]
 800c2e0:	3301      	adds	r3, #1
 800c2e2:	6003      	str	r3, [r0, #0]
}
 800c2e4:	4770      	bx	lr

0800c2e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c2e6:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c2e8:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c2ea:	f1b5 3fff 	cmp.w	r5, #4294967295
 800c2ee:	d011      	beq.n	800c314 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c2f0:	f100 0308 	add.w	r3, r0, #8
 800c2f4:	461c      	mov	r4, r3
 800c2f6:	685b      	ldr	r3, [r3, #4]
 800c2f8:	681a      	ldr	r2, [r3, #0]
 800c2fa:	42aa      	cmp	r2, r5
 800c2fc:	d9fa      	bls.n	800c2f4 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c2fe:	6863      	ldr	r3, [r4, #4]
 800c300:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c302:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c304:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800c306:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c308:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800c30a:	6803      	ldr	r3, [r0, #0]
 800c30c:	3301      	adds	r3, #1
 800c30e:	6003      	str	r3, [r0, #0]
}
 800c310:	bc30      	pop	{r4, r5}
 800c312:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800c314:	6904      	ldr	r4, [r0, #16]
 800c316:	e7f2      	b.n	800c2fe <vListInsert+0x18>

0800c318 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c318:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c31a:	6841      	ldr	r1, [r0, #4]
 800c31c:	6882      	ldr	r2, [r0, #8]
 800c31e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c320:	6841      	ldr	r1, [r0, #4]
 800c322:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c324:	685a      	ldr	r2, [r3, #4]
 800c326:	4282      	cmp	r2, r0
 800c328:	d006      	beq.n	800c338 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c32a:	2200      	movs	r2, #0
 800c32c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800c32e:	681a      	ldr	r2, [r3, #0]
 800c330:	3a01      	subs	r2, #1
 800c332:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c334:	6818      	ldr	r0, [r3, #0]
}
 800c336:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c338:	6882      	ldr	r2, [r0, #8]
 800c33a:	605a      	str	r2, [r3, #4]
 800c33c:	e7f5      	b.n	800c32a <uxListRemove+0x12>

0800c33e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c33e:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c340:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800c342:	b118      	cbz	r0, 800c34c <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c346:	6818      	ldr	r0, [r3, #0]
 800c348:	f1c0 0038 	rsb	r0, r0, #56	@ 0x38
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 800c34c:	4770      	bx	lr

0800c34e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c34e:	b510      	push	{r4, lr}
 800c350:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c352:	f001 fdc7 	bl	800dee4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c356:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800c358:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800c35a:	429a      	cmp	r2, r3
 800c35c:	d004      	beq.n	800c368 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800c35e:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800c360:	f001 fde2 	bl	800df28 <vPortExitCritical>

	return xReturn;
}
 800c364:	4620      	mov	r0, r4
 800c366:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800c368:	2401      	movs	r4, #1
 800c36a:	e7f9      	b.n	800c360 <prvIsQueueFull+0x12>

0800c36c <prvIsQueueEmpty>:
{
 800c36c:	b510      	push	{r4, lr}
 800c36e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800c370:	f001 fdb8 	bl	800dee4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c374:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800c376:	b923      	cbnz	r3, 800c382 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 800c378:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 800c37a:	f001 fdd5 	bl	800df28 <vPortExitCritical>
}
 800c37e:	4620      	mov	r0, r4
 800c380:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 800c382:	2400      	movs	r4, #0
 800c384:	e7f9      	b.n	800c37a <prvIsQueueEmpty+0xe>

0800c386 <prvCopyDataToQueue>:
{
 800c386:	b570      	push	{r4, r5, r6, lr}
 800c388:	4604      	mov	r4, r0
 800c38a:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c38c:	6b86      	ldr	r6, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c38e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800c390:	b95a      	cbnz	r2, 800c3aa <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c392:	6803      	ldr	r3, [r0, #0]
 800c394:	b11b      	cbz	r3, 800c39e <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 800c396:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c398:	3601      	adds	r6, #1
 800c39a:	63a6      	str	r6, [r4, #56]	@ 0x38
}
 800c39c:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c39e:	6880      	ldr	r0, [r0, #8]
 800c3a0:	f001 fa62 	bl	800d868 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	60a3      	str	r3, [r4, #8]
 800c3a8:	e7f6      	b.n	800c398 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 800c3aa:	b96d      	cbnz	r5, 800c3c8 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c3ac:	6840      	ldr	r0, [r0, #4]
 800c3ae:	f00d fcb9 	bl	8019d24 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c3b2:	6863      	ldr	r3, [r4, #4]
 800c3b4:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800c3b6:	4413      	add	r3, r2
 800c3b8:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c3ba:	68a2      	ldr	r2, [r4, #8]
 800c3bc:	4293      	cmp	r3, r2
 800c3be:	d319      	bcc.n	800c3f4 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c3c0:	6823      	ldr	r3, [r4, #0]
 800c3c2:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800c3c4:	4628      	mov	r0, r5
 800c3c6:	e7e7      	b.n	800c398 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c3c8:	68c0      	ldr	r0, [r0, #12]
 800c3ca:	f00d fcab 	bl	8019d24 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c3ce:	68e3      	ldr	r3, [r4, #12]
 800c3d0:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800c3d2:	4251      	negs	r1, r2
 800c3d4:	1a9b      	subs	r3, r3, r2
 800c3d6:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c3d8:	6822      	ldr	r2, [r4, #0]
 800c3da:	4293      	cmp	r3, r2
 800c3dc:	d202      	bcs.n	800c3e4 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c3de:	68a3      	ldr	r3, [r4, #8]
 800c3e0:	440b      	add	r3, r1
 800c3e2:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800c3e4:	2d02      	cmp	r5, #2
 800c3e6:	d001      	beq.n	800c3ec <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 800c3e8:	2000      	movs	r0, #0
 800c3ea:	e7d5      	b.n	800c398 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c3ec:	b126      	cbz	r6, 800c3f8 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 800c3ee:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800c3f0:	2000      	movs	r0, #0
 800c3f2:	e7d1      	b.n	800c398 <prvCopyDataToQueue+0x12>
 800c3f4:	4628      	mov	r0, r5
 800c3f6:	e7cf      	b.n	800c398 <prvCopyDataToQueue+0x12>
 800c3f8:	2000      	movs	r0, #0
 800c3fa:	e7cd      	b.n	800c398 <prvCopyDataToQueue+0x12>

0800c3fc <prvCopyDataFromQueue>:
{
 800c3fc:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c3fe:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800c400:	b16a      	cbz	r2, 800c41e <prvCopyDataFromQueue+0x22>
{
 800c402:	b510      	push	{r4, lr}
 800c404:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c406:	68d9      	ldr	r1, [r3, #12]
 800c408:	4411      	add	r1, r2
 800c40a:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c40c:	689c      	ldr	r4, [r3, #8]
 800c40e:	42a1      	cmp	r1, r4
 800c410:	d301      	bcc.n	800c416 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c412:	6819      	ldr	r1, [r3, #0]
 800c414:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c416:	68d9      	ldr	r1, [r3, #12]
 800c418:	f00d fc84 	bl	8019d24 <memcpy>
}
 800c41c:	bd10      	pop	{r4, pc}
 800c41e:	4770      	bx	lr

0800c420 <prvUnlockQueue>:
{
 800c420:	b538      	push	{r3, r4, r5, lr}
 800c422:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 800c424:	f001 fd5e 	bl	800dee4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800c428:	f895 4045 	ldrb.w	r4, [r5, #69]	@ 0x45
 800c42c:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c42e:	e001      	b.n	800c434 <prvUnlockQueue+0x14>
			--cTxLock;
 800c430:	3c01      	subs	r4, #1
 800c432:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c434:	2c00      	cmp	r4, #0
 800c436:	dd0a      	ble.n	800c44e <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c438:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800c43a:	b143      	cbz	r3, 800c44e <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c43c:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 800c440:	f001 f91c 	bl	800d67c <xTaskRemoveFromEventList>
 800c444:	2800      	cmp	r0, #0
 800c446:	d0f3      	beq.n	800c430 <prvUnlockQueue+0x10>
						vTaskMissedYield();
 800c448:	f001 f9ac 	bl	800d7a4 <vTaskMissedYield>
 800c44c:	e7f0      	b.n	800c430 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800c44e:	23ff      	movs	r3, #255	@ 0xff
 800c450:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800c454:	f001 fd68 	bl	800df28 <vPortExitCritical>
	taskENTER_CRITICAL();
 800c458:	f001 fd44 	bl	800dee4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800c45c:	f895 4044 	ldrb.w	r4, [r5, #68]	@ 0x44
 800c460:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c462:	e001      	b.n	800c468 <prvUnlockQueue+0x48>
				--cRxLock;
 800c464:	3c01      	subs	r4, #1
 800c466:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c468:	2c00      	cmp	r4, #0
 800c46a:	dd0a      	ble.n	800c482 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c46c:	692b      	ldr	r3, [r5, #16]
 800c46e:	b143      	cbz	r3, 800c482 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c470:	f105 0010 	add.w	r0, r5, #16
 800c474:	f001 f902 	bl	800d67c <xTaskRemoveFromEventList>
 800c478:	2800      	cmp	r0, #0
 800c47a:	d0f3      	beq.n	800c464 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 800c47c:	f001 f992 	bl	800d7a4 <vTaskMissedYield>
 800c480:	e7f0      	b.n	800c464 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 800c482:	23ff      	movs	r3, #255	@ 0xff
 800c484:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	taskEXIT_CRITICAL();
 800c488:	f001 fd4e 	bl	800df28 <vPortExitCritical>
}
 800c48c:	bd38      	pop	{r3, r4, r5, pc}

0800c48e <xQueueGenericReset>:
{
 800c48e:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800c490:	b1e0      	cbz	r0, 800c4cc <xQueueGenericReset+0x3e>
 800c492:	460d      	mov	r5, r1
 800c494:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800c496:	f001 fd25 	bl	800dee4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c49a:	6823      	ldr	r3, [r4, #0]
 800c49c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800c49e:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800c4a0:	fb01 3002 	mla	r0, r1, r2, r3
 800c4a4:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c4a6:	2000      	movs	r0, #0
 800c4a8:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c4aa:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c4ac:	3a01      	subs	r2, #1
 800c4ae:	fb02 3301 	mla	r3, r2, r1, r3
 800c4b2:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c4b4:	23ff      	movs	r3, #255	@ 0xff
 800c4b6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c4ba:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800c4be:	b9fd      	cbnz	r5, 800c500 <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c4c0:	6923      	ldr	r3, [r4, #16]
 800c4c2:	b963      	cbnz	r3, 800c4de <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 800c4c4:	f001 fd30 	bl	800df28 <vPortExitCritical>
}
 800c4c8:	2001      	movs	r0, #1
 800c4ca:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c4cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4d0:	f383 8811 	msr	BASEPRI, r3
 800c4d4:	f3bf 8f6f 	isb	sy
 800c4d8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800c4dc:	e7fe      	b.n	800c4dc <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c4de:	f104 0010 	add.w	r0, r4, #16
 800c4e2:	f001 f8cb 	bl	800d67c <xTaskRemoveFromEventList>
 800c4e6:	2800      	cmp	r0, #0
 800c4e8:	d0ec      	beq.n	800c4c4 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 800c4ea:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c4ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c4f2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c4f6:	f3bf 8f4f 	dsb	sy
 800c4fa:	f3bf 8f6f 	isb	sy
 800c4fe:	e7e1      	b.n	800c4c4 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c500:	f104 0010 	add.w	r0, r4, #16
 800c504:	f7ff fed6 	bl	800c2b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c508:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800c50c:	f7ff fed2 	bl	800c2b4 <vListInitialise>
 800c510:	e7d8      	b.n	800c4c4 <xQueueGenericReset+0x36>

0800c512 <prvInitialiseNewQueue>:
{
 800c512:	b538      	push	{r3, r4, r5, lr}
 800c514:	461d      	mov	r5, r3
 800c516:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 800c518:	460b      	mov	r3, r1
 800c51a:	b949      	cbnz	r1, 800c530 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c51c:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800c51e:	63e0      	str	r0, [r4, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c520:	6423      	str	r3, [r4, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c522:	2101      	movs	r1, #1
 800c524:	4620      	mov	r0, r4
 800c526:	f7ff ffb2 	bl	800c48e <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800c52a:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
}
 800c52e:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c530:	6022      	str	r2, [r4, #0]
 800c532:	e7f4      	b.n	800c51e <prvInitialiseNewQueue+0xc>

0800c534 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c534:	b940      	cbnz	r0, 800c548 <xQueueGenericCreateStatic+0x14>
 800c536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c53a:	f383 8811 	msr	BASEPRI, r3
 800c53e:	f3bf 8f6f 	isb	sy
 800c542:	f3bf 8f4f 	dsb	sy
 800c546:	e7fe      	b.n	800c546 <xQueueGenericCreateStatic+0x12>
	{
 800c548:	b510      	push	{r4, lr}
 800c54a:	b084      	sub	sp, #16
 800c54c:	461c      	mov	r4, r3
		configASSERT( pxStaticQueue != NULL );
 800c54e:	b183      	cbz	r3, 800c572 <xQueueGenericCreateStatic+0x3e>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c550:	1e0b      	subs	r3, r1, #0
 800c552:	bf18      	it	ne
 800c554:	2301      	movne	r3, #1
 800c556:	2a00      	cmp	r2, #0
 800c558:	bf08      	it	eq
 800c55a:	f043 0301 	orreq.w	r3, r3, #1
 800c55e:	b98b      	cbnz	r3, 800c584 <xQueueGenericCreateStatic+0x50>
 800c560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c564:	f383 8811 	msr	BASEPRI, r3
 800c568:	f3bf 8f6f 	isb	sy
 800c56c:	f3bf 8f4f 	dsb	sy
 800c570:	e7fe      	b.n	800c570 <xQueueGenericCreateStatic+0x3c>
 800c572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c576:	f383 8811 	msr	BASEPRI, r3
 800c57a:	f3bf 8f6f 	isb	sy
 800c57e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 800c582:	e7fe      	b.n	800c582 <xQueueGenericCreateStatic+0x4e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c584:	fab1 f381 	clz	r3, r1
 800c588:	095b      	lsrs	r3, r3, #5
 800c58a:	2a00      	cmp	r2, #0
 800c58c:	bf18      	it	ne
 800c58e:	f043 0301 	orrne.w	r3, r3, #1
 800c592:	b943      	cbnz	r3, 800c5a6 <xQueueGenericCreateStatic+0x72>
 800c594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c598:	f383 8811 	msr	BASEPRI, r3
 800c59c:	f3bf 8f6f 	isb	sy
 800c5a0:	f3bf 8f4f 	dsb	sy
 800c5a4:	e7fe      	b.n	800c5a4 <xQueueGenericCreateStatic+0x70>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c5a6:	2350      	movs	r3, #80	@ 0x50
 800c5a8:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c5aa:	9b03      	ldr	r3, [sp, #12]
 800c5ac:	2b50      	cmp	r3, #80	@ 0x50
 800c5ae:	d008      	beq.n	800c5c2 <xQueueGenericCreateStatic+0x8e>
 800c5b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5b4:	f383 8811 	msr	BASEPRI, r3
 800c5b8:	f3bf 8f6f 	isb	sy
 800c5bc:	f3bf 8f4f 	dsb	sy
 800c5c0:	e7fe      	b.n	800c5c0 <xQueueGenericCreateStatic+0x8c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c5c2:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c5c4:	2301      	movs	r3, #1
 800c5c6:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c5ca:	9400      	str	r4, [sp, #0]
 800c5cc:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800c5d0:	f7ff ff9f 	bl	800c512 <prvInitialiseNewQueue>
	}
 800c5d4:	4620      	mov	r0, r4
 800c5d6:	b004      	add	sp, #16
 800c5d8:	bd10      	pop	{r4, pc}

0800c5da <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c5da:	b940      	cbnz	r0, 800c5ee <xQueueGenericCreate+0x14>
 800c5dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5e0:	f383 8811 	msr	BASEPRI, r3
 800c5e4:	f3bf 8f6f 	isb	sy
 800c5e8:	f3bf 8f4f 	dsb	sy
 800c5ec:	e7fe      	b.n	800c5ec <xQueueGenericCreate+0x12>
	{
 800c5ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5f0:	b083      	sub	sp, #12
 800c5f2:	460d      	mov	r5, r1
 800c5f4:	4614      	mov	r4, r2
 800c5f6:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5f8:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c5fc:	3050      	adds	r0, #80	@ 0x50
 800c5fe:	f001 fe29 	bl	800e254 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800c602:	4607      	mov	r7, r0
 800c604:	b150      	cbz	r0, 800c61c <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c606:	2300      	movs	r3, #0
 800c608:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c60c:	9000      	str	r0, [sp, #0]
 800c60e:	4623      	mov	r3, r4
 800c610:	f100 0250 	add.w	r2, r0, #80	@ 0x50
 800c614:	4629      	mov	r1, r5
 800c616:	4630      	mov	r0, r6
 800c618:	f7ff ff7b 	bl	800c512 <prvInitialiseNewQueue>
	}
 800c61c:	4638      	mov	r0, r7
 800c61e:	b003      	add	sp, #12
 800c620:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c622 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 800c622:	b940      	cbnz	r0, 800c636 <xQueueCreateCountingSemaphoreStatic+0x14>
 800c624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c628:	f383 8811 	msr	BASEPRI, r3
 800c62c:	f3bf 8f6f 	isb	sy
 800c630:	f3bf 8f4f 	dsb	sy
 800c634:	e7fe      	b.n	800c634 <xQueueCreateCountingSemaphoreStatic+0x12>
	{
 800c636:	b510      	push	{r4, lr}
 800c638:	b082      	sub	sp, #8
 800c63a:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 800c63c:	4288      	cmp	r0, r1
 800c63e:	d208      	bcs.n	800c652 <xQueueCreateCountingSemaphoreStatic+0x30>
 800c640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c644:	f383 8811 	msr	BASEPRI, r3
 800c648:	f3bf 8f6f 	isb	sy
 800c64c:	f3bf 8f4f 	dsb	sy
 800c650:	e7fe      	b.n	800c650 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c652:	2302      	movs	r3, #2
 800c654:	9300      	str	r3, [sp, #0]
 800c656:	4613      	mov	r3, r2
 800c658:	2200      	movs	r2, #0
 800c65a:	4611      	mov	r1, r2
 800c65c:	f7ff ff6a 	bl	800c534 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800c660:	b100      	cbz	r0, 800c664 <xQueueCreateCountingSemaphoreStatic+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c662:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800c664:	b002      	add	sp, #8
 800c666:	bd10      	pop	{r4, pc}

0800c668 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 800c668:	b940      	cbnz	r0, 800c67c <xQueueCreateCountingSemaphore+0x14>
 800c66a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c66e:	f383 8811 	msr	BASEPRI, r3
 800c672:	f3bf 8f6f 	isb	sy
 800c676:	f3bf 8f4f 	dsb	sy
 800c67a:	e7fe      	b.n	800c67a <xQueueCreateCountingSemaphore+0x12>
	{
 800c67c:	b510      	push	{r4, lr}
 800c67e:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 800c680:	4288      	cmp	r0, r1
 800c682:	d208      	bcs.n	800c696 <xQueueCreateCountingSemaphore+0x2e>
 800c684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c688:	f383 8811 	msr	BASEPRI, r3
 800c68c:	f3bf 8f6f 	isb	sy
 800c690:	f3bf 8f4f 	dsb	sy
 800c694:	e7fe      	b.n	800c694 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c696:	2202      	movs	r2, #2
 800c698:	2100      	movs	r1, #0
 800c69a:	f7ff ff9e 	bl	800c5da <xQueueGenericCreate>
		if( xHandle != NULL )
 800c69e:	b100      	cbz	r0, 800c6a2 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c6a0:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800c6a2:	bd10      	pop	{r4, pc}

0800c6a4 <xQueueGenericSend>:
{
 800c6a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6a6:	b085      	sub	sp, #20
 800c6a8:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800c6aa:	b188      	cbz	r0, 800c6d0 <xQueueGenericSend+0x2c>
 800c6ac:	460f      	mov	r7, r1
 800c6ae:	461d      	mov	r5, r3
 800c6b0:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c6b2:	b1b1      	cbz	r1, 800c6e2 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c6b4:	2d02      	cmp	r5, #2
 800c6b6:	d120      	bne.n	800c6fa <xQueueGenericSend+0x56>
 800c6b8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800c6ba:	2b01      	cmp	r3, #1
 800c6bc:	d01d      	beq.n	800c6fa <xQueueGenericSend+0x56>
 800c6be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6c2:	f383 8811 	msr	BASEPRI, r3
 800c6c6:	f3bf 8f6f 	isb	sy
 800c6ca:	f3bf 8f4f 	dsb	sy
 800c6ce:	e7fe      	b.n	800c6ce <xQueueGenericSend+0x2a>
 800c6d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6d4:	f383 8811 	msr	BASEPRI, r3
 800c6d8:	f3bf 8f6f 	isb	sy
 800c6dc:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800c6e0:	e7fe      	b.n	800c6e0 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c6e2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d0e5      	beq.n	800c6b4 <xQueueGenericSend+0x10>
 800c6e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6ec:	f383 8811 	msr	BASEPRI, r3
 800c6f0:	f3bf 8f6f 	isb	sy
 800c6f4:	f3bf 8f4f 	dsb	sy
 800c6f8:	e7fe      	b.n	800c6f8 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c6fa:	f001 f859 	bl	800d7b0 <xTaskGetSchedulerState>
 800c6fe:	4606      	mov	r6, r0
 800c700:	b958      	cbnz	r0, 800c71a <xQueueGenericSend+0x76>
 800c702:	9b01      	ldr	r3, [sp, #4]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d048      	beq.n	800c79a <xQueueGenericSend+0xf6>
 800c708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c70c:	f383 8811 	msr	BASEPRI, r3
 800c710:	f3bf 8f6f 	isb	sy
 800c714:	f3bf 8f4f 	dsb	sy
 800c718:	e7fe      	b.n	800c718 <xQueueGenericSend+0x74>
 800c71a:	2600      	movs	r6, #0
 800c71c:	e03d      	b.n	800c79a <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c71e:	462a      	mov	r2, r5
 800c720:	4639      	mov	r1, r7
 800c722:	4620      	mov	r0, r4
 800c724:	f7ff fe2f 	bl	800c386 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c728:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c72a:	b97b      	cbnz	r3, 800c74c <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 800c72c:	b148      	cbz	r0, 800c742 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 800c72e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c732:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c736:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c73a:	f3bf 8f4f 	dsb	sy
 800c73e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800c742:	f001 fbf1 	bl	800df28 <vPortExitCritical>
				return pdPASS;
 800c746:	2001      	movs	r0, #1
}
 800c748:	b005      	add	sp, #20
 800c74a:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c74c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800c750:	f000 ff94 	bl	800d67c <xTaskRemoveFromEventList>
 800c754:	2800      	cmp	r0, #0
 800c756:	d0f4      	beq.n	800c742 <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 800c758:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c75c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c760:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c764:	f3bf 8f4f 	dsb	sy
 800c768:	f3bf 8f6f 	isb	sy
 800c76c:	e7e9      	b.n	800c742 <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 800c76e:	f001 fbdb 	bl	800df28 <vPortExitCritical>
					return errQUEUE_FULL;
 800c772:	2000      	movs	r0, #0
 800c774:	e7e8      	b.n	800c748 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c776:	a802      	add	r0, sp, #8
 800c778:	f000 ffc6 	bl	800d708 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c77c:	2601      	movs	r6, #1
 800c77e:	e019      	b.n	800c7b4 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 800c780:	2300      	movs	r3, #0
 800c782:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800c786:	e021      	b.n	800c7cc <xQueueGenericSend+0x128>
 800c788:	2300      	movs	r3, #0
 800c78a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800c78e:	e023      	b.n	800c7d8 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 800c790:	4620      	mov	r0, r4
 800c792:	f7ff fe45 	bl	800c420 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c796:	f000 fe49 	bl	800d42c <xTaskResumeAll>
		taskENTER_CRITICAL();
 800c79a:	f001 fba3 	bl	800dee4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c79e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800c7a0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800c7a2:	429a      	cmp	r2, r3
 800c7a4:	d3bb      	bcc.n	800c71e <xQueueGenericSend+0x7a>
 800c7a6:	2d02      	cmp	r5, #2
 800c7a8:	d0b9      	beq.n	800c71e <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800c7aa:	9b01      	ldr	r3, [sp, #4]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d0de      	beq.n	800c76e <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 800c7b0:	2e00      	cmp	r6, #0
 800c7b2:	d0e0      	beq.n	800c776 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 800c7b4:	f001 fbb8 	bl	800df28 <vPortExitCritical>
		vTaskSuspendAll();
 800c7b8:	f000 fd9e 	bl	800d2f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c7bc:	f001 fb92 	bl	800dee4 <vPortEnterCritical>
 800c7c0:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 800c7c4:	b252      	sxtb	r2, r2
 800c7c6:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c7ca:	d0d9      	beq.n	800c780 <xQueueGenericSend+0xdc>
 800c7cc:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 800c7d0:	b252      	sxtb	r2, r2
 800c7d2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c7d6:	d0d7      	beq.n	800c788 <xQueueGenericSend+0xe4>
 800c7d8:	f001 fba6 	bl	800df28 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c7dc:	a901      	add	r1, sp, #4
 800c7de:	a802      	add	r0, sp, #8
 800c7e0:	f000 ff9e 	bl	800d720 <xTaskCheckForTimeOut>
 800c7e4:	b9d8      	cbnz	r0, 800c81e <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c7e6:	4620      	mov	r0, r4
 800c7e8:	f7ff fdb1 	bl	800c34e <prvIsQueueFull>
 800c7ec:	2800      	cmp	r0, #0
 800c7ee:	d0cf      	beq.n	800c790 <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c7f0:	9901      	ldr	r1, [sp, #4]
 800c7f2:	f104 0010 	add.w	r0, r4, #16
 800c7f6:	f000 ff0d 	bl	800d614 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c7fa:	4620      	mov	r0, r4
 800c7fc:	f7ff fe10 	bl	800c420 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c800:	f000 fe14 	bl	800d42c <xTaskResumeAll>
 800c804:	2800      	cmp	r0, #0
 800c806:	d1c8      	bne.n	800c79a <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 800c808:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c80c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c810:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c814:	f3bf 8f4f 	dsb	sy
 800c818:	f3bf 8f6f 	isb	sy
 800c81c:	e7bd      	b.n	800c79a <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 800c81e:	4620      	mov	r0, r4
 800c820:	f7ff fdfe 	bl	800c420 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c824:	f000 fe02 	bl	800d42c <xTaskResumeAll>
			return errQUEUE_FULL;
 800c828:	2000      	movs	r0, #0
 800c82a:	e78d      	b.n	800c748 <xQueueGenericSend+0xa4>

0800c82c <xQueueGenericSendFromISR>:
{
 800c82c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800c830:	b190      	cbz	r0, 800c858 <xQueueGenericSendFromISR+0x2c>
 800c832:	460f      	mov	r7, r1
 800c834:	4616      	mov	r6, r2
 800c836:	461c      	mov	r4, r3
 800c838:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c83a:	b1b1      	cbz	r1, 800c86a <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c83c:	2c02      	cmp	r4, #2
 800c83e:	d120      	bne.n	800c882 <xQueueGenericSendFromISR+0x56>
 800c840:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 800c842:	2b01      	cmp	r3, #1
 800c844:	d01d      	beq.n	800c882 <xQueueGenericSendFromISR+0x56>
 800c846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c84a:	f383 8811 	msr	BASEPRI, r3
 800c84e:	f3bf 8f6f 	isb	sy
 800c852:	f3bf 8f4f 	dsb	sy
 800c856:	e7fe      	b.n	800c856 <xQueueGenericSendFromISR+0x2a>
 800c858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c85c:	f383 8811 	msr	BASEPRI, r3
 800c860:	f3bf 8f6f 	isb	sy
 800c864:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800c868:	e7fe      	b.n	800c868 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c86a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d0e5      	beq.n	800c83c <xQueueGenericSendFromISR+0x10>
 800c870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c874:	f383 8811 	msr	BASEPRI, r3
 800c878:	f3bf 8f6f 	isb	sy
 800c87c:	f3bf 8f4f 	dsb	sy
 800c880:	e7fe      	b.n	800c880 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c882:	f001 fc55 	bl	800e130 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c886:	f3ef 8811 	mrs	r8, BASEPRI
 800c88a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c88e:	f383 8811 	msr	BASEPRI, r3
 800c892:	f3bf 8f6f 	isb	sy
 800c896:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c89a:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 800c89c:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 800c89e:	429a      	cmp	r2, r3
 800c8a0:	d306      	bcc.n	800c8b0 <xQueueGenericSendFromISR+0x84>
 800c8a2:	2c02      	cmp	r4, #2
 800c8a4:	d004      	beq.n	800c8b0 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 800c8a6:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c8a8:	f388 8811 	msr	BASEPRI, r8
}
 800c8ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 800c8b0:	f895 9045 	ldrb.w	r9, [r5, #69]	@ 0x45
 800c8b4:	fa4f f989 	sxtb.w	r9, r9
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c8b8:	6bab      	ldr	r3, [r5, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c8ba:	4622      	mov	r2, r4
 800c8bc:	4639      	mov	r1, r7
 800c8be:	4628      	mov	r0, r5
 800c8c0:	f7ff fd61 	bl	800c386 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800c8c4:	f1b9 3fff 	cmp.w	r9, #4294967295
 800c8c8:	d006      	beq.n	800c8d8 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c8ca:	f109 0301 	add.w	r3, r9, #1
 800c8ce:	b25b      	sxtb	r3, r3
 800c8d0:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 800c8d4:	2001      	movs	r0, #1
 800c8d6:	e7e7      	b.n	800c8a8 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c8d8:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800c8da:	b90b      	cbnz	r3, 800c8e0 <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 800c8dc:	2001      	movs	r0, #1
 800c8de:	e7e3      	b.n	800c8a8 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c8e0:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 800c8e4:	f000 feca 	bl	800d67c <xTaskRemoveFromEventList>
 800c8e8:	b118      	cbz	r0, 800c8f2 <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 800c8ea:	b126      	cbz	r6, 800c8f6 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c8ec:	2001      	movs	r0, #1
 800c8ee:	6030      	str	r0, [r6, #0]
 800c8f0:	e7da      	b.n	800c8a8 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 800c8f2:	2001      	movs	r0, #1
 800c8f4:	e7d8      	b.n	800c8a8 <xQueueGenericSendFromISR+0x7c>
 800c8f6:	2001      	movs	r0, #1
 800c8f8:	e7d6      	b.n	800c8a8 <xQueueGenericSendFromISR+0x7c>

0800c8fa <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 800c8fa:	b168      	cbz	r0, 800c918 <xQueueGiveFromISR+0x1e>
{
 800c8fc:	b570      	push	{r4, r5, r6, lr}
 800c8fe:	460c      	mov	r4, r1
 800c900:	4605      	mov	r5, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800c902:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800c904:	b18b      	cbz	r3, 800c92a <xQueueGiveFromISR+0x30>
	__asm volatile
 800c906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c90a:	f383 8811 	msr	BASEPRI, r3
 800c90e:	f3bf 8f6f 	isb	sy
 800c912:	f3bf 8f4f 	dsb	sy
 800c916:	e7fe      	b.n	800c916 <xQueueGiveFromISR+0x1c>
 800c918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c91c:	f383 8811 	msr	BASEPRI, r3
 800c920:	f3bf 8f6f 	isb	sy
 800c924:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800c928:	e7fe      	b.n	800c928 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c92a:	6803      	ldr	r3, [r0, #0]
 800c92c:	b1eb      	cbz	r3, 800c96a <xQueueGiveFromISR+0x70>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c92e:	f001 fbff 	bl	800e130 <vPortValidateInterruptPriority>
	__asm volatile
 800c932:	f3ef 8611 	mrs	r6, BASEPRI
 800c936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c93a:	f383 8811 	msr	BASEPRI, r3
 800c93e:	f3bf 8f6f 	isb	sy
 800c942:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c946:	6baa      	ldr	r2, [r5, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c948:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 800c94a:	4293      	cmp	r3, r2
 800c94c:	d926      	bls.n	800c99c <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 800c94e:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 800c952:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c954:	3201      	adds	r2, #1
 800c956:	63aa      	str	r2, [r5, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 800c958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c95c:	d011      	beq.n	800c982 <xQueueGiveFromISR+0x88>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c95e:	3301      	adds	r3, #1
 800c960:	b25b      	sxtb	r3, r3
 800c962:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 800c966:	2001      	movs	r0, #1
 800c968:	e019      	b.n	800c99e <xQueueGiveFromISR+0xa4>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c96a:	6883      	ldr	r3, [r0, #8]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d0de      	beq.n	800c92e <xQueueGiveFromISR+0x34>
	__asm volatile
 800c970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c974:	f383 8811 	msr	BASEPRI, r3
 800c978:	f3bf 8f6f 	isb	sy
 800c97c:	f3bf 8f4f 	dsb	sy
 800c980:	e7fe      	b.n	800c980 <xQueueGiveFromISR+0x86>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c982:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800c984:	b90b      	cbnz	r3, 800c98a <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 800c986:	2001      	movs	r0, #1
 800c988:	e009      	b.n	800c99e <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c98a:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 800c98e:	f000 fe75 	bl	800d67c <xTaskRemoveFromEventList>
 800c992:	b138      	cbz	r0, 800c9a4 <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
 800c994:	b144      	cbz	r4, 800c9a8 <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c996:	2001      	movs	r0, #1
 800c998:	6020      	str	r0, [r4, #0]
 800c99a:	e000      	b.n	800c99e <xQueueGiveFromISR+0xa4>
			xReturn = errQUEUE_FULL;
 800c99c:	2000      	movs	r0, #0
	__asm volatile
 800c99e:	f386 8811 	msr	BASEPRI, r6
}
 800c9a2:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
 800c9a4:	2001      	movs	r0, #1
 800c9a6:	e7fa      	b.n	800c99e <xQueueGiveFromISR+0xa4>
 800c9a8:	2001      	movs	r0, #1
 800c9aa:	e7f8      	b.n	800c99e <xQueueGiveFromISR+0xa4>

0800c9ac <xQueueReceive>:
{
 800c9ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9ae:	b085      	sub	sp, #20
 800c9b0:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800c9b2:	b190      	cbz	r0, 800c9da <xQueueReceive+0x2e>
 800c9b4:	460f      	mov	r7, r1
 800c9b6:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c9b8:	b1c1      	cbz	r1, 800c9ec <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c9ba:	f000 fef9 	bl	800d7b0 <xTaskGetSchedulerState>
 800c9be:	4606      	mov	r6, r0
 800c9c0:	bb00      	cbnz	r0, 800ca04 <xQueueReceive+0x58>
 800c9c2:	9b01      	ldr	r3, [sp, #4]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d05e      	beq.n	800ca86 <xQueueReceive+0xda>
	__asm volatile
 800c9c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9cc:	f383 8811 	msr	BASEPRI, r3
 800c9d0:	f3bf 8f6f 	isb	sy
 800c9d4:	f3bf 8f4f 	dsb	sy
 800c9d8:	e7fe      	b.n	800c9d8 <xQueueReceive+0x2c>
 800c9da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9de:	f383 8811 	msr	BASEPRI, r3
 800c9e2:	f3bf 8f6f 	isb	sy
 800c9e6:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800c9ea:	e7fe      	b.n	800c9ea <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c9ec:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d0e3      	beq.n	800c9ba <xQueueReceive+0xe>
 800c9f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9f6:	f383 8811 	msr	BASEPRI, r3
 800c9fa:	f3bf 8f6f 	isb	sy
 800c9fe:	f3bf 8f4f 	dsb	sy
 800ca02:	e7fe      	b.n	800ca02 <xQueueReceive+0x56>
 800ca04:	2600      	movs	r6, #0
 800ca06:	e03e      	b.n	800ca86 <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ca08:	4639      	mov	r1, r7
 800ca0a:	4620      	mov	r0, r4
 800ca0c:	f7ff fcf6 	bl	800c3fc <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ca10:	3d01      	subs	r5, #1
 800ca12:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca14:	6923      	ldr	r3, [r4, #16]
 800ca16:	b923      	cbnz	r3, 800ca22 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 800ca18:	f001 fa86 	bl	800df28 <vPortExitCritical>
				return pdPASS;
 800ca1c:	2001      	movs	r0, #1
}
 800ca1e:	b005      	add	sp, #20
 800ca20:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca22:	f104 0010 	add.w	r0, r4, #16
 800ca26:	f000 fe29 	bl	800d67c <xTaskRemoveFromEventList>
 800ca2a:	2800      	cmp	r0, #0
 800ca2c:	d0f4      	beq.n	800ca18 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 800ca2e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ca32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ca36:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800ca3a:	f3bf 8f4f 	dsb	sy
 800ca3e:	f3bf 8f6f 	isb	sy
 800ca42:	e7e9      	b.n	800ca18 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 800ca44:	f001 fa70 	bl	800df28 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800ca48:	2000      	movs	r0, #0
 800ca4a:	e7e8      	b.n	800ca1e <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ca4c:	a802      	add	r0, sp, #8
 800ca4e:	f000 fe5b 	bl	800d708 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ca52:	2601      	movs	r6, #1
 800ca54:	e021      	b.n	800ca9a <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 800ca56:	2300      	movs	r3, #0
 800ca58:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800ca5c:	e029      	b.n	800cab2 <xQueueReceive+0x106>
 800ca5e:	2300      	movs	r3, #0
 800ca60:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800ca64:	e02b      	b.n	800cabe <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 800ca66:	4620      	mov	r0, r4
 800ca68:	f7ff fcda 	bl	800c420 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ca6c:	f000 fcde 	bl	800d42c <xTaskResumeAll>
 800ca70:	e009      	b.n	800ca86 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 800ca72:	4620      	mov	r0, r4
 800ca74:	f7ff fcd4 	bl	800c420 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ca78:	f000 fcd8 	bl	800d42c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ca7c:	4620      	mov	r0, r4
 800ca7e:	f7ff fc75 	bl	800c36c <prvIsQueueEmpty>
 800ca82:	2800      	cmp	r0, #0
 800ca84:	d13f      	bne.n	800cb06 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 800ca86:	f001 fa2d 	bl	800dee4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca8a:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ca8c:	2d00      	cmp	r5, #0
 800ca8e:	d1bb      	bne.n	800ca08 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800ca90:	9b01      	ldr	r3, [sp, #4]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d0d6      	beq.n	800ca44 <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 800ca96:	2e00      	cmp	r6, #0
 800ca98:	d0d8      	beq.n	800ca4c <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 800ca9a:	f001 fa45 	bl	800df28 <vPortExitCritical>
		vTaskSuspendAll();
 800ca9e:	f000 fc2b 	bl	800d2f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800caa2:	f001 fa1f 	bl	800dee4 <vPortEnterCritical>
 800caa6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800caaa:	b25b      	sxtb	r3, r3
 800caac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cab0:	d0d1      	beq.n	800ca56 <xQueueReceive+0xaa>
 800cab2:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800cab6:	b25b      	sxtb	r3, r3
 800cab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cabc:	d0cf      	beq.n	800ca5e <xQueueReceive+0xb2>
 800cabe:	f001 fa33 	bl	800df28 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cac2:	a901      	add	r1, sp, #4
 800cac4:	a802      	add	r0, sp, #8
 800cac6:	f000 fe2b 	bl	800d720 <xTaskCheckForTimeOut>
 800caca:	2800      	cmp	r0, #0
 800cacc:	d1d1      	bne.n	800ca72 <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cace:	4620      	mov	r0, r4
 800cad0:	f7ff fc4c 	bl	800c36c <prvIsQueueEmpty>
 800cad4:	2800      	cmp	r0, #0
 800cad6:	d0c6      	beq.n	800ca66 <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cad8:	9901      	ldr	r1, [sp, #4]
 800cada:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800cade:	f000 fd99 	bl	800d614 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cae2:	4620      	mov	r0, r4
 800cae4:	f7ff fc9c 	bl	800c420 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cae8:	f000 fca0 	bl	800d42c <xTaskResumeAll>
 800caec:	2800      	cmp	r0, #0
 800caee:	d1ca      	bne.n	800ca86 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 800caf0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800caf4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800caf8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800cafc:	f3bf 8f4f 	dsb	sy
 800cb00:	f3bf 8f6f 	isb	sy
 800cb04:	e7bf      	b.n	800ca86 <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 800cb06:	2000      	movs	r0, #0
 800cb08:	e789      	b.n	800ca1e <xQueueReceive+0x72>

0800cb0a <xQueueSemaphoreTake>:
{
 800cb0a:	b570      	push	{r4, r5, r6, lr}
 800cb0c:	b084      	sub	sp, #16
 800cb0e:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800cb10:	b158      	cbz	r0, 800cb2a <xQueueSemaphoreTake+0x20>
 800cb12:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800cb14:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800cb16:	b18b      	cbz	r3, 800cb3c <xQueueSemaphoreTake+0x32>
 800cb18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb1c:	f383 8811 	msr	BASEPRI, r3
 800cb20:	f3bf 8f6f 	isb	sy
 800cb24:	f3bf 8f4f 	dsb	sy
 800cb28:	e7fe      	b.n	800cb28 <xQueueSemaphoreTake+0x1e>
 800cb2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb2e:	f383 8811 	msr	BASEPRI, r3
 800cb32:	f3bf 8f6f 	isb	sy
 800cb36:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800cb3a:	e7fe      	b.n	800cb3a <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cb3c:	f000 fe38 	bl	800d7b0 <xTaskGetSchedulerState>
 800cb40:	4605      	mov	r5, r0
 800cb42:	b950      	cbnz	r0, 800cb5a <xQueueSemaphoreTake+0x50>
 800cb44:	9b01      	ldr	r3, [sp, #4]
 800cb46:	b15b      	cbz	r3, 800cb60 <xQueueSemaphoreTake+0x56>
 800cb48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb4c:	f383 8811 	msr	BASEPRI, r3
 800cb50:	f3bf 8f6f 	isb	sy
 800cb54:	f3bf 8f4f 	dsb	sy
 800cb58:	e7fe      	b.n	800cb58 <xQueueSemaphoreTake+0x4e>
 800cb5a:	2600      	movs	r6, #0
 800cb5c:	4635      	mov	r5, r6
 800cb5e:	e055      	b.n	800cc0c <xQueueSemaphoreTake+0x102>
 800cb60:	4606      	mov	r6, r0
 800cb62:	e053      	b.n	800cc0c <xQueueSemaphoreTake+0x102>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cb64:	3b01      	subs	r3, #1
 800cb66:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cb68:	6823      	ldr	r3, [r4, #0]
 800cb6a:	b13b      	cbz	r3, 800cb7c <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb6c:	6923      	ldr	r3, [r4, #16]
 800cb6e:	b94b      	cbnz	r3, 800cb84 <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 800cb70:	f001 f9da 	bl	800df28 <vPortExitCritical>
				return pdPASS;
 800cb74:	2601      	movs	r6, #1
}
 800cb76:	4630      	mov	r0, r6
 800cb78:	b004      	add	sp, #16
 800cb7a:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cb7c:	f000 ff0c 	bl	800d998 <pvTaskIncrementMutexHeldCount>
 800cb80:	60a0      	str	r0, [r4, #8]
 800cb82:	e7f3      	b.n	800cb6c <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb84:	f104 0010 	add.w	r0, r4, #16
 800cb88:	f000 fd78 	bl	800d67c <xTaskRemoveFromEventList>
 800cb8c:	2800      	cmp	r0, #0
 800cb8e:	d0ef      	beq.n	800cb70 <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 800cb90:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cb94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb98:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800cb9c:	f3bf 8f4f 	dsb	sy
 800cba0:	f3bf 8f6f 	isb	sy
 800cba4:	e7e4      	b.n	800cb70 <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cba6:	b146      	cbz	r6, 800cbba <xQueueSemaphoreTake+0xb0>
 800cba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbac:	f383 8811 	msr	BASEPRI, r3
 800cbb0:	f3bf 8f6f 	isb	sy
 800cbb4:	f3bf 8f4f 	dsb	sy
 800cbb8:	e7fe      	b.n	800cbb8 <xQueueSemaphoreTake+0xae>
					taskEXIT_CRITICAL();
 800cbba:	f001 f9b5 	bl	800df28 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800cbbe:	e7da      	b.n	800cb76 <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cbc0:	a802      	add	r0, sp, #8
 800cbc2:	f000 fda1 	bl	800d708 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cbc6:	2501      	movs	r5, #1
 800cbc8:	e02a      	b.n	800cc20 <xQueueSemaphoreTake+0x116>
		prvLockQueue( pxQueue );
 800cbca:	2300      	movs	r3, #0
 800cbcc:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800cbd0:	e032      	b.n	800cc38 <xQueueSemaphoreTake+0x12e>
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800cbd8:	e034      	b.n	800cc44 <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 800cbda:	f001 f983 	bl	800dee4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cbde:	68a0      	ldr	r0, [r4, #8]
 800cbe0:	f000 fdf6 	bl	800d7d0 <xTaskPriorityInherit>
 800cbe4:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 800cbe6:	f001 f99f 	bl	800df28 <vPortExitCritical>
 800cbea:	e03b      	b.n	800cc64 <xQueueSemaphoreTake+0x15a>
				prvUnlockQueue( pxQueue );
 800cbec:	4620      	mov	r0, r4
 800cbee:	f7ff fc17 	bl	800c420 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cbf2:	f000 fc1b 	bl	800d42c <xTaskResumeAll>
 800cbf6:	e009      	b.n	800cc0c <xQueueSemaphoreTake+0x102>
			prvUnlockQueue( pxQueue );
 800cbf8:	4620      	mov	r0, r4
 800cbfa:	f7ff fc11 	bl	800c420 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cbfe:	f000 fc15 	bl	800d42c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cc02:	4620      	mov	r0, r4
 800cc04:	f7ff fbb2 	bl	800c36c <prvIsQueueEmpty>
 800cc08:	2800      	cmp	r0, #0
 800cc0a:	d142      	bne.n	800cc92 <xQueueSemaphoreTake+0x188>
		taskENTER_CRITICAL();
 800cc0c:	f001 f96a 	bl	800dee4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cc10:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d1a6      	bne.n	800cb64 <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800cc16:	9b01      	ldr	r3, [sp, #4]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d0c4      	beq.n	800cba6 <xQueueSemaphoreTake+0x9c>
				else if( xEntryTimeSet == pdFALSE )
 800cc1c:	2d00      	cmp	r5, #0
 800cc1e:	d0cf      	beq.n	800cbc0 <xQueueSemaphoreTake+0xb6>
		taskEXIT_CRITICAL();
 800cc20:	f001 f982 	bl	800df28 <vPortExitCritical>
		vTaskSuspendAll();
 800cc24:	f000 fb68 	bl	800d2f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cc28:	f001 f95c 	bl	800dee4 <vPortEnterCritical>
 800cc2c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800cc30:	b25b      	sxtb	r3, r3
 800cc32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc36:	d0c8      	beq.n	800cbca <xQueueSemaphoreTake+0xc0>
 800cc38:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800cc3c:	b25b      	sxtb	r3, r3
 800cc3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc42:	d0c6      	beq.n	800cbd2 <xQueueSemaphoreTake+0xc8>
 800cc44:	f001 f970 	bl	800df28 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cc48:	a901      	add	r1, sp, #4
 800cc4a:	a802      	add	r0, sp, #8
 800cc4c:	f000 fd68 	bl	800d720 <xTaskCheckForTimeOut>
 800cc50:	2800      	cmp	r0, #0
 800cc52:	d1d1      	bne.n	800cbf8 <xQueueSemaphoreTake+0xee>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cc54:	4620      	mov	r0, r4
 800cc56:	f7ff fb89 	bl	800c36c <prvIsQueueEmpty>
 800cc5a:	2800      	cmp	r0, #0
 800cc5c:	d0c6      	beq.n	800cbec <xQueueSemaphoreTake+0xe2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cc5e:	6823      	ldr	r3, [r4, #0]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d0ba      	beq.n	800cbda <xQueueSemaphoreTake+0xd0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cc64:	9901      	ldr	r1, [sp, #4]
 800cc66:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800cc6a:	f000 fcd3 	bl	800d614 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cc6e:	4620      	mov	r0, r4
 800cc70:	f7ff fbd6 	bl	800c420 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cc74:	f000 fbda 	bl	800d42c <xTaskResumeAll>
 800cc78:	2800      	cmp	r0, #0
 800cc7a:	d1c7      	bne.n	800cc0c <xQueueSemaphoreTake+0x102>
					portYIELD_WITHIN_API();
 800cc7c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cc80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc84:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800cc88:	f3bf 8f4f 	dsb	sy
 800cc8c:	f3bf 8f6f 	isb	sy
 800cc90:	e7bc      	b.n	800cc0c <xQueueSemaphoreTake+0x102>
					if( xInheritanceOccurred != pdFALSE )
 800cc92:	b90e      	cbnz	r6, 800cc98 <xQueueSemaphoreTake+0x18e>
				return errQUEUE_EMPTY;
 800cc94:	2600      	movs	r6, #0
 800cc96:	e76e      	b.n	800cb76 <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 800cc98:	f001 f924 	bl	800dee4 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800cc9c:	4620      	mov	r0, r4
 800cc9e:	f7ff fb4e 	bl	800c33e <prvGetDisinheritPriorityAfterTimeout>
 800cca2:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800cca4:	68a0      	ldr	r0, [r4, #8]
 800cca6:	f000 fe27 	bl	800d8f8 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800ccaa:	f001 f93d 	bl	800df28 <vPortExitCritical>
 800ccae:	e7f1      	b.n	800cc94 <xQueueSemaphoreTake+0x18a>

0800ccb0 <xQueueReceiveFromISR>:
{
 800ccb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800ccb4:	b1b0      	cbz	r0, 800cce4 <xQueueReceiveFromISR+0x34>
 800ccb6:	460d      	mov	r5, r1
 800ccb8:	4690      	mov	r8, r2
 800ccba:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ccbc:	b1d9      	cbz	r1, 800ccf6 <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ccbe:	f001 fa37 	bl	800e130 <vPortValidateInterruptPriority>
	__asm volatile
 800ccc2:	f3ef 8711 	mrs	r7, BASEPRI
 800ccc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccca:	f383 8811 	msr	BASEPRI, r3
 800ccce:	f3bf 8f6f 	isb	sy
 800ccd2:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ccd6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ccd8:	b9ce      	cbnz	r6, 800cd0e <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 800ccda:	2000      	movs	r0, #0
	__asm volatile
 800ccdc:	f387 8811 	msr	BASEPRI, r7
}
 800cce0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 800cce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cce8:	f383 8811 	msr	BASEPRI, r3
 800ccec:	f3bf 8f6f 	isb	sy
 800ccf0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800ccf4:	e7fe      	b.n	800ccf4 <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ccf6:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d0e0      	beq.n	800ccbe <xQueueReceiveFromISR+0xe>
 800ccfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd00:	f383 8811 	msr	BASEPRI, r3
 800cd04:	f3bf 8f6f 	isb	sy
 800cd08:	f3bf 8f4f 	dsb	sy
 800cd0c:	e7fe      	b.n	800cd0c <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 800cd0e:	f894 9044 	ldrb.w	r9, [r4, #68]	@ 0x44
 800cd12:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cd16:	4629      	mov	r1, r5
 800cd18:	4620      	mov	r0, r4
 800cd1a:	f7ff fb6f 	bl	800c3fc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cd1e:	1e73      	subs	r3, r6, #1
 800cd20:	63a3      	str	r3, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 800cd22:	f1b9 3fff 	cmp.w	r9, #4294967295
 800cd26:	d006      	beq.n	800cd36 <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800cd28:	f109 0301 	add.w	r3, r9, #1
 800cd2c:	b25b      	sxtb	r3, r3
 800cd2e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
			xReturn = pdPASS;
 800cd32:	2001      	movs	r0, #1
 800cd34:	e7d2      	b.n	800ccdc <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd36:	6923      	ldr	r3, [r4, #16]
 800cd38:	b90b      	cbnz	r3, 800cd3e <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 800cd3a:	2001      	movs	r0, #1
 800cd3c:	e7ce      	b.n	800ccdc <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd3e:	f104 0010 	add.w	r0, r4, #16
 800cd42:	f000 fc9b 	bl	800d67c <xTaskRemoveFromEventList>
 800cd46:	b130      	cbz	r0, 800cd56 <xQueueReceiveFromISR+0xa6>
						if( pxHigherPriorityTaskWoken != NULL )
 800cd48:	f1b8 0f00 	cmp.w	r8, #0
 800cd4c:	d005      	beq.n	800cd5a <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800cd4e:	2001      	movs	r0, #1
 800cd50:	f8c8 0000 	str.w	r0, [r8]
 800cd54:	e7c2      	b.n	800ccdc <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 800cd56:	2001      	movs	r0, #1
 800cd58:	e7c0      	b.n	800ccdc <xQueueReceiveFromISR+0x2c>
 800cd5a:	2001      	movs	r0, #1
 800cd5c:	e7be      	b.n	800ccdc <xQueueReceiveFromISR+0x2c>
	...

0800cd60 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cd60:	2300      	movs	r3, #0
 800cd62:	2b07      	cmp	r3, #7
 800cd64:	d80c      	bhi.n	800cd80 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cd66:	4a07      	ldr	r2, [pc, #28]	@ (800cd84 <vQueueAddToRegistry+0x24>)
 800cd68:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800cd6c:	b10a      	cbz	r2, 800cd72 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cd6e:	3301      	adds	r3, #1
 800cd70:	e7f7      	b.n	800cd62 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cd72:	4a04      	ldr	r2, [pc, #16]	@ (800cd84 <vQueueAddToRegistry+0x24>)
 800cd74:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cd78:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800cd7c:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cd7e:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cd80:	4770      	bx	lr
 800cd82:	bf00      	nop
 800cd84:	24002f10 	.word	0x24002f10

0800cd88 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cd88:	2300      	movs	r3, #0
 800cd8a:	2b07      	cmp	r3, #7
 800cd8c:	d80f      	bhi.n	800cdae <vQueueUnregisterQueue+0x26>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800cd8e:	4a08      	ldr	r2, [pc, #32]	@ (800cdb0 <vQueueUnregisterQueue+0x28>)
 800cd90:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800cd94:	6852      	ldr	r2, [r2, #4]
 800cd96:	4282      	cmp	r2, r0
 800cd98:	d001      	beq.n	800cd9e <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cd9a:	3301      	adds	r3, #1
 800cd9c:	e7f5      	b.n	800cd8a <vQueueUnregisterQueue+0x2>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800cd9e:	4a04      	ldr	r2, [pc, #16]	@ (800cdb0 <vQueueUnregisterQueue+0x28>)
 800cda0:	2100      	movs	r1, #0
 800cda2:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800cda6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800cdaa:	6051      	str	r1, [r2, #4]
				break;
 800cdac:	4770      	bx	lr
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800cdae:	4770      	bx	lr
 800cdb0:	24002f10 	.word	0x24002f10

0800cdb4 <vQueueDelete>:
	configASSERT( pxQueue );
 800cdb4:	b138      	cbz	r0, 800cdc6 <vQueueDelete+0x12>
{
 800cdb6:	b510      	push	{r4, lr}
 800cdb8:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 800cdba:	f7ff ffe5 	bl	800cd88 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800cdbe:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800cdc2:	b14b      	cbz	r3, 800cdd8 <vQueueDelete+0x24>
}
 800cdc4:	bd10      	pop	{r4, pc}
 800cdc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdca:	f383 8811 	msr	BASEPRI, r3
 800cdce:	f3bf 8f6f 	isb	sy
 800cdd2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800cdd6:	e7fe      	b.n	800cdd6 <vQueueDelete+0x22>
			vPortFree( pxQueue );
 800cdd8:	4620      	mov	r0, r4
 800cdda:	f001 fabd 	bl	800e358 <vPortFree>
}
 800cdde:	e7f1      	b.n	800cdc4 <vQueueDelete+0x10>

0800cde0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cde0:	b570      	push	{r4, r5, r6, lr}
 800cde2:	4604      	mov	r4, r0
 800cde4:	460d      	mov	r5, r1
 800cde6:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cde8:	f001 f87c 	bl	800dee4 <vPortEnterCritical>
 800cdec:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800cdf0:	b25b      	sxtb	r3, r3
 800cdf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdf6:	d00d      	beq.n	800ce14 <vQueueWaitForMessageRestricted+0x34>
 800cdf8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800cdfc:	b25b      	sxtb	r3, r3
 800cdfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce02:	d00b      	beq.n	800ce1c <vQueueWaitForMessageRestricted+0x3c>
 800ce04:	f001 f890 	bl	800df28 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ce08:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800ce0a:	b15b      	cbz	r3, 800ce24 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ce0c:	4620      	mov	r0, r4
 800ce0e:	f7ff fb07 	bl	800c420 <prvUnlockQueue>
	}
 800ce12:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800ce14:	2300      	movs	r3, #0
 800ce16:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800ce1a:	e7ed      	b.n	800cdf8 <vQueueWaitForMessageRestricted+0x18>
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800ce22:	e7ef      	b.n	800ce04 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ce24:	4632      	mov	r2, r6
 800ce26:	4629      	mov	r1, r5
 800ce28:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800ce2c:	f000 fc0a 	bl	800d644 <vTaskPlaceOnEventListRestricted>
 800ce30:	e7ec      	b.n	800ce0c <vQueueWaitForMessageRestricted+0x2c>
	...

0800ce34 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ce34:	4b08      	ldr	r3, [pc, #32]	@ (800ce58 <prvResetNextTaskUnblockTime+0x24>)
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	b923      	cbnz	r3, 800ce46 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ce3c:	4b07      	ldr	r3, [pc, #28]	@ (800ce5c <prvResetNextTaskUnblockTime+0x28>)
 800ce3e:	f04f 32ff 	mov.w	r2, #4294967295
 800ce42:	601a      	str	r2, [r3, #0]
 800ce44:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce46:	4b04      	ldr	r3, [pc, #16]	@ (800ce58 <prvResetNextTaskUnblockTime+0x24>)
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	68db      	ldr	r3, [r3, #12]
 800ce4c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ce4e:	685a      	ldr	r2, [r3, #4]
 800ce50:	4b02      	ldr	r3, [pc, #8]	@ (800ce5c <prvResetNextTaskUnblockTime+0x28>)
 800ce52:	601a      	str	r2, [r3, #0]
	}
}
 800ce54:	4770      	bx	lr
 800ce56:	bf00      	nop
 800ce58:	24002fc0 	.word	0x24002fc0
 800ce5c:	24002f58 	.word	0x24002f58

0800ce60 <prvInitialiseNewTask>:
{
 800ce60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce64:	4680      	mov	r8, r0
 800ce66:	460d      	mov	r5, r1
 800ce68:	4617      	mov	r7, r2
 800ce6a:	4699      	mov	r9, r3
 800ce6c:	9e08      	ldr	r6, [sp, #32]
 800ce6e:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 800ce72:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ce74:	0092      	lsls	r2, r2, #2
 800ce76:	21a5      	movs	r1, #165	@ 0xa5
 800ce78:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800ce7a:	f00c fe75 	bl	8019b68 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ce7e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ce80:	f06f 4240 	mvn.w	r2, #3221225472	@ 0xc0000000
 800ce84:	443a      	add	r2, r7
 800ce86:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ce8a:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 800ce8e:	2d00      	cmp	r5, #0
 800ce90:	d042      	beq.n	800cf18 <prvInitialiseNewTask+0xb8>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ce92:	f04f 0c00 	mov.w	ip, #0
 800ce96:	f1bc 0f0f 	cmp.w	ip, #15
 800ce9a:	d809      	bhi.n	800ceb0 <prvInitialiseNewTask+0x50>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ce9c:	f815 300c 	ldrb.w	r3, [r5, ip]
 800cea0:	eb04 020c 	add.w	r2, r4, ip
 800cea4:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 800cea8:	b113      	cbz	r3, 800ceb0 <prvInitialiseNewTask+0x50>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ceaa:	f10c 0c01 	add.w	ip, ip, #1
 800ceae:	e7f2      	b.n	800ce96 <prvInitialiseNewTask+0x36>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ceb6:	2e37      	cmp	r6, #55	@ 0x37
 800ceb8:	d900      	bls.n	800cebc <prvInitialiseNewTask+0x5c>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ceba:	2637      	movs	r6, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 800cebc:	62e6      	str	r6, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800cebe:	64e6      	str	r6, [r4, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cec0:	2500      	movs	r5, #0
 800cec2:	6525      	str	r5, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cec4:	1d20      	adds	r0, r4, #4
 800cec6:	f7ff fa00 	bl	800c2ca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ceca:	f104 0018 	add.w	r0, r4, #24
 800cece:	f7ff f9fc 	bl	800c2ca <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ced2:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ced4:	f1c6 0638 	rsb	r6, r6, #56	@ 0x38
 800ced8:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ceda:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800cedc:	f8c4 50a0 	str.w	r5, [r4, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cee0:	f884 50a4 	strb.w	r5, [r4, #164]	@ 0xa4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cee4:	224c      	movs	r2, #76	@ 0x4c
 800cee6:	4629      	mov	r1, r5
 800cee8:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 800ceec:	f00c fe3c 	bl	8019b68 <memset>
 800cef0:	4b0b      	ldr	r3, [pc, #44]	@ (800cf20 <prvInitialiseNewTask+0xc0>)
 800cef2:	65a3      	str	r3, [r4, #88]	@ 0x58
 800cef4:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cef8:	65e2      	str	r2, [r4, #92]	@ 0x5c
 800cefa:	33d0      	adds	r3, #208	@ 0xd0
 800cefc:	6623      	str	r3, [r4, #96]	@ 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cefe:	464a      	mov	r2, r9
 800cf00:	4641      	mov	r1, r8
 800cf02:	4638      	mov	r0, r7
 800cf04:	f000 ffc4 	bl	800de90 <pxPortInitialiseStack>
 800cf08:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800cf0a:	f1ba 0f00 	cmp.w	sl, #0
 800cf0e:	d001      	beq.n	800cf14 <prvInitialiseNewTask+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cf10:	f8ca 4000 	str.w	r4, [sl]
}
 800cf14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cf18:	2300      	movs	r3, #0
 800cf1a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 800cf1e:	e7ca      	b.n	800ceb6 <prvInitialiseNewTask+0x56>
 800cf20:	24009460 	.word	0x24009460

0800cf24 <prvInitialiseTaskLists>:
{
 800cf24:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cf26:	2400      	movs	r4, #0
 800cf28:	e007      	b.n	800cf3a <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cf2a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800cf2e:	0093      	lsls	r3, r2, #2
 800cf30:	480e      	ldr	r0, [pc, #56]	@ (800cf6c <prvInitialiseTaskLists+0x48>)
 800cf32:	4418      	add	r0, r3
 800cf34:	f7ff f9be 	bl	800c2b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cf38:	3401      	adds	r4, #1
 800cf3a:	2c37      	cmp	r4, #55	@ 0x37
 800cf3c:	d9f5      	bls.n	800cf2a <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800cf3e:	4d0c      	ldr	r5, [pc, #48]	@ (800cf70 <prvInitialiseTaskLists+0x4c>)
 800cf40:	4628      	mov	r0, r5
 800cf42:	f7ff f9b7 	bl	800c2b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cf46:	4c0b      	ldr	r4, [pc, #44]	@ (800cf74 <prvInitialiseTaskLists+0x50>)
 800cf48:	4620      	mov	r0, r4
 800cf4a:	f7ff f9b3 	bl	800c2b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cf4e:	480a      	ldr	r0, [pc, #40]	@ (800cf78 <prvInitialiseTaskLists+0x54>)
 800cf50:	f7ff f9b0 	bl	800c2b4 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800cf54:	4809      	ldr	r0, [pc, #36]	@ (800cf7c <prvInitialiseTaskLists+0x58>)
 800cf56:	f7ff f9ad 	bl	800c2b4 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800cf5a:	4809      	ldr	r0, [pc, #36]	@ (800cf80 <prvInitialiseTaskLists+0x5c>)
 800cf5c:	f7ff f9aa 	bl	800c2b4 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800cf60:	4b08      	ldr	r3, [pc, #32]	@ (800cf84 <prvInitialiseTaskLists+0x60>)
 800cf62:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cf64:	4b08      	ldr	r3, [pc, #32]	@ (800cf88 <prvInitialiseTaskLists+0x64>)
 800cf66:	601c      	str	r4, [r3, #0]
}
 800cf68:	bd38      	pop	{r3, r4, r5, pc}
 800cf6a:	bf00      	nop
 800cf6c:	24002fec 	.word	0x24002fec
 800cf70:	24002fd8 	.word	0x24002fd8
 800cf74:	24002fc4 	.word	0x24002fc4
 800cf78:	24002fa8 	.word	0x24002fa8
 800cf7c:	24002f94 	.word	0x24002f94
 800cf80:	24002f7c 	.word	0x24002f7c
 800cf84:	24002fc0 	.word	0x24002fc0
 800cf88:	24002fbc 	.word	0x24002fbc

0800cf8c <prvAddNewTaskToReadyList>:
{
 800cf8c:	b510      	push	{r4, lr}
 800cf8e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800cf90:	f000 ffa8 	bl	800dee4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800cf94:	4a22      	ldr	r2, [pc, #136]	@ (800d020 <prvAddNewTaskToReadyList+0x94>)
 800cf96:	6813      	ldr	r3, [r2, #0]
 800cf98:	3301      	adds	r3, #1
 800cf9a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cf9c:	4b21      	ldr	r3, [pc, #132]	@ (800d024 <prvAddNewTaskToReadyList+0x98>)
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	b15b      	cbz	r3, 800cfba <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 800cfa2:	4b21      	ldr	r3, [pc, #132]	@ (800d028 <prvAddNewTaskToReadyList+0x9c>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	b96b      	cbnz	r3, 800cfc4 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cfa8:	4b1e      	ldr	r3, [pc, #120]	@ (800d024 <prvAddNewTaskToReadyList+0x98>)
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfae:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800cfb0:	429a      	cmp	r2, r3
 800cfb2:	d807      	bhi.n	800cfc4 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 800cfb4:	4b1b      	ldr	r3, [pc, #108]	@ (800d024 <prvAddNewTaskToReadyList+0x98>)
 800cfb6:	601c      	str	r4, [r3, #0]
 800cfb8:	e004      	b.n	800cfc4 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 800cfba:	4b1a      	ldr	r3, [pc, #104]	@ (800d024 <prvAddNewTaskToReadyList+0x98>)
 800cfbc:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cfbe:	6813      	ldr	r3, [r2, #0]
 800cfc0:	2b01      	cmp	r3, #1
 800cfc2:	d029      	beq.n	800d018 <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 800cfc4:	4a19      	ldr	r2, [pc, #100]	@ (800d02c <prvAddNewTaskToReadyList+0xa0>)
 800cfc6:	6813      	ldr	r3, [r2, #0]
 800cfc8:	3301      	adds	r3, #1
 800cfca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cfcc:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800cfce:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800cfd0:	4b17      	ldr	r3, [pc, #92]	@ (800d030 <prvAddNewTaskToReadyList+0xa4>)
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	4298      	cmp	r0, r3
 800cfd6:	d901      	bls.n	800cfdc <prvAddNewTaskToReadyList+0x50>
 800cfd8:	4b15      	ldr	r3, [pc, #84]	@ (800d030 <prvAddNewTaskToReadyList+0xa4>)
 800cfda:	6018      	str	r0, [r3, #0]
 800cfdc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800cfe0:	1d21      	adds	r1, r4, #4
 800cfe2:	4b14      	ldr	r3, [pc, #80]	@ (800d034 <prvAddNewTaskToReadyList+0xa8>)
 800cfe4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cfe8:	f7ff f972 	bl	800c2d0 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800cfec:	f000 ff9c 	bl	800df28 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800cff0:	4b0d      	ldr	r3, [pc, #52]	@ (800d028 <prvAddNewTaskToReadyList+0x9c>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	b17b      	cbz	r3, 800d016 <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cff6:	4b0b      	ldr	r3, [pc, #44]	@ (800d024 <prvAddNewTaskToReadyList+0x98>)
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cffc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800cffe:	429a      	cmp	r2, r3
 800d000:	d209      	bcs.n	800d016 <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 800d002:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d006:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d00a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d00e:	f3bf 8f4f 	dsb	sy
 800d012:	f3bf 8f6f 	isb	sy
}
 800d016:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 800d018:	f7ff ff84 	bl	800cf24 <prvInitialiseTaskLists>
 800d01c:	e7d2      	b.n	800cfc4 <prvAddNewTaskToReadyList+0x38>
 800d01e:	bf00      	nop
 800d020:	24002f78 	.word	0x24002f78
 800d024:	2400344c 	.word	0x2400344c
 800d028:	24002f6c 	.word	0x24002f6c
 800d02c:	24002f5c 	.word	0x24002f5c
 800d030:	24002f70 	.word	0x24002f70
 800d034:	24002fec 	.word	0x24002fec

0800d038 <prvDeleteTCB>:
	{
 800d038:	b510      	push	{r4, lr}
 800d03a:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d03c:	3054      	adds	r0, #84	@ 0x54
 800d03e:	f00c fdcb 	bl	8019bd8 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d042:	f894 30a5 	ldrb.w	r3, [r4, #165]	@ 0xa5
 800d046:	b163      	cbz	r3, 800d062 <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d048:	2b01      	cmp	r3, #1
 800d04a:	d011      	beq.n	800d070 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d04c:	2b02      	cmp	r3, #2
 800d04e:	d00e      	beq.n	800d06e <prvDeleteTCB+0x36>
 800d050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d054:	f383 8811 	msr	BASEPRI, r3
 800d058:	f3bf 8f6f 	isb	sy
 800d05c:	f3bf 8f4f 	dsb	sy
 800d060:	e7fe      	b.n	800d060 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 800d062:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800d064:	f001 f978 	bl	800e358 <vPortFree>
				vPortFree( pxTCB );
 800d068:	4620      	mov	r0, r4
 800d06a:	f001 f975 	bl	800e358 <vPortFree>
	}
 800d06e:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 800d070:	4620      	mov	r0, r4
 800d072:	f001 f971 	bl	800e358 <vPortFree>
 800d076:	e7fa      	b.n	800d06e <prvDeleteTCB+0x36>

0800d078 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d078:	4b0f      	ldr	r3, [pc, #60]	@ (800d0b8 <prvCheckTasksWaitingTermination+0x40>)
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	b1d3      	cbz	r3, 800d0b4 <prvCheckTasksWaitingTermination+0x3c>
{
 800d07e:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 800d080:	f000 ff30 	bl	800dee4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d084:	4b0d      	ldr	r3, [pc, #52]	@ (800d0bc <prvCheckTasksWaitingTermination+0x44>)
 800d086:	68db      	ldr	r3, [r3, #12]
 800d088:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d08a:	1d20      	adds	r0, r4, #4
 800d08c:	f7ff f944 	bl	800c318 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d090:	4a0b      	ldr	r2, [pc, #44]	@ (800d0c0 <prvCheckTasksWaitingTermination+0x48>)
 800d092:	6813      	ldr	r3, [r2, #0]
 800d094:	3b01      	subs	r3, #1
 800d096:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d098:	4a07      	ldr	r2, [pc, #28]	@ (800d0b8 <prvCheckTasksWaitingTermination+0x40>)
 800d09a:	6813      	ldr	r3, [r2, #0]
 800d09c:	3b01      	subs	r3, #1
 800d09e:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 800d0a0:	f000 ff42 	bl	800df28 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800d0a4:	4620      	mov	r0, r4
 800d0a6:	f7ff ffc7 	bl	800d038 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d0aa:	4b03      	ldr	r3, [pc, #12]	@ (800d0b8 <prvCheckTasksWaitingTermination+0x40>)
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d1e6      	bne.n	800d080 <prvCheckTasksWaitingTermination+0x8>
}
 800d0b2:	bd10      	pop	{r4, pc}
 800d0b4:	4770      	bx	lr
 800d0b6:	bf00      	nop
 800d0b8:	24002f90 	.word	0x24002f90
 800d0bc:	24002f94 	.word	0x24002f94
 800d0c0:	24002f78 	.word	0x24002f78

0800d0c4 <prvIdleTask>:
{
 800d0c4:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 800d0c6:	f7ff ffd7 	bl	800d078 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d0ca:	4b07      	ldr	r3, [pc, #28]	@ (800d0e8 <prvIdleTask+0x24>)
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	2b01      	cmp	r3, #1
 800d0d0:	d9f9      	bls.n	800d0c6 <prvIdleTask+0x2>
				taskYIELD();
 800d0d2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d0d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d0da:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d0de:	f3bf 8f4f 	dsb	sy
 800d0e2:	f3bf 8f6f 	isb	sy
 800d0e6:	e7ee      	b.n	800d0c6 <prvIdleTask+0x2>
 800d0e8:	24002fec 	.word	0x24002fec

0800d0ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d0ec:	b570      	push	{r4, r5, r6, lr}
 800d0ee:	4604      	mov	r4, r0
 800d0f0:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d0f2:	4b19      	ldr	r3, [pc, #100]	@ (800d158 <prvAddCurrentTaskToDelayedList+0x6c>)
 800d0f4:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d0f6:	4b19      	ldr	r3, [pc, #100]	@ (800d15c <prvAddCurrentTaskToDelayedList+0x70>)
 800d0f8:	6818      	ldr	r0, [r3, #0]
 800d0fa:	3004      	adds	r0, #4
 800d0fc:	f7ff f90c 	bl	800c318 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d100:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d104:	bf14      	ite	ne
 800d106:	2300      	movne	r3, #0
 800d108:	2301      	moveq	r3, #1
 800d10a:	2d00      	cmp	r5, #0
 800d10c:	bf08      	it	eq
 800d10e:	2300      	moveq	r3, #0
 800d110:	b96b      	cbnz	r3, 800d12e <prvAddCurrentTaskToDelayedList+0x42>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d112:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d114:	4b11      	ldr	r3, [pc, #68]	@ (800d15c <prvAddCurrentTaskToDelayedList+0x70>)
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800d11a:	42a6      	cmp	r6, r4
 800d11c:	d90e      	bls.n	800d13c <prvAddCurrentTaskToDelayedList+0x50>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d11e:	4b10      	ldr	r3, [pc, #64]	@ (800d160 <prvAddCurrentTaskToDelayedList+0x74>)
 800d120:	6818      	ldr	r0, [r3, #0]
 800d122:	4b0e      	ldr	r3, [pc, #56]	@ (800d15c <prvAddCurrentTaskToDelayedList+0x70>)
 800d124:	6819      	ldr	r1, [r3, #0]
 800d126:	3104      	adds	r1, #4
 800d128:	f7ff f8dd 	bl	800c2e6 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d12c:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d12e:	4b0b      	ldr	r3, [pc, #44]	@ (800d15c <prvAddCurrentTaskToDelayedList+0x70>)
 800d130:	6819      	ldr	r1, [r3, #0]
 800d132:	3104      	adds	r1, #4
 800d134:	480b      	ldr	r0, [pc, #44]	@ (800d164 <prvAddCurrentTaskToDelayedList+0x78>)
 800d136:	f7ff f8cb 	bl	800c2d0 <vListInsertEnd>
 800d13a:	e7f7      	b.n	800d12c <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d13c:	4b0a      	ldr	r3, [pc, #40]	@ (800d168 <prvAddCurrentTaskToDelayedList+0x7c>)
 800d13e:	6818      	ldr	r0, [r3, #0]
 800d140:	4b06      	ldr	r3, [pc, #24]	@ (800d15c <prvAddCurrentTaskToDelayedList+0x70>)
 800d142:	6819      	ldr	r1, [r3, #0]
 800d144:	3104      	adds	r1, #4
 800d146:	f7ff f8ce 	bl	800c2e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d14a:	4b08      	ldr	r3, [pc, #32]	@ (800d16c <prvAddCurrentTaskToDelayedList+0x80>)
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	42a3      	cmp	r3, r4
 800d150:	d9ec      	bls.n	800d12c <prvAddCurrentTaskToDelayedList+0x40>
					xNextTaskUnblockTime = xTimeToWake;
 800d152:	4b06      	ldr	r3, [pc, #24]	@ (800d16c <prvAddCurrentTaskToDelayedList+0x80>)
 800d154:	601c      	str	r4, [r3, #0]
}
 800d156:	e7e9      	b.n	800d12c <prvAddCurrentTaskToDelayedList+0x40>
 800d158:	24002f74 	.word	0x24002f74
 800d15c:	2400344c 	.word	0x2400344c
 800d160:	24002fbc 	.word	0x24002fbc
 800d164:	24002f7c 	.word	0x24002f7c
 800d168:	24002fc0 	.word	0x24002fc0
 800d16c:	24002f58 	.word	0x24002f58

0800d170 <xTaskCreateStatic>:
	{
 800d170:	b530      	push	{r4, r5, lr}
 800d172:	b087      	sub	sp, #28
 800d174:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 800d176:	b17c      	cbz	r4, 800d198 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d178:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800d17a:	b1b5      	cbz	r5, 800d1aa <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 800d17c:	25a8      	movs	r5, #168	@ 0xa8
 800d17e:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d180:	9d04      	ldr	r5, [sp, #16]
 800d182:	2da8      	cmp	r5, #168	@ 0xa8
 800d184:	d01a      	beq.n	800d1bc <xTaskCreateStatic+0x4c>
 800d186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d18a:	f383 8811 	msr	BASEPRI, r3
 800d18e:	f3bf 8f6f 	isb	sy
 800d192:	f3bf 8f4f 	dsb	sy
 800d196:	e7fe      	b.n	800d196 <xTaskCreateStatic+0x26>
 800d198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d19c:	f383 8811 	msr	BASEPRI, r3
 800d1a0:	f3bf 8f6f 	isb	sy
 800d1a4:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 800d1a8:	e7fe      	b.n	800d1a8 <xTaskCreateStatic+0x38>
 800d1aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1ae:	f383 8811 	msr	BASEPRI, r3
 800d1b2:	f3bf 8f6f 	isb	sy
 800d1b6:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800d1ba:	e7fe      	b.n	800d1ba <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d1bc:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d1be:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800d1c0:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d1c2:	2402      	movs	r4, #2
 800d1c4:	f885 40a5 	strb.w	r4, [r5, #165]	@ 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d1c8:	2400      	movs	r4, #0
 800d1ca:	9403      	str	r4, [sp, #12]
 800d1cc:	9502      	str	r5, [sp, #8]
 800d1ce:	ac05      	add	r4, sp, #20
 800d1d0:	9401      	str	r4, [sp, #4]
 800d1d2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d1d4:	9400      	str	r4, [sp, #0]
 800d1d6:	f7ff fe43 	bl	800ce60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d1da:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800d1dc:	f7ff fed6 	bl	800cf8c <prvAddNewTaskToReadyList>
	}
 800d1e0:	9805      	ldr	r0, [sp, #20]
 800d1e2:	b007      	add	sp, #28
 800d1e4:	bd30      	pop	{r4, r5, pc}

0800d1e6 <xTaskCreate>:
	{
 800d1e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d1ea:	b085      	sub	sp, #20
 800d1ec:	4607      	mov	r7, r0
 800d1ee:	4688      	mov	r8, r1
 800d1f0:	4614      	mov	r4, r2
 800d1f2:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d1f4:	0090      	lsls	r0, r2, #2
 800d1f6:	f001 f82d 	bl	800e254 <pvPortMalloc>
			if( pxStack != NULL )
 800d1fa:	b308      	cbz	r0, 800d240 <xTaskCreate+0x5a>
 800d1fc:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d1fe:	20a8      	movs	r0, #168	@ 0xa8
 800d200:	f001 f828 	bl	800e254 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800d204:	4605      	mov	r5, r0
 800d206:	b1a8      	cbz	r0, 800d234 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 800d208:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d20c:	2300      	movs	r3, #0
 800d20e:	f880 30a5 	strb.w	r3, [r0, #165]	@ 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d212:	9303      	str	r3, [sp, #12]
 800d214:	9002      	str	r0, [sp, #8]
 800d216:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d218:	9301      	str	r3, [sp, #4]
 800d21a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d21c:	9300      	str	r3, [sp, #0]
 800d21e:	4633      	mov	r3, r6
 800d220:	4622      	mov	r2, r4
 800d222:	4641      	mov	r1, r8
 800d224:	4638      	mov	r0, r7
 800d226:	f7ff fe1b 	bl	800ce60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d22a:	4628      	mov	r0, r5
 800d22c:	f7ff feae 	bl	800cf8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d230:	2001      	movs	r0, #1
 800d232:	e007      	b.n	800d244 <xTaskCreate+0x5e>
					vPortFree( pxStack );
 800d234:	4648      	mov	r0, r9
 800d236:	f001 f88f 	bl	800e358 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d23a:	f04f 30ff 	mov.w	r0, #4294967295
 800d23e:	e001      	b.n	800d244 <xTaskCreate+0x5e>
 800d240:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800d244:	b005      	add	sp, #20
 800d246:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800d24c <vTaskStartScheduler>:
{
 800d24c:	b510      	push	{r4, lr}
 800d24e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d250:	2400      	movs	r4, #0
 800d252:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d254:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d256:	aa07      	add	r2, sp, #28
 800d258:	a906      	add	r1, sp, #24
 800d25a:	a805      	add	r0, sp, #20
 800d25c:	f7ff f812 	bl	800c284 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d260:	9b05      	ldr	r3, [sp, #20]
 800d262:	9302      	str	r3, [sp, #8]
 800d264:	9b06      	ldr	r3, [sp, #24]
 800d266:	9301      	str	r3, [sp, #4]
 800d268:	9400      	str	r4, [sp, #0]
 800d26a:	4623      	mov	r3, r4
 800d26c:	9a07      	ldr	r2, [sp, #28]
 800d26e:	491a      	ldr	r1, [pc, #104]	@ (800d2d8 <vTaskStartScheduler+0x8c>)
 800d270:	481a      	ldr	r0, [pc, #104]	@ (800d2dc <vTaskStartScheduler+0x90>)
 800d272:	f7ff ff7d 	bl	800d170 <xTaskCreateStatic>
 800d276:	4b1a      	ldr	r3, [pc, #104]	@ (800d2e0 <vTaskStartScheduler+0x94>)
 800d278:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 800d27a:	b1e8      	cbz	r0, 800d2b8 <vTaskStartScheduler+0x6c>
			xReturn = xTimerCreateTimerTask();
 800d27c:	f000 fc0a 	bl	800da94 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800d280:	2801      	cmp	r0, #1
 800d282:	d11a      	bne.n	800d2ba <vTaskStartScheduler+0x6e>
 800d284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d288:	f383 8811 	msr	BASEPRI, r3
 800d28c:	f3bf 8f6f 	isb	sy
 800d290:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d294:	4b13      	ldr	r3, [pc, #76]	@ (800d2e4 <vTaskStartScheduler+0x98>)
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	3354      	adds	r3, #84	@ 0x54
 800d29a:	4a13      	ldr	r2, [pc, #76]	@ (800d2e8 <vTaskStartScheduler+0x9c>)
 800d29c:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800d29e:	4b13      	ldr	r3, [pc, #76]	@ (800d2ec <vTaskStartScheduler+0xa0>)
 800d2a0:	f04f 32ff 	mov.w	r2, #4294967295
 800d2a4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d2a6:	4b12      	ldr	r3, [pc, #72]	@ (800d2f0 <vTaskStartScheduler+0xa4>)
 800d2a8:	2201      	movs	r2, #1
 800d2aa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d2ac:	4b11      	ldr	r3, [pc, #68]	@ (800d2f4 <vTaskStartScheduler+0xa8>)
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800d2b2:	f000 feb1 	bl	800e018 <xPortStartScheduler>
 800d2b6:	e003      	b.n	800d2c0 <vTaskStartScheduler+0x74>
			xReturn = pdFAIL;
 800d2b8:	2000      	movs	r0, #0
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d2ba:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d2be:	d001      	beq.n	800d2c4 <vTaskStartScheduler+0x78>
}
 800d2c0:	b008      	add	sp, #32
 800d2c2:	bd10      	pop	{r4, pc}
 800d2c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2c8:	f383 8811 	msr	BASEPRI, r3
 800d2cc:	f3bf 8f6f 	isb	sy
 800d2d0:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d2d4:	e7fe      	b.n	800d2d4 <vTaskStartScheduler+0x88>
 800d2d6:	bf00      	nop
 800d2d8:	0801a068 	.word	0x0801a068
 800d2dc:	0800d0c5 	.word	0x0800d0c5
 800d2e0:	24002f54 	.word	0x24002f54
 800d2e4:	2400344c 	.word	0x2400344c
 800d2e8:	2400002c 	.word	0x2400002c
 800d2ec:	24002f58 	.word	0x24002f58
 800d2f0:	24002f6c 	.word	0x24002f6c
 800d2f4:	24002f74 	.word	0x24002f74

0800d2f8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800d2f8:	4a02      	ldr	r2, [pc, #8]	@ (800d304 <vTaskSuspendAll+0xc>)
 800d2fa:	6813      	ldr	r3, [r2, #0]
 800d2fc:	3301      	adds	r3, #1
 800d2fe:	6013      	str	r3, [r2, #0]
}
 800d300:	4770      	bx	lr
 800d302:	bf00      	nop
 800d304:	24002f50 	.word	0x24002f50

0800d308 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800d308:	4b01      	ldr	r3, [pc, #4]	@ (800d310 <xTaskGetTickCount+0x8>)
 800d30a:	6818      	ldr	r0, [r3, #0]
}
 800d30c:	4770      	bx	lr
 800d30e:	bf00      	nop
 800d310:	24002f74 	.word	0x24002f74

0800d314 <xTaskIncrementTick>:
{
 800d314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d316:	4b3a      	ldr	r3, [pc, #232]	@ (800d400 <xTaskIncrementTick+0xec>)
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d169      	bne.n	800d3f2 <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d31e:	4b39      	ldr	r3, [pc, #228]	@ (800d404 <xTaskIncrementTick+0xf0>)
 800d320:	681d      	ldr	r5, [r3, #0]
 800d322:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800d324:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d326:	b9c5      	cbnz	r5, 800d35a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800d328:	4b37      	ldr	r3, [pc, #220]	@ (800d408 <xTaskIncrementTick+0xf4>)
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	b143      	cbz	r3, 800d342 <xTaskIncrementTick+0x2e>
 800d330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d334:	f383 8811 	msr	BASEPRI, r3
 800d338:	f3bf 8f6f 	isb	sy
 800d33c:	f3bf 8f4f 	dsb	sy
 800d340:	e7fe      	b.n	800d340 <xTaskIncrementTick+0x2c>
 800d342:	4a31      	ldr	r2, [pc, #196]	@ (800d408 <xTaskIncrementTick+0xf4>)
 800d344:	6811      	ldr	r1, [r2, #0]
 800d346:	4b31      	ldr	r3, [pc, #196]	@ (800d40c <xTaskIncrementTick+0xf8>)
 800d348:	6818      	ldr	r0, [r3, #0]
 800d34a:	6010      	str	r0, [r2, #0]
 800d34c:	6019      	str	r1, [r3, #0]
 800d34e:	4a30      	ldr	r2, [pc, #192]	@ (800d410 <xTaskIncrementTick+0xfc>)
 800d350:	6813      	ldr	r3, [r2, #0]
 800d352:	3301      	adds	r3, #1
 800d354:	6013      	str	r3, [r2, #0]
 800d356:	f7ff fd6d 	bl	800ce34 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d35a:	4b2e      	ldr	r3, [pc, #184]	@ (800d414 <xTaskIncrementTick+0x100>)
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	42ab      	cmp	r3, r5
 800d360:	d93d      	bls.n	800d3de <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 800d362:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d364:	4b2c      	ldr	r3, [pc, #176]	@ (800d418 <xTaskIncrementTick+0x104>)
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d36a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d36e:	009a      	lsls	r2, r3, #2
 800d370:	4b2a      	ldr	r3, [pc, #168]	@ (800d41c <xTaskIncrementTick+0x108>)
 800d372:	589b      	ldr	r3, [r3, r2]
 800d374:	2b01      	cmp	r3, #1
 800d376:	d900      	bls.n	800d37a <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 800d378:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 800d37a:	4b29      	ldr	r3, [pc, #164]	@ (800d420 <xTaskIncrementTick+0x10c>)
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d03c      	beq.n	800d3fc <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 800d382:	2701      	movs	r7, #1
	return xSwitchRequired;
 800d384:	e03a      	b.n	800d3fc <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 800d386:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d388:	4b1f      	ldr	r3, [pc, #124]	@ (800d408 <xTaskIncrementTick+0xf4>)
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	b343      	cbz	r3, 800d3e2 <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d390:	4b1d      	ldr	r3, [pc, #116]	@ (800d408 <xTaskIncrementTick+0xf4>)
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	68db      	ldr	r3, [r3, #12]
 800d396:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d398:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 800d39a:	429d      	cmp	r5, r3
 800d39c:	d326      	bcc.n	800d3ec <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d39e:	1d26      	adds	r6, r4, #4
 800d3a0:	4630      	mov	r0, r6
 800d3a2:	f7fe ffb9 	bl	800c318 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d3a6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800d3a8:	b11b      	cbz	r3, 800d3b2 <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d3aa:	f104 0018 	add.w	r0, r4, #24
 800d3ae:	f7fe ffb3 	bl	800c318 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d3b2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800d3b4:	4a1b      	ldr	r2, [pc, #108]	@ (800d424 <xTaskIncrementTick+0x110>)
 800d3b6:	6812      	ldr	r2, [r2, #0]
 800d3b8:	4293      	cmp	r3, r2
 800d3ba:	d901      	bls.n	800d3c0 <xTaskIncrementTick+0xac>
 800d3bc:	4a19      	ldr	r2, [pc, #100]	@ (800d424 <xTaskIncrementTick+0x110>)
 800d3be:	6013      	str	r3, [r2, #0]
 800d3c0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d3c4:	009a      	lsls	r2, r3, #2
 800d3c6:	4631      	mov	r1, r6
 800d3c8:	4814      	ldr	r0, [pc, #80]	@ (800d41c <xTaskIncrementTick+0x108>)
 800d3ca:	4410      	add	r0, r2
 800d3cc:	f7fe ff80 	bl	800c2d0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d3d0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d3d2:	4b11      	ldr	r3, [pc, #68]	@ (800d418 <xTaskIncrementTick+0x104>)
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3d8:	429a      	cmp	r2, r3
 800d3da:	d2d4      	bcs.n	800d386 <xTaskIncrementTick+0x72>
 800d3dc:	e7d4      	b.n	800d388 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 800d3de:	2700      	movs	r7, #0
 800d3e0:	e7d2      	b.n	800d388 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d3e2:	4b0c      	ldr	r3, [pc, #48]	@ (800d414 <xTaskIncrementTick+0x100>)
 800d3e4:	f04f 32ff 	mov.w	r2, #4294967295
 800d3e8:	601a      	str	r2, [r3, #0]
					break;
 800d3ea:	e7bb      	b.n	800d364 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 800d3ec:	4a09      	ldr	r2, [pc, #36]	@ (800d414 <xTaskIncrementTick+0x100>)
 800d3ee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d3f0:	e7b8      	b.n	800d364 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 800d3f2:	4a0d      	ldr	r2, [pc, #52]	@ (800d428 <xTaskIncrementTick+0x114>)
 800d3f4:	6813      	ldr	r3, [r2, #0]
 800d3f6:	3301      	adds	r3, #1
 800d3f8:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800d3fa:	2700      	movs	r7, #0
}
 800d3fc:	4638      	mov	r0, r7
 800d3fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d400:	24002f50 	.word	0x24002f50
 800d404:	24002f74 	.word	0x24002f74
 800d408:	24002fc0 	.word	0x24002fc0
 800d40c:	24002fbc 	.word	0x24002fbc
 800d410:	24002f60 	.word	0x24002f60
 800d414:	24002f58 	.word	0x24002f58
 800d418:	2400344c 	.word	0x2400344c
 800d41c:	24002fec 	.word	0x24002fec
 800d420:	24002f64 	.word	0x24002f64
 800d424:	24002f70 	.word	0x24002f70
 800d428:	24002f68 	.word	0x24002f68

0800d42c <xTaskResumeAll>:
{
 800d42c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 800d42e:	4b35      	ldr	r3, [pc, #212]	@ (800d504 <xTaskResumeAll+0xd8>)
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	b943      	cbnz	r3, 800d446 <xTaskResumeAll+0x1a>
 800d434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d438:	f383 8811 	msr	BASEPRI, r3
 800d43c:	f3bf 8f6f 	isb	sy
 800d440:	f3bf 8f4f 	dsb	sy
 800d444:	e7fe      	b.n	800d444 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800d446:	f000 fd4d 	bl	800dee4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800d44a:	4b2e      	ldr	r3, [pc, #184]	@ (800d504 <xTaskResumeAll+0xd8>)
 800d44c:	681a      	ldr	r2, [r3, #0]
 800d44e:	3a01      	subs	r2, #1
 800d450:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d14f      	bne.n	800d4f8 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d458:	4b2b      	ldr	r3, [pc, #172]	@ (800d508 <xTaskResumeAll+0xdc>)
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	b90b      	cbnz	r3, 800d462 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800d45e:	2400      	movs	r4, #0
 800d460:	e04b      	b.n	800d4fa <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 800d462:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d464:	4b29      	ldr	r3, [pc, #164]	@ (800d50c <xTaskResumeAll+0xe0>)
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	b31b      	cbz	r3, 800d4b2 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d46a:	4b28      	ldr	r3, [pc, #160]	@ (800d50c <xTaskResumeAll+0xe0>)
 800d46c:	68db      	ldr	r3, [r3, #12]
 800d46e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d470:	f104 0018 	add.w	r0, r4, #24
 800d474:	f7fe ff50 	bl	800c318 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d478:	1d25      	adds	r5, r4, #4
 800d47a:	4628      	mov	r0, r5
 800d47c:	f7fe ff4c 	bl	800c318 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d480:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800d482:	4b23      	ldr	r3, [pc, #140]	@ (800d510 <xTaskResumeAll+0xe4>)
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	4298      	cmp	r0, r3
 800d488:	d901      	bls.n	800d48e <xTaskResumeAll+0x62>
 800d48a:	4b21      	ldr	r3, [pc, #132]	@ (800d510 <xTaskResumeAll+0xe4>)
 800d48c:	6018      	str	r0, [r3, #0]
 800d48e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d492:	4629      	mov	r1, r5
 800d494:	4b1f      	ldr	r3, [pc, #124]	@ (800d514 <xTaskResumeAll+0xe8>)
 800d496:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d49a:	f7fe ff19 	bl	800c2d0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d49e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d4a0:	4b1d      	ldr	r3, [pc, #116]	@ (800d518 <xTaskResumeAll+0xec>)
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4a6:	429a      	cmp	r2, r3
 800d4a8:	d3dc      	bcc.n	800d464 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 800d4aa:	4b1c      	ldr	r3, [pc, #112]	@ (800d51c <xTaskResumeAll+0xf0>)
 800d4ac:	2201      	movs	r2, #1
 800d4ae:	601a      	str	r2, [r3, #0]
 800d4b0:	e7d8      	b.n	800d464 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 800d4b2:	b10c      	cbz	r4, 800d4b8 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 800d4b4:	f7ff fcbe 	bl	800ce34 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d4b8:	4b19      	ldr	r3, [pc, #100]	@ (800d520 <xTaskResumeAll+0xf4>)
 800d4ba:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800d4bc:	b984      	cbnz	r4, 800d4e0 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 800d4be:	4b17      	ldr	r3, [pc, #92]	@ (800d51c <xTaskResumeAll+0xf0>)
 800d4c0:	681c      	ldr	r4, [r3, #0]
 800d4c2:	b1d4      	cbz	r4, 800d4fa <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 800d4c4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d4c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d4cc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d4d0:	f3bf 8f4f 	dsb	sy
 800d4d4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800d4d8:	2401      	movs	r4, #1
 800d4da:	e00e      	b.n	800d4fa <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d4dc:	3c01      	subs	r4, #1
 800d4de:	d007      	beq.n	800d4f0 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 800d4e0:	f7ff ff18 	bl	800d314 <xTaskIncrementTick>
 800d4e4:	2800      	cmp	r0, #0
 800d4e6:	d0f9      	beq.n	800d4dc <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 800d4e8:	4b0c      	ldr	r3, [pc, #48]	@ (800d51c <xTaskResumeAll+0xf0>)
 800d4ea:	2201      	movs	r2, #1
 800d4ec:	601a      	str	r2, [r3, #0]
 800d4ee:	e7f5      	b.n	800d4dc <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 800d4f0:	4b0b      	ldr	r3, [pc, #44]	@ (800d520 <xTaskResumeAll+0xf4>)
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	601a      	str	r2, [r3, #0]
 800d4f6:	e7e2      	b.n	800d4be <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 800d4f8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800d4fa:	f000 fd15 	bl	800df28 <vPortExitCritical>
}
 800d4fe:	4620      	mov	r0, r4
 800d500:	bd38      	pop	{r3, r4, r5, pc}
 800d502:	bf00      	nop
 800d504:	24002f50 	.word	0x24002f50
 800d508:	24002f78 	.word	0x24002f78
 800d50c:	24002fa8 	.word	0x24002fa8
 800d510:	24002f70 	.word	0x24002f70
 800d514:	24002fec 	.word	0x24002fec
 800d518:	2400344c 	.word	0x2400344c
 800d51c:	24002f64 	.word	0x24002f64
 800d520:	24002f68 	.word	0x24002f68

0800d524 <vTaskDelay>:
	{
 800d524:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d526:	b1a8      	cbz	r0, 800d554 <vTaskDelay+0x30>
 800d528:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 800d52a:	4b10      	ldr	r3, [pc, #64]	@ (800d56c <vTaskDelay+0x48>)
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	b143      	cbz	r3, 800d542 <vTaskDelay+0x1e>
 800d530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d534:	f383 8811 	msr	BASEPRI, r3
 800d538:	f3bf 8f6f 	isb	sy
 800d53c:	f3bf 8f4f 	dsb	sy
 800d540:	e7fe      	b.n	800d540 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800d542:	f7ff fed9 	bl	800d2f8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d546:	2100      	movs	r1, #0
 800d548:	4620      	mov	r0, r4
 800d54a:	f7ff fdcf 	bl	800d0ec <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800d54e:	f7ff ff6d 	bl	800d42c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800d552:	b948      	cbnz	r0, 800d568 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 800d554:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d558:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d55c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d560:	f3bf 8f4f 	dsb	sy
 800d564:	f3bf 8f6f 	isb	sy
	}
 800d568:	bd10      	pop	{r4, pc}
 800d56a:	bf00      	nop
 800d56c:	24002f50 	.word	0x24002f50

0800d570 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d570:	4b22      	ldr	r3, [pc, #136]	@ (800d5fc <vTaskSwitchContext+0x8c>)
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	b11b      	cbz	r3, 800d57e <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800d576:	4b22      	ldr	r3, [pc, #136]	@ (800d600 <vTaskSwitchContext+0x90>)
 800d578:	2201      	movs	r2, #1
 800d57a:	601a      	str	r2, [r3, #0]
 800d57c:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800d57e:	4b20      	ldr	r3, [pc, #128]	@ (800d600 <vTaskSwitchContext+0x90>)
 800d580:	2200      	movs	r2, #0
 800d582:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d584:	4b1f      	ldr	r3, [pc, #124]	@ (800d604 <vTaskSwitchContext+0x94>)
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800d58c:	008a      	lsls	r2, r1, #2
 800d58e:	491e      	ldr	r1, [pc, #120]	@ (800d608 <vTaskSwitchContext+0x98>)
 800d590:	588a      	ldr	r2, [r1, r2]
 800d592:	b95a      	cbnz	r2, 800d5ac <vTaskSwitchContext+0x3c>
 800d594:	b10b      	cbz	r3, 800d59a <vTaskSwitchContext+0x2a>
 800d596:	3b01      	subs	r3, #1
 800d598:	e7f6      	b.n	800d588 <vTaskSwitchContext+0x18>
 800d59a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d59e:	f383 8811 	msr	BASEPRI, r3
 800d5a2:	f3bf 8f6f 	isb	sy
 800d5a6:	f3bf 8f4f 	dsb	sy
 800d5aa:	e7fe      	b.n	800d5aa <vTaskSwitchContext+0x3a>
 800d5ac:	4608      	mov	r0, r1
 800d5ae:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800d5b2:	008a      	lsls	r2, r1, #2
 800d5b4:	4402      	add	r2, r0
 800d5b6:	6851      	ldr	r1, [r2, #4]
 800d5b8:	6849      	ldr	r1, [r1, #4]
 800d5ba:	6051      	str	r1, [r2, #4]
 800d5bc:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 800d5c0:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800d5c4:	3208      	adds	r2, #8
 800d5c6:	4402      	add	r2, r0
 800d5c8:	4291      	cmp	r1, r2
 800d5ca:	d00f      	beq.n	800d5ec <vTaskSwitchContext+0x7c>
 800d5cc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800d5d0:	0091      	lsls	r1, r2, #2
 800d5d2:	4a0d      	ldr	r2, [pc, #52]	@ (800d608 <vTaskSwitchContext+0x98>)
 800d5d4:	440a      	add	r2, r1
 800d5d6:	6852      	ldr	r2, [r2, #4]
 800d5d8:	68d1      	ldr	r1, [r2, #12]
 800d5da:	4a0c      	ldr	r2, [pc, #48]	@ (800d60c <vTaskSwitchContext+0x9c>)
 800d5dc:	6011      	str	r1, [r2, #0]
 800d5de:	4909      	ldr	r1, [pc, #36]	@ (800d604 <vTaskSwitchContext+0x94>)
 800d5e0:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d5e2:	6813      	ldr	r3, [r2, #0]
 800d5e4:	3354      	adds	r3, #84	@ 0x54
 800d5e6:	4a0a      	ldr	r2, [pc, #40]	@ (800d610 <vTaskSwitchContext+0xa0>)
 800d5e8:	6013      	str	r3, [r2, #0]
}
 800d5ea:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5ec:	6848      	ldr	r0, [r1, #4]
 800d5ee:	4662      	mov	r2, ip
 800d5f0:	0091      	lsls	r1, r2, #2
 800d5f2:	4a05      	ldr	r2, [pc, #20]	@ (800d608 <vTaskSwitchContext+0x98>)
 800d5f4:	440a      	add	r2, r1
 800d5f6:	6050      	str	r0, [r2, #4]
 800d5f8:	e7e8      	b.n	800d5cc <vTaskSwitchContext+0x5c>
 800d5fa:	bf00      	nop
 800d5fc:	24002f50 	.word	0x24002f50
 800d600:	24002f64 	.word	0x24002f64
 800d604:	24002f70 	.word	0x24002f70
 800d608:	24002fec 	.word	0x24002fec
 800d60c:	2400344c 	.word	0x2400344c
 800d610:	2400002c 	.word	0x2400002c

0800d614 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800d614:	b158      	cbz	r0, 800d62e <vTaskPlaceOnEventList+0x1a>
{
 800d616:	b510      	push	{r4, lr}
 800d618:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d61a:	4a09      	ldr	r2, [pc, #36]	@ (800d640 <vTaskPlaceOnEventList+0x2c>)
 800d61c:	6811      	ldr	r1, [r2, #0]
 800d61e:	3118      	adds	r1, #24
 800d620:	f7fe fe61 	bl	800c2e6 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d624:	2101      	movs	r1, #1
 800d626:	4620      	mov	r0, r4
 800d628:	f7ff fd60 	bl	800d0ec <prvAddCurrentTaskToDelayedList>
}
 800d62c:	bd10      	pop	{r4, pc}
 800d62e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d632:	f383 8811 	msr	BASEPRI, r3
 800d636:	f3bf 8f6f 	isb	sy
 800d63a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 800d63e:	e7fe      	b.n	800d63e <vTaskPlaceOnEventList+0x2a>
 800d640:	2400344c 	.word	0x2400344c

0800d644 <vTaskPlaceOnEventListRestricted>:
	{
 800d644:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800d646:	b170      	cbz	r0, 800d666 <vTaskPlaceOnEventListRestricted+0x22>
 800d648:	460d      	mov	r5, r1
 800d64a:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d64c:	4a0a      	ldr	r2, [pc, #40]	@ (800d678 <vTaskPlaceOnEventListRestricted+0x34>)
 800d64e:	6811      	ldr	r1, [r2, #0]
 800d650:	3118      	adds	r1, #24
 800d652:	f7fe fe3d 	bl	800c2d0 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 800d656:	b10c      	cbz	r4, 800d65c <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 800d658:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d65c:	4621      	mov	r1, r4
 800d65e:	4628      	mov	r0, r5
 800d660:	f7ff fd44 	bl	800d0ec <prvAddCurrentTaskToDelayedList>
	}
 800d664:	bd38      	pop	{r3, r4, r5, pc}
 800d666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d66a:	f383 8811 	msr	BASEPRI, r3
 800d66e:	f3bf 8f6f 	isb	sy
 800d672:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 800d676:	e7fe      	b.n	800d676 <vTaskPlaceOnEventListRestricted+0x32>
 800d678:	2400344c 	.word	0x2400344c

0800d67c <xTaskRemoveFromEventList>:
{
 800d67c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d67e:	68c3      	ldr	r3, [r0, #12]
 800d680:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800d682:	b324      	cbz	r4, 800d6ce <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d684:	f104 0518 	add.w	r5, r4, #24
 800d688:	4628      	mov	r0, r5
 800d68a:	f7fe fe45 	bl	800c318 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d68e:	4b18      	ldr	r3, [pc, #96]	@ (800d6f0 <xTaskRemoveFromEventList+0x74>)
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	bb2b      	cbnz	r3, 800d6e0 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d694:	1d25      	adds	r5, r4, #4
 800d696:	4628      	mov	r0, r5
 800d698:	f7fe fe3e 	bl	800c318 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d69c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800d69e:	4b15      	ldr	r3, [pc, #84]	@ (800d6f4 <xTaskRemoveFromEventList+0x78>)
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	4298      	cmp	r0, r3
 800d6a4:	d901      	bls.n	800d6aa <xTaskRemoveFromEventList+0x2e>
 800d6a6:	4b13      	ldr	r3, [pc, #76]	@ (800d6f4 <xTaskRemoveFromEventList+0x78>)
 800d6a8:	6018      	str	r0, [r3, #0]
 800d6aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d6ae:	4629      	mov	r1, r5
 800d6b0:	4b11      	ldr	r3, [pc, #68]	@ (800d6f8 <xTaskRemoveFromEventList+0x7c>)
 800d6b2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d6b6:	f7fe fe0b 	bl	800c2d0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d6ba:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d6bc:	4b0f      	ldr	r3, [pc, #60]	@ (800d6fc <xTaskRemoveFromEventList+0x80>)
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6c2:	429a      	cmp	r2, r3
 800d6c4:	d911      	bls.n	800d6ea <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 800d6c6:	2001      	movs	r0, #1
 800d6c8:	4b0d      	ldr	r3, [pc, #52]	@ (800d700 <xTaskRemoveFromEventList+0x84>)
 800d6ca:	6018      	str	r0, [r3, #0]
}
 800d6cc:	bd38      	pop	{r3, r4, r5, pc}
 800d6ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6d2:	f383 8811 	msr	BASEPRI, r3
 800d6d6:	f3bf 8f6f 	isb	sy
 800d6da:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800d6de:	e7fe      	b.n	800d6de <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d6e0:	4629      	mov	r1, r5
 800d6e2:	4808      	ldr	r0, [pc, #32]	@ (800d704 <xTaskRemoveFromEventList+0x88>)
 800d6e4:	f7fe fdf4 	bl	800c2d0 <vListInsertEnd>
 800d6e8:	e7e7      	b.n	800d6ba <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 800d6ea:	2000      	movs	r0, #0
	return xReturn;
 800d6ec:	e7ee      	b.n	800d6cc <xTaskRemoveFromEventList+0x50>
 800d6ee:	bf00      	nop
 800d6f0:	24002f50 	.word	0x24002f50
 800d6f4:	24002f70 	.word	0x24002f70
 800d6f8:	24002fec 	.word	0x24002fec
 800d6fc:	2400344c 	.word	0x2400344c
 800d700:	24002f64 	.word	0x24002f64
 800d704:	24002fa8 	.word	0x24002fa8

0800d708 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d708:	4b03      	ldr	r3, [pc, #12]	@ (800d718 <vTaskInternalSetTimeOutState+0x10>)
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d70e:	4b03      	ldr	r3, [pc, #12]	@ (800d71c <vTaskInternalSetTimeOutState+0x14>)
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	6043      	str	r3, [r0, #4]
}
 800d714:	4770      	bx	lr
 800d716:	bf00      	nop
 800d718:	24002f60 	.word	0x24002f60
 800d71c:	24002f74 	.word	0x24002f74

0800d720 <xTaskCheckForTimeOut>:
{
 800d720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800d722:	b1c8      	cbz	r0, 800d758 <xTaskCheckForTimeOut+0x38>
 800d724:	460c      	mov	r4, r1
 800d726:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 800d728:	b1f9      	cbz	r1, 800d76a <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 800d72a:	f000 fbdb 	bl	800dee4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800d72e:	4b1b      	ldr	r3, [pc, #108]	@ (800d79c <xTaskCheckForTimeOut+0x7c>)
 800d730:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d732:	686b      	ldr	r3, [r5, #4]
 800d734:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 800d736:	6822      	ldr	r2, [r4, #0]
 800d738:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d73c:	d026      	beq.n	800d78c <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d73e:	4e18      	ldr	r6, [pc, #96]	@ (800d7a0 <xTaskCheckForTimeOut+0x80>)
 800d740:	6836      	ldr	r6, [r6, #0]
 800d742:	682f      	ldr	r7, [r5, #0]
 800d744:	42b7      	cmp	r7, r6
 800d746:	d001      	beq.n	800d74c <xTaskCheckForTimeOut+0x2c>
 800d748:	428b      	cmp	r3, r1
 800d74a:	d924      	bls.n	800d796 <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d74c:	4282      	cmp	r2, r0
 800d74e:	d815      	bhi.n	800d77c <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 800d750:	2300      	movs	r3, #0
 800d752:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800d754:	2401      	movs	r4, #1
 800d756:	e01a      	b.n	800d78e <xTaskCheckForTimeOut+0x6e>
 800d758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d75c:	f383 8811 	msr	BASEPRI, r3
 800d760:	f3bf 8f6f 	isb	sy
 800d764:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 800d768:	e7fe      	b.n	800d768 <xTaskCheckForTimeOut+0x48>
 800d76a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d76e:	f383 8811 	msr	BASEPRI, r3
 800d772:	f3bf 8f6f 	isb	sy
 800d776:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 800d77a:	e7fe      	b.n	800d77a <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 800d77c:	1a5b      	subs	r3, r3, r1
 800d77e:	4413      	add	r3, r2
 800d780:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d782:	4628      	mov	r0, r5
 800d784:	f7ff ffc0 	bl	800d708 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d788:	2400      	movs	r4, #0
 800d78a:	e000      	b.n	800d78e <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 800d78c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800d78e:	f000 fbcb 	bl	800df28 <vPortExitCritical>
}
 800d792:	4620      	mov	r0, r4
 800d794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 800d796:	2401      	movs	r4, #1
 800d798:	e7f9      	b.n	800d78e <xTaskCheckForTimeOut+0x6e>
 800d79a:	bf00      	nop
 800d79c:	24002f74 	.word	0x24002f74
 800d7a0:	24002f60 	.word	0x24002f60

0800d7a4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800d7a4:	4b01      	ldr	r3, [pc, #4]	@ (800d7ac <vTaskMissedYield+0x8>)
 800d7a6:	2201      	movs	r2, #1
 800d7a8:	601a      	str	r2, [r3, #0]
}
 800d7aa:	4770      	bx	lr
 800d7ac:	24002f64 	.word	0x24002f64

0800d7b0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800d7b0:	4b05      	ldr	r3, [pc, #20]	@ (800d7c8 <xTaskGetSchedulerState+0x18>)
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	b133      	cbz	r3, 800d7c4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d7b6:	4b05      	ldr	r3, [pc, #20]	@ (800d7cc <xTaskGetSchedulerState+0x1c>)
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	b10b      	cbz	r3, 800d7c0 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 800d7bc:	2000      	movs	r0, #0
	}
 800d7be:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 800d7c0:	2002      	movs	r0, #2
 800d7c2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d7c4:	2001      	movs	r0, #1
 800d7c6:	4770      	bx	lr
 800d7c8:	24002f6c 	.word	0x24002f6c
 800d7cc:	24002f50 	.word	0x24002f50

0800d7d0 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 800d7d0:	2800      	cmp	r0, #0
 800d7d2:	d03e      	beq.n	800d852 <xTaskPriorityInherit+0x82>
	{
 800d7d4:	b538      	push	{r3, r4, r5, lr}
 800d7d6:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d7d8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800d7da:	4a20      	ldr	r2, [pc, #128]	@ (800d85c <xTaskPriorityInherit+0x8c>)
 800d7dc:	6812      	ldr	r2, [r2, #0]
 800d7de:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800d7e0:	4293      	cmp	r3, r2
 800d7e2:	d22e      	bcs.n	800d842 <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d7e4:	6982      	ldr	r2, [r0, #24]
 800d7e6:	2a00      	cmp	r2, #0
 800d7e8:	db05      	blt.n	800d7f6 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d7ea:	4a1c      	ldr	r2, [pc, #112]	@ (800d85c <xTaskPriorityInherit+0x8c>)
 800d7ec:	6812      	ldr	r2, [r2, #0]
 800d7ee:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800d7f0:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800d7f4:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d7f6:	6961      	ldr	r1, [r4, #20]
 800d7f8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d7fc:	4a18      	ldr	r2, [pc, #96]	@ (800d860 <xTaskPriorityInherit+0x90>)
 800d7fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d802:	4299      	cmp	r1, r3
 800d804:	d005      	beq.n	800d812 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d806:	4b15      	ldr	r3, [pc, #84]	@ (800d85c <xTaskPriorityInherit+0x8c>)
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d80c:	62e3      	str	r3, [r4, #44]	@ 0x2c
				xReturn = pdTRUE;
 800d80e:	2001      	movs	r0, #1
	}
 800d810:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d812:	1d25      	adds	r5, r4, #4
 800d814:	4628      	mov	r0, r5
 800d816:	f7fe fd7f 	bl	800c318 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d81a:	4b10      	ldr	r3, [pc, #64]	@ (800d85c <xTaskPriorityInherit+0x8c>)
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800d820:	62e0      	str	r0, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d822:	4b10      	ldr	r3, [pc, #64]	@ (800d864 <xTaskPriorityInherit+0x94>)
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	4298      	cmp	r0, r3
 800d828:	d901      	bls.n	800d82e <xTaskPriorityInherit+0x5e>
 800d82a:	4b0e      	ldr	r3, [pc, #56]	@ (800d864 <xTaskPriorityInherit+0x94>)
 800d82c:	6018      	str	r0, [r3, #0]
 800d82e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d832:	4629      	mov	r1, r5
 800d834:	4b0a      	ldr	r3, [pc, #40]	@ (800d860 <xTaskPriorityInherit+0x90>)
 800d836:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d83a:	f7fe fd49 	bl	800c2d0 <vListInsertEnd>
				xReturn = pdTRUE;
 800d83e:	2001      	movs	r0, #1
 800d840:	e7e6      	b.n	800d810 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d842:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800d844:	4b05      	ldr	r3, [pc, #20]	@ (800d85c <xTaskPriorityInherit+0x8c>)
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d84a:	429a      	cmp	r2, r3
 800d84c:	d303      	bcc.n	800d856 <xTaskPriorityInherit+0x86>
	BaseType_t xReturn = pdFALSE;
 800d84e:	2000      	movs	r0, #0
 800d850:	e7de      	b.n	800d810 <xTaskPriorityInherit+0x40>
 800d852:	2000      	movs	r0, #0
	}
 800d854:	4770      	bx	lr
					xReturn = pdTRUE;
 800d856:	2001      	movs	r0, #1
		return xReturn;
 800d858:	e7da      	b.n	800d810 <xTaskPriorityInherit+0x40>
 800d85a:	bf00      	nop
 800d85c:	2400344c 	.word	0x2400344c
 800d860:	24002fec 	.word	0x24002fec
 800d864:	24002f70 	.word	0x24002f70

0800d868 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800d868:	2800      	cmp	r0, #0
 800d86a:	d03b      	beq.n	800d8e4 <xTaskPriorityDisinherit+0x7c>
	{
 800d86c:	b538      	push	{r3, r4, r5, lr}
 800d86e:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 800d870:	4b1e      	ldr	r3, [pc, #120]	@ (800d8ec <xTaskPriorityDisinherit+0x84>)
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	4283      	cmp	r3, r0
 800d876:	d008      	beq.n	800d88a <xTaskPriorityDisinherit+0x22>
 800d878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d87c:	f383 8811 	msr	BASEPRI, r3
 800d880:	f3bf 8f6f 	isb	sy
 800d884:	f3bf 8f4f 	dsb	sy
 800d888:	e7fe      	b.n	800d888 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800d88a:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800d88c:	b943      	cbnz	r3, 800d8a0 <xTaskPriorityDisinherit+0x38>
 800d88e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d892:	f383 8811 	msr	BASEPRI, r3
 800d896:	f3bf 8f6f 	isb	sy
 800d89a:	f3bf 8f4f 	dsb	sy
 800d89e:	e7fe      	b.n	800d89e <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 800d8a0:	3b01      	subs	r3, #1
 800d8a2:	6503      	str	r3, [r0, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d8a4:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800d8a6:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800d8a8:	4291      	cmp	r1, r2
 800d8aa:	d01d      	beq.n	800d8e8 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d8ac:	b10b      	cbz	r3, 800d8b2 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800d8ae:	2000      	movs	r0, #0
	}
 800d8b0:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d8b2:	1d05      	adds	r5, r0, #4
 800d8b4:	4628      	mov	r0, r5
 800d8b6:	f7fe fd2f 	bl	800c318 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d8ba:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800d8bc:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8be:	f1c0 0338 	rsb	r3, r0, #56	@ 0x38
 800d8c2:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800d8c4:	4b0a      	ldr	r3, [pc, #40]	@ (800d8f0 <xTaskPriorityDisinherit+0x88>)
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	4298      	cmp	r0, r3
 800d8ca:	d901      	bls.n	800d8d0 <xTaskPriorityDisinherit+0x68>
 800d8cc:	4b08      	ldr	r3, [pc, #32]	@ (800d8f0 <xTaskPriorityDisinherit+0x88>)
 800d8ce:	6018      	str	r0, [r3, #0]
 800d8d0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d8d4:	4629      	mov	r1, r5
 800d8d6:	4b07      	ldr	r3, [pc, #28]	@ (800d8f4 <xTaskPriorityDisinherit+0x8c>)
 800d8d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d8dc:	f7fe fcf8 	bl	800c2d0 <vListInsertEnd>
					xReturn = pdTRUE;
 800d8e0:	2001      	movs	r0, #1
 800d8e2:	e7e5      	b.n	800d8b0 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 800d8e4:	2000      	movs	r0, #0
	}
 800d8e6:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 800d8e8:	2000      	movs	r0, #0
 800d8ea:	e7e1      	b.n	800d8b0 <xTaskPriorityDisinherit+0x48>
 800d8ec:	2400344c 	.word	0x2400344c
 800d8f0:	24002f70 	.word	0x24002f70
 800d8f4:	24002fec 	.word	0x24002fec

0800d8f8 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 800d8f8:	2800      	cmp	r0, #0
 800d8fa:	d046      	beq.n	800d98a <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 800d8fc:	b538      	push	{r3, r4, r5, lr}
 800d8fe:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 800d900:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800d902:	b943      	cbnz	r3, 800d916 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800d904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d908:	f383 8811 	msr	BASEPRI, r3
 800d90c:	f3bf 8f6f 	isb	sy
 800d910:	f3bf 8f4f 	dsb	sy
 800d914:	e7fe      	b.n	800d914 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d916:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800d918:	428a      	cmp	r2, r1
 800d91a:	d200      	bcs.n	800d91e <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d91c:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d91e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d920:	4291      	cmp	r1, r2
 800d922:	d001      	beq.n	800d928 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d924:	2b01      	cmp	r3, #1
 800d926:	d000      	beq.n	800d92a <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 800d928:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 800d92a:	4b18      	ldr	r3, [pc, #96]	@ (800d98c <vTaskPriorityDisinheritAfterTimeout+0x94>)
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	42a3      	cmp	r3, r4
 800d930:	d022      	beq.n	800d978 <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 800d932:	62e2      	str	r2, [r4, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d934:	69a3      	ldr	r3, [r4, #24]
 800d936:	2b00      	cmp	r3, #0
 800d938:	db02      	blt.n	800d940 <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d93a:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800d93e:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d940:	6962      	ldr	r2, [r4, #20]
 800d942:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800d946:	4b12      	ldr	r3, [pc, #72]	@ (800d990 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800d948:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800d94c:	429a      	cmp	r2, r3
 800d94e:	d1eb      	bne.n	800d928 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d950:	1d25      	adds	r5, r4, #4
 800d952:	4628      	mov	r0, r5
 800d954:	f7fe fce0 	bl	800c318 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800d958:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800d95a:	4b0e      	ldr	r3, [pc, #56]	@ (800d994 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	4298      	cmp	r0, r3
 800d960:	d901      	bls.n	800d966 <vTaskPriorityDisinheritAfterTimeout+0x6e>
 800d962:	4b0c      	ldr	r3, [pc, #48]	@ (800d994 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800d964:	6018      	str	r0, [r3, #0]
 800d966:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d96a:	4629      	mov	r1, r5
 800d96c:	4b08      	ldr	r3, [pc, #32]	@ (800d990 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800d96e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d972:	f7fe fcad 	bl	800c2d0 <vListInsertEnd>
	}
 800d976:	e7d7      	b.n	800d928 <vTaskPriorityDisinheritAfterTimeout+0x30>
 800d978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d97c:	f383 8811 	msr	BASEPRI, r3
 800d980:	f3bf 8f6f 	isb	sy
 800d984:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 800d988:	e7fe      	b.n	800d988 <vTaskPriorityDisinheritAfterTimeout+0x90>
 800d98a:	4770      	bx	lr
 800d98c:	2400344c 	.word	0x2400344c
 800d990:	24002fec 	.word	0x24002fec
 800d994:	24002f70 	.word	0x24002f70

0800d998 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800d998:	4b05      	ldr	r3, [pc, #20]	@ (800d9b0 <pvTaskIncrementMutexHeldCount+0x18>)
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	b123      	cbz	r3, 800d9a8 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 800d99e:	4b04      	ldr	r3, [pc, #16]	@ (800d9b0 <pvTaskIncrementMutexHeldCount+0x18>)
 800d9a0:	681a      	ldr	r2, [r3, #0]
 800d9a2:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800d9a4:	3301      	adds	r3, #1
 800d9a6:	6513      	str	r3, [r2, #80]	@ 0x50
		return pxCurrentTCB;
 800d9a8:	4b01      	ldr	r3, [pc, #4]	@ (800d9b0 <pvTaskIncrementMutexHeldCount+0x18>)
 800d9aa:	6818      	ldr	r0, [r3, #0]
	}
 800d9ac:	4770      	bx	lr
 800d9ae:	bf00      	nop
 800d9b0:	2400344c 	.word	0x2400344c

0800d9b4 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d9b4:	4b06      	ldr	r3, [pc, #24]	@ (800d9d0 <prvGetNextExpireTime+0x1c>)
 800d9b6:	681a      	ldr	r2, [r3, #0]
 800d9b8:	6813      	ldr	r3, [r2, #0]
 800d9ba:	b92b      	cbnz	r3, 800d9c8 <prvGetNextExpireTime+0x14>
 800d9bc:	2301      	movs	r3, #1
 800d9be:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d9c0:	b923      	cbnz	r3, 800d9cc <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d9c2:	68d3      	ldr	r3, [r2, #12]
 800d9c4:	6818      	ldr	r0, [r3, #0]
 800d9c6:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	e7f8      	b.n	800d9be <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d9cc:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 800d9ce:	4770      	bx	lr
 800d9d0:	24003550 	.word	0x24003550

0800d9d4 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d9d4:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d9d6:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d9d8:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d9da:	4291      	cmp	r1, r2
 800d9dc:	d80c      	bhi.n	800d9f8 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9de:	1ad2      	subs	r2, r2, r3
 800d9e0:	6983      	ldr	r3, [r0, #24]
 800d9e2:	429a      	cmp	r2, r3
 800d9e4:	d301      	bcc.n	800d9ea <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d9e6:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 800d9e8:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d9ea:	1d01      	adds	r1, r0, #4
 800d9ec:	4b0b      	ldr	r3, [pc, #44]	@ (800da1c <prvInsertTimerInActiveList+0x48>)
 800d9ee:	6818      	ldr	r0, [r3, #0]
 800d9f0:	f7fe fc79 	bl	800c2e6 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800d9f4:	2000      	movs	r0, #0
 800d9f6:	e7f7      	b.n	800d9e8 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d9f8:	429a      	cmp	r2, r3
 800d9fa:	bf2c      	ite	cs
 800d9fc:	2200      	movcs	r2, #0
 800d9fe:	2201      	movcc	r2, #1
 800da00:	4299      	cmp	r1, r3
 800da02:	bf38      	it	cc
 800da04:	2200      	movcc	r2, #0
 800da06:	b10a      	cbz	r2, 800da0c <prvInsertTimerInActiveList+0x38>
			xProcessTimerNow = pdTRUE;
 800da08:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800da0a:	e7ed      	b.n	800d9e8 <prvInsertTimerInActiveList+0x14>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800da0c:	1d01      	adds	r1, r0, #4
 800da0e:	4b04      	ldr	r3, [pc, #16]	@ (800da20 <prvInsertTimerInActiveList+0x4c>)
 800da10:	6818      	ldr	r0, [r3, #0]
 800da12:	f7fe fc68 	bl	800c2e6 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800da16:	2000      	movs	r0, #0
 800da18:	e7e6      	b.n	800d9e8 <prvInsertTimerInActiveList+0x14>
 800da1a:	bf00      	nop
 800da1c:	2400354c 	.word	0x2400354c
 800da20:	24003550 	.word	0x24003550

0800da24 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800da24:	b530      	push	{r4, r5, lr}
 800da26:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800da28:	f000 fa5c 	bl	800dee4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800da2c:	4b11      	ldr	r3, [pc, #68]	@ (800da74 <prvCheckForValidListAndQueue+0x50>)
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	b11b      	cbz	r3, 800da3a <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800da32:	f000 fa79 	bl	800df28 <vPortExitCritical>
}
 800da36:	b003      	add	sp, #12
 800da38:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 800da3a:	4d0f      	ldr	r5, [pc, #60]	@ (800da78 <prvCheckForValidListAndQueue+0x54>)
 800da3c:	4628      	mov	r0, r5
 800da3e:	f7fe fc39 	bl	800c2b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800da42:	4c0e      	ldr	r4, [pc, #56]	@ (800da7c <prvCheckForValidListAndQueue+0x58>)
 800da44:	4620      	mov	r0, r4
 800da46:	f7fe fc35 	bl	800c2b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800da4a:	4b0d      	ldr	r3, [pc, #52]	@ (800da80 <prvCheckForValidListAndQueue+0x5c>)
 800da4c:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800da4e:	4b0d      	ldr	r3, [pc, #52]	@ (800da84 <prvCheckForValidListAndQueue+0x60>)
 800da50:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800da52:	2300      	movs	r3, #0
 800da54:	9300      	str	r3, [sp, #0]
 800da56:	4b0c      	ldr	r3, [pc, #48]	@ (800da88 <prvCheckForValidListAndQueue+0x64>)
 800da58:	4a0c      	ldr	r2, [pc, #48]	@ (800da8c <prvCheckForValidListAndQueue+0x68>)
 800da5a:	2110      	movs	r1, #16
 800da5c:	200a      	movs	r0, #10
 800da5e:	f7fe fd69 	bl	800c534 <xQueueGenericCreateStatic>
 800da62:	4b04      	ldr	r3, [pc, #16]	@ (800da74 <prvCheckForValidListAndQueue+0x50>)
 800da64:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 800da66:	2800      	cmp	r0, #0
 800da68:	d0e3      	beq.n	800da32 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800da6a:	4909      	ldr	r1, [pc, #36]	@ (800da90 <prvCheckForValidListAndQueue+0x6c>)
 800da6c:	f7ff f978 	bl	800cd60 <vQueueAddToRegistry>
 800da70:	e7df      	b.n	800da32 <prvCheckForValidListAndQueue+0xe>
 800da72:	bf00      	nop
 800da74:	24003548 	.word	0x24003548
 800da78:	24003568 	.word	0x24003568
 800da7c:	24003554 	.word	0x24003554
 800da80:	24003550 	.word	0x24003550
 800da84:	2400354c 	.word	0x2400354c
 800da88:	24003450 	.word	0x24003450
 800da8c:	240034a0 	.word	0x240034a0
 800da90:	0801a070 	.word	0x0801a070

0800da94 <xTimerCreateTimerTask>:
{
 800da94:	b510      	push	{r4, lr}
 800da96:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800da98:	f7ff ffc4 	bl	800da24 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800da9c:	4b12      	ldr	r3, [pc, #72]	@ (800dae8 <xTimerCreateTimerTask+0x54>)
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	b1cb      	cbz	r3, 800dad6 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800daa2:	2400      	movs	r4, #0
 800daa4:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800daa6:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800daa8:	aa07      	add	r2, sp, #28
 800daaa:	a906      	add	r1, sp, #24
 800daac:	a805      	add	r0, sp, #20
 800daae:	f7fe fbf5 	bl	800c29c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800dab2:	9b05      	ldr	r3, [sp, #20]
 800dab4:	9302      	str	r3, [sp, #8]
 800dab6:	9b06      	ldr	r3, [sp, #24]
 800dab8:	9301      	str	r3, [sp, #4]
 800daba:	2302      	movs	r3, #2
 800dabc:	9300      	str	r3, [sp, #0]
 800dabe:	4623      	mov	r3, r4
 800dac0:	9a07      	ldr	r2, [sp, #28]
 800dac2:	490a      	ldr	r1, [pc, #40]	@ (800daec <xTimerCreateTimerTask+0x58>)
 800dac4:	480a      	ldr	r0, [pc, #40]	@ (800daf0 <xTimerCreateTimerTask+0x5c>)
 800dac6:	f7ff fb53 	bl	800d170 <xTaskCreateStatic>
 800daca:	4b0a      	ldr	r3, [pc, #40]	@ (800daf4 <xTimerCreateTimerTask+0x60>)
 800dacc:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800dace:	b110      	cbz	r0, 800dad6 <xTimerCreateTimerTask+0x42>
}
 800dad0:	2001      	movs	r0, #1
 800dad2:	b008      	add	sp, #32
 800dad4:	bd10      	pop	{r4, pc}
 800dad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dada:	f383 8811 	msr	BASEPRI, r3
 800dade:	f3bf 8f6f 	isb	sy
 800dae2:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800dae6:	e7fe      	b.n	800dae6 <xTimerCreateTimerTask+0x52>
 800dae8:	24003548 	.word	0x24003548
 800daec:	0801a078 	.word	0x0801a078
 800daf0:	0800ddfd 	.word	0x0800ddfd
 800daf4:	24003544 	.word	0x24003544

0800daf8 <xTimerGenericCommand>:
	configASSERT( xTimer );
 800daf8:	b1b8      	cbz	r0, 800db2a <xTimerGenericCommand+0x32>
 800dafa:	469c      	mov	ip, r3
 800dafc:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 800dafe:	4818      	ldr	r0, [pc, #96]	@ (800db60 <xTimerGenericCommand+0x68>)
 800db00:	6800      	ldr	r0, [r0, #0]
 800db02:	b358      	cbz	r0, 800db5c <xTimerGenericCommand+0x64>
{
 800db04:	b500      	push	{lr}
 800db06:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 800db08:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800db0a:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800db0c:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800db0e:	2905      	cmp	r1, #5
 800db10:	dc1c      	bgt.n	800db4c <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800db12:	f7ff fe4d 	bl	800d7b0 <xTaskGetSchedulerState>
 800db16:	2802      	cmp	r0, #2
 800db18:	d010      	beq.n	800db3c <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800db1a:	2300      	movs	r3, #0
 800db1c:	461a      	mov	r2, r3
 800db1e:	4669      	mov	r1, sp
 800db20:	480f      	ldr	r0, [pc, #60]	@ (800db60 <xTimerGenericCommand+0x68>)
 800db22:	6800      	ldr	r0, [r0, #0]
 800db24:	f7fe fdbe 	bl	800c6a4 <xQueueGenericSend>
 800db28:	e015      	b.n	800db56 <xTimerGenericCommand+0x5e>
 800db2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db2e:	f383 8811 	msr	BASEPRI, r3
 800db32:	f3bf 8f6f 	isb	sy
 800db36:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 800db3a:	e7fe      	b.n	800db3a <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800db3c:	2300      	movs	r3, #0
 800db3e:	9a06      	ldr	r2, [sp, #24]
 800db40:	4669      	mov	r1, sp
 800db42:	4807      	ldr	r0, [pc, #28]	@ (800db60 <xTimerGenericCommand+0x68>)
 800db44:	6800      	ldr	r0, [r0, #0]
 800db46:	f7fe fdad 	bl	800c6a4 <xQueueGenericSend>
 800db4a:	e004      	b.n	800db56 <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800db4c:	2300      	movs	r3, #0
 800db4e:	4662      	mov	r2, ip
 800db50:	4669      	mov	r1, sp
 800db52:	f7fe fe6b 	bl	800c82c <xQueueGenericSendFromISR>
}
 800db56:	b005      	add	sp, #20
 800db58:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 800db5c:	2000      	movs	r0, #0
}
 800db5e:	4770      	bx	lr
 800db60:	24003548 	.word	0x24003548

0800db64 <prvSwitchTimerLists>:
{
 800db64:	b570      	push	{r4, r5, r6, lr}
 800db66:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800db68:	4b1b      	ldr	r3, [pc, #108]	@ (800dbd8 <prvSwitchTimerLists+0x74>)
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	681a      	ldr	r2, [r3, #0]
 800db6e:	b362      	cbz	r2, 800dbca <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800db70:	68db      	ldr	r3, [r3, #12]
 800db72:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db74:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800db76:	1d25      	adds	r5, r4, #4
 800db78:	4628      	mov	r0, r5
 800db7a:	f7fe fbcd 	bl	800c318 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800db7e:	6a23      	ldr	r3, [r4, #32]
 800db80:	4620      	mov	r0, r4
 800db82:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800db84:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800db88:	f013 0f04 	tst.w	r3, #4
 800db8c:	d0ec      	beq.n	800db68 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800db8e:	69a3      	ldr	r3, [r4, #24]
 800db90:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800db92:	429e      	cmp	r6, r3
 800db94:	d207      	bcs.n	800dba6 <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800db96:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800db98:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800db9a:	4629      	mov	r1, r5
 800db9c:	4b0e      	ldr	r3, [pc, #56]	@ (800dbd8 <prvSwitchTimerLists+0x74>)
 800db9e:	6818      	ldr	r0, [r3, #0]
 800dba0:	f7fe fba1 	bl	800c2e6 <vListInsert>
 800dba4:	e7e0      	b.n	800db68 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dba6:	2100      	movs	r1, #0
 800dba8:	9100      	str	r1, [sp, #0]
 800dbaa:	460b      	mov	r3, r1
 800dbac:	4632      	mov	r2, r6
 800dbae:	4620      	mov	r0, r4
 800dbb0:	f7ff ffa2 	bl	800daf8 <xTimerGenericCommand>
				configASSERT( xResult );
 800dbb4:	2800      	cmp	r0, #0
 800dbb6:	d1d7      	bne.n	800db68 <prvSwitchTimerLists+0x4>
 800dbb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbbc:	f383 8811 	msr	BASEPRI, r3
 800dbc0:	f3bf 8f6f 	isb	sy
 800dbc4:	f3bf 8f4f 	dsb	sy
 800dbc8:	e7fe      	b.n	800dbc8 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 800dbca:	4a04      	ldr	r2, [pc, #16]	@ (800dbdc <prvSwitchTimerLists+0x78>)
 800dbcc:	6810      	ldr	r0, [r2, #0]
 800dbce:	4902      	ldr	r1, [pc, #8]	@ (800dbd8 <prvSwitchTimerLists+0x74>)
 800dbd0:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800dbd2:	6013      	str	r3, [r2, #0]
}
 800dbd4:	b002      	add	sp, #8
 800dbd6:	bd70      	pop	{r4, r5, r6, pc}
 800dbd8:	24003550 	.word	0x24003550
 800dbdc:	2400354c 	.word	0x2400354c

0800dbe0 <prvSampleTimeNow>:
{
 800dbe0:	b538      	push	{r3, r4, r5, lr}
 800dbe2:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 800dbe4:	f7ff fb90 	bl	800d308 <xTaskGetTickCount>
 800dbe8:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 800dbea:	4b07      	ldr	r3, [pc, #28]	@ (800dc08 <prvSampleTimeNow+0x28>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	4283      	cmp	r3, r0
 800dbf0:	d805      	bhi.n	800dbfe <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 800dbf6:	4b04      	ldr	r3, [pc, #16]	@ (800dc08 <prvSampleTimeNow+0x28>)
 800dbf8:	601c      	str	r4, [r3, #0]
}
 800dbfa:	4620      	mov	r0, r4
 800dbfc:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 800dbfe:	f7ff ffb1 	bl	800db64 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800dc02:	2301      	movs	r3, #1
 800dc04:	602b      	str	r3, [r5, #0]
 800dc06:	e7f6      	b.n	800dbf6 <prvSampleTimeNow+0x16>
 800dc08:	24003540 	.word	0x24003540

0800dc0c <prvProcessExpiredTimer>:
{
 800dc0c:	b570      	push	{r4, r5, r6, lr}
 800dc0e:	b082      	sub	sp, #8
 800dc10:	4606      	mov	r6, r0
 800dc12:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc14:	4917      	ldr	r1, [pc, #92]	@ (800dc74 <prvProcessExpiredTimer+0x68>)
 800dc16:	6809      	ldr	r1, [r1, #0]
 800dc18:	68c9      	ldr	r1, [r1, #12]
 800dc1a:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dc1c:	1d20      	adds	r0, r4, #4
 800dc1e:	f7fe fb7b 	bl	800c318 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dc22:	f894 c028 	ldrb.w	ip, [r4, #40]	@ 0x28
 800dc26:	f01c 0f04 	tst.w	ip, #4
 800dc2a:	d108      	bne.n	800dc3e <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dc2c:	f02c 0c01 	bic.w	ip, ip, #1
 800dc30:	f884 c028 	strb.w	ip, [r4, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dc34:	6a23      	ldr	r3, [r4, #32]
 800dc36:	4620      	mov	r0, r4
 800dc38:	4798      	blx	r3
}
 800dc3a:	b002      	add	sp, #8
 800dc3c:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800dc3e:	69a1      	ldr	r1, [r4, #24]
 800dc40:	4633      	mov	r3, r6
 800dc42:	462a      	mov	r2, r5
 800dc44:	4431      	add	r1, r6
 800dc46:	4620      	mov	r0, r4
 800dc48:	f7ff fec4 	bl	800d9d4 <prvInsertTimerInActiveList>
 800dc4c:	2800      	cmp	r0, #0
 800dc4e:	d0f1      	beq.n	800dc34 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dc50:	2100      	movs	r1, #0
 800dc52:	9100      	str	r1, [sp, #0]
 800dc54:	460b      	mov	r3, r1
 800dc56:	4632      	mov	r2, r6
 800dc58:	4620      	mov	r0, r4
 800dc5a:	f7ff ff4d 	bl	800daf8 <xTimerGenericCommand>
			configASSERT( xResult );
 800dc5e:	2800      	cmp	r0, #0
 800dc60:	d1e8      	bne.n	800dc34 <prvProcessExpiredTimer+0x28>
 800dc62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc66:	f383 8811 	msr	BASEPRI, r3
 800dc6a:	f3bf 8f6f 	isb	sy
 800dc6e:	f3bf 8f4f 	dsb	sy
 800dc72:	e7fe      	b.n	800dc72 <prvProcessExpiredTimer+0x66>
 800dc74:	24003550 	.word	0x24003550

0800dc78 <prvProcessTimerOrBlockTask>:
{
 800dc78:	b570      	push	{r4, r5, r6, lr}
 800dc7a:	b082      	sub	sp, #8
 800dc7c:	4606      	mov	r6, r0
 800dc7e:	460c      	mov	r4, r1
	vTaskSuspendAll();
 800dc80:	f7ff fb3a 	bl	800d2f8 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dc84:	a801      	add	r0, sp, #4
 800dc86:	f7ff ffab 	bl	800dbe0 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800dc8a:	9b01      	ldr	r3, [sp, #4]
 800dc8c:	bb3b      	cbnz	r3, 800dcde <prvProcessTimerOrBlockTask+0x66>
 800dc8e:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dc90:	42b0      	cmp	r0, r6
 800dc92:	bf28      	it	cs
 800dc94:	2c00      	cmpcs	r4, #0
 800dc96:	d019      	beq.n	800dccc <prvProcessTimerOrBlockTask+0x54>
				if( xListWasEmpty != pdFALSE )
 800dc98:	b124      	cbz	r4, 800dca4 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dc9a:	4a13      	ldr	r2, [pc, #76]	@ (800dce8 <prvProcessTimerOrBlockTask+0x70>)
 800dc9c:	6812      	ldr	r2, [r2, #0]
 800dc9e:	6812      	ldr	r2, [r2, #0]
 800dca0:	b9da      	cbnz	r2, 800dcda <prvProcessTimerOrBlockTask+0x62>
 800dca2:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800dca4:	4622      	mov	r2, r4
 800dca6:	1b71      	subs	r1, r6, r5
 800dca8:	4b10      	ldr	r3, [pc, #64]	@ (800dcec <prvProcessTimerOrBlockTask+0x74>)
 800dcaa:	6818      	ldr	r0, [r3, #0]
 800dcac:	f7ff f898 	bl	800cde0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800dcb0:	f7ff fbbc 	bl	800d42c <xTaskResumeAll>
 800dcb4:	b9a8      	cbnz	r0, 800dce2 <prvProcessTimerOrBlockTask+0x6a>
					portYIELD_WITHIN_API();
 800dcb6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800dcba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dcbe:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800dcc2:	f3bf 8f4f 	dsb	sy
 800dcc6:	f3bf 8f6f 	isb	sy
 800dcca:	e00a      	b.n	800dce2 <prvProcessTimerOrBlockTask+0x6a>
				( void ) xTaskResumeAll();
 800dccc:	f7ff fbae 	bl	800d42c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800dcd0:	4629      	mov	r1, r5
 800dcd2:	4630      	mov	r0, r6
 800dcd4:	f7ff ff9a 	bl	800dc0c <prvProcessExpiredTimer>
 800dcd8:	e003      	b.n	800dce2 <prvProcessTimerOrBlockTask+0x6a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dcda:	461c      	mov	r4, r3
 800dcdc:	e7e2      	b.n	800dca4 <prvProcessTimerOrBlockTask+0x2c>
			( void ) xTaskResumeAll();
 800dcde:	f7ff fba5 	bl	800d42c <xTaskResumeAll>
}
 800dce2:	b002      	add	sp, #8
 800dce4:	bd70      	pop	{r4, r5, r6, pc}
 800dce6:	bf00      	nop
 800dce8:	2400354c 	.word	0x2400354c
 800dcec:	24003548 	.word	0x24003548

0800dcf0 <prvProcessReceivedCommands>:
{
 800dcf0:	b510      	push	{r4, lr}
 800dcf2:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dcf4:	e002      	b.n	800dcfc <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dcf6:	9b04      	ldr	r3, [sp, #16]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	da0f      	bge.n	800dd1c <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	a904      	add	r1, sp, #16
 800dd00:	4b3d      	ldr	r3, [pc, #244]	@ (800ddf8 <prvProcessReceivedCommands+0x108>)
 800dd02:	6818      	ldr	r0, [r3, #0]
 800dd04:	f7fe fe52 	bl	800c9ac <xQueueReceive>
 800dd08:	2800      	cmp	r0, #0
 800dd0a:	d073      	beq.n	800ddf4 <prvProcessReceivedCommands+0x104>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dd0c:	9b04      	ldr	r3, [sp, #16]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	daf1      	bge.n	800dcf6 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800dd12:	9907      	ldr	r1, [sp, #28]
 800dd14:	9806      	ldr	r0, [sp, #24]
 800dd16:	9b05      	ldr	r3, [sp, #20]
 800dd18:	4798      	blx	r3
 800dd1a:	e7ec      	b.n	800dcf6 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800dd1c:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800dd1e:	6963      	ldr	r3, [r4, #20]
 800dd20:	b113      	cbz	r3, 800dd28 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dd22:	1d20      	adds	r0, r4, #4
 800dd24:	f7fe faf8 	bl	800c318 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dd28:	a803      	add	r0, sp, #12
 800dd2a:	f7ff ff59 	bl	800dbe0 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800dd2e:	9b04      	ldr	r3, [sp, #16]
 800dd30:	2b09      	cmp	r3, #9
 800dd32:	d8e3      	bhi.n	800dcfc <prvProcessReceivedCommands+0xc>
 800dd34:	e8df f003 	tbb	[pc, r3]
 800dd38:	30050505 	.word	0x30050505
 800dd3c:	05055037 	.word	0x05055037
 800dd40:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dd42:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800dd46:	f043 0301 	orr.w	r3, r3, #1
 800dd4a:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dd4e:	9b05      	ldr	r3, [sp, #20]
 800dd50:	69a1      	ldr	r1, [r4, #24]
 800dd52:	4602      	mov	r2, r0
 800dd54:	4419      	add	r1, r3
 800dd56:	4620      	mov	r0, r4
 800dd58:	f7ff fe3c 	bl	800d9d4 <prvInsertTimerInActiveList>
 800dd5c:	2800      	cmp	r0, #0
 800dd5e:	d0cd      	beq.n	800dcfc <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dd60:	6a23      	ldr	r3, [r4, #32]
 800dd62:	4620      	mov	r0, r4
 800dd64:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dd66:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800dd6a:	f013 0f04 	tst.w	r3, #4
 800dd6e:	d0c5      	beq.n	800dcfc <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dd70:	69a2      	ldr	r2, [r4, #24]
 800dd72:	2100      	movs	r1, #0
 800dd74:	9100      	str	r1, [sp, #0]
 800dd76:	460b      	mov	r3, r1
 800dd78:	9805      	ldr	r0, [sp, #20]
 800dd7a:	4402      	add	r2, r0
 800dd7c:	4620      	mov	r0, r4
 800dd7e:	f7ff febb 	bl	800daf8 <xTimerGenericCommand>
							configASSERT( xResult );
 800dd82:	2800      	cmp	r0, #0
 800dd84:	d1ba      	bne.n	800dcfc <prvProcessReceivedCommands+0xc>
 800dd86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd8a:	f383 8811 	msr	BASEPRI, r3
 800dd8e:	f3bf 8f6f 	isb	sy
 800dd92:	f3bf 8f4f 	dsb	sy
 800dd96:	e7fe      	b.n	800dd96 <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dd98:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800dd9c:	f023 0301 	bic.w	r3, r3, #1
 800dda0:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					break;
 800dda4:	e7aa      	b.n	800dcfc <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dda6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800ddaa:	f043 0301 	orr.w	r3, r3, #1
 800ddae:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ddb2:	9905      	ldr	r1, [sp, #20]
 800ddb4:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ddb6:	b131      	cbz	r1, 800ddc6 <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ddb8:	4603      	mov	r3, r0
 800ddba:	4602      	mov	r2, r0
 800ddbc:	4401      	add	r1, r0
 800ddbe:	4620      	mov	r0, r4
 800ddc0:	f7ff fe08 	bl	800d9d4 <prvInsertTimerInActiveList>
					break;
 800ddc4:	e79a      	b.n	800dcfc <prvProcessReceivedCommands+0xc>
 800ddc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddca:	f383 8811 	msr	BASEPRI, r3
 800ddce:	f3bf 8f6f 	isb	sy
 800ddd2:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ddd6:	e7fe      	b.n	800ddd6 <prvProcessReceivedCommands+0xe6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ddd8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800dddc:	f013 0f02 	tst.w	r3, #2
 800dde0:	d004      	beq.n	800ddec <prvProcessReceivedCommands+0xfc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dde2:	f023 0301 	bic.w	r3, r3, #1
 800dde6:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 800ddea:	e787      	b.n	800dcfc <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 800ddec:	4620      	mov	r0, r4
 800ddee:	f000 fab3 	bl	800e358 <vPortFree>
 800ddf2:	e783      	b.n	800dcfc <prvProcessReceivedCommands+0xc>
}
 800ddf4:	b008      	add	sp, #32
 800ddf6:	bd10      	pop	{r4, pc}
 800ddf8:	24003548 	.word	0x24003548

0800ddfc <prvTimerTask>:
{
 800ddfc:	b500      	push	{lr}
 800ddfe:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800de00:	a801      	add	r0, sp, #4
 800de02:	f7ff fdd7 	bl	800d9b4 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800de06:	9901      	ldr	r1, [sp, #4]
 800de08:	f7ff ff36 	bl	800dc78 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 800de0c:	f7ff ff70 	bl	800dcf0 <prvProcessReceivedCommands>
	for( ;; )
 800de10:	e7f6      	b.n	800de00 <prvTimerTask+0x4>
	...

0800de14 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800de14:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800de16:	2300      	movs	r3, #0
 800de18:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800de1a:	4b0d      	ldr	r3, [pc, #52]	@ (800de50 <prvTaskExitError+0x3c>)
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de22:	d008      	beq.n	800de36 <prvTaskExitError+0x22>
 800de24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de28:	f383 8811 	msr	BASEPRI, r3
 800de2c:	f3bf 8f6f 	isb	sy
 800de30:	f3bf 8f4f 	dsb	sy
 800de34:	e7fe      	b.n	800de34 <prvTaskExitError+0x20>
 800de36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de3a:	f383 8811 	msr	BASEPRI, r3
 800de3e:	f3bf 8f6f 	isb	sy
 800de42:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800de46:	9b01      	ldr	r3, [sp, #4]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d0fc      	beq.n	800de46 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800de4c:	b002      	add	sp, #8
 800de4e:	4770      	bx	lr
 800de50:	24000010 	.word	0x24000010

0800de54 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800de54:	4808      	ldr	r0, [pc, #32]	@ (800de78 <prvPortStartFirstTask+0x24>)
 800de56:	6800      	ldr	r0, [r0, #0]
 800de58:	6800      	ldr	r0, [r0, #0]
 800de5a:	f380 8808 	msr	MSP, r0
 800de5e:	f04f 0000 	mov.w	r0, #0
 800de62:	f380 8814 	msr	CONTROL, r0
 800de66:	b662      	cpsie	i
 800de68:	b661      	cpsie	f
 800de6a:	f3bf 8f4f 	dsb	sy
 800de6e:	f3bf 8f6f 	isb	sy
 800de72:	df00      	svc	0
 800de74:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800de76:	0000      	.short	0x0000
 800de78:	e000ed08 	.word	0xe000ed08

0800de7c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800de7c:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800de8c <vPortEnableVFP+0x10>
 800de80:	6801      	ldr	r1, [r0, #0]
 800de82:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800de86:	6001      	str	r1, [r0, #0]
 800de88:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800de8a:	0000      	.short	0x0000
 800de8c:	e000ed88 	.word	0xe000ed88

0800de90 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800de90:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800de94:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800de98:	f021 0101 	bic.w	r1, r1, #1
 800de9c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dea0:	4b05      	ldr	r3, [pc, #20]	@ (800deb8 <pxPortInitialiseStack+0x28>)
 800dea2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dea6:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800deaa:	f06f 0302 	mvn.w	r3, #2
 800deae:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800deb2:	3844      	subs	r0, #68	@ 0x44
 800deb4:	4770      	bx	lr
 800deb6:	bf00      	nop
 800deb8:	0800de15 	.word	0x0800de15
 800debc:	00000000 	.word	0x00000000

0800dec0 <SVC_Handler>:
	__asm volatile (
 800dec0:	4b07      	ldr	r3, [pc, #28]	@ (800dee0 <pxCurrentTCBConst2>)
 800dec2:	6819      	ldr	r1, [r3, #0]
 800dec4:	6808      	ldr	r0, [r1, #0]
 800dec6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deca:	f380 8809 	msr	PSP, r0
 800dece:	f3bf 8f6f 	isb	sy
 800ded2:	f04f 0000 	mov.w	r0, #0
 800ded6:	f380 8811 	msr	BASEPRI, r0
 800deda:	4770      	bx	lr
 800dedc:	f3af 8000 	nop.w

0800dee0 <pxCurrentTCBConst2>:
 800dee0:	2400344c 	.word	0x2400344c

0800dee4 <vPortEnterCritical>:
 800dee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dee8:	f383 8811 	msr	BASEPRI, r3
 800deec:	f3bf 8f6f 	isb	sy
 800def0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800def4:	4a0b      	ldr	r2, [pc, #44]	@ (800df24 <vPortEnterCritical+0x40>)
 800def6:	6813      	ldr	r3, [r2, #0]
 800def8:	3301      	adds	r3, #1
 800defa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800defc:	2b01      	cmp	r3, #1
 800defe:	d000      	beq.n	800df02 <vPortEnterCritical+0x1e>
}
 800df00:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800df02:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800df06:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800df0a:	f013 0fff 	tst.w	r3, #255	@ 0xff
 800df0e:	d0f7      	beq.n	800df00 <vPortEnterCritical+0x1c>
 800df10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df14:	f383 8811 	msr	BASEPRI, r3
 800df18:	f3bf 8f6f 	isb	sy
 800df1c:	f3bf 8f4f 	dsb	sy
 800df20:	e7fe      	b.n	800df20 <vPortEnterCritical+0x3c>
 800df22:	bf00      	nop
 800df24:	24000010 	.word	0x24000010

0800df28 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800df28:	4b09      	ldr	r3, [pc, #36]	@ (800df50 <vPortExitCritical+0x28>)
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	b943      	cbnz	r3, 800df40 <vPortExitCritical+0x18>
 800df2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df32:	f383 8811 	msr	BASEPRI, r3
 800df36:	f3bf 8f6f 	isb	sy
 800df3a:	f3bf 8f4f 	dsb	sy
 800df3e:	e7fe      	b.n	800df3e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800df40:	3b01      	subs	r3, #1
 800df42:	4a03      	ldr	r2, [pc, #12]	@ (800df50 <vPortExitCritical+0x28>)
 800df44:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800df46:	b90b      	cbnz	r3, 800df4c <vPortExitCritical+0x24>
	__asm volatile
 800df48:	f383 8811 	msr	BASEPRI, r3
}
 800df4c:	4770      	bx	lr
 800df4e:	bf00      	nop
 800df50:	24000010 	.word	0x24000010
	...

0800df60 <PendSV_Handler>:
	__asm volatile
 800df60:	f3ef 8009 	mrs	r0, PSP
 800df64:	f3bf 8f6f 	isb	sy
 800df68:	4b15      	ldr	r3, [pc, #84]	@ (800dfc0 <pxCurrentTCBConst>)
 800df6a:	681a      	ldr	r2, [r3, #0]
 800df6c:	f01e 0f10 	tst.w	lr, #16
 800df70:	bf08      	it	eq
 800df72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800df76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df7a:	6010      	str	r0, [r2, #0]
 800df7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800df80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800df84:	f380 8811 	msr	BASEPRI, r0
 800df88:	f3bf 8f4f 	dsb	sy
 800df8c:	f3bf 8f6f 	isb	sy
 800df90:	f7ff faee 	bl	800d570 <vTaskSwitchContext>
 800df94:	f04f 0000 	mov.w	r0, #0
 800df98:	f380 8811 	msr	BASEPRI, r0
 800df9c:	bc09      	pop	{r0, r3}
 800df9e:	6819      	ldr	r1, [r3, #0]
 800dfa0:	6808      	ldr	r0, [r1, #0]
 800dfa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfa6:	f01e 0f10 	tst.w	lr, #16
 800dfaa:	bf08      	it	eq
 800dfac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dfb0:	f380 8809 	msr	PSP, r0
 800dfb4:	f3bf 8f6f 	isb	sy
 800dfb8:	4770      	bx	lr
 800dfba:	bf00      	nop
 800dfbc:	f3af 8000 	nop.w

0800dfc0 <pxCurrentTCBConst>:
 800dfc0:	2400344c 	.word	0x2400344c

0800dfc4 <xPortSysTickHandler>:
{
 800dfc4:	b508      	push	{r3, lr}
	__asm volatile
 800dfc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfca:	f383 8811 	msr	BASEPRI, r3
 800dfce:	f3bf 8f6f 	isb	sy
 800dfd2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800dfd6:	f7ff f99d 	bl	800d314 <xTaskIncrementTick>
 800dfda:	b128      	cbz	r0, 800dfe8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dfdc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800dfe0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dfe4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 800dfe8:	2300      	movs	r3, #0
 800dfea:	f383 8811 	msr	BASEPRI, r3
}
 800dfee:	bd08      	pop	{r3, pc}

0800dff0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dff0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800dff4:	2300      	movs	r3, #0
 800dff6:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dff8:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800dffa:	4b05      	ldr	r3, [pc, #20]	@ (800e010 <vPortSetupTimerInterrupt+0x20>)
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	4905      	ldr	r1, [pc, #20]	@ (800e014 <vPortSetupTimerInterrupt+0x24>)
 800e000:	fba1 1303 	umull	r1, r3, r1, r3
 800e004:	099b      	lsrs	r3, r3, #6
 800e006:	3b01      	subs	r3, #1
 800e008:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e00a:	2307      	movs	r3, #7
 800e00c:	6113      	str	r3, [r2, #16]
}
 800e00e:	4770      	bx	lr
 800e010:	24000004 	.word	0x24000004
 800e014:	10624dd3 	.word	0x10624dd3

0800e018 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e018:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e01c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800e020:	4b3d      	ldr	r3, [pc, #244]	@ (800e118 <xPortStartScheduler+0x100>)
 800e022:	429a      	cmp	r2, r3
 800e024:	d01c      	beq.n	800e060 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e026:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e02a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800e02e:	4b3b      	ldr	r3, [pc, #236]	@ (800e11c <xPortStartScheduler+0x104>)
 800e030:	429a      	cmp	r2, r3
 800e032:	d01e      	beq.n	800e072 <xPortStartScheduler+0x5a>
{
 800e034:	b530      	push	{r4, r5, lr}
 800e036:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e038:	4b39      	ldr	r3, [pc, #228]	@ (800e120 <xPortStartScheduler+0x108>)
 800e03a:	781a      	ldrb	r2, [r3, #0]
 800e03c:	b2d2      	uxtb	r2, r2
 800e03e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e040:	22ff      	movs	r2, #255	@ 0xff
 800e042:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e044:	781b      	ldrb	r3, [r3, #0]
 800e046:	b2db      	uxtb	r3, r3
 800e048:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e04c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e050:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e054:	4a33      	ldr	r2, [pc, #204]	@ (800e124 <xPortStartScheduler+0x10c>)
 800e056:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e058:	4b33      	ldr	r3, [pc, #204]	@ (800e128 <xPortStartScheduler+0x110>)
 800e05a:	2207      	movs	r2, #7
 800e05c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e05e:	e01b      	b.n	800e098 <xPortStartScheduler+0x80>
	__asm volatile
 800e060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e064:	f383 8811 	msr	BASEPRI, r3
 800e068:	f3bf 8f6f 	isb	sy
 800e06c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e070:	e7fe      	b.n	800e070 <xPortStartScheduler+0x58>
 800e072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e076:	f383 8811 	msr	BASEPRI, r3
 800e07a:	f3bf 8f6f 	isb	sy
 800e07e:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e082:	e7fe      	b.n	800e082 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 800e084:	4a28      	ldr	r2, [pc, #160]	@ (800e128 <xPortStartScheduler+0x110>)
 800e086:	6813      	ldr	r3, [r2, #0]
 800e088:	3b01      	subs	r3, #1
 800e08a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e08c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e090:	005b      	lsls	r3, r3, #1
 800e092:	b2db      	uxtb	r3, r3
 800e094:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e098:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e09c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e0a0:	d1f0      	bne.n	800e084 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e0a2:	4b21      	ldr	r3, [pc, #132]	@ (800e128 <xPortStartScheduler+0x110>)
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	2b03      	cmp	r3, #3
 800e0a8:	d008      	beq.n	800e0bc <xPortStartScheduler+0xa4>
 800e0aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0ae:	f383 8811 	msr	BASEPRI, r3
 800e0b2:	f3bf 8f6f 	isb	sy
 800e0b6:	f3bf 8f4f 	dsb	sy
 800e0ba:	e7fe      	b.n	800e0ba <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e0bc:	021b      	lsls	r3, r3, #8
 800e0be:	4a1a      	ldr	r2, [pc, #104]	@ (800e128 <xPortStartScheduler+0x110>)
 800e0c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e0c2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e0c6:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e0c8:	9b01      	ldr	r3, [sp, #4]
 800e0ca:	b2db      	uxtb	r3, r3
 800e0cc:	4a14      	ldr	r2, [pc, #80]	@ (800e120 <xPortStartScheduler+0x108>)
 800e0ce:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e0d0:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 800e0d4:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800e0d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e0dc:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e0e0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800e0e4:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e0e8:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800e0ec:	f7ff ff80 	bl	800dff0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800e0f0:	2500      	movs	r5, #0
 800e0f2:	4b0e      	ldr	r3, [pc, #56]	@ (800e12c <xPortStartScheduler+0x114>)
 800e0f4:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800e0f6:	f7ff fec1 	bl	800de7c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e0fa:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800e0fe:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e102:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800e106:	f7ff fea5 	bl	800de54 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800e10a:	f7ff fa31 	bl	800d570 <vTaskSwitchContext>
	prvTaskExitError();
 800e10e:	f7ff fe81 	bl	800de14 <prvTaskExitError>
}
 800e112:	4628      	mov	r0, r5
 800e114:	b003      	add	sp, #12
 800e116:	bd30      	pop	{r4, r5, pc}
 800e118:	410fc271 	.word	0x410fc271
 800e11c:	410fc270 	.word	0x410fc270
 800e120:	e000e400 	.word	0xe000e400
 800e124:	24003580 	.word	0x24003580
 800e128:	2400357c 	.word	0x2400357c
 800e12c:	24000010 	.word	0x24000010

0800e130 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e130:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e134:	2b0f      	cmp	r3, #15
 800e136:	d90f      	bls.n	800e158 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e138:	4a11      	ldr	r2, [pc, #68]	@ (800e180 <vPortValidateInterruptPriority+0x50>)
 800e13a:	5c9b      	ldrb	r3, [r3, r2]
 800e13c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e13e:	4a11      	ldr	r2, [pc, #68]	@ (800e184 <vPortValidateInterruptPriority+0x54>)
 800e140:	7812      	ldrb	r2, [r2, #0]
 800e142:	429a      	cmp	r2, r3
 800e144:	d908      	bls.n	800e158 <vPortValidateInterruptPriority+0x28>
 800e146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e14a:	f383 8811 	msr	BASEPRI, r3
 800e14e:	f3bf 8f6f 	isb	sy
 800e152:	f3bf 8f4f 	dsb	sy
 800e156:	e7fe      	b.n	800e156 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e158:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e15c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800e160:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e164:	4a08      	ldr	r2, [pc, #32]	@ (800e188 <vPortValidateInterruptPriority+0x58>)
 800e166:	6812      	ldr	r2, [r2, #0]
 800e168:	4293      	cmp	r3, r2
 800e16a:	d908      	bls.n	800e17e <vPortValidateInterruptPriority+0x4e>
 800e16c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e170:	f383 8811 	msr	BASEPRI, r3
 800e174:	f3bf 8f6f 	isb	sy
 800e178:	f3bf 8f4f 	dsb	sy
 800e17c:	e7fe      	b.n	800e17c <vPortValidateInterruptPriority+0x4c>
	}
 800e17e:	4770      	bx	lr
 800e180:	e000e3f0 	.word	0xe000e3f0
 800e184:	24003580 	.word	0x24003580
 800e188:	2400357c 	.word	0x2400357c

0800e18c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e18c:	4a12      	ldr	r2, [pc, #72]	@ (800e1d8 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e18e:	f012 0f07 	tst.w	r2, #7
 800e192:	d01e      	beq.n	800e1d2 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e194:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e196:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e19a:	f5c1 5370 	rsb	r3, r1, #15360	@ 0x3c00
 800e19e:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e1a0:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e1a2:	480e      	ldr	r0, [pc, #56]	@ (800e1dc <prvHeapInit+0x50>)
 800e1a4:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e1a6:	2100      	movs	r1, #0
 800e1a8:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e1aa:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800e1ac:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e1ae:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800e1b2:	480b      	ldr	r0, [pc, #44]	@ (800e1e0 <prvHeapInit+0x54>)
 800e1b4:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800e1b6:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e1b8:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e1ba:	1a99      	subs	r1, r3, r2
 800e1bc:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e1be:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e1c0:	4b08      	ldr	r3, [pc, #32]	@ (800e1e4 <prvHeapInit+0x58>)
 800e1c2:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e1c4:	4b08      	ldr	r3, [pc, #32]	@ (800e1e8 <prvHeapInit+0x5c>)
 800e1c6:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e1c8:	4b08      	ldr	r3, [pc, #32]	@ (800e1ec <prvHeapInit+0x60>)
 800e1ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e1ce:	601a      	str	r2, [r3, #0]
}
 800e1d0:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e1d2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800e1d6:	e7e4      	b.n	800e1a2 <prvHeapInit+0x16>
 800e1d8:	240035a4 	.word	0x240035a4
 800e1dc:	2400359c 	.word	0x2400359c
 800e1e0:	24003598 	.word	0x24003598
 800e1e4:	24003590 	.word	0x24003590
 800e1e8:	24003594 	.word	0x24003594
 800e1ec:	24003584 	.word	0x24003584

0800e1f0 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e1f0:	4b16      	ldr	r3, [pc, #88]	@ (800e24c <prvInsertBlockIntoFreeList+0x5c>)
 800e1f2:	461a      	mov	r2, r3
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	4283      	cmp	r3, r0
 800e1f8:	d3fb      	bcc.n	800e1f2 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e1fa:	6851      	ldr	r1, [r2, #4]
 800e1fc:	eb02 0c01 	add.w	ip, r2, r1
 800e200:	4584      	cmp	ip, r0
 800e202:	d009      	beq.n	800e218 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e204:	6841      	ldr	r1, [r0, #4]
 800e206:	eb00 0c01 	add.w	ip, r0, r1
 800e20a:	4563      	cmp	r3, ip
 800e20c:	d009      	beq.n	800e222 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e20e:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e210:	4290      	cmp	r0, r2
 800e212:	d019      	beq.n	800e248 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e214:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 800e216:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e218:	6840      	ldr	r0, [r0, #4]
 800e21a:	4401      	add	r1, r0
 800e21c:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800e21e:	4610      	mov	r0, r2
 800e220:	e7f0      	b.n	800e204 <prvInsertBlockIntoFreeList+0x14>
{
 800e222:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e224:	4c0a      	ldr	r4, [pc, #40]	@ (800e250 <prvInsertBlockIntoFreeList+0x60>)
 800e226:	6824      	ldr	r4, [r4, #0]
 800e228:	42a3      	cmp	r3, r4
 800e22a:	d00b      	beq.n	800e244 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e22c:	685b      	ldr	r3, [r3, #4]
 800e22e:	4419      	add	r1, r3
 800e230:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e232:	6813      	ldr	r3, [r2, #0]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 800e238:	4290      	cmp	r0, r2
 800e23a:	d000      	beq.n	800e23e <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e23c:	6010      	str	r0, [r2, #0]
	}
}
 800e23e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e242:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e244:	6004      	str	r4, [r0, #0]
 800e246:	e7f7      	b.n	800e238 <prvInsertBlockIntoFreeList+0x48>
 800e248:	4770      	bx	lr
 800e24a:	bf00      	nop
 800e24c:	2400359c 	.word	0x2400359c
 800e250:	24003598 	.word	0x24003598

0800e254 <pvPortMalloc>:
{
 800e254:	b538      	push	{r3, r4, r5, lr}
 800e256:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800e258:	f7ff f84e 	bl	800d2f8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800e25c:	4b38      	ldr	r3, [pc, #224]	@ (800e340 <pvPortMalloc+0xec>)
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	b1b3      	cbz	r3, 800e290 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e262:	4b38      	ldr	r3, [pc, #224]	@ (800e344 <pvPortMalloc+0xf0>)
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	421c      	tst	r4, r3
 800e268:	d150      	bne.n	800e30c <pvPortMalloc+0xb8>
			if( xWantedSize > 0 )
 800e26a:	2c00      	cmp	r4, #0
 800e26c:	d050      	beq.n	800e310 <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 800e26e:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e272:	f014 0f07 	tst.w	r4, #7
 800e276:	d002      	beq.n	800e27e <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e278:	f022 0207 	bic.w	r2, r2, #7
 800e27c:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e27e:	2a00      	cmp	r2, #0
 800e280:	d055      	beq.n	800e32e <pvPortMalloc+0xda>
 800e282:	4b31      	ldr	r3, [pc, #196]	@ (800e348 <pvPortMalloc+0xf4>)
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	4293      	cmp	r3, r2
 800e288:	d353      	bcc.n	800e332 <pvPortMalloc+0xde>
				pxBlock = xStart.pxNextFreeBlock;
 800e28a:	4930      	ldr	r1, [pc, #192]	@ (800e34c <pvPortMalloc+0xf8>)
 800e28c:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e28e:	e004      	b.n	800e29a <pvPortMalloc+0x46>
			prvHeapInit();
 800e290:	f7ff ff7c 	bl	800e18c <prvHeapInit>
 800e294:	e7e5      	b.n	800e262 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 800e296:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 800e298:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e29a:	6863      	ldr	r3, [r4, #4]
 800e29c:	4293      	cmp	r3, r2
 800e29e:	d202      	bcs.n	800e2a6 <pvPortMalloc+0x52>
 800e2a0:	6823      	ldr	r3, [r4, #0]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d1f7      	bne.n	800e296 <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 800e2a6:	4b26      	ldr	r3, [pc, #152]	@ (800e340 <pvPortMalloc+0xec>)
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	42a3      	cmp	r3, r4
 800e2ac:	d043      	beq.n	800e336 <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e2ae:	680d      	ldr	r5, [r1, #0]
 800e2b0:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e2b2:	6823      	ldr	r3, [r4, #0]
 800e2b4:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e2b6:	6863      	ldr	r3, [r4, #4]
 800e2b8:	1a9b      	subs	r3, r3, r2
 800e2ba:	2b10      	cmp	r3, #16
 800e2bc:	d910      	bls.n	800e2e0 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e2be:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e2c0:	f010 0f07 	tst.w	r0, #7
 800e2c4:	d008      	beq.n	800e2d8 <pvPortMalloc+0x84>
 800e2c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2ca:	f383 8811 	msr	BASEPRI, r3
 800e2ce:	f3bf 8f6f 	isb	sy
 800e2d2:	f3bf 8f4f 	dsb	sy
 800e2d6:	e7fe      	b.n	800e2d6 <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e2d8:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e2da:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e2dc:	f7ff ff88 	bl	800e1f0 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e2e0:	6862      	ldr	r2, [r4, #4]
 800e2e2:	4919      	ldr	r1, [pc, #100]	@ (800e348 <pvPortMalloc+0xf4>)
 800e2e4:	680b      	ldr	r3, [r1, #0]
 800e2e6:	1a9b      	subs	r3, r3, r2
 800e2e8:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e2ea:	4919      	ldr	r1, [pc, #100]	@ (800e350 <pvPortMalloc+0xfc>)
 800e2ec:	6809      	ldr	r1, [r1, #0]
 800e2ee:	428b      	cmp	r3, r1
 800e2f0:	d201      	bcs.n	800e2f6 <pvPortMalloc+0xa2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e2f2:	4917      	ldr	r1, [pc, #92]	@ (800e350 <pvPortMalloc+0xfc>)
 800e2f4:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e2f6:	4b13      	ldr	r3, [pc, #76]	@ (800e344 <pvPortMalloc+0xf0>)
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	4313      	orrs	r3, r2
 800e2fc:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e2fe:	2300      	movs	r3, #0
 800e300:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 800e302:	4a14      	ldr	r2, [pc, #80]	@ (800e354 <pvPortMalloc+0x100>)
 800e304:	6813      	ldr	r3, [r2, #0]
 800e306:	3301      	adds	r3, #1
 800e308:	6013      	str	r3, [r2, #0]
 800e30a:	e002      	b.n	800e312 <pvPortMalloc+0xbe>
void *pvReturn = NULL;
 800e30c:	2500      	movs	r5, #0
 800e30e:	e000      	b.n	800e312 <pvPortMalloc+0xbe>
 800e310:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 800e312:	f7ff f88b 	bl	800d42c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e316:	f015 0f07 	tst.w	r5, #7
 800e31a:	d00e      	beq.n	800e33a <pvPortMalloc+0xe6>
 800e31c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e320:	f383 8811 	msr	BASEPRI, r3
 800e324:	f3bf 8f6f 	isb	sy
 800e328:	f3bf 8f4f 	dsb	sy
 800e32c:	e7fe      	b.n	800e32c <pvPortMalloc+0xd8>
void *pvReturn = NULL;
 800e32e:	2500      	movs	r5, #0
 800e330:	e7ef      	b.n	800e312 <pvPortMalloc+0xbe>
 800e332:	2500      	movs	r5, #0
 800e334:	e7ed      	b.n	800e312 <pvPortMalloc+0xbe>
 800e336:	2500      	movs	r5, #0
 800e338:	e7eb      	b.n	800e312 <pvPortMalloc+0xbe>
}
 800e33a:	4628      	mov	r0, r5
 800e33c:	bd38      	pop	{r3, r4, r5, pc}
 800e33e:	bf00      	nop
 800e340:	24003598 	.word	0x24003598
 800e344:	24003584 	.word	0x24003584
 800e348:	24003594 	.word	0x24003594
 800e34c:	2400359c 	.word	0x2400359c
 800e350:	24003590 	.word	0x24003590
 800e354:	2400358c 	.word	0x2400358c

0800e358 <vPortFree>:
	if( pv != NULL )
 800e358:	2800      	cmp	r0, #0
 800e35a:	d034      	beq.n	800e3c6 <vPortFree+0x6e>
{
 800e35c:	b538      	push	{r3, r4, r5, lr}
 800e35e:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800e360:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e364:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800e368:	4a17      	ldr	r2, [pc, #92]	@ (800e3c8 <vPortFree+0x70>)
 800e36a:	6812      	ldr	r2, [r2, #0]
 800e36c:	4213      	tst	r3, r2
 800e36e:	d108      	bne.n	800e382 <vPortFree+0x2a>
 800e370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e374:	f383 8811 	msr	BASEPRI, r3
 800e378:	f3bf 8f6f 	isb	sy
 800e37c:	f3bf 8f4f 	dsb	sy
 800e380:	e7fe      	b.n	800e380 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e382:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800e386:	b141      	cbz	r1, 800e39a <vPortFree+0x42>
 800e388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e38c:	f383 8811 	msr	BASEPRI, r3
 800e390:	f3bf 8f6f 	isb	sy
 800e394:	f3bf 8f4f 	dsb	sy
 800e398:	e7fe      	b.n	800e398 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e39a:	ea23 0302 	bic.w	r3, r3, r2
 800e39e:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800e3a2:	f7fe ffa9 	bl	800d2f8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e3a6:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800e3aa:	4a08      	ldr	r2, [pc, #32]	@ (800e3cc <vPortFree+0x74>)
 800e3ac:	6813      	ldr	r3, [r2, #0]
 800e3ae:	440b      	add	r3, r1
 800e3b0:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e3b2:	4628      	mov	r0, r5
 800e3b4:	f7ff ff1c 	bl	800e1f0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e3b8:	4a05      	ldr	r2, [pc, #20]	@ (800e3d0 <vPortFree+0x78>)
 800e3ba:	6813      	ldr	r3, [r2, #0]
 800e3bc:	3301      	adds	r3, #1
 800e3be:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800e3c0:	f7ff f834 	bl	800d42c <xTaskResumeAll>
}
 800e3c4:	bd38      	pop	{r3, r4, r5, pc}
 800e3c6:	4770      	bx	lr
 800e3c8:	24003584 	.word	0x24003584
 800e3cc:	24003594 	.word	0x24003594
 800e3d0:	24003588 	.word	0x24003588

0800e3d4 <_Z11StartupLEDSP4LEDS>:
/**
 * @brief LEDs after initialization
 *
 * @param input leds: LEDS instance pointer
 */
void StartupLEDS(LEDS* leds) {
 800e3d4:	b510      	push	{r4, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	b086      	sub	sp, #24
 800e3da:	4604      	mov	r4, r0
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800e3dc:	2001      	movs	r0, #1
 800e3de:	9305      	str	r3, [sp, #20]
 800e3e0:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800e3e4:	f00b fa19 	bl	801981a <_Znwj>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800e3e8:	2205      	movs	r2, #5
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800e3ea:	1c43      	adds	r3, r0, #1
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800e3ec:	9003      	str	r0, [sp, #12]
 800e3ee:	7002      	strb	r2, [r0, #0]
#ifdef USE_SMD_LEDs
	leds->ConfigureTimings(LED_STATUS, std::vector<uint8_t>{5}, 10);
 800e3f0:	2107      	movs	r1, #7
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800e3f2:	9305      	str	r3, [sp, #20]
 800e3f4:	aa03      	add	r2, sp, #12
	  this->_M_impl._M_finish =
 800e3f6:	9304      	str	r3, [sp, #16]
 800e3f8:	4620      	mov	r0, r4
 800e3fa:	230a      	movs	r3, #10
 800e3fc:	f005 ff79 	bl	80142f2 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
	_M_deallocate(_M_impl._M_start,
 800e400:	9803      	ldr	r0, [sp, #12]
	if (__p)
 800e402:	b118      	cbz	r0, 800e40c <_Z11StartupLEDSP4LEDS+0x38>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800e404:	9905      	ldr	r1, [sp, #20]
 800e406:	1a09      	subs	r1, r1, r0
 800e408:	f00b f9e2 	bl	80197d0 <_ZdlPvj>
	leds->Blink(LED_STATUS); // blink until ID allocated
 800e40c:	2107      	movs	r1, #7
 800e40e:	4620      	mov	r0, r4
 800e410:	f005 fa19 	bl	8013846 <_ZN4LEDS5BlinkEh>

	leds->SetRGB(LED_RGB, 0, 0, 0);
 800e414:	2300      	movs	r3, #0
 800e416:	210d      	movs	r1, #13
 800e418:	4620      	mov	r0, r4
 800e41a:	461a      	mov	r2, r3
 800e41c:	9300      	str	r3, [sp, #0]
 800e41e:	f005 fa6c 	bl	80138fa <_ZN4LEDS6SetRGBEhhhh>
#endif
}
 800e422:	b006      	add	sp, #24
 800e424:	bd10      	pop	{r4, pc}

0800e426 <_Z11IDFoundLEDSP4LEDS>:
 *
 * @param input leds: LEDS instance pointer
 */
void IDFoundLEDS(LEDS* leds) {
#ifdef USE_SMD_LEDs
	leds->SetLED(LED_STATUS, GPIO_PIN_SET);
 800e426:	2201      	movs	r2, #1
 800e428:	2107      	movs	r1, #7
 800e42a:	f005 b9eb 	b.w	8013804 <_ZN4LEDS6SetLEDEh13GPIO_PinState>

0800e42e <_Z16CommunicationLEDP4LEDSh>:
 * @param input leds: LEDS instance pointer
 * @param input interface_ID: the interface from Communication that asks for a LED single blinking. The ID should be the same than the LED ID
 */
void CommunicationLED(LEDS* leds, uint8_t interface_ID) {
#ifdef USE_SMD_LEDs
	if (interface_ID == UART_PIC || interface_ID == UART_EXTENSION) return; // no LED for these interfaces
 800e42e:	1f4b      	subs	r3, r1, #5
 800e430:	2b01      	cmp	r3, #1
 800e432:	d901      	bls.n	800e438 <_Z16CommunicationLEDP4LEDSh+0xa>

	leds->BlinkOnce(interface_ID);
 800e434:	f005 ba2a 	b.w	801388c <_ZN4LEDS9BlinkOnceEh>
#endif
}
 800e438:	4770      	bx	lr
	...

0800e43c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>:
 *
 * @param output success: whether successful
 * @return the type ID corresponding to the input template type
 */
template <typename T>
uint8_t Registers::GetTypeID (bool* success) {
 800e43c:	b510      	push	{r4, lr}
	uint8_t type = 0;

	if (false) {}
#ifdef USE_UINT8_REGISTER
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800e43e:	4926      	ldr	r1, [pc, #152]	@ (800e4d8 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 800e440:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800e442:	4826      	ldr	r0, [pc, #152]	@ (800e4dc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800e444:	f00b fa80 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 800e448:	2800      	cmp	r0, #0
 800e44a:	d133      	bne.n	800e4b4 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x78>
#endif
#ifdef USE_UINT16_REGISTER
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800e44c:	4924      	ldr	r1, [pc, #144]	@ (800e4e0 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa4>)
 800e44e:	4823      	ldr	r0, [pc, #140]	@ (800e4dc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800e450:	f00b fa7a 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 800e454:	2800      	cmp	r0, #0
 800e456:	d12f      	bne.n	800e4b8 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x7c>
#endif
#ifdef USE_UINT32_REGISTER
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800e458:	4922      	ldr	r1, [pc, #136]	@ (800e4e4 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa8>)
 800e45a:	4820      	ldr	r0, [pc, #128]	@ (800e4dc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800e45c:	f00b fa74 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 800e460:	bb60      	cbnz	r0, 800e4bc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>
#endif
#ifdef USE_UINT64_REGISTER
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800e462:	4921      	ldr	r1, [pc, #132]	@ (800e4e8 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xac>)
 800e464:	481d      	ldr	r0, [pc, #116]	@ (800e4dc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800e466:	f00b fa6f 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 800e46a:	bb48      	cbnz	r0, 800e4c0 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x84>
#endif
#ifdef USE_INT8_REGISTER
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800e46c:	491f      	ldr	r1, [pc, #124]	@ (800e4ec <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xb0>)
 800e46e:	481b      	ldr	r0, [pc, #108]	@ (800e4dc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800e470:	f00b fa6a 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 800e474:	bb30      	cbnz	r0, 800e4c4 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x88>
#endif
#ifdef USE_INT16_REGISTER
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 800e476:	491e      	ldr	r1, [pc, #120]	@ (800e4f0 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xb4>)
 800e478:	4818      	ldr	r0, [pc, #96]	@ (800e4dc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800e47a:	f00b fa65 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 800e47e:	bb18      	cbnz	r0, 800e4c8 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x8c>
#endif
#ifdef USE_INT32_REGISTER
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800e480:	491c      	ldr	r1, [pc, #112]	@ (800e4f4 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xb8>)
 800e482:	4816      	ldr	r0, [pc, #88]	@ (800e4dc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800e484:	f00b fa60 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 800e488:	bb00      	cbnz	r0, 800e4cc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x90>
#endif
#ifdef USE_INT64_REGISTER
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 800e48a:	491b      	ldr	r1, [pc, #108]	@ (800e4f8 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xbc>)
 800e48c:	4813      	ldr	r0, [pc, #76]	@ (800e4dc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800e48e:	f00b fa5b 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 800e492:	b9e8      	cbnz	r0, 800e4d0 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x94>
#endif
#ifdef USE_FLOAT_REGISTER
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800e494:	4911      	ldr	r1, [pc, #68]	@ (800e4dc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800e496:	4608      	mov	r0, r1
 800e498:	f00b fa56 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 800e49c:	b9d0      	cbnz	r0, 800e4d4 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x98>
#endif
#ifdef USE_DOUBLE_REGISTER
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 800e49e:	4917      	ldr	r1, [pc, #92]	@ (800e4fc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xc0>)
 800e4a0:	480e      	ldr	r0, [pc, #56]	@ (800e4dc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800e4a2:	f00b fa51 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
#endif
	else {*success = false; return 0;}
 800e4a6:	2800      	cmp	r0, #0
 800e4a8:	bf14      	ite	ne
 800e4aa:	2309      	movne	r3, #9
 800e4ac:	2300      	moveq	r3, #0
 800e4ae:	7020      	strb	r0, [r4, #0]

	*success = true;
	return type;
}
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	e7fa      	b.n	800e4ae <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800e4b8:	2301      	movs	r3, #1
 800e4ba:	e7f8      	b.n	800e4ae <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800e4bc:	2302      	movs	r3, #2
 800e4be:	e7f6      	b.n	800e4ae <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800e4c0:	2303      	movs	r3, #3
 800e4c2:	e7f4      	b.n	800e4ae <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800e4c4:	2304      	movs	r3, #4
 800e4c6:	e7f2      	b.n	800e4ae <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 800e4c8:	2305      	movs	r3, #5
 800e4ca:	e7f0      	b.n	800e4ae <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800e4cc:	2306      	movs	r3, #6
 800e4ce:	e7ee      	b.n	800e4ae <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 800e4d0:	2307      	movs	r3, #7
 800e4d2:	e7ec      	b.n	800e4ae <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800e4d4:	2308      	movs	r3, #8
 800e4d6:	e7ea      	b.n	800e4ae <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
 800e4d8:	0801a298 	.word	0x0801a298
 800e4dc:	0801a260 	.word	0x0801a260
 800e4e0:	0801a288 	.word	0x0801a288
 800e4e4:	0801a278 	.word	0x0801a278
 800e4e8:	0801a268 	.word	0x0801a268
 800e4ec:	0801a2a0 	.word	0x0801a2a0
 800e4f0:	0801a290 	.word	0x0801a290
 800e4f4:	0801a280 	.word	0x0801a280
 800e4f8:	0801a270 	.word	0x0801a270
 800e4fc:	0801a258 	.word	0x0801a258

0800e500 <_ZN15PlatformSensorsC1Ev>:
/**
 * @brief Class constructor
 */
PlatformSensors::PlatformSensors() {

}
 800e500:	4770      	bx	lr
	...

0800e504 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb>:
 * @param output length: output length
 * @param input use_semaphore: false to disable the use of semaphores for this access. DEFAULT=true
 * @return whether successful
 */
template <typename T>
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 800e504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e508:	f2ad 4d14 	subw	sp, sp, #1044	@ 0x414
 800e50c:	4689      	mov	r9, r1
	bool success;
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800e50e:	f04f 31ff 	mov.w	r1, #4294967295
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 800e512:	461f      	mov	r7, r3
 800e514:	9000      	str	r0, [sp, #0]
 800e516:	4614      	mov	r4, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800e518:	6800      	ldr	r0, [r0, #0]
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 800e51a:	f89d b438 	ldrb.w	fp, [sp, #1080]	@ 0x438
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800e51e:	f7fd fe4d 	bl	800c1bc <osSemaphoreAcquire>
	// Find register
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 800e522:	f10d 020f 	add.w	r2, sp, #15
 800e526:	4649      	mov	r1, r9
 800e528:	9800      	ldr	r0, [sp, #0]
 800e52a:	f008 fdd2 	bl	80170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 800e52e:	f89d 300f 	ldrb.w	r3, [sp, #15]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 800e532:	4605      	mov	r5, r0
	if (!success) {
 800e534:	b953      	cbnz	r3, 800e54c <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x48>
	}

	// Get type ID
	uint8_t registered_type = GetTypeID<T>(&success);
	if (!success) {
		osSemaphoreRelease(RegistersSemaphore);
 800e536:	9b00      	ldr	r3, [sp, #0]
		return false;
 800e538:	f04f 0a00 	mov.w	sl, #0
		osSemaphoreRelease(RegistersSemaphore);
 800e53c:	6818      	ldr	r0, [r3, #0]
 800e53e:	f7fd fe71 	bl	800c224 <osSemaphoreRelease>
		osSemaphoreRelease(RegistersSemaphore);
		return true;
	}
	osSemaphoreRelease(RegistersSemaphore);
	return true;
}
 800e542:	4650      	mov	r0, sl
 800e544:	f20d 4d14 	addw	sp, sp, #1044	@ 0x414
 800e548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 800e54c:	f10d 000f 	add.w	r0, sp, #15
 800e550:	f7ff ff74 	bl	800e43c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>
	if (!success) {
 800e554:	f89d a00f 	ldrb.w	sl, [sp, #15]
 800e558:	f1ba 0f00 	cmp.w	sl, #0
 800e55c:	d0eb      	beq.n	800e536 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x32>
	if (target_register->register_info.type != registered_type) {
 800e55e:	792b      	ldrb	r3, [r5, #4]
 800e560:	4283      	cmp	r3, r0
 800e562:	d1e8      	bne.n	800e536 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x32>
	if (callbacks[target_register->register_info.type] == NULL) {
 800e564:	3304      	adds	r3, #4
 800e566:	9a00      	ldr	r2, [sp, #0]
 800e568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d0e2      	beq.n	800e536 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x32>
	if (target_register->access.read) {
 800e570:	7a6a      	ldrb	r2, [r5, #9]
 800e572:	2a00      	cmp	r2, #0
 800e574:	d05f      	beq.n	800e636 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x132>
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 800e576:	8969      	ldrh	r1, [r5, #10]
		success = false; // false by default to use pointer mode if the callback doesn't update the flag
 800e578:	2200      	movs	r2, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800e57a:	e9d3 0300 	ldrd	r0, r3, [r3]
 800e57e:	f88d 200f 	strb.w	r2, [sp, #15]
 800e582:	1a1b      	subs	r3, r3, r0
	if (__n >= this->size())
 800e584:	ebb1 1f23 	cmp.w	r1, r3, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800e588:	ea4f 1223 	mov.w	r2, r3, asr #4
	if (__n >= this->size())
 800e58c:	d302      	bcc.n	800e594 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x90>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 800e58e:	4839      	ldr	r0, [pc, #228]	@ (800e674 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x170>)
 800e590:	f00b f9fb 	bl	801998a <_ZSt24__throw_out_of_range_fmtPKcz>
	return *(this->_M_impl._M_start + __n);
 800e594:	010b      	lsls	r3, r1, #4
 800e596:	eb00 1101 	add.w	r1, r0, r1, lsl #4
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 800e59a:	f850 8003 	ldr.w	r8, [r0, r3]
 800e59e:	684b      	ldr	r3, [r1, #4]
 800e5a0:	9301      	str	r3, [sp, #4]
 800e5a2:	68cb      	ldr	r3, [r1, #12]
 800e5a4:	461e      	mov	r6, r3
		if (use_semaphore && target_register->register_semaphore != NULL) {
 800e5a6:	f1bb 0f00 	cmp.w	fp, #0
 800e5aa:	d006      	beq.n	800e5ba <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xb6>
 800e5ac:	68eb      	ldr	r3, [r5, #12]
 800e5ae:	b123      	cbz	r3, 800e5ba <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xb6>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 800e5b0:	f04f 31ff 	mov.w	r1, #4294967295
 800e5b4:	6818      	ldr	r0, [r3, #0]
 800e5b6:	f7fd fe01 	bl	800c1bc <osSemaphoreAcquire>
		if (target_register->mode.callbacks) {
 800e5ba:	786b      	ldrb	r3, [r5, #1]
 800e5bc:	b1e3      	cbz	r3, 800e5f8 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xf4>
			if (output != NULL) {
 800e5be:	2c00      	cmp	r4, #0
 800e5c0:	d03e      	beq.n	800e640 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x13c>
				*callback_output = output;
 800e5c2:	4622      	mov	r2, r4
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	601a      	str	r2, [r3, #0]
			if (callbacks.read != NULL) {
 800e5c8:	b1b6      	cbz	r6, 800e5f8 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xf4>
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 800e5ca:	463b      	mov	r3, r7
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	4649      	mov	r1, r9
 800e5d0:	9801      	ldr	r0, [sp, #4]
 800e5d2:	47b0      	blx	r6
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 800e5d4:	796b      	ldrb	r3, [r5, #5]
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 800e5d6:	f88d 000f 	strb.w	r0, [sp, #15]
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d032      	beq.n	800e644 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x140>
 800e5de:	88eb      	ldrh	r3, [r5, #6]
 800e5e0:	b103      	cbz	r3, 800e5e4 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xe0>
					*length = 1;
 800e5e2:	803b      	strh	r3, [r7, #0]
				if (*callback_output != output && output != NULL) {
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	6819      	ldr	r1, [r3, #0]
 800e5e8:	42a1      	cmp	r1, r4
 800e5ea:	d005      	beq.n	800e5f8 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xf4>
 800e5ec:	b124      	cbz	r4, 800e5f8 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xf4>
						output[index] = (*callback_output )[index];
 800e5ee:	883a      	ldrh	r2, [r7, #0]
 800e5f0:	4620      	mov	r0, r4
 800e5f2:	0092      	lsls	r2, r2, #2
 800e5f4:	f00b fb96 	bl	8019d24 <memcpy>
		if (not success && target_register->mode.pointer) {
 800e5f8:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800e5fc:	b99b      	cbnz	r3, 800e626 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x122>
 800e5fe:	782b      	ldrb	r3, [r5, #0]
 800e600:	b18b      	cbz	r3, 800e626 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x122>
			success = true;
 800e602:	2301      	movs	r3, #1
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 800e604:	796a      	ldrb	r2, [r5, #5]
			success = true;
 800e606:	f88d 300f 	strb.w	r3, [sp, #15]
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 800e60a:	b35a      	cbz	r2, 800e664 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x160>
 800e60c:	88ea      	ldrh	r2, [r5, #6]
 800e60e:	bb02      	cbnz	r2, 800e652 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x14e>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800e610:	e9d8 2300 	ldrd	r2, r3, [r8]
 800e614:	1a9b      	subs	r3, r3, r2
 800e616:	109b      	asrs	r3, r3, #2
				*length = register_vector->size();
 800e618:	803b      	strh	r3, [r7, #0]
				if (output != NULL) {
 800e61a:	b124      	cbz	r4, 800e626 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x122>
 800e61c:	b29b      	uxth	r3, r3
 800e61e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
					for (uint16_t index = 0; index < *length; index++) {
 800e622:	429a      	cmp	r2, r3
 800e624:	d110      	bne.n	800e648 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x144>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 800e626:	f1bb 0f00 	cmp.w	fp, #0
 800e62a:	d004      	beq.n	800e636 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x132>
 800e62c:	68eb      	ldr	r3, [r5, #12]
 800e62e:	b113      	cbz	r3, 800e636 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x132>
			osSemaphoreRelease(*(target_register->register_semaphore));
 800e630:	6818      	ldr	r0, [r3, #0]
 800e632:	f7fd fdf7 	bl	800c224 <osSemaphoreRelease>
	osSemaphoreRelease(RegistersSemaphore);
 800e636:	9b00      	ldr	r3, [sp, #0]
 800e638:	6818      	ldr	r0, [r3, #0]
 800e63a:	f7fd fdf3 	bl	800c224 <osSemaphoreRelease>
	return true;
 800e63e:	e780      	b.n	800e542 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x3e>
				*callback_output = output_buffer; // use a temporary buffer to store values if not input. TODO the size is limited so there is possibly an issue if output == NULL and length > 256
 800e640:	aa04      	add	r2, sp, #16
 800e642:	e7bf      	b.n	800e5c4 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xc0>
					*length = 1;
 800e644:	2301      	movs	r3, #1
 800e646:	e7cc      	b.n	800e5e2 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xde>
						output[index] = (*register_vector)[index];
 800e648:	f852 1b04 	ldr.w	r1, [r2], #4
 800e64c:	f844 1b04 	str.w	r1, [r4], #4
					for (uint16_t index = 0; index < *length; index++) {
 800e650:	e7e7      	b.n	800e622 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x11e>
				*length = target_register->register_info.length;
 800e652:	803a      	strh	r2, [r7, #0]
				if (output != NULL) {
 800e654:	2c00      	cmp	r4, #0
 800e656:	d0e6      	beq.n	800e626 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x122>
 800e658:	0092      	lsls	r2, r2, #2
 800e65a:	4641      	mov	r1, r8
 800e65c:	4620      	mov	r0, r4
 800e65e:	f00b fa69 	bl	8019b34 <memmove>
	  return __result + _Num;
 800e662:	e7e0      	b.n	800e626 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x122>
				*length = 1;
 800e664:	803b      	strh	r3, [r7, #0]
				if (output != NULL) {
 800e666:	2c00      	cmp	r4, #0
 800e668:	d0dd      	beq.n	800e626 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x122>
					*output = *callbacks.pointer;
 800e66a:	f8d8 3000 	ldr.w	r3, [r8]
 800e66e:	6023      	str	r3, [r4, #0]
 800e670:	e7d9      	b.n	800e626 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x122>
 800e672:	bf00      	nop
 800e674:	0801a080 	.word	0x0801a080

0800e678 <_ZNSt12_Vector_baseIP21CommunicationProtocolSaIS1_EE13_M_deallocateEPS1_j.part.0>:
 800e678:	0089      	lsls	r1, r1, #2
 800e67a:	f00b b8a9 	b.w	80197d0 <_ZdlPvj>

0800e67e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
 800e67e:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800e680:	b170      	cbz	r0, 800e6a0 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0+0x22>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800e682:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 800e686:	d306      	bcc.n	800e696 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0+0x18>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800e688:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800e68c:	d301      	bcc.n	800e692 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0+0x14>
	      std::__throw_bad_array_new_length();
 800e68e:	f00b f976 	bl	801997e <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800e692:	f00b f971 	bl	8019978 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800e696:	0080      	lsls	r0, r0, #2
      }
 800e698:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e69c:	f00b b8bd 	b.w	801981a <_Znwj>
 800e6a0:	bd08      	pop	{r3, pc}

0800e6a2 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800e6a2:	2800      	cmp	r0, #0
      _M_allocate(size_t __n)
 800e6a4:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800e6a6:	d006      	beq.n	800e6b6 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0+0x14>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800e6a8:	da01      	bge.n	800e6ae <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0+0xc>
	    std::__throw_bad_alloc();
 800e6aa:	f00b f965 	bl	8019978 <_ZSt17__throw_bad_allocv>
      }
 800e6ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800e6b2:	f00b b8b2 	b.w	801981a <_Znwj>
 800e6b6:	bd08      	pop	{r3, pc}

0800e6b8 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
 800e6b8:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800e6ba:	b170      	cbz	r0, 800e6da <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0+0x22>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800e6bc:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 800e6c0:	d306      	bcc.n	800e6d0 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0+0x18>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800e6c2:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800e6c6:	d301      	bcc.n	800e6cc <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0+0x14>
	      std::__throw_bad_array_new_length();
 800e6c8:	f00b f959 	bl	801997e <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800e6cc:	f00b f954 	bl	8019978 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800e6d0:	0080      	lsls	r0, r0, #2
      }
 800e6d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e6d6:	f00b b8a0 	b.w	801981a <_Znwj>
 800e6da:	bd08      	pop	{r3, pc}

0800e6dc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 800e6dc:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800e6de:	4926      	ldr	r1, [pc, #152]	@ (800e778 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 800e6e0:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800e6e2:	4826      	ldr	r0, [pc, #152]	@ (800e77c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800e6e4:	f00b f930 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 800e6e8:	2800      	cmp	r0, #0
 800e6ea:	d133      	bne.n	800e754 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800e6ec:	4924      	ldr	r1, [pc, #144]	@ (800e780 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa4>)
 800e6ee:	4823      	ldr	r0, [pc, #140]	@ (800e77c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800e6f0:	f00b f92a 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 800e6f4:	2800      	cmp	r0, #0
 800e6f6:	d12f      	bne.n	800e758 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800e6f8:	4922      	ldr	r1, [pc, #136]	@ (800e784 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa8>)
 800e6fa:	4820      	ldr	r0, [pc, #128]	@ (800e77c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800e6fc:	f00b f924 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 800e700:	bb60      	cbnz	r0, 800e75c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800e702:	4921      	ldr	r1, [pc, #132]	@ (800e788 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xac>)
 800e704:	481d      	ldr	r0, [pc, #116]	@ (800e77c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800e706:	f00b f91f 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 800e70a:	bb48      	cbnz	r0, 800e760 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800e70c:	491f      	ldr	r1, [pc, #124]	@ (800e78c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xb0>)
 800e70e:	481b      	ldr	r0, [pc, #108]	@ (800e77c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800e710:	f00b f91a 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 800e714:	bb30      	cbnz	r0, 800e764 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 800e716:	491e      	ldr	r1, [pc, #120]	@ (800e790 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xb4>)
 800e718:	4818      	ldr	r0, [pc, #96]	@ (800e77c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800e71a:	f00b f915 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 800e71e:	bb18      	cbnz	r0, 800e768 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800e720:	491c      	ldr	r1, [pc, #112]	@ (800e794 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xb8>)
 800e722:	4816      	ldr	r0, [pc, #88]	@ (800e77c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800e724:	f00b f910 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 800e728:	bb00      	cbnz	r0, 800e76c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 800e72a:	491b      	ldr	r1, [pc, #108]	@ (800e798 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xbc>)
 800e72c:	4813      	ldr	r0, [pc, #76]	@ (800e77c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800e72e:	f00b f90b 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 800e732:	b9e8      	cbnz	r0, 800e770 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800e734:	4911      	ldr	r1, [pc, #68]	@ (800e77c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800e736:	4608      	mov	r0, r1
 800e738:	f00b f906 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 800e73c:	b9d0      	cbnz	r0, 800e774 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 800e73e:	4917      	ldr	r1, [pc, #92]	@ (800e79c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xc0>)
 800e740:	480e      	ldr	r0, [pc, #56]	@ (800e77c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800e742:	f00b f901 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 800e746:	2800      	cmp	r0, #0
 800e748:	bf14      	ite	ne
 800e74a:	2309      	movne	r3, #9
 800e74c:	2300      	moveq	r3, #0
 800e74e:	7020      	strb	r0, [r4, #0]
}
 800e750:	4618      	mov	r0, r3
 800e752:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800e754:	2300      	movs	r3, #0
 800e756:	e7fa      	b.n	800e74e <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800e758:	2301      	movs	r3, #1
 800e75a:	e7f8      	b.n	800e74e <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800e75c:	2302      	movs	r3, #2
 800e75e:	e7f6      	b.n	800e74e <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800e760:	2303      	movs	r3, #3
 800e762:	e7f4      	b.n	800e74e <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800e764:	2304      	movs	r3, #4
 800e766:	e7f2      	b.n	800e74e <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 800e768:	2305      	movs	r3, #5
 800e76a:	e7f0      	b.n	800e74e <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800e76c:	2306      	movs	r3, #6
 800e76e:	e7ee      	b.n	800e74e <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 800e770:	2307      	movs	r3, #7
 800e772:	e7ec      	b.n	800e74e <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800e774:	2308      	movs	r3, #8
 800e776:	e7ea      	b.n	800e74e <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
 800e778:	0801a298 	.word	0x0801a298
 800e77c:	0801a260 	.word	0x0801a260
 800e780:	0801a288 	.word	0x0801a288
 800e784:	0801a278 	.word	0x0801a278
 800e788:	0801a268 	.word	0x0801a268
 800e78c:	0801a2a0 	.word	0x0801a2a0
 800e790:	0801a290 	.word	0x0801a290
 800e794:	0801a280 	.word	0x0801a280
 800e798:	0801a270 	.word	0x0801a270
 800e79c:	0801a258 	.word	0x0801a258

0800e7a0 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 800e7a0:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800e7a2:	4926      	ldr	r1, [pc, #152]	@ (800e83c <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 800e7a4:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800e7a6:	4826      	ldr	r0, [pc, #152]	@ (800e840 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 800e7a8:	f00b f8ce 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 800e7ac:	2800      	cmp	r0, #0
 800e7ae:	d133      	bne.n	800e818 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800e7b0:	4924      	ldr	r1, [pc, #144]	@ (800e844 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa4>)
 800e7b2:	4823      	ldr	r0, [pc, #140]	@ (800e840 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 800e7b4:	f00b f8c8 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 800e7b8:	2800      	cmp	r0, #0
 800e7ba:	d12f      	bne.n	800e81c <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800e7bc:	4922      	ldr	r1, [pc, #136]	@ (800e848 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa8>)
 800e7be:	4820      	ldr	r0, [pc, #128]	@ (800e840 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 800e7c0:	f00b f8c2 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 800e7c4:	bb60      	cbnz	r0, 800e820 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800e7c6:	4921      	ldr	r1, [pc, #132]	@ (800e84c <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xac>)
 800e7c8:	481d      	ldr	r0, [pc, #116]	@ (800e840 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 800e7ca:	f00b f8bd 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 800e7ce:	bb48      	cbnz	r0, 800e824 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800e7d0:	491b      	ldr	r1, [pc, #108]	@ (800e840 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 800e7d2:	4608      	mov	r0, r1
 800e7d4:	f00b f8b8 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 800e7d8:	bb30      	cbnz	r0, 800e828 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 800e7da:	491d      	ldr	r1, [pc, #116]	@ (800e850 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xb0>)
 800e7dc:	4818      	ldr	r0, [pc, #96]	@ (800e840 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 800e7de:	f00b f8b3 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 800e7e2:	bb18      	cbnz	r0, 800e82c <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800e7e4:	491b      	ldr	r1, [pc, #108]	@ (800e854 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xb4>)
 800e7e6:	4816      	ldr	r0, [pc, #88]	@ (800e840 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 800e7e8:	f00b f8ae 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 800e7ec:	bb00      	cbnz	r0, 800e830 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 800e7ee:	491a      	ldr	r1, [pc, #104]	@ (800e858 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xb8>)
 800e7f0:	4813      	ldr	r0, [pc, #76]	@ (800e840 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 800e7f2:	f00b f8a9 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 800e7f6:	b9e8      	cbnz	r0, 800e834 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800e7f8:	4918      	ldr	r1, [pc, #96]	@ (800e85c <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xbc>)
 800e7fa:	4811      	ldr	r0, [pc, #68]	@ (800e840 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 800e7fc:	f00b f8a4 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 800e800:	b9d0      	cbnz	r0, 800e838 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 800e802:	4917      	ldr	r1, [pc, #92]	@ (800e860 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xc0>)
 800e804:	480e      	ldr	r0, [pc, #56]	@ (800e840 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 800e806:	f00b f89f 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 800e80a:	2800      	cmp	r0, #0
 800e80c:	bf14      	ite	ne
 800e80e:	2309      	movne	r3, #9
 800e810:	2300      	moveq	r3, #0
 800e812:	7020      	strb	r0, [r4, #0]
}
 800e814:	4618      	mov	r0, r3
 800e816:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800e818:	2300      	movs	r3, #0
 800e81a:	e7fa      	b.n	800e812 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800e81c:	2301      	movs	r3, #1
 800e81e:	e7f8      	b.n	800e812 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800e820:	2302      	movs	r3, #2
 800e822:	e7f6      	b.n	800e812 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800e824:	2303      	movs	r3, #3
 800e826:	e7f4      	b.n	800e812 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800e828:	2304      	movs	r3, #4
 800e82a:	e7f2      	b.n	800e812 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 800e82c:	2305      	movs	r3, #5
 800e82e:	e7f0      	b.n	800e812 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800e830:	2306      	movs	r3, #6
 800e832:	e7ee      	b.n	800e812 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 800e834:	2307      	movs	r3, #7
 800e836:	e7ec      	b.n	800e812 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800e838:	2308      	movs	r3, #8
 800e83a:	e7ea      	b.n	800e812 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
 800e83c:	0801a298 	.word	0x0801a298
 800e840:	0801a2a0 	.word	0x0801a2a0
 800e844:	0801a288 	.word	0x0801a288
 800e848:	0801a278 	.word	0x0801a278
 800e84c:	0801a268 	.word	0x0801a268
 800e850:	0801a290 	.word	0x0801a290
 800e854:	0801a280 	.word	0x0801a280
 800e858:	0801a270 	.word	0x0801a270
 800e85c:	0801a260 	.word	0x0801a260
 800e860:	0801a258 	.word	0x0801a258

0800e864 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 800e864:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800e866:	4926      	ldr	r1, [pc, #152]	@ (800e900 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 800e868:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800e86a:	4826      	ldr	r0, [pc, #152]	@ (800e904 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 800e86c:	f00b f86c 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 800e870:	2800      	cmp	r0, #0
 800e872:	d133      	bne.n	800e8dc <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800e874:	4924      	ldr	r1, [pc, #144]	@ (800e908 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa4>)
 800e876:	4823      	ldr	r0, [pc, #140]	@ (800e904 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 800e878:	f00b f866 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 800e87c:	2800      	cmp	r0, #0
 800e87e:	d12f      	bne.n	800e8e0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800e880:	4920      	ldr	r1, [pc, #128]	@ (800e904 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 800e882:	4608      	mov	r0, r1
 800e884:	f00b f860 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 800e888:	bb60      	cbnz	r0, 800e8e4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800e88a:	4920      	ldr	r1, [pc, #128]	@ (800e90c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa8>)
 800e88c:	481d      	ldr	r0, [pc, #116]	@ (800e904 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 800e88e:	f00b f85b 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 800e892:	bb48      	cbnz	r0, 800e8e8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800e894:	491e      	ldr	r1, [pc, #120]	@ (800e910 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xac>)
 800e896:	481b      	ldr	r0, [pc, #108]	@ (800e904 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 800e898:	f00b f856 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 800e89c:	bb30      	cbnz	r0, 800e8ec <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 800e89e:	491d      	ldr	r1, [pc, #116]	@ (800e914 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xb0>)
 800e8a0:	4818      	ldr	r0, [pc, #96]	@ (800e904 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 800e8a2:	f00b f851 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 800e8a6:	bb18      	cbnz	r0, 800e8f0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800e8a8:	491b      	ldr	r1, [pc, #108]	@ (800e918 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xb4>)
 800e8aa:	4816      	ldr	r0, [pc, #88]	@ (800e904 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 800e8ac:	f00b f84c 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 800e8b0:	bb00      	cbnz	r0, 800e8f4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 800e8b2:	491a      	ldr	r1, [pc, #104]	@ (800e91c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xb8>)
 800e8b4:	4813      	ldr	r0, [pc, #76]	@ (800e904 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 800e8b6:	f00b f847 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 800e8ba:	b9e8      	cbnz	r0, 800e8f8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800e8bc:	4918      	ldr	r1, [pc, #96]	@ (800e920 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xbc>)
 800e8be:	4811      	ldr	r0, [pc, #68]	@ (800e904 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 800e8c0:	f00b f842 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 800e8c4:	b9d0      	cbnz	r0, 800e8fc <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 800e8c6:	4917      	ldr	r1, [pc, #92]	@ (800e924 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xc0>)
 800e8c8:	480e      	ldr	r0, [pc, #56]	@ (800e904 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 800e8ca:	f00b f83d 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 800e8ce:	2800      	cmp	r0, #0
 800e8d0:	bf14      	ite	ne
 800e8d2:	2309      	movne	r3, #9
 800e8d4:	2300      	moveq	r3, #0
 800e8d6:	7020      	strb	r0, [r4, #0]
}
 800e8d8:	4618      	mov	r0, r3
 800e8da:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800e8dc:	2300      	movs	r3, #0
 800e8de:	e7fa      	b.n	800e8d6 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800e8e0:	2301      	movs	r3, #1
 800e8e2:	e7f8      	b.n	800e8d6 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800e8e4:	2302      	movs	r3, #2
 800e8e6:	e7f6      	b.n	800e8d6 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800e8e8:	2303      	movs	r3, #3
 800e8ea:	e7f4      	b.n	800e8d6 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800e8ec:	2304      	movs	r3, #4
 800e8ee:	e7f2      	b.n	800e8d6 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 800e8f0:	2305      	movs	r3, #5
 800e8f2:	e7f0      	b.n	800e8d6 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800e8f4:	2306      	movs	r3, #6
 800e8f6:	e7ee      	b.n	800e8d6 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 800e8f8:	2307      	movs	r3, #7
 800e8fa:	e7ec      	b.n	800e8d6 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800e8fc:	2308      	movs	r3, #8
 800e8fe:	e7ea      	b.n	800e8d6 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
 800e900:	0801a298 	.word	0x0801a298
 800e904:	0801a278 	.word	0x0801a278
 800e908:	0801a288 	.word	0x0801a288
 800e90c:	0801a268 	.word	0x0801a268
 800e910:	0801a2a0 	.word	0x0801a2a0
 800e914:	0801a290 	.word	0x0801a290
 800e918:	0801a280 	.word	0x0801a280
 800e91c:	0801a270 	.word	0x0801a270
 800e920:	0801a260 	.word	0x0801a260
 800e924:	0801a258 	.word	0x0801a258

0800e928 <_ZN8Services11TranferDataIfEEvPT_S2_t.isra.0>:
 * @param input from: base pointer to copy data from
 * @param output to: base pointer to copy data to
 * @param input length: number of elements to copy
 */
template<typename T>
void Services::TranferData(T* from, T* to, uint16_t length) {
 800e928:	eb00 0282 	add.w	r2, r0, r2, lsl #2
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 800e92c:	4290      	cmp	r0, r2
 800e92e:	d100      	bne.n	800e932 <_ZN8Services11TranferDataIfEEvPT_S2_t.isra.0+0xa>
		to[buffer_index] = from[buffer_index];
	}
}
 800e930:	4770      	bx	lr
		to[buffer_index] = from[buffer_index];
 800e932:	f850 3b04 	ldr.w	r3, [r0], #4
 800e936:	f841 3b04 	str.w	r3, [r1], #4
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 800e93a:	e7f7      	b.n	800e92c <_ZN8Services11TranferDataIfEEvPT_S2_t.isra.0+0x4>

0800e93c <_ZN8Services11TranferDataImEEvPT_S2_t.isra.0>:
void Services::TranferData(T* from, T* to, uint16_t length) {
 800e93c:	2300      	movs	r3, #0
 800e93e:	b510      	push	{r4, lr}
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 800e940:	b29c      	uxth	r4, r3
 800e942:	42a2      	cmp	r2, r4
 800e944:	d800      	bhi.n	800e948 <_ZN8Services11TranferDataImEEvPT_S2_t.isra.0+0xc>
}
 800e946:	bd10      	pop	{r4, pc}
		to[buffer_index] = from[buffer_index];
 800e948:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 800e94c:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 800e950:	3301      	adds	r3, #1
 800e952:	e7f5      	b.n	800e940 <_ZN8Services11TranferDataImEEvPT_S2_t.isra.0+0x4>

0800e954 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0>:
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800e954:	e9d0 3000 	ldrd	r3, r0, [r0]
 * @param input start_index: the index to start the extraction
 * @param output success: whether successful
 * @return the typed extracted value
 */
template<typename T>
T Communication::ExtractSingle(std::vector<uint8_t> payload, uint16_t start_index, bool* success) {
 800e958:	b510      	push	{r4, lr}
 800e95a:	1ac0      	subs	r0, r0, r3
	uint64_t data = 0;
	uint8_t type_length = sizeof(T);

	// Check payload length
	if (payload.size() < start_index + type_length) {
 800e95c:	1d0c      	adds	r4, r1, #4
 800e95e:	42a0      	cmp	r0, r4
 800e960:	d310      	bcc.n	800e984 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0+0x30>
 800e962:	4419      	add	r1, r3
 800e964:	2018      	movs	r0, #24
	uint64_t data = 0;
 800e966:	2300      	movs	r3, #0
		return 0;
	}

	// Fill a uint64 variable
	for (uint8_t index = 0; index < type_length; index++) {
		data |= (payload[start_index + index] << ((type_length - 1 - index) << 3));
 800e968:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e96c:	4084      	lsls	r4, r0
	for (uint8_t index = 0; index < type_length; index++) {
 800e96e:	3808      	subs	r0, #8
 800e970:	f110 0f08 	cmn.w	r0, #8
		data |= (payload[start_index + index] << ((type_length - 1 - index) << 3));
 800e974:	ea43 0304 	orr.w	r3, r3, r4
	for (uint8_t index = 0; index < type_length; index++) {
 800e978:	d1f6      	bne.n	800e968 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0+0x14>
	// Recast to the expected type
    T* reinterpreted_data = reinterpret_cast<T*>(&data);

    // Return data
    *success = true;
	return *reinterpreted_data;
 800e97a:	ee00 3a10 	vmov	s0, r3
 800e97e:	2301      	movs	r3, #1
		*success = false;
 800e980:	7013      	strb	r3, [r2, #0]
}
 800e982:	bd10      	pop	{r4, pc}
 800e984:	2300      	movs	r3, #0
		return 0;
 800e986:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800e98c <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0+0x38>
 800e98a:	e7f9      	b.n	800e980 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0+0x2c>
 800e98c:	00000000 	.word	0x00000000

0800e990 <_ZN13Communication13ExtractSingleIaEET_St6vectorIhSaIhEEtPb.isra.0>:
T Communication::ExtractSingle(std::vector<uint8_t> payload, uint16_t start_index, bool* success) {
 800e990:	b510      	push	{r4, lr}
 800e992:	e9d0 4300 	ldrd	r4, r3, [r0]
	if (payload.size() < start_index + type_length) {
 800e996:	1c48      	adds	r0, r1, #1
 800e998:	1b1b      	subs	r3, r3, r4
 800e99a:	4283      	cmp	r3, r0
		*success = false;
 800e99c:	bf33      	iteet	cc
 800e99e:	2300      	movcc	r3, #0
    *success = true;
 800e9a0:	2301      	movcs	r3, #1
	return *reinterpreted_data;
 800e9a2:	5660      	ldrsbcs	r0, [r4, r1]
		return 0;
 800e9a4:	4618      	movcc	r0, r3
 800e9a6:	7013      	strb	r3, [r2, #0]
}
 800e9a8:	bd10      	pop	{r4, pc}

0800e9aa <_ZN13Communication13ExtractSingleImEET_St6vectorIhSaIhEEtPb.isra.0>:
 800e9aa:	e9d0 3000 	ldrd	r3, r0, [r0]
T Communication::ExtractSingle(std::vector<uint8_t> payload, uint16_t start_index, bool* success) {
 800e9ae:	b510      	push	{r4, lr}
 800e9b0:	1ac0      	subs	r0, r0, r3
	if (payload.size() < start_index + type_length) {
 800e9b2:	1d0c      	adds	r4, r1, #4
 800e9b4:	42a0      	cmp	r0, r4
 800e9b6:	d30e      	bcc.n	800e9d6 <_ZN13Communication13ExtractSingleImEET_St6vectorIhSaIhEEtPb.isra.0+0x2c>
 800e9b8:	4419      	add	r1, r3
	uint64_t data = 0;
 800e9ba:	2000      	movs	r0, #0
	if (payload.size() < start_index + type_length) {
 800e9bc:	2318      	movs	r3, #24
		data |= (payload[start_index + index] << ((type_length - 1 - index) << 3));
 800e9be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e9c2:	409c      	lsls	r4, r3
	for (uint8_t index = 0; index < type_length; index++) {
 800e9c4:	3b08      	subs	r3, #8
 800e9c6:	f113 0f08 	cmn.w	r3, #8
		data |= (payload[start_index + index] << ((type_length - 1 - index) << 3));
 800e9ca:	ea40 0004 	orr.w	r0, r0, r4
	for (uint8_t index = 0; index < type_length; index++) {
 800e9ce:	d1f6      	bne.n	800e9be <_ZN13Communication13ExtractSingleImEET_St6vectorIhSaIhEEtPb.isra.0+0x14>
	return *reinterpreted_data;
 800e9d0:	2301      	movs	r3, #1
		*success = false;
 800e9d2:	7013      	strb	r3, [r2, #0]
}
 800e9d4:	bd10      	pop	{r4, pc}
 800e9d6:	2300      	movs	r3, #0
		return 0;
 800e9d8:	4618      	mov	r0, r3
 800e9da:	e7fa      	b.n	800e9d2 <_ZN13Communication13ExtractSingleImEET_St6vectorIhSaIhEEtPb.isra.0+0x28>

0800e9dc <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>:
T Communication::ExtractSingle(std::vector<uint8_t> payload, uint16_t start_index, bool* success) {
 800e9dc:	b510      	push	{r4, lr}
 800e9de:	e9d0 4300 	ldrd	r4, r3, [r0]
	if (payload.size() < start_index + type_length) {
 800e9e2:	1c48      	adds	r0, r1, #1
 800e9e4:	1b1b      	subs	r3, r3, r4
 800e9e6:	4283      	cmp	r3, r0
		*success = false;
 800e9e8:	bf33      	iteet	cc
 800e9ea:	2300      	movcc	r3, #0
    *success = true;
 800e9ec:	2301      	movcs	r3, #1
		data |= (payload[start_index + index] << ((type_length - 1 - index) << 3));
 800e9ee:	5c60      	ldrbcs	r0, [r4, r1]
		return 0;
 800e9f0:	4618      	movcc	r0, r3
 800e9f2:	7013      	strb	r3, [r2, #0]
}
 800e9f4:	bd10      	pop	{r4, pc}

0800e9f6 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800e9f6:	2800      	cmp	r0, #0
      _M_allocate(size_t __n)
 800e9f8:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800e9fa:	d006      	beq.n	800ea0a <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0x14>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800e9fc:	da01      	bge.n	800ea02 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0xc>
	    std::__throw_bad_alloc();
 800e9fe:	f00a ffbb 	bl	8019978 <_ZSt17__throw_bad_allocv>
      }
 800ea02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800ea06:	f00a bf08 	b.w	801981a <_Znwj>
 800ea0a:	bd08      	pop	{r3, pc}

0800ea0c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>:
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800ea0c:	4926      	ldr	r1, [pc, #152]	@ (800eaa8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 800ea0e:	b510      	push	{r4, lr}
 800ea10:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800ea12:	4608      	mov	r0, r1
 800ea14:	f00a ff98 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 800ea18:	2800      	cmp	r0, #0
 800ea1a:	d133      	bne.n	800ea84 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800ea1c:	4923      	ldr	r1, [pc, #140]	@ (800eaac <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa0>)
 800ea1e:	4822      	ldr	r0, [pc, #136]	@ (800eaa8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 800ea20:	f00a ff92 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 800ea24:	2800      	cmp	r0, #0
 800ea26:	d12f      	bne.n	800ea88 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800ea28:	4921      	ldr	r1, [pc, #132]	@ (800eab0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa4>)
 800ea2a:	481f      	ldr	r0, [pc, #124]	@ (800eaa8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 800ea2c:	f00a ff8c 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 800ea30:	bb60      	cbnz	r0, 800ea8c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800ea32:	4920      	ldr	r1, [pc, #128]	@ (800eab4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa8>)
 800ea34:	481c      	ldr	r0, [pc, #112]	@ (800eaa8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 800ea36:	f00a ff87 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 800ea3a:	bb48      	cbnz	r0, 800ea90 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800ea3c:	491e      	ldr	r1, [pc, #120]	@ (800eab8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xac>)
 800ea3e:	481a      	ldr	r0, [pc, #104]	@ (800eaa8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 800ea40:	f00a ff82 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 800ea44:	bb30      	cbnz	r0, 800ea94 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 800ea46:	491d      	ldr	r1, [pc, #116]	@ (800eabc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb0>)
 800ea48:	4817      	ldr	r0, [pc, #92]	@ (800eaa8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 800ea4a:	f00a ff7d 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 800ea4e:	bb18      	cbnz	r0, 800ea98 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800ea50:	491b      	ldr	r1, [pc, #108]	@ (800eac0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb4>)
 800ea52:	4815      	ldr	r0, [pc, #84]	@ (800eaa8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 800ea54:	f00a ff78 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 800ea58:	bb00      	cbnz	r0, 800ea9c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 800ea5a:	491a      	ldr	r1, [pc, #104]	@ (800eac4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb8>)
 800ea5c:	4812      	ldr	r0, [pc, #72]	@ (800eaa8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 800ea5e:	f00a ff73 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 800ea62:	b9e8      	cbnz	r0, 800eaa0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800ea64:	4918      	ldr	r1, [pc, #96]	@ (800eac8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xbc>)
 800ea66:	4810      	ldr	r0, [pc, #64]	@ (800eaa8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 800ea68:	f00a ff6e 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 800ea6c:	b9d0      	cbnz	r0, 800eaa4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 800ea6e:	4917      	ldr	r1, [pc, #92]	@ (800eacc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xc0>)
 800ea70:	480d      	ldr	r0, [pc, #52]	@ (800eaa8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 800ea72:	f00a ff69 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 800ea76:	2800      	cmp	r0, #0
 800ea78:	bf14      	ite	ne
 800ea7a:	2309      	movne	r3, #9
 800ea7c:	2300      	moveq	r3, #0
 800ea7e:	7020      	strb	r0, [r4, #0]
}
 800ea80:	4618      	mov	r0, r3
 800ea82:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800ea84:	2300      	movs	r3, #0
 800ea86:	e7fa      	b.n	800ea7e <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800ea88:	2301      	movs	r3, #1
 800ea8a:	e7f8      	b.n	800ea7e <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800ea8c:	2302      	movs	r3, #2
 800ea8e:	e7f6      	b.n	800ea7e <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800ea90:	2303      	movs	r3, #3
 800ea92:	e7f4      	b.n	800ea7e <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800ea94:	2304      	movs	r3, #4
 800ea96:	e7f2      	b.n	800ea7e <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 800ea98:	2305      	movs	r3, #5
 800ea9a:	e7f0      	b.n	800ea7e <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800ea9c:	2306      	movs	r3, #6
 800ea9e:	e7ee      	b.n	800ea7e <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 800eaa0:	2307      	movs	r3, #7
 800eaa2:	e7ec      	b.n	800ea7e <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800eaa4:	2308      	movs	r3, #8
 800eaa6:	e7ea      	b.n	800ea7e <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
 800eaa8:	0801a298 	.word	0x0801a298
 800eaac:	0801a288 	.word	0x0801a288
 800eab0:	0801a278 	.word	0x0801a278
 800eab4:	0801a268 	.word	0x0801a268
 800eab8:	0801a2a0 	.word	0x0801a2a0
 800eabc:	0801a290 	.word	0x0801a290
 800eac0:	0801a280 	.word	0x0801a280
 800eac4:	0801a270 	.word	0x0801a270
 800eac8:	0801a260 	.word	0x0801a260
 800eacc:	0801a258 	.word	0x0801a258

0800ead0 <_ZN13CommunicationC1Ev>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 800ead0:	2200      	movs	r2, #0
 800ead2:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800ead6:	e9c0 2208 	strd	r2, r2, [r0, #32]
 800eada:	e9c0 220a 	strd	r2, r2, [r0, #40]	@ 0x28
 800eade:	e9c0 220c 	strd	r2, r2, [r0, #48]	@ 0x30
 800eae2:	6382      	str	r2, [r0, #56]	@ 0x38

/**
 * @brief class Constructor
 */
Communication::Communication() {
	address = UNKNOWN;
 800eae4:	22fd      	movs	r2, #253	@ 0xfd
 800eae6:	7502      	strb	r2, [r0, #20]
}
 800eae8:	4770      	bx	lr

0800eaea <_ZN13Communication4InitEP9RegistersP8ServicesP17MasterSubscribersP4LEDS>:
 * @param input registers_: the Registers instance
 * @param input services_: the Services instance
 * @param input subscribers_: the MasterSubscribers instance
 * @param input leds_: the LEDS instance
 */
void Communication::Init(Registers* registers_, Services* services_, MasterSubscribers* subscribers_, LEDS* leds_) {
 800eaea:	b510      	push	{r4, lr}
	registers = registers_;
	services = services_;
 800eaec:	e9c0 1201 	strd	r1, r2, [r0, #4]
	subscribers = subscribers_;
 800eaf0:	60c3      	str	r3, [r0, #12]
	leds = leds_;

	CommunicationSemaphore = osSemaphoreNew(1,1,NULL);
 800eaf2:	2101      	movs	r1, #1
	leds = leds_;
 800eaf4:	9b02      	ldr	r3, [sp, #8]
void Communication::Init(Registers* registers_, Services* services_, MasterSubscribers* subscribers_, LEDS* leds_) {
 800eaf6:	4604      	mov	r4, r0
	CommunicationSemaphore = osSemaphoreNew(1,1,NULL);
 800eaf8:	2200      	movs	r2, #0
	leds = leds_;
 800eafa:	6103      	str	r3, [r0, #16]
	CommunicationSemaphore = osSemaphoreNew(1,1,NULL);
 800eafc:	4608      	mov	r0, r1
 800eafe:	f7fd fb01 	bl	800c104 <osSemaphoreNew>
 800eb02:	6020      	str	r0, [r4, #0]
	osSemaphoreRelease(CommunicationSemaphore);
}
 800eb04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSemaphoreRelease(CommunicationSemaphore);
 800eb08:	f7fd bb8c 	b.w	800c224 <osSemaphoreRelease>

0800eb0c <_ZN13Communication12FindProtocolEhPb>:
 *
 * @param input ID: the protocol ID to find
 * @param output success: true if protocol found
 * @return the protocol pointer
 */
CommunicationProtocol* Communication::FindProtocol(uint8_t ID, bool* success) {
 800eb0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb10:	460e      	mov	r6, r1
 800eb12:	4615      	mov	r5, r2
 800eb14:	e9d0 4809 	ldrd	r4, r8, [r0, #36]	@ 0x24
	for (CommunicationProtocol* &protocol : protocols) {
 800eb18:	45a0      	cmp	r8, r4
 800eb1a:	4627      	mov	r7, r4
 800eb1c:	d102      	bne.n	800eb24 <_ZN13Communication12FindProtocolEhPb+0x18>
 800eb1e:	2300      	movs	r3, #0
			*success = true;
			return protocol_pointer;
		}
	}
	*success = false;
	return NULL;
 800eb20:	4618      	mov	r0, r3
 800eb22:	e008      	b.n	800eb36 <_ZN13Communication12FindProtocolEhPb+0x2a>
		if (protocol->InterfaceExists(ID)) {
 800eb24:	4631      	mov	r1, r6
 800eb26:	6838      	ldr	r0, [r7, #0]
 800eb28:	f006 fc63 	bl	80153f2 <_ZN21CommunicationProtocol15InterfaceExistsEh>
 800eb2c:	3404      	adds	r4, #4
 800eb2e:	4603      	mov	r3, r0
 800eb30:	2800      	cmp	r0, #0
 800eb32:	d0f1      	beq.n	800eb18 <_ZN13Communication12FindProtocolEhPb+0xc>
			CommunicationProtocol* protocol_pointer = protocol;
 800eb34:	6838      	ldr	r0, [r7, #0]
			*success = true;
 800eb36:	702b      	strb	r3, [r5, #0]
}
 800eb38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800eb3c <_ZN13Communication16InGroupAddressesEh>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800eb3c:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 *
 * @param input address: a 8-bit address
 * @return true if the input adddress is part of the group addresses
 */
bool Communication::InGroupAddresses(uint8_t address) {
	for (uint8_t group_address : group_addresses) {
 800eb40:	4293      	cmp	r3, r2
 800eb42:	d101      	bne.n	800eb48 <_ZN13Communication16InGroupAddressesEh+0xc>
		if (group_address == address) return true;
	}
	return false;
 800eb44:	2000      	movs	r0, #0
 800eb46:	4770      	bx	lr
	for (uint8_t group_address : group_addresses) {
 800eb48:	f813 0b01 	ldrb.w	r0, [r3], #1
		if (group_address == address) return true;
 800eb4c:	4288      	cmp	r0, r1
 800eb4e:	d1f7      	bne.n	800eb40 <_ZN13Communication16InGroupAddressesEh+0x4>
 800eb50:	2001      	movs	r0, #1
}
 800eb52:	4770      	bx	lr

0800eb54 <_ZN13Communication13AcceptMessageE13MessageHeader>:
	return (message.target_address == ALL || message.target_address == address || InGroupAddresses(message.target_address));
 800eb54:	7c09      	ldrb	r1, [r1, #16]
 800eb56:	29ff      	cmp	r1, #255	@ 0xff
 800eb58:	d004      	beq.n	800eb64 <_ZN13Communication13AcceptMessageE13MessageHeader+0x10>
 800eb5a:	7d03      	ldrb	r3, [r0, #20]
 800eb5c:	428b      	cmp	r3, r1
 800eb5e:	d001      	beq.n	800eb64 <_ZN13Communication13AcceptMessageE13MessageHeader+0x10>
 800eb60:	f7ff bfec 	b.w	800eb3c <_ZN13Communication16InGroupAddressesEh>
}
 800eb64:	2001      	movs	r0, #1
 800eb66:	4770      	bx	lr

0800eb68 <_ZN13Communication5GetIDEPvPb>:
 *
 * @param input handle: base pointer of an hardware interface
 * @param output success: return true if the protocol has been successfully found
 * @return the registered interface ID of the input hardware handle
 */
uint8_t Communication::GetID(void* handle, bool* success) {
 800eb68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb6a:	460e      	mov	r6, r1
 800eb6c:	4614      	mov	r4, r2
 800eb6e:	e9d0 5709 	ldrd	r5, r7, [r0, #36]	@ 0x24
	uint8_t ID;
	for (CommunicationProtocol* protocol : protocols) {
 800eb72:	42af      	cmp	r7, r5
 800eb74:	d101      	bne.n	800eb7a <_ZN13Communication5GetIDEPvPb+0x12>
		ID = protocol->GetID(handle, success);
		if (*success)
			return ID;
	}
	return 0;
 800eb76:	2000      	movs	r0, #0
 800eb78:	e009      	b.n	800eb8e <_ZN13Communication5GetIDEPvPb+0x26>
	for (CommunicationProtocol* protocol : protocols) {
 800eb7a:	f855 0b04 	ldr.w	r0, [r5], #4
		ID = protocol->GetID(handle, success);
 800eb7e:	4622      	mov	r2, r4
 800eb80:	4631      	mov	r1, r6
 800eb82:	6803      	ldr	r3, [r0, #0]
 800eb84:	68db      	ldr	r3, [r3, #12]
 800eb86:	4798      	blx	r3
		if (*success)
 800eb88:	7823      	ldrb	r3, [r4, #0]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d0f1      	beq.n	800eb72 <_ZN13Communication5GetIDEPvPb+0xa>
}
 800eb8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800eb90 <_ZN13Communication9GetBufferEhPb>:
 *
 * @param input ID: the interface ID
 * @param output success: return true if the memory pointer successfully found
 * @return the memory pointer allocated to the hardware interface
 */
std::vector<uint8_t>* Communication::GetBuffer(uint8_t ID, bool* success) {
 800eb90:	b538      	push	{r3, r4, r5, lr}
 800eb92:	460c      	mov	r4, r1
 800eb94:	4615      	mov	r5, r2
	CommunicationProtocol* protocol = FindProtocol(ID, success);
 800eb96:	f7ff ffb9 	bl	800eb0c <_ZN13Communication12FindProtocolEhPb>
	if (*success) {
		std::vector<uint8_t>* buffer = protocol->GetBuffer(ID, success);
 800eb9a:	462a      	mov	r2, r5
 800eb9c:	4621      	mov	r1, r4
		if (*success)
			return buffer;
	}
}
 800eb9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		std::vector<uint8_t>* buffer = protocol->GetBuffer(ID, success);
 800eba2:	f006 bc3d 	b.w	8015420 <_ZN21CommunicationProtocol9GetBufferEhPb>

0800eba6 <_ZN13Communication14GetBufferIndexEhPb>:
 *
 * @param input ID: the interface ID
 * @param output success: return true if the index has been successfully found
 * @return the pointer to the index variable
 */
uint16_t* Communication::GetBufferIndex(uint8_t ID, bool* success) {
 800eba6:	b538      	push	{r3, r4, r5, lr}
 800eba8:	4614      	mov	r4, r2
 800ebaa:	460d      	mov	r5, r1
	CommunicationProtocol* protocol = FindProtocol(ID, success);
 800ebac:	f7ff ffae 	bl	800eb0c <_ZN13Communication12FindProtocolEhPb>
	if (*success) {
 800ebb0:	7823      	ldrb	r3, [r4, #0]
 800ebb2:	b12b      	cbz	r3, 800ebc0 <_ZN13Communication14GetBufferIndexEhPb+0x1a>
		uint16_t* buffer_index = protocol->GetBufferIndex(ID, success);
 800ebb4:	4622      	mov	r2, r4
 800ebb6:	4629      	mov	r1, r5
 800ebb8:	f006 fc40 	bl	801543c <_ZN21CommunicationProtocol14GetBufferIndexEhPb>
		if (*success)
 800ebbc:	7823      	ldrb	r3, [r4, #0]
 800ebbe:	b903      	cbnz	r3, 800ebc2 <_ZN13Communication14GetBufferIndexEhPb+0x1c>
			return buffer_index;
	}
	return NULL;
 800ebc0:	2000      	movs	r0, #0
}
 800ebc2:	bd38      	pop	{r3, r4, r5, pc}

0800ebc4 <_ZN13Communication27GetProtocolPayloadMaxLengthEhPb>:
 *
 * @param input ID: the protocol ID
 * @param output success: return true if protocol found
 * @return the maximum payload size of the input protocol
 */
uint16_t Communication::GetProtocolPayloadMaxLength(uint8_t ID, bool* success) {
 800ebc4:	b510      	push	{r4, lr}
 800ebc6:	4614      	mov	r4, r2
	CommunicationProtocol* protocol = FindProtocol(ID, success);
 800ebc8:	f7ff ffa0 	bl	800eb0c <_ZN13Communication12FindProtocolEhPb>
	if (not *success)
 800ebcc:	7823      	ldrb	r3, [r4, #0]
 800ebce:	b11b      	cbz	r3, 800ebd8 <_ZN13Communication27GetProtocolPayloadMaxLengthEhPb+0x14>
		return 0;

	return protocol->GetProtocolPayloadMaxLength();
}
 800ebd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return protocol->GetProtocolPayloadMaxLength();
 800ebd4:	f006 bc40 	b.w	8015458 <_ZN21CommunicationProtocol27GetProtocolPayloadMaxLengthEv>
}
 800ebd8:	4618      	mov	r0, r3
 800ebda:	bd10      	pop	{r4, pc}

0800ebdc <_ZN13Communication17ActivateReceptionEh>:
 * @brief Activate the hardware reading of the input protocol
 *
 * @param input ID: the protocol ID
 * @return the status of the reading activation request
 */
HAL_StatusTypeDef Communication::ActivateReception(uint8_t ID) {
 800ebdc:	b513      	push	{r0, r1, r4, lr}
	bool success;
	CommunicationProtocol* protocol = FindProtocol(ID, &success);
 800ebde:	f10d 0207 	add.w	r2, sp, #7
HAL_StatusTypeDef Communication::ActivateReception(uint8_t ID) {
 800ebe2:	460c      	mov	r4, r1
	CommunicationProtocol* protocol = FindProtocol(ID, &success);
 800ebe4:	f7ff ff92 	bl	800eb0c <_ZN13Communication12FindProtocolEhPb>
	if (not success) return HAL_ERROR;
 800ebe8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ebec:	b132      	cbz	r2, 800ebfc <_ZN13Communication17ActivateReceptionEh+0x20>
	return protocol->ActivateReception(ID);
 800ebee:	6803      	ldr	r3, [r0, #0]
 800ebf0:	4621      	mov	r1, r4
 800ebf2:	685b      	ldr	r3, [r3, #4]
}
 800ebf4:	b002      	add	sp, #8
 800ebf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return protocol->ActivateReception(ID);
 800ebfa:	4718      	bx	r3
}
 800ebfc:	2001      	movs	r0, #1
 800ebfe:	b002      	add	sp, #8
 800ec00:	bd10      	pop	{r4, pc}

0800ec02 <_ZN13Communication16SetModuleAddressEh>:
 * @brief Set the module address
 *
 * @param input address_: the new module address
 * @return whether successful
 */
bool Communication::SetModuleAddress(uint8_t address_) {
 800ec02:	b538      	push	{r3, r4, r5, lr}
 800ec04:	4604      	mov	r4, r0
 800ec06:	460d      	mov	r5, r1
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 800ec08:	6800      	ldr	r0, [r0, #0]
 800ec0a:	f04f 31ff 	mov.w	r1, #4294967295
 800ec0e:	f7fd fad5 	bl	800c1bc <osSemaphoreAcquire>
	address = address_;
	osSemaphoreRelease(CommunicationSemaphore);
 800ec12:	6820      	ldr	r0, [r4, #0]
	address = address_;
 800ec14:	7525      	strb	r5, [r4, #20]
	osSemaphoreRelease(CommunicationSemaphore);
 800ec16:	f7fd fb05 	bl	800c224 <osSemaphoreRelease>
	return true;
}
 800ec1a:	2001      	movs	r0, #1
 800ec1c:	bd38      	pop	{r3, r4, r5, pc}

0800ec1e <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 800ec1e:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 800ec20:	680d      	ldr	r5, [r1, #0]
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 800ec22:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 800ec24:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 800ec26:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 800ec2a:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 800ec2c:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 800ec2e:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 800ec30:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 800ec32:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 800ec34:	688d      	ldr	r5, [r1, #8]
 800ec36:	6085      	str	r5, [r0, #8]
      }
 800ec38:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 800ec3a:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 800ec3c:	e9c1 3300 	strd	r3, r3, [r1]
 800ec40:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 800ec44:	f7f1 fe2a 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      }
 800ec48:	b005      	add	sp, #20
 800ec4a:	bd30      	pop	{r4, r5, pc}

0800ec4c <_ZNSt6vectorIhSaIhEE5clearEv>:
      // _M_assign_aux.
      _GLIBCXX20_CONSTEXPR
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 800ec4c:	e9d0 3200 	ldrd	r3, r2, [r0]
 800ec50:	4293      	cmp	r3, r2
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
 800ec52:	bf18      	it	ne
 800ec54:	6043      	strne	r3, [r0, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 800ec56:	4770      	bx	lr

0800ec58 <_ZN13Communication17ClearGroupAddressEv>:
/**
 * @brief Clear the list of group addresses
 *
 * @return whether successful
 */
bool Communication::ClearGroupAddress(void) {
 800ec58:	b538      	push	{r3, r4, r5, lr}
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 800ec5a:	4605      	mov	r5, r0
bool Communication::ClearGroupAddress(void) {
 800ec5c:	4604      	mov	r4, r0
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 800ec5e:	f04f 31ff 	mov.w	r1, #4294967295
 800ec62:	f855 0b18 	ldr.w	r0, [r5], #24
 800ec66:	f7fd faa9 	bl	800c1bc <osSemaphoreAcquire>
	group_addresses.clear();
 800ec6a:	4628      	mov	r0, r5
 800ec6c:	f7ff ffee 	bl	800ec4c <_ZNSt6vectorIhSaIhEE5clearEv>
	osSemaphoreRelease(CommunicationSemaphore);
 800ec70:	6820      	ldr	r0, [r4, #0]
 800ec72:	f7fd fad7 	bl	800c224 <osSemaphoreRelease>
	return true;
}
 800ec76:	2001      	movs	r0, #1
 800ec78:	bd38      	pop	{r3, r4, r5, pc}

0800ec7a <_ZZN13Communication12AddRegistersEvENUlPvtPhtE2_4_FUNES0_tS1_t>:
			return self->ClearGroupAddress();
 800ec7a:	f7ff bfed 	b.w	800ec58 <_ZN13Communication17ClearGroupAddressEv>
	...

0800ec80 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>:
      at(size_type __n)
 800ec80:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800ec82:	e9d0 5400 	ldrd	r5, r4, [r0]
 800ec86:	1b64      	subs	r4, r4, r5
	if (__n >= this->size())
 800ec88:	ebb1 1f24 	cmp.w	r1, r4, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800ec8c:	ea4f 1224 	mov.w	r2, r4, asr #4
	if (__n >= this->size())
 800ec90:	d302      	bcc.n	800ec98 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 800ec92:	4803      	ldr	r0, [pc, #12]	@ (800eca0 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj+0x20>)
 800ec94:	f00a fe79 	bl	801998a <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 800ec98:	eb05 1001 	add.w	r0, r5, r1, lsl #4
 800ec9c:	bd38      	pop	{r3, r4, r5, pc}
 800ec9e:	bf00      	nop
 800eca0:	0801a080 	.word	0x0801a080

0800eca4 <_ZNSt6vectorI13MessageHeaderSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>:
    vector<_Tp, _Alloc>::
 800eca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      { return __normal_iterator(_M_current + __n); }
 800eca6:	f101 0314 	add.w	r3, r1, #20
      : _M_current(__i) { }
 800ecaa:	6844      	ldr	r4, [r0, #4]
 800ecac:	4607      	mov	r7, r0
 800ecae:	460e      	mov	r6, r1
      if (__position + 1 != end())
 800ecb0:	429c      	cmp	r4, r3
 800ecb2:	d008      	beq.n	800ecc6 <_ZNSt6vectorI13MessageHeaderSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0x22>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800ecb4:	1ae4      	subs	r4, r4, r3
 800ecb6:	4b10      	ldr	r3, [pc, #64]	@ (800ecf8 <_ZNSt6vectorI13MessageHeaderSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0x54>)
 800ecb8:	1d08      	adds	r0, r1, #4
 800ecba:	10a4      	asrs	r4, r4, #2
 800ecbc:	435c      	muls	r4, r3
 800ecbe:	2c00      	cmp	r4, #0
 800ecc0:	f100 0514 	add.w	r5, r0, #20
 800ecc4:	dc08      	bgt.n	800ecd8 <_ZNSt6vectorI13MessageHeaderSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0x34>
      --this->_M_impl._M_finish;
 800ecc6:	6878      	ldr	r0, [r7, #4]
 800ecc8:	f1a0 0314 	sub.w	r3, r0, #20
      }
 800eccc:	3810      	subs	r0, #16
 800ecce:	607b      	str	r3, [r7, #4]
 800ecd0:	f7f1 fde4 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
    }
 800ecd4:	4630      	mov	r0, r6
 800ecd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
struct MessageHeader {
 800ecd8:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 800ecdc:	4629      	mov	r1, r5
 800ecde:	3c01      	subs	r4, #1
 800ece0:	f805 3c18 	strb.w	r3, [r5, #-24]
 800ece4:	f7ff ff9b 	bl	800ec1e <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 800ece8:	7b2b      	ldrb	r3, [r5, #12]
 800ecea:	4628      	mov	r0, r5
 800ecec:	f805 3c08 	strb.w	r3, [r5, #-8]
 800ecf0:	7b6b      	ldrb	r3, [r5, #13]
 800ecf2:	f805 3c07 	strb.w	r3, [r5, #-7]
 800ecf6:	e7e2      	b.n	800ecbe <_ZNSt6vectorI13MessageHeaderSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0x1a>
 800ecf8:	cccccccd 	.word	0xcccccccd

0800ecfc <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800ecfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800ed00:	e9d0 8a00 	ldrd	r8, sl, [r0]
 800ed04:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 800ed06:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800ed0a:	ebaa 0208 	sub.w	r2, sl, r8
 800ed0e:	4607      	mov	r7, r0
 800ed10:	4689      	mov	r9, r1
	if (max_size() - size() < __n)
 800ed12:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800ed16:	ea4f 04a2 	mov.w	r4, r2, asr #2
	if (max_size() - size() < __n)
 800ed1a:	d102      	bne.n	800ed22 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 800ed1c:	481f      	ldr	r0, [pc, #124]	@ (800ed9c <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa0>)
 800ed1e:	f00a fe31 	bl	8019984 <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 800ed22:	45c2      	cmp	sl, r8
 800ed24:	bf14      	ite	ne
 800ed26:	4622      	movne	r2, r4
 800ed28:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 800ed2a:	eba1 0508 	sub.w	r5, r1, r8
 800ed2e:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800ed30:	d22f      	bcs.n	800ed92 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x96>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800ed32:	b384      	cbz	r4, 800ed96 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800ed34:	429c      	cmp	r4, r3
 800ed36:	bf28      	it	cs
 800ed38:	461c      	movcs	r4, r3
 800ed3a:	00a0      	lsls	r0, r4, #2
 800ed3c:	f00a fd6d 	bl	801981a <_Znwj>
 800ed40:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800ed42:	f8db 3000 	ldr.w	r3, [fp]
      if (__count > 0)
 800ed46:	2d00      	cmp	r5, #0
 800ed48:	5173      	str	r3, [r6, r5]
 800ed4a:	dd04      	ble.n	800ed56 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x5a>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800ed4c:	462a      	mov	r2, r5
 800ed4e:	4641      	mov	r1, r8
 800ed50:	4630      	mov	r0, r6
 800ed52:	f00a feef 	bl	8019b34 <memmove>
      ptrdiff_t __count = __last - __first;
 800ed56:	ebaa 0a09 	sub.w	sl, sl, r9
	      ++__new_finish;
 800ed5a:	3504      	adds	r5, #4
      if (__count > 0)
 800ed5c:	f1ba 0f00 	cmp.w	sl, #0
 800ed60:	4435      	add	r5, r6
 800ed62:	dd04      	ble.n	800ed6e <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x72>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800ed64:	4652      	mov	r2, sl
 800ed66:	4649      	mov	r1, r9
 800ed68:	4628      	mov	r0, r5
 800ed6a:	f00a ffdb 	bl	8019d24 <memcpy>
      return __result + __count;
 800ed6e:	4455      	add	r5, sl
	if (__p)
 800ed70:	f1b8 0f00 	cmp.w	r8, #0
 800ed74:	d006      	beq.n	800ed84 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x88>
		    this->_M_impl._M_end_of_storage - __old_start);
 800ed76:	68b9      	ldr	r1, [r7, #8]
 800ed78:	4640      	mov	r0, r8
 800ed7a:	eba1 0108 	sub.w	r1, r1, r8
 800ed7e:	1089      	asrs	r1, r1, #2
 800ed80:	f7ff fc7a 	bl	800e678 <_ZNSt12_Vector_baseIP21CommunicationProtocolSaIS1_EE13_M_deallocateEPS1_j.part.0>
      this->_M_impl._M_finish = __new_finish;
 800ed84:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800ed88:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 800ed8c:	60be      	str	r6, [r7, #8]
    }
 800ed8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800ed92:	461c      	mov	r4, r3
 800ed94:	e7d1      	b.n	800ed3a <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800ed96:	4626      	mov	r6, r4
 800ed98:	e7d3      	b.n	800ed42 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
 800ed9a:	bf00      	nop
 800ed9c:	08019e3e 	.word	0x08019e3e

0800eda0 <_ZN13Communication11AddProtocolEP21CommunicationProtocol>:
void Communication::AddProtocol(CommunicationProtocol* protocol) {
 800eda0:	b513      	push	{r0, r1, r4, lr}
 800eda2:	4604      	mov	r4, r0
 800eda4:	9101      	str	r1, [sp, #4]
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 800eda6:	6800      	ldr	r0, [r0, #0]
 800eda8:	f04f 31ff 	mov.w	r1, #4294967295
 800edac:	f7fd fa06 	bl	800c1bc <osSemaphoreAcquire>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800edb0:	e9d4 130a 	ldrd	r1, r3, [r4, #40]	@ 0x28
 800edb4:	4299      	cmp	r1, r3
 800edb6:	d008      	beq.n	800edca <_ZN13Communication11AddProtocolEP21CommunicationProtocol+0x2a>
 800edb8:	9b01      	ldr	r3, [sp, #4]
 800edba:	f841 3b04 	str.w	r3, [r1], #4
	    ++this->_M_impl._M_finish;
 800edbe:	62a1      	str	r1, [r4, #40]	@ 0x28
	osSemaphoreRelease(CommunicationSemaphore);
 800edc0:	6820      	ldr	r0, [r4, #0]
 800edc2:	f7fd fa2f 	bl	800c224 <osSemaphoreRelease>
}
 800edc6:	b002      	add	sp, #8
 800edc8:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), __x);
 800edca:	aa01      	add	r2, sp, #4
 800edcc:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800edd0:	f7ff ff94 	bl	800ecfc <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
 800edd4:	e7f4      	b.n	800edc0 <_ZN13Communication11AddProtocolEP21CommunicationProtocol+0x20>
	...

0800edd8 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800edd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800eddc:	e9d0 9a00 	ldrd	r9, sl, [r0]
 800ede0:	4617      	mov	r7, r2
	if (max_size() - size() < __n)
 800ede2:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800ede6:	ebaa 0209 	sub.w	r2, sl, r9
 800edea:	4680      	mov	r8, r0
 800edec:	468b      	mov	fp, r1
	if (max_size() - size() < __n)
 800edee:	ebb3 1f22 	cmp.w	r3, r2, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800edf2:	ea4f 1522 	mov.w	r5, r2, asr #4
	if (max_size() - size() < __n)
 800edf6:	d102      	bne.n	800edfe <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 800edf8:	4826      	ldr	r0, [pc, #152]	@ (800ee94 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xbc>)
 800edfa:	f00a fdc3 	bl	8019984 <_ZSt20__throw_length_errorPKc>
 800edfe:	45ca      	cmp	sl, r9
 800ee00:	bf14      	ite	ne
 800ee02:	462a      	movne	r2, r5
 800ee04:	2201      	moveq	r2, #1
 800ee06:	eba1 0409 	sub.w	r4, r1, r9
 800ee0a:	18ad      	adds	r5, r5, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800ee0c:	d232      	bcs.n	800ee74 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800ee0e:	b39d      	cbz	r5, 800ee78 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa0>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800ee10:	429d      	cmp	r5, r3
 800ee12:	bf28      	it	cs
 800ee14:	461d      	movcs	r5, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800ee16:	0128      	lsls	r0, r5, #4
 800ee18:	f00a fcff 	bl	801981a <_Znwj>
 800ee1c:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800ee1e:	4434      	add	r4, r6
      _ForwardIterator __cur = __result;
 800ee20:	46b4      	mov	ip, r6
 800ee22:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800ee26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800ee2a:	464c      	mov	r4, r9
      for (; __first != __last; ++__first, (void)++__cur)
 800ee2c:	45a3      	cmp	fp, r4
 800ee2e:	f10c 0c10 	add.w	ip, ip, #16
 800ee32:	f104 0710 	add.w	r7, r4, #16
 800ee36:	d121      	bne.n	800ee7c <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa4>
 800ee38:	eba7 0709 	sub.w	r7, r7, r9
 800ee3c:	46a4      	mov	ip, r4
 800ee3e:	4437      	add	r7, r6
 800ee40:	46be      	mov	lr, r7
 800ee42:	4554      	cmp	r4, sl
 800ee44:	f10e 0e10 	add.w	lr, lr, #16
 800ee48:	d11e      	bne.n	800ee88 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb0>
 800ee4a:	eba4 040c 	sub.w	r4, r4, ip
 800ee4e:	4427      	add	r7, r4
	if (__p)
 800ee50:	f1b9 0f00 	cmp.w	r9, #0
 800ee54:	d006      	beq.n	800ee64 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
 800ee56:	f8d8 1008 	ldr.w	r1, [r8, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800ee5a:	4648      	mov	r0, r9
 800ee5c:	eba1 0109 	sub.w	r1, r1, r9
 800ee60:	f00a fcb6 	bl	80197d0 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 800ee64:	e9c8 6700 	strd	r6, r7, [r8]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800ee68:	eb06 1605 	add.w	r6, r6, r5, lsl #4
 800ee6c:	f8c8 6008 	str.w	r6, [r8, #8]
    }
 800ee70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800ee74:	461d      	mov	r5, r3
 800ee76:	e7ce      	b.n	800ee16 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800ee78:	462e      	mov	r6, r5
 800ee7a:	e7d0      	b.n	800ee1e <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800ee7c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ee80:	463c      	mov	r4, r7
 800ee82:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
 800ee86:	e7d1      	b.n	800ee2c <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x54>
 800ee88:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ee8c:	3410      	adds	r4, #16
 800ee8e:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
 800ee92:	e7d6      	b.n	800ee42 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x6a>
 800ee94:	08019e3e 	.word	0x08019e3e

0800ee98 <_ZN9Registers11AddRegisterIhEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 800ee98:	b570      	push	{r4, r5, r6, lr}
 800ee9a:	4604      	mov	r4, r0
 800ee9c:	b086      	sub	sp, #24
 800ee9e:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800eea0:	6800      	ldr	r0, [r0, #0]
 800eea2:	f04f 31ff 	mov.w	r1, #4294967295
 800eea6:	f7fd f989 	bl	800c1bc <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 800eeaa:	f10d 0207 	add.w	r2, sp, #7
 800eeae:	4631      	mov	r1, r6
 800eeb0:	4620      	mov	r0, r4
 800eeb2:	f008 f90e 	bl	80170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 800eeb6:	f89d 5007 	ldrb.w	r5, [sp, #7]
 800eeba:	b125      	cbz	r5, 800eec6 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 800eebc:	6820      	ldr	r0, [r4, #0]
 800eebe:	f7fd f9b1 	bl	800c224 <osSemaphoreRelease>
}
 800eec2:	b006      	add	sp, #24
 800eec4:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 800eec6:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 800eeca:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 800eece:	f7ff fd9d 	bl	800ea0c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	configuration_.register_info = register_;
 800eed2:	2301      	movs	r3, #1
 800eed4:	f8ad 600a 	strh.w	r6, [sp, #10]
 800eed8:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 800eedc:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 800eee0:	f88d 000c 	strb.w	r0, [sp, #12]
 800eee4:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 800eee8:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d0e5      	beq.n	800eebc <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
      push_back(const value_type& __x)
 800eef0:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800eef2:	e9d4 5302 	ldrd	r5, r3, [r4, #8]
 800eef6:	429d      	cmp	r5, r3
 800eef8:	d005      	beq.n	800ef06 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x6e>
 800eefa:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800eefc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 800ef00:	3510      	adds	r5, #16
 800ef02:	60a5      	str	r5, [r4, #8]
 800ef04:	e7da      	b.n	800eebc <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
	  _M_realloc_insert(end(), __x);
 800ef06:	4629      	mov	r1, r5
 800ef08:	1d20      	adds	r0, r4, #4
 800ef0a:	f7ff ff65 	bl	800edd8 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 800ef0e:	e7d5      	b.n	800eebc <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>

0800ef10 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800ef10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800ef14:	e9d0 8900 	ldrd	r8, r9, [r0]
 800ef18:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 800ef1a:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800ef1e:	eba9 0208 	sub.w	r2, r9, r8
 800ef22:	4607      	mov	r7, r0
 800ef24:	468a      	mov	sl, r1
	if (max_size() - size() < __n)
 800ef26:	ebb3 1f22 	cmp.w	r3, r2, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800ef2a:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
 800ef2e:	d102      	bne.n	800ef36 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 800ef30:	4820      	ldr	r0, [pc, #128]	@ (800efb4 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa4>)
 800ef32:	f00a fd27 	bl	8019984 <_ZSt20__throw_length_errorPKc>
 800ef36:	45c1      	cmp	r9, r8
 800ef38:	bf14      	ite	ne
 800ef3a:	4622      	movne	r2, r4
 800ef3c:	2201      	moveq	r2, #1
 800ef3e:	eba1 0508 	sub.w	r5, r1, r8
 800ef42:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800ef44:	d231      	bcs.n	800efaa <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800ef46:	b394      	cbz	r4, 800efae <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9e>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800ef48:	429c      	cmp	r4, r3
 800ef4a:	bf28      	it	cs
 800ef4c:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800ef4e:	0120      	lsls	r0, r4, #4
 800ef50:	f00a fc63 	bl	801981a <_Znwj>
 800ef54:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800ef56:	eb06 0c05 	add.w	ip, r6, r5
      if (__count > 0)
 800ef5a:	2d00      	cmp	r5, #0
 800ef5c:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 800ef60:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800ef64:	dd04      	ble.n	800ef70 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x60>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800ef66:	462a      	mov	r2, r5
 800ef68:	4641      	mov	r1, r8
 800ef6a:	4630      	mov	r0, r6
 800ef6c:	f00a fde2 	bl	8019b34 <memmove>
      ptrdiff_t __count = __last - __first;
 800ef70:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
 800ef74:	3510      	adds	r5, #16
      if (__count > 0)
 800ef76:	f1b9 0f00 	cmp.w	r9, #0
 800ef7a:	4435      	add	r5, r6
 800ef7c:	dd04      	ble.n	800ef88 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x78>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800ef7e:	464a      	mov	r2, r9
 800ef80:	4651      	mov	r1, sl
 800ef82:	4628      	mov	r0, r5
 800ef84:	f00a fece 	bl	8019d24 <memcpy>
      return __result + __count;
 800ef88:	444d      	add	r5, r9
	if (__p)
 800ef8a:	f1b8 0f00 	cmp.w	r8, #0
 800ef8e:	d005      	beq.n	800ef9c <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
 800ef90:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800ef92:	4640      	mov	r0, r8
 800ef94:	eba1 0108 	sub.w	r1, r1, r8
 800ef98:	f00a fc1a 	bl	80197d0 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 800ef9c:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800efa0:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 800efa4:	60be      	str	r6, [r7, #8]
    }
 800efa6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800efaa:	461c      	mov	r4, r3
 800efac:	e7cf      	b.n	800ef4e <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800efae:	4626      	mov	r6, r4
 800efb0:	e7d1      	b.n	800ef56 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
 800efb2:	bf00      	nop
 800efb4:	08019e3e 	.word	0x08019e3e

0800efb8 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 800efb8:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800efba:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
      push_back(const value_type& __x)
 800efbe:	4605      	mov	r5, r0
 800efc0:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800efc2:	429c      	cmp	r4, r3
 800efc4:	d005      	beq.n	800efd2 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_+0x1a>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800efc6:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 800efc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 800efcc:	3410      	adds	r4, #16
 800efce:	606c      	str	r4, [r5, #4]
      }
 800efd0:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
 800efd2:	4621      	mov	r1, r4
 800efd4:	f7ff ff9c 	bl	800ef10 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 800efd8:	e7fa      	b.n	800efd0 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_+0x18>

0800efda <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0>:
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 800efda:	b570      	push	{r4, r5, r6, lr}
 800efdc:	460c      	mov	r4, r1
 800efde:	b086      	sub	sp, #24
 800efe0:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800efe2:	f04f 31ff 	mov.w	r1, #4294967295
 800efe6:	6800      	ldr	r0, [r0, #0]
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 800efe8:	4616      	mov	r6, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800efea:	f7fd f8e7 	bl	800c1bc <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 800efee:	4621      	mov	r1, r4
 800eff0:	f10d 0207 	add.w	r2, sp, #7
 800eff4:	4628      	mov	r0, r5
 800eff6:	f008 f86c 	bl	80170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 800effa:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 800effe:	4604      	mov	r4, r0
	if (!success) {
 800f000:	b923      	cbnz	r3, 800f00c <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x32>
	osSemaphoreRelease(RegistersSemaphore);
 800f002:	6828      	ldr	r0, [r5, #0]
 800f004:	f7fd f90e 	bl	800c224 <osSemaphoreRelease>
}
 800f008:	b006      	add	sp, #24
 800f00a:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 800f00c:	f10d 0007 	add.w	r0, sp, #7
 800f010:	f7ff fcfc 	bl	800ea0c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 800f014:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d0f2      	beq.n	800f002 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x28>
	if (target_register->register_info.type != registered_type) {
 800f01c:	7923      	ldrb	r3, [r4, #4]
 800f01e:	4298      	cmp	r0, r3
 800f020:	d1ef      	bne.n	800f002 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x28>
	if (callbacks[target_register->register_info.type] == NULL) {
 800f022:	3004      	adds	r0, #4
 800f024:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 800f028:	2800      	cmp	r0, #0
 800f02a:	d0ea      	beq.n	800f002 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x28>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 800f02c:	7823      	ldrb	r3, [r4, #0]
 800f02e:	b983      	cbnz	r3, 800f052 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x78>
 800f030:	7863      	ldrb	r3, [r4, #1]
 800f032:	b973      	cbnz	r3, 800f052 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x78>
		target_callback_list->push_back(callback);
 800f034:	a902      	add	r1, sp, #8
		callback.pointer = pointer;
 800f036:	9602      	str	r6, [sp, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f038:	e9d0 2300 	ldrd	r2, r3, [r0]
 800f03c:	1a9b      	subs	r3, r3, r2
 800f03e:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 800f040:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 800f042:	f7ff ffb9 	bl	800efb8 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_>
	target_register->mode.pointer = true;
 800f046:	2301      	movs	r3, #1
 800f048:	7023      	strb	r3, [r4, #0]
	target_register->access.write = true;
 800f04a:	f240 1301 	movw	r3, #257	@ 0x101
 800f04e:	8123      	strh	r3, [r4, #8]
 800f050:	e7d7      	b.n	800f002 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x28>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 800f052:	8961      	ldrh	r1, [r4, #10]
 800f054:	f7ff fe14 	bl	800ec80 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
		callback->pointer = pointer;
 800f058:	6006      	str	r6, [r0, #0]
 800f05a:	e7f4      	b.n	800f046 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x6c>

0800f05c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 800f05c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f05e:	460c      	mov	r4, r1
 800f060:	b087      	sub	sp, #28
 800f062:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800f064:	f04f 31ff 	mov.w	r1, #4294967295
 800f068:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 800f06a:	461e      	mov	r6, r3
 800f06c:	4617      	mov	r7, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800f06e:	f7fd f8a5 	bl	800c1bc <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 800f072:	4621      	mov	r1, r4
 800f074:	f10d 0207 	add.w	r2, sp, #7
 800f078:	4628      	mov	r0, r5
 800f07a:	f008 f82a 	bl	80170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 800f07e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 800f082:	4604      	mov	r4, r0
	if (!success) {
 800f084:	b923      	cbnz	r3, 800f090 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x34>
	osSemaphoreRelease(RegistersSemaphore);
 800f086:	6828      	ldr	r0, [r5, #0]
 800f088:	f7fd f8cc 	bl	800c224 <osSemaphoreRelease>
}
 800f08c:	b007      	add	sp, #28
 800f08e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 800f090:	f10d 0007 	add.w	r0, sp, #7
 800f094:	f7ff fcba 	bl	800ea0c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 800f098:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d0f2      	beq.n	800f086 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (target_register->register_info.type != registered_type) {
 800f0a0:	7923      	ldrb	r3, [r4, #4]
 800f0a2:	4298      	cmp	r0, r3
 800f0a4:	d1ef      	bne.n	800f086 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (callbacks[target_register->register_info.type] == NULL) {
 800f0a6:	3004      	adds	r0, #4
 800f0a8:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 800f0ac:	2800      	cmp	r0, #0
 800f0ae:	d0ea      	beq.n	800f086 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 800f0b0:	7823      	ldrb	r3, [r4, #0]
 800f0b2:	b983      	cbnz	r3, 800f0d6 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
 800f0b4:	7863      	ldrb	r3, [r4, #1]
 800f0b6:	b973      	cbnz	r3, 800f0d6 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
		callback.read = NULL;
 800f0b8:	9305      	str	r3, [sp, #20]
		target_callback_list->push_back(callback);
 800f0ba:	a902      	add	r1, sp, #8
 800f0bc:	e9d0 2300 	ldrd	r2, r3, [r0]
		callback.write = write;
 800f0c0:	e9cd 7603 	strd	r7, r6, [sp, #12]
 800f0c4:	1a9b      	subs	r3, r3, r2
 800f0c6:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 800f0c8:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 800f0ca:	f7ff ff75 	bl	800efb8 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_>
	target_register->mode.callbacks = true;
 800f0ce:	2301      	movs	r3, #1
 800f0d0:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 800f0d2:	7223      	strb	r3, [r4, #8]
 800f0d4:	e7d7      	b.n	800f086 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 800f0d6:	8961      	ldrh	r1, [r4, #10]
 800f0d8:	f7ff fdd2 	bl	800ec80 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
		callback->write = write;
 800f0dc:	e9c0 7601 	strd	r7, r6, [r0, #4]
 800f0e0:	e7f5      	b.n	800f0ce <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x72>
	...

0800f0e4 <_ZN13Communication12AddRegistersEv>:
void Communication::AddRegisters(void) {
 800f0e4:	b510      	push	{r4, lr}
 800f0e6:	4604      	mov	r4, r0
	registers->AddRegister<uint8_t>(REG_COM_ID_PROPAGATION);
 800f0e8:	2101      	movs	r1, #1
 800f0ea:	6840      	ldr	r0, [r0, #4]
 800f0ec:	f7ff fed4 	bl	800ee98 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_COM_ID_PROPAGATION);
 800f0f0:	2101      	movs	r1, #1
 800f0f2:	6860      	ldr	r0, [r4, #4]
 800f0f4:	f008 f826 	bl	8017144 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_COM_ID_PROPAGATION, (void*) this,
 800f0f8:	4b32      	ldr	r3, [pc, #200]	@ (800f1c4 <_ZN13Communication12AddRegistersEv+0xe0>)
 800f0fa:	4622      	mov	r2, r4
 800f0fc:	6860      	ldr	r0, [r4, #4]
 800f0fe:	2101      	movs	r1, #1
 800f100:	f7ff ffac 	bl	800f05c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_COM_ADDRESS);
 800f104:	6860      	ldr	r0, [r4, #4]
 800f106:	2102      	movs	r1, #2
 800f108:	f7ff fec6 	bl	800ee98 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_COM_ADDRESS);
 800f10c:	2102      	movs	r1, #2
 800f10e:	6860      	ldr	r0, [r4, #4]
 800f110:	f008 f818 	bl	8017144 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_COM_ADDRESS, &CommunicationSemaphore);
 800f114:	4622      	mov	r2, r4
 800f116:	2102      	movs	r1, #2
 800f118:	6860      	ldr	r0, [r4, #4]
 800f11a:	f007 fff9 	bl	8017110 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer(REG_COM_ADDRESS, &address);
 800f11e:	f104 0214 	add.w	r2, r4, #20
 800f122:	6860      	ldr	r0, [r4, #4]
 800f124:	2102      	movs	r1, #2
 800f126:	f7ff ff58 	bl	800efda <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0>
	registers->AddRegister<uint8_t>(REG_COM_ADD_GROUP_ADDRESS);
 800f12a:	6860      	ldr	r0, [r4, #4]
 800f12c:	2103      	movs	r1, #3
 800f12e:	f7ff feb3 	bl	800ee98 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_COM_ADD_GROUP_ADDRESS);
 800f132:	2103      	movs	r1, #3
 800f134:	6860      	ldr	r0, [r4, #4]
 800f136:	f008 f805 	bl	8017144 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_COM_ADD_GROUP_ADDRESS, (void*) this,
 800f13a:	4622      	mov	r2, r4
 800f13c:	4b22      	ldr	r3, [pc, #136]	@ (800f1c8 <_ZN13Communication12AddRegistersEv+0xe4>)
 800f13e:	2103      	movs	r1, #3
 800f140:	6860      	ldr	r0, [r4, #4]
 800f142:	f7ff ff8b 	bl	800f05c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_COM_REMOVE_GROUP_ADDRESS);
 800f146:	6860      	ldr	r0, [r4, #4]
 800f148:	2104      	movs	r1, #4
 800f14a:	f7ff fea5 	bl	800ee98 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_COM_REMOVE_GROUP_ADDRESS);
 800f14e:	2104      	movs	r1, #4
 800f150:	6860      	ldr	r0, [r4, #4]
 800f152:	f007 fff7 	bl	8017144 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_COM_REMOVE_GROUP_ADDRESS, (void*) this,
 800f156:	4622      	mov	r2, r4
 800f158:	4b1c      	ldr	r3, [pc, #112]	@ (800f1cc <_ZN13Communication12AddRegistersEv+0xe8>)
 800f15a:	2104      	movs	r1, #4
 800f15c:	6860      	ldr	r0, [r4, #4]
 800f15e:	f7ff ff7d 	bl	800f05c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_COM_CLEAR_GROUP_ADDRESS);
 800f162:	6860      	ldr	r0, [r4, #4]
 800f164:	2105      	movs	r1, #5
 800f166:	f7ff fe97 	bl	800ee98 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_COM_CLEAR_GROUP_ADDRESS);
 800f16a:	2105      	movs	r1, #5
 800f16c:	6860      	ldr	r0, [r4, #4]
 800f16e:	f007 ffe9 	bl	8017144 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_COM_CLEAR_GROUP_ADDRESS, (void*) this,
 800f172:	4b17      	ldr	r3, [pc, #92]	@ (800f1d0 <_ZN13Communication12AddRegistersEv+0xec>)
 800f174:	4622      	mov	r2, r4
 800f176:	6860      	ldr	r0, [r4, #4]
 800f178:	2105      	movs	r1, #5
 800f17a:	f7ff ff6f 	bl	800f05c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_COM_GET_GROUP_ADDRESS);
 800f17e:	6860      	ldr	r0, [r4, #4]
 800f180:	2106      	movs	r1, #6
 800f182:	f7ff fe89 	bl	800ee98 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsVector(REG_COM_GET_GROUP_ADDRESS);
 800f186:	2106      	movs	r1, #6
 800f188:	6860      	ldr	r0, [r4, #4]
 800f18a:	f008 f813 	bl	80171b4 <_ZN9Registers19SetRegisterAsVectorEt>
	return AddRegisterPointer(ID, reinterpreted_pointer);
 800f18e:	f104 0218 	add.w	r2, r4, #24
 800f192:	6860      	ldr	r0, [r4, #4]
 800f194:	2106      	movs	r1, #6
 800f196:	f7ff ff20 	bl	800efda <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0>
	registers->SetRegisterPermissions(REG_COM_GET_GROUP_ADDRESS, READ_PERMISSION);
 800f19a:	2202      	movs	r2, #2
 800f19c:	2106      	movs	r1, #6
 800f19e:	6860      	ldr	r0, [r4, #4]
 800f1a0:	f008 f80b 	bl	80171ba <_ZN9Registers22SetRegisterPermissionsEth>
	registers->AddRegister<uint8_t>(REG_COM_FORWARD_MESSAGE);
 800f1a4:	6860      	ldr	r0, [r4, #4]
 800f1a6:	2107      	movs	r1, #7
 800f1a8:	f7ff fe76 	bl	800ee98 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsVector(REG_COM_FORWARD_MESSAGE);
 800f1ac:	2107      	movs	r1, #7
 800f1ae:	6860      	ldr	r0, [r4, #4]
 800f1b0:	f008 f800 	bl	80171b4 <_ZN9Registers19SetRegisterAsVectorEt>
	registers->AddWriteCallback<uint8_t>(REG_COM_FORWARD_MESSAGE, (void*) this,
 800f1b4:	4622      	mov	r2, r4
 800f1b6:	6860      	ldr	r0, [r4, #4]
 800f1b8:	2107      	movs	r1, #7
 800f1ba:	4b06      	ldr	r3, [pc, #24]	@ (800f1d4 <_ZN13Communication12AddRegistersEv+0xf0>)
}
 800f1bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	registers->AddWriteCallback<uint8_t>(REG_COM_FORWARD_MESSAGE, (void*) this,
 800f1c0:	f7ff bf4c 	b.w	800f05c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
 800f1c4:	080111b3 	.word	0x080111b3
 800f1c8:	0800f3a9 	.word	0x0800f3a9
 800f1cc:	0800f507 	.word	0x0800f507
 800f1d0:	0800ec7b 	.word	0x0800ec7b
 800f1d4:	08010e6d 	.word	0x08010e6d

0800f1d8 <_ZN23SubscriberConfigurationD1Ev>:
struct SubscriberConfiguration {
 800f1d8:	b510      	push	{r4, lr}
 800f1da:	4604      	mov	r4, r0
      }
 800f1dc:	301c      	adds	r0, #28
 800f1de:	f7f1 fb5d 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	_M_deallocate(_M_impl._M_start,
 800f1e2:	6920      	ldr	r0, [r4, #16]
	if (__p)
 800f1e4:	b118      	cbz	r0, 800f1ee <_ZN23SubscriberConfigurationD1Ev+0x16>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800f1e6:	69a1      	ldr	r1, [r4, #24]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800f1e8:	1a09      	subs	r1, r1, r0
 800f1ea:	f00a faf1 	bl	80197d0 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 800f1ee:	6860      	ldr	r0, [r4, #4]
	if (__p)
 800f1f0:	b118      	cbz	r0, 800f1fa <_ZN23SubscriberConfigurationD1Ev+0x22>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800f1f2:	68e1      	ldr	r1, [r4, #12]
 800f1f4:	1a09      	subs	r1, r1, r0
 800f1f6:	f00a faeb 	bl	80197d0 <_ZdlPvj>
 800f1fa:	4620      	mov	r0, r4
 800f1fc:	bd10      	pop	{r4, pc}

0800f1fe <_ZNSt12_Vector_baseImSaImEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800f1fe:	b510      	push	{r4, lr}
 800f200:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 800f202:	6800      	ldr	r0, [r0, #0]
	if (__p)
 800f204:	b120      	cbz	r0, 800f210 <_ZNSt12_Vector_baseImSaImEED1Ev+0x12>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800f206:	68a1      	ldr	r1, [r4, #8]
 800f208:	1a09      	subs	r1, r1, r0
 800f20a:	1089      	asrs	r1, r1, #2
 800f20c:	f7ff fa34 	bl	800e678 <_ZNSt12_Vector_baseIP21CommunicationProtocolSaIS1_EE13_M_deallocateEPS1_j.part.0>
      }
 800f210:	4620      	mov	r0, r4
 800f212:	bd10      	pop	{r4, pc}

0800f214 <_ZNSt6vectorImSaImEEaSEOS1_.isra.0>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 800f214:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 800f216:	680d      	ldr	r5, [r1, #0]
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 800f218:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 800f21a:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 800f21c:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 800f220:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 800f222:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 800f224:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 800f226:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 800f228:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 800f22a:	688d      	ldr	r5, [r1, #8]
 800f22c:	6085      	str	r5, [r0, #8]
      }
 800f22e:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 800f230:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 800f232:	e9c1 3300 	strd	r3, r3, [r1]
 800f236:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 800f23a:	f7ff ffe0 	bl	800f1fe <_ZNSt12_Vector_baseImSaImEED1Ev>
      }
 800f23e:	b005      	add	sp, #20
 800f240:	bd30      	pop	{r4, r5, pc}

0800f242 <_ZNSt12_Vector_baseIaSaIaEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800f242:	b510      	push	{r4, lr}
 800f244:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 800f246:	6800      	ldr	r0, [r0, #0]
	if (__p)
 800f248:	b118      	cbz	r0, 800f252 <_ZNSt12_Vector_baseIaSaIaEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800f24a:	68a1      	ldr	r1, [r4, #8]
 800f24c:	1a09      	subs	r1, r1, r0
 800f24e:	f00a fabf 	bl	80197d0 <_ZdlPvj>
      }
 800f252:	4620      	mov	r0, r4
 800f254:	bd10      	pop	{r4, pc}

0800f256 <_ZNSt6vectorIaSaIaEEaSEOS1_.isra.0>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 800f256:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 800f258:	680d      	ldr	r5, [r1, #0]
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 800f25a:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 800f25c:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 800f25e:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 800f262:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 800f264:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 800f266:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 800f268:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 800f26a:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 800f26c:	688d      	ldr	r5, [r1, #8]
 800f26e:	6085      	str	r5, [r0, #8]
      }
 800f270:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 800f272:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 800f274:	e9c1 3300 	strd	r3, r3, [r1]
 800f278:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 800f27c:	f7ff ffe1 	bl	800f242 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
      }
 800f280:	b005      	add	sp, #20
 800f282:	bd30      	pop	{r4, r5, pc}

0800f284 <_ZNSt6vectorIfSaIfEEaSEOS1_.isra.0>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 800f284:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 800f286:	680d      	ldr	r5, [r1, #0]
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 800f288:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 800f28a:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 800f28c:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 800f290:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 800f292:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 800f294:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 800f296:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 800f298:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 800f29a:	688d      	ldr	r5, [r1, #8]
 800f29c:	6085      	str	r5, [r0, #8]
      }
 800f29e:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 800f2a0:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 800f2a2:	e9c1 3300 	strd	r3, r3, [r1]
 800f2a6:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 800f2aa:	f7f2 fcf5 	bl	8001c98 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
      }
 800f2ae:	b005      	add	sp, #20
 800f2b0:	bd30      	pop	{r4, r5, pc}
	...

0800f2b4 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>:
      vector<_Tp, _Alloc>::
 800f2b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800f2b8:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
      vector<_Tp, _Alloc>::
 800f2bc:	4605      	mov	r5, r0
 800f2be:	4689      	mov	r9, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800f2c0:	429c      	cmp	r4, r3
 800f2c2:	d006      	beq.n	800f2d2 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x1e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800f2c4:	780b      	ldrb	r3, [r1, #0]
 800f2c6:	7023      	strb	r3, [r4, #0]
	    ++this->_M_impl._M_finish;
 800f2c8:	6843      	ldr	r3, [r0, #4]
 800f2ca:	3301      	adds	r3, #1
 800f2cc:	6043      	str	r3, [r0, #4]
      }
 800f2ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800f2d2:	4a10      	ldr	r2, [pc, #64]	@ (800f314 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x60>)
 800f2d4:	2101      	movs	r1, #1
 800f2d6:	f7f1 fb02 	bl	80008de <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
      pointer __old_start = this->_M_impl._M_start;
 800f2da:	682f      	ldr	r7, [r5, #0]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800f2dc:	4680      	mov	r8, r0
      pointer __new_start(this->_M_allocate(__len));
 800f2de:	f7ff fb8a 	bl	800e9f6 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
 800f2e2:	1be4      	subs	r4, r4, r7
 800f2e4:	f899 3000 	ldrb.w	r3, [r9]
 800f2e8:	4606      	mov	r6, r0
      if (__count > 0)
 800f2ea:	2c00      	cmp	r4, #0
 800f2ec:	5503      	strb	r3, [r0, r4]
 800f2ee:	dd03      	ble.n	800f2f8 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x44>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800f2f0:	4622      	mov	r2, r4
 800f2f2:	4639      	mov	r1, r7
 800f2f4:	f00a fc1e 	bl	8019b34 <memmove>
	      ++__new_finish;
 800f2f8:	3401      	adds	r4, #1
 800f2fa:	4434      	add	r4, r6
	if (__p)
 800f2fc:	b127      	cbz	r7, 800f308 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x54>
		    this->_M_impl._M_end_of_storage - __old_start);
 800f2fe:	68a9      	ldr	r1, [r5, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800f300:	4638      	mov	r0, r7
 800f302:	1bc9      	subs	r1, r1, r7
 800f304:	f00a fa64 	bl	80197d0 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 800f308:	e9c5 6400 	strd	r6, r4, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800f30c:	4446      	add	r6, r8
 800f30e:	60ae      	str	r6, [r5, #8]
      }
 800f310:	e7dd      	b.n	800f2ce <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x1a>
 800f312:	bf00      	nop
 800f314:	08019e3e 	.word	0x08019e3e

0800f318 <_ZNSt6vectorIhSaIhEE9push_backERKh>:
      push_back(const value_type& __x)
 800f318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800f31c:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
      push_back(const value_type& __x)
 800f320:	4605      	mov	r5, r0
 800f322:	4689      	mov	r9, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800f324:	429c      	cmp	r4, r3
 800f326:	d006      	beq.n	800f336 <_ZNSt6vectorIhSaIhEE9push_backERKh+0x1e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800f328:	780b      	ldrb	r3, [r1, #0]
 800f32a:	7023      	strb	r3, [r4, #0]
	    ++this->_M_impl._M_finish;
 800f32c:	6843      	ldr	r3, [r0, #4]
 800f32e:	3301      	adds	r3, #1
 800f330:	6043      	str	r3, [r0, #4]
      }
 800f332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800f336:	4a10      	ldr	r2, [pc, #64]	@ (800f378 <_ZNSt6vectorIhSaIhEE9push_backERKh+0x60>)
 800f338:	2101      	movs	r1, #1
 800f33a:	f7f1 fad0 	bl	80008de <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
      pointer __old_start = this->_M_impl._M_start;
 800f33e:	682f      	ldr	r7, [r5, #0]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800f340:	4680      	mov	r8, r0
      pointer __new_start(this->_M_allocate(__len));
 800f342:	f7ff fb58 	bl	800e9f6 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
 800f346:	1be4      	subs	r4, r4, r7
 800f348:	f899 3000 	ldrb.w	r3, [r9]
 800f34c:	4606      	mov	r6, r0
      if (__count > 0)
 800f34e:	2c00      	cmp	r4, #0
 800f350:	5503      	strb	r3, [r0, r4]
 800f352:	dd03      	ble.n	800f35c <_ZNSt6vectorIhSaIhEE9push_backERKh+0x44>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800f354:	4622      	mov	r2, r4
 800f356:	4639      	mov	r1, r7
 800f358:	f00a fbec 	bl	8019b34 <memmove>
	      ++__new_finish;
 800f35c:	3401      	adds	r4, #1
 800f35e:	4434      	add	r4, r6
	if (__p)
 800f360:	b127      	cbz	r7, 800f36c <_ZNSt6vectorIhSaIhEE9push_backERKh+0x54>
		    this->_M_impl._M_end_of_storage - __old_start);
 800f362:	68a9      	ldr	r1, [r5, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800f364:	4638      	mov	r0, r7
 800f366:	1bc9      	subs	r1, r1, r7
 800f368:	f00a fa32 	bl	80197d0 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 800f36c:	e9c5 6400 	strd	r6, r4, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800f370:	4446      	add	r6, r8
 800f372:	60ae      	str	r6, [r5, #8]
      }
 800f374:	e7dd      	b.n	800f332 <_ZNSt6vectorIhSaIhEE9push_backERKh+0x1a>
 800f376:	bf00      	nop
 800f378:	08019e3e 	.word	0x08019e3e

0800f37c <_ZN13Communication15AddGroupAddressEh>:
bool Communication::AddGroupAddress(uint8_t address) {
 800f37c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 800f37e:	4605      	mov	r5, r0
bool Communication::AddGroupAddress(uint8_t address) {
 800f380:	4604      	mov	r4, r0
 800f382:	f88d 1007 	strb.w	r1, [sp, #7]
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 800f386:	f04f 31ff 	mov.w	r1, #4294967295
 800f38a:	f855 0b18 	ldr.w	r0, [r5], #24
 800f38e:	f7fc ff15 	bl	800c1bc <osSemaphoreAcquire>
	group_addresses.push_back(address);
 800f392:	f10d 0107 	add.w	r1, sp, #7
 800f396:	4628      	mov	r0, r5
 800f398:	f7ff ffbe 	bl	800f318 <_ZNSt6vectorIhSaIhEE9push_backERKh>
	osSemaphoreRelease(CommunicationSemaphore);
 800f39c:	6820      	ldr	r0, [r4, #0]
 800f39e:	f7fc ff41 	bl	800c224 <osSemaphoreRelease>
}
 800f3a2:	2001      	movs	r0, #1
 800f3a4:	b003      	add	sp, #12
 800f3a6:	bd30      	pop	{r4, r5, pc}

0800f3a8 <_ZZN13Communication12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t>:
			return self->AddGroupAddress(*input);
 800f3a8:	7811      	ldrb	r1, [r2, #0]
 800f3aa:	f7ff bfe7 	b.w	800f37c <_ZN13Communication15AddGroupAddressEh>
	...

0800f3b0 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE2atEj>:
      at(size_type __n)
 800f3b0:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f3b2:	e9d0 5400 	ldrd	r5, r4, [r0]
 800f3b6:	1b64      	subs	r4, r4, r5
	if (__n >= this->size())
 800f3b8:	ebb1 1f24 	cmp.w	r1, r4, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f3bc:	ea4f 1224 	mov.w	r2, r4, asr #4
	if (__n >= this->size())
 800f3c0:	d302      	bcc.n	800f3c8 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 800f3c2:	4803      	ldr	r0, [pc, #12]	@ (800f3d0 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE2atEj+0x20>)
 800f3c4:	f00a fae1 	bl	801998a <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 800f3c8:	eb05 1001 	add.w	r0, r5, r1, lsl #4
 800f3cc:	bd38      	pop	{r3, r4, r5, pc}
 800f3ce:	bf00      	nop
 800f3d0:	0801a080 	.word	0x0801a080

0800f3d4 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE2atEj>:
      at(size_type __n)
 800f3d4:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f3d6:	e9d0 5400 	ldrd	r5, r4, [r0]
 800f3da:	1b64      	subs	r4, r4, r5
	if (__n >= this->size())
 800f3dc:	ebb1 1f24 	cmp.w	r1, r4, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f3e0:	ea4f 1224 	mov.w	r2, r4, asr #4
	if (__n >= this->size())
 800f3e4:	d302      	bcc.n	800f3ec <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 800f3e6:	4803      	ldr	r0, [pc, #12]	@ (800f3f4 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE2atEj+0x20>)
 800f3e8:	f00a facf 	bl	801998a <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 800f3ec:	eb05 1001 	add.w	r0, r5, r1, lsl #4
 800f3f0:	bd38      	pop	{r3, r4, r5, pc}
 800f3f2:	bf00      	nop
 800f3f4:	0801a080 	.word	0x0801a080

0800f3f8 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE2atEj>:
      at(size_type __n)
 800f3f8:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f3fa:	e9d0 5400 	ldrd	r5, r4, [r0]
 800f3fe:	1b64      	subs	r4, r4, r5
	if (__n >= this->size())
 800f400:	ebb1 1f24 	cmp.w	r1, r4, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f404:	ea4f 1224 	mov.w	r2, r4, asr #4
	if (__n >= this->size())
 800f408:	d302      	bcc.n	800f410 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 800f40a:	4803      	ldr	r0, [pc, #12]	@ (800f418 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE2atEj+0x20>)
 800f40c:	f00a fabd 	bl	801998a <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 800f410:	eb05 1001 	add.w	r0, r5, r1, lsl #4
 800f414:	bd38      	pop	{r3, r4, r5, pc}
 800f416:	bf00      	nop
 800f418:	0801a080 	.word	0x0801a080

0800f41c <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800f41c:	b538      	push	{r3, r4, r5, lr}
 800f41e:	4603      	mov	r3, r0
 800f420:	4610      	mov	r0, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f422:	e9d3 3500 	ldrd	r3, r5, [r3]
 800f426:	1aed      	subs	r5, r5, r3
	if (max_size() - size() < __n)
 800f428:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f42c:	10ac      	asrs	r4, r5, #2
	if (max_size() - size() < __n)
 800f42e:	eba3 05a5 	sub.w	r5, r3, r5, asr #2
 800f432:	428d      	cmp	r5, r1
 800f434:	d201      	bcs.n	800f43a <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x1e>
	  __throw_length_error(__N(__s));
 800f436:	f00a faa5 	bl	8019984 <_ZSt20__throw_length_errorPKc>
 800f43a:	42a1      	cmp	r1, r4
 800f43c:	bf38      	it	cc
 800f43e:	4621      	movcc	r1, r4
 800f440:	1864      	adds	r4, r4, r1
 800f442:	d204      	bcs.n	800f44e <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x32>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800f444:	429c      	cmp	r4, r3
 800f446:	4620      	mov	r0, r4
 800f448:	bf28      	it	cs
 800f44a:	4618      	movcs	r0, r3
      }
 800f44c:	bd38      	pop	{r3, r4, r5, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800f44e:	4618      	mov	r0, r3
 800f450:	e7fc      	b.n	800f44c <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x30>

0800f452 <_ZNKSt6vectorIaSaIaEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800f452:	b510      	push	{r4, lr}
 800f454:	4604      	mov	r4, r0
 800f456:	4610      	mov	r0, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f458:	e9d4 2300 	ldrd	r2, r3, [r4]
	if (max_size() - size() < __n)
 800f45c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f460:	1a9b      	subs	r3, r3, r2
	if (max_size() - size() < __n)
 800f462:	1ae2      	subs	r2, r4, r3
 800f464:	428a      	cmp	r2, r1
 800f466:	d201      	bcs.n	800f46c <_ZNKSt6vectorIaSaIaEE12_M_check_lenEjPKc+0x1a>
	  __throw_length_error(__N(__s));
 800f468:	f00a fa8c 	bl	8019984 <_ZSt20__throw_length_errorPKc>
 800f46c:	4299      	cmp	r1, r3
 800f46e:	bf38      	it	cc
 800f470:	4619      	movcc	r1, r3
 800f472:	185b      	adds	r3, r3, r1
 800f474:	d204      	bcs.n	800f480 <_ZNKSt6vectorIaSaIaEE12_M_check_lenEjPKc+0x2e>
 800f476:	42a3      	cmp	r3, r4
 800f478:	bf28      	it	cs
 800f47a:	4623      	movcs	r3, r4
 800f47c:	4618      	mov	r0, r3
      }
 800f47e:	bd10      	pop	{r4, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800f480:	4620      	mov	r0, r4
 800f482:	e7fc      	b.n	800f47e <_ZNKSt6vectorIaSaIaEE12_M_check_lenEjPKc+0x2c>

0800f484 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800f484:	b538      	push	{r3, r4, r5, lr}
 800f486:	4603      	mov	r3, r0
 800f488:	4610      	mov	r0, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f48a:	e9d3 3500 	ldrd	r3, r5, [r3]
 800f48e:	1aed      	subs	r5, r5, r3
	if (max_size() - size() < __n)
 800f490:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f494:	10ac      	asrs	r4, r5, #2
	if (max_size() - size() < __n)
 800f496:	eba3 05a5 	sub.w	r5, r3, r5, asr #2
 800f49a:	428d      	cmp	r5, r1
 800f49c:	d201      	bcs.n	800f4a2 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x1e>
	  __throw_length_error(__N(__s));
 800f49e:	f00a fa71 	bl	8019984 <_ZSt20__throw_length_errorPKc>
 800f4a2:	42a1      	cmp	r1, r4
 800f4a4:	bf38      	it	cc
 800f4a6:	4621      	movcc	r1, r4
 800f4a8:	1864      	adds	r4, r4, r1
 800f4aa:	d204      	bcs.n	800f4b6 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x32>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800f4ac:	429c      	cmp	r4, r3
 800f4ae:	4620      	mov	r0, r4
 800f4b0:	bf28      	it	cs
 800f4b2:	4618      	movcs	r0, r3
      }
 800f4b4:	bd38      	pop	{r3, r4, r5, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	e7fc      	b.n	800f4b4 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x30>

0800f4ba <_ZN13Communication18RemoveGroupAddressEh>:
bool Communication::RemoveGroupAddress(uint8_t address_) {
 800f4ba:	b570      	push	{r4, r5, r6, lr}
 800f4bc:	4604      	mov	r4, r0
 800f4be:	460d      	mov	r5, r1
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 800f4c0:	6800      	ldr	r0, [r0, #0]
 800f4c2:	f04f 31ff 	mov.w	r1, #4294967295
 800f4c6:	f7fc fe79 	bl	800c1bc <osSemaphoreAcquire>
      : _M_current(__i) { }
 800f4ca:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
	for (uint8_t address : group_addresses) {
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	428b      	cmp	r3, r1
 800f4d2:	d104      	bne.n	800f4de <_ZN13Communication18RemoveGroupAddressEh+0x24>
	osSemaphoreRelease(CommunicationSemaphore);
 800f4d4:	6820      	ldr	r0, [r4, #0]
 800f4d6:	f7fc fea5 	bl	800c224 <osSemaphoreRelease>
	return false;
 800f4da:	2000      	movs	r0, #0
 800f4dc:	e010      	b.n	800f500 <_ZN13Communication18RemoveGroupAddressEh+0x46>
 800f4de:	461a      	mov	r2, r3
		if (address == address_) {
 800f4e0:	f812 6b01 	ldrb.w	r6, [r2], #1
 800f4e4:	42ae      	cmp	r6, r5
 800f4e6:	d10c      	bne.n	800f502 <_ZN13Communication18RemoveGroupAddressEh+0x48>
      { return __normal_iterator(_M_current + __n); }
 800f4e8:	1a1a      	subs	r2, r3, r0
 800f4ea:	fa50 f282 	uxtab	r2, r0, r2
 800f4ee:	1c50      	adds	r0, r2, #1
      if (__position + 1 != end())
 800f4f0:	4281      	cmp	r1, r0
 800f4f2:	d001      	beq.n	800f4f8 <_ZN13Communication18RemoveGroupAddressEh+0x3e>
			      _Category>::__copy_m(__first, __last, __result);
 800f4f4:	f7f2 fa02 	bl	80018fc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
      --this->_M_impl._M_finish;
 800f4f8:	69e3      	ldr	r3, [r4, #28]
			return true;
 800f4fa:	2001      	movs	r0, #1
 800f4fc:	3b01      	subs	r3, #1
 800f4fe:	61e3      	str	r3, [r4, #28]
}
 800f500:	bd70      	pop	{r4, r5, r6, pc}
 800f502:	4613      	mov	r3, r2
 800f504:	e7e4      	b.n	800f4d0 <_ZN13Communication18RemoveGroupAddressEh+0x16>

0800f506 <_ZZN13Communication12AddRegistersEvENUlPvtPhtE1_4_FUNES0_tS1_t>:
			return self->RemoveGroupAddress(*input);
 800f506:	7811      	ldrb	r1, [r2, #0]
 800f508:	f7ff bfd7 	b.w	800f4ba <_ZN13Communication18RemoveGroupAddressEh>

0800f50c <_ZN14MessageElementC1ERKS_>:
struct MessageElement {
 800f50c:	b510      	push	{r4, lr}
 800f50e:	460b      	mov	r3, r1
 800f510:	4604      	mov	r4, r0
 800f512:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f516:	7a1a      	ldrb	r2, [r3, #8]
 800f518:	80a1      	strh	r1, [r4, #4]
 800f51a:	88d9      	ldrh	r1, [r3, #6]
 800f51c:	6020      	str	r0, [r4, #0]
 800f51e:	f104 000c 	add.w	r0, r4, #12
 800f522:	80e1      	strh	r1, [r4, #6]
 800f524:	f103 010c 	add.w	r1, r3, #12
 800f528:	7222      	strb	r2, [r4, #8]
 800f52a:	f7f1 fa67 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 800f52e:	4620      	mov	r0, r4
 800f530:	bd10      	pop	{r4, pc}

0800f532 <_ZN13MessageHeaderC1ERKS_>:
 800f532:	b538      	push	{r3, r4, r5, lr}
 800f534:	460d      	mov	r5, r1
 800f536:	f811 3b04 	ldrb.w	r3, [r1], #4
 800f53a:	4604      	mov	r4, r0
 800f53c:	f800 3b04 	strb.w	r3, [r0], #4
 800f540:	f7f1 fa5c 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 800f544:	8a2b      	ldrh	r3, [r5, #16]
 800f546:	4620      	mov	r0, r4
 800f548:	8223      	strh	r3, [r4, #16]
 800f54a:	bd38      	pop	{r3, r4, r5, pc}

0800f54c <_ZN13Communication4SpinEv>:
void Communication::Spin(void) {
 800f54c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t index = 0;
 800f550:	2500      	movs	r5, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f552:	4f29      	ldr	r7, [pc, #164]	@ (800f5f8 <_ZN13Communication4SpinEv+0xac>)
void Communication::Spin(void) {
 800f554:	b08d      	sub	sp, #52	@ 0x34
 800f556:	4604      	mov	r4, r0
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 800f558:	f04f 31ff 	mov.w	r1, #4294967295
 800f55c:	6800      	ldr	r0, [r0, #0]
 800f55e:	f7fc fe2d 	bl	800c1bc <osSemaphoreAcquire>
 800f562:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 800f566:	1a9b      	subs	r3, r3, r2
 800f568:	109b      	asrs	r3, r3, #2
 800f56a:	437b      	muls	r3, r7
	while (index < pending_messages.size()) {
 800f56c:	429d      	cmp	r5, r3
 800f56e:	d308      	bcc.n	800f582 <_ZN13Communication4SpinEv+0x36>
	osSemaphoreRelease(CommunicationSemaphore);
 800f570:	6820      	ldr	r0, [r4, #0]
 800f572:	f7fc fe57 	bl	800c224 <osSemaphoreRelease>
	osDelay(DEFAULT_COMMUNICATION_PERIOD);
 800f576:	2064      	movs	r0, #100	@ 0x64
}
 800f578:	b00d      	add	sp, #52	@ 0x34
 800f57a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	osDelay(DEFAULT_COMMUNICATION_PERIOD);
 800f57e:	f7fc bdb3 	b.w	800c0e8 <osDelay>
	return *(this->_M_impl._M_start + __n);
 800f582:	eb05 0185 	add.w	r1, r5, r5, lsl #2
		MessageHeader message = pending_messages[index];
 800f586:	a802      	add	r0, sp, #8
 800f588:	ea4f 0881 	mov.w	r8, r1, lsl #2
 800f58c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800f590:	f7ff ffcf 	bl	800f532 <_ZN13MessageHeaderC1ERKS_>
		CommunicationProtocol* protocol = FindProtocol(message.interface, &success);
 800f594:	f10d 0207 	add.w	r2, sp, #7
 800f598:	f89d 1008 	ldrb.w	r1, [sp, #8]
 800f59c:	4620      	mov	r0, r4
 800f59e:	f7ff fab5 	bl	800eb0c <_ZN13Communication12FindProtocolEhPb>
		if (!success)
 800f5a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
		CommunicationProtocol* protocol = FindProtocol(message.interface, &success);
 800f5a6:	4606      	mov	r6, r0
		if (!success)
 800f5a8:	b92b      	cbnz	r3, 800f5b6 <_ZN13Communication4SpinEv+0x6a>
 800f5aa:	4620      	mov	r0, r4
 800f5ac:	f850 1f30 	ldr.w	r1, [r0, #48]!
      { return _M_erase(begin() + (__position - cbegin())); }
 800f5b0:	4441      	add	r1, r8
 800f5b2:	f7ff fb77 	bl	800eca4 <_ZNSt6vectorI13MessageHeaderSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>
		message.source_address = address; // set the source address as the module address
 800f5b6:	7d23      	ldrb	r3, [r4, #20]
		HAL_StatusTypeDef status = protocol->Send(message);
 800f5b8:	a902      	add	r1, sp, #8
 800f5ba:	a807      	add	r0, sp, #28
		message.source_address = address; // set the source address as the module address
 800f5bc:	f88d 3019 	strb.w	r3, [sp, #25]
		HAL_StatusTypeDef status = protocol->Send(message);
 800f5c0:	6833      	ldr	r3, [r6, #0]
 800f5c2:	f8d3 9008 	ldr.w	r9, [r3, #8]
 800f5c6:	f7ff ffb4 	bl	800f532 <_ZN13MessageHeaderC1ERKS_>
 800f5ca:	a907      	add	r1, sp, #28
 800f5cc:	4630      	mov	r0, r6
 800f5ce:	47c8      	blx	r9
 800f5d0:	4606      	mov	r6, r0
      }
 800f5d2:	a808      	add	r0, sp, #32
 800f5d4:	f7f1 f962 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (status == HAL_OK || status == HAL_ERROR)
 800f5d8:	2e01      	cmp	r6, #1
 800f5da:	d809      	bhi.n	800f5f0 <_ZN13Communication4SpinEv+0xa4>
 800f5dc:	4620      	mov	r0, r4
 800f5de:	f850 1f30 	ldr.w	r1, [r0, #48]!
      { return _M_erase(begin() + (__position - cbegin())); }
 800f5e2:	4441      	add	r1, r8
 800f5e4:	f7ff fb5e 	bl	800eca4 <_ZNSt6vectorI13MessageHeaderSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>
      }
 800f5e8:	a803      	add	r0, sp, #12
 800f5ea:	f7f1 f957 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 800f5ee:	e7b8      	b.n	800f562 <_ZN13Communication4SpinEv+0x16>
			index++;
 800f5f0:	3501      	adds	r5, #1
 800f5f2:	b2ed      	uxtb	r5, r5
 800f5f4:	e7f8      	b.n	800f5e8 <_ZN13Communication4SpinEv+0x9c>
 800f5f6:	bf00      	nop
 800f5f8:	cccccccd 	.word	0xcccccccd

0800f5fc <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800f5fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f600:	e9d0 7900 	ldrd	r7, r9, [r0]
 800f604:	4b3f      	ldr	r3, [pc, #252]	@ (800f704 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x108>)
 800f606:	4606      	mov	r6, r0
 800f608:	eba9 0507 	sub.w	r5, r9, r7
 800f60c:	4688      	mov	r8, r1
 800f60e:	4614      	mov	r4, r2
 800f610:	10ad      	asrs	r5, r5, #2
 800f612:	435d      	muls	r5, r3
	if (max_size() - size() < __n)
 800f614:	4b3c      	ldr	r3, [pc, #240]	@ (800f708 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x10c>)
 800f616:	429d      	cmp	r5, r3
 800f618:	d102      	bne.n	800f620 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
 800f61a:	483c      	ldr	r0, [pc, #240]	@ (800f70c <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x110>)
 800f61c:	f00a f9b2 	bl	8019984 <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 800f620:	45b9      	cmp	r9, r7
 800f622:	bf14      	ite	ne
 800f624:	462a      	movne	r2, r5
 800f626:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 800f628:	eba1 0b07 	sub.w	fp, r1, r7
 800f62c:	18ad      	adds	r5, r5, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800f62e:	d22d      	bcs.n	800f68c <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x90>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800f630:	b375      	cbz	r5, 800f690 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x94>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800f632:	429d      	cmp	r5, r3
 800f634:	bf28      	it	cs
 800f636:	461d      	movcs	r5, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800f638:	2014      	movs	r0, #20
 800f63a:	4368      	muls	r0, r5
 800f63c:	f00a f8ed 	bl	801981a <_Znwj>
 800f640:	4682      	mov	sl, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800f642:	4621      	mov	r1, r4
 800f644:	eb0a 000b 	add.w	r0, sl, fp
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f648:	463c      	mov	r4, r7
      _ForwardIterator __cur = __result;
 800f64a:	46d3      	mov	fp, sl
 800f64c:	f7ff ff71 	bl	800f532 <_ZN13MessageHeaderC1ERKS_>
      for (; __first != __last; ++__first, (void)++__cur)
 800f650:	45a0      	cmp	r8, r4
 800f652:	f04f 0300 	mov.w	r3, #0
 800f656:	f10b 0b14 	add.w	fp, fp, #20
 800f65a:	d11b      	bne.n	800f694 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x98>
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 800f65c:	f04f 0800 	mov.w	r8, #0
 800f660:	454c      	cmp	r4, r9
 800f662:	465b      	mov	r3, fp
 800f664:	f10b 0b14 	add.w	fp, fp, #20
 800f668:	d12f      	bne.n	800f6ca <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xce>
	if (__p)
 800f66a:	b137      	cbz	r7, 800f67a <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x7e>
		    this->_M_impl._M_end_of_storage - __old_start);
 800f66c:	68b1      	ldr	r1, [r6, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800f66e:	4638      	mov	r0, r7
 800f670:	9301      	str	r3, [sp, #4]
 800f672:	1bc9      	subs	r1, r1, r7
 800f674:	f00a f8ac 	bl	80197d0 <_ZdlPvj>
 800f678:	9b01      	ldr	r3, [sp, #4]
      this->_M_impl._M_finish = __new_finish;
 800f67a:	e9c6 a300 	strd	sl, r3, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800f67e:	2314      	movs	r3, #20
 800f680:	fb03 a305 	mla	r3, r3, r5, sl
 800f684:	60b3      	str	r3, [r6, #8]
    }
 800f686:	b003      	add	sp, #12
 800f688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f68c:	461d      	mov	r5, r3
 800f68e:	e7d3      	b.n	800f638 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800f690:	46aa      	mov	sl, r5
 800f692:	e7d6      	b.n	800f642 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 800f694:	7822      	ldrb	r2, [r4, #0]
      }
 800f696:	1d20      	adds	r0, r4, #4
 800f698:	f80b 2c14 	strb.w	r2, [fp, #-20]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 800f69c:	6862      	ldr	r2, [r4, #4]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 800f69e:	6063      	str	r3, [r4, #4]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 800f6a0:	f84b 2c10 	str.w	r2, [fp, #-16]
 800f6a4:	68a2      	ldr	r2, [r4, #8]
 800f6a6:	f84b 2c0c 	str.w	r2, [fp, #-12]
	  _M_end_of_storage(__x._M_end_of_storage)
 800f6aa:	68e2      	ldr	r2, [r4, #12]
 800f6ac:	f84b 2c08 	str.w	r2, [fp, #-8]
 800f6b0:	7c22      	ldrb	r2, [r4, #16]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 800f6b2:	e9c4 3302 	strd	r3, r3, [r4, #8]
 800f6b6:	f80b 2c04 	strb.w	r2, [fp, #-4]
 800f6ba:	3414      	adds	r4, #20
 800f6bc:	f814 2c03 	ldrb.w	r2, [r4, #-3]
 800f6c0:	f80b 2c03 	strb.w	r2, [fp, #-3]
      }
 800f6c4:	f7f1 f8ea 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 800f6c8:	e7c2      	b.n	800f650 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x54>
 800f6ca:	7823      	ldrb	r3, [r4, #0]
 800f6cc:	1d20      	adds	r0, r4, #4
 800f6ce:	f80b 3c14 	strb.w	r3, [fp, #-20]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 800f6d2:	6863      	ldr	r3, [r4, #4]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 800f6d4:	f8c4 8004 	str.w	r8, [r4, #4]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 800f6d8:	f84b 3c10 	str.w	r3, [fp, #-16]
 800f6dc:	68a3      	ldr	r3, [r4, #8]
 800f6de:	f84b 3c0c 	str.w	r3, [fp, #-12]
	  _M_end_of_storage(__x._M_end_of_storage)
 800f6e2:	68e3      	ldr	r3, [r4, #12]
 800f6e4:	f84b 3c08 	str.w	r3, [fp, #-8]
 800f6e8:	7c23      	ldrb	r3, [r4, #16]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 800f6ea:	e9c4 8802 	strd	r8, r8, [r4, #8]
 800f6ee:	f80b 3c04 	strb.w	r3, [fp, #-4]
 800f6f2:	3414      	adds	r4, #20
 800f6f4:	f814 3c03 	ldrb.w	r3, [r4, #-3]
 800f6f8:	f80b 3c03 	strb.w	r3, [fp, #-3]
      }
 800f6fc:	f7f1 f8ce 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 800f700:	e7ae      	b.n	800f660 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x64>
 800f702:	bf00      	nop
 800f704:	cccccccd 	.word	0xcccccccd
 800f708:	06666666 	.word	0x06666666
 800f70c:	08019e3e 	.word	0x08019e3e

0800f710 <_ZN13Communication4SendE13MessageHeader>:
HAL_StatusTypeDef Communication::Send(MessageHeader message) {
 800f710:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f712:	b087      	sub	sp, #28
 800f714:	460d      	mov	r5, r1
	CommunicationProtocol* protocol = FindProtocol(message.interface, &success);
 800f716:	7809      	ldrb	r1, [r1, #0]
HAL_StatusTypeDef Communication::Send(MessageHeader message) {
 800f718:	4604      	mov	r4, r0
	CommunicationProtocol* protocol = FindProtocol(message.interface, &success);
 800f71a:	f10d 0203 	add.w	r2, sp, #3
 800f71e:	f7ff f9f5 	bl	800eb0c <_ZN13Communication12FindProtocolEhPb>
	if (!success) return HAL_ERROR;
 800f722:	f89d 3003 	ldrb.w	r3, [sp, #3]
	CommunicationProtocol* protocol = FindProtocol(message.interface, &success);
 800f726:	4606      	mov	r6, r0
	if (!success) return HAL_ERROR;
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d032      	beq.n	800f792 <_ZN13Communication4SendE13MessageHeader+0x82>
	message.source_address = address; // set the source address as the module address
 800f72c:	7d23      	ldrb	r3, [r4, #20]
	CommunicationLED(leds, message.interface);
 800f72e:	7829      	ldrb	r1, [r5, #0]
	message.source_address = address; // set the source address as the module address
 800f730:	746b      	strb	r3, [r5, #17]
	CommunicationLED(leds, message.interface);
 800f732:	6920      	ldr	r0, [r4, #16]
 800f734:	f7fe fe7b 	bl	800e42e <_Z16CommunicationLEDP4LEDSh>
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 800f738:	f04f 31ff 	mov.w	r1, #4294967295
 800f73c:	6820      	ldr	r0, [r4, #0]
 800f73e:	f7fc fd3d 	bl	800c1bc <osSemaphoreAcquire>
	HAL_StatusTypeDef status = protocol->Send(message);
 800f742:	6833      	ldr	r3, [r6, #0]
 800f744:	4629      	mov	r1, r5
 800f746:	a801      	add	r0, sp, #4
 800f748:	689f      	ldr	r7, [r3, #8]
 800f74a:	f7ff fef2 	bl	800f532 <_ZN13MessageHeaderC1ERKS_>
 800f74e:	a901      	add	r1, sp, #4
 800f750:	4630      	mov	r0, r6
 800f752:	47b8      	blx	r7
 800f754:	4606      	mov	r6, r0
 800f756:	a802      	add	r0, sp, #8
 800f758:	f7f1 f8a0 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (status == HAL_BUSY || status == HAL_TIMEOUT) {
 800f75c:	1eb3      	subs	r3, r6, #2
 800f75e:	b2db      	uxtb	r3, r3
 800f760:	2b01      	cmp	r3, #1
 800f762:	d809      	bhi.n	800f778 <_ZN13Communication4SendE13MessageHeader+0x68>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800f764:	e9d4 030d 	ldrd	r0, r3, [r4, #52]	@ 0x34
 800f768:	4298      	cmp	r0, r3
 800f76a:	d00b      	beq.n	800f784 <_ZN13Communication4SendE13MessageHeader+0x74>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800f76c:	4629      	mov	r1, r5
 800f76e:	f7ff fee0 	bl	800f532 <_ZN13MessageHeaderC1ERKS_>
	    ++this->_M_impl._M_finish;
 800f772:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f774:	3314      	adds	r3, #20
 800f776:	6363      	str	r3, [r4, #52]	@ 0x34
	osSemaphoreRelease(CommunicationSemaphore);
 800f778:	6820      	ldr	r0, [r4, #0]
 800f77a:	f7fc fd53 	bl	800c224 <osSemaphoreRelease>
}
 800f77e:	4630      	mov	r0, r6
 800f780:	b007      	add	sp, #28
 800f782:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  _M_realloc_insert(end(), __x);
 800f784:	4601      	mov	r1, r0
 800f786:	462a      	mov	r2, r5
 800f788:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 800f78c:	f7ff ff36 	bl	800f5fc <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 800f790:	e7f2      	b.n	800f778 <_ZN13Communication4SendE13MessageHeader+0x68>
	if (!success) return HAL_ERROR;
 800f792:	2601      	movs	r6, #1
 800f794:	e7f3      	b.n	800f77e <_ZN13Communication4SendE13MessageHeader+0x6e>

0800f796 <_ZN23SubscriberConfigurationC1ERKS_>:
 800f796:	b570      	push	{r4, r5, r6, lr}
 800f798:	880b      	ldrh	r3, [r1, #0]
 800f79a:	4604      	mov	r4, r0
 800f79c:	460d      	mov	r5, r1
 800f79e:	8003      	strh	r3, [r0, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800f7a0:	2300      	movs	r3, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f7a2:	e9d1 2601 	ldrd	r2, r6, [r1, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800f7a6:	e9c0 3301 	strd	r3, r3, [r0, #4]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800f7aa:	1ab6      	subs	r6, r6, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
 800f7ac:	60c3      	str	r3, [r0, #12]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800f7ae:	d043      	beq.n	800f838 <_ZN23SubscriberConfigurationC1ERKS_+0xa2>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800f7b0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f7b4:	429e      	cmp	r6, r3
 800f7b6:	d301      	bcc.n	800f7bc <_ZN23SubscriberConfigurationC1ERKS_+0x26>
	      std::__throw_bad_array_new_length();
 800f7b8:	f00a f8e1 	bl	801997e <_ZSt28__throw_bad_array_new_lengthv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800f7bc:	4630      	mov	r0, r6
 800f7be:	f00a f82c 	bl	801981a <_Znwj>
 800f7c2:	4603      	mov	r3, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800f7c4:	441e      	add	r6, r3
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800f7c6:	e9c4 3301 	strd	r3, r3, [r4, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800f7ca:	60e6      	str	r6, [r4, #12]
      : _M_current(__i) { }
 800f7cc:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
	  if (_Num)
 800f7d0:	4291      	cmp	r1, r2
	  const ptrdiff_t _Num = __last - __first;
 800f7d2:	eba2 0601 	sub.w	r6, r2, r1
	  if (_Num)
 800f7d6:	d004      	beq.n	800f7e2 <_ZN23SubscriberConfigurationC1ERKS_+0x4c>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800f7d8:	4618      	mov	r0, r3
 800f7da:	4632      	mov	r2, r6
 800f7dc:	f00a f9aa 	bl	8019b34 <memmove>
 800f7e0:	4603      	mov	r3, r0
	  return __result + _Num;
 800f7e2:	4433      	add	r3, r6
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f7e4:	e9d5 2604 	ldrd	r2, r6, [r5, #16]
	this->_M_impl._M_finish =
 800f7e8:	60a3      	str	r3, [r4, #8]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800f7ea:	2300      	movs	r3, #0
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800f7ec:	1ab6      	subs	r6, r6, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
 800f7ee:	61a3      	str	r3, [r4, #24]
 800f7f0:	e9c4 3304 	strd	r3, r3, [r4, #16]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800f7f4:	d022      	beq.n	800f83c <_ZN23SubscriberConfigurationC1ERKS_+0xa6>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800f7f6:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f7fa:	429e      	cmp	r6, r3
 800f7fc:	d2dc      	bcs.n	800f7b8 <_ZN23SubscriberConfigurationC1ERKS_+0x22>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800f7fe:	4630      	mov	r0, r6
 800f800:	f00a f80b 	bl	801981a <_Znwj>
 800f804:	4603      	mov	r3, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800f806:	441e      	add	r6, r3
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800f808:	e9c4 3304 	strd	r3, r3, [r4, #16]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800f80c:	61a6      	str	r6, [r4, #24]
 800f80e:	e9d5 1204 	ldrd	r1, r2, [r5, #16]
	  if (_Num)
 800f812:	4291      	cmp	r1, r2
	  const ptrdiff_t _Num = __last - __first;
 800f814:	eba2 0601 	sub.w	r6, r2, r1
	  if (_Num)
 800f818:	d004      	beq.n	800f824 <_ZN23SubscriberConfigurationC1ERKS_+0x8e>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800f81a:	4618      	mov	r0, r3
 800f81c:	4632      	mov	r2, r6
 800f81e:	f00a f989 	bl	8019b34 <memmove>
 800f822:	4603      	mov	r3, r0
	  return __result + _Num;
 800f824:	4433      	add	r3, r6
 800f826:	f105 011c 	add.w	r1, r5, #28
 800f82a:	f104 001c 	add.w	r0, r4, #28
	this->_M_impl._M_finish =
 800f82e:	6163      	str	r3, [r4, #20]
 800f830:	f7f1 f8e4 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 800f834:	4620      	mov	r0, r4
 800f836:	bd70      	pop	{r4, r5, r6, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800f838:	4633      	mov	r3, r6
 800f83a:	e7c3      	b.n	800f7c4 <_ZN23SubscriberConfigurationC1ERKS_+0x2e>
 800f83c:	4633      	mov	r3, r6
 800f83e:	e7e2      	b.n	800f806 <_ZN23SubscriberConfigurationC1ERKS_+0x70>

0800f840 <_ZN17MasterSubscribers7ReceiveIhEEv15SubscriberInputPT_>:
 *
 * @param input information: input register and interface information
 * @param input data: published data for the input register
 */
template<typename T>
void MasterSubscribers::Receive(SubscriberInput information, T* data) {
 800f840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f844:	b090      	sub	sp, #64	@ 0x40
 800f846:	4605      	mov	r5, r0
	uint8_t index = 0;
	for (SubscriberConfiguration configuration : configurations) {
 800f848:	2600      	movs	r6, #0
void MasterSubscribers::Receive(SubscriberInput information, T* data) {
 800f84a:	ac03      	add	r4, sp, #12
 800f84c:	f8dd 8060 	ldr.w	r8, [sp, #96]	@ 0x60
 800f850:	e9d0 7903 	ldrd	r7, r9, [r0, #12]
 800f854:	e884 000e 	stmia.w	r4, {r1, r2, r3}
	for (SubscriberConfiguration configuration : configurations) {
 800f858:	45b9      	cmp	r9, r7
 800f85a:	d102      	bne.n	800f862 <_ZN17MasterSubscribers7ReceiveIhEEv15SubscriberInputPT_+0x22>
				}
			}
		}
		index++;
	}
}
 800f85c:	b010      	add	sp, #64	@ 0x40
 800f85e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (SubscriberConfiguration configuration : configurations) {
 800f862:	4639      	mov	r1, r7
 800f864:	a806      	add	r0, sp, #24
 800f866:	f7ff ff96 	bl	800f796 <_ZN23SubscriberConfigurationC1ERKS_>
		if (configuration.activated) {
 800f86a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800f86e:	b37b      	cbz	r3, 800f8d0 <_ZN17MasterSubscribers7ReceiveIhEEv15SubscriberInputPT_+0x90>
			if (SubscribedToRemoteRegister(configuration.ID, information.register_, information.interface)) {
 800f870:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800f874:	4628      	mov	r0, r5
 800f876:	f89d a018 	ldrb.w	sl, [sp, #24]
 800f87a:	f8ad 3000 	strh.w	r3, [sp]
 800f87e:	4651      	mov	r1, sl
 800f880:	e894 000c 	ldmia.w	r4, {r2, r3}
 800f884:	f008 fe6c 	bl	8018560 <_ZN17MasterSubscribers26SubscribedToRemoteRegisterEh8Register19SubscriberInterface>
 800f888:	b310      	cbz	r0, 800f8d0 <_ZN17MasterSubscribers7ReceiveIhEEv15SubscriberInputPT_+0x90>
				if (AddressAccepted(configuration.ID, information.interface.address)) {
 800f88a:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800f88e:	4651      	mov	r1, sl
 800f890:	4628      	mov	r0, r5
 800f892:	f008 fdb7 	bl	8018404 <_ZN17MasterSubscribers15AddressAcceptedEhh>
 800f896:	b1d8      	cbz	r0, 800f8d0 <_ZN17MasterSubscribers7ReceiveIhEEv15SubscriberInputPT_+0x90>
					CommunicationLED(leds, information.interface.interface);
 800f898:	f89d 1012 	ldrb.w	r1, [sp, #18]
 800f89c:	6868      	ldr	r0, [r5, #4]
 800f89e:	f7fe fdc6 	bl	800e42e <_Z16CommunicationLEDP4LEDSh>
					switch (information.register_.type) {
 800f8a2:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800f8a6:	2b08      	cmp	r3, #8
 800f8a8:	d812      	bhi.n	800f8d0 <_ZN17MasterSubscribers7ReceiveIhEEv15SubscriberInputPT_+0x90>
 800f8aa:	e8df f003 	tbb	[pc, r3]
 800f8ae:	1105      	.short	0x1105
 800f8b0:	11211117 	.word	0x11211117
 800f8b4:	1111      	.short	0x1111
 800f8b6:	2b          	.byte	0x2b
 800f8b7:	00          	.byte	0x00
	return *(this->_M_impl._M_start + __n);
 800f8b8:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveUINT8(information, (uint8_t*) data);
 800f8ba:	69aa      	ldr	r2, [r5, #24]
 800f8bc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f8c0:	6803      	ldr	r3, [r0, #0]
 800f8c2:	f8cd 8000 	str.w	r8, [sp]
 800f8c6:	f8d3 a000 	ldr.w	sl, [r3]
						subscribers[index]->ReceiveFLOAT(information, (float*) data);
 800f8ca:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800f8ce:	47d0      	blx	sl
	for (SubscriberConfiguration configuration : configurations) {
 800f8d0:	a806      	add	r0, sp, #24
 800f8d2:	3601      	adds	r6, #1
 800f8d4:	3728      	adds	r7, #40	@ 0x28
 800f8d6:	f7ff fc7f 	bl	800f1d8 <_ZN23SubscriberConfigurationD1Ev>
	return *this;
 800f8da:	e7bd      	b.n	800f858 <_ZN17MasterSubscribers7ReceiveIhEEv15SubscriberInputPT_+0x18>
 800f8dc:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveUINT32(information, (uint32_t*) data);
 800f8de:	69aa      	ldr	r2, [r5, #24]
 800f8e0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f8e4:	6803      	ldr	r3, [r0, #0]
 800f8e6:	f8cd 8000 	str.w	r8, [sp]
 800f8ea:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800f8ee:	e7ec      	b.n	800f8ca <_ZN17MasterSubscribers7ReceiveIhEEv15SubscriberInputPT_+0x8a>
 800f8f0:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveINT8(information, (int8_t*) data);
 800f8f2:	69aa      	ldr	r2, [r5, #24]
 800f8f4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f8f8:	6803      	ldr	r3, [r0, #0]
 800f8fa:	f8cd 8000 	str.w	r8, [sp]
 800f8fe:	f8d3 a008 	ldr.w	sl, [r3, #8]
 800f902:	e7e2      	b.n	800f8ca <_ZN17MasterSubscribers7ReceiveIhEEv15SubscriberInputPT_+0x8a>
 800f904:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveFLOAT(information, (float*) data);
 800f906:	69aa      	ldr	r2, [r5, #24]
 800f908:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f90c:	6803      	ldr	r3, [r0, #0]
 800f90e:	f8cd 8000 	str.w	r8, [sp]
 800f912:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 800f916:	e7d8      	b.n	800f8ca <_ZN17MasterSubscribers7ReceiveIhEEv15SubscriberInputPT_+0x8a>

0800f918 <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_>:
void MasterSubscribers::Receive(SubscriberInput information, T* data) {
 800f918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f91c:	b090      	sub	sp, #64	@ 0x40
 800f91e:	4605      	mov	r5, r0
	for (SubscriberConfiguration configuration : configurations) {
 800f920:	2600      	movs	r6, #0
void MasterSubscribers::Receive(SubscriberInput information, T* data) {
 800f922:	ac03      	add	r4, sp, #12
 800f924:	f8dd 8060 	ldr.w	r8, [sp, #96]	@ 0x60
 800f928:	e9d0 7903 	ldrd	r7, r9, [r0, #12]
 800f92c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
	for (SubscriberConfiguration configuration : configurations) {
 800f930:	45b9      	cmp	r9, r7
 800f932:	d102      	bne.n	800f93a <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_+0x22>
}
 800f934:	b010      	add	sp, #64	@ 0x40
 800f936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (SubscriberConfiguration configuration : configurations) {
 800f93a:	4639      	mov	r1, r7
 800f93c:	a806      	add	r0, sp, #24
 800f93e:	f7ff ff2a 	bl	800f796 <_ZN23SubscriberConfigurationC1ERKS_>
		if (configuration.activated) {
 800f942:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800f946:	b37b      	cbz	r3, 800f9a8 <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_+0x90>
			if (SubscribedToRemoteRegister(configuration.ID, information.register_, information.interface)) {
 800f948:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800f94c:	4628      	mov	r0, r5
 800f94e:	f89d a018 	ldrb.w	sl, [sp, #24]
 800f952:	f8ad 3000 	strh.w	r3, [sp]
 800f956:	4651      	mov	r1, sl
 800f958:	e894 000c 	ldmia.w	r4, {r2, r3}
 800f95c:	f008 fe00 	bl	8018560 <_ZN17MasterSubscribers26SubscribedToRemoteRegisterEh8Register19SubscriberInterface>
 800f960:	b310      	cbz	r0, 800f9a8 <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_+0x90>
				if (AddressAccepted(configuration.ID, information.interface.address)) {
 800f962:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800f966:	4651      	mov	r1, sl
 800f968:	4628      	mov	r0, r5
 800f96a:	f008 fd4b 	bl	8018404 <_ZN17MasterSubscribers15AddressAcceptedEhh>
 800f96e:	b1d8      	cbz	r0, 800f9a8 <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_+0x90>
					CommunicationLED(leds, information.interface.interface);
 800f970:	f89d 1012 	ldrb.w	r1, [sp, #18]
 800f974:	6868      	ldr	r0, [r5, #4]
 800f976:	f7fe fd5a 	bl	800e42e <_Z16CommunicationLEDP4LEDSh>
					switch (information.register_.type) {
 800f97a:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800f97e:	2b08      	cmp	r3, #8
 800f980:	d812      	bhi.n	800f9a8 <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_+0x90>
 800f982:	e8df f003 	tbb	[pc, r3]
 800f986:	1105      	.short	0x1105
 800f988:	11211117 	.word	0x11211117
 800f98c:	1111      	.short	0x1111
 800f98e:	2b          	.byte	0x2b
 800f98f:	00          	.byte	0x00
 800f990:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveUINT8(information, (uint8_t*) data);
 800f992:	69aa      	ldr	r2, [r5, #24]
 800f994:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f998:	6803      	ldr	r3, [r0, #0]
 800f99a:	f8cd 8000 	str.w	r8, [sp]
 800f99e:	f8d3 a000 	ldr.w	sl, [r3]
						subscribers[index]->ReceiveFLOAT(information, (float*) data);
 800f9a2:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800f9a6:	47d0      	blx	sl
	for (SubscriberConfiguration configuration : configurations) {
 800f9a8:	a806      	add	r0, sp, #24
 800f9aa:	3601      	adds	r6, #1
 800f9ac:	3728      	adds	r7, #40	@ 0x28
 800f9ae:	f7ff fc13 	bl	800f1d8 <_ZN23SubscriberConfigurationD1Ev>
 800f9b2:	e7bd      	b.n	800f930 <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_+0x18>
 800f9b4:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveUINT32(information, (uint32_t*) data);
 800f9b6:	69aa      	ldr	r2, [r5, #24]
 800f9b8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f9bc:	6803      	ldr	r3, [r0, #0]
 800f9be:	f8cd 8000 	str.w	r8, [sp]
 800f9c2:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800f9c6:	e7ec      	b.n	800f9a2 <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_+0x8a>
 800f9c8:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveINT8(information, (int8_t*) data);
 800f9ca:	69aa      	ldr	r2, [r5, #24]
 800f9cc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f9d0:	6803      	ldr	r3, [r0, #0]
 800f9d2:	f8cd 8000 	str.w	r8, [sp]
 800f9d6:	f8d3 a008 	ldr.w	sl, [r3, #8]
 800f9da:	e7e2      	b.n	800f9a2 <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_+0x8a>
 800f9dc:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveFLOAT(information, (float*) data);
 800f9de:	69aa      	ldr	r2, [r5, #24]
 800f9e0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f9e4:	6803      	ldr	r3, [r0, #0]
 800f9e6:	f8cd 8000 	str.w	r8, [sp]
 800f9ea:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 800f9ee:	e7d8      	b.n	800f9a2 <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_+0x8a>

0800f9f0 <_ZN17MasterSubscribers7ReceiveIaEEv15SubscriberInputPT_>:
void MasterSubscribers::Receive(SubscriberInput information, T* data) {
 800f9f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9f4:	b090      	sub	sp, #64	@ 0x40
 800f9f6:	4605      	mov	r5, r0
	for (SubscriberConfiguration configuration : configurations) {
 800f9f8:	2600      	movs	r6, #0
void MasterSubscribers::Receive(SubscriberInput information, T* data) {
 800f9fa:	ac03      	add	r4, sp, #12
 800f9fc:	f8dd 8060 	ldr.w	r8, [sp, #96]	@ 0x60
 800fa00:	e9d0 7903 	ldrd	r7, r9, [r0, #12]
 800fa04:	e884 000e 	stmia.w	r4, {r1, r2, r3}
	for (SubscriberConfiguration configuration : configurations) {
 800fa08:	45b9      	cmp	r9, r7
 800fa0a:	d102      	bne.n	800fa12 <_ZN17MasterSubscribers7ReceiveIaEEv15SubscriberInputPT_+0x22>
}
 800fa0c:	b010      	add	sp, #64	@ 0x40
 800fa0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (SubscriberConfiguration configuration : configurations) {
 800fa12:	4639      	mov	r1, r7
 800fa14:	a806      	add	r0, sp, #24
 800fa16:	f7ff febe 	bl	800f796 <_ZN23SubscriberConfigurationC1ERKS_>
		if (configuration.activated) {
 800fa1a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800fa1e:	b37b      	cbz	r3, 800fa80 <_ZN17MasterSubscribers7ReceiveIaEEv15SubscriberInputPT_+0x90>
			if (SubscribedToRemoteRegister(configuration.ID, information.register_, information.interface)) {
 800fa20:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800fa24:	4628      	mov	r0, r5
 800fa26:	f89d a018 	ldrb.w	sl, [sp, #24]
 800fa2a:	f8ad 3000 	strh.w	r3, [sp]
 800fa2e:	4651      	mov	r1, sl
 800fa30:	e894 000c 	ldmia.w	r4, {r2, r3}
 800fa34:	f008 fd94 	bl	8018560 <_ZN17MasterSubscribers26SubscribedToRemoteRegisterEh8Register19SubscriberInterface>
 800fa38:	b310      	cbz	r0, 800fa80 <_ZN17MasterSubscribers7ReceiveIaEEv15SubscriberInputPT_+0x90>
				if (AddressAccepted(configuration.ID, information.interface.address)) {
 800fa3a:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800fa3e:	4651      	mov	r1, sl
 800fa40:	4628      	mov	r0, r5
 800fa42:	f008 fcdf 	bl	8018404 <_ZN17MasterSubscribers15AddressAcceptedEhh>
 800fa46:	b1d8      	cbz	r0, 800fa80 <_ZN17MasterSubscribers7ReceiveIaEEv15SubscriberInputPT_+0x90>
					CommunicationLED(leds, information.interface.interface);
 800fa48:	f89d 1012 	ldrb.w	r1, [sp, #18]
 800fa4c:	6868      	ldr	r0, [r5, #4]
 800fa4e:	f7fe fcee 	bl	800e42e <_Z16CommunicationLEDP4LEDSh>
					switch (information.register_.type) {
 800fa52:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800fa56:	2b08      	cmp	r3, #8
 800fa58:	d812      	bhi.n	800fa80 <_ZN17MasterSubscribers7ReceiveIaEEv15SubscriberInputPT_+0x90>
 800fa5a:	e8df f003 	tbb	[pc, r3]
 800fa5e:	1105      	.short	0x1105
 800fa60:	11211117 	.word	0x11211117
 800fa64:	1111      	.short	0x1111
 800fa66:	2b          	.byte	0x2b
 800fa67:	00          	.byte	0x00
 800fa68:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveUINT8(information, (uint8_t*) data);
 800fa6a:	69aa      	ldr	r2, [r5, #24]
 800fa6c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fa70:	6803      	ldr	r3, [r0, #0]
 800fa72:	f8cd 8000 	str.w	r8, [sp]
 800fa76:	f8d3 a000 	ldr.w	sl, [r3]
						subscribers[index]->ReceiveFLOAT(information, (float*) data);
 800fa7a:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800fa7e:	47d0      	blx	sl
	for (SubscriberConfiguration configuration : configurations) {
 800fa80:	a806      	add	r0, sp, #24
 800fa82:	3601      	adds	r6, #1
 800fa84:	3728      	adds	r7, #40	@ 0x28
 800fa86:	f7ff fba7 	bl	800f1d8 <_ZN23SubscriberConfigurationD1Ev>
 800fa8a:	e7bd      	b.n	800fa08 <_ZN17MasterSubscribers7ReceiveIaEEv15SubscriberInputPT_+0x18>
 800fa8c:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveUINT32(information, (uint32_t*) data);
 800fa8e:	69aa      	ldr	r2, [r5, #24]
 800fa90:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fa94:	6803      	ldr	r3, [r0, #0]
 800fa96:	f8cd 8000 	str.w	r8, [sp]
 800fa9a:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800fa9e:	e7ec      	b.n	800fa7a <_ZN17MasterSubscribers7ReceiveIaEEv15SubscriberInputPT_+0x8a>
 800faa0:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveINT8(information, (int8_t*) data);
 800faa2:	69aa      	ldr	r2, [r5, #24]
 800faa4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800faa8:	6803      	ldr	r3, [r0, #0]
 800faaa:	f8cd 8000 	str.w	r8, [sp]
 800faae:	f8d3 a008 	ldr.w	sl, [r3, #8]
 800fab2:	e7e2      	b.n	800fa7a <_ZN17MasterSubscribers7ReceiveIaEEv15SubscriberInputPT_+0x8a>
 800fab4:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveFLOAT(information, (float*) data);
 800fab6:	69aa      	ldr	r2, [r5, #24]
 800fab8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fabc:	6803      	ldr	r3, [r0, #0]
 800fabe:	f8cd 8000 	str.w	r8, [sp]
 800fac2:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 800fac6:	e7d8      	b.n	800fa7a <_ZN17MasterSubscribers7ReceiveIaEEv15SubscriberInputPT_+0x8a>

0800fac8 <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_>:
void MasterSubscribers::Receive(SubscriberInput information, T* data) {
 800fac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800facc:	b090      	sub	sp, #64	@ 0x40
 800face:	4605      	mov	r5, r0
	for (SubscriberConfiguration configuration : configurations) {
 800fad0:	2600      	movs	r6, #0
void MasterSubscribers::Receive(SubscriberInput information, T* data) {
 800fad2:	ac03      	add	r4, sp, #12
 800fad4:	f8dd 8060 	ldr.w	r8, [sp, #96]	@ 0x60
 800fad8:	e9d0 7903 	ldrd	r7, r9, [r0, #12]
 800fadc:	e884 000e 	stmia.w	r4, {r1, r2, r3}
	for (SubscriberConfiguration configuration : configurations) {
 800fae0:	45b9      	cmp	r9, r7
 800fae2:	d102      	bne.n	800faea <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_+0x22>
}
 800fae4:	b010      	add	sp, #64	@ 0x40
 800fae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (SubscriberConfiguration configuration : configurations) {
 800faea:	4639      	mov	r1, r7
 800faec:	a806      	add	r0, sp, #24
 800faee:	f7ff fe52 	bl	800f796 <_ZN23SubscriberConfigurationC1ERKS_>
		if (configuration.activated) {
 800faf2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800faf6:	b37b      	cbz	r3, 800fb58 <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_+0x90>
			if (SubscribedToRemoteRegister(configuration.ID, information.register_, information.interface)) {
 800faf8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800fafc:	4628      	mov	r0, r5
 800fafe:	f89d a018 	ldrb.w	sl, [sp, #24]
 800fb02:	f8ad 3000 	strh.w	r3, [sp]
 800fb06:	4651      	mov	r1, sl
 800fb08:	e894 000c 	ldmia.w	r4, {r2, r3}
 800fb0c:	f008 fd28 	bl	8018560 <_ZN17MasterSubscribers26SubscribedToRemoteRegisterEh8Register19SubscriberInterface>
 800fb10:	b310      	cbz	r0, 800fb58 <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_+0x90>
				if (AddressAccepted(configuration.ID, information.interface.address)) {
 800fb12:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800fb16:	4651      	mov	r1, sl
 800fb18:	4628      	mov	r0, r5
 800fb1a:	f008 fc73 	bl	8018404 <_ZN17MasterSubscribers15AddressAcceptedEhh>
 800fb1e:	b1d8      	cbz	r0, 800fb58 <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_+0x90>
					CommunicationLED(leds, information.interface.interface);
 800fb20:	f89d 1012 	ldrb.w	r1, [sp, #18]
 800fb24:	6868      	ldr	r0, [r5, #4]
 800fb26:	f7fe fc82 	bl	800e42e <_Z16CommunicationLEDP4LEDSh>
					switch (information.register_.type) {
 800fb2a:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800fb2e:	2b08      	cmp	r3, #8
 800fb30:	d812      	bhi.n	800fb58 <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_+0x90>
 800fb32:	e8df f003 	tbb	[pc, r3]
 800fb36:	1105      	.short	0x1105
 800fb38:	11211117 	.word	0x11211117
 800fb3c:	1111      	.short	0x1111
 800fb3e:	2b          	.byte	0x2b
 800fb3f:	00          	.byte	0x00
 800fb40:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveUINT8(information, (uint8_t*) data);
 800fb42:	69aa      	ldr	r2, [r5, #24]
 800fb44:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fb48:	6803      	ldr	r3, [r0, #0]
 800fb4a:	f8cd 8000 	str.w	r8, [sp]
 800fb4e:	f8d3 a000 	ldr.w	sl, [r3]
						subscribers[index]->ReceiveFLOAT(information, (float*) data);
 800fb52:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800fb56:	47d0      	blx	sl
	for (SubscriberConfiguration configuration : configurations) {
 800fb58:	a806      	add	r0, sp, #24
 800fb5a:	3601      	adds	r6, #1
 800fb5c:	3728      	adds	r7, #40	@ 0x28
 800fb5e:	f7ff fb3b 	bl	800f1d8 <_ZN23SubscriberConfigurationD1Ev>
 800fb62:	e7bd      	b.n	800fae0 <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_+0x18>
 800fb64:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveUINT32(information, (uint32_t*) data);
 800fb66:	69aa      	ldr	r2, [r5, #24]
 800fb68:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fb6c:	6803      	ldr	r3, [r0, #0]
 800fb6e:	f8cd 8000 	str.w	r8, [sp]
 800fb72:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800fb76:	e7ec      	b.n	800fb52 <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_+0x8a>
 800fb78:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveINT8(information, (int8_t*) data);
 800fb7a:	69aa      	ldr	r2, [r5, #24]
 800fb7c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fb80:	6803      	ldr	r3, [r0, #0]
 800fb82:	f8cd 8000 	str.w	r8, [sp]
 800fb86:	f8d3 a008 	ldr.w	sl, [r3, #8]
 800fb8a:	e7e2      	b.n	800fb52 <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_+0x8a>
 800fb8c:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveFLOAT(information, (float*) data);
 800fb8e:	69aa      	ldr	r2, [r5, #24]
 800fb90:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fb94:	6803      	ldr	r3, [r0, #0]
 800fb96:	f8cd 8000 	str.w	r8, [sp]
 800fb9a:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 800fb9e:	e7d8      	b.n	800fb52 <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_+0x8a>

0800fba0 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>:
 * @param input length: the number of values to extract
 * @param output success: whether successful
 * @return a vector with extracted values
 */
template<typename T>
std::vector<T> Communication::ExtractVector(std::vector<uint8_t> payload, uint16_t start_index, uint16_t length, bool* success) {
 800fba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
 800fba4:	2600      	movs	r6, #0
 800fba6:	4605      	mov	r5, r0
 800fba8:	4688      	mov	r8, r1
 800fbaa:	4691      	mov	r9, r2
 800fbac:	ed2d 8b02 	vpush	{d8}
 800fbb0:	b087      	sub	sp, #28
 800fbb2:	6086      	str	r6, [r0, #8]
 800fbb4:	9301      	str	r3, [sp, #4]
 800fbb6:	e9c0 6600 	strd	r6, r6, [r0]
 800fbba:	b2f4      	uxtb	r4, r6
	std::vector<T> data;
	uint8_t type_length = sizeof(T);

	for (uint8_t index = 0; index < length; index++) {
 800fbbc:	9b01      	ldr	r3, [sp, #4]
 800fbbe:	429c      	cmp	r4, r3
 800fbc0:	db05      	blt.n	800fbce <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x2e>
		if (not *success)
			return data;
		data.push_back(element);
	}
	return data;
}
 800fbc2:	4628      	mov	r0, r5
 800fbc4:	b007      	add	sp, #28
 800fbc6:	ecbd 8b02 	vpop	{d8}
 800fbca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 800fbce:	4641      	mov	r1, r8
 800fbd0:	a803      	add	r0, sp, #12
 800fbd2:	f7f0 ff13 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 800fbd6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800fbd8:	eb09 0184 	add.w	r1, r9, r4, lsl #2
 800fbdc:	a803      	add	r0, sp, #12
 800fbde:	b289      	uxth	r1, r1
 800fbe0:	f7fe feb8 	bl	800e954 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0>
      }
 800fbe4:	a803      	add	r0, sp, #12
 800fbe6:	eeb0 8a40 	vmov.f32	s16, s0
 800fbea:	f7f0 fe57 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (not *success)
 800fbee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fbf0:	781b      	ldrb	r3, [r3, #0]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d0e5      	beq.n	800fbc2 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x22>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800fbf6:	e9d5 4301 	ldrd	r4, r3, [r5, #4]
 800fbfa:	429c      	cmp	r4, r3
 800fbfc:	d004      	beq.n	800fc08 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x68>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800fbfe:	eca4 8a01 	vstmia	r4!, {s16}
	    ++this->_M_impl._M_finish;
 800fc02:	606c      	str	r4, [r5, #4]
	for (uint8_t index = 0; index < length; index++) {
 800fc04:	3601      	adds	r6, #1
 800fc06:	e7d8      	b.n	800fbba <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x1a>
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800fc08:	2101      	movs	r1, #1
 800fc0a:	4a13      	ldr	r2, [pc, #76]	@ (800fc58 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0xb8>)
 800fc0c:	4628      	mov	r0, r5
 800fc0e:	f7ff fc39 	bl	800f484 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>
      pointer __old_start = this->_M_impl._M_start;
 800fc12:	682f      	ldr	r7, [r5, #0]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800fc14:	4682      	mov	sl, r0
      pointer __new_start(this->_M_allocate(__len));
 800fc16:	f7fe fd32 	bl	800e67e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
    { return __lhs.base() - __rhs.base(); }
 800fc1a:	eba4 0b07 	sub.w	fp, r4, r7
 800fc1e:	4604      	mov	r4, r0
 800fc20:	eb00 010b 	add.w	r1, r0, fp
      if (__count > 0)
 800fc24:	f1bb 0f00 	cmp.w	fp, #0
 800fc28:	ed81 8a00 	vstr	s16, [r1]
 800fc2c:	dd03      	ble.n	800fc36 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x96>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800fc2e:	465a      	mov	r2, fp
 800fc30:	4639      	mov	r1, r7
 800fc32:	f009 ff7f 	bl	8019b34 <memmove>
	      ++__new_finish;
 800fc36:	f10b 0204 	add.w	r2, fp, #4
 800fc3a:	eb04 0b02 	add.w	fp, r4, r2
	if (__p)
 800fc3e:	b12f      	cbz	r7, 800fc4c <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0xac>
		    this->_M_impl._M_end_of_storage - __old_start);
 800fc40:	68a9      	ldr	r1, [r5, #8]
 800fc42:	4638      	mov	r0, r7
 800fc44:	1bc9      	subs	r1, r1, r7
 800fc46:	1089      	asrs	r1, r1, #2
 800fc48:	f7fe fd16 	bl	800e678 <_ZNSt12_Vector_baseIP21CommunicationProtocolSaIS1_EE13_M_deallocateEPS1_j.part.0>
      this->_M_impl._M_finish = __new_finish;
 800fc4c:	e9c5 4b00 	strd	r4, fp, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800fc50:	eb04 048a 	add.w	r4, r4, sl, lsl #2
 800fc54:	60ac      	str	r4, [r5, #8]
 800fc56:	e7d5      	b.n	800fc04 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x64>
 800fc58:	08019e3e 	.word	0x08019e3e

0800fc5c <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb.isra.0>:
void Communication::ExtractArray(T* data, std::vector<uint8_t> payload, uint16_t start_index, uint16_t length, bool* success) {
 800fc5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc60:	ed2d 8b02 	vpush	{d8}
 800fc64:	b085      	sub	sp, #20
 800fc66:	4607      	mov	r7, r0
 800fc68:	4688      	mov	r8, r1
 800fc6a:	4691      	mov	r9, r2
 800fc6c:	461d      	mov	r5, r3
 800fc6e:	f8dd a040 	ldr.w	sl, [sp, #64]	@ 0x40
 800fc72:	2600      	movs	r6, #0
 800fc74:	b2f4      	uxtb	r4, r6
	for (uint8_t index = 0; index < length; index++) {
 800fc76:	42ac      	cmp	r4, r5
 800fc78:	db04      	blt.n	800fc84 <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x28>
}
 800fc7a:	b005      	add	sp, #20
 800fc7c:	ecbd 8b02 	vpop	{d8}
 800fc80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 800fc84:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fc88:	4641      	mov	r1, r8
 800fc8a:	eb09 0484 	add.w	r4, r9, r4, lsl #2
 800fc8e:	a801      	add	r0, sp, #4
 800fc90:	f7f0 feb4 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 800fc94:	4652      	mov	r2, sl
 800fc96:	b2a1      	uxth	r1, r4
 800fc98:	a801      	add	r0, sp, #4
 800fc9a:	f7fe fe5b 	bl	800e954 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0>
      }
 800fc9e:	a801      	add	r0, sp, #4
 800fca0:	eeb0 8a40 	vmov.f32	s16, s0
 800fca4:	f7f0 fdfa 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (not *success)
 800fca8:	f89a 3000 	ldrb.w	r3, [sl]
 800fcac:	3601      	adds	r6, #1
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d0e3      	beq.n	800fc7a <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x1e>
		data[index] = element;
 800fcb2:	44bb      	add	fp, r7
 800fcb4:	ed8b 8a00 	vstr	s16, [fp]
	for (uint8_t index = 0; index < length; index++) {
 800fcb8:	e7dc      	b.n	800fc74 <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x18>

0800fcba <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt>:
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 800fcba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcbe:	b08f      	sub	sp, #60	@ 0x3c
 800fcc0:	461c      	mov	r4, r3
 800fcc2:	4691      	mov	r9, r2
 800fcc4:	468a      	mov	sl, r1
	T array_values[element.element_register.length];
 800fcc6:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 800fcca:	466a      	mov	r2, sp
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 800fccc:	af02      	add	r7, sp, #8
	T array_values[element.element_register.length];
 800fcce:	ea4f 0388 	mov.w	r3, r8, lsl #2
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 800fcd2:	3104      	adds	r1, #4
 800fcd4:	f107 0524 	add.w	r5, r7, #36	@ 0x24
 800fcd8:	f107 060b 	add.w	r6, r7, #11
	T array_values[element.element_register.length];
 800fcdc:	3307      	adds	r3, #7
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 800fcde:	6078      	str	r0, [r7, #4]
	T array_values[element.element_register.length];
 800fce0:	08db      	lsrs	r3, r3, #3
 800fce2:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 800fce6:	469d      	mov	sp, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 800fce8:	2300      	movs	r3, #0
 800fcea:	e9c7 3303 	strd	r3, r3, [r7, #12]
 800fcee:	617b      	str	r3, [r7, #20]
 800fcf0:	f10d 0b08 	add.w	fp, sp, #8
	if (not element.element_register.isArray) {
 800fcf4:	f899 3003 	ldrb.w	r3, [r9, #3]
 800fcf8:	bb93      	cbnz	r3, 800fd60 <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0xa6>
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 800fcfa:	4628      	mov	r0, r5
		data = &single_value;
 800fcfc:	f107 0b18 	add.w	fp, r7, #24
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 800fd00:	f7f0 fe7c 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
		length_to_extract = 1;
 800fd04:	f04f 0801 	mov.w	r8, #1
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 800fd08:	4632      	mov	r2, r6
 800fd0a:	4621      	mov	r1, r4
 800fd0c:	4628      	mov	r0, r5
 800fd0e:	f7fe fe21 	bl	800e954 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0>
      }
 800fd12:	4628      	mov	r0, r5
 800fd14:	ed87 0a06 	vstr	s0, [r7, #24]
 800fd18:	f7f0 fdc0 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	subscriber_information.interface.interface = message.interface;
 800fd1c:	f89a 3000 	ldrb.w	r3, [sl]
	return start_index + sizeof(T) * length_to_extract;
 800fd20:	eb04 0488 	add.w	r4, r4, r8, lsl #2
	subscriber_information.length = length_to_extract;
 800fd24:	f8a7 802c 	strh.w	r8, [r7, #44]	@ 0x2c
	subscriber_information.interface.interface = message.interface;
 800fd28:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	return start_index + sizeof(T) * length_to_extract;
 800fd2c:	b2a4      	uxth	r4, r4
	subscriber_information.interface.address = message.source_address;
 800fd2e:	f89a 3011 	ldrb.w	r3, [sl, #17]
	subscriber_information.register_ = element.element_register;
 800fd32:	e899 0003 	ldmia.w	r9, {r0, r1}
	subscriber_information.interface.address = message.source_address;
 800fd36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	subscriber_information.register_ = element.element_register;
 800fd3a:	6278      	str	r0, [r7, #36]	@ 0x24
 800fd3c:	8539      	strh	r1, [r7, #40]	@ 0x28
	subscribers->Receive<T>(subscriber_information, data);
 800fd3e:	f8cd b000 	str.w	fp, [sp]
 800fd42:	6878      	ldr	r0, [r7, #4]
 800fd44:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800fd48:	68c0      	ldr	r0, [r0, #12]
 800fd4a:	f7ff febd 	bl	800fac8 <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_>
 800fd4e:	f107 000c 	add.w	r0, r7, #12
 800fd52:	f7f1 ffa1 	bl	8001c98 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
}
 800fd56:	4620      	mov	r0, r4
 800fd58:	3734      	adds	r7, #52	@ 0x34
 800fd5a:	46bd      	mov	sp, r7
 800fd5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (element.element_register.isArray && element.element_register.length > 0) {
 800fd60:	f1b8 0f00 	cmp.w	r8, #0
 800fd64:	d00d      	beq.n	800fd82 <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0xc8>
		ExtractArray<T>(array_values, message.payload, start_index, length_to_extract, &success);
 800fd66:	4628      	mov	r0, r5
 800fd68:	f7f0 fe48 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 800fd6c:	4658      	mov	r0, fp
 800fd6e:	4643      	mov	r3, r8
 800fd70:	4622      	mov	r2, r4
 800fd72:	4629      	mov	r1, r5
 800fd74:	9600      	str	r6, [sp, #0]
 800fd76:	f7ff ff71 	bl	800fc5c <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 800fd7a:	4628      	mov	r0, r5
 800fd7c:	f7f0 fd8e 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		data = array_values;
 800fd80:	e7cc      	b.n	800fd1c <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0x62>
		length_to_extract = message.payload[start_index];
 800fd82:	f8da 3004 	ldr.w	r3, [sl, #4]
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 800fd86:	f107 0018 	add.w	r0, r7, #24
		length_to_extract = message.payload[start_index];
 800fd8a:	f813 8004 	ldrb.w	r8, [r3, r4]
		start_index++;
 800fd8e:	3401      	adds	r4, #1
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 800fd90:	f7f0 fe34 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 800fd94:	f107 0118 	add.w	r1, r7, #24
		start_index++;
 800fd98:	b2a4      	uxth	r4, r4
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 800fd9a:	4643      	mov	r3, r8
 800fd9c:	4628      	mov	r0, r5
 800fd9e:	9600      	str	r6, [sp, #0]
 800fda0:	4622      	mov	r2, r4
 800fda2:	f7ff fefd 	bl	800fba0 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 800fda6:	4629      	mov	r1, r5
 800fda8:	f107 000c 	add.w	r0, r7, #12
 800fdac:	f7ff fa6a 	bl	800f284 <_ZNSt6vectorIfSaIfEEaSEOS1_.isra.0>
 800fdb0:	4628      	mov	r0, r5
 800fdb2:	f7f1 ff71 	bl	8001c98 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 800fdb6:	f107 0018 	add.w	r0, r7, #24
 800fdba:	f7f0 fd6f 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return _M_data_ptr(this->_M_impl._M_start); }
 800fdbe:	f8d7 b00c 	ldr.w	fp, [r7, #12]
 800fdc2:	e7ab      	b.n	800fd1c <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0x62>

0800fdc4 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt>:
uint16_t Communication::ProcessService(MessageHeader message, MessageElement element, uint16_t start_index) {
 800fdc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdc8:	b097      	sub	sp, #92	@ 0x5c
 800fdca:	468c      	mov	ip, r1
 800fdcc:	4682      	mov	sl, r0
 800fdce:	461c      	mov	r4, r3
 800fdd0:	af04      	add	r7, sp, #16
	service_information.interface = ServiceInterface{.interface=message.interface, .address=message.source_address};
 800fdd2:	f89c 3000 	ldrb.w	r3, [ip]
 800fdd6:	f89c b011 	ldrb.w	fp, [ip, #17]
 800fdda:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
	service_information.access = element.access;
 800fdde:	7a16      	ldrb	r6, [r2, #8]
	service_information.interface = ServiceInterface{.interface=message.interface, .address=message.source_address};
 800fde0:	60fb      	str	r3, [r7, #12]
	service_information.register_ = element.element_register;
 800fde2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fde6:	61b8      	str	r0, [r7, #24]
	if (element.command) {
 800fde8:	79d0      	ldrb	r0, [r2, #7]
	service_information.register_ = element.element_register;
 800fdea:	83b9      	strh	r1, [r7, #28]
		uint8_t error = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 800fdec:	f10c 0104 	add.w	r1, ip, #4
	if (element.command) {
 800fdf0:	b340      	cbz	r0, 800fe44 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x80>
		uint8_t error = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 800fdf2:	4628      	mov	r0, r5
 800fdf4:	f7f0 fe02 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 800fdf8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800fdfc:	4621      	mov	r1, r4
 800fdfe:	4628      	mov	r0, r5
 800fe00:	f7fe fdec 	bl	800e9dc <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 800fe04:	4680      	mov	r8, r0
      }
 800fe06:	4628      	mov	r0, r5
 800fe08:	f7f0 fd48 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 800fe0c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800fe10:	b18b      	cbz	r3, 800fe36 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x72>
			services->ReceiveError(service_information, error);//services->ReceiveError(element.element_register, message.interface, message.source_address, element.access, error);
 800fe12:	2301      	movs	r3, #1
 800fe14:	f887 b021 	strb.w	fp, [r7, #33]	@ 0x21
 800fe18:	f887 6022 	strb.w	r6, [r7, #34]	@ 0x22
 800fe1c:	83fb      	strh	r3, [r7, #30]
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	f8da 0008 	ldr.w	r0, [sl, #8]
 800fe24:	f887 3020 	strb.w	r3, [r7, #32]
 800fe28:	f107 0318 	add.w	r3, r7, #24
 800fe2c:	f8cd 8000 	str.w	r8, [sp]
 800fe30:	cb0e      	ldmia	r3, {r1, r2, r3}
 800fe32:	f008 f998 	bl	8018166 <_ZN8Services12ReceiveErrorE20ServiceConfigurationh>
		return start_index + 1;
 800fe36:	3401      	adds	r4, #1
 800fe38:	b2a4      	uxth	r4, r4
}
 800fe3a:	4620      	mov	r0, r4
 800fe3c:	374c      	adds	r7, #76	@ 0x4c
 800fe3e:	46bd      	mov	sp, r7
 800fe40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (element.access == WRITE) {
 800fe44:	bb1e      	cbnz	r6, 800fe8e <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0xca>
		uint8_t value = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 800fe46:	4628      	mov	r0, r5
 800fe48:	f7f0 fdd8 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 800fe4c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800fe50:	4621      	mov	r1, r4
 800fe52:	4628      	mov	r0, r5
 800fe54:	f7fe fdc2 	bl	800e9dc <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 800fe58:	4680      	mov	r8, r0
 800fe5a:	4628      	mov	r0, r5
 800fe5c:	f7f0 fd1e 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 800fe60:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d0e6      	beq.n	800fe36 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x72>
			services->ReceiveWrite(service_information, value);//services->ReceiveWrite(element.element_register, message.interface, message.source_address, value);
 800fe68:	2301      	movs	r3, #1
 800fe6a:	f887 b021 	strb.w	fp, [r7, #33]	@ 0x21
 800fe6e:	f887 6022 	strb.w	r6, [r7, #34]	@ 0x22
 800fe72:	83fb      	strh	r3, [r7, #30]
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	f8da 0008 	ldr.w	r0, [sl, #8]
 800fe7a:	f887 3020 	strb.w	r3, [r7, #32]
 800fe7e:	f107 0318 	add.w	r3, r7, #24
 800fe82:	f8cd 8000 	str.w	r8, [sp]
 800fe86:	cb0e      	ldmia	r3, {r1, r2, r3}
 800fe88:	f008 f930 	bl	80180ec <_ZN8Services12ReceiveWriteE20ServiceConfigurationh>
 800fe8c:	e7d3      	b.n	800fe36 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x72>
		T array_values[element.element_register.length];
 800fe8e:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 800fe92:	466e      	mov	r6, sp
	}
 800fe94:	f8c7 d004 	str.w	sp, [r7, #4]
		T array_values[element.element_register.length];
 800fe98:	ea4f 0388 	mov.w	r3, r8, lsl #2
	: _M_start(), _M_finish(), _M_end_of_storage()
 800fe9c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800fe9e:	3307      	adds	r3, #7
 800fea0:	08db      	lsrs	r3, r3, #3
 800fea2:	eba6 03c3 	sub.w	r3, r6, r3, lsl #3
 800fea6:	f107 0616 	add.w	r6, r7, #22
 800feaa:	469d      	mov	sp, r3
		if (not element.element_register.isArray) {
 800feac:	78d3      	ldrb	r3, [r2, #3]
		T array_values[element.element_register.length];
 800feae:	f10d 0910 	add.w	r9, sp, #16
 800feb2:	e9c7 0009 	strd	r0, r0, [r7, #36]	@ 0x24
		if (not element.element_register.isArray) {
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d13a      	bne.n	800ff30 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x16c>
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 800feba:	4628      	mov	r0, r5
			data = &single_value;
 800febc:	f107 0930 	add.w	r9, r7, #48	@ 0x30
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 800fec0:	f7f0 fd9c 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
			length_to_extract = 1;
 800fec4:	f04f 0801 	mov.w	r8, #1
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 800fec8:	4632      	mov	r2, r6
 800feca:	4621      	mov	r1, r4
 800fecc:	4628      	mov	r0, r5
 800fece:	f7fe fd41 	bl	800e954 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0>
      }
 800fed2:	4628      	mov	r0, r5
 800fed4:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
 800fed8:	f7f0 fce0 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 800fedc:	7dbb      	ldrb	r3, [r7, #22]
 800fede:	b1eb      	cbz	r3, 800ff1c <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x158>
 800fee0:	68fb      	ldr	r3, [r7, #12]
			services->ReceiveRead<T>(service_information, data);
 800fee2:	f8da 6008 	ldr.w	r6, [sl, #8]
 800fee6:	f04f 0a01 	mov.w	sl, #1
 800feea:	f887 3020 	strb.w	r3, [r7, #32]
 800feee:	f107 0318 	add.w	r3, r7, #24
 800fef2:	f8a7 801e 	strh.w	r8, [r7, #30]
 800fef6:	f887 b021 	strb.w	fp, [r7, #33]	@ 0x21
 800fefa:	f887 a022 	strb.w	sl, [r7, #34]	@ 0x22
	bool success = true;
 800fefe:	f887 a017 	strb.w	sl, [r7, #23]
 800ff02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ff06:	7ebb      	ldrb	r3, [r7, #26]
 800ff08:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800ff0c:	60bb      	str	r3, [r7, #8]
	uint8_t start_index = 0;
 800ff0e:	2100      	movs	r1, #0
		CommunicationLED(leds, information.interface.interface);
 800ff10:	f506 5380 	add.w	r3, r6, #4096	@ 0x1000
 800ff14:	603b      	str	r3, [r7, #0]
	while (success) {
 800ff16:	7dfb      	ldrb	r3, [r7, #23]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d13b      	bne.n	800ff94 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x1d0>
		return start_index + sizeof(T) * length_to_extract;
 800ff1c:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800ff20:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800ff24:	f7f1 feb8 	bl	8001c98 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 800ff28:	f8d7 d004 	ldr.w	sp, [r7, #4]
 800ff2c:	b2a4      	uxth	r4, r4
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800ff2e:	e784      	b.n	800fe3a <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x76>
		} else if (element.element_register.isArray && element.element_register.length > 0) {
 800ff30:	f1b8 0f00 	cmp.w	r8, #0
 800ff34:	d00d      	beq.n	800ff52 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x18e>
			ExtractArray<T>(array_values, message.payload, start_index, length_to_extract, &success);
 800ff36:	4628      	mov	r0, r5
 800ff38:	f7f0 fd60 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 800ff3c:	4648      	mov	r0, r9
 800ff3e:	4643      	mov	r3, r8
 800ff40:	4622      	mov	r2, r4
 800ff42:	4629      	mov	r1, r5
 800ff44:	9600      	str	r6, [sp, #0]
 800ff46:	f7ff fe89 	bl	800fc5c <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 800ff4a:	4628      	mov	r0, r5
 800ff4c:	f7f0 fca6 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
			data = array_values;
 800ff50:	e7c4      	b.n	800fedc <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x118>
			length_to_extract = message.payload[start_index];
 800ff52:	f8dc 3004 	ldr.w	r3, [ip, #4]
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 800ff56:	f107 0030 	add.w	r0, r7, #48	@ 0x30
			length_to_extract = message.payload[start_index];
 800ff5a:	f813 8004 	ldrb.w	r8, [r3, r4]
			start_index++;
 800ff5e:	3401      	adds	r4, #1
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 800ff60:	f7f0 fd4c 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 800ff64:	f107 0130 	add.w	r1, r7, #48	@ 0x30
			start_index++;
 800ff68:	b2a4      	uxth	r4, r4
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 800ff6a:	4643      	mov	r3, r8
 800ff6c:	4628      	mov	r0, r5
 800ff6e:	9600      	str	r6, [sp, #0]
 800ff70:	4622      	mov	r2, r4
 800ff72:	f7ff fe15 	bl	800fba0 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 800ff76:	4629      	mov	r1, r5
 800ff78:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800ff7c:	f7ff f982 	bl	800f284 <_ZNSt6vectorIfSaIfEEaSEOS1_.isra.0>
 800ff80:	4628      	mov	r0, r5
 800ff82:	f7f1 fe89 	bl	8001c98 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 800ff86:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 800ff8a:	f7f0 fc87 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return _M_data_ptr(this->_M_impl._M_start); }
 800ff8e:	f8d7 9024 	ldr.w	r9, [r7, #36]	@ 0x24
 800ff92:	e7a3      	b.n	800fedc <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x118>
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 800ff94:	68bb      	ldr	r3, [r7, #8]
 800ff96:	4630      	mov	r0, r6
 800ff98:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 800ff9c:	f107 0317 	add.w	r3, r7, #23
 800ffa0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ffa4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800ffa8:	f8ad 3000 	strh.w	r3, [sp]
 800ffac:	e895 000c 	ldmia.w	r5, {r2, r3}
 800ffb0:	f007 ff93 	bl	8017eda <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb>
		if (not success) return;
 800ffb4:	7dfa      	ldrb	r2, [r7, #23]
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 800ffb6:	4683      	mov	fp, r0
		if (not success) return;
 800ffb8:	2a00      	cmp	r2, #0
 800ffba:	d0af      	beq.n	800ff1c <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x158>
		if (information.length > SERVICES_BUFFER_SIZE) return;
 800ffbc:	f5b8 7f80 	cmp.w	r8, #256	@ 0x100
 800ffc0:	d8ac      	bhi.n	800ff1c <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x158>
		CommunicationLED(leds, information.interface.interface);
 800ffc2:	683b      	ldr	r3, [r7, #0]
 800ffc4:	68f9      	ldr	r1, [r7, #12]
 800ffc6:	f8d3 0440 	ldr.w	r0, [r3, #1088]	@ 0x440
 800ffca:	f7fe fa30 	bl	800e42e <_Z16CommunicationLEDP4LEDSh>
		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 800ffce:	f04f 31ff 	mov.w	r1, #4294967295
 800ffd2:	6830      	ldr	r0, [r6, #0]
 800ffd4:	f7fc f8f2 	bl	800c1bc <osSemaphoreAcquire>
		services[index].configuration.length = information.length;
 800ffd8:	2218      	movs	r2, #24
		switch (information.register_.type) {
 800ffda:	68bb      	ldr	r3, [r7, #8]
		services[index].configuration.length = information.length;
 800ffdc:	fb02 620b 	mla	r2, r2, fp, r6
 800ffe0:	f8a2 8010 	strh.w	r8, [r2, #16]
		switch (information.register_.type) {
 800ffe4:	2b08      	cmp	r3, #8
 800ffe6:	d80d      	bhi.n	8010004 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x240>
 800ffe8:	e8df f003 	tbb	[pc, r3]
 800ffec:	0c1d0c05 	.word	0x0c1d0c05
 800fff0:	0c0c0c26 	.word	0x0c0c0c26
 800fff4:	33          	.byte	0x33
 800fff5:	00          	.byte	0x00
			TranferData<uint8_t>((uint8_t*) data, &buffer_uint8[index][0], information.length);
 800fff6:	eb06 210b 	add.w	r1, r6, fp, lsl #8
 800fffa:	2200      	movs	r2, #0
 800fffc:	3138      	adds	r1, #56	@ 0x38
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 800fffe:	b290      	uxth	r0, r2
 8010000:	4580      	cmp	r8, r0
 8010002:	d80b      	bhi.n	801001c <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x258>
		services[index].reception_flag = true;
 8010004:	2218      	movs	r2, #24
		osSemaphoreRelease(ServiceSemaphore);
 8010006:	6830      	ldr	r0, [r6, #0]
		services[index].reception_flag = true;
 8010008:	fb02 620b 	mla	r2, r2, fp, r6
 801000c:	f882 a009 	strb.w	sl, [r2, #9]
		osSemaphoreRelease(ServiceSemaphore);
 8010010:	f7fc f908 	bl	800c224 <osSemaphoreRelease>
		start_index = index + 1;
 8010014:	f10b 0101 	add.w	r1, fp, #1
 8010018:	b2c9      	uxtb	r1, r1
 801001a:	e77c      	b.n	800ff16 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x152>
		to[buffer_index] = from[buffer_index];
 801001c:	f819 0002 	ldrb.w	r0, [r9, r2]
 8010020:	5488      	strb	r0, [r1, r2]
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 8010022:	3201      	adds	r2, #1
 8010024:	e7eb      	b.n	800fffe <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x23a>
			TranferData<uint32_t>((uint32_t*) data, &buffer_uint32[index][0], information.length);
 8010026:	eb06 218b 	add.w	r1, r6, fp, lsl #10
 801002a:	4642      	mov	r2, r8
 801002c:	4648      	mov	r0, r9
 801002e:	f501 710e 	add.w	r1, r1, #568	@ 0x238
 8010032:	f7fe fc83 	bl	800e93c <_ZN8Services11TranferDataImEEvPT_S2_t.isra.0>
			break;
 8010036:	e7e5      	b.n	8010004 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x240>
			TranferData<int8_t>((int8_t*) data, &buffer_int8[index][0], information.length);
 8010038:	eb06 210b 	add.w	r1, r6, fp, lsl #8
 801003c:	2200      	movs	r2, #0
 801003e:	f601 2138 	addw	r1, r1, #2616	@ 0xa38
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 8010042:	b290      	uxth	r0, r2
 8010044:	4580      	cmp	r8, r0
 8010046:	d9dd      	bls.n	8010004 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x240>
		to[buffer_index] = from[buffer_index];
 8010048:	f919 0002 	ldrsb.w	r0, [r9, r2]
 801004c:	5488      	strb	r0, [r1, r2]
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 801004e:	3201      	adds	r2, #1
 8010050:	e7f7      	b.n	8010042 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x27e>
			TranferData<float>((float*) data, &buffer_float[index][0], information.length);
 8010052:	eb06 218b 	add.w	r1, r6, fp, lsl #10
 8010056:	4642      	mov	r2, r8
 8010058:	4648      	mov	r0, r9
 801005a:	f601 4138 	addw	r1, r1, #3128	@ 0xc38
 801005e:	f7fe fc63 	bl	800e928 <_ZN8Services11TranferDataIfEEvPT_S2_t.isra.0>
			break;
 8010062:	e7cf      	b.n	8010004 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x240>

08010064 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>:
std::vector<T> Communication::ExtractVector(std::vector<uint8_t> payload, uint16_t start_index, uint16_t length, bool* success) {
 8010064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010068:	2600      	movs	r6, #0
 801006a:	b087      	sub	sp, #28
 801006c:	4604      	mov	r4, r0
 801006e:	4691      	mov	r9, r2
 8010070:	9100      	str	r1, [sp, #0]
 8010072:	9301      	str	r3, [sp, #4]
 8010074:	6086      	str	r6, [r0, #8]
 8010076:	e9c0 6600 	strd	r6, r6, [r0]
 801007a:	b2f5      	uxtb	r5, r6
	for (uint8_t index = 0; index < length; index++) {
 801007c:	9b01      	ldr	r3, [sp, #4]
 801007e:	429d      	cmp	r5, r3
 8010080:	db03      	blt.n	801008a <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x26>
}
 8010082:	4620      	mov	r0, r4
 8010084:	b007      	add	sp, #28
 8010086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 801008a:	9900      	ldr	r1, [sp, #0]
 801008c:	a803      	add	r0, sp, #12
 801008e:	f7f0 fcb5 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010092:	eb05 0109 	add.w	r1, r5, r9
 8010096:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8010098:	a803      	add	r0, sp, #12
 801009a:	b289      	uxth	r1, r1
 801009c:	f7fe fc78 	bl	800e990 <_ZN13Communication13ExtractSingleIaEET_St6vectorIhSaIhEEtPb.isra.0>
 80100a0:	4607      	mov	r7, r0
      }
 80100a2:	a803      	add	r0, sp, #12
 80100a4:	f7f0 fbfa 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (not *success)
 80100a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80100aa:	781b      	ldrb	r3, [r3, #0]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d0e8      	beq.n	8010082 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x1e>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80100b0:	e9d4 5301 	ldrd	r5, r3, [r4, #4]
 80100b4:	429d      	cmp	r5, r3
 80100b6:	d005      	beq.n	80100c4 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x60>
 80100b8:	702f      	strb	r7, [r5, #0]
	    ++this->_M_impl._M_finish;
 80100ba:	6863      	ldr	r3, [r4, #4]
 80100bc:	3301      	adds	r3, #1
 80100be:	6063      	str	r3, [r4, #4]
	for (uint8_t index = 0; index < length; index++) {
 80100c0:	3601      	adds	r6, #1
 80100c2:	e7da      	b.n	801007a <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x16>
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80100c4:	4a13      	ldr	r2, [pc, #76]	@ (8010114 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0xb0>)
 80100c6:	2101      	movs	r1, #1
 80100c8:	4620      	mov	r0, r4
 80100ca:	f7ff f9c2 	bl	800f452 <_ZNKSt6vectorIaSaIaEE12_M_check_lenEjPKc>
      pointer __old_start = this->_M_impl._M_start;
 80100ce:	f8d4 b000 	ldr.w	fp, [r4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80100d2:	4682      	mov	sl, r0
      pointer __new_start(this->_M_allocate(__len));
 80100d4:	f7fe fae5 	bl	800e6a2 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>
 80100d8:	eba5 080b 	sub.w	r8, r5, fp
 80100dc:	4605      	mov	r5, r0
      if (__count > 0)
 80100de:	f1b8 0f00 	cmp.w	r8, #0
 80100e2:	f800 7008 	strb.w	r7, [r0, r8]
 80100e6:	dd03      	ble.n	80100f0 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x8c>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80100e8:	4642      	mov	r2, r8
 80100ea:	4659      	mov	r1, fp
 80100ec:	f009 fd22 	bl	8019b34 <memmove>
	      ++__new_finish;
 80100f0:	f108 0201 	add.w	r2, r8, #1
 80100f4:	18af      	adds	r7, r5, r2
	if (__p)
 80100f6:	f1bb 0f00 	cmp.w	fp, #0
 80100fa:	d005      	beq.n	8010108 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0xa4>
		    this->_M_impl._M_end_of_storage - __old_start);
 80100fc:	68a1      	ldr	r1, [r4, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80100fe:	4658      	mov	r0, fp
 8010100:	eba1 010b 	sub.w	r1, r1, fp
 8010104:	f009 fb64 	bl	80197d0 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8010108:	e9c4 5700 	strd	r5, r7, [r4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801010c:	4455      	add	r5, sl
 801010e:	60a5      	str	r5, [r4, #8]
 8010110:	e7d6      	b.n	80100c0 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x5c>
 8010112:	bf00      	nop
 8010114:	08019e3e 	.word	0x08019e3e

08010118 <_ZN13Communication12ExtractArrayIaEEvPT_St6vectorIhSaIhEEttPb.isra.0>:
void Communication::ExtractArray(T* data, std::vector<uint8_t> payload, uint16_t start_index, uint16_t length, bool* success) {
 8010118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801011c:	b085      	sub	sp, #20
 801011e:	4607      	mov	r7, r0
 8010120:	4688      	mov	r8, r1
 8010122:	4691      	mov	r9, r2
 8010124:	461c      	mov	r4, r3
 8010126:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 801012a:	2600      	movs	r6, #0
 801012c:	b2f5      	uxtb	r5, r6
	for (uint8_t index = 0; index < length; index++) {
 801012e:	42a5      	cmp	r5, r4
 8010130:	db02      	blt.n	8010138 <_ZN13Communication12ExtractArrayIaEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x20>
}
 8010132:	b005      	add	sp, #20
 8010134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 8010138:	4641      	mov	r1, r8
 801013a:	a801      	add	r0, sp, #4
 801013c:	f7f0 fc5e 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010140:	eb05 0109 	add.w	r1, r5, r9
 8010144:	465a      	mov	r2, fp
 8010146:	a801      	add	r0, sp, #4
 8010148:	b289      	uxth	r1, r1
		if (not *success)
 801014a:	3601      	adds	r6, #1
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 801014c:	f7fe fc20 	bl	800e990 <_ZN13Communication13ExtractSingleIaEET_St6vectorIhSaIhEEtPb.isra.0>
 8010150:	4682      	mov	sl, r0
      }
 8010152:	a801      	add	r0, sp, #4
 8010154:	f7f0 fba2 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (not *success)
 8010158:	f89b 3000 	ldrb.w	r3, [fp]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d0e8      	beq.n	8010132 <_ZN13Communication12ExtractArrayIaEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x1a>
		data[index] = element;
 8010160:	f807 a005 	strb.w	sl, [r7, r5]
	for (uint8_t index = 0; index < length; index++) {
 8010164:	e7e2      	b.n	801012c <_ZN13Communication12ExtractArrayIaEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x14>

08010166 <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt>:
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 8010166:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801016a:	b08f      	sub	sp, #60	@ 0x3c
 801016c:	461c      	mov	r4, r3
 801016e:	4691      	mov	r9, r2
 8010170:	468a      	mov	sl, r1
	T array_values[element.element_register.length];
 8010172:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8010176:	466a      	mov	r2, sp
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 8010178:	af02      	add	r7, sp, #8
	T array_values[element.element_register.length];
 801017a:	f108 0307 	add.w	r3, r8, #7
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 801017e:	3104      	adds	r1, #4
 8010180:	f107 0524 	add.w	r5, r7, #36	@ 0x24
 8010184:	f107 060b 	add.w	r6, r7, #11
	T array_values[element.element_register.length];
 8010188:	08db      	lsrs	r3, r3, #3
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 801018a:	6078      	str	r0, [r7, #4]
	T array_values[element.element_register.length];
 801018c:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 8010190:	469d      	mov	sp, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010192:	2300      	movs	r3, #0
 8010194:	e9c7 3303 	strd	r3, r3, [r7, #12]
 8010198:	617b      	str	r3, [r7, #20]
 801019a:	f10d 0b08 	add.w	fp, sp, #8
	if (not element.element_register.isArray) {
 801019e:	f899 3003 	ldrb.w	r3, [r9, #3]
 80101a2:	bb83      	cbnz	r3, 8010206 <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt+0xa0>
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 80101a4:	4628      	mov	r0, r5
		data = &single_value;
 80101a6:	f107 0b18 	add.w	fp, r7, #24
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 80101aa:	f7f0 fc27 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
		length_to_extract = 1;
 80101ae:	f04f 0801 	mov.w	r8, #1
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 80101b2:	4632      	mov	r2, r6
 80101b4:	4621      	mov	r1, r4
 80101b6:	4628      	mov	r0, r5
 80101b8:	f7fe fbea 	bl	800e990 <_ZN13Communication13ExtractSingleIaEET_St6vectorIhSaIhEEtPb.isra.0>
 80101bc:	7638      	strb	r0, [r7, #24]
      }
 80101be:	4628      	mov	r0, r5
 80101c0:	f7f0 fb6c 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	subscriber_information.interface.interface = message.interface;
 80101c4:	f89a 3000 	ldrb.w	r3, [sl]
	return start_index + sizeof(T) * length_to_extract;
 80101c8:	4444      	add	r4, r8
	subscriber_information.length = length_to_extract;
 80101ca:	f8a7 802c 	strh.w	r8, [r7, #44]	@ 0x2c
	subscriber_information.interface.interface = message.interface;
 80101ce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	return start_index + sizeof(T) * length_to_extract;
 80101d2:	b2a4      	uxth	r4, r4
	subscriber_information.interface.address = message.source_address;
 80101d4:	f89a 3011 	ldrb.w	r3, [sl, #17]
	subscriber_information.register_ = element.element_register;
 80101d8:	e899 0003 	ldmia.w	r9, {r0, r1}
	subscriber_information.interface.address = message.source_address;
 80101dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	subscriber_information.register_ = element.element_register;
 80101e0:	6278      	str	r0, [r7, #36]	@ 0x24
 80101e2:	8539      	strh	r1, [r7, #40]	@ 0x28
	subscribers->Receive<T>(subscriber_information, data);
 80101e4:	f8cd b000 	str.w	fp, [sp]
 80101e8:	6878      	ldr	r0, [r7, #4]
 80101ea:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80101ee:	68c0      	ldr	r0, [r0, #12]
 80101f0:	f7ff fbfe 	bl	800f9f0 <_ZN17MasterSubscribers7ReceiveIaEEv15SubscriberInputPT_>
 80101f4:	f107 000c 	add.w	r0, r7, #12
 80101f8:	f7ff f823 	bl	800f242 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
}
 80101fc:	4620      	mov	r0, r4
 80101fe:	3734      	adds	r7, #52	@ 0x34
 8010200:	46bd      	mov	sp, r7
 8010202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (element.element_register.isArray && element.element_register.length > 0) {
 8010206:	f1b8 0f00 	cmp.w	r8, #0
 801020a:	d00d      	beq.n	8010228 <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt+0xc2>
		ExtractArray<T>(array_values, message.payload, start_index, length_to_extract, &success);
 801020c:	4628      	mov	r0, r5
 801020e:	f7f0 fbf5 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010212:	4658      	mov	r0, fp
 8010214:	4643      	mov	r3, r8
 8010216:	4622      	mov	r2, r4
 8010218:	4629      	mov	r1, r5
 801021a:	9600      	str	r6, [sp, #0]
 801021c:	f7ff ff7c 	bl	8010118 <_ZN13Communication12ExtractArrayIaEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 8010220:	4628      	mov	r0, r5
 8010222:	f7f0 fb3b 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		data = array_values;
 8010226:	e7cd      	b.n	80101c4 <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt+0x5e>
		length_to_extract = message.payload[start_index];
 8010228:	f8da 3004 	ldr.w	r3, [sl, #4]
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 801022c:	f107 0018 	add.w	r0, r7, #24
		length_to_extract = message.payload[start_index];
 8010230:	f813 8004 	ldrb.w	r8, [r3, r4]
		start_index++;
 8010234:	3401      	adds	r4, #1
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8010236:	f7f0 fbe1 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 801023a:	f107 0118 	add.w	r1, r7, #24
		start_index++;
 801023e:	b2a4      	uxth	r4, r4
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8010240:	4643      	mov	r3, r8
 8010242:	4628      	mov	r0, r5
 8010244:	9600      	str	r6, [sp, #0]
 8010246:	4622      	mov	r2, r4
 8010248:	f7ff ff0c 	bl	8010064 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 801024c:	4629      	mov	r1, r5
 801024e:	f107 000c 	add.w	r0, r7, #12
 8010252:	f7ff f800 	bl	800f256 <_ZNSt6vectorIaSaIaEEaSEOS1_.isra.0>
 8010256:	4628      	mov	r0, r5
 8010258:	f7fe fff3 	bl	800f242 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 801025c:	f107 0018 	add.w	r0, r7, #24
 8010260:	f7f0 fb1c 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return _M_data_ptr(this->_M_impl._M_start); }
 8010264:	f8d7 b00c 	ldr.w	fp, [r7, #12]
 8010268:	e7ac      	b.n	80101c4 <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt+0x5e>

0801026a <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt>:
uint16_t Communication::ProcessService(MessageHeader message, MessageElement element, uint16_t start_index) {
 801026a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801026e:	468c      	mov	ip, r1
 8010270:	b097      	sub	sp, #92	@ 0x5c
 8010272:	461c      	mov	r4, r3
 8010274:	4682      	mov	sl, r0
 8010276:	af04      	add	r7, sp, #16
	service_information.interface = ServiceInterface{.interface=message.interface, .address=message.source_address};
 8010278:	f89c 3000 	ldrb.w	r3, [ip]
 801027c:	f89c b011 	ldrb.w	fp, [ip, #17]
 8010280:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 8010284:	60fb      	str	r3, [r7, #12]
	if (element.command) {
 8010286:	79d3      	ldrb	r3, [r2, #7]
	service_information.access = element.access;
 8010288:	7a16      	ldrb	r6, [r2, #8]
	service_information.register_ = element.element_register;
 801028a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801028e:	83b9      	strh	r1, [r7, #28]
		uint8_t error = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 8010290:	f10c 0104 	add.w	r1, ip, #4
	service_information.register_ = element.element_register;
 8010294:	61b8      	str	r0, [r7, #24]
	if (element.command) {
 8010296:	b343      	cbz	r3, 80102ea <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x80>
		uint8_t error = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 8010298:	4628      	mov	r0, r5
 801029a:	f7f0 fbaf 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 801029e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80102a2:	4621      	mov	r1, r4
 80102a4:	4628      	mov	r0, r5
 80102a6:	f7fe fb99 	bl	800e9dc <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 80102aa:	4680      	mov	r8, r0
      }
 80102ac:	4628      	mov	r0, r5
 80102ae:	f7f0 faf5 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 80102b2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80102b6:	b18b      	cbz	r3, 80102dc <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x72>
			services->ReceiveError(service_information, error);//services->ReceiveError(element.element_register, message.interface, message.source_address, element.access, error);
 80102b8:	2301      	movs	r3, #1
 80102ba:	f887 b021 	strb.w	fp, [r7, #33]	@ 0x21
 80102be:	f887 6022 	strb.w	r6, [r7, #34]	@ 0x22
 80102c2:	83fb      	strh	r3, [r7, #30]
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	f8da 0008 	ldr.w	r0, [sl, #8]
 80102ca:	f887 3020 	strb.w	r3, [r7, #32]
 80102ce:	f107 0318 	add.w	r3, r7, #24
 80102d2:	f8cd 8000 	str.w	r8, [sp]
 80102d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80102d8:	f007 ff45 	bl	8018166 <_ZN8Services12ReceiveErrorE20ServiceConfigurationh>
		return start_index + 1;
 80102dc:	3401      	adds	r4, #1
 80102de:	b2a4      	uxth	r4, r4
}
 80102e0:	4620      	mov	r0, r4
 80102e2:	374c      	adds	r7, #76	@ 0x4c
 80102e4:	46bd      	mov	sp, r7
 80102e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (element.access == WRITE) {
 80102ea:	bb1e      	cbnz	r6, 8010334 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0xca>
		uint8_t value = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 80102ec:	4628      	mov	r0, r5
 80102ee:	f7f0 fb85 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80102f2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80102f6:	4621      	mov	r1, r4
 80102f8:	4628      	mov	r0, r5
 80102fa:	f7fe fb6f 	bl	800e9dc <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 80102fe:	4680      	mov	r8, r0
 8010300:	4628      	mov	r0, r5
 8010302:	f7f0 facb 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8010306:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 801030a:	2b00      	cmp	r3, #0
 801030c:	d0e6      	beq.n	80102dc <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x72>
			services->ReceiveWrite(service_information, value);//services->ReceiveWrite(element.element_register, message.interface, message.source_address, value);
 801030e:	2301      	movs	r3, #1
 8010310:	f887 b021 	strb.w	fp, [r7, #33]	@ 0x21
 8010314:	f887 6022 	strb.w	r6, [r7, #34]	@ 0x22
 8010318:	83fb      	strh	r3, [r7, #30]
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	f8da 0008 	ldr.w	r0, [sl, #8]
 8010320:	f887 3020 	strb.w	r3, [r7, #32]
 8010324:	f107 0318 	add.w	r3, r7, #24
 8010328:	f8cd 8000 	str.w	r8, [sp]
 801032c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801032e:	f007 fedd 	bl	80180ec <_ZN8Services12ReceiveWriteE20ServiceConfigurationh>
 8010332:	e7d3      	b.n	80102dc <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x72>
		T array_values[element.element_register.length];
 8010334:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8010338:	466e      	mov	r6, sp
	}
 801033a:	f8c7 d004 	str.w	sp, [r7, #4]
		T array_values[element.element_register.length];
 801033e:	f108 0007 	add.w	r0, r8, #7
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010342:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010344:	08c0      	lsrs	r0, r0, #3
 8010346:	eba6 00c0 	sub.w	r0, r6, r0, lsl #3
 801034a:	f107 0617 	add.w	r6, r7, #23
 801034e:	4685      	mov	sp, r0
 8010350:	e9c7 3309 	strd	r3, r3, [r7, #36]	@ 0x24
		if (not element.element_register.isArray) {
 8010354:	78d3      	ldrb	r3, [r2, #3]
		T array_values[element.element_register.length];
 8010356:	f10d 0910 	add.w	r9, sp, #16
		if (not element.element_register.isArray) {
 801035a:	bbc3      	cbnz	r3, 80103ce <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x164>
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 801035c:	4628      	mov	r0, r5
			data = &single_value;
 801035e:	f107 0916 	add.w	r9, r7, #22
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8010362:	f7f0 fb4b 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
			length_to_extract = 1;
 8010366:	f04f 0801 	mov.w	r8, #1
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 801036a:	4632      	mov	r2, r6
 801036c:	4621      	mov	r1, r4
 801036e:	4628      	mov	r0, r5
 8010370:	f7fe fb0e 	bl	800e990 <_ZN13Communication13ExtractSingleIaEET_St6vectorIhSaIhEEtPb.isra.0>
 8010374:	75b8      	strb	r0, [r7, #22]
      }
 8010376:	4628      	mov	r0, r5
 8010378:	f7f0 fa90 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 801037c:	7dfb      	ldrb	r3, [r7, #23]
 801037e:	b1eb      	cbz	r3, 80103bc <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x152>
 8010380:	68fb      	ldr	r3, [r7, #12]
			services->ReceiveRead<T>(service_information, data);
 8010382:	f8da 6008 	ldr.w	r6, [sl, #8]
 8010386:	f04f 0a01 	mov.w	sl, #1
 801038a:	f887 3020 	strb.w	r3, [r7, #32]
 801038e:	f107 0318 	add.w	r3, r7, #24
 8010392:	f8a7 801e 	strh.w	r8, [r7, #30]
 8010396:	f887 b021 	strb.w	fp, [r7, #33]	@ 0x21
 801039a:	f887 a022 	strb.w	sl, [r7, #34]	@ 0x22
	bool success = true;
 801039e:	f887 a030 	strb.w	sl, [r7, #48]	@ 0x30
 80103a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80103a6:	7ebb      	ldrb	r3, [r7, #26]
 80103a8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80103ac:	60bb      	str	r3, [r7, #8]
	uint8_t start_index = 0;
 80103ae:	2100      	movs	r1, #0
		CommunicationLED(leds, information.interface.interface);
 80103b0:	f506 5380 	add.w	r3, r6, #4096	@ 0x1000
 80103b4:	603b      	str	r3, [r7, #0]
	while (success) {
 80103b6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80103ba:	bbd3      	cbnz	r3, 8010432 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x1c8>
		return start_index + sizeof(T) * length_to_extract;
 80103bc:	4444      	add	r4, r8
 80103be:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80103c2:	f7fe ff3e 	bl	800f242 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 80103c6:	f8d7 d004 	ldr.w	sp, [r7, #4]
 80103ca:	b2a4      	uxth	r4, r4
 80103cc:	e788      	b.n	80102e0 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x76>
		} else if (element.element_register.isArray && element.element_register.length > 0) {
 80103ce:	f1b8 0f00 	cmp.w	r8, #0
 80103d2:	d00d      	beq.n	80103f0 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x186>
			ExtractArray<T>(array_values, message.payload, start_index, length_to_extract, &success);
 80103d4:	4628      	mov	r0, r5
 80103d6:	f7f0 fb11 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80103da:	4648      	mov	r0, r9
 80103dc:	4643      	mov	r3, r8
 80103de:	4622      	mov	r2, r4
 80103e0:	4629      	mov	r1, r5
 80103e2:	9600      	str	r6, [sp, #0]
 80103e4:	f7ff fe98 	bl	8010118 <_ZN13Communication12ExtractArrayIaEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 80103e8:	4628      	mov	r0, r5
 80103ea:	f7f0 fa57 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
			data = array_values;
 80103ee:	e7c5      	b.n	801037c <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x112>
			length_to_extract = message.payload[start_index];
 80103f0:	f8dc 3004 	ldr.w	r3, [ip, #4]
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 80103f4:	f107 0030 	add.w	r0, r7, #48	@ 0x30
			length_to_extract = message.payload[start_index];
 80103f8:	f813 8004 	ldrb.w	r8, [r3, r4]
			start_index++;
 80103fc:	3401      	adds	r4, #1
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 80103fe:	f7f0 fafd 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010402:	f107 0130 	add.w	r1, r7, #48	@ 0x30
			start_index++;
 8010406:	b2a4      	uxth	r4, r4
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8010408:	4643      	mov	r3, r8
 801040a:	4628      	mov	r0, r5
 801040c:	9600      	str	r6, [sp, #0]
 801040e:	4622      	mov	r2, r4
 8010410:	f7ff fe28 	bl	8010064 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 8010414:	4629      	mov	r1, r5
 8010416:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 801041a:	f7fe ff1c 	bl	800f256 <_ZNSt6vectorIaSaIaEEaSEOS1_.isra.0>
 801041e:	4628      	mov	r0, r5
 8010420:	f7fe ff0f 	bl	800f242 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 8010424:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8010428:	f7f0 fa38 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return _M_data_ptr(this->_M_impl._M_start); }
 801042c:	f8d7 9024 	ldr.w	r9, [r7, #36]	@ 0x24
 8010430:	e7a4      	b.n	801037c <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x112>
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 8010432:	68bb      	ldr	r3, [r7, #8]
 8010434:	4630      	mov	r0, r6
 8010436:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 801043a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801043e:	e9cd a301 	strd	sl, r3, [sp, #4]
 8010442:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8010446:	f8ad 3000 	strh.w	r3, [sp]
 801044a:	e895 000c 	ldmia.w	r5, {r2, r3}
 801044e:	f007 fd44 	bl	8017eda <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb>
		if (not success) return;
 8010452:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 8010456:	4683      	mov	fp, r0
		if (not success) return;
 8010458:	2a00      	cmp	r2, #0
 801045a:	d0af      	beq.n	80103bc <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x152>
		if (information.length > SERVICES_BUFFER_SIZE) return;
 801045c:	f5b8 7f80 	cmp.w	r8, #256	@ 0x100
 8010460:	d8ac      	bhi.n	80103bc <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x152>
		CommunicationLED(leds, information.interface.interface);
 8010462:	683b      	ldr	r3, [r7, #0]
 8010464:	68f9      	ldr	r1, [r7, #12]
 8010466:	f8d3 0440 	ldr.w	r0, [r3, #1088]	@ 0x440
 801046a:	f7fd ffe0 	bl	800e42e <_Z16CommunicationLEDP4LEDSh>
		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 801046e:	f04f 31ff 	mov.w	r1, #4294967295
 8010472:	6830      	ldr	r0, [r6, #0]
 8010474:	f7fb fea2 	bl	800c1bc <osSemaphoreAcquire>
		services[index].configuration.length = information.length;
 8010478:	2218      	movs	r2, #24
		switch (information.register_.type) {
 801047a:	68bb      	ldr	r3, [r7, #8]
		services[index].configuration.length = information.length;
 801047c:	fb02 620b 	mla	r2, r2, fp, r6
 8010480:	f8a2 8010 	strh.w	r8, [r2, #16]
		switch (information.register_.type) {
 8010484:	2b08      	cmp	r3, #8
 8010486:	d80d      	bhi.n	80104a4 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x23a>
 8010488:	e8df f003 	tbb	[pc, r3]
 801048c:	0c1d0c05 	.word	0x0c1d0c05
 8010490:	0c0c0c26 	.word	0x0c0c0c26
 8010494:	33          	.byte	0x33
 8010495:	00          	.byte	0x00
			TranferData<uint8_t>((uint8_t*) data, &buffer_uint8[index][0], information.length);
 8010496:	eb06 210b 	add.w	r1, r6, fp, lsl #8
 801049a:	2200      	movs	r2, #0
 801049c:	3138      	adds	r1, #56	@ 0x38
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 801049e:	b290      	uxth	r0, r2
 80104a0:	4580      	cmp	r8, r0
 80104a2:	d80b      	bhi.n	80104bc <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x252>
		services[index].reception_flag = true;
 80104a4:	2218      	movs	r2, #24
		osSemaphoreRelease(ServiceSemaphore);
 80104a6:	6830      	ldr	r0, [r6, #0]
		services[index].reception_flag = true;
 80104a8:	fb02 620b 	mla	r2, r2, fp, r6
 80104ac:	f882 a009 	strb.w	sl, [r2, #9]
		osSemaphoreRelease(ServiceSemaphore);
 80104b0:	f7fb feb8 	bl	800c224 <osSemaphoreRelease>
		start_index = index + 1;
 80104b4:	f10b 0101 	add.w	r1, fp, #1
 80104b8:	b2c9      	uxtb	r1, r1
 80104ba:	e77c      	b.n	80103b6 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x14c>
		to[buffer_index] = from[buffer_index];
 80104bc:	f819 0002 	ldrb.w	r0, [r9, r2]
 80104c0:	5488      	strb	r0, [r1, r2]
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 80104c2:	3201      	adds	r2, #1
 80104c4:	e7eb      	b.n	801049e <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x234>
			TranferData<uint32_t>((uint32_t*) data, &buffer_uint32[index][0], information.length);
 80104c6:	eb06 218b 	add.w	r1, r6, fp, lsl #10
 80104ca:	4642      	mov	r2, r8
 80104cc:	4648      	mov	r0, r9
 80104ce:	f501 710e 	add.w	r1, r1, #568	@ 0x238
 80104d2:	f7fe fa33 	bl	800e93c <_ZN8Services11TranferDataImEEvPT_S2_t.isra.0>
			break;
 80104d6:	e7e5      	b.n	80104a4 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x23a>
			TranferData<int8_t>((int8_t*) data, &buffer_int8[index][0], information.length);
 80104d8:	eb06 210b 	add.w	r1, r6, fp, lsl #8
 80104dc:	2200      	movs	r2, #0
 80104de:	f601 2138 	addw	r1, r1, #2616	@ 0xa38
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 80104e2:	b290      	uxth	r0, r2
 80104e4:	4580      	cmp	r8, r0
 80104e6:	d9dd      	bls.n	80104a4 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x23a>
		to[buffer_index] = from[buffer_index];
 80104e8:	f919 0002 	ldrsb.w	r0, [r9, r2]
 80104ec:	5488      	strb	r0, [r1, r2]
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 80104ee:	3201      	adds	r2, #1
 80104f0:	e7f7      	b.n	80104e2 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x278>
			TranferData<float>((float*) data, &buffer_float[index][0], information.length);
 80104f2:	eb06 218b 	add.w	r1, r6, fp, lsl #10
 80104f6:	4642      	mov	r2, r8
 80104f8:	4648      	mov	r0, r9
 80104fa:	f601 4138 	addw	r1, r1, #3128	@ 0xc38
 80104fe:	f7fe fa13 	bl	800e928 <_ZN8Services11TranferDataIfEEvPT_S2_t.isra.0>
			break;
 8010502:	e7cf      	b.n	80104a4 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x23a>

08010504 <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>:
std::vector<T> Communication::ExtractVector(std::vector<uint8_t> payload, uint16_t start_index, uint16_t length, bool* success) {
 8010504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010508:	2600      	movs	r6, #0
 801050a:	b087      	sub	sp, #28
 801050c:	4605      	mov	r5, r0
 801050e:	4691      	mov	r9, r2
 8010510:	9100      	str	r1, [sp, #0]
 8010512:	9301      	str	r3, [sp, #4]
 8010514:	6086      	str	r6, [r0, #8]
 8010516:	e9c0 6600 	strd	r6, r6, [r0]
 801051a:	b2f4      	uxtb	r4, r6
	for (uint8_t index = 0; index < length; index++) {
 801051c:	9b01      	ldr	r3, [sp, #4]
 801051e:	429c      	cmp	r4, r3
 8010520:	db03      	blt.n	801052a <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x26>
}
 8010522:	4628      	mov	r0, r5
 8010524:	b007      	add	sp, #28
 8010526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 801052a:	9900      	ldr	r1, [sp, #0]
 801052c:	a803      	add	r0, sp, #12
 801052e:	f7f0 fa65 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010532:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8010534:	eb09 0184 	add.w	r1, r9, r4, lsl #2
 8010538:	a803      	add	r0, sp, #12
 801053a:	b289      	uxth	r1, r1
 801053c:	f7fe fa35 	bl	800e9aa <_ZN13Communication13ExtractSingleImEET_St6vectorIhSaIhEEtPb.isra.0>
 8010540:	4607      	mov	r7, r0
      }
 8010542:	a803      	add	r0, sp, #12
 8010544:	f7f0 f9aa 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (not *success)
 8010548:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801054a:	781b      	ldrb	r3, [r3, #0]
 801054c:	2b00      	cmp	r3, #0
 801054e:	d0e8      	beq.n	8010522 <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x1e>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8010550:	e9d5 4301 	ldrd	r4, r3, [r5, #4]
 8010554:	429c      	cmp	r4, r3
 8010556:	d004      	beq.n	8010562 <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x5e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8010558:	f844 7b04 	str.w	r7, [r4], #4
	    ++this->_M_impl._M_finish;
 801055c:	606c      	str	r4, [r5, #4]
	for (uint8_t index = 0; index < length; index++) {
 801055e:	3601      	adds	r6, #1
 8010560:	e7db      	b.n	801051a <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x16>
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8010562:	4a14      	ldr	r2, [pc, #80]	@ (80105b4 <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0xb0>)
 8010564:	2101      	movs	r1, #1
 8010566:	4628      	mov	r0, r5
 8010568:	f7fe ff58 	bl	800f41c <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc>
      pointer __old_start = this->_M_impl._M_start;
 801056c:	f8d5 b000 	ldr.w	fp, [r5]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8010570:	4682      	mov	sl, r0
      pointer __new_start(this->_M_allocate(__len));
 8010572:	f7fe f8a1 	bl	800e6b8 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0>
 8010576:	eba4 080b 	sub.w	r8, r4, fp
 801057a:	4604      	mov	r4, r0
      if (__count > 0)
 801057c:	f1b8 0f00 	cmp.w	r8, #0
 8010580:	f840 7008 	str.w	r7, [r0, r8]
 8010584:	dd03      	ble.n	801058e <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x8a>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8010586:	4642      	mov	r2, r8
 8010588:	4659      	mov	r1, fp
 801058a:	f009 fad3 	bl	8019b34 <memmove>
	      ++__new_finish;
 801058e:	f108 0204 	add.w	r2, r8, #4
 8010592:	18a7      	adds	r7, r4, r2
	if (__p)
 8010594:	f1bb 0f00 	cmp.w	fp, #0
 8010598:	d006      	beq.n	80105a8 <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0xa4>
		    this->_M_impl._M_end_of_storage - __old_start);
 801059a:	68a9      	ldr	r1, [r5, #8]
 801059c:	4658      	mov	r0, fp
 801059e:	eba1 010b 	sub.w	r1, r1, fp
 80105a2:	1089      	asrs	r1, r1, #2
 80105a4:	f7fe f868 	bl	800e678 <_ZNSt12_Vector_baseIP21CommunicationProtocolSaIS1_EE13_M_deallocateEPS1_j.part.0>
      this->_M_impl._M_finish = __new_finish;
 80105a8:	e9c5 4700 	strd	r4, r7, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80105ac:	eb04 048a 	add.w	r4, r4, sl, lsl #2
 80105b0:	60ac      	str	r4, [r5, #8]
 80105b2:	e7d4      	b.n	801055e <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x5a>
 80105b4:	08019e3e 	.word	0x08019e3e

080105b8 <_ZN13Communication12ExtractArrayImEEvPT_St6vectorIhSaIhEEttPb.isra.0>:
void Communication::ExtractArray(T* data, std::vector<uint8_t> payload, uint16_t start_index, uint16_t length, bool* success) {
 80105b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105bc:	b085      	sub	sp, #20
 80105be:	4607      	mov	r7, r0
 80105c0:	4688      	mov	r8, r1
 80105c2:	4691      	mov	r9, r2
 80105c4:	461c      	mov	r4, r3
 80105c6:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 80105ca:	2600      	movs	r6, #0
 80105cc:	b2f5      	uxtb	r5, r6
	for (uint8_t index = 0; index < length; index++) {
 80105ce:	42a5      	cmp	r5, r4
 80105d0:	db02      	blt.n	80105d8 <_ZN13Communication12ExtractArrayImEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x20>
}
 80105d2:	b005      	add	sp, #20
 80105d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 80105d8:	4641      	mov	r1, r8
 80105da:	a801      	add	r0, sp, #4
 80105dc:	f7f0 fa0e 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80105e0:	465a      	mov	r2, fp
 80105e2:	eb09 0185 	add.w	r1, r9, r5, lsl #2
 80105e6:	a801      	add	r0, sp, #4
		if (not *success)
 80105e8:	3601      	adds	r6, #1
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 80105ea:	b289      	uxth	r1, r1
 80105ec:	f7fe f9dd 	bl	800e9aa <_ZN13Communication13ExtractSingleImEET_St6vectorIhSaIhEEtPb.isra.0>
 80105f0:	4682      	mov	sl, r0
      }
 80105f2:	a801      	add	r0, sp, #4
 80105f4:	f7f0 f952 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (not *success)
 80105f8:	f89b 3000 	ldrb.w	r3, [fp]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d0e8      	beq.n	80105d2 <_ZN13Communication12ExtractArrayImEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x1a>
		data[index] = element;
 8010600:	f847 a025 	str.w	sl, [r7, r5, lsl #2]
	for (uint8_t index = 0; index < length; index++) {
 8010604:	e7e2      	b.n	80105cc <_ZN13Communication12ExtractArrayImEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x14>

08010606 <_ZN13Communication17ProcessSubscriberImEEt13MessageHeader14MessageElementt>:
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 8010606:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801060a:	b08f      	sub	sp, #60	@ 0x3c
 801060c:	461c      	mov	r4, r3
 801060e:	4691      	mov	r9, r2
 8010610:	468a      	mov	sl, r1
	T array_values[element.element_register.length];
 8010612:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8010616:	466a      	mov	r2, sp
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 8010618:	af02      	add	r7, sp, #8
	T array_values[element.element_register.length];
 801061a:	ea4f 0388 	mov.w	r3, r8, lsl #2
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 801061e:	3104      	adds	r1, #4
 8010620:	f107 0524 	add.w	r5, r7, #36	@ 0x24
 8010624:	f107 060b 	add.w	r6, r7, #11
	T array_values[element.element_register.length];
 8010628:	3307      	adds	r3, #7
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 801062a:	6078      	str	r0, [r7, #4]
	T array_values[element.element_register.length];
 801062c:	08db      	lsrs	r3, r3, #3
 801062e:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 8010632:	469d      	mov	sp, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010634:	2300      	movs	r3, #0
 8010636:	e9c7 3303 	strd	r3, r3, [r7, #12]
 801063a:	617b      	str	r3, [r7, #20]
 801063c:	f10d 0b08 	add.w	fp, sp, #8
	if (not element.element_register.isArray) {
 8010640:	f899 3003 	ldrb.w	r3, [r9, #3]
 8010644:	bb8b      	cbnz	r3, 80106aa <_ZN13Communication17ProcessSubscriberImEEt13MessageHeader14MessageElementt+0xa4>
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8010646:	4628      	mov	r0, r5
		data = &single_value;
 8010648:	f107 0b18 	add.w	fp, r7, #24
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 801064c:	f7f0 f9d6 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
		length_to_extract = 1;
 8010650:	f04f 0801 	mov.w	r8, #1
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8010654:	4632      	mov	r2, r6
 8010656:	4621      	mov	r1, r4
 8010658:	4628      	mov	r0, r5
 801065a:	f7fe f9a6 	bl	800e9aa <_ZN13Communication13ExtractSingleImEET_St6vectorIhSaIhEEtPb.isra.0>
 801065e:	61b8      	str	r0, [r7, #24]
      }
 8010660:	4628      	mov	r0, r5
 8010662:	f7f0 f91b 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	subscriber_information.interface.interface = message.interface;
 8010666:	f89a 3000 	ldrb.w	r3, [sl]
	return start_index + sizeof(T) * length_to_extract;
 801066a:	eb04 0488 	add.w	r4, r4, r8, lsl #2
	subscriber_information.length = length_to_extract;
 801066e:	f8a7 802c 	strh.w	r8, [r7, #44]	@ 0x2c
	subscriber_information.interface.interface = message.interface;
 8010672:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	return start_index + sizeof(T) * length_to_extract;
 8010676:	b2a4      	uxth	r4, r4
	subscriber_information.interface.address = message.source_address;
 8010678:	f89a 3011 	ldrb.w	r3, [sl, #17]
	subscriber_information.register_ = element.element_register;
 801067c:	e899 0003 	ldmia.w	r9, {r0, r1}
	subscriber_information.interface.address = message.source_address;
 8010680:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	subscriber_information.register_ = element.element_register;
 8010684:	6278      	str	r0, [r7, #36]	@ 0x24
 8010686:	8539      	strh	r1, [r7, #40]	@ 0x28
	subscribers->Receive<T>(subscriber_information, data);
 8010688:	f8cd b000 	str.w	fp, [sp]
 801068c:	6878      	ldr	r0, [r7, #4]
 801068e:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8010692:	68c0      	ldr	r0, [r0, #12]
 8010694:	f7ff f940 	bl	800f918 <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_>
 8010698:	f107 000c 	add.w	r0, r7, #12
 801069c:	f7fe fdaf 	bl	800f1fe <_ZNSt12_Vector_baseImSaImEED1Ev>
}
 80106a0:	4620      	mov	r0, r4
 80106a2:	3734      	adds	r7, #52	@ 0x34
 80106a4:	46bd      	mov	sp, r7
 80106a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (element.element_register.isArray && element.element_register.length > 0) {
 80106aa:	f1b8 0f00 	cmp.w	r8, #0
 80106ae:	d00d      	beq.n	80106cc <_ZN13Communication17ProcessSubscriberImEEt13MessageHeader14MessageElementt+0xc6>
		ExtractArray<T>(array_values, message.payload, start_index, length_to_extract, &success);
 80106b0:	4628      	mov	r0, r5
 80106b2:	f7f0 f9a3 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80106b6:	4658      	mov	r0, fp
 80106b8:	4643      	mov	r3, r8
 80106ba:	4622      	mov	r2, r4
 80106bc:	4629      	mov	r1, r5
 80106be:	9600      	str	r6, [sp, #0]
 80106c0:	f7ff ff7a 	bl	80105b8 <_ZN13Communication12ExtractArrayImEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 80106c4:	4628      	mov	r0, r5
 80106c6:	f7f0 f8e9 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		data = array_values;
 80106ca:	e7cc      	b.n	8010666 <_ZN13Communication17ProcessSubscriberImEEt13MessageHeader14MessageElementt+0x60>
		length_to_extract = message.payload[start_index];
 80106cc:	f8da 3004 	ldr.w	r3, [sl, #4]
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 80106d0:	f107 0018 	add.w	r0, r7, #24
		length_to_extract = message.payload[start_index];
 80106d4:	f813 8004 	ldrb.w	r8, [r3, r4]
		start_index++;
 80106d8:	3401      	adds	r4, #1
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 80106da:	f7f0 f98f 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80106de:	f107 0118 	add.w	r1, r7, #24
		start_index++;
 80106e2:	b2a4      	uxth	r4, r4
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 80106e4:	4643      	mov	r3, r8
 80106e6:	4628      	mov	r0, r5
 80106e8:	9600      	str	r6, [sp, #0]
 80106ea:	4622      	mov	r2, r4
 80106ec:	f7ff ff0a 	bl	8010504 <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 80106f0:	4629      	mov	r1, r5
 80106f2:	f107 000c 	add.w	r0, r7, #12
 80106f6:	f7fe fd8d 	bl	800f214 <_ZNSt6vectorImSaImEEaSEOS1_.isra.0>
 80106fa:	4628      	mov	r0, r5
 80106fc:	f7fe fd7f 	bl	800f1fe <_ZNSt12_Vector_baseImSaImEED1Ev>
 8010700:	f107 0018 	add.w	r0, r7, #24
 8010704:	f7f0 f8ca 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return _M_data_ptr(this->_M_impl._M_start); }
 8010708:	f8d7 b00c 	ldr.w	fp, [r7, #12]
 801070c:	e7ab      	b.n	8010666 <_ZN13Communication17ProcessSubscriberImEEt13MessageHeader14MessageElementt+0x60>

0801070e <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt>:
uint16_t Communication::ProcessService(MessageHeader message, MessageElement element, uint16_t start_index) {
 801070e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010712:	b097      	sub	sp, #92	@ 0x5c
 8010714:	468c      	mov	ip, r1
 8010716:	4682      	mov	sl, r0
 8010718:	461c      	mov	r4, r3
 801071a:	af04      	add	r7, sp, #16
	service_information.interface = ServiceInterface{.interface=message.interface, .address=message.source_address};
 801071c:	f89c 3000 	ldrb.w	r3, [ip]
 8010720:	f89c b011 	ldrb.w	fp, [ip, #17]
 8010724:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
	service_information.access = element.access;
 8010728:	7a16      	ldrb	r6, [r2, #8]
	service_information.interface = ServiceInterface{.interface=message.interface, .address=message.source_address};
 801072a:	60fb      	str	r3, [r7, #12]
	service_information.register_ = element.element_register;
 801072c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010730:	61b8      	str	r0, [r7, #24]
	if (element.command) {
 8010732:	79d0      	ldrb	r0, [r2, #7]
	service_information.register_ = element.element_register;
 8010734:	83b9      	strh	r1, [r7, #28]
		uint8_t error = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 8010736:	f10c 0104 	add.w	r1, ip, #4
	if (element.command) {
 801073a:	b340      	cbz	r0, 801078e <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x80>
		uint8_t error = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 801073c:	4628      	mov	r0, r5
 801073e:	f7f0 f95d 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010742:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010746:	4621      	mov	r1, r4
 8010748:	4628      	mov	r0, r5
 801074a:	f7fe f947 	bl	800e9dc <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 801074e:	4680      	mov	r8, r0
      }
 8010750:	4628      	mov	r0, r5
 8010752:	f7f0 f8a3 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8010756:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 801075a:	b18b      	cbz	r3, 8010780 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x72>
			services->ReceiveError(service_information, error);//services->ReceiveError(element.element_register, message.interface, message.source_address, element.access, error);
 801075c:	2301      	movs	r3, #1
 801075e:	f887 b021 	strb.w	fp, [r7, #33]	@ 0x21
 8010762:	f887 6022 	strb.w	r6, [r7, #34]	@ 0x22
 8010766:	83fb      	strh	r3, [r7, #30]
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	f8da 0008 	ldr.w	r0, [sl, #8]
 801076e:	f887 3020 	strb.w	r3, [r7, #32]
 8010772:	f107 0318 	add.w	r3, r7, #24
 8010776:	f8cd 8000 	str.w	r8, [sp]
 801077a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801077c:	f007 fcf3 	bl	8018166 <_ZN8Services12ReceiveErrorE20ServiceConfigurationh>
		return start_index + 1;
 8010780:	3401      	adds	r4, #1
 8010782:	b2a4      	uxth	r4, r4
}
 8010784:	4620      	mov	r0, r4
 8010786:	374c      	adds	r7, #76	@ 0x4c
 8010788:	46bd      	mov	sp, r7
 801078a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (element.access == WRITE) {
 801078e:	bb1e      	cbnz	r6, 80107d8 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0xca>
		uint8_t value = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 8010790:	4628      	mov	r0, r5
 8010792:	f7f0 f933 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010796:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801079a:	4621      	mov	r1, r4
 801079c:	4628      	mov	r0, r5
 801079e:	f7fe f91d 	bl	800e9dc <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 80107a2:	4680      	mov	r8, r0
 80107a4:	4628      	mov	r0, r5
 80107a6:	f7f0 f879 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 80107aa:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d0e6      	beq.n	8010780 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x72>
			services->ReceiveWrite(service_information, value);//services->ReceiveWrite(element.element_register, message.interface, message.source_address, value);
 80107b2:	2301      	movs	r3, #1
 80107b4:	f887 b021 	strb.w	fp, [r7, #33]	@ 0x21
 80107b8:	f887 6022 	strb.w	r6, [r7, #34]	@ 0x22
 80107bc:	83fb      	strh	r3, [r7, #30]
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	f8da 0008 	ldr.w	r0, [sl, #8]
 80107c4:	f887 3020 	strb.w	r3, [r7, #32]
 80107c8:	f107 0318 	add.w	r3, r7, #24
 80107cc:	f8cd 8000 	str.w	r8, [sp]
 80107d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80107d2:	f007 fc8b 	bl	80180ec <_ZN8Services12ReceiveWriteE20ServiceConfigurationh>
 80107d6:	e7d3      	b.n	8010780 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x72>
		T array_values[element.element_register.length];
 80107d8:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 80107dc:	466e      	mov	r6, sp
	}
 80107de:	f8c7 d004 	str.w	sp, [r7, #4]
		T array_values[element.element_register.length];
 80107e2:	ea4f 0388 	mov.w	r3, r8, lsl #2
	: _M_start(), _M_finish(), _M_end_of_storage()
 80107e6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80107e8:	3307      	adds	r3, #7
 80107ea:	08db      	lsrs	r3, r3, #3
 80107ec:	eba6 03c3 	sub.w	r3, r6, r3, lsl #3
 80107f0:	f107 0616 	add.w	r6, r7, #22
 80107f4:	469d      	mov	sp, r3
		if (not element.element_register.isArray) {
 80107f6:	78d3      	ldrb	r3, [r2, #3]
		T array_values[element.element_register.length];
 80107f8:	f10d 0910 	add.w	r9, sp, #16
 80107fc:	e9c7 0009 	strd	r0, r0, [r7, #36]	@ 0x24
		if (not element.element_register.isArray) {
 8010800:	2b00      	cmp	r3, #0
 8010802:	d139      	bne.n	8010878 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x16a>
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8010804:	4628      	mov	r0, r5
			data = &single_value;
 8010806:	f107 0930 	add.w	r9, r7, #48	@ 0x30
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 801080a:	f7f0 f8f7 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
			length_to_extract = 1;
 801080e:	f04f 0801 	mov.w	r8, #1
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8010812:	4632      	mov	r2, r6
 8010814:	4621      	mov	r1, r4
 8010816:	4628      	mov	r0, r5
 8010818:	f7fe f8c7 	bl	800e9aa <_ZN13Communication13ExtractSingleImEET_St6vectorIhSaIhEEtPb.isra.0>
 801081c:	6338      	str	r0, [r7, #48]	@ 0x30
      }
 801081e:	4628      	mov	r0, r5
 8010820:	f7f0 f83c 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8010824:	7dbb      	ldrb	r3, [r7, #22]
 8010826:	b1eb      	cbz	r3, 8010864 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x156>
 8010828:	68fb      	ldr	r3, [r7, #12]
			services->ReceiveRead<T>(service_information, data);
 801082a:	f8da 6008 	ldr.w	r6, [sl, #8]
 801082e:	f04f 0a01 	mov.w	sl, #1
 8010832:	f887 3020 	strb.w	r3, [r7, #32]
 8010836:	f107 0318 	add.w	r3, r7, #24
 801083a:	f8a7 801e 	strh.w	r8, [r7, #30]
 801083e:	f887 b021 	strb.w	fp, [r7, #33]	@ 0x21
 8010842:	f887 a022 	strb.w	sl, [r7, #34]	@ 0x22
	bool success = true;
 8010846:	f887 a017 	strb.w	sl, [r7, #23]
 801084a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801084e:	7ebb      	ldrb	r3, [r7, #26]
 8010850:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8010854:	60bb      	str	r3, [r7, #8]
	uint8_t start_index = 0;
 8010856:	2100      	movs	r1, #0
		CommunicationLED(leds, information.interface.interface);
 8010858:	f506 5380 	add.w	r3, r6, #4096	@ 0x1000
 801085c:	603b      	str	r3, [r7, #0]
	while (success) {
 801085e:	7dfb      	ldrb	r3, [r7, #23]
 8010860:	2b00      	cmp	r3, #0
 8010862:	d13b      	bne.n	80108dc <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x1ce>
		return start_index + sizeof(T) * length_to_extract;
 8010864:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 8010868:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 801086c:	f7fe fcc7 	bl	800f1fe <_ZNSt12_Vector_baseImSaImEED1Ev>
 8010870:	f8d7 d004 	ldr.w	sp, [r7, #4]
 8010874:	b2a4      	uxth	r4, r4
 8010876:	e785      	b.n	8010784 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x76>
		} else if (element.element_register.isArray && element.element_register.length > 0) {
 8010878:	f1b8 0f00 	cmp.w	r8, #0
 801087c:	d00d      	beq.n	801089a <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x18c>
			ExtractArray<T>(array_values, message.payload, start_index, length_to_extract, &success);
 801087e:	4628      	mov	r0, r5
 8010880:	f7f0 f8bc 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010884:	4648      	mov	r0, r9
 8010886:	4643      	mov	r3, r8
 8010888:	4622      	mov	r2, r4
 801088a:	4629      	mov	r1, r5
 801088c:	9600      	str	r6, [sp, #0]
 801088e:	f7ff fe93 	bl	80105b8 <_ZN13Communication12ExtractArrayImEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 8010892:	4628      	mov	r0, r5
 8010894:	f7f0 f802 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
			data = array_values;
 8010898:	e7c4      	b.n	8010824 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x116>
			length_to_extract = message.payload[start_index];
 801089a:	f8dc 3004 	ldr.w	r3, [ip, #4]
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 801089e:	f107 0030 	add.w	r0, r7, #48	@ 0x30
			length_to_extract = message.payload[start_index];
 80108a2:	f813 8004 	ldrb.w	r8, [r3, r4]
			start_index++;
 80108a6:	3401      	adds	r4, #1
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 80108a8:	f7f0 f8a8 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80108ac:	f107 0130 	add.w	r1, r7, #48	@ 0x30
			start_index++;
 80108b0:	b2a4      	uxth	r4, r4
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 80108b2:	4643      	mov	r3, r8
 80108b4:	4628      	mov	r0, r5
 80108b6:	9600      	str	r6, [sp, #0]
 80108b8:	4622      	mov	r2, r4
 80108ba:	f7ff fe23 	bl	8010504 <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 80108be:	4629      	mov	r1, r5
 80108c0:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80108c4:	f7fe fca6 	bl	800f214 <_ZNSt6vectorImSaImEEaSEOS1_.isra.0>
 80108c8:	4628      	mov	r0, r5
 80108ca:	f7fe fc98 	bl	800f1fe <_ZNSt12_Vector_baseImSaImEED1Ev>
 80108ce:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80108d2:	f7ef ffe3 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return _M_data_ptr(this->_M_impl._M_start); }
 80108d6:	f8d7 9024 	ldr.w	r9, [r7, #36]	@ 0x24
 80108da:	e7a3      	b.n	8010824 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x116>
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 80108dc:	68bb      	ldr	r3, [r7, #8]
 80108de:	4630      	mov	r0, r6
 80108e0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 80108e4:	f107 0317 	add.w	r3, r7, #23
 80108e8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80108ec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80108f0:	f8ad 3000 	strh.w	r3, [sp]
 80108f4:	e895 000c 	ldmia.w	r5, {r2, r3}
 80108f8:	f007 faef 	bl	8017eda <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb>
		if (not success) return;
 80108fc:	7dfa      	ldrb	r2, [r7, #23]
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 80108fe:	4683      	mov	fp, r0
		if (not success) return;
 8010900:	2a00      	cmp	r2, #0
 8010902:	d0af      	beq.n	8010864 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x156>
		if (information.length > SERVICES_BUFFER_SIZE) return;
 8010904:	f5b8 7f80 	cmp.w	r8, #256	@ 0x100
 8010908:	d8ac      	bhi.n	8010864 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x156>
		CommunicationLED(leds, information.interface.interface);
 801090a:	683b      	ldr	r3, [r7, #0]
 801090c:	68f9      	ldr	r1, [r7, #12]
 801090e:	f8d3 0440 	ldr.w	r0, [r3, #1088]	@ 0x440
 8010912:	f7fd fd8c 	bl	800e42e <_Z16CommunicationLEDP4LEDSh>
		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 8010916:	f04f 31ff 	mov.w	r1, #4294967295
 801091a:	6830      	ldr	r0, [r6, #0]
 801091c:	f7fb fc4e 	bl	800c1bc <osSemaphoreAcquire>
		services[index].configuration.length = information.length;
 8010920:	2218      	movs	r2, #24
		switch (information.register_.type) {
 8010922:	68bb      	ldr	r3, [r7, #8]
		services[index].configuration.length = information.length;
 8010924:	fb02 620b 	mla	r2, r2, fp, r6
 8010928:	f8a2 8010 	strh.w	r8, [r2, #16]
		switch (information.register_.type) {
 801092c:	2b08      	cmp	r3, #8
 801092e:	d80d      	bhi.n	801094c <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x23e>
 8010930:	e8df f003 	tbb	[pc, r3]
 8010934:	0c1d0c05 	.word	0x0c1d0c05
 8010938:	0c0c0c26 	.word	0x0c0c0c26
 801093c:	33          	.byte	0x33
 801093d:	00          	.byte	0x00
			TranferData<uint8_t>((uint8_t*) data, &buffer_uint8[index][0], information.length);
 801093e:	eb06 210b 	add.w	r1, r6, fp, lsl #8
 8010942:	2200      	movs	r2, #0
 8010944:	3138      	adds	r1, #56	@ 0x38
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 8010946:	b290      	uxth	r0, r2
 8010948:	4580      	cmp	r8, r0
 801094a:	d80b      	bhi.n	8010964 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x256>
		services[index].reception_flag = true;
 801094c:	2218      	movs	r2, #24
		osSemaphoreRelease(ServiceSemaphore);
 801094e:	6830      	ldr	r0, [r6, #0]
		services[index].reception_flag = true;
 8010950:	fb02 620b 	mla	r2, r2, fp, r6
 8010954:	f882 a009 	strb.w	sl, [r2, #9]
		osSemaphoreRelease(ServiceSemaphore);
 8010958:	f7fb fc64 	bl	800c224 <osSemaphoreRelease>
		start_index = index + 1;
 801095c:	f10b 0101 	add.w	r1, fp, #1
 8010960:	b2c9      	uxtb	r1, r1
 8010962:	e77c      	b.n	801085e <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x150>
		to[buffer_index] = from[buffer_index];
 8010964:	f819 0002 	ldrb.w	r0, [r9, r2]
 8010968:	5488      	strb	r0, [r1, r2]
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 801096a:	3201      	adds	r2, #1
 801096c:	e7eb      	b.n	8010946 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x238>
			TranferData<uint32_t>((uint32_t*) data, &buffer_uint32[index][0], information.length);
 801096e:	eb06 218b 	add.w	r1, r6, fp, lsl #10
 8010972:	4642      	mov	r2, r8
 8010974:	4648      	mov	r0, r9
 8010976:	f501 710e 	add.w	r1, r1, #568	@ 0x238
 801097a:	f7fd ffdf 	bl	800e93c <_ZN8Services11TranferDataImEEvPT_S2_t.isra.0>
			break;
 801097e:	e7e5      	b.n	801094c <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x23e>
			TranferData<int8_t>((int8_t*) data, &buffer_int8[index][0], information.length);
 8010980:	eb06 210b 	add.w	r1, r6, fp, lsl #8
 8010984:	2200      	movs	r2, #0
 8010986:	f601 2138 	addw	r1, r1, #2616	@ 0xa38
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 801098a:	b290      	uxth	r0, r2
 801098c:	4580      	cmp	r8, r0
 801098e:	d9dd      	bls.n	801094c <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x23e>
		to[buffer_index] = from[buffer_index];
 8010990:	f919 0002 	ldrsb.w	r0, [r9, r2]
 8010994:	5488      	strb	r0, [r1, r2]
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 8010996:	3201      	adds	r2, #1
 8010998:	e7f7      	b.n	801098a <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x27c>
			TranferData<float>((float*) data, &buffer_float[index][0], information.length);
 801099a:	eb06 218b 	add.w	r1, r6, fp, lsl #10
 801099e:	4642      	mov	r2, r8
 80109a0:	4648      	mov	r0, r9
 80109a2:	f601 4138 	addw	r1, r1, #3128	@ 0xc38
 80109a6:	f7fd ffbf 	bl	800e928 <_ZN8Services11TranferDataIfEEvPT_S2_t.isra.0>
			break;
 80109aa:	e7cf      	b.n	801094c <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x23e>

080109ac <_ZN13Communication13ExtractVectorIhEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>:
std::vector<T> Communication::ExtractVector(std::vector<uint8_t> payload, uint16_t start_index, uint16_t length, bool* success) {
 80109ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
 80109b0:	2400      	movs	r4, #0
 80109b2:	4605      	mov	r5, r0
 80109b4:	460f      	mov	r7, r1
 80109b6:	4690      	mov	r8, r2
 80109b8:	461e      	mov	r6, r3
 80109ba:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
	for (uint8_t index = 0; index < length; index++) {
 80109be:	46a2      	mov	sl, r4
 80109c0:	6084      	str	r4, [r0, #8]
 80109c2:	e9c0 4400 	strd	r4, r4, [r0]
 80109c6:	fa5f f48a 	uxtb.w	r4, sl
 80109ca:	42b4      	cmp	r4, r6
 80109cc:	db03      	blt.n	80109d6 <_ZN13Communication13ExtractVectorIhEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x2a>
}
 80109ce:	4628      	mov	r0, r5
 80109d0:	b004      	add	sp, #16
 80109d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 80109d6:	4444      	add	r4, r8
 80109d8:	4639      	mov	r1, r7
 80109da:	a801      	add	r0, sp, #4
		if (not *success)
 80109dc:	f10a 0a01 	add.w	sl, sl, #1
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 80109e0:	f7f0 f80c 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80109e4:	464a      	mov	r2, r9
 80109e6:	b2a1      	uxth	r1, r4
 80109e8:	a801      	add	r0, sp, #4
 80109ea:	f7fd fff7 	bl	800e9dc <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 80109ee:	f88d 0003 	strb.w	r0, [sp, #3]
      }
 80109f2:	a801      	add	r0, sp, #4
 80109f4:	f7ef ff52 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (not *success)
 80109f8:	f899 3000 	ldrb.w	r3, [r9]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d0e6      	beq.n	80109ce <_ZN13Communication13ExtractVectorIhEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x22>
		data.push_back(element);
 8010a00:	f10d 0103 	add.w	r1, sp, #3
 8010a04:	4628      	mov	r0, r5
 8010a06:	f7fe fc87 	bl	800f318 <_ZNSt6vectorIhSaIhEE9push_backERKh>
	for (uint8_t index = 0; index < length; index++) {
 8010a0a:	e7dc      	b.n	80109c6 <_ZN13Communication13ExtractVectorIhEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x1a>

08010a0c <_ZN13Communication12ExtractArrayIhEEvPT_St6vectorIhSaIhEEttPb.isra.0>:
void Communication::ExtractArray(T* data, std::vector<uint8_t> payload, uint16_t start_index, uint16_t length, bool* success) {
 8010a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a10:	b085      	sub	sp, #20
 8010a12:	4607      	mov	r7, r0
 8010a14:	4688      	mov	r8, r1
 8010a16:	4691      	mov	r9, r2
 8010a18:	461c      	mov	r4, r3
 8010a1a:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8010a1e:	2600      	movs	r6, #0
 8010a20:	b2f5      	uxtb	r5, r6
	for (uint8_t index = 0; index < length; index++) {
 8010a22:	42a5      	cmp	r5, r4
 8010a24:	db02      	blt.n	8010a2c <_ZN13Communication12ExtractArrayIhEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x20>
}
 8010a26:	b005      	add	sp, #20
 8010a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 8010a2c:	4641      	mov	r1, r8
 8010a2e:	a801      	add	r0, sp, #4
 8010a30:	f7ef ffe4 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010a34:	eb05 0109 	add.w	r1, r5, r9
 8010a38:	465a      	mov	r2, fp
 8010a3a:	a801      	add	r0, sp, #4
 8010a3c:	b289      	uxth	r1, r1
		if (not *success)
 8010a3e:	3601      	adds	r6, #1
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 8010a40:	f7fd ffcc 	bl	800e9dc <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 8010a44:	4682      	mov	sl, r0
 8010a46:	a801      	add	r0, sp, #4
 8010a48:	f7ef ff28 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (not *success)
 8010a4c:	f89b 3000 	ldrb.w	r3, [fp]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d0e8      	beq.n	8010a26 <_ZN13Communication12ExtractArrayIhEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x1a>
		data[index] = element;
 8010a54:	f807 a005 	strb.w	sl, [r7, r5]
	for (uint8_t index = 0; index < length; index++) {
 8010a58:	e7e2      	b.n	8010a20 <_ZN13Communication12ExtractArrayIhEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x14>

08010a5a <_ZN13Communication17ProcessSubscriberIhEEt13MessageHeader14MessageElementt>:
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 8010a5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a5e:	b08f      	sub	sp, #60	@ 0x3c
 8010a60:	461c      	mov	r4, r3
 8010a62:	4691      	mov	r9, r2
 8010a64:	468a      	mov	sl, r1
	T array_values[element.element_register.length];
 8010a66:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8010a6a:	466a      	mov	r2, sp
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 8010a6c:	af02      	add	r7, sp, #8
	T array_values[element.element_register.length];
 8010a6e:	f108 0307 	add.w	r3, r8, #7
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8010a72:	3104      	adds	r1, #4
 8010a74:	f107 0524 	add.w	r5, r7, #36	@ 0x24
 8010a78:	f107 060b 	add.w	r6, r7, #11
	T array_values[element.element_register.length];
 8010a7c:	08db      	lsrs	r3, r3, #3
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 8010a7e:	6078      	str	r0, [r7, #4]
	T array_values[element.element_register.length];
 8010a80:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 8010a84:	469d      	mov	sp, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010a86:	2300      	movs	r3, #0
 8010a88:	e9c7 3303 	strd	r3, r3, [r7, #12]
 8010a8c:	617b      	str	r3, [r7, #20]
 8010a8e:	f10d 0b08 	add.w	fp, sp, #8
	if (not element.element_register.isArray) {
 8010a92:	f899 3003 	ldrb.w	r3, [r9, #3]
 8010a96:	bb83      	cbnz	r3, 8010afa <_ZN13Communication17ProcessSubscriberIhEEt13MessageHeader14MessageElementt+0xa0>
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8010a98:	4628      	mov	r0, r5
		data = &single_value;
 8010a9a:	f107 0b18 	add.w	fp, r7, #24
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8010a9e:	f7ef ffad 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
		length_to_extract = 1;
 8010aa2:	f04f 0801 	mov.w	r8, #1
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8010aa6:	4632      	mov	r2, r6
 8010aa8:	4621      	mov	r1, r4
 8010aaa:	4628      	mov	r0, r5
 8010aac:	f7fd ff96 	bl	800e9dc <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 8010ab0:	7638      	strb	r0, [r7, #24]
      }
 8010ab2:	4628      	mov	r0, r5
 8010ab4:	f7ef fef2 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	subscriber_information.interface.interface = message.interface;
 8010ab8:	f89a 3000 	ldrb.w	r3, [sl]
	return start_index + sizeof(T) * length_to_extract;
 8010abc:	4444      	add	r4, r8
	subscriber_information.length = length_to_extract;
 8010abe:	f8a7 802c 	strh.w	r8, [r7, #44]	@ 0x2c
	subscriber_information.interface.interface = message.interface;
 8010ac2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	return start_index + sizeof(T) * length_to_extract;
 8010ac6:	b2a4      	uxth	r4, r4
	subscriber_information.interface.address = message.source_address;
 8010ac8:	f89a 3011 	ldrb.w	r3, [sl, #17]
	subscriber_information.register_ = element.element_register;
 8010acc:	e899 0003 	ldmia.w	r9, {r0, r1}
	subscriber_information.interface.address = message.source_address;
 8010ad0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	subscriber_information.register_ = element.element_register;
 8010ad4:	6278      	str	r0, [r7, #36]	@ 0x24
 8010ad6:	8539      	strh	r1, [r7, #40]	@ 0x28
	subscribers->Receive<T>(subscriber_information, data);
 8010ad8:	f8cd b000 	str.w	fp, [sp]
 8010adc:	6878      	ldr	r0, [r7, #4]
 8010ade:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8010ae2:	68c0      	ldr	r0, [r0, #12]
 8010ae4:	f7fe feac 	bl	800f840 <_ZN17MasterSubscribers7ReceiveIhEEv15SubscriberInputPT_>
 8010ae8:	f107 000c 	add.w	r0, r7, #12
 8010aec:	f7ef fed6 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 8010af0:	4620      	mov	r0, r4
 8010af2:	3734      	adds	r7, #52	@ 0x34
 8010af4:	46bd      	mov	sp, r7
 8010af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (element.element_register.isArray && element.element_register.length > 0) {
 8010afa:	f1b8 0f00 	cmp.w	r8, #0
 8010afe:	d00d      	beq.n	8010b1c <_ZN13Communication17ProcessSubscriberIhEEt13MessageHeader14MessageElementt+0xc2>
		ExtractArray<T>(array_values, message.payload, start_index, length_to_extract, &success);
 8010b00:	4628      	mov	r0, r5
 8010b02:	f7ef ff7b 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010b06:	4658      	mov	r0, fp
 8010b08:	4643      	mov	r3, r8
 8010b0a:	4622      	mov	r2, r4
 8010b0c:	4629      	mov	r1, r5
 8010b0e:	9600      	str	r6, [sp, #0]
 8010b10:	f7ff ff7c 	bl	8010a0c <_ZN13Communication12ExtractArrayIhEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 8010b14:	4628      	mov	r0, r5
 8010b16:	f7ef fec1 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		data = array_values;
 8010b1a:	e7cd      	b.n	8010ab8 <_ZN13Communication17ProcessSubscriberIhEEt13MessageHeader14MessageElementt+0x5e>
		length_to_extract = message.payload[start_index];
 8010b1c:	f8da 3004 	ldr.w	r3, [sl, #4]
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8010b20:	f107 0018 	add.w	r0, r7, #24
		length_to_extract = message.payload[start_index];
 8010b24:	f813 8004 	ldrb.w	r8, [r3, r4]
		start_index++;
 8010b28:	3401      	adds	r4, #1
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8010b2a:	f7ef ff67 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010b2e:	f107 0118 	add.w	r1, r7, #24
		start_index++;
 8010b32:	b2a4      	uxth	r4, r4
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8010b34:	4643      	mov	r3, r8
 8010b36:	4628      	mov	r0, r5
 8010b38:	9600      	str	r6, [sp, #0]
 8010b3a:	4622      	mov	r2, r4
 8010b3c:	f7ff ff36 	bl	80109ac <_ZN13Communication13ExtractVectorIhEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 8010b40:	4629      	mov	r1, r5
 8010b42:	f107 000c 	add.w	r0, r7, #12
 8010b46:	f7fe f86a 	bl	800ec1e <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 8010b4a:	4628      	mov	r0, r5
 8010b4c:	f7ef fea6 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8010b50:	f107 0018 	add.w	r0, r7, #24
 8010b54:	f7ef fea2 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return _M_data_ptr(this->_M_impl._M_start); }
 8010b58:	f8d7 b00c 	ldr.w	fp, [r7, #12]
 8010b5c:	e7ac      	b.n	8010ab8 <_ZN13Communication17ProcessSubscriberIhEEt13MessageHeader14MessageElementt+0x5e>

08010b5e <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt>:
uint16_t Communication::ProcessService(MessageHeader message, MessageElement element, uint16_t start_index) {
 8010b5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b62:	468c      	mov	ip, r1
 8010b64:	b097      	sub	sp, #92	@ 0x5c
 8010b66:	461c      	mov	r4, r3
 8010b68:	4682      	mov	sl, r0
 8010b6a:	af04      	add	r7, sp, #16
	service_information.interface = ServiceInterface{.interface=message.interface, .address=message.source_address};
 8010b6c:	f89c 3000 	ldrb.w	r3, [ip]
 8010b70:	f89c b011 	ldrb.w	fp, [ip, #17]
 8010b74:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 8010b78:	60fb      	str	r3, [r7, #12]
	if (element.command) {
 8010b7a:	79d3      	ldrb	r3, [r2, #7]
	service_information.access = element.access;
 8010b7c:	7a16      	ldrb	r6, [r2, #8]
	service_information.register_ = element.element_register;
 8010b7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010b82:	83b9      	strh	r1, [r7, #28]
		uint8_t error = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 8010b84:	f10c 0104 	add.w	r1, ip, #4
	service_information.register_ = element.element_register;
 8010b88:	61b8      	str	r0, [r7, #24]
	if (element.command) {
 8010b8a:	b343      	cbz	r3, 8010bde <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x80>
		uint8_t error = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 8010b8c:	4628      	mov	r0, r5
 8010b8e:	f7ef ff35 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010b92:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010b96:	4621      	mov	r1, r4
 8010b98:	4628      	mov	r0, r5
 8010b9a:	f7fd ff1f 	bl	800e9dc <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 8010b9e:	4680      	mov	r8, r0
      }
 8010ba0:	4628      	mov	r0, r5
 8010ba2:	f7ef fe7b 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8010ba6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8010baa:	b18b      	cbz	r3, 8010bd0 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x72>
			services->ReceiveError(service_information, error);//services->ReceiveError(element.element_register, message.interface, message.source_address, element.access, error);
 8010bac:	2301      	movs	r3, #1
 8010bae:	f887 b021 	strb.w	fp, [r7, #33]	@ 0x21
 8010bb2:	f887 6022 	strb.w	r6, [r7, #34]	@ 0x22
 8010bb6:	83fb      	strh	r3, [r7, #30]
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	f8da 0008 	ldr.w	r0, [sl, #8]
 8010bbe:	f887 3020 	strb.w	r3, [r7, #32]
 8010bc2:	f107 0318 	add.w	r3, r7, #24
 8010bc6:	f8cd 8000 	str.w	r8, [sp]
 8010bca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010bcc:	f007 facb 	bl	8018166 <_ZN8Services12ReceiveErrorE20ServiceConfigurationh>
		return start_index + 1;
 8010bd0:	3401      	adds	r4, #1
 8010bd2:	b2a4      	uxth	r4, r4
}
 8010bd4:	4620      	mov	r0, r4
 8010bd6:	374c      	adds	r7, #76	@ 0x4c
 8010bd8:	46bd      	mov	sp, r7
 8010bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (element.access == WRITE) {
 8010bde:	bb1e      	cbnz	r6, 8010c28 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0xca>
		uint8_t value = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 8010be0:	4628      	mov	r0, r5
 8010be2:	f7ef ff0b 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010be6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010bea:	4621      	mov	r1, r4
 8010bec:	4628      	mov	r0, r5
 8010bee:	f7fd fef5 	bl	800e9dc <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 8010bf2:	4680      	mov	r8, r0
 8010bf4:	4628      	mov	r0, r5
 8010bf6:	f7ef fe51 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8010bfa:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d0e6      	beq.n	8010bd0 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x72>
			services->ReceiveWrite(service_information, value);//services->ReceiveWrite(element.element_register, message.interface, message.source_address, value);
 8010c02:	2301      	movs	r3, #1
 8010c04:	f887 b021 	strb.w	fp, [r7, #33]	@ 0x21
 8010c08:	f887 6022 	strb.w	r6, [r7, #34]	@ 0x22
 8010c0c:	83fb      	strh	r3, [r7, #30]
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	f8da 0008 	ldr.w	r0, [sl, #8]
 8010c14:	f887 3020 	strb.w	r3, [r7, #32]
 8010c18:	f107 0318 	add.w	r3, r7, #24
 8010c1c:	f8cd 8000 	str.w	r8, [sp]
 8010c20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010c22:	f007 fa63 	bl	80180ec <_ZN8Services12ReceiveWriteE20ServiceConfigurationh>
 8010c26:	e7d3      	b.n	8010bd0 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x72>
		T array_values[element.element_register.length];
 8010c28:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8010c2c:	466e      	mov	r6, sp
	}
 8010c2e:	f8c7 d004 	str.w	sp, [r7, #4]
		T array_values[element.element_register.length];
 8010c32:	f108 0007 	add.w	r0, r8, #7
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010c38:	08c0      	lsrs	r0, r0, #3
 8010c3a:	eba6 00c0 	sub.w	r0, r6, r0, lsl #3
 8010c3e:	f107 0617 	add.w	r6, r7, #23
 8010c42:	4685      	mov	sp, r0
 8010c44:	e9c7 3309 	strd	r3, r3, [r7, #36]	@ 0x24
		if (not element.element_register.isArray) {
 8010c48:	78d3      	ldrb	r3, [r2, #3]
		T array_values[element.element_register.length];
 8010c4a:	f10d 0910 	add.w	r9, sp, #16
		if (not element.element_register.isArray) {
 8010c4e:	bbc3      	cbnz	r3, 8010cc2 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x164>
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8010c50:	4628      	mov	r0, r5
			data = &single_value;
 8010c52:	f107 0916 	add.w	r9, r7, #22
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8010c56:	f7ef fed1 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
			length_to_extract = 1;
 8010c5a:	f04f 0801 	mov.w	r8, #1
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8010c5e:	4632      	mov	r2, r6
 8010c60:	4621      	mov	r1, r4
 8010c62:	4628      	mov	r0, r5
 8010c64:	f7fd feba 	bl	800e9dc <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 8010c68:	75b8      	strb	r0, [r7, #22]
      }
 8010c6a:	4628      	mov	r0, r5
 8010c6c:	f7ef fe16 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8010c70:	7dfb      	ldrb	r3, [r7, #23]
 8010c72:	b1eb      	cbz	r3, 8010cb0 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x152>
 8010c74:	68fb      	ldr	r3, [r7, #12]
			services->ReceiveRead<T>(service_information, data);
 8010c76:	f8da 6008 	ldr.w	r6, [sl, #8]
 8010c7a:	f04f 0a01 	mov.w	sl, #1
 8010c7e:	f887 3020 	strb.w	r3, [r7, #32]
 8010c82:	f107 0318 	add.w	r3, r7, #24
 8010c86:	f8a7 801e 	strh.w	r8, [r7, #30]
 8010c8a:	f887 b021 	strb.w	fp, [r7, #33]	@ 0x21
 8010c8e:	f887 a022 	strb.w	sl, [r7, #34]	@ 0x22
	bool success = true;
 8010c92:	f887 a030 	strb.w	sl, [r7, #48]	@ 0x30
 8010c96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010c9a:	7ebb      	ldrb	r3, [r7, #26]
 8010c9c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8010ca0:	60bb      	str	r3, [r7, #8]
	uint8_t start_index = 0;
 8010ca2:	2100      	movs	r1, #0
		CommunicationLED(leds, information.interface.interface);
 8010ca4:	f506 5380 	add.w	r3, r6, #4096	@ 0x1000
 8010ca8:	603b      	str	r3, [r7, #0]
	while (success) {
 8010caa:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8010cae:	bbd3      	cbnz	r3, 8010d26 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x1c8>
		return start_index + sizeof(T) * length_to_extract;
 8010cb0:	4444      	add	r4, r8
 8010cb2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8010cb6:	f7ef fdf1 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8010cba:	f8d7 d004 	ldr.w	sp, [r7, #4]
 8010cbe:	b2a4      	uxth	r4, r4
 8010cc0:	e788      	b.n	8010bd4 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x76>
		} else if (element.element_register.isArray && element.element_register.length > 0) {
 8010cc2:	f1b8 0f00 	cmp.w	r8, #0
 8010cc6:	d00d      	beq.n	8010ce4 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x186>
			ExtractArray<T>(array_values, message.payload, start_index, length_to_extract, &success);
 8010cc8:	4628      	mov	r0, r5
 8010cca:	f7ef fe97 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010cce:	4648      	mov	r0, r9
 8010cd0:	4643      	mov	r3, r8
 8010cd2:	4622      	mov	r2, r4
 8010cd4:	4629      	mov	r1, r5
 8010cd6:	9600      	str	r6, [sp, #0]
 8010cd8:	f7ff fe98 	bl	8010a0c <_ZN13Communication12ExtractArrayIhEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 8010cdc:	4628      	mov	r0, r5
 8010cde:	f7ef fddd 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
			data = array_values;
 8010ce2:	e7c5      	b.n	8010c70 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x112>
			length_to_extract = message.payload[start_index];
 8010ce4:	f8dc 3004 	ldr.w	r3, [ip, #4]
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8010ce8:	f107 0030 	add.w	r0, r7, #48	@ 0x30
			length_to_extract = message.payload[start_index];
 8010cec:	f813 8004 	ldrb.w	r8, [r3, r4]
			start_index++;
 8010cf0:	3401      	adds	r4, #1
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8010cf2:	f7ef fe83 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010cf6:	f107 0130 	add.w	r1, r7, #48	@ 0x30
			start_index++;
 8010cfa:	b2a4      	uxth	r4, r4
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8010cfc:	4643      	mov	r3, r8
 8010cfe:	4628      	mov	r0, r5
 8010d00:	9600      	str	r6, [sp, #0]
 8010d02:	4622      	mov	r2, r4
 8010d04:	f7ff fe52 	bl	80109ac <_ZN13Communication13ExtractVectorIhEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 8010d08:	4629      	mov	r1, r5
 8010d0a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8010d0e:	f7fd ff86 	bl	800ec1e <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 8010d12:	4628      	mov	r0, r5
 8010d14:	f7ef fdc2 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8010d18:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8010d1c:	f7ef fdbe 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return _M_data_ptr(this->_M_impl._M_start); }
 8010d20:	f8d7 9024 	ldr.w	r9, [r7, #36]	@ 0x24
 8010d24:	e7a4      	b.n	8010c70 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x112>
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 8010d26:	68bb      	ldr	r3, [r7, #8]
 8010d28:	4630      	mov	r0, r6
 8010d2a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8010d2e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8010d32:	e9cd a301 	strd	sl, r3, [sp, #4]
 8010d36:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8010d3a:	f8ad 3000 	strh.w	r3, [sp]
 8010d3e:	e895 000c 	ldmia.w	r5, {r2, r3}
 8010d42:	f007 f8ca 	bl	8017eda <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb>
		if (not success) return;
 8010d46:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 8010d4a:	4683      	mov	fp, r0
		if (not success) return;
 8010d4c:	2a00      	cmp	r2, #0
 8010d4e:	d0af      	beq.n	8010cb0 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x152>
		if (information.length > SERVICES_BUFFER_SIZE) return;
 8010d50:	f5b8 7f80 	cmp.w	r8, #256	@ 0x100
 8010d54:	d8ac      	bhi.n	8010cb0 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x152>
		CommunicationLED(leds, information.interface.interface);
 8010d56:	683b      	ldr	r3, [r7, #0]
 8010d58:	68f9      	ldr	r1, [r7, #12]
 8010d5a:	f8d3 0440 	ldr.w	r0, [r3, #1088]	@ 0x440
 8010d5e:	f7fd fb66 	bl	800e42e <_Z16CommunicationLEDP4LEDSh>
		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 8010d62:	f04f 31ff 	mov.w	r1, #4294967295
 8010d66:	6830      	ldr	r0, [r6, #0]
 8010d68:	f7fb fa28 	bl	800c1bc <osSemaphoreAcquire>
		services[index].configuration.length = information.length;
 8010d6c:	2218      	movs	r2, #24
		switch (information.register_.type) {
 8010d6e:	68bb      	ldr	r3, [r7, #8]
		services[index].configuration.length = information.length;
 8010d70:	fb02 620b 	mla	r2, r2, fp, r6
 8010d74:	f8a2 8010 	strh.w	r8, [r2, #16]
		switch (information.register_.type) {
 8010d78:	2b08      	cmp	r3, #8
 8010d7a:	d80d      	bhi.n	8010d98 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x23a>
 8010d7c:	e8df f003 	tbb	[pc, r3]
 8010d80:	0c1d0c05 	.word	0x0c1d0c05
 8010d84:	0c0c0c26 	.word	0x0c0c0c26
 8010d88:	33          	.byte	0x33
 8010d89:	00          	.byte	0x00
			TranferData<uint8_t>((uint8_t*) data, &buffer_uint8[index][0], information.length);
 8010d8a:	eb06 210b 	add.w	r1, r6, fp, lsl #8
 8010d8e:	2200      	movs	r2, #0
 8010d90:	3138      	adds	r1, #56	@ 0x38
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 8010d92:	b290      	uxth	r0, r2
 8010d94:	4580      	cmp	r8, r0
 8010d96:	d80b      	bhi.n	8010db0 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x252>
		services[index].reception_flag = true;
 8010d98:	2218      	movs	r2, #24
		osSemaphoreRelease(ServiceSemaphore);
 8010d9a:	6830      	ldr	r0, [r6, #0]
		services[index].reception_flag = true;
 8010d9c:	fb02 620b 	mla	r2, r2, fp, r6
 8010da0:	f882 a009 	strb.w	sl, [r2, #9]
		osSemaphoreRelease(ServiceSemaphore);
 8010da4:	f7fb fa3e 	bl	800c224 <osSemaphoreRelease>
		start_index = index + 1;
 8010da8:	f10b 0101 	add.w	r1, fp, #1
 8010dac:	b2c9      	uxtb	r1, r1
 8010dae:	e77c      	b.n	8010caa <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x14c>
		to[buffer_index] = from[buffer_index];
 8010db0:	f819 0002 	ldrb.w	r0, [r9, r2]
 8010db4:	5488      	strb	r0, [r1, r2]
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 8010db6:	3201      	adds	r2, #1
 8010db8:	e7eb      	b.n	8010d92 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x234>
			TranferData<uint32_t>((uint32_t*) data, &buffer_uint32[index][0], information.length);
 8010dba:	eb06 218b 	add.w	r1, r6, fp, lsl #10
 8010dbe:	4642      	mov	r2, r8
 8010dc0:	4648      	mov	r0, r9
 8010dc2:	f501 710e 	add.w	r1, r1, #568	@ 0x238
 8010dc6:	f7fd fdb9 	bl	800e93c <_ZN8Services11TranferDataImEEvPT_S2_t.isra.0>
			break;
 8010dca:	e7e5      	b.n	8010d98 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x23a>
			TranferData<int8_t>((int8_t*) data, &buffer_int8[index][0], information.length);
 8010dcc:	eb06 210b 	add.w	r1, r6, fp, lsl #8
 8010dd0:	2200      	movs	r2, #0
 8010dd2:	f601 2138 	addw	r1, r1, #2616	@ 0xa38
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 8010dd6:	b290      	uxth	r0, r2
 8010dd8:	4580      	cmp	r8, r0
 8010dda:	d9dd      	bls.n	8010d98 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x23a>
		to[buffer_index] = from[buffer_index];
 8010ddc:	f919 0002 	ldrsb.w	r0, [r9, r2]
 8010de0:	5488      	strb	r0, [r1, r2]
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 8010de2:	3201      	adds	r2, #1
 8010de4:	e7f7      	b.n	8010dd6 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x278>
			TranferData<float>((float*) data, &buffer_float[index][0], information.length);
 8010de6:	eb06 218b 	add.w	r1, r6, fp, lsl #10
 8010dea:	4642      	mov	r2, r8
 8010dec:	4648      	mov	r0, r9
 8010dee:	f601 4138 	addw	r1, r1, #3128	@ 0xc38
 8010df2:	f7fd fd99 	bl	800e928 <_ZN8Services11TranferDataIfEEvPT_S2_t.isra.0>
			break;
 8010df6:	e7cf      	b.n	8010d98 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x23a>

08010df8 <_ZNSt6vectorIhSaIhEEC2ESt16initializer_listIhERKS0_.constprop.0.isra.0>:
      vector(initializer_list<value_type> __l,
 8010df8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010dfa:	ab02      	add	r3, sp, #8
 8010dfc:	4604      	mov	r4, r0
 8010dfe:	460e      	mov	r6, r1
      size() const noexcept { return _M_len; }
 8010e00:	4615      	mov	r5, r2
      end() const noexcept { return begin() + size(); }
 8010e02:	188f      	adds	r7, r1, r2
 8010e04:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010e08:	2300      	movs	r3, #0
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8010e0a:	429a      	cmp	r2, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010e0c:	6083      	str	r3, [r0, #8]
 8010e0e:	e9c0 3300 	strd	r3, r3, [r0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8010e12:	da02      	bge.n	8010e1a <_ZNSt6vectorIhSaIhEEC2ESt16initializer_listIhERKS0_.constprop.0.isra.0+0x22>
	  __throw_length_error(
 8010e14:	4808      	ldr	r0, [pc, #32]	@ (8010e38 <_ZNSt6vectorIhSaIhEEC2ESt16initializer_listIhERKS0_.constprop.0.isra.0+0x40>)
 8010e16:	f008 fdb5 	bl	8019984 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8010e1a:	4610      	mov	r0, r2
 8010e1c:	f7fd fdeb 	bl	800e9f6 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8010e20:	4405      	add	r5, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8010e22:	4602      	mov	r2, r0
			      _Category>::__copy_m(__first, __last, __result);
 8010e24:	4639      	mov	r1, r7
 8010e26:	6020      	str	r0, [r4, #0]
 8010e28:	4630      	mov	r0, r6
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8010e2a:	60a5      	str	r5, [r4, #8]
 8010e2c:	f7ef fdda 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	  this->_M_impl._M_finish =
 8010e30:	6060      	str	r0, [r4, #4]
      }
 8010e32:	b003      	add	sp, #12
 8010e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e36:	bf00      	nop
 8010e38:	08019e58 	.word	0x08019e58

08010e3c <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPhEEvT_S4_St20forward_iterator_tag.isra.0>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8010e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8010e3e:	1a57      	subs	r7, r2, r1
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8010e40:	4604      	mov	r4, r0
 8010e42:	460d      	mov	r5, r1
 8010e44:	4616      	mov	r6, r2
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8010e46:	d502      	bpl.n	8010e4e <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPhEEvT_S4_St20forward_iterator_tag.isra.0+0x12>
	  __throw_length_error(
 8010e48:	4807      	ldr	r0, [pc, #28]	@ (8010e68 <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPhEEvT_S4_St20forward_iterator_tag.isra.0+0x2c>)
 8010e4a:	f008 fd9b 	bl	8019984 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8010e4e:	4638      	mov	r0, r7
 8010e50:	f7fd fdd1 	bl	800e9f6 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8010e54:	4407      	add	r7, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8010e56:	4602      	mov	r2, r0
 8010e58:	6020      	str	r0, [r4, #0]
 8010e5a:	4631      	mov	r1, r6
 8010e5c:	4628      	mov	r0, r5
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8010e5e:	60a7      	str	r7, [r4, #8]
 8010e60:	f7ef fdc0 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	  this->_M_impl._M_finish =
 8010e64:	6060      	str	r0, [r4, #4]
	}
 8010e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e68:	08019e58 	.word	0x08019e58

08010e6c <_ZZN13Communication12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t>:
			if (length < 3) return false;
 8010e6c:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8010e6e:	4611      	mov	r1, r2
 8010e70:	b530      	push	{r4, r5, lr}
 8010e72:	4605      	mov	r5, r0
 8010e74:	b08b      	sub	sp, #44	@ 0x2c
 8010e76:	f04f 0400 	mov.w	r4, #0
			if (length < 3) return false;
 8010e7a:	d928      	bls.n	8010ece <_ZZN13Communication12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x62>
			msg.interface = input[0];
 8010e7c:	7812      	ldrb	r2, [r2, #0]
	  _M_range_initialize(__first, __last,
 8010e7e:	a805      	add	r0, sp, #20
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010e80:	9403      	str	r4, [sp, #12]
 8010e82:	f88d 2000 	strb.w	r2, [sp]
			msg.target_address = input[1];
 8010e86:	784a      	ldrb	r2, [r1, #1]
 8010e88:	9407      	str	r4, [sp, #28]
 8010e8a:	f88d 2010 	strb.w	r2, [sp, #16]
	  _M_range_initialize(__first, __last,
 8010e8e:	18ca      	adds	r2, r1, r3
 8010e90:	3102      	adds	r1, #2
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010e92:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8010e96:	e9cd 4405 	strd	r4, r4, [sp, #20]
	  _M_range_initialize(__first, __last,
 8010e9a:	f7ff ffcf 	bl	8010e3c <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPhEEvT_S4_St20forward_iterator_tag.isra.0>
			msg.payload = std::vector<uint8_t> (&input[2], &input[length]);
 8010e9e:	a905      	add	r1, sp, #20
 8010ea0:	a801      	add	r0, sp, #4
 8010ea2:	f7fd febc 	bl	800ec1e <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8010ea6:	a805      	add	r0, sp, #20
 8010ea8:	f7ef fcf8 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
			return self->Send(msg);
 8010eac:	4669      	mov	r1, sp
 8010eae:	a805      	add	r0, sp, #20
 8010eb0:	f7fe fb3f 	bl	800f532 <_ZN13MessageHeaderC1ERKS_>
 8010eb4:	a905      	add	r1, sp, #20
 8010eb6:	4628      	mov	r0, r5
 8010eb8:	f7fe fc2a 	bl	800f710 <_ZN13Communication4SendE13MessageHeader>
 8010ebc:	1b04      	subs	r4, r0, r4
 8010ebe:	a806      	add	r0, sp, #24
 8010ec0:	bf18      	it	ne
 8010ec2:	2401      	movne	r4, #1
 8010ec4:	f7ef fcea 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8010ec8:	a801      	add	r0, sp, #4
 8010eca:	f7ef fce7 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		}
 8010ece:	4620      	mov	r0, r4
 8010ed0:	b00b      	add	sp, #44	@ 0x2c
 8010ed2:	bd30      	pop	{r4, r5, pc}

08010ed4 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_>:
	insert(const_iterator __position, _InputIterator __first,
 8010ed4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (__first != __last)
 8010ed8:	429a      	cmp	r2, r3
      : _M_current(__i) { }
 8010eda:	f8d0 a000 	ldr.w	sl, [r0]
 8010ede:	4604      	mov	r4, r0
 8010ee0:	460d      	mov	r5, r1
 8010ee2:	4617      	mov	r7, r2
 8010ee4:	4699      	mov	r9, r3
    { return __lhs.base() - __rhs.base(); }
 8010ee6:	eba1 0b0a 	sub.w	fp, r1, sl
 8010eea:	d020      	beq.n	8010f2e <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_+0x5a>
 8010eec:	eba3 0802 	sub.w	r8, r3, r2
			  - this->_M_impl._M_finish) >= __n)
 8010ef0:	e9d0 6201 	ldrd	r6, r2, [r0, #4]
 8010ef4:	1b92      	subs	r2, r2, r6
	    if (size_type(this->_M_impl._M_end_of_storage
 8010ef6:	4590      	cmp	r8, r2
 8010ef8:	d836      	bhi.n	8010f68 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_+0x94>
 8010efa:	eba6 0a01 	sub.w	sl, r6, r1
		if (__elems_after > __n)
 8010efe:	45d0      	cmp	r8, sl
 8010f00:	d21a      	bcs.n	8010f38 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_+0x64>
		    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 8010f02:	eba6 0a08 	sub.w	sl, r6, r8
 8010f06:	4632      	mov	r2, r6
 8010f08:	4631      	mov	r1, r6
 8010f0a:	4650      	mov	r0, sl
 8010f0c:	f7f0 fcf6 	bl	80018fc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		    this->_M_impl._M_finish += __n;
 8010f10:	6863      	ldr	r3, [r4, #4]
					       is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::value, "type must be assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
 8010f12:	ebba 0205 	subs.w	r2, sl, r5
 8010f16:	4443      	add	r3, r8
 8010f18:	6063      	str	r3, [r4, #4]
 8010f1a:	d003      	beq.n	8010f24 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_+0x50>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8010f1c:	4629      	mov	r1, r5
 8010f1e:	1ab0      	subs	r0, r6, r2
 8010f20:	f008 fe08 	bl	8019b34 <memmove>
			      _Category>::__copy_m(__first, __last, __result);
 8010f24:	462a      	mov	r2, r5
 8010f26:	4649      	mov	r1, r9
 8010f28:	4638      	mov	r0, r7
 8010f2a:	f7ef fd5b 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
      { return __normal_iterator(_M_current + __n); }
 8010f2e:	6820      	ldr	r0, [r4, #0]
	}
 8010f30:	4458      	add	r0, fp
 8010f32:	b003      	add	sp, #12
 8010f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { _M_current += __n; return *this; }
 8010f38:	eb07 030a 	add.w	r3, r7, sl
 8010f3c:	4632      	mov	r2, r6
 8010f3e:	4649      	mov	r1, r9
		    this->_M_impl._M_finish += __n - __elems_after;
 8010f40:	eba8 080a 	sub.w	r8, r8, sl
 8010f44:	4618      	mov	r0, r3
 8010f46:	9301      	str	r3, [sp, #4]
 8010f48:	f7ef fd4c 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8010f4c:	6862      	ldr	r2, [r4, #4]
 8010f4e:	4631      	mov	r1, r6
 8010f50:	4628      	mov	r0, r5
 8010f52:	4442      	add	r2, r8
 8010f54:	6062      	str	r2, [r4, #4]
 8010f56:	f7f0 fcd1 	bl	80018fc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		    this->_M_impl._M_finish += __elems_after;
 8010f5a:	6862      	ldr	r2, [r4, #4]
 8010f5c:	9b01      	ldr	r3, [sp, #4]
 8010f5e:	4452      	add	r2, sl
 8010f60:	4619      	mov	r1, r3
 8010f62:	6062      	str	r2, [r4, #4]
 8010f64:	462a      	mov	r2, r5
 8010f66:	e7df      	b.n	8010f28 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_+0x54>
		  _M_check_len(__n, "vector::_M_range_insert");
 8010f68:	4641      	mov	r1, r8
 8010f6a:	4a13      	ldr	r2, [pc, #76]	@ (8010fb8 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_+0xe4>)
 8010f6c:	f7ef fcb7 	bl	80008de <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8010f70:	9001      	str	r0, [sp, #4]
		pointer __new_start(this->_M_allocate(__len));
 8010f72:	f7fd fd40 	bl	800e9f6 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
 8010f76:	4629      	mov	r1, r5
 8010f78:	4602      	mov	r2, r0
 8010f7a:	4680      	mov	r8, r0
 8010f7c:	4650      	mov	r0, sl
 8010f7e:	f7f0 fcbd 	bl	80018fc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8010f82:	4649      	mov	r1, r9
 8010f84:	4602      	mov	r2, r0
 8010f86:	4638      	mov	r0, r7
 8010f88:	f7ef fd2c 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8010f8c:	4631      	mov	r1, r6
 8010f8e:	4602      	mov	r2, r0
 8010f90:	4628      	mov	r0, r5
 8010f92:	f7f0 fcb3 	bl	80018fc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8010f96:	4605      	mov	r5, r0
	if (__p)
 8010f98:	f1ba 0f00 	cmp.w	sl, #0
 8010f9c:	d005      	beq.n	8010faa <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_+0xd6>
			      this->_M_impl._M_end_of_storage - __old_start);
 8010f9e:	68a1      	ldr	r1, [r4, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8010fa0:	4650      	mov	r0, sl
 8010fa2:	eba1 010a 	sub.w	r1, r1, sl
 8010fa6:	f008 fc13 	bl	80197d0 <_ZdlPvj>
		this->_M_impl._M_end_of_storage = __new_start + __len;
 8010faa:	9b01      	ldr	r3, [sp, #4]
 8010fac:	4443      	add	r3, r8
		this->_M_impl._M_finish = __new_finish;
 8010fae:	e9c4 8500 	strd	r8, r5, [r4]
		this->_M_impl._M_end_of_storage = __new_start + __len;
 8010fb2:	60a3      	str	r3, [r4, #8]
 8010fb4:	e7bb      	b.n	8010f2e <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_+0x5a>
 8010fb6:	bf00      	nop
 8010fb8:	08019e89 	.word	0x08019e89

08010fbc <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>:
bool Communication::BuildPayload(MessageHeader* message, MessageElement element) {
 8010fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	b085      	sub	sp, #20
 8010fc2:	4614      	mov	r4, r2
 8010fc4:	4606      	mov	r6, r0
 8010fc6:	9303      	str	r3, [sp, #12]
 8010fc8:	460d      	mov	r5, r1
 8010fca:	e9cd 3301 	strd	r3, r3, [sp, #4]
	if (element.ack) header|= ACK_MASK;
 8010fce:	7993      	ldrb	r3, [r2, #6]
	if (element.command) header|= COMMAND_MASK;
 8010fd0:	79d2      	ldrb	r2, [r2, #7]
	if (element.ack) header|= ACK_MASK;
 8010fd2:	01db      	lsls	r3, r3, #7
 8010fd4:	b2db      	uxtb	r3, r3
	if (element.command) header|= COMMAND_MASK;
 8010fd6:	b10a      	cbz	r2, 8010fdc <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0x20>
 8010fd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
	if (element.access) header|= ACCESS_MASK;
 8010fdc:	7a22      	ldrb	r2, [r4, #8]
 8010fde:	b10a      	cbz	r2, 8010fe4 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0x28>
 8010fe0:	f043 0320 	orr.w	r3, r3, #32
	coded_element.push_back(header | ((element.element_register.address >> 8) & ~(ACK_MASK | COMMAND_MASK | ACCESS_MASK)));
 8010fe4:	8822      	ldrh	r2, [r4, #0]
      { emplace_back(std::move(__x)); }
 8010fe6:	f10d 0103 	add.w	r1, sp, #3
 8010fea:	a801      	add	r0, sp, #4
 8010fec:	f3c2 2204 	ubfx	r2, r2, #8, #5
 8010ff0:	4313      	orrs	r3, r2
 8010ff2:	f88d 3003 	strb.w	r3, [sp, #3]
 8010ff6:	f7fe f95d 	bl	800f2b4 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
	coded_element.push_back(element.element_register.address & 0xFF);
 8010ffa:	8823      	ldrh	r3, [r4, #0]
 8010ffc:	f10d 0103 	add.w	r1, sp, #3
 8011000:	a801      	add	r0, sp, #4
 8011002:	f88d 3003 	strb.w	r3, [sp, #3]
 8011006:	f7fe f955 	bl	800f2b4 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
	if (element.element_register.isArray && element.element_register.length == 0)
 801100a:	78e3      	ldrb	r3, [r4, #3]
 801100c:	b15b      	cbz	r3, 8011026 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0x6a>
 801100e:	88a3      	ldrh	r3, [r4, #4]
 8011010:	b94b      	cbnz	r3, 8011026 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0x6a>
 8011012:	f10d 0103 	add.w	r1, sp, #3
 8011016:	a801      	add	r0, sp, #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011018:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 801101c:	1a9b      	subs	r3, r3, r2
		coded_element.push_back(element.data.size());
 801101e:	f88d 3003 	strb.w	r3, [sp, #3]
      { emplace_back(std::move(__x)); }
 8011022:	f7fe f947 	bl	800f2b4 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
	coded_element.insert(coded_element.end(), element.data.begin(), element.data.end()); // Big-Endian representation, MSB first
 8011026:	9902      	ldr	r1, [sp, #8]
 8011028:	a801      	add	r0, sp, #4
 801102a:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 801102e:	f7ff ff51 	bl	8010ed4 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_>
	uint16_t max_length = GetProtocolPayloadMaxLength(message->interface, &success);
 8011032:	4630      	mov	r0, r6
 8011034:	f10d 0203 	add.w	r2, sp, #3
 8011038:	7829      	ldrb	r1, [r5, #0]
 801103a:	f7fd fdc3 	bl	800ebc4 <_ZN13Communication27GetProtocolPayloadMaxLengthEhPb>
	if (not success) return false;
 801103e:	f89d 6003 	ldrb.w	r6, [sp, #3]
 8011042:	b15e      	cbz	r6, 801105c <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0xa0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011044:	68a9      	ldr	r1, [r5, #8]
 8011046:	686c      	ldr	r4, [r5, #4]
 8011048:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801104c:	1b0c      	subs	r4, r1, r4
 801104e:	1a9f      	subs	r7, r3, r2
	if (message->payload.size() + coded_element.size() > max_length)
 8011050:	443c      	add	r4, r7
 8011052:	4284      	cmp	r4, r0
 8011054:	d808      	bhi.n	8011068 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0xac>
	message->payload.insert(message->payload.end(), coded_element.begin(), coded_element.end());
 8011056:	1d28      	adds	r0, r5, #4
 8011058:	f7ff ff3c 	bl	8010ed4 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_>
      }
 801105c:	a801      	add	r0, sp, #4
 801105e:	f7ef fc1d 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 8011062:	4630      	mov	r0, r6
 8011064:	b005      	add	sp, #20
 8011066:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (not success) return false;
 8011068:	2600      	movs	r6, #0
 801106a:	e7f7      	b.n	801105c <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0xa0>

0801106c <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement>:
bool Communication::FindRegister(MessageHeader message, MessageHeader* response, MessageElement* element) {
 801106c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011070:	461c      	mov	r4, r3
 8011072:	b097      	sub	sp, #92	@ 0x5c
	uint16_t register_id = element->element_register.address;
 8011074:	f8b3 9000 	ldrh.w	r9, [r3]
bool Communication::FindRegister(MessageHeader message, MessageHeader* response, MessageElement* element) {
 8011078:	4605      	mov	r5, r0
	if (not element->ack && element->command) {
 801107a:	799b      	ldrb	r3, [r3, #6]
bool Communication::FindRegister(MessageHeader message, MessageHeader* response, MessageElement* element) {
 801107c:	4617      	mov	r7, r2
 801107e:	f10d 0820 	add.w	r8, sp, #32
	if (not element->ack && element->command) {
 8011082:	2b00      	cmp	r3, #0
 8011084:	d164      	bne.n	8011150 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0xe4>
 8011086:	79e3      	ldrb	r3, [r4, #7]
 8011088:	2b00      	cmp	r3, #0
 801108a:	d07b      	beq.n	8011184 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0x118>
		if (registers->IsRegistered(register_id))
 801108c:	4649      	mov	r1, r9
 801108e:	6868      	ldr	r0, [r5, #4]
 8011090:	f006 f8b2 	bl	80171f8 <_ZN9Registers12IsRegisteredEt>
 8011094:	4606      	mov	r6, r0
 8011096:	b168      	cbz	r0, 80110b4 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0x48>
			element->element_register = registers->FindRegister(register_id, &success);
 8011098:	4643      	mov	r3, r8
 801109a:	464a      	mov	r2, r9
 801109c:	6869      	ldr	r1, [r5, #4]
 801109e:	a804      	add	r0, sp, #16
 80110a0:	f006 f828 	bl	80170f4 <_ZN9Registers12FindRegisterEtPb>
		element->element_register = subscribers->FindRemoteRegister(Register{.address=register_id}, SubscriberInterface{.interface=message.interface, .address=message.source_address}, &success);
 80110a4:	9804      	ldr	r0, [sp, #16]
	return success;
 80110a6:	f89d 6020 	ldrb.w	r6, [sp, #32]
		element->element_register = subscribers->FindRemoteRegister(Register{.address=register_id}, SubscriberInterface{.interface=message.interface, .address=message.source_address}, &success);
 80110aa:	6020      	str	r0, [r4, #0]
 80110ac:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80110b0:	80a3      	strh	r3, [r4, #4]
	return success;
 80110b2:	e049      	b.n	8011148 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0xdc>
			response_content.ack = true;
 80110b4:	f240 1301 	movw	r3, #257	@ 0x101
	: _M_start(), _M_finish(), _M_end_of_storage()
 80110b8:	900f      	str	r0, [sp, #60]	@ 0x3c
			response_content.element_register.address = register_id;
 80110ba:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
			response_content.ack = true;
 80110be:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
			response_content.access = element->access;
 80110c2:	7a23      	ldrb	r3, [r4, #8]
 80110c4:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
			response_content.data = std::vector<uint8_t>{UNKNOWN_REGISTER};
 80110c8:	230f      	movs	r3, #15
 80110ca:	f88d 301c 	strb.w	r3, [sp, #28]
 80110ce:	ab07      	add	r3, sp, #28
 80110d0:	9308      	str	r3, [sp, #32]
 80110d2:	2301      	movs	r3, #1
 80110d4:	e9cd 000d 	strd	r0, r0, [sp, #52]	@ 0x34
 80110d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80110da:	a810      	add	r0, sp, #64	@ 0x40
 80110dc:	e898 0006 	ldmia.w	r8, {r1, r2}
 80110e0:	f7ff fe8a 	bl	8010df8 <_ZNSt6vectorIhSaIhEEC2ESt16initializer_listIhERKS0_.constprop.0.isra.0>
 80110e4:	a910      	add	r1, sp, #64	@ 0x40
 80110e6:	a80d      	add	r0, sp, #52	@ 0x34
 80110e8:	f7fd fd99 	bl	800ec1e <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 80110ec:	a810      	add	r0, sp, #64	@ 0x40
 80110ee:	f7ef fbd5 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
			if (not BuildPayload(response, response_content)) {
 80110f2:	a90a      	add	r1, sp, #40	@ 0x28
 80110f4:	a810      	add	r0, sp, #64	@ 0x40
 80110f6:	f7fe fa09 	bl	800f50c <_ZN14MessageElementC1ERKS_>
 80110fa:	aa10      	add	r2, sp, #64	@ 0x40
 80110fc:	4639      	mov	r1, r7
 80110fe:	4628      	mov	r0, r5
 8011100:	f7ff ff5c 	bl	8010fbc <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8011104:	4604      	mov	r4, r0
 8011106:	a813      	add	r0, sp, #76	@ 0x4c
 8011108:	f7ef fbc8 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801110c:	b9cc      	cbnz	r4, 8011142 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0xd6>
				Send(*response);
 801110e:	4639      	mov	r1, r7
 8011110:	a810      	add	r0, sp, #64	@ 0x40
 8011112:	f7fe fa0e 	bl	800f532 <_ZN13MessageHeaderC1ERKS_>
 8011116:	a910      	add	r1, sp, #64	@ 0x40
 8011118:	4628      	mov	r0, r5
 801111a:	f7fe faf9 	bl	800f710 <_ZN13Communication4SendE13MessageHeader>
 801111e:	a811      	add	r0, sp, #68	@ 0x44
 8011120:	f7ef fbbc 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
				response->payload.clear();
 8011124:	1d38      	adds	r0, r7, #4
 8011126:	f7fd fd91 	bl	800ec4c <_ZNSt6vectorIhSaIhEE5clearEv>
				BuildPayload(response, response_content);
 801112a:	a90a      	add	r1, sp, #40	@ 0x28
 801112c:	a810      	add	r0, sp, #64	@ 0x40
 801112e:	f7fe f9ed 	bl	800f50c <_ZN14MessageElementC1ERKS_>
 8011132:	aa10      	add	r2, sp, #64	@ 0x40
 8011134:	4639      	mov	r1, r7
 8011136:	4628      	mov	r0, r5
 8011138:	f7ff ff40 	bl	8010fbc <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 801113c:	a813      	add	r0, sp, #76	@ 0x4c
 801113e:	f7ef fbad 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011142:	a80d      	add	r0, sp, #52	@ 0x34
 8011144:	f7ef fbaa 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 8011148:	4630      	mov	r0, r6
 801114a:	b017      	add	sp, #92	@ 0x5c
 801114c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		element->element_register = services->FindRemoteRegister(Register{.address=register_id}, ServiceInterface{.interface=message.interface, .address=message.source_address}, element->access, &success);
 8011150:	2300      	movs	r3, #0
 8011152:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8011156:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801115a:	780b      	ldrb	r3, [r1, #0]
 801115c:	f88d 3018 	strb.w	r3, [sp, #24]
 8011160:	7c4b      	ldrb	r3, [r1, #17]
 8011162:	f8cd 8008 	str.w	r8, [sp, #8]
 8011166:	f88d 3019 	strb.w	r3, [sp, #25]
 801116a:	7a23      	ldrb	r3, [r4, #8]
 801116c:	9301      	str	r3, [sp, #4]
 801116e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8011172:	f8ad 3000 	strh.w	r3, [sp]
 8011176:	6881      	ldr	r1, [r0, #8]
 8011178:	a804      	add	r0, sp, #16
 801117a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 801117e:	f007 f834 	bl	80181ea <_ZN8Services18FindRemoteRegisterE8Register16ServiceInterfacebPb>
 8011182:	e78f      	b.n	80110a4 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0x38>
		element->element_register = subscribers->FindRemoteRegister(Register{.address=register_id}, SubscriberInterface{.interface=message.interface, .address=message.source_address}, &success);
 8011184:	f8cd 3042 	str.w	r3, [sp, #66]	@ 0x42
 8011188:	a804      	add	r0, sp, #16
 801118a:	780b      	ldrb	r3, [r1, #0]
 801118c:	f8ad 9040 	strh.w	r9, [sp, #64]	@ 0x40
 8011190:	f88d 301c 	strb.w	r3, [sp, #28]
 8011194:	7c4b      	ldrb	r3, [r1, #17]
 8011196:	f8cd 8004 	str.w	r8, [sp, #4]
 801119a:	f88d 301d 	strb.w	r3, [sp, #29]
 801119e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80111a2:	f8ad 3000 	strh.w	r3, [sp]
 80111a6:	68e9      	ldr	r1, [r5, #12]
 80111a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80111ac:	f007 f9ec 	bl	8018588 <_ZN17MasterSubscribers18FindRemoteRegisterE8Register19SubscriberInterfacePb>
 80111b0:	e778      	b.n	80110a4 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0x38>

080111b2 <_ZZN13Communication12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t>:
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 80111b2:	b530      	push	{r4, r5, lr}
 80111b4:	4604      	mov	r4, r0
 80111b6:	b093      	sub	sp, #76	@ 0x4c
			self->SetModuleAddress(*input);
 80111b8:	7811      	ldrb	r1, [r2, #0]
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 80111ba:	4615      	mov	r5, r2
			self->SetModuleAddress(*input);
 80111bc:	f7fd fd21 	bl	800ec02 <_ZN13Communication16SetModuleAddressEh>
			IDFoundLEDS(self->leds);
 80111c0:	6920      	ldr	r0, [r4, #16]
 80111c2:	f7fd f930 	bl	800e426 <_Z11IDFoundLEDSP4LEDS>
	: _M_start(), _M_finish(), _M_end_of_storage()
 80111c6:	2300      	movs	r3, #0
			message.interface = UART_BACK;
 80111c8:	2203      	movs	r2, #3
      { emplace_back(std::move(__x)); }
 80111ca:	a90c      	add	r1, sp, #48	@ 0x30
	: _M_start(), _M_finish(), _M_end_of_storage()
 80111cc:	9304      	str	r3, [sp, #16]
      { emplace_back(std::move(__x)); }
 80111ce:	a809      	add	r0, sp, #36	@ 0x24
	: _M_start(), _M_finish(), _M_end_of_storage()
 80111d0:	930b      	str	r3, [sp, #44]	@ 0x2c
			element.access = WRITE;
 80111d2:	f88d 3020 	strb.w	r3, [sp, #32]
			message.interface = UART_BACK;
 80111d6:	f88d 2004 	strb.w	r2, [sp, #4]
			element.ack = false;
 80111da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80111de:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80111e2:	e9cd 3309 	strd	r3, r3, [sp, #36]	@ 0x24
			element.data.push_back(*input + 1);
 80111e6:	782b      	ldrb	r3, [r5, #0]
			element.ack = false;
 80111e8:	f8ad 201e 	strh.w	r2, [sp, #30]
			element.data.push_back(*input + 1);
 80111ec:	3301      	adds	r3, #1
 80111ee:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
      { emplace_back(std::move(__x)); }
 80111f2:	f7fe f85f 	bl	800f2b4 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
			element.element_register = self->registers->FindRegister(REG_COM_ID_PROPAGATION, &success);
 80111f6:	f10d 0303 	add.w	r3, sp, #3
 80111fa:	2201      	movs	r2, #1
 80111fc:	6861      	ldr	r1, [r4, #4]
 80111fe:	a806      	add	r0, sp, #24
 8011200:	f005 ff78 	bl	80170f4 <_ZN9Registers12FindRegisterEtPb>
			self->BuildPayload(&message, element);
 8011204:	a906      	add	r1, sp, #24
 8011206:	a80c      	add	r0, sp, #48	@ 0x30
 8011208:	f7fe f980 	bl	800f50c <_ZN14MessageElementC1ERKS_>
 801120c:	aa0c      	add	r2, sp, #48	@ 0x30
 801120e:	a901      	add	r1, sp, #4
 8011210:	4620      	mov	r0, r4
 8011212:	f7ff fed3 	bl	8010fbc <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
      }
 8011216:	a80f      	add	r0, sp, #60	@ 0x3c
 8011218:	f7ef fb40 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
			self->Send(message);
 801121c:	a901      	add	r1, sp, #4
 801121e:	a80c      	add	r0, sp, #48	@ 0x30
 8011220:	f7fe f987 	bl	800f532 <_ZN13MessageHeaderC1ERKS_>
 8011224:	a90c      	add	r1, sp, #48	@ 0x30
 8011226:	4620      	mov	r0, r4
 8011228:	f7fe fa72 	bl	800f710 <_ZN13Communication4SendE13MessageHeader>
 801122c:	a80d      	add	r0, sp, #52	@ 0x34
 801122e:	f7ef fb35 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011232:	a809      	add	r0, sp, #36	@ 0x24
 8011234:	f7ef fb32 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011238:	a802      	add	r0, sp, #8
 801123a:	f7ef fb2f 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		}
 801123e:	2001      	movs	r0, #1
 8011240:	b013      	add	sp, #76	@ 0x4c
 8011242:	bd30      	pop	{r4, r5, pc}

08011244 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 8011244:	b510      	push	{r4, lr}
	  if (__n > 0)
 8011246:	460a      	mov	r2, r1
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 8011248:	4604      	mov	r4, r0
	  if (__n > 0)
 801124a:	b141      	cbz	r1, 801125e <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_+0x1a>
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 801124c:	2100      	movs	r1, #0
	       std::random_access_iterator_tag)
    {
#if __cplusplus >= 201103L
      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
#endif
      if (__n <= 0)
 801124e:	2a01      	cmp	r2, #1
 8011250:	f800 1b01 	strb.w	r1, [r0], #1
 8011254:	d005      	beq.n	8011262 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_+0x1e>
	return __first;

      __glibcxx_requires_can_increment(__first, __n);

      std::__fill_a(__first, __first + __n, __value);
 8011256:	4414      	add	r4, r2
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 8011258:	3a01      	subs	r2, #1
 801125a:	f008 fc85 	bl	8019b68 <memset>
	}
 801125e:	4620      	mov	r0, r4
 8011260:	bd10      	pop	{r4, pc}
	      ++__first;
 8011262:	4604      	mov	r4, r0
 8011264:	e7fb      	b.n	801125e <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_+0x1a>
	...

08011268 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj>:
    vector<_Tp, _Alloc>::
 8011268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801126c:	4604      	mov	r4, r0
      if (__n != 0)
 801126e:	460d      	mov	r5, r1
 8011270:	b159      	cbz	r1, 801128a <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x22>
					 - this->_M_impl._M_finish);
 8011272:	6882      	ldr	r2, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011274:	e9d0 7300 	ldrd	r7, r3, [r0]
 8011278:	1ad2      	subs	r2, r2, r3
 801127a:	eba3 0807 	sub.w	r8, r3, r7
	  if (__navail >= __n)
 801127e:	428a      	cmp	r2, r1
 8011280:	d305      	bcc.n	801128e <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x26>
	__uninit_default_n(__first, __n);
 8011282:	4618      	mov	r0, r3
 8011284:	f7ff ffde 	bl	8011244 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_>
	      this->_M_impl._M_finish =
 8011288:	6060      	str	r0, [r4, #4]
    }
 801128a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		_M_check_len(__n, "vector::_M_default_append");
 801128e:	4a11      	ldr	r2, [pc, #68]	@ (80112d4 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x6c>)
 8011290:	f7ef fb25 	bl	80008de <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8011294:	4681      	mov	r9, r0
	      pointer __new_start(this->_M_allocate(__len));
 8011296:	f7fd fbae 	bl	800e9f6 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
 801129a:	4629      	mov	r1, r5
 801129c:	4606      	mov	r6, r0
 801129e:	4440      	add	r0, r8
 80112a0:	f7ff ffd0 	bl	8011244 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_>
      if (__count > 0)
 80112a4:	f1b8 0f00 	cmp.w	r8, #0
 80112a8:	d00a      	beq.n	80112c0 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x58>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80112aa:	4642      	mov	r2, r8
 80112ac:	4639      	mov	r1, r7
 80112ae:	4630      	mov	r0, r6
 80112b0:	f008 fc40 	bl	8019b34 <memmove>
			    this->_M_impl._M_end_of_storage - __old_start);
 80112b4:	68a1      	ldr	r1, [r4, #8]
 80112b6:	4638      	mov	r0, r7
 80112b8:	1bc9      	subs	r1, r1, r7
 80112ba:	f008 fa89 	bl	80197d0 <_ZdlPvj>
      { __a.deallocate(__p, __n); }
 80112be:	e001      	b.n	80112c4 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x5c>
	if (__p)
 80112c0:	2f00      	cmp	r7, #0
 80112c2:	d1f7      	bne.n	80112b4 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x4c>
	      this->_M_impl._M_finish = __new_start + __size + __n;
 80112c4:	4445      	add	r5, r8
	      this->_M_impl._M_start = __new_start;
 80112c6:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_finish = __new_start + __size + __n;
 80112c8:	4435      	add	r5, r6
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 80112ca:	444e      	add	r6, r9
	      this->_M_impl._M_finish = __new_start + __size + __n;
 80112cc:	6065      	str	r5, [r4, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 80112ce:	60a6      	str	r6, [r4, #8]
    }
 80112d0:	e7db      	b.n	801128a <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x22>
 80112d2:	bf00      	nop
 80112d4:	0801a0ca 	.word	0x0801a0ca

080112d8 <_ZN9Registers13WriteRegisterIhEEbtPT_tb>:
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 80112d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112dc:	b085      	sub	sp, #20
 80112de:	4606      	mov	r6, r0
 80112e0:	4688      	mov	r8, r1
 80112e2:	461f      	mov	r7, r3
 80112e4:	f89d 3038 	ldrb.w	r3, [sp, #56]	@ 0x38
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80112e8:	f04f 31ff 	mov.w	r1, #4294967295
 80112ec:	6800      	ldr	r0, [r0, #0]
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 80112ee:	4615      	mov	r5, r2
 80112f0:	9301      	str	r3, [sp, #4]
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80112f2:	f7fa ff63 	bl	800c1bc <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80112f6:	f10d 020f 	add.w	r2, sp, #15
 80112fa:	4641      	mov	r1, r8
 80112fc:	4630      	mov	r0, r6
 80112fe:	f005 fee8 	bl	80170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8011302:	f89d 300f 	ldrb.w	r3, [sp, #15]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8011306:	4604      	mov	r4, r0
	if (!success) {
 8011308:	b933      	cbnz	r3, 8011318 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x40>
		osSemaphoreRelease(RegistersSemaphore);
 801130a:	6830      	ldr	r0, [r6, #0]
 801130c:	f7fa ff8a 	bl	800c224 <osSemaphoreRelease>
		return false;
 8011310:	2000      	movs	r0, #0
}
 8011312:	b005      	add	sp, #20
 8011314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8011318:	f10d 000f 	add.w	r0, sp, #15
 801131c:	f7fd fb76 	bl	800ea0c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 8011320:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8011324:	2b00      	cmp	r3, #0
 8011326:	d0f0      	beq.n	801130a <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x32>
	if (target_register->register_info.type != registered_type) {
 8011328:	7923      	ldrb	r3, [r4, #4]
 801132a:	4283      	cmp	r3, r0
 801132c:	d1ed      	bne.n	801130a <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x32>
	if (callbacks[target_register->register_info.type] == NULL) {
 801132e:	3304      	adds	r3, #4
 8011330:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 8011334:	2800      	cmp	r0, #0
 8011336:	d0e8      	beq.n	801130a <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x32>
	if (target_register->access.write) {
 8011338:	7a23      	ldrb	r3, [r4, #8]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d0e5      	beq.n	801130a <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x32>
		success = false;
 801133e:	2300      	movs	r3, #0
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8011340:	8961      	ldrh	r1, [r4, #10]
		success = false;
 8011342:	f88d 300f 	strb.w	r3, [sp, #15]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8011346:	f7fd fc9b 	bl	800ec80 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 801134a:	9b01      	ldr	r3, [sp, #4]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 801134c:	f8d0 9008 	ldr.w	r9, [r0, #8]
 8011350:	e9d0 ba00 	ldrd	fp, sl, [r0]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8011354:	b133      	cbz	r3, 8011364 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x8c>
 8011356:	68e3      	ldr	r3, [r4, #12]
 8011358:	b123      	cbz	r3, 8011364 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x8c>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 801135a:	f04f 31ff 	mov.w	r1, #4294967295
 801135e:	6818      	ldr	r0, [r3, #0]
 8011360:	f7fa ff2c 	bl	800c1bc <osSemaphoreAcquire>
		if (target_register->mode.pointer) {
 8011364:	7823      	ldrb	r3, [r4, #0]
 8011366:	b1c3      	cbz	r3, 801139a <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0xc2>
			success = true;
 8011368:	2301      	movs	r3, #1
 801136a:	f88d 300f 	strb.w	r3, [sp, #15]
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 801136e:	7963      	ldrb	r3, [r4, #5]
 8011370:	2b00      	cmp	r3, #0
 8011372:	d042      	beq.n	80113fa <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x122>
 8011374:	88e1      	ldrh	r1, [r4, #6]
 8011376:	2900      	cmp	r1, #0
 8011378:	d139      	bne.n	80113ee <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x116>
				register_vector->clear();
 801137a:	4658      	mov	r0, fp
 801137c:	f7fd fc66 	bl	800ec4c <_ZNSt6vectorIhSaIhEE5clearEv>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011380:	e9db 3000 	ldrd	r3, r0, [fp]
 8011384:	1ac1      	subs	r1, r0, r3
	if (__new_size > size())
 8011386:	428f      	cmp	r7, r1
 8011388:	d924      	bls.n	80113d4 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0xfc>
	  _M_default_append(__new_size - size());
 801138a:	1a79      	subs	r1, r7, r1
 801138c:	4658      	mov	r0, fp
 801138e:	f7ff ff6b 	bl	8011268 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj>
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 8011392:	2300      	movs	r3, #0
				for (uint16_t index = 0; index < length; index++) {
 8011394:	b299      	uxth	r1, r3
 8011396:	428f      	cmp	r7, r1
 8011398:	d823      	bhi.n	80113e2 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x10a>
		if (target_register->mode.callbacks) {
 801139a:	7863      	ldrb	r3, [r4, #1]
 801139c:	b16b      	cbz	r3, 80113ba <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0xe2>
			if (callbacks.write != NULL) {
 801139e:	f1b9 0f00 	cmp.w	r9, #0
 80113a2:	d00a      	beq.n	80113ba <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0xe2>
				if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 80113a4:	7963      	ldrb	r3, [r4, #5]
 80113a6:	b363      	cbz	r3, 8011402 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x12a>
 80113a8:	88e3      	ldrh	r3, [r4, #6]
 80113aa:	b903      	cbnz	r3, 80113ae <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0xd6>
					success = callbacks.write(callbacks.context, ID, value, length);
 80113ac:	463b      	mov	r3, r7
					success = callbacks.write(callbacks.context, ID, value, 1);
 80113ae:	462a      	mov	r2, r5
 80113b0:	4641      	mov	r1, r8
 80113b2:	4650      	mov	r0, sl
 80113b4:	47c8      	blx	r9
 80113b6:	f88d 000f 	strb.w	r0, [sp, #15]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 80113ba:	9b01      	ldr	r3, [sp, #4]
 80113bc:	b123      	cbz	r3, 80113c8 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0xf0>
 80113be:	68e3      	ldr	r3, [r4, #12]
 80113c0:	b113      	cbz	r3, 80113c8 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0xf0>
			osSemaphoreRelease(*(target_register->register_semaphore));
 80113c2:	6818      	ldr	r0, [r3, #0]
 80113c4:	f7fa ff2e 	bl	800c224 <osSemaphoreRelease>
		osSemaphoreRelease(RegistersSemaphore);
 80113c8:	6830      	ldr	r0, [r6, #0]
 80113ca:	f7fa ff2b 	bl	800c224 <osSemaphoreRelease>
		return success;
 80113ce:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80113d2:	e79e      	b.n	8011312 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x3a>
	else if (__new_size < size())
 80113d4:	d2dd      	bcs.n	8011392 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0xba>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 80113d6:	443b      	add	r3, r7
	if (size_type __n = this->_M_impl._M_finish - __pos)
 80113d8:	4298      	cmp	r0, r3
 80113da:	d0da      	beq.n	8011392 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0xba>
	    this->_M_impl._M_finish = __pos;
 80113dc:	f8cb 3004 	str.w	r3, [fp, #4]
 80113e0:	e7d7      	b.n	8011392 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0xba>
					(*register_vector)[index] = value[index];
 80113e2:	5ce8      	ldrb	r0, [r5, r3]
 80113e4:	f8db 1000 	ldr.w	r1, [fp]
 80113e8:	54c8      	strb	r0, [r1, r3]
				for (uint16_t index = 0; index < length; index++) {
 80113ea:	3301      	adds	r3, #1
 80113ec:	e7d2      	b.n	8011394 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0xbc>
			      _Category>::__copy_m(__first, __last, __result);
 80113ee:	465a      	mov	r2, fp
 80113f0:	4429      	add	r1, r5
 80113f2:	4628      	mov	r0, r5
 80113f4:	f7ef faf6 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80113f8:	e7cf      	b.n	801139a <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0xc2>
				*(callbacks.pointer) = *value;
 80113fa:	782b      	ldrb	r3, [r5, #0]
 80113fc:	f88b 3000 	strb.w	r3, [fp]
 8011400:	e7cb      	b.n	801139a <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0xc2>
					success = callbacks.write(callbacks.context, ID, value, 1);
 8011402:	2301      	movs	r3, #1
 8011404:	e7d3      	b.n	80113ae <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0xd6>

08011406 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t>:
uint16_t Communication::ProcessWrite(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 8011406:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801140a:	b091      	sub	sp, #68	@ 0x44
 801140c:	4605      	mov	r5, r0
 801140e:	4691      	mov	r9, r2
 8011410:	4608      	mov	r0, r1
 8011412:	af02      	add	r7, sp, #8
 8011414:	469a      	mov	sl, r3
		T value = ExtractSingle<T>(message.payload, start_index, &success);
 8011416:	3104      	adds	r1, #4
uint16_t Communication::ProcessWrite(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 8011418:	f8d7 b060 	ldr.w	fp, [r7, #96]	@ 0x60
 801141c:	f107 060b 	add.w	r6, r7, #11
 8011420:	f8b7 4064 	ldrh.w	r4, [r7, #100]	@ 0x64
	if (not element.element_register.isArray) {
 8011424:	f89b 8003 	ldrb.w	r8, [fp, #3]
 8011428:	f1b8 0f00 	cmp.w	r8, #0
 801142c:	d173      	bne.n	8011516 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x110>
		T value = ExtractSingle<T>(message.payload, start_index, &success);
 801142e:	f107 0020 	add.w	r0, r7, #32
 8011432:	f7ef fae3 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8011436:	4632      	mov	r2, r6
 8011438:	4621      	mov	r1, r4
 801143a:	f107 0020 	add.w	r0, r7, #32
 801143e:	f7fd facd 	bl	800e9dc <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 8011442:	7538      	strb	r0, [r7, #20]
      }
 8011444:	f107 0020 	add.w	r0, r7, #32
 8011448:	f7ef fa28 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 801144c:	7afb      	ldrb	r3, [r7, #11]
 801144e:	b153      	cbz	r3, 8011466 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x60>
			success = registers->WriteRegister<T>(element.element_register.address, &value);
 8011450:	2301      	movs	r3, #1
 8011452:	f8bb 1000 	ldrh.w	r1, [fp]
 8011456:	f107 0214 	add.w	r2, r7, #20
 801145a:	9300      	str	r3, [sp, #0]
 801145c:	4643      	mov	r3, r8
 801145e:	6868      	ldr	r0, [r5, #4]
 8011460:	f7ff ff3a 	bl	80112d8 <_ZN9Registers13WriteRegisterIhEEbtPT_tb>
 8011464:	72f8      	strb	r0, [r7, #11]
		length_to_extract = 1;
 8011466:	f04f 0801 	mov.w	r8, #1
	if (success)
 801146a:	7af9      	ldrb	r1, [r7, #11]
		response_content.data = std::vector<uint8_t>{OK};
 801146c:	f10a 060c 	add.w	r6, sl, #12
 8011470:	f107 0314 	add.w	r3, r7, #20
 8011474:	f107 020c 	add.w	r2, r7, #12
	if (success)
 8011478:	2900      	cmp	r1, #0
 801147a:	f000 80cb 	beq.w	8011614 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x20e>
		response_content.data = std::vector<uint8_t>{OK};
 801147e:	2100      	movs	r1, #0
 8011480:	60fb      	str	r3, [r7, #12]
 8011482:	2301      	movs	r3, #1
 8011484:	7539      	strb	r1, [r7, #20]
 8011486:	613b      	str	r3, [r7, #16]
 8011488:	ca06      	ldmia	r2, {r1, r2}
		response_content.data = std::vector<uint8_t>{ERROR};
 801148a:	f107 0020 	add.w	r0, r7, #32
 801148e:	f7ff fcb3 	bl	8010df8 <_ZNSt6vectorIhSaIhEEC2ESt16initializer_listIhERKS0_.constprop.0.isra.0>
 8011492:	f107 0120 	add.w	r1, r7, #32
 8011496:	4630      	mov	r0, r6
 8011498:	f7fd fbc1 	bl	800ec1e <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 801149c:	f107 0020 	add.w	r0, r7, #32
 80114a0:	f7ef f9fc 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not BuildPayload(response, response_content)) {
 80114a4:	4651      	mov	r1, sl
 80114a6:	f107 0020 	add.w	r0, r7, #32
 80114aa:	f7fe f82f 	bl	800f50c <_ZN14MessageElementC1ERKS_>
 80114ae:	f107 0220 	add.w	r2, r7, #32
 80114b2:	4649      	mov	r1, r9
 80114b4:	4628      	mov	r0, r5
 80114b6:	f7ff fd81 	bl	8010fbc <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 80114ba:	4606      	mov	r6, r0
 80114bc:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80114c0:	f7ef f9ec 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80114c4:	bb06      	cbnz	r6, 8011508 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x102>
		Send(*response);
 80114c6:	4649      	mov	r1, r9
 80114c8:	f107 0020 	add.w	r0, r7, #32
 80114cc:	f7fe f831 	bl	800f532 <_ZN13MessageHeaderC1ERKS_>
 80114d0:	f107 0120 	add.w	r1, r7, #32
 80114d4:	4628      	mov	r0, r5
 80114d6:	f7fe f91b 	bl	800f710 <_ZN13Communication4SendE13MessageHeader>
 80114da:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80114de:	f7ef f9dd 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		response->payload.clear();
 80114e2:	f109 0004 	add.w	r0, r9, #4
 80114e6:	f7fd fbb1 	bl	800ec4c <_ZNSt6vectorIhSaIhEE5clearEv>
		BuildPayload(response, response_content);
 80114ea:	4651      	mov	r1, sl
 80114ec:	f107 0020 	add.w	r0, r7, #32
 80114f0:	f7fe f80c 	bl	800f50c <_ZN14MessageElementC1ERKS_>
 80114f4:	f107 0220 	add.w	r2, r7, #32
 80114f8:	4649      	mov	r1, r9
 80114fa:	4628      	mov	r0, r5
 80114fc:	f7ff fd5e 	bl	8010fbc <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8011500:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8011504:	f7ef f9ca 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return start_index + sizeof(T) * length_to_extract;
 8011508:	eb04 0008 	add.w	r0, r4, r8
}
 801150c:	373c      	adds	r7, #60	@ 0x3c
 801150e:	b280      	uxth	r0, r0
 8011510:	46bd      	mov	sp, r7
 8011512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (element.element_register.isArray && element.element_register.length > 0) {
 8011516:	f8bb 8004 	ldrh.w	r8, [fp, #4]
 801151a:	f1b8 0f00 	cmp.w	r8, #0
 801151e:	d029      	beq.n	8011574 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x16e>
		T values[length_to_extract];
 8011520:	f108 0307 	add.w	r3, r8, #7
 8011524:	466a      	mov	r2, sp
	} else if (element.element_register.isArray && element.element_register.length == 0) {
 8011526:	f8c7 d000 	str.w	sp, [r7]
		ExtractArray<T>(values, message.payload, start_index, length_to_extract, &success);
 801152a:	f107 0020 	add.w	r0, r7, #32
		T values[length_to_extract];
 801152e:	08db      	lsrs	r3, r3, #3
 8011530:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 8011534:	469d      	mov	sp, r3
 8011536:	ab02      	add	r3, sp, #8
 8011538:	607b      	str	r3, [r7, #4]
		ExtractArray<T>(values, message.payload, start_index, length_to_extract, &success);
 801153a:	f7ef fa5f 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 801153e:	9600      	str	r6, [sp, #0]
 8011540:	4643      	mov	r3, r8
 8011542:	4622      	mov	r2, r4
 8011544:	f107 0120 	add.w	r1, r7, #32
 8011548:	6878      	ldr	r0, [r7, #4]
 801154a:	f7ff fa5f 	bl	8010a0c <_ZN13Communication12ExtractArrayIhEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 801154e:	f107 0020 	add.w	r0, r7, #32
 8011552:	f7ef f9a3 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8011556:	7afb      	ldrb	r3, [r7, #11]
 8011558:	b14b      	cbz	r3, 801156e <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x168>
			success = registers->WriteRegister<T>(element.element_register.address, values);
 801155a:	2301      	movs	r3, #1
 801155c:	f8bb 1000 	ldrh.w	r1, [fp]
 8011560:	9300      	str	r3, [sp, #0]
 8011562:	2300      	movs	r3, #0
 8011564:	687a      	ldr	r2, [r7, #4]
 8011566:	6868      	ldr	r0, [r5, #4]
 8011568:	f7ff feb6 	bl	80112d8 <_ZN9Registers13WriteRegisterIhEEbtPT_tb>
 801156c:	72f8      	strb	r0, [r7, #11]
 801156e:	f8d7 d000 	ldr.w	sp, [r7]
	} else if (element.element_register.isArray && element.element_register.length == 0) {
 8011572:	e77a      	b.n	801146a <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x64>
		length_to_extract = message.payload[start_index];
 8011574:	6843      	ldr	r3, [r0, #4]
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8011576:	f107 0020 	add.w	r0, r7, #32
		length_to_extract = message.payload[start_index];
 801157a:	f813 8004 	ldrb.w	r8, [r3, r4]
		start_index++;
 801157e:	3401      	adds	r4, #1
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8011580:	f7ef fa3c 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8011584:	f107 0120 	add.w	r1, r7, #32
		start_index++;
 8011588:	b2a4      	uxth	r4, r4
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 801158a:	4643      	mov	r3, r8
 801158c:	f107 0014 	add.w	r0, r7, #20
 8011590:	9600      	str	r6, [sp, #0]
 8011592:	4622      	mov	r2, r4
 8011594:	f7ff fa0a 	bl	80109ac <_ZN13Communication13ExtractVectorIhEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 8011598:	f107 0020 	add.w	r0, r7, #32
 801159c:	f7ef f97e 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 80115a0:	7afb      	ldrb	r3, [r7, #11]
 80115a2:	b1fb      	cbz	r3, 80115e4 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x1de>
			success = registers->WriteVectorRegister<T>(element.element_register.address, values); // previously &values
 80115a4:	686e      	ldr	r6, [r5, #4]
 80115a6:	f107 0114 	add.w	r1, r7, #20
 80115aa:	f8bb b000 	ldrh.w	fp, [fp]
 80115ae:	f107 0020 	add.w	r0, r7, #32
 80115b2:	f7ef fa23 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80115b6:	f04f 31ff 	mov.w	r1, #4294967295
 80115ba:	6830      	ldr	r0, [r6, #0]
 80115bc:	f7fa fdfe 	bl	800c1bc <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80115c0:	f107 020c 	add.w	r2, r7, #12
 80115c4:	4659      	mov	r1, fp
 80115c6:	4630      	mov	r0, r6
 80115c8:	f005 fd83 	bl	80170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80115cc:	7b3a      	ldrb	r2, [r7, #12]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80115ce:	4603      	mov	r3, r0
		osSemaphoreRelease(RegistersSemaphore);
 80115d0:	6830      	ldr	r0, [r6, #0]
	if (!success) {
 80115d2:	b962      	cbnz	r2, 80115ee <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x1e8>
		osSemaphoreRelease(RegistersSemaphore);
 80115d4:	f7fa fe26 	bl	800c224 <osSemaphoreRelease>
		return false;
 80115d8:	2000      	movs	r0, #0
 80115da:	72f8      	strb	r0, [r7, #11]
 80115dc:	f107 0020 	add.w	r0, r7, #32
 80115e0:	f7ef f95c 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80115e4:	f107 0014 	add.w	r0, r7, #20
 80115e8:	f7ef f958 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80115ec:	e73d      	b.n	801146a <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x64>
	if (!(target_register->register_info.isArray && target_register->register_info.length == 0)) {
 80115ee:	795a      	ldrb	r2, [r3, #5]
 80115f0:	2a00      	cmp	r2, #0
 80115f2:	d0ef      	beq.n	80115d4 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x1ce>
 80115f4:	88db      	ldrh	r3, [r3, #6]
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d1ec      	bne.n	80115d4 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x1ce>
	osSemaphoreRelease(RegistersSemaphore);
 80115fa:	f7fa fe13 	bl	800c224 <osSemaphoreRelease>
	return WriteRegister(ID, value.data(), value.size(), use_semaphore);
 80115fe:	2101      	movs	r1, #1
 8011600:	4630      	mov	r0, r6
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011602:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011606:	9100      	str	r1, [sp, #0]
 8011608:	4659      	mov	r1, fp
 801160a:	1a9b      	subs	r3, r3, r2
 801160c:	b29b      	uxth	r3, r3
 801160e:	f7ff fe63 	bl	80112d8 <_ZN9Registers13WriteRegisterIhEEbtPT_tb>
 8011612:	e7e2      	b.n	80115da <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x1d4>
		response_content.data = std::vector<uint8_t>{ERROR};
 8011614:	21ff      	movs	r1, #255	@ 0xff
 8011616:	617a      	str	r2, [r7, #20]
 8011618:	2201      	movs	r2, #1
 801161a:	7339      	strb	r1, [r7, #12]
 801161c:	61ba      	str	r2, [r7, #24]
 801161e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8011622:	e732      	b.n	801148a <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x84>

08011624 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt>:
uint16_t Communication::ProcessCommand(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 8011624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011628:	b0b3      	sub	sp, #204	@ 0xcc
 801162a:	461c      	mov	r4, r3
 801162c:	460f      	mov	r7, r1
 801162e:	4680      	mov	r8, r0
 8011630:	f8bd 30f0 	ldrh.w	r3, [sp, #240]	@ 0xf0
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011634:	f04f 0900 	mov.w	r9, #0
 8011638:	4616      	mov	r6, r2
 801163a:	ad2c      	add	r5, sp, #176	@ 0xb0
 801163c:	9304      	str	r3, [sp, #16]
	response_content.ack = true;
 801163e:	2301      	movs	r3, #1
 8011640:	f8cd 907c 	str.w	r9, [sp, #124]	@ 0x7c
 8011644:	f8ad 306e 	strh.w	r3, [sp, #110]	@ 0x6e
	response_content.access = element.access;
 8011648:	7a23      	ldrb	r3, [r4, #8]
	response_content.element_register = element.element_register;
 801164a:	e894 0003 	ldmia.w	r4, {r0, r1}
	response_content.access = element.access;
 801164e:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
	response_content.element_register = element.element_register;
 8011652:	901a      	str	r0, [sp, #104]	@ 0x68
 8011654:	f8ad 106c 	strh.w	r1, [sp, #108]	@ 0x6c
	CommunicationLED(leds, message.interface);
 8011658:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801165c:	7839      	ldrb	r1, [r7, #0]
 801165e:	e9cd 991d 	strd	r9, r9, [sp, #116]	@ 0x74
 8011662:	f7fc fee4 	bl	800e42e <_Z16CommunicationLEDP4LEDSh>
	if (element.access == WRITE) {
 8011666:	7a23      	ldrb	r3, [r4, #8]
		return ProcessWrite<T>(message, response, response_content, element, start_index);
 8011668:	4639      	mov	r1, r7
	if (element.access == WRITE) {
 801166a:	bb23      	cbnz	r3, 80116b6 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x92>
		return ProcessWrite<T>(message, response, response_content, element, start_index);
 801166c:	a820      	add	r0, sp, #128	@ 0x80
 801166e:	f7fd ff60 	bl	800f532 <_ZN13MessageHeaderC1ERKS_>
 8011672:	a91a      	add	r1, sp, #104	@ 0x68
 8011674:	a826      	add	r0, sp, #152	@ 0x98
 8011676:	f7fd ff49 	bl	800f50c <_ZN14MessageElementC1ERKS_>
 801167a:	4621      	mov	r1, r4
 801167c:	4628      	mov	r0, r5
 801167e:	f7fd ff45 	bl	800f50c <_ZN14MessageElementC1ERKS_>
 8011682:	9b04      	ldr	r3, [sp, #16]
 8011684:	4632      	mov	r2, r6
 8011686:	a920      	add	r1, sp, #128	@ 0x80
 8011688:	4640      	mov	r0, r8
 801168a:	e9cd 5300 	strd	r5, r3, [sp]
 801168e:	ab26      	add	r3, sp, #152	@ 0x98
 8011690:	f7ff feb9 	bl	8011406 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t>
 8011694:	9004      	str	r0, [sp, #16]
      }
 8011696:	a82f      	add	r0, sp, #188	@ 0xbc
 8011698:	f7ef f900 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801169c:	a829      	add	r0, sp, #164	@ 0xa4
 801169e:	f7ef f8fd 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80116a2:	a821      	add	r0, sp, #132	@ 0x84
 80116a4:	f7ef f8fa 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80116a8:	a81d      	add	r0, sp, #116	@ 0x74
 80116aa:	f7ef f8f7 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 80116ae:	9804      	ldr	r0, [sp, #16]
 80116b0:	b033      	add	sp, #204	@ 0xcc
 80116b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return ProcessRead<T>(message, response, response_content, element, start_index);
 80116b6:	a815      	add	r0, sp, #84	@ 0x54
 80116b8:	f7fd ff3b 	bl	800f532 <_ZN13MessageHeaderC1ERKS_>
 80116bc:	a91a      	add	r1, sp, #104	@ 0x68
 80116be:	a820      	add	r0, sp, #128	@ 0x80
 80116c0:	f7fd ff24 	bl	800f50c <_ZN14MessageElementC1ERKS_>
 80116c4:	4621      	mov	r1, r4
 80116c6:	a826      	add	r0, sp, #152	@ 0x98
 80116c8:	f7fd ff20 	bl	800f50c <_ZN14MessageElementC1ERKS_>
uint16_t Communication::ProcessRead(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 80116cc:	f8d8 7004 	ldr.w	r7, [r8, #4]
std::vector<uint8_t> Communication::ReadElement(MessageElement* element, bool* success) {
	std::vector<uint8_t> data;

	T register_read;
	uint16_t length;
	*success = registers->ReadRegister<T>(element->element_register.address, &register_read, &length);
 80116d0:	f8bd a098 	ldrh.w	sl, [sp, #152]	@ 0x98
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80116d4:	f04f 31ff 	mov.w	r1, #4294967295
 80116d8:	6838      	ldr	r0, [r7, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80116da:	f8cd 902c 	str.w	r9, [sp, #44]	@ 0x2c
 80116de:	e9cd 9909 	strd	r9, r9, [sp, #36]	@ 0x24
 80116e2:	f7fa fd6b 	bl	800c1bc <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80116e6:	462a      	mov	r2, r5
 80116e8:	4651      	mov	r1, sl
 80116ea:	4638      	mov	r0, r7
 80116ec:	f005 fcf1 	bl	80170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80116f0:	f89d 30b0 	ldrb.w	r3, [sp, #176]	@ 0xb0
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80116f4:	4604      	mov	r4, r0
	if (!success) {
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d159      	bne.n	80117ae <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x18a>
		osSemaphoreRelease(RegistersSemaphore);
 80116fa:	6838      	ldr	r0, [r7, #0]
 80116fc:	f7fa fd92 	bl	800c224 <osSemaphoreRelease>
		return false;
 8011700:	2300      	movs	r3, #0
 8011702:	9303      	str	r3, [sp, #12]
	response_content.data = ReadElement<T>(&element, &success);
 8011704:	a909      	add	r1, sp, #36	@ 0x24
 8011706:	a823      	add	r0, sp, #140	@ 0x8c
 8011708:	f7fd fa89 	bl	800ec1e <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 801170c:	a809      	add	r0, sp, #36	@ 0x24
 801170e:	f7ef f8c5 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not success) {
 8011712:	9b03      	ldr	r3, [sp, #12]
 8011714:	b9a3      	cbnz	r3, 8011740 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x11c>
		response_content.data = std::vector<uint8_t>{ERROR};
 8011716:	22ff      	movs	r2, #255	@ 0xff
		response_content.command = true; // this is an error flag for a read ack
 8011718:	2301      	movs	r3, #1
		response_content.data = std::vector<uint8_t>{ERROR};
 801171a:	4628      	mov	r0, r5
 801171c:	f88d 203c 	strb.w	r2, [sp, #60]	@ 0x3c
 8011720:	aa0f      	add	r2, sp, #60	@ 0x3c
		response_content.command = true; // this is an error flag for a read ack
 8011722:	f88d 3087 	strb.w	r3, [sp, #135]	@ 0x87
		response_content.data = std::vector<uint8_t>{ERROR};
 8011726:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
 801172a:	461a      	mov	r2, r3
 801172c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801172e:	f7ff fb63 	bl	8010df8 <_ZNSt6vectorIhSaIhEEC2ESt16initializer_listIhERKS0_.constprop.0.isra.0>
 8011732:	a823      	add	r0, sp, #140	@ 0x8c
 8011734:	4629      	mov	r1, r5
 8011736:	f7fd fa72 	bl	800ec1e <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 801173a:	4628      	mov	r0, r5
 801173c:	f7ef f8ae 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not BuildPayload(response, response_content) && response->payload.size() > 0) { // if no space available, send the data and then rebuild a new response
 8011740:	a920      	add	r1, sp, #128	@ 0x80
 8011742:	4628      	mov	r0, r5
 8011744:	f7fd fee2 	bl	800f50c <_ZN14MessageElementC1ERKS_>
 8011748:	462a      	mov	r2, r5
 801174a:	4631      	mov	r1, r6
 801174c:	4640      	mov	r0, r8
 801174e:	f7ff fc35 	bl	8010fbc <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8011752:	2800      	cmp	r0, #0
 8011754:	f040 8128 	bne.w	80119a8 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x384>
 8011758:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801175c:	1ae4      	subs	r4, r4, r3
 801175e:	bf18      	it	ne
 8011760:	2401      	movne	r4, #1
 8011762:	a82f      	add	r0, sp, #188	@ 0xbc
 8011764:	f7ef f89a 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011768:	b1cc      	cbz	r4, 801179e <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x17a>
		Send(*response);
 801176a:	4631      	mov	r1, r6
 801176c:	a82c      	add	r0, sp, #176	@ 0xb0
 801176e:	f7fd fee0 	bl	800f532 <_ZN13MessageHeaderC1ERKS_>
 8011772:	a92c      	add	r1, sp, #176	@ 0xb0
 8011774:	4640      	mov	r0, r8
 8011776:	f7fd ffcb 	bl	800f710 <_ZN13Communication4SendE13MessageHeader>
 801177a:	a82d      	add	r0, sp, #180	@ 0xb4
 801177c:	f7ef f88e 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		response->payload.clear();
 8011780:	1d30      	adds	r0, r6, #4
 8011782:	f7fd fa63 	bl	800ec4c <_ZNSt6vectorIhSaIhEE5clearEv>
		BuildPayload(response, response_content);
 8011786:	a920      	add	r1, sp, #128	@ 0x80
 8011788:	a82c      	add	r0, sp, #176	@ 0xb0
 801178a:	f7fd febf 	bl	800f50c <_ZN14MessageElementC1ERKS_>
 801178e:	aa2c      	add	r2, sp, #176	@ 0xb0
 8011790:	4631      	mov	r1, r6
 8011792:	4640      	mov	r0, r8
 8011794:	f7ff fc12 	bl	8010fbc <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8011798:	a82f      	add	r0, sp, #188	@ 0xbc
 801179a:	f7ef f87f 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801179e:	a829      	add	r0, sp, #164	@ 0xa4
 80117a0:	f7ef f87c 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80117a4:	a823      	add	r0, sp, #140	@ 0x8c
 80117a6:	f7ef f879 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80117aa:	a816      	add	r0, sp, #88	@ 0x58
 80117ac:	e77a      	b.n	80116a4 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x80>
	uint8_t registered_type = GetTypeID<T>(&success);
 80117ae:	4628      	mov	r0, r5
 80117b0:	f7fd f92c 	bl	800ea0c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 80117b4:	f89d 30b0 	ldrb.w	r3, [sp, #176]	@ 0xb0
 80117b8:	9303      	str	r3, [sp, #12]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d09d      	beq.n	80116fa <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0xd6>
	if (target_register->register_info.type != registered_type) {
 80117be:	7923      	ldrb	r3, [r4, #4]
 80117c0:	4298      	cmp	r0, r3
 80117c2:	d19a      	bne.n	80116fa <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0xd6>
	if (callbacks[target_register->register_info.type] == NULL) {
 80117c4:	3004      	adds	r0, #4
 80117c6:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 80117ca:	2800      	cmp	r0, #0
 80117cc:	d095      	beq.n	80116fa <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0xd6>
	if (target_register->access.read) {
 80117ce:	7a63      	ldrb	r3, [r4, #9]
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d031      	beq.n	8011838 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x214>
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 80117d4:	8961      	ldrh	r1, [r4, #10]
		success = false; // false by default to use pointer mode if the callback doesn't update the flag
 80117d6:	f88d 90b0 	strb.w	r9, [sp, #176]	@ 0xb0
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 80117da:	f7fd fa51 	bl	800ec80 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
 80117de:	f8d0 b00c 	ldr.w	fp, [r0, #12]
 80117e2:	e9d0 9300 	ldrd	r9, r3, [r0]
 80117e6:	9305      	str	r3, [sp, #20]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 80117e8:	68e3      	ldr	r3, [r4, #12]
 80117ea:	b123      	cbz	r3, 80117f6 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x1d2>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 80117ec:	f04f 31ff 	mov.w	r1, #4294967295
 80117f0:	6818      	ldr	r0, [r3, #0]
 80117f2:	f7fa fce3 	bl	800c1bc <osSemaphoreAcquire>
		if (target_register->mode.callbacks) {
 80117f6:	7863      	ldrb	r3, [r4, #1]
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d15d      	bne.n	80118b8 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x294>
		if (not success && target_register->mode.pointer) {
 80117fc:	f89d 30b0 	ldrb.w	r3, [sp, #176]	@ 0xb0
 8011800:	b9ab      	cbnz	r3, 801182e <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x20a>
 8011802:	7823      	ldrb	r3, [r4, #0]
 8011804:	b19b      	cbz	r3, 801182e <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x20a>
			success = true;
 8011806:	2301      	movs	r3, #1
 8011808:	f88d 30b0 	strb.w	r3, [sp, #176]	@ 0xb0
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 801180c:	7962      	ldrb	r2, [r4, #5]
 801180e:	2a00      	cmp	r2, #0
 8011810:	f000 8085 	beq.w	801191e <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x2fa>
 8011814:	88e1      	ldrh	r1, [r4, #6]
 8011816:	2900      	cmp	r1, #0
 8011818:	d179      	bne.n	801190e <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x2ea>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801181a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801181e:	1a9b      	subs	r3, r3, r2
 8011820:	aa06      	add	r2, sp, #24
				*length = register_vector->size();
 8011822:	b29b      	uxth	r3, r3
 8011824:	f8ad 301a 	strh.w	r3, [sp, #26]
					for (uint16_t index = 0; index < *length; index++) {
 8011828:	b288      	uxth	r0, r1
 801182a:	4283      	cmp	r3, r0
 801182c:	d868      	bhi.n	8011900 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x2dc>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 801182e:	68e3      	ldr	r3, [r4, #12]
 8011830:	b113      	cbz	r3, 8011838 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x214>
			osSemaphoreRelease(*(target_register->register_semaphore));
 8011832:	6818      	ldr	r0, [r3, #0]
 8011834:	f7fa fcf6 	bl	800c224 <osSemaphoreRelease>
	osSemaphoreRelease(RegistersSemaphore);
 8011838:	6838      	ldr	r0, [r7, #0]
 801183a:	af0f      	add	r7, sp, #60	@ 0x3c
 801183c:	f7fa fcf2 	bl	800c224 <osSemaphoreRelease>

	if (not *success)
		return data;

	// Get vector of type T
	std::vector<T> register_read_vector_cast = BuildTVector(*element, &register_read);
 8011840:	a926      	add	r1, sp, #152	@ 0x98
 8011842:	4628      	mov	r0, r5
 8011844:	f7fd fe62 	bl	800f50c <_ZN14MessageElementC1ERKS_>
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011848:	2300      	movs	r3, #0
	if (not element.element_register.isArray) {
 801184a:	f89d 20b3 	ldrb.w	r2, [sp, #179]	@ 0xb3
 801184e:	930e      	str	r3, [sp, #56]	@ 0x38
 8011850:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
 8011854:	2a00      	cmp	r2, #0
 8011856:	d169      	bne.n	801192c <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x308>
		vector = std::vector<T>{*data};
 8011858:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801185c:	4639      	mov	r1, r7
 801185e:	a812      	add	r0, sp, #72	@ 0x48
 8011860:	9707      	str	r7, [sp, #28]
 8011862:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 8011866:	2301      	movs	r3, #1
 8011868:	461a      	mov	r2, r3
 801186a:	9308      	str	r3, [sp, #32]
 801186c:	f7ff fac4 	bl	8010df8 <_ZNSt6vectorIhSaIhEEC2ESt16initializer_listIhERKS0_.constprop.0.isra.0>
		vector = std::vector<T>(data, data + element.element_register.length);
 8011870:	a80c      	add	r0, sp, #48	@ 0x30
 8011872:	a912      	add	r1, sp, #72	@ 0x48
 8011874:	f7fd f9d3 	bl	800ec1e <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8011878:	a812      	add	r0, sp, #72	@ 0x48
 801187a:	f7ef f80f 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801187e:	a82f      	add	r0, sp, #188	@ 0xbc
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011880:	2400      	movs	r4, #0
      }
 8011882:	f7ef f80b 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>

	// transform it in vector of uint8_t
	data = BuildVector<T>(register_read_vector_cast);
 8011886:	a90c      	add	r1, sp, #48	@ 0x30
 8011888:	a812      	add	r0, sp, #72	@ 0x48
 801188a:	f7ef f8b7 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
	: _M_start(), _M_finish(), _M_end_of_storage()
 801188e:	9411      	str	r4, [sp, #68]	@ 0x44
      : _M_current(__i) { }
 8011890:	e9dd 9a12 	ldrd	r9, sl, [sp, #72]	@ 0x48
 8011894:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
    for (T input : inputs) {
 8011898:	45ca      	cmp	sl, r9
 801189a:	d16f      	bne.n	801197c <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x358>
	data = BuildVector<T>(register_read_vector_cast);
 801189c:	4639      	mov	r1, r7
 801189e:	a809      	add	r0, sp, #36	@ 0x24
 80118a0:	f7fd f9bd 	bl	800ec1e <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 80118a4:	4638      	mov	r0, r7
 80118a6:	f7ee fff9 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80118aa:	a812      	add	r0, sp, #72	@ 0x48
 80118ac:	f7ee fff6 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80118b0:	a80c      	add	r0, sp, #48	@ 0x30
 80118b2:	f7ee fff3 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80118b6:	e725      	b.n	8011704 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0xe0>
				*callback_output = output;
 80118b8:	2200      	movs	r2, #0
 80118ba:	ab06      	add	r3, sp, #24
 80118bc:	6013      	str	r3, [r2, #0]
			if (callbacks.read != NULL) {
 80118be:	f1bb 0f00 	cmp.w	fp, #0
 80118c2:	d09b      	beq.n	80117fc <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x1d8>
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 80118c4:	f10d 031a 	add.w	r3, sp, #26
 80118c8:	4651      	mov	r1, sl
 80118ca:	9805      	ldr	r0, [sp, #20]
 80118cc:	47d8      	blx	fp
 80118ce:	f88d 00b0 	strb.w	r0, [sp, #176]	@ 0xb0
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 80118d2:	7963      	ldrb	r3, [r4, #5]
 80118d4:	b143      	cbz	r3, 80118e8 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x2c4>
 80118d6:	88e3      	ldrh	r3, [r4, #6]
 80118d8:	b10b      	cbz	r3, 80118de <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x2ba>
					*length = 1;
 80118da:	f8ad 301a 	strh.w	r3, [sp, #26]
					for (uint16_t index = 0; index < *length; index++) {
 80118de:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 80118e2:	a906      	add	r1, sp, #24
 80118e4:	2300      	movs	r3, #0
 80118e6:	e007      	b.n	80118f8 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x2d4>
					*length = 1;
 80118e8:	2301      	movs	r3, #1
 80118ea:	e7f6      	b.n	80118da <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x2b6>
						output[index] = (*callback_output )[index];
 80118ec:	2200      	movs	r2, #0
 80118ee:	6812      	ldr	r2, [r2, #0]
 80118f0:	5cd2      	ldrb	r2, [r2, r3]
 80118f2:	3301      	adds	r3, #1
 80118f4:	f801 2b01 	strb.w	r2, [r1], #1
					for (uint16_t index = 0; index < *length; index++) {
 80118f8:	b29a      	uxth	r2, r3
 80118fa:	4290      	cmp	r0, r2
 80118fc:	d8f6      	bhi.n	80118ec <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x2c8>
 80118fe:	e77d      	b.n	80117fc <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x1d8>
						output[index] = (*register_vector)[index];
 8011900:	f8d9 0000 	ldr.w	r0, [r9]
 8011904:	5c40      	ldrb	r0, [r0, r1]
 8011906:	3101      	adds	r1, #1
 8011908:	f802 0b01 	strb.w	r0, [r2], #1
					for (uint16_t index = 0; index < *length; index++) {
 801190c:	e78c      	b.n	8011828 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x204>
				*length = target_register->register_info.length;
 801190e:	f8ad 101a 	strh.w	r1, [sp, #26]
			      _Category>::__copy_m(__first, __last, __result);
 8011912:	aa06      	add	r2, sp, #24
 8011914:	4449      	add	r1, r9
 8011916:	4648      	mov	r0, r9
 8011918:	f7ef f864 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 801191c:	e787      	b.n	801182e <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x20a>
				*length = 1;
 801191e:	f8ad 301a 	strh.w	r3, [sp, #26]
					*output = *callbacks.pointer;
 8011922:	f899 3000 	ldrb.w	r3, [r9]
 8011926:	f88d 3018 	strb.w	r3, [sp, #24]
 801192a:	e780      	b.n	801182e <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x20a>
	} else if (element.element_register.isArray && element.element_register.length > 0)
 801192c:	f8bd 20b4 	ldrh.w	r2, [sp, #180]	@ 0xb4
 8011930:	b14a      	cbz	r2, 8011946 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x322>
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011932:	9314      	str	r3, [sp, #80]	@ 0x50
	  _M_range_initialize(__first, __last,
 8011934:	a812      	add	r0, sp, #72	@ 0x48
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011936:	e9cd 3312 	strd	r3, r3, [sp, #72]	@ 0x48
	  _M_range_initialize(__first, __last,
 801193a:	ab06      	add	r3, sp, #24
 801193c:	441a      	add	r2, r3
 801193e:	4619      	mov	r1, r3
 8011940:	f7ff fa7c 	bl	8010e3c <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPhEEvT_S4_St20forward_iterator_tag.isra.0>
 8011944:	e794      	b.n	8011870 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x24c>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011946:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
	  if (__xlen > capacity())
 801194a:	ebbb 090a 	subs.w	r9, fp, sl
 801194e:	d00f      	beq.n	8011970 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x34c>
	  pointer __result = this->_M_allocate(__n);
 8011950:	4648      	mov	r0, r9
 8011952:	f7fd f850 	bl	800e9f6 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
 8011956:	4604      	mov	r4, r0
			      _Category>::__copy_m(__first, __last, __result);
 8011958:	4602      	mov	r2, r0
 801195a:	4659      	mov	r1, fp
 801195c:	4650      	mov	r0, sl
 801195e:	f7ef f841 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	      this->_M_impl._M_start = __tmp;
 8011962:	940c      	str	r4, [sp, #48]	@ 0x30
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8011964:	444c      	add	r4, r9
 8011966:	940e      	str	r4, [sp, #56]	@ 0x38
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8011968:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801196a:	444b      	add	r3, r9
 801196c:	930d      	str	r3, [sp, #52]	@ 0x34
      return *this;
 801196e:	e786      	b.n	801187e <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x25a>
 8011970:	464a      	mov	r2, r9
 8011972:	4659      	mov	r1, fp
 8011974:	4650      	mov	r0, sl
 8011976:	f7ef f835 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801197a:	e7f5      	b.n	8011968 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x344>
    for (T input : inputs) {
 801197c:	f819 3b01 	ldrb.w	r3, [r9], #1
      { emplace_back(std::move(__x)); }
 8011980:	f10d 0119 	add.w	r1, sp, #25
 8011984:	4628      	mov	r0, r5
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011986:	942e      	str	r4, [sp, #184]	@ 0xb8
		data.push_back((uint8_t) ((reinterpreted_input >> ((type_length - 1 - index) << 3)) & 0xFF)); // previously (8 * (type_length - 1 - index))) & 0xFF))
 8011988:	f88d 3019 	strb.w	r3, [sp, #25]
 801198c:	e9cd 442c 	strd	r4, r4, [sp, #176]	@ 0xb0
      { emplace_back(std::move(__x)); }
 8011990:	f7fd fc90 	bl	800f2b4 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
        data.insert(data.end(), single.begin(), single.end());
 8011994:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8011996:	4638      	mov	r0, r7
 8011998:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	@ 0xb0
 801199c:	f7ff fa9a 	bl	8010ed4 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_>
      }
 80119a0:	4628      	mov	r0, r5
 80119a2:	f7ee ff7b 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return *this;
 80119a6:	e777      	b.n	8011898 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x274>
	if (not BuildPayload(response, response_content) && response->payload.size() > 0) { // if no space available, send the data and then rebuild a new response
 80119a8:	2400      	movs	r4, #0
 80119aa:	e6da      	b.n	8011762 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x13e>

080119ac <_ZN13Communication14ProcessElementIhEEt13MessageHeaderPS1_14MessageElementt>:
uint16_t Communication::ProcessElement(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 80119ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80119ae:	461c      	mov	r4, r3
 80119b0:	b08f      	sub	sp, #60	@ 0x3c
	if (not element.ack && element.command) {
 80119b2:	799b      	ldrb	r3, [r3, #6]
uint16_t Communication::ProcessElement(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 80119b4:	4605      	mov	r5, r0
 80119b6:	4617      	mov	r7, r2
 80119b8:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
	if (not element.ack && element.command) {
 80119bc:	b9cb      	cbnz	r3, 80119f2 <_ZN13Communication14ProcessElementIhEEt13MessageHeaderPS1_14MessageElementt+0x46>
 80119be:	79e3      	ldrb	r3, [r4, #7]
		return ProcessCommand<T>(message, response, element, start_index);
 80119c0:	a803      	add	r0, sp, #12
	if (not element.ack && element.command) {
 80119c2:	b323      	cbz	r3, 8011a0e <_ZN13Communication14ProcessElementIhEEt13MessageHeaderPS1_14MessageElementt+0x62>
		return ProcessCommand<T>(message, response, element, start_index);
 80119c4:	f7fd fdb5 	bl	800f532 <_ZN13MessageHeaderC1ERKS_>
 80119c8:	4621      	mov	r1, r4
 80119ca:	a808      	add	r0, sp, #32
 80119cc:	f7fd fd9e 	bl	800f50c <_ZN14MessageElementC1ERKS_>
 80119d0:	ab08      	add	r3, sp, #32
 80119d2:	463a      	mov	r2, r7
 80119d4:	a903      	add	r1, sp, #12
 80119d6:	4628      	mov	r0, r5
 80119d8:	9600      	str	r6, [sp, #0]
 80119da:	f7ff fe23 	bl	8011624 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt>
		return ProcessSubscriber<T>(message, element, start_index);
 80119de:	4604      	mov	r4, r0
 80119e0:	a80b      	add	r0, sp, #44	@ 0x2c
 80119e2:	f7ee ff5b 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80119e6:	a804      	add	r0, sp, #16
 80119e8:	f7ee ff58 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 80119ec:	4620      	mov	r0, r4
 80119ee:	b00f      	add	sp, #60	@ 0x3c
 80119f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ProcessService<T>(message, element, start_index);
 80119f2:	a803      	add	r0, sp, #12
 80119f4:	f7fd fd9d 	bl	800f532 <_ZN13MessageHeaderC1ERKS_>
 80119f8:	4621      	mov	r1, r4
 80119fa:	a808      	add	r0, sp, #32
 80119fc:	f7fd fd86 	bl	800f50c <_ZN14MessageElementC1ERKS_>
 8011a00:	4633      	mov	r3, r6
 8011a02:	aa08      	add	r2, sp, #32
 8011a04:	a903      	add	r1, sp, #12
 8011a06:	4628      	mov	r0, r5
 8011a08:	f7ff f8a9 	bl	8010b5e <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt>
 8011a0c:	e7e7      	b.n	80119de <_ZN13Communication14ProcessElementIhEEt13MessageHeaderPS1_14MessageElementt+0x32>
		return ProcessSubscriber<T>(message, element, start_index);
 8011a0e:	f7fd fd90 	bl	800f532 <_ZN13MessageHeaderC1ERKS_>
 8011a12:	4621      	mov	r1, r4
 8011a14:	a808      	add	r0, sp, #32
 8011a16:	f7fd fd79 	bl	800f50c <_ZN14MessageElementC1ERKS_>
 8011a1a:	4633      	mov	r3, r6
 8011a1c:	aa08      	add	r2, sp, #32
 8011a1e:	a903      	add	r1, sp, #12
 8011a20:	4628      	mov	r0, r5
 8011a22:	f7ff f81a 	bl	8010a5a <_ZN13Communication17ProcessSubscriberIhEEt13MessageHeader14MessageElementt>
 8011a26:	e7da      	b.n	80119de <_ZN13Communication14ProcessElementIhEEt13MessageHeaderPS1_14MessageElementt+0x32>

08011a28 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPmjEET_S3_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 8011a28:	b538      	push	{r3, r4, r5, lr}
	  if (__n > 0)
 8011a2a:	460c      	mov	r4, r1
 8011a2c:	b181      	cbz	r1, 8011a50 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPmjEET_S3_T0_+0x28>
 8011a2e:	2100      	movs	r1, #0
 8011a30:	4605      	mov	r5, r0
      if (__n <= 0)
 8011a32:	3c01      	subs	r4, #1
 8011a34:	f845 1b04 	str.w	r1, [r5], #4
 8011a38:	d008      	beq.n	8011a4c <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPmjEET_S3_T0_+0x24>
      std::__fill_a(__first, __first + __n, __value);
 8011a3a:	eb05 0484 	add.w	r4, r5, r4, lsl #2
	*__first = __tmp;
 8011a3e:	1a24      	subs	r4, r4, r0
 8011a40:	4628      	mov	r0, r5
 8011a42:	3c04      	subs	r4, #4
 8011a44:	4425      	add	r5, r4
 8011a46:	4622      	mov	r2, r4
 8011a48:	f008 f88e 	bl	8019b68 <memset>
	}
 8011a4c:	4628      	mov	r0, r5
 8011a4e:	bd38      	pop	{r3, r4, r5, pc}
 8011a50:	4605      	mov	r5, r0
	  return __first;
 8011a52:	e7fb      	b.n	8011a4c <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPmjEET_S3_T0_+0x24>

08011a54 <_ZNSt6vectorImSaImEE17_M_default_appendEj>:
    vector<_Tp, _Alloc>::
 8011a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a58:	4604      	mov	r4, r0
      if (__n != 0)
 8011a5a:	460e      	mov	r6, r1
 8011a5c:	b171      	cbz	r1, 8011a7c <_ZNSt6vectorImSaImEE17_M_default_appendEj+0x28>
					 - this->_M_impl._M_finish);
 8011a5e:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011a60:	e9d0 8200 	ldrd	r8, r2, [r0]
 8011a64:	1a9b      	subs	r3, r3, r2
 8011a66:	eba2 0a08 	sub.w	sl, r2, r8
	  if (__navail >= __n)
 8011a6a:	ebb1 0fa3 	cmp.w	r1, r3, asr #2
 8011a6e:	ea4f 07aa 	mov.w	r7, sl, asr #2
 8011a72:	d805      	bhi.n	8011a80 <_ZNSt6vectorImSaImEE17_M_default_appendEj+0x2c>
	__uninit_default_n(__first, __n);
 8011a74:	4610      	mov	r0, r2
 8011a76:	f7ff ffd7 	bl	8011a28 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPmjEET_S3_T0_>
	      this->_M_impl._M_finish =
 8011a7a:	6060      	str	r0, [r4, #4]
    }
 8011a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		_M_check_len(__n, "vector::_M_default_append");
 8011a80:	4a13      	ldr	r2, [pc, #76]	@ (8011ad0 <_ZNSt6vectorImSaImEE17_M_default_appendEj+0x7c>)
 8011a82:	f7fd fccb 	bl	800f41c <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc>
 8011a86:	4681      	mov	r9, r0
	      pointer __new_start(this->_M_allocate(__len));
 8011a88:	f7fc fe16 	bl	800e6b8 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0>
 8011a8c:	4631      	mov	r1, r6
 8011a8e:	4605      	mov	r5, r0
 8011a90:	4450      	add	r0, sl
 8011a92:	f7ff ffc9 	bl	8011a28 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPmjEET_S3_T0_>
      if (__count > 0)
 8011a96:	f1ba 0f00 	cmp.w	sl, #0
 8011a9a:	d00c      	beq.n	8011ab6 <_ZNSt6vectorImSaImEE17_M_default_appendEj+0x62>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8011a9c:	4652      	mov	r2, sl
 8011a9e:	4641      	mov	r1, r8
 8011aa0:	4628      	mov	r0, r5
 8011aa2:	f008 f847 	bl	8019b34 <memmove>
			    this->_M_impl._M_end_of_storage - __old_start);
 8011aa6:	68a1      	ldr	r1, [r4, #8]
 8011aa8:	4640      	mov	r0, r8
 8011aaa:	eba1 0108 	sub.w	r1, r1, r8
 8011aae:	1089      	asrs	r1, r1, #2
 8011ab0:	f7fc fde2 	bl	800e678 <_ZNSt12_Vector_baseIP21CommunicationProtocolSaIS1_EE13_M_deallocateEPS1_j.part.0>
 8011ab4:	e002      	b.n	8011abc <_ZNSt6vectorImSaImEE17_M_default_appendEj+0x68>
	if (__p)
 8011ab6:	f1b8 0f00 	cmp.w	r8, #0
 8011aba:	d1f4      	bne.n	8011aa6 <_ZNSt6vectorImSaImEE17_M_default_appendEj+0x52>
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8011abc:	4437      	add	r7, r6
	      this->_M_impl._M_start = __new_start;
 8011abe:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8011ac0:	eb05 0787 	add.w	r7, r5, r7, lsl #2
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 8011ac4:	eb05 0589 	add.w	r5, r5, r9, lsl #2
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8011ac8:	6067      	str	r7, [r4, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 8011aca:	60a5      	str	r5, [r4, #8]
    }
 8011acc:	e7d6      	b.n	8011a7c <_ZNSt6vectorImSaImEE17_M_default_appendEj+0x28>
 8011ace:	bf00      	nop
 8011ad0:	0801a0ca 	.word	0x0801a0ca

08011ad4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>:
	  if (_Num)
 8011ad4:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8011ad6:	4613      	mov	r3, r2
 8011ad8:	b510      	push	{r4, lr}
	  const ptrdiff_t _Num = __last - __first;
 8011ada:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
 8011ade:	d005      	beq.n	8011aec <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8011ae0:	4601      	mov	r1, r0
 8011ae2:	4622      	mov	r2, r4
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	f008 f825 	bl	8019b34 <memmove>
 8011aea:	4603      	mov	r3, r0
	}
 8011aec:	1918      	adds	r0, r3, r4
 8011aee:	bd10      	pop	{r4, pc}

08011af0 <_ZNSt6vectorImSaImEEC1ERKS1_>:
      vector(const vector& __x)
 8011af0:	b570      	push	{r4, r5, r6, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011af2:	e9d1 3600 	ldrd	r3, r6, [r1]
      vector(const vector& __x)
 8011af6:	4604      	mov	r4, r0
 8011af8:	460d      	mov	r5, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011afa:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011afc:	2300      	movs	r3, #0
 8011afe:	e9c0 3300 	strd	r3, r3, [r0]
 8011b02:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8011b04:	10b0      	asrs	r0, r6, #2
 8011b06:	f7fc fdd7 	bl	800e6b8 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8011b0a:	4406      	add	r6, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8011b0c:	4602      	mov	r2, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8011b0e:	60a6      	str	r6, [r4, #8]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8011b10:	e9c4 0000 	strd	r0, r0, [r4]
			      _Category>::__copy_m(__first, __last, __result);
 8011b14:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011b18:	f7ff ffdc 	bl	8011ad4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>
	this->_M_impl._M_finish =
 8011b1c:	6060      	str	r0, [r4, #4]
      }
 8011b1e:	4620      	mov	r0, r4
 8011b20:	bd70      	pop	{r4, r5, r6, pc}

08011b22 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb>:
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 8011b22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b26:	f2ad 4d14 	subw	sp, sp, #1044	@ 0x414
 8011b2a:	4689      	mov	r9, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8011b2c:	f04f 31ff 	mov.w	r1, #4294967295
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 8011b30:	461f      	mov	r7, r3
 8011b32:	9000      	str	r0, [sp, #0]
 8011b34:	4615      	mov	r5, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8011b36:	6800      	ldr	r0, [r0, #0]
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 8011b38:	f89d b438 	ldrb.w	fp, [sp, #1080]	@ 0x438
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8011b3c:	f7fa fb3e 	bl	800c1bc <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8011b40:	f10d 020f 	add.w	r2, sp, #15
 8011b44:	4649      	mov	r1, r9
 8011b46:	9800      	ldr	r0, [sp, #0]
 8011b48:	f005 fac3 	bl	80170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8011b4c:	f89d 300f 	ldrb.w	r3, [sp, #15]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8011b50:	4604      	mov	r4, r0
	if (!success) {
 8011b52:	b953      	cbnz	r3, 8011b6a <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x48>
		osSemaphoreRelease(RegistersSemaphore);
 8011b54:	9b00      	ldr	r3, [sp, #0]
		return false;
 8011b56:	f04f 0a00 	mov.w	sl, #0
		osSemaphoreRelease(RegistersSemaphore);
 8011b5a:	6818      	ldr	r0, [r3, #0]
 8011b5c:	f7fa fb62 	bl	800c224 <osSemaphoreRelease>
}
 8011b60:	4650      	mov	r0, sl
 8011b62:	f20d 4d14 	addw	sp, sp, #1044	@ 0x414
 8011b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8011b6a:	f10d 000f 	add.w	r0, sp, #15
 8011b6e:	f7fc fe79 	bl	800e864 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	if (!success) {
 8011b72:	f89d a00f 	ldrb.w	sl, [sp, #15]
 8011b76:	f1ba 0f00 	cmp.w	sl, #0
 8011b7a:	d0eb      	beq.n	8011b54 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x32>
	if (target_register->register_info.type != registered_type) {
 8011b7c:	7923      	ldrb	r3, [r4, #4]
 8011b7e:	4283      	cmp	r3, r0
 8011b80:	d1e8      	bne.n	8011b54 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x32>
	if (callbacks[target_register->register_info.type] == NULL) {
 8011b82:	3304      	adds	r3, #4
 8011b84:	9a00      	ldr	r2, [sp, #0]
 8011b86:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8011b8a:	2800      	cmp	r0, #0
 8011b8c:	d0e2      	beq.n	8011b54 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x32>
	if (target_register->access.read) {
 8011b8e:	7a63      	ldrb	r3, [r4, #9]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d04d      	beq.n	8011c30 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x10e>
		success = false; // false by default to use pointer mode if the callback doesn't update the flag
 8011b94:	2300      	movs	r3, #0
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8011b96:	8961      	ldrh	r1, [r4, #10]
		success = false; // false by default to use pointer mode if the callback doesn't update the flag
 8011b98:	f88d 300f 	strb.w	r3, [sp, #15]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8011b9c:	f7fd fc08 	bl	800f3b0 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE2atEj>
 8011ba0:	e9d0 8300 	ldrd	r8, r3, [r0]
 8011ba4:	9301      	str	r3, [sp, #4]
 8011ba6:	68c3      	ldr	r3, [r0, #12]
 8011ba8:	461e      	mov	r6, r3
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8011baa:	f1bb 0f00 	cmp.w	fp, #0
 8011bae:	d006      	beq.n	8011bbe <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x9c>
 8011bb0:	68e3      	ldr	r3, [r4, #12]
 8011bb2:	b123      	cbz	r3, 8011bbe <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x9c>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 8011bb4:	f04f 31ff 	mov.w	r1, #4294967295
 8011bb8:	6818      	ldr	r0, [r3, #0]
 8011bba:	f7fa faff 	bl	800c1bc <osSemaphoreAcquire>
		if (target_register->mode.callbacks) {
 8011bbe:	7863      	ldrb	r3, [r4, #1]
 8011bc0:	b1db      	cbz	r3, 8011bfa <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xd8>
			if (output != NULL) {
 8011bc2:	2d00      	cmp	r5, #0
 8011bc4:	d039      	beq.n	8011c3a <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x118>
				*callback_output = output;
 8011bc6:	462a      	mov	r2, r5
 8011bc8:	2300      	movs	r3, #0
 8011bca:	601a      	str	r2, [r3, #0]
			if (callbacks.read != NULL) {
 8011bcc:	b1ae      	cbz	r6, 8011bfa <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xd8>
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 8011bce:	463b      	mov	r3, r7
 8011bd0:	2200      	movs	r2, #0
 8011bd2:	4649      	mov	r1, r9
 8011bd4:	9801      	ldr	r0, [sp, #4]
 8011bd6:	47b0      	blx	r6
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 8011bd8:	7963      	ldrb	r3, [r4, #5]
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 8011bda:	f88d 000f 	strb.w	r0, [sp, #15]
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 8011bde:	b373      	cbz	r3, 8011c3e <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x11c>
 8011be0:	88e3      	ldrh	r3, [r4, #6]
 8011be2:	b103      	cbz	r3, 8011be6 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xc4>
					*length = 1;
 8011be4:	803b      	strh	r3, [r7, #0]
				if (*callback_output != output && output != NULL) {
 8011be6:	2300      	movs	r3, #0
 8011be8:	6819      	ldr	r1, [r3, #0]
 8011bea:	42a9      	cmp	r1, r5
 8011bec:	d005      	beq.n	8011bfa <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xd8>
 8011bee:	b125      	cbz	r5, 8011bfa <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xd8>
						output[index] = (*callback_output )[index];
 8011bf0:	883a      	ldrh	r2, [r7, #0]
 8011bf2:	4628      	mov	r0, r5
 8011bf4:	0092      	lsls	r2, r2, #2
 8011bf6:	f008 f895 	bl	8019d24 <memcpy>
		if (not success && target_register->mode.pointer) {
 8011bfa:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8011bfe:	b97b      	cbnz	r3, 8011c20 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xfe>
 8011c00:	7823      	ldrb	r3, [r4, #0]
 8011c02:	b16b      	cbz	r3, 8011c20 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xfe>
			success = true;
 8011c04:	2301      	movs	r3, #1
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 8011c06:	7962      	ldrb	r2, [r4, #5]
			success = true;
 8011c08:	f88d 300f 	strb.w	r3, [sp, #15]
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 8011c0c:	b362      	cbz	r2, 8011c68 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x146>
 8011c0e:	88e1      	ldrh	r1, [r4, #6]
 8011c10:	bb01      	cbnz	r1, 8011c54 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x132>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011c12:	e9d8 2300 	ldrd	r2, r3, [r8]
 8011c16:	1a9b      	subs	r3, r3, r2
				*length = register_vector->size();
 8011c18:	f3c3 038f 	ubfx	r3, r3, #2, #16
 8011c1c:	803b      	strh	r3, [r7, #0]
				if (output != NULL) {
 8011c1e:	b9ad      	cbnz	r5, 8011c4c <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x12a>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8011c20:	f1bb 0f00 	cmp.w	fp, #0
 8011c24:	d004      	beq.n	8011c30 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x10e>
 8011c26:	68e3      	ldr	r3, [r4, #12]
 8011c28:	b113      	cbz	r3, 8011c30 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x10e>
			osSemaphoreRelease(*(target_register->register_semaphore));
 8011c2a:	6818      	ldr	r0, [r3, #0]
 8011c2c:	f7fa fafa 	bl	800c224 <osSemaphoreRelease>
	osSemaphoreRelease(RegistersSemaphore);
 8011c30:	9b00      	ldr	r3, [sp, #0]
 8011c32:	6818      	ldr	r0, [r3, #0]
 8011c34:	f7fa faf6 	bl	800c224 <osSemaphoreRelease>
	return true;
 8011c38:	e792      	b.n	8011b60 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x3e>
				*callback_output = output_buffer; // use a temporary buffer to store values if not input. TODO the size is limited so there is possibly an issue if output == NULL and length > 256
 8011c3a:	aa04      	add	r2, sp, #16
 8011c3c:	e7c4      	b.n	8011bc8 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xa6>
					*length = 1;
 8011c3e:	2301      	movs	r3, #1
 8011c40:	e7d0      	b.n	8011be4 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xc2>
						output[index] = (*register_vector)[index];
 8011c42:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8011c46:	f845 0021 	str.w	r0, [r5, r1, lsl #2]
					for (uint16_t index = 0; index < *length; index++) {
 8011c4a:	3101      	adds	r1, #1
 8011c4c:	b288      	uxth	r0, r1
 8011c4e:	4298      	cmp	r0, r3
 8011c50:	d3f7      	bcc.n	8011c42 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x120>
 8011c52:	e7e5      	b.n	8011c20 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xfe>
				*length = target_register->register_info.length;
 8011c54:	8039      	strh	r1, [r7, #0]
				if (output != NULL) {
 8011c56:	2d00      	cmp	r5, #0
 8011c58:	d0e2      	beq.n	8011c20 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xfe>
 8011c5a:	462a      	mov	r2, r5
 8011c5c:	eb08 0181 	add.w	r1, r8, r1, lsl #2
 8011c60:	4640      	mov	r0, r8
 8011c62:	f7ff ff37 	bl	8011ad4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8011c66:	e7db      	b.n	8011c20 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xfe>
				*length = 1;
 8011c68:	803b      	strh	r3, [r7, #0]
				if (output != NULL) {
 8011c6a:	2d00      	cmp	r5, #0
 8011c6c:	d0d8      	beq.n	8011c20 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xfe>
					*output = *callbacks.pointer;
 8011c6e:	f8d8 3000 	ldr.w	r3, [r8]
 8011c72:	602b      	str	r3, [r5, #0]
 8011c74:	e7d4      	b.n	8011c20 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xfe>

08011c76 <_ZN9Registers13WriteRegisterImEEbtPT_tb>:
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 8011c76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c7a:	b085      	sub	sp, #20
 8011c7c:	4606      	mov	r6, r0
 8011c7e:	4688      	mov	r8, r1
 8011c80:	461f      	mov	r7, r3
 8011c82:	f89d 3038 	ldrb.w	r3, [sp, #56]	@ 0x38
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8011c86:	f04f 31ff 	mov.w	r1, #4294967295
 8011c8a:	6800      	ldr	r0, [r0, #0]
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 8011c8c:	4615      	mov	r5, r2
 8011c8e:	9301      	str	r3, [sp, #4]
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8011c90:	f7fa fa94 	bl	800c1bc <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8011c94:	f10d 020f 	add.w	r2, sp, #15
 8011c98:	4641      	mov	r1, r8
 8011c9a:	4630      	mov	r0, r6
 8011c9c:	f005 fa19 	bl	80170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8011ca0:	f89d 300f 	ldrb.w	r3, [sp, #15]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8011ca4:	4604      	mov	r4, r0
	if (!success) {
 8011ca6:	b933      	cbnz	r3, 8011cb6 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x40>
		osSemaphoreRelease(RegistersSemaphore);
 8011ca8:	6830      	ldr	r0, [r6, #0]
 8011caa:	f7fa fabb 	bl	800c224 <osSemaphoreRelease>
		return false;
 8011cae:	2000      	movs	r0, #0
}
 8011cb0:	b005      	add	sp, #20
 8011cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8011cb6:	f10d 000f 	add.w	r0, sp, #15
 8011cba:	f7fc fdd3 	bl	800e864 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	if (!success) {
 8011cbe:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d0f0      	beq.n	8011ca8 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x32>
	if (target_register->register_info.type != registered_type) {
 8011cc6:	7923      	ldrb	r3, [r4, #4]
 8011cc8:	4283      	cmp	r3, r0
 8011cca:	d1ed      	bne.n	8011ca8 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x32>
	if (callbacks[target_register->register_info.type] == NULL) {
 8011ccc:	3304      	adds	r3, #4
 8011cce:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 8011cd2:	2800      	cmp	r0, #0
 8011cd4:	d0e8      	beq.n	8011ca8 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x32>
	if (target_register->access.write) {
 8011cd6:	7a23      	ldrb	r3, [r4, #8]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d0e5      	beq.n	8011ca8 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x32>
		success = false;
 8011cdc:	2300      	movs	r3, #0
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8011cde:	8961      	ldrh	r1, [r4, #10]
		success = false;
 8011ce0:	f88d 300f 	strb.w	r3, [sp, #15]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8011ce4:	f7fd fb64 	bl	800f3b0 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE2atEj>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8011ce8:	9b01      	ldr	r3, [sp, #4]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8011cea:	f8d0 9008 	ldr.w	r9, [r0, #8]
 8011cee:	e9d0 ba00 	ldrd	fp, sl, [r0]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8011cf2:	b133      	cbz	r3, 8011d02 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x8c>
 8011cf4:	68e3      	ldr	r3, [r4, #12]
 8011cf6:	b123      	cbz	r3, 8011d02 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x8c>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 8011cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8011cfc:	6818      	ldr	r0, [r3, #0]
 8011cfe:	f7fa fa5d 	bl	800c1bc <osSemaphoreAcquire>
		if (target_register->mode.pointer) {
 8011d02:	7823      	ldrb	r3, [r4, #0]
 8011d04:	b1e3      	cbz	r3, 8011d40 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xca>
			success = true;
 8011d06:	2301      	movs	r3, #1
 8011d08:	f88d 300f 	strb.w	r3, [sp, #15]
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 8011d0c:	7963      	ldrb	r3, [r4, #5]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d04a      	beq.n	8011da8 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x132>
 8011d12:	88e1      	ldrh	r1, [r4, #6]
 8011d14:	2900      	cmp	r1, #0
 8011d16:	d140      	bne.n	8011d9a <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x124>
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8011d18:	e9db 3100 	ldrd	r3, r1, [fp]
 8011d1c:	428b      	cmp	r3, r1
	    this->_M_impl._M_finish = __pos;
 8011d1e:	bf18      	it	ne
 8011d20:	f8cb 3004 	strne.w	r3, [fp, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011d24:	f8db 0004 	ldr.w	r0, [fp, #4]
 8011d28:	1ac1      	subs	r1, r0, r3
 8011d2a:	1089      	asrs	r1, r1, #2
	if (__new_size > size())
 8011d2c:	428f      	cmp	r7, r1
 8011d2e:	d924      	bls.n	8011d7a <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x104>
	  _M_default_append(__new_size - size());
 8011d30:	1a79      	subs	r1, r7, r1
 8011d32:	4658      	mov	r0, fp
 8011d34:	f7ff fe8e 	bl	8011a54 <_ZNSt6vectorImSaImEE17_M_default_appendEj>
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 8011d38:	2300      	movs	r3, #0
				for (uint16_t index = 0; index < length; index++) {
 8011d3a:	b299      	uxth	r1, r3
 8011d3c:	42b9      	cmp	r1, r7
 8011d3e:	d324      	bcc.n	8011d8a <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x114>
		if (target_register->mode.callbacks) {
 8011d40:	7863      	ldrb	r3, [r4, #1]
 8011d42:	b16b      	cbz	r3, 8011d60 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xea>
			if (callbacks.write != NULL) {
 8011d44:	f1b9 0f00 	cmp.w	r9, #0
 8011d48:	d00a      	beq.n	8011d60 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xea>
				if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 8011d4a:	7963      	ldrb	r3, [r4, #5]
 8011d4c:	b383      	cbz	r3, 8011db0 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x13a>
 8011d4e:	88e3      	ldrh	r3, [r4, #6]
 8011d50:	b903      	cbnz	r3, 8011d54 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xde>
					success = callbacks.write(callbacks.context, ID, value, length);
 8011d52:	463b      	mov	r3, r7
					success = callbacks.write(callbacks.context, ID, value, 1);
 8011d54:	462a      	mov	r2, r5
 8011d56:	4641      	mov	r1, r8
 8011d58:	4650      	mov	r0, sl
 8011d5a:	47c8      	blx	r9
 8011d5c:	f88d 000f 	strb.w	r0, [sp, #15]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8011d60:	9b01      	ldr	r3, [sp, #4]
 8011d62:	b123      	cbz	r3, 8011d6e <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xf8>
 8011d64:	68e3      	ldr	r3, [r4, #12]
 8011d66:	b113      	cbz	r3, 8011d6e <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xf8>
			osSemaphoreRelease(*(target_register->register_semaphore));
 8011d68:	6818      	ldr	r0, [r3, #0]
 8011d6a:	f7fa fa5b 	bl	800c224 <osSemaphoreRelease>
		osSemaphoreRelease(RegistersSemaphore);
 8011d6e:	6830      	ldr	r0, [r6, #0]
 8011d70:	f7fa fa58 	bl	800c224 <osSemaphoreRelease>
		return success;
 8011d74:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8011d78:	e79a      	b.n	8011cb0 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x3a>
	else if (__new_size < size())
 8011d7a:	d2dd      	bcs.n	8011d38 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xc2>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 8011d7c:	eb03 0387 	add.w	r3, r3, r7, lsl #2
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8011d80:	4298      	cmp	r0, r3
 8011d82:	d0d9      	beq.n	8011d38 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xc2>
	    this->_M_impl._M_finish = __pos;
 8011d84:	f8cb 3004 	str.w	r3, [fp, #4]
 8011d88:	e7d6      	b.n	8011d38 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xc2>
					(*register_vector)[index] = value[index];
 8011d8a:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8011d8e:	f8db 1000 	ldr.w	r1, [fp]
 8011d92:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
				for (uint16_t index = 0; index < length; index++) {
 8011d96:	3301      	adds	r3, #1
 8011d98:	e7cf      	b.n	8011d3a <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xc4>
			      _Category>::__copy_m(__first, __last, __result);
 8011d9a:	465a      	mov	r2, fp
 8011d9c:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8011da0:	4628      	mov	r0, r5
 8011da2:	f7ff fe97 	bl	8011ad4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8011da6:	e7cb      	b.n	8011d40 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xca>
				*(callbacks.pointer) = *value;
 8011da8:	682b      	ldr	r3, [r5, #0]
 8011daa:	f8cb 3000 	str.w	r3, [fp]
 8011dae:	e7c7      	b.n	8011d40 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xca>
					success = callbacks.write(callbacks.context, ID, value, 1);
 8011db0:	2301      	movs	r3, #1
 8011db2:	e7cf      	b.n	8011d54 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xde>

08011db4 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t>:
uint16_t Communication::ProcessWrite(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 8011db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011db8:	b091      	sub	sp, #68	@ 0x44
 8011dba:	4605      	mov	r5, r0
 8011dbc:	4691      	mov	r9, r2
 8011dbe:	4608      	mov	r0, r1
 8011dc0:	af02      	add	r7, sp, #8
 8011dc2:	469a      	mov	sl, r3
		T value = ExtractSingle<T>(message.payload, start_index, &success);
 8011dc4:	3104      	adds	r1, #4
uint16_t Communication::ProcessWrite(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 8011dc6:	f8d7 b060 	ldr.w	fp, [r7, #96]	@ 0x60
 8011dca:	f107 060b 	add.w	r6, r7, #11
 8011dce:	f8b7 4064 	ldrh.w	r4, [r7, #100]	@ 0x64
	if (not element.element_register.isArray) {
 8011dd2:	f89b 8003 	ldrb.w	r8, [fp, #3]
 8011dd6:	f1b8 0f00 	cmp.w	r8, #0
 8011dda:	d173      	bne.n	8011ec4 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x110>
		T value = ExtractSingle<T>(message.payload, start_index, &success);
 8011ddc:	f107 0020 	add.w	r0, r7, #32
 8011de0:	f7ee fe0c 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8011de4:	4632      	mov	r2, r6
 8011de6:	4621      	mov	r1, r4
 8011de8:	f107 0020 	add.w	r0, r7, #32
 8011dec:	f7fc fddd 	bl	800e9aa <_ZN13Communication13ExtractSingleImEET_St6vectorIhSaIhEEtPb.isra.0>
 8011df0:	6178      	str	r0, [r7, #20]
      }
 8011df2:	f107 0020 	add.w	r0, r7, #32
 8011df6:	f7ee fd51 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8011dfa:	7afb      	ldrb	r3, [r7, #11]
 8011dfc:	b153      	cbz	r3, 8011e14 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x60>
			success = registers->WriteRegister<T>(element.element_register.address, &value);
 8011dfe:	2301      	movs	r3, #1
 8011e00:	f8bb 1000 	ldrh.w	r1, [fp]
 8011e04:	f107 0214 	add.w	r2, r7, #20
 8011e08:	9300      	str	r3, [sp, #0]
 8011e0a:	4643      	mov	r3, r8
 8011e0c:	6868      	ldr	r0, [r5, #4]
 8011e0e:	f7ff ff32 	bl	8011c76 <_ZN9Registers13WriteRegisterImEEbtPT_tb>
 8011e12:	72f8      	strb	r0, [r7, #11]
		length_to_extract = 1;
 8011e14:	f04f 0801 	mov.w	r8, #1
	if (success)
 8011e18:	7af9      	ldrb	r1, [r7, #11]
		response_content.data = std::vector<uint8_t>{OK};
 8011e1a:	f10a 060c 	add.w	r6, sl, #12
 8011e1e:	f107 0314 	add.w	r3, r7, #20
 8011e22:	f107 020c 	add.w	r2, r7, #12
	if (success)
 8011e26:	2900      	cmp	r1, #0
 8011e28:	f000 80cd 	beq.w	8011fc6 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x212>
		response_content.data = std::vector<uint8_t>{OK};
 8011e2c:	2100      	movs	r1, #0
 8011e2e:	60fb      	str	r3, [r7, #12]
 8011e30:	2301      	movs	r3, #1
 8011e32:	7539      	strb	r1, [r7, #20]
 8011e34:	613b      	str	r3, [r7, #16]
 8011e36:	ca06      	ldmia	r2, {r1, r2}
		response_content.data = std::vector<uint8_t>{ERROR};
 8011e38:	f107 0020 	add.w	r0, r7, #32
 8011e3c:	f7fe ffdc 	bl	8010df8 <_ZNSt6vectorIhSaIhEEC2ESt16initializer_listIhERKS0_.constprop.0.isra.0>
 8011e40:	f107 0120 	add.w	r1, r7, #32
 8011e44:	4630      	mov	r0, r6
 8011e46:	f7fc feea 	bl	800ec1e <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 8011e4a:	f107 0020 	add.w	r0, r7, #32
 8011e4e:	f7ee fd25 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not BuildPayload(response, response_content)) {
 8011e52:	4651      	mov	r1, sl
 8011e54:	f107 0020 	add.w	r0, r7, #32
 8011e58:	f7fd fb58 	bl	800f50c <_ZN14MessageElementC1ERKS_>
 8011e5c:	f107 0220 	add.w	r2, r7, #32
 8011e60:	4649      	mov	r1, r9
 8011e62:	4628      	mov	r0, r5
 8011e64:	f7ff f8aa 	bl	8010fbc <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8011e68:	4606      	mov	r6, r0
 8011e6a:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8011e6e:	f7ee fd15 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011e72:	bb06      	cbnz	r6, 8011eb6 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x102>
		Send(*response);
 8011e74:	4649      	mov	r1, r9
 8011e76:	f107 0020 	add.w	r0, r7, #32
 8011e7a:	f7fd fb5a 	bl	800f532 <_ZN13MessageHeaderC1ERKS_>
 8011e7e:	f107 0120 	add.w	r1, r7, #32
 8011e82:	4628      	mov	r0, r5
 8011e84:	f7fd fc44 	bl	800f710 <_ZN13Communication4SendE13MessageHeader>
 8011e88:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8011e8c:	f7ee fd06 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		response->payload.clear();
 8011e90:	f109 0004 	add.w	r0, r9, #4
 8011e94:	f7fc feda 	bl	800ec4c <_ZNSt6vectorIhSaIhEE5clearEv>
		BuildPayload(response, response_content);
 8011e98:	4651      	mov	r1, sl
 8011e9a:	f107 0020 	add.w	r0, r7, #32
 8011e9e:	f7fd fb35 	bl	800f50c <_ZN14MessageElementC1ERKS_>
 8011ea2:	f107 0220 	add.w	r2, r7, #32
 8011ea6:	4649      	mov	r1, r9
 8011ea8:	4628      	mov	r0, r5
 8011eaa:	f7ff f887 	bl	8010fbc <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8011eae:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8011eb2:	f7ee fcf3 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return start_index + sizeof(T) * length_to_extract;
 8011eb6:	eb04 0088 	add.w	r0, r4, r8, lsl #2
}
 8011eba:	373c      	adds	r7, #60	@ 0x3c
 8011ebc:	b280      	uxth	r0, r0
 8011ebe:	46bd      	mov	sp, r7
 8011ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (element.element_register.isArray && element.element_register.length > 0) {
 8011ec4:	f8bb 8004 	ldrh.w	r8, [fp, #4]
 8011ec8:	f1b8 0f00 	cmp.w	r8, #0
 8011ecc:	d02a      	beq.n	8011f24 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x170>
		T values[length_to_extract];
 8011ece:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8011ed2:	466a      	mov	r2, sp
	} else if (element.element_register.isArray && element.element_register.length == 0) {
 8011ed4:	f8c7 d000 	str.w	sp, [r7]
		ExtractArray<T>(values, message.payload, start_index, length_to_extract, &success);
 8011ed8:	f107 0020 	add.w	r0, r7, #32
		T values[length_to_extract];
 8011edc:	3307      	adds	r3, #7
 8011ede:	08db      	lsrs	r3, r3, #3
 8011ee0:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 8011ee4:	469d      	mov	sp, r3
 8011ee6:	ab02      	add	r3, sp, #8
 8011ee8:	607b      	str	r3, [r7, #4]
		ExtractArray<T>(values, message.payload, start_index, length_to_extract, &success);
 8011eea:	f7ee fd87 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8011eee:	9600      	str	r6, [sp, #0]
 8011ef0:	4643      	mov	r3, r8
 8011ef2:	4622      	mov	r2, r4
 8011ef4:	f107 0120 	add.w	r1, r7, #32
 8011ef8:	6878      	ldr	r0, [r7, #4]
 8011efa:	f7fe fb5d 	bl	80105b8 <_ZN13Communication12ExtractArrayImEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 8011efe:	f107 0020 	add.w	r0, r7, #32
 8011f02:	f7ee fccb 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8011f06:	7afb      	ldrb	r3, [r7, #11]
 8011f08:	b14b      	cbz	r3, 8011f1e <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x16a>
			success = registers->WriteRegister<T>(element.element_register.address, values);
 8011f0a:	2301      	movs	r3, #1
 8011f0c:	f8bb 1000 	ldrh.w	r1, [fp]
 8011f10:	9300      	str	r3, [sp, #0]
 8011f12:	2300      	movs	r3, #0
 8011f14:	687a      	ldr	r2, [r7, #4]
 8011f16:	6868      	ldr	r0, [r5, #4]
 8011f18:	f7ff fead 	bl	8011c76 <_ZN9Registers13WriteRegisterImEEbtPT_tb>
 8011f1c:	72f8      	strb	r0, [r7, #11]
 8011f1e:	f8d7 d000 	ldr.w	sp, [r7]
	} else if (element.element_register.isArray && element.element_register.length == 0) {
 8011f22:	e779      	b.n	8011e18 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x64>
		length_to_extract = message.payload[start_index];
 8011f24:	6843      	ldr	r3, [r0, #4]
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8011f26:	f107 0020 	add.w	r0, r7, #32
		length_to_extract = message.payload[start_index];
 8011f2a:	f813 8004 	ldrb.w	r8, [r3, r4]
		start_index++;
 8011f2e:	3401      	adds	r4, #1
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8011f30:	f7ee fd64 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8011f34:	f107 0120 	add.w	r1, r7, #32
		start_index++;
 8011f38:	b2a4      	uxth	r4, r4
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8011f3a:	4643      	mov	r3, r8
 8011f3c:	f107 0014 	add.w	r0, r7, #20
 8011f40:	9600      	str	r6, [sp, #0]
 8011f42:	4622      	mov	r2, r4
 8011f44:	f7fe fade 	bl	8010504 <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 8011f48:	f107 0020 	add.w	r0, r7, #32
 8011f4c:	f7ee fca6 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8011f50:	7afb      	ldrb	r3, [r7, #11]
 8011f52:	b1fb      	cbz	r3, 8011f94 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x1e0>
			success = registers->WriteVectorRegister<T>(element.element_register.address, values); // previously &values
 8011f54:	686e      	ldr	r6, [r5, #4]
 8011f56:	f107 0114 	add.w	r1, r7, #20
 8011f5a:	f8bb b000 	ldrh.w	fp, [fp]
 8011f5e:	f107 0020 	add.w	r0, r7, #32
 8011f62:	f7ff fdc5 	bl	8011af0 <_ZNSt6vectorImSaImEEC1ERKS1_>
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8011f66:	f04f 31ff 	mov.w	r1, #4294967295
 8011f6a:	6830      	ldr	r0, [r6, #0]
 8011f6c:	f7fa f926 	bl	800c1bc <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8011f70:	f107 020c 	add.w	r2, r7, #12
 8011f74:	4659      	mov	r1, fp
 8011f76:	4630      	mov	r0, r6
 8011f78:	f005 f8ab 	bl	80170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8011f7c:	7b3a      	ldrb	r2, [r7, #12]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8011f7e:	4603      	mov	r3, r0
		osSemaphoreRelease(RegistersSemaphore);
 8011f80:	6830      	ldr	r0, [r6, #0]
	if (!success) {
 8011f82:	b962      	cbnz	r2, 8011f9e <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x1ea>
		osSemaphoreRelease(RegistersSemaphore);
 8011f84:	f7fa f94e 	bl	800c224 <osSemaphoreRelease>
		return false;
 8011f88:	2000      	movs	r0, #0
 8011f8a:	72f8      	strb	r0, [r7, #11]
 8011f8c:	f107 0020 	add.w	r0, r7, #32
 8011f90:	f7fd f935 	bl	800f1fe <_ZNSt12_Vector_baseImSaImEED1Ev>
 8011f94:	f107 0014 	add.w	r0, r7, #20
 8011f98:	f7fd f931 	bl	800f1fe <_ZNSt12_Vector_baseImSaImEED1Ev>
 8011f9c:	e73c      	b.n	8011e18 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x64>
	if (!(target_register->register_info.isArray && target_register->register_info.length == 0)) {
 8011f9e:	795a      	ldrb	r2, [r3, #5]
 8011fa0:	2a00      	cmp	r2, #0
 8011fa2:	d0ef      	beq.n	8011f84 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x1d0>
 8011fa4:	88db      	ldrh	r3, [r3, #6]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d1ec      	bne.n	8011f84 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x1d0>
	osSemaphoreRelease(RegistersSemaphore);
 8011faa:	f7fa f93b 	bl	800c224 <osSemaphoreRelease>
	return WriteRegister(ID, value.data(), value.size(), use_semaphore);
 8011fae:	2101      	movs	r1, #1
 8011fb0:	4630      	mov	r0, r6
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011fb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011fb6:	9100      	str	r1, [sp, #0]
 8011fb8:	4659      	mov	r1, fp
 8011fba:	1a9b      	subs	r3, r3, r2
 8011fbc:	f3c3 038f 	ubfx	r3, r3, #2, #16
 8011fc0:	f7ff fe59 	bl	8011c76 <_ZN9Registers13WriteRegisterImEEbtPT_tb>
 8011fc4:	e7e1      	b.n	8011f8a <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x1d6>
		response_content.data = std::vector<uint8_t>{ERROR};
 8011fc6:	21ff      	movs	r1, #255	@ 0xff
 8011fc8:	617a      	str	r2, [r7, #20]
 8011fca:	2201      	movs	r2, #1
 8011fcc:	7339      	strb	r1, [r7, #12]
 8011fce:	61ba      	str	r2, [r7, #24]
 8011fd0:	e893 0006 	ldmia.w	r3, {r1, r2}
 8011fd4:	e730      	b.n	8011e38 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x84>

08011fd6 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt>:
uint16_t Communication::ProcessCommand(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 8011fd6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fda:	468b      	mov	fp, r1
 8011fdc:	b0b1      	sub	sp, #196	@ 0xc4
 8011fde:	4607      	mov	r7, r0
 8011fe0:	4698      	mov	r8, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011fe2:	2600      	movs	r6, #0
	response_content.ack = true;
 8011fe4:	f04f 0a01 	mov.w	sl, #1
uint16_t Communication::ProcessCommand(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 8011fe8:	4615      	mov	r5, r2
 8011fea:	f8bd 90e8 	ldrh.w	r9, [sp, #232]	@ 0xe8
 8011fee:	961d      	str	r6, [sp, #116]	@ 0x74
 8011ff0:	ac2a      	add	r4, sp, #168	@ 0xa8
	response_content.ack = true;
 8011ff2:	f8ad a066 	strh.w	sl, [sp, #102]	@ 0x66
	response_content.element_register = element.element_register;
 8011ff6:	e9d3 0100 	ldrd	r0, r1, [r3]
	response_content.access = element.access;
 8011ffa:	7a1b      	ldrb	r3, [r3, #8]
	response_content.element_register = element.element_register;
 8011ffc:	9018      	str	r0, [sp, #96]	@ 0x60
 8011ffe:	f8ad 1064 	strh.w	r1, [sp, #100]	@ 0x64
	CommunicationLED(leds, message.interface);
 8012002:	6938      	ldr	r0, [r7, #16]
 8012004:	f89b 1000 	ldrb.w	r1, [fp]
	response_content.access = element.access;
 8012008:	f88d 3068 	strb.w	r3, [sp, #104]	@ 0x68
 801200c:	e9cd 661b 	strd	r6, r6, [sp, #108]	@ 0x6c
	CommunicationLED(leds, message.interface);
 8012010:	f7fc fa0d 	bl	800e42e <_Z16CommunicationLEDP4LEDSh>
	if (element.access == WRITE) {
 8012014:	f898 3008 	ldrb.w	r3, [r8, #8]
		return ProcessWrite<T>(message, response, response_content, element, start_index);
 8012018:	4659      	mov	r1, fp
	if (element.access == WRITE) {
 801201a:	bb1b      	cbnz	r3, 8012064 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x8e>
		return ProcessWrite<T>(message, response, response_content, element, start_index);
 801201c:	a81e      	add	r0, sp, #120	@ 0x78
 801201e:	f7fd fa88 	bl	800f532 <_ZN13MessageHeaderC1ERKS_>
 8012022:	a918      	add	r1, sp, #96	@ 0x60
 8012024:	a824      	add	r0, sp, #144	@ 0x90
 8012026:	f7fd fa71 	bl	800f50c <_ZN14MessageElementC1ERKS_>
 801202a:	4641      	mov	r1, r8
 801202c:	4620      	mov	r0, r4
 801202e:	f7fd fa6d 	bl	800f50c <_ZN14MessageElementC1ERKS_>
 8012032:	ab24      	add	r3, sp, #144	@ 0x90
 8012034:	462a      	mov	r2, r5
 8012036:	a91e      	add	r1, sp, #120	@ 0x78
 8012038:	4638      	mov	r0, r7
 801203a:	e9cd 4900 	strd	r4, r9, [sp]
 801203e:	f7ff feb9 	bl	8011db4 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t>
 8012042:	4681      	mov	r9, r0
      }
 8012044:	a82d      	add	r0, sp, #180	@ 0xb4
 8012046:	f7ee fc29 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801204a:	a827      	add	r0, sp, #156	@ 0x9c
 801204c:	f7ee fc26 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012050:	a81f      	add	r0, sp, #124	@ 0x7c
 8012052:	f7ee fc23 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012056:	a81b      	add	r0, sp, #108	@ 0x6c
 8012058:	f7ee fc20 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 801205c:	4648      	mov	r0, r9
 801205e:	b031      	add	sp, #196	@ 0xc4
 8012060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return ProcessRead<T>(message, response, response_content, element, start_index);
 8012064:	a813      	add	r0, sp, #76	@ 0x4c
 8012066:	f7fd fa64 	bl	800f532 <_ZN13MessageHeaderC1ERKS_>
 801206a:	a918      	add	r1, sp, #96	@ 0x60
 801206c:	a81e      	add	r0, sp, #120	@ 0x78
 801206e:	f7fd fa4d 	bl	800f50c <_ZN14MessageElementC1ERKS_>
 8012072:	4641      	mov	r1, r8
 8012074:	a824      	add	r0, sp, #144	@ 0x90
 8012076:	f7fd fa49 	bl	800f50c <_ZN14MessageElementC1ERKS_>
	*success = registers->ReadRegister<T>(element->element_register.address, &register_read, &length);
 801207a:	f8cd a000 	str.w	sl, [sp]
 801207e:	f10d 0316 	add.w	r3, sp, #22
 8012082:	aa06      	add	r2, sp, #24
 8012084:	f8bd 1090 	ldrh.w	r1, [sp, #144]	@ 0x90
 8012088:	6878      	ldr	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 801208a:	9609      	str	r6, [sp, #36]	@ 0x24
 801208c:	e9cd 6607 	strd	r6, r6, [sp, #28]
 8012090:	f7ff fd47 	bl	8011b22 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb>
	if (not *success)
 8012094:	4680      	mov	r8, r0
 8012096:	2800      	cmp	r0, #0
 8012098:	d040      	beq.n	801211c <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x146>
	std::vector<T> register_read_vector_cast = BuildTVector(*element, &register_read);
 801209a:	a924      	add	r1, sp, #144	@ 0x90
 801209c:	4620      	mov	r0, r4
 801209e:	f7fd fa35 	bl	800f50c <_ZN14MessageElementC1ERKS_>
	if (not element.element_register.isArray) {
 80120a2:	f89d 30ab 	ldrb.w	r3, [sp, #171]	@ 0xab
 80120a6:	960c      	str	r6, [sp, #48]	@ 0x30
 80120a8:	e9cd 660a 	strd	r6, r6, [sp, #40]	@ 0x28
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	f040 808b 	bne.w	80121c8 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x1f2>
		vector = std::vector<T>{*data};
 80120b2:	9b06      	ldr	r3, [sp, #24]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80120b4:	4650      	mov	r0, sl
 80120b6:	930d      	str	r3, [sp, #52]	@ 0x34
 80120b8:	f7fc fafe 	bl	800e6b8 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0>
			      _Category>::__copy_m(__first, __last, __result);
 80120bc:	a90e      	add	r1, sp, #56	@ 0x38
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80120be:	1d03      	adds	r3, r0, #4
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80120c0:	4602      	mov	r2, r0
 80120c2:	9010      	str	r0, [sp, #64]	@ 0x40
 80120c4:	a80d      	add	r0, sp, #52	@ 0x34
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80120c6:	9312      	str	r3, [sp, #72]	@ 0x48
 80120c8:	f7ff fd04 	bl	8011ad4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>
		vector = std::vector<T>(data, data + element.element_register.length);
 80120cc:	a910      	add	r1, sp, #64	@ 0x40
	  this->_M_impl._M_finish =
 80120ce:	9011      	str	r0, [sp, #68]	@ 0x44
 80120d0:	a80a      	add	r0, sp, #40	@ 0x28
 80120d2:	f7fd f89f 	bl	800f214 <_ZNSt6vectorImSaImEEaSEOS1_.isra.0>
      }
 80120d6:	a810      	add	r0, sp, #64	@ 0x40
 80120d8:	f7fd f891 	bl	800f1fe <_ZNSt12_Vector_baseImSaImEED1Ev>
 80120dc:	a82d      	add	r0, sp, #180	@ 0xb4
	: _M_start(), _M_finish(), _M_end_of_storage()
 80120de:	2600      	movs	r6, #0
      }
 80120e0:	f7ee fbdc 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	data = BuildVector<T>(register_read_vector_cast);
 80120e4:	a90a      	add	r1, sp, #40	@ 0x28
 80120e6:	a810      	add	r0, sp, #64	@ 0x40
 80120e8:	f7ff fd02 	bl	8011af0 <_ZNSt6vectorImSaImEEC1ERKS1_>
      : _M_current(__i) { }
 80120ec:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80120ee:	f8dd a040 	ldr.w	sl, [sp, #64]	@ 0x40
	: _M_start(), _M_finish(), _M_end_of_storage()
 80120f2:	960f      	str	r6, [sp, #60]	@ 0x3c
 80120f4:	9302      	str	r3, [sp, #8]
 80120f6:	e9cd 660d 	strd	r6, r6, [sp, #52]	@ 0x34
    for (T input : inputs) {
 80120fa:	9b02      	ldr	r3, [sp, #8]
 80120fc:	4553      	cmp	r3, sl
 80120fe:	f040 808d 	bne.w	801221c <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x246>
	data = BuildVector<T>(register_read_vector_cast);
 8012102:	a90d      	add	r1, sp, #52	@ 0x34
 8012104:	a807      	add	r0, sp, #28
 8012106:	f7fc fd8a 	bl	800ec1e <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 801210a:	a80d      	add	r0, sp, #52	@ 0x34
 801210c:	f7ee fbc6 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012110:	a810      	add	r0, sp, #64	@ 0x40
 8012112:	f7fd f874 	bl	800f1fe <_ZNSt12_Vector_baseImSaImEED1Ev>
 8012116:	a80a      	add	r0, sp, #40	@ 0x28
 8012118:	f7fd f871 	bl	800f1fe <_ZNSt12_Vector_baseImSaImEED1Ev>
	response_content.data = ReadElement<T>(&element, &success);
 801211c:	a821      	add	r0, sp, #132	@ 0x84
 801211e:	a907      	add	r1, sp, #28
 8012120:	f7fc fd7d 	bl	800ec1e <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 8012124:	a807      	add	r0, sp, #28
 8012126:	f7ee fbb9 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not success) {
 801212a:	f1b8 0f00 	cmp.w	r8, #0
 801212e:	d114      	bne.n	801215a <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x184>
		response_content.data = std::vector<uint8_t>{ERROR};
 8012130:	22ff      	movs	r2, #255	@ 0xff
		response_content.command = true; // this is an error flag for a read ack
 8012132:	2301      	movs	r3, #1
		response_content.data = std::vector<uint8_t>{ERROR};
 8012134:	4620      	mov	r0, r4
 8012136:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
 801213a:	aa0d      	add	r2, sp, #52	@ 0x34
		response_content.command = true; // this is an error flag for a read ack
 801213c:	f88d 307f 	strb.w	r3, [sp, #127]	@ 0x7f
		response_content.data = std::vector<uint8_t>{ERROR};
 8012140:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8012144:	461a      	mov	r2, r3
 8012146:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8012148:	f7fe fe56 	bl	8010df8 <_ZNSt6vectorIhSaIhEEC2ESt16initializer_listIhERKS0_.constprop.0.isra.0>
 801214c:	a821      	add	r0, sp, #132	@ 0x84
 801214e:	4621      	mov	r1, r4
 8012150:	f7fc fd65 	bl	800ec1e <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 8012154:	4620      	mov	r0, r4
 8012156:	f7ee fba1 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not BuildPayload(response, response_content) && response->payload.size() > 0) { // if no space available, send the data and then rebuild a new response
 801215a:	a91e      	add	r1, sp, #120	@ 0x78
 801215c:	4620      	mov	r0, r4
 801215e:	f7fd f9d5 	bl	800f50c <_ZN14MessageElementC1ERKS_>
 8012162:	4622      	mov	r2, r4
 8012164:	4629      	mov	r1, r5
 8012166:	4638      	mov	r0, r7
 8012168:	f7fe ff28 	bl	8010fbc <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 801216c:	2800      	cmp	r0, #0
 801216e:	f040 8081 	bne.w	8012274 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x29e>
 8012172:	e9d5 3601 	ldrd	r3, r6, [r5, #4]
 8012176:	1af6      	subs	r6, r6, r3
 8012178:	bf18      	it	ne
 801217a:	2601      	movne	r6, #1
 801217c:	a82d      	add	r0, sp, #180	@ 0xb4
 801217e:	f7ee fb8d 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012182:	b1ce      	cbz	r6, 80121b8 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x1e2>
		Send(*response);
 8012184:	4629      	mov	r1, r5
 8012186:	4620      	mov	r0, r4
 8012188:	f7fd f9d3 	bl	800f532 <_ZN13MessageHeaderC1ERKS_>
 801218c:	4621      	mov	r1, r4
 801218e:	4638      	mov	r0, r7
 8012190:	f7fd fabe 	bl	800f710 <_ZN13Communication4SendE13MessageHeader>
 8012194:	a82b      	add	r0, sp, #172	@ 0xac
 8012196:	f7ee fb81 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		response->payload.clear();
 801219a:	1d28      	adds	r0, r5, #4
 801219c:	f7fc fd56 	bl	800ec4c <_ZNSt6vectorIhSaIhEE5clearEv>
		BuildPayload(response, response_content);
 80121a0:	a91e      	add	r1, sp, #120	@ 0x78
 80121a2:	4620      	mov	r0, r4
 80121a4:	f7fd f9b2 	bl	800f50c <_ZN14MessageElementC1ERKS_>
 80121a8:	4622      	mov	r2, r4
 80121aa:	4629      	mov	r1, r5
 80121ac:	4638      	mov	r0, r7
 80121ae:	f7fe ff05 	bl	8010fbc <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 80121b2:	a82d      	add	r0, sp, #180	@ 0xb4
 80121b4:	f7ee fb72 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80121b8:	a827      	add	r0, sp, #156	@ 0x9c
 80121ba:	f7ee fb6f 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80121be:	a821      	add	r0, sp, #132	@ 0x84
 80121c0:	f7ee fb6c 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80121c4:	a814      	add	r0, sp, #80	@ 0x50
 80121c6:	e744      	b.n	8012052 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x7c>
	} else if (element.element_register.isArray && element.element_register.length > 0)
 80121c8:	f8bd 00ac 	ldrh.w	r0, [sp, #172]	@ 0xac
 80121cc:	b150      	cbz	r0, 80121e4 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x20e>
		vector = std::vector<T>(data, data + element.element_register.length);
 80121ce:	0086      	lsls	r6, r0, #2
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80121d0:	f7fc fa72 	bl	800e6b8 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0>
 80121d4:	4602      	mov	r2, r0
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80121d6:	1983      	adds	r3, r0, r6
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80121d8:	9010      	str	r0, [sp, #64]	@ 0x40
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80121da:	9312      	str	r3, [sp, #72]	@ 0x48
 80121dc:	ab06      	add	r3, sp, #24
 80121de:	1999      	adds	r1, r3, r6
 80121e0:	4618      	mov	r0, r3
 80121e2:	e771      	b.n	80120c8 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0xf2>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80121e4:	e9dd b106 	ldrd	fp, r1, [sp, #24]
	  if (__xlen > capacity())
 80121e8:	ebb1 0a0b 	subs.w	sl, r1, fp
 80121ec:	d011      	beq.n	8012212 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x23c>
	  pointer __result = this->_M_allocate(__n);
 80121ee:	ea4f 00aa 	mov.w	r0, sl, asr #2
 80121f2:	9102      	str	r1, [sp, #8]
 80121f4:	f7fc fa60 	bl	800e6b8 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0>
 80121f8:	4606      	mov	r6, r0
 80121fa:	4602      	mov	r2, r0
 80121fc:	9902      	ldr	r1, [sp, #8]
 80121fe:	4658      	mov	r0, fp
 8012200:	f7ff fc68 	bl	8011ad4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>
	      this->_M_impl._M_start = __tmp;
 8012204:	960a      	str	r6, [sp, #40]	@ 0x28
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8012206:	4456      	add	r6, sl
 8012208:	960c      	str	r6, [sp, #48]	@ 0x30
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 801220a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801220c:	4453      	add	r3, sl
 801220e:	930b      	str	r3, [sp, #44]	@ 0x2c
      return *this;
 8012210:	e764      	b.n	80120dc <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x106>
 8012212:	4652      	mov	r2, sl
 8012214:	4658      	mov	r0, fp
 8012216:	f7ff fc5d 	bl	8011ad4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801221a:	e7f6      	b.n	801220a <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x234>
    for (T input : inputs) {
 801221c:	f85a 2b04 	ldr.w	r2, [sl], #4
    std::memcpy(&reinterpreted_input, &input, sizeof(T)); // this is mandatory to get rid of the memory alignment problem. A simple cast can't work here
 8012220:	f04f 0b18 	mov.w	fp, #24
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012224:	962c      	str	r6, [sp, #176]	@ 0xb0
 8012226:	e9cd 662a 	strd	r6, r6, [sp, #168]	@ 0xa8
		data.push_back((uint8_t) ((reinterpreted_input >> ((type_length - 1 - index) << 3)) & 0xFF)); // previously (8 * (type_length - 1 - index))) & 0xFF))
 801222a:	f1cb 0c20 	rsb	ip, fp, #32
 801222e:	fa22 f10b 	lsr.w	r1, r2, fp
 8012232:	f1ab 0020 	sub.w	r0, fp, #32
	for (uint8_t index = 0; index < type_length; index++) {
 8012236:	f1ab 0b08 	sub.w	fp, fp, #8
		data.push_back((uint8_t) ((reinterpreted_input >> ((type_length - 1 - index) << 3)) & 0xFF)); // previously (8 * (type_length - 1 - index))) & 0xFF))
 801223a:	fa06 fc0c 	lsl.w	ip, r6, ip
 801223e:	9203      	str	r2, [sp, #12]
 8012240:	fa26 f000 	lsr.w	r0, r6, r0
 8012244:	ea41 010c 	orr.w	r1, r1, ip
 8012248:	4301      	orrs	r1, r0
      { emplace_back(std::move(__x)); }
 801224a:	4620      	mov	r0, r4
 801224c:	f88d 1015 	strb.w	r1, [sp, #21]
 8012250:	f10d 0115 	add.w	r1, sp, #21
 8012254:	f7fd f82e 	bl	800f2b4 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
	for (uint8_t index = 0; index < type_length; index++) {
 8012258:	f11b 0f08 	cmn.w	fp, #8
 801225c:	9a03      	ldr	r2, [sp, #12]
 801225e:	d1e4      	bne.n	801222a <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x254>
        data.insert(data.end(), single.begin(), single.end());
 8012260:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8012262:	a80d      	add	r0, sp, #52	@ 0x34
 8012264:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	@ 0xa8
 8012268:	f7fe fe34 	bl	8010ed4 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_>
      }
 801226c:	4620      	mov	r0, r4
 801226e:	f7ee fb15 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return *this;
 8012272:	e742      	b.n	80120fa <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x124>
	if (not BuildPayload(response, response_content) && response->payload.size() > 0) { // if no space available, send the data and then rebuild a new response
 8012274:	2600      	movs	r6, #0
 8012276:	e781      	b.n	801217c <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x1a6>

08012278 <_ZN13Communication14ProcessElementImEEt13MessageHeaderPS1_14MessageElementt>:
uint16_t Communication::ProcessElement(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 8012278:	b5f0      	push	{r4, r5, r6, r7, lr}
 801227a:	461c      	mov	r4, r3
 801227c:	b08f      	sub	sp, #60	@ 0x3c
	if (not element.ack && element.command) {
 801227e:	799b      	ldrb	r3, [r3, #6]
uint16_t Communication::ProcessElement(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 8012280:	4605      	mov	r5, r0
 8012282:	4617      	mov	r7, r2
 8012284:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
	if (not element.ack && element.command) {
 8012288:	b9cb      	cbnz	r3, 80122be <_ZN13Communication14ProcessElementImEEt13MessageHeaderPS1_14MessageElementt+0x46>
 801228a:	79e3      	ldrb	r3, [r4, #7]
		return ProcessCommand<T>(message, response, element, start_index);
 801228c:	a803      	add	r0, sp, #12
	if (not element.ack && element.command) {
 801228e:	b323      	cbz	r3, 80122da <_ZN13Communication14ProcessElementImEEt13MessageHeaderPS1_14MessageElementt+0x62>
		return ProcessCommand<T>(message, response, element, start_index);
 8012290:	f7fd f94f 	bl	800f532 <_ZN13MessageHeaderC1ERKS_>
 8012294:	4621      	mov	r1, r4
 8012296:	a808      	add	r0, sp, #32
 8012298:	f7fd f938 	bl	800f50c <_ZN14MessageElementC1ERKS_>
 801229c:	ab08      	add	r3, sp, #32
 801229e:	463a      	mov	r2, r7
 80122a0:	a903      	add	r1, sp, #12
 80122a2:	4628      	mov	r0, r5
 80122a4:	9600      	str	r6, [sp, #0]
 80122a6:	f7ff fe96 	bl	8011fd6 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt>
		return ProcessSubscriber<T>(message, element, start_index);
 80122aa:	4604      	mov	r4, r0
 80122ac:	a80b      	add	r0, sp, #44	@ 0x2c
 80122ae:	f7ee faf5 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80122b2:	a804      	add	r0, sp, #16
 80122b4:	f7ee faf2 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 80122b8:	4620      	mov	r0, r4
 80122ba:	b00f      	add	sp, #60	@ 0x3c
 80122bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ProcessService<T>(message, element, start_index);
 80122be:	a803      	add	r0, sp, #12
 80122c0:	f7fd f937 	bl	800f532 <_ZN13MessageHeaderC1ERKS_>
 80122c4:	4621      	mov	r1, r4
 80122c6:	a808      	add	r0, sp, #32
 80122c8:	f7fd f920 	bl	800f50c <_ZN14MessageElementC1ERKS_>
 80122cc:	4633      	mov	r3, r6
 80122ce:	aa08      	add	r2, sp, #32
 80122d0:	a903      	add	r1, sp, #12
 80122d2:	4628      	mov	r0, r5
 80122d4:	f7fe fa1b 	bl	801070e <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt>
 80122d8:	e7e7      	b.n	80122aa <_ZN13Communication14ProcessElementImEEt13MessageHeaderPS1_14MessageElementt+0x32>
		return ProcessSubscriber<T>(message, element, start_index);
 80122da:	f7fd f92a 	bl	800f532 <_ZN13MessageHeaderC1ERKS_>
 80122de:	4621      	mov	r1, r4
 80122e0:	a808      	add	r0, sp, #32
 80122e2:	f7fd f913 	bl	800f50c <_ZN14MessageElementC1ERKS_>
 80122e6:	4633      	mov	r3, r6
 80122e8:	aa08      	add	r2, sp, #32
 80122ea:	a903      	add	r1, sp, #12
 80122ec:	4628      	mov	r0, r5
 80122ee:	f7fe f98a 	bl	8010606 <_ZN13Communication17ProcessSubscriberImEEt13MessageHeader14MessageElementt>
 80122f2:	e7da      	b.n	80122aa <_ZN13Communication14ProcessElementImEEt13MessageHeaderPS1_14MessageElementt+0x32>

080122f4 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPajEET_S3_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 80122f4:	b510      	push	{r4, lr}
	  if (__n > 0)
 80122f6:	460a      	mov	r2, r1
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 80122f8:	4604      	mov	r4, r0
	  if (__n > 0)
 80122fa:	b141      	cbz	r1, 801230e <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPajEET_S3_T0_+0x1a>
 80122fc:	2100      	movs	r1, #0
      if (__n <= 0)
 80122fe:	2a01      	cmp	r2, #1
 8012300:	f800 1b01 	strb.w	r1, [r0], #1
 8012304:	d005      	beq.n	8012312 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPajEET_S3_T0_+0x1e>
      std::__fill_a(__first, __first + __n, __value);
 8012306:	4414      	add	r4, r2
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 8012308:	3a01      	subs	r2, #1
 801230a:	f007 fc2d 	bl	8019b68 <memset>
	}
 801230e:	4620      	mov	r0, r4
 8012310:	bd10      	pop	{r4, pc}
	      ++__first;
 8012312:	4604      	mov	r4, r0
 8012314:	e7fb      	b.n	801230e <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPajEET_S3_T0_+0x1a>
	...

08012318 <_ZNSt6vectorIaSaIaEE17_M_default_appendEj>:
    vector<_Tp, _Alloc>::
 8012318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801231c:	4604      	mov	r4, r0
      if (__n != 0)
 801231e:	460d      	mov	r5, r1
 8012320:	b159      	cbz	r1, 801233a <_ZNSt6vectorIaSaIaEE17_M_default_appendEj+0x22>
					 - this->_M_impl._M_finish);
 8012322:	6882      	ldr	r2, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012324:	e9d0 7300 	ldrd	r7, r3, [r0]
 8012328:	1ad2      	subs	r2, r2, r3
 801232a:	eba3 0807 	sub.w	r8, r3, r7
	  if (__navail >= __n)
 801232e:	428a      	cmp	r2, r1
 8012330:	d305      	bcc.n	801233e <_ZNSt6vectorIaSaIaEE17_M_default_appendEj+0x26>
	__uninit_default_n(__first, __n);
 8012332:	4618      	mov	r0, r3
 8012334:	f7ff ffde 	bl	80122f4 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPajEET_S3_T0_>
	      this->_M_impl._M_finish =
 8012338:	6060      	str	r0, [r4, #4]
    }
 801233a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		_M_check_len(__n, "vector::_M_default_append");
 801233e:	4a11      	ldr	r2, [pc, #68]	@ (8012384 <_ZNSt6vectorIaSaIaEE17_M_default_appendEj+0x6c>)
 8012340:	f7fd f887 	bl	800f452 <_ZNKSt6vectorIaSaIaEE12_M_check_lenEjPKc>
 8012344:	4681      	mov	r9, r0
	      pointer __new_start(this->_M_allocate(__len));
 8012346:	f7fc f9ac 	bl	800e6a2 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>
 801234a:	4629      	mov	r1, r5
 801234c:	4606      	mov	r6, r0
 801234e:	4440      	add	r0, r8
 8012350:	f7ff ffd0 	bl	80122f4 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPajEET_S3_T0_>
      if (__count > 0)
 8012354:	f1b8 0f00 	cmp.w	r8, #0
 8012358:	d00a      	beq.n	8012370 <_ZNSt6vectorIaSaIaEE17_M_default_appendEj+0x58>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801235a:	4642      	mov	r2, r8
 801235c:	4639      	mov	r1, r7
 801235e:	4630      	mov	r0, r6
 8012360:	f007 fbe8 	bl	8019b34 <memmove>
			    this->_M_impl._M_end_of_storage - __old_start);
 8012364:	68a1      	ldr	r1, [r4, #8]
 8012366:	4638      	mov	r0, r7
 8012368:	1bc9      	subs	r1, r1, r7
 801236a:	f007 fa31 	bl	80197d0 <_ZdlPvj>
 801236e:	e001      	b.n	8012374 <_ZNSt6vectorIaSaIaEE17_M_default_appendEj+0x5c>
	if (__p)
 8012370:	2f00      	cmp	r7, #0
 8012372:	d1f7      	bne.n	8012364 <_ZNSt6vectorIaSaIaEE17_M_default_appendEj+0x4c>
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8012374:	4445      	add	r5, r8
	      this->_M_impl._M_start = __new_start;
 8012376:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8012378:	4435      	add	r5, r6
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 801237a:	444e      	add	r6, r9
	      this->_M_impl._M_finish = __new_start + __size + __n;
 801237c:	6065      	str	r5, [r4, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 801237e:	60a6      	str	r6, [r4, #8]
    }
 8012380:	e7db      	b.n	801233a <_ZNSt6vectorIaSaIaEE17_M_default_appendEj+0x22>
 8012382:	bf00      	nop
 8012384:	0801a0ca 	.word	0x0801a0ca

08012388 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8012388:	b510      	push	{r4, lr}
	  if (_Num)
 801238a:	1a0c      	subs	r4, r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 801238c:	4613      	mov	r3, r2
	  if (_Num)
 801238e:	d005      	beq.n	801239c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_+0x14>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8012390:	4601      	mov	r1, r0
 8012392:	4622      	mov	r2, r4
 8012394:	4618      	mov	r0, r3
 8012396:	f007 fbcd 	bl	8019b34 <memmove>
 801239a:	4603      	mov	r3, r0
	}
 801239c:	1918      	adds	r0, r3, r4
 801239e:	bd10      	pop	{r4, pc}

080123a0 <_ZNSt6vectorIaSaIaEEC1ERKS1_>:
      vector(const vector& __x)
 80123a0:	b570      	push	{r4, r5, r6, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80123a2:	e9d1 3600 	ldrd	r3, r6, [r1]
      vector(const vector& __x)
 80123a6:	4604      	mov	r4, r0
 80123a8:	460d      	mov	r5, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80123aa:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 80123ac:	2300      	movs	r3, #0
 80123ae:	e9c0 3300 	strd	r3, r3, [r0]
 80123b2:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
 80123b4:	4630      	mov	r0, r6
 80123b6:	f7fc f974 	bl	800e6a2 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80123ba:	4406      	add	r6, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 80123bc:	4602      	mov	r2, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80123be:	60a6      	str	r6, [r4, #8]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 80123c0:	e9c4 0000 	strd	r0, r0, [r4]
			      _Category>::__copy_m(__first, __last, __result);
 80123c4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80123c8:	f7ff ffde 	bl	8012388 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
	this->_M_impl._M_finish =
 80123cc:	6060      	str	r0, [r4, #4]
      }
 80123ce:	4620      	mov	r0, r4
 80123d0:	bd70      	pop	{r4, r5, r6, pc}

080123d2 <_ZN9Registers13WriteRegisterIaEEbtPT_tb>:
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 80123d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123d6:	b085      	sub	sp, #20
 80123d8:	4606      	mov	r6, r0
 80123da:	4688      	mov	r8, r1
 80123dc:	461f      	mov	r7, r3
 80123de:	f89d 3038 	ldrb.w	r3, [sp, #56]	@ 0x38
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80123e2:	f04f 31ff 	mov.w	r1, #4294967295
 80123e6:	6800      	ldr	r0, [r0, #0]
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 80123e8:	4615      	mov	r5, r2
 80123ea:	9301      	str	r3, [sp, #4]
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80123ec:	f7f9 fee6 	bl	800c1bc <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80123f0:	f10d 020f 	add.w	r2, sp, #15
 80123f4:	4641      	mov	r1, r8
 80123f6:	4630      	mov	r0, r6
 80123f8:	f004 fe6b 	bl	80170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80123fc:	f89d 300f 	ldrb.w	r3, [sp, #15]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8012400:	4604      	mov	r4, r0
	if (!success) {
 8012402:	b933      	cbnz	r3, 8012412 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x40>
		osSemaphoreRelease(RegistersSemaphore);
 8012404:	6830      	ldr	r0, [r6, #0]
 8012406:	f7f9 ff0d 	bl	800c224 <osSemaphoreRelease>
		return false;
 801240a:	2000      	movs	r0, #0
}
 801240c:	b005      	add	sp, #20
 801240e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8012412:	f10d 000f 	add.w	r0, sp, #15
 8012416:	f7fc f9c3 	bl	800e7a0 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0>
	if (!success) {
 801241a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801241e:	2b00      	cmp	r3, #0
 8012420:	d0f0      	beq.n	8012404 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x32>
	if (target_register->register_info.type != registered_type) {
 8012422:	7923      	ldrb	r3, [r4, #4]
 8012424:	4283      	cmp	r3, r0
 8012426:	d1ed      	bne.n	8012404 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x32>
	if (callbacks[target_register->register_info.type] == NULL) {
 8012428:	3304      	adds	r3, #4
 801242a:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 801242e:	2800      	cmp	r0, #0
 8012430:	d0e8      	beq.n	8012404 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x32>
	if (target_register->access.write) {
 8012432:	7a23      	ldrb	r3, [r4, #8]
 8012434:	2b00      	cmp	r3, #0
 8012436:	d0e5      	beq.n	8012404 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x32>
		success = false;
 8012438:	2300      	movs	r3, #0
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 801243a:	8961      	ldrh	r1, [r4, #10]
		success = false;
 801243c:	f88d 300f 	strb.w	r3, [sp, #15]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8012440:	f7fc ffc8 	bl	800f3d4 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE2atEj>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8012444:	9b01      	ldr	r3, [sp, #4]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8012446:	f8d0 9008 	ldr.w	r9, [r0, #8]
 801244a:	e9d0 ba00 	ldrd	fp, sl, [r0]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 801244e:	b133      	cbz	r3, 801245e <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x8c>
 8012450:	68e3      	ldr	r3, [r4, #12]
 8012452:	b123      	cbz	r3, 801245e <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x8c>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 8012454:	f04f 31ff 	mov.w	r1, #4294967295
 8012458:	6818      	ldr	r0, [r3, #0]
 801245a:	f7f9 feaf 	bl	800c1bc <osSemaphoreAcquire>
		if (target_register->mode.pointer) {
 801245e:	7823      	ldrb	r3, [r4, #0]
 8012460:	b1db      	cbz	r3, 801249a <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xc8>
			success = true;
 8012462:	2301      	movs	r3, #1
 8012464:	f88d 300f 	strb.w	r3, [sp, #15]
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 8012468:	7963      	ldrb	r3, [r4, #5]
 801246a:	2b00      	cmp	r3, #0
 801246c:	d045      	beq.n	80124fa <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x128>
 801246e:	88e1      	ldrh	r1, [r4, #6]
 8012470:	2900      	cmp	r1, #0
 8012472:	d13c      	bne.n	80124ee <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x11c>
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8012474:	e9db 3100 	ldrd	r3, r1, [fp]
 8012478:	428b      	cmp	r3, r1
	    this->_M_impl._M_finish = __pos;
 801247a:	bf18      	it	ne
 801247c:	f8cb 3004 	strne.w	r3, [fp, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012480:	f8db 0004 	ldr.w	r0, [fp, #4]
 8012484:	1ac1      	subs	r1, r0, r3
	if (__new_size > size())
 8012486:	428f      	cmp	r7, r1
 8012488:	d924      	bls.n	80124d4 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x102>
	  _M_default_append(__new_size - size());
 801248a:	1a79      	subs	r1, r7, r1
 801248c:	4658      	mov	r0, fp
 801248e:	f7ff ff43 	bl	8012318 <_ZNSt6vectorIaSaIaEE17_M_default_appendEj>
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 8012492:	2300      	movs	r3, #0
				for (uint16_t index = 0; index < length; index++) {
 8012494:	b299      	uxth	r1, r3
 8012496:	42b9      	cmp	r1, r7
 8012498:	d323      	bcc.n	80124e2 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x110>
		if (target_register->mode.callbacks) {
 801249a:	7863      	ldrb	r3, [r4, #1]
 801249c:	b16b      	cbz	r3, 80124ba <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xe8>
			if (callbacks.write != NULL) {
 801249e:	f1b9 0f00 	cmp.w	r9, #0
 80124a2:	d00a      	beq.n	80124ba <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xe8>
				if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 80124a4:	7963      	ldrb	r3, [r4, #5]
 80124a6:	b36b      	cbz	r3, 8012504 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x132>
 80124a8:	88e3      	ldrh	r3, [r4, #6]
 80124aa:	b903      	cbnz	r3, 80124ae <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xdc>
					success = callbacks.write(callbacks.context, ID, value, length);
 80124ac:	463b      	mov	r3, r7
					success = callbacks.write(callbacks.context, ID, value, 1);
 80124ae:	462a      	mov	r2, r5
 80124b0:	4641      	mov	r1, r8
 80124b2:	4650      	mov	r0, sl
 80124b4:	47c8      	blx	r9
 80124b6:	f88d 000f 	strb.w	r0, [sp, #15]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 80124ba:	9b01      	ldr	r3, [sp, #4]
 80124bc:	b123      	cbz	r3, 80124c8 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xf6>
 80124be:	68e3      	ldr	r3, [r4, #12]
 80124c0:	b113      	cbz	r3, 80124c8 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xf6>
			osSemaphoreRelease(*(target_register->register_semaphore));
 80124c2:	6818      	ldr	r0, [r3, #0]
 80124c4:	f7f9 feae 	bl	800c224 <osSemaphoreRelease>
		osSemaphoreRelease(RegistersSemaphore);
 80124c8:	6830      	ldr	r0, [r6, #0]
 80124ca:	f7f9 feab 	bl	800c224 <osSemaphoreRelease>
		return success;
 80124ce:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80124d2:	e79b      	b.n	801240c <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x3a>
	else if (__new_size < size())
 80124d4:	d2dd      	bcs.n	8012492 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xc0>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 80124d6:	443b      	add	r3, r7
	if (size_type __n = this->_M_impl._M_finish - __pos)
 80124d8:	4298      	cmp	r0, r3
 80124da:	d0da      	beq.n	8012492 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xc0>
	    this->_M_impl._M_finish = __pos;
 80124dc:	f8cb 3004 	str.w	r3, [fp, #4]
 80124e0:	e7d7      	b.n	8012492 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xc0>
					(*register_vector)[index] = value[index];
 80124e2:	56e8      	ldrsb	r0, [r5, r3]
 80124e4:	f8db 1000 	ldr.w	r1, [fp]
 80124e8:	54c8      	strb	r0, [r1, r3]
				for (uint16_t index = 0; index < length; index++) {
 80124ea:	3301      	adds	r3, #1
 80124ec:	e7d2      	b.n	8012494 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xc2>
 80124ee:	465a      	mov	r2, fp
 80124f0:	4429      	add	r1, r5
 80124f2:	4628      	mov	r0, r5
 80124f4:	f7ff ff48 	bl	8012388 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80124f8:	e7cf      	b.n	801249a <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xc8>
				*(callbacks.pointer) = *value;
 80124fa:	f995 3000 	ldrsb.w	r3, [r5]
 80124fe:	f88b 3000 	strb.w	r3, [fp]
 8012502:	e7ca      	b.n	801249a <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xc8>
					success = callbacks.write(callbacks.context, ID, value, 1);
 8012504:	2301      	movs	r3, #1
 8012506:	e7d2      	b.n	80124ae <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xdc>

08012508 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t>:
uint16_t Communication::ProcessWrite(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 8012508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801250c:	b091      	sub	sp, #68	@ 0x44
 801250e:	4605      	mov	r5, r0
 8012510:	4691      	mov	r9, r2
 8012512:	4608      	mov	r0, r1
 8012514:	af02      	add	r7, sp, #8
 8012516:	469a      	mov	sl, r3
		T value = ExtractSingle<T>(message.payload, start_index, &success);
 8012518:	3104      	adds	r1, #4
uint16_t Communication::ProcessWrite(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 801251a:	f8d7 b060 	ldr.w	fp, [r7, #96]	@ 0x60
 801251e:	f107 060b 	add.w	r6, r7, #11
 8012522:	f8b7 4064 	ldrh.w	r4, [r7, #100]	@ 0x64
	if (not element.element_register.isArray) {
 8012526:	f89b 8003 	ldrb.w	r8, [fp, #3]
 801252a:	f1b8 0f00 	cmp.w	r8, #0
 801252e:	d173      	bne.n	8012618 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x110>
		T value = ExtractSingle<T>(message.payload, start_index, &success);
 8012530:	f107 0020 	add.w	r0, r7, #32
 8012534:	f7ee fa62 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8012538:	4632      	mov	r2, r6
 801253a:	4621      	mov	r1, r4
 801253c:	f107 0020 	add.w	r0, r7, #32
 8012540:	f7fc fa26 	bl	800e990 <_ZN13Communication13ExtractSingleIaEET_St6vectorIhSaIhEEtPb.isra.0>
 8012544:	7538      	strb	r0, [r7, #20]
      }
 8012546:	f107 0020 	add.w	r0, r7, #32
 801254a:	f7ee f9a7 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 801254e:	7afb      	ldrb	r3, [r7, #11]
 8012550:	b153      	cbz	r3, 8012568 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x60>
			success = registers->WriteRegister<T>(element.element_register.address, &value);
 8012552:	2301      	movs	r3, #1
 8012554:	f8bb 1000 	ldrh.w	r1, [fp]
 8012558:	f107 0214 	add.w	r2, r7, #20
 801255c:	9300      	str	r3, [sp, #0]
 801255e:	4643      	mov	r3, r8
 8012560:	6868      	ldr	r0, [r5, #4]
 8012562:	f7ff ff36 	bl	80123d2 <_ZN9Registers13WriteRegisterIaEEbtPT_tb>
 8012566:	72f8      	strb	r0, [r7, #11]
		length_to_extract = 1;
 8012568:	f04f 0801 	mov.w	r8, #1
	if (success)
 801256c:	7af9      	ldrb	r1, [r7, #11]
		response_content.data = std::vector<uint8_t>{OK};
 801256e:	f10a 060c 	add.w	r6, sl, #12
 8012572:	f107 0314 	add.w	r3, r7, #20
 8012576:	f107 020c 	add.w	r2, r7, #12
	if (success)
 801257a:	2900      	cmp	r1, #0
 801257c:	f000 80cb 	beq.w	8012716 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x20e>
		response_content.data = std::vector<uint8_t>{OK};
 8012580:	2100      	movs	r1, #0
 8012582:	60fb      	str	r3, [r7, #12]
 8012584:	2301      	movs	r3, #1
 8012586:	7539      	strb	r1, [r7, #20]
 8012588:	613b      	str	r3, [r7, #16]
 801258a:	ca06      	ldmia	r2, {r1, r2}
		response_content.data = std::vector<uint8_t>{ERROR};
 801258c:	f107 0020 	add.w	r0, r7, #32
 8012590:	f7fe fc32 	bl	8010df8 <_ZNSt6vectorIhSaIhEEC2ESt16initializer_listIhERKS0_.constprop.0.isra.0>
 8012594:	f107 0120 	add.w	r1, r7, #32
 8012598:	4630      	mov	r0, r6
 801259a:	f7fc fb40 	bl	800ec1e <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 801259e:	f107 0020 	add.w	r0, r7, #32
 80125a2:	f7ee f97b 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not BuildPayload(response, response_content)) {
 80125a6:	4651      	mov	r1, sl
 80125a8:	f107 0020 	add.w	r0, r7, #32
 80125ac:	f7fc ffae 	bl	800f50c <_ZN14MessageElementC1ERKS_>
 80125b0:	f107 0220 	add.w	r2, r7, #32
 80125b4:	4649      	mov	r1, r9
 80125b6:	4628      	mov	r0, r5
 80125b8:	f7fe fd00 	bl	8010fbc <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 80125bc:	4606      	mov	r6, r0
 80125be:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80125c2:	f7ee f96b 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80125c6:	bb06      	cbnz	r6, 801260a <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x102>
		Send(*response);
 80125c8:	4649      	mov	r1, r9
 80125ca:	f107 0020 	add.w	r0, r7, #32
 80125ce:	f7fc ffb0 	bl	800f532 <_ZN13MessageHeaderC1ERKS_>
 80125d2:	f107 0120 	add.w	r1, r7, #32
 80125d6:	4628      	mov	r0, r5
 80125d8:	f7fd f89a 	bl	800f710 <_ZN13Communication4SendE13MessageHeader>
 80125dc:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80125e0:	f7ee f95c 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		response->payload.clear();
 80125e4:	f109 0004 	add.w	r0, r9, #4
 80125e8:	f7fc fb30 	bl	800ec4c <_ZNSt6vectorIhSaIhEE5clearEv>
		BuildPayload(response, response_content);
 80125ec:	4651      	mov	r1, sl
 80125ee:	f107 0020 	add.w	r0, r7, #32
 80125f2:	f7fc ff8b 	bl	800f50c <_ZN14MessageElementC1ERKS_>
 80125f6:	f107 0220 	add.w	r2, r7, #32
 80125fa:	4649      	mov	r1, r9
 80125fc:	4628      	mov	r0, r5
 80125fe:	f7fe fcdd 	bl	8010fbc <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8012602:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8012606:	f7ee f949 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return start_index + sizeof(T) * length_to_extract;
 801260a:	eb04 0008 	add.w	r0, r4, r8
}
 801260e:	373c      	adds	r7, #60	@ 0x3c
 8012610:	b280      	uxth	r0, r0
 8012612:	46bd      	mov	sp, r7
 8012614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (element.element_register.isArray && element.element_register.length > 0) {
 8012618:	f8bb 8004 	ldrh.w	r8, [fp, #4]
 801261c:	f1b8 0f00 	cmp.w	r8, #0
 8012620:	d029      	beq.n	8012676 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x16e>
		T values[length_to_extract];
 8012622:	f108 0307 	add.w	r3, r8, #7
 8012626:	466a      	mov	r2, sp
	} else if (element.element_register.isArray && element.element_register.length == 0) {
 8012628:	f8c7 d000 	str.w	sp, [r7]
		ExtractArray<T>(values, message.payload, start_index, length_to_extract, &success);
 801262c:	f107 0020 	add.w	r0, r7, #32
		T values[length_to_extract];
 8012630:	08db      	lsrs	r3, r3, #3
 8012632:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 8012636:	469d      	mov	sp, r3
 8012638:	ab02      	add	r3, sp, #8
 801263a:	607b      	str	r3, [r7, #4]
		ExtractArray<T>(values, message.payload, start_index, length_to_extract, &success);
 801263c:	f7ee f9de 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8012640:	9600      	str	r6, [sp, #0]
 8012642:	4643      	mov	r3, r8
 8012644:	4622      	mov	r2, r4
 8012646:	f107 0120 	add.w	r1, r7, #32
 801264a:	6878      	ldr	r0, [r7, #4]
 801264c:	f7fd fd64 	bl	8010118 <_ZN13Communication12ExtractArrayIaEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 8012650:	f107 0020 	add.w	r0, r7, #32
 8012654:	f7ee f922 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8012658:	7afb      	ldrb	r3, [r7, #11]
 801265a:	b14b      	cbz	r3, 8012670 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x168>
			success = registers->WriteRegister<T>(element.element_register.address, values);
 801265c:	2301      	movs	r3, #1
 801265e:	f8bb 1000 	ldrh.w	r1, [fp]
 8012662:	9300      	str	r3, [sp, #0]
 8012664:	2300      	movs	r3, #0
 8012666:	687a      	ldr	r2, [r7, #4]
 8012668:	6868      	ldr	r0, [r5, #4]
 801266a:	f7ff feb2 	bl	80123d2 <_ZN9Registers13WriteRegisterIaEEbtPT_tb>
 801266e:	72f8      	strb	r0, [r7, #11]
 8012670:	f8d7 d000 	ldr.w	sp, [r7]
	} else if (element.element_register.isArray && element.element_register.length == 0) {
 8012674:	e77a      	b.n	801256c <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x64>
		length_to_extract = message.payload[start_index];
 8012676:	6843      	ldr	r3, [r0, #4]
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8012678:	f107 0020 	add.w	r0, r7, #32
		length_to_extract = message.payload[start_index];
 801267c:	f813 8004 	ldrb.w	r8, [r3, r4]
		start_index++;
 8012680:	3401      	adds	r4, #1
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8012682:	f7ee f9bb 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8012686:	f107 0120 	add.w	r1, r7, #32
		start_index++;
 801268a:	b2a4      	uxth	r4, r4
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 801268c:	4643      	mov	r3, r8
 801268e:	f107 0014 	add.w	r0, r7, #20
 8012692:	9600      	str	r6, [sp, #0]
 8012694:	4622      	mov	r2, r4
 8012696:	f7fd fce5 	bl	8010064 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 801269a:	f107 0020 	add.w	r0, r7, #32
 801269e:	f7ee f8fd 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 80126a2:	7afb      	ldrb	r3, [r7, #11]
 80126a4:	b1fb      	cbz	r3, 80126e6 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x1de>
			success = registers->WriteVectorRegister<T>(element.element_register.address, values); // previously &values
 80126a6:	686e      	ldr	r6, [r5, #4]
 80126a8:	f107 0114 	add.w	r1, r7, #20
 80126ac:	f8bb b000 	ldrh.w	fp, [fp]
 80126b0:	f107 0020 	add.w	r0, r7, #32
 80126b4:	f7ff fe74 	bl	80123a0 <_ZNSt6vectorIaSaIaEEC1ERKS1_>
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80126b8:	f04f 31ff 	mov.w	r1, #4294967295
 80126bc:	6830      	ldr	r0, [r6, #0]
 80126be:	f7f9 fd7d 	bl	800c1bc <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80126c2:	f107 020c 	add.w	r2, r7, #12
 80126c6:	4659      	mov	r1, fp
 80126c8:	4630      	mov	r0, r6
 80126ca:	f004 fd02 	bl	80170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80126ce:	7b3a      	ldrb	r2, [r7, #12]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80126d0:	4603      	mov	r3, r0
		osSemaphoreRelease(RegistersSemaphore);
 80126d2:	6830      	ldr	r0, [r6, #0]
	if (!success) {
 80126d4:	b962      	cbnz	r2, 80126f0 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x1e8>
		osSemaphoreRelease(RegistersSemaphore);
 80126d6:	f7f9 fda5 	bl	800c224 <osSemaphoreRelease>
		return false;
 80126da:	2000      	movs	r0, #0
 80126dc:	72f8      	strb	r0, [r7, #11]
 80126de:	f107 0020 	add.w	r0, r7, #32
 80126e2:	f7fc fdae 	bl	800f242 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 80126e6:	f107 0014 	add.w	r0, r7, #20
 80126ea:	f7fc fdaa 	bl	800f242 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 80126ee:	e73d      	b.n	801256c <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x64>
	if (!(target_register->register_info.isArray && target_register->register_info.length == 0)) {
 80126f0:	795a      	ldrb	r2, [r3, #5]
 80126f2:	2a00      	cmp	r2, #0
 80126f4:	d0ef      	beq.n	80126d6 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x1ce>
 80126f6:	88db      	ldrh	r3, [r3, #6]
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d1ec      	bne.n	80126d6 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x1ce>
	osSemaphoreRelease(RegistersSemaphore);
 80126fc:	f7f9 fd92 	bl	800c224 <osSemaphoreRelease>
	return WriteRegister(ID, value.data(), value.size(), use_semaphore);
 8012700:	2101      	movs	r1, #1
 8012702:	4630      	mov	r0, r6
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012704:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8012708:	9100      	str	r1, [sp, #0]
 801270a:	4659      	mov	r1, fp
 801270c:	1a9b      	subs	r3, r3, r2
 801270e:	b29b      	uxth	r3, r3
 8012710:	f7ff fe5f 	bl	80123d2 <_ZN9Registers13WriteRegisterIaEEbtPT_tb>
 8012714:	e7e2      	b.n	80126dc <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x1d4>
		response_content.data = std::vector<uint8_t>{ERROR};
 8012716:	21ff      	movs	r1, #255	@ 0xff
 8012718:	617a      	str	r2, [r7, #20]
 801271a:	2201      	movs	r2, #1
 801271c:	7339      	strb	r1, [r7, #12]
 801271e:	61ba      	str	r2, [r7, #24]
 8012720:	e893 0006 	ldmia.w	r3, {r1, r2}
 8012724:	e732      	b.n	801258c <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x84>

08012726 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt>:
uint16_t Communication::ProcessCommand(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 8012726:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801272a:	460f      	mov	r7, r1
 801272c:	b0b1      	sub	sp, #196	@ 0xc4
 801272e:	461c      	mov	r4, r3
 8012730:	4680      	mov	r8, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012732:	f04f 0900 	mov.w	r9, #0
 8012736:	f8bd a0e8 	ldrh.w	sl, [sp, #232]	@ 0xe8
 801273a:	9203      	str	r2, [sp, #12]
 801273c:	ad2a      	add	r5, sp, #168	@ 0xa8
 801273e:	f8cd 9074 	str.w	r9, [sp, #116]	@ 0x74
	response_content.element_register = element.element_register;
 8012742:	e9d3 0100 	ldrd	r0, r1, [r3]
	response_content.ack = true;
 8012746:	2301      	movs	r3, #1
	response_content.element_register = element.element_register;
 8012748:	9018      	str	r0, [sp, #96]	@ 0x60
	response_content.ack = true;
 801274a:	f8ad 3066 	strh.w	r3, [sp, #102]	@ 0x66
	response_content.access = element.access;
 801274e:	7a23      	ldrb	r3, [r4, #8]
	response_content.element_register = element.element_register;
 8012750:	f8ad 1064 	strh.w	r1, [sp, #100]	@ 0x64
	CommunicationLED(leds, message.interface);
 8012754:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8012758:	7839      	ldrb	r1, [r7, #0]
	response_content.access = element.access;
 801275a:	f88d 3068 	strb.w	r3, [sp, #104]	@ 0x68
 801275e:	e9cd 991b 	strd	r9, r9, [sp, #108]	@ 0x6c
	CommunicationLED(leds, message.interface);
 8012762:	f7fb fe64 	bl	800e42e <_Z16CommunicationLEDP4LEDSh>
	if (element.access == WRITE) {
 8012766:	7a23      	ldrb	r3, [r4, #8]
		return ProcessWrite<T>(message, response, response_content, element, start_index);
 8012768:	4639      	mov	r1, r7
	if (element.access == WRITE) {
 801276a:	bb1b      	cbnz	r3, 80127b4 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x8e>
		return ProcessWrite<T>(message, response, response_content, element, start_index);
 801276c:	a81e      	add	r0, sp, #120	@ 0x78
 801276e:	f7fc fee0 	bl	800f532 <_ZN13MessageHeaderC1ERKS_>
 8012772:	a918      	add	r1, sp, #96	@ 0x60
 8012774:	a824      	add	r0, sp, #144	@ 0x90
 8012776:	f7fc fec9 	bl	800f50c <_ZN14MessageElementC1ERKS_>
 801277a:	4621      	mov	r1, r4
 801277c:	4628      	mov	r0, r5
 801277e:	f7fc fec5 	bl	800f50c <_ZN14MessageElementC1ERKS_>
 8012782:	ab24      	add	r3, sp, #144	@ 0x90
 8012784:	9a03      	ldr	r2, [sp, #12]
 8012786:	a91e      	add	r1, sp, #120	@ 0x78
 8012788:	4640      	mov	r0, r8
 801278a:	e9cd 5a00 	strd	r5, sl, [sp]
 801278e:	f7ff febb 	bl	8012508 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t>
 8012792:	4682      	mov	sl, r0
      }
 8012794:	a82d      	add	r0, sp, #180	@ 0xb4
 8012796:	f7ee f881 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801279a:	a827      	add	r0, sp, #156	@ 0x9c
 801279c:	f7ee f87e 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80127a0:	a81f      	add	r0, sp, #124	@ 0x7c
 80127a2:	f7ee f87b 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80127a6:	a81b      	add	r0, sp, #108	@ 0x6c
 80127a8:	f7ee f878 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 80127ac:	4650      	mov	r0, sl
 80127ae:	b031      	add	sp, #196	@ 0xc4
 80127b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return ProcessRead<T>(message, response, response_content, element, start_index);
 80127b4:	a813      	add	r0, sp, #76	@ 0x4c
 80127b6:	f7fc febc 	bl	800f532 <_ZN13MessageHeaderC1ERKS_>
 80127ba:	a918      	add	r1, sp, #96	@ 0x60
 80127bc:	a81e      	add	r0, sp, #120	@ 0x78
 80127be:	f7fc fea5 	bl	800f50c <_ZN14MessageElementC1ERKS_>
 80127c2:	4621      	mov	r1, r4
 80127c4:	a824      	add	r0, sp, #144	@ 0x90
 80127c6:	f7fc fea1 	bl	800f50c <_ZN14MessageElementC1ERKS_>
uint16_t Communication::ProcessRead(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 80127ca:	f8d8 7004 	ldr.w	r7, [r8, #4]
	*success = registers->ReadRegister<T>(element->element_register.address, &register_read, &length);
 80127ce:	f8bd b090 	ldrh.w	fp, [sp, #144]	@ 0x90
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80127d2:	f04f 31ff 	mov.w	r1, #4294967295
 80127d6:	6838      	ldr	r0, [r7, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80127d8:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 80127dc:	e9cd 9907 	strd	r9, r9, [sp, #28]
 80127e0:	f7f9 fcec 	bl	800c1bc <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80127e4:	462a      	mov	r2, r5
 80127e6:	4659      	mov	r1, fp
 80127e8:	4638      	mov	r0, r7
 80127ea:	f004 fc72 	bl	80170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80127ee:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80127f2:	4604      	mov	r4, r0
	if (!success) {
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d15b      	bne.n	80128b0 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x18a>
		osSemaphoreRelease(RegistersSemaphore);
 80127f8:	6838      	ldr	r0, [r7, #0]
 80127fa:	f7f9 fd13 	bl	800c224 <osSemaphoreRelease>
		return false;
 80127fe:	2300      	movs	r3, #0
 8012800:	9304      	str	r3, [sp, #16]
	response_content.data = ReadElement<T>(&element, &success);
 8012802:	a907      	add	r1, sp, #28
 8012804:	a821      	add	r0, sp, #132	@ 0x84
 8012806:	f7fc fa0a 	bl	800ec1e <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 801280a:	a807      	add	r0, sp, #28
 801280c:	f7ee f846 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not success) {
 8012810:	9b04      	ldr	r3, [sp, #16]
 8012812:	b9a3      	cbnz	r3, 801283e <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x118>
		response_content.data = std::vector<uint8_t>{ERROR};
 8012814:	22ff      	movs	r2, #255	@ 0xff
		response_content.command = true; // this is an error flag for a read ack
 8012816:	2301      	movs	r3, #1
		response_content.data = std::vector<uint8_t>{ERROR};
 8012818:	4628      	mov	r0, r5
 801281a:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
 801281e:	aa0d      	add	r2, sp, #52	@ 0x34
		response_content.command = true; // this is an error flag for a read ack
 8012820:	f88d 307f 	strb.w	r3, [sp, #127]	@ 0x7f
		response_content.data = std::vector<uint8_t>{ERROR};
 8012824:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8012828:	461a      	mov	r2, r3
 801282a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801282c:	f7fe fae4 	bl	8010df8 <_ZNSt6vectorIhSaIhEEC2ESt16initializer_listIhERKS0_.constprop.0.isra.0>
 8012830:	a821      	add	r0, sp, #132	@ 0x84
 8012832:	4629      	mov	r1, r5
 8012834:	f7fc f9f3 	bl	800ec1e <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 8012838:	4628      	mov	r0, r5
 801283a:	f7ee f82f 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not BuildPayload(response, response_content) && response->payload.size() > 0) { // if no space available, send the data and then rebuild a new response
 801283e:	a91e      	add	r1, sp, #120	@ 0x78
 8012840:	4628      	mov	r0, r5
 8012842:	f7fc fe63 	bl	800f50c <_ZN14MessageElementC1ERKS_>
 8012846:	462a      	mov	r2, r5
 8012848:	9903      	ldr	r1, [sp, #12]
 801284a:	4640      	mov	r0, r8
 801284c:	f7fe fbb6 	bl	8010fbc <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8012850:	2800      	cmp	r0, #0
 8012852:	f040 812e 	bne.w	8012ab2 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x38c>
 8012856:	9b03      	ldr	r3, [sp, #12]
 8012858:	e9d3 3401 	ldrd	r3, r4, [r3, #4]
 801285c:	1ae4      	subs	r4, r4, r3
 801285e:	bf18      	it	ne
 8012860:	2401      	movne	r4, #1
 8012862:	a82d      	add	r0, sp, #180	@ 0xb4
 8012864:	f7ee f81a 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012868:	b1d4      	cbz	r4, 80128a0 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x17a>
		Send(*response);
 801286a:	9903      	ldr	r1, [sp, #12]
 801286c:	a82a      	add	r0, sp, #168	@ 0xa8
 801286e:	f7fc fe60 	bl	800f532 <_ZN13MessageHeaderC1ERKS_>
 8012872:	a92a      	add	r1, sp, #168	@ 0xa8
 8012874:	4640      	mov	r0, r8
 8012876:	f7fc ff4b 	bl	800f710 <_ZN13Communication4SendE13MessageHeader>
 801287a:	a82b      	add	r0, sp, #172	@ 0xac
 801287c:	f7ee f80e 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		response->payload.clear();
 8012880:	9b03      	ldr	r3, [sp, #12]
 8012882:	1d18      	adds	r0, r3, #4
 8012884:	f7fc f9e2 	bl	800ec4c <_ZNSt6vectorIhSaIhEE5clearEv>
		BuildPayload(response, response_content);
 8012888:	a91e      	add	r1, sp, #120	@ 0x78
 801288a:	a82a      	add	r0, sp, #168	@ 0xa8
 801288c:	f7fc fe3e 	bl	800f50c <_ZN14MessageElementC1ERKS_>
 8012890:	aa2a      	add	r2, sp, #168	@ 0xa8
 8012892:	9903      	ldr	r1, [sp, #12]
 8012894:	4640      	mov	r0, r8
 8012896:	f7fe fb91 	bl	8010fbc <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 801289a:	a82d      	add	r0, sp, #180	@ 0xb4
 801289c:	f7ed fffe 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80128a0:	a827      	add	r0, sp, #156	@ 0x9c
 80128a2:	f7ed fffb 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80128a6:	a821      	add	r0, sp, #132	@ 0x84
 80128a8:	f7ed fff8 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80128ac:	a814      	add	r0, sp, #80	@ 0x50
 80128ae:	e778      	b.n	80127a2 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x7c>
	uint8_t registered_type = GetTypeID<T>(&success);
 80128b0:	4628      	mov	r0, r5
 80128b2:	f7fb ff75 	bl	800e7a0 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0>
	if (!success) {
 80128b6:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
 80128ba:	9304      	str	r3, [sp, #16]
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d09b      	beq.n	80127f8 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0xd2>
	if (target_register->register_info.type != registered_type) {
 80128c0:	7923      	ldrb	r3, [r4, #4]
 80128c2:	4298      	cmp	r0, r3
 80128c4:	d198      	bne.n	80127f8 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0xd2>
	if (callbacks[target_register->register_info.type] == NULL) {
 80128c6:	3004      	adds	r0, #4
 80128c8:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 80128cc:	2800      	cmp	r0, #0
 80128ce:	d093      	beq.n	80127f8 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0xd2>
	if (target_register->access.read) {
 80128d0:	7a63      	ldrb	r3, [r4, #9]
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d031      	beq.n	801293a <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x214>
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 80128d6:	8961      	ldrh	r1, [r4, #10]
		success = false; // false by default to use pointer mode if the callback doesn't update the flag
 80128d8:	f88d 90a8 	strb.w	r9, [sp, #168]	@ 0xa8
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 80128dc:	f7fc fd7a 	bl	800f3d4 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE2atEj>
 80128e0:	e9d0 9300 	ldrd	r9, r3, [r0]
 80128e4:	9305      	str	r3, [sp, #20]
 80128e6:	68c3      	ldr	r3, [r0, #12]
 80128e8:	461e      	mov	r6, r3
		if (use_semaphore && target_register->register_semaphore != NULL) {
 80128ea:	68e3      	ldr	r3, [r4, #12]
 80128ec:	b123      	cbz	r3, 80128f8 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x1d2>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 80128ee:	f04f 31ff 	mov.w	r1, #4294967295
 80128f2:	6818      	ldr	r0, [r3, #0]
 80128f4:	f7f9 fc62 	bl	800c1bc <osSemaphoreAcquire>
		if (target_register->mode.callbacks) {
 80128f8:	7863      	ldrb	r3, [r4, #1]
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d161      	bne.n	80129c2 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x29c>
		if (not success && target_register->mode.pointer) {
 80128fe:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
 8012902:	b9ab      	cbnz	r3, 8012930 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x20a>
 8012904:	7823      	ldrb	r3, [r4, #0]
 8012906:	b19b      	cbz	r3, 8012930 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x20a>
			success = true;
 8012908:	2301      	movs	r3, #1
 801290a:	f88d 30a8 	strb.w	r3, [sp, #168]	@ 0xa8
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 801290e:	7962      	ldrb	r2, [r4, #5]
 8012910:	2a00      	cmp	r2, #0
 8012912:	f000 8088 	beq.w	8012a26 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x300>
 8012916:	88e1      	ldrh	r1, [r4, #6]
 8012918:	2900      	cmp	r1, #0
 801291a:	d17c      	bne.n	8012a16 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x2f0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801291c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8012920:	1a9b      	subs	r3, r3, r2
 8012922:	aa06      	add	r2, sp, #24
				*length = register_vector->size();
 8012924:	b29b      	uxth	r3, r3
 8012926:	f8ad 301a 	strh.w	r3, [sp, #26]
					for (uint16_t index = 0; index < *length; index++) {
 801292a:	b288      	uxth	r0, r1
 801292c:	4283      	cmp	r3, r0
 801292e:	d86b      	bhi.n	8012a08 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x2e2>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8012930:	68e3      	ldr	r3, [r4, #12]
 8012932:	b113      	cbz	r3, 801293a <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x214>
			osSemaphoreRelease(*(target_register->register_semaphore));
 8012934:	6818      	ldr	r0, [r3, #0]
 8012936:	f7f9 fc75 	bl	800c224 <osSemaphoreRelease>
	osSemaphoreRelease(RegistersSemaphore);
 801293a:	6838      	ldr	r0, [r7, #0]
 801293c:	f7f9 fc72 	bl	800c224 <osSemaphoreRelease>
	std::vector<T> register_read_vector_cast = BuildTVector(*element, &register_read);
 8012940:	a924      	add	r1, sp, #144	@ 0x90
 8012942:	4628      	mov	r0, r5
 8012944:	f7fc fde2 	bl	800f50c <_ZN14MessageElementC1ERKS_>
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012948:	2300      	movs	r3, #0
 801294a:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 801294e:	930c      	str	r3, [sp, #48]	@ 0x30
	if (not element.element_register.isArray) {
 8012950:	f89d 30ab 	ldrb.w	r3, [sp, #171]	@ 0xab
 8012954:	2b00      	cmp	r3, #0
 8012956:	d16d      	bne.n	8012a34 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x30e>
		vector = std::vector<T>{*data};
 8012958:	f89d 3018 	ldrb.w	r3, [sp, #24]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 801295c:	2001      	movs	r0, #1
 801295e:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8012962:	f7fb fe9e 	bl	800e6a2 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>
			      _Category>::__copy_m(__first, __last, __result);
 8012966:	f10d 0135 	add.w	r1, sp, #53	@ 0x35
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801296a:	1c43      	adds	r3, r0, #1
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 801296c:	4602      	mov	r2, r0
 801296e:	9010      	str	r0, [sp, #64]	@ 0x40
 8012970:	a80d      	add	r0, sp, #52	@ 0x34
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8012972:	9312      	str	r3, [sp, #72]	@ 0x48
 8012974:	f7ff fd08 	bl	8012388 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
		vector = std::vector<T>(data, data + element.element_register.length);
 8012978:	a910      	add	r1, sp, #64	@ 0x40
	  this->_M_impl._M_finish =
 801297a:	9011      	str	r0, [sp, #68]	@ 0x44
 801297c:	a80a      	add	r0, sp, #40	@ 0x28
 801297e:	f7fc fc6a 	bl	800f256 <_ZNSt6vectorIaSaIaEEaSEOS1_.isra.0>
      }
 8012982:	a810      	add	r0, sp, #64	@ 0x40
 8012984:	f7fc fc5d 	bl	800f242 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 8012988:	a82d      	add	r0, sp, #180	@ 0xb4
	: _M_start(), _M_finish(), _M_end_of_storage()
 801298a:	2400      	movs	r4, #0
      }
 801298c:	f7ed ff86 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	data = BuildVector<T>(register_read_vector_cast);
 8012990:	a90a      	add	r1, sp, #40	@ 0x28
 8012992:	a810      	add	r0, sp, #64	@ 0x40
 8012994:	f7ff fd04 	bl	80123a0 <_ZNSt6vectorIaSaIaEEC1ERKS1_>
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012998:	940f      	str	r4, [sp, #60]	@ 0x3c
      : _M_current(__i) { }
 801299a:	e9dd 7910 	ldrd	r7, r9, [sp, #64]	@ 0x40
 801299e:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
    for (T input : inputs) {
 80129a2:	45b9      	cmp	r9, r7
 80129a4:	d16f      	bne.n	8012a86 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x360>
	data = BuildVector<T>(register_read_vector_cast);
 80129a6:	a90d      	add	r1, sp, #52	@ 0x34
 80129a8:	a807      	add	r0, sp, #28
 80129aa:	f7fc f938 	bl	800ec1e <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 80129ae:	a80d      	add	r0, sp, #52	@ 0x34
 80129b0:	f7ed ff74 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80129b4:	a810      	add	r0, sp, #64	@ 0x40
 80129b6:	f7fc fc44 	bl	800f242 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 80129ba:	a80a      	add	r0, sp, #40	@ 0x28
 80129bc:	f7fc fc41 	bl	800f242 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 80129c0:	e71f      	b.n	8012802 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0xdc>
				*callback_output = output;
 80129c2:	2200      	movs	r2, #0
 80129c4:	ab06      	add	r3, sp, #24
 80129c6:	6013      	str	r3, [r2, #0]
			if (callbacks.read != NULL) {
 80129c8:	2e00      	cmp	r6, #0
 80129ca:	d098      	beq.n	80128fe <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x1d8>
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 80129cc:	f10d 031a 	add.w	r3, sp, #26
 80129d0:	4659      	mov	r1, fp
 80129d2:	9805      	ldr	r0, [sp, #20]
 80129d4:	47b0      	blx	r6
 80129d6:	f88d 00a8 	strb.w	r0, [sp, #168]	@ 0xa8
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 80129da:	7963      	ldrb	r3, [r4, #5]
 80129dc:	b143      	cbz	r3, 80129f0 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x2ca>
 80129de:	88e3      	ldrh	r3, [r4, #6]
 80129e0:	b10b      	cbz	r3, 80129e6 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x2c0>
					*length = 1;
 80129e2:	f8ad 301a 	strh.w	r3, [sp, #26]
					for (uint16_t index = 0; index < *length; index++) {
 80129e6:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 80129ea:	a906      	add	r1, sp, #24
 80129ec:	2300      	movs	r3, #0
 80129ee:	e007      	b.n	8012a00 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x2da>
					*length = 1;
 80129f0:	2301      	movs	r3, #1
 80129f2:	e7f6      	b.n	80129e2 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x2bc>
						output[index] = (*callback_output )[index];
 80129f4:	2200      	movs	r2, #0
 80129f6:	6812      	ldr	r2, [r2, #0]
 80129f8:	5cd2      	ldrb	r2, [r2, r3]
 80129fa:	3301      	adds	r3, #1
 80129fc:	f801 2b01 	strb.w	r2, [r1], #1
					for (uint16_t index = 0; index < *length; index++) {
 8012a00:	b29a      	uxth	r2, r3
 8012a02:	4290      	cmp	r0, r2
 8012a04:	d8f6      	bhi.n	80129f4 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x2ce>
 8012a06:	e77a      	b.n	80128fe <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x1d8>
						output[index] = (*register_vector)[index];
 8012a08:	f8d9 0000 	ldr.w	r0, [r9]
 8012a0c:	5640      	ldrsb	r0, [r0, r1]
 8012a0e:	3101      	adds	r1, #1
 8012a10:	f802 0b01 	strb.w	r0, [r2], #1
					for (uint16_t index = 0; index < *length; index++) {
 8012a14:	e789      	b.n	801292a <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x204>
				*length = target_register->register_info.length;
 8012a16:	f8ad 101a 	strh.w	r1, [sp, #26]
 8012a1a:	aa06      	add	r2, sp, #24
 8012a1c:	4449      	add	r1, r9
 8012a1e:	4648      	mov	r0, r9
 8012a20:	f7ff fcb2 	bl	8012388 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8012a24:	e784      	b.n	8012930 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x20a>
				*length = 1;
 8012a26:	f8ad 301a 	strh.w	r3, [sp, #26]
					*output = *callbacks.pointer;
 8012a2a:	f999 3000 	ldrsb.w	r3, [r9]
 8012a2e:	f88d 3018 	strb.w	r3, [sp, #24]
 8012a32:	e77d      	b.n	8012930 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x20a>
	} else if (element.element_register.isArray && element.element_register.length > 0)
 8012a34:	f8bd 40ac 	ldrh.w	r4, [sp, #172]	@ 0xac
 8012a38:	b154      	cbz	r4, 8012a50 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x32a>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8012a3a:	4620      	mov	r0, r4
 8012a3c:	f7fb fe31 	bl	800e6a2 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8012a40:	1903      	adds	r3, r0, r4
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8012a42:	4602      	mov	r2, r0
 8012a44:	9010      	str	r0, [sp, #64]	@ 0x40
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8012a46:	9312      	str	r3, [sp, #72]	@ 0x48
			      _Category>::__copy_m(__first, __last, __result);
 8012a48:	ab06      	add	r3, sp, #24
 8012a4a:	1919      	adds	r1, r3, r4
 8012a4c:	4618      	mov	r0, r3
 8012a4e:	e791      	b.n	8012974 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x24e>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012a50:	e9dd 9b06 	ldrd	r9, fp, [sp, #24]
	  if (__xlen > capacity())
 8012a54:	ebbb 0709 	subs.w	r7, fp, r9
 8012a58:	d00f      	beq.n	8012a7a <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x354>
	  pointer __result = this->_M_allocate(__n);
 8012a5a:	4638      	mov	r0, r7
 8012a5c:	f7fb fe21 	bl	800e6a2 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>
 8012a60:	4604      	mov	r4, r0
 8012a62:	4602      	mov	r2, r0
 8012a64:	4659      	mov	r1, fp
 8012a66:	4648      	mov	r0, r9
 8012a68:	f7ff fc8e 	bl	8012388 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
	      this->_M_impl._M_start = __tmp;
 8012a6c:	940a      	str	r4, [sp, #40]	@ 0x28
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8012a6e:	443c      	add	r4, r7
 8012a70:	940c      	str	r4, [sp, #48]	@ 0x30
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8012a72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012a74:	443b      	add	r3, r7
 8012a76:	930b      	str	r3, [sp, #44]	@ 0x2c
      return *this;
 8012a78:	e786      	b.n	8012988 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x262>
 8012a7a:	463a      	mov	r2, r7
 8012a7c:	4659      	mov	r1, fp
 8012a7e:	4648      	mov	r0, r9
 8012a80:	f7ff fc82 	bl	8012388 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8012a84:	e7f5      	b.n	8012a72 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x34c>
    for (T input : inputs) {
 8012a86:	f917 3b01 	ldrsb.w	r3, [r7], #1
      { emplace_back(std::move(__x)); }
 8012a8a:	f10d 0119 	add.w	r1, sp, #25
 8012a8e:	4628      	mov	r0, r5
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012a90:	942c      	str	r4, [sp, #176]	@ 0xb0
		data.push_back((uint8_t) ((reinterpreted_input >> ((type_length - 1 - index) << 3)) & 0xFF)); // previously (8 * (type_length - 1 - index))) & 0xFF))
 8012a92:	f88d 3019 	strb.w	r3, [sp, #25]
 8012a96:	e9cd 442a 	strd	r4, r4, [sp, #168]	@ 0xa8
      { emplace_back(std::move(__x)); }
 8012a9a:	f7fc fc0b 	bl	800f2b4 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
        data.insert(data.end(), single.begin(), single.end());
 8012a9e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8012aa0:	a80d      	add	r0, sp, #52	@ 0x34
 8012aa2:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	@ 0xa8
 8012aa6:	f7fe fa15 	bl	8010ed4 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_>
      }
 8012aaa:	4628      	mov	r0, r5
 8012aac:	f7ed fef6 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return *this;
 8012ab0:	e777      	b.n	80129a2 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x27c>
	if (not BuildPayload(response, response_content) && response->payload.size() > 0) { // if no space available, send the data and then rebuild a new response
 8012ab2:	2400      	movs	r4, #0
 8012ab4:	e6d5      	b.n	8012862 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x13c>

08012ab6 <_ZN13Communication14ProcessElementIaEEt13MessageHeaderPS1_14MessageElementt>:
uint16_t Communication::ProcessElement(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 8012ab6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ab8:	461c      	mov	r4, r3
 8012aba:	b08f      	sub	sp, #60	@ 0x3c
	if (not element.ack && element.command) {
 8012abc:	799b      	ldrb	r3, [r3, #6]
uint16_t Communication::ProcessElement(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 8012abe:	4605      	mov	r5, r0
 8012ac0:	4617      	mov	r7, r2
 8012ac2:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
	if (not element.ack && element.command) {
 8012ac6:	b9cb      	cbnz	r3, 8012afc <_ZN13Communication14ProcessElementIaEEt13MessageHeaderPS1_14MessageElementt+0x46>
 8012ac8:	79e3      	ldrb	r3, [r4, #7]
		return ProcessCommand<T>(message, response, element, start_index);
 8012aca:	a803      	add	r0, sp, #12
	if (not element.ack && element.command) {
 8012acc:	b323      	cbz	r3, 8012b18 <_ZN13Communication14ProcessElementIaEEt13MessageHeaderPS1_14MessageElementt+0x62>
		return ProcessCommand<T>(message, response, element, start_index);
 8012ace:	f7fc fd30 	bl	800f532 <_ZN13MessageHeaderC1ERKS_>
 8012ad2:	4621      	mov	r1, r4
 8012ad4:	a808      	add	r0, sp, #32
 8012ad6:	f7fc fd19 	bl	800f50c <_ZN14MessageElementC1ERKS_>
 8012ada:	ab08      	add	r3, sp, #32
 8012adc:	463a      	mov	r2, r7
 8012ade:	a903      	add	r1, sp, #12
 8012ae0:	4628      	mov	r0, r5
 8012ae2:	9600      	str	r6, [sp, #0]
 8012ae4:	f7ff fe1f 	bl	8012726 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt>
		return ProcessSubscriber<T>(message, element, start_index);
 8012ae8:	4604      	mov	r4, r0
 8012aea:	a80b      	add	r0, sp, #44	@ 0x2c
 8012aec:	f7ed fed6 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012af0:	a804      	add	r0, sp, #16
 8012af2:	f7ed fed3 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 8012af6:	4620      	mov	r0, r4
 8012af8:	b00f      	add	sp, #60	@ 0x3c
 8012afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ProcessService<T>(message, element, start_index);
 8012afc:	a803      	add	r0, sp, #12
 8012afe:	f7fc fd18 	bl	800f532 <_ZN13MessageHeaderC1ERKS_>
 8012b02:	4621      	mov	r1, r4
 8012b04:	a808      	add	r0, sp, #32
 8012b06:	f7fc fd01 	bl	800f50c <_ZN14MessageElementC1ERKS_>
 8012b0a:	4633      	mov	r3, r6
 8012b0c:	aa08      	add	r2, sp, #32
 8012b0e:	a903      	add	r1, sp, #12
 8012b10:	4628      	mov	r0, r5
 8012b12:	f7fd fbaa 	bl	801026a <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt>
 8012b16:	e7e7      	b.n	8012ae8 <_ZN13Communication14ProcessElementIaEEt13MessageHeaderPS1_14MessageElementt+0x32>
		return ProcessSubscriber<T>(message, element, start_index);
 8012b18:	f7fc fd0b 	bl	800f532 <_ZN13MessageHeaderC1ERKS_>
 8012b1c:	4621      	mov	r1, r4
 8012b1e:	a808      	add	r0, sp, #32
 8012b20:	f7fc fcf4 	bl	800f50c <_ZN14MessageElementC1ERKS_>
 8012b24:	4633      	mov	r3, r6
 8012b26:	aa08      	add	r2, sp, #32
 8012b28:	a903      	add	r1, sp, #12
 8012b2a:	4628      	mov	r0, r5
 8012b2c:	f7fd fb1b 	bl	8010166 <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt>
 8012b30:	e7da      	b.n	8012ae8 <_ZN13Communication14ProcessElementIaEEt13MessageHeaderPS1_14MessageElementt+0x32>

08012b32 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPfjEET_S3_T0_>:
 8012b32:	4603      	mov	r3, r0
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 8012b34:	b510      	push	{r4, lr}
	  if (__n > 0)
 8012b36:	b179      	cbz	r1, 8012b58 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPfjEET_S3_T0_+0x26>
 8012b38:	2200      	movs	r2, #0
      if (__n <= 0)
 8012b3a:	1e4c      	subs	r4, r1, #1
 8012b3c:	f843 2b04 	str.w	r2, [r3], #4
 8012b40:	d00a      	beq.n	8012b58 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPfjEET_S3_T0_+0x26>
      std::__fill_a(__first, __first + __n, __value);
 8012b42:	eb03 0484 	add.w	r4, r3, r4, lsl #2
	*__first = __tmp;
 8012b46:	2100      	movs	r1, #0
 8012b48:	1a24      	subs	r4, r4, r0
 8012b4a:	4618      	mov	r0, r3
 8012b4c:	3c04      	subs	r4, #4
 8012b4e:	4622      	mov	r2, r4
 8012b50:	f007 f80a 	bl	8019b68 <memset>
 8012b54:	4603      	mov	r3, r0
 8012b56:	4423      	add	r3, r4
	}
 8012b58:	4618      	mov	r0, r3
 8012b5a:	bd10      	pop	{r4, pc}

08012b5c <_ZNSt6vectorIfSaIfEE17_M_default_appendEj>:
    vector<_Tp, _Alloc>::
 8012b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b60:	4604      	mov	r4, r0
      if (__n != 0)
 8012b62:	460e      	mov	r6, r1
 8012b64:	b171      	cbz	r1, 8012b84 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x28>
					 - this->_M_impl._M_finish);
 8012b66:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012b68:	e9d0 8200 	ldrd	r8, r2, [r0]
 8012b6c:	1a9b      	subs	r3, r3, r2
 8012b6e:	eba2 0a08 	sub.w	sl, r2, r8
	  if (__navail >= __n)
 8012b72:	ebb1 0fa3 	cmp.w	r1, r3, asr #2
 8012b76:	ea4f 07aa 	mov.w	r7, sl, asr #2
 8012b7a:	d805      	bhi.n	8012b88 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x2c>
	__uninit_default_n(__first, __n);
 8012b7c:	4610      	mov	r0, r2
 8012b7e:	f7ff ffd8 	bl	8012b32 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPfjEET_S3_T0_>
	      this->_M_impl._M_finish =
 8012b82:	6060      	str	r0, [r4, #4]
    }
 8012b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		_M_check_len(__n, "vector::_M_default_append");
 8012b88:	4a13      	ldr	r2, [pc, #76]	@ (8012bd8 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x7c>)
 8012b8a:	f7fc fc7b 	bl	800f484 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>
 8012b8e:	4681      	mov	r9, r0
	      pointer __new_start(this->_M_allocate(__len));
 8012b90:	f7fb fd75 	bl	800e67e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
 8012b94:	4631      	mov	r1, r6
 8012b96:	4605      	mov	r5, r0
 8012b98:	4450      	add	r0, sl
 8012b9a:	f7ff ffca 	bl	8012b32 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPfjEET_S3_T0_>
      if (__count > 0)
 8012b9e:	f1ba 0f00 	cmp.w	sl, #0
 8012ba2:	d00c      	beq.n	8012bbe <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x62>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8012ba4:	4652      	mov	r2, sl
 8012ba6:	4641      	mov	r1, r8
 8012ba8:	4628      	mov	r0, r5
 8012baa:	f006 ffc3 	bl	8019b34 <memmove>
			    this->_M_impl._M_end_of_storage - __old_start);
 8012bae:	68a1      	ldr	r1, [r4, #8]
 8012bb0:	4640      	mov	r0, r8
 8012bb2:	eba1 0108 	sub.w	r1, r1, r8
 8012bb6:	1089      	asrs	r1, r1, #2
 8012bb8:	f7fb fd5e 	bl	800e678 <_ZNSt12_Vector_baseIP21CommunicationProtocolSaIS1_EE13_M_deallocateEPS1_j.part.0>
 8012bbc:	e002      	b.n	8012bc4 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x68>
	if (__p)
 8012bbe:	f1b8 0f00 	cmp.w	r8, #0
 8012bc2:	d1f4      	bne.n	8012bae <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x52>
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8012bc4:	4437      	add	r7, r6
	      this->_M_impl._M_start = __new_start;
 8012bc6:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8012bc8:	eb05 0787 	add.w	r7, r5, r7, lsl #2
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 8012bcc:	eb05 0589 	add.w	r5, r5, r9, lsl #2
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8012bd0:	6067      	str	r7, [r4, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 8012bd2:	60a5      	str	r5, [r4, #8]
    }
 8012bd4:	e7d6      	b.n	8012b84 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x28>
 8012bd6:	bf00      	nop
 8012bd8:	0801a0ca 	.word	0x0801a0ca

08012bdc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	  if (_Num)
 8012bdc:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8012bde:	4613      	mov	r3, r2
 8012be0:	b510      	push	{r4, lr}
	  const ptrdiff_t _Num = __last - __first;
 8012be2:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
 8012be6:	d005      	beq.n	8012bf4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8012be8:	4601      	mov	r1, r0
 8012bea:	4622      	mov	r2, r4
 8012bec:	4618      	mov	r0, r3
 8012bee:	f006 ffa1 	bl	8019b34 <memmove>
 8012bf2:	4603      	mov	r3, r0
	}
 8012bf4:	1918      	adds	r0, r3, r4
 8012bf6:	bd10      	pop	{r4, pc}

08012bf8 <_ZNSt6vectorIfSaIfEEC1ERKS1_>:
      vector(const vector& __x)
 8012bf8:	b570      	push	{r4, r5, r6, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012bfa:	e9d1 3600 	ldrd	r3, r6, [r1]
      vector(const vector& __x)
 8012bfe:	4604      	mov	r4, r0
 8012c00:	460d      	mov	r5, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012c02:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012c04:	2300      	movs	r3, #0
 8012c06:	e9c0 3300 	strd	r3, r3, [r0]
 8012c0a:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8012c0c:	10b0      	asrs	r0, r6, #2
 8012c0e:	f7fb fd36 	bl	800e67e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8012c12:	4406      	add	r6, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8012c14:	4602      	mov	r2, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8012c16:	60a6      	str	r6, [r4, #8]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8012c18:	e9c4 0000 	strd	r0, r0, [r4]
			      _Category>::__copy_m(__first, __last, __result);
 8012c1c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012c20:	f7ff ffdc 	bl	8012bdc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	this->_M_impl._M_finish =
 8012c24:	6060      	str	r0, [r4, #4]
      }
 8012c26:	4620      	mov	r0, r4
 8012c28:	bd70      	pop	{r4, r5, r6, pc}

08012c2a <_ZN9Registers13WriteRegisterIfEEbtPT_tb>:
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 8012c2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c2e:	b085      	sub	sp, #20
 8012c30:	4606      	mov	r6, r0
 8012c32:	4688      	mov	r8, r1
 8012c34:	461f      	mov	r7, r3
 8012c36:	f89d 3038 	ldrb.w	r3, [sp, #56]	@ 0x38
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8012c3a:	f04f 31ff 	mov.w	r1, #4294967295
 8012c3e:	6800      	ldr	r0, [r0, #0]
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 8012c40:	4615      	mov	r5, r2
 8012c42:	9301      	str	r3, [sp, #4]
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8012c44:	f7f9 faba 	bl	800c1bc <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8012c48:	f10d 020f 	add.w	r2, sp, #15
 8012c4c:	4641      	mov	r1, r8
 8012c4e:	4630      	mov	r0, r6
 8012c50:	f004 fa3f 	bl	80170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8012c54:	f89d 300f 	ldrb.w	r3, [sp, #15]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8012c58:	4604      	mov	r4, r0
	if (!success) {
 8012c5a:	b933      	cbnz	r3, 8012c6a <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x40>
		osSemaphoreRelease(RegistersSemaphore);
 8012c5c:	6830      	ldr	r0, [r6, #0]
 8012c5e:	f7f9 fae1 	bl	800c224 <osSemaphoreRelease>
		return false;
 8012c62:	2000      	movs	r0, #0
}
 8012c64:	b005      	add	sp, #20
 8012c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8012c6a:	f10d 000f 	add.w	r0, sp, #15
 8012c6e:	f7fb fd35 	bl	800e6dc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>
	if (!success) {
 8012c72:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d0f0      	beq.n	8012c5c <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x32>
	if (target_register->register_info.type != registered_type) {
 8012c7a:	7923      	ldrb	r3, [r4, #4]
 8012c7c:	4283      	cmp	r3, r0
 8012c7e:	d1ed      	bne.n	8012c5c <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x32>
	if (callbacks[target_register->register_info.type] == NULL) {
 8012c80:	3304      	adds	r3, #4
 8012c82:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 8012c86:	2800      	cmp	r0, #0
 8012c88:	d0e8      	beq.n	8012c5c <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x32>
	if (target_register->access.write) {
 8012c8a:	7a23      	ldrb	r3, [r4, #8]
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d0e5      	beq.n	8012c5c <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x32>
		success = false;
 8012c90:	2300      	movs	r3, #0
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8012c92:	8961      	ldrh	r1, [r4, #10]
		success = false;
 8012c94:	f88d 300f 	strb.w	r3, [sp, #15]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8012c98:	f7fc fbae 	bl	800f3f8 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE2atEj>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8012c9c:	9b01      	ldr	r3, [sp, #4]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8012c9e:	f8d0 9008 	ldr.w	r9, [r0, #8]
 8012ca2:	e9d0 ba00 	ldrd	fp, sl, [r0]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8012ca6:	b133      	cbz	r3, 8012cb6 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x8c>
 8012ca8:	68e3      	ldr	r3, [r4, #12]
 8012caa:	b123      	cbz	r3, 8012cb6 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x8c>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 8012cac:	f04f 31ff 	mov.w	r1, #4294967295
 8012cb0:	6818      	ldr	r0, [r3, #0]
 8012cb2:	f7f9 fa83 	bl	800c1bc <osSemaphoreAcquire>
		if (target_register->mode.pointer) {
 8012cb6:	7823      	ldrb	r3, [r4, #0]
 8012cb8:	b1eb      	cbz	r3, 8012cf6 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xcc>
			success = true;
 8012cba:	2301      	movs	r3, #1
 8012cbc:	f88d 300f 	strb.w	r3, [sp, #15]
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 8012cc0:	7963      	ldrb	r3, [r4, #5]
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d04d      	beq.n	8012d62 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x138>
 8012cc6:	88e1      	ldrh	r1, [r4, #6]
 8012cc8:	2900      	cmp	r1, #0
 8012cca:	d143      	bne.n	8012d54 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x12a>
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8012ccc:	e9db 3100 	ldrd	r3, r1, [fp]
 8012cd0:	428b      	cmp	r3, r1
	    this->_M_impl._M_finish = __pos;
 8012cd2:	bf18      	it	ne
 8012cd4:	f8cb 3004 	strne.w	r3, [fp, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012cd8:	f8db 0004 	ldr.w	r0, [fp, #4]
 8012cdc:	1ac1      	subs	r1, r0, r3
 8012cde:	1089      	asrs	r1, r1, #2
	if (__new_size > size())
 8012ce0:	428f      	cmp	r7, r1
 8012ce2:	d925      	bls.n	8012d30 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x106>
	  _M_default_append(__new_size - size());
 8012ce4:	1a79      	subs	r1, r7, r1
 8012ce6:	4658      	mov	r0, fp
 8012ce8:	f7ff ff38 	bl	8012b5c <_ZNSt6vectorIfSaIfEE17_M_default_appendEj>
 8012cec:	4628      	mov	r0, r5
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 8012cee:	2300      	movs	r3, #0
				for (uint16_t index = 0; index < length; index++) {
 8012cf0:	b299      	uxth	r1, r3
 8012cf2:	42b9      	cmp	r1, r7
 8012cf4:	d324      	bcc.n	8012d40 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x116>
		if (target_register->mode.callbacks) {
 8012cf6:	7863      	ldrb	r3, [r4, #1]
 8012cf8:	b16b      	cbz	r3, 8012d16 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xec>
			if (callbacks.write != NULL) {
 8012cfa:	f1b9 0f00 	cmp.w	r9, #0
 8012cfe:	d00a      	beq.n	8012d16 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xec>
				if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 8012d00:	7963      	ldrb	r3, [r4, #5]
 8012d02:	b393      	cbz	r3, 8012d6a <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x140>
 8012d04:	88e3      	ldrh	r3, [r4, #6]
 8012d06:	b903      	cbnz	r3, 8012d0a <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xe0>
					success = callbacks.write(callbacks.context, ID, value, length);
 8012d08:	463b      	mov	r3, r7
					success = callbacks.write(callbacks.context, ID, value, 1);
 8012d0a:	462a      	mov	r2, r5
 8012d0c:	4641      	mov	r1, r8
 8012d0e:	4650      	mov	r0, sl
 8012d10:	47c8      	blx	r9
 8012d12:	f88d 000f 	strb.w	r0, [sp, #15]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8012d16:	9b01      	ldr	r3, [sp, #4]
 8012d18:	b123      	cbz	r3, 8012d24 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xfa>
 8012d1a:	68e3      	ldr	r3, [r4, #12]
 8012d1c:	b113      	cbz	r3, 8012d24 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xfa>
			osSemaphoreRelease(*(target_register->register_semaphore));
 8012d1e:	6818      	ldr	r0, [r3, #0]
 8012d20:	f7f9 fa80 	bl	800c224 <osSemaphoreRelease>
		osSemaphoreRelease(RegistersSemaphore);
 8012d24:	6830      	ldr	r0, [r6, #0]
 8012d26:	f7f9 fa7d 	bl	800c224 <osSemaphoreRelease>
		return success;
 8012d2a:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8012d2e:	e799      	b.n	8012c64 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x3a>
	else if (__new_size < size())
 8012d30:	d2dc      	bcs.n	8012cec <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xc2>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 8012d32:	eb03 0387 	add.w	r3, r3, r7, lsl #2
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8012d36:	4298      	cmp	r0, r3
 8012d38:	d0d8      	beq.n	8012cec <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xc2>
	    this->_M_impl._M_finish = __pos;
 8012d3a:	f8cb 3004 	str.w	r3, [fp, #4]
 8012d3e:	e7d5      	b.n	8012cec <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xc2>
					(*register_vector)[index] = value[index];
 8012d40:	f8db 1000 	ldr.w	r1, [fp]
 8012d44:	f850 cb04 	ldr.w	ip, [r0], #4
 8012d48:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8012d4c:	3301      	adds	r3, #1
 8012d4e:	f8c1 c000 	str.w	ip, [r1]
				for (uint16_t index = 0; index < length; index++) {
 8012d52:	e7cd      	b.n	8012cf0 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xc6>
 8012d54:	465a      	mov	r2, fp
 8012d56:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8012d5a:	4628      	mov	r0, r5
 8012d5c:	f7ff ff3e 	bl	8012bdc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8012d60:	e7c9      	b.n	8012cf6 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xcc>
				*(callbacks.pointer) = *value;
 8012d62:	682b      	ldr	r3, [r5, #0]
 8012d64:	f8cb 3000 	str.w	r3, [fp]
 8012d68:	e7c5      	b.n	8012cf6 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xcc>
					success = callbacks.write(callbacks.context, ID, value, 1);
 8012d6a:	2301      	movs	r3, #1
 8012d6c:	e7cd      	b.n	8012d0a <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xe0>

08012d6e <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t>:
uint16_t Communication::ProcessWrite(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 8012d6e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d72:	b091      	sub	sp, #68	@ 0x44
 8012d74:	4605      	mov	r5, r0
 8012d76:	4691      	mov	r9, r2
 8012d78:	4608      	mov	r0, r1
 8012d7a:	af02      	add	r7, sp, #8
 8012d7c:	469a      	mov	sl, r3
		T value = ExtractSingle<T>(message.payload, start_index, &success);
 8012d7e:	3104      	adds	r1, #4
uint16_t Communication::ProcessWrite(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 8012d80:	f8d7 b060 	ldr.w	fp, [r7, #96]	@ 0x60
 8012d84:	f107 060b 	add.w	r6, r7, #11
 8012d88:	f8b7 4064 	ldrh.w	r4, [r7, #100]	@ 0x64
	if (not element.element_register.isArray) {
 8012d8c:	f89b 8003 	ldrb.w	r8, [fp, #3]
 8012d90:	f1b8 0f00 	cmp.w	r8, #0
 8012d94:	d174      	bne.n	8012e80 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x112>
		T value = ExtractSingle<T>(message.payload, start_index, &success);
 8012d96:	f107 0020 	add.w	r0, r7, #32
 8012d9a:	f7ed fe2f 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8012d9e:	4632      	mov	r2, r6
 8012da0:	4621      	mov	r1, r4
 8012da2:	f107 0020 	add.w	r0, r7, #32
 8012da6:	f7fb fdd5 	bl	800e954 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0>
      }
 8012daa:	f107 0020 	add.w	r0, r7, #32
 8012dae:	ed87 0a05 	vstr	s0, [r7, #20]
 8012db2:	f7ed fd73 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8012db6:	7afb      	ldrb	r3, [r7, #11]
 8012db8:	b153      	cbz	r3, 8012dd0 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x62>
			success = registers->WriteRegister<T>(element.element_register.address, &value);
 8012dba:	2301      	movs	r3, #1
 8012dbc:	f8bb 1000 	ldrh.w	r1, [fp]
 8012dc0:	f107 0214 	add.w	r2, r7, #20
 8012dc4:	9300      	str	r3, [sp, #0]
 8012dc6:	4643      	mov	r3, r8
 8012dc8:	6868      	ldr	r0, [r5, #4]
 8012dca:	f7ff ff2e 	bl	8012c2a <_ZN9Registers13WriteRegisterIfEEbtPT_tb>
 8012dce:	72f8      	strb	r0, [r7, #11]
		length_to_extract = 1;
 8012dd0:	f04f 0801 	mov.w	r8, #1
	if (success)
 8012dd4:	7af9      	ldrb	r1, [r7, #11]
		response_content.data = std::vector<uint8_t>{OK};
 8012dd6:	f10a 060c 	add.w	r6, sl, #12
 8012dda:	f107 0314 	add.w	r3, r7, #20
 8012dde:	f107 020c 	add.w	r2, r7, #12
	if (success)
 8012de2:	2900      	cmp	r1, #0
 8012de4:	f000 80cd 	beq.w	8012f82 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x214>
		response_content.data = std::vector<uint8_t>{OK};
 8012de8:	2100      	movs	r1, #0
 8012dea:	60fb      	str	r3, [r7, #12]
 8012dec:	2301      	movs	r3, #1
 8012dee:	7539      	strb	r1, [r7, #20]
 8012df0:	613b      	str	r3, [r7, #16]
 8012df2:	ca06      	ldmia	r2, {r1, r2}
		response_content.data = std::vector<uint8_t>{ERROR};
 8012df4:	f107 0020 	add.w	r0, r7, #32
 8012df8:	f7fd fffe 	bl	8010df8 <_ZNSt6vectorIhSaIhEEC2ESt16initializer_listIhERKS0_.constprop.0.isra.0>
 8012dfc:	f107 0120 	add.w	r1, r7, #32
 8012e00:	4630      	mov	r0, r6
 8012e02:	f7fb ff0c 	bl	800ec1e <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 8012e06:	f107 0020 	add.w	r0, r7, #32
 8012e0a:	f7ed fd47 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not BuildPayload(response, response_content)) {
 8012e0e:	4651      	mov	r1, sl
 8012e10:	f107 0020 	add.w	r0, r7, #32
 8012e14:	f7fc fb7a 	bl	800f50c <_ZN14MessageElementC1ERKS_>
 8012e18:	f107 0220 	add.w	r2, r7, #32
 8012e1c:	4649      	mov	r1, r9
 8012e1e:	4628      	mov	r0, r5
 8012e20:	f7fe f8cc 	bl	8010fbc <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8012e24:	4606      	mov	r6, r0
 8012e26:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8012e2a:	f7ed fd37 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012e2e:	bb06      	cbnz	r6, 8012e72 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x104>
		Send(*response);
 8012e30:	4649      	mov	r1, r9
 8012e32:	f107 0020 	add.w	r0, r7, #32
 8012e36:	f7fc fb7c 	bl	800f532 <_ZN13MessageHeaderC1ERKS_>
 8012e3a:	f107 0120 	add.w	r1, r7, #32
 8012e3e:	4628      	mov	r0, r5
 8012e40:	f7fc fc66 	bl	800f710 <_ZN13Communication4SendE13MessageHeader>
 8012e44:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8012e48:	f7ed fd28 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		response->payload.clear();
 8012e4c:	f109 0004 	add.w	r0, r9, #4
 8012e50:	f7fb fefc 	bl	800ec4c <_ZNSt6vectorIhSaIhEE5clearEv>
		BuildPayload(response, response_content);
 8012e54:	4651      	mov	r1, sl
 8012e56:	f107 0020 	add.w	r0, r7, #32
 8012e5a:	f7fc fb57 	bl	800f50c <_ZN14MessageElementC1ERKS_>
 8012e5e:	f107 0220 	add.w	r2, r7, #32
 8012e62:	4649      	mov	r1, r9
 8012e64:	4628      	mov	r0, r5
 8012e66:	f7fe f8a9 	bl	8010fbc <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8012e6a:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8012e6e:	f7ed fd15 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return start_index + sizeof(T) * length_to_extract;
 8012e72:	eb04 0088 	add.w	r0, r4, r8, lsl #2
}
 8012e76:	373c      	adds	r7, #60	@ 0x3c
 8012e78:	b280      	uxth	r0, r0
 8012e7a:	46bd      	mov	sp, r7
 8012e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (element.element_register.isArray && element.element_register.length > 0) {
 8012e80:	f8bb 8004 	ldrh.w	r8, [fp, #4]
 8012e84:	f1b8 0f00 	cmp.w	r8, #0
 8012e88:	d02a      	beq.n	8012ee0 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x172>
		T values[length_to_extract];
 8012e8a:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8012e8e:	466a      	mov	r2, sp
	} else if (element.element_register.isArray && element.element_register.length == 0) {
 8012e90:	f8c7 d000 	str.w	sp, [r7]
		ExtractArray<T>(values, message.payload, start_index, length_to_extract, &success);
 8012e94:	f107 0020 	add.w	r0, r7, #32
		T values[length_to_extract];
 8012e98:	3307      	adds	r3, #7
 8012e9a:	08db      	lsrs	r3, r3, #3
 8012e9c:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 8012ea0:	469d      	mov	sp, r3
 8012ea2:	ab02      	add	r3, sp, #8
 8012ea4:	607b      	str	r3, [r7, #4]
		ExtractArray<T>(values, message.payload, start_index, length_to_extract, &success);
 8012ea6:	f7ed fda9 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8012eaa:	9600      	str	r6, [sp, #0]
 8012eac:	4643      	mov	r3, r8
 8012eae:	4622      	mov	r2, r4
 8012eb0:	f107 0120 	add.w	r1, r7, #32
 8012eb4:	6878      	ldr	r0, [r7, #4]
 8012eb6:	f7fc fed1 	bl	800fc5c <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 8012eba:	f107 0020 	add.w	r0, r7, #32
 8012ebe:	f7ed fced 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8012ec2:	7afb      	ldrb	r3, [r7, #11]
 8012ec4:	b14b      	cbz	r3, 8012eda <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x16c>
			success = registers->WriteRegister<T>(element.element_register.address, values);
 8012ec6:	2301      	movs	r3, #1
 8012ec8:	f8bb 1000 	ldrh.w	r1, [fp]
 8012ecc:	9300      	str	r3, [sp, #0]
 8012ece:	2300      	movs	r3, #0
 8012ed0:	687a      	ldr	r2, [r7, #4]
 8012ed2:	6868      	ldr	r0, [r5, #4]
 8012ed4:	f7ff fea9 	bl	8012c2a <_ZN9Registers13WriteRegisterIfEEbtPT_tb>
 8012ed8:	72f8      	strb	r0, [r7, #11]
 8012eda:	f8d7 d000 	ldr.w	sp, [r7]
	} else if (element.element_register.isArray && element.element_register.length == 0) {
 8012ede:	e779      	b.n	8012dd4 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x66>
		length_to_extract = message.payload[start_index];
 8012ee0:	6843      	ldr	r3, [r0, #4]
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8012ee2:	f107 0020 	add.w	r0, r7, #32
		length_to_extract = message.payload[start_index];
 8012ee6:	f813 8004 	ldrb.w	r8, [r3, r4]
		start_index++;
 8012eea:	3401      	adds	r4, #1
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8012eec:	f7ed fd86 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8012ef0:	f107 0120 	add.w	r1, r7, #32
		start_index++;
 8012ef4:	b2a4      	uxth	r4, r4
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8012ef6:	4643      	mov	r3, r8
 8012ef8:	f107 0014 	add.w	r0, r7, #20
 8012efc:	9600      	str	r6, [sp, #0]
 8012efe:	4622      	mov	r2, r4
 8012f00:	f7fc fe4e 	bl	800fba0 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 8012f04:	f107 0020 	add.w	r0, r7, #32
 8012f08:	f7ed fcc8 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8012f0c:	7afb      	ldrb	r3, [r7, #11]
 8012f0e:	b1fb      	cbz	r3, 8012f50 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x1e2>
			success = registers->WriteVectorRegister<T>(element.element_register.address, values); // previously &values
 8012f10:	686e      	ldr	r6, [r5, #4]
 8012f12:	f107 0114 	add.w	r1, r7, #20
 8012f16:	f8bb b000 	ldrh.w	fp, [fp]
 8012f1a:	f107 0020 	add.w	r0, r7, #32
 8012f1e:	f7ff fe6b 	bl	8012bf8 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8012f22:	f04f 31ff 	mov.w	r1, #4294967295
 8012f26:	6830      	ldr	r0, [r6, #0]
 8012f28:	f7f9 f948 	bl	800c1bc <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8012f2c:	f107 020c 	add.w	r2, r7, #12
 8012f30:	4659      	mov	r1, fp
 8012f32:	4630      	mov	r0, r6
 8012f34:	f004 f8cd 	bl	80170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8012f38:	7b3a      	ldrb	r2, [r7, #12]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8012f3a:	4603      	mov	r3, r0
		osSemaphoreRelease(RegistersSemaphore);
 8012f3c:	6830      	ldr	r0, [r6, #0]
	if (!success) {
 8012f3e:	b962      	cbnz	r2, 8012f5a <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x1ec>
		osSemaphoreRelease(RegistersSemaphore);
 8012f40:	f7f9 f970 	bl	800c224 <osSemaphoreRelease>
		return false;
 8012f44:	2000      	movs	r0, #0
 8012f46:	72f8      	strb	r0, [r7, #11]
 8012f48:	f107 0020 	add.w	r0, r7, #32
 8012f4c:	f7ee fea4 	bl	8001c98 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8012f50:	f107 0014 	add.w	r0, r7, #20
 8012f54:	f7ee fea0 	bl	8001c98 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8012f58:	e73c      	b.n	8012dd4 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x66>
	if (!(target_register->register_info.isArray && target_register->register_info.length == 0)) {
 8012f5a:	795a      	ldrb	r2, [r3, #5]
 8012f5c:	2a00      	cmp	r2, #0
 8012f5e:	d0ef      	beq.n	8012f40 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x1d2>
 8012f60:	88db      	ldrh	r3, [r3, #6]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d1ec      	bne.n	8012f40 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x1d2>
	osSemaphoreRelease(RegistersSemaphore);
 8012f66:	f7f9 f95d 	bl	800c224 <osSemaphoreRelease>
	return WriteRegister(ID, value.data(), value.size(), use_semaphore);
 8012f6a:	2101      	movs	r1, #1
 8012f6c:	4630      	mov	r0, r6
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012f6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8012f72:	9100      	str	r1, [sp, #0]
 8012f74:	4659      	mov	r1, fp
 8012f76:	1a9b      	subs	r3, r3, r2
 8012f78:	f3c3 038f 	ubfx	r3, r3, #2, #16
 8012f7c:	f7ff fe55 	bl	8012c2a <_ZN9Registers13WriteRegisterIfEEbtPT_tb>
 8012f80:	e7e1      	b.n	8012f46 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x1d8>
		response_content.data = std::vector<uint8_t>{ERROR};
 8012f82:	21ff      	movs	r1, #255	@ 0xff
 8012f84:	617a      	str	r2, [r7, #20]
 8012f86:	2201      	movs	r2, #1
 8012f88:	7339      	strb	r1, [r7, #12]
 8012f8a:	61ba      	str	r2, [r7, #24]
 8012f8c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8012f90:	e730      	b.n	8012df4 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x86>

08012f92 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt>:
uint16_t Communication::ProcessCommand(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 8012f92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f96:	468b      	mov	fp, r1
 8012f98:	b0b1      	sub	sp, #196	@ 0xc4
 8012f9a:	4607      	mov	r7, r0
 8012f9c:	4698      	mov	r8, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012f9e:	2600      	movs	r6, #0
	response_content.ack = true;
 8012fa0:	f04f 0a01 	mov.w	sl, #1
uint16_t Communication::ProcessCommand(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 8012fa4:	4615      	mov	r5, r2
 8012fa6:	f8bd 90e8 	ldrh.w	r9, [sp, #232]	@ 0xe8
 8012faa:	961d      	str	r6, [sp, #116]	@ 0x74
 8012fac:	ac2a      	add	r4, sp, #168	@ 0xa8
	response_content.ack = true;
 8012fae:	f8ad a066 	strh.w	sl, [sp, #102]	@ 0x66
	response_content.element_register = element.element_register;
 8012fb2:	e9d3 0100 	ldrd	r0, r1, [r3]
	response_content.access = element.access;
 8012fb6:	7a1b      	ldrb	r3, [r3, #8]
	response_content.element_register = element.element_register;
 8012fb8:	9018      	str	r0, [sp, #96]	@ 0x60
 8012fba:	f8ad 1064 	strh.w	r1, [sp, #100]	@ 0x64
	CommunicationLED(leds, message.interface);
 8012fbe:	6938      	ldr	r0, [r7, #16]
 8012fc0:	f89b 1000 	ldrb.w	r1, [fp]
	response_content.access = element.access;
 8012fc4:	f88d 3068 	strb.w	r3, [sp, #104]	@ 0x68
 8012fc8:	e9cd 661b 	strd	r6, r6, [sp, #108]	@ 0x6c
	CommunicationLED(leds, message.interface);
 8012fcc:	f7fb fa2f 	bl	800e42e <_Z16CommunicationLEDP4LEDSh>
	if (element.access == WRITE) {
 8012fd0:	f898 3008 	ldrb.w	r3, [r8, #8]
		return ProcessWrite<T>(message, response, response_content, element, start_index);
 8012fd4:	4659      	mov	r1, fp
	if (element.access == WRITE) {
 8012fd6:	bb1b      	cbnz	r3, 8013020 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x8e>
		return ProcessWrite<T>(message, response, response_content, element, start_index);
 8012fd8:	a81e      	add	r0, sp, #120	@ 0x78
 8012fda:	f7fc faaa 	bl	800f532 <_ZN13MessageHeaderC1ERKS_>
 8012fde:	a918      	add	r1, sp, #96	@ 0x60
 8012fe0:	a824      	add	r0, sp, #144	@ 0x90
 8012fe2:	f7fc fa93 	bl	800f50c <_ZN14MessageElementC1ERKS_>
 8012fe6:	4641      	mov	r1, r8
 8012fe8:	4620      	mov	r0, r4
 8012fea:	f7fc fa8f 	bl	800f50c <_ZN14MessageElementC1ERKS_>
 8012fee:	ab24      	add	r3, sp, #144	@ 0x90
 8012ff0:	462a      	mov	r2, r5
 8012ff2:	a91e      	add	r1, sp, #120	@ 0x78
 8012ff4:	4638      	mov	r0, r7
 8012ff6:	e9cd 4900 	strd	r4, r9, [sp]
 8012ffa:	f7ff feb8 	bl	8012d6e <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t>
 8012ffe:	4681      	mov	r9, r0
      }
 8013000:	a82d      	add	r0, sp, #180	@ 0xb4
 8013002:	f7ed fc4b 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8013006:	a827      	add	r0, sp, #156	@ 0x9c
 8013008:	f7ed fc48 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801300c:	a81f      	add	r0, sp, #124	@ 0x7c
 801300e:	f7ed fc45 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8013012:	a81b      	add	r0, sp, #108	@ 0x6c
 8013014:	f7ed fc42 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 8013018:	4648      	mov	r0, r9
 801301a:	b031      	add	sp, #196	@ 0xc4
 801301c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return ProcessRead<T>(message, response, response_content, element, start_index);
 8013020:	a813      	add	r0, sp, #76	@ 0x4c
 8013022:	f7fc fa86 	bl	800f532 <_ZN13MessageHeaderC1ERKS_>
 8013026:	a918      	add	r1, sp, #96	@ 0x60
 8013028:	a81e      	add	r0, sp, #120	@ 0x78
 801302a:	f7fc fa6f 	bl	800f50c <_ZN14MessageElementC1ERKS_>
 801302e:	4641      	mov	r1, r8
 8013030:	a824      	add	r0, sp, #144	@ 0x90
 8013032:	f7fc fa6b 	bl	800f50c <_ZN14MessageElementC1ERKS_>
	*success = registers->ReadRegister<T>(element->element_register.address, &register_read, &length);
 8013036:	f8cd a000 	str.w	sl, [sp]
 801303a:	f10d 0316 	add.w	r3, sp, #22
 801303e:	aa06      	add	r2, sp, #24
 8013040:	f8bd 1090 	ldrh.w	r1, [sp, #144]	@ 0x90
 8013044:	6878      	ldr	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013046:	9609      	str	r6, [sp, #36]	@ 0x24
 8013048:	e9cd 6607 	strd	r6, r6, [sp, #28]
 801304c:	f7fb fa5a 	bl	800e504 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb>
	if (not *success)
 8013050:	4680      	mov	r8, r0
 8013052:	2800      	cmp	r0, #0
 8013054:	d040      	beq.n	80130d8 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x146>
	std::vector<T> register_read_vector_cast = BuildTVector(*element, &register_read);
 8013056:	a924      	add	r1, sp, #144	@ 0x90
 8013058:	4620      	mov	r0, r4
 801305a:	f7fc fa57 	bl	800f50c <_ZN14MessageElementC1ERKS_>
	if (not element.element_register.isArray) {
 801305e:	f89d 30ab 	ldrb.w	r3, [sp, #171]	@ 0xab
 8013062:	960c      	str	r6, [sp, #48]	@ 0x30
 8013064:	e9cd 660a 	strd	r6, r6, [sp, #40]	@ 0x28
 8013068:	2b00      	cmp	r3, #0
 801306a:	f040 808b 	bne.w	8013184 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x1f2>
		vector = std::vector<T>{*data};
 801306e:	9b06      	ldr	r3, [sp, #24]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8013070:	4650      	mov	r0, sl
 8013072:	930d      	str	r3, [sp, #52]	@ 0x34
 8013074:	f7fb fb03 	bl	800e67e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
			      _Category>::__copy_m(__first, __last, __result);
 8013078:	a90e      	add	r1, sp, #56	@ 0x38
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801307a:	1d03      	adds	r3, r0, #4
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 801307c:	4602      	mov	r2, r0
 801307e:	9010      	str	r0, [sp, #64]	@ 0x40
 8013080:	a80d      	add	r0, sp, #52	@ 0x34
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8013082:	9312      	str	r3, [sp, #72]	@ 0x48
 8013084:	f7ff fdaa 	bl	8012bdc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
		vector = std::vector<T>(data, data + element.element_register.length);
 8013088:	a910      	add	r1, sp, #64	@ 0x40
	  this->_M_impl._M_finish =
 801308a:	9011      	str	r0, [sp, #68]	@ 0x44
 801308c:	a80a      	add	r0, sp, #40	@ 0x28
 801308e:	f7fc f8f9 	bl	800f284 <_ZNSt6vectorIfSaIfEEaSEOS1_.isra.0>
      }
 8013092:	a810      	add	r0, sp, #64	@ 0x40
 8013094:	f7ee fe00 	bl	8001c98 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8013098:	a82d      	add	r0, sp, #180	@ 0xb4
	: _M_start(), _M_finish(), _M_end_of_storage()
 801309a:	2600      	movs	r6, #0
      }
 801309c:	f7ed fbfe 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	data = BuildVector<T>(register_read_vector_cast);
 80130a0:	a90a      	add	r1, sp, #40	@ 0x28
 80130a2:	a810      	add	r0, sp, #64	@ 0x40
 80130a4:	f7ff fda8 	bl	8012bf8 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
      : _M_current(__i) { }
 80130a8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80130aa:	f8dd a040 	ldr.w	sl, [sp, #64]	@ 0x40
	: _M_start(), _M_finish(), _M_end_of_storage()
 80130ae:	960f      	str	r6, [sp, #60]	@ 0x3c
 80130b0:	9302      	str	r3, [sp, #8]
 80130b2:	e9cd 660d 	strd	r6, r6, [sp, #52]	@ 0x34
    for (T input : inputs) {
 80130b6:	9b02      	ldr	r3, [sp, #8]
 80130b8:	4553      	cmp	r3, sl
 80130ba:	f040 808d 	bne.w	80131d8 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x246>
	data = BuildVector<T>(register_read_vector_cast);
 80130be:	a90d      	add	r1, sp, #52	@ 0x34
 80130c0:	a807      	add	r0, sp, #28
 80130c2:	f7fb fdac 	bl	800ec1e <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 80130c6:	a80d      	add	r0, sp, #52	@ 0x34
 80130c8:	f7ed fbe8 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80130cc:	a810      	add	r0, sp, #64	@ 0x40
 80130ce:	f7ee fde3 	bl	8001c98 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 80130d2:	a80a      	add	r0, sp, #40	@ 0x28
 80130d4:	f7ee fde0 	bl	8001c98 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
	response_content.data = ReadElement<T>(&element, &success);
 80130d8:	a821      	add	r0, sp, #132	@ 0x84
 80130da:	a907      	add	r1, sp, #28
 80130dc:	f7fb fd9f 	bl	800ec1e <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 80130e0:	a807      	add	r0, sp, #28
 80130e2:	f7ed fbdb 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not success) {
 80130e6:	f1b8 0f00 	cmp.w	r8, #0
 80130ea:	d114      	bne.n	8013116 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x184>
		response_content.data = std::vector<uint8_t>{ERROR};
 80130ec:	22ff      	movs	r2, #255	@ 0xff
		response_content.command = true; // this is an error flag for a read ack
 80130ee:	2301      	movs	r3, #1
		response_content.data = std::vector<uint8_t>{ERROR};
 80130f0:	4620      	mov	r0, r4
 80130f2:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
 80130f6:	aa0d      	add	r2, sp, #52	@ 0x34
		response_content.command = true; // this is an error flag for a read ack
 80130f8:	f88d 307f 	strb.w	r3, [sp, #127]	@ 0x7f
		response_content.data = std::vector<uint8_t>{ERROR};
 80130fc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8013100:	461a      	mov	r2, r3
 8013102:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8013104:	f7fd fe78 	bl	8010df8 <_ZNSt6vectorIhSaIhEEC2ESt16initializer_listIhERKS0_.constprop.0.isra.0>
 8013108:	a821      	add	r0, sp, #132	@ 0x84
 801310a:	4621      	mov	r1, r4
 801310c:	f7fb fd87 	bl	800ec1e <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 8013110:	4620      	mov	r0, r4
 8013112:	f7ed fbc3 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not BuildPayload(response, response_content) && response->payload.size() > 0) { // if no space available, send the data and then rebuild a new response
 8013116:	a91e      	add	r1, sp, #120	@ 0x78
 8013118:	4620      	mov	r0, r4
 801311a:	f7fc f9f7 	bl	800f50c <_ZN14MessageElementC1ERKS_>
 801311e:	4622      	mov	r2, r4
 8013120:	4629      	mov	r1, r5
 8013122:	4638      	mov	r0, r7
 8013124:	f7fd ff4a 	bl	8010fbc <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8013128:	2800      	cmp	r0, #0
 801312a:	f040 8081 	bne.w	8013230 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x29e>
 801312e:	e9d5 3601 	ldrd	r3, r6, [r5, #4]
 8013132:	1af6      	subs	r6, r6, r3
 8013134:	bf18      	it	ne
 8013136:	2601      	movne	r6, #1
 8013138:	a82d      	add	r0, sp, #180	@ 0xb4
 801313a:	f7ed fbaf 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801313e:	b1ce      	cbz	r6, 8013174 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x1e2>
		Send(*response);
 8013140:	4629      	mov	r1, r5
 8013142:	4620      	mov	r0, r4
 8013144:	f7fc f9f5 	bl	800f532 <_ZN13MessageHeaderC1ERKS_>
 8013148:	4621      	mov	r1, r4
 801314a:	4638      	mov	r0, r7
 801314c:	f7fc fae0 	bl	800f710 <_ZN13Communication4SendE13MessageHeader>
 8013150:	a82b      	add	r0, sp, #172	@ 0xac
 8013152:	f7ed fba3 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		response->payload.clear();
 8013156:	1d28      	adds	r0, r5, #4
 8013158:	f7fb fd78 	bl	800ec4c <_ZNSt6vectorIhSaIhEE5clearEv>
		BuildPayload(response, response_content);
 801315c:	a91e      	add	r1, sp, #120	@ 0x78
 801315e:	4620      	mov	r0, r4
 8013160:	f7fc f9d4 	bl	800f50c <_ZN14MessageElementC1ERKS_>
 8013164:	4622      	mov	r2, r4
 8013166:	4629      	mov	r1, r5
 8013168:	4638      	mov	r0, r7
 801316a:	f7fd ff27 	bl	8010fbc <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 801316e:	a82d      	add	r0, sp, #180	@ 0xb4
 8013170:	f7ed fb94 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8013174:	a827      	add	r0, sp, #156	@ 0x9c
 8013176:	f7ed fb91 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801317a:	a821      	add	r0, sp, #132	@ 0x84
 801317c:	f7ed fb8e 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8013180:	a814      	add	r0, sp, #80	@ 0x50
 8013182:	e744      	b.n	801300e <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x7c>
	} else if (element.element_register.isArray && element.element_register.length > 0)
 8013184:	f8bd 00ac 	ldrh.w	r0, [sp, #172]	@ 0xac
 8013188:	b150      	cbz	r0, 80131a0 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x20e>
		vector = std::vector<T>(data, data + element.element_register.length);
 801318a:	0086      	lsls	r6, r0, #2
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 801318c:	f7fb fa77 	bl	800e67e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
 8013190:	4602      	mov	r2, r0
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8013192:	1983      	adds	r3, r0, r6
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8013194:	9010      	str	r0, [sp, #64]	@ 0x40
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8013196:	9312      	str	r3, [sp, #72]	@ 0x48
 8013198:	ab06      	add	r3, sp, #24
 801319a:	1999      	adds	r1, r3, r6
 801319c:	4618      	mov	r0, r3
 801319e:	e771      	b.n	8013084 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0xf2>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80131a0:	e9dd b106 	ldrd	fp, r1, [sp, #24]
	  if (__xlen > capacity())
 80131a4:	ebb1 0a0b 	subs.w	sl, r1, fp
 80131a8:	d011      	beq.n	80131ce <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x23c>
	  pointer __result = this->_M_allocate(__n);
 80131aa:	ea4f 00aa 	mov.w	r0, sl, asr #2
 80131ae:	9102      	str	r1, [sp, #8]
 80131b0:	f7fb fa65 	bl	800e67e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
 80131b4:	4606      	mov	r6, r0
 80131b6:	4602      	mov	r2, r0
 80131b8:	9902      	ldr	r1, [sp, #8]
 80131ba:	4658      	mov	r0, fp
 80131bc:	f7ff fd0e 	bl	8012bdc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	      this->_M_impl._M_start = __tmp;
 80131c0:	960a      	str	r6, [sp, #40]	@ 0x28
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 80131c2:	4456      	add	r6, sl
 80131c4:	960c      	str	r6, [sp, #48]	@ 0x30
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 80131c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80131c8:	4453      	add	r3, sl
 80131ca:	930b      	str	r3, [sp, #44]	@ 0x2c
      return *this;
 80131cc:	e764      	b.n	8013098 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x106>
 80131ce:	4652      	mov	r2, sl
 80131d0:	4658      	mov	r0, fp
 80131d2:	f7ff fd03 	bl	8012bdc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80131d6:	e7f6      	b.n	80131c6 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x234>
    for (T input : inputs) {
 80131d8:	f85a 2b04 	ldr.w	r2, [sl], #4
    std::memcpy(&reinterpreted_input, &input, sizeof(T)); // this is mandatory to get rid of the memory alignment problem. A simple cast can't work here
 80131dc:	f04f 0b18 	mov.w	fp, #24
	: _M_start(), _M_finish(), _M_end_of_storage()
 80131e0:	962c      	str	r6, [sp, #176]	@ 0xb0
 80131e2:	e9cd 662a 	strd	r6, r6, [sp, #168]	@ 0xa8
		data.push_back((uint8_t) ((reinterpreted_input >> ((type_length - 1 - index) << 3)) & 0xFF)); // previously (8 * (type_length - 1 - index))) & 0xFF))
 80131e6:	f1cb 0c20 	rsb	ip, fp, #32
 80131ea:	fa22 f10b 	lsr.w	r1, r2, fp
 80131ee:	f1ab 0020 	sub.w	r0, fp, #32
	for (uint8_t index = 0; index < type_length; index++) {
 80131f2:	f1ab 0b08 	sub.w	fp, fp, #8
		data.push_back((uint8_t) ((reinterpreted_input >> ((type_length - 1 - index) << 3)) & 0xFF)); // previously (8 * (type_length - 1 - index))) & 0xFF))
 80131f6:	fa06 fc0c 	lsl.w	ip, r6, ip
 80131fa:	9203      	str	r2, [sp, #12]
 80131fc:	fa26 f000 	lsr.w	r0, r6, r0
 8013200:	ea41 010c 	orr.w	r1, r1, ip
 8013204:	4301      	orrs	r1, r0
      { emplace_back(std::move(__x)); }
 8013206:	4620      	mov	r0, r4
 8013208:	f88d 1015 	strb.w	r1, [sp, #21]
 801320c:	f10d 0115 	add.w	r1, sp, #21
 8013210:	f7fc f850 	bl	800f2b4 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
	for (uint8_t index = 0; index < type_length; index++) {
 8013214:	f11b 0f08 	cmn.w	fp, #8
 8013218:	9a03      	ldr	r2, [sp, #12]
 801321a:	d1e4      	bne.n	80131e6 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x254>
        data.insert(data.end(), single.begin(), single.end());
 801321c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801321e:	a80d      	add	r0, sp, #52	@ 0x34
 8013220:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	@ 0xa8
 8013224:	f7fd fe56 	bl	8010ed4 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_>
      }
 8013228:	4620      	mov	r0, r4
 801322a:	f7ed fb37 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return *this;
 801322e:	e742      	b.n	80130b6 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x124>
	if (not BuildPayload(response, response_content) && response->payload.size() > 0) { // if no space available, send the data and then rebuild a new response
 8013230:	2600      	movs	r6, #0
 8013232:	e781      	b.n	8013138 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x1a6>

08013234 <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt>:
uint16_t Communication::ProcessElement(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 8013234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013236:	461c      	mov	r4, r3
 8013238:	b08f      	sub	sp, #60	@ 0x3c
	if (not element.ack && element.command) {
 801323a:	799b      	ldrb	r3, [r3, #6]
uint16_t Communication::ProcessElement(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 801323c:	4605      	mov	r5, r0
 801323e:	4617      	mov	r7, r2
 8013240:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
	if (not element.ack && element.command) {
 8013244:	b9cb      	cbnz	r3, 801327a <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt+0x46>
 8013246:	79e3      	ldrb	r3, [r4, #7]
		return ProcessCommand<T>(message, response, element, start_index);
 8013248:	a803      	add	r0, sp, #12
	if (not element.ack && element.command) {
 801324a:	b323      	cbz	r3, 8013296 <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt+0x62>
		return ProcessCommand<T>(message, response, element, start_index);
 801324c:	f7fc f971 	bl	800f532 <_ZN13MessageHeaderC1ERKS_>
 8013250:	4621      	mov	r1, r4
 8013252:	a808      	add	r0, sp, #32
 8013254:	f7fc f95a 	bl	800f50c <_ZN14MessageElementC1ERKS_>
 8013258:	ab08      	add	r3, sp, #32
 801325a:	463a      	mov	r2, r7
 801325c:	a903      	add	r1, sp, #12
 801325e:	4628      	mov	r0, r5
 8013260:	9600      	str	r6, [sp, #0]
 8013262:	f7ff fe96 	bl	8012f92 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt>
		return ProcessSubscriber<T>(message, element, start_index);
 8013266:	4604      	mov	r4, r0
 8013268:	a80b      	add	r0, sp, #44	@ 0x2c
 801326a:	f7ed fb17 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801326e:	a804      	add	r0, sp, #16
 8013270:	f7ed fb14 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 8013274:	4620      	mov	r0, r4
 8013276:	b00f      	add	sp, #60	@ 0x3c
 8013278:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ProcessService<T>(message, element, start_index);
 801327a:	a803      	add	r0, sp, #12
 801327c:	f7fc f959 	bl	800f532 <_ZN13MessageHeaderC1ERKS_>
 8013280:	4621      	mov	r1, r4
 8013282:	a808      	add	r0, sp, #32
 8013284:	f7fc f942 	bl	800f50c <_ZN14MessageElementC1ERKS_>
 8013288:	4633      	mov	r3, r6
 801328a:	aa08      	add	r2, sp, #32
 801328c:	a903      	add	r1, sp, #12
 801328e:	4628      	mov	r0, r5
 8013290:	f7fc fd98 	bl	800fdc4 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt>
 8013294:	e7e7      	b.n	8013266 <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt+0x32>
		return ProcessSubscriber<T>(message, element, start_index);
 8013296:	f7fc f94c 	bl	800f532 <_ZN13MessageHeaderC1ERKS_>
 801329a:	4621      	mov	r1, r4
 801329c:	a808      	add	r0, sp, #32
 801329e:	f7fc f935 	bl	800f50c <_ZN14MessageElementC1ERKS_>
 80132a2:	4633      	mov	r3, r6
 80132a4:	aa08      	add	r2, sp, #32
 80132a6:	a903      	add	r1, sp, #12
 80132a8:	4628      	mov	r0, r5
 80132aa:	f7fc fd06 	bl	800fcba <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt>
 80132ae:	e7da      	b.n	8013266 <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt+0x32>

080132b0 <_ZN13Communication12ParseMessageE13MessageHeader>:
void Communication::ParseMessage(MessageHeader message) {
 80132b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80132b2:	b099      	sub	sp, #100	@ 0x64
	response.interface = message.interface;
 80132b4:	780b      	ldrb	r3, [r1, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80132b6:	2400      	movs	r4, #0
void Communication::ParseMessage(MessageHeader message) {
 80132b8:	4606      	mov	r6, r0
	response.interface = message.interface;
 80132ba:	f88d 3008 	strb.w	r3, [sp, #8]
void Communication::ParseMessage(MessageHeader message) {
 80132be:	460d      	mov	r5, r1
	response.target_address = message.source_address;
 80132c0:	7c4b      	ldrb	r3, [r1, #17]
 80132c2:	9411      	str	r4, [sp, #68]	@ 0x44
 80132c4:	9405      	str	r4, [sp, #20]
 80132c6:	f88d 3018 	strb.w	r3, [sp, #24]
 80132ca:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
 80132ce:	e9cd 4403 	strd	r4, r4, [sp, #12]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80132d2:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 80132d6:	1a9b      	subs	r3, r3, r2
	while (index < message.payload.size()) {
 80132d8:	429c      	cmp	r4, r3
 80132da:	d203      	bcs.n	80132e4 <_ZN13Communication12ParseMessageE13MessageHeader+0x34>
		if (index + 1 >= (uint16_t) message.payload.size())
 80132dc:	1c60      	adds	r0, r4, #1
 80132de:	b29b      	uxth	r3, r3
 80132e0:	4298      	cmp	r0, r3
 80132e2:	db0c      	blt.n	80132fe <_ZN13Communication12ParseMessageE13MessageHeader+0x4e>
	if (response.payload.size() > 0)
 80132e4:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80132e8:	429a      	cmp	r2, r3
 80132ea:	f040 808e 	bne.w	801340a <_ZN13Communication12ParseMessageE13MessageHeader+0x15a>
      }
 80132ee:	a803      	add	r0, sp, #12
 80132f0:	f7ed fad4 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80132f4:	a80f      	add	r0, sp, #60	@ 0x3c
 80132f6:	f7ed fad1 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 80132fa:	b019      	add	sp, #100	@ 0x64
 80132fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		element.ack = message.payload[index] & ACK_MASK;
 80132fe:	5d13      	ldrb	r3, [r2, r4]
		element.element_register.address = (message.payload[index] & ~(ACK_MASK | COMMAND_MASK | ACCESS_MASK)) << 8 | message.payload[index + 1];
 8013300:	5c12      	ldrb	r2, [r2, r0]
		bool success = FindRegister(message, &response, &element);
 8013302:	a812      	add	r0, sp, #72	@ 0x48
		element.ack = message.payload[index] & ACK_MASK;
 8013304:	09d9      	lsrs	r1, r3, #7
 8013306:	f88d 1036 	strb.w	r1, [sp, #54]	@ 0x36
		element.command = message.payload[index] & COMMAND_MASK;
 801330a:	f3c3 1180 	ubfx	r1, r3, #6, #1
 801330e:	f88d 1037 	strb.w	r1, [sp, #55]	@ 0x37
		element.access = message.payload[index] & ACCESS_MASK;
 8013312:	f3c3 1140 	ubfx	r1, r3, #5, #1
		element.element_register.address = (message.payload[index] & ~(ACK_MASK | COMMAND_MASK | ACCESS_MASK)) << 8 | message.payload[index + 1];
 8013316:	021b      	lsls	r3, r3, #8
		element.access = message.payload[index] & ACCESS_MASK;
 8013318:	f88d 1038 	strb.w	r1, [sp, #56]	@ 0x38
		bool success = FindRegister(message, &response, &element);
 801331c:	4629      	mov	r1, r5
		element.element_register.address = (message.payload[index] & ~(ACK_MASK | COMMAND_MASK | ACCESS_MASK)) << 8 | message.payload[index + 1];
 801331e:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
 8013322:	4313      	orrs	r3, r2
 8013324:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
		bool success = FindRegister(message, &response, &element);
 8013328:	f7fc f903 	bl	800f532 <_ZN13MessageHeaderC1ERKS_>
 801332c:	ab0c      	add	r3, sp, #48	@ 0x30
 801332e:	aa02      	add	r2, sp, #8
 8013330:	a912      	add	r1, sp, #72	@ 0x48
 8013332:	4630      	mov	r0, r6
 8013334:	f7fd fe9a 	bl	801106c <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement>
 8013338:	4607      	mov	r7, r0
 801333a:	a813      	add	r0, sp, #76	@ 0x4c
 801333c:	f7ed faae 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (not success) break;
 8013340:	2f00      	cmp	r7, #0
 8013342:	d0cf      	beq.n	80132e4 <_ZN13Communication12ParseMessageE13MessageHeader+0x34>
			index = ProcessElement<uint8_t>(message, &response, element, index + 2);
 8013344:	3402      	adds	r4, #2
		switch (element.element_register.type) {
 8013346:	f89d 3032 	ldrb.w	r3, [sp, #50]	@ 0x32
			index = ProcessElement<uint8_t>(message, &response, element, index + 2);
 801334a:	b2a4      	uxth	r4, r4
		switch (element.element_register.type) {
 801334c:	2b08      	cmp	r3, #8
 801334e:	d8c0      	bhi.n	80132d2 <_ZN13Communication12ParseMessageE13MessageHeader+0x22>
 8013350:	a201      	add	r2, pc, #4	@ (adr r2, 8013358 <_ZN13Communication12ParseMessageE13MessageHeader+0xa8>)
 8013352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013356:	bf00      	nop
 8013358:	0801337d 	.word	0x0801337d
 801335c:	080132d3 	.word	0x080132d3
 8013360:	080133ab 	.word	0x080133ab
 8013364:	080132d3 	.word	0x080132d3
 8013368:	080133cb 	.word	0x080133cb
 801336c:	080132d3 	.word	0x080132d3
 8013370:	080132d3 	.word	0x080132d3
 8013374:	080132d3 	.word	0x080132d3
 8013378:	080133eb 	.word	0x080133eb
			index = ProcessElement<uint8_t>(message, &response, element, index + 2);
 801337c:	4629      	mov	r1, r5
 801337e:	a807      	add	r0, sp, #28
 8013380:	f7fc f8d7 	bl	800f532 <_ZN13MessageHeaderC1ERKS_>
 8013384:	a90c      	add	r1, sp, #48	@ 0x30
 8013386:	a812      	add	r0, sp, #72	@ 0x48
 8013388:	f7fc f8c0 	bl	800f50c <_ZN14MessageElementC1ERKS_>
 801338c:	ab12      	add	r3, sp, #72	@ 0x48
 801338e:	aa02      	add	r2, sp, #8
 8013390:	a907      	add	r1, sp, #28
 8013392:	4630      	mov	r0, r6
 8013394:	9400      	str	r4, [sp, #0]
 8013396:	f7fe fb09 	bl	80119ac <_ZN13Communication14ProcessElementIhEEt13MessageHeaderPS1_14MessageElementt>
			index = ProcessElement<float>(message, &response, element, index + 2);
 801339a:	4604      	mov	r4, r0
 801339c:	a815      	add	r0, sp, #84	@ 0x54
 801339e:	f7ed fa7d 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80133a2:	a808      	add	r0, sp, #32
 80133a4:	f7ed fa7a 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
			break;
 80133a8:	e793      	b.n	80132d2 <_ZN13Communication12ParseMessageE13MessageHeader+0x22>
			index = ProcessElement<uint32_t>(message, &response, element, index + 2);
 80133aa:	4629      	mov	r1, r5
 80133ac:	a807      	add	r0, sp, #28
 80133ae:	f7fc f8c0 	bl	800f532 <_ZN13MessageHeaderC1ERKS_>
 80133b2:	a90c      	add	r1, sp, #48	@ 0x30
 80133b4:	a812      	add	r0, sp, #72	@ 0x48
 80133b6:	f7fc f8a9 	bl	800f50c <_ZN14MessageElementC1ERKS_>
 80133ba:	ab12      	add	r3, sp, #72	@ 0x48
 80133bc:	aa02      	add	r2, sp, #8
 80133be:	a907      	add	r1, sp, #28
 80133c0:	4630      	mov	r0, r6
 80133c2:	9400      	str	r4, [sp, #0]
 80133c4:	f7fe ff58 	bl	8012278 <_ZN13Communication14ProcessElementImEEt13MessageHeaderPS1_14MessageElementt>
 80133c8:	e7e7      	b.n	801339a <_ZN13Communication12ParseMessageE13MessageHeader+0xea>
			index = ProcessElement<int8_t>(message, &response, element, index + 2);
 80133ca:	4629      	mov	r1, r5
 80133cc:	a807      	add	r0, sp, #28
 80133ce:	f7fc f8b0 	bl	800f532 <_ZN13MessageHeaderC1ERKS_>
 80133d2:	a90c      	add	r1, sp, #48	@ 0x30
 80133d4:	a812      	add	r0, sp, #72	@ 0x48
 80133d6:	f7fc f899 	bl	800f50c <_ZN14MessageElementC1ERKS_>
 80133da:	ab12      	add	r3, sp, #72	@ 0x48
 80133dc:	aa02      	add	r2, sp, #8
 80133de:	a907      	add	r1, sp, #28
 80133e0:	4630      	mov	r0, r6
 80133e2:	9400      	str	r4, [sp, #0]
 80133e4:	f7ff fb67 	bl	8012ab6 <_ZN13Communication14ProcessElementIaEEt13MessageHeaderPS1_14MessageElementt>
 80133e8:	e7d7      	b.n	801339a <_ZN13Communication12ParseMessageE13MessageHeader+0xea>
			index = ProcessElement<float>(message, &response, element, index + 2);
 80133ea:	4629      	mov	r1, r5
 80133ec:	a807      	add	r0, sp, #28
 80133ee:	f7fc f8a0 	bl	800f532 <_ZN13MessageHeaderC1ERKS_>
 80133f2:	a90c      	add	r1, sp, #48	@ 0x30
 80133f4:	a812      	add	r0, sp, #72	@ 0x48
 80133f6:	f7fc f889 	bl	800f50c <_ZN14MessageElementC1ERKS_>
 80133fa:	ab12      	add	r3, sp, #72	@ 0x48
 80133fc:	aa02      	add	r2, sp, #8
 80133fe:	a907      	add	r1, sp, #28
 8013400:	4630      	mov	r0, r6
 8013402:	9400      	str	r4, [sp, #0]
 8013404:	f7ff ff16 	bl	8013234 <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt>
 8013408:	e7c7      	b.n	801339a <_ZN13Communication12ParseMessageE13MessageHeader+0xea>
		Send(response);
 801340a:	a902      	add	r1, sp, #8
 801340c:	a812      	add	r0, sp, #72	@ 0x48
 801340e:	f7fc f890 	bl	800f532 <_ZN13MessageHeaderC1ERKS_>
 8013412:	a912      	add	r1, sp, #72	@ 0x48
 8013414:	4630      	mov	r0, r6
 8013416:	f7fc f97b 	bl	800f710 <_ZN13Communication4SendE13MessageHeader>
 801341a:	a813      	add	r0, sp, #76	@ 0x4c
 801341c:	f7ed fa3e 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8013420:	e765      	b.n	80132ee <_ZN13Communication12ParseMessageE13MessageHeader+0x3e>
 8013422:	bf00      	nop

08013424 <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb>:
uint16_t Communication::Process(uint8_t ID, std::vector<uint8_t> data, bool* success) {
 8013424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013428:	461c      	mov	r4, r3
 801342a:	b08e      	sub	sp, #56	@ 0x38
	uint16_t processed_length = 0;
 801342c:	2300      	movs	r3, #0
uint16_t Communication::Process(uint8_t ID, std::vector<uint8_t> data, bool* success) {
 801342e:	4616      	mov	r6, r2
	CommunicationProtocol* protocol = FindProtocol(ID, success);
 8013430:	4622      	mov	r2, r4
uint16_t Communication::Process(uint8_t ID, std::vector<uint8_t> data, bool* success) {
 8013432:	4605      	mov	r5, r0
 8013434:	4688      	mov	r8, r1
	uint16_t processed_length = 0;
 8013436:	f8ad 300e 	strh.w	r3, [sp, #14]
	CommunicationProtocol* protocol = FindProtocol(ID, success);
 801343a:	f7fb fb67 	bl	800eb0c <_ZN13Communication12FindProtocolEhPb>
 801343e:	4607      	mov	r7, r0
	if (not *success)
 8013440:	7820      	ldrb	r0, [r4, #0]
 8013442:	2800      	cmp	r0, #0
 8013444:	d039      	beq.n	80134ba <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x96>
		MessageHeader message = protocol->DecodeProtocol(ID, data, &processed_length, success);
 8013446:	f10d 0a0e 	add.w	sl, sp, #14
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever); // TODO ADDED
 801344a:	f04f 31ff 	mov.w	r1, #4294967295
 801344e:	6828      	ldr	r0, [r5, #0]
 8013450:	f7f8 feb4 	bl	800c1bc <osSemaphoreAcquire>
	while (processed_length < data.size()) {// && processed_length < data.size()) {
 8013454:	f8bd 200e 	ldrh.w	r2, [sp, #14]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013458:	e9d6 1300 	ldrd	r1, r3, [r6]
 801345c:	1a5b      	subs	r3, r3, r1
 801345e:	429a      	cmp	r2, r3
 8013460:	d226      	bcs.n	80134b0 <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x8c>
		MessageHeader message = protocol->DecodeProtocol(ID, data, &processed_length, success);
 8013462:	683b      	ldr	r3, [r7, #0]
 8013464:	4631      	mov	r1, r6
 8013466:	a809      	add	r0, sp, #36	@ 0x24
 8013468:	f8d3 9000 	ldr.w	r9, [r3]
 801346c:	f7ed fac6 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8013470:	ab09      	add	r3, sp, #36	@ 0x24
 8013472:	4642      	mov	r2, r8
 8013474:	4639      	mov	r1, r7
 8013476:	a804      	add	r0, sp, #16
 8013478:	e9cd a400 	strd	sl, r4, [sp]
 801347c:	47c8      	blx	r9
      }
 801347e:	a809      	add	r0, sp, #36	@ 0x24
 8013480:	f7ed fa0c 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (not *success) break;
 8013484:	7823      	ldrb	r3, [r4, #0]
 8013486:	b183      	cbz	r3, 80134aa <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x86>
		if (!AcceptMessage(message)) {
 8013488:	a904      	add	r1, sp, #16
 801348a:	a809      	add	r0, sp, #36	@ 0x24
 801348c:	f7fc f851 	bl	800f532 <_ZN13MessageHeaderC1ERKS_>
 8013490:	a909      	add	r1, sp, #36	@ 0x24
 8013492:	4628      	mov	r0, r5
 8013494:	f7fb fb5e 	bl	800eb54 <_ZN13Communication13AcceptMessageE13MessageHeader>
 8013498:	4681      	mov	r9, r0
 801349a:	a80a      	add	r0, sp, #40	@ 0x28
 801349c:	f7ed f9fe 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80134a0:	f1b9 0f00 	cmp.w	r9, #0
 80134a4:	d10c      	bne.n	80134c0 <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x9c>
			*success = false;
 80134a6:	f884 9000 	strb.w	r9, [r4]
 80134aa:	a805      	add	r0, sp, #20
 80134ac:	f7ed f9f6 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	osSemaphoreRelease(CommunicationSemaphore);  // TODO ADDED
 80134b0:	6828      	ldr	r0, [r5, #0]
 80134b2:	f7f8 feb7 	bl	800c224 <osSemaphoreRelease>
	return processed_length;
 80134b6:	f8bd 000e 	ldrh.w	r0, [sp, #14]
}
 80134ba:	b00e      	add	sp, #56	@ 0x38
 80134bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ParseMessage(message);
 80134c0:	a904      	add	r1, sp, #16
 80134c2:	a809      	add	r0, sp, #36	@ 0x24
		message.interface = ID;
 80134c4:	f88d 8010 	strb.w	r8, [sp, #16]
		ParseMessage(message);
 80134c8:	f7fc f833 	bl	800f532 <_ZN13MessageHeaderC1ERKS_>
 80134cc:	a909      	add	r1, sp, #36	@ 0x24
 80134ce:	4628      	mov	r0, r5
 80134d0:	f7ff feee 	bl	80132b0 <_ZN13Communication12ParseMessageE13MessageHeader>
 80134d4:	a80a      	add	r0, sp, #40	@ 0x28
 80134d6:	f7ed f9e1 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80134da:	a805      	add	r0, sp, #20
 80134dc:	f7ed f9de 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80134e0:	e7b8      	b.n	8013454 <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x30>

080134e2 <_ZN13HardwareDelayC1EP17TIM_HandleTypeDef>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 80134e2:	2300      	movs	r3, #0
/**
 * @brief Class constructor
 *
 * @param input timer_: the timer pointer used to generate interrupts
 */
HardwareDelay::HardwareDelay(TIM_HandleTypeDef* timer_) {
 80134e4:	b570      	push	{r4, r5, r6, lr}
 80134e6:	4604      	mov	r4, r0
 80134e8:	6183      	str	r3, [r0, #24]
	timer = timer_;
 80134ea:	6041      	str	r1, [r0, #4]
 80134ec:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80134f0:	2024      	movs	r0, #36	@ 0x24
 80134f2:	f006 f992 	bl	801981a <_Znwj>
 80134f6:	4605      	mov	r5, r0
      ptrdiff_t __count = __last - __first;
 80134f8:	e9d4 6204 	ldrd	r6, r2, [r4, #16]
 80134fc:	1b92      	subs	r2, r2, r6
      if (__count > 0)
 80134fe:	2a00      	cmp	r2, #0
 8013500:	dd08      	ble.n	8013514 <_ZN13HardwareDelayC1EP17TIM_HandleTypeDef+0x32>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8013502:	4631      	mov	r1, r6
 8013504:	f006 fb16 	bl	8019b34 <memmove>
			- this->_M_impl._M_start);
 8013508:	69a1      	ldr	r1, [r4, #24]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801350a:	4630      	mov	r0, r6
 801350c:	1b89      	subs	r1, r1, r6
 801350e:	f006 f95f 	bl	80197d0 <_ZdlPvj>
      }
 8013512:	e001      	b.n	8013518 <_ZN13HardwareDelayC1EP17TIM_HandleTypeDef+0x36>
	if (__p)
 8013514:	2e00      	cmp	r6, #0
 8013516:	d1f7      	bne.n	8013508 <_ZN13HardwareDelayC1EP17TIM_HandleTypeDef+0x26>

	pending_delays.reserve(DELAY_NUMBER_OF_CHANNELS);
}
 8013518:	4620      	mov	r0, r4
	  this->_M_impl._M_finish = __tmp + __old_size;
 801351a:	e9c4 5504 	strd	r5, r5, [r4, #16]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801351e:	3524      	adds	r5, #36	@ 0x24
 8013520:	61a5      	str	r5, [r4, #24]
 8013522:	bd70      	pop	{r4, r5, r6, pc}

08013524 <_ZN13HardwareDelay13AssignedTimerEP17TIM_HandleTypeDef>:
 * @brief Check that the input timer is registered in the class.
 *
 * @param input timer_: the timer pointer to check
 * @return true if input timer is used by the class
 */
bool HardwareDelay::AssignedTimer(TIM_HandleTypeDef* timer_) {
 8013524:	b570      	push	{r4, r5, r6, lr}
 8013526:	4604      	mov	r4, r0
 8013528:	460e      	mov	r6, r1
	osSemaphoreAcquire(DelaySemaphore, osWaitForever);
 801352a:	6800      	ldr	r0, [r0, #0]
 801352c:	f04f 31ff 	mov.w	r1, #4294967295
 8013530:	f7f8 fe44 	bl	800c1bc <osSemaphoreAcquire>
	bool result = timer == timer_;
 8013534:	6865      	ldr	r5, [r4, #4]
	osSemaphoreRelease(DelaySemaphore);
 8013536:	6820      	ldr	r0, [r4, #0]
	bool result = timer == timer_;
 8013538:	1bab      	subs	r3, r5, r6
 801353a:	425d      	negs	r5, r3
 801353c:	415d      	adcs	r5, r3
	osSemaphoreRelease(DelaySemaphore);
 801353e:	f7f8 fe71 	bl	800c224 <osSemaphoreRelease>
	return result;
}
 8013542:	4628      	mov	r0, r5
 8013544:	bd70      	pop	{r4, r5, r6, pc}

08013546 <_ZN13HardwareDelay10StartDelayEv>:
}

/**
 * @brief Setup and start the timer based on the active delay
 */
void HardwareDelay::StartDelay(void) {
 8013546:	4603      	mov	r3, r0
	timer->Instance->CNT = 0;
 8013548:	6840      	ldr	r0, [r0, #4]
 801354a:	2200      	movs	r2, #0
 801354c:	6801      	ldr	r1, [r0, #0]
 801354e:	624a      	str	r2, [r1, #36]	@ 0x24
	return *(this->_M_impl._M_start + __n);
 8013550:	7b1a      	ldrb	r2, [r3, #12]
	timer->Instance->ARR = pending_delays[active_delay].delay;
 8013552:	691b      	ldr	r3, [r3, #16]
 8013554:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013558:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801355c:	885b      	ldrh	r3, [r3, #2]
 801355e:	62cb      	str	r3, [r1, #44]	@ 0x2c
	timer->Instance->SR = ~TIM_IT_UPDATE;
 8013560:	f06f 0301 	mvn.w	r3, #1
 8013564:	610b      	str	r3, [r1, #16]
	HAL_TIM_Base_Start_IT(timer);
 8013566:	f7f6 bc33 	b.w	8009dd0 <HAL_TIM_Base_Start_IT>
	...

0801356c <_ZN13HardwareDelay14StartNextDelayEv>:
}

/**
 * @brief Active and start the next delay
 */
void HardwareDelay::StartNextDelay(void) {
 801356c:	b5f0      	push	{r4, r5, r6, r7, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801356e:	e9d0 5304 	ldrd	r5, r3, [r0, #16]
 8013572:	4a1a      	ldr	r2, [pc, #104]	@ (80135dc <_ZN13HardwareDelay14StartNextDelayEv+0x70>)
 8013574:	1b59      	subs	r1, r3, r5
	if (pending_delays.size() == 0) return;
 8013576:	42ab      	cmp	r3, r5
 8013578:	ea4f 01a1 	mov.w	r1, r1, asr #2
 801357c:	fb02 f101 	mul.w	r1, r2, r1
 8013580:	d02b      	beq.n	80135da <_ZN13HardwareDelay14StartNextDelayEv+0x6e>

	// Find the smallest delay in memory
	uint8_t min_delay = 0;
	for (uint8_t index = 1; index < pending_delays.size(); index++) {
 8013582:	2301      	movs	r3, #1
	uint8_t min_delay = 0;
 8013584:	2400      	movs	r4, #0
	return *(this->_M_impl._M_start + __n);
 8013586:	b222      	sxth	r2, r4
	for (uint8_t index = 1; index < pending_delays.size(); index++) {
 8013588:	428b      	cmp	r3, r1
 801358a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801358e:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8013592:	d30a      	bcc.n	80135aa <_ZN13HardwareDelay14StartNextDelayEv+0x3e>
			min_delay = index;
	}

	// Update other delays based on the active one
	active_delay = min_delay;
	for (uint8_t index = 0; index < pending_delays.size(); index++) {
 8013594:	2600      	movs	r6, #0
 8013596:	f04f 0c0c 	mov.w	ip, #12
	active_delay = min_delay;
 801359a:	7304      	strb	r4, [r0, #12]
	for (uint8_t index = 0; index < pending_delays.size(); index++) {
 801359c:	b2f3      	uxtb	r3, r6
 801359e:	428b      	cmp	r3, r1
 80135a0:	d30f      	bcc.n	80135c2 <_ZN13HardwareDelay14StartNextDelayEv+0x56>
		}
	}

	// Start the delay
	StartDelay();
}
 80135a2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	StartDelay();
 80135a6:	f7ff bfce 	b.w	8013546 <_ZN13HardwareDelay10StartDelayEv>
 80135aa:	eb03 0643 	add.w	r6, r3, r3, lsl #1
		if (pending_delays[index].delay < pending_delays[min_delay].delay)
 80135ae:	8852      	ldrh	r2, [r2, #2]
 80135b0:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 80135b4:	8876      	ldrh	r6, [r6, #2]
			min_delay = index;
 80135b6:	4296      	cmp	r6, r2
 80135b8:	bf38      	it	cc
 80135ba:	461c      	movcc	r4, r3
	for (uint8_t index = 1; index < pending_delays.size(); index++) {
 80135bc:	3301      	adds	r3, #1
 80135be:	b2db      	uxtb	r3, r3
 80135c0:	e7e1      	b.n	8013586 <_ZN13HardwareDelay14StartNextDelayEv+0x1a>
		if (index != active_delay) {
 80135c2:	429c      	cmp	r4, r3
 80135c4:	d007      	beq.n	80135d6 <_ZN13HardwareDelay14StartNextDelayEv+0x6a>
 80135c6:	fb0c 5303 	mla	r3, ip, r3, r5
			pending_delays[index].delay -= pending_delays[active_delay].delay;
 80135ca:	f8b2 e002 	ldrh.w	lr, [r2, #2]
 80135ce:	885f      	ldrh	r7, [r3, #2]
 80135d0:	eba7 070e 	sub.w	r7, r7, lr
 80135d4:	805f      	strh	r7, [r3, #2]
	for (uint8_t index = 0; index < pending_delays.size(); index++) {
 80135d6:	3601      	adds	r6, #1
 80135d8:	e7e0      	b.n	801359c <_ZN13HardwareDelay14StartNextDelayEv+0x30>
}
 80135da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80135dc:	aaaaaaab 	.word	0xaaaaaaab

080135e0 <_ZNSt6vectorI5DelaySaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>:
    vector<_Tp, _Alloc>::
 80135e0:	460b      	mov	r3, r1
      : _M_current(__i) { }
 80135e2:	6842      	ldr	r2, [r0, #4]
      { return __normal_iterator(_M_current + __n); }
 80135e4:	310c      	adds	r1, #12
      if (__position + 1 != end())
 80135e6:	428a      	cmp	r2, r1
    vector<_Tp, _Alloc>::
 80135e8:	b510      	push	{r4, lr}
 80135ea:	4604      	mov	r4, r0
      if (__position + 1 != end())
 80135ec:	d004      	beq.n	80135f8 <_ZNSt6vectorI5DelaySaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80135ee:	4618      	mov	r0, r3
 80135f0:	1a52      	subs	r2, r2, r1
 80135f2:	f006 fa9f 	bl	8019b34 <memmove>
 80135f6:	4603      	mov	r3, r0
      --this->_M_impl._M_finish;
 80135f8:	6862      	ldr	r2, [r4, #4]
    }
 80135fa:	4618      	mov	r0, r3
      --this->_M_impl._M_finish;
 80135fc:	3a0c      	subs	r2, #12
 80135fe:	6062      	str	r2, [r4, #4]
    }
 8013600:	bd10      	pop	{r4, pc}

08013602 <_ZN13HardwareDelay14TriggeredDelayEv>:

/**
 * @brief ISR called by the timer. Summons the callback then start the next delay
 */
void HardwareDelay::TriggeredDelay(void) {
 8013602:	b510      	push	{r4, lr}
 8013604:	4604      	mov	r4, r0
	HAL_TIM_Base_Stop_IT(timer);
 8013606:	6840      	ldr	r0, [r0, #4]
 8013608:	f7f6 fc2a 	bl	8009e60 <HAL_TIM_Base_Stop_IT>

	osSemaphoreAcquire(DelaySemaphore, osWaitForever);
 801360c:	f04f 31ff 	mov.w	r1, #4294967295
 8013610:	6820      	ldr	r0, [r4, #0]
 8013612:	f7f8 fdd3 	bl	800c1bc <osSemaphoreAcquire>
	timer->Instance->SR = ~TIM_IT_UPDATE;
 8013616:	6863      	ldr	r3, [r4, #4]
 8013618:	f06f 0201 	mvn.w	r2, #1
 801361c:	6921      	ldr	r1, [r4, #16]
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	611a      	str	r2, [r3, #16]
 8013622:	7b23      	ldrb	r3, [r4, #12]
 8013624:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013628:	0098      	lsls	r0, r3, #2
 801362a:	eb01 0383 	add.w	r3, r1, r3, lsl #2

	// Summon callback
	if (pending_delays[active_delay].callback != NULL) {
 801362e:	689a      	ldr	r2, [r3, #8]
 8013630:	b112      	cbz	r2, 8013638 <_ZN13HardwareDelay14TriggeredDelayEv+0x36>
		pending_delays[active_delay].callback(pending_delays[active_delay].context, pending_delays[active_delay].ID);
 8013632:	5c09      	ldrb	r1, [r1, r0]
 8013634:	6858      	ldr	r0, [r3, #4]
 8013636:	4790      	blx	r2
 8013638:	7b21      	ldrb	r1, [r4, #12]
 801363a:	4620      	mov	r0, r4
 801363c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8013640:	f850 3f10 	ldr.w	r3, [r0, #16]!
      { return _M_erase(begin() + (__position - cbegin())); }
 8013644:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8013648:	f7ff ffca 	bl	80135e0 <_ZNSt6vectorI5DelaySaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>

	// Remove delay
	pending_delays.erase(pending_delays.begin() + active_delay);

	// Stat next delay
	StartNextDelay();
 801364c:	4620      	mov	r0, r4
 801364e:	f7ff ff8d 	bl	801356c <_ZN13HardwareDelay14StartNextDelayEv>
	osSemaphoreRelease(DelaySemaphore);
 8013652:	6820      	ldr	r0, [r4, #0]
}
 8013654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSemaphoreRelease(DelaySemaphore);
 8013658:	f7f8 bde4 	b.w	800c224 <osSemaphoreRelease>

0801365c <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801365c:	2800      	cmp	r0, #0
      _M_allocate(size_t __n)
 801365e:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8013660:	d006      	beq.n	8013670 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0x14>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8013662:	da01      	bge.n	8013668 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0xc>
	    std::__throw_bad_alloc();
 8013664:	f006 f988 	bl	8019978 <_ZSt17__throw_bad_allocv>
      }
 8013668:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801366c:	f006 b8d5 	b.w	801981a <_Znwj>
 8013670:	bd08      	pop	{r3, pc}
	...

08013674 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>:
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8013674:	4926      	ldr	r1, [pc, #152]	@ (8013710 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 8013676:	b510      	push	{r4, lr}
 8013678:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801367a:	4608      	mov	r0, r1
 801367c:	f006 f964 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8013680:	2800      	cmp	r0, #0
 8013682:	d133      	bne.n	80136ec <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8013684:	4923      	ldr	r1, [pc, #140]	@ (8013714 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa0>)
 8013686:	4822      	ldr	r0, [pc, #136]	@ (8013710 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8013688:	f006 f95e 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 801368c:	2800      	cmp	r0, #0
 801368e:	d12f      	bne.n	80136f0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8013690:	4921      	ldr	r1, [pc, #132]	@ (8013718 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa4>)
 8013692:	481f      	ldr	r0, [pc, #124]	@ (8013710 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8013694:	f006 f958 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8013698:	bb60      	cbnz	r0, 80136f4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 801369a:	4920      	ldr	r1, [pc, #128]	@ (801371c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa8>)
 801369c:	481c      	ldr	r0, [pc, #112]	@ (8013710 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 801369e:	f006 f953 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 80136a2:	bb48      	cbnz	r0, 80136f8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 80136a4:	491e      	ldr	r1, [pc, #120]	@ (8013720 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xac>)
 80136a6:	481a      	ldr	r0, [pc, #104]	@ (8013710 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 80136a8:	f006 f94e 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 80136ac:	bb30      	cbnz	r0, 80136fc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 80136ae:	491d      	ldr	r1, [pc, #116]	@ (8013724 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb0>)
 80136b0:	4817      	ldr	r0, [pc, #92]	@ (8013710 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 80136b2:	f006 f949 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 80136b6:	bb18      	cbnz	r0, 8013700 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 80136b8:	491b      	ldr	r1, [pc, #108]	@ (8013728 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb4>)
 80136ba:	4815      	ldr	r0, [pc, #84]	@ (8013710 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 80136bc:	f006 f944 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 80136c0:	bb00      	cbnz	r0, 8013704 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 80136c2:	491a      	ldr	r1, [pc, #104]	@ (801372c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb8>)
 80136c4:	4812      	ldr	r0, [pc, #72]	@ (8013710 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 80136c6:	f006 f93f 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 80136ca:	b9e8      	cbnz	r0, 8013708 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 80136cc:	4918      	ldr	r1, [pc, #96]	@ (8013730 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xbc>)
 80136ce:	4810      	ldr	r0, [pc, #64]	@ (8013710 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 80136d0:	f006 f93a 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 80136d4:	b9d0      	cbnz	r0, 801370c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 80136d6:	4917      	ldr	r1, [pc, #92]	@ (8013734 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xc0>)
 80136d8:	480d      	ldr	r0, [pc, #52]	@ (8013710 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 80136da:	f006 f935 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 80136de:	2800      	cmp	r0, #0
 80136e0:	bf14      	ite	ne
 80136e2:	2309      	movne	r3, #9
 80136e4:	2300      	moveq	r3, #0
 80136e6:	7020      	strb	r0, [r4, #0]
}
 80136e8:	4618      	mov	r0, r3
 80136ea:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80136ec:	2300      	movs	r3, #0
 80136ee:	e7fa      	b.n	80136e6 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 80136f0:	2301      	movs	r3, #1
 80136f2:	e7f8      	b.n	80136e6 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 80136f4:	2302      	movs	r3, #2
 80136f6:	e7f6      	b.n	80136e6 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 80136f8:	2303      	movs	r3, #3
 80136fa:	e7f4      	b.n	80136e6 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 80136fc:	2304      	movs	r3, #4
 80136fe:	e7f2      	b.n	80136e6 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 8013700:	2305      	movs	r3, #5
 8013702:	e7f0      	b.n	80136e6 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8013704:	2306      	movs	r3, #6
 8013706:	e7ee      	b.n	80136e6 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 8013708:	2307      	movs	r3, #7
 801370a:	e7ec      	b.n	80136e6 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 801370c:	2308      	movs	r3, #8
 801370e:	e7ea      	b.n	80136e6 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
 8013710:	0801a298 	.word	0x0801a298
 8013714:	0801a288 	.word	0x0801a288
 8013718:	0801a278 	.word	0x0801a278
 801371c:	0801a268 	.word	0x0801a268
 8013720:	0801a2a0 	.word	0x0801a2a0
 8013724:	0801a290 	.word	0x0801a290
 8013728:	0801a280 	.word	0x0801a280
 801372c:	0801a270 	.word	0x0801a270
 8013730:	0801a260 	.word	0x0801a260
 8013734:	0801a258 	.word	0x0801a258

08013738 <_ZN4LEDSC1Ev>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013738:	2200      	movs	r2, #0
 801373a:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801373e:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8013742:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8013746:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801374a:	e9c0 220a 	strd	r2, r2, [r0, #40]	@ 0x28
 801374e:	e9c0 220c 	strd	r2, r2, [r0, #48]	@ 0x30
/**
 * @brief Class constructor
 */
LEDS::LEDS()
{
}
 8013752:	4770      	bx	lr

08013754 <_ZN4LEDS4InitEP9Registers>:
/**
 * @brief Initialize the class with references to other classes. Set default values.
 *
 * @param input registers_: the Registers instance
 */
void LEDS::Init(Registers* registers_) {
 8013754:	b510      	push	{r4, lr}
	registers = registers_;
 8013756:	6001      	str	r1, [r0, #0]

	LEDsSemaphore = osSemaphoreNew(1,1,NULL);
 8013758:	2101      	movs	r1, #1
void LEDS::Init(Registers* registers_) {
 801375a:	4604      	mov	r4, r0
	LEDsSemaphore = osSemaphoreNew(1,1,NULL);
 801375c:	2200      	movs	r2, #0
 801375e:	4608      	mov	r0, r1
 8013760:	f7f8 fcd0 	bl	800c104 <osSemaphoreNew>
 8013764:	6060      	str	r0, [r4, #4]
	osSemaphoreRelease(LEDsSemaphore);
}
 8013766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSemaphoreRelease(LEDsSemaphore);
 801376a:	f7f8 bd5b 	b.w	800c224 <osSemaphoreRelease>

0801376e <_ZN4LEDS4SpinEv>:
}

/**
 * @brief Function used to process the blinking patterns of SMD LEDs. Called repeatedly in a freeRTOS task
 */
void LEDS::Spin(void) {
 801376e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013770:	4605      	mov	r5, r0
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8013772:	f04f 31ff 	mov.w	r1, #4294967295
 8013776:	6840      	ldr	r0, [r0, #4]
            }
            HAL_GPIO_WritePin(led.gpio.port, led.gpio.pin, (GPIO_PinState) state);

            led.counter++;
            if (led.counter >= led.T) {
                led.counter = 0;
 8013778:	2700      	movs	r7, #0
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 801377a:	f7f8 fd1f 	bl	800c1bc <osSemaphoreAcquire>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801377e:	e9d5 4602 	ldrd	r4, r6, [r5, #8]
    for (LED & led : LEDs) {
 8013782:	42a6      	cmp	r6, r4
 8013784:	d107      	bne.n	8013796 <_ZN4LEDS4SpinEv+0x28>
                if (not led.repeat)
                    led.blink = false;
            }
        }
    }
    osSemaphoreRelease(LEDsSemaphore);
 8013786:	6868      	ldr	r0, [r5, #4]
 8013788:	f7f8 fd4c 	bl	800c224 <osSemaphoreRelease>

    osDelay(DEFAULT_LEDS_PERIOD);
 801378c:	2064      	movs	r0, #100	@ 0x64
}
 801378e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    osDelay(DEFAULT_LEDS_PERIOD);
 8013792:	f7f8 bca9 	b.w	800c0e8 <osDelay>
        if (led.blink) {
 8013796:	7b22      	ldrb	r2, [r4, #12]
 8013798:	b1a2      	cbz	r2, 80137c4 <_ZN4LEDS4SpinEv+0x56>
 801379a:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
            for(uint8_t t : led.timings) {
 801379e:	4299      	cmp	r1, r3
 80137a0:	d005      	beq.n	80137ae <_ZN4LEDS4SpinEv+0x40>
 80137a2:	f813 0b01 	ldrb.w	r0, [r3], #1
                if (led.counter < t)
 80137a6:	f894 c00e 	ldrb.w	ip, [r4, #14]
 80137aa:	4584      	cmp	ip, r0
 80137ac:	d20c      	bcs.n	80137c8 <_ZN4LEDS4SpinEv+0x5a>
            HAL_GPIO_WritePin(led.gpio.port, led.gpio.pin, (GPIO_PinState) state);
 80137ae:	8921      	ldrh	r1, [r4, #8]
 80137b0:	6860      	ldr	r0, [r4, #4]
 80137b2:	f7f2 fd33 	bl	800621c <HAL_GPIO_WritePin>
            led.counter++;
 80137b6:	7ba3      	ldrb	r3, [r4, #14]
            if (led.counter >= led.T) {
 80137b8:	7f22      	ldrb	r2, [r4, #28]
            led.counter++;
 80137ba:	3301      	adds	r3, #1
 80137bc:	b2db      	uxtb	r3, r3
            if (led.counter >= led.T) {
 80137be:	429a      	cmp	r2, r3
            led.counter++;
 80137c0:	73a3      	strb	r3, [r4, #14]
            if (led.counter >= led.T) {
 80137c2:	d904      	bls.n	80137ce <_ZN4LEDS4SpinEv+0x60>
      operator++() _GLIBCXX_NOEXCEPT
 80137c4:	3420      	adds	r4, #32
	return *this;
 80137c6:	e7dc      	b.n	8013782 <_ZN4LEDS4SpinEv+0x14>
                state =  not state;
 80137c8:	f082 0201 	eor.w	r2, r2, #1
 80137cc:	e7e7      	b.n	801379e <_ZN4LEDS4SpinEv+0x30>
                if (not led.repeat)
 80137ce:	7b63      	ldrb	r3, [r4, #13]
                led.counter = 0;
 80137d0:	73a7      	strb	r7, [r4, #14]
                if (not led.repeat)
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d1f6      	bne.n	80137c4 <_ZN4LEDS4SpinEv+0x56>
                    led.blink = false;
 80137d6:	7323      	strb	r3, [r4, #12]
 80137d8:	e7f4      	b.n	80137c4 <_ZN4LEDS4SpinEv+0x56>

080137da <_ZN4LEDS6GetLEDEhPb>:
 *
 * @param input ID: LED ID
 * @param output success: true whether successful
 * @return the LED index
 */
uint8_t LEDS::GetLED(uint8_t ID, bool* success) {
 80137da:	b570      	push	{r4, r5, r6, lr}
 80137dc:	e9d0 3402 	ldrd	r3, r4, [r0, #8]
    uint8_t index = 0;
    for (LED & led : LEDs) {
 80137e0:	2000      	movs	r0, #0
 80137e2:	429c      	cmp	r4, r3
 80137e4:	461d      	mov	r5, r3
 80137e6:	d102      	bne.n	80137ee <_ZN4LEDS6GetLEDEhPb+0x14>
 80137e8:	2300      	movs	r3, #0
            return index;
        }
        index++;
    }
    *success = false;
    return 0;
 80137ea:	4618      	mov	r0, r3
 80137ec:	e006      	b.n	80137fc <_ZN4LEDS6GetLEDEhPb+0x22>
        if (led.ID == ID) {
 80137ee:	782d      	ldrb	r5, [r5, #0]
 80137f0:	1c46      	adds	r6, r0, #1
 80137f2:	3320      	adds	r3, #32
 80137f4:	428d      	cmp	r5, r1
 80137f6:	d103      	bne.n	8013800 <_ZN4LEDS6GetLEDEhPb+0x26>
 80137f8:	b2c0      	uxtb	r0, r0
 80137fa:	2301      	movs	r3, #1
            *success = true;
 80137fc:	7013      	strb	r3, [r2, #0]
}
 80137fe:	bd70      	pop	{r4, r5, r6, pc}
 8013800:	4630      	mov	r0, r6
 8013802:	e7ee      	b.n	80137e2 <_ZN4LEDS6GetLEDEhPb+0x8>

08013804 <_ZN4LEDS6SetLEDEh13GPIO_PinState>:
bool LEDS::SetLED(uint8_t ID, GPIO_PinState state) {
 8013804:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013806:	4616      	mov	r6, r2
    uint8_t index = GetLED(ID, &success);
 8013808:	f10d 0207 	add.w	r2, sp, #7
bool LEDS::SetLED(uint8_t ID, GPIO_PinState state) {
 801380c:	4604      	mov	r4, r0
    uint8_t index = GetLED(ID, &success);
 801380e:	f7ff ffe4 	bl	80137da <_ZN4LEDS6GetLEDEhPb>
    if (success) {
 8013812:	f89d 7007 	ldrb.w	r7, [sp, #7]
    uint8_t index = GetLED(ID, &success);
 8013816:	4605      	mov	r5, r0
    if (success) {
 8013818:	b17f      	cbz	r7, 801383a <_ZN4LEDS6SetLEDEh13GPIO_PinState+0x36>
    	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 801381a:	f04f 31ff 	mov.w	r1, #4294967295
 801381e:	6860      	ldr	r0, [r4, #4]
 8013820:	f7f8 fccc 	bl	800c1bc <osSemaphoreAcquire>
	return *(this->_M_impl._M_start + __n);
 8013824:	68a3      	ldr	r3, [r4, #8]
 8013826:	b22d      	sxth	r5, r5
        LEDs[index].blink = false;
 8013828:	2200      	movs	r2, #0
 801382a:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 801382e:	731a      	strb	r2, [r3, #12]
        HAL_GPIO_WritePin(LEDs[index].gpio.port, LEDs[index].gpio.pin, state);
 8013830:	4632      	mov	r2, r6
 8013832:	8919      	ldrh	r1, [r3, #8]
 8013834:	6858      	ldr	r0, [r3, #4]
 8013836:	f7f2 fcf1 	bl	800621c <HAL_GPIO_WritePin>
    osSemaphoreRelease(LEDsSemaphore);
 801383a:	6860      	ldr	r0, [r4, #4]
 801383c:	f7f8 fcf2 	bl	800c224 <osSemaphoreRelease>
}
 8013840:	4638      	mov	r0, r7
 8013842:	b003      	add	sp, #12
 8013844:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013846 <_ZN4LEDS5BlinkEh>:
bool LEDS::Blink(uint8_t ID) {
 8013846:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013848:	460d      	mov	r5, r1
 801384a:	4604      	mov	r4, r0
    osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 801384c:	f04f 31ff 	mov.w	r1, #4294967295
 8013850:	6840      	ldr	r0, [r0, #4]
 8013852:	f7f8 fcb3 	bl	800c1bc <osSemaphoreAcquire>
    uint8_t index = GetLED(ID, &success);
 8013856:	4629      	mov	r1, r5
 8013858:	f10d 0207 	add.w	r2, sp, #7
 801385c:	4620      	mov	r0, r4
 801385e:	f7ff ffbc 	bl	80137da <_ZN4LEDS6GetLEDEhPb>
    if (success) {
 8013862:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8013866:	b145      	cbz	r5, 801387a <_ZN4LEDS5BlinkEh+0x34>
 8013868:	68a3      	ldr	r3, [r4, #8]
 801386a:	b200      	sxth	r0, r0
        LEDs[index].blink = true;
 801386c:	f240 1201 	movw	r2, #257	@ 0x101
 8013870:	eb03 1340 	add.w	r3, r3, r0, lsl #5
 8013874:	819a      	strh	r2, [r3, #12]
        LEDs[index].counter = 0;
 8013876:	2200      	movs	r2, #0
 8013878:	739a      	strb	r2, [r3, #14]
    osSemaphoreRelease(LEDsSemaphore);
 801387a:	6860      	ldr	r0, [r4, #4]
 801387c:	f7f8 fcd2 	bl	800c224 <osSemaphoreRelease>
}
 8013880:	4628      	mov	r0, r5
 8013882:	b003      	add	sp, #12
 8013884:	bd30      	pop	{r4, r5, pc}

08013886 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE1_4_FUNES0_tS1_t>:
			return self->Blink(*input);
 8013886:	7811      	ldrb	r1, [r2, #0]
 8013888:	f7ff bfdd 	b.w	8013846 <_ZN4LEDS5BlinkEh>

0801388c <_ZN4LEDS9BlinkOnceEh>:
bool LEDS::BlinkOnce(uint8_t ID) {
 801388c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801388e:	460d      	mov	r5, r1
 8013890:	4604      	mov	r4, r0
    osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8013892:	f04f 31ff 	mov.w	r1, #4294967295
 8013896:	6840      	ldr	r0, [r0, #4]
 8013898:	f7f8 fc90 	bl	800c1bc <osSemaphoreAcquire>
    uint8_t index = GetLED(ID, &success);
 801389c:	4629      	mov	r1, r5
 801389e:	f10d 0207 	add.w	r2, sp, #7
 80138a2:	4620      	mov	r0, r4
 80138a4:	f7ff ff99 	bl	80137da <_ZN4LEDS6GetLEDEhPb>
    if (success) {
 80138a8:	f89d 5007 	ldrb.w	r5, [sp, #7]
 80138ac:	b13d      	cbz	r5, 80138be <_ZN4LEDS9BlinkOnceEh+0x32>
 80138ae:	68a3      	ldr	r3, [r4, #8]
 80138b0:	b200      	sxth	r0, r0
        LEDs[index].blink = true;
 80138b2:	2201      	movs	r2, #1
 80138b4:	eb03 1340 	add.w	r3, r3, r0, lsl #5
 80138b8:	819a      	strh	r2, [r3, #12]
        LEDs[index].counter = 0;
 80138ba:	2200      	movs	r2, #0
 80138bc:	739a      	strb	r2, [r3, #14]
    osSemaphoreRelease(LEDsSemaphore);
 80138be:	6860      	ldr	r0, [r4, #4]
 80138c0:	f7f8 fcb0 	bl	800c224 <osSemaphoreRelease>
}
 80138c4:	4628      	mov	r0, r5
 80138c6:	b003      	add	sp, #12
 80138c8:	bd30      	pop	{r4, r5, pc}

080138ca <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE2_4_FUNES0_tS1_t>:
			return self->BlinkOnce(*input);
 80138ca:	7811      	ldrb	r1, [r2, #0]
 80138cc:	f7ff bfde 	b.w	801388c <_ZN4LEDS9BlinkOnceEh>

080138d0 <_ZN4LEDS9GetRGBLEDEhPb>:
 *
 * @param input ID: LED ID
 * @param output success: true whether successful
 * @return the LED index
 */
uint8_t LEDS::GetRGBLED(uint8_t ID, bool* success) {
 80138d0:	b570      	push	{r4, r5, r6, lr}
 80138d2:	e9d0 3405 	ldrd	r3, r4, [r0, #20]
    uint8_t index = 0;
    for (RGBLED & led : RGB_LEDs) {
 80138d6:	2000      	movs	r0, #0
 80138d8:	429c      	cmp	r4, r3
 80138da:	461d      	mov	r5, r3
 80138dc:	d102      	bne.n	80138e4 <_ZN4LEDS9GetRGBLEDEhPb+0x14>
 80138de:	2300      	movs	r3, #0
            return index;
        }
        index++;
    }
    *success = false;
    return 0;
 80138e0:	4618      	mov	r0, r3
 80138e2:	e006      	b.n	80138f2 <_ZN4LEDS9GetRGBLEDEhPb+0x22>
        if (led.ID == ID) {
 80138e4:	782d      	ldrb	r5, [r5, #0]
 80138e6:	1c46      	adds	r6, r0, #1
 80138e8:	3310      	adds	r3, #16
 80138ea:	428d      	cmp	r5, r1
 80138ec:	d103      	bne.n	80138f6 <_ZN4LEDS9GetRGBLEDEhPb+0x26>
 80138ee:	b2c0      	uxtb	r0, r0
 80138f0:	2301      	movs	r3, #1
            *success = true;
 80138f2:	7013      	strb	r3, [r2, #0]
}
 80138f4:	bd70      	pop	{r4, r5, r6, pc}
 80138f6:	4630      	mov	r0, r6
 80138f8:	e7ee      	b.n	80138d8 <_ZN4LEDS9GetRGBLEDEhPb+0x8>

080138fa <_ZN4LEDS6SetRGBEhhhh>:
bool LEDS::SetRGB(uint8_t ID, uint8_t R, uint8_t G, uint8_t B) {
 80138fa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80138fe:	4617      	mov	r7, r2
    uint8_t index = GetRGBLED(ID, &success);
 8013900:	f10d 0207 	add.w	r2, sp, #7
bool LEDS::SetRGB(uint8_t ID, uint8_t R, uint8_t G, uint8_t B) {
 8013904:	4604      	mov	r4, r0
 8013906:	461e      	mov	r6, r3
    uint8_t index = GetRGBLED(ID, &success);
 8013908:	f7ff ffe2 	bl	80138d0 <_ZN4LEDS9GetRGBLEDEhPb>
    if (success) {
 801390c:	f89d 8007 	ldrb.w	r8, [sp, #7]
    uint8_t index = GetRGBLED(ID, &success);
 8013910:	4605      	mov	r5, r0
    if (success) {
 8013912:	f1b8 0f00 	cmp.w	r8, #0
 8013916:	d010      	beq.n	801393a <_ZN4LEDS6SetRGBEhhhh+0x40>
    	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8013918:	f04f 31ff 	mov.w	r1, #4294967295
 801391c:	6860      	ldr	r0, [r4, #4]
 801391e:	f7f8 fc4d 	bl	800c1bc <osSemaphoreAcquire>
 8013922:	6961      	ldr	r1, [r4, #20]
 8013924:	b22d      	sxth	r5, r5
 8013926:	eb01 1105 	add.w	r1, r1, r5, lsl #4
        RGBLED led = RGB_LEDs[index];
 801392a:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
        *led.pulse_red = R;
 801392e:	6849      	ldr	r1, [r1, #4]
 8013930:	600f      	str	r7, [r1, #0]
        *led.pulse_green = G;
 8013932:	6016      	str	r6, [r2, #0]
        *led.pulse_blue = B;
 8013934:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8013938:	601a      	str	r2, [r3, #0]
    osSemaphoreRelease(LEDsSemaphore);
 801393a:	6860      	ldr	r0, [r4, #4]
 801393c:	f7f8 fc72 	bl	800c224 <osSemaphoreRelease>
}
 8013940:	4640      	mov	r0, r8
 8013942:	b002      	add	sp, #8
 8013944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013948 <_ZN4LEDS9GetI2CLEDEhPb>:
 *
 * @param input ID: LED ID
 * @param output success: true whether successful
 * @return the LED index
 */
uint8_t LEDS::GetI2CLED(uint8_t ID, bool* success) {
 8013948:	b570      	push	{r4, r5, r6, lr}
 801394a:	e9d0 3408 	ldrd	r3, r4, [r0, #32]
    uint8_t index = 0;
    for (I2CLED & led : I2C_LEDs) {
 801394e:	2000      	movs	r0, #0
 8013950:	429c      	cmp	r4, r3
 8013952:	461d      	mov	r5, r3
 8013954:	d102      	bne.n	801395c <_ZN4LEDS9GetI2CLEDEhPb+0x14>
 8013956:	2300      	movs	r3, #0
            return index;
        }
        index++;
    }
    *success = false;
    return 0;
 8013958:	4618      	mov	r0, r3
 801395a:	e006      	b.n	801396a <_ZN4LEDS9GetI2CLEDEhPb+0x22>
        if (led.ID == ID) {
 801395c:	782d      	ldrb	r5, [r5, #0]
 801395e:	1c46      	adds	r6, r0, #1
 8013960:	3310      	adds	r3, #16
 8013962:	428d      	cmp	r5, r1
 8013964:	d103      	bne.n	801396e <_ZN4LEDS9GetI2CLEDEhPb+0x26>
 8013966:	b2c0      	uxtb	r0, r0
 8013968:	2301      	movs	r3, #1
            *success = true;
 801396a:	7013      	strb	r3, [r2, #0]
}
 801396c:	bd70      	pop	{r4, r5, r6, pc}
 801396e:	4630      	mov	r0, r6
 8013970:	e7ee      	b.n	8013950 <_ZN4LEDS9GetI2CLEDEhPb+0x8>

08013972 <_ZN4LEDS12GetI2CRGBLEDEhPb>:
 *
 * @param input ID: LED ID
 * @param output success: true whether successful
 * @return the LED index
 */
uint8_t LEDS::GetI2CRGBLED(uint8_t ID, bool* success) {
 8013972:	b570      	push	{r4, r5, r6, lr}
 8013974:	e9d0 340b 	ldrd	r3, r4, [r0, #44]	@ 0x2c
    uint8_t index = 0;
    for (I2CRGBLED & led : I2C_RGB_LEDs) {
 8013978:	2000      	movs	r0, #0
 801397a:	429c      	cmp	r4, r3
 801397c:	461d      	mov	r5, r3
 801397e:	d102      	bne.n	8013986 <_ZN4LEDS12GetI2CRGBLEDEhPb+0x14>
 8013980:	2300      	movs	r3, #0
            return index;
        }
        index++;
    }
    *success = false;
    return 0;
 8013982:	4618      	mov	r0, r3
 8013984:	e006      	b.n	8013994 <_ZN4LEDS12GetI2CRGBLEDEhPb+0x22>
        if (led.ID == ID) {
 8013986:	782d      	ldrb	r5, [r5, #0]
 8013988:	1c46      	adds	r6, r0, #1
 801398a:	3314      	adds	r3, #20
 801398c:	428d      	cmp	r5, r1
 801398e:	d103      	bne.n	8013998 <_ZN4LEDS12GetI2CRGBLEDEhPb+0x26>
 8013990:	b2c0      	uxtb	r0, r0
 8013992:	2301      	movs	r3, #1
            *success = true;
 8013994:	7013      	strb	r3, [r2, #0]
}
 8013996:	bd70      	pop	{r4, r5, r6, pc}
 8013998:	4630      	mov	r0, r6
 801399a:	e7ee      	b.n	801397a <_ZN4LEDS12GetI2CRGBLEDEhPb+0x8>

0801399c <_ZN4LEDS15ConfigureI2CLEDEhtPhtm>:
HAL_StatusTypeDef LEDS::ConfigureI2CLED(uint8_t ID, uint16_t memory_address, uint8_t* data, uint16_t size, uint32_t timeout) {
 801399c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139a0:	4604      	mov	r4, r0
 80139a2:	b089      	sub	sp, #36	@ 0x24
 80139a4:	4688      	mov	r8, r1
 80139a6:	461f      	mov	r7, r3
 80139a8:	9205      	str	r2, [sp, #20]
 80139aa:	f8bd b048 	ldrh.w	fp, [sp, #72]	@ 0x48
	uint32_t end_timestamp = HAL_GetTick() + timeout;
 80139ae:	f7ef fba9 	bl	8003104 <HAL_GetTick>
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 80139b2:	f04f 31ff 	mov.w	r1, #4294967295
	uint32_t end_timestamp = HAL_GetTick() + timeout;
 80139b6:	4605      	mov	r5, r0
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 80139b8:	6860      	ldr	r0, [r4, #4]
 80139ba:	f7f8 fbff 	bl	800c1bc <osSemaphoreAcquire>
	index = GetI2CRGBLED(ID, &success);
 80139be:	f10d 021f 	add.w	r2, sp, #31
 80139c2:	4641      	mov	r1, r8
 80139c4:	4620      	mov	r0, r4
 80139c6:	f7ff ffd4 	bl	8013972 <_ZN4LEDS12GetI2CRGBLEDEhPb>
	if (success) {
 80139ca:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80139ce:	b323      	cbz	r3, 8013a1a <_ZN4LEDS15ConfigureI2CLEDEhtPhtm+0x7e>
 80139d0:	b200      	sxth	r0, r0
 80139d2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80139d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80139d8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
		present = led->present;
 80139dc:	785e      	ldrb	r6, [r3, #1]
	osSemaphoreRelease(LEDsSemaphore);
 80139de:	6860      	ldr	r0, [r4, #4]
		interface = led->interface;
 80139e0:	f8d3 8004 	ldr.w	r8, [r3, #4]
		device_address = led->device_address;
 80139e4:	f8b3 9008 	ldrh.w	r9, [r3, #8]
		memory_address_size = led->memory_address_size;
 80139e8:	f8b3 a00a 	ldrh.w	sl, [r3, #10]
	osSemaphoreRelease(LEDsSemaphore);
 80139ec:	f7f8 fc1a 	bl	800c224 <osSemaphoreRelease>
	if (present) {
 80139f0:	b18e      	cbz	r6, 8013a16 <_ZN4LEDS15ConfigureI2CLEDEhtPhtm+0x7a>
	uint32_t end_timestamp = HAL_GetTick() + timeout;
 80139f2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80139f4:	441d      	add	r5, r3
			status = HAL_I2C_Mem_Write(interface, device_address, memory_address, memory_address_size, data, size, timeout);
 80139f6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80139f8:	4649      	mov	r1, r9
 80139fa:	9a05      	ldr	r2, [sp, #20]
 80139fc:	4640      	mov	r0, r8
 80139fe:	9700      	str	r7, [sp, #0]
 8013a00:	e9cd b301 	strd	fp, r3, [sp, #4]
 8013a04:	4653      	mov	r3, sl
 8013a06:	f7f2 fdf1 	bl	80065ec <HAL_I2C_Mem_Write>
		} while ((status == HAL_BUSY) && (HAL_GetTick() < end_timestamp)); // try until the bus is free
 8013a0a:	2802      	cmp	r0, #2
 8013a0c:	d10f      	bne.n	8013a2e <_ZN4LEDS15ConfigureI2CLEDEhtPhtm+0x92>
 8013a0e:	f7ef fb79 	bl	8003104 <HAL_GetTick>
 8013a12:	42a8      	cmp	r0, r5
 8013a14:	d3ef      	bcc.n	80139f6 <_ZN4LEDS15ConfigureI2CLEDEhtPhtm+0x5a>
	HAL_StatusTypeDef status = HAL_BUSY;
 8013a16:	2002      	movs	r0, #2
 8013a18:	e009      	b.n	8013a2e <_ZN4LEDS15ConfigureI2CLEDEhtPhtm+0x92>
		index = GetI2CLED(ID, &success);
 8013a1a:	4620      	mov	r0, r4
 8013a1c:	f7ff ff94 	bl	8013948 <_ZN4LEDS9GetI2CLEDEhPb>
		if (!success) {
 8013a20:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8013a24:	b933      	cbnz	r3, 8013a34 <_ZN4LEDS15ConfigureI2CLEDEhtPhtm+0x98>
			osSemaphoreRelease(LEDsSemaphore);
 8013a26:	6860      	ldr	r0, [r4, #4]
 8013a28:	f7f8 fbfc 	bl	800c224 <osSemaphoreRelease>
			return HAL_ERROR;
 8013a2c:	2001      	movs	r0, #1
}
 8013a2e:	b009      	add	sp, #36	@ 0x24
 8013a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a34:	b200      	sxth	r0, r0
 8013a36:	6a23      	ldr	r3, [r4, #32]
 8013a38:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8013a3c:	e7ce      	b.n	80139dc <_ZN4LEDS15ConfigureI2CLEDEhtPhtm+0x40>

08013a3e <_ZN4LEDS15ConfigureI2CLEDEhthm>:
HAL_StatusTypeDef LEDS::ConfigureI2CLED(uint8_t ID, uint16_t memory_address, uint8_t data, uint32_t timeout) {
 8013a3e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buffer = data;
 8013a40:	f88d 300f 	strb.w	r3, [sp, #15]
	return ConfigureI2CLED(ID, memory_address, &buffer, 1, timeout);
 8013a44:	9b06      	ldr	r3, [sp, #24]
 8013a46:	9301      	str	r3, [sp, #4]
 8013a48:	2301      	movs	r3, #1
 8013a4a:	9300      	str	r3, [sp, #0]
 8013a4c:	f10d 030f 	add.w	r3, sp, #15
 8013a50:	f7ff ffa4 	bl	801399c <_ZN4LEDS15ConfigureI2CLEDEhtPhtm>
}
 8013a54:	b005      	add	sp, #20
 8013a56:	f85d fb04 	ldr.w	pc, [sp], #4

08013a5a <_ZN4LEDS6SetLEDEhhm>:
HAL_StatusTypeDef LEDS::SetLED(uint8_t ID, uint8_t value, uint32_t timeout) {
 8013a5a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8013a5e:	4604      	mov	r4, r0
 8013a60:	460d      	mov	r5, r1
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8013a62:	6840      	ldr	r0, [r0, #4]
 8013a64:	f04f 31ff 	mov.w	r1, #4294967295
HAL_StatusTypeDef LEDS::SetLED(uint8_t ID, uint8_t value, uint32_t timeout) {
 8013a68:	461f      	mov	r7, r3
 8013a6a:	4616      	mov	r6, r2
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8013a6c:	f7f8 fba6 	bl	800c1bc <osSemaphoreAcquire>
	uint8_t index = GetI2CLED(ID, &success);
 8013a70:	f10d 020f 	add.w	r2, sp, #15
 8013a74:	4629      	mov	r1, r5
 8013a76:	4620      	mov	r0, r4
 8013a78:	f7ff ff66 	bl	8013948 <_ZN4LEDS9GetI2CLEDEhPb>
	if (!success) {
 8013a7c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8013a80:	b933      	cbnz	r3, 8013a90 <_ZN4LEDS6SetLEDEhhm+0x36>
		osSemaphoreRelease(LEDsSemaphore);
 8013a82:	6860      	ldr	r0, [r4, #4]
 8013a84:	f7f8 fbce 	bl	800c224 <osSemaphoreRelease>
		return HAL_ERROR;
 8013a88:	2001      	movs	r0, #1
}
 8013a8a:	b004      	add	sp, #16
 8013a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a90:	6a23      	ldr	r3, [r4, #32]
 8013a92:	b200      	sxth	r0, r0
 8013a94:	eb03 1800 	add.w	r8, r3, r0, lsl #4
	osSemaphoreRelease(LEDsSemaphore);
 8013a98:	6860      	ldr	r0, [r4, #4]
 8013a9a:	f7f8 fbc3 	bl	800c224 <osSemaphoreRelease>
	return ConfigureI2CLED(ID, led->light_address, value, timeout);
 8013a9e:	4633      	mov	r3, r6
 8013aa0:	f8b8 200e 	ldrh.w	r2, [r8, #14]
 8013aa4:	4629      	mov	r1, r5
 8013aa6:	4620      	mov	r0, r4
 8013aa8:	9700      	str	r7, [sp, #0]
 8013aaa:	f7ff ffc8 	bl	8013a3e <_ZN4LEDS15ConfigureI2CLEDEhthm>
 8013aae:	e7ec      	b.n	8013a8a <_ZN4LEDS6SetLEDEhhm+0x30>

08013ab0 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 8013ab0:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8013ab2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013ab4:	4604      	mov	r4, r0
 8013ab6:	4615      	mov	r5, r2
			if (length != 2) return false;
 8013ab8:	d002      	beq.n	8013ac0 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x10>
 8013aba:	2000      	movs	r0, #0
		}
 8013abc:	b003      	add	sp, #12
 8013abe:	bd30      	pop	{r4, r5, pc}
			self->GetLED(ID, &success);
 8013ac0:	f10d 0207 	add.w	r2, sp, #7
 8013ac4:	7829      	ldrb	r1, [r5, #0]
 8013ac6:	f7ff fe88 	bl	80137da <_ZN4LEDS6GetLEDEhPb>
			if (success) {
 8013aca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013ace:	b14b      	cbz	r3, 8013ae4 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x34>
				return self->SetLED(input[0], (input[1] == 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8013ad0:	786a      	ldrb	r2, [r5, #1]
 8013ad2:	4620      	mov	r0, r4
 8013ad4:	3a00      	subs	r2, #0
 8013ad6:	bf18      	it	ne
 8013ad8:	2201      	movne	r2, #1
		}
 8013ada:	b003      	add	sp, #12
 8013adc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
				return self->SetLED(input[0], (input[1] == 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8013ae0:	f7ff be90 	b.w	8013804 <_ZN4LEDS6SetLEDEh13GPIO_PinState>
			self->GetI2CLED(ID, &success);
 8013ae4:	4620      	mov	r0, r4
 8013ae6:	f7ff ff2f 	bl	8013948 <_ZN4LEDS9GetI2CLEDEhPb>
			if (success) {
 8013aea:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d0e3      	beq.n	8013aba <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0xa>
				return self->SetLED(input[0], input[1]) == HAL_OK;
 8013af2:	f04f 33ff 	mov.w	r3, #4294967295
 8013af6:	786a      	ldrb	r2, [r5, #1]
 8013af8:	4620      	mov	r0, r4
 8013afa:	f7ff ffae 	bl	8013a5a <_ZN4LEDS6SetLEDEhhm>
 8013afe:	fab0 f080 	clz	r0, r0
 8013b02:	0940      	lsrs	r0, r0, #5
 8013b04:	e7da      	b.n	8013abc <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0xc>

08013b06 <_ZN4LEDS13SetBrightnessEhhm>:
HAL_StatusTypeDef LEDS::SetBrightness(uint8_t ID, uint8_t brightness, uint32_t timeout) {
 8013b06:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8013b0a:	4604      	mov	r4, r0
 8013b0c:	460d      	mov	r5, r1
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8013b0e:	6840      	ldr	r0, [r0, #4]
 8013b10:	f04f 31ff 	mov.w	r1, #4294967295
HAL_StatusTypeDef LEDS::SetBrightness(uint8_t ID, uint8_t brightness, uint32_t timeout) {
 8013b14:	461f      	mov	r7, r3
 8013b16:	4616      	mov	r6, r2
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8013b18:	f7f8 fb50 	bl	800c1bc <osSemaphoreAcquire>
	uint8_t index = GetI2CRGBLED(ID, &success);
 8013b1c:	f10d 020f 	add.w	r2, sp, #15
 8013b20:	4629      	mov	r1, r5
 8013b22:	4620      	mov	r0, r4
 8013b24:	f7ff ff25 	bl	8013972 <_ZN4LEDS12GetI2CRGBLEDEhPb>
	if (!success) {
 8013b28:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8013b2c:	b933      	cbnz	r3, 8013b3c <_ZN4LEDS13SetBrightnessEhhm+0x36>
		osSemaphoreRelease(LEDsSemaphore);
 8013b2e:	6860      	ldr	r0, [r4, #4]
 8013b30:	f7f8 fb78 	bl	800c224 <osSemaphoreRelease>
		return HAL_ERROR;
 8013b34:	2001      	movs	r0, #1
}
 8013b36:	b004      	add	sp, #16
 8013b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b3c:	b200      	sxth	r0, r0
 8013b3e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8013b40:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8013b44:	eb03 0880 	add.w	r8, r3, r0, lsl #2
	osSemaphoreRelease(LEDsSemaphore);
 8013b48:	6860      	ldr	r0, [r4, #4]
 8013b4a:	f7f8 fb6b 	bl	800c224 <osSemaphoreRelease>
	return ConfigureI2CLED(ID, led->brightness_address, brightness, timeout);
 8013b4e:	4633      	mov	r3, r6
 8013b50:	f8b8 200c 	ldrh.w	r2, [r8, #12]
 8013b54:	4629      	mov	r1, r5
 8013b56:	4620      	mov	r0, r4
 8013b58:	9700      	str	r7, [sp, #0]
 8013b5a:	f7ff ff70 	bl	8013a3e <_ZN4LEDS15ConfigureI2CLEDEhthm>
 8013b5e:	e7ea      	b.n	8013b36 <_ZN4LEDS13SetBrightnessEhhm+0x30>

08013b60 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE4_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 8013b60:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8013b62:	4611      	mov	r1, r2
 8013b64:	b508      	push	{r3, lr}
			if (length != 2) return false;
 8013b66:	d109      	bne.n	8013b7c <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE4_4_FUNES0_tS1_t+0x1c>
			return self->SetBrightness(input[0], input[1]) == HAL_OK;
 8013b68:	f04f 33ff 	mov.w	r3, #4294967295
 8013b6c:	7852      	ldrb	r2, [r2, #1]
 8013b6e:	7809      	ldrb	r1, [r1, #0]
 8013b70:	f7ff ffc9 	bl	8013b06 <_ZN4LEDS13SetBrightnessEhhm>
 8013b74:	fab0 f080 	clz	r0, r0
 8013b78:	0940      	lsrs	r0, r0, #5
		}
 8013b7a:	bd08      	pop	{r3, pc}
			if (length != 2) return false;
 8013b7c:	2000      	movs	r0, #0
 8013b7e:	e7fc      	b.n	8013b7a <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE4_4_FUNES0_tS1_t+0x1a>

08013b80 <_ZN4LEDS9SetI2CRGBEhhhhm>:
HAL_StatusTypeDef LEDS::SetI2CRGB(uint8_t ID, uint8_t R, uint8_t G, uint8_t B, uint32_t timeout) {
 8013b80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013b84:	4604      	mov	r4, r0
 8013b86:	460d      	mov	r5, r1
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8013b88:	6840      	ldr	r0, [r0, #4]
 8013b8a:	f04f 31ff 	mov.w	r1, #4294967295
HAL_StatusTypeDef LEDS::SetI2CRGB(uint8_t ID, uint8_t R, uint8_t G, uint8_t B, uint32_t timeout) {
 8013b8e:	4699      	mov	r9, r3
 8013b90:	4692      	mov	sl, r2
 8013b92:	f89d 8030 	ldrb.w	r8, [sp, #48]	@ 0x30
 8013b96:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8013b98:	f7f8 fb10 	bl	800c1bc <osSemaphoreAcquire>
	uint8_t index = GetI2CRGBLED(ID, &success);
 8013b9c:	f10d 020f 	add.w	r2, sp, #15
 8013ba0:	4629      	mov	r1, r5
 8013ba2:	4620      	mov	r0, r4
 8013ba4:	f7ff fee5 	bl	8013972 <_ZN4LEDS12GetI2CRGBLEDEhPb>
	if (!success) {
 8013ba8:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8013bac:	b933      	cbnz	r3, 8013bbc <_ZN4LEDS9SetI2CRGBEhhhhm+0x3c>
		osSemaphoreRelease(LEDsSemaphore);
 8013bae:	6860      	ldr	r0, [r4, #4]
 8013bb0:	f7f8 fb38 	bl	800c224 <osSemaphoreRelease>
		return HAL_ERROR;
 8013bb4:	2001      	movs	r0, #1
}
 8013bb6:	b004      	add	sp, #16
 8013bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013bbc:	b200      	sxth	r0, r0
 8013bbe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013bc0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8013bc4:	eb06 0680 	add.w	r6, r6, r0, lsl #2
	osSemaphoreRelease(LEDsSemaphore);
 8013bc8:	6860      	ldr	r0, [r4, #4]
 8013bca:	f7f8 fb2b 	bl	800c224 <osSemaphoreRelease>
	status = ConfigureI2CLED(ID, led->R_address, R, timeout);
 8013bce:	4653      	mov	r3, sl
 8013bd0:	89f2      	ldrh	r2, [r6, #14]
 8013bd2:	4629      	mov	r1, r5
 8013bd4:	4620      	mov	r0, r4
 8013bd6:	9700      	str	r7, [sp, #0]
 8013bd8:	f7ff ff31 	bl	8013a3e <_ZN4LEDS15ConfigureI2CLEDEhthm>
	if (status != HAL_OK) return status;
 8013bdc:	2800      	cmp	r0, #0
 8013bde:	d1ea      	bne.n	8013bb6 <_ZN4LEDS9SetI2CRGBEhhhhm+0x36>
	status = ConfigureI2CLED(ID, led->G_address, G, timeout);
 8013be0:	8a32      	ldrh	r2, [r6, #16]
 8013be2:	464b      	mov	r3, r9
 8013be4:	4629      	mov	r1, r5
 8013be6:	4620      	mov	r0, r4
 8013be8:	9700      	str	r7, [sp, #0]
 8013bea:	f7ff ff28 	bl	8013a3e <_ZN4LEDS15ConfigureI2CLEDEhthm>
	if (status != HAL_OK) return status;
 8013bee:	2800      	cmp	r0, #0
 8013bf0:	d1e1      	bne.n	8013bb6 <_ZN4LEDS9SetI2CRGBEhhhhm+0x36>
	status = ConfigureI2CLED(ID, led->B_address, B, timeout);
 8013bf2:	8a72      	ldrh	r2, [r6, #18]
 8013bf4:	4643      	mov	r3, r8
 8013bf6:	4629      	mov	r1, r5
 8013bf8:	4620      	mov	r0, r4
 8013bfa:	970c      	str	r7, [sp, #48]	@ 0x30
}
 8013bfc:	b004      	add	sp, #16
 8013bfe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	status = ConfigureI2CLED(ID, led->B_address, B, timeout);
 8013c02:	f7ff bf1c 	b.w	8013a3e <_ZN4LEDS15ConfigureI2CLEDEhthm>

08013c06 <_ZN4LEDS8ClearLEDEh>:
bool LEDS::ClearLED(uint8_t ID) {
 8013c06:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8013c0a:	4604      	mov	r4, r0
 8013c0c:	460d      	mov	r5, r1
    osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8013c0e:	6840      	ldr	r0, [r0, #4]
 8013c10:	f04f 31ff 	mov.w	r1, #4294967295
 8013c14:	f7f8 fad2 	bl	800c1bc <osSemaphoreAcquire>
    uint8_t index = GetLED(ID, &success);
 8013c18:	f10d 020f 	add.w	r2, sp, #15
 8013c1c:	4629      	mov	r1, r5
 8013c1e:	4620      	mov	r0, r4
 8013c20:	f7ff fddb 	bl	80137da <_ZN4LEDS6GetLEDEhPb>
    if (success) {
 8013c24:	f89d 600f 	ldrb.w	r6, [sp, #15]
 8013c28:	b196      	cbz	r6, 8013c50 <_ZN4LEDS8ClearLEDEh+0x4a>
 8013c2a:	68a3      	ldr	r3, [r4, #8]
 8013c2c:	b200      	sxth	r0, r0
        LEDs[index].blink = false;
 8013c2e:	2200      	movs	r2, #0
 8013c30:	eb03 1340 	add.w	r3, r3, r0, lsl #5
        HAL_GPIO_WritePin(LEDs[index].gpio.port, LEDs[index].gpio.pin, GPIO_PIN_RESET);
 8013c34:	6858      	ldr	r0, [r3, #4]
 8013c36:	8919      	ldrh	r1, [r3, #8]
        LEDs[index].blink = false;
 8013c38:	819a      	strh	r2, [r3, #12]
        LEDs[index].counter = 0;
 8013c3a:	739a      	strb	r2, [r3, #14]
        HAL_GPIO_WritePin(LEDs[index].gpio.port, LEDs[index].gpio.pin, GPIO_PIN_RESET);
 8013c3c:	f7f2 faee 	bl	800621c <HAL_GPIO_WritePin>
        osSemaphoreRelease(LEDsSemaphore);
 8013c40:	6860      	ldr	r0, [r4, #4]
 8013c42:	f7f8 faef 	bl	800c224 <osSemaphoreRelease>
        return true;
 8013c46:	2601      	movs	r6, #1
}
 8013c48:	4630      	mov	r0, r6
 8013c4a:	b004      	add	sp, #16
 8013c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    index = GetRGBLED(ID, &success);
 8013c50:	4620      	mov	r0, r4
 8013c52:	f7ff fe3d 	bl	80138d0 <_ZN4LEDS9GetRGBLEDEhPb>
	if (success) {
 8013c56:	f89d 800f 	ldrb.w	r8, [sp, #15]
 8013c5a:	f1b8 0f00 	cmp.w	r8, #0
 8013c5e:	d00a      	beq.n	8013c76 <_ZN4LEDS8ClearLEDEh+0x70>
		osSemaphoreRelease(LEDsSemaphore);
 8013c60:	6860      	ldr	r0, [r4, #4]
 8013c62:	f7f8 fadf 	bl	800c224 <osSemaphoreRelease>
		SetRGB(ID, 0, 0, 0);
 8013c66:	4633      	mov	r3, r6
 8013c68:	4632      	mov	r2, r6
 8013c6a:	4629      	mov	r1, r5
 8013c6c:	4620      	mov	r0, r4
 8013c6e:	9600      	str	r6, [sp, #0]
 8013c70:	f7ff fe43 	bl	80138fa <_ZN4LEDS6SetRGBEhhhh>
		return true;
 8013c74:	e7e7      	b.n	8013c46 <_ZN4LEDS8ClearLEDEh+0x40>
    index = GetI2CLED(ID, &success);
 8013c76:	4620      	mov	r0, r4
 8013c78:	f7ff fe66 	bl	8013948 <_ZN4LEDS9GetI2CLEDEhPb>
    if (success) {
 8013c7c:	f89d 700f 	ldrb.w	r7, [sp, #15]
 8013c80:	b157      	cbz	r7, 8013c98 <_ZN4LEDS8ClearLEDEh+0x92>
    	osSemaphoreRelease(LEDsSemaphore);
 8013c82:	6860      	ldr	r0, [r4, #4]
 8013c84:	f7f8 face 	bl	800c224 <osSemaphoreRelease>
    	SetLED(ID, 0);
 8013c88:	f04f 33ff 	mov.w	r3, #4294967295
 8013c8c:	4642      	mov	r2, r8
 8013c8e:	4629      	mov	r1, r5
 8013c90:	4620      	mov	r0, r4
 8013c92:	f7ff fee2 	bl	8013a5a <_ZN4LEDS6SetLEDEhhm>
    	return true;
 8013c96:	e7d6      	b.n	8013c46 <_ZN4LEDS8ClearLEDEh+0x40>
    index = GetI2CRGBLED(ID, &success);
 8013c98:	4620      	mov	r0, r4
 8013c9a:	f7ff fe6a 	bl	8013972 <_ZN4LEDS12GetI2CRGBLEDEhPb>
    if (success) {
 8013c9e:	f89d 600f 	ldrb.w	r6, [sp, #15]
    	osSemaphoreRelease(LEDsSemaphore);
 8013ca2:	6860      	ldr	r0, [r4, #4]
    if (success) {
 8013ca4:	b166      	cbz	r6, 8013cc0 <_ZN4LEDS8ClearLEDEh+0xba>
    	osSemaphoreRelease(LEDsSemaphore);
 8013ca6:	f7f8 fabd 	bl	800c224 <osSemaphoreRelease>
		SetI2CRGB(ID, 0, 0, 0);
 8013caa:	f04f 33ff 	mov.w	r3, #4294967295
 8013cae:	463a      	mov	r2, r7
 8013cb0:	4629      	mov	r1, r5
 8013cb2:	4620      	mov	r0, r4
 8013cb4:	e9cd 7300 	strd	r7, r3, [sp]
 8013cb8:	463b      	mov	r3, r7
 8013cba:	f7ff ff61 	bl	8013b80 <_ZN4LEDS9SetI2CRGBEhhhhm>
		return true;
 8013cbe:	e7c2      	b.n	8013c46 <_ZN4LEDS8ClearLEDEh+0x40>
    osSemaphoreRelease(LEDsSemaphore);
 8013cc0:	f7f8 fab0 	bl	800c224 <osSemaphoreRelease>
    return false;
 8013cc4:	e7c0      	b.n	8013c48 <_ZN4LEDS8ClearLEDEh+0x42>

08013cc6 <_ZN4LEDS11ExistingLEDEh>:
bool LEDS::ExistingLED(uint8_t ID) {
 8013cc6:	b513      	push	{r0, r1, r4, lr}
	GetLED(ID, &success);
 8013cc8:	f10d 0207 	add.w	r2, sp, #7
bool LEDS::ExistingLED(uint8_t ID) {
 8013ccc:	4604      	mov	r4, r0
	GetLED(ID, &success);
 8013cce:	f7ff fd84 	bl	80137da <_ZN4LEDS6GetLEDEhPb>
	if (success) return true;
 8013cd2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013cd6:	b113      	cbz	r3, 8013cde <_ZN4LEDS11ExistingLEDEh+0x18>
 8013cd8:	2001      	movs	r0, #1
}
 8013cda:	b002      	add	sp, #8
 8013cdc:	bd10      	pop	{r4, pc}
	GetRGBLED(ID, &success);
 8013cde:	4620      	mov	r0, r4
 8013ce0:	f7ff fdf6 	bl	80138d0 <_ZN4LEDS9GetRGBLEDEhPb>
	if (success) return true;
 8013ce4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d1f5      	bne.n	8013cd8 <_ZN4LEDS11ExistingLEDEh+0x12>
	GetI2CLED(ID, &success);
 8013cec:	4620      	mov	r0, r4
 8013cee:	f7ff fe2b 	bl	8013948 <_ZN4LEDS9GetI2CLEDEhPb>
	if (success) return true;
 8013cf2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d1ee      	bne.n	8013cd8 <_ZN4LEDS11ExistingLEDEh+0x12>
	GetI2CRGBLED(ID, &success);
 8013cfa:	4620      	mov	r0, r4
 8013cfc:	f7ff fe39 	bl	8013972 <_ZN4LEDS12GetI2CRGBLEDEhPb>
	if (success) return true;
 8013d00:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013d04:	e7e9      	b.n	8013cda <_ZN4LEDS11ExistingLEDEh+0x14>

08013d06 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t>:
			if (length != 4) return false;
 8013d06:	2b04      	cmp	r3, #4
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8013d08:	b530      	push	{r4, r5, lr}
 8013d0a:	4605      	mov	r5, r0
 8013d0c:	b085      	sub	sp, #20
 8013d0e:	4614      	mov	r4, r2
			if (length != 4) return false;
 8013d10:	d002      	beq.n	8013d18 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x12>
 8013d12:	2000      	movs	r0, #0
		}
 8013d14:	b005      	add	sp, #20
 8013d16:	bd30      	pop	{r4, r5, pc}
			self->GetRGBLED(ID, &success);
 8013d18:	f10d 020f 	add.w	r2, sp, #15
 8013d1c:	7821      	ldrb	r1, [r4, #0]
 8013d1e:	f7ff fdd7 	bl	80138d0 <_ZN4LEDS9GetRGBLEDEhPb>
			if (success) {
 8013d22:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8013d26:	b13b      	cbz	r3, 8013d38 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x32>
				return self->SetRGB(ID, input[1], input[2], input[3]);
 8013d28:	78e3      	ldrb	r3, [r4, #3]
 8013d2a:	4628      	mov	r0, r5
 8013d2c:	9300      	str	r3, [sp, #0]
 8013d2e:	78a3      	ldrb	r3, [r4, #2]
 8013d30:	7862      	ldrb	r2, [r4, #1]
 8013d32:	f7ff fde2 	bl	80138fa <_ZN4LEDS6SetRGBEhhhh>
 8013d36:	e7ed      	b.n	8013d14 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0xe>
			self->GetI2CRGBLED(ID, &success);
 8013d38:	4628      	mov	r0, r5
 8013d3a:	f7ff fe1a 	bl	8013972 <_ZN4LEDS12GetI2CRGBLEDEhPb>
			if (success) {
 8013d3e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d0e5      	beq.n	8013d12 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0xc>
				return self->SetI2CRGB(ID, input[1], input[2], input[3]) == HAL_OK;
 8013d46:	f04f 33ff 	mov.w	r3, #4294967295
 8013d4a:	4628      	mov	r0, r5
 8013d4c:	9301      	str	r3, [sp, #4]
 8013d4e:	78e3      	ldrb	r3, [r4, #3]
 8013d50:	9300      	str	r3, [sp, #0]
 8013d52:	78a3      	ldrb	r3, [r4, #2]
 8013d54:	7862      	ldrb	r2, [r4, #1]
 8013d56:	f7ff ff13 	bl	8013b80 <_ZN4LEDS9SetI2CRGBEhhhhm>
 8013d5a:	fab0 f080 	clz	r0, r0
 8013d5e:	0940      	lsrs	r0, r0, #5
 8013d60:	e7d8      	b.n	8013d14 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0xe>

08013d62 <_ZSt14__relocate_a_1IP3LEDS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 8013d62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d64:	4604      	mov	r4, r0
 8013d66:	460e      	mov	r6, r1
 8013d68:	4615      	mov	r5, r2
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8013d6a:	2700      	movs	r7, #0
      for (; __first != __last; ++__first, (void)++__cur)
 8013d6c:	42b4      	cmp	r4, r6
 8013d6e:	4628      	mov	r0, r5
 8013d70:	f105 0520 	add.w	r5, r5, #32
 8013d74:	d100      	bne.n	8013d78 <_ZSt14__relocate_a_1IP3LEDS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0+0x16>
    }
 8013d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
struct LED {
 8013d78:	4622      	mov	r2, r4
 8013d7a:	f812 3b04 	ldrb.w	r3, [r2], #4
 8013d7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013d82:	f805 3c20 	strb.w	r3, [r5, #-32]
 8013d86:	f1a5 031c 	sub.w	r3, r5, #28
 8013d8a:	e883 0003 	stmia.w	r3, {r0, r1}
 8013d8e:	7b23      	ldrb	r3, [r4, #12]
      }
 8013d90:	f104 0010 	add.w	r0, r4, #16
 8013d94:	f805 3c14 	strb.w	r3, [r5, #-20]
 8013d98:	7b63      	ldrb	r3, [r4, #13]
 8013d9a:	f805 3c13 	strb.w	r3, [r5, #-19]
 8013d9e:	7ba3      	ldrb	r3, [r4, #14]
 8013da0:	f805 3c12 	strb.w	r3, [r5, #-18]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8013da4:	6923      	ldr	r3, [r4, #16]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8013da6:	6127      	str	r7, [r4, #16]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8013da8:	f845 3c10 	str.w	r3, [r5, #-16]
 8013dac:	6963      	ldr	r3, [r4, #20]
 8013dae:	f845 3c0c 	str.w	r3, [r5, #-12]
	  _M_end_of_storage(__x._M_end_of_storage)
 8013db2:	69a3      	ldr	r3, [r4, #24]
 8013db4:	f845 3c08 	str.w	r3, [r5, #-8]
 8013db8:	7f23      	ldrb	r3, [r4, #28]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8013dba:	e9c4 7705 	strd	r7, r7, [r4, #20]
 8013dbe:	f805 3c04 	strb.w	r3, [r5, #-4]
      for (; __first != __last; ++__first, (void)++__cur)
 8013dc2:	3420      	adds	r4, #32
      }
 8013dc4:	f7ec fd6a 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8013dc8:	e7d0      	b.n	8013d6c <_ZSt14__relocate_a_1IP3LEDS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0+0xa>
	...

08013dcc <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8013dcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013dd0:	e9d0 8900 	ldrd	r8, r9, [r0]
 8013dd4:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 8013dd6:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013dda:	eba9 0208 	sub.w	r2, r9, r8
 8013dde:	4607      	mov	r7, r0
 8013de0:	468a      	mov	sl, r1
	if (max_size() - size() < __n)
 8013de2:	ebb3 1f22 	cmp.w	r3, r2, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013de6:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
 8013dea:	d102      	bne.n	8013df2 <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8013dec:	4820      	ldr	r0, [pc, #128]	@ (8013e70 <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa4>)
 8013dee:	f005 fdc9 	bl	8019984 <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 8013df2:	45c1      	cmp	r9, r8
 8013df4:	bf14      	ite	ne
 8013df6:	4622      	movne	r2, r4
 8013df8:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 8013dfa:	eba1 0508 	sub.w	r5, r1, r8
 8013dfe:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8013e00:	d231      	bcs.n	8013e66 <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8013e02:	b394      	cbz	r4, 8013e6a <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9e>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8013e04:	429c      	cmp	r4, r3
 8013e06:	bf28      	it	cs
 8013e08:	461c      	movcs	r4, r3
 8013e0a:	0120      	lsls	r0, r4, #4
 8013e0c:	f005 fd05 	bl	801981a <_Znwj>
 8013e10:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8013e12:	eb06 0c05 	add.w	ip, r6, r5
      if (__count > 0)
 8013e16:	2d00      	cmp	r5, #0
 8013e18:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8013e1c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8013e20:	dd04      	ble.n	8013e2c <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x60>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8013e22:	462a      	mov	r2, r5
 8013e24:	4641      	mov	r1, r8
 8013e26:	4630      	mov	r0, r6
 8013e28:	f005 fe84 	bl	8019b34 <memmove>
      ptrdiff_t __count = __last - __first;
 8013e2c:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
 8013e30:	3510      	adds	r5, #16
      if (__count > 0)
 8013e32:	f1b9 0f00 	cmp.w	r9, #0
 8013e36:	4435      	add	r5, r6
 8013e38:	dd04      	ble.n	8013e44 <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x78>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8013e3a:	464a      	mov	r2, r9
 8013e3c:	4651      	mov	r1, sl
 8013e3e:	4628      	mov	r0, r5
 8013e40:	f005 ff70 	bl	8019d24 <memcpy>
      return __result + __count;
 8013e44:	444d      	add	r5, r9
	if (__p)
 8013e46:	f1b8 0f00 	cmp.w	r8, #0
 8013e4a:	d005      	beq.n	8013e58 <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
 8013e4c:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8013e4e:	4640      	mov	r0, r8
 8013e50:	eba1 0108 	sub.w	r1, r1, r8
 8013e54:	f005 fcbc 	bl	80197d0 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8013e58:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8013e5c:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 8013e60:	60be      	str	r6, [r7, #8]
    }
 8013e62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8013e66:	461c      	mov	r4, r3
 8013e68:	e7cf      	b.n	8013e0a <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8013e6a:	4626      	mov	r6, r4
 8013e6c:	e7d1      	b.n	8013e12 <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 8013e6e:	bf00      	nop
 8013e70:	08019e3e 	.word	0x08019e3e

08013e74 <_ZN4LEDS9AddRGBLEDEhPmS0_S0_>:
bool LEDS::AddRGBLED(uint8_t ID, uint32_t* pulse_red_, uint32_t* pulse_green_, uint32_t* pulse_blue_) {
 8013e74:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8013e78:	4604      	mov	r4, r0
 8013e7a:	460d      	mov	r5, r1
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8013e7c:	6840      	ldr	r0, [r0, #4]
 8013e7e:	f04f 31ff 	mov.w	r1, #4294967295
bool LEDS::AddRGBLED(uint8_t ID, uint32_t* pulse_red_, uint32_t* pulse_green_, uint32_t* pulse_blue_) {
 8013e82:	4617      	mov	r7, r2
 8013e84:	461e      	mov	r6, r3
 8013e86:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8013e8a:	f7f8 f997 	bl	800c1bc <osSemaphoreAcquire>
	if (ExistingLED(ID)) {
 8013e8e:	4629      	mov	r1, r5
 8013e90:	4620      	mov	r0, r4
 8013e92:	f7ff ff18 	bl	8013cc6 <_ZN4LEDS11ExistingLEDEh>
 8013e96:	b130      	cbz	r0, 8013ea6 <_ZN4LEDS9AddRGBLEDEhPmS0_S0_+0x32>
		osSemaphoreRelease(LEDsSemaphore);
 8013e98:	6860      	ldr	r0, [r4, #4]
 8013e9a:	f7f8 f9c3 	bl	800c224 <osSemaphoreRelease>
		return false;
 8013e9e:	2000      	movs	r0, #0
}
 8013ea0:	b004      	add	sp, #16
 8013ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	led.ID = ID;
 8013ea6:	f88d 5000 	strb.w	r5, [sp]
	led.pulse_red = pulse_red_;
 8013eaa:	466a      	mov	r2, sp
	led.pulse_blue = pulse_blue_;
 8013eac:	f8cd 800c 	str.w	r8, [sp, #12]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8013eb0:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
	led.pulse_green = pulse_green_;
 8013eb4:	e9cd 7601 	strd	r7, r6, [sp, #4]
 8013eb8:	429d      	cmp	r5, r3
 8013eba:	d00e      	beq.n	8013eda <_ZN4LEDS9AddRGBLEDEhPmS0_S0_+0x66>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8013ebc:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8013ebe:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8013ec2:	3510      	adds	r5, #16
 8013ec4:	61a5      	str	r5, [r4, #24]
    osSemaphoreRelease(LEDsSemaphore);
 8013ec6:	6860      	ldr	r0, [r4, #4]
 8013ec8:	f7f8 f9ac 	bl	800c224 <osSemaphoreRelease>
    *pulse_red_ = 0;
 8013ecc:	2300      	movs	r3, #0
    return true;
 8013ece:	2001      	movs	r0, #1
    *pulse_red_ = 0;
 8013ed0:	603b      	str	r3, [r7, #0]
    *pulse_green_ = 0;
 8013ed2:	6033      	str	r3, [r6, #0]
    *pulse_blue_ = 0;
 8013ed4:	f8c8 3000 	str.w	r3, [r8]
    return true;
 8013ed8:	e7e2      	b.n	8013ea0 <_ZN4LEDS9AddRGBLEDEhPmS0_S0_+0x2c>
	  _M_realloc_insert(end(), __x);
 8013eda:	4629      	mov	r1, r5
 8013edc:	f104 0014 	add.w	r0, r4, #20
 8013ee0:	f7ff ff74 	bl	8013dcc <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 8013ee4:	e7ef      	b.n	8013ec6 <_ZN4LEDS9AddRGBLEDEhPmS0_S0_+0x52>

08013ee6 <_ZN9Registers11AddRegisterIhEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 8013ee6:	b570      	push	{r4, r5, r6, lr}
 8013ee8:	4604      	mov	r4, r0
 8013eea:	b086      	sub	sp, #24
 8013eec:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8013eee:	6800      	ldr	r0, [r0, #0]
 8013ef0:	f04f 31ff 	mov.w	r1, #4294967295
 8013ef4:	f7f8 f962 	bl	800c1bc <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 8013ef8:	f10d 0207 	add.w	r2, sp, #7
 8013efc:	4631      	mov	r1, r6
 8013efe:	4620      	mov	r0, r4
 8013f00:	f003 f8e7 	bl	80170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 8013f04:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8013f08:	b125      	cbz	r5, 8013f14 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 8013f0a:	6820      	ldr	r0, [r4, #0]
 8013f0c:	f7f8 f98a 	bl	800c224 <osSemaphoreRelease>
}
 8013f10:	b006      	add	sp, #24
 8013f12:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8013f14:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 8013f18:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8013f1c:	f7ff fbaa 	bl	8013674 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	configuration_.register_info = register_;
 8013f20:	2301      	movs	r3, #1
 8013f22:	f8ad 600a 	strh.w	r6, [sp, #10]
 8013f26:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 8013f2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 8013f2e:	f88d 000c 	strb.w	r0, [sp, #12]
 8013f32:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 8013f36:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d0e5      	beq.n	8013f0a <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
      push_back(const value_type& __x)
 8013f3e:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8013f40:	e9d4 5302 	ldrd	r5, r3, [r4, #8]
 8013f44:	429d      	cmp	r5, r3
 8013f46:	d005      	beq.n	8013f54 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x6e>
 8013f48:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8013f4a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8013f4e:	3510      	adds	r5, #16
 8013f50:	60a5      	str	r5, [r4, #8]
 8013f52:	e7da      	b.n	8013f0a <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
	  _M_realloc_insert(end(), __x);
 8013f54:	4629      	mov	r1, r5
 8013f56:	1d20      	adds	r0, r4, #4
 8013f58:	f7fa ff3e 	bl	800edd8 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 8013f5c:	e7d5      	b.n	8013f0a <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
	...

08013f60 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8013f60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013f64:	460c      	mov	r4, r1
 8013f66:	b087      	sub	sp, #28
 8013f68:	4606      	mov	r6, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8013f6a:	f04f 31ff 	mov.w	r1, #4294967295
 8013f6e:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8013f70:	4698      	mov	r8, r3
 8013f72:	4691      	mov	r9, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8013f74:	f7f8 f922 	bl	800c1bc <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8013f78:	4621      	mov	r1, r4
 8013f7a:	f10d 0207 	add.w	r2, sp, #7
 8013f7e:	4630      	mov	r0, r6
 8013f80:	f003 f8a7 	bl	80170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8013f84:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8013f88:	4604      	mov	r4, r0
	if (!success) {
 8013f8a:	b92b      	cbnz	r3, 8013f98 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x38>
	osSemaphoreRelease(RegistersSemaphore);
 8013f8c:	6830      	ldr	r0, [r6, #0]
 8013f8e:	f7f8 f949 	bl	800c224 <osSemaphoreRelease>
}
 8013f92:	b007      	add	sp, #28
 8013f94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8013f98:	f10d 0007 	add.w	r0, sp, #7
 8013f9c:	f7ff fb6a 	bl	8013674 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 8013fa0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d0f1      	beq.n	8013f8c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (target_register->register_info.type != registered_type) {
 8013fa8:	7923      	ldrb	r3, [r4, #4]
 8013faa:	4298      	cmp	r0, r3
 8013fac:	d1ee      	bne.n	8013f8c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (callbacks[target_register->register_info.type] == NULL) {
 8013fae:	3004      	adds	r0, #4
 8013fb0:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
 8013fb4:	2f00      	cmp	r7, #0
 8013fb6:	d0e9      	beq.n	8013f8c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 8013fb8:	7821      	ldrb	r1, [r4, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013fba:	e9d7 3500 	ldrd	r3, r5, [r7]
 8013fbe:	1aea      	subs	r2, r5, r3
 8013fc0:	1112      	asrs	r2, r2, #4
 8013fc2:	b9b1      	cbnz	r1, 8013ff2 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x92>
 8013fc4:	7861      	ldrb	r1, [r4, #1]
 8013fc6:	b9a1      	cbnz	r1, 8013ff2 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x92>
		callback.read = NULL;
 8013fc8:	9105      	str	r1, [sp, #20]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8013fca:	68b9      	ldr	r1, [r7, #8]
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8013fcc:	8162      	strh	r2, [r4, #10]
      push_back(const value_type& __x)
 8013fce:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8013fd0:	42a9      	cmp	r1, r5
		callback.write = write;
 8013fd2:	e9cd 9803 	strd	r9, r8, [sp, #12]
 8013fd6:	d008      	beq.n	8013fea <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x8a>
 8013fd8:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8013fda:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8013fde:	3510      	adds	r5, #16
 8013fe0:	607d      	str	r5, [r7, #4]
	target_register->mode.callbacks = true;
 8013fe2:	2301      	movs	r3, #1
 8013fe4:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 8013fe6:	7223      	strb	r3, [r4, #8]
 8013fe8:	e7d0      	b.n	8013f8c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	  _M_realloc_insert(end(), __x);
 8013fea:	4638      	mov	r0, r7
 8013fec:	f7fa ff90 	bl	800ef10 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	} else {
 8013ff0:	e7f7      	b.n	8013fe2 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x82>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8013ff2:	8961      	ldrh	r1, [r4, #10]
	if (__n >= this->size())
 8013ff4:	4291      	cmp	r1, r2
 8013ff6:	d302      	bcc.n	8013ffe <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x9e>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8013ff8:	4803      	ldr	r0, [pc, #12]	@ (8014008 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0xa8>)
 8013ffa:	f005 fcc6 	bl	801998a <_ZSt24__throw_out_of_range_fmtPKcz>
	return *(this->_M_impl._M_start + __n);
 8013ffe:	eb03 1301 	add.w	r3, r3, r1, lsl #4
		callback->write = write;
 8014002:	e9c3 9801 	strd	r9, r8, [r3, #4]
 8014006:	e7ec      	b.n	8013fe2 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x82>
 8014008:	0801a080 	.word	0x0801a080

0801400c <_ZN4LEDS12AddRegistersEv>:
void LEDS::AddRegisters(void) {
 801400c:	b510      	push	{r4, lr}
 801400e:	4604      	mov	r4, r0
	registers->AddRegister<uint8_t>(REG_LEDS_SET);
 8014010:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8014014:	6800      	ldr	r0, [r0, #0]
 8014016:	f7ff ff66 	bl	8013ee6 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_LEDS_SET, 2);
 801401a:	2202      	movs	r2, #2
 801401c:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8014020:	6820      	ldr	r0, [r4, #0]
 8014022:	f003 f8ab 	bl	801717c <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_LEDS_SET, (void*) this,
 8014026:	4622      	mov	r2, r4
 8014028:	4b2f      	ldr	r3, [pc, #188]	@ (80140e8 <_ZN4LEDS12AddRegistersEv+0xdc>)
 801402a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 801402e:	6820      	ldr	r0, [r4, #0]
 8014030:	f7ff ff96 	bl	8013f60 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_LEDS_TIMINGS);
 8014034:	6820      	ldr	r0, [r4, #0]
 8014036:	f240 3101 	movw	r1, #769	@ 0x301
 801403a:	f7ff ff54 	bl	8013ee6 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsVector(REG_LEDS_TIMINGS);
 801403e:	f240 3101 	movw	r1, #769	@ 0x301
 8014042:	6820      	ldr	r0, [r4, #0]
 8014044:	f003 f8b6 	bl	80171b4 <_ZN9Registers19SetRegisterAsVectorEt>
	registers->AddWriteCallback<uint8_t>(REG_LEDS_TIMINGS, (void*) this,
 8014048:	4622      	mov	r2, r4
 801404a:	4b28      	ldr	r3, [pc, #160]	@ (80140ec <_ZN4LEDS12AddRegistersEv+0xe0>)
 801404c:	f240 3101 	movw	r1, #769	@ 0x301
 8014050:	6820      	ldr	r0, [r4, #0]
 8014052:	f7ff ff85 	bl	8013f60 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_LEDS_BLINK);
 8014056:	6820      	ldr	r0, [r4, #0]
 8014058:	f240 3102 	movw	r1, #770	@ 0x302
 801405c:	f7ff ff43 	bl	8013ee6 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_LEDS_BLINK);
 8014060:	f240 3102 	movw	r1, #770	@ 0x302
 8014064:	6820      	ldr	r0, [r4, #0]
 8014066:	f003 f86d 	bl	8017144 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_LEDS_BLINK, (void*) this,
 801406a:	4622      	mov	r2, r4
 801406c:	4b20      	ldr	r3, [pc, #128]	@ (80140f0 <_ZN4LEDS12AddRegistersEv+0xe4>)
 801406e:	f240 3102 	movw	r1, #770	@ 0x302
 8014072:	6820      	ldr	r0, [r4, #0]
 8014074:	f7ff ff74 	bl	8013f60 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_LEDS_BLINK_ONCE);
 8014078:	6820      	ldr	r0, [r4, #0]
 801407a:	f240 3103 	movw	r1, #771	@ 0x303
 801407e:	f7ff ff32 	bl	8013ee6 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_LEDS_BLINK_ONCE);
 8014082:	f240 3103 	movw	r1, #771	@ 0x303
 8014086:	6820      	ldr	r0, [r4, #0]
 8014088:	f003 f85c 	bl	8017144 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_LEDS_BLINK_ONCE, (void*) this,
 801408c:	4b19      	ldr	r3, [pc, #100]	@ (80140f4 <_ZN4LEDS12AddRegistersEv+0xe8>)
 801408e:	4622      	mov	r2, r4
 8014090:	6820      	ldr	r0, [r4, #0]
 8014092:	f240 3103 	movw	r1, #771	@ 0x303
 8014096:	f7ff ff63 	bl	8013f60 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_LEDS_SET_RGB);
 801409a:	6820      	ldr	r0, [r4, #0]
 801409c:	f44f 7141 	mov.w	r1, #772	@ 0x304
 80140a0:	f7ff ff21 	bl	8013ee6 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_LEDS_SET_RGB, 4);
 80140a4:	2204      	movs	r2, #4
 80140a6:	f44f 7141 	mov.w	r1, #772	@ 0x304
 80140aa:	6820      	ldr	r0, [r4, #0]
 80140ac:	f003 f866 	bl	801717c <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_LEDS_SET_RGB, (void*) this,
 80140b0:	4b11      	ldr	r3, [pc, #68]	@ (80140f8 <_ZN4LEDS12AddRegistersEv+0xec>)
 80140b2:	4622      	mov	r2, r4
 80140b4:	6820      	ldr	r0, [r4, #0]
 80140b6:	f44f 7141 	mov.w	r1, #772	@ 0x304
 80140ba:	f7ff ff51 	bl	8013f60 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_LEDS_SET_BRIGHNESS);
 80140be:	6820      	ldr	r0, [r4, #0]
 80140c0:	f240 3105 	movw	r1, #773	@ 0x305
 80140c4:	f7ff ff0f 	bl	8013ee6 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_LEDS_SET_BRIGHNESS, 2);
 80140c8:	2202      	movs	r2, #2
 80140ca:	f240 3105 	movw	r1, #773	@ 0x305
 80140ce:	6820      	ldr	r0, [r4, #0]
 80140d0:	f003 f854 	bl	801717c <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_LEDS_SET_BRIGHNESS, (void*) this,
 80140d4:	4622      	mov	r2, r4
 80140d6:	6820      	ldr	r0, [r4, #0]
 80140d8:	f240 3105 	movw	r1, #773	@ 0x305
 80140dc:	4b07      	ldr	r3, [pc, #28]	@ (80140fc <_ZN4LEDS12AddRegistersEv+0xf0>)
}
 80140de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	registers->AddWriteCallback<uint8_t>(REG_LEDS_SET_BRIGHNESS, (void*) this,
 80140e2:	f7ff bf3d 	b.w	8013f60 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
 80140e6:	bf00      	nop
 80140e8:	08013ab1 	.word	0x08013ab1
 80140ec:	080143af 	.word	0x080143af
 80140f0:	08013887 	.word	0x08013887
 80140f4:	080138cb 	.word	0x080138cb
 80140f8:	08013d07 	.word	0x08013d07
 80140fc:	08013b61 	.word	0x08013b61

08014100 <_ZN3LEDC1ERKS_>:
 8014100:	460a      	mov	r2, r1
 8014102:	b538      	push	{r3, r4, r5, lr}
 8014104:	460d      	mov	r5, r1
 8014106:	4603      	mov	r3, r0
 8014108:	f812 1b04 	ldrb.w	r1, [r2], #4
 801410c:	4604      	mov	r4, r0
 801410e:	f803 1b04 	strb.w	r1, [r3], #4
 8014112:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014116:	89aa      	ldrh	r2, [r5, #12]
 8014118:	e883 0003 	stmia.w	r3, {r0, r1}
 801411c:	7bab      	ldrb	r3, [r5, #14]
 801411e:	f105 0110 	add.w	r1, r5, #16
 8014122:	f104 0010 	add.w	r0, r4, #16
 8014126:	81a2      	strh	r2, [r4, #12]
 8014128:	73a3      	strb	r3, [r4, #14]
 801412a:	f7ec fc67 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 801412e:	7f2b      	ldrb	r3, [r5, #28]
 8014130:	4620      	mov	r0, r4
 8014132:	7723      	strb	r3, [r4, #28]
 8014134:	bd38      	pop	{r3, r4, r5, pc}

08014136 <_ZN4LEDS8TestLEDsEv>:

/**
 * @brief Testing procedure of LEDs. Light them one after the other
 */
void LEDS::TestLEDs(void) {
 8014136:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801413a:	4604      	mov	r4, r0
 801413c:	b08b      	sub	sp, #44	@ 0x2c
 801413e:	e9d0 5702 	ldrd	r5, r7, [r0, #8]
#ifdef USE_SMD_LEDs
	for (LED led : LEDs) {
 8014142:	42af      	cmp	r7, r5
 8014144:	d109      	bne.n	801415a <_ZN4LEDS8TestLEDsEv+0x24>
		SetLED(led.ID, GPIO_PIN_SET);
		HAL_Delay(100);
		SetLED(led.ID, GPIO_PIN_RESET);
	}
	for (RGBLED led : RGB_LEDs) {
		SetRGB(led.ID, 255, 0, 0);
 8014146:	2700      	movs	r7, #0
 8014148:	f04f 09ff 	mov.w	r9, #255	@ 0xff
 801414c:	e9d4 6805 	ldrd	r6, r8, [r4, #20]
	for (RGBLED led : RGB_LEDs) {
 8014150:	45b0      	cmp	r8, r6
 8014152:	d11a      	bne.n	801418a <_ZN4LEDS8TestLEDsEv+0x54>
		SetI2CRGB(led.ID, 0, 0, 255);
		HAL_Delay(100);
		SetI2CRGB(led.ID, 0, 0, 0);
	}
#endif
}
 8014154:	b00b      	add	sp, #44	@ 0x2c
 8014156:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (LED led : LEDs) {
 801415a:	4629      	mov	r1, r5
 801415c:	a802      	add	r0, sp, #8
 801415e:	f7ff ffcf 	bl	8014100 <_ZN3LEDC1ERKS_>
		SetLED(led.ID, GPIO_PIN_SET);
 8014162:	f89d 6008 	ldrb.w	r6, [sp, #8]
 8014166:	2201      	movs	r2, #1
 8014168:	4620      	mov	r0, r4
 801416a:	4631      	mov	r1, r6
 801416c:	3520      	adds	r5, #32
 801416e:	f7ff fb49 	bl	8013804 <_ZN4LEDS6SetLEDEh13GPIO_PinState>
		HAL_Delay(100);
 8014172:	2064      	movs	r0, #100	@ 0x64
 8014174:	f7ee ffcc 	bl	8003110 <HAL_Delay>
		SetLED(led.ID, GPIO_PIN_RESET);
 8014178:	2200      	movs	r2, #0
 801417a:	4631      	mov	r1, r6
 801417c:	4620      	mov	r0, r4
 801417e:	f7ff fb41 	bl	8013804 <_ZN4LEDS6SetLEDEh13GPIO_PinState>
      }
 8014182:	a806      	add	r0, sp, #24
 8014184:	f7ec fb8a 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return *this;
 8014188:	e7db      	b.n	8014142 <_ZN4LEDS8TestLEDsEv+0xc>
	for (RGBLED led : RGB_LEDs) {
 801418a:	f816 5b10 	ldrb.w	r5, [r6], #16
		SetRGB(led.ID, 255, 0, 0);
 801418e:	2300      	movs	r3, #0
 8014190:	22ff      	movs	r2, #255	@ 0xff
 8014192:	4620      	mov	r0, r4
 8014194:	4629      	mov	r1, r5
 8014196:	9700      	str	r7, [sp, #0]
 8014198:	f7ff fbaf 	bl	80138fa <_ZN4LEDS6SetRGBEhhhh>
		HAL_Delay(100);
 801419c:	2064      	movs	r0, #100	@ 0x64
 801419e:	f7ee ffb7 	bl	8003110 <HAL_Delay>
		SetRGB(led.ID, 0, 255, 0);
 80141a2:	4629      	mov	r1, r5
 80141a4:	23ff      	movs	r3, #255	@ 0xff
 80141a6:	2200      	movs	r2, #0
 80141a8:	4620      	mov	r0, r4
 80141aa:	9700      	str	r7, [sp, #0]
 80141ac:	f7ff fba5 	bl	80138fa <_ZN4LEDS6SetRGBEhhhh>
		HAL_Delay(100);
 80141b0:	2064      	movs	r0, #100	@ 0x64
 80141b2:	f7ee ffad 	bl	8003110 <HAL_Delay>
		SetRGB(led.ID, 0, 0, 255);
 80141b6:	2300      	movs	r3, #0
 80141b8:	4629      	mov	r1, r5
 80141ba:	4620      	mov	r0, r4
 80141bc:	461a      	mov	r2, r3
 80141be:	f8cd 9000 	str.w	r9, [sp]
 80141c2:	f7ff fb9a 	bl	80138fa <_ZN4LEDS6SetRGBEhhhh>
		HAL_Delay(100);
 80141c6:	2064      	movs	r0, #100	@ 0x64
 80141c8:	f7ee ffa2 	bl	8003110 <HAL_Delay>
		SetRGB(led.ID, 0, 0, 0);
 80141cc:	2300      	movs	r3, #0
 80141ce:	4629      	mov	r1, r5
 80141d0:	4620      	mov	r0, r4
 80141d2:	461a      	mov	r2, r3
 80141d4:	9700      	str	r7, [sp, #0]
 80141d6:	f7ff fb90 	bl	80138fa <_ZN4LEDS6SetRGBEhhhh>
 80141da:	e7b9      	b.n	8014150 <_ZN4LEDS8TestLEDsEv+0x1a>

080141dc <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80141dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80141e0:	e9d0 7900 	ldrd	r7, r9, [r0]
 80141e4:	4692      	mov	sl, r2
	if (max_size() - size() < __n)
 80141e6:	f06f 437c 	mvn.w	r3, #4227858432	@ 0xfc000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80141ea:	eba9 0207 	sub.w	r2, r9, r7
 80141ee:	4606      	mov	r6, r0
 80141f0:	4688      	mov	r8, r1
	if (max_size() - size() < __n)
 80141f2:	ebb3 1f62 	cmp.w	r3, r2, asr #5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80141f6:	ea4f 1462 	mov.w	r4, r2, asr #5
	if (max_size() - size() < __n)
 80141fa:	d102      	bne.n	8014202 <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 80141fc:	481a      	ldr	r0, [pc, #104]	@ (8014268 <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>)
 80141fe:	f005 fbc1 	bl	8019984 <_ZSt20__throw_length_errorPKc>
 8014202:	45b9      	cmp	r9, r7
 8014204:	bf14      	ite	ne
 8014206:	4622      	movne	r2, r4
 8014208:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 801420a:	eba1 0b07 	sub.w	fp, r1, r7
 801420e:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8014210:	d225      	bcs.n	801425e <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x82>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8014212:	b334      	cbz	r4, 8014262 <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x86>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8014214:	429c      	cmp	r4, r3
 8014216:	bf28      	it	cs
 8014218:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801421a:	0160      	lsls	r0, r4, #5
 801421c:	f005 fafd 	bl	801981a <_Znwj>
 8014220:	4605      	mov	r5, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8014222:	4651      	mov	r1, sl
 8014224:	eb05 000b 	add.w	r0, r5, fp
 8014228:	f7ff ff6a 	bl	8014100 <_ZN3LEDC1ERKS_>
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
 801422c:	4641      	mov	r1, r8
 801422e:	462a      	mov	r2, r5
 8014230:	4638      	mov	r0, r7
 8014232:	f7ff fd96 	bl	8013d62 <_ZSt14__relocate_a_1IP3LEDS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>
 8014236:	4649      	mov	r1, r9
 8014238:	f100 0220 	add.w	r2, r0, #32
 801423c:	4640      	mov	r0, r8
 801423e:	f7ff fd90 	bl	8013d62 <_ZSt14__relocate_a_1IP3LEDS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>
 8014242:	4680      	mov	r8, r0
	if (__p)
 8014244:	b127      	cbz	r7, 8014250 <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x74>
		    this->_M_impl._M_end_of_storage - __old_start);
 8014246:	68b1      	ldr	r1, [r6, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8014248:	4638      	mov	r0, r7
 801424a:	1bc9      	subs	r1, r1, r7
 801424c:	f005 fac0 	bl	80197d0 <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8014250:	eb05 1444 	add.w	r4, r5, r4, lsl #5
      this->_M_impl._M_finish = __new_finish;
 8014254:	e9c6 5800 	strd	r5, r8, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8014258:	60b4      	str	r4, [r6, #8]
    }
 801425a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801425e:	461c      	mov	r4, r3
 8014260:	e7db      	b.n	801421a <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8014262:	4625      	mov	r5, r4
 8014264:	e7dd      	b.n	8014222 <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 8014266:	bf00      	nop
 8014268:	08019e3e 	.word	0x08019e3e

0801426c <_ZN4LEDS6AddLEDEh4GPIO>:
bool LEDS::AddLED(uint8_t ID, GPIO gpio) {
 801426c:	b570      	push	{r4, r5, r6, lr}
 801426e:	b08a      	sub	sp, #40	@ 0x28
 8014270:	4604      	mov	r4, r0
 8014272:	460e      	mov	r6, r1
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8014274:	6840      	ldr	r0, [r0, #4]
bool LEDS::AddLED(uint8_t ID, GPIO gpio) {
 8014276:	466d      	mov	r5, sp
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8014278:	f04f 31ff 	mov.w	r1, #4294967295
bool LEDS::AddLED(uint8_t ID, GPIO gpio) {
 801427c:	e885 000c 	stmia.w	r5, {r2, r3}
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8014280:	f7f7 ff9c 	bl	800c1bc <osSemaphoreAcquire>
	if (ExistingLED(ID)) {
 8014284:	4631      	mov	r1, r6
 8014286:	4620      	mov	r0, r4
 8014288:	f7ff fd1d 	bl	8013cc6 <_ZN4LEDS11ExistingLEDEh>
 801428c:	4603      	mov	r3, r0
 801428e:	b128      	cbz	r0, 801429c <_ZN4LEDS6AddLEDEh4GPIO+0x30>
		osSemaphoreRelease(LEDsSemaphore);
 8014290:	6860      	ldr	r0, [r4, #4]
 8014292:	f7f7 ffc7 	bl	800c224 <osSemaphoreRelease>
		return false;
 8014296:	2000      	movs	r0, #0
}
 8014298:	b00a      	add	sp, #40	@ 0x28
 801429a:	bd70      	pop	{r4, r5, r6, pc}
    led.gpio = gpio;
 801429c:	aa03      	add	r2, sp, #12
	: _M_start(), _M_finish(), _M_end_of_storage()
 801429e:	9008      	str	r0, [sp, #32]
    led.ID = ID;
 80142a0:	f88d 6008 	strb.w	r6, [sp, #8]
 80142a4:	e9cd 0006 	strd	r0, r0, [sp, #24]
    led.gpio = gpio;
 80142a8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80142ac:	e882 0003 	stmia.w	r2, {r0, r1}
    led.blink = false;
 80142b0:	f8ad 3014 	strh.w	r3, [sp, #20]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80142b4:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80142b8:	4298      	cmp	r0, r3
 80142ba:	d013      	beq.n	80142e4 <_ZN4LEDS6AddLEDEh4GPIO+0x78>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80142bc:	a902      	add	r1, sp, #8
 80142be:	f7ff ff1f 	bl	8014100 <_ZN3LEDC1ERKS_>
	    ++this->_M_impl._M_finish;
 80142c2:	68e3      	ldr	r3, [r4, #12]
 80142c4:	3320      	adds	r3, #32
 80142c6:	60e3      	str	r3, [r4, #12]
    osSemaphoreRelease(LEDsSemaphore);
 80142c8:	6860      	ldr	r0, [r4, #4]
 80142ca:	f7f7 ffab 	bl	800c224 <osSemaphoreRelease>
    HAL_GPIO_WritePin(led.gpio.port, led.gpio.pin, GPIO_PIN_RESET);
 80142ce:	2200      	movs	r2, #0
 80142d0:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80142d4:	9803      	ldr	r0, [sp, #12]
 80142d6:	f7f1 ffa1 	bl	800621c <HAL_GPIO_WritePin>
      }
 80142da:	a806      	add	r0, sp, #24
 80142dc:	f7ec fade 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
    return true;
 80142e0:	2001      	movs	r0, #1
 80142e2:	e7d9      	b.n	8014298 <_ZN4LEDS6AddLEDEh4GPIO+0x2c>
	  _M_realloc_insert(end(), __x);
 80142e4:	4601      	mov	r1, r0
 80142e6:	aa02      	add	r2, sp, #8
 80142e8:	f104 0008 	add.w	r0, r4, #8
 80142ec:	f7ff ff76 	bl	80141dc <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 80142f0:	e7ea      	b.n	80142c8 <_ZN4LEDS6AddLEDEh4GPIO+0x5c>

080142f2 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>:
bool LEDS::ConfigureTimings(uint8_t ID, std::vector<uint8_t> timings, uint8_t T) {
 80142f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142f6:	4605      	mov	r5, r0
 80142f8:	b085      	sub	sp, #20
 80142fa:	460c      	mov	r4, r1
    osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 80142fc:	6840      	ldr	r0, [r0, #4]
 80142fe:	f04f 31ff 	mov.w	r1, #4294967295
bool LEDS::ConfigureTimings(uint8_t ID, std::vector<uint8_t> timings, uint8_t T) {
 8014302:	4616      	mov	r6, r2
 8014304:	461f      	mov	r7, r3
    osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8014306:	f7f7 ff59 	bl	800c1bc <osSemaphoreAcquire>
    uint8_t index = GetLED(ID, &success);
 801430a:	f10d 020f 	add.w	r2, sp, #15
 801430e:	4621      	mov	r1, r4
 8014310:	4628      	mov	r0, r5
 8014312:	f7ff fa62 	bl	80137da <_ZN4LEDS6GetLEDEhPb>
    if (success) {
 8014316:	f89d 800f 	ldrb.w	r8, [sp, #15]
 801431a:	f1b8 0f00 	cmp.w	r8, #0
 801431e:	d02b      	beq.n	8014378 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh+0x86>
	return *(this->_M_impl._M_start + __n);
 8014320:	b200      	sxth	r0, r0
 8014322:	68ac      	ldr	r4, [r5, #8]
 8014324:	eb04 1440 	add.w	r4, r4, r0, lsl #5
 8014328:	ea4f 1940 	mov.w	r9, r0, lsl #5
        LEDs[index].timings = timings;
 801432c:	f104 0310 	add.w	r3, r4, #16
      if (std::__addressof(__x) != this)
 8014330:	429e      	cmp	r6, r3
 8014332:	d01e      	beq.n	8014372 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh+0x80>
			 - this->_M_impl._M_start); }
 8014334:	6922      	ldr	r2, [r4, #16]
 8014336:	69a3      	ldr	r3, [r4, #24]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8014338:	e9d6 b100 	ldrd	fp, r1, [r6]
			 - this->_M_impl._M_start); }
 801433c:	1a9b      	subs	r3, r3, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801433e:	eba1 0a0b 	sub.w	sl, r1, fp
	  if (__xlen > capacity())
 8014342:	459a      	cmp	sl, r3
 8014344:	d91f      	bls.n	8014386 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh+0x94>
	  pointer __result = this->_M_allocate(__n);
 8014346:	4650      	mov	r0, sl
 8014348:	9101      	str	r1, [sp, #4]
 801434a:	f7ff f987 	bl	801365c <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
			      _Category>::__copy_m(__first, __last, __result);
 801434e:	9901      	ldr	r1, [sp, #4]
 8014350:	4602      	mov	r2, r0
 8014352:	4606      	mov	r6, r0
 8014354:	4658      	mov	r0, fp
 8014356:	f7ec fb45 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 801435a:	6920      	ldr	r0, [r4, #16]
	if (__p)
 801435c:	b118      	cbz	r0, 8014366 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh+0x74>
			    - this->_M_impl._M_start);
 801435e:	69a1      	ldr	r1, [r4, #24]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8014360:	1a09      	subs	r1, r1, r0
 8014362:	f005 fa35 	bl	80197d0 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
 8014366:	6126      	str	r6, [r4, #16]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8014368:	4456      	add	r6, sl
 801436a:	61a6      	str	r6, [r4, #24]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 801436c:	6923      	ldr	r3, [r4, #16]
 801436e:	4453      	add	r3, sl
 8014370:	6163      	str	r3, [r4, #20]
        LEDs[index].T = T;
 8014372:	68ab      	ldr	r3, [r5, #8]
 8014374:	444b      	add	r3, r9
 8014376:	771f      	strb	r7, [r3, #28]
    osSemaphoreRelease(LEDsSemaphore);
 8014378:	6868      	ldr	r0, [r5, #4]
 801437a:	f7f7 ff53 	bl	800c224 <osSemaphoreRelease>
}
 801437e:	4640      	mov	r0, r8
 8014380:	b005      	add	sp, #20
 8014382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8014386:	6963      	ldr	r3, [r4, #20]
 8014388:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
 801438a:	459a      	cmp	sl, r3
 801438c:	d803      	bhi.n	8014396 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh+0xa4>
 801438e:	4658      	mov	r0, fp
 8014390:	f7ec fb28 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
      return std::uninitialized_copy(__first, __last, __result);
 8014394:	e7ea      	b.n	801436c <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh+0x7a>
 8014396:	eb0b 0103 	add.w	r1, fp, r3
 801439a:	4658      	mov	r0, fp
 801439c:	f7ec fb22 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 80143a0:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 80143a4:	e9d6 3100 	ldrd	r3, r1, [r6]
 80143a8:	1a10      	subs	r0, r2, r0
 80143aa:	4418      	add	r0, r3
 80143ac:	e7f0      	b.n	8014390 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh+0x9e>

080143ae <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t>:
			if (length < 3) return false;
 80143ae:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 80143b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143b4:	4606      	mov	r6, r0
 80143b6:	b086      	sub	sp, #24
 80143b8:	4615      	mov	r5, r2
			if (length < 3) return false;
 80143ba:	d925      	bls.n	8014408 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t+0x5a>
			std::vector<uint8_t> timings (&input[1], &input[length-1]);
 80143bc:	1e9c      	subs	r4, r3, #2
 80143be:	1e5f      	subs	r7, r3, #1
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80143c0:	4620      	mov	r0, r4
 80143c2:	eb02 0807 	add.w	r8, r2, r7
 80143c6:	f7ff f949 	bl	801365c <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80143ca:	4404      	add	r4, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80143cc:	4602      	mov	r2, r0
 80143ce:	4641      	mov	r1, r8
 80143d0:	9000      	str	r0, [sp, #0]
 80143d2:	1c68      	adds	r0, r5, #1
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80143d4:	9402      	str	r4, [sp, #8]
 80143d6:	f7ec fb05 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
			return self->ConfigureTimings(input[0], timings, input[length-1]);
 80143da:	782c      	ldrb	r4, [r5, #0]
 80143dc:	4669      	mov	r1, sp
	  this->_M_impl._M_finish =
 80143de:	9001      	str	r0, [sp, #4]
 80143e0:	a803      	add	r0, sp, #12
 80143e2:	f7ec fb0b 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80143e6:	4621      	mov	r1, r4
 80143e8:	5deb      	ldrb	r3, [r5, r7]
 80143ea:	aa03      	add	r2, sp, #12
 80143ec:	4630      	mov	r0, r6
 80143ee:	f7ff ff80 	bl	80142f2 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
 80143f2:	4604      	mov	r4, r0
      }
 80143f4:	a803      	add	r0, sp, #12
 80143f6:	f7ec fa51 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80143fa:	4668      	mov	r0, sp
 80143fc:	f7ec fa4e 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		}
 8014400:	4620      	mov	r0, r4
 8014402:	b006      	add	sp, #24
 8014404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (length < 3) return false;
 8014408:	2400      	movs	r4, #0
 801440a:	e7f9      	b.n	8014400 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t+0x52>

0801440c <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t>:
	registers->SetRegisterAsSingle(REG_GEN_CONFIGURE_MODULES);
	registers->AddRegisterSemaphore(REG_GEN_GENERATOR_STATUS, &GeneratorSemaphore);
	registers->AddWriteCallback<uint8_t>(REG_GEN_CONFIGURE_MODULES, (void*) this,
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
			MotionGenerator* self = (MotionGenerator*) context;
			self->request_module_configuration = true;
 801440c:	2301      	movs	r3, #1
 801440e:	f880 3064 	strb.w	r3, [r0, #100]	@ 0x64
			return true;
		}
 8014412:	4618      	mov	r0, r3
 8014414:	4770      	bx	lr

08014416 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t>:
	registers->SetRegisterAsSingle(REG_GEN_MODULES_CONTROLLER_STATUS);
	registers->AddRegisterSemaphore(REG_GEN_GENERATOR_STATUS, &GeneratorSemaphore);
	registers->AddWriteCallback<uint8_t>(REG_GEN_MODULES_CONTROLLER_STATUS, (void*) this,
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
			MotionGenerator* self = (MotionGenerator*) context;
			if (*input > 0) {
 8014416:	7812      	ldrb	r2, [r2, #0]
 8014418:	2301      	movs	r3, #1
 801441a:	b11a      	cbz	r2, 8014424 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t+0xe>
				self->request_module_controller_activation = true;
 801441c:	f880 3065 	strb.w	r3, [r0, #101]	@ 0x65
			} else {
				self->request_module_controller_deactivation = true;
			}
			return true;
		}
 8014420:	2001      	movs	r0, #1
 8014422:	4770      	bx	lr
				self->request_module_controller_deactivation = true;
 8014424:	f880 3066 	strb.w	r3, [r0, #102]	@ 0x66
 8014428:	e7fa      	b.n	8014420 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t+0xa>

0801442a <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPPhPtE3_4_FUNES0_tS2_S3_>:

	// Register to access the number of modules
	registers->AddRegister<uint8_t>(REG_GEN_NB_MODULES);
	registers->SetRegisterAsSingle(REG_GEN_NB_MODULES);
	registers->AddReadCallback<uint8_t>(REG_GEN_NB_MODULES, (void*) this,
		[](void* context, uint16_t register_id, uint8_t** output, uint16_t* length) -> bool {
 801442a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801442c:	4604      	mov	r4, r0
 801442e:	4615      	mov	r5, r2
 8014430:	461e      	mov	r6, r3
			MotionGenerator* self = (MotionGenerator*) context;
			osSemaphoreAcquire(self->GeneratorSemaphore, osWaitForever);
			*length = 1;
 8014432:	2701      	movs	r7, #1
			osSemaphoreAcquire(self->GeneratorSemaphore, osWaitForever);
 8014434:	f04f 31ff 	mov.w	r1, #4294967295
 8014438:	6900      	ldr	r0, [r0, #16]
 801443a:	f7f7 febf 	bl	800c1bc <osSemaphoreAcquire>
			*length = 1;
 801443e:	8037      	strh	r7, [r6, #0]
			**output = self->number_of_modules;
 8014440:	682b      	ldr	r3, [r5, #0]
 8014442:	7f22      	ldrb	r2, [r4, #28]
 8014444:	701a      	strb	r2, [r3, #0]
			osSemaphoreRelease(self->GeneratorSemaphore);
 8014446:	6920      	ldr	r0, [r4, #16]
 8014448:	f7f7 feec 	bl	800c224 <osSemaphoreRelease>
			return true;
		}
 801444c:	4638      	mov	r0, r7
 801444e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014450 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPPhPtE1_4_FUNES0_tS2_S3_>:
		[](void* context, uint16_t register_id, uint8_t** output, uint16_t* length) -> bool {
 8014450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014452:	4604      	mov	r4, r0
 8014454:	4615      	mov	r5, r2
			osSemaphoreAcquire(self->GeneratorSemaphore, osWaitForever);
 8014456:	f04f 31ff 	mov.w	r1, #4294967295
 801445a:	6900      	ldr	r0, [r0, #16]
		[](void* context, uint16_t register_id, uint8_t** output, uint16_t* length) -> bool {
 801445c:	461e      	mov	r6, r3
			*length = 1;
 801445e:	2701      	movs	r7, #1
			osSemaphoreAcquire(self->GeneratorSemaphore, osWaitForever);
 8014460:	f7f7 feac 	bl	800c1bc <osSemaphoreAcquire>
			**output = self->active;
 8014464:	682b      	ldr	r3, [r5, #0]
 8014466:	7d22      	ldrb	r2, [r4, #20]
			*length = 1;
 8014468:	8037      	strh	r7, [r6, #0]
			**output = self->active;
 801446a:	701a      	strb	r2, [r3, #0]
			osSemaphoreRelease(self->GeneratorSemaphore);
 801446c:	6920      	ldr	r0, [r4, #16]
 801446e:	f7f7 fed9 	bl	800c224 <osSemaphoreRelease>
		}
 8014472:	4638      	mov	r0, r7
 8014474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014476 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8014476:	2800      	cmp	r0, #0
      _M_allocate(size_t __n)
 8014478:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801447a:	d006      	beq.n	801448a <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0x14>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 801447c:	da01      	bge.n	8014482 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0xc>
	    std::__throw_bad_alloc();
 801447e:	f005 fa7b 	bl	8019978 <_ZSt17__throw_bad_allocv>
      }
 8014482:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8014486:	f005 b9c8 	b.w	801981a <_Znwj>
 801448a:	bd08      	pop	{r3, pc}

0801448c <_ZN9Registers9GetTypeIDImEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 801448c:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801448e:	4926      	ldr	r1, [pc, #152]	@ (8014528 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 8014490:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8014492:	4826      	ldr	r0, [pc, #152]	@ (801452c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8014494:	f005 fa58 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8014498:	2800      	cmp	r0, #0
 801449a:	d133      	bne.n	8014504 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 801449c:	4924      	ldr	r1, [pc, #144]	@ (8014530 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa4>)
 801449e:	4823      	ldr	r0, [pc, #140]	@ (801452c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 80144a0:	f005 fa52 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 80144a4:	2800      	cmp	r0, #0
 80144a6:	d12f      	bne.n	8014508 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 80144a8:	4920      	ldr	r1, [pc, #128]	@ (801452c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 80144aa:	4608      	mov	r0, r1
 80144ac:	f005 fa4c 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 80144b0:	bb60      	cbnz	r0, 801450c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 80144b2:	4920      	ldr	r1, [pc, #128]	@ (8014534 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa8>)
 80144b4:	481d      	ldr	r0, [pc, #116]	@ (801452c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 80144b6:	f005 fa47 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 80144ba:	bb48      	cbnz	r0, 8014510 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 80144bc:	491e      	ldr	r1, [pc, #120]	@ (8014538 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xac>)
 80144be:	481b      	ldr	r0, [pc, #108]	@ (801452c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 80144c0:	f005 fa42 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 80144c4:	bb30      	cbnz	r0, 8014514 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 80144c6:	491d      	ldr	r1, [pc, #116]	@ (801453c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xb0>)
 80144c8:	4818      	ldr	r0, [pc, #96]	@ (801452c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 80144ca:	f005 fa3d 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 80144ce:	bb18      	cbnz	r0, 8014518 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 80144d0:	491b      	ldr	r1, [pc, #108]	@ (8014540 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xb4>)
 80144d2:	4816      	ldr	r0, [pc, #88]	@ (801452c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 80144d4:	f005 fa38 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 80144d8:	bb00      	cbnz	r0, 801451c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 80144da:	491a      	ldr	r1, [pc, #104]	@ (8014544 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xb8>)
 80144dc:	4813      	ldr	r0, [pc, #76]	@ (801452c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 80144de:	f005 fa33 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 80144e2:	b9e8      	cbnz	r0, 8014520 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 80144e4:	4918      	ldr	r1, [pc, #96]	@ (8014548 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xbc>)
 80144e6:	4811      	ldr	r0, [pc, #68]	@ (801452c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 80144e8:	f005 fa2e 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 80144ec:	b9d0      	cbnz	r0, 8014524 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 80144ee:	4917      	ldr	r1, [pc, #92]	@ (801454c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xc0>)
 80144f0:	480e      	ldr	r0, [pc, #56]	@ (801452c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 80144f2:	f005 fa29 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 80144f6:	2800      	cmp	r0, #0
 80144f8:	bf14      	ite	ne
 80144fa:	2309      	movne	r3, #9
 80144fc:	2300      	moveq	r3, #0
 80144fe:	7020      	strb	r0, [r4, #0]
}
 8014500:	4618      	mov	r0, r3
 8014502:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8014504:	2300      	movs	r3, #0
 8014506:	e7fa      	b.n	80144fe <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8014508:	2301      	movs	r3, #1
 801450a:	e7f8      	b.n	80144fe <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 801450c:	2302      	movs	r3, #2
 801450e:	e7f6      	b.n	80144fe <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8014510:	2303      	movs	r3, #3
 8014512:	e7f4      	b.n	80144fe <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8014514:	2304      	movs	r3, #4
 8014516:	e7f2      	b.n	80144fe <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 8014518:	2305      	movs	r3, #5
 801451a:	e7f0      	b.n	80144fe <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 801451c:	2306      	movs	r3, #6
 801451e:	e7ee      	b.n	80144fe <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 8014520:	2307      	movs	r3, #7
 8014522:	e7ec      	b.n	80144fe <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8014524:	2308      	movs	r3, #8
 8014526:	e7ea      	b.n	80144fe <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
 8014528:	0801a298 	.word	0x0801a298
 801452c:	0801a278 	.word	0x0801a278
 8014530:	0801a288 	.word	0x0801a288
 8014534:	0801a268 	.word	0x0801a268
 8014538:	0801a2a0 	.word	0x0801a2a0
 801453c:	0801a290 	.word	0x0801a290
 8014540:	0801a280 	.word	0x0801a280
 8014544:	0801a270 	.word	0x0801a270
 8014548:	0801a260 	.word	0x0801a260
 801454c:	0801a258 	.word	0x0801a258

08014550 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 8014550:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8014552:	4926      	ldr	r1, [pc, #152]	@ (80145ec <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 8014554:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8014556:	4826      	ldr	r0, [pc, #152]	@ (80145f0 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 8014558:	f005 f9f6 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 801455c:	2800      	cmp	r0, #0
 801455e:	d133      	bne.n	80145c8 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8014560:	4924      	ldr	r1, [pc, #144]	@ (80145f4 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa4>)
 8014562:	4823      	ldr	r0, [pc, #140]	@ (80145f0 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 8014564:	f005 f9f0 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8014568:	2800      	cmp	r0, #0
 801456a:	d12f      	bne.n	80145cc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 801456c:	4922      	ldr	r1, [pc, #136]	@ (80145f8 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa8>)
 801456e:	4820      	ldr	r0, [pc, #128]	@ (80145f0 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 8014570:	f005 f9ea 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8014574:	bb60      	cbnz	r0, 80145d0 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8014576:	4921      	ldr	r1, [pc, #132]	@ (80145fc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xac>)
 8014578:	481d      	ldr	r0, [pc, #116]	@ (80145f0 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 801457a:	f005 f9e5 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 801457e:	bb48      	cbnz	r0, 80145d4 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8014580:	491f      	ldr	r1, [pc, #124]	@ (8014600 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xb0>)
 8014582:	481b      	ldr	r0, [pc, #108]	@ (80145f0 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 8014584:	f005 f9e0 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8014588:	bb30      	cbnz	r0, 80145d8 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 801458a:	491e      	ldr	r1, [pc, #120]	@ (8014604 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xb4>)
 801458c:	4818      	ldr	r0, [pc, #96]	@ (80145f0 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 801458e:	f005 f9db 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8014592:	bb18      	cbnz	r0, 80145dc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8014594:	491c      	ldr	r1, [pc, #112]	@ (8014608 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xb8>)
 8014596:	4816      	ldr	r0, [pc, #88]	@ (80145f0 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 8014598:	f005 f9d6 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 801459c:	bb00      	cbnz	r0, 80145e0 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 801459e:	491b      	ldr	r1, [pc, #108]	@ (801460c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xbc>)
 80145a0:	4813      	ldr	r0, [pc, #76]	@ (80145f0 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 80145a2:	f005 f9d1 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 80145a6:	b9e8      	cbnz	r0, 80145e4 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 80145a8:	4911      	ldr	r1, [pc, #68]	@ (80145f0 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 80145aa:	4608      	mov	r0, r1
 80145ac:	f005 f9cc 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 80145b0:	b9d0      	cbnz	r0, 80145e8 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 80145b2:	4917      	ldr	r1, [pc, #92]	@ (8014610 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xc0>)
 80145b4:	480e      	ldr	r0, [pc, #56]	@ (80145f0 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 80145b6:	f005 f9c7 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 80145ba:	2800      	cmp	r0, #0
 80145bc:	bf14      	ite	ne
 80145be:	2309      	movne	r3, #9
 80145c0:	2300      	moveq	r3, #0
 80145c2:	7020      	strb	r0, [r4, #0]
}
 80145c4:	4618      	mov	r0, r3
 80145c6:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80145c8:	2300      	movs	r3, #0
 80145ca:	e7fa      	b.n	80145c2 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 80145cc:	2301      	movs	r3, #1
 80145ce:	e7f8      	b.n	80145c2 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 80145d0:	2302      	movs	r3, #2
 80145d2:	e7f6      	b.n	80145c2 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 80145d4:	2303      	movs	r3, #3
 80145d6:	e7f4      	b.n	80145c2 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 80145d8:	2304      	movs	r3, #4
 80145da:	e7f2      	b.n	80145c2 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 80145dc:	2305      	movs	r3, #5
 80145de:	e7f0      	b.n	80145c2 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 80145e0:	2306      	movs	r3, #6
 80145e2:	e7ee      	b.n	80145c2 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 80145e4:	2307      	movs	r3, #7
 80145e6:	e7ec      	b.n	80145c2 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 80145e8:	2308      	movs	r3, #8
 80145ea:	e7ea      	b.n	80145c2 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
 80145ec:	0801a298 	.word	0x0801a298
 80145f0:	0801a260 	.word	0x0801a260
 80145f4:	0801a288 	.word	0x0801a288
 80145f8:	0801a278 	.word	0x0801a278
 80145fc:	0801a268 	.word	0x0801a268
 8014600:	0801a2a0 	.word	0x0801a2a0
 8014604:	0801a290 	.word	0x0801a290
 8014608:	0801a280 	.word	0x0801a280
 801460c:	0801a270 	.word	0x0801a270
 8014610:	0801a258 	.word	0x0801a258

08014614 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>:
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8014614:	4926      	ldr	r1, [pc, #152]	@ (80146b0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 8014616:	b510      	push	{r4, lr}
 8014618:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801461a:	4608      	mov	r0, r1
 801461c:	f005 f994 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8014620:	2800      	cmp	r0, #0
 8014622:	d133      	bne.n	801468c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8014624:	4923      	ldr	r1, [pc, #140]	@ (80146b4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa0>)
 8014626:	4822      	ldr	r0, [pc, #136]	@ (80146b0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8014628:	f005 f98e 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 801462c:	2800      	cmp	r0, #0
 801462e:	d12f      	bne.n	8014690 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8014630:	4921      	ldr	r1, [pc, #132]	@ (80146b8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa4>)
 8014632:	481f      	ldr	r0, [pc, #124]	@ (80146b0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8014634:	f005 f988 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8014638:	bb60      	cbnz	r0, 8014694 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 801463a:	4920      	ldr	r1, [pc, #128]	@ (80146bc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa8>)
 801463c:	481c      	ldr	r0, [pc, #112]	@ (80146b0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 801463e:	f005 f983 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8014642:	bb48      	cbnz	r0, 8014698 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8014644:	491e      	ldr	r1, [pc, #120]	@ (80146c0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xac>)
 8014646:	481a      	ldr	r0, [pc, #104]	@ (80146b0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8014648:	f005 f97e 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 801464c:	bb30      	cbnz	r0, 801469c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 801464e:	491d      	ldr	r1, [pc, #116]	@ (80146c4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb0>)
 8014650:	4817      	ldr	r0, [pc, #92]	@ (80146b0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8014652:	f005 f979 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8014656:	bb18      	cbnz	r0, 80146a0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8014658:	491b      	ldr	r1, [pc, #108]	@ (80146c8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb4>)
 801465a:	4815      	ldr	r0, [pc, #84]	@ (80146b0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 801465c:	f005 f974 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8014660:	bb00      	cbnz	r0, 80146a4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 8014662:	491a      	ldr	r1, [pc, #104]	@ (80146cc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb8>)
 8014664:	4812      	ldr	r0, [pc, #72]	@ (80146b0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8014666:	f005 f96f 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 801466a:	b9e8      	cbnz	r0, 80146a8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 801466c:	4918      	ldr	r1, [pc, #96]	@ (80146d0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xbc>)
 801466e:	4810      	ldr	r0, [pc, #64]	@ (80146b0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8014670:	f005 f96a 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8014674:	b9d0      	cbnz	r0, 80146ac <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 8014676:	4917      	ldr	r1, [pc, #92]	@ (80146d4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xc0>)
 8014678:	480d      	ldr	r0, [pc, #52]	@ (80146b0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 801467a:	f005 f965 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 801467e:	2800      	cmp	r0, #0
 8014680:	bf14      	ite	ne
 8014682:	2309      	movne	r3, #9
 8014684:	2300      	moveq	r3, #0
 8014686:	7020      	strb	r0, [r4, #0]
}
 8014688:	4618      	mov	r0, r3
 801468a:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801468c:	2300      	movs	r3, #0
 801468e:	e7fa      	b.n	8014686 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8014690:	2301      	movs	r3, #1
 8014692:	e7f8      	b.n	8014686 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8014694:	2302      	movs	r3, #2
 8014696:	e7f6      	b.n	8014686 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8014698:	2303      	movs	r3, #3
 801469a:	e7f4      	b.n	8014686 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 801469c:	2304      	movs	r3, #4
 801469e:	e7f2      	b.n	8014686 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 80146a0:	2305      	movs	r3, #5
 80146a2:	e7f0      	b.n	8014686 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 80146a4:	2306      	movs	r3, #6
 80146a6:	e7ee      	b.n	8014686 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 80146a8:	2307      	movs	r3, #7
 80146aa:	e7ec      	b.n	8014686 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 80146ac:	2308      	movs	r3, #8
 80146ae:	e7ea      	b.n	8014686 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
 80146b0:	0801a298 	.word	0x0801a298
 80146b4:	0801a288 	.word	0x0801a288
 80146b8:	0801a278 	.word	0x0801a278
 80146bc:	0801a268 	.word	0x0801a268
 80146c0:	0801a2a0 	.word	0x0801a2a0
 80146c4:	0801a290 	.word	0x0801a290
 80146c8:	0801a280 	.word	0x0801a280
 80146cc:	0801a270 	.word	0x0801a270
 80146d0:	0801a260 	.word	0x0801a260
 80146d4:	0801a258 	.word	0x0801a258

080146d8 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE6_4_FUNES0_tS1_t>:
	*__first = __tmp;
 80146d8:	e9d0 0209 	ldrd	r0, r2, [r0, #36]	@ 0x24
 80146dc:	2100      	movs	r1, #0
 80146de:	1a12      	subs	r2, r2, r0

	// Register to reset all generator offsets to 0
	registers->AddRegister<uint8_t>(REG_GEN_RESET_GENERATOR_OFFSETS);
	registers->SetRegisterAsSingle(REG_GEN_RESET_GENERATOR_OFFSETS);
	registers->AddWriteCallback<uint8_t>(REG_GEN_RESET_GENERATOR_OFFSETS, (void*) this,
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 80146e0:	b508      	push	{r3, lr}
 80146e2:	f005 fa41 	bl	8019b68 <memset>
			MotionGenerator* self = (MotionGenerator*) context;
			std::fill(self->generator_offsets.begin(), self->generator_offsets.end(), 0);
			return true;
		}
 80146e6:	2001      	movs	r0, #1
 80146e8:	bd08      	pop	{r3, pc}

080146ea <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE8_4_FUNES0_tS1_t>:
 80146ea:	e9d0 020c 	ldrd	r0, r2, [r0, #48]	@ 0x30
 80146ee:	2100      	movs	r1, #0
 80146f0:	1a12      	subs	r2, r2, r0

	// Register to reset all position offsets
	registers->AddRegister<uint8_t>(REG_GEN_RESET_POSITION_OFFSETS);
	registers->SetRegisterAsSingle(REG_GEN_RESET_POSITION_OFFSETS);
	registers->AddWriteCallback<uint8_t>(REG_GEN_RESET_POSITION_OFFSETS, (void*) this,
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 80146f2:	b508      	push	{r3, lr}
 80146f4:	f005 fa38 	bl	8019b68 <memset>
			MotionGenerator* self = (MotionGenerator*) context;
			std::fill(self->position_offsets.begin(), self->position_offsets.end(), 0);
			return true;
		}
 80146f8:	2001      	movs	r0, #1
 80146fa:	bd08      	pop	{r3, pc}

080146fc <_ZN15MotionGeneratorC1Ev>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 80146fc:	2200      	movs	r2, #0
 80146fe:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 8014702:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 8014706:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 801470a:	e9c0 2214 	strd	r2, r2, [r0, #80]	@ 0x50
 801470e:	6582      	str	r2, [r0, #88]	@ 0x58
}
 8014710:	4770      	bx	lr

08014712 <_ZN15MotionGenerator18SetGeneratorPeriodEm>:
 * @brief Set the generator period
 *
 * @param input period_ms_: generator period in ms
 * @return whether successful
 */
bool MotionGenerator::SetGeneratorPeriod(uint32_t period_ms_) {
 8014712:	b538      	push	{r3, r4, r5, lr}
 8014714:	4604      	mov	r4, r0
 8014716:	460d      	mov	r5, r1
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 8014718:	6900      	ldr	r0, [r0, #16]
 801471a:	f04f 31ff 	mov.w	r1, #4294967295
 801471e:	f7f7 fd4d 	bl	800c1bc <osSemaphoreAcquire>
	period_ms = period_ms_;
	osSemaphoreRelease(GeneratorSemaphore);
 8014722:	6920      	ldr	r0, [r4, #16]
	period_ms = period_ms_;
 8014724:	61a5      	str	r5, [r4, #24]
	osSemaphoreRelease(GeneratorSemaphore);
 8014726:	f7f7 fd7d 	bl	800c224 <osSemaphoreRelease>
	return true;
}
 801472a:	2001      	movs	r0, #1
 801472c:	bd38      	pop	{r3, r4, r5, pc}

0801472e <_ZN15MotionGenerator18SetGeneratorOffsetEhf>:
 *
 * @param input index: module index with 0 = module directly attached to head
 * @param input offset: the generator offset
 * @return whether successful
 */
bool MotionGenerator::SetGeneratorOffset(uint8_t index, float offset) {
 801472e:	b538      	push	{r3, r4, r5, lr}
 8014730:	4604      	mov	r4, r0
 8014732:	460d      	mov	r5, r1
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 8014734:	6900      	ldr	r0, [r0, #16]
 8014736:	f04f 31ff 	mov.w	r1, #4294967295
bool MotionGenerator::SetGeneratorOffset(uint8_t index, float offset) {
 801473a:	ed2d 8b02 	vpush	{d8}
 801473e:	eeb0 8a40 	vmov.f32	s16, s0
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 8014742:	f7f7 fd3b 	bl	800c1bc <osSemaphoreAcquire>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8014746:	e9d4 3209 	ldrd	r3, r2, [r4, #36]	@ 0x24
 801474a:	1ad2      	subs	r2, r2, r3
	if (index >= generator_offsets.size()) {osSemaphoreRelease(GeneratorSemaphore); return false;}
 801474c:	ebb5 0fa2 	cmp.w	r5, r2, asr #2
 8014750:	d306      	bcc.n	8014760 <_ZN15MotionGenerator18SetGeneratorOffsetEhf+0x32>
 8014752:	6920      	ldr	r0, [r4, #16]
 8014754:	f7f7 fd66 	bl	800c224 <osSemaphoreRelease>
 8014758:	2000      	movs	r0, #0

	generator_offsets[index] = offset;
	osSemaphoreRelease(GeneratorSemaphore);
	return true;
}
 801475a:	ecbd 8b02 	vpop	{d8}
 801475e:	bd38      	pop	{r3, r4, r5, pc}
	generator_offsets[index] = offset;
 8014760:	eb03 0385 	add.w	r3, r3, r5, lsl #2
	osSemaphoreRelease(GeneratorSemaphore);
 8014764:	6920      	ldr	r0, [r4, #16]
	generator_offsets[index] = offset;
 8014766:	ed83 8a00 	vstr	s16, [r3]
	osSemaphoreRelease(GeneratorSemaphore);
 801476a:	f7f7 fd5b 	bl	800c224 <osSemaphoreRelease>
	return true;
 801476e:	2001      	movs	r0, #1
 8014770:	e7f3      	b.n	801475a <_ZN15MotionGenerator18SetGeneratorOffsetEhf+0x2c>

08014772 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPftE5_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 8014772:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, float* input, uint16_t length) -> bool {
 8014774:	b082      	sub	sp, #8
			if (length != 2) return false;
 8014776:	d10c      	bne.n	8014792 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPftE5_4_FUNES0_tS1_t+0x20>
			return self->SetGeneratorOffset((uint8_t) input[0], input[1]);
 8014778:	edd2 7a00 	vldr	s15, [r2]
 801477c:	ed92 0a01 	vldr	s0, [r2, #4]
 8014780:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014784:	edcd 7a01 	vstr	s15, [sp, #4]
 8014788:	f89d 1004 	ldrb.w	r1, [sp, #4]
		}
 801478c:	b002      	add	sp, #8
			return self->SetGeneratorOffset((uint8_t) input[0], input[1]);
 801478e:	f7ff bfce 	b.w	801472e <_ZN15MotionGenerator18SetGeneratorOffsetEhf>
		}
 8014792:	2000      	movs	r0, #0
 8014794:	b002      	add	sp, #8
 8014796:	4770      	bx	lr

08014798 <_ZN15MotionGenerator21ResetGeneratorOffsetsEv>:
/**
 * @brief Reset all generator offsets to 0
 *
 * @return whether successful
 */
bool MotionGenerator::ResetGeneratorOffsets(void) {
 8014798:	b510      	push	{r4, lr}
 801479a:	4604      	mov	r4, r0
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 801479c:	f04f 31ff 	mov.w	r1, #4294967295
 80147a0:	6900      	ldr	r0, [r0, #16]
 80147a2:	f7f7 fd0b 	bl	800c1bc <osSemaphoreAcquire>
	for (float &offset : generator_offsets) {
		offset = 0;
 80147a6:	2100      	movs	r1, #0
 80147a8:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	@ 0x24
 80147ac:	1a12      	subs	r2, r2, r0
 80147ae:	f005 f9db 	bl	8019b68 <memset>
	}
	osSemaphoreRelease(GeneratorSemaphore);
 80147b2:	6920      	ldr	r0, [r4, #16]
 80147b4:	f7f7 fd36 	bl	800c224 <osSemaphoreRelease>
	return true;
}
 80147b8:	2001      	movs	r0, #1
 80147ba:	bd10      	pop	{r4, pc}

080147bc <_ZN15MotionGenerator17SetPositionOffsetEhf>:
 *
 * @param input index: module index with 0 = module directly attached to head
 * @param input offset: the position offset
 * @return whether successful
 */
bool MotionGenerator::SetPositionOffset(uint8_t index, float offset) {
 80147bc:	b538      	push	{r3, r4, r5, lr}
 80147be:	4604      	mov	r4, r0
 80147c0:	460d      	mov	r5, r1
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 80147c2:	6900      	ldr	r0, [r0, #16]
 80147c4:	f04f 31ff 	mov.w	r1, #4294967295
bool MotionGenerator::SetPositionOffset(uint8_t index, float offset) {
 80147c8:	ed2d 8b02 	vpush	{d8}
 80147cc:	eeb0 8a40 	vmov.f32	s16, s0
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 80147d0:	f7f7 fcf4 	bl	800c1bc <osSemaphoreAcquire>
 80147d4:	e9d4 320c 	ldrd	r3, r2, [r4, #48]	@ 0x30
 80147d8:	1ad2      	subs	r2, r2, r3
	if (index >= position_offsets.size()) {osSemaphoreRelease(GeneratorSemaphore); return false;}
 80147da:	ebb5 0fa2 	cmp.w	r5, r2, asr #2
 80147de:	d306      	bcc.n	80147ee <_ZN15MotionGenerator17SetPositionOffsetEhf+0x32>
 80147e0:	6920      	ldr	r0, [r4, #16]
 80147e2:	f7f7 fd1f 	bl	800c224 <osSemaphoreRelease>
 80147e6:	2000      	movs	r0, #0

	position_offsets[index] = offset;
	osSemaphoreRelease(GeneratorSemaphore);
	return true;
}
 80147e8:	ecbd 8b02 	vpop	{d8}
 80147ec:	bd38      	pop	{r3, r4, r5, pc}
	position_offsets[index] = offset;
 80147ee:	eb03 0385 	add.w	r3, r3, r5, lsl #2
	osSemaphoreRelease(GeneratorSemaphore);
 80147f2:	6920      	ldr	r0, [r4, #16]
	position_offsets[index] = offset;
 80147f4:	ed83 8a00 	vstr	s16, [r3]
	osSemaphoreRelease(GeneratorSemaphore);
 80147f8:	f7f7 fd14 	bl	800c224 <osSemaphoreRelease>
	return true;
 80147fc:	2001      	movs	r0, #1
 80147fe:	e7f3      	b.n	80147e8 <_ZN15MotionGenerator17SetPositionOffsetEhf+0x2c>

08014800 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPftE7_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 8014800:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, float* input, uint16_t length) -> bool {
 8014802:	b082      	sub	sp, #8
			if (length != 2) return false;
 8014804:	d10c      	bne.n	8014820 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPftE7_4_FUNES0_tS1_t+0x20>
			return self->SetPositionOffset((uint8_t) input[0], input[1]);
 8014806:	edd2 7a00 	vldr	s15, [r2]
 801480a:	ed92 0a01 	vldr	s0, [r2, #4]
 801480e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014812:	edcd 7a01 	vstr	s15, [sp, #4]
 8014816:	f89d 1004 	ldrb.w	r1, [sp, #4]
		}
 801481a:	b002      	add	sp, #8
			return self->SetPositionOffset((uint8_t) input[0], input[1]);
 801481c:	f7ff bfce 	b.w	80147bc <_ZN15MotionGenerator17SetPositionOffsetEhf>
		}
 8014820:	2000      	movs	r0, #0
 8014822:	b002      	add	sp, #8
 8014824:	4770      	bx	lr

08014826 <_ZN15MotionGenerator15SetModuleLengthEf>:
 * @brief Set the module length
 *
 * @param input length: the module length
 * @return whether successful
 */
bool MotionGenerator::SetModuleLength(float length) {
 8014826:	b510      	push	{r4, lr}
 8014828:	ed2d 8b02 	vpush	{d8}
 801482c:	eeb0 8a40 	vmov.f32	s16, s0
 8014830:	4604      	mov	r4, r0
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 8014832:	f04f 31ff 	mov.w	r1, #4294967295
 8014836:	6900      	ldr	r0, [r0, #16]
 8014838:	f7f7 fcc0 	bl	800c1bc <osSemaphoreAcquire>
	module_length = length;
	osSemaphoreRelease(GeneratorSemaphore);
 801483c:	6920      	ldr	r0, [r4, #16]
	module_length = length;
 801483e:	ed84 8a08 	vstr	s16, [r4, #32]
	osSemaphoreRelease(GeneratorSemaphore);
 8014842:	f7f7 fcef 	bl	800c224 <osSemaphoreRelease>
	return true;
}
 8014846:	2001      	movs	r0, #1
 8014848:	ecbd 8b02 	vpop	{d8}
 801484c:	bd10      	pop	{r4, pc}

0801484e <_ZN15MotionGenerator21SetGeneratorAmplitudeEf>:
 * @brief Set the generator amplitude
 *
 * @param input amplitude_: waveform amplitude A with Asin(...)
 * @return whether successful
 */
bool MotionGenerator::SetGeneratorAmplitude(float amplitude_) {
 801484e:	b510      	push	{r4, lr}
 8014850:	ed2d 8b02 	vpush	{d8}
 8014854:	eeb0 8a40 	vmov.f32	s16, s0
 8014858:	4604      	mov	r4, r0
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 801485a:	f04f 31ff 	mov.w	r1, #4294967295
 801485e:	6900      	ldr	r0, [r0, #16]
 8014860:	f7f7 fcac 	bl	800c1bc <osSemaphoreAcquire>
	amplitude = amplitude_;
	osSemaphoreRelease(GeneratorSemaphore);
 8014864:	6920      	ldr	r0, [r4, #16]
	amplitude = amplitude_;
 8014866:	ed84 8a0f 	vstr	s16, [r4, #60]	@ 0x3c
	osSemaphoreRelease(GeneratorSemaphore);
 801486a:	f7f7 fcdb 	bl	800c224 <osSemaphoreRelease>
	return true;
}
 801486e:	2001      	movs	r0, #1
 8014870:	ecbd 8b02 	vpop	{d8}
 8014874:	bd10      	pop	{r4, pc}

08014876 <_ZN15MotionGenerator21SetGeneratorFrequencyEf>:
 * @brief Set the generator frequency
 *
 * @param input frequency_: waveform frequency
 * @return whether successful
 */
bool MotionGenerator::SetGeneratorFrequency(float frequency_) {
 8014876:	b510      	push	{r4, lr}
 8014878:	ed2d 8b02 	vpush	{d8}
 801487c:	eeb0 8a40 	vmov.f32	s16, s0
 8014880:	4604      	mov	r4, r0
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 8014882:	f04f 31ff 	mov.w	r1, #4294967295
 8014886:	6900      	ldr	r0, [r0, #16]
 8014888:	f7f7 fc98 	bl	800c1bc <osSemaphoreAcquire>
	frequency = frequency_;
	osSemaphoreRelease(GeneratorSemaphore);
 801488c:	6920      	ldr	r0, [r4, #16]
	frequency = frequency_;
 801488e:	ed84 8a10 	vstr	s16, [r4, #64]	@ 0x40
	osSemaphoreRelease(GeneratorSemaphore);
 8014892:	f7f7 fcc7 	bl	800c224 <osSemaphoreRelease>
	return true;
}
 8014896:	2001      	movs	r0, #1
 8014898:	ecbd 8b02 	vpop	{d8}
 801489c:	bd10      	pop	{r4, pc}

0801489e <_ZN15MotionGenerator29SetGeneratorWavelengthInverseEf>:
 * @brief Set the generator wavelength inverse
 *
 * @param input wavelength_inverse_: waveform wavelength inverse 1/l with Asin(.. + 2*pi*x/l)
 * @return whether successful
 */
bool MotionGenerator::SetGeneratorWavelengthInverse(float wavelength_inverse_) {
 801489e:	b510      	push	{r4, lr}
 80148a0:	ed2d 8b02 	vpush	{d8}
 80148a4:	eeb0 8a40 	vmov.f32	s16, s0
 80148a8:	4604      	mov	r4, r0
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 80148aa:	f04f 31ff 	mov.w	r1, #4294967295
 80148ae:	6900      	ldr	r0, [r0, #16]
 80148b0:	f7f7 fc84 	bl	800c1bc <osSemaphoreAcquire>
	wavelength_inverse = wavelength_inverse_;
	osSemaphoreRelease(GeneratorSemaphore);
 80148b4:	6920      	ldr	r0, [r4, #16]
	wavelength_inverse = wavelength_inverse_;
 80148b6:	ed84 8a11 	vstr	s16, [r4, #68]	@ 0x44
	osSemaphoreRelease(GeneratorSemaphore);
 80148ba:	f7f7 fcb3 	bl	800c224 <osSemaphoreRelease>
	return true;
}
 80148be:	2001      	movs	r0, #1
 80148c0:	ecbd 8b02 	vpop	{d8}
 80148c4:	bd10      	pop	{r4, pc}

080148c6 <_ZN15MotionGenerator17SetGeneratorPhaseEf>:
 * @brief Set the generator phase
 *
 * @param input wavelength_inverse_: waveform phase
 * @return whether successful
 */
bool MotionGenerator::SetGeneratorPhase(float phase_) {
 80148c6:	b510      	push	{r4, lr}
 80148c8:	ed2d 8b02 	vpush	{d8}
 80148cc:	eeb0 8a40 	vmov.f32	s16, s0
 80148d0:	4604      	mov	r4, r0
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 80148d2:	f04f 31ff 	mov.w	r1, #4294967295
 80148d6:	6900      	ldr	r0, [r0, #16]
 80148d8:	f7f7 fc70 	bl	800c1bc <osSemaphoreAcquire>
	phase = phase_;
	osSemaphoreRelease(GeneratorSemaphore);
 80148dc:	6920      	ldr	r0, [r4, #16]
	phase = phase_;
 80148de:	ed84 8a12 	vstr	s16, [r4, #72]	@ 0x48
	osSemaphoreRelease(GeneratorSemaphore);
 80148e2:	f7f7 fc9f 	bl	800c224 <osSemaphoreRelease>
	return true;
}
 80148e6:	2001      	movs	r0, #1
 80148e8:	ecbd 8b02 	vpop	{d8}
 80148ec:	bd10      	pop	{r4, pc}

080148ee <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
 80148ee:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80148f0:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
      push_back(const value_type& __x)
 80148f4:	4605      	mov	r5, r0
 80148f6:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80148f8:	429c      	cmp	r4, r3
 80148fa:	d005      	beq.n	8014908 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_+0x1a>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80148fc:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 80148fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8014902:	3410      	adds	r4, #16
 8014904:	606c      	str	r4, [r5, #4]
      }
 8014906:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
 8014908:	4621      	mov	r1, r4
 801490a:	f7fa fa65 	bl	800edd8 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 801490e:	e7fa      	b.n	8014906 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_+0x18>

08014910 <_ZN9Registers11AddRegisterIfEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 8014910:	b570      	push	{r4, r5, r6, lr}
 8014912:	4604      	mov	r4, r0
 8014914:	b086      	sub	sp, #24
 8014916:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8014918:	6800      	ldr	r0, [r0, #0]
 801491a:	f04f 31ff 	mov.w	r1, #4294967295
 801491e:	f7f7 fc4d 	bl	800c1bc <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 8014922:	f10d 0207 	add.w	r2, sp, #7
 8014926:	4631      	mov	r1, r6
 8014928:	4620      	mov	r0, r4
 801492a:	f002 fbd2 	bl	80170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 801492e:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8014932:	b125      	cbz	r5, 801493e <_ZN9Registers11AddRegisterIfEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 8014934:	6820      	ldr	r0, [r4, #0]
 8014936:	f7f7 fc75 	bl	800c224 <osSemaphoreRelease>
}
 801493a:	b006      	add	sp, #24
 801493c:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 801493e:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 8014942:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8014946:	f7ff fe03 	bl	8014550 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>
	configuration_.register_info = register_;
 801494a:	2301      	movs	r3, #1
 801494c:	f8ad 600a 	strh.w	r6, [sp, #10]
 8014950:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 8014954:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 8014958:	f88d 000c 	strb.w	r0, [sp, #12]
 801495c:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 8014960:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 8014964:	2b00      	cmp	r3, #0
 8014966:	d0e5      	beq.n	8014934 <_ZN9Registers11AddRegisterIfEEbt.isra.0+0x24>
		registers.push_back(configuration_);
 8014968:	a902      	add	r1, sp, #8
 801496a:	1d20      	adds	r0, r4, #4
 801496c:	f7ff ffbf 	bl	80148ee <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 8014970:	e7e0      	b.n	8014934 <_ZN9Registers11AddRegisterIfEEbt.isra.0+0x24>

08014972 <_ZN9Registers11AddRegisterIhEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 8014972:	b570      	push	{r4, r5, r6, lr}
 8014974:	4604      	mov	r4, r0
 8014976:	b086      	sub	sp, #24
 8014978:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801497a:	6800      	ldr	r0, [r0, #0]
 801497c:	f04f 31ff 	mov.w	r1, #4294967295
 8014980:	f7f7 fc1c 	bl	800c1bc <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 8014984:	f10d 0207 	add.w	r2, sp, #7
 8014988:	4631      	mov	r1, r6
 801498a:	4620      	mov	r0, r4
 801498c:	f002 fba1 	bl	80170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 8014990:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8014994:	b125      	cbz	r5, 80149a0 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 8014996:	6820      	ldr	r0, [r4, #0]
 8014998:	f7f7 fc44 	bl	800c224 <osSemaphoreRelease>
}
 801499c:	b006      	add	sp, #24
 801499e:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 80149a0:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 80149a4:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 80149a8:	f7ff fe34 	bl	8014614 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	configuration_.register_info = register_;
 80149ac:	2301      	movs	r3, #1
 80149ae:	f8ad 600a 	strh.w	r6, [sp, #10]
 80149b2:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 80149b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 80149ba:	f88d 000c 	strb.w	r0, [sp, #12]
 80149be:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 80149c2:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	d0e5      	beq.n	8014996 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
		registers.push_back(configuration_);
 80149ca:	a902      	add	r1, sp, #8
 80149cc:	1d20      	adds	r0, r4, #4
 80149ce:	f7ff ff8e 	bl	80148ee <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 80149d2:	e7e0      	b.n	8014996 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>

080149d4 <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0>:
bool Registers::AddReadCallback(uint16_t ID, void* context, bool (*read)(void*, uint16_t, T**, uint16_t*)) {
 80149d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80149d6:	460c      	mov	r4, r1
 80149d8:	b087      	sub	sp, #28
 80149da:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80149dc:	f04f 31ff 	mov.w	r1, #4294967295
 80149e0:	6800      	ldr	r0, [r0, #0]
bool Registers::AddReadCallback(uint16_t ID, void* context, bool (*read)(void*, uint16_t, T**, uint16_t*)) {
 80149e2:	461e      	mov	r6, r3
 80149e4:	4617      	mov	r7, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80149e6:	f7f7 fbe9 	bl	800c1bc <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80149ea:	4621      	mov	r1, r4
 80149ec:	f10d 0207 	add.w	r2, sp, #7
 80149f0:	4628      	mov	r0, r5
 80149f2:	f002 fb6e 	bl	80170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80149f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80149fa:	4604      	mov	r4, r0
	if (!success) {
 80149fc:	b923      	cbnz	r3, 8014a08 <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0+0x34>
	osSemaphoreRelease(RegistersSemaphore);
 80149fe:	6828      	ldr	r0, [r5, #0]
 8014a00:	f7f7 fc10 	bl	800c224 <osSemaphoreRelease>
}
 8014a04:	b007      	add	sp, #28
 8014a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8014a08:	f10d 0007 	add.w	r0, sp, #7
 8014a0c:	f7ff fe02 	bl	8014614 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 8014a10:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d0f2      	beq.n	80149fe <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0+0x2a>
	if (target_register->register_info.type != registered_type) {
 8014a18:	7923      	ldrb	r3, [r4, #4]
 8014a1a:	4298      	cmp	r0, r3
 8014a1c:	d1ef      	bne.n	80149fe <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0+0x2a>
	if (callbacks[target_register->register_info.type] == NULL) {
 8014a1e:	3004      	adds	r0, #4
 8014a20:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8014a24:	2800      	cmp	r0, #0
 8014a26:	d0ea      	beq.n	80149fe <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0+0x2a>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 8014a28:	7823      	ldrb	r3, [r4, #0]
 8014a2a:	b983      	cbnz	r3, 8014a4e <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0+0x7a>
 8014a2c:	7863      	ldrb	r3, [r4, #1]
 8014a2e:	b973      	cbnz	r3, 8014a4e <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0+0x7a>
		target_callback_list->push_back(callback);
 8014a30:	a902      	add	r1, sp, #8
		callback.read = read;
 8014a32:	9605      	str	r6, [sp, #20]
		callback.write = NULL;
 8014a34:	e9cd 7303 	strd	r7, r3, [sp, #12]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8014a38:	e9d0 2300 	ldrd	r2, r3, [r0]
 8014a3c:	1a9b      	subs	r3, r3, r2
 8014a3e:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8014a40:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 8014a42:	f7fa fab9 	bl	800efb8 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_>
	target_register->mode.callbacks = true;
 8014a46:	2301      	movs	r3, #1
 8014a48:	7063      	strb	r3, [r4, #1]
	target_register->access.read = true;
 8014a4a:	7263      	strb	r3, [r4, #9]
 8014a4c:	e7d7      	b.n	80149fe <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0+0x2a>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8014a4e:	8961      	ldrh	r1, [r4, #10]
 8014a50:	f7fa f916 	bl	800ec80 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
		callback->context = context;
 8014a54:	6047      	str	r7, [r0, #4]
		callback->read = read;
 8014a56:	60c6      	str	r6, [r0, #12]
 8014a58:	e7f5      	b.n	8014a46 <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0+0x72>

08014a5a <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8014a5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014a5c:	460c      	mov	r4, r1
 8014a5e:	b087      	sub	sp, #28
 8014a60:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8014a62:	f04f 31ff 	mov.w	r1, #4294967295
 8014a66:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8014a68:	461e      	mov	r6, r3
 8014a6a:	4617      	mov	r7, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8014a6c:	f7f7 fba6 	bl	800c1bc <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8014a70:	4621      	mov	r1, r4
 8014a72:	f10d 0207 	add.w	r2, sp, #7
 8014a76:	4628      	mov	r0, r5
 8014a78:	f002 fb2b 	bl	80170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8014a7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8014a80:	4604      	mov	r4, r0
	if (!success) {
 8014a82:	b923      	cbnz	r3, 8014a8e <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x34>
	osSemaphoreRelease(RegistersSemaphore);
 8014a84:	6828      	ldr	r0, [r5, #0]
 8014a86:	f7f7 fbcd 	bl	800c224 <osSemaphoreRelease>
}
 8014a8a:	b007      	add	sp, #28
 8014a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8014a8e:	f10d 0007 	add.w	r0, sp, #7
 8014a92:	f7ff fdbf 	bl	8014614 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 8014a96:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d0f2      	beq.n	8014a84 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (target_register->register_info.type != registered_type) {
 8014a9e:	7923      	ldrb	r3, [r4, #4]
 8014aa0:	4298      	cmp	r0, r3
 8014aa2:	d1ef      	bne.n	8014a84 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (callbacks[target_register->register_info.type] == NULL) {
 8014aa4:	3004      	adds	r0, #4
 8014aa6:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8014aaa:	2800      	cmp	r0, #0
 8014aac:	d0ea      	beq.n	8014a84 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 8014aae:	7823      	ldrb	r3, [r4, #0]
 8014ab0:	b983      	cbnz	r3, 8014ad4 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
 8014ab2:	7863      	ldrb	r3, [r4, #1]
 8014ab4:	b973      	cbnz	r3, 8014ad4 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
		callback.read = NULL;
 8014ab6:	9305      	str	r3, [sp, #20]
		target_callback_list->push_back(callback);
 8014ab8:	a902      	add	r1, sp, #8
 8014aba:	e9d0 2300 	ldrd	r2, r3, [r0]
		callback.write = write;
 8014abe:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8014ac2:	1a9b      	subs	r3, r3, r2
 8014ac4:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8014ac6:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 8014ac8:	f7fa fa76 	bl	800efb8 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_>
	target_register->mode.callbacks = true;
 8014acc:	2301      	movs	r3, #1
 8014ace:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 8014ad0:	7223      	strb	r3, [r4, #8]
 8014ad2:	e7d7      	b.n	8014a84 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8014ad4:	8961      	ldrh	r1, [r4, #10]
 8014ad6:	f7fa f8d3 	bl	800ec80 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
		callback->write = write;
 8014ada:	e9c0 7601 	strd	r7, r6, [r0, #4]
 8014ade:	e7f5      	b.n	8014acc <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x72>

08014ae0 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8014ae0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ae4:	e9d0 8900 	ldrd	r8, r9, [r0]
 8014ae8:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 8014aea:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8014aee:	eba9 0208 	sub.w	r2, r9, r8
 8014af2:	4607      	mov	r7, r0
 8014af4:	468a      	mov	sl, r1
	if (max_size() - size() < __n)
 8014af6:	ebb3 1f22 	cmp.w	r3, r2, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8014afa:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
 8014afe:	d102      	bne.n	8014b06 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8014b00:	4820      	ldr	r0, [pc, #128]	@ (8014b84 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa4>)
 8014b02:	f004 ff3f 	bl	8019984 <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 8014b06:	45c1      	cmp	r9, r8
 8014b08:	bf14      	ite	ne
 8014b0a:	4622      	movne	r2, r4
 8014b0c:	2201      	moveq	r2, #1
 8014b0e:	eba1 0508 	sub.w	r5, r1, r8
 8014b12:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8014b14:	d231      	bcs.n	8014b7a <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8014b16:	b394      	cbz	r4, 8014b7e <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9e>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8014b18:	429c      	cmp	r4, r3
 8014b1a:	bf28      	it	cs
 8014b1c:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8014b1e:	0120      	lsls	r0, r4, #4
 8014b20:	f004 fe7b 	bl	801981a <_Znwj>
 8014b24:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8014b26:	eb06 0c05 	add.w	ip, r6, r5
      if (__count > 0)
 8014b2a:	2d00      	cmp	r5, #0
 8014b2c:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8014b30:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8014b34:	dd04      	ble.n	8014b40 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x60>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8014b36:	462a      	mov	r2, r5
 8014b38:	4641      	mov	r1, r8
 8014b3a:	4630      	mov	r0, r6
 8014b3c:	f004 fffa 	bl	8019b34 <memmove>
      ptrdiff_t __count = __last - __first;
 8014b40:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
 8014b44:	3510      	adds	r5, #16
      if (__count > 0)
 8014b46:	f1b9 0f00 	cmp.w	r9, #0
 8014b4a:	4435      	add	r5, r6
 8014b4c:	dd04      	ble.n	8014b58 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x78>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8014b4e:	464a      	mov	r2, r9
 8014b50:	4651      	mov	r1, sl
 8014b52:	4628      	mov	r0, r5
 8014b54:	f005 f8e6 	bl	8019d24 <memcpy>
      return __result + __count;
 8014b58:	444d      	add	r5, r9
	if (__p)
 8014b5a:	f1b8 0f00 	cmp.w	r8, #0
 8014b5e:	d005      	beq.n	8014b6c <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
 8014b60:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8014b62:	4640      	mov	r0, r8
 8014b64:	eba1 0108 	sub.w	r1, r1, r8
 8014b68:	f004 fe32 	bl	80197d0 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8014b6c:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8014b70:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 8014b74:	60be      	str	r6, [r7, #8]
    }
 8014b76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8014b7a:	461c      	mov	r4, r3
 8014b7c:	e7cf      	b.n	8014b1e <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8014b7e:	4626      	mov	r6, r4
 8014b80:	e7d1      	b.n	8014b26 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
 8014b82:	bf00      	nop
 8014b84:	08019e3e 	.word	0x08019e3e

08014b88 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8014b88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8014b8c:	e9d0 8900 	ldrd	r8, r9, [r0]
 8014b90:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 8014b92:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8014b96:	eba9 0208 	sub.w	r2, r9, r8
 8014b9a:	4607      	mov	r7, r0
 8014b9c:	468a      	mov	sl, r1
	if (max_size() - size() < __n)
 8014b9e:	ebb3 1f22 	cmp.w	r3, r2, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8014ba2:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
 8014ba6:	d102      	bne.n	8014bae <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8014ba8:	4820      	ldr	r0, [pc, #128]	@ (8014c2c <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa4>)
 8014baa:	f004 feeb 	bl	8019984 <_ZSt20__throw_length_errorPKc>
 8014bae:	45c1      	cmp	r9, r8
 8014bb0:	bf14      	ite	ne
 8014bb2:	4622      	movne	r2, r4
 8014bb4:	2201      	moveq	r2, #1
 8014bb6:	eba1 0508 	sub.w	r5, r1, r8
 8014bba:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8014bbc:	d231      	bcs.n	8014c22 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8014bbe:	b394      	cbz	r4, 8014c26 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9e>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8014bc0:	429c      	cmp	r4, r3
 8014bc2:	bf28      	it	cs
 8014bc4:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8014bc6:	0120      	lsls	r0, r4, #4
 8014bc8:	f004 fe27 	bl	801981a <_Znwj>
 8014bcc:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8014bce:	eb06 0c05 	add.w	ip, r6, r5
      if (__count > 0)
 8014bd2:	2d00      	cmp	r5, #0
 8014bd4:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8014bd8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8014bdc:	dd04      	ble.n	8014be8 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x60>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8014bde:	462a      	mov	r2, r5
 8014be0:	4641      	mov	r1, r8
 8014be2:	4630      	mov	r0, r6
 8014be4:	f004 ffa6 	bl	8019b34 <memmove>
      ptrdiff_t __count = __last - __first;
 8014be8:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
 8014bec:	3510      	adds	r5, #16
      if (__count > 0)
 8014bee:	f1b9 0f00 	cmp.w	r9, #0
 8014bf2:	4435      	add	r5, r6
 8014bf4:	dd04      	ble.n	8014c00 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x78>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8014bf6:	464a      	mov	r2, r9
 8014bf8:	4651      	mov	r1, sl
 8014bfa:	4628      	mov	r0, r5
 8014bfc:	f005 f892 	bl	8019d24 <memcpy>
      return __result + __count;
 8014c00:	444d      	add	r5, r9
	if (__p)
 8014c02:	f1b8 0f00 	cmp.w	r8, #0
 8014c06:	d005      	beq.n	8014c14 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
 8014c08:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8014c0a:	4640      	mov	r0, r8
 8014c0c:	eba1 0108 	sub.w	r1, r1, r8
 8014c10:	f004 fdde 	bl	80197d0 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8014c14:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8014c18:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 8014c1c:	60be      	str	r6, [r7, #8]
    }
 8014c1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8014c22:	461c      	mov	r4, r3
 8014c24:	e7cf      	b.n	8014bc6 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8014c26:	4626      	mov	r6, r4
 8014c28:	e7d1      	b.n	8014bce <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
 8014c2a:	bf00      	nop
 8014c2c:	08019e3e 	.word	0x08019e3e

08014c30 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 8014c30:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8014c32:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
      push_back(const value_type& __x)
 8014c36:	4605      	mov	r5, r0
 8014c38:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8014c3a:	429c      	cmp	r4, r3
 8014c3c:	d005      	beq.n	8014c4a <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE9push_backERKS1_+0x1a>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8014c3e:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 8014c40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8014c44:	3410      	adds	r4, #16
 8014c46:	606c      	str	r4, [r5, #4]
      }
 8014c48:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
 8014c4a:	4621      	mov	r1, r4
 8014c4c:	f7ff ff9c 	bl	8014b88 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8014c50:	e7fa      	b.n	8014c48 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE9push_backERKS1_+0x18>

08014c52 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>:
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 8014c52:	b570      	push	{r4, r5, r6, lr}
 8014c54:	460c      	mov	r4, r1
 8014c56:	b086      	sub	sp, #24
 8014c58:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8014c5a:	f04f 31ff 	mov.w	r1, #4294967295
 8014c5e:	6800      	ldr	r0, [r0, #0]
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 8014c60:	4616      	mov	r6, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8014c62:	f7f7 faab 	bl	800c1bc <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8014c66:	4621      	mov	r1, r4
 8014c68:	f10d 0207 	add.w	r2, sp, #7
 8014c6c:	4628      	mov	r0, r5
 8014c6e:	f002 fa30 	bl	80170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8014c72:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8014c76:	4604      	mov	r4, r0
	if (!success) {
 8014c78:	b923      	cbnz	r3, 8014c84 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x32>
	osSemaphoreRelease(RegistersSemaphore);
 8014c7a:	6828      	ldr	r0, [r5, #0]
 8014c7c:	f7f7 fad2 	bl	800c224 <osSemaphoreRelease>
}
 8014c80:	b006      	add	sp, #24
 8014c82:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8014c84:	f10d 0007 	add.w	r0, sp, #7
 8014c88:	f7ff fc62 	bl	8014550 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>
	if (!success) {
 8014c8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d0f2      	beq.n	8014c7a <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x28>
	if (target_register->register_info.type != registered_type) {
 8014c94:	7923      	ldrb	r3, [r4, #4]
 8014c96:	4298      	cmp	r0, r3
 8014c98:	d1ef      	bne.n	8014c7a <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x28>
	if (callbacks[target_register->register_info.type] == NULL) {
 8014c9a:	3004      	adds	r0, #4
 8014c9c:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8014ca0:	2800      	cmp	r0, #0
 8014ca2:	d0ea      	beq.n	8014c7a <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x28>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 8014ca4:	7823      	ldrb	r3, [r4, #0]
 8014ca6:	b983      	cbnz	r3, 8014cca <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x78>
 8014ca8:	7863      	ldrb	r3, [r4, #1]
 8014caa:	b973      	cbnz	r3, 8014cca <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x78>
		target_callback_list->push_back(callback);
 8014cac:	a902      	add	r1, sp, #8
		callback.pointer = pointer;
 8014cae:	9602      	str	r6, [sp, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8014cb0:	e9d0 2300 	ldrd	r2, r3, [r0]
 8014cb4:	1a9b      	subs	r3, r3, r2
 8014cb6:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8014cb8:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 8014cba:	f7ff ffb9 	bl	8014c30 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE9push_backERKS1_>
	target_register->mode.pointer = true;
 8014cbe:	2301      	movs	r3, #1
 8014cc0:	7023      	strb	r3, [r4, #0]
	target_register->access.write = true;
 8014cc2:	f240 1301 	movw	r3, #257	@ 0x101
 8014cc6:	8123      	strh	r3, [r4, #8]
 8014cc8:	e7d7      	b.n	8014c7a <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x28>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8014cca:	8961      	ldrh	r1, [r4, #10]
 8014ccc:	f7fa fb94 	bl	800f3f8 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE2atEj>
		callback->pointer = pointer;
 8014cd0:	6006      	str	r6, [r0, #0]
 8014cd2:	e7f4      	b.n	8014cbe <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x6c>

08014cd4 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8014cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014cd6:	460c      	mov	r4, r1
 8014cd8:	b087      	sub	sp, #28
 8014cda:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8014cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8014ce0:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8014ce2:	461e      	mov	r6, r3
 8014ce4:	4617      	mov	r7, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8014ce6:	f7f7 fa69 	bl	800c1bc <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8014cea:	4621      	mov	r1, r4
 8014cec:	f10d 0207 	add.w	r2, sp, #7
 8014cf0:	4628      	mov	r0, r5
 8014cf2:	f002 f9ee 	bl	80170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8014cf6:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8014cfa:	4604      	mov	r4, r0
	if (!success) {
 8014cfc:	b923      	cbnz	r3, 8014d08 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x34>
	osSemaphoreRelease(RegistersSemaphore);
 8014cfe:	6828      	ldr	r0, [r5, #0]
 8014d00:	f7f7 fa90 	bl	800c224 <osSemaphoreRelease>
}
 8014d04:	b007      	add	sp, #28
 8014d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8014d08:	f10d 0007 	add.w	r0, sp, #7
 8014d0c:	f7ff fc20 	bl	8014550 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>
	if (!success) {
 8014d10:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d0f2      	beq.n	8014cfe <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (target_register->register_info.type != registered_type) {
 8014d18:	7923      	ldrb	r3, [r4, #4]
 8014d1a:	4298      	cmp	r0, r3
 8014d1c:	d1ef      	bne.n	8014cfe <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (callbacks[target_register->register_info.type] == NULL) {
 8014d1e:	3004      	adds	r0, #4
 8014d20:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8014d24:	2800      	cmp	r0, #0
 8014d26:	d0ea      	beq.n	8014cfe <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 8014d28:	7823      	ldrb	r3, [r4, #0]
 8014d2a:	b983      	cbnz	r3, 8014d4e <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
 8014d2c:	7863      	ldrb	r3, [r4, #1]
 8014d2e:	b973      	cbnz	r3, 8014d4e <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
		callback.read = NULL;
 8014d30:	9305      	str	r3, [sp, #20]
		target_callback_list->push_back(callback);
 8014d32:	a902      	add	r1, sp, #8
 8014d34:	e9d0 2300 	ldrd	r2, r3, [r0]
		callback.write = write;
 8014d38:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8014d3c:	1a9b      	subs	r3, r3, r2
 8014d3e:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8014d40:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 8014d42:	f7ff ff75 	bl	8014c30 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE9push_backERKS1_>
	target_register->mode.callbacks = true;
 8014d46:	2301      	movs	r3, #1
 8014d48:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 8014d4a:	7223      	strb	r3, [r4, #8]
 8014d4c:	e7d7      	b.n	8014cfe <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8014d4e:	8961      	ldrh	r1, [r4, #10]
 8014d50:	f7fa fb52 	bl	800f3f8 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE2atEj>
		callback->write = write;
 8014d54:	e9c0 7601 	strd	r7, r6, [r0, #4]
 8014d58:	e7f5      	b.n	8014d46 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x72>
	...

08014d5c <_ZN15MotionGenerator12AddRegistersEv>:
void MotionGenerator::AddRegisters(void) {
 8014d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d60:	4604      	mov	r4, r0
 8014d62:	b086      	sub	sp, #24
	registers->AddRegister<uint8_t>(REG_GEN_CONFIGURE_MODULES);
 8014d64:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8014d68:	6800      	ldr	r0, [r0, #0]
	registers->SetRegisterAsSingle(REG_GEN_CONFIGURE_MODULES);
 8014d6a:	4625      	mov	r5, r4
	registers->AddRegister<uint8_t>(REG_GEN_CONFIGURE_MODULES);
 8014d6c:	f7ff fe01 	bl	8014972 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_GEN_CONFIGURE_MODULES);
 8014d70:	f44f 6180 	mov.w	r1, #1024	@ 0x400
	registers->AddRegisterSemaphore(REG_GEN_SETPOINTS, &GeneratorSemaphore);
 8014d74:	4626      	mov	r6, r4
	registers->SetRegisterAsSingle(REG_GEN_CONFIGURE_MODULES);
 8014d76:	f855 0b10 	ldr.w	r0, [r5], #16
 8014d7a:	f002 f9e3 	bl	8017144 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_GEN_GENERATOR_STATUS, &GeneratorSemaphore);
 8014d7e:	f240 4102 	movw	r1, #1026	@ 0x402
 8014d82:	462a      	mov	r2, r5
 8014d84:	6820      	ldr	r0, [r4, #0]
 8014d86:	f002 f9c3 	bl	8017110 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddWriteCallback<uint8_t>(REG_GEN_CONFIGURE_MODULES, (void*) this,
 8014d8a:	4bc2      	ldr	r3, [pc, #776]	@ (8015094 <_ZN15MotionGenerator12AddRegistersEv+0x338>)
 8014d8c:	4622      	mov	r2, r4
 8014d8e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8014d92:	6820      	ldr	r0, [r4, #0]
 8014d94:	f7ff fe61 	bl	8014a5a <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_GEN_MODULES_CONTROLLER_STATUS);
 8014d98:	f240 4101 	movw	r1, #1025	@ 0x401
 8014d9c:	6820      	ldr	r0, [r4, #0]
 8014d9e:	f7ff fde8 	bl	8014972 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_GEN_MODULES_CONTROLLER_STATUS);
 8014da2:	f240 4101 	movw	r1, #1025	@ 0x401
 8014da6:	6820      	ldr	r0, [r4, #0]
 8014da8:	f002 f9cc 	bl	8017144 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_GEN_GENERATOR_STATUS, &GeneratorSemaphore);
 8014dac:	462a      	mov	r2, r5
 8014dae:	f240 4102 	movw	r1, #1026	@ 0x402
 8014db2:	6820      	ldr	r0, [r4, #0]
 8014db4:	f002 f9ac 	bl	8017110 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddWriteCallback<uint8_t>(REG_GEN_MODULES_CONTROLLER_STATUS, (void*) this,
 8014db8:	4bb7      	ldr	r3, [pc, #732]	@ (8015098 <_ZN15MotionGenerator12AddRegistersEv+0x33c>)
 8014dba:	4622      	mov	r2, r4
 8014dbc:	f240 4101 	movw	r1, #1025	@ 0x401
 8014dc0:	6820      	ldr	r0, [r4, #0]
 8014dc2:	f7ff fe4a 	bl	8014a5a <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_GEN_GENERATOR_STATUS);
 8014dc6:	f240 4102 	movw	r1, #1026	@ 0x402
 8014dca:	6820      	ldr	r0, [r4, #0]
 8014dcc:	f7ff fdd1 	bl	8014972 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_GEN_GENERATOR_STATUS);
 8014dd0:	f240 4102 	movw	r1, #1026	@ 0x402
 8014dd4:	6820      	ldr	r0, [r4, #0]
 8014dd6:	f002 f9b5 	bl	8017144 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_GEN_GENERATOR_STATUS, &GeneratorSemaphore);
 8014dda:	462a      	mov	r2, r5
 8014ddc:	f240 4102 	movw	r1, #1026	@ 0x402
 8014de0:	6820      	ldr	r0, [r4, #0]
 8014de2:	f002 f995 	bl	8017110 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddReadCallback<uint8_t>(REG_GEN_GENERATOR_STATUS, (void*) this,
 8014de6:	4bad      	ldr	r3, [pc, #692]	@ (801509c <_ZN15MotionGenerator12AddRegistersEv+0x340>)
 8014de8:	4622      	mov	r2, r4
 8014dea:	f240 4102 	movw	r1, #1026	@ 0x402
 8014dee:	6820      	ldr	r0, [r4, #0]
 8014df0:	f7ff fdf0 	bl	80149d4 <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0>
	registers->AddWriteCallback<uint8_t>(REG_GEN_GENERATOR_STATUS, (void*) this,
 8014df4:	4baa      	ldr	r3, [pc, #680]	@ (80150a0 <_ZN15MotionGenerator12AddRegistersEv+0x344>)
 8014df6:	4622      	mov	r2, r4
 8014df8:	f240 4102 	movw	r1, #1026	@ 0x402
 8014dfc:	6820      	ldr	r0, [r4, #0]
 8014dfe:	f7ff fe2c 	bl	8014a5a <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<float>(REG_GEN_SETPOINTS);
 8014e02:	f240 4103 	movw	r1, #1027	@ 0x403
 8014e06:	6820      	ldr	r0, [r4, #0]
 8014e08:	f7ff fd82 	bl	8014910 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsVector(REG_GEN_SETPOINTS);
 8014e0c:	f240 4103 	movw	r1, #1027	@ 0x403
 8014e10:	6820      	ldr	r0, [r4, #0]
 8014e12:	f002 f9cf 	bl	80171b4 <_ZN9Registers19SetRegisterAsVectorEt>
	registers->AddRegisterSemaphore(REG_GEN_SETPOINTS, &GeneratorSemaphore);
 8014e16:	f856 0b50 	ldr.w	r0, [r6], #80
 8014e1a:	462a      	mov	r2, r5
 8014e1c:	f240 4103 	movw	r1, #1027	@ 0x403
 8014e20:	f002 f976 	bl	8017110 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	return AddRegisterPointer(ID, reinterpreted_pointer);
 8014e24:	4632      	mov	r2, r6
 8014e26:	f240 4103 	movw	r1, #1027	@ 0x403
 8014e2a:	6820      	ldr	r0, [r4, #0]
 8014e2c:	f7ff ff11 	bl	8014c52 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->SetRegisterPermissions(REG_GEN_SETPOINTS, READ_PERMISSION);
 8014e30:	2202      	movs	r2, #2
 8014e32:	f240 4103 	movw	r1, #1027	@ 0x403
 8014e36:	6820      	ldr	r0, [r4, #0]
 8014e38:	f002 f9bf 	bl	80171ba <_ZN9Registers22SetRegisterPermissionsEth>
	registers->AddRegister<uint32_t>(REG_GEN_PERIOD);
 8014e3c:	6826      	ldr	r6, [r4, #0]
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8014e3e:	f04f 31ff 	mov.w	r1, #4294967295
 8014e42:	6830      	ldr	r0, [r6, #0]
 8014e44:	f7f7 f9ba 	bl	800c1bc <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 8014e48:	f10d 0207 	add.w	r2, sp, #7
 8014e4c:	f240 4104 	movw	r1, #1028	@ 0x404
 8014e50:	4630      	mov	r0, r6
 8014e52:	f002 f93e 	bl	80170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 8014e56:	f89d 7007 	ldrb.w	r7, [sp, #7]
 8014e5a:	2f00      	cmp	r7, #0
 8014e5c:	f000 8100 	beq.w	8015060 <_ZN15MotionGenerator12AddRegistersEv+0x304>
	osSemaphoreRelease(RegistersSemaphore);
 8014e60:	6830      	ldr	r0, [r6, #0]
 8014e62:	f7f7 f9df 	bl	800c224 <osSemaphoreRelease>
	registers->SetRegisterAsSingle(REG_GEN_PERIOD);
 8014e66:	f240 4104 	movw	r1, #1028	@ 0x404
 8014e6a:	6820      	ldr	r0, [r4, #0]
 8014e6c:	f002 f96a 	bl	8017144 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_GEN_PERIOD, &GeneratorSemaphore);
 8014e70:	462a      	mov	r2, r5
 8014e72:	f240 4104 	movw	r1, #1028	@ 0x404
 8014e76:	6820      	ldr	r0, [r4, #0]
 8014e78:	f002 f94a 	bl	8017110 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<uint32_t>(REG_GEN_PERIOD, &period_ms);
 8014e7c:	f8d4 8000 	ldr.w	r8, [r4]
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8014e80:	f04f 31ff 	mov.w	r1, #4294967295
 8014e84:	f8d8 0000 	ldr.w	r0, [r8]
 8014e88:	f7f7 f998 	bl	800c1bc <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8014e8c:	f10d 0207 	add.w	r2, sp, #7
 8014e90:	f240 4104 	movw	r1, #1028	@ 0x404
 8014e94:	4640      	mov	r0, r8
 8014e96:	f002 f91c 	bl	80170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8014e9a:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8014e9e:	4606      	mov	r6, r0
	if (!success) {
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	f040 810d 	bne.w	80150c0 <_ZN15MotionGenerator12AddRegistersEv+0x364>
	osSemaphoreRelease(RegistersSemaphore);
 8014ea6:	f8d8 0000 	ldr.w	r0, [r8]
	registers->AddRegisterSemaphore(REG_GEN_MODULE_LENGTH, &GeneratorSemaphore);
 8014eaa:	4626      	mov	r6, r4
 8014eac:	f7f7 f9ba 	bl	800c224 <osSemaphoreRelease>
	registers->AddRegister<uint8_t>(REG_GEN_NB_MODULES);
 8014eb0:	6820      	ldr	r0, [r4, #0]
 8014eb2:	f240 4105 	movw	r1, #1029	@ 0x405
 8014eb6:	f7ff fd5c 	bl	8014972 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_GEN_NB_MODULES);
 8014eba:	f240 4105 	movw	r1, #1029	@ 0x405
 8014ebe:	6820      	ldr	r0, [r4, #0]
 8014ec0:	f002 f940 	bl	8017144 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddReadCallback<uint8_t>(REG_GEN_NB_MODULES, (void*) this,
 8014ec4:	4622      	mov	r2, r4
 8014ec6:	6820      	ldr	r0, [r4, #0]
 8014ec8:	f240 4105 	movw	r1, #1029	@ 0x405
 8014ecc:	4b75      	ldr	r3, [pc, #468]	@ (80150a4 <_ZN15MotionGenerator12AddRegistersEv+0x348>)
 8014ece:	f7ff fd81 	bl	80149d4 <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0>
	registers->AddWriteCallback<uint8_t>(REG_GEN_NB_MODULES, (void*) this,
 8014ed2:	4b75      	ldr	r3, [pc, #468]	@ (80150a8 <_ZN15MotionGenerator12AddRegistersEv+0x34c>)
 8014ed4:	4622      	mov	r2, r4
 8014ed6:	6820      	ldr	r0, [r4, #0]
 8014ed8:	f240 4105 	movw	r1, #1029	@ 0x405
 8014edc:	f7ff fdbd 	bl	8014a5a <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<float>(REG_GEN_GENERATOR_OFFSET);
 8014ee0:	6820      	ldr	r0, [r4, #0]
 8014ee2:	f240 4106 	movw	r1, #1030	@ 0x406
 8014ee6:	f7ff fd13 	bl	8014910 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsArray(REG_GEN_GENERATOR_OFFSET, 2);
 8014eea:	2202      	movs	r2, #2
 8014eec:	f240 4106 	movw	r1, #1030	@ 0x406
 8014ef0:	6820      	ldr	r0, [r4, #0]
 8014ef2:	f002 f943 	bl	801717c <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<float>(REG_GEN_GENERATOR_OFFSET, (void*) this,
 8014ef6:	4622      	mov	r2, r4
 8014ef8:	4b6c      	ldr	r3, [pc, #432]	@ (80150ac <_ZN15MotionGenerator12AddRegistersEv+0x350>)
 8014efa:	f240 4106 	movw	r1, #1030	@ 0x406
 8014efe:	6820      	ldr	r0, [r4, #0]
 8014f00:	f7ff fee8 	bl	8014cd4 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_GEN_RESET_GENERATOR_OFFSETS);
 8014f04:	6820      	ldr	r0, [r4, #0]
 8014f06:	f240 4107 	movw	r1, #1031	@ 0x407
 8014f0a:	f7ff fd32 	bl	8014972 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_GEN_RESET_GENERATOR_OFFSETS);
 8014f0e:	f240 4107 	movw	r1, #1031	@ 0x407
 8014f12:	6820      	ldr	r0, [r4, #0]
 8014f14:	f002 f916 	bl	8017144 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_GEN_RESET_GENERATOR_OFFSETS, (void*) this,
 8014f18:	4b65      	ldr	r3, [pc, #404]	@ (80150b0 <_ZN15MotionGenerator12AddRegistersEv+0x354>)
 8014f1a:	4622      	mov	r2, r4
 8014f1c:	6820      	ldr	r0, [r4, #0]
 8014f1e:	f240 4107 	movw	r1, #1031	@ 0x407
 8014f22:	f7ff fd9a 	bl	8014a5a <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<float>(REG_GEN_POSITION_OFFSET);
 8014f26:	6820      	ldr	r0, [r4, #0]
 8014f28:	f44f 6181 	mov.w	r1, #1032	@ 0x408
 8014f2c:	f7ff fcf0 	bl	8014910 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsArray(REG_GEN_POSITION_OFFSET, 2);
 8014f30:	2202      	movs	r2, #2
 8014f32:	f44f 6181 	mov.w	r1, #1032	@ 0x408
 8014f36:	6820      	ldr	r0, [r4, #0]
 8014f38:	f002 f920 	bl	801717c <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<float>(REG_GEN_POSITION_OFFSET, (void*) this,
 8014f3c:	4622      	mov	r2, r4
 8014f3e:	4b5d      	ldr	r3, [pc, #372]	@ (80150b4 <_ZN15MotionGenerator12AddRegistersEv+0x358>)
 8014f40:	f44f 6181 	mov.w	r1, #1032	@ 0x408
 8014f44:	6820      	ldr	r0, [r4, #0]
 8014f46:	f7ff fec5 	bl	8014cd4 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_GEN_RESET_POSITION_OFFSETS);
 8014f4a:	6820      	ldr	r0, [r4, #0]
 8014f4c:	f240 4109 	movw	r1, #1033	@ 0x409
 8014f50:	f7ff fd0f 	bl	8014972 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_GEN_RESET_POSITION_OFFSETS);
 8014f54:	f240 4109 	movw	r1, #1033	@ 0x409
 8014f58:	6820      	ldr	r0, [r4, #0]
 8014f5a:	f002 f8f3 	bl	8017144 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_GEN_RESET_POSITION_OFFSETS, (void*) this,
 8014f5e:	4b56      	ldr	r3, [pc, #344]	@ (80150b8 <_ZN15MotionGenerator12AddRegistersEv+0x35c>)
 8014f60:	4622      	mov	r2, r4
 8014f62:	6820      	ldr	r0, [r4, #0]
 8014f64:	f240 4109 	movw	r1, #1033	@ 0x409
 8014f68:	f7ff fd77 	bl	8014a5a <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<float>(REG_GEN_MODULE_LENGTH);
 8014f6c:	6820      	ldr	r0, [r4, #0]
 8014f6e:	f240 410a 	movw	r1, #1034	@ 0x40a
 8014f72:	f7ff fccd 	bl	8014910 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_GEN_MODULE_LENGTH);
 8014f76:	f240 410a 	movw	r1, #1034	@ 0x40a
 8014f7a:	6820      	ldr	r0, [r4, #0]
 8014f7c:	f002 f8e2 	bl	8017144 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_GEN_MODULE_LENGTH, &GeneratorSemaphore);
 8014f80:	f856 0b20 	ldr.w	r0, [r6], #32
 8014f84:	462a      	mov	r2, r5
 8014f86:	f240 410a 	movw	r1, #1034	@ 0x40a
 8014f8a:	f002 f8c1 	bl	8017110 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_GEN_MODULE_LENGTH, &module_length);
 8014f8e:	4632      	mov	r2, r6
 8014f90:	6820      	ldr	r0, [r4, #0]
 8014f92:	f240 410a 	movw	r1, #1034	@ 0x40a
 8014f96:	f7ff fe5c 	bl	8014c52 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->AddRegisterSemaphore(REG_GEN_AMPLITUDE, &GeneratorSemaphore);
 8014f9a:	4626      	mov	r6, r4
	registers->AddRegister<float>(REG_GEN_AMPLITUDE);
 8014f9c:	6820      	ldr	r0, [r4, #0]
 8014f9e:	f240 410b 	movw	r1, #1035	@ 0x40b
 8014fa2:	f7ff fcb5 	bl	8014910 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_GEN_AMPLITUDE);
 8014fa6:	f240 410b 	movw	r1, #1035	@ 0x40b
 8014faa:	6820      	ldr	r0, [r4, #0]
 8014fac:	f002 f8ca 	bl	8017144 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_GEN_AMPLITUDE, &GeneratorSemaphore);
 8014fb0:	f856 0b3c 	ldr.w	r0, [r6], #60
 8014fb4:	462a      	mov	r2, r5
 8014fb6:	f240 410b 	movw	r1, #1035	@ 0x40b
 8014fba:	f002 f8a9 	bl	8017110 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_GEN_AMPLITUDE, &amplitude);
 8014fbe:	4632      	mov	r2, r6
 8014fc0:	6820      	ldr	r0, [r4, #0]
 8014fc2:	f240 410b 	movw	r1, #1035	@ 0x40b
 8014fc6:	f7ff fe44 	bl	8014c52 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->AddRegisterSemaphore(REG_GEN_FREQUENCY, &GeneratorSemaphore);
 8014fca:	4626      	mov	r6, r4
	registers->AddRegister<float>(REG_GEN_FREQUENCY);
 8014fcc:	6820      	ldr	r0, [r4, #0]
 8014fce:	f240 410c 	movw	r1, #1036	@ 0x40c
 8014fd2:	f7ff fc9d 	bl	8014910 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_GEN_FREQUENCY);
 8014fd6:	f240 410c 	movw	r1, #1036	@ 0x40c
 8014fda:	6820      	ldr	r0, [r4, #0]
 8014fdc:	f002 f8b2 	bl	8017144 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_GEN_FREQUENCY, &GeneratorSemaphore);
 8014fe0:	f856 0b40 	ldr.w	r0, [r6], #64
 8014fe4:	462a      	mov	r2, r5
 8014fe6:	f240 410c 	movw	r1, #1036	@ 0x40c
 8014fea:	f002 f891 	bl	8017110 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_GEN_FREQUENCY, &frequency);
 8014fee:	4632      	mov	r2, r6
 8014ff0:	6820      	ldr	r0, [r4, #0]
 8014ff2:	f240 410c 	movw	r1, #1036	@ 0x40c
 8014ff6:	f7ff fe2c 	bl	8014c52 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->AddRegisterSemaphore(REG_GEN_WAVELENGTH_INVERSE, &GeneratorSemaphore);
 8014ffa:	4626      	mov	r6, r4
	registers->AddRegister<float>(REG_GEN_WAVELENGTH_INVERSE);
 8014ffc:	6820      	ldr	r0, [r4, #0]
 8014ffe:	f240 410d 	movw	r1, #1037	@ 0x40d
 8015002:	f7ff fc85 	bl	8014910 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_GEN_WAVELENGTH_INVERSE);
 8015006:	f240 410d 	movw	r1, #1037	@ 0x40d
 801500a:	6820      	ldr	r0, [r4, #0]
 801500c:	f002 f89a 	bl	8017144 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_GEN_WAVELENGTH_INVERSE, &GeneratorSemaphore);
 8015010:	f856 0b44 	ldr.w	r0, [r6], #68
 8015014:	462a      	mov	r2, r5
 8015016:	f240 410d 	movw	r1, #1037	@ 0x40d
 801501a:	f002 f879 	bl	8017110 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_GEN_WAVELENGTH_INVERSE, &wavelength_inverse);
 801501e:	4632      	mov	r2, r6
 8015020:	6820      	ldr	r0, [r4, #0]
 8015022:	f240 410d 	movw	r1, #1037	@ 0x40d
 8015026:	f7ff fe14 	bl	8014c52 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->AddRegister<float>(REG_GEN_PHASE);
 801502a:	6820      	ldr	r0, [r4, #0]
 801502c:	f240 410e 	movw	r1, #1038	@ 0x40e
 8015030:	f7ff fc6e 	bl	8014910 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_GEN_PHASE);
 8015034:	f240 410e 	movw	r1, #1038	@ 0x40e
 8015038:	6820      	ldr	r0, [r4, #0]
 801503a:	f002 f883 	bl	8017144 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_GEN_PHASE, &GeneratorSemaphore);
 801503e:	462a      	mov	r2, r5
 8015040:	4625      	mov	r5, r4
 8015042:	f240 410e 	movw	r1, #1038	@ 0x40e
 8015046:	f855 0b48 	ldr.w	r0, [r5], #72
 801504a:	f002 f861 	bl	8017110 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_GEN_PHASE, &phase);
 801504e:	f240 410e 	movw	r1, #1038	@ 0x40e
 8015052:	462a      	mov	r2, r5
 8015054:	6820      	ldr	r0, [r4, #0]
}
 8015056:	b006      	add	sp, #24
 8015058:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	registers->AddRegisterPointer<float>(REG_GEN_PHASE, &phase);
 801505c:	f7ff bdf9 	b.w	8014c52 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8015060:	f10d 0007 	add.w	r0, sp, #7
 8015064:	f7ff fa12 	bl	801448c <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	configuration_.mode = mode;
 8015068:	4b14      	ldr	r3, [pc, #80]	@ (80150bc <_ZN15MotionGenerator12AddRegistersEv+0x360>)
	configuration_.register_info = register_;
 801506a:	f88d 000c 	strb.w	r0, [sp, #12]
	configuration_.mode = mode;
 801506e:	9302      	str	r3, [sp, #8]
	configuration_.register_info = register_;
 8015070:	2301      	movs	r3, #1
 8015072:	f88d 700d 	strb.w	r7, [sp, #13]
 8015076:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 801507a:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_semaphore = NULL;
 801507e:	e9cd 7704 	strd	r7, r7, [sp, #16]
	if (success) {
 8015082:	2b00      	cmp	r3, #0
 8015084:	f43f aeec 	beq.w	8014e60 <_ZN15MotionGenerator12AddRegistersEv+0x104>
		registers.push_back(configuration_);
 8015088:	a902      	add	r1, sp, #8
 801508a:	1d30      	adds	r0, r6, #4
 801508c:	f7ff fc2f 	bl	80148ee <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 8015090:	e6e6      	b.n	8014e60 <_ZN15MotionGenerator12AddRegistersEv+0x104>
 8015092:	bf00      	nop
 8015094:	0801440d 	.word	0x0801440d
 8015098:	08014417 	.word	0x08014417
 801509c:	08014451 	.word	0x08014451
 80150a0:	0801530d 	.word	0x0801530d
 80150a4:	0801442b 	.word	0x0801442b
 80150a8:	08015259 	.word	0x08015259
 80150ac:	08014773 	.word	0x08014773
 80150b0:	080146d9 	.word	0x080146d9
 80150b4:	08014801 	.word	0x08014801
 80150b8:	080146eb 	.word	0x080146eb
 80150bc:	04040000 	.word	0x04040000
	uint8_t registered_type = GetTypeID<T>(&success);
 80150c0:	f10d 0007 	add.w	r0, sp, #7
 80150c4:	f7ff f9e2 	bl	801448c <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	if (!success) {
 80150c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	f43f aeea 	beq.w	8014ea6 <_ZN15MotionGenerator12AddRegistersEv+0x14a>
	if (target_register->register_info.type != registered_type) {
 80150d2:	7933      	ldrb	r3, [r6, #4]
 80150d4:	4298      	cmp	r0, r3
 80150d6:	f47f aee6 	bne.w	8014ea6 <_ZN15MotionGenerator12AddRegistersEv+0x14a>
	if (callbacks[target_register->register_info.type] == NULL) {
 80150da:	3004      	adds	r0, #4
 80150dc:	f858 c020 	ldr.w	ip, [r8, r0, lsl #2]
 80150e0:	f1bc 0f00 	cmp.w	ip, #0
 80150e4:	f43f aedf 	beq.w	8014ea6 <_ZN15MotionGenerator12AddRegistersEv+0x14a>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 80150e8:	7831      	ldrb	r1, [r6, #0]
	registers->AddRegisterPointer<uint32_t>(REG_GEN_PERIOD, &period_ms);
 80150ea:	f104 0018 	add.w	r0, r4, #24
 80150ee:	e9dc 3700 	ldrd	r3, r7, [ip]
 80150f2:	1afa      	subs	r2, r7, r3
 80150f4:	1112      	asrs	r2, r2, #4
 80150f6:	b9c1      	cbnz	r1, 801512a <_ZN15MotionGenerator12AddRegistersEv+0x3ce>
 80150f8:	7871      	ldrb	r1, [r6, #1]
 80150fa:	b9b1      	cbnz	r1, 801512a <_ZN15MotionGenerator12AddRegistersEv+0x3ce>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80150fc:	f8dc 1008 	ldr.w	r1, [ip, #8]
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8015100:	8172      	strh	r2, [r6, #10]
 8015102:	aa02      	add	r2, sp, #8
 8015104:	42b9      	cmp	r1, r7
		callback.pointer = pointer;
 8015106:	9002      	str	r0, [sp, #8]
 8015108:	d00b      	beq.n	8015122 <_ZN15MotionGenerator12AddRegistersEv+0x3c6>
 801510a:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 801510c:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8015110:	3710      	adds	r7, #16
 8015112:	f8cc 7004 	str.w	r7, [ip, #4]
	target_register->mode.pointer = true;
 8015116:	2301      	movs	r3, #1
 8015118:	7033      	strb	r3, [r6, #0]
	target_register->access.write = true;
 801511a:	f240 1301 	movw	r3, #257	@ 0x101
 801511e:	8133      	strh	r3, [r6, #8]
 8015120:	e6c1      	b.n	8014ea6 <_ZN15MotionGenerator12AddRegistersEv+0x14a>
	  _M_realloc_insert(end(), __x);
 8015122:	4660      	mov	r0, ip
 8015124:	f7ff fcdc 	bl	8014ae0 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	} else {
 8015128:	e7f5      	b.n	8015116 <_ZN15MotionGenerator12AddRegistersEv+0x3ba>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 801512a:	8971      	ldrh	r1, [r6, #10]
	if (__n >= this->size())
 801512c:	4291      	cmp	r1, r2
 801512e:	d302      	bcc.n	8015136 <_ZN15MotionGenerator12AddRegistersEv+0x3da>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8015130:	4802      	ldr	r0, [pc, #8]	@ (801513c <_ZN15MotionGenerator12AddRegistersEv+0x3e0>)
 8015132:	f004 fc2a 	bl	801998a <_ZSt24__throw_out_of_range_fmtPKcz>
		callback->pointer = pointer;
 8015136:	0109      	lsls	r1, r1, #4
 8015138:	5058      	str	r0, [r3, r1]
 801513a:	e7ec      	b.n	8015116 <_ZN15MotionGenerator12AddRegistersEv+0x3ba>
 801513c:	0801a080 	.word	0x0801a080

08015140 <_ZNSt6vectorIfSaIfEE6resizeEj>:
      resize(size_type __new_size)
 8015140:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015142:	e9d0 2500 	ldrd	r2, r5, [r0]
 8015146:	1aac      	subs	r4, r5, r2
 8015148:	10a4      	asrs	r4, r4, #2
	if (__new_size > size())
 801514a:	42a1      	cmp	r1, r4
 801514c:	d903      	bls.n	8015156 <_ZNSt6vectorIfSaIfEE6resizeEj+0x16>
	  _M_default_append(__new_size - size());
 801514e:	1b09      	subs	r1, r1, r4
 8015150:	f7fd fd04 	bl	8012b5c <_ZNSt6vectorIfSaIfEE17_M_default_appendEj>
      }
 8015154:	bd38      	pop	{r3, r4, r5, pc}
	else if (__new_size < size())
 8015156:	d2fd      	bcs.n	8015154 <_ZNSt6vectorIfSaIfEE6resizeEj+0x14>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 8015158:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	if (size_type __n = this->_M_impl._M_finish - __pos)
 801515c:	42aa      	cmp	r2, r5
	    this->_M_impl._M_finish = __pos;
 801515e:	bf18      	it	ne
 8015160:	6042      	strne	r2, [r0, #4]
      }
 8015162:	e7f7      	b.n	8015154 <_ZNSt6vectorIfSaIfEE6resizeEj+0x14>

08015164 <_ZN15MotionGenerator18SetNumberOfModulesEh>:
bool MotionGenerator::SetNumberOfModules(uint8_t nb_modules) {
 8015164:	b570      	push	{r4, r5, r6, lr}
 8015166:	4604      	mov	r4, r0
 8015168:	460e      	mov	r6, r1
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 801516a:	6900      	ldr	r0, [r0, #16]
 801516c:	f04f 31ff 	mov.w	r1, #4294967295
 8015170:	f7f7 f824 	bl	800c1bc <osSemaphoreAcquire>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015174:	4620      	mov	r0, r4
 8015176:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
	generator_offsets.resize(nb_modules);
 8015178:	4631      	mov	r1, r6
	number_of_modules = nb_modules;
 801517a:	7726      	strb	r6, [r4, #28]
 801517c:	f850 2f24 	ldr.w	r2, [r0, #36]!
 8015180:	1a9b      	subs	r3, r3, r2
 8015182:	109d      	asrs	r5, r3, #2
	generator_offsets.resize(nb_modules);
 8015184:	f7ff ffdc 	bl	8015140 <_ZNSt6vectorIfSaIfEE6resizeEj>
      { return __normal_iterator(_M_current + __n); }
 8015188:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 801518a:	b2ed      	uxtb	r5, r5
	*__first = __tmp;
 801518c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801518e:	2100      	movs	r1, #0
 8015190:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 8015194:	1a12      	subs	r2, r2, r0
 8015196:	f004 fce7 	bl	8019b68 <memset>
 801519a:	4620      	mov	r0, r4
 801519c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
	position_offsets.resize(nb_modules);
 801519e:	4631      	mov	r1, r6
 80151a0:	f850 2f30 	ldr.w	r2, [r0, #48]!
 80151a4:	1a9b      	subs	r3, r3, r2
 80151a6:	109d      	asrs	r5, r3, #2
 80151a8:	f7ff ffca 	bl	8015140 <_ZNSt6vectorIfSaIfEE6resizeEj>
 80151ac:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80151ae:	b2ed      	uxtb	r5, r5
 80151b0:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80151b2:	2100      	movs	r1, #0
 80151b4:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 80151b8:	1a12      	subs	r2, r2, r0
 80151ba:	f004 fcd5 	bl	8019b68 <memset>
	osSemaphoreRelease(GeneratorSemaphore);
 80151be:	6920      	ldr	r0, [r4, #16]
 80151c0:	f7f7 f830 	bl	800c224 <osSemaphoreRelease>
}
 80151c4:	2001      	movs	r0, #1
 80151c6:	bd70      	pop	{r4, r5, r6, pc}

080151c8 <_ZN15MotionGenerator4InitEP9RegistersP10PublishersP8ServicesP4LEDS>:
void MotionGenerator::Init(Registers* registers_, Publishers* publishers_, Services* services_, LEDS* leds_) {
 80151c8:	b538      	push	{r3, r4, r5, lr}
	publishers = publishers_;
 80151ca:	e9c0 1200 	strd	r1, r2, [r0]
	services = services_;
 80151ce:	6083      	str	r3, [r0, #8]
	GeneratorSemaphore = osSemaphoreNew(1,1,NULL);
 80151d0:	2101      	movs	r1, #1
	leds = leds_;
 80151d2:	9b04      	ldr	r3, [sp, #16]
void MotionGenerator::Init(Registers* registers_, Publishers* publishers_, Services* services_, LEDS* leds_) {
 80151d4:	4604      	mov	r4, r0
	GeneratorSemaphore = osSemaphoreNew(1,1,NULL);
 80151d6:	2200      	movs	r2, #0
	GeneratorInterface = ServiceInterface{.interface=GENERATOR_INTERFACE};
 80151d8:	2500      	movs	r5, #0
	leds = leds_;
 80151da:	60c3      	str	r3, [r0, #12]
	GeneratorSemaphore = osSemaphoreNew(1,1,NULL);
 80151dc:	4608      	mov	r0, r1
 80151de:	f7f6 ff91 	bl	800c104 <osSemaphoreNew>
 80151e2:	6120      	str	r0, [r4, #16]
	osSemaphoreRelease(GeneratorSemaphore);
 80151e4:	f7f7 f81e 	bl	800c224 <osSemaphoreRelease>
	MoveToRegister = Register{.address=REG_MOTOR_MOVETO, .type=FLOAT_TYPE, .isArray=false, .length=1};
 80151e8:	4b18      	ldr	r3, [pc, #96]	@ (801524c <_ZN15MotionGenerator4InitEP9RegistersP10PublishersP8ServicesP4LEDS+0x84>)
	SetGeneratorPeriod(DEFAULT_GENERATOR_PERIOD);
 80151ea:	210a      	movs	r1, #10
	GeneratorInterface = ServiceInterface{.interface=GENERATOR_INTERFACE};
 80151ec:	f8a4 5062 	strh.w	r5, [r4, #98]	@ 0x62
	MoveToRegister = Register{.address=REG_MOTOR_MOVETO, .type=FLOAT_TYPE, .isArray=false, .length=1};
 80151f0:	6818      	ldr	r0, [r3, #0]
 80151f2:	889b      	ldrh	r3, [r3, #4]
 80151f4:	65e0      	str	r0, [r4, #92]	@ 0x5c
	SetGeneratorPeriod(DEFAULT_GENERATOR_PERIOD);
 80151f6:	4620      	mov	r0, r4
	MoveToRegister = Register{.address=REG_MOTOR_MOVETO, .type=FLOAT_TYPE, .isArray=false, .length=1};
 80151f8:	f8a4 3060 	strh.w	r3, [r4, #96]	@ 0x60
	SetGeneratorPeriod(DEFAULT_GENERATOR_PERIOD);
 80151fc:	f7ff fa89 	bl	8014712 <_ZN15MotionGenerator18SetGeneratorPeriodEm>
	SetNumberOfModules(DEFAULT_GENERATOR_NB_NODULES);
 8015200:	4629      	mov	r1, r5
 8015202:	4620      	mov	r0, r4
 8015204:	f7ff ffae 	bl	8015164 <_ZN15MotionGenerator18SetNumberOfModulesEh>
	ResetGeneratorOffsets();
 8015208:	4620      	mov	r0, r4
 801520a:	f7ff fac5 	bl	8014798 <_ZN15MotionGenerator21ResetGeneratorOffsetsEv>
	SetModuleLength(DEFAULT_MODULE_LENGTH);
 801520e:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 8015250 <_ZN15MotionGenerator4InitEP9RegistersP10PublishersP8ServicesP4LEDS+0x88>
 8015212:	4620      	mov	r0, r4
 8015214:	f7ff fb07 	bl	8014826 <_ZN15MotionGenerator15SetModuleLengthEf>
	SetGeneratorAmplitude(DEFAULT_GENERATOR_AMPLITUDE);
 8015218:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 801521c:	4620      	mov	r0, r4
 801521e:	f7ff fb16 	bl	801484e <_ZN15MotionGenerator21SetGeneratorAmplitudeEf>
	SetGeneratorFrequency(DEFAULT_GENERATOR_FREQUENCY);
 8015222:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8015226:	4620      	mov	r0, r4
 8015228:	f7ff fb25 	bl	8014876 <_ZN15MotionGenerator21SetGeneratorFrequencyEf>
	SetGeneratorWavelengthInverse(1 / DEFAULT_GENERATOR_WAVELENGTH);
 801522c:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8015230:	4620      	mov	r0, r4
 8015232:	f7ff fb34 	bl	801489e <_ZN15MotionGenerator29SetGeneratorWavelengthInverseEf>
	SetGeneratorPhase(DEFAULT_GENERATOR_PHASE);
 8015236:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8015254 <_ZN15MotionGenerator4InitEP9RegistersP10PublishersP8ServicesP4LEDS+0x8c>
 801523a:	4620      	mov	r0, r4
 801523c:	f7ff fb43 	bl	80148c6 <_ZN15MotionGenerator17SetGeneratorPhaseEf>
	request_module_configuration = false;
 8015240:	f8a4 5064 	strh.w	r5, [r4, #100]	@ 0x64
	request_module_controller_deactivation = false;
 8015244:	f884 5066 	strb.w	r5, [r4, #102]	@ 0x66
}
 8015248:	bd38      	pop	{r3, r4, r5, pc}
 801524a:	bf00      	nop
 801524c:	08019e38 	.word	0x08019e38
 8015250:	3dfbe76d 	.word	0x3dfbe76d
 8015254:	00000000 	.word	0x00000000

08015258 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE4_4_FUNES0_tS1_t>:
			return self->SetNumberOfModules(*input);
 8015258:	7811      	ldrb	r1, [r2, #0]
 801525a:	f7ff bf83 	b.w	8015164 <_ZN15MotionGenerator18SetNumberOfModulesEh>
	...

08015260 <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag.isra.0>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8015260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8015262:	1a57      	subs	r7, r2, r1
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8015264:	4604      	mov	r4, r0
 8015266:	460d      	mov	r5, r1
 8015268:	4616      	mov	r6, r2
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 801526a:	d502      	bpl.n	8015272 <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag.isra.0+0x12>
	  __throw_length_error(
 801526c:	4807      	ldr	r0, [pc, #28]	@ (801528c <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag.isra.0+0x2c>)
 801526e:	f004 fb89 	bl	8019984 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8015272:	4638      	mov	r0, r7
 8015274:	f7ff f8ff 	bl	8014476 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8015278:	4407      	add	r7, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 801527a:	4602      	mov	r2, r0
 801527c:	6020      	str	r0, [r4, #0]
			      _Category>::__copy_m(__first, __last, __result);
 801527e:	4631      	mov	r1, r6
 8015280:	4628      	mov	r0, r5
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8015282:	60a7      	str	r7, [r4, #8]
 8015284:	f7eb fbae 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	  this->_M_impl._M_finish =
 8015288:	6060      	str	r0, [r4, #4]
	}
 801528a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801528c:	08019e58 	.word	0x08019e58

08015290 <_ZN15MotionGenerator18SetGeneratorStatusEb>:
bool MotionGenerator::SetGeneratorStatus(bool status) {
 8015290:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8015292:	460d      	mov	r5, r1
 8015294:	4604      	mov	r4, r0
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 8015296:	f04f 31ff 	mov.w	r1, #4294967295
 801529a:	6900      	ldr	r0, [r0, #16]
 801529c:	f7f6 ff8e 	bl	800c1bc <osSemaphoreAcquire>
	if (status) {
 80152a0:	b30d      	cbz	r5, 80152e6 <_ZN15MotionGenerator18SetGeneratorStatusEb+0x56>
		leds->ConfigureTimings(LED_ACTIVITY, std::vector<uint8_t>{1}, 10);
 80152a2:	2301      	movs	r3, #1
 80152a4:	68e6      	ldr	r6, [r4, #12]
	_M_range_initialize(__l.begin(), __l.end(),
 80152a6:	f10d 0201 	add.w	r2, sp, #1
 80152aa:	4669      	mov	r1, sp
 80152ac:	f88d 3000 	strb.w	r3, [sp]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80152b0:	2300      	movs	r3, #0
	_M_range_initialize(__l.begin(), __l.end(),
 80152b2:	a801      	add	r0, sp, #4
	: _M_start(), _M_finish(), _M_end_of_storage()
 80152b4:	9303      	str	r3, [sp, #12]
 80152b6:	e9cd 3301 	strd	r3, r3, [sp, #4]
	_M_range_initialize(__l.begin(), __l.end(),
 80152ba:	f7ff ffd1 	bl	8015260 <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag.isra.0>
 80152be:	2108      	movs	r1, #8
 80152c0:	230a      	movs	r3, #10
 80152c2:	aa01      	add	r2, sp, #4
 80152c4:	4630      	mov	r0, r6
 80152c6:	f7ff f814 	bl	80142f2 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
      }
 80152ca:	a801      	add	r0, sp, #4
 80152cc:	f7eb fae6 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		leds->Blink(LED_ACTIVITY);
 80152d0:	2108      	movs	r1, #8
 80152d2:	68e0      	ldr	r0, [r4, #12]
 80152d4:	f7fe fab7 	bl	8013846 <_ZN4LEDS5BlinkEh>
	osSemaphoreRelease(GeneratorSemaphore);
 80152d8:	6920      	ldr	r0, [r4, #16]
	active = status;
 80152da:	7525      	strb	r5, [r4, #20]
	osSemaphoreRelease(GeneratorSemaphore);
 80152dc:	f7f6 ffa2 	bl	800c224 <osSemaphoreRelease>
}
 80152e0:	2001      	movs	r0, #1
 80152e2:	b004      	add	sp, #16
 80152e4:	bd70      	pop	{r4, r5, r6, pc}
		leds->ClearLED(LED_ACTIVITY);
 80152e6:	2108      	movs	r1, #8
 80152e8:	68e0      	ldr	r0, [r4, #12]
 80152ea:	f7fe fc8c 	bl	8013c06 <_ZN4LEDS8ClearLEDEh>
 80152ee:	e7f3      	b.n	80152d8 <_ZN15MotionGenerator18SetGeneratorStatusEb+0x48>

080152f0 <_ZN15MotionGenerator17ActivateGeneratorEv>:
bool MotionGenerator::ActivateGenerator(void) {
 80152f0:	b510      	push	{r4, lr}
 80152f2:	4604      	mov	r4, r0
	start_time = HAL_GetTick();
 80152f4:	f7ed ff06 	bl	8003104 <HAL_GetTick>
	return SetGeneratorStatus(true);
 80152f8:	2101      	movs	r1, #1
	start_time = HAL_GetTick();
 80152fa:	64e0      	str	r0, [r4, #76]	@ 0x4c
	return SetGeneratorStatus(true);
 80152fc:	4620      	mov	r0, r4
}
 80152fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return SetGeneratorStatus(true);
 8015302:	f7ff bfc5 	b.w	8015290 <_ZN15MotionGenerator18SetGeneratorStatusEb>

08015306 <_ZN15MotionGenerator19DeactivateGeneratorEv>:
	return SetGeneratorStatus(false);
 8015306:	2100      	movs	r1, #0
 8015308:	f7ff bfc2 	b.w	8015290 <_ZN15MotionGenerator18SetGeneratorStatusEb>

0801530c <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE2_4_FUNES0_tS1_t>:
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 801530c:	b508      	push	{r3, lr}
			if (*input > 0)
 801530e:	7813      	ldrb	r3, [r2, #0]
 8015310:	b11b      	cbz	r3, 801531a <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE2_4_FUNES0_tS1_t+0xe>
				self->ActivateGenerator();
 8015312:	f7ff ffed 	bl	80152f0 <_ZN15MotionGenerator17ActivateGeneratorEv>
		}
 8015316:	2001      	movs	r0, #1
 8015318:	bd08      	pop	{r3, pc}
				self->DeactivateGenerator();
 801531a:	f7ff fff4 	bl	8015306 <_ZN15MotionGenerator19DeactivateGeneratorEv>
 801531e:	e7fa      	b.n	8015316 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE2_4_FUNES0_tS1_t+0xa>

08015320 <_ZN21CommunicationProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb>:
 * @param input data: message to decode
 * @param output index: processed length in the data
 * @param output success: true if message decoded
 * @return the decoded and parsed message based on the custom protocol
 */
MessageHeader CommunicationProtocol::DecodeProtocol(uint8_t ID, std::vector<uint8_t> data, uint16_t* index, bool* success) {*success = false; MessageHeader empty_message; return empty_message;}
 8015320:	2200      	movs	r2, #0
 8015322:	9901      	ldr	r1, [sp, #4]
 8015324:	700a      	strb	r2, [r1, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8015326:	60c2      	str	r2, [r0, #12]
 8015328:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801532c:	4770      	bx	lr

0801532e <_ZN21CommunicationProtocol17ActivateReceptionEh>:
 * @brief WEAK Activate reception of the associated hardware interface
 *
 * @param input ID: interface ID
 * @return the interface access status
 */
HAL_StatusTypeDef CommunicationProtocol::ActivateReception(uint8_t ID) {return HAL_ERROR;}
 801532e:	2001      	movs	r0, #1
 8015330:	4770      	bx	lr

08015332 <_ZN21CommunicationProtocol4SendE13MessageHeader>:
 * @brief WEAK Send a message over an interface with this protocol
 *
 * @param input ID: message to send
 * @return the interface access status
 */
HAL_StatusTypeDef CommunicationProtocol::Send(MessageHeader message) {return HAL_ERROR;}
 8015332:	2001      	movs	r0, #1
 8015334:	4770      	bx	lr

08015336 <_ZN21CommunicationProtocol5GetIDEPvPb>:
 *
 * @param input pointer: the hardware interface handle pointer
 * @param output success: whether successful
 * @return the interface ID associated to the input handle
 */
uint8_t CommunicationProtocol::GetID(void* pointer, bool* success) {*success = false; return 0;}
 8015336:	2000      	movs	r0, #0
 8015338:	7010      	strb	r0, [r2, #0]
 801533a:	4770      	bx	lr

0801533c <_ZN21CommunicationProtocol14AddInterfaceIDEh>:
void CommunicationProtocol::AddInterfaceID(uint8_t ID_) {
 801533c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8015340:	e9d0 4305 	ldrd	r4, r3, [r0, #20]
 8015344:	4606      	mov	r6, r0
 8015346:	4689      	mov	r9, r1
 8015348:	429c      	cmp	r4, r3
 801534a:	d005      	beq.n	8015358 <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x1c>
 801534c:	7021      	strb	r1, [r4, #0]
	    ++this->_M_impl._M_finish;
 801534e:	6943      	ldr	r3, [r0, #20]
 8015350:	3301      	adds	r3, #1
 8015352:	6143      	str	r3, [r0, #20]
}
 8015354:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015358:	f8d0 8010 	ldr.w	r8, [r0, #16]
	if (max_size() - size() < __n)
 801535c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015360:	eba4 0408 	sub.w	r4, r4, r8
	if (max_size() - size() < __n)
 8015364:	429c      	cmp	r4, r3
 8015366:	d102      	bne.n	801536e <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x32>
	  __throw_length_error(__N(__s));
 8015368:	4816      	ldr	r0, [pc, #88]	@ (80153c4 <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x88>)
 801536a:	f004 fb0b 	bl	8019984 <_ZSt20__throw_length_errorPKc>
 801536e:	2c01      	cmp	r4, #1
 8015370:	4625      	mov	r5, r4
 8015372:	bf38      	it	cc
 8015374:	2501      	movcc	r5, #1
 8015376:	1965      	adds	r5, r4, r5
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8015378:	d220      	bcs.n	80153bc <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x80>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801537a:	b30d      	cbz	r5, 80153c0 <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x84>
 801537c:	429d      	cmp	r5, r3
 801537e:	bf28      	it	cs
 8015380:	461d      	movcs	r5, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8015382:	4628      	mov	r0, r5
 8015384:	f004 fa49 	bl	801981a <_Znwj>
 8015388:	4607      	mov	r7, r0
      if (__count > 0)
 801538a:	2c00      	cmp	r4, #0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801538c:	f807 9004 	strb.w	r9, [r7, r4]
 8015390:	dd04      	ble.n	801539c <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x60>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8015392:	4622      	mov	r2, r4
 8015394:	4641      	mov	r1, r8
 8015396:	4638      	mov	r0, r7
 8015398:	f004 fbcc 	bl	8019b34 <memmove>
	      ++__new_finish;
 801539c:	3401      	adds	r4, #1
 801539e:	443c      	add	r4, r7
	if (__p)
 80153a0:	f1b8 0f00 	cmp.w	r8, #0
 80153a4:	d005      	beq.n	80153b2 <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x76>
		    this->_M_impl._M_end_of_storage - __old_start);
 80153a6:	69b1      	ldr	r1, [r6, #24]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80153a8:	4640      	mov	r0, r8
 80153aa:	eba1 0108 	sub.w	r1, r1, r8
 80153ae:	f004 fa0f 	bl	80197d0 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 80153b2:	e9c6 7404 	strd	r7, r4, [r6, #16]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80153b6:	442f      	add	r7, r5
 80153b8:	61b7      	str	r7, [r6, #24]
 80153ba:	e7cb      	b.n	8015354 <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x18>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80153bc:	461d      	mov	r5, r3
 80153be:	e7e0      	b.n	8015382 <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x46>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80153c0:	462f      	mov	r7, r5
 80153c2:	e7e2      	b.n	801538a <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x4e>
 80153c4:	08019e3e 	.word	0x08019e3e

080153c8 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>:
uint8_t CommunicationProtocol::GetInterfaceIndex(uint8_t ID_, bool* success) {
 80153c8:	b570      	push	{r4, r5, r6, lr}
 80153ca:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
	for (uint8_t ID : interfaces_id) {
 80153ce:	4620      	mov	r0, r4
 80153d0:	42a8      	cmp	r0, r5
 80153d2:	d102      	bne.n	80153da <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb+0x12>
 80153d4:	2300      	movs	r3, #0
	return 0;
 80153d6:	4618      	mov	r0, r3
 80153d8:	e007      	b.n	80153ea <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb+0x22>
 80153da:	4603      	mov	r3, r0
		if (ID == ID_) {
 80153dc:	f813 6b01 	ldrb.w	r6, [r3], #1
 80153e0:	428e      	cmp	r6, r1
 80153e2:	d104      	bne.n	80153ee <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb+0x26>
 80153e4:	1b00      	subs	r0, r0, r4
 80153e6:	2301      	movs	r3, #1
 80153e8:	b2c0      	uxtb	r0, r0
			*success = true;
 80153ea:	7013      	strb	r3, [r2, #0]
}
 80153ec:	bd70      	pop	{r4, r5, r6, pc}
 80153ee:	4618      	mov	r0, r3
 80153f0:	e7ee      	b.n	80153d0 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb+0x8>

080153f2 <_ZN21CommunicationProtocol15InterfaceExistsEh>:
bool CommunicationProtocol::InterfaceExists(uint8_t ID) {
 80153f2:	b507      	push	{r0, r1, r2, lr}
	GetInterfaceIndex(ID, &success);
 80153f4:	f10d 0207 	add.w	r2, sp, #7
 80153f8:	f7ff ffe6 	bl	80153c8 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
}
 80153fc:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8015400:	b003      	add	sp, #12
 8015402:	f85d fb04 	ldr.w	pc, [sp], #4

08015406 <_ZN21CommunicationProtocol14GetIDFromIndexEhPb>:
 *
 * @param input index: interface index in the vector
 * @param output success: whether successful
 * @return the associated interface ID
 */
uint8_t CommunicationProtocol::GetIDFromIndex(uint8_t index, bool* success) {
 8015406:	b510      	push	{r4, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015408:	e9d0 4304 	ldrd	r4, r3, [r0, #16]
 801540c:	1b1b      	subs	r3, r3, r4
	if (index < interfaces_id.size()) {
 801540e:	4299      	cmp	r1, r3
		*success = true;
 8015410:	bf35      	itete	cc
 8015412:	2301      	movcc	r3, #1
		return interfaces_id[index];
	} else {
		*success = false;
 8015414:	2000      	movcs	r0, #0
		*success = true;
 8015416:	7013      	strbcc	r3, [r2, #0]
		*success = false;
 8015418:	7010      	strbcs	r0, [r2, #0]
		return interfaces_id[index];
 801541a:	bf38      	it	cc
 801541c:	5c60      	ldrbcc	r0, [r4, r1]
		return 0;
	}
}
 801541e:	bd10      	pop	{r4, pc}

08015420 <_ZN21CommunicationProtocol9GetBufferEhPb>:
 *
 * @param input ID: interface ID
 * @param output success: whether successful
 * @return the associated buffer memory base pointer
 */
std::vector<uint8_t>* CommunicationProtocol::GetBuffer(uint8_t ID, bool* success) {
 8015420:	b538      	push	{r3, r4, r5, lr}
 8015422:	4604      	mov	r4, r0
	uint8_t index = GetInterfaceIndex(ID, success);
 8015424:	f7ff ffd0 	bl	80153c8 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
 8015428:	4603      	mov	r3, r0
	if (*success)
 801542a:	7810      	ldrb	r0, [r2, #0]
 801542c:	b128      	cbz	r0, 801543a <_ZN21CommunicationProtocol9GetBufferEhPb+0x1a>
	return *(this->_M_impl._M_start + __n);
 801542e:	b21b      	sxth	r3, r3
 8015430:	6a20      	ldr	r0, [r4, #32]
 8015432:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015436:	eb00 0083 	add.w	r0, r0, r3, lsl #2
		return &buffers[index];
	return NULL;
}
 801543a:	bd38      	pop	{r3, r4, r5, pc}

0801543c <_ZN21CommunicationProtocol14GetBufferIndexEhPb>:
 *
 * @param input ID: interface ID
 * @param output success: whether successful
 * @return the associated buffer index pointer
 */
uint16_t* CommunicationProtocol::GetBufferIndex(uint8_t ID, bool* success) {
 801543c:	b538      	push	{r3, r4, r5, lr}
 801543e:	4604      	mov	r4, r0
	uint8_t index = GetInterfaceIndex(ID, success);
 8015440:	f7ff ffc2 	bl	80153c8 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
 8015444:	4603      	mov	r3, r0
	if (*success)
 8015446:	7810      	ldrb	r0, [r2, #0]
 8015448:	b118      	cbz	r0, 8015452 <_ZN21CommunicationProtocol14GetBufferIndexEhPb+0x16>
 801544a:	b21b      	sxth	r3, r3
 801544c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801544e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
		return &buffers_index[index];
	return NULL;
}
 8015452:	bd38      	pop	{r3, r4, r5, pc}

08015454 <_ZN21CommunicationProtocol27SetProtocolPayloadMaxLengthEt>:
 * @brief Set the maximum payload length for the protocol
 *
 * @param input length: the maximum payload length
 */
void CommunicationProtocol::SetProtocolPayloadMaxLength(uint16_t length) {
	max_payload_length = length;
 8015454:	8381      	strh	r1, [r0, #28]
}
 8015456:	4770      	bx	lr

08015458 <_ZN21CommunicationProtocol27GetProtocolPayloadMaxLengthEv>:
 *
 * @return the maximum payload length of the protocol
 */
uint16_t CommunicationProtocol::GetProtocolPayloadMaxLength(void) {
	return max_payload_length;
}
 8015458:	8b80      	ldrh	r0, [r0, #28]
 801545a:	4770      	bx	lr

0801545c <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_>:
      vector<_Tp, _Alloc>::
 801545c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015460:	e9d0 8a00 	ldrd	r8, sl, [r0]
 8015464:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 8015466:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801546a:	ebaa 0208 	sub.w	r2, sl, r8
 801546e:	4607      	mov	r7, r0
 8015470:	4689      	mov	r9, r1
	if (max_size() - size() < __n)
 8015472:	ebb3 0f62 	cmp.w	r3, r2, asr #1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015476:	ea4f 0462 	mov.w	r4, r2, asr #1
	if (max_size() - size() < __n)
 801547a:	d102      	bne.n	8015482 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 801547c:	481e      	ldr	r0, [pc, #120]	@ (80154f8 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x9c>)
 801547e:	f004 fa81 	bl	8019984 <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 8015482:	45c2      	cmp	sl, r8
 8015484:	bf14      	ite	ne
 8015486:	4622      	movne	r2, r4
 8015488:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 801548a:	eba1 0508 	sub.w	r5, r1, r8
 801548e:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8015490:	d22e      	bcs.n	80154f0 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x94>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015492:	b37c      	cbz	r4, 80154f4 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x98>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8015494:	429c      	cmp	r4, r3
 8015496:	bf28      	it	cs
 8015498:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801549a:	0060      	lsls	r0, r4, #1
 801549c:	f004 f9bd 	bl	801981a <_Znwj>
 80154a0:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80154a2:	f8bb 3000 	ldrh.w	r3, [fp]
      if (__count > 0)
 80154a6:	2d00      	cmp	r5, #0
 80154a8:	5373      	strh	r3, [r6, r5]
 80154aa:	dd04      	ble.n	80154b6 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x5a>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80154ac:	462a      	mov	r2, r5
 80154ae:	4641      	mov	r1, r8
 80154b0:	4630      	mov	r0, r6
 80154b2:	f004 fb3f 	bl	8019b34 <memmove>
      ptrdiff_t __count = __last - __first;
 80154b6:	ebaa 0a09 	sub.w	sl, sl, r9
	      ++__new_finish;
 80154ba:	3502      	adds	r5, #2
      if (__count > 0)
 80154bc:	f1ba 0f00 	cmp.w	sl, #0
 80154c0:	4435      	add	r5, r6
 80154c2:	dd04      	ble.n	80154ce <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x72>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80154c4:	4652      	mov	r2, sl
 80154c6:	4649      	mov	r1, r9
 80154c8:	4628      	mov	r0, r5
 80154ca:	f004 fc2b 	bl	8019d24 <memcpy>
      return __result + __count;
 80154ce:	4455      	add	r5, sl
	if (__p)
 80154d0:	f1b8 0f00 	cmp.w	r8, #0
 80154d4:	d005      	beq.n	80154e2 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x86>
		    this->_M_impl._M_end_of_storage - __old_start);
 80154d6:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80154d8:	4640      	mov	r0, r8
 80154da:	eba1 0108 	sub.w	r1, r1, r8
 80154de:	f004 f977 	bl	80197d0 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 80154e2:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80154e6:	eb06 0644 	add.w	r6, r6, r4, lsl #1
 80154ea:	60be      	str	r6, [r7, #8]
    }
 80154ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80154f0:	461c      	mov	r4, r3
 80154f2:	e7d2      	b.n	801549a <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80154f4:	4626      	mov	r6, r4
 80154f6:	e7d4      	b.n	80154a2 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x46>
 80154f8:	08019e3e 	.word	0x08019e3e

080154fc <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 80154fc:	b538      	push	{r3, r4, r5, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80154fe:	1e0c      	subs	r4, r1, #0
      _M_create_storage(size_t __n)
 8015500:	4605      	mov	r5, r0
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015502:	d00a      	beq.n	801551a <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj+0x1e>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8015504:	da01      	bge.n	801550a <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj+0xe>
	    std::__throw_bad_alloc();
 8015506:	f004 fa37 	bl	8019978 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801550a:	4620      	mov	r0, r4
 801550c:	f004 f985 	bl	801981a <_Znwj>
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8015510:	e9c5 0000 	strd	r0, r0, [r5]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8015514:	4420      	add	r0, r4
 8015516:	60a8      	str	r0, [r5, #8]
      }
 8015518:	bd38      	pop	{r3, r4, r5, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801551a:	4620      	mov	r0, r4
 801551c:	e7f8      	b.n	8015510 <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj+0x14>
	...

08015520 <_ZNSt6vectorIhSaIhEEC1EjRKS0_>:
      vector(size_type __n, const allocator_type& __a = allocator_type())
 8015520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8015522:	1e0d      	subs	r5, r1, #0
      vector(size_type __n, const allocator_type& __a = allocator_type())
 8015524:	4604      	mov	r4, r0
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8015526:	da02      	bge.n	801552e <_ZNSt6vectorIhSaIhEEC1EjRKS0_+0xe>
	  __throw_length_error(
 8015528:	480c      	ldr	r0, [pc, #48]	@ (801555c <_ZNSt6vectorIhSaIhEEC1EjRKS0_+0x3c>)
 801552a:	f004 fa2b 	bl	8019984 <_ZSt20__throw_length_errorPKc>
	: _M_start(), _M_finish(), _M_end_of_storage()
 801552e:	2700      	movs	r7, #0
 8015530:	e9c0 7700 	strd	r7, r7, [r0]
 8015534:	6087      	str	r7, [r0, #8]
      { _M_create_storage(__n); }
 8015536:	f7ff ffe1 	bl	80154fc <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj>
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 801553a:	6826      	ldr	r6, [r4, #0]
	  if (__n > 0)
 801553c:	b14d      	cbz	r5, 8015552 <_ZNSt6vectorIhSaIhEEC1EjRKS0_+0x32>
 801553e:	4630      	mov	r0, r6
      if (__n <= 0)
 8015540:	2d01      	cmp	r5, #1
 8015542:	f800 7b01 	strb.w	r7, [r0], #1
 8015546:	d007      	beq.n	8015558 <_ZNSt6vectorIhSaIhEEC1EjRKS0_+0x38>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 8015548:	1e6a      	subs	r2, r5, #1
 801554a:	4639      	mov	r1, r7
      std::__fill_a(__first, __first + __n, __value);
 801554c:	442e      	add	r6, r5
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 801554e:	f004 fb0b 	bl	8019b68 <memset>
      { _M_default_initialize(__n); }
 8015552:	4620      	mov	r0, r4
	this->_M_impl._M_finish =
 8015554:	6066      	str	r6, [r4, #4]
      { _M_default_initialize(__n); }
 8015556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	      ++__first;
 8015558:	4606      	mov	r6, r0
 801555a:	e7fa      	b.n	8015552 <_ZNSt6vectorIhSaIhEEC1EjRKS0_+0x32>
 801555c:	08019e58 	.word	0x08019e58

08015560 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8015560:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015564:	e9d0 7900 	ldrd	r7, r9, [r0]
 8015568:	4b35      	ldr	r3, [pc, #212]	@ (8015640 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xe0>)
 801556a:	4606      	mov	r6, r0
 801556c:	eba9 0507 	sub.w	r5, r9, r7
 8015570:	4688      	mov	r8, r1
 8015572:	4614      	mov	r4, r2
 8015574:	10ad      	asrs	r5, r5, #2
 8015576:	435d      	muls	r5, r3
	if (max_size() - size() < __n)
 8015578:	4b32      	ldr	r3, [pc, #200]	@ (8015644 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xe4>)
 801557a:	429d      	cmp	r5, r3
 801557c:	d102      	bne.n	8015584 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
 801557e:	4832      	ldr	r0, [pc, #200]	@ (8015648 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xe8>)
 8015580:	f004 fa00 	bl	8019984 <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 8015584:	45b9      	cmp	r9, r7
 8015586:	bf14      	ite	ne
 8015588:	462a      	movne	r2, r5
 801558a:	2201      	moveq	r2, #1
 801558c:	eba1 0b07 	sub.w	fp, r1, r7
 8015590:	18ad      	adds	r5, r5, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8015592:	d22d      	bcs.n	80155f0 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x90>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015594:	b375      	cbz	r5, 80155f4 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x94>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8015596:	429d      	cmp	r5, r3
 8015598:	bf28      	it	cs
 801559a:	461d      	movcs	r5, r3
 801559c:	200c      	movs	r0, #12
 801559e:	4368      	muls	r0, r5
 80155a0:	f004 f93b 	bl	801981a <_Znwj>
 80155a4:	4682      	mov	sl, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80155a6:	4621      	mov	r1, r4
 80155a8:	eb0a 000b 	add.w	r0, sl, fp
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80155ac:	463c      	mov	r4, r7
      _ForwardIterator __cur = __result;
 80155ae:	46d3      	mov	fp, sl
 80155b0:	f7eb fa24 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
      for (; __first != __last; ++__first, (void)++__cur)
 80155b4:	45a0      	cmp	r8, r4
 80155b6:	f04f 0300 	mov.w	r3, #0
 80155ba:	f10b 0b0c 	add.w	fp, fp, #12
 80155be:	d11b      	bne.n	80155f8 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x98>
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 80155c0:	f04f 0800 	mov.w	r8, #0
 80155c4:	454c      	cmp	r4, r9
 80155c6:	465b      	mov	r3, fp
 80155c8:	f10b 0b0c 	add.w	fp, fp, #12
 80155cc:	d125      	bne.n	801561a <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xba>
	if (__p)
 80155ce:	b137      	cbz	r7, 80155de <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x7e>
		    this->_M_impl._M_end_of_storage - __old_start);
 80155d0:	68b1      	ldr	r1, [r6, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80155d2:	4638      	mov	r0, r7
 80155d4:	9301      	str	r3, [sp, #4]
 80155d6:	1bc9      	subs	r1, r1, r7
 80155d8:	f004 f8fa 	bl	80197d0 <_ZdlPvj>
 80155dc:	9b01      	ldr	r3, [sp, #4]
      this->_M_impl._M_finish = __new_finish;
 80155de:	e9c6 a300 	strd	sl, r3, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80155e2:	230c      	movs	r3, #12
 80155e4:	fb03 a305 	mla	r3, r3, r5, sl
 80155e8:	60b3      	str	r3, [r6, #8]
    }
 80155ea:	b003      	add	sp, #12
 80155ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155f0:	461d      	mov	r5, r3
 80155f2:	e7d3      	b.n	801559c <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80155f4:	46aa      	mov	sl, r5
 80155f6:	e7d6      	b.n	80155a6 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 80155f8:	6822      	ldr	r2, [r4, #0]
      }
 80155fa:	4620      	mov	r0, r4
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 80155fc:	6023      	str	r3, [r4, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 80155fe:	f84b 2c0c 	str.w	r2, [fp, #-12]
 8015602:	6862      	ldr	r2, [r4, #4]
 8015604:	f84b 2c08 	str.w	r2, [fp, #-8]
	  _M_end_of_storage(__x._M_end_of_storage)
 8015608:	68a2      	ldr	r2, [r4, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 801560a:	e9c4 3301 	strd	r3, r3, [r4, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 801560e:	f84b 2c04 	str.w	r2, [fp, #-4]
 8015612:	340c      	adds	r4, #12
      }
 8015614:	f7eb f942 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8015618:	e7cc      	b.n	80155b4 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x54>
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 801561a:	6823      	ldr	r3, [r4, #0]
      }
 801561c:	4620      	mov	r0, r4
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 801561e:	f8c4 8000 	str.w	r8, [r4]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8015622:	f84b 3c0c 	str.w	r3, [fp, #-12]
 8015626:	6863      	ldr	r3, [r4, #4]
 8015628:	f84b 3c08 	str.w	r3, [fp, #-8]
	  _M_end_of_storage(__x._M_end_of_storage)
 801562c:	68a3      	ldr	r3, [r4, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 801562e:	e9c4 8801 	strd	r8, r8, [r4, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 8015632:	f84b 3c04 	str.w	r3, [fp, #-4]
 8015636:	340c      	adds	r4, #12
      }
 8015638:	f7eb f930 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801563c:	e7c2      	b.n	80155c4 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x64>
 801563e:	bf00      	nop
 8015640:	aaaaaaab 	.word	0xaaaaaaab
 8015644:	0aaaaaaa 	.word	0x0aaaaaaa
 8015648:	08019e3e 	.word	0x08019e3e

0801564c <_ZNSt6vectorIS_IhSaIhEESaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 801564c:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801564e:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
      push_back(const value_type& __x)
 8015652:	4604      	mov	r4, r0
 8015654:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8015656:	42ab      	cmp	r3, r5
 8015658:	d006      	beq.n	8015668 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE9push_backERKS1_+0x1c>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801565a:	4618      	mov	r0, r3
 801565c:	f7eb f9ce 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
	    ++this->_M_impl._M_finish;
 8015660:	6863      	ldr	r3, [r4, #4]
 8015662:	330c      	adds	r3, #12
 8015664:	6063      	str	r3, [r4, #4]
      }
 8015666:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
 8015668:	4619      	mov	r1, r3
 801566a:	f7ff ff79 	bl	8015560 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 801566e:	e7fa      	b.n	8015666 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE9push_backERKS1_+0x1a>

08015670 <_ZN21CommunicationProtocol18AddInterfaceBufferEv>:
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8015670:	e9d0 120c 	ldrd	r1, r2, [r0, #48]	@ 0x30
void CommunicationProtocol::AddInterfaceBuffer() {
 8015674:	b5f0      	push	{r4, r5, r6, r7, lr}
	buffers_index.push_back(0);
 8015676:	2300      	movs	r3, #0
void CommunicationProtocol::AddInterfaceBuffer() {
 8015678:	b089      	sub	sp, #36	@ 0x24
 801567a:	4291      	cmp	r1, r2
 801567c:	4604      	mov	r4, r0
	buffers_index.push_back(0);
 801567e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015682:	d036      	beq.n	80156f2 <_ZN21CommunicationProtocol18AddInterfaceBufferEv+0x82>
 8015684:	f821 3b02 	strh.w	r3, [r1], #2
	    ++this->_M_impl._M_finish;
 8015688:	6301      	str	r1, [r0, #48]	@ 0x30
	std::vector<uint8_t> buffer(BUFFER_SIZE);
 801568a:	aa05      	add	r2, sp, #20
 801568c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8015690:	a802      	add	r0, sp, #8
 8015692:	f7ff ff45 	bl	8015520 <_ZNSt6vectorIhSaIhEEC1EjRKS0_>
	buffers.push_back(buffer);
 8015696:	f104 0020 	add.w	r0, r4, #32
 801569a:	a902      	add	r1, sp, #8
 801569c:	f7ff ffd6 	bl	801564c <_ZNSt6vectorIS_IhSaIhEESaIS1_EE9push_backERKS1_>
	std::vector<uint8_t> data_to_send(BUFFER_SIZE);
 80156a0:	aa01      	add	r2, sp, #4
 80156a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80156a6:	a805      	add	r0, sp, #20
 80156a8:	f7ff ff3a 	bl	8015520 <_ZNSt6vectorIhSaIhEEC1EjRKS0_>
	buffers_to_transfer.push_back(data_to_send);
 80156ac:	1d20      	adds	r0, r4, #4
 80156ae:	a905      	add	r1, sp, #20
 80156b0:	f7ff ffcc 	bl	801564c <_ZNSt6vectorIS_IhSaIhEESaIS1_EE9push_backERKS1_>
      : _M_current(__i) { }
 80156b4:	68a4      	ldr	r4, [r4, #8]
			 - this->_M_impl._M_start); }
 80156b6:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 80156ba:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80156be:	1a9b      	subs	r3, r3, r2
      if (this->capacity() < __n)
 80156c0:	2bff      	cmp	r3, #255	@ 0xff
 80156c2:	d826      	bhi.n	8015712 <_ZN21CommunicationProtocol18AddInterfaceBufferEv+0xa2>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80156c4:	f854 6c08 	ldr.w	r6, [r4, #-8]
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80156c8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80156cc:	1ab6      	subs	r6, r6, r2
 80156ce:	f004 f8a4 	bl	801981a <_Znwj>
 80156d2:	4605      	mov	r5, r0
      ptrdiff_t __count = __last - __first;
 80156d4:	e954 7203 	ldrd	r7, r2, [r4, #-12]
 80156d8:	1bd2      	subs	r2, r2, r7
      if (__count > 0)
 80156da:	2a00      	cmp	r2, #0
 80156dc:	dd0e      	ble.n	80156fc <_ZN21CommunicationProtocol18AddInterfaceBufferEv+0x8c>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80156de:	4639      	mov	r1, r7
 80156e0:	f004 fa28 	bl	8019b34 <memmove>
			- this->_M_impl._M_start);
 80156e4:	f854 1c04 	ldr.w	r1, [r4, #-4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80156e8:	4638      	mov	r0, r7
 80156ea:	1bc9      	subs	r1, r1, r7
 80156ec:	f004 f870 	bl	80197d0 <_ZdlPvj>
 80156f0:	e006      	b.n	8015700 <_ZN21CommunicationProtocol18AddInterfaceBufferEv+0x90>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80156f2:	aa05      	add	r2, sp, #20
 80156f4:	302c      	adds	r0, #44	@ 0x2c
 80156f6:	f7ff feb1 	bl	801545c <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_>
 80156fa:	e7c6      	b.n	801568a <_ZN21CommunicationProtocol18AddInterfaceBufferEv+0x1a>
	if (__p)
 80156fc:	2f00      	cmp	r7, #0
 80156fe:	d1f1      	bne.n	80156e4 <_ZN21CommunicationProtocol18AddInterfaceBufferEv+0x74>
	  this->_M_impl._M_finish = __tmp + __old_size;
 8015700:	442e      	add	r6, r5
	  this->_M_impl._M_start = __tmp;
 8015702:	f844 5c0c 	str.w	r5, [r4, #-12]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8015706:	f505 7580 	add.w	r5, r5, #256	@ 0x100
	  this->_M_impl._M_finish = __tmp + __old_size;
 801570a:	f844 6c08 	str.w	r6, [r4, #-8]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801570e:	f844 5c04 	str.w	r5, [r4, #-4]
      }
 8015712:	a805      	add	r0, sp, #20
 8015714:	f7eb f8c2 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8015718:	a802      	add	r0, sp, #8
 801571a:	f7eb f8bf 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 801571e:	b009      	add	sp, #36	@ 0x24
 8015720:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015722 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015722:	2800      	cmp	r0, #0
      _M_allocate(size_t __n)
 8015724:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015726:	d006      	beq.n	8015736 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0x14>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8015728:	da01      	bge.n	801572e <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0xc>
	    std::__throw_bad_alloc();
 801572a:	f004 f925 	bl	8019978 <_ZSt17__throw_bad_allocv>
      }
 801572e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8015732:	f004 b872 	b.w	801981a <_Znwj>
 8015736:	bd08      	pop	{r3, pc}

08015738 <_ZN11CANProtocolC1Ev>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 8015738:	2200      	movs	r2, #0
#include <Protocols/Communication/FDCAN/CANProtocol.hpp>

/**
 * @brief Class constructor
 */
CANProtocol::CANProtocol() {
 801573a:	490b      	ldr	r1, [pc, #44]	@ (8015768 <_ZN11CANProtocolC1Ev+0x30>)
 801573c:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8015740:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8015744:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8015748:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801574c:	e9c0 220a 	strd	r2, r2, [r0, #40]	@ 0x28
 8015750:	e9c0 220c 	strd	r2, r2, [r0, #48]	@ 0x30
 8015754:	e9c0 220e 	strd	r2, r2, [r0, #56]	@ 0x38
 8015758:	6402      	str	r2, [r0, #64]	@ 0x40
 801575a:	6001      	str	r1, [r0, #0]
 801575c:	6502      	str	r2, [r0, #80]	@ 0x50
	marker = 0;
 801575e:	6442      	str	r2, [r0, #68]	@ 0x44
 8015760:	e9c0 2212 	strd	r2, r2, [r0, #72]	@ 0x48
}
 8015764:	4770      	bx	lr
 8015766:	bf00      	nop
 8015768:	0801a140 	.word	0x0801a140

0801576c <_ZN11CANProtocol17GetProtocolLengthEt>:
 *
 * @param input length: the CAN payload length
 * @return the minimum DLC value that fits the given length inside
 */
uint32_t CANProtocol::GetProtocolLength(uint16_t length) {
	if (length <= 0) return FDCAN_DLC_BYTES_0;
 801576c:	b301      	cbz	r1, 80157b0 <_ZN11CANProtocol17GetProtocolLengthEt+0x44>
	if (length <= 1) return FDCAN_DLC_BYTES_1;
 801576e:	2901      	cmp	r1, #1
 8015770:	d020      	beq.n	80157b4 <_ZN11CANProtocol17GetProtocolLengthEt+0x48>
	if (length <= 2) return FDCAN_DLC_BYTES_2;
 8015772:	2902      	cmp	r1, #2
 8015774:	d021      	beq.n	80157ba <_ZN11CANProtocol17GetProtocolLengthEt+0x4e>
	if (length <= 3) return FDCAN_DLC_BYTES_3;
 8015776:	2903      	cmp	r1, #3
 8015778:	d022      	beq.n	80157c0 <_ZN11CANProtocol17GetProtocolLengthEt+0x54>
	if (length <= 4) return FDCAN_DLC_BYTES_4;
 801577a:	2904      	cmp	r1, #4
 801577c:	d023      	beq.n	80157c6 <_ZN11CANProtocol17GetProtocolLengthEt+0x5a>
	if (length <= 5) return FDCAN_DLC_BYTES_5;
 801577e:	2905      	cmp	r1, #5
 8015780:	d024      	beq.n	80157cc <_ZN11CANProtocol17GetProtocolLengthEt+0x60>
	if (length <= 6) return FDCAN_DLC_BYTES_6;
 8015782:	2906      	cmp	r1, #6
 8015784:	d025      	beq.n	80157d2 <_ZN11CANProtocol17GetProtocolLengthEt+0x66>
	if (length <= 7) return FDCAN_DLC_BYTES_7;
 8015786:	2907      	cmp	r1, #7
 8015788:	d026      	beq.n	80157d8 <_ZN11CANProtocol17GetProtocolLengthEt+0x6c>
	if (length <= 8) return FDCAN_DLC_BYTES_8;
 801578a:	2908      	cmp	r1, #8
 801578c:	d027      	beq.n	80157de <_ZN11CANProtocol17GetProtocolLengthEt+0x72>
	if (length <= 12) return FDCAN_DLC_BYTES_12;
 801578e:	290c      	cmp	r1, #12
 8015790:	d928      	bls.n	80157e4 <_ZN11CANProtocol17GetProtocolLengthEt+0x78>
	if (length <= 16) return FDCAN_DLC_BYTES_16;
 8015792:	2910      	cmp	r1, #16
 8015794:	d929      	bls.n	80157ea <_ZN11CANProtocol17GetProtocolLengthEt+0x7e>
	if (length <= 20) return FDCAN_DLC_BYTES_20;
 8015796:	2914      	cmp	r1, #20
 8015798:	d92a      	bls.n	80157f0 <_ZN11CANProtocol17GetProtocolLengthEt+0x84>
	if (length <= 24) return FDCAN_DLC_BYTES_24;
 801579a:	2918      	cmp	r1, #24
 801579c:	d92b      	bls.n	80157f6 <_ZN11CANProtocol17GetProtocolLengthEt+0x8a>
	if (length <= 32) return FDCAN_DLC_BYTES_32;
 801579e:	2920      	cmp	r1, #32
 80157a0:	d92c      	bls.n	80157fc <_ZN11CANProtocol17GetProtocolLengthEt+0x90>
	if (length <= 48) return FDCAN_DLC_BYTES_48;
	if (length <= 64) return FDCAN_DLC_BYTES_64;
 80157a2:	2931      	cmp	r1, #49	@ 0x31
 80157a4:	bf34      	ite	cc
 80157a6:	f44f 2060 	movcc.w	r0, #917504	@ 0xe0000
 80157aa:	f44f 2070 	movcs.w	r0, #983040	@ 0xf0000
 80157ae:	4770      	bx	lr
	if (length <= 0) return FDCAN_DLC_BYTES_0;
 80157b0:	4608      	mov	r0, r1
 80157b2:	4770      	bx	lr
	if (length <= 1) return FDCAN_DLC_BYTES_1;
 80157b4:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80157b8:	4770      	bx	lr
	if (length <= 2) return FDCAN_DLC_BYTES_2;
 80157ba:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80157be:	4770      	bx	lr
	if (length <= 3) return FDCAN_DLC_BYTES_3;
 80157c0:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80157c4:	4770      	bx	lr
	if (length <= 4) return FDCAN_DLC_BYTES_4;
 80157c6:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80157ca:	4770      	bx	lr
	if (length <= 5) return FDCAN_DLC_BYTES_5;
 80157cc:	f44f 20a0 	mov.w	r0, #327680	@ 0x50000
 80157d0:	4770      	bx	lr
	if (length <= 6) return FDCAN_DLC_BYTES_6;
 80157d2:	f44f 20c0 	mov.w	r0, #393216	@ 0x60000
 80157d6:	4770      	bx	lr
	if (length <= 7) return FDCAN_DLC_BYTES_7;
 80157d8:	f44f 20e0 	mov.w	r0, #458752	@ 0x70000
 80157dc:	4770      	bx	lr
	if (length <= 8) return FDCAN_DLC_BYTES_8;
 80157de:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80157e2:	4770      	bx	lr
	if (length <= 12) return FDCAN_DLC_BYTES_12;
 80157e4:	f44f 2010 	mov.w	r0, #589824	@ 0x90000
 80157e8:	4770      	bx	lr
	if (length <= 16) return FDCAN_DLC_BYTES_16;
 80157ea:	f44f 2020 	mov.w	r0, #655360	@ 0xa0000
 80157ee:	4770      	bx	lr
	if (length <= 20) return FDCAN_DLC_BYTES_20;
 80157f0:	f44f 2030 	mov.w	r0, #720896	@ 0xb0000
 80157f4:	4770      	bx	lr
	if (length <= 24) return FDCAN_DLC_BYTES_24;
 80157f6:	f44f 2040 	mov.w	r0, #786432	@ 0xc0000
 80157fa:	4770      	bx	lr
	if (length <= 32) return FDCAN_DLC_BYTES_32;
 80157fc:	f44f 2050 	mov.w	r0, #851968	@ 0xd0000
	return FDCAN_DLC_BYTES_64;
}
 8015800:	4770      	bx	lr

08015802 <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE.isra.0>:
      // Constant-time move assignment when source object's memory can be
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      _GLIBCXX20_CONSTEXPR
      void
      _M_move_assign(vector&& __x, true_type) noexcept
 8015802:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 8015804:	680d      	ldr	r5, [r1, #0]
      _M_move_assign(vector&& __x, true_type) noexcept
 8015806:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 8015808:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 801580a:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 801580e:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 8015810:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8015812:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 8015814:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 8015816:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8015818:	688d      	ldr	r5, [r1, #8]
 801581a:	6085      	str	r5, [r0, #8]
      }
 801581c:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 801581e:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 8015820:	e9c1 3300 	strd	r3, r3, [r1]
 8015824:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 8015828:	f7eb f838 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      {
	vector __tmp(get_allocator());
	this->_M_impl._M_swap_data(__x._M_impl);
	__tmp._M_impl._M_swap_data(__x._M_impl);
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
      }
 801582c:	b005      	add	sp, #20
 801582e:	bd30      	pop	{r4, r5, pc}

08015830 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12GetInterfaceEhPb>:
H* TemplateCommunicationProtocol<H>::GetInterface(uint8_t ID, bool* success) {
 8015830:	b538      	push	{r3, r4, r5, lr}
 8015832:	4615      	mov	r5, r2
 8015834:	4604      	mov	r4, r0
	uint8_t index = GetInterfaceIndex(ID, success);
 8015836:	f7ff fdc7 	bl	80153c8 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
 801583a:	4603      	mov	r3, r0
	if (*success) {
 801583c:	7828      	ldrb	r0, [r5, #0]
 801583e:	b118      	cbz	r0, 8015848 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12GetInterfaceEhPb+0x18>
	return *(this->_M_impl._M_start + __n);
 8015840:	b21b      	sxth	r3, r3
		return interfaces[index];
 8015842:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8015844:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
}
 8015848:	bd38      	pop	{r3, r4, r5, pc}

0801584a <_ZN11CANProtocol16ConfigureFiltersEh>:
HAL_StatusTypeDef CANProtocol::ConfigureFilters(uint8_t ID) {
 801584a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	FDCAN_HandleTypeDef* handle = GetInterface(ID, &success);
 801584c:	f10d 020f 	add.w	r2, sp, #15
 8015850:	f7ff ffee 	bl	8015830 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12GetInterfaceEhPb>
	if (not success) return HAL_ERROR;
 8015854:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8015858:	2301      	movs	r3, #1
 801585a:	b13a      	cbz	r2, 801586c <_ZN11CANProtocol16ConfigureFiltersEh+0x22>
	return HAL_FDCAN_ConfigGlobalFilter(handle, FDCAN_ACCEPT_IN_RX_FIFO0, FDCAN_ACCEPT_IN_RX_FIFO0, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);
 801585c:	2200      	movs	r2, #0
 801585e:	9300      	str	r3, [sp, #0]
 8015860:	4611      	mov	r1, r2
 8015862:	f7f0 f887 	bl	8005974 <HAL_FDCAN_ConfigGlobalFilter>
}
 8015866:	b005      	add	sp, #20
 8015868:	f85d fb04 	ldr.w	pc, [sp], #4
	if (not success) return HAL_ERROR;
 801586c:	4618      	mov	r0, r3
 801586e:	e7fa      	b.n	8015866 <_ZN11CANProtocol16ConfigureFiltersEh+0x1c>

08015870 <_ZN11CANProtocol17ActivateReceptionEh>:
HAL_StatusTypeDef CANProtocol::ActivateReception(uint8_t ID) {
 8015870:	b507      	push	{r0, r1, r2, lr}
	FDCAN_HandleTypeDef* handle = GetInterface(ID, &success);
 8015872:	f10d 0207 	add.w	r2, sp, #7
 8015876:	f7ff ffdb 	bl	8015830 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12GetInterfaceEhPb>
	if (not success) return HAL_ERROR;
 801587a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801587e:	b133      	cbz	r3, 801588e <_ZN11CANProtocol17ActivateReceptionEh+0x1e>
	return HAL_FDCAN_ActivateNotification(handle, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8015880:	2200      	movs	r2, #0
 8015882:	2101      	movs	r1, #1
 8015884:	f7f0 f9d4 	bl	8005c30 <HAL_FDCAN_ActivateNotification>
}
 8015888:	b003      	add	sp, #12
 801588a:	f85d fb04 	ldr.w	pc, [sp], #4
	if (not success) return HAL_ERROR;
 801588e:	2001      	movs	r0, #1
 8015890:	e7fa      	b.n	8015888 <_ZN11CANProtocol17ActivateReceptionEh+0x18>

08015892 <_ZN11CANProtocol5StartEh>:
HAL_StatusTypeDef CANProtocol::Start(uint8_t ID) {
 8015892:	b507      	push	{r0, r1, r2, lr}
	FDCAN_HandleTypeDef* handle = GetInterface(ID, &success);
 8015894:	f10d 0207 	add.w	r2, sp, #7
 8015898:	f7ff ffca 	bl	8015830 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12GetInterfaceEhPb>
	if (not success) return HAL_ERROR;
 801589c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80158a0:	b123      	cbz	r3, 80158ac <_ZN11CANProtocol5StartEh+0x1a>
	return HAL_FDCAN_Start(handle);
 80158a2:	f7f0 f882 	bl	80059aa <HAL_FDCAN_Start>
}
 80158a6:	b003      	add	sp, #12
 80158a8:	f85d fb04 	ldr.w	pc, [sp], #4
	if (not success) return HAL_ERROR;
 80158ac:	2001      	movs	r0, #1
 80158ae:	e7fa      	b.n	80158a6 <_ZN11CANProtocol5StartEh+0x14>

080158b0 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 80158b0:	460a      	mov	r2, r1
 80158b2:	b510      	push	{r4, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80158b4:	e9d0 1401 	ldrd	r1, r4, [r0, #4]
 80158b8:	42a1      	cmp	r1, r4
 80158ba:	d004      	beq.n	80158c6 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE9push_backERKS1_+0x16>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80158bc:	6812      	ldr	r2, [r2, #0]
 80158be:	f841 2b04 	str.w	r2, [r1], #4
	    ++this->_M_impl._M_finish;
 80158c2:	6041      	str	r1, [r0, #4]
      }
 80158c4:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), __x);
 80158c6:	f7ec fa4b 	bl	8001d60 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 80158ca:	e7fb      	b.n	80158c4 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE9push_backERKS1_+0x14>

080158cc <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80158cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80158d0:	e9d0 9a00 	ldrd	r9, sl, [r0]
 80158d4:	4b2a      	ldr	r3, [pc, #168]	@ (8015980 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb4>)
 80158d6:	4680      	mov	r8, r0
 80158d8:	ebaa 0409 	sub.w	r4, sl, r9
 80158dc:	468b      	mov	fp, r1
 80158de:	4615      	mov	r5, r2
 80158e0:	10a4      	asrs	r4, r4, #2
 80158e2:	435c      	muls	r4, r3
	if (max_size() - size() < __n)
 80158e4:	4b27      	ldr	r3, [pc, #156]	@ (8015984 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb8>)
 80158e6:	429c      	cmp	r4, r3
 80158e8:	d102      	bne.n	80158f0 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
 80158ea:	4827      	ldr	r0, [pc, #156]	@ (8015988 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xbc>)
 80158ec:	f004 f84a 	bl	8019984 <_ZSt20__throw_length_errorPKc>
 80158f0:	45ca      	cmp	sl, r9
 80158f2:	bf14      	ite	ne
 80158f4:	4622      	movne	r2, r4
 80158f6:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 80158f8:	eba1 0609 	sub.w	r6, r1, r9
 80158fc:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80158fe:	d23a      	bcs.n	8015976 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xaa>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015900:	b3dc      	cbz	r4, 801597a <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xae>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8015902:	429c      	cmp	r4, r3
 8015904:	bf28      	it	cs
 8015906:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8015908:	2024      	movs	r0, #36	@ 0x24
 801590a:	4360      	muls	r0, r4
 801590c:	f003 ff85 	bl	801981a <_Znwj>
 8015910:	4607      	mov	r7, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8015912:	eb07 0c06 	add.w	ip, r7, r6
      if (__count > 0)
 8015916:	2e00      	cmp	r6, #0
 8015918:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801591a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801591e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015920:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015924:	682b      	ldr	r3, [r5, #0]
 8015926:	f8cc 3000 	str.w	r3, [ip]
 801592a:	dd04      	ble.n	8015936 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x6a>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801592c:	4632      	mov	r2, r6
 801592e:	4649      	mov	r1, r9
 8015930:	4638      	mov	r0, r7
 8015932:	f004 f8ff 	bl	8019b34 <memmove>
      ptrdiff_t __count = __last - __first;
 8015936:	ebaa 0a0b 	sub.w	sl, sl, fp
	      ++__new_finish;
 801593a:	3624      	adds	r6, #36	@ 0x24
      if (__count > 0)
 801593c:	f1ba 0f00 	cmp.w	sl, #0
 8015940:	443e      	add	r6, r7
 8015942:	dd04      	ble.n	801594e <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x82>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8015944:	4652      	mov	r2, sl
 8015946:	4659      	mov	r1, fp
 8015948:	4630      	mov	r0, r6
 801594a:	f004 f9eb 	bl	8019d24 <memcpy>
      return __result + __count;
 801594e:	4456      	add	r6, sl
	if (__p)
 8015950:	f1b9 0f00 	cmp.w	r9, #0
 8015954:	d006      	beq.n	8015964 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x98>
		    this->_M_impl._M_end_of_storage - __old_start);
 8015956:	f8d8 1008 	ldr.w	r1, [r8, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801595a:	4648      	mov	r0, r9
 801595c:	eba1 0109 	sub.w	r1, r1, r9
 8015960:	f003 ff36 	bl	80197d0 <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8015964:	2324      	movs	r3, #36	@ 0x24
      this->_M_impl._M_finish = __new_finish;
 8015966:	e9c8 7600 	strd	r7, r6, [r8]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801596a:	fb03 7704 	mla	r7, r3, r4, r7
 801596e:	f8c8 7008 	str.w	r7, [r8, #8]
    }
 8015972:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015976:	461c      	mov	r4, r3
 8015978:	e7c6      	b.n	8015908 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801597a:	4627      	mov	r7, r4
 801597c:	e7c9      	b.n	8015912 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 801597e:	bf00      	nop
 8015980:	38e38e39 	.word	0x38e38e39
 8015984:	038e38e3 	.word	0x038e38e3
 8015988:	08019e3e 	.word	0x08019e3e

0801598c <_ZN11CANProtocol12AddInterfaceEhP19FDCAN_HandleTypeDef>:
void CANProtocol::AddInterface(uint8_t ID, FDCAN_HandleTypeDef* interface) {
 801598c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801598e:	4606      	mov	r6, r0
 8015990:	b08d      	sub	sp, #52	@ 0x34
 8015992:	9201      	str	r2, [sp, #4]
	AddInterfaceID(ID);
 8015994:	f7ff fcd2 	bl	801533c <_ZN21CommunicationProtocol14AddInterfaceIDEh>
	AddInterfaceBuffer();
 8015998:	4630      	mov	r0, r6
 801599a:	f7ff fe69 	bl	8015670 <_ZN21CommunicationProtocol18AddInterfaceBufferEv>
	interfaces.push_back(interface);
 801599e:	a901      	add	r1, sp, #4
 80159a0:	f106 0038 	add.w	r0, r6, #56	@ 0x38
 80159a4:	f7ff ff84 	bl	80158b0 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE9push_backERKS1_>
	FDCANTxHeader.BitRateSwitch = FDCAN_BRS_ON; 				// FDCAN_BRS_ON FDCAN_BRS_OFF
 80159a8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80159ac:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
	FDCANTxHeader.IdType = FDCAN_STANDARD_ID; 				// FDCAN_STANDARD_ID or FDCAN_CLASSIC_CAN
 80159b0:	2300      	movs	r3, #0
	FDCANTxHeader.BitRateSwitch = FDCAN_BRS_ON; 				// FDCAN_BRS_ON FDCAN_BRS_OFF
 80159b2:	e9cd 1207 	strd	r1, r2, [sp, #28]
	FDCANTxHeader.FDFormat = FDCAN_FD_CAN; 					// FDCAN_FD_CAN or FDCAN_CLASSIC_CAN
 80159b6:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
	FDCANTxHeader.TxFrameType = FDCAN_DATA_FRAME; 			// FDCAN_DATA_FRAME or FDCAN_REMOTE_FRAME
 80159ba:	e9cd 3304 	strd	r3, r3, [sp, #16]
	FDCANTxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS; 	// FDCAN_NO_TX_EVENTS or FDCAN_STORE_TX_EVENTS
 80159be:	e9cd 2309 	strd	r2, r3, [sp, #36]	@ 0x24
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80159c2:	e9d6 7313 	ldrd	r7, r3, [r6, #76]	@ 0x4c
 80159c6:	429f      	cmp	r7, r3
 80159c8:	d00b      	beq.n	80159e2 <_ZN11CANProtocol12AddInterfaceEhP19FDCAN_HandleTypeDef+0x56>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80159ca:	ad03      	add	r5, sp, #12
 80159cc:	463c      	mov	r4, r7
	    ++this->_M_impl._M_finish;
 80159ce:	3724      	adds	r7, #36	@ 0x24
 80159d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80159d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80159d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80159d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80159d8:	682b      	ldr	r3, [r5, #0]
 80159da:	6023      	str	r3, [r4, #0]
 80159dc:	64f7      	str	r7, [r6, #76]	@ 0x4c
}
 80159de:	b00d      	add	sp, #52	@ 0x34
 80159e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  _M_realloc_insert(end(), __x);
 80159e2:	aa03      	add	r2, sp, #12
 80159e4:	4639      	mov	r1, r7
 80159e6:	f106 0048 	add.w	r0, r6, #72	@ 0x48
 80159ea:	f7ff ff6f 	bl	80158cc <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 80159ee:	e7f6      	b.n	80159de <_ZN11CANProtocol12AddInterfaceEhP19FDCAN_HandleTypeDef+0x52>

080159f0 <_ZN11CANProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb>:
 * @param input data: message to decode
 * @param output index: processed length in the data
 * @param output success: true if message decoded
 * @return the decoded and parsed message based on the custom protocol
 */
MessageHeader CANProtocol::DecodeProtocol(uint8_t ID, std::vector<uint8_t> message, uint16_t* index, bool* success) {
 80159f0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80159f4:	461d      	mov	r5, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 80159f6:	2300      	movs	r3, #0
 80159f8:	4604      	mov	r4, r0
 80159fa:	60c3      	str	r3, [r0, #12]
 80159fc:	e9c0 3301 	strd	r3, r3, [r0, #4]
	return *(this->_M_impl._M_start + __n);
 8015a00:	682b      	ldr	r3, [r5, #0]
	MessageHeader decoded_message;

	decoded_message.target_address = message[0];
 8015a02:	781a      	ldrb	r2, [r3, #0]
      { return __normal_iterator(_M_current + __n); }
 8015a04:	1cdf      	adds	r7, r3, #3
 8015a06:	7402      	strb	r2, [r0, #16]
	decoded_message.source_address = message[1];
 8015a08:	785a      	ldrb	r2, [r3, #1]
 8015a0a:	7442      	strb	r2, [r0, #17]
 8015a0c:	789e      	ldrb	r6, [r3, #2]
 8015a0e:	eb07 0806 	add.w	r8, r7, r6
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8015a12:	4630      	mov	r0, r6
 8015a14:	f7ff fe85 	bl	8015722 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8015a18:	4406      	add	r6, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8015a1a:	4602      	mov	r2, r0
			      _Category>::__copy_m(__first, __last, __result);
 8015a1c:	4641      	mov	r1, r8
 8015a1e:	9001      	str	r0, [sp, #4]
 8015a20:	4638      	mov	r0, r7
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8015a22:	9603      	str	r6, [sp, #12]
 8015a24:	f7ea ffde 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8015a28:	a901      	add	r1, sp, #4
	  this->_M_impl._M_finish =
 8015a2a:	9002      	str	r0, [sp, #8]
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8015a2c:	1d20      	adds	r0, r4, #4
 8015a2e:	f7ff fee8 	bl	8015802 <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE.isra.0>
      }
 8015a32:	a801      	add	r0, sp, #4
 8015a34:	f7ea ff32 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	uint16_t length = message[2];

	// Retrieve payload based on length byte
	decoded_message.payload = std::vector<uint8_t>(message.begin() + 3, message.begin() + 3 + length);

	*success = true;
 8015a38:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015a3a:	2201      	movs	r2, #1
	*index = message.size();

	return decoded_message;
}
 8015a3c:	4620      	mov	r0, r4
	*success = true;
 8015a3e:	701a      	strb	r2, [r3, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015a40:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015a44:	1a9b      	subs	r3, r3, r2
	*index = message.size();
 8015a46:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015a48:	8013      	strh	r3, [r2, #0]
}
 8015a4a:	b004      	add	sp, #16
 8015a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015a50 <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef>:
std::vector<uint8_t> CANProtocol::CodeProtocol(MessageHeader message, FDCAN_TxHeaderTypeDef* TxHeader) {
 8015a50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a54:	4698      	mov	r8, r3
	TxHeader->Identifier = message.target_address;
 8015a56:	7c13      	ldrb	r3, [r2, #16]
std::vector<uint8_t> CANProtocol::CodeProtocol(MessageHeader message, FDCAN_TxHeaderTypeDef* TxHeader) {
 8015a58:	4617      	mov	r7, r2
 8015a5a:	4689      	mov	r9, r1
	TxHeader->Identifier = message.target_address;
 8015a5c:	f8c8 3000 	str.w	r3, [r8]
std::vector<uint8_t> CANProtocol::CodeProtocol(MessageHeader message, FDCAN_TxHeaderTypeDef* TxHeader) {
 8015a60:	4604      	mov	r4, r0
	TxHeader->MessageMarker = marker;
 8015a62:	6c4b      	ldr	r3, [r1, #68]	@ 0x44
	if (marker >= 4294967295)
 8015a64:	1c5a      	adds	r2, r3, #1
 8015a66:	f04f 0200 	mov.w	r2, #0
	TxHeader->MessageMarker = marker;
 8015a6a:	f8c8 3020 	str.w	r3, [r8, #32]
		marker = 0;
 8015a6e:	bf0c      	ite	eq
 8015a70:	4613      	moveq	r3, r2
		marker++;
 8015a72:	3301      	addne	r3, #1
 8015a74:	644b      	str	r3, [r1, #68]	@ 0x44
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8015a76:	2101      	movs	r1, #1
	: _M_start(), _M_finish(), _M_end_of_storage()
 8015a78:	6082      	str	r2, [r0, #8]
 8015a7a:	e9c0 2200 	strd	r2, r2, [r0]
 8015a7e:	4a41      	ldr	r2, [pc, #260]	@ (8015b84 <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0x134>)
 8015a80:	f7ea ff2d 	bl	80008de <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8015a84:	4606      	mov	r6, r0
      pointer __new_start(this->_M_allocate(__len));
 8015a86:	f7ff fe4c 	bl	8015722 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
 8015a8a:	7c7b      	ldrb	r3, [r7, #17]
 8015a8c:	4601      	mov	r1, r0
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8015a8e:	4406      	add	r6, r0
      pointer __new_start(this->_M_allocate(__len));
 8015a90:	4605      	mov	r5, r0
 8015a92:	f801 3b01 	strb.w	r3, [r1], #1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8015a96:	42b1      	cmp	r1, r6
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8015a98:	60a6      	str	r6, [r4, #8]
      this->_M_impl._M_finish = __new_finish;
 8015a9a:	e9c4 0100 	strd	r0, r1, [r4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015a9e:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
 8015aa2:	eba3 0302 	sub.w	r3, r3, r2
	coded_message.push_back((uint8_t) message.payload.size());
 8015aa6:	fa5f fa83 	uxtb.w	sl, r3
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8015aaa:	d02d      	beq.n	8015b08 <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0xb8>
	    ++this->_M_impl._M_finish;
 8015aac:	3502      	adds	r5, #2
 8015aae:	f880 a001 	strb.w	sl, [r0, #1]
 8015ab2:	6065      	str	r5, [r4, #4]
      : _M_current(__i) { }
 8015ab4:	e9d7 a301 	ldrd	sl, r3, [r7, #4]
	if (__first != __last)
 8015ab8:	4553      	cmp	r3, sl
 8015aba:	d018      	beq.n	8015aee <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0x9e>
			  - this->_M_impl._M_finish) >= __n)
 8015abc:	68a2      	ldr	r2, [r4, #8]
    { return __lhs.base() - __rhs.base(); }
 8015abe:	eba3 050a 	sub.w	r5, r3, sl
      : _M_current(__i) { }
 8015ac2:	e9d4 7600 	ldrd	r7, r6, [r4]
 8015ac6:	1b92      	subs	r2, r2, r6
	    if (size_type(this->_M_impl._M_end_of_storage
 8015ac8:	4295      	cmp	r5, r2
 8015aca:	d835      	bhi.n	8015b38 <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0xe8>
 8015acc:	4619      	mov	r1, r3
 8015ace:	4632      	mov	r2, r6
 8015ad0:	4650      	mov	r0, sl
 8015ad2:	f7ea ff87 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		    this->_M_impl._M_finish += __n - __elems_after;
 8015ad6:	6862      	ldr	r2, [r4, #4]
 8015ad8:	4631      	mov	r1, r6
 8015ada:	4630      	mov	r0, r6
 8015adc:	442a      	add	r2, r5
 8015ade:	6062      	str	r2, [r4, #4]
 8015ae0:	f7eb ff0c 	bl	80018fc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8015ae4:	4632      	mov	r2, r6
 8015ae6:	4651      	mov	r1, sl
 8015ae8:	4650      	mov	r0, sl
 8015aea:	f7ea ff7b 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	TxHeader->DataLength = GetProtocolLength(coded_message.size());
 8015aee:	4648      	mov	r0, r9
 8015af0:	e9d4 3100 	ldrd	r3, r1, [r4]
 8015af4:	1ac9      	subs	r1, r1, r3
 8015af6:	b289      	uxth	r1, r1
 8015af8:	f7ff fe38 	bl	801576c <_ZN11CANProtocol17GetProtocolLengthEt>
 8015afc:	f8c8 000c 	str.w	r0, [r8, #12]
}
 8015b00:	4620      	mov	r0, r4
 8015b02:	b003      	add	sp, #12
 8015b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8015b08:	4a1e      	ldr	r2, [pc, #120]	@ (8015b84 <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0x134>)
 8015b0a:	2101      	movs	r1, #1
 8015b0c:	4620      	mov	r0, r4
 8015b0e:	f7ea fee6 	bl	80008de <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8015b12:	4683      	mov	fp, r0
      pointer __new_start(this->_M_allocate(__len));
 8015b14:	f7ff fe05 	bl	8015722 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8015b18:	782b      	ldrb	r3, [r5, #0]
		    this->_M_impl._M_end_of_storage - __old_start);
 8015b1a:	68a1      	ldr	r1, [r4, #8]
      pointer __new_start(this->_M_allocate(__len));
 8015b1c:	4606      	mov	r6, r0
 8015b1e:	7003      	strb	r3, [r0, #0]
 8015b20:	f880 a001 	strb.w	sl, [r0, #1]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8015b24:	1b49      	subs	r1, r1, r5
 8015b26:	4628      	mov	r0, r5
 8015b28:	f003 fe52 	bl	80197d0 <_ZdlPvj>
	      ++__new_finish;
 8015b2c:	1cb3      	adds	r3, r6, #2
      this->_M_impl._M_start = __new_start;
 8015b2e:	6026      	str	r6, [r4, #0]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8015b30:	445e      	add	r6, fp
      this->_M_impl._M_finish = __new_finish;
 8015b32:	6063      	str	r3, [r4, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8015b34:	60a6      	str	r6, [r4, #8]
 8015b36:	e7bd      	b.n	8015ab4 <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0x64>
		  _M_check_len(__n, "vector::_M_range_insert");
 8015b38:	4629      	mov	r1, r5
 8015b3a:	4a13      	ldr	r2, [pc, #76]	@ (8015b88 <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0x138>)
 8015b3c:	4620      	mov	r0, r4
 8015b3e:	9301      	str	r3, [sp, #4]
 8015b40:	f7ea fecd 	bl	80008de <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8015b44:	4683      	mov	fp, r0
		pointer __new_start(this->_M_allocate(__len));
 8015b46:	f7ff fdec 	bl	8015722 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
 8015b4a:	4631      	mov	r1, r6
 8015b4c:	4602      	mov	r2, r0
 8015b4e:	4605      	mov	r5, r0
 8015b50:	4638      	mov	r0, r7
 8015b52:	f7eb fed3 	bl	80018fc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8015b56:	9b01      	ldr	r3, [sp, #4]
 8015b58:	4602      	mov	r2, r0
 8015b5a:	4650      	mov	r0, sl
 8015b5c:	4619      	mov	r1, r3
 8015b5e:	f7ea ff41 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8015b62:	4631      	mov	r1, r6
 8015b64:	4602      	mov	r2, r0
 8015b66:	4630      	mov	r0, r6
 8015b68:	f7eb fec8 	bl	80018fc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8015b6c:	4606      	mov	r6, r0
	if (__p)
 8015b6e:	b127      	cbz	r7, 8015b7a <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0x12a>
			      this->_M_impl._M_end_of_storage - __old_start);
 8015b70:	68a1      	ldr	r1, [r4, #8]
 8015b72:	4638      	mov	r0, r7
 8015b74:	1bc9      	subs	r1, r1, r7
 8015b76:	f003 fe2b 	bl	80197d0 <_ZdlPvj>
		this->_M_impl._M_finish = __new_finish;
 8015b7a:	e9c4 5600 	strd	r5, r6, [r4]
		this->_M_impl._M_end_of_storage = __new_start + __len;
 8015b7e:	445d      	add	r5, fp
 8015b80:	60a5      	str	r5, [r4, #8]
 8015b82:	e7b4      	b.n	8015aee <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0x9e>
 8015b84:	08019e3e 	.word	0x08019e3e
 8015b88:	08019e89 	.word	0x08019e89

08015b8c <_ZN11CANProtocol4SendE13MessageHeader>:
HAL_StatusTypeDef CANProtocol::Send(MessageHeader message) {
 8015b8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015b90:	b093      	sub	sp, #76	@ 0x4c
 8015b92:	460e      	mov	r6, r1
	FDCAN_HandleTypeDef* interface_ = GetInterface(message.interface, &success);
 8015b94:	7809      	ldrb	r1, [r1, #0]
HAL_StatusTypeDef CANProtocol::Send(MessageHeader message) {
 8015b96:	4680      	mov	r8, r0
	FDCAN_HandleTypeDef* interface_ = GetInterface(message.interface, &success);
 8015b98:	f10d 0203 	add.w	r2, sp, #3
 8015b9c:	f7ff fe48 	bl	8015830 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12GetInterfaceEhPb>
	if (!success) return HAL_ERROR;
 8015ba0:	f89d 3003 	ldrb.w	r3, [sp, #3]
	FDCAN_HandleTypeDef* interface_ = GetInterface(message.interface, &success);
 8015ba4:	4681      	mov	r9, r0
	if (!success) return HAL_ERROR;
 8015ba6:	b91b      	cbnz	r3, 8015bb0 <_ZN11CANProtocol4SendE13MessageHeader+0x24>
 8015ba8:	2001      	movs	r0, #1
}
 8015baa:	b013      	add	sp, #76	@ 0x4c
 8015bac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (interface_->State != HAL_FDCAN_STATE_BUSY) return HAL_ERROR;
 8015bb0:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 8015bb4:	2b02      	cmp	r3, #2
 8015bb6:	d1f7      	bne.n	8015ba8 <_ZN11CANProtocol4SendE13MessageHeader+0x1c>
	uint8_t index = GetInterfaceIndex(message.interface, &success);
 8015bb8:	f10d 0203 	add.w	r2, sp, #3
 8015bbc:	7831      	ldrb	r1, [r6, #0]
 8015bbe:	4640      	mov	r0, r8
	FDCAN_TxHeaderTypeDef TxHeader = FDCANTxHeaders[index];
 8015bc0:	ad09      	add	r5, sp, #36	@ 0x24
	uint8_t index = GetInterfaceIndex(message.interface, &success);
 8015bc2:	f7ff fc01 	bl	80153c8 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
	FDCAN_TxHeaderTypeDef TxHeader = FDCANTxHeaders[index];
 8015bc6:	f8d8 4048 	ldr.w	r4, [r8, #72]	@ 0x48
	return *(this->_M_impl._M_start + __n);
 8015bca:	b207      	sxth	r7, r0
 8015bcc:	eb07 03c7 	add.w	r3, r7, r7, lsl #3
 8015bd0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8015bd4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8015bd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015bda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015bdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015bde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015be0:	6823      	ldr	r3, [r4, #0]
 8015be2:	602b      	str	r3, [r5, #0]
 8015be4:	00bd      	lsls	r5, r7, #2
 8015be6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015bea:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8015bee:	7833      	ldrb	r3, [r6, #0]
 8015bf0:	f88d 3010 	strb.w	r3, [sp, #16]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015bf4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015bf8:	1ae4      	subs	r4, r4, r3
	this->_M_impl._M_start = this->_M_allocate(__n);
 8015bfa:	4620      	mov	r0, r4
 8015bfc:	f7ff fd91 	bl	8015722 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8015c00:	4404      	add	r4, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8015c02:	4602      	mov	r2, r0
 8015c04:	9005      	str	r0, [sp, #20]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8015c06:	9407      	str	r4, [sp, #28]
 8015c08:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
 8015c0c:	f7ea feea 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8015c10:	8a33      	ldrh	r3, [r6, #16]
	buffers_to_transfer[index] = CodeProtocol(message, &TxHeader);
 8015c12:	aa04      	add	r2, sp, #16
 8015c14:	4641      	mov	r1, r8
	this->_M_impl._M_finish =
 8015c16:	9006      	str	r0, [sp, #24]
 8015c18:	a801      	add	r0, sp, #4
 8015c1a:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015c1e:	ab09      	add	r3, sp, #36	@ 0x24
 8015c20:	f7ff ff16 	bl	8015a50 <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef>
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8015c24:	a901      	add	r1, sp, #4
 8015c26:	4638      	mov	r0, r7
 8015c28:	f7ff fdeb 	bl	8015802 <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE.isra.0>
      }
 8015c2c:	a801      	add	r0, sp, #4
 8015c2e:	f7ea fe35 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8015c32:	a805      	add	r0, sp, #20
 8015c34:	f7ea fe32 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return *(this->_M_impl._M_start + __n);
 8015c38:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015c3c:	1959      	adds	r1, r3, r5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015c3e:	595a      	ldr	r2, [r3, r5]
 8015c40:	684b      	ldr	r3, [r1, #4]
 8015c42:	1a9b      	subs	r3, r3, r2
	if (buffers_to_transfer[index].size() > 64) return HAL_ERROR;
 8015c44:	2b40      	cmp	r3, #64	@ 0x40
 8015c46:	d8af      	bhi.n	8015ba8 <_ZN11CANProtocol4SendE13MessageHeader+0x1c>
	return HAL_FDCAN_AddMessageToTxFifoQ(interface_, &TxHeader, &(buffers_to_transfer[index])[0]);
 8015c48:	a909      	add	r1, sp, #36	@ 0x24
 8015c4a:	4648      	mov	r0, r9
 8015c4c:	f7ef fec7 	bl	80059de <HAL_FDCAN_AddMessageToTxFifoQ>
 8015c50:	e7ab      	b.n	8015baa <_ZN11CANProtocol4SendE13MessageHeader+0x1e>

08015c52 <_ZN12UARTProtocol17ActivateReceptionEh>:
 * @brief OVERRIDE Activate reception of the associated hardware interface
 *
 * @param input ID: interface ID
 * @return the interface access status
 */
HAL_StatusTypeDef UARTProtocol::ActivateReception(uint8_t ID) {
 8015c52:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t index = GetInterfaceIndex(ID, success);
 8015c54:	f10d 0207 	add.w	r2, sp, #7
 8015c58:	4604      	mov	r4, r0
 8015c5a:	460d      	mov	r5, r1
 8015c5c:	f7ff fbb4 	bl	80153c8 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
	if (*success) {
 8015c60:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8015c64:	b1d3      	cbz	r3, 8015c9c <_ZN12UARTProtocol17ActivateReceptionEh+0x4a>
	return *(this->_M_impl._M_start + __n);
 8015c66:	b203      	sxth	r3, r0
		return interfaces[index];
 8015c68:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
	bool success;
	UART_HandleTypeDef* handle = GetInterface(ID, &success);
	if (not success) return HAL_ERROR;
	std::vector<uint8_t>* buffer = GetBuffer(ID, &success);
 8015c6a:	4620      	mov	r0, r4
 8015c6c:	4629      	mov	r1, r5
 8015c6e:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8015c72:	f10d 0207 	add.w	r2, sp, #7
 8015c76:	f7ff fbd3 	bl	8015420 <_ZN21CommunicationProtocol9GetBufferEhPb>
	if (not success) return HAL_ERROR;
 8015c7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
	std::vector<uint8_t>* buffer = GetBuffer(ID, &success);
 8015c7e:	4604      	mov	r4, r0
	if (not success) return HAL_ERROR;
 8015c80:	b163      	cbz	r3, 8015c9c <_ZN12UARTProtocol17ActivateReceptionEh+0x4a>

	HAL_StatusTypeDef status;
	status = UART_CheckIdleState(handle); // to reset UART RxState
 8015c82:	4630      	mov	r0, r6
 8015c84:	f7f5 fc6b 	bl	800b55e <UART_CheckIdleState>
	do {
		status = HAL_UARTEx_ReceiveToIdle_DMA(handle, buffer->data(), BUFFER_SIZE);
 8015c88:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8015c8c:	6821      	ldr	r1, [r4, #0]
 8015c8e:	4630      	mov	r0, r6
 8015c90:	f7f5 fe02 	bl	800b898 <HAL_UARTEx_ReceiveToIdle_DMA>
	} while (status == HAL_BUSY);
 8015c94:	2802      	cmp	r0, #2
 8015c96:	d0f7      	beq.n	8015c88 <_ZN12UARTProtocol17ActivateReceptionEh+0x36>
	return status;
}
 8015c98:	b002      	add	sp, #8
 8015c9a:	bd70      	pop	{r4, r5, r6, pc}
	if (not success) return HAL_ERROR;
 8015c9c:	2001      	movs	r0, #1
 8015c9e:	e7fb      	b.n	8015c98 <_ZN12UARTProtocol17ActivateReceptionEh+0x46>

08015ca0 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015ca0:	2800      	cmp	r0, #0
      _M_allocate(size_t __n)
 8015ca2:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015ca4:	d006      	beq.n	8015cb4 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0x14>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8015ca6:	da01      	bge.n	8015cac <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0xc>
	    std::__throw_bad_alloc();
 8015ca8:	f003 fe66 	bl	8019978 <_ZSt17__throw_bad_allocv>
      }
 8015cac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8015cb0:	f003 bdb3 	b.w	801981a <_Znwj>
 8015cb4:	bd08      	pop	{r3, pc}

08015cb6 <_ZN12UARTProtocol13DetectPatternESt6vectorIhSaIhEES2_tPb>:
 * @param input pattern: patter to detect
 * @param input start_index: the detection of the pattern starts at this index
 * @param output success: whether successful
 * @return the base index of the first iteration of the detected pattern in message
 */
uint16_t UARTProtocol::DetectPattern(std::vector<uint8_t> message, std::vector<uint8_t> pattern, uint16_t start_index, bool* success) {
 8015cb6:	b5f0      	push	{r4, r5, r6, r7, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015cb8:	e9d1 5000 	ldrd	r5, r0, [r1]
	uint8_t counter = 0;
 8015cbc:	2100      	movs	r1, #0
 8015cbe:	1b40      	subs	r0, r0, r5
	for (uint16_t index = start_index; index < message.size(); index++) {
 8015cc0:	4283      	cmp	r3, r0
 8015cc2:	d302      	bcc.n	8015cca <_ZN12UARTProtocol13DetectPatternESt6vectorIhSaIhEES2_tPb+0x14>
 8015cc4:	2300      	movs	r3, #0
			*success = true;
			return index - counter + 1;
		}
	}
	*success = false;
	return 0;
 8015cc6:	4618      	mov	r0, r3
 8015cc8:	e00e      	b.n	8015ce8 <_ZN12UARTProtocol13DetectPatternESt6vectorIhSaIhEES2_tPb+0x32>
	return *(this->_M_impl._M_start + __n);
 8015cca:	6816      	ldr	r6, [r2, #0]
		if (message[index] != pattern[counter]) {
 8015ccc:	5cef      	ldrb	r7, [r5, r3]
 8015cce:	3301      	adds	r3, #1
 8015cd0:	5c74      	ldrb	r4, [r6, r1]
 8015cd2:	42a7      	cmp	r7, r4
 8015cd4:	d10b      	bne.n	8015cee <_ZN12UARTProtocol13DetectPatternESt6vectorIhSaIhEES2_tPb+0x38>
		counter++;
 8015cd6:	3101      	adds	r1, #1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015cd8:	6854      	ldr	r4, [r2, #4]
 8015cda:	b2c9      	uxtb	r1, r1
 8015cdc:	1ba4      	subs	r4, r4, r6
		if (counter >= pattern.size()) {
 8015cde:	42a1      	cmp	r1, r4
 8015ce0:	d306      	bcc.n	8015cf0 <_ZN12UARTProtocol13DetectPatternESt6vectorIhSaIhEES2_tPb+0x3a>
			return index - counter + 1;
 8015ce2:	1a5b      	subs	r3, r3, r1
 8015ce4:	b298      	uxth	r0, r3
 8015ce6:	2301      	movs	r3, #1
			*success = true;
 8015ce8:	9a05      	ldr	r2, [sp, #20]
 8015cea:	7013      	strb	r3, [r2, #0]
}
 8015cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
			counter = 0;
 8015cee:	2100      	movs	r1, #0
	for (uint16_t index = start_index; index < message.size(); index++) {
 8015cf0:	b29b      	uxth	r3, r3
 8015cf2:	e7e5      	b.n	8015cc0 <_ZN12UARTProtocol13DetectPatternESt6vectorIhSaIhEES2_tPb+0xa>

08015cf4 <_ZN12UARTProtocol16PatternPresentAtEtSt6vectorIhSaIhEES2_>:
 * @param input start_index: the detection of the pattern starts at this index
 * @param input message: message used to find the pattern
 * @param input pattern: patter to detect
 * @param output success: true if pattern detected
 */
bool UARTProtocol::PatternPresentAt(uint16_t start_index, std::vector<uint8_t> message, std::vector<uint8_t> pattern) {
 8015cf4:	b570      	push	{r4, r5, r6, lr}
    uint16_t index = start_index;
    for (uint8_t byte : pattern) {
 8015cf6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8015cfa:	1ac9      	subs	r1, r1, r3
 8015cfc:	18c8      	adds	r0, r1, r3
 8015cfe:	42a3      	cmp	r3, r4
 8015d00:	b280      	uxth	r0, r0
 8015d02:	d101      	bne.n	8015d08 <_ZN12UARTProtocol16PatternPresentAtEtSt6vectorIhSaIhEES2_+0x14>
        if (byte != message[index])
            return false;
        index++;
    }
    return true;
 8015d04:	2001      	movs	r0, #1
}
 8015d06:	bd70      	pop	{r4, r5, r6, pc}
        if (byte != message[index])
 8015d08:	6816      	ldr	r6, [r2, #0]
    for (uint8_t byte : pattern) {
 8015d0a:	f813 5b01 	ldrb.w	r5, [r3], #1
        if (byte != message[index])
 8015d0e:	5c30      	ldrb	r0, [r6, r0]
 8015d10:	42a8      	cmp	r0, r5
 8015d12:	d0f3      	beq.n	8015cfc <_ZN12UARTProtocol16PatternPresentAtEtSt6vectorIhSaIhEES2_+0x8>
            return false;
 8015d14:	2000      	movs	r0, #0
 8015d16:	e7f6      	b.n	8015d06 <_ZN12UARTProtocol16PatternPresentAtEtSt6vectorIhSaIhEES2_+0x12>

08015d18 <_ZN12UARTProtocol11GetChecksumESt6vectorIhSaIhEE>:
 8015d18:	e9d1 3200 	ldrd	r3, r2, [r1]
 *
 * @param input message: vector of bytes to derive the checksum
 * @return the 1-byte checksum
 */
uint8_t UARTProtocol::GetChecksum(std::vector<uint8_t> message) {
	uint8_t checksum = 0;
 8015d1c:	2000      	movs	r0, #0
	for (uint8_t byte : message)
 8015d1e:	429a      	cmp	r2, r3
 8015d20:	d102      	bne.n	8015d28 <_ZN12UARTProtocol11GetChecksumESt6vectorIhSaIhEE+0x10>
		checksum += byte;
	checksum = ~checksum + 1;
 8015d22:	4240      	negs	r0, r0
	return checksum;
}
 8015d24:	b2c0      	uxtb	r0, r0
 8015d26:	4770      	bx	lr
		checksum += byte;
 8015d28:	f813 1b01 	ldrb.w	r1, [r3], #1
 8015d2c:	4408      	add	r0, r1
 8015d2e:	b2c0      	uxtb	r0, r0
	return *this;
 8015d30:	e7f5      	b.n	8015d1e <_ZN12UARTProtocol11GetChecksumESt6vectorIhSaIhEE+0x6>

08015d32 <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE>:
 8015d32:	e9d3 0300 	ldrd	r0, r3, [r3]
 * @param input start_index: index (included) from which the checksum check is started
 * @param input end_index: index (excluded) from which the checksum check is finished
 * @param input message: byte vector message
 * @return true if the checksum is valid
 */
bool UARTProtocol::Checksum(uint16_t start_index, uint16_t end_index, std::vector<uint8_t> message) {
 8015d36:	b510      	push	{r4, lr}
 8015d38:	1a1b      	subs	r3, r3, r0
	uint8_t sum = 0;
	if (start_index > message.size()) return false;
 8015d3a:	4299      	cmp	r1, r3
 8015d3c:	d812      	bhi.n	8015d64 <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE+0x32>
	if (end_index > message.size()) return false;
 8015d3e:	429a      	cmp	r2, r3
 8015d40:	d810      	bhi.n	8015d64 <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE+0x32>
	if (start_index > end_index) return false;
 8015d42:	4291      	cmp	r1, r2
 8015d44:	d80e      	bhi.n	8015d64 <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE+0x32>
 8015d46:	1843      	adds	r3, r0, r1
	uint8_t sum = 0;
 8015d48:	2000      	movs	r0, #0
	for (uint16_t index = start_index; index < end_index; index++) {
 8015d4a:	4291      	cmp	r1, r2
 8015d4c:	d103      	bne.n	8015d56 <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE+0x24>
		sum += message[index];
	}
	return (sum == 0);
 8015d4e:	fab0 f080 	clz	r0, r0
 8015d52:	0940      	lsrs	r0, r0, #5
}
 8015d54:	bd10      	pop	{r4, pc}
		sum += message[index];
 8015d56:	f813 4b01 	ldrb.w	r4, [r3], #1
	for (uint16_t index = start_index; index < end_index; index++) {
 8015d5a:	3101      	adds	r1, #1
		sum += message[index];
 8015d5c:	4420      	add	r0, r4
	for (uint16_t index = start_index; index < end_index; index++) {
 8015d5e:	b289      	uxth	r1, r1
		sum += message[index];
 8015d60:	b2c0      	uxtb	r0, r0
	for (uint16_t index = start_index; index < end_index; index++) {
 8015d62:	e7f2      	b.n	8015d4a <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE+0x18>
	if (start_index > message.size()) return false;
 8015d64:	2000      	movs	r0, #0
 8015d66:	e7f5      	b.n	8015d54 <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE+0x22>

08015d68 <_ZN12UARTProtocol7IsRS485Eh>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8015d68:	e9d0 3217 	ldrd	r3, r2, [r0, #92]	@ 0x5c
 *
 * @param input ID: interface ID
 * @return true if interface is RS485
 */
bool UARTProtocol::IsRS485(uint8_t ID) {
	for (uint8_t &RS485_interface : RS485_interfaces) {
 8015d6c:	4293      	cmp	r3, r2
 8015d6e:	d101      	bne.n	8015d74 <_ZN12UARTProtocol7IsRS485Eh+0xc>
		if (RS485_interface == ID) return true;
	}
	return false;
 8015d70:	2000      	movs	r0, #0
 8015d72:	4770      	bx	lr
		if (RS485_interface == ID) return true;
 8015d74:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015d78:	4288      	cmp	r0, r1
 8015d7a:	d1f7      	bne.n	8015d6c <_ZN12UARTProtocol7IsRS485Eh+0x4>
 8015d7c:	2001      	movs	r0, #1
}
 8015d7e:	4770      	bx	lr

08015d80 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8015d80:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 8015d82:	680d      	ldr	r5, [r1, #0]
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8015d84:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 8015d86:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 8015d88:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 8015d8c:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 8015d8e:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8015d90:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 8015d92:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 8015d94:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8015d96:	688d      	ldr	r5, [r1, #8]
 8015d98:	6085      	str	r5, [r0, #8]
      }
 8015d9a:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 8015d9c:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 8015d9e:	e9c1 3300 	strd	r3, r3, [r1]
 8015da2:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 8015da6:	f7ea fd79 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      }
 8015daa:	b005      	add	sp, #20
 8015dac:	bd30      	pop	{r4, r5, pc}

08015dae <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb>:
MessageHeader UARTProtocol::DecodeProtocol(uint8_t ID, std::vector<uint8_t> message, uint16_t* index, bool* success) {
 8015dae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015db2:	460c      	mov	r4, r1
 8015db4:	469a      	mov	sl, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8015db6:	2300      	movs	r3, #0
 8015db8:	b08d      	sub	sp, #52	@ 0x34
	if (IsRS485(ID)) RS485_offset = 1;
 8015dba:	4611      	mov	r1, r2
MessageHeader UARTProtocol::DecodeProtocol(uint8_t ID, std::vector<uint8_t> message, uint16_t* index, bool* success) {
 8015dbc:	4605      	mov	r5, r0
 8015dbe:	60c3      	str	r3, [r0, #12]
 8015dc0:	4616      	mov	r6, r2
 8015dc2:	e9c0 3301 	strd	r3, r3, [r0, #4]
	if (IsRS485(ID)) RS485_offset = 1;
 8015dc6:	4620      	mov	r0, r4
 8015dc8:	f7ff ffce 	bl	8015d68 <_ZN12UARTProtocol7IsRS485Eh>
	uint16_t start_index = DetectPattern(message, protocol_start, *index, success);
 8015dcc:	4651      	mov	r1, sl
	if (IsRS485(ID)) RS485_offset = 1;
 8015dce:	4607      	mov	r7, r0
	uint16_t start_index = DetectPattern(message, protocol_start, *index, success);
 8015dd0:	a806      	add	r0, sp, #24
 8015dd2:	f7ea fe13 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8015dd6:	f104 0144 	add.w	r1, r4, #68	@ 0x44
 8015dda:	a809      	add	r0, sp, #36	@ 0x24
 8015ddc:	f7ea fe0e 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8015de0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8015de2:	aa09      	add	r2, sp, #36	@ 0x24
 8015de4:	a906      	add	r1, sp, #24
 8015de6:	9300      	str	r3, [sp, #0]
 8015de8:	4620      	mov	r0, r4
 8015dea:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8015dec:	881b      	ldrh	r3, [r3, #0]
 8015dee:	f7ff ff62 	bl	8015cb6 <_ZN12UARTProtocol13DetectPatternESt6vectorIhSaIhEES2_tPb>
 8015df2:	4680      	mov	r8, r0
      }
 8015df4:	a809      	add	r0, sp, #36	@ 0x24
 8015df6:	f7ea fd51 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8015dfa:	a806      	add	r0, sp, #24
 8015dfc:	f7ea fd4e 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (*success) {
 8015e00:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8015e02:	781b      	ldrb	r3, [r3, #0]
 8015e04:	b193      	cbz	r3, 8015e2c <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x7e>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015e06:	e9da 3200 	ldrd	r3, r2, [sl]
 8015e0a:	1ad2      	subs	r2, r2, r3
 8015e0c:	9203      	str	r2, [sp, #12]
 8015e0e:	e9d4 1211 	ldrd	r1, r2, [r4, #68]	@ 0x44
 8015e12:	1a52      	subs	r2, r2, r1
		if (message.size() <= start_index + protocol_start.size() + 1 + RS485_offset) {*success = false; return decoded_message;} // Error - discard message
 8015e14:	9903      	ldr	r1, [sp, #12]
 8015e16:	eb02 0b08 	add.w	fp, r2, r8
 8015e1a:	eb0b 0907 	add.w	r9, fp, r7
 8015e1e:	f109 0201 	add.w	r2, r9, #1
 8015e22:	428a      	cmp	r2, r1
 8015e24:	d306      	bcc.n	8015e34 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x86>
 8015e26:	2300      	movs	r3, #0
 8015e28:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8015e2a:	7013      	strb	r3, [r2, #0]
}
 8015e2c:	4628      	mov	r0, r5
 8015e2e:	b00d      	add	sp, #52	@ 0x34
 8015e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (IsRS485(ID))
 8015e34:	4631      	mov	r1, r6
 8015e36:	4620      	mov	r0, r4
 8015e38:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015e3c:	f7ff ff94 	bl	8015d68 <_ZN12UARTProtocol7IsRS485Eh>
 8015e40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015e44:	2800      	cmp	r0, #0
 8015e46:	d079      	beq.n	8015f3c <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x18e>
			decoded_message.target_address = message[start_index + protocol_start.size()];
 8015e48:	f813 100b 	ldrb.w	r1, [r3, fp]
 8015e4c:	7429      	strb	r1, [r5, #16]
		decoded_message.source_address = message[start_index + protocol_start.size() + RS485_offset];
 8015e4e:	f813 1009 	ldrb.w	r1, [r3, r9]
 8015e52:	7469      	strb	r1, [r5, #17]
		uint16_t length = message[start_index + protocol_start.size() + 1 + RS485_offset];
 8015e54:	5c9e      	ldrb	r6, [r3, r2]
 8015e56:	e9d4 1214 	ldrd	r1, r2, [r4, #80]	@ 0x50
 8015e5a:	1a52      	subs	r2, r2, r1
		if (message.size() <= start_index + protocol_start.size() + length + 2 + RS485_offset + protocol_end.size()) {*success = false; return decoded_message;} // Error - discard message
 8015e5c:	9903      	ldr	r1, [sp, #12]
 8015e5e:	3202      	adds	r2, #2
 8015e60:	443a      	add	r2, r7
 8015e62:	445a      	add	r2, fp
 8015e64:	4432      	add	r2, r6
 8015e66:	428a      	cmp	r2, r1
 8015e68:	d2dd      	bcs.n	8015e26 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x78>
      { return __normal_iterator(_M_current + __n); }
 8015e6a:	f109 0902 	add.w	r9, r9, #2
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8015e6e:	4630      	mov	r0, r6
 8015e70:	4499      	add	r9, r3
 8015e72:	f7ff ff15 	bl	8015ca0 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8015e76:	1983      	adds	r3, r0, r6
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8015e78:	4602      	mov	r2, r0
 8015e7a:	eb09 0b06 	add.w	fp, r9, r6
 8015e7e:	9009      	str	r0, [sp, #36]	@ 0x24
 8015e80:	4648      	mov	r0, r9
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8015e82:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015e84:	4659      	mov	r1, fp
 8015e86:	f7ea fdad 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		decoded_message.payload = std::vector<uint8_t>(message.begin() + start_index + protocol_start.size() + 2 + RS485_offset, message.begin() + start_index + protocol_start.size() + 2 + RS485_offset + length);
 8015e8a:	a909      	add	r1, sp, #36	@ 0x24
	  this->_M_impl._M_finish =
 8015e8c:	900a      	str	r0, [sp, #40]	@ 0x28
 8015e8e:	1d28      	adds	r0, r5, #4
 8015e90:	f7ff ff76 	bl	8015d80 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8015e94:	a809      	add	r0, sp, #36	@ 0x24
 8015e96:	f7ea fd01 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (!Checksum(start_index, start_index + protocol_start.size() + length + 3 + RS485_offset, message)) {*success = false; return decoded_message;} // Checksum Error - discard message
 8015e9a:	4651      	mov	r1, sl
 8015e9c:	a809      	add	r0, sp, #36	@ 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015e9e:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	@ 0x44
 8015ea2:	eba3 0902 	sub.w	r9, r3, r2
 8015ea6:	f7ea fda9 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8015eaa:	ab09      	add	r3, sp, #36	@ 0x24
 8015eac:	4641      	mov	r1, r8
 8015eae:	f109 0903 	add.w	r9, r9, #3
 8015eb2:	4620      	mov	r0, r4
 8015eb4:	44c1      	add	r9, r8
 8015eb6:	44b9      	add	r9, r7
 8015eb8:	44b1      	add	r9, r6
 8015eba:	fa1f f989 	uxth.w	r9, r9
 8015ebe:	464a      	mov	r2, r9
 8015ec0:	f7ff ff37 	bl	8015d32 <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE>
 8015ec4:	4681      	mov	r9, r0
      }
 8015ec6:	a809      	add	r0, sp, #36	@ 0x24
 8015ec8:	f7ea fce8 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8015ecc:	f1b9 0f00 	cmp.w	r9, #0
 8015ed0:	d0a9      	beq.n	8015e26 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x78>
		if (!PatternPresentAt(start_index + protocol_start.size() + length + 3 + RS485_offset, message, protocol_end)) {*success = false; return decoded_message;} // Checksum Error - discard message
 8015ed2:	4651      	mov	r1, sl
 8015ed4:	a806      	add	r0, sp, #24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015ed6:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	@ 0x44
 8015eda:	eba3 0902 	sub.w	r9, r3, r2
 8015ede:	f7ea fd8d 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8015ee2:	f104 0150 	add.w	r1, r4, #80	@ 0x50
 8015ee6:	a809      	add	r0, sp, #36	@ 0x24
 8015ee8:	f109 0903 	add.w	r9, r9, #3
 8015eec:	f7ea fd86 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8015ef0:	ab09      	add	r3, sp, #36	@ 0x24
 8015ef2:	aa06      	add	r2, sp, #24
 8015ef4:	44c1      	add	r9, r8
 8015ef6:	4620      	mov	r0, r4
 8015ef8:	44b9      	add	r9, r7
 8015efa:	44b1      	add	r9, r6
 8015efc:	fa1f f989 	uxth.w	r9, r9
 8015f00:	4649      	mov	r1, r9
 8015f02:	f7ff fef7 	bl	8015cf4 <_ZN12UARTProtocol16PatternPresentAtEtSt6vectorIhSaIhEES2_>
 8015f06:	4681      	mov	r9, r0
      }
 8015f08:	a809      	add	r0, sp, #36	@ 0x24
 8015f0a:	f7ea fcc7 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8015f0e:	a806      	add	r0, sp, #24
 8015f10:	f7ea fcc4 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8015f14:	f1b9 0f00 	cmp.w	r9, #0
 8015f18:	d085      	beq.n	8015e26 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x78>
		*success = true;
 8015f1a:	2301      	movs	r3, #1
 8015f1c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8015f1e:	7013      	strb	r3, [r2, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015f20:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	@ 0x44
 8015f24:	1a9b      	subs	r3, r3, r2
 8015f26:	e9d4 1214 	ldrd	r1, r2, [r4, #80]	@ 0x50
 8015f2a:	1a52      	subs	r2, r2, r1
		*index = start_index + protocol_start.size() + length + 3 + RS485_offset + protocol_end.size();
 8015f2c:	4413      	add	r3, r2
 8015f2e:	3303      	adds	r3, #3
 8015f30:	4498      	add	r8, r3
 8015f32:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8015f34:	4447      	add	r7, r8
 8015f36:	443e      	add	r6, r7
 8015f38:	801e      	strh	r6, [r3, #0]
 8015f3a:	e777      	b.n	8015e2c <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x7e>
			decoded_message.target_address = ALL;
 8015f3c:	21ff      	movs	r1, #255	@ 0xff
 8015f3e:	e785      	b.n	8015e4c <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x9e>

08015f40 <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag.isra.0>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8015f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8015f42:	1a57      	subs	r7, r2, r1
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8015f44:	4604      	mov	r4, r0
 8015f46:	460d      	mov	r5, r1
 8015f48:	4616      	mov	r6, r2
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8015f4a:	d502      	bpl.n	8015f52 <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag.isra.0+0x12>
	  __throw_length_error(
 8015f4c:	4807      	ldr	r0, [pc, #28]	@ (8015f6c <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag.isra.0+0x2c>)
 8015f4e:	f003 fd19 	bl	8019984 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8015f52:	4638      	mov	r0, r7
 8015f54:	f7ff fea4 	bl	8015ca0 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8015f58:	4407      	add	r7, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8015f5a:	4602      	mov	r2, r0
 8015f5c:	6020      	str	r0, [r4, #0]
 8015f5e:	4631      	mov	r1, r6
 8015f60:	4628      	mov	r0, r5
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8015f62:	60a7      	str	r7, [r4, #8]
 8015f64:	f7ea fd3e 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	  this->_M_impl._M_finish =
 8015f68:	6060      	str	r0, [r4, #4]
	}
 8015f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015f6c:	08019e58 	.word	0x08019e58

08015f70 <_ZN12UARTProtocolC1Ev>:
UARTProtocol::UARTProtocol() {
 8015f70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015f72:	4b17      	ldr	r3, [pc, #92]	@ (8015fd0 <_ZN12UARTProtocolC1Ev+0x60>)
	: _M_start(), _M_finish(), _M_end_of_storage()
 8015f74:	2500      	movs	r5, #0
	_M_range_initialize(__l.begin(), __l.end(),
 8015f76:	4a17      	ldr	r2, [pc, #92]	@ (8015fd4 <_ZN12UARTProtocolC1Ev+0x64>)
 8015f78:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
 8015f7a:	6405      	str	r5, [r0, #64]	@ 0x40
 8015f7c:	6003      	str	r3, [r0, #0]
	_M_range_initialize(__l.begin(), __l.end(),
 8015f7e:	1e91      	subs	r1, r2, #2
	: _M_start(), _M_finish(), _M_end_of_storage()
 8015f80:	64c5      	str	r5, [r0, #76]	@ 0x4c
 8015f82:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015f86:	e9c0 5503 	strd	r5, r5, [r0, #12]
 8015f8a:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8015f8e:	e9c0 5508 	strd	r5, r5, [r0, #32]
 8015f92:	e9c0 550a 	strd	r5, r5, [r0, #40]	@ 0x28
 8015f96:	e9c0 550c 	strd	r5, r5, [r0, #48]	@ 0x30
 8015f9a:	e9c0 550e 	strd	r5, r5, [r0, #56]	@ 0x38
 8015f9e:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
	_M_range_initialize(__l.begin(), __l.end(),
 8015fa2:	3044      	adds	r0, #68	@ 0x44
 8015fa4:	f7ff ffcc 	bl	8015f40 <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag.isra.0>
 8015fa8:	23ff      	movs	r3, #255	@ 0xff
 8015faa:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8015fae:	f10d 0205 	add.w	r2, sp, #5
 8015fb2:	a901      	add	r1, sp, #4
	: _M_start(), _M_finish(), _M_end_of_storage()
 8015fb4:	65a5      	str	r5, [r4, #88]	@ 0x58
 8015fb6:	f88d 3004 	strb.w	r3, [sp, #4]
 8015fba:	e9c4 5514 	strd	r5, r5, [r4, #80]	@ 0x50
	_M_range_initialize(__l.begin(), __l.end(),
 8015fbe:	f7ff ffbf 	bl	8015f40 <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag.isra.0>
}
 8015fc2:	4620      	mov	r0, r4
	: _M_start(), _M_finish(), _M_end_of_storage()
 8015fc4:	6665      	str	r5, [r4, #100]	@ 0x64
 8015fc6:	e9c4 5517 	strd	r5, r5, [r4, #92]	@ 0x5c
 8015fca:	b003      	add	sp, #12
 8015fcc:	bd30      	pop	{r4, r5, pc}
 8015fce:	bf00      	nop
 8015fd0:	0801a17c 	.word	0x0801a17c
 8015fd4:	0801a156 	.word	0x0801a156

08015fd8 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0>:
	if (__first != __last)
 8015fd8:	429a      	cmp	r2, r3
	insert(const_iterator __position, _InputIterator __first,
 8015fda:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fde:	4604      	mov	r4, r0
 8015fe0:	460d      	mov	r5, r1
 8015fe2:	4617      	mov	r7, r2
 8015fe4:	4699      	mov	r9, r3
 8015fe6:	d022      	beq.n	801602e <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x56>
    { return __lhs.base() - __rhs.base(); }
 8015fe8:	eba3 0802 	sub.w	r8, r3, r2
      : _M_current(__i) { }
 8015fec:	f8d0 a000 	ldr.w	sl, [r0]
			  - this->_M_impl._M_finish) >= __n)
 8015ff0:	e9d0 6301 	ldrd	r6, r3, [r0, #4]
 8015ff4:	1b9b      	subs	r3, r3, r6
	    if (size_type(this->_M_impl._M_end_of_storage
 8015ff6:	4598      	cmp	r8, r3
 8015ff8:	d831      	bhi.n	801605e <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x86>
    { return __lhs.base() - __rhs.base(); }
 8015ffa:	eba6 0a01 	sub.w	sl, r6, r1
		if (__elems_after > __n)
 8015ffe:	45d0      	cmp	r8, sl
 8016000:	d217      	bcs.n	8016032 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x5a>
		    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 8016002:	eba6 0a08 	sub.w	sl, r6, r8
 8016006:	4632      	mov	r2, r6
 8016008:	4631      	mov	r1, r6
 801600a:	4650      	mov	r0, sl
 801600c:	f7eb fc76 	bl	80018fc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		    this->_M_impl._M_finish += __n;
 8016010:	6863      	ldr	r3, [r4, #4]
	  if (_Num)
 8016012:	ebba 0205 	subs.w	r2, sl, r5
 8016016:	4443      	add	r3, r8
 8016018:	6063      	str	r3, [r4, #4]
 801601a:	d003      	beq.n	8016024 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x4c>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 801601c:	4629      	mov	r1, r5
 801601e:	1ab0      	subs	r0, r6, r2
 8016020:	f003 fd88 	bl	8019b34 <memmove>
			      _Category>::__copy_m(__first, __last, __result);
 8016024:	462a      	mov	r2, r5
 8016026:	4649      	mov	r1, r9
 8016028:	4638      	mov	r0, r7
 801602a:	f7ea fcdb 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	}
 801602e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { _M_current += __n; return *this; }
 8016032:	eb02 0b0a 	add.w	fp, r2, sl
 8016036:	4649      	mov	r1, r9
 8016038:	4632      	mov	r2, r6
		    this->_M_impl._M_finish += __n - __elems_after;
 801603a:	eba8 080a 	sub.w	r8, r8, sl
 801603e:	4658      	mov	r0, fp
 8016040:	f7ea fcd0 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8016044:	6862      	ldr	r2, [r4, #4]
 8016046:	4631      	mov	r1, r6
 8016048:	4628      	mov	r0, r5
 801604a:	4442      	add	r2, r8
 801604c:	6062      	str	r2, [r4, #4]
 801604e:	f7eb fc55 	bl	80018fc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		    this->_M_impl._M_finish += __elems_after;
 8016052:	6863      	ldr	r3, [r4, #4]
 8016054:	462a      	mov	r2, r5
 8016056:	4659      	mov	r1, fp
 8016058:	4453      	add	r3, sl
 801605a:	6063      	str	r3, [r4, #4]
    __copy_move_a2(_II __first, _II __last, _OI __result)
 801605c:	e7e4      	b.n	8016028 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x50>
		  _M_check_len(__n, "vector::_M_range_insert");
 801605e:	4641      	mov	r1, r8
 8016060:	4a12      	ldr	r2, [pc, #72]	@ (80160ac <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0xd4>)
 8016062:	f7ea fc3c 	bl	80008de <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8016066:	4683      	mov	fp, r0
		pointer __new_start(this->_M_allocate(__len));
 8016068:	f7ff fe1a 	bl	8015ca0 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
			      _Category>::__copy_m(__first, __last, __result);
 801606c:	4629      	mov	r1, r5
 801606e:	4602      	mov	r2, r0
 8016070:	4680      	mov	r8, r0
 8016072:	4650      	mov	r0, sl
 8016074:	f7eb fc42 	bl	80018fc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8016078:	4649      	mov	r1, r9
 801607a:	4602      	mov	r2, r0
 801607c:	4638      	mov	r0, r7
 801607e:	f7ea fcb1 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8016082:	4631      	mov	r1, r6
 8016084:	4602      	mov	r2, r0
 8016086:	4628      	mov	r0, r5
 8016088:	f7eb fc38 	bl	80018fc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 801608c:	4605      	mov	r5, r0
	if (__p)
 801608e:	f1ba 0f00 	cmp.w	sl, #0
 8016092:	d005      	beq.n	80160a0 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0xc8>
			      this->_M_impl._M_end_of_storage - __old_start);
 8016094:	68a1      	ldr	r1, [r4, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8016096:	4650      	mov	r0, sl
 8016098:	eba1 010a 	sub.w	r1, r1, sl
 801609c:	f003 fb98 	bl	80197d0 <_ZdlPvj>
		this->_M_impl._M_end_of_storage = __new_start + __len;
 80160a0:	eb08 000b 	add.w	r0, r8, fp
		this->_M_impl._M_finish = __new_finish;
 80160a4:	e9c4 8500 	strd	r8, r5, [r4]
		this->_M_impl._M_end_of_storage = __new_start + __len;
 80160a8:	60a0      	str	r0, [r4, #8]
	  return begin() + __offset;
 80160aa:	e7c0      	b.n	801602e <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x56>
 80160ac:	08019e89 	.word	0x08019e89

080160b0 <_ZN12UARTProtocol12CodeProtocolE13MessageHeader>:
std::vector<uint8_t> UARTProtocol::CodeProtocol(MessageHeader message) {
 80160b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80160b2:	460e      	mov	r6, r1
	: _M_start(), _M_finish(), _M_end_of_storage()
 80160b4:	2100      	movs	r1, #0
 80160b6:	4615      	mov	r5, r2
 80160b8:	4604      	mov	r4, r0
 80160ba:	6081      	str	r1, [r0, #8]
 80160bc:	e9c0 1100 	strd	r1, r1, [r0]
	coded_message.insert(coded_message.end(), std::begin(protocol_start), std::end(protocol_start));
 80160c0:	e9d6 2311 	ldrd	r2, r3, [r6, #68]	@ 0x44
 80160c4:	f7ff ff88 	bl	8015fd8 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0>
	if (IsRS485(message.interface)) coded_message.push_back(message.target_address);
 80160c8:	7829      	ldrb	r1, [r5, #0]
 80160ca:	4630      	mov	r0, r6
 80160cc:	f7ff fe4c 	bl	8015d68 <_ZN12UARTProtocol7IsRS485Eh>
 80160d0:	b120      	cbz	r0, 80160dc <_ZN12UARTProtocol12CodeProtocolE13MessageHeader+0x2c>
 80160d2:	f105 0110 	add.w	r1, r5, #16
 80160d6:	4620      	mov	r0, r4
 80160d8:	f7f9 f91e 	bl	800f318 <_ZNSt6vectorIhSaIhEE9push_backERKh>
	coded_message.push_back(message.source_address);
 80160dc:	f105 0111 	add.w	r1, r5, #17
 80160e0:	4620      	mov	r0, r4
 80160e2:	f7f9 f919 	bl	800f318 <_ZNSt6vectorIhSaIhEE9push_backERKh>
      { emplace_back(std::move(__x)); }
 80160e6:	a901      	add	r1, sp, #4
 80160e8:	4620      	mov	r0, r4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80160ea:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 80160ee:	1a9b      	subs	r3, r3, r2
	coded_message.push_back((uint8_t) message.payload.size());
 80160f0:	f88d 3004 	strb.w	r3, [sp, #4]
      { emplace_back(std::move(__x)); }
 80160f4:	f7f9 f8de 	bl	800f2b4 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
	coded_message.insert(coded_message.end(), message.payload.begin(), message.payload.end());
 80160f8:	6861      	ldr	r1, [r4, #4]
 80160fa:	4620      	mov	r0, r4
 80160fc:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 8016100:	f7ff ff6a 	bl	8015fd8 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0>
	coded_message.push_back(GetChecksum(coded_message));
 8016104:	4621      	mov	r1, r4
 8016106:	a801      	add	r0, sp, #4
 8016108:	f7ea fc78 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 801610c:	a901      	add	r1, sp, #4
 801610e:	4630      	mov	r0, r6
 8016110:	f7ff fe02 	bl	8015d18 <_ZN12UARTProtocol11GetChecksumESt6vectorIhSaIhEE>
 8016114:	f10d 0103 	add.w	r1, sp, #3
 8016118:	f88d 0003 	strb.w	r0, [sp, #3]
 801611c:	4620      	mov	r0, r4
 801611e:	f7f9 f8c9 	bl	800f2b4 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
      }
 8016122:	a801      	add	r0, sp, #4
 8016124:	f7ea fbba 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	coded_message.insert(coded_message.end(), std::begin(protocol_end), std::end(protocol_end));
 8016128:	4620      	mov	r0, r4
 801612a:	6861      	ldr	r1, [r4, #4]
 801612c:	e9d6 2314 	ldrd	r2, r3, [r6, #80]	@ 0x50
 8016130:	f7ff ff52 	bl	8015fd8 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0>
}
 8016134:	4620      	mov	r0, r4
 8016136:	b004      	add	sp, #16
 8016138:	bd70      	pop	{r4, r5, r6, pc}

0801613a <_ZN12UARTProtocol4SendE13MessageHeader>:
HAL_StatusTypeDef UARTProtocol::Send(MessageHeader message) {
 801613a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801613e:	b08a      	sub	sp, #40	@ 0x28
 8016140:	460d      	mov	r5, r1
	uint8_t index = GetInterfaceIndex(ID, success);
 8016142:	7809      	ldrb	r1, [r1, #0]
 8016144:	4604      	mov	r4, r0
 8016146:	f10d 0207 	add.w	r2, sp, #7
 801614a:	f7ff f93d 	bl	80153c8 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
	if (*success) {
 801614e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8016152:	2b00      	cmp	r3, #0
 8016154:	d042      	beq.n	80161dc <_ZN12UARTProtocol4SendE13MessageHeader+0xa2>
		return interfaces[index];
 8016156:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
	return *(this->_M_impl._M_start + __n);
 8016158:	b200      	sxth	r0, r0
 801615a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
	if (interface_->hdmatx->State != HAL_DMA_STATE_READY || interface_->gState != HAL_UART_STATE_READY) return HAL_BUSY;
 801615e:	6fb3      	ldr	r3, [r6, #120]	@ 0x78
 8016160:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8016164:	2b01      	cmp	r3, #1
 8016166:	d13b      	bne.n	80161e0 <_ZN12UARTProtocol4SendE13MessageHeader+0xa6>
 8016168:	f8d6 3084 	ldr.w	r3, [r6, #132]	@ 0x84
 801616c:	2b20      	cmp	r3, #32
 801616e:	d137      	bne.n	80161e0 <_ZN12UARTProtocol4SendE13MessageHeader+0xa6>
	uint8_t index = GetInterfaceIndex(message.interface, &success);
 8016170:	f10d 0207 	add.w	r2, sp, #7
 8016174:	7829      	ldrb	r1, [r5, #0]
 8016176:	4620      	mov	r0, r4
 8016178:	f7ff f926 	bl	80153c8 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
 801617c:	4629      	mov	r1, r5
 801617e:	b200      	sxth	r0, r0
 8016180:	6867      	ldr	r7, [r4, #4]
 8016182:	f811 3b04 	ldrb.w	r3, [r1], #4
 8016186:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801618a:	f88d 3014 	strb.w	r3, [sp, #20]
 801618e:	ea4f 0880 	mov.w	r8, r0, lsl #2
 8016192:	eb07 0780 	add.w	r7, r7, r0, lsl #2
 8016196:	a806      	add	r0, sp, #24
 8016198:	f7ea fc30 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 801619c:	8a2b      	ldrh	r3, [r5, #16]
	buffers_to_transfer[index] = CodeProtocol(message); //std::vector<uint8_t>
 801619e:	aa05      	add	r2, sp, #20
 80161a0:	4621      	mov	r1, r4
 80161a2:	a802      	add	r0, sp, #8
 80161a4:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 80161a8:	f7ff ff82 	bl	80160b0 <_ZN12UARTProtocol12CodeProtocolE13MessageHeader>
 80161ac:	a902      	add	r1, sp, #8
 80161ae:	4638      	mov	r0, r7
 80161b0:	f7ff fde6 	bl	8015d80 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 80161b4:	a802      	add	r0, sp, #8
 80161b6:	f7ea fb71 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80161ba:	a806      	add	r0, sp, #24
 80161bc:	f7ea fb6e 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return *(this->_M_impl._M_start + __n);
 80161c0:	6863      	ldr	r3, [r4, #4]
	return HAL_UART_Transmit_DMA(interface_, &(buffers_to_transfer[index])[0], buffers_to_transfer[index].size());
 80161c2:	4630      	mov	r0, r6
 80161c4:	eb03 0208 	add.w	r2, r3, r8
 80161c8:	f853 1008 	ldr.w	r1, [r3, r8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80161cc:	6852      	ldr	r2, [r2, #4]
 80161ce:	1a52      	subs	r2, r2, r1
 80161d0:	b292      	uxth	r2, r2
 80161d2:	f7f4 fb03 	bl	800a7dc <HAL_UART_Transmit_DMA>
}
 80161d6:	b00a      	add	sp, #40	@ 0x28
 80161d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!success) return HAL_ERROR;
 80161dc:	2001      	movs	r0, #1
 80161de:	e7fa      	b.n	80161d6 <_ZN12UARTProtocol4SendE13MessageHeader+0x9c>
	if (interface_->hdmatx->State != HAL_DMA_STATE_READY || interface_->gState != HAL_UART_STATE_READY) return HAL_BUSY;
 80161e0:	2002      	movs	r0, #2
 80161e2:	e7f8      	b.n	80161d6 <_ZN12UARTProtocol4SendE13MessageHeader+0x9c>

080161e4 <_ZN9Registers9GetTypeIDItEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 80161e4:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80161e6:	4926      	ldr	r1, [pc, #152]	@ (8016280 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 80161e8:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80161ea:	4826      	ldr	r0, [pc, #152]	@ (8016284 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 80161ec:	f003 fbac 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 80161f0:	2800      	cmp	r0, #0
 80161f2:	d133      	bne.n	801625c <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 80161f4:	4923      	ldr	r1, [pc, #140]	@ (8016284 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 80161f6:	4608      	mov	r0, r1
 80161f8:	f003 fba6 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 80161fc:	2800      	cmp	r0, #0
 80161fe:	d12f      	bne.n	8016260 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8016200:	4921      	ldr	r1, [pc, #132]	@ (8016288 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa4>)
 8016202:	4820      	ldr	r0, [pc, #128]	@ (8016284 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 8016204:	f003 fba0 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8016208:	bb60      	cbnz	r0, 8016264 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 801620a:	4920      	ldr	r1, [pc, #128]	@ (801628c <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa8>)
 801620c:	481d      	ldr	r0, [pc, #116]	@ (8016284 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 801620e:	f003 fb9b 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8016212:	bb48      	cbnz	r0, 8016268 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8016214:	491e      	ldr	r1, [pc, #120]	@ (8016290 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xac>)
 8016216:	481b      	ldr	r0, [pc, #108]	@ (8016284 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 8016218:	f003 fb96 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 801621c:	bb30      	cbnz	r0, 801626c <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 801621e:	491d      	ldr	r1, [pc, #116]	@ (8016294 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xb0>)
 8016220:	4818      	ldr	r0, [pc, #96]	@ (8016284 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 8016222:	f003 fb91 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8016226:	bb18      	cbnz	r0, 8016270 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8016228:	491b      	ldr	r1, [pc, #108]	@ (8016298 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xb4>)
 801622a:	4816      	ldr	r0, [pc, #88]	@ (8016284 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 801622c:	f003 fb8c 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8016230:	bb00      	cbnz	r0, 8016274 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 8016232:	491a      	ldr	r1, [pc, #104]	@ (801629c <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xb8>)
 8016234:	4813      	ldr	r0, [pc, #76]	@ (8016284 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 8016236:	f003 fb87 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 801623a:	b9e8      	cbnz	r0, 8016278 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 801623c:	4918      	ldr	r1, [pc, #96]	@ (80162a0 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xbc>)
 801623e:	4811      	ldr	r0, [pc, #68]	@ (8016284 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 8016240:	f003 fb82 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8016244:	b9d0      	cbnz	r0, 801627c <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 8016246:	4917      	ldr	r1, [pc, #92]	@ (80162a4 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xc0>)
 8016248:	480e      	ldr	r0, [pc, #56]	@ (8016284 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 801624a:	f003 fb7d 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 801624e:	2800      	cmp	r0, #0
 8016250:	bf14      	ite	ne
 8016252:	2309      	movne	r3, #9
 8016254:	2300      	moveq	r3, #0
 8016256:	7020      	strb	r0, [r4, #0]
}
 8016258:	4618      	mov	r0, r3
 801625a:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801625c:	2300      	movs	r3, #0
 801625e:	e7fa      	b.n	8016256 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8016260:	2301      	movs	r3, #1
 8016262:	e7f8      	b.n	8016256 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8016264:	2302      	movs	r3, #2
 8016266:	e7f6      	b.n	8016256 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8016268:	2303      	movs	r3, #3
 801626a:	e7f4      	b.n	8016256 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 801626c:	2304      	movs	r3, #4
 801626e:	e7f2      	b.n	8016256 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 8016270:	2305      	movs	r3, #5
 8016272:	e7f0      	b.n	8016256 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8016274:	2306      	movs	r3, #6
 8016276:	e7ee      	b.n	8016256 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 8016278:	2307      	movs	r3, #7
 801627a:	e7ec      	b.n	8016256 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 801627c:	2308      	movs	r3, #8
 801627e:	e7ea      	b.n	8016256 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
 8016280:	0801a298 	.word	0x0801a298
 8016284:	0801a288 	.word	0x0801a288
 8016288:	0801a278 	.word	0x0801a278
 801628c:	0801a268 	.word	0x0801a268
 8016290:	0801a2a0 	.word	0x0801a2a0
 8016294:	0801a290 	.word	0x0801a290
 8016298:	0801a280 	.word	0x0801a280
 801629c:	0801a270 	.word	0x0801a270
 80162a0:	0801a260 	.word	0x0801a260
 80162a4:	0801a258 	.word	0x0801a258

080162a8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>:
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80162a8:	4926      	ldr	r1, [pc, #152]	@ (8016344 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 80162aa:	b510      	push	{r4, lr}
 80162ac:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80162ae:	4608      	mov	r0, r1
 80162b0:	f003 fb4a 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 80162b4:	2800      	cmp	r0, #0
 80162b6:	d133      	bne.n	8016320 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 80162b8:	4923      	ldr	r1, [pc, #140]	@ (8016348 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa0>)
 80162ba:	4822      	ldr	r0, [pc, #136]	@ (8016344 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 80162bc:	f003 fb44 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 80162c0:	2800      	cmp	r0, #0
 80162c2:	d12f      	bne.n	8016324 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 80162c4:	4921      	ldr	r1, [pc, #132]	@ (801634c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa4>)
 80162c6:	481f      	ldr	r0, [pc, #124]	@ (8016344 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 80162c8:	f003 fb3e 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 80162cc:	bb60      	cbnz	r0, 8016328 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 80162ce:	4920      	ldr	r1, [pc, #128]	@ (8016350 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa8>)
 80162d0:	481c      	ldr	r0, [pc, #112]	@ (8016344 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 80162d2:	f003 fb39 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 80162d6:	bb48      	cbnz	r0, 801632c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 80162d8:	491e      	ldr	r1, [pc, #120]	@ (8016354 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xac>)
 80162da:	481a      	ldr	r0, [pc, #104]	@ (8016344 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 80162dc:	f003 fb34 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 80162e0:	bb30      	cbnz	r0, 8016330 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 80162e2:	491d      	ldr	r1, [pc, #116]	@ (8016358 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb0>)
 80162e4:	4817      	ldr	r0, [pc, #92]	@ (8016344 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 80162e6:	f003 fb2f 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 80162ea:	bb18      	cbnz	r0, 8016334 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 80162ec:	491b      	ldr	r1, [pc, #108]	@ (801635c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb4>)
 80162ee:	4815      	ldr	r0, [pc, #84]	@ (8016344 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 80162f0:	f003 fb2a 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 80162f4:	bb00      	cbnz	r0, 8016338 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 80162f6:	491a      	ldr	r1, [pc, #104]	@ (8016360 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb8>)
 80162f8:	4812      	ldr	r0, [pc, #72]	@ (8016344 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 80162fa:	f003 fb25 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 80162fe:	b9e8      	cbnz	r0, 801633c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8016300:	4918      	ldr	r1, [pc, #96]	@ (8016364 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xbc>)
 8016302:	4810      	ldr	r0, [pc, #64]	@ (8016344 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8016304:	f003 fb20 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8016308:	b9d0      	cbnz	r0, 8016340 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 801630a:	4917      	ldr	r1, [pc, #92]	@ (8016368 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xc0>)
 801630c:	480d      	ldr	r0, [pc, #52]	@ (8016344 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 801630e:	f003 fb1b 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 8016312:	2800      	cmp	r0, #0
 8016314:	bf14      	ite	ne
 8016316:	2309      	movne	r3, #9
 8016318:	2300      	moveq	r3, #0
 801631a:	7020      	strb	r0, [r4, #0]
}
 801631c:	4618      	mov	r0, r3
 801631e:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8016320:	2300      	movs	r3, #0
 8016322:	e7fa      	b.n	801631a <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8016324:	2301      	movs	r3, #1
 8016326:	e7f8      	b.n	801631a <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8016328:	2302      	movs	r3, #2
 801632a:	e7f6      	b.n	801631a <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 801632c:	2303      	movs	r3, #3
 801632e:	e7f4      	b.n	801631a <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8016330:	2304      	movs	r3, #4
 8016332:	e7f2      	b.n	801631a <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 8016334:	2305      	movs	r3, #5
 8016336:	e7f0      	b.n	801631a <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8016338:	2306      	movs	r3, #6
 801633a:	e7ee      	b.n	801631a <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 801633c:	2307      	movs	r3, #7
 801633e:	e7ec      	b.n	801631a <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8016340:	2308      	movs	r3, #8
 8016342:	e7ea      	b.n	801631a <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
 8016344:	0801a298 	.word	0x0801a298
 8016348:	0801a288 	.word	0x0801a288
 801634c:	0801a278 	.word	0x0801a278
 8016350:	0801a268 	.word	0x0801a268
 8016354:	0801a2a0 	.word	0x0801a2a0
 8016358:	0801a290 	.word	0x0801a290
 801635c:	0801a280 	.word	0x0801a280
 8016360:	0801a270 	.word	0x0801a270
 8016364:	0801a260 	.word	0x0801a260
 8016368:	0801a258 	.word	0x0801a258

0801636c <_ZN10Publishers4InitEP9RegistersP13Communication>:
 * @brief Initialize the class with references to other classes. Set default values.
 *
 * @param input registers_: the Registers instance
 * @param input communication_: the Communication instance
 */
void Publishers::Init(Registers* registers_, Communication* communication_) {
 801636c:	b510      	push	{r4, lr}
	registers = registers_;
	communication = communication_;
 801636e:	e9c0 1201 	strd	r1, r2, [r0, #4]

	PublishersSemaphore = osSemaphoreNew(1,1,NULL);
 8016372:	2101      	movs	r1, #1
void Publishers::Init(Registers* registers_, Communication* communication_) {
 8016374:	4604      	mov	r4, r0
	PublishersSemaphore = osSemaphoreNew(1,1,NULL);
 8016376:	2200      	movs	r2, #0
 8016378:	4608      	mov	r0, r1
 801637a:	f7f5 fec3 	bl	800c104 <osSemaphoreNew>
 801637e:	6020      	str	r0, [r4, #0]
	osSemaphoreRelease(PublishersSemaphore);
}
 8016380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSemaphoreRelease(PublishersSemaphore);
 8016384:	f7f5 bf4e 	b.w	800c224 <osSemaphoreRelease>

08016388 <_ZN10Publishers13FindPublisherEhPb>:
 *
 * @param input ID: the publisher ID
 * @param output success: whether successful
 * @return the publisher pointer
 */
Publisher* Publishers::FindPublisher(uint8_t ID, bool* success) {
 8016388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801638a:	4604      	mov	r4, r0
 801638c:	460f      	mov	r7, r1
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 801638e:	6800      	ldr	r0, [r0, #0]
 8016390:	f04f 31ff 	mov.w	r1, #4294967295
Publisher* Publishers::FindPublisher(uint8_t ID, bool* success) {
 8016394:	4616      	mov	r6, r2
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8016396:	f7f5 ff11 	bl	800c1bc <osSemaphoreAcquire>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801639a:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
	for (Publisher &publisher : publishers) {
 801639e:	429a      	cmp	r2, r3
 80163a0:	461d      	mov	r5, r3
 80163a2:	d105      	bne.n	80163b0 <_ZN10Publishers13FindPublisherEhPb+0x28>
			osSemaphoreRelease(PublishersSemaphore);
			*success = true;
			return publisher_pointer;
		}
	}
	osSemaphoreRelease(PublishersSemaphore);
 80163a4:	6820      	ldr	r0, [r4, #0]
 80163a6:	f7f5 ff3d 	bl	800c224 <osSemaphoreRelease>
	*success = false;
	return NULL;
 80163aa:	2300      	movs	r3, #0
 80163ac:	461d      	mov	r5, r3
 80163ae:	e008      	b.n	80163c2 <_ZN10Publishers13FindPublisherEhPb+0x3a>
		if (publisher.ID == ID) {
 80163b0:	462b      	mov	r3, r5
 80163b2:	f813 1b20 	ldrb.w	r1, [r3], #32
 80163b6:	42b9      	cmp	r1, r7
 80163b8:	d1f1      	bne.n	801639e <_ZN10Publishers13FindPublisherEhPb+0x16>
			osSemaphoreRelease(PublishersSemaphore);
 80163ba:	6820      	ldr	r0, [r4, #0]
 80163bc:	f7f5 ff32 	bl	800c224 <osSemaphoreRelease>
 80163c0:	2301      	movs	r3, #1
}
 80163c2:	4628      	mov	r0, r5
			*success = true;
 80163c4:	7033      	strb	r3, [r6, #0]
}
 80163c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080163c8 <_ZN10Publishers18SetPublisherStatusEhb>:
bool Publishers::SetPublisherStatus(uint8_t ID, bool status) {
 80163c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80163ca:	4616      	mov	r6, r2
	Publisher* publisher = FindPublisher(ID, &success);
 80163cc:	f10d 0207 	add.w	r2, sp, #7
bool Publishers::SetPublisherStatus(uint8_t ID, bool status) {
 80163d0:	4604      	mov	r4, r0
	Publisher* publisher = FindPublisher(ID, &success);
 80163d2:	f7ff ffd9 	bl	8016388 <_ZN10Publishers13FindPublisherEhPb>
	if (!success) return false;
 80163d6:	f89d 7007 	ldrb.w	r7, [sp, #7]
	Publisher* publisher = FindPublisher(ID, &success);
 80163da:	4605      	mov	r5, r0
	if (!success) return false;
 80163dc:	b157      	cbz	r7, 80163f4 <_ZN10Publishers18SetPublisherStatusEhb+0x2c>
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 80163de:	f04f 31ff 	mov.w	r1, #4294967295
 80163e2:	6820      	ldr	r0, [r4, #0]
 80163e4:	f7f5 feea 	bl	800c1bc <osSemaphoreAcquire>
	publisher->counter = 0;
 80163e8:	2300      	movs	r3, #0
	osSemaphoreRelease(PublishersSemaphore);
 80163ea:	6820      	ldr	r0, [r4, #0]
	publisher->counter = 0;
 80163ec:	80ab      	strh	r3, [r5, #4]
	publisher->activated = status;
 80163ee:	706e      	strb	r6, [r5, #1]
	osSemaphoreRelease(PublishersSemaphore);
 80163f0:	f7f5 ff18 	bl	800c224 <osSemaphoreRelease>
}
 80163f4:	4638      	mov	r0, r7
 80163f6:	b003      	add	sp, #12
 80163f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080163fa <_ZN10Publishers17ActivatePublisherEh>:
	return SetPublisherStatus(ID, true);
 80163fa:	2201      	movs	r2, #1
 80163fc:	f7ff bfe4 	b.w	80163c8 <_ZN10Publishers18SetPublisherStatusEhb>

08016400 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 8016400:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8016402:	4611      	mov	r1, r2
 8016404:	b508      	push	{r3, lr}
			if (length != 2) return false;
 8016406:	d108      	bne.n	801641a <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x1a>
			self->SetPublisherStatus(input[0], (bool) input[1]);
 8016408:	7852      	ldrb	r2, [r2, #1]
 801640a:	7809      	ldrb	r1, [r1, #0]
 801640c:	3a00      	subs	r2, #0
 801640e:	bf18      	it	ne
 8016410:	2201      	movne	r2, #1
 8016412:	f7ff ffd9 	bl	80163c8 <_ZN10Publishers18SetPublisherStatusEhb>
			return true;
 8016416:	2001      	movs	r0, #1
		}
 8016418:	bd08      	pop	{r3, pc}
			if (length != 2) return false;
 801641a:	2000      	movs	r0, #0
 801641c:	e7fc      	b.n	8016418 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x18>

0801641e <_ZN10Publishers21SetPublisherPrescalerEht>:
bool Publishers::SetPublisherPrescaler(uint8_t ID, uint16_t prescaler) {
 801641e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016420:	4616      	mov	r6, r2
	Publisher* publisher = FindPublisher(ID, &success);
 8016422:	f10d 0207 	add.w	r2, sp, #7
bool Publishers::SetPublisherPrescaler(uint8_t ID, uint16_t prescaler) {
 8016426:	4604      	mov	r4, r0
	Publisher* publisher = FindPublisher(ID, &success);
 8016428:	f7ff ffae 	bl	8016388 <_ZN10Publishers13FindPublisherEhPb>
	if (!success) return false;
 801642c:	f89d 7007 	ldrb.w	r7, [sp, #7]
	Publisher* publisher = FindPublisher(ID, &success);
 8016430:	4605      	mov	r5, r0
	if (!success) return false;
 8016432:	b147      	cbz	r7, 8016446 <_ZN10Publishers21SetPublisherPrescalerEht+0x28>
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8016434:	f04f 31ff 	mov.w	r1, #4294967295
 8016438:	6820      	ldr	r0, [r4, #0]
 801643a:	f7f5 febf 	bl	800c1bc <osSemaphoreAcquire>
	osSemaphoreRelease(PublishersSemaphore);
 801643e:	6820      	ldr	r0, [r4, #0]
	publisher->prescaler = prescaler;
 8016440:	806e      	strh	r6, [r5, #2]
	osSemaphoreRelease(PublishersSemaphore);
 8016442:	f7f5 feef 	bl	800c224 <osSemaphoreRelease>
}
 8016446:	4638      	mov	r0, r7
 8016448:	b003      	add	sp, #12
 801644a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801644c <_ZZN10Publishers12AddRegistersEvENUlPvtPttE1_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 801644c:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint16_t* input, uint16_t length) -> bool {
 801644e:	4611      	mov	r1, r2
 8016450:	b508      	push	{r3, lr}
			if (length != 2) return false;
 8016452:	d105      	bne.n	8016460 <_ZZN10Publishers12AddRegistersEvENUlPvtPttE1_4_FUNES0_tS1_t+0x14>
			self->SetPublisherPrescaler((uint8_t) input[0], input[1]);
 8016454:	8852      	ldrh	r2, [r2, #2]
 8016456:	7809      	ldrb	r1, [r1, #0]
 8016458:	f7ff ffe1 	bl	801641e <_ZN10Publishers21SetPublisherPrescalerEht>
 801645c:	2001      	movs	r0, #1
		}
 801645e:	bd08      	pop	{r3, pc}
			if (length != 2) return false;
 8016460:	2000      	movs	r0, #0
 8016462:	e7fc      	b.n	801645e <_ZZN10Publishers12AddRegistersEvENUlPvtPttE1_4_FUNES0_tS1_t+0x12>

08016464 <_ZN10Publishers10StopTopicsEh>:
bool Publishers::StopTopics(uint8_t ID) {
 8016464:	b573      	push	{r0, r1, r4, r5, r6, lr}
	Publisher* publisher = FindPublisher(ID, &success);
 8016466:	f10d 0207 	add.w	r2, sp, #7
bool Publishers::StopTopics(uint8_t ID) {
 801646a:	4604      	mov	r4, r0
	Publisher* publisher = FindPublisher(ID, &success);
 801646c:	f7ff ff8c 	bl	8016388 <_ZN10Publishers13FindPublisherEhPb>
	if (!success) return false;
 8016470:	f89d 6007 	ldrb.w	r6, [sp, #7]
	Publisher* publisher = FindPublisher(ID, &success);
 8016474:	4605      	mov	r5, r0
	if (!success) return false;
 8016476:	b166      	cbz	r6, 8016492 <_ZN10Publishers10StopTopicsEh+0x2e>
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8016478:	f04f 31ff 	mov.w	r1, #4294967295
 801647c:	6820      	ldr	r0, [r4, #0]
 801647e:	f7f5 fe9d 	bl	800c1bc <osSemaphoreAcquire>
		topic.activated = false;
 8016482:	2100      	movs	r1, #0
 8016484:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
	for (Topic &topic : publisher->topics) {
 8016488:	429a      	cmp	r2, r3
 801648a:	d105      	bne.n	8016498 <_ZN10Publishers10StopTopicsEh+0x34>
	osSemaphoreRelease(PublishersSemaphore);
 801648c:	6820      	ldr	r0, [r4, #0]
 801648e:	f7f5 fec9 	bl	800c224 <osSemaphoreRelease>
}
 8016492:	4630      	mov	r0, r6
 8016494:	b002      	add	sp, #8
 8016496:	bd70      	pop	{r4, r5, r6, pc}
		topic.activated = false;
 8016498:	f803 1b04 	strb.w	r1, [r3], #4
	return *this;
 801649c:	e7f4      	b.n	8016488 <_ZN10Publishers10StopTopicsEh+0x24>

0801649e <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE2_4_FUNES0_tS1_t>:
			self->StopTopics(*input);
 801649e:	7811      	ldrb	r1, [r2, #0]
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 80164a0:	b508      	push	{r3, lr}
			self->StopTopics(*input);
 80164a2:	f7ff ffdf 	bl	8016464 <_ZN10Publishers10StopTopicsEh>
		}
 80164a6:	2001      	movs	r0, #1
 80164a8:	bd08      	pop	{r3, pc}

080164aa <_ZN10Publishers23UnlinkFromAllInterfacesEh>:
bool Publishers::UnlinkFromAllInterfaces(uint8_t ID) {
 80164aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
	Publisher* publisher = FindPublisher(ID, &success);
 80164ac:	f10d 0207 	add.w	r2, sp, #7
bool Publishers::UnlinkFromAllInterfaces(uint8_t ID) {
 80164b0:	4605      	mov	r5, r0
	Publisher* publisher = FindPublisher(ID, &success);
 80164b2:	f7ff ff69 	bl	8016388 <_ZN10Publishers13FindPublisherEhPb>
	if (!success) return false;
 80164b6:	f89d 6007 	ldrb.w	r6, [sp, #7]
	Publisher* publisher = FindPublisher(ID, &success);
 80164ba:	4604      	mov	r4, r0
	if (!success) return false;
 80164bc:	b166      	cbz	r6, 80164d8 <_ZN10Publishers23UnlinkFromAllInterfacesEh+0x2e>
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 80164be:	f04f 31ff 	mov.w	r1, #4294967295
 80164c2:	6828      	ldr	r0, [r5, #0]
 80164c4:	f7f5 fe7a 	bl	800c1bc <osSemaphoreAcquire>
	osSemaphoreRelease(PublishersSemaphore);
 80164c8:	6828      	ldr	r0, [r5, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 80164ca:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 80164ce:	4293      	cmp	r3, r2
	    this->_M_impl._M_finish = __pos;
 80164d0:	bf18      	it	ne
 80164d2:	60e3      	strne	r3, [r4, #12]
 80164d4:	f7f5 fea6 	bl	800c224 <osSemaphoreRelease>
}
 80164d8:	4630      	mov	r0, r6
 80164da:	b002      	add	sp, #8
 80164dc:	bd70      	pop	{r4, r5, r6, pc}

080164de <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE5_4_FUNES0_tS1_t>:
			self->UnlinkFromAllInterfaces(*input);
 80164de:	7811      	ldrb	r1, [r2, #0]
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 80164e0:	b508      	push	{r3, lr}
			self->UnlinkFromAllInterfaces(*input);
 80164e2:	f7ff ffe2 	bl	80164aa <_ZN10Publishers23UnlinkFromAllInterfacesEh>
		}
 80164e6:	2001      	movs	r0, #1
 80164e8:	bd08      	pop	{r3, pc}

080164ea <_ZN10Publishers9FindTopicEhtPb>:
 * @param input ID: the publisher ID
 * @param input topic_ID: the topic ID / register address to find
 * @param output success: whether successful
 * @return the topic pointer
 */
Topic* Publishers::FindTopic(uint8_t ID, uint16_t topic_ID, bool* success) {
 80164ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164ec:	461c      	mov	r4, r3
 80164ee:	4617      	mov	r7, r2
	Publisher* publisher = FindPublisher(ID, success);
 80164f0:	461a      	mov	r2, r3
Topic* Publishers::FindTopic(uint8_t ID, uint16_t topic_ID, bool* success) {
 80164f2:	4606      	mov	r6, r0
	Publisher* publisher = FindPublisher(ID, success);
 80164f4:	f7ff ff48 	bl	8016388 <_ZN10Publishers13FindPublisherEhPb>
	if (not *success)
 80164f8:	7823      	ldrb	r3, [r4, #0]
	Publisher* publisher = FindPublisher(ID, success);
 80164fa:	4605      	mov	r5, r0
	if (not *success)
 80164fc:	b173      	cbz	r3, 801651c <_ZN10Publishers9FindTopicEhtPb+0x32>
		return NULL;

	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 80164fe:	f04f 31ff 	mov.w	r1, #4294967295
 8016502:	6830      	ldr	r0, [r6, #0]
 8016504:	f7f5 fe5a 	bl	800c1bc <osSemaphoreAcquire>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8016508:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
	for (Topic &topic : publisher->topics) {
 801650c:	429a      	cmp	r2, r3
 801650e:	461d      	mov	r5, r3
 8016510:	d106      	bne.n	8016520 <_ZN10Publishers9FindTopicEhtPb+0x36>
			osSemaphoreRelease(PublishersSemaphore);
			*success = true;
			return topic_pointer;
		}
	}
	osSemaphoreRelease(PublishersSemaphore);
 8016512:	6830      	ldr	r0, [r6, #0]
 8016514:	f7f5 fe86 	bl	800c224 <osSemaphoreRelease>
	*success = false;
 8016518:	2300      	movs	r3, #0
 801651a:	7023      	strb	r3, [r4, #0]
		return NULL;
 801651c:	2500      	movs	r5, #0
 801651e:	e008      	b.n	8016532 <_ZN10Publishers9FindTopicEhtPb+0x48>
		if (topic.ID == topic_ID) {
 8016520:	8869      	ldrh	r1, [r5, #2]
 8016522:	1d2b      	adds	r3, r5, #4
 8016524:	42b9      	cmp	r1, r7
 8016526:	d1f1      	bne.n	801650c <_ZN10Publishers9FindTopicEhtPb+0x22>
			osSemaphoreRelease(PublishersSemaphore);
 8016528:	6830      	ldr	r0, [r6, #0]
 801652a:	f7f5 fe7b 	bl	800c224 <osSemaphoreRelease>
			*success = true;
 801652e:	2301      	movs	r3, #1
 8016530:	7023      	strb	r3, [r4, #0]
	return NULL;
}
 8016532:	4628      	mov	r0, r5
 8016534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016536 <_ZN10Publishers14SetTopicStatusEhtb>:
bool Publishers::SetTopicStatus(uint8_t ID, uint16_t topic_ID, bool status) {
 8016536:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016538:	461e      	mov	r6, r3
	Topic* topic = FindTopic(ID, topic_ID, &success);
 801653a:	f10d 0307 	add.w	r3, sp, #7
bool Publishers::SetTopicStatus(uint8_t ID, uint16_t topic_ID, bool status) {
 801653e:	4604      	mov	r4, r0
	Topic* topic = FindTopic(ID, topic_ID, &success);
 8016540:	f7ff ffd3 	bl	80164ea <_ZN10Publishers9FindTopicEhtPb>
	if (!success) return false;
 8016544:	f89d 7007 	ldrb.w	r7, [sp, #7]
	Topic* topic = FindTopic(ID, topic_ID, &success);
 8016548:	4605      	mov	r5, r0
	if (!success) return false;
 801654a:	b147      	cbz	r7, 801655e <_ZN10Publishers14SetTopicStatusEhtb+0x28>
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 801654c:	f04f 31ff 	mov.w	r1, #4294967295
 8016550:	6820      	ldr	r0, [r4, #0]
 8016552:	f7f5 fe33 	bl	800c1bc <osSemaphoreAcquire>
	osSemaphoreRelease(PublishersSemaphore);
 8016556:	6820      	ldr	r0, [r4, #0]
	topic->activated = status;
 8016558:	702e      	strb	r6, [r5, #0]
	osSemaphoreRelease(PublishersSemaphore);
 801655a:	f7f5 fe63 	bl	800c224 <osSemaphoreRelease>
}
 801655e:	4638      	mov	r0, r7
 8016560:	b003      	add	sp, #12
 8016562:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016564 <_ZN10Publishers13ActivateTopicEht>:
	return SetTopicStatus(ID, topic_ID, true);
 8016564:	2301      	movs	r3, #1
 8016566:	f7ff bfe6 	b.w	8016536 <_ZN10Publishers14SetTopicStatusEhtb>

0801656a <_ZZN10Publishers12AddRegistersEvENUlPvtPttE0_4_FUNES0_tS1_t>:
			if (length != 3) return false;
 801656a:	2b03      	cmp	r3, #3
		[](void* context, uint16_t register_id, uint16_t* input, uint16_t length) -> bool {
 801656c:	4611      	mov	r1, r2
 801656e:	b508      	push	{r3, lr}
			if (length != 3) return false;
 8016570:	d109      	bne.n	8016586 <_ZZN10Publishers12AddRegistersEvENUlPvtPttE0_4_FUNES0_tS1_t+0x1c>
			self->SetTopicStatus((uint8_t) input[0], input[1], (bool) input[2]);
 8016572:	8893      	ldrh	r3, [r2, #4]
 8016574:	7809      	ldrb	r1, [r1, #0]
 8016576:	3b00      	subs	r3, #0
 8016578:	8852      	ldrh	r2, [r2, #2]
 801657a:	bf18      	it	ne
 801657c:	2301      	movne	r3, #1
 801657e:	f7ff ffda 	bl	8016536 <_ZN10Publishers14SetTopicStatusEhtb>
			return true;
 8016582:	2001      	movs	r0, #1
		}
 8016584:	bd08      	pop	{r3, pc}
			if (length != 3) return false;
 8016586:	2000      	movs	r0, #0
 8016588:	e7fc      	b.n	8016584 <_ZZN10Publishers12AddRegistersEvENUlPvtPttE0_4_FUNES0_tS1_t+0x1a>

0801658a <_ZN10Publishers20FindPublishInterfaceEhhPb>:
 * @param input ID: the publisher ID
 * @param input interface_ID: the interface ID to find
 * @param output success: whether successful
 * @return the interface information pointer
 */
PublishInterface* Publishers::FindPublishInterface(uint8_t ID, uint8_t interface_ID, bool* success) {
 801658a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801658c:	461c      	mov	r4, r3
 801658e:	4617      	mov	r7, r2
	Publisher* publisher = FindPublisher(ID, success);
 8016590:	461a      	mov	r2, r3
PublishInterface* Publishers::FindPublishInterface(uint8_t ID, uint8_t interface_ID, bool* success) {
 8016592:	4605      	mov	r5, r0
	Publisher* publisher = FindPublisher(ID, success);
 8016594:	f7ff fef8 	bl	8016388 <_ZN10Publishers13FindPublisherEhPb>
	if (not *success)
 8016598:	7823      	ldrb	r3, [r4, #0]
	Publisher* publisher = FindPublisher(ID, success);
 801659a:	4606      	mov	r6, r0
	if (not *success)
 801659c:	b173      	cbz	r3, 80165bc <_ZN10Publishers20FindPublishInterfaceEhhPb+0x32>
		return NULL;

	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 801659e:	f04f 31ff 	mov.w	r1, #4294967295
 80165a2:	6828      	ldr	r0, [r5, #0]
 80165a4:	f7f5 fe0a 	bl	800c1bc <osSemaphoreAcquire>
 80165a8:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
	for (PublishInterface &interface : publisher->interfaces) {
 80165ac:	429a      	cmp	r2, r3
 80165ae:	461e      	mov	r6, r3
 80165b0:	d106      	bne.n	80165c0 <_ZN10Publishers20FindPublishInterfaceEhhPb+0x36>
			osSemaphoreRelease(PublishersSemaphore);
			*success = true;
			return publish_interface_pointer;
		}
	}
	osSemaphoreRelease(PublishersSemaphore);
 80165b2:	6828      	ldr	r0, [r5, #0]
 80165b4:	f7f5 fe36 	bl	800c224 <osSemaphoreRelease>
	*success = false;
 80165b8:	2300      	movs	r3, #0
 80165ba:	7023      	strb	r3, [r4, #0]
		return NULL;
 80165bc:	2600      	movs	r6, #0
 80165be:	e009      	b.n	80165d4 <_ZN10Publishers20FindPublishInterfaceEhhPb+0x4a>
		if (interface.interface == interface_ID) {
 80165c0:	4633      	mov	r3, r6
 80165c2:	f813 1b02 	ldrb.w	r1, [r3], #2
 80165c6:	42b9      	cmp	r1, r7
 80165c8:	d1f0      	bne.n	80165ac <_ZN10Publishers20FindPublishInterfaceEhhPb+0x22>
			osSemaphoreRelease(PublishersSemaphore);
 80165ca:	6828      	ldr	r0, [r5, #0]
 80165cc:	f7f5 fe2a 	bl	800c224 <osSemaphoreRelease>
			*success = true;
 80165d0:	2301      	movs	r3, #1
 80165d2:	7023      	strb	r3, [r4, #0]
	return NULL;
}
 80165d4:	4630      	mov	r0, r6
 80165d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080165d8 <_ZN10Publishers17SetPublishAddressEhhh>:
bool Publishers::SetPublishAddress(uint8_t ID, uint8_t interface_ID, uint8_t address) {
 80165d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80165da:	461e      	mov	r6, r3
	PublishInterface* interface = FindPublishInterface(ID, interface_ID, &success);
 80165dc:	f10d 0307 	add.w	r3, sp, #7
bool Publishers::SetPublishAddress(uint8_t ID, uint8_t interface_ID, uint8_t address) {
 80165e0:	4604      	mov	r4, r0
	PublishInterface* interface = FindPublishInterface(ID, interface_ID, &success);
 80165e2:	f7ff ffd2 	bl	801658a <_ZN10Publishers20FindPublishInterfaceEhhPb>
	if (success) return false;
 80165e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
	PublishInterface* interface = FindPublishInterface(ID, interface_ID, &success);
 80165ea:	4605      	mov	r5, r0
	if (success) return false;
 80165ec:	b95b      	cbnz	r3, 8016606 <_ZN10Publishers17SetPublishAddressEhhh+0x2e>
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 80165ee:	f04f 31ff 	mov.w	r1, #4294967295
 80165f2:	6820      	ldr	r0, [r4, #0]
 80165f4:	f7f5 fde2 	bl	800c1bc <osSemaphoreAcquire>
	interface->address = address;
 80165f8:	706e      	strb	r6, [r5, #1]
	osSemaphoreRelease(PublishersSemaphore);
 80165fa:	6820      	ldr	r0, [r4, #0]
 80165fc:	f7f5 fe12 	bl	800c224 <osSemaphoreRelease>
	return true;
 8016600:	2001      	movs	r0, #1
}
 8016602:	b002      	add	sp, #8
 8016604:	bd70      	pop	{r4, r5, r6, pc}
	if (success) return false;
 8016606:	2000      	movs	r0, #0
 8016608:	e7fb      	b.n	8016602 <_ZN10Publishers17SetPublishAddressEhhh+0x2a>

0801660a <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE6_4_FUNES0_tS1_t>:
			if (length != 3) return false;
 801660a:	2b03      	cmp	r3, #3
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 801660c:	4611      	mov	r1, r2
 801660e:	b508      	push	{r3, lr}
			if (length != 3) return false;
 8016610:	d106      	bne.n	8016620 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE6_4_FUNES0_tS1_t+0x16>
			self->SetPublishAddress(input[0], input[1], input[2]);
 8016612:	7893      	ldrb	r3, [r2, #2]
 8016614:	7809      	ldrb	r1, [r1, #0]
 8016616:	7852      	ldrb	r2, [r2, #1]
 8016618:	f7ff ffde 	bl	80165d8 <_ZN10Publishers17SetPublishAddressEhhh>
			return true;
 801661c:	2001      	movs	r0, #1
		}
 801661e:	bd08      	pop	{r3, pc}
			if (length != 3) return false;
 8016620:	2000      	movs	r0, #0
 8016622:	e7fc      	b.n	801661e <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE6_4_FUNES0_tS1_t+0x14>

08016624 <_ZN10Publishers25FindPublishInterfaceIndexEhhPb>:
 * @param input ID: the publisher ID
 * @param input interface_ID: the interface ID to find
 * @param output success: whether successful
 * @return the interface information index
 */
uint8_t Publishers::FindPublishInterfaceIndex(uint8_t ID, uint8_t interface_ID, bool* success) {
 8016624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016626:	461d      	mov	r5, r3
 8016628:	4617      	mov	r7, r2
	Publisher* publisher = FindPublisher(ID, success);
 801662a:	461a      	mov	r2, r3
uint8_t Publishers::FindPublishInterfaceIndex(uint8_t ID, uint8_t interface_ID, bool* success) {
 801662c:	4606      	mov	r6, r0
	Publisher* publisher = FindPublisher(ID, success);
 801662e:	f7ff feab 	bl	8016388 <_ZN10Publishers13FindPublisherEhPb>
	if (not *success)
 8016632:	782b      	ldrb	r3, [r5, #0]
	Publisher* publisher = FindPublisher(ID, success);
 8016634:	4604      	mov	r4, r0
	if (not *success)
 8016636:	b18b      	cbz	r3, 801665c <_ZN10Publishers25FindPublishInterfaceIndexEhhPb+0x38>
		return 0;

	uint8_t index = 0;
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8016638:	f04f 31ff 	mov.w	r1, #4294967295
 801663c:	6830      	ldr	r0, [r6, #0]
 801663e:	f7f5 fdbd 	bl	800c1bc <osSemaphoreAcquire>
	for (PublishInterface &interface : publisher->interfaces) {
 8016642:	2100      	movs	r1, #0
      : _M_current(__i) { }
 8016644:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
		if (interface.interface == interface_ID) {
 8016648:	1e9c      	subs	r4, r3, #2
	for (PublishInterface &interface : publisher->interfaces) {
 801664a:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 801664e:	4290      	cmp	r0, r2
 8016650:	d106      	bne.n	8016660 <_ZN10Publishers25FindPublishInterfaceIndexEhhPb+0x3c>
			*success = true;
			return index;
		}
		index++;
	}
	osSemaphoreRelease(PublishersSemaphore);
 8016652:	6830      	ldr	r0, [r6, #0]
 8016654:	f7f5 fde6 	bl	800c224 <osSemaphoreRelease>
	*success = false;
 8016658:	2300      	movs	r3, #0
 801665a:	702b      	strb	r3, [r5, #0]
		return 0;
 801665c:	2400      	movs	r4, #0
 801665e:	e00a      	b.n	8016676 <_ZN10Publishers25FindPublishInterfaceIndexEhhPb+0x52>
		if (interface.interface == interface_ID) {
 8016660:	1c4a      	adds	r2, r1, #1
 8016662:	f814 c012 	ldrb.w	ip, [r4, r2, lsl #1]
 8016666:	45bc      	cmp	ip, r7
 8016668:	d107      	bne.n	801667a <_ZN10Publishers25FindPublishInterfaceIndexEhhPb+0x56>
			osSemaphoreRelease(PublishersSemaphore);
 801666a:	6830      	ldr	r0, [r6, #0]
 801666c:	b2cc      	uxtb	r4, r1
 801666e:	f7f5 fdd9 	bl	800c224 <osSemaphoreRelease>
			*success = true;
 8016672:	2301      	movs	r3, #1
 8016674:	702b      	strb	r3, [r5, #0]
	return 0;
}
 8016676:	4620      	mov	r0, r4
 8016678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801667a:	4611      	mov	r1, r2
 801667c:	e7e5      	b.n	801664a <_ZN10Publishers25FindPublishInterfaceIndexEhhPb+0x26>

0801667e <_ZN10Publishers19UnlinkFromInterfaceEhh>:
bool Publishers::UnlinkFromInterface(uint8_t ID, uint8_t interface_ID) {
 801667e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016680:	4617      	mov	r7, r2
	Publisher* publisher = FindPublisher(ID, &success);
 8016682:	f10d 0207 	add.w	r2, sp, #7
bool Publishers::UnlinkFromInterface(uint8_t ID, uint8_t interface_ID) {
 8016686:	4605      	mov	r5, r0
 8016688:	460e      	mov	r6, r1
	Publisher* publisher = FindPublisher(ID, &success);
 801668a:	f7ff fe7d 	bl	8016388 <_ZN10Publishers13FindPublisherEhPb>
	if (!success) return false;
 801668e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	Publisher* publisher = FindPublisher(ID, &success);
 8016692:	4604      	mov	r4, r0
	if (!success) return false;
 8016694:	b91b      	cbnz	r3, 801669e <_ZN10Publishers19UnlinkFromInterfaceEhh+0x20>
 8016696:	2700      	movs	r7, #0
}
 8016698:	4638      	mov	r0, r7
 801669a:	b003      	add	sp, #12
 801669c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t index = FindPublishInterfaceIndex(ID, interface_ID, &success);
 801669e:	463a      	mov	r2, r7
 80166a0:	4631      	mov	r1, r6
 80166a2:	f10d 0307 	add.w	r3, sp, #7
 80166a6:	4628      	mov	r0, r5
 80166a8:	f7ff ffbc 	bl	8016624 <_ZN10Publishers25FindPublishInterfaceIndexEhhPb>
	if (!success) return false;
 80166ac:	f89d 7007 	ldrb.w	r7, [sp, #7]
	uint8_t index = FindPublishInterfaceIndex(ID, interface_ID, &success);
 80166b0:	4606      	mov	r6, r0
	if (!success) return false;
 80166b2:	2f00      	cmp	r7, #0
 80166b4:	d0ef      	beq.n	8016696 <_ZN10Publishers19UnlinkFromInterfaceEhh+0x18>
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 80166b6:	f04f 31ff 	mov.w	r1, #4294967295
 80166ba:	6828      	ldr	r0, [r5, #0]
 80166bc:	f7f5 fd7e 	bl	800c1bc <osSemaphoreAcquire>
      { return __normal_iterator(_M_current + __n); }
 80166c0:	68a0      	ldr	r0, [r4, #8]
 80166c2:	b236      	sxth	r6, r6
      : _M_current(__i) { }
 80166c4:	68e2      	ldr	r2, [r4, #12]
      { return __normal_iterator(_M_current + __n); }
 80166c6:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 80166ca:	1c81      	adds	r1, r0, #2
      if (__position + 1 != end())
 80166cc:	4291      	cmp	r1, r2
 80166ce:	d002      	beq.n	80166d6 <_ZN10Publishers19UnlinkFromInterfaceEhh+0x58>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80166d0:	1a52      	subs	r2, r2, r1
 80166d2:	f003 fa2f 	bl	8019b34 <memmove>
      --this->_M_impl._M_finish;
 80166d6:	68e3      	ldr	r3, [r4, #12]
	osSemaphoreRelease(PublishersSemaphore);
 80166d8:	6828      	ldr	r0, [r5, #0]
 80166da:	3b02      	subs	r3, #2
 80166dc:	60e3      	str	r3, [r4, #12]
 80166de:	f7f5 fda1 	bl	800c224 <osSemaphoreRelease>
	return true;
 80166e2:	e7d9      	b.n	8016698 <_ZN10Publishers19UnlinkFromInterfaceEhh+0x1a>

080166e4 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE4_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 80166e4:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 80166e6:	4611      	mov	r1, r2
 80166e8:	b508      	push	{r3, lr}
			if (length != 2) return false;
 80166ea:	d105      	bne.n	80166f8 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE4_4_FUNES0_tS1_t+0x14>
			self->UnlinkFromInterface(input[0], input[1]);
 80166ec:	7852      	ldrb	r2, [r2, #1]
 80166ee:	7809      	ldrb	r1, [r1, #0]
 80166f0:	f7ff ffc5 	bl	801667e <_ZN10Publishers19UnlinkFromInterfaceEhh>
 80166f4:	2001      	movs	r0, #1
		}
 80166f6:	bd08      	pop	{r3, pc}
			if (length != 2) return false;
 80166f8:	2000      	movs	r0, #0
 80166fa:	e7fc      	b.n	80166f6 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE4_4_FUNES0_tS1_t+0x12>

080166fc <_ZNSt12_Vector_baseI16PublishInterfaceSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80166fc:	b510      	push	{r4, lr}
 80166fe:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8016700:	6800      	ldr	r0, [r0, #0]
	if (__p)
 8016702:	b118      	cbz	r0, 801670c <_ZNSt12_Vector_baseI16PublishInterfaceSaIS0_EED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8016704:	68a1      	ldr	r1, [r4, #8]
 8016706:	1a09      	subs	r1, r1, r0
 8016708:	f003 f862 	bl	80197d0 <_ZdlPvj>
      }
 801670c:	4620      	mov	r0, r4
 801670e:	bd10      	pop	{r4, pc}

08016710 <_ZNSt12_Vector_baseI5TopicSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8016710:	b510      	push	{r4, lr}
 8016712:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8016714:	6800      	ldr	r0, [r0, #0]
	if (__p)
 8016716:	b118      	cbz	r0, 8016720 <_ZNSt12_Vector_baseI5TopicSaIS0_EED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8016718:	68a1      	ldr	r1, [r4, #8]
 801671a:	1a09      	subs	r1, r1, r0
 801671c:	f003 f858 	bl	80197d0 <_ZdlPvj>
      }
 8016720:	4620      	mov	r0, r4
 8016722:	bd10      	pop	{r4, pc}

08016724 <_ZN9PublisherD1Ev>:
struct Publisher {
 8016724:	b510      	push	{r4, lr}
 8016726:	4604      	mov	r4, r0
      }
 8016728:	3014      	adds	r0, #20
 801672a:	f7ff fff1 	bl	8016710 <_ZNSt12_Vector_baseI5TopicSaIS0_EED1Ev>
 801672e:	f104 0008 	add.w	r0, r4, #8
 8016732:	f7ff ffe3 	bl	80166fc <_ZNSt12_Vector_baseI16PublishInterfaceSaIS0_EED1Ev>
 8016736:	4620      	mov	r0, r4
 8016738:	bd10      	pop	{r4, pc}

0801673a <_ZN10PublishersC1Ev>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 801673a:	2200      	movs	r2, #0
 801673c:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8016740:	6142      	str	r2, [r0, #20]
}
 8016742:	4770      	bx	lr

08016744 <_ZSt14__relocate_a_1IP9PublisherS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 8016744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016746:	4604      	mov	r4, r0
 8016748:	460f      	mov	r7, r1
 801674a:	4615      	mov	r5, r2
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 801674c:	2600      	movs	r6, #0
      for (; __first != __last; ++__first, (void)++__cur)
 801674e:	42bc      	cmp	r4, r7
 8016750:	4628      	mov	r0, r5
 8016752:	f105 0520 	add.w	r5, r5, #32
 8016756:	d100      	bne.n	801675a <_ZSt14__relocate_a_1IP9PublisherS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0+0x16>
    }
 8016758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801675a:	7823      	ldrb	r3, [r4, #0]

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 801675c:	4620      	mov	r0, r4
 801675e:	f805 3c20 	strb.w	r3, [r5, #-32]
 8016762:	7863      	ldrb	r3, [r4, #1]
 8016764:	f805 3c1f 	strb.w	r3, [r5, #-31]
 8016768:	8863      	ldrh	r3, [r4, #2]
 801676a:	f825 3c1e 	strh.w	r3, [r5, #-30]
 801676e:	88a3      	ldrh	r3, [r4, #4]
 8016770:	f825 3c1c 	strh.w	r3, [r5, #-28]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8016774:	68a3      	ldr	r3, [r4, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8016776:	60a6      	str	r6, [r4, #8]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8016778:	f845 3c18 	str.w	r3, [r5, #-24]
 801677c:	68e3      	ldr	r3, [r4, #12]
 801677e:	f845 3c14 	str.w	r3, [r5, #-20]
	  _M_end_of_storage(__x._M_end_of_storage)
 8016782:	6923      	ldr	r3, [r4, #16]
 8016784:	f845 3c10 	str.w	r3, [r5, #-16]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8016788:	6963      	ldr	r3, [r4, #20]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 801678a:	6166      	str	r6, [r4, #20]
 801678c:	e9c4 6603 	strd	r6, r6, [r4, #12]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8016790:	f845 3c0c 	str.w	r3, [r5, #-12]
 8016794:	69a3      	ldr	r3, [r4, #24]
 8016796:	f845 3c08 	str.w	r3, [r5, #-8]
	  _M_end_of_storage(__x._M_end_of_storage)
 801679a:	69e3      	ldr	r3, [r4, #28]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 801679c:	e9c4 6606 	strd	r6, r6, [r4, #24]
	  _M_end_of_storage(__x._M_end_of_storage)
 80167a0:	f845 3c04 	str.w	r3, [r5, #-4]
      for (; __first != __last; ++__first, (void)++__cur)
 80167a4:	3420      	adds	r4, #32
 80167a6:	f7ff ffbd 	bl	8016724 <_ZN9PublisherD1Ev>
 80167aa:	e7d0      	b.n	801674e <_ZSt14__relocate_a_1IP9PublisherS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0+0xa>

080167ac <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80167ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80167b0:	e9d0 8a00 	ldrd	r8, sl, [r0]
 80167b4:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 80167b6:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80167ba:	ebaa 0208 	sub.w	r2, sl, r8
 80167be:	4607      	mov	r7, r0
 80167c0:	4689      	mov	r9, r1
	if (max_size() - size() < __n)
 80167c2:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80167c6:	ea4f 04a2 	mov.w	r4, r2, asr #2
	if (max_size() - size() < __n)
 80167ca:	d102      	bne.n	80167d2 <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 80167cc:	481e      	ldr	r0, [pc, #120]	@ (8016848 <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9c>)
 80167ce:	f003 f8d9 	bl	8019984 <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 80167d2:	45c2      	cmp	sl, r8
 80167d4:	bf14      	ite	ne
 80167d6:	4622      	movne	r2, r4
 80167d8:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 80167da:	eba1 0508 	sub.w	r5, r1, r8
 80167de:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80167e0:	d22e      	bcs.n	8016840 <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x94>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80167e2:	b37c      	cbz	r4, 8016844 <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x98>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80167e4:	429c      	cmp	r4, r3
 80167e6:	bf28      	it	cs
 80167e8:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80167ea:	00a0      	lsls	r0, r4, #2
 80167ec:	f003 f815 	bl	801981a <_Znwj>
 80167f0:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80167f2:	f8db 3000 	ldr.w	r3, [fp]
      if (__count > 0)
 80167f6:	2d00      	cmp	r5, #0
 80167f8:	5173      	str	r3, [r6, r5]
 80167fa:	dd04      	ble.n	8016806 <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x5a>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80167fc:	462a      	mov	r2, r5
 80167fe:	4641      	mov	r1, r8
 8016800:	4630      	mov	r0, r6
 8016802:	f003 f997 	bl	8019b34 <memmove>
      ptrdiff_t __count = __last - __first;
 8016806:	ebaa 0a09 	sub.w	sl, sl, r9
	      ++__new_finish;
 801680a:	3504      	adds	r5, #4
      if (__count > 0)
 801680c:	f1ba 0f00 	cmp.w	sl, #0
 8016810:	4435      	add	r5, r6
 8016812:	dd04      	ble.n	801681e <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x72>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8016814:	4652      	mov	r2, sl
 8016816:	4649      	mov	r1, r9
 8016818:	4628      	mov	r0, r5
 801681a:	f003 fa83 	bl	8019d24 <memcpy>
      return __result + __count;
 801681e:	4455      	add	r5, sl
	if (__p)
 8016820:	f1b8 0f00 	cmp.w	r8, #0
 8016824:	d005      	beq.n	8016832 <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x86>
		    this->_M_impl._M_end_of_storage - __old_start);
 8016826:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8016828:	4640      	mov	r0, r8
 801682a:	eba1 0108 	sub.w	r1, r1, r8
 801682e:	f002 ffcf 	bl	80197d0 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8016832:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8016836:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 801683a:	60be      	str	r6, [r7, #8]
    }
 801683c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8016840:	461c      	mov	r4, r3
 8016842:	e7d2      	b.n	80167ea <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8016844:	4626      	mov	r6, r4
 8016846:	e7d4      	b.n	80167f2 <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 8016848:	08019e3e 	.word	0x08019e3e

0801684c <_ZN10Publishers8AddTopicEht>:
bool Publishers::AddTopic(uint8_t ID, uint16_t topic_ID) {
 801684c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016850:	4616      	mov	r6, r2
	Publisher* publisher = FindPublisher(ID, &success);
 8016852:	f10d 0203 	add.w	r2, sp, #3
bool Publishers::AddTopic(uint8_t ID, uint16_t topic_ID) {
 8016856:	4605      	mov	r5, r0
 8016858:	4688      	mov	r8, r1
	Publisher* publisher = FindPublisher(ID, &success);
 801685a:	f7ff fd95 	bl	8016388 <_ZN10Publishers13FindPublisherEhPb>
	if (!success) return false;
 801685e:	f89d 7003 	ldrb.w	r7, [sp, #3]
	Publisher* publisher = FindPublisher(ID, &success);
 8016862:	4604      	mov	r4, r0
	if (!success) return false;
 8016864:	b927      	cbnz	r7, 8016870 <_ZN10Publishers8AddTopicEht+0x24>
 8016866:	2700      	movs	r7, #0
}
 8016868:	4638      	mov	r0, r7
 801686a:	b002      	add	sp, #8
 801686c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	FindTopic(ID, topic_ID, &success);
 8016870:	f10d 0303 	add.w	r3, sp, #3
 8016874:	4632      	mov	r2, r6
 8016876:	4641      	mov	r1, r8
 8016878:	4628      	mov	r0, r5
 801687a:	f7ff fe36 	bl	80164ea <_ZN10Publishers9FindTopicEhtPb>
	if (success) return false;
 801687e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8016882:	2b00      	cmp	r3, #0
 8016884:	d1ef      	bne.n	8016866 <_ZN10Publishers8AddTopicEht+0x1a>
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8016886:	f04f 31ff 	mov.w	r1, #4294967295
 801688a:	6828      	ldr	r0, [r5, #0]
	topic.activated = false;
 801688c:	f88d 3004 	strb.w	r3, [sp, #4]
	topic.ID = topic_ID;
 8016890:	f8ad 6006 	strh.w	r6, [sp, #6]
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8016894:	f7f5 fc92 	bl	800c1bc <osSemaphoreAcquire>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8016898:	e9d4 1306 	ldrd	r1, r3, [r4, #24]
 801689c:	4299      	cmp	r1, r3
 801689e:	d007      	beq.n	80168b0 <_ZN10Publishers8AddTopicEht+0x64>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80168a0:	9801      	ldr	r0, [sp, #4]
 80168a2:	f841 0b04 	str.w	r0, [r1], #4
	    ++this->_M_impl._M_finish;
 80168a6:	61a1      	str	r1, [r4, #24]
	osSemaphoreRelease(PublishersSemaphore);
 80168a8:	6828      	ldr	r0, [r5, #0]
 80168aa:	f7f5 fcbb 	bl	800c224 <osSemaphoreRelease>
	return true;
 80168ae:	e7db      	b.n	8016868 <_ZN10Publishers8AddTopicEht+0x1c>
	  _M_realloc_insert(end(), __x);
 80168b0:	aa01      	add	r2, sp, #4
 80168b2:	f104 0014 	add.w	r0, r4, #20
 80168b6:	f7ff ff79 	bl	80167ac <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 80168ba:	e7f5      	b.n	80168a8 <_ZN10Publishers8AddTopicEht+0x5c>

080168bc <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80168bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80168c0:	e9d0 8a00 	ldrd	r8, sl, [r0]
 80168c4:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 80168c6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80168ca:	ebaa 0208 	sub.w	r2, sl, r8
 80168ce:	4607      	mov	r7, r0
 80168d0:	4689      	mov	r9, r1
	if (max_size() - size() < __n)
 80168d2:	ebb3 0f62 	cmp.w	r3, r2, asr #1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80168d6:	ea4f 0462 	mov.w	r4, r2, asr #1
	if (max_size() - size() < __n)
 80168da:	d102      	bne.n	80168e2 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 80168dc:	481e      	ldr	r0, [pc, #120]	@ (8016958 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9c>)
 80168de:	f003 f851 	bl	8019984 <_ZSt20__throw_length_errorPKc>
 80168e2:	45c2      	cmp	sl, r8
 80168e4:	bf14      	ite	ne
 80168e6:	4622      	movne	r2, r4
 80168e8:	2201      	moveq	r2, #1
 80168ea:	eba1 0508 	sub.w	r5, r1, r8
 80168ee:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80168f0:	d22e      	bcs.n	8016950 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x94>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80168f2:	b37c      	cbz	r4, 8016954 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x98>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80168f4:	429c      	cmp	r4, r3
 80168f6:	bf28      	it	cs
 80168f8:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80168fa:	0060      	lsls	r0, r4, #1
 80168fc:	f002 ff8d 	bl	801981a <_Znwj>
 8016900:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8016902:	f8bb 3000 	ldrh.w	r3, [fp]
      if (__count > 0)
 8016906:	2d00      	cmp	r5, #0
 8016908:	5373      	strh	r3, [r6, r5]
 801690a:	dd04      	ble.n	8016916 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x5a>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801690c:	462a      	mov	r2, r5
 801690e:	4641      	mov	r1, r8
 8016910:	4630      	mov	r0, r6
 8016912:	f003 f90f 	bl	8019b34 <memmove>
      ptrdiff_t __count = __last - __first;
 8016916:	ebaa 0a09 	sub.w	sl, sl, r9
	      ++__new_finish;
 801691a:	3502      	adds	r5, #2
      if (__count > 0)
 801691c:	f1ba 0f00 	cmp.w	sl, #0
 8016920:	4435      	add	r5, r6
 8016922:	dd04      	ble.n	801692e <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x72>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8016924:	4652      	mov	r2, sl
 8016926:	4649      	mov	r1, r9
 8016928:	4628      	mov	r0, r5
 801692a:	f003 f9fb 	bl	8019d24 <memcpy>
      return __result + __count;
 801692e:	4455      	add	r5, sl
	if (__p)
 8016930:	f1b8 0f00 	cmp.w	r8, #0
 8016934:	d005      	beq.n	8016942 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x86>
		    this->_M_impl._M_end_of_storage - __old_start);
 8016936:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8016938:	4640      	mov	r0, r8
 801693a:	eba1 0108 	sub.w	r1, r1, r8
 801693e:	f002 ff47 	bl	80197d0 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8016942:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8016946:	eb06 0644 	add.w	r6, r6, r4, lsl #1
 801694a:	60be      	str	r6, [r7, #8]
    }
 801694c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8016950:	461c      	mov	r4, r3
 8016952:	e7d2      	b.n	80168fa <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8016954:	4626      	mov	r6, r4
 8016956:	e7d4      	b.n	8016902 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 8016958:	08019e3e 	.word	0x08019e3e

0801695c <_ZN10Publishers15LinkToInterfaceEhh>:
bool Publishers::LinkToInterface(uint8_t ID, uint8_t interface_ID) {
 801695c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016960:	4616      	mov	r6, r2
	Publisher* publisher = FindPublisher(ID, &success);
 8016962:	f10d 0203 	add.w	r2, sp, #3
bool Publishers::LinkToInterface(uint8_t ID, uint8_t interface_ID) {
 8016966:	4605      	mov	r5, r0
 8016968:	4688      	mov	r8, r1
	Publisher* publisher = FindPublisher(ID, &success);
 801696a:	f7ff fd0d 	bl	8016388 <_ZN10Publishers13FindPublisherEhPb>
	if (!success) return false;
 801696e:	f89d 7003 	ldrb.w	r7, [sp, #3]
	Publisher* publisher = FindPublisher(ID, &success);
 8016972:	4604      	mov	r4, r0
	if (!success) return false;
 8016974:	b927      	cbnz	r7, 8016980 <_ZN10Publishers15LinkToInterfaceEhh+0x24>
 8016976:	2700      	movs	r7, #0
}
 8016978:	4638      	mov	r0, r7
 801697a:	b002      	add	sp, #8
 801697c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	FindPublishInterface(ID, interface_ID, &success);
 8016980:	f10d 0303 	add.w	r3, sp, #3
 8016984:	4632      	mov	r2, r6
 8016986:	4641      	mov	r1, r8
 8016988:	4628      	mov	r0, r5
 801698a:	f7ff fdfe 	bl	801658a <_ZN10Publishers20FindPublishInterfaceEhhPb>
	if (success) return false;
 801698e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8016992:	2b00      	cmp	r3, #0
 8016994:	d1ef      	bne.n	8016976 <_ZN10Publishers15LinkToInterfaceEhh+0x1a>
	interface.address = ALL;
 8016996:	23ff      	movs	r3, #255	@ 0xff
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8016998:	f04f 31ff 	mov.w	r1, #4294967295
 801699c:	6828      	ldr	r0, [r5, #0]
	interface.address = ALL;
 801699e:	f88d 3005 	strb.w	r3, [sp, #5]
	interface.interface = interface_ID;
 80169a2:	f88d 6004 	strb.w	r6, [sp, #4]
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 80169a6:	f7f5 fc09 	bl	800c1bc <osSemaphoreAcquire>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80169aa:	e9d4 1303 	ldrd	r1, r3, [r4, #12]
 80169ae:	4299      	cmp	r1, r3
 80169b0:	d008      	beq.n	80169c4 <_ZN10Publishers15LinkToInterfaceEhh+0x68>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80169b2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80169b6:	f821 3b02 	strh.w	r3, [r1], #2
	    ++this->_M_impl._M_finish;
 80169ba:	60e1      	str	r1, [r4, #12]
	osSemaphoreRelease(PublishersSemaphore);
 80169bc:	6828      	ldr	r0, [r5, #0]
 80169be:	f7f5 fc31 	bl	800c224 <osSemaphoreRelease>
	return true;
 80169c2:	e7d9      	b.n	8016978 <_ZN10Publishers15LinkToInterfaceEhh+0x1c>
	  _M_realloc_insert(end(), __x);
 80169c4:	aa01      	add	r2, sp, #4
 80169c6:	f104 0008 	add.w	r0, r4, #8
 80169ca:	f7ff ff77 	bl	80168bc <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 80169ce:	e7f5      	b.n	80169bc <_ZN10Publishers15LinkToInterfaceEhh+0x60>

080169d0 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 80169d0:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 80169d2:	4611      	mov	r1, r2
 80169d4:	b508      	push	{r3, lr}
			if (length != 2) return false;
 80169d6:	d105      	bne.n	80169e4 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x14>
			self->LinkToInterface(input[0], input[1]);
 80169d8:	7852      	ldrb	r2, [r2, #1]
 80169da:	7809      	ldrb	r1, [r1, #0]
 80169dc:	f7ff ffbe 	bl	801695c <_ZN10Publishers15LinkToInterfaceEhh>
 80169e0:	2001      	movs	r0, #1
		}
 80169e2:	bd08      	pop	{r3, pc}
			if (length != 2) return false;
 80169e4:	2000      	movs	r0, #0
 80169e6:	e7fc      	b.n	80169e2 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x12>

080169e8 <_ZN9Registers11AddRegisterItEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 80169e8:	b570      	push	{r4, r5, r6, lr}
 80169ea:	4604      	mov	r4, r0
 80169ec:	b086      	sub	sp, #24
 80169ee:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80169f0:	6800      	ldr	r0, [r0, #0]
 80169f2:	f04f 31ff 	mov.w	r1, #4294967295
 80169f6:	f7f5 fbe1 	bl	800c1bc <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 80169fa:	f10d 0207 	add.w	r2, sp, #7
 80169fe:	4631      	mov	r1, r6
 8016a00:	4620      	mov	r0, r4
 8016a02:	f000 fb66 	bl	80170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 8016a06:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8016a0a:	b125      	cbz	r5, 8016a16 <_ZN9Registers11AddRegisterItEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 8016a0c:	6820      	ldr	r0, [r4, #0]
 8016a0e:	f7f5 fc09 	bl	800c224 <osSemaphoreRelease>
}
 8016a12:	b006      	add	sp, #24
 8016a14:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8016a16:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 8016a1a:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8016a1e:	f7ff fbe1 	bl	80161e4 <_ZN9Registers9GetTypeIDItEEhPb.isra.0>
	configuration_.register_info = register_;
 8016a22:	2301      	movs	r3, #1
 8016a24:	f8ad 600a 	strh.w	r6, [sp, #10]
 8016a28:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 8016a2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 8016a30:	f88d 000c 	strb.w	r0, [sp, #12]
 8016a34:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 8016a38:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	d0e5      	beq.n	8016a0c <_ZN9Registers11AddRegisterItEEbt.isra.0+0x24>
		registers.push_back(configuration_);
 8016a40:	a902      	add	r1, sp, #8
 8016a42:	1d20      	adds	r0, r4, #4
 8016a44:	f7fd ff53 	bl	80148ee <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 8016a48:	e7e0      	b.n	8016a0c <_ZN9Registers11AddRegisterItEEbt.isra.0+0x24>

08016a4a <_ZN9Registers11AddRegisterIhEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 8016a4a:	b570      	push	{r4, r5, r6, lr}
 8016a4c:	4604      	mov	r4, r0
 8016a4e:	b086      	sub	sp, #24
 8016a50:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8016a52:	6800      	ldr	r0, [r0, #0]
 8016a54:	f04f 31ff 	mov.w	r1, #4294967295
 8016a58:	f7f5 fbb0 	bl	800c1bc <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 8016a5c:	f10d 0207 	add.w	r2, sp, #7
 8016a60:	4631      	mov	r1, r6
 8016a62:	4620      	mov	r0, r4
 8016a64:	f000 fb35 	bl	80170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 8016a68:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8016a6c:	b125      	cbz	r5, 8016a78 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 8016a6e:	6820      	ldr	r0, [r4, #0]
 8016a70:	f7f5 fbd8 	bl	800c224 <osSemaphoreRelease>
}
 8016a74:	b006      	add	sp, #24
 8016a76:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8016a78:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 8016a7c:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8016a80:	f7ff fc12 	bl	80162a8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	configuration_.register_info = register_;
 8016a84:	2301      	movs	r3, #1
 8016a86:	f8ad 600a 	strh.w	r6, [sp, #10]
 8016a8a:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 8016a8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 8016a92:	f88d 000c 	strb.w	r0, [sp, #12]
 8016a96:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 8016a9a:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	d0e5      	beq.n	8016a6e <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
		registers.push_back(configuration_);
 8016aa2:	a902      	add	r1, sp, #8
 8016aa4:	1d20      	adds	r0, r4, #4
 8016aa6:	f7fd ff22 	bl	80148ee <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 8016aaa:	e7e0      	b.n	8016a6e <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>

08016aac <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8016aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ab0:	460d      	mov	r5, r1
 8016ab2:	b086      	sub	sp, #24
 8016ab4:	4606      	mov	r6, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8016ab6:	f04f 31ff 	mov.w	r1, #4294967295
 8016aba:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8016abc:	461c      	mov	r4, r3
 8016abe:	4690      	mov	r8, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8016ac0:	f7f5 fb7c 	bl	800c1bc <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8016ac4:	4629      	mov	r1, r5
 8016ac6:	f10d 0207 	add.w	r2, sp, #7
 8016aca:	4630      	mov	r0, r6
 8016acc:	f000 fb01 	bl	80170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8016ad0:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8016ad4:	4605      	mov	r5, r0
	if (!success) {
 8016ad6:	b92b      	cbnz	r3, 8016ae4 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x38>
	osSemaphoreRelease(RegistersSemaphore);
 8016ad8:	6830      	ldr	r0, [r6, #0]
 8016ada:	f7f5 fba3 	bl	800c224 <osSemaphoreRelease>
}
 8016ade:	b006      	add	sp, #24
 8016ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8016ae4:	f10d 0007 	add.w	r0, sp, #7
 8016ae8:	f7ff fbde 	bl	80162a8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 8016aec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	d0f1      	beq.n	8016ad8 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (target_register->register_info.type != registered_type) {
 8016af4:	792b      	ldrb	r3, [r5, #4]
 8016af6:	4298      	cmp	r0, r3
 8016af8:	d1ee      	bne.n	8016ad8 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (callbacks[target_register->register_info.type] == NULL) {
 8016afa:	3004      	adds	r0, #4
 8016afc:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
 8016b00:	2f00      	cmp	r7, #0
 8016b02:	d0e9      	beq.n	8016ad8 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 8016b04:	782b      	ldrb	r3, [r5, #0]
 8016b06:	b9db      	cbnz	r3, 8016b40 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x94>
 8016b08:	786b      	ldrb	r3, [r5, #1]
 8016b0a:	b9cb      	cbnz	r3, 8016b40 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x94>
		callback.read = NULL;
 8016b0c:	9305      	str	r3, [sp, #20]
      size() const _GLIBCXX_NOEXCEPT
 8016b0e:	aa02      	add	r2, sp, #8
		callback.write = write;
 8016b10:	e9cd 8403 	strd	r8, r4, [sp, #12]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016b14:	e9d7 3400 	ldrd	r3, r4, [r7]
 8016b18:	1ae3      	subs	r3, r4, r3
 8016b1a:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8016b1c:	816b      	strh	r3, [r5, #10]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8016b1e:	68bb      	ldr	r3, [r7, #8]
 8016b20:	429c      	cmp	r4, r3
 8016b22:	d008      	beq.n	8016b36 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x8a>
 8016b24:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8016b26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8016b2a:	3410      	adds	r4, #16
 8016b2c:	607c      	str	r4, [r7, #4]
	target_register->mode.callbacks = true;
 8016b2e:	2301      	movs	r3, #1
 8016b30:	706b      	strb	r3, [r5, #1]
	target_register->access.write = true;
 8016b32:	722b      	strb	r3, [r5, #8]
 8016b34:	e7d0      	b.n	8016ad8 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	  _M_realloc_insert(end(), __x);
 8016b36:	4621      	mov	r1, r4
 8016b38:	4638      	mov	r0, r7
 8016b3a:	f7f8 f9e9 	bl	800ef10 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	} else {
 8016b3e:	e7f6      	b.n	8016b2e <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x82>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8016b40:	8969      	ldrh	r1, [r5, #10]
 8016b42:	4638      	mov	r0, r7
 8016b44:	f7f8 f89c 	bl	800ec80 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
		callback->write = write;
 8016b48:	e9c0 8401 	strd	r8, r4, [r0, #4]
 8016b4c:	e7ef      	b.n	8016b2e <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x82>
	...

08016b50 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8016b50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016b54:	e9d0 8900 	ldrd	r8, r9, [r0]
 8016b58:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 8016b5a:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016b5e:	eba9 0208 	sub.w	r2, r9, r8
 8016b62:	4607      	mov	r7, r0
 8016b64:	468a      	mov	sl, r1
	if (max_size() - size() < __n)
 8016b66:	ebb3 1f22 	cmp.w	r3, r2, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016b6a:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
 8016b6e:	d102      	bne.n	8016b76 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8016b70:	4820      	ldr	r0, [pc, #128]	@ (8016bf4 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa4>)
 8016b72:	f002 ff07 	bl	8019984 <_ZSt20__throw_length_errorPKc>
 8016b76:	45c1      	cmp	r9, r8
 8016b78:	bf14      	ite	ne
 8016b7a:	4622      	movne	r2, r4
 8016b7c:	2201      	moveq	r2, #1
 8016b7e:	eba1 0508 	sub.w	r5, r1, r8
 8016b82:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8016b84:	d231      	bcs.n	8016bea <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8016b86:	b394      	cbz	r4, 8016bee <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9e>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8016b88:	429c      	cmp	r4, r3
 8016b8a:	bf28      	it	cs
 8016b8c:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8016b8e:	0120      	lsls	r0, r4, #4
 8016b90:	f002 fe43 	bl	801981a <_Znwj>
 8016b94:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8016b96:	eb06 0c05 	add.w	ip, r6, r5
      if (__count > 0)
 8016b9a:	2d00      	cmp	r5, #0
 8016b9c:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8016ba0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8016ba4:	dd04      	ble.n	8016bb0 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x60>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8016ba6:	462a      	mov	r2, r5
 8016ba8:	4641      	mov	r1, r8
 8016baa:	4630      	mov	r0, r6
 8016bac:	f002 ffc2 	bl	8019b34 <memmove>
      ptrdiff_t __count = __last - __first;
 8016bb0:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
 8016bb4:	3510      	adds	r5, #16
      if (__count > 0)
 8016bb6:	f1b9 0f00 	cmp.w	r9, #0
 8016bba:	4435      	add	r5, r6
 8016bbc:	dd04      	ble.n	8016bc8 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x78>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8016bbe:	464a      	mov	r2, r9
 8016bc0:	4651      	mov	r1, sl
 8016bc2:	4628      	mov	r0, r5
 8016bc4:	f003 f8ae 	bl	8019d24 <memcpy>
      return __result + __count;
 8016bc8:	444d      	add	r5, r9
	if (__p)
 8016bca:	f1b8 0f00 	cmp.w	r8, #0
 8016bce:	d005      	beq.n	8016bdc <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
 8016bd0:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8016bd2:	4640      	mov	r0, r8
 8016bd4:	eba1 0108 	sub.w	r1, r1, r8
 8016bd8:	f002 fdfa 	bl	80197d0 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8016bdc:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8016be0:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 8016be4:	60be      	str	r6, [r7, #8]
    }
 8016be6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8016bea:	461c      	mov	r4, r3
 8016bec:	e7cf      	b.n	8016b8e <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8016bee:	4626      	mov	r6, r4
 8016bf0:	e7d1      	b.n	8016b96 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
 8016bf2:	bf00      	nop
 8016bf4:	08019e3e 	.word	0x08019e3e

08016bf8 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8016bf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016bfc:	460c      	mov	r4, r1
 8016bfe:	b087      	sub	sp, #28
 8016c00:	4606      	mov	r6, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8016c02:	f04f 31ff 	mov.w	r1, #4294967295
 8016c06:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8016c08:	4698      	mov	r8, r3
 8016c0a:	4691      	mov	r9, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8016c0c:	f7f5 fad6 	bl	800c1bc <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8016c10:	4621      	mov	r1, r4
 8016c12:	f10d 0207 	add.w	r2, sp, #7
 8016c16:	4630      	mov	r0, r6
 8016c18:	f000 fa5b 	bl	80170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8016c1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8016c20:	4604      	mov	r4, r0
	if (!success) {
 8016c22:	b92b      	cbnz	r3, 8016c30 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x38>
	osSemaphoreRelease(RegistersSemaphore);
 8016c24:	6830      	ldr	r0, [r6, #0]
 8016c26:	f7f5 fafd 	bl	800c224 <osSemaphoreRelease>
}
 8016c2a:	b007      	add	sp, #28
 8016c2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8016c30:	f10d 0007 	add.w	r0, sp, #7
 8016c34:	f7ff fad6 	bl	80161e4 <_ZN9Registers9GetTypeIDItEEhPb.isra.0>
	if (!success) {
 8016c38:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	d0f1      	beq.n	8016c24 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (target_register->register_info.type != registered_type) {
 8016c40:	7923      	ldrb	r3, [r4, #4]
 8016c42:	4298      	cmp	r0, r3
 8016c44:	d1ee      	bne.n	8016c24 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (callbacks[target_register->register_info.type] == NULL) {
 8016c46:	3004      	adds	r0, #4
 8016c48:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
 8016c4c:	2f00      	cmp	r7, #0
 8016c4e:	d0e9      	beq.n	8016c24 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 8016c50:	7821      	ldrb	r1, [r4, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016c52:	e9d7 3500 	ldrd	r3, r5, [r7]
 8016c56:	1aea      	subs	r2, r5, r3
 8016c58:	1112      	asrs	r2, r2, #4
 8016c5a:	b9b1      	cbnz	r1, 8016c8a <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x92>
 8016c5c:	7861      	ldrb	r1, [r4, #1]
 8016c5e:	b9a1      	cbnz	r1, 8016c8a <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x92>
		callback.read = NULL;
 8016c60:	9105      	str	r1, [sp, #20]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8016c62:	68b9      	ldr	r1, [r7, #8]
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8016c64:	8162      	strh	r2, [r4, #10]
      push_back(const value_type& __x)
 8016c66:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8016c68:	42a9      	cmp	r1, r5
		callback.write = write;
 8016c6a:	e9cd 9803 	strd	r9, r8, [sp, #12]
 8016c6e:	d008      	beq.n	8016c82 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x8a>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8016c70:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8016c72:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8016c76:	3510      	adds	r5, #16
 8016c78:	607d      	str	r5, [r7, #4]
	target_register->mode.callbacks = true;
 8016c7a:	2301      	movs	r3, #1
 8016c7c:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 8016c7e:	7223      	strb	r3, [r4, #8]
 8016c80:	e7d0      	b.n	8016c24 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	  _M_realloc_insert(end(), __x);
 8016c82:	4638      	mov	r0, r7
 8016c84:	f7ff ff64 	bl	8016b50 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	} else {
 8016c88:	e7f7      	b.n	8016c7a <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x82>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8016c8a:	8961      	ldrh	r1, [r4, #10]
	if (__n >= this->size())
 8016c8c:	4291      	cmp	r1, r2
 8016c8e:	d302      	bcc.n	8016c96 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x9e>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8016c90:	4803      	ldr	r0, [pc, #12]	@ (8016ca0 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0xa8>)
 8016c92:	f002 fe7a 	bl	801998a <_ZSt24__throw_out_of_range_fmtPKcz>
	return *(this->_M_impl._M_start + __n);
 8016c96:	eb03 1301 	add.w	r3, r3, r1, lsl #4
		callback->write = write;
 8016c9a:	e9c3 9801 	strd	r9, r8, [r3, #4]
 8016c9e:	e7ec      	b.n	8016c7a <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x82>
 8016ca0:	0801a080 	.word	0x0801a080

08016ca4 <_ZN10Publishers12AddRegistersEv>:
void Publishers::AddRegisters(void) {
 8016ca4:	b510      	push	{r4, lr}
 8016ca6:	4604      	mov	r4, r0
	registers->AddRegister<uint8_t>(REG_PUB_SET_STATUS);
 8016ca8:	2110      	movs	r1, #16
 8016caa:	6840      	ldr	r0, [r0, #4]
 8016cac:	f7ff fecd 	bl	8016a4a <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_PUB_SET_STATUS, 2);
 8016cb0:	2202      	movs	r2, #2
 8016cb2:	2110      	movs	r1, #16
 8016cb4:	6860      	ldr	r0, [r4, #4]
 8016cb6:	f000 fa61 	bl	801717c <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_PUB_SET_STATUS, (void*) this,
 8016cba:	4b37      	ldr	r3, [pc, #220]	@ (8016d98 <_ZN10Publishers12AddRegistersEv+0xf4>)
 8016cbc:	4622      	mov	r2, r4
 8016cbe:	6860      	ldr	r0, [r4, #4]
 8016cc0:	2110      	movs	r1, #16
 8016cc2:	f7ff fef3 	bl	8016aac <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint16_t>(REG_PUB_SET_TOPIC_STATUS);
 8016cc6:	6860      	ldr	r0, [r4, #4]
 8016cc8:	2111      	movs	r1, #17
 8016cca:	f7ff fe8d 	bl	80169e8 <_ZN9Registers11AddRegisterItEEbt.isra.0>
	registers->SetRegisterAsArray(REG_PUB_SET_TOPIC_STATUS, 3);
 8016cce:	2203      	movs	r2, #3
 8016cd0:	2111      	movs	r1, #17
 8016cd2:	6860      	ldr	r0, [r4, #4]
 8016cd4:	f000 fa52 	bl	801717c <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint16_t>(REG_PUB_SET_TOPIC_STATUS, (void*) this,
 8016cd8:	4b30      	ldr	r3, [pc, #192]	@ (8016d9c <_ZN10Publishers12AddRegistersEv+0xf8>)
 8016cda:	4622      	mov	r2, r4
 8016cdc:	6860      	ldr	r0, [r4, #4]
 8016cde:	2111      	movs	r1, #17
 8016ce0:	f7ff ff8a 	bl	8016bf8 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint16_t>(REG_PUB_SET_PRESCALER);
 8016ce4:	6860      	ldr	r0, [r4, #4]
 8016ce6:	2112      	movs	r1, #18
 8016ce8:	f7ff fe7e 	bl	80169e8 <_ZN9Registers11AddRegisterItEEbt.isra.0>
	registers->SetRegisterAsArray(REG_PUB_SET_PRESCALER, 2);
 8016cec:	2202      	movs	r2, #2
 8016cee:	2112      	movs	r1, #18
 8016cf0:	6860      	ldr	r0, [r4, #4]
 8016cf2:	f000 fa43 	bl	801717c <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint16_t>(REG_PUB_SET_PRESCALER, (void*) this,
 8016cf6:	4622      	mov	r2, r4
 8016cf8:	4b29      	ldr	r3, [pc, #164]	@ (8016da0 <_ZN10Publishers12AddRegistersEv+0xfc>)
 8016cfa:	2112      	movs	r1, #18
 8016cfc:	6860      	ldr	r0, [r4, #4]
 8016cfe:	f7ff ff7b 	bl	8016bf8 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_PUB_STOP_TOPICS);
 8016d02:	6860      	ldr	r0, [r4, #4]
 8016d04:	2113      	movs	r1, #19
 8016d06:	f7ff fea0 	bl	8016a4a <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_PUB_STOP_TOPICS);
 8016d0a:	2113      	movs	r1, #19
 8016d0c:	6860      	ldr	r0, [r4, #4]
 8016d0e:	f000 fa19 	bl	8017144 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_PUB_STOP_TOPICS, (void*) this,
 8016d12:	4b24      	ldr	r3, [pc, #144]	@ (8016da4 <_ZN10Publishers12AddRegistersEv+0x100>)
 8016d14:	4622      	mov	r2, r4
 8016d16:	6860      	ldr	r0, [r4, #4]
 8016d18:	2113      	movs	r1, #19
 8016d1a:	f7ff fec7 	bl	8016aac <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_PUB_LINK_INTERFACE);
 8016d1e:	6860      	ldr	r0, [r4, #4]
 8016d20:	2114      	movs	r1, #20
 8016d22:	f7ff fe92 	bl	8016a4a <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_PUB_LINK_INTERFACE, 2);
 8016d26:	2202      	movs	r2, #2
 8016d28:	2114      	movs	r1, #20
 8016d2a:	6860      	ldr	r0, [r4, #4]
 8016d2c:	f000 fa26 	bl	801717c <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_PUB_LINK_INTERFACE, (void*) this,
 8016d30:	4b1d      	ldr	r3, [pc, #116]	@ (8016da8 <_ZN10Publishers12AddRegistersEv+0x104>)
 8016d32:	4622      	mov	r2, r4
 8016d34:	6860      	ldr	r0, [r4, #4]
 8016d36:	2114      	movs	r1, #20
 8016d38:	f7ff feb8 	bl	8016aac <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_PUB_UNLINK_INTERFACE);
 8016d3c:	6860      	ldr	r0, [r4, #4]
 8016d3e:	2115      	movs	r1, #21
 8016d40:	f7ff fe83 	bl	8016a4a <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_PUB_UNLINK_INTERFACE, 2);
 8016d44:	2202      	movs	r2, #2
 8016d46:	2115      	movs	r1, #21
 8016d48:	6860      	ldr	r0, [r4, #4]
 8016d4a:	f000 fa17 	bl	801717c <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_PUB_UNLINK_INTERFACE, (void*) this,
 8016d4e:	4622      	mov	r2, r4
 8016d50:	4b16      	ldr	r3, [pc, #88]	@ (8016dac <_ZN10Publishers12AddRegistersEv+0x108>)
 8016d52:	2115      	movs	r1, #21
 8016d54:	6860      	ldr	r0, [r4, #4]
 8016d56:	f7ff fea9 	bl	8016aac <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_PUB_CLEAR_INTERFACES);
 8016d5a:	6860      	ldr	r0, [r4, #4]
 8016d5c:	2116      	movs	r1, #22
 8016d5e:	f7ff fe74 	bl	8016a4a <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_PUB_CLEAR_INTERFACES);
 8016d62:	2116      	movs	r1, #22
 8016d64:	6860      	ldr	r0, [r4, #4]
 8016d66:	f000 f9ed 	bl	8017144 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_PUB_CLEAR_INTERFACES, (void*) this,
 8016d6a:	4b11      	ldr	r3, [pc, #68]	@ (8016db0 <_ZN10Publishers12AddRegistersEv+0x10c>)
 8016d6c:	4622      	mov	r2, r4
 8016d6e:	6860      	ldr	r0, [r4, #4]
 8016d70:	2116      	movs	r1, #22
 8016d72:	f7ff fe9b 	bl	8016aac <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_PUB_SET_TARGET_ADDRESS);
 8016d76:	6860      	ldr	r0, [r4, #4]
 8016d78:	2117      	movs	r1, #23
 8016d7a:	f7ff fe66 	bl	8016a4a <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_PUB_SET_TARGET_ADDRESS, 3);
 8016d7e:	2203      	movs	r2, #3
 8016d80:	2117      	movs	r1, #23
 8016d82:	6860      	ldr	r0, [r4, #4]
 8016d84:	f000 f9fa 	bl	801717c <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_PUB_SET_TARGET_ADDRESS, (void*) this,
 8016d88:	4622      	mov	r2, r4
 8016d8a:	6860      	ldr	r0, [r4, #4]
 8016d8c:	2117      	movs	r1, #23
 8016d8e:	4b09      	ldr	r3, [pc, #36]	@ (8016db4 <_ZN10Publishers12AddRegistersEv+0x110>)
}
 8016d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	registers->AddWriteCallback<uint8_t>(REG_PUB_SET_TARGET_ADDRESS, (void*) this,
 8016d94:	f7ff be8a 	b.w	8016aac <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
 8016d98:	08016401 	.word	0x08016401
 8016d9c:	0801656b 	.word	0x0801656b
 8016da0:	0801644d 	.word	0x0801644d
 8016da4:	0801649f 	.word	0x0801649f
 8016da8:	080169d1 	.word	0x080169d1
 8016dac:	080166e5 	.word	0x080166e5
 8016db0:	080164df 	.word	0x080164df
 8016db4:	0801660b 	.word	0x0801660b

08016db8 <_ZN9PublisherC1ERKS_>:
 8016db8:	b570      	push	{r4, r5, r6, lr}
 8016dba:	680a      	ldr	r2, [r1, #0]
 8016dbc:	4604      	mov	r4, r0
 8016dbe:	888b      	ldrh	r3, [r1, #4]
 8016dc0:	460d      	mov	r5, r1
 8016dc2:	6002      	str	r2, [r0, #0]
 8016dc4:	8083      	strh	r3, [r0, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8016dc6:	2300      	movs	r3, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016dc8:	e9d1 2602 	ldrd	r2, r6, [r1, #8]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8016dcc:	e9c0 3302 	strd	r3, r3, [r0, #8]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8016dd0:	1ab6      	subs	r6, r6, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
 8016dd2:	6103      	str	r3, [r0, #16]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8016dd4:	d03c      	beq.n	8016e50 <_ZN9PublisherC1ERKS_+0x98>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8016dd6:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8016dda:	429e      	cmp	r6, r3
 8016ddc:	d301      	bcc.n	8016de2 <_ZN9PublisherC1ERKS_+0x2a>
	      std::__throw_bad_array_new_length();
 8016dde:	f002 fdce 	bl	801997e <_ZSt28__throw_bad_array_new_lengthv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8016de2:	4630      	mov	r0, r6
 8016de4:	f002 fd19 	bl	801981a <_Znwj>
 8016de8:	4603      	mov	r3, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8016dea:	441e      	add	r6, r3
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8016dec:	e9c4 3302 	strd	r3, r3, [r4, #8]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8016df0:	6126      	str	r6, [r4, #16]
      : _M_current(__i) { }
 8016df2:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
	  if (_Num)
 8016df6:	4291      	cmp	r1, r2
	  const ptrdiff_t _Num = __last - __first;
 8016df8:	eba2 0601 	sub.w	r6, r2, r1
	  if (_Num)
 8016dfc:	d004      	beq.n	8016e08 <_ZN9PublisherC1ERKS_+0x50>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8016dfe:	4618      	mov	r0, r3
 8016e00:	4632      	mov	r2, r6
 8016e02:	f002 fe97 	bl	8019b34 <memmove>
 8016e06:	4603      	mov	r3, r0
	  return __result + _Num;
 8016e08:	4433      	add	r3, r6
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016e0a:	e9d5 2605 	ldrd	r2, r6, [r5, #20]
	this->_M_impl._M_finish =
 8016e0e:	60e3      	str	r3, [r4, #12]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8016e10:	2300      	movs	r3, #0
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8016e12:	1ab6      	subs	r6, r6, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
 8016e14:	61e3      	str	r3, [r4, #28]
 8016e16:	e9c4 3305 	strd	r3, r3, [r4, #20]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8016e1a:	d01b      	beq.n	8016e54 <_ZN9PublisherC1ERKS_+0x9c>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8016e1c:	4b0e      	ldr	r3, [pc, #56]	@ (8016e58 <_ZN9PublisherC1ERKS_+0xa0>)
 8016e1e:	429e      	cmp	r6, r3
 8016e20:	d8dd      	bhi.n	8016dde <_ZN9PublisherC1ERKS_+0x26>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8016e22:	4630      	mov	r0, r6
 8016e24:	f002 fcf9 	bl	801981a <_Znwj>
 8016e28:	4603      	mov	r3, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8016e2a:	441e      	add	r6, r3
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8016e2c:	e9c4 3305 	strd	r3, r3, [r4, #20]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8016e30:	61e6      	str	r6, [r4, #28]
 8016e32:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
	  if (_Num)
 8016e36:	4291      	cmp	r1, r2
	  const ptrdiff_t _Num = __last - __first;
 8016e38:	eba2 0501 	sub.w	r5, r2, r1
	  if (_Num)
 8016e3c:	d004      	beq.n	8016e48 <_ZN9PublisherC1ERKS_+0x90>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8016e3e:	4618      	mov	r0, r3
 8016e40:	462a      	mov	r2, r5
 8016e42:	f002 fe77 	bl	8019b34 <memmove>
 8016e46:	4603      	mov	r3, r0
	  return __result + _Num;
 8016e48:	442b      	add	r3, r5
 8016e4a:	4620      	mov	r0, r4
	this->_M_impl._M_finish =
 8016e4c:	61a3      	str	r3, [r4, #24]
 8016e4e:	bd70      	pop	{r4, r5, r6, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8016e50:	4633      	mov	r3, r6
 8016e52:	e7ca      	b.n	8016dea <_ZN9PublisherC1ERKS_+0x32>
 8016e54:	4633      	mov	r3, r6
 8016e56:	e7e8      	b.n	8016e2a <_ZN9PublisherC1ERKS_+0x72>
 8016e58:	7ffffffc 	.word	0x7ffffffc

08016e5c <_ZNSt6vectorI9PublisherSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8016e5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016e60:	e9d0 7900 	ldrd	r7, r9, [r0]
 8016e64:	4692      	mov	sl, r2
	if (max_size() - size() < __n)
 8016e66:	f06f 437c 	mvn.w	r3, #4227858432	@ 0xfc000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016e6a:	eba9 0207 	sub.w	r2, r9, r7
 8016e6e:	4606      	mov	r6, r0
 8016e70:	4688      	mov	r8, r1
	if (max_size() - size() < __n)
 8016e72:	ebb3 1f62 	cmp.w	r3, r2, asr #5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016e76:	ea4f 1462 	mov.w	r4, r2, asr #5
	if (max_size() - size() < __n)
 8016e7a:	d102      	bne.n	8016e82 <_ZNSt6vectorI9PublisherSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8016e7c:	481a      	ldr	r0, [pc, #104]	@ (8016ee8 <_ZNSt6vectorI9PublisherSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>)
 8016e7e:	f002 fd81 	bl	8019984 <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 8016e82:	45b9      	cmp	r9, r7
 8016e84:	bf14      	ite	ne
 8016e86:	4622      	movne	r2, r4
 8016e88:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 8016e8a:	eba1 0b07 	sub.w	fp, r1, r7
 8016e8e:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8016e90:	d225      	bcs.n	8016ede <_ZNSt6vectorI9PublisherSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x82>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8016e92:	b334      	cbz	r4, 8016ee2 <_ZNSt6vectorI9PublisherSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x86>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8016e94:	429c      	cmp	r4, r3
 8016e96:	bf28      	it	cs
 8016e98:	461c      	movcs	r4, r3
 8016e9a:	0160      	lsls	r0, r4, #5
 8016e9c:	f002 fcbd 	bl	801981a <_Znwj>
 8016ea0:	4605      	mov	r5, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8016ea2:	4651      	mov	r1, sl
 8016ea4:	eb05 000b 	add.w	r0, r5, fp
 8016ea8:	f7ff ff86 	bl	8016db8 <_ZN9PublisherC1ERKS_>
      return std::__relocate_a_1(std::__niter_base(__first),
 8016eac:	4641      	mov	r1, r8
 8016eae:	462a      	mov	r2, r5
 8016eb0:	4638      	mov	r0, r7
 8016eb2:	f7ff fc47 	bl	8016744 <_ZSt14__relocate_a_1IP9PublisherS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>
 8016eb6:	4649      	mov	r1, r9
 8016eb8:	f100 0220 	add.w	r2, r0, #32
 8016ebc:	4640      	mov	r0, r8
 8016ebe:	f7ff fc41 	bl	8016744 <_ZSt14__relocate_a_1IP9PublisherS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>
 8016ec2:	4680      	mov	r8, r0
	if (__p)
 8016ec4:	b127      	cbz	r7, 8016ed0 <_ZNSt6vectorI9PublisherSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x74>
		    this->_M_impl._M_end_of_storage - __old_start);
 8016ec6:	68b1      	ldr	r1, [r6, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8016ec8:	4638      	mov	r0, r7
 8016eca:	1bc9      	subs	r1, r1, r7
 8016ecc:	f002 fc80 	bl	80197d0 <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8016ed0:	eb05 1444 	add.w	r4, r5, r4, lsl #5
      this->_M_impl._M_finish = __new_finish;
 8016ed4:	e9c6 5800 	strd	r5, r8, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8016ed8:	60b4      	str	r4, [r6, #8]
    }
 8016eda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8016ede:	461c      	mov	r4, r3
 8016ee0:	e7db      	b.n	8016e9a <_ZNSt6vectorI9PublisherSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8016ee2:	4625      	mov	r5, r4
 8016ee4:	e7dd      	b.n	8016ea2 <_ZNSt6vectorI9PublisherSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 8016ee6:	bf00      	nop
 8016ee8:	08019e3e 	.word	0x08019e3e

08016eec <_ZN10Publishers12AddPublisherEh>:
bool Publishers::AddPublisher(uint8_t ID) {
 8016eec:	b530      	push	{r4, r5, lr}
 8016eee:	b08b      	sub	sp, #44	@ 0x2c
 8016ef0:	4604      	mov	r4, r0
 8016ef2:	460d      	mov	r5, r1
	FindPublisher(ID, &success);
 8016ef4:	f10d 0207 	add.w	r2, sp, #7
 8016ef8:	f7ff fa46 	bl	8016388 <_ZN10Publishers13FindPublisherEhPb>
	if (success)
 8016efc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8016f00:	bb6b      	cbnz	r3, 8016f5e <_ZN10Publishers12AddPublisherEh+0x72>
	publisher.prescaler = 1;
 8016f02:	2201      	movs	r2, #1
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8016f04:	f04f 31ff 	mov.w	r1, #4294967295
 8016f08:	6820      	ldr	r0, [r4, #0]
	publisher.activated = false;
 8016f0a:	f88d 3009 	strb.w	r3, [sp, #9]
	publisher.counter = 0;
 8016f0e:	f8ad 300c 	strh.w	r3, [sp, #12]
	publisher.ID = ID;
 8016f12:	f88d 5008 	strb.w	r5, [sp, #8]
	publisher.prescaler = 1;
 8016f16:	f8ad 200a 	strh.w	r2, [sp, #10]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8016f1a:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8016f1e:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8016f22:	e9cd 3308 	strd	r3, r3, [sp, #32]
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8016f26:	f7f5 f949 	bl	800c1bc <osSemaphoreAcquire>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8016f2a:	e9d4 0304 	ldrd	r0, r3, [r4, #16]
 8016f2e:	4298      	cmp	r0, r3
 8016f30:	d00e      	beq.n	8016f50 <_ZN10Publishers12AddPublisherEh+0x64>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8016f32:	a902      	add	r1, sp, #8
 8016f34:	f7ff ff40 	bl	8016db8 <_ZN9PublisherC1ERKS_>
	    ++this->_M_impl._M_finish;
 8016f38:	6923      	ldr	r3, [r4, #16]
 8016f3a:	3320      	adds	r3, #32
 8016f3c:	6123      	str	r3, [r4, #16]
	osSemaphoreRelease(PublishersSemaphore);
 8016f3e:	6820      	ldr	r0, [r4, #0]
 8016f40:	f7f5 f970 	bl	800c224 <osSemaphoreRelease>
}
 8016f44:	a802      	add	r0, sp, #8
 8016f46:	f7ff fbed 	bl	8016724 <_ZN9PublisherD1Ev>
	return true;
 8016f4a:	2001      	movs	r0, #1
}
 8016f4c:	b00b      	add	sp, #44	@ 0x2c
 8016f4e:	bd30      	pop	{r4, r5, pc}
	  _M_realloc_insert(end(), __x);
 8016f50:	4601      	mov	r1, r0
 8016f52:	aa02      	add	r2, sp, #8
 8016f54:	f104 000c 	add.w	r0, r4, #12
 8016f58:	f7ff ff80 	bl	8016e5c <_ZNSt6vectorI9PublisherSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 8016f5c:	e7ef      	b.n	8016f3e <_ZN10Publishers12AddPublisherEh+0x52>
		return false;
 8016f5e:	2000      	movs	r0, #0
 8016f60:	e7f4      	b.n	8016f4c <_ZN10Publishers12AddPublisherEh+0x60>

08016f62 <_ZZN9Registers16AddBaseRegistersEvENUlPvtPPmPtE_4_FUNES0_tS2_S3_>:
void Registers::AddBaseRegisters(void) {
	// Register to get the timestamp in ms
	AddRegister<uint32_t>(REG_TIMEBASE);
	SetRegisterAsSingle(REG_TIMEBASE);
	AddReadCallback<uint32_t>(REG_TIMEBASE, NULL,
		[](void* context, uint16_t register_id, uint32_t** output, uint16_t* length) -> bool {
 8016f62:	b538      	push	{r3, r4, r5, lr}
			*length = 1;
 8016f64:	2401      	movs	r4, #1
			**output = HAL_GetTick();
 8016f66:	6815      	ldr	r5, [r2, #0]
			*length = 1;
 8016f68:	801c      	strh	r4, [r3, #0]
			**output = HAL_GetTick();
 8016f6a:	f7ec f8cb 	bl	8003104 <HAL_GetTick>
 8016f6e:	6028      	str	r0, [r5, #0]
			return true;
		}
 8016f70:	4620      	mov	r0, r4
 8016f72:	bd38      	pop	{r3, r4, r5, pc}

08016f74 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 8016f74:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8016f76:	4926      	ldr	r1, [pc, #152]	@ (8017010 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 8016f78:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8016f7a:	4826      	ldr	r0, [pc, #152]	@ (8017014 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8016f7c:	f002 fce4 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8016f80:	2800      	cmp	r0, #0
 8016f82:	d133      	bne.n	8016fec <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8016f84:	4924      	ldr	r1, [pc, #144]	@ (8017018 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa4>)
 8016f86:	4823      	ldr	r0, [pc, #140]	@ (8017014 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8016f88:	f002 fcde 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8016f8c:	2800      	cmp	r0, #0
 8016f8e:	d12f      	bne.n	8016ff0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8016f90:	4920      	ldr	r1, [pc, #128]	@ (8017014 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8016f92:	4608      	mov	r0, r1
 8016f94:	f002 fcd8 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8016f98:	bb60      	cbnz	r0, 8016ff4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8016f9a:	4920      	ldr	r1, [pc, #128]	@ (801701c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa8>)
 8016f9c:	481d      	ldr	r0, [pc, #116]	@ (8017014 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8016f9e:	f002 fcd3 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8016fa2:	bb48      	cbnz	r0, 8016ff8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8016fa4:	491e      	ldr	r1, [pc, #120]	@ (8017020 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xac>)
 8016fa6:	481b      	ldr	r0, [pc, #108]	@ (8017014 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8016fa8:	f002 fcce 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8016fac:	bb30      	cbnz	r0, 8016ffc <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 8016fae:	491d      	ldr	r1, [pc, #116]	@ (8017024 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xb0>)
 8016fb0:	4818      	ldr	r0, [pc, #96]	@ (8017014 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8016fb2:	f002 fcc9 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8016fb6:	bb18      	cbnz	r0, 8017000 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8016fb8:	491b      	ldr	r1, [pc, #108]	@ (8017028 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xb4>)
 8016fba:	4816      	ldr	r0, [pc, #88]	@ (8017014 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8016fbc:	f002 fcc4 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8016fc0:	bb00      	cbnz	r0, 8017004 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 8016fc2:	491a      	ldr	r1, [pc, #104]	@ (801702c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xb8>)
 8016fc4:	4813      	ldr	r0, [pc, #76]	@ (8017014 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8016fc6:	f002 fcbf 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8016fca:	b9e8      	cbnz	r0, 8017008 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8016fcc:	4918      	ldr	r1, [pc, #96]	@ (8017030 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xbc>)
 8016fce:	4811      	ldr	r0, [pc, #68]	@ (8017014 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8016fd0:	f002 fcba 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8016fd4:	b9d0      	cbnz	r0, 801700c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 8016fd6:	4917      	ldr	r1, [pc, #92]	@ (8017034 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xc0>)
 8016fd8:	480e      	ldr	r0, [pc, #56]	@ (8017014 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8016fda:	f002 fcb5 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 8016fde:	2800      	cmp	r0, #0
 8016fe0:	bf14      	ite	ne
 8016fe2:	2309      	movne	r3, #9
 8016fe4:	2300      	moveq	r3, #0
 8016fe6:	7020      	strb	r0, [r4, #0]
}
 8016fe8:	4618      	mov	r0, r3
 8016fea:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8016fec:	2300      	movs	r3, #0
 8016fee:	e7fa      	b.n	8016fe6 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8016ff0:	2301      	movs	r3, #1
 8016ff2:	e7f8      	b.n	8016fe6 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8016ff4:	2302      	movs	r3, #2
 8016ff6:	e7f6      	b.n	8016fe6 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8016ff8:	2303      	movs	r3, #3
 8016ffa:	e7f4      	b.n	8016fe6 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8016ffc:	2304      	movs	r3, #4
 8016ffe:	e7f2      	b.n	8016fe6 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 8017000:	2305      	movs	r3, #5
 8017002:	e7f0      	b.n	8016fe6 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8017004:	2306      	movs	r3, #6
 8017006:	e7ee      	b.n	8016fe6 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 8017008:	2307      	movs	r3, #7
 801700a:	e7ec      	b.n	8016fe6 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 801700c:	2308      	movs	r3, #8
 801700e:	e7ea      	b.n	8016fe6 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
 8017010:	0801a298 	.word	0x0801a298
 8017014:	0801a278 	.word	0x0801a278
 8017018:	0801a288 	.word	0x0801a288
 801701c:	0801a268 	.word	0x0801a268
 8017020:	0801a2a0 	.word	0x0801a2a0
 8017024:	0801a290 	.word	0x0801a290
 8017028:	0801a280 	.word	0x0801a280
 801702c:	0801a270 	.word	0x0801a270
 8017030:	0801a260 	.word	0x0801a260
 8017034:	0801a258 	.word	0x0801a258

08017038 <_ZN9RegistersC1Ev>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017038:	2200      	movs	r2, #0
 801703a:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801703e:	60c2      	str	r2, [r0, #12]
 8017040:	e9c0 220e 	strd	r2, r2, [r0, #56]	@ 0x38
 8017044:	e9c0 2210 	strd	r2, r2, [r0, #64]	@ 0x40
 8017048:	e9c0 2212 	strd	r2, r2, [r0, #72]	@ 0x48
 801704c:	e9c0 2214 	strd	r2, r2, [r0, #80]	@ 0x50
 8017050:	e9c0 2216 	strd	r2, r2, [r0, #88]	@ 0x58
 8017054:	e9c0 2218 	strd	r2, r2, [r0, #96]	@ 0x60
 8017058:	e9c0 221a 	strd	r2, r2, [r0, #104]	@ 0x68
 801705c:	e9c0 221c 	strd	r2, r2, [r0, #112]	@ 0x70
 8017060:	e9c0 221e 	strd	r2, r2, [r0, #120]	@ 0x78
 8017064:	e9c0 2220 	strd	r2, r2, [r0, #128]	@ 0x80
 8017068:	e9c0 2222 	strd	r2, r2, [r0, #136]	@ 0x88
 801706c:	e9c0 2224 	strd	r2, r2, [r0, #144]	@ 0x90
 8017070:	e9c0 2226 	strd	r2, r2, [r0, #152]	@ 0x98
 8017074:	e9c0 2228 	strd	r2, r2, [r0, #160]	@ 0xa0
 8017078:	e9c0 222a 	strd	r2, r2, [r0, #168]	@ 0xa8
Registers::Registers() {
 801707c:	f100 0238 	add.w	r2, r0, #56	@ 0x38
	callbacks[UINT8_TYPE] = &uint8_t_callbacks;
 8017080:	6102      	str	r2, [r0, #16]
Registers::Registers() {
 8017082:	f100 0244 	add.w	r2, r0, #68	@ 0x44
	callbacks[UINT16_TYPE] = &uint16_t_callbacks;
 8017086:	6142      	str	r2, [r0, #20]
Registers::Registers() {
 8017088:	f100 0250 	add.w	r2, r0, #80	@ 0x50
	callbacks[UINT32_TYPE] = &uint32_t_callbacks;
 801708c:	6182      	str	r2, [r0, #24]
Registers::Registers() {
 801708e:	f100 025c 	add.w	r2, r0, #92	@ 0x5c
	callbacks[UINT64_TYPE] = &uint64_t_callbacks;
 8017092:	61c2      	str	r2, [r0, #28]
Registers::Registers() {
 8017094:	f100 0268 	add.w	r2, r0, #104	@ 0x68
	callbacks[INT8_TYPE] = &int8_t_callbacks;
 8017098:	6202      	str	r2, [r0, #32]
Registers::Registers() {
 801709a:	f100 0274 	add.w	r2, r0, #116	@ 0x74
	callbacks[INT16_TYPE] = &int16_t_callbacks;
 801709e:	6242      	str	r2, [r0, #36]	@ 0x24
Registers::Registers() {
 80170a0:	f100 0280 	add.w	r2, r0, #128	@ 0x80
	callbacks[INT32_TYPE] = &int32_t_callbacks;
 80170a4:	6282      	str	r2, [r0, #40]	@ 0x28
Registers::Registers() {
 80170a6:	f100 028c 	add.w	r2, r0, #140	@ 0x8c
	callbacks[INT64_TYPE] = &int64_t_callbacks;
 80170aa:	62c2      	str	r2, [r0, #44]	@ 0x2c
Registers::Registers() {
 80170ac:	f100 0298 	add.w	r2, r0, #152	@ 0x98
	callbacks[FLOAT_TYPE] = &float_callbacks;
 80170b0:	6302      	str	r2, [r0, #48]	@ 0x30
Registers::Registers() {
 80170b2:	f100 02a4 	add.w	r2, r0, #164	@ 0xa4
	callbacks[DOUBLE_TYPE] = &double_callbacks;
 80170b6:	6342      	str	r2, [r0, #52]	@ 0x34
}
 80170b8:	4770      	bx	lr

080170ba <_ZN9Registers4InitEv>:
	RegistersSemaphore = osSemaphoreNew(1,1,NULL);
 80170ba:	2101      	movs	r1, #1
 80170bc:	2200      	movs	r2, #0
void Registers::Init(void) {
 80170be:	b510      	push	{r4, lr}
 80170c0:	4604      	mov	r4, r0
	RegistersSemaphore = osSemaphoreNew(1,1,NULL);
 80170c2:	4608      	mov	r0, r1
 80170c4:	f7f5 f81e 	bl	800c104 <osSemaphoreNew>
 80170c8:	6020      	str	r0, [r4, #0]
}
 80170ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSemaphoreRelease(RegistersSemaphore);
 80170ce:	f7f5 b8a9 	b.w	800c224 <osSemaphoreRelease>

080170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>:
 *
 * @param input ID: register address
 * @param output success: whether successful
 * @return the pointer to the register configuration
 */
RegisterConfiguration* Registers::FindRegisterConfiguration(uint16_t ID, bool* success) {
 80170d2:	b530      	push	{r4, r5, lr}
 80170d4:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
	for (RegisterConfiguration &register_configuration : registers) {
 80170d8:	429c      	cmp	r4, r3
 80170da:	4618      	mov	r0, r3
 80170dc:	d103      	bne.n	80170e6 <_ZN9Registers25FindRegisterConfigurationEtPb+0x14>
 80170de:	2300      	movs	r3, #0
			*success = true;
			return &register_configuration;
		}
	}
	*success = false;
	return NULL;
 80170e0:	4618      	mov	r0, r3
			*success = true;
 80170e2:	7013      	strb	r3, [r2, #0]
}
 80170e4:	bd30      	pop	{r4, r5, pc}
		if (register_configuration.register_info.address == ID) {
 80170e6:	8845      	ldrh	r5, [r0, #2]
 80170e8:	f100 0310 	add.w	r3, r0, #16
 80170ec:	428d      	cmp	r5, r1
 80170ee:	d1f3      	bne.n	80170d8 <_ZN9Registers25FindRegisterConfigurationEtPb+0x6>
 80170f0:	2301      	movs	r3, #1
 80170f2:	e7f6      	b.n	80170e2 <_ZN9Registers25FindRegisterConfigurationEtPb+0x10>

080170f4 <_ZN9Registers12FindRegisterEtPb>:
Register Registers::FindRegister(uint16_t ID, bool* success) {
 80170f4:	b510      	push	{r4, lr}
 80170f6:	4604      	mov	r4, r0
 80170f8:	4608      	mov	r0, r1
 80170fa:	4611      	mov	r1, r2
	RegisterConfiguration* register_configuration = FindRegisterConfiguration(ID, success);
 80170fc:	461a      	mov	r2, r3
 80170fe:	f7ff ffe8 	bl	80170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>
	return register_configuration->register_info;
 8017102:	f8d0 3002 	ldr.w	r3, [r0, #2]
 8017106:	6023      	str	r3, [r4, #0]
 8017108:	88c3      	ldrh	r3, [r0, #6]
}
 801710a:	4620      	mov	r0, r4
	return register_configuration->register_info;
 801710c:	80a3      	strh	r3, [r4, #4]
}
 801710e:	bd10      	pop	{r4, pc}

08017110 <_ZN9Registers20AddRegisterSemaphoreEtPPv>:
 *
 * @param input ID: register address
 * @param input register_semaphore: pointer to the semaphore to link
 * @return whether successful
 */
bool Registers::AddRegisterSemaphore(uint16_t ID, osSemaphoreId_t* register_semaphore) {
 8017110:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017112:	460e      	mov	r6, r1
 8017114:	4604      	mov	r4, r0
	bool success;
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8017116:	f04f 31ff 	mov.w	r1, #4294967295
 801711a:	6800      	ldr	r0, [r0, #0]
bool Registers::AddRegisterSemaphore(uint16_t ID, osSemaphoreId_t* register_semaphore) {
 801711c:	4615      	mov	r5, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801711e:	f7f5 f84d 	bl	800c1bc <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8017122:	4631      	mov	r1, r6
 8017124:	f10d 0207 	add.w	r2, sp, #7
 8017128:	4620      	mov	r0, r4
 801712a:	f7ff ffd2 	bl	80170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801712e:	f89d 6007 	ldrb.w	r6, [sp, #7]
 8017132:	b92e      	cbnz	r6, 8017140 <_ZN9Registers20AddRegisterSemaphoreEtPPv+0x30>
		osSemaphoreRelease(RegistersSemaphore);
		return false;
	}

	target_register->register_semaphore = register_semaphore;
	osSemaphoreRelease(RegistersSemaphore);
 8017134:	6820      	ldr	r0, [r4, #0]
 8017136:	f7f5 f875 	bl	800c224 <osSemaphoreRelease>
	return true;
}
 801713a:	4630      	mov	r0, r6
 801713c:	b002      	add	sp, #8
 801713e:	bd70      	pop	{r4, r5, r6, pc}
	target_register->register_semaphore = register_semaphore;
 8017140:	60c5      	str	r5, [r0, #12]
 8017142:	e7f7      	b.n	8017134 <_ZN9Registers20AddRegisterSemaphoreEtPPv+0x24>

08017144 <_ZN9Registers19SetRegisterAsSingleEt>:
 * @brief Set the register as a single value (not an array nor a vector)
 *
 * @param input ID: register address
 * @return whether successful
 */
bool Registers::SetRegisterAsSingle(uint16_t ID) {
 8017144:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017146:	460d      	mov	r5, r1
 8017148:	4604      	mov	r4, r0
	bool success;
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801714a:	f04f 31ff 	mov.w	r1, #4294967295
 801714e:	6800      	ldr	r0, [r0, #0]
 8017150:	f7f5 f834 	bl	800c1bc <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8017154:	4629      	mov	r1, r5
 8017156:	f10d 0207 	add.w	r2, sp, #7
 801715a:	4620      	mov	r0, r4
 801715c:	f7ff ffb9 	bl	80170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8017160:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8017164:	b92d      	cbnz	r5, 8017172 <_ZN9Registers19SetRegisterAsSingleEt+0x2e>
		return false;
	}

	target_register->register_info.isArray = false;
	target_register->register_info.length = 1;
	osSemaphoreRelease(RegistersSemaphore);
 8017166:	6820      	ldr	r0, [r4, #0]
 8017168:	f7f5 f85c 	bl	800c224 <osSemaphoreRelease>
	return true;
}
 801716c:	4628      	mov	r0, r5
 801716e:	b003      	add	sp, #12
 8017170:	bd30      	pop	{r4, r5, pc}
	target_register->register_info.isArray = false;
 8017172:	2300      	movs	r3, #0
 8017174:	7143      	strb	r3, [r0, #5]
	target_register->register_info.length = 1;
 8017176:	2301      	movs	r3, #1
 8017178:	80c3      	strh	r3, [r0, #6]
 801717a:	e7f4      	b.n	8017166 <_ZN9Registers19SetRegisterAsSingleEt+0x22>

0801717c <_ZN9Registers18SetRegisterAsArrayEtt>:
 *
 * @param input ID: register address
 * @param input length_: length of the array
 * @return whether successful
 */
bool Registers::SetRegisterAsArray(uint16_t ID, uint16_t length_) {
 801717c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801717e:	460e      	mov	r6, r1
 8017180:	4604      	mov	r4, r0
	bool success;
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8017182:	f04f 31ff 	mov.w	r1, #4294967295
 8017186:	6800      	ldr	r0, [r0, #0]
bool Registers::SetRegisterAsArray(uint16_t ID, uint16_t length_) {
 8017188:	4615      	mov	r5, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801718a:	f7f5 f817 	bl	800c1bc <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801718e:	4631      	mov	r1, r6
 8017190:	f10d 0207 	add.w	r2, sp, #7
 8017194:	4620      	mov	r0, r4
 8017196:	f7ff ff9c 	bl	80170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801719a:	f89d 6007 	ldrb.w	r6, [sp, #7]
 801719e:	b92e      	cbnz	r6, 80171ac <_ZN9Registers18SetRegisterAsArrayEtt+0x30>
		return false;
	}

	target_register->register_info.isArray = true;
	target_register->register_info.length = length_;
	osSemaphoreRelease(RegistersSemaphore);
 80171a0:	6820      	ldr	r0, [r4, #0]
 80171a2:	f7f5 f83f 	bl	800c224 <osSemaphoreRelease>
	return true;
}
 80171a6:	4630      	mov	r0, r6
 80171a8:	b002      	add	sp, #8
 80171aa:	bd70      	pop	{r4, r5, r6, pc}
	target_register->register_info.isArray = true;
 80171ac:	2301      	movs	r3, #1
	target_register->register_info.length = length_;
 80171ae:	80c5      	strh	r5, [r0, #6]
	target_register->register_info.isArray = true;
 80171b0:	7143      	strb	r3, [r0, #5]
	target_register->register_info.length = length_;
 80171b2:	e7f5      	b.n	80171a0 <_ZN9Registers18SetRegisterAsArrayEtt+0x24>

080171b4 <_ZN9Registers19SetRegisterAsVectorEt>:
 *
 * @param input ID: register address
 * @return whether successful
 */
bool Registers::SetRegisterAsVector(uint16_t ID) {
	return SetRegisterAsArray(ID, 0);
 80171b4:	2200      	movs	r2, #0
 80171b6:	f7ff bfe1 	b.w	801717c <_ZN9Registers18SetRegisterAsArrayEtt>

080171ba <_ZN9Registers22SetRegisterPermissionsEth>:
 *
 * @param input ID: register address
 * @param input permissions_: WRITE_PERMISSION or READ_PERMISSION
 * @return whether successful
 */
bool Registers::SetRegisterPermissions(uint16_t ID, uint8_t permissions_) {
 80171ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80171bc:	460e      	mov	r6, r1
 80171be:	4604      	mov	r4, r0
	bool success;
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80171c0:	f04f 31ff 	mov.w	r1, #4294967295
 80171c4:	6800      	ldr	r0, [r0, #0]
bool Registers::SetRegisterPermissions(uint16_t ID, uint8_t permissions_) {
 80171c6:	4615      	mov	r5, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80171c8:	f7f4 fff8 	bl	800c1bc <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80171cc:	4631      	mov	r1, r6
 80171ce:	f10d 0207 	add.w	r2, sp, #7
 80171d2:	4620      	mov	r0, r4
 80171d4:	f7ff ff7d 	bl	80170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80171d8:	f89d 6007 	ldrb.w	r6, [sp, #7]
 80171dc:	b92e      	cbnz	r6, 80171ea <_ZN9Registers22SetRegisterPermissionsEth+0x30>
		return false;
	}

	target_register->access.write = permissions_ & WRITE_PERMISSION;
	target_register->access.read = permissions_ & READ_PERMISSION;
	osSemaphoreRelease(RegistersSemaphore);
 80171de:	6820      	ldr	r0, [r4, #0]
 80171e0:	f7f5 f820 	bl	800c224 <osSemaphoreRelease>
	return true;
}
 80171e4:	4630      	mov	r0, r6
 80171e6:	b002      	add	sp, #8
 80171e8:	bd70      	pop	{r4, r5, r6, pc}
	target_register->access.write = permissions_ & WRITE_PERMISSION;
 80171ea:	f005 0301 	and.w	r3, r5, #1
	target_register->access.read = permissions_ & READ_PERMISSION;
 80171ee:	f3c5 0540 	ubfx	r5, r5, #1, #1
	target_register->access.write = permissions_ & WRITE_PERMISSION;
 80171f2:	7203      	strb	r3, [r0, #8]
	target_register->access.read = permissions_ & READ_PERMISSION;
 80171f4:	7245      	strb	r5, [r0, #9]
 80171f6:	e7f2      	b.n	80171de <_ZN9Registers22SetRegisterPermissionsEth+0x24>

080171f8 <_ZN9Registers12IsRegisteredEt>:
 * @brief Check the register exists
 *
 * @param input ID: register address to check
 * @return true if the register is found
 */
bool Registers::IsRegistered(uint16_t ID) {
 80171f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80171fa:	4604      	mov	r4, r0
 80171fc:	460d      	mov	r5, r1
	bool success;
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80171fe:	6800      	ldr	r0, [r0, #0]
 8017200:	f04f 31ff 	mov.w	r1, #4294967295
 8017204:	f7f4 ffda 	bl	800c1bc <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 8017208:	f10d 0207 	add.w	r2, sp, #7
 801720c:	4629      	mov	r1, r5
 801720e:	4620      	mov	r0, r4
 8017210:	f7ff ff5f 	bl	80170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>
	osSemaphoreRelease(RegistersSemaphore);
 8017214:	6820      	ldr	r0, [r4, #0]
 8017216:	f7f5 f805 	bl	800c224 <osSemaphoreRelease>
	return success;
}
 801721a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801721e:	b003      	add	sp, #12
 8017220:	bd30      	pop	{r4, r5, pc}
	...

08017224 <_ZN9Registers16AddBaseRegistersEv>:
void Registers::AddBaseRegisters(void) {
 8017224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017226:	4604      	mov	r4, r0
 8017228:	b087      	sub	sp, #28
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801722a:	f04f 31ff 	mov.w	r1, #4294967295
 801722e:	6800      	ldr	r0, [r0, #0]
 8017230:	f7f4 ffc4 	bl	800c1bc <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 8017234:	f10d 0207 	add.w	r2, sp, #7
 8017238:	2100      	movs	r1, #0
 801723a:	4620      	mov	r0, r4
 801723c:	f7ff ff49 	bl	80170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 8017240:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8017244:	b1dd      	cbz	r5, 801727e <_ZN9Registers16AddBaseRegistersEv+0x5a>
	osSemaphoreRelease(RegistersSemaphore);
 8017246:	6820      	ldr	r0, [r4, #0]
 8017248:	f7f4 ffec 	bl	800c224 <osSemaphoreRelease>
	SetRegisterAsSingle(REG_TIMEBASE);
 801724c:	2100      	movs	r1, #0
 801724e:	4620      	mov	r0, r4
 8017250:	f7ff ff78 	bl	8017144 <_ZN9Registers19SetRegisterAsSingleEt>
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8017254:	f04f 31ff 	mov.w	r1, #4294967295
 8017258:	6820      	ldr	r0, [r4, #0]
 801725a:	f7f4 ffaf 	bl	800c1bc <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801725e:	f10d 0207 	add.w	r2, sp, #7
 8017262:	2100      	movs	r1, #0
 8017264:	4620      	mov	r0, r4
 8017266:	f7ff ff34 	bl	80170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801726a:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801726e:	4605      	mov	r5, r0
	if (!success) {
 8017270:	bb3b      	cbnz	r3, 80172c2 <_ZN9Registers16AddBaseRegistersEv+0x9e>
	osSemaphoreRelease(RegistersSemaphore);
 8017272:	6820      	ldr	r0, [r4, #0]
}
 8017274:	b007      	add	sp, #28
 8017276:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801727a:	f7f4 bfd3 	b.w	800c224 <osSemaphoreRelease>
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 801727e:	f10d 0007 	add.w	r0, sp, #7
 8017282:	f7ff fe77 	bl	8016f74 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	configuration_.register_info = register_;
 8017286:	2301      	movs	r3, #1
	configuration_.mode = mode;
 8017288:	9502      	str	r5, [sp, #8]
	configuration_.register_info = register_;
 801728a:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 801728e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 8017292:	f88d 000c 	strb.w	r0, [sp, #12]
 8017296:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 801729a:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 801729e:	2b00      	cmp	r3, #0
 80172a0:	d0d1      	beq.n	8017246 <_ZN9Registers16AddBaseRegistersEv+0x22>
      push_back(const value_type& __x)
 80172a2:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80172a4:	e9d4 5302 	ldrd	r5, r3, [r4, #8]
 80172a8:	429d      	cmp	r5, r3
 80172aa:	d005      	beq.n	80172b8 <_ZN9Registers16AddBaseRegistersEv+0x94>
 80172ac:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 80172ae:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 80172b2:	3510      	adds	r5, #16
 80172b4:	60a5      	str	r5, [r4, #8]
 80172b6:	e7c6      	b.n	8017246 <_ZN9Registers16AddBaseRegistersEv+0x22>
	  _M_realloc_insert(end(), __x);
 80172b8:	4629      	mov	r1, r5
 80172ba:	1d20      	adds	r0, r4, #4
 80172bc:	f7f7 fd8c 	bl	800edd8 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 80172c0:	e7c1      	b.n	8017246 <_ZN9Registers16AddBaseRegistersEv+0x22>
	uint8_t registered_type = GetTypeID<T>(&success);
 80172c2:	f10d 0007 	add.w	r0, sp, #7
 80172c6:	f7ff fe55 	bl	8016f74 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	if (!success) {
 80172ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80172ce:	2b00      	cmp	r3, #0
 80172d0:	d0cf      	beq.n	8017272 <_ZN9Registers16AddBaseRegistersEv+0x4e>
	if (target_register->register_info.type != registered_type) {
 80172d2:	792b      	ldrb	r3, [r5, #4]
 80172d4:	4298      	cmp	r0, r3
 80172d6:	d1cc      	bne.n	8017272 <_ZN9Registers16AddBaseRegistersEv+0x4e>
	if (callbacks[target_register->register_info.type] == NULL) {
 80172d8:	3004      	adds	r0, #4
 80172da:	f854 7020 	ldr.w	r7, [r4, r0, lsl #2]
 80172de:	2f00      	cmp	r7, #0
 80172e0:	d0c7      	beq.n	8017272 <_ZN9Registers16AddBaseRegistersEv+0x4e>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 80172e2:	7829      	ldrb	r1, [r5, #0]
 80172e4:	4814      	ldr	r0, [pc, #80]	@ (8017338 <_ZN9Registers16AddBaseRegistersEv+0x114>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80172e6:	e9d7 3600 	ldrd	r3, r6, [r7]
 80172ea:	1af2      	subs	r2, r6, r3
 80172ec:	1112      	asrs	r2, r2, #4
 80172ee:	b9b1      	cbnz	r1, 801731e <_ZN9Registers16AddBaseRegistersEv+0xfa>
 80172f0:	7869      	ldrb	r1, [r5, #1]
 80172f2:	b9a1      	cbnz	r1, 801731e <_ZN9Registers16AddBaseRegistersEv+0xfa>
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 80172f4:	816a      	strh	r2, [r5, #10]
 80172f6:	aa02      	add	r2, sp, #8
		callback.read = read;
 80172f8:	9005      	str	r0, [sp, #20]
		callback.write = NULL;
 80172fa:	e9cd 1103 	strd	r1, r1, [sp, #12]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80172fe:	68b9      	ldr	r1, [r7, #8]
 8017300:	42b1      	cmp	r1, r6
 8017302:	d008      	beq.n	8017316 <_ZN9Registers16AddBaseRegistersEv+0xf2>
 8017304:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8017306:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 801730a:	3610      	adds	r6, #16
 801730c:	607e      	str	r6, [r7, #4]
	target_register->mode.callbacks = true;
 801730e:	2301      	movs	r3, #1
 8017310:	706b      	strb	r3, [r5, #1]
	target_register->access.read = true;
 8017312:	726b      	strb	r3, [r5, #9]
 8017314:	e7ad      	b.n	8017272 <_ZN9Registers16AddBaseRegistersEv+0x4e>
	  _M_realloc_insert(end(), __x);
 8017316:	4638      	mov	r0, r7
 8017318:	f7fd fbe2 	bl	8014ae0 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	} else {
 801731c:	e7f7      	b.n	801730e <_ZN9Registers16AddBaseRegistersEv+0xea>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 801731e:	8969      	ldrh	r1, [r5, #10]
	if (__n >= this->size())
 8017320:	4291      	cmp	r1, r2
 8017322:	d302      	bcc.n	801732a <_ZN9Registers16AddBaseRegistersEv+0x106>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8017324:	4805      	ldr	r0, [pc, #20]	@ (801733c <_ZN9Registers16AddBaseRegistersEv+0x118>)
 8017326:	f002 fb30 	bl	801998a <_ZSt24__throw_out_of_range_fmtPKcz>
	return *(this->_M_impl._M_start + __n);
 801732a:	eb03 1301 	add.w	r3, r3, r1, lsl #4
		callback->context = context;
 801732e:	2200      	movs	r2, #0
		callback->read = read;
 8017330:	60d8      	str	r0, [r3, #12]
		callback->context = context;
 8017332:	605a      	str	r2, [r3, #4]
 8017334:	e7eb      	b.n	801730e <_ZN9Registers16AddBaseRegistersEv+0xea>
 8017336:	bf00      	nop
 8017338:	08016f63 	.word	0x08016f63
 801733c:	0801a080 	.word	0x0801a080

08017340 <_ZZN7Sensors12AddRegistersEvENUlPvtPPhPtE_4_FUNES0_tS2_S3_>:
void Sensors::AddRegisters(void) {
	// Register to access the general sensor reading status
	registers->AddRegister<uint8_t>(REG_SENSORS_READING_STATUS);
	registers->SetRegisterAsSingle(REG_SENSORS_READING_STATUS);
	registers->AddReadCallback<uint8_t>(REG_SENSORS_READING_STATUS, (void*) this,
			[](void* context, uint16_t register_id, uint8_t** output, uint16_t* length) -> bool {
 8017340:	b538      	push	{r3, r4, r5, lr}
 8017342:	4604      	mov	r4, r0
 8017344:	4615      	mov	r5, r2
			Sensors* self = (Sensors*) context;
			osSemaphoreAcquire(self->SensorsSemaphore, osWaitForever);
 8017346:	f04f 31ff 	mov.w	r1, #4294967295
 801734a:	6800      	ldr	r0, [r0, #0]
 801734c:	f7f4 ff36 	bl	800c1bc <osSemaphoreAcquire>
			**output = (uint8_t) self->active;
 8017350:	682b      	ldr	r3, [r5, #0]
 8017352:	7922      	ldrb	r2, [r4, #4]
 8017354:	701a      	strb	r2, [r3, #0]
			osSemaphoreRelease(self->SensorsSemaphore);
 8017356:	6820      	ldr	r0, [r4, #0]
 8017358:	f7f4 ff64 	bl	800c224 <osSemaphoreRelease>
			return true;
		}
 801735c:	2001      	movs	r0, #1
 801735e:	bd38      	pop	{r3, r4, r5, pc}

08017360 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 8017360:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8017362:	4926      	ldr	r1, [pc, #152]	@ (80173fc <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 8017364:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8017366:	4826      	ldr	r0, [pc, #152]	@ (8017400 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8017368:	f002 faee 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 801736c:	2800      	cmp	r0, #0
 801736e:	d133      	bne.n	80173d8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8017370:	4924      	ldr	r1, [pc, #144]	@ (8017404 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa4>)
 8017372:	4823      	ldr	r0, [pc, #140]	@ (8017400 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8017374:	f002 fae8 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8017378:	2800      	cmp	r0, #0
 801737a:	d12f      	bne.n	80173dc <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 801737c:	4920      	ldr	r1, [pc, #128]	@ (8017400 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 801737e:	4608      	mov	r0, r1
 8017380:	f002 fae2 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8017384:	bb60      	cbnz	r0, 80173e0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8017386:	4920      	ldr	r1, [pc, #128]	@ (8017408 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa8>)
 8017388:	481d      	ldr	r0, [pc, #116]	@ (8017400 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 801738a:	f002 fadd 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 801738e:	bb48      	cbnz	r0, 80173e4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8017390:	491e      	ldr	r1, [pc, #120]	@ (801740c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xac>)
 8017392:	481b      	ldr	r0, [pc, #108]	@ (8017400 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8017394:	f002 fad8 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8017398:	bb30      	cbnz	r0, 80173e8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 801739a:	491d      	ldr	r1, [pc, #116]	@ (8017410 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xb0>)
 801739c:	4818      	ldr	r0, [pc, #96]	@ (8017400 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 801739e:	f002 fad3 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 80173a2:	bb18      	cbnz	r0, 80173ec <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 80173a4:	491b      	ldr	r1, [pc, #108]	@ (8017414 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xb4>)
 80173a6:	4816      	ldr	r0, [pc, #88]	@ (8017400 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 80173a8:	f002 face 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 80173ac:	bb00      	cbnz	r0, 80173f0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 80173ae:	491a      	ldr	r1, [pc, #104]	@ (8017418 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xb8>)
 80173b0:	4813      	ldr	r0, [pc, #76]	@ (8017400 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 80173b2:	f002 fac9 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 80173b6:	b9e8      	cbnz	r0, 80173f4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 80173b8:	4918      	ldr	r1, [pc, #96]	@ (801741c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xbc>)
 80173ba:	4811      	ldr	r0, [pc, #68]	@ (8017400 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 80173bc:	f002 fac4 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 80173c0:	b9d0      	cbnz	r0, 80173f8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 80173c2:	4917      	ldr	r1, [pc, #92]	@ (8017420 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xc0>)
 80173c4:	480e      	ldr	r0, [pc, #56]	@ (8017400 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 80173c6:	f002 fabf 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 80173ca:	2800      	cmp	r0, #0
 80173cc:	bf14      	ite	ne
 80173ce:	2309      	movne	r3, #9
 80173d0:	2300      	moveq	r3, #0
 80173d2:	7020      	strb	r0, [r4, #0]
}
 80173d4:	4618      	mov	r0, r3
 80173d6:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80173d8:	2300      	movs	r3, #0
 80173da:	e7fa      	b.n	80173d2 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 80173dc:	2301      	movs	r3, #1
 80173de:	e7f8      	b.n	80173d2 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 80173e0:	2302      	movs	r3, #2
 80173e2:	e7f6      	b.n	80173d2 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 80173e4:	2303      	movs	r3, #3
 80173e6:	e7f4      	b.n	80173d2 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 80173e8:	2304      	movs	r3, #4
 80173ea:	e7f2      	b.n	80173d2 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 80173ec:	2305      	movs	r3, #5
 80173ee:	e7f0      	b.n	80173d2 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 80173f0:	2306      	movs	r3, #6
 80173f2:	e7ee      	b.n	80173d2 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 80173f4:	2307      	movs	r3, #7
 80173f6:	e7ec      	b.n	80173d2 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 80173f8:	2308      	movs	r3, #8
 80173fa:	e7ea      	b.n	80173d2 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
 80173fc:	0801a298 	.word	0x0801a298
 8017400:	0801a278 	.word	0x0801a278
 8017404:	0801a288 	.word	0x0801a288
 8017408:	0801a268 	.word	0x0801a268
 801740c:	0801a2a0 	.word	0x0801a2a0
 8017410:	0801a290 	.word	0x0801a290
 8017414:	0801a280 	.word	0x0801a280
 8017418:	0801a270 	.word	0x0801a270
 801741c:	0801a260 	.word	0x0801a260
 8017420:	0801a258 	.word	0x0801a258

08017424 <_ZN9Registers9GetTypeIDItEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 8017424:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8017426:	4926      	ldr	r1, [pc, #152]	@ (80174c0 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 8017428:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801742a:	4826      	ldr	r0, [pc, #152]	@ (80174c4 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 801742c:	f002 fa8c 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8017430:	2800      	cmp	r0, #0
 8017432:	d133      	bne.n	801749c <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8017434:	4923      	ldr	r1, [pc, #140]	@ (80174c4 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 8017436:	4608      	mov	r0, r1
 8017438:	f002 fa86 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 801743c:	2800      	cmp	r0, #0
 801743e:	d12f      	bne.n	80174a0 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8017440:	4921      	ldr	r1, [pc, #132]	@ (80174c8 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa4>)
 8017442:	4820      	ldr	r0, [pc, #128]	@ (80174c4 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 8017444:	f002 fa80 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8017448:	bb60      	cbnz	r0, 80174a4 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 801744a:	4920      	ldr	r1, [pc, #128]	@ (80174cc <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa8>)
 801744c:	481d      	ldr	r0, [pc, #116]	@ (80174c4 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 801744e:	f002 fa7b 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8017452:	bb48      	cbnz	r0, 80174a8 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8017454:	491e      	ldr	r1, [pc, #120]	@ (80174d0 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xac>)
 8017456:	481b      	ldr	r0, [pc, #108]	@ (80174c4 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 8017458:	f002 fa76 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 801745c:	bb30      	cbnz	r0, 80174ac <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 801745e:	491d      	ldr	r1, [pc, #116]	@ (80174d4 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xb0>)
 8017460:	4818      	ldr	r0, [pc, #96]	@ (80174c4 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 8017462:	f002 fa71 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8017466:	bb18      	cbnz	r0, 80174b0 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8017468:	491b      	ldr	r1, [pc, #108]	@ (80174d8 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xb4>)
 801746a:	4816      	ldr	r0, [pc, #88]	@ (80174c4 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 801746c:	f002 fa6c 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8017470:	bb00      	cbnz	r0, 80174b4 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 8017472:	491a      	ldr	r1, [pc, #104]	@ (80174dc <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xb8>)
 8017474:	4813      	ldr	r0, [pc, #76]	@ (80174c4 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 8017476:	f002 fa67 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 801747a:	b9e8      	cbnz	r0, 80174b8 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 801747c:	4918      	ldr	r1, [pc, #96]	@ (80174e0 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xbc>)
 801747e:	4811      	ldr	r0, [pc, #68]	@ (80174c4 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 8017480:	f002 fa62 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8017484:	b9d0      	cbnz	r0, 80174bc <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 8017486:	4917      	ldr	r1, [pc, #92]	@ (80174e4 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xc0>)
 8017488:	480e      	ldr	r0, [pc, #56]	@ (80174c4 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 801748a:	f002 fa5d 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 801748e:	2800      	cmp	r0, #0
 8017490:	bf14      	ite	ne
 8017492:	2309      	movne	r3, #9
 8017494:	2300      	moveq	r3, #0
 8017496:	7020      	strb	r0, [r4, #0]
}
 8017498:	4618      	mov	r0, r3
 801749a:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801749c:	2300      	movs	r3, #0
 801749e:	e7fa      	b.n	8017496 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 80174a0:	2301      	movs	r3, #1
 80174a2:	e7f8      	b.n	8017496 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 80174a4:	2302      	movs	r3, #2
 80174a6:	e7f6      	b.n	8017496 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 80174a8:	2303      	movs	r3, #3
 80174aa:	e7f4      	b.n	8017496 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 80174ac:	2304      	movs	r3, #4
 80174ae:	e7f2      	b.n	8017496 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 80174b0:	2305      	movs	r3, #5
 80174b2:	e7f0      	b.n	8017496 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 80174b4:	2306      	movs	r3, #6
 80174b6:	e7ee      	b.n	8017496 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 80174b8:	2307      	movs	r3, #7
 80174ba:	e7ec      	b.n	8017496 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 80174bc:	2308      	movs	r3, #8
 80174be:	e7ea      	b.n	8017496 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
 80174c0:	0801a298 	.word	0x0801a298
 80174c4:	0801a288 	.word	0x0801a288
 80174c8:	0801a278 	.word	0x0801a278
 80174cc:	0801a268 	.word	0x0801a268
 80174d0:	0801a2a0 	.word	0x0801a2a0
 80174d4:	0801a290 	.word	0x0801a290
 80174d8:	0801a280 	.word	0x0801a280
 80174dc:	0801a270 	.word	0x0801a270
 80174e0:	0801a260 	.word	0x0801a260
 80174e4:	0801a258 	.word	0x0801a258

080174e8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>:
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80174e8:	4926      	ldr	r1, [pc, #152]	@ (8017584 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 80174ea:	b510      	push	{r4, lr}
 80174ec:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80174ee:	4608      	mov	r0, r1
 80174f0:	f002 fa2a 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 80174f4:	2800      	cmp	r0, #0
 80174f6:	d133      	bne.n	8017560 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 80174f8:	4923      	ldr	r1, [pc, #140]	@ (8017588 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa0>)
 80174fa:	4822      	ldr	r0, [pc, #136]	@ (8017584 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 80174fc:	f002 fa24 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8017500:	2800      	cmp	r0, #0
 8017502:	d12f      	bne.n	8017564 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8017504:	4921      	ldr	r1, [pc, #132]	@ (801758c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa4>)
 8017506:	481f      	ldr	r0, [pc, #124]	@ (8017584 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8017508:	f002 fa1e 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 801750c:	bb60      	cbnz	r0, 8017568 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 801750e:	4920      	ldr	r1, [pc, #128]	@ (8017590 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa8>)
 8017510:	481c      	ldr	r0, [pc, #112]	@ (8017584 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8017512:	f002 fa19 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8017516:	bb48      	cbnz	r0, 801756c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8017518:	491e      	ldr	r1, [pc, #120]	@ (8017594 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xac>)
 801751a:	481a      	ldr	r0, [pc, #104]	@ (8017584 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 801751c:	f002 fa14 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8017520:	bb30      	cbnz	r0, 8017570 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 8017522:	491d      	ldr	r1, [pc, #116]	@ (8017598 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb0>)
 8017524:	4817      	ldr	r0, [pc, #92]	@ (8017584 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8017526:	f002 fa0f 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 801752a:	bb18      	cbnz	r0, 8017574 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 801752c:	491b      	ldr	r1, [pc, #108]	@ (801759c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb4>)
 801752e:	4815      	ldr	r0, [pc, #84]	@ (8017584 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8017530:	f002 fa0a 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8017534:	bb00      	cbnz	r0, 8017578 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 8017536:	491a      	ldr	r1, [pc, #104]	@ (80175a0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb8>)
 8017538:	4812      	ldr	r0, [pc, #72]	@ (8017584 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 801753a:	f002 fa05 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 801753e:	b9e8      	cbnz	r0, 801757c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8017540:	4918      	ldr	r1, [pc, #96]	@ (80175a4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xbc>)
 8017542:	4810      	ldr	r0, [pc, #64]	@ (8017584 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8017544:	f002 fa00 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8017548:	b9d0      	cbnz	r0, 8017580 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 801754a:	4917      	ldr	r1, [pc, #92]	@ (80175a8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xc0>)
 801754c:	480d      	ldr	r0, [pc, #52]	@ (8017584 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 801754e:	f002 f9fb 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 8017552:	2800      	cmp	r0, #0
 8017554:	bf14      	ite	ne
 8017556:	2309      	movne	r3, #9
 8017558:	2300      	moveq	r3, #0
 801755a:	7020      	strb	r0, [r4, #0]
}
 801755c:	4618      	mov	r0, r3
 801755e:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8017560:	2300      	movs	r3, #0
 8017562:	e7fa      	b.n	801755a <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8017564:	2301      	movs	r3, #1
 8017566:	e7f8      	b.n	801755a <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8017568:	2302      	movs	r3, #2
 801756a:	e7f6      	b.n	801755a <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 801756c:	2303      	movs	r3, #3
 801756e:	e7f4      	b.n	801755a <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8017570:	2304      	movs	r3, #4
 8017572:	e7f2      	b.n	801755a <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 8017574:	2305      	movs	r3, #5
 8017576:	e7f0      	b.n	801755a <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8017578:	2306      	movs	r3, #6
 801757a:	e7ee      	b.n	801755a <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 801757c:	2307      	movs	r3, #7
 801757e:	e7ec      	b.n	801755a <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8017580:	2308      	movs	r3, #8
 8017582:	e7ea      	b.n	801755a <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
 8017584:	0801a298 	.word	0x0801a298
 8017588:	0801a288 	.word	0x0801a288
 801758c:	0801a278 	.word	0x0801a278
 8017590:	0801a268 	.word	0x0801a268
 8017594:	0801a2a0 	.word	0x0801a2a0
 8017598:	0801a290 	.word	0x0801a290
 801759c:	0801a280 	.word	0x0801a280
 80175a0:	0801a270 	.word	0x0801a270
 80175a4:	0801a260 	.word	0x0801a260
 80175a8:	0801a258 	.word	0x0801a258

080175ac <_ZN7SensorsC1Ev>:
Sensors::Sensors() {
 80175ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
 80175ae:	2300      	movs	r3, #0
 80175b0:	4604      	mov	r4, r0
 80175b2:	f100 0750 	add.w	r7, r0, #80	@ 0x50
 80175b6:	6583      	str	r3, [r0, #88]	@ 0x58
 80175b8:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80175bc:	e9c0 3306 	strd	r3, r3, [r0, #24]
 80175c0:	e9c0 3308 	strd	r3, r3, [r0, #32]
 80175c4:	e9c0 3314 	strd	r3, r3, [r0, #80]	@ 0x50
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80175c8:	2050      	movs	r0, #80	@ 0x50
 80175ca:	f002 f926 	bl	801981a <_Znwj>
 80175ce:	4605      	mov	r5, r0
      ptrdiff_t __count = __last - __first;
 80175d0:	e9d4 6207 	ldrd	r6, r2, [r4, #28]
 80175d4:	1b92      	subs	r2, r2, r6
      if (__count > 0)
 80175d6:	2a00      	cmp	r2, #0
 80175d8:	dd08      	ble.n	80175ec <_ZN7SensorsC1Ev+0x40>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80175da:	4631      	mov	r1, r6
 80175dc:	f002 faaa 	bl	8019b34 <memmove>
			- this->_M_impl._M_start);
 80175e0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80175e2:	4630      	mov	r0, r6
 80175e4:	1b89      	subs	r1, r1, r6
 80175e6:	f002 f8f3 	bl	80197d0 <_ZdlPvj>
      }
 80175ea:	e001      	b.n	80175f0 <_ZN7SensorsC1Ev+0x44>
	if (__p)
 80175ec:	2e00      	cmp	r6, #0
 80175ee:	d1f7      	bne.n	80175e0 <_ZN7SensorsC1Ev+0x34>
	functions[UINT8_TYPE] = NULL;
 80175f0:	2300      	movs	r3, #0
}
 80175f2:	4620      	mov	r0, r4
	  this->_M_impl._M_finish = __tmp + __old_size;
 80175f4:	e9c4 5507 	strd	r5, r5, [r4, #28]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80175f8:	3550      	adds	r5, #80	@ 0x50
	functions[UINT16_TYPE] = NULL;
 80175fa:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 80175fe:	6265      	str	r5, [r4, #36]	@ 0x24
	functions[UINT64_TYPE] = NULL;
 8017600:	e9c4 330c 	strd	r3, r3, [r4, #48]	@ 0x30
	functions[INT16_TYPE] = NULL;
 8017604:	e9c4 330e 	strd	r3, r3, [r4, #56]	@ 0x38
	functions[INT64_TYPE] = NULL;
 8017608:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
	functions[FLOAT_TYPE] = &float_sensor_functions;
 801760c:	e9c4 7312 	strd	r7, r3, [r4, #72]	@ 0x48
}
 8017610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017612 <_ZN7Sensors4InitEP9RegistersP10PublishersP13HardwareDelayP4LEDS>:
void Sensors::Init(Registers* registers_, Publishers* publishers_, HardwareDelay* hardware_delay_, LEDS* leds_) {
 8017612:	b510      	push	{r4, lr}
	publishers = publishers_;
 8017614:	e9c0 1217 	strd	r1, r2, [r0, #92]	@ 0x5c
	hardware_delay = hardware_delay_;
 8017618:	6643      	str	r3, [r0, #100]	@ 0x64
	SensorsSemaphore = osSemaphoreNew(1, 1, NULL);
 801761a:	2101      	movs	r1, #1
	leds = leds_;
 801761c:	9b02      	ldr	r3, [sp, #8]
void Sensors::Init(Registers* registers_, Publishers* publishers_, HardwareDelay* hardware_delay_, LEDS* leds_) {
 801761e:	4604      	mov	r4, r0
	SensorsSemaphore = osSemaphoreNew(1, 1, NULL);
 8017620:	2200      	movs	r2, #0
	leds = leds_;
 8017622:	6683      	str	r3, [r0, #104]	@ 0x68
	SensorsSemaphore = osSemaphoreNew(1, 1, NULL);
 8017624:	4608      	mov	r0, r1
 8017626:	f7f4 fd6d 	bl	800c104 <osSemaphoreNew>
 801762a:	6020      	str	r0, [r4, #0]
	osSemaphoreRelease(SensorsSemaphore);
 801762c:	f7f4 fdfa 	bl	800c224 <osSemaphoreRelease>
	active = false;
 8017630:	2300      	movs	r3, #0
 8017632:	7123      	strb	r3, [r4, #4]
	delayed_index = 0;
 8017634:	7363      	strb	r3, [r4, #13]
	period_ms = DEFAULT_SENSORS_PERIOD;
 8017636:	230a      	movs	r3, #10
 8017638:	60a3      	str	r3, [r4, #8]
}
 801763a:	bd10      	pop	{r4, pc}

0801763c <_ZN7Sensors16SetReadingStatusEb>:
 * @brief Set the reading status of the class
 *
 * @param input status: reading status. true = read sensors
 * @return whether successful
 */
bool Sensors::SetReadingStatus(bool status) {
 801763c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801763e:	4604      	mov	r4, r0
 8017640:	460d      	mov	r5, r1
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 8017642:	6800      	ldr	r0, [r0, #0]
 8017644:	f04f 31ff 	mov.w	r1, #4294967295
 8017648:	f7f4 fdb8 	bl	800c1bc <osSemaphoreAcquire>
	active = status;
 801764c:	7125      	strb	r5, [r4, #4]

	// Reset all read indexes if reading is stopped to restart a new reading from zero
	if (!status) {
 801764e:	b91d      	cbnz	r5, 8017658 <_ZN7Sensors16SetReadingStatusEb+0x1c>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8017650:	e9d4 3004 	ldrd	r3, r0, [r4, #16]
		for (I2CInterface &interface : interfaces) {
 8017654:	4298      	cmp	r0, r3
 8017656:	d104      	bne.n	8017662 <_ZN7Sensors16SetReadingStatusEb+0x26>
				}
			}
		}
	}

	osSemaphoreRelease(SensorsSemaphore);
 8017658:	6820      	ldr	r0, [r4, #0]
 801765a:	f7f4 fde3 	bl	800c224 <osSemaphoreRelease>
	return true;
}
 801765e:	2001      	movs	r0, #1
 8017660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			interface.read_index = 0;
 8017662:	e9d3 2616 	ldrd	r2, r6, [r3, #88]	@ 0x58
 8017666:	f883 5055 	strb.w	r5, [r3, #85]	@ 0x55
			for (SensorGroup &sensor_group : interface.sensor_groups) {
 801766a:	4296      	cmp	r6, r2
 801766c:	d101      	bne.n	8017672 <_ZN7Sensors16SetReadingStatusEb+0x36>
      operator++() _GLIBCXX_NOEXCEPT
 801766e:	337c      	adds	r3, #124	@ 0x7c
	return *this;
 8017670:	e7f0      	b.n	8017654 <_ZN7Sensors16SetReadingStatusEb+0x18>
				sensor_group.read_index = 0;
 8017672:	e9d2 1703 	ldrd	r1, r7, [r2, #12]
 8017676:	7215      	strb	r5, [r2, #8]
				for (Sensor &sensor : sensor_group.sensors) {
 8017678:	428f      	cmp	r7, r1
 801767a:	d101      	bne.n	8017680 <_ZN7Sensors16SetReadingStatusEb+0x44>
      operator++() _GLIBCXX_NOEXCEPT
 801767c:	3218      	adds	r2, #24
	return *this;
 801767e:	e7f4      	b.n	801766a <_ZN7Sensors16SetReadingStatusEb+0x2e>
					sensor.read_index = 0;
 8017680:	740d      	strb	r5, [r1, #16]
      operator++() _GLIBCXX_NOEXCEPT
 8017682:	3128      	adds	r1, #40	@ 0x28
	return *this;
 8017684:	e7f8      	b.n	8017678 <_ZN7Sensors16SetReadingStatusEb+0x3c>

08017686 <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t>:
			return self->SetReadingStatus((bool) *input);
 8017686:	7811      	ldrb	r1, [r2, #0]
 8017688:	3900      	subs	r1, #0
 801768a:	bf18      	it	ne
 801768c:	2101      	movne	r1, #1
 801768e:	f7ff bfd5 	b.w	801763c <_ZN7Sensors16SetReadingStatusEb>

08017692 <_ZN7Sensors25DeactivateAllSensorGroupsEv>:
/**
 * @brief Deactivate all sensor groups on all interfaces
 *
 * @return whether successful
 */
bool Sensors::DeactivateAllSensorGroups(void) {
 8017692:	b538      	push	{r3, r4, r5, lr}
 8017694:	4604      	mov	r4, r0
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 8017696:	f04f 31ff 	mov.w	r1, #4294967295
 801769a:	6800      	ldr	r0, [r0, #0]
 801769c:	f7f4 fd8e 	bl	800c1bc <osSemaphoreAcquire>
	for (I2CInterface &interface : interfaces) {
		for (SensorGroup &sensor_group : interface.sensor_groups) {
			sensor_group.active = false;
 80176a0:	2000      	movs	r0, #0
 80176a2:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
	for (I2CInterface &interface : interfaces) {
 80176a6:	4299      	cmp	r1, r3
 80176a8:	d104      	bne.n	80176b4 <_ZN7Sensors25DeactivateAllSensorGroupsEv+0x22>
		}
	}
	osSemaphoreRelease(SensorsSemaphore);
 80176aa:	6820      	ldr	r0, [r4, #0]
 80176ac:	f7f4 fdba 	bl	800c224 <osSemaphoreRelease>
	return true;
}
 80176b0:	2001      	movs	r0, #1
 80176b2:	bd38      	pop	{r3, r4, r5, pc}
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80176b4:	e9d3 2516 	ldrd	r2, r5, [r3, #88]	@ 0x58
		for (SensorGroup &sensor_group : interface.sensor_groups) {
 80176b8:	4295      	cmp	r5, r2
 80176ba:	d101      	bne.n	80176c0 <_ZN7Sensors25DeactivateAllSensorGroupsEv+0x2e>
      operator++() _GLIBCXX_NOEXCEPT
 80176bc:	337c      	adds	r3, #124	@ 0x7c
	return *this;
 80176be:	e7f2      	b.n	80176a6 <_ZN7Sensors25DeactivateAllSensorGroupsEv+0x14>
			sensor_group.active = false;
 80176c0:	f802 0b18 	strb.w	r0, [r2], #24
 80176c4:	e7f8      	b.n	80176b8 <_ZN7Sensors25DeactivateAllSensorGroupsEv+0x26>

080176c6 <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE2_4_FUNES0_tS1_t>:
			return self->DeactivateAllSensorGroups();
 80176c6:	f7ff bfe4 	b.w	8017692 <_ZN7Sensors25DeactivateAllSensorGroupsEv>

080176ca <_ZN7Sensors13DetectSensorsEmm>:
 * @brief Force a detection of I2C sensors to update presence flag. Can be useful if a sensor if plugged after creation
 *
 * @param input trials: number of trials used to detect the sensor
 * @param input timeout: maximum time in ms left to detect a sensor
 */
void Sensors::DetectSensors(uint32_t trials, uint32_t timeout) {
 80176ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176ce:	4605      	mov	r5, r0
 80176d0:	9101      	str	r1, [sp, #4]
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 80176d2:	6800      	ldr	r0, [r0, #0]
 80176d4:	f04f 31ff 	mov.w	r1, #4294967295
void Sensors::DetectSensors(uint32_t trials, uint32_t timeout) {
 80176d8:	4690      	mov	r8, r2
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 80176da:	f7f4 fd6f 	bl	800c1bc <osSemaphoreAcquire>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80176de:	e9d5 4904 	ldrd	r4, r9, [r5, #16]
	HAL_StatusTypeDef status;
	for (I2CInterface &interface : interfaces) {
 80176e2:	45a1      	cmp	r9, r4
 80176e4:	d105      	bne.n	80176f2 <_ZN7Sensors13DetectSensorsEmm+0x28>
					// If not I2C, force presence
					sensor.present = true;
			}
		}
	}
	osSemaphoreRelease(SensorsSemaphore);
 80176e6:	6828      	ldr	r0, [r5, #0]
}
 80176e8:	b003      	add	sp, #12
 80176ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	osSemaphoreRelease(SensorsSemaphore);
 80176ee:	f7f4 bd99 	b.w	800c224 <osSemaphoreRelease>
 80176f2:	e9d4 6a16 	ldrd	r6, sl, [r4, #88]	@ 0x58
		for (SensorGroup &sensor_group : interface.sensor_groups) {
 80176f6:	45b2      	cmp	sl, r6
 80176f8:	d101      	bne.n	80176fe <_ZN7Sensors13DetectSensorsEmm+0x34>
      operator++() _GLIBCXX_NOEXCEPT
 80176fa:	347c      	adds	r4, #124	@ 0x7c
	return *this;
 80176fc:	e7f1      	b.n	80176e2 <_ZN7Sensors13DetectSensorsEmm+0x18>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80176fe:	e9d6 7b03 	ldrd	r7, fp, [r6, #12]
			for (Sensor &sensor : sensor_group.sensors) {
 8017702:	45bb      	cmp	fp, r7
 8017704:	d101      	bne.n	801770a <_ZN7Sensors13DetectSensorsEmm+0x40>
      operator++() _GLIBCXX_NOEXCEPT
 8017706:	3618      	adds	r6, #24
	return *this;
 8017708:	e7f5      	b.n	80176f6 <_ZN7Sensors13DetectSensorsEmm+0x2c>
				if (interface.ID != INTERNAL) {
 801770a:	7823      	ldrb	r3, [r4, #0]
 801770c:	2b0a      	cmp	r3, #10
 801770e:	d00b      	beq.n	8017728 <_ZN7Sensors13DetectSensorsEmm+0x5e>
					status = HAL_I2C_IsDeviceReady(interface.interface, sensor.address, trials, timeout);
 8017710:	4643      	mov	r3, r8
 8017712:	9a01      	ldr	r2, [sp, #4]
 8017714:	88f9      	ldrh	r1, [r7, #6]
 8017716:	68e0      	ldr	r0, [r4, #12]
 8017718:	f7ef f83e 	bl	8006798 <HAL_I2C_IsDeviceReady>
					sensor.present = (status == HAL_OK);
 801771c:	fab0 f080 	clz	r0, r0
 8017720:	0940      	lsrs	r0, r0, #5
 8017722:	70b8      	strb	r0, [r7, #2]
      operator++() _GLIBCXX_NOEXCEPT
 8017724:	3728      	adds	r7, #40	@ 0x28
	return *this;
 8017726:	e7ec      	b.n	8017702 <_ZN7Sensors13DetectSensorsEmm+0x38>
 8017728:	2001      	movs	r0, #1
 801772a:	e7fa      	b.n	8017722 <_ZN7Sensors13DetectSensorsEmm+0x58>

0801772c <_ZZN7Sensors12AddRegistersEvENUlPvtPmtE8_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 801772c:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint32_t* input, uint16_t length) -> bool {
 801772e:	b508      	push	{r3, lr}
			if (length != 2) return false;
 8017730:	d105      	bne.n	801773e <_ZZN7Sensors12AddRegistersEvENUlPvtPmtE8_4_FUNES0_tS1_t+0x12>
			self->DetectSensors(input[0], input[1]);
 8017732:	e9d2 1200 	ldrd	r1, r2, [r2]
 8017736:	f7ff ffc8 	bl	80176ca <_ZN7Sensors13DetectSensorsEmm>
 801773a:	2001      	movs	r0, #1
		}
 801773c:	bd08      	pop	{r3, pc}
			if (length != 2) return false;
 801773e:	2000      	movs	r0, #0
 8017740:	e7fc      	b.n	801773c <_ZZN7Sensors12AddRegistersEvENUlPvtPmtE8_4_FUNES0_tS1_t+0x10>

08017742 <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb>:
 * @param input group_ID: the group ID to find
 * @param output interface_: interface linked to the sensor group
 * @param output success: whether successful
 * @return the sensor group pointer
 */
SensorGroup* Sensors::FindSensorGroupPath(uint8_t group_ID, I2CInterface** interface_, bool* success) {
 8017742:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017744:	e9d0 4604 	ldrd	r4, r6, [r0, #16]
	for (I2CInterface &interface : interfaces) {
 8017748:	42a6      	cmp	r6, r4
 801774a:	d102      	bne.n	8017752 <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb+0x10>
 801774c:	2200      	movs	r2, #0
				return sensor_group_pointer;
			}
		}
	}
	*success = false;
	return NULL;
 801774e:	4610      	mov	r0, r2
 8017750:	e00f      	b.n	8017772 <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb+0x30>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8017752:	e9d4 5716 	ldrd	r5, r7, [r4, #88]	@ 0x58
		for (SensorGroup &sensor_group : interface.sensor_groups) {
 8017756:	42bd      	cmp	r5, r7
 8017758:	4628      	mov	r0, r5
 801775a:	d101      	bne.n	8017760 <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb+0x1e>
      operator++() _GLIBCXX_NOEXCEPT
 801775c:	347c      	adds	r4, #124	@ 0x7c
	return *this;
 801775e:	e7f3      	b.n	8017748 <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb+0x6>
			if (sensor_group.ID == group_ID) {
 8017760:	f890 c002 	ldrb.w	ip, [r0, #2]
 8017764:	f100 0518 	add.w	r5, r0, #24
 8017768:	458c      	cmp	ip, r1
 801776a:	d1f4      	bne.n	8017756 <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb+0x14>
				if (interface_ != NULL) *interface_ = &interface;
 801776c:	b102      	cbz	r2, 8017770 <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb+0x2e>
 801776e:	6014      	str	r4, [r2, #0]
SensorGroup* Sensors::FindSensorGroupPath(uint8_t group_ID, I2CInterface** interface_, bool* success) {
 8017770:	2201      	movs	r2, #1
				*success = true;
 8017772:	701a      	strb	r2, [r3, #0]
}
 8017774:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017776 <_ZN7Sensors15FindSensorGroupEhPb>:
SensorGroup* Sensors::FindSensorGroup(uint8_t group_ID, bool* success) {
 8017776:	4613      	mov	r3, r2
	return FindSensorGroupPath(group_ID, NULL, success);
 8017778:	2200      	movs	r2, #0
 801777a:	f7ff bfe2 	b.w	8017742 <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb>

0801777e <_ZN7Sensors23SetSensorGroupPrescalerEht>:
bool Sensors::SetSensorGroupPrescaler(uint8_t group_ID, uint16_t prescaler) {
 801777e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017780:	4616      	mov	r6, r2
	SensorGroup* sensor_group = FindSensorGroup(group_ID, &success);
 8017782:	f10d 0207 	add.w	r2, sp, #7
bool Sensors::SetSensorGroupPrescaler(uint8_t group_ID, uint16_t prescaler) {
 8017786:	4604      	mov	r4, r0
	SensorGroup* sensor_group = FindSensorGroup(group_ID, &success);
 8017788:	f7ff fff5 	bl	8017776 <_ZN7Sensors15FindSensorGroupEhPb>
	if (!success) return false;
 801778c:	f89d 7007 	ldrb.w	r7, [sp, #7]
	SensorGroup* sensor_group = FindSensorGroup(group_ID, &success);
 8017790:	4605      	mov	r5, r0
	if (!success) return false;
 8017792:	b147      	cbz	r7, 80177a6 <_ZN7Sensors23SetSensorGroupPrescalerEht+0x28>
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 8017794:	f04f 31ff 	mov.w	r1, #4294967295
 8017798:	6820      	ldr	r0, [r4, #0]
 801779a:	f7f4 fd0f 	bl	800c1bc <osSemaphoreAcquire>
	osSemaphoreRelease(SensorsSemaphore);
 801779e:	6820      	ldr	r0, [r4, #0]
	sensor_group->prescaler = prescaler;
 80177a0:	80ae      	strh	r6, [r5, #4]
	osSemaphoreRelease(SensorsSemaphore);
 80177a2:	f7f4 fd3f 	bl	800c224 <osSemaphoreRelease>
}
 80177a6:	4638      	mov	r0, r7
 80177a8:	b003      	add	sp, #12
 80177aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080177ac <_ZZN7Sensors12AddRegistersEvENUlPvtPttE7_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 80177ac:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint16_t* input, uint16_t length) -> bool {
 80177ae:	4611      	mov	r1, r2
			if (length != 2) return false;
 80177b0:	d103      	bne.n	80177ba <_ZZN7Sensors12AddRegistersEvENUlPvtPttE7_4_FUNES0_tS1_t+0xe>
			return self->SetSensorGroupPrescaler((uint8_t) input[0], input[1]);
 80177b2:	8852      	ldrh	r2, [r2, #2]
 80177b4:	7809      	ldrb	r1, [r1, #0]
 80177b6:	f7ff bfe2 	b.w	801777e <_ZN7Sensors23SetSensorGroupPrescalerEht>
		}
 80177ba:	2000      	movs	r0, #0
 80177bc:	4770      	bx	lr

080177be <_ZN7Sensors20SetSensorGroupStatusEhb>:
bool Sensors::SetSensorGroupStatus(uint8_t group_ID, bool status) {
 80177be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80177c0:	4614      	mov	r4, r2
	SensorGroup* sensor_group = FindSensorGroup(group_ID, &success);
 80177c2:	f10d 0207 	add.w	r2, sp, #7
bool Sensors::SetSensorGroupStatus(uint8_t group_ID, bool status) {
 80177c6:	4606      	mov	r6, r0
	SensorGroup* sensor_group = FindSensorGroup(group_ID, &success);
 80177c8:	f7ff ffd5 	bl	8017776 <_ZN7Sensors15FindSensorGroupEhPb>
	if (!success) return false;
 80177cc:	f89d 7007 	ldrb.w	r7, [sp, #7]
	SensorGroup* sensor_group = FindSensorGroup(group_ID, &success);
 80177d0:	4605      	mov	r5, r0
	if (!success) return false;
 80177d2:	b14f      	cbz	r7, 80177e8 <_ZN7Sensors20SetSensorGroupStatusEhb+0x2a>
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 80177d4:	f04f 31ff 	mov.w	r1, #4294967295
 80177d8:	6830      	ldr	r0, [r6, #0]
 80177da:	f7f4 fcef 	bl	800c1bc <osSemaphoreAcquire>
	sensor_group->active = status;
 80177de:	702c      	strb	r4, [r5, #0]
	if (!status) {
 80177e0:	b12c      	cbz	r4, 80177ee <_ZN7Sensors20SetSensorGroupStatusEhb+0x30>
	osSemaphoreRelease(SensorsSemaphore);
 80177e2:	6830      	ldr	r0, [r6, #0]
 80177e4:	f7f4 fd1e 	bl	800c224 <osSemaphoreRelease>
}
 80177e8:	4638      	mov	r0, r7
 80177ea:	b003      	add	sp, #12
 80177ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sensor_group->read_index = 0;
 80177ee:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 80177f2:	722c      	strb	r4, [r5, #8]
		for (Sensor &sensor : sensor_group->sensors) {
 80177f4:	429a      	cmp	r2, r3
 80177f6:	d0f4      	beq.n	80177e2 <_ZN7Sensors20SetSensorGroupStatusEhb+0x24>
			sensor.read_index = 0;
 80177f8:	741c      	strb	r4, [r3, #16]
      operator++() _GLIBCXX_NOEXCEPT
 80177fa:	3328      	adds	r3, #40	@ 0x28
	return *this;
 80177fc:	e7fa      	b.n	80177f4 <_ZN7Sensors20SetSensorGroupStatusEhb+0x36>

080177fe <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE1_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 80177fe:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8017800:	4611      	mov	r1, r2
			if (length != 2) return false;
 8017802:	d106      	bne.n	8017812 <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE1_4_FUNES0_tS1_t+0x14>
			return self->SetSensorGroupStatus(input[0], (bool) input[1]);
 8017804:	7852      	ldrb	r2, [r2, #1]
 8017806:	7809      	ldrb	r1, [r1, #0]
 8017808:	3a00      	subs	r2, #0
 801780a:	bf18      	it	ne
 801780c:	2201      	movne	r2, #1
 801780e:	f7ff bfd6 	b.w	80177be <_ZN7Sensors20SetSensorGroupStatusEhb>
		}
 8017812:	2000      	movs	r0, #0
 8017814:	4770      	bx	lr

08017816 <_ZN7Sensors20DeactivateAllSensorsEh>:
bool Sensors::DeactivateAllSensors(uint8_t group_ID) {
 8017816:	b573      	push	{r0, r1, r4, r5, r6, lr}
	SensorGroup* sensor_group = FindSensorGroupPath(group_ID, &interface, &success);
 8017818:	f10d 0303 	add.w	r3, sp, #3
 801781c:	aa01      	add	r2, sp, #4
bool Sensors::DeactivateAllSensors(uint8_t group_ID) {
 801781e:	4604      	mov	r4, r0
	SensorGroup* sensor_group = FindSensorGroupPath(group_ID, &interface, &success);
 8017820:	f7ff ff8f 	bl	8017742 <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb>
	if (!success) return false;
 8017824:	f89d 6003 	ldrb.w	r6, [sp, #3]
	SensorGroup* sensor_group = FindSensorGroupPath(group_ID, &interface, &success);
 8017828:	4605      	mov	r5, r0
	if (!success) return false;
 801782a:	b166      	cbz	r6, 8017846 <_ZN7Sensors20DeactivateAllSensorsEh+0x30>
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801782c:	f04f 31ff 	mov.w	r1, #4294967295
 8017830:	6820      	ldr	r0, [r4, #0]
 8017832:	f7f4 fcc3 	bl	800c1bc <osSemaphoreAcquire>
		sensor.active = false;
 8017836:	2100      	movs	r1, #0
 8017838:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
	for (Sensor &sensor : sensor_group->sensors) {
 801783c:	429a      	cmp	r2, r3
 801783e:	d105      	bne.n	801784c <_ZN7Sensors20DeactivateAllSensorsEh+0x36>
	osSemaphoreRelease(SensorsSemaphore);
 8017840:	6820      	ldr	r0, [r4, #0]
 8017842:	f7f4 fcef 	bl	800c224 <osSemaphoreRelease>
}
 8017846:	4630      	mov	r0, r6
 8017848:	b002      	add	sp, #8
 801784a:	bd70      	pop	{r4, r5, r6, pc}
		sensor.active = false;
 801784c:	f803 1b28 	strb.w	r1, [r3], #40
 8017850:	e7f4      	b.n	801783c <_ZN7Sensors20DeactivateAllSensorsEh+0x26>

08017852 <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE4_4_FUNES0_tS1_t>:
			return self->DeactivateAllSensors(*input);
 8017852:	7811      	ldrb	r1, [r2, #0]
 8017854:	f7ff bfdf 	b.w	8017816 <_ZN7Sensors20DeactivateAllSensorsEh>

08017858 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb>:
 * @param output interface_: interface linked to the sensor
 * @param output sensor_group_: the sensor group linked to the sensor
 * @param output success: whether successful
 * @return the sensor pointer
 */
Sensor* Sensors::FindSensorPath(uint8_t sensor_ID, I2CInterface** interface_, SensorGroup** sensor_group_, bool* success) {
 8017858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801785c:	e9d0 4704 	ldrd	r4, r7, [r0, #16]
	for (I2CInterface &interface : interfaces) {
 8017860:	42a7      	cmp	r7, r4
 8017862:	d102      	bne.n	801786a <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x12>
 8017864:	2300      	movs	r3, #0
				}
			}
		}
	}
	*success = false;
	return NULL;
 8017866:	4618      	mov	r0, r3
 8017868:	e017      	b.n	801789a <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x42>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801786a:	e9d4 5c16 	ldrd	r5, ip, [r4, #88]	@ 0x58
		for (SensorGroup &sensor_group : interface.sensor_groups) {
 801786e:	4565      	cmp	r5, ip
 8017870:	d101      	bne.n	8017876 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x1e>
      operator++() _GLIBCXX_NOEXCEPT
 8017872:	347c      	adds	r4, #124	@ 0x7c
	return *this;
 8017874:	e7f4      	b.n	8017860 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x8>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8017876:	e9d5 6e03 	ldrd	r6, lr, [r5, #12]
			for (Sensor &sensor : sensor_group.sensors) {
 801787a:	45b6      	cmp	lr, r6
 801787c:	4630      	mov	r0, r6
 801787e:	d101      	bne.n	8017884 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x2c>
      operator++() _GLIBCXX_NOEXCEPT
 8017880:	3518      	adds	r5, #24
	return *this;
 8017882:	e7f4      	b.n	801786e <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x16>
				if (sensor.ID == sensor_ID) {
 8017884:	f890 8004 	ldrb.w	r8, [r0, #4]
 8017888:	f100 0628 	add.w	r6, r0, #40	@ 0x28
 801788c:	4588      	cmp	r8, r1
 801788e:	d1f4      	bne.n	801787a <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x22>
					if (interface_ != NULL) *interface_ = &interface;
 8017890:	b102      	cbz	r2, 8017894 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x3c>
 8017892:	6014      	str	r4, [r2, #0]
					if (sensor_group_ != NULL) *sensor_group_ = &sensor_group;
 8017894:	b103      	cbz	r3, 8017898 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x40>
 8017896:	601d      	str	r5, [r3, #0]
Sensor* Sensors::FindSensorPath(uint8_t sensor_ID, I2CInterface** interface_, SensorGroup** sensor_group_, bool* success) {
 8017898:	2301      	movs	r3, #1
					*success = true;
 801789a:	9a06      	ldr	r2, [sp, #24]
 801789c:	7013      	strb	r3, [r2, #0]
}
 801789e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080178a2 <_ZN7Sensors10FindSensorEhPb>:
	return FindSensorPath(sensor_ID, NULL, NULL, success);
 80178a2:	2300      	movs	r3, #0
Sensor* Sensors::FindSensor(uint8_t sensor_ID, bool* success) {
 80178a4:	b507      	push	{r0, r1, r2, lr}
	return FindSensorPath(sensor_ID, NULL, NULL, success);
 80178a6:	9200      	str	r2, [sp, #0]
 80178a8:	461a      	mov	r2, r3
 80178aa:	f7ff ffd5 	bl	8017858 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb>
}
 80178ae:	b003      	add	sp, #12
 80178b0:	f85d fb04 	ldr.w	pc, [sp], #4

080178b4 <_ZN7Sensors15SetSensorStatusEhb>:
bool Sensors::SetSensorStatus(uint8_t sensor_ID, bool status) {
 80178b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80178b6:	4616      	mov	r6, r2
	Sensor* sensor = FindSensor(sensor_ID, &success);
 80178b8:	f10d 0207 	add.w	r2, sp, #7
bool Sensors::SetSensorStatus(uint8_t sensor_ID, bool status) {
 80178bc:	4604      	mov	r4, r0
	Sensor* sensor = FindSensor(sensor_ID, &success);
 80178be:	f7ff fff0 	bl	80178a2 <_ZN7Sensors10FindSensorEhPb>
	if (!success) return false;
 80178c2:	f89d 7007 	ldrb.w	r7, [sp, #7]
	Sensor* sensor = FindSensor(sensor_ID, &success);
 80178c6:	4605      	mov	r5, r0
	if (!success) return false;
 80178c8:	b147      	cbz	r7, 80178dc <_ZN7Sensors15SetSensorStatusEhb+0x28>
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 80178ca:	f04f 31ff 	mov.w	r1, #4294967295
 80178ce:	6820      	ldr	r0, [r4, #0]
 80178d0:	f7f4 fc74 	bl	800c1bc <osSemaphoreAcquire>
	osSemaphoreRelease(SensorsSemaphore);
 80178d4:	6820      	ldr	r0, [r4, #0]
	sensor->active = status;
 80178d6:	702e      	strb	r6, [r5, #0]
	osSemaphoreRelease(SensorsSemaphore);
 80178d8:	f7f4 fca4 	bl	800c224 <osSemaphoreRelease>
}
 80178dc:	4638      	mov	r0, r7
 80178de:	b003      	add	sp, #12
 80178e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080178e2 <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 80178e2:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 80178e4:	4611      	mov	r1, r2
			if (length != 2) return false;
 80178e6:	d106      	bne.n	80178f6 <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x14>
			return self->SetSensorStatus(input[0], (bool) input[1]);
 80178e8:	7852      	ldrb	r2, [r2, #1]
 80178ea:	7809      	ldrb	r1, [r1, #0]
 80178ec:	3a00      	subs	r2, #0
 80178ee:	bf18      	it	ne
 80178f0:	2201      	movne	r2, #1
 80178f2:	f7ff bfdf 	b.w	80178b4 <_ZN7Sensors15SetSensorStatusEhb>
		}
 80178f6:	2000      	movs	r0, #0
 80178f8:	4770      	bx	lr

080178fa <_ZN7Sensors23DeactivateAllSensorDataEh>:
bool Sensors::DeactivateAllSensorData(uint8_t sensor_ID) {
 80178fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
	Sensor* sensor = FindSensor(sensor_ID, &success);
 80178fc:	f10d 0207 	add.w	r2, sp, #7
bool Sensors::DeactivateAllSensorData(uint8_t sensor_ID) {
 8017900:	4604      	mov	r4, r0
	Sensor* sensor = FindSensor(sensor_ID, &success);
 8017902:	f7ff ffce 	bl	80178a2 <_ZN7Sensors10FindSensorEhPb>
	if (!success) return false;
 8017906:	f89d 6007 	ldrb.w	r6, [sp, #7]
	Sensor* sensor = FindSensor(sensor_ID, &success);
 801790a:	4605      	mov	r5, r0
	if (!success) return false;
 801790c:	b166      	cbz	r6, 8017928 <_ZN7Sensors23DeactivateAllSensorDataEh+0x2e>
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801790e:	f04f 31ff 	mov.w	r1, #4294967295
 8017912:	6820      	ldr	r0, [r4, #0]
 8017914:	f7f4 fc52 	bl	800c1bc <osSemaphoreAcquire>
		data.active = false;
 8017918:	2100      	movs	r1, #0
 801791a:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
	for (SensorData &data : sensor->data) {
 801791e:	429a      	cmp	r2, r3
 8017920:	d105      	bne.n	801792e <_ZN7Sensors23DeactivateAllSensorDataEh+0x34>
	osSemaphoreRelease(SensorsSemaphore);
 8017922:	6820      	ldr	r0, [r4, #0]
 8017924:	f7f4 fc7e 	bl	800c224 <osSemaphoreRelease>
}
 8017928:	4630      	mov	r0, r6
 801792a:	b002      	add	sp, #8
 801792c:	bd70      	pop	{r4, r5, r6, pc}
		data.active = false;
 801792e:	f803 1b18 	strb.w	r1, [r3], #24
 8017932:	e7f4      	b.n	801791e <_ZN7Sensors23DeactivateAllSensorDataEh+0x24>

08017934 <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE6_4_FUNES0_tS1_t>:
			return self->DeactivateAllSensorData(*input);
 8017934:	7811      	ldrb	r1, [r2, #0]
 8017936:	f7ff bfe0 	b.w	80178fa <_ZN7Sensors23DeactivateAllSensorDataEh>

0801793a <_ZN7Sensors14FindSensorDataEhtPb>:
SensorData* Sensors::FindSensorData(uint8_t sensor_ID, uint16_t sensor_register, bool* success) {
 801793a:	b538      	push	{r3, r4, r5, lr}
 801793c:	461c      	mov	r4, r3
 801793e:	4615      	mov	r5, r2
	Sensor* sensor = FindSensor(sensor_ID, success);
 8017940:	461a      	mov	r2, r3
 8017942:	f7ff ffae 	bl	80178a2 <_ZN7Sensors10FindSensorEhPb>
	if (not *success) return NULL;
 8017946:	7823      	ldrb	r3, [r4, #0]
 8017948:	b133      	cbz	r3, 8017958 <_ZN7Sensors14FindSensorDataEhtPb+0x1e>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801794a:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
	for (SensorData &data : sensor->data) {
 801794e:	429a      	cmp	r2, r3
 8017950:	4618      	mov	r0, r3
 8017952:	d103      	bne.n	801795c <_ZN7Sensors14FindSensorDataEhtPb+0x22>
	*success = false;
 8017954:	2300      	movs	r3, #0
 8017956:	7023      	strb	r3, [r4, #0]
	if (not *success) return NULL;
 8017958:	2000      	movs	r0, #0
 801795a:	e003      	b.n	8017964 <_ZN7Sensors14FindSensorDataEhtPb+0x2a>
		if (data.register_address == sensor_register) {
 801795c:	8899      	ldrh	r1, [r3, #4]
 801795e:	3318      	adds	r3, #24
 8017960:	42a9      	cmp	r1, r5
 8017962:	d1f4      	bne.n	801794e <_ZN7Sensors14FindSensorDataEhtPb+0x14>
}
 8017964:	bd38      	pop	{r3, r4, r5, pc}

08017966 <_ZN7Sensors19SetSensorDataStatusEhtb>:
bool Sensors::SetSensorDataStatus(uint8_t sensor_ID, uint16_t sensor_register, bool status) {
 8017966:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017968:	461e      	mov	r6, r3
	SensorData* sensor_data = FindSensorData(sensor_ID, sensor_register, &success);
 801796a:	f10d 0307 	add.w	r3, sp, #7
bool Sensors::SetSensorDataStatus(uint8_t sensor_ID, uint16_t sensor_register, bool status) {
 801796e:	4604      	mov	r4, r0
	SensorData* sensor_data = FindSensorData(sensor_ID, sensor_register, &success);
 8017970:	f7ff ffe3 	bl	801793a <_ZN7Sensors14FindSensorDataEhtPb>
	if (!success) return false;
 8017974:	f89d 7007 	ldrb.w	r7, [sp, #7]
	SensorData* sensor_data = FindSensorData(sensor_ID, sensor_register, &success);
 8017978:	4605      	mov	r5, r0
	if (!success) return false;
 801797a:	b147      	cbz	r7, 801798e <_ZN7Sensors19SetSensorDataStatusEhtb+0x28>
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801797c:	f04f 31ff 	mov.w	r1, #4294967295
 8017980:	6820      	ldr	r0, [r4, #0]
 8017982:	f7f4 fc1b 	bl	800c1bc <osSemaphoreAcquire>
	osSemaphoreRelease(SensorsSemaphore);
 8017986:	6820      	ldr	r0, [r4, #0]
	sensor_data->active = status;
 8017988:	702e      	strb	r6, [r5, #0]
	osSemaphoreRelease(SensorsSemaphore);
 801798a:	f7f4 fc4b 	bl	800c224 <osSemaphoreRelease>
}
 801798e:	4638      	mov	r0, r7
 8017990:	b003      	add	sp, #12
 8017992:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017994 <_ZZN7Sensors12AddRegistersEvENUlPvtPttE5_4_FUNES0_tS1_t>:
			if (length != 3) return false;
 8017994:	2b03      	cmp	r3, #3
		[](void* context, uint16_t register_id, uint16_t* input, uint16_t length) -> bool {
 8017996:	4611      	mov	r1, r2
			if (length != 3) return false;
 8017998:	d107      	bne.n	80179aa <_ZZN7Sensors12AddRegistersEvENUlPvtPttE5_4_FUNES0_tS1_t+0x16>
			return self->SetSensorDataStatus((uint8_t) input[0], input[1], (bool) input[2]);
 801799a:	8893      	ldrh	r3, [r2, #4]
 801799c:	7809      	ldrb	r1, [r1, #0]
 801799e:	3b00      	subs	r3, #0
 80179a0:	8852      	ldrh	r2, [r2, #2]
 80179a2:	bf18      	it	ne
 80179a4:	2301      	movne	r3, #1
 80179a6:	f7ff bfde 	b.w	8017966 <_ZN7Sensors19SetSensorDataStatusEhtb>
		}
 80179aa:	2000      	movs	r0, #0
 80179ac:	4770      	bx	lr

080179ae <_ZN9Registers11AddRegisterItEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 80179ae:	b570      	push	{r4, r5, r6, lr}
 80179b0:	4604      	mov	r4, r0
 80179b2:	b086      	sub	sp, #24
 80179b4:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80179b6:	6800      	ldr	r0, [r0, #0]
 80179b8:	f04f 31ff 	mov.w	r1, #4294967295
 80179bc:	f7f4 fbfe 	bl	800c1bc <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 80179c0:	f10d 0207 	add.w	r2, sp, #7
 80179c4:	4631      	mov	r1, r6
 80179c6:	4620      	mov	r0, r4
 80179c8:	f7ff fb83 	bl	80170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 80179cc:	f89d 5007 	ldrb.w	r5, [sp, #7]
 80179d0:	b125      	cbz	r5, 80179dc <_ZN9Registers11AddRegisterItEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 80179d2:	6820      	ldr	r0, [r4, #0]
 80179d4:	f7f4 fc26 	bl	800c224 <osSemaphoreRelease>
}
 80179d8:	b006      	add	sp, #24
 80179da:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 80179dc:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 80179e0:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 80179e4:	f7ff fd1e 	bl	8017424 <_ZN9Registers9GetTypeIDItEEhPb.isra.0>
	configuration_.register_info = register_;
 80179e8:	2301      	movs	r3, #1
 80179ea:	f8ad 600a 	strh.w	r6, [sp, #10]
 80179ee:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 80179f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 80179f6:	f88d 000c 	strb.w	r0, [sp, #12]
 80179fa:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 80179fe:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 8017a02:	2b00      	cmp	r3, #0
 8017a04:	d0e5      	beq.n	80179d2 <_ZN9Registers11AddRegisterItEEbt.isra.0+0x24>
		registers.push_back(configuration_);
 8017a06:	a902      	add	r1, sp, #8
 8017a08:	1d20      	adds	r0, r4, #4
 8017a0a:	f7fc ff70 	bl	80148ee <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 8017a0e:	e7e0      	b.n	80179d2 <_ZN9Registers11AddRegisterItEEbt.isra.0+0x24>

08017a10 <_ZN9Registers11AddRegisterIhEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 8017a10:	b570      	push	{r4, r5, r6, lr}
 8017a12:	4604      	mov	r4, r0
 8017a14:	b086      	sub	sp, #24
 8017a16:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8017a18:	6800      	ldr	r0, [r0, #0]
 8017a1a:	f04f 31ff 	mov.w	r1, #4294967295
 8017a1e:	f7f4 fbcd 	bl	800c1bc <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 8017a22:	f10d 0207 	add.w	r2, sp, #7
 8017a26:	4631      	mov	r1, r6
 8017a28:	4620      	mov	r0, r4
 8017a2a:	f7ff fb52 	bl	80170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 8017a2e:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8017a32:	b125      	cbz	r5, 8017a3e <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 8017a34:	6820      	ldr	r0, [r4, #0]
 8017a36:	f7f4 fbf5 	bl	800c224 <osSemaphoreRelease>
}
 8017a3a:	b006      	add	sp, #24
 8017a3c:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8017a3e:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 8017a42:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8017a46:	f7ff fd4f 	bl	80174e8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	configuration_.register_info = register_;
 8017a4a:	2301      	movs	r3, #1
 8017a4c:	f8ad 600a 	strh.w	r6, [sp, #10]
 8017a50:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 8017a54:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 8017a58:	f88d 000c 	strb.w	r0, [sp, #12]
 8017a5c:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 8017a60:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	d0e5      	beq.n	8017a34 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
		registers.push_back(configuration_);
 8017a68:	a902      	add	r1, sp, #8
 8017a6a:	1d20      	adds	r0, r4, #4
 8017a6c:	f7fc ff3f 	bl	80148ee <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 8017a70:	e7e0      	b.n	8017a34 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>

08017a72 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8017a72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017a74:	460c      	mov	r4, r1
 8017a76:	b087      	sub	sp, #28
 8017a78:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8017a7a:	f04f 31ff 	mov.w	r1, #4294967295
 8017a7e:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8017a80:	461e      	mov	r6, r3
 8017a82:	4617      	mov	r7, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8017a84:	f7f4 fb9a 	bl	800c1bc <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8017a88:	4621      	mov	r1, r4
 8017a8a:	f10d 0207 	add.w	r2, sp, #7
 8017a8e:	4628      	mov	r0, r5
 8017a90:	f7ff fb1f 	bl	80170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8017a94:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8017a98:	4604      	mov	r4, r0
	if (!success) {
 8017a9a:	b923      	cbnz	r3, 8017aa6 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x34>
	osSemaphoreRelease(RegistersSemaphore);
 8017a9c:	6828      	ldr	r0, [r5, #0]
 8017a9e:	f7f4 fbc1 	bl	800c224 <osSemaphoreRelease>
}
 8017aa2:	b007      	add	sp, #28
 8017aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8017aa6:	f10d 0007 	add.w	r0, sp, #7
 8017aaa:	f7ff fd1d 	bl	80174e8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 8017aae:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8017ab2:	2b00      	cmp	r3, #0
 8017ab4:	d0f2      	beq.n	8017a9c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (target_register->register_info.type != registered_type) {
 8017ab6:	7923      	ldrb	r3, [r4, #4]
 8017ab8:	4298      	cmp	r0, r3
 8017aba:	d1ef      	bne.n	8017a9c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (callbacks[target_register->register_info.type] == NULL) {
 8017abc:	3004      	adds	r0, #4
 8017abe:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8017ac2:	2800      	cmp	r0, #0
 8017ac4:	d0ea      	beq.n	8017a9c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 8017ac6:	7823      	ldrb	r3, [r4, #0]
 8017ac8:	b983      	cbnz	r3, 8017aec <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
 8017aca:	7863      	ldrb	r3, [r4, #1]
 8017acc:	b973      	cbnz	r3, 8017aec <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
		callback.read = NULL;
 8017ace:	9305      	str	r3, [sp, #20]
		target_callback_list->push_back(callback);
 8017ad0:	a902      	add	r1, sp, #8
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017ad2:	e9d0 2300 	ldrd	r2, r3, [r0]
		callback.write = write;
 8017ad6:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8017ada:	1a9b      	subs	r3, r3, r2
 8017adc:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8017ade:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 8017ae0:	f7f7 fa6a 	bl	800efb8 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_>
	target_register->mode.callbacks = true;
 8017ae4:	2301      	movs	r3, #1
 8017ae6:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 8017ae8:	7223      	strb	r3, [r4, #8]
 8017aea:	e7d7      	b.n	8017a9c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8017aec:	8961      	ldrh	r1, [r4, #10]
 8017aee:	f7f7 f8c7 	bl	800ec80 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
		callback->write = write;
 8017af2:	e9c0 7601 	strd	r7, r6, [r0, #4]
 8017af6:	e7f5      	b.n	8017ae4 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x72>

08017af8 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8017af8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017afc:	460c      	mov	r4, r1
 8017afe:	b087      	sub	sp, #28
 8017b00:	4606      	mov	r6, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8017b02:	f04f 31ff 	mov.w	r1, #4294967295
 8017b06:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8017b08:	4698      	mov	r8, r3
 8017b0a:	4691      	mov	r9, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8017b0c:	f7f4 fb56 	bl	800c1bc <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8017b10:	4621      	mov	r1, r4
 8017b12:	f10d 0207 	add.w	r2, sp, #7
 8017b16:	4630      	mov	r0, r6
 8017b18:	f7ff fadb 	bl	80170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8017b1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8017b20:	4604      	mov	r4, r0
	if (!success) {
 8017b22:	b92b      	cbnz	r3, 8017b30 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x38>
	osSemaphoreRelease(RegistersSemaphore);
 8017b24:	6830      	ldr	r0, [r6, #0]
 8017b26:	f7f4 fb7d 	bl	800c224 <osSemaphoreRelease>
}
 8017b2a:	b007      	add	sp, #28
 8017b2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8017b30:	f10d 0007 	add.w	r0, sp, #7
 8017b34:	f7ff fc76 	bl	8017424 <_ZN9Registers9GetTypeIDItEEhPb.isra.0>
	if (!success) {
 8017b38:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8017b3c:	2b00      	cmp	r3, #0
 8017b3e:	d0f1      	beq.n	8017b24 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (target_register->register_info.type != registered_type) {
 8017b40:	7923      	ldrb	r3, [r4, #4]
 8017b42:	4298      	cmp	r0, r3
 8017b44:	d1ee      	bne.n	8017b24 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (callbacks[target_register->register_info.type] == NULL) {
 8017b46:	3004      	adds	r0, #4
 8017b48:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
 8017b4c:	2f00      	cmp	r7, #0
 8017b4e:	d0e9      	beq.n	8017b24 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 8017b50:	7821      	ldrb	r1, [r4, #0]
 8017b52:	e9d7 3500 	ldrd	r3, r5, [r7]
 8017b56:	1aea      	subs	r2, r5, r3
 8017b58:	1112      	asrs	r2, r2, #4
 8017b5a:	b9b1      	cbnz	r1, 8017b8a <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x92>
 8017b5c:	7861      	ldrb	r1, [r4, #1]
 8017b5e:	b9a1      	cbnz	r1, 8017b8a <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x92>
		callback.read = NULL;
 8017b60:	9105      	str	r1, [sp, #20]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8017b62:	68b9      	ldr	r1, [r7, #8]
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8017b64:	8162      	strh	r2, [r4, #10]
      push_back(const value_type& __x)
 8017b66:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8017b68:	42a9      	cmp	r1, r5
		callback.write = write;
 8017b6a:	e9cd 9803 	strd	r9, r8, [sp, #12]
 8017b6e:	d008      	beq.n	8017b82 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x8a>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8017b70:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8017b72:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8017b76:	3510      	adds	r5, #16
 8017b78:	607d      	str	r5, [r7, #4]
	target_register->mode.callbacks = true;
 8017b7a:	2301      	movs	r3, #1
 8017b7c:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 8017b7e:	7223      	strb	r3, [r4, #8]
 8017b80:	e7d0      	b.n	8017b24 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	  _M_realloc_insert(end(), __x);
 8017b82:	4638      	mov	r0, r7
 8017b84:	f7fe ffe4 	bl	8016b50 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	} else {
 8017b88:	e7f7      	b.n	8017b7a <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x82>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8017b8a:	8961      	ldrh	r1, [r4, #10]
	if (__n >= this->size())
 8017b8c:	4291      	cmp	r1, r2
 8017b8e:	d302      	bcc.n	8017b96 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x9e>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8017b90:	4803      	ldr	r0, [pc, #12]	@ (8017ba0 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0xa8>)
 8017b92:	f001 fefa 	bl	801998a <_ZSt24__throw_out_of_range_fmtPKcz>
	return *(this->_M_impl._M_start + __n);
 8017b96:	eb03 1301 	add.w	r3, r3, r1, lsl #4
		callback->write = write;
 8017b9a:	e9c3 9801 	strd	r9, r8, [r3, #4]
 8017b9e:	e7ec      	b.n	8017b7a <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x82>
 8017ba0:	0801a080 	.word	0x0801a080

08017ba4 <_ZN7Sensors12AddRegistersEv>:
void Sensors::AddRegisters(void) {
 8017ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017ba6:	4604      	mov	r4, r0
 8017ba8:	b087      	sub	sp, #28
	registers->AddRegister<uint8_t>(REG_SENSORS_READING_STATUS);
 8017baa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8017bae:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 8017bb0:	f7ff ff2e 	bl	8017a10 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_SENSORS_READING_STATUS);
 8017bb4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8017bb8:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8017bba:	f7ff fac3 	bl	8017144 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddReadCallback<uint8_t>(REG_SENSORS_READING_STATUS, (void*) this,
 8017bbe:	6de6      	ldr	r6, [r4, #92]	@ 0x5c
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8017bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8017bc4:	6830      	ldr	r0, [r6, #0]
 8017bc6:	f7f4 faf9 	bl	800c1bc <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8017bca:	f10d 0207 	add.w	r2, sp, #7
 8017bce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8017bd2:	4630      	mov	r0, r6
 8017bd4:	f7ff fa7d 	bl	80170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8017bd8:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8017bdc:	4605      	mov	r5, r0
	if (!success) {
 8017bde:	2b00      	cmp	r3, #0
 8017be0:	f040 80b6 	bne.w	8017d50 <_ZN7Sensors12AddRegistersEv+0x1ac>
	osSemaphoreRelease(RegistersSemaphore);
 8017be4:	6830      	ldr	r0, [r6, #0]
 8017be6:	f7f4 fb1d 	bl	800c224 <osSemaphoreRelease>
	registers->AddWriteCallback<uint8_t>(REG_SENSORS_READING_STATUS, (void*) this,
 8017bea:	4b9a      	ldr	r3, [pc, #616]	@ (8017e54 <_ZN7Sensors12AddRegistersEv+0x2b0>)
 8017bec:	4622      	mov	r2, r4
 8017bee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8017bf2:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8017bf4:	f7ff ff3d 	bl	8017a72 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_SENSORS_GROUP_STATUS);
 8017bf8:	f240 2101 	movw	r1, #513	@ 0x201
 8017bfc:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8017bfe:	f7ff ff07 	bl	8017a10 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_SENSORS_GROUP_STATUS, 2);
 8017c02:	2202      	movs	r2, #2
 8017c04:	f240 2101 	movw	r1, #513	@ 0x201
 8017c08:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8017c0a:	f7ff fab7 	bl	801717c <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_SENSORS_GROUP_STATUS, (void*) this,
 8017c0e:	4b92      	ldr	r3, [pc, #584]	@ (8017e58 <_ZN7Sensors12AddRegistersEv+0x2b4>)
 8017c10:	4622      	mov	r2, r4
 8017c12:	f240 2101 	movw	r1, #513	@ 0x201
 8017c16:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8017c18:	f7ff ff2b 	bl	8017a72 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_SENSORS_DEACTIVATE_GROUPS);
 8017c1c:	f240 2102 	movw	r1, #514	@ 0x202
 8017c20:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8017c22:	f7ff fef5 	bl	8017a10 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_SENSORS_DEACTIVATE_GROUPS);
 8017c26:	f240 2102 	movw	r1, #514	@ 0x202
 8017c2a:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8017c2c:	f7ff fa8a 	bl	8017144 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_SENSORS_DEACTIVATE_GROUPS, (void*) this,
 8017c30:	4b8a      	ldr	r3, [pc, #552]	@ (8017e5c <_ZN7Sensors12AddRegistersEv+0x2b8>)
 8017c32:	4622      	mov	r2, r4
 8017c34:	f240 2102 	movw	r1, #514	@ 0x202
 8017c38:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8017c3a:	f7ff ff1a 	bl	8017a72 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_SENSORS_SENSOR_STATUS);
 8017c3e:	f240 2103 	movw	r1, #515	@ 0x203
 8017c42:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8017c44:	f7ff fee4 	bl	8017a10 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_SENSORS_SENSOR_STATUS, 2);
 8017c48:	2202      	movs	r2, #2
 8017c4a:	f240 2103 	movw	r1, #515	@ 0x203
 8017c4e:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8017c50:	f7ff fa94 	bl	801717c <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_SENSORS_SENSOR_STATUS, (void*) this,
 8017c54:	4b82      	ldr	r3, [pc, #520]	@ (8017e60 <_ZN7Sensors12AddRegistersEv+0x2bc>)
 8017c56:	4622      	mov	r2, r4
 8017c58:	f240 2103 	movw	r1, #515	@ 0x203
 8017c5c:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8017c5e:	f7ff ff08 	bl	8017a72 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_SENSORS_DEACTIVATE_SENSORS);
 8017c62:	f44f 7101 	mov.w	r1, #516	@ 0x204
 8017c66:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8017c68:	f7ff fed2 	bl	8017a10 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_SENSORS_DEACTIVATE_SENSORS);
 8017c6c:	f44f 7101 	mov.w	r1, #516	@ 0x204
 8017c70:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8017c72:	f7ff fa67 	bl	8017144 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_SENSORS_DEACTIVATE_SENSORS, (void*) this,
 8017c76:	4b7b      	ldr	r3, [pc, #492]	@ (8017e64 <_ZN7Sensors12AddRegistersEv+0x2c0>)
 8017c78:	4622      	mov	r2, r4
 8017c7a:	f44f 7101 	mov.w	r1, #516	@ 0x204
 8017c7e:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8017c80:	f7ff fef7 	bl	8017a72 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint16_t>(REG_SENSORS_DATA_STATUS);
 8017c84:	f240 2105 	movw	r1, #517	@ 0x205
 8017c88:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8017c8a:	f7ff fe90 	bl	80179ae <_ZN9Registers11AddRegisterItEEbt.isra.0>
	registers->SetRegisterAsArray(REG_SENSORS_DATA_STATUS, 3);
 8017c8e:	2203      	movs	r2, #3
 8017c90:	f240 2105 	movw	r1, #517	@ 0x205
 8017c94:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8017c96:	f7ff fa71 	bl	801717c <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint16_t>(REG_SENSORS_DATA_STATUS, (void*) this,
 8017c9a:	4b73      	ldr	r3, [pc, #460]	@ (8017e68 <_ZN7Sensors12AddRegistersEv+0x2c4>)
 8017c9c:	4622      	mov	r2, r4
 8017c9e:	f240 2105 	movw	r1, #517	@ 0x205
 8017ca2:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8017ca4:	f7ff ff28 	bl	8017af8 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_SENSORS_DEACTIVATE_ALL_DATA);
 8017ca8:	f240 2106 	movw	r1, #518	@ 0x206
 8017cac:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8017cae:	f7ff feaf 	bl	8017a10 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_SENSORS_DEACTIVATE_ALL_DATA);
 8017cb2:	f240 2106 	movw	r1, #518	@ 0x206
 8017cb6:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8017cb8:	f7ff fa44 	bl	8017144 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_SENSORS_DEACTIVATE_ALL_DATA, (void*) this,
 8017cbc:	4b6b      	ldr	r3, [pc, #428]	@ (8017e6c <_ZN7Sensors12AddRegistersEv+0x2c8>)
 8017cbe:	4622      	mov	r2, r4
 8017cc0:	f240 2106 	movw	r1, #518	@ 0x206
 8017cc4:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8017cc6:	f7ff fed4 	bl	8017a72 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint16_t>(REG_SENSORS_GROUP_PRESCALER);
 8017cca:	f240 2107 	movw	r1, #519	@ 0x207
 8017cce:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8017cd0:	f7ff fe6d 	bl	80179ae <_ZN9Registers11AddRegisterItEEbt.isra.0>
	registers->SetRegisterAsArray(REG_SENSORS_GROUP_PRESCALER, 2);
 8017cd4:	2202      	movs	r2, #2
 8017cd6:	f240 2107 	movw	r1, #519	@ 0x207
 8017cda:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8017cdc:	f7ff fa4e 	bl	801717c <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint16_t>(REG_SENSORS_GROUP_PRESCALER, (void*) this,
 8017ce0:	4b63      	ldr	r3, [pc, #396]	@ (8017e70 <_ZN7Sensors12AddRegistersEv+0x2cc>)
 8017ce2:	4622      	mov	r2, r4
 8017ce4:	f240 2107 	movw	r1, #519	@ 0x207
 8017ce8:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8017cea:	f7ff ff05 	bl	8017af8 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint32_t>(REG_SENSORS_DETECT_SENSORS);
 8017cee:	6de5      	ldr	r5, [r4, #92]	@ 0x5c
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8017cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8017cf4:	6828      	ldr	r0, [r5, #0]
 8017cf6:	f7f4 fa61 	bl	800c1bc <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 8017cfa:	f10d 0207 	add.w	r2, sp, #7
 8017cfe:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8017d02:	4628      	mov	r0, r5
 8017d04:	f7ff f9e5 	bl	80170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 8017d08:	f89d 6007 	ldrb.w	r6, [sp, #7]
 8017d0c:	2e00      	cmp	r6, #0
 8017d0e:	d04c      	beq.n	8017daa <_ZN7Sensors12AddRegistersEv+0x206>
	osSemaphoreRelease(RegistersSemaphore);
 8017d10:	6828      	ldr	r0, [r5, #0]
 8017d12:	f7f4 fa87 	bl	800c224 <osSemaphoreRelease>
	registers->SetRegisterAsArray(REG_SENSORS_DETECT_SENSORS, 2);
 8017d16:	2202      	movs	r2, #2
 8017d18:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8017d1c:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8017d1e:	f7ff fa2d 	bl	801717c <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint32_t>(REG_SENSORS_DETECT_SENSORS, (void*) this,
 8017d22:	6de7      	ldr	r7, [r4, #92]	@ 0x5c
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8017d24:	f04f 31ff 	mov.w	r1, #4294967295
 8017d28:	6838      	ldr	r0, [r7, #0]
 8017d2a:	f7f4 fa47 	bl	800c1bc <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8017d2e:	f10d 0207 	add.w	r2, sp, #7
 8017d32:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8017d36:	4638      	mov	r0, r7
 8017d38:	f7ff f9cb 	bl	80170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8017d3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8017d40:	4605      	mov	r5, r0
	if (!success) {
 8017d42:	2b00      	cmp	r3, #0
 8017d44:	d14a      	bne.n	8017ddc <_ZN7Sensors12AddRegistersEv+0x238>
	osSemaphoreRelease(RegistersSemaphore);
 8017d46:	6838      	ldr	r0, [r7, #0]
 8017d48:	f7f4 fa6c 	bl	800c224 <osSemaphoreRelease>
}
 8017d4c:	b007      	add	sp, #28
 8017d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8017d50:	f10d 0007 	add.w	r0, sp, #7
 8017d54:	f7ff fbc8 	bl	80174e8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 8017d58:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8017d5c:	2b00      	cmp	r3, #0
 8017d5e:	f43f af41 	beq.w	8017be4 <_ZN7Sensors12AddRegistersEv+0x40>
	if (target_register->register_info.type != registered_type) {
 8017d62:	792b      	ldrb	r3, [r5, #4]
 8017d64:	4298      	cmp	r0, r3
 8017d66:	f47f af3d 	bne.w	8017be4 <_ZN7Sensors12AddRegistersEv+0x40>
	if (callbacks[target_register->register_info.type] == NULL) {
 8017d6a:	3004      	adds	r0, #4
 8017d6c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8017d70:	2800      	cmp	r0, #0
 8017d72:	f43f af37 	beq.w	8017be4 <_ZN7Sensors12AddRegistersEv+0x40>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 8017d76:	782b      	ldrb	r3, [r5, #0]
 8017d78:	4f3e      	ldr	r7, [pc, #248]	@ (8017e74 <_ZN7Sensors12AddRegistersEv+0x2d0>)
 8017d7a:	b983      	cbnz	r3, 8017d9e <_ZN7Sensors12AddRegistersEv+0x1fa>
 8017d7c:	786b      	ldrb	r3, [r5, #1]
 8017d7e:	b973      	cbnz	r3, 8017d9e <_ZN7Sensors12AddRegistersEv+0x1fa>
		target_callback_list->push_back(callback);
 8017d80:	a902      	add	r1, sp, #8
		callback.read = read;
 8017d82:	9705      	str	r7, [sp, #20]
		callback.write = NULL;
 8017d84:	e9cd 4303 	strd	r4, r3, [sp, #12]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017d88:	e9d0 2300 	ldrd	r2, r3, [r0]
 8017d8c:	1a9b      	subs	r3, r3, r2
 8017d8e:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8017d90:	816b      	strh	r3, [r5, #10]
		target_callback_list->push_back(callback);
 8017d92:	f7f7 f911 	bl	800efb8 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_>
	target_register->mode.callbacks = true;
 8017d96:	2301      	movs	r3, #1
 8017d98:	706b      	strb	r3, [r5, #1]
	target_register->access.read = true;
 8017d9a:	726b      	strb	r3, [r5, #9]
 8017d9c:	e722      	b.n	8017be4 <_ZN7Sensors12AddRegistersEv+0x40>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8017d9e:	8969      	ldrh	r1, [r5, #10]
 8017da0:	f7f6 ff6e 	bl	800ec80 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
		callback->context = context;
 8017da4:	6044      	str	r4, [r0, #4]
		callback->read = read;
 8017da6:	60c7      	str	r7, [r0, #12]
 8017da8:	e7f5      	b.n	8017d96 <_ZN7Sensors12AddRegistersEv+0x1f2>
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8017daa:	f10d 0007 	add.w	r0, sp, #7
 8017dae:	f7ff fad7 	bl	8017360 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	configuration_.mode = mode;
 8017db2:	f04f 7302 	mov.w	r3, #34078720	@ 0x2080000
	configuration_.register_info = register_;
 8017db6:	f88d 000c 	strb.w	r0, [sp, #12]
	configuration_.mode = mode;
 8017dba:	9302      	str	r3, [sp, #8]
	configuration_.register_info = register_;
 8017dbc:	2301      	movs	r3, #1
 8017dbe:	f88d 600d 	strb.w	r6, [sp, #13]
 8017dc2:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 8017dc6:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_semaphore = NULL;
 8017dca:	e9cd 6604 	strd	r6, r6, [sp, #16]
	if (success) {
 8017dce:	2b00      	cmp	r3, #0
 8017dd0:	d09e      	beq.n	8017d10 <_ZN7Sensors12AddRegistersEv+0x16c>
		registers.push_back(configuration_);
 8017dd2:	a902      	add	r1, sp, #8
 8017dd4:	1d28      	adds	r0, r5, #4
 8017dd6:	f7fc fd8a 	bl	80148ee <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 8017dda:	e799      	b.n	8017d10 <_ZN7Sensors12AddRegistersEv+0x16c>
	uint8_t registered_type = GetTypeID<T>(&success);
 8017ddc:	f10d 0007 	add.w	r0, sp, #7
 8017de0:	f7ff fabe 	bl	8017360 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	if (!success) {
 8017de4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8017de8:	2b00      	cmp	r3, #0
 8017dea:	d0ac      	beq.n	8017d46 <_ZN7Sensors12AddRegistersEv+0x1a2>
	if (target_register->register_info.type != registered_type) {
 8017dec:	792b      	ldrb	r3, [r5, #4]
 8017dee:	4298      	cmp	r0, r3
 8017df0:	d1a9      	bne.n	8017d46 <_ZN7Sensors12AddRegistersEv+0x1a2>
	if (callbacks[target_register->register_info.type] == NULL) {
 8017df2:	3004      	adds	r0, #4
 8017df4:	f857 c020 	ldr.w	ip, [r7, r0, lsl #2]
 8017df8:	f1bc 0f00 	cmp.w	ip, #0
 8017dfc:	d0a3      	beq.n	8017d46 <_ZN7Sensors12AddRegistersEv+0x1a2>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 8017dfe:	7829      	ldrb	r1, [r5, #0]
 8017e00:	481d      	ldr	r0, [pc, #116]	@ (8017e78 <_ZN7Sensors12AddRegistersEv+0x2d4>)
 8017e02:	e9dc 3600 	ldrd	r3, r6, [ip]
 8017e06:	1af2      	subs	r2, r6, r3
 8017e08:	1112      	asrs	r2, r2, #4
 8017e0a:	b9c1      	cbnz	r1, 8017e3e <_ZN7Sensors12AddRegistersEv+0x29a>
 8017e0c:	7869      	ldrb	r1, [r5, #1]
 8017e0e:	b9b1      	cbnz	r1, 8017e3e <_ZN7Sensors12AddRegistersEv+0x29a>
		callback.read = NULL;
 8017e10:	9105      	str	r1, [sp, #20]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8017e12:	f8dc 1008 	ldr.w	r1, [ip, #8]
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8017e16:	816a      	strh	r2, [r5, #10]
      push_back(const value_type& __x)
 8017e18:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8017e1a:	42b1      	cmp	r1, r6
		callback.write = write;
 8017e1c:	e9cd 4003 	strd	r4, r0, [sp, #12]
 8017e20:	d009      	beq.n	8017e36 <_ZN7Sensors12AddRegistersEv+0x292>
 8017e22:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8017e24:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8017e28:	3610      	adds	r6, #16
 8017e2a:	f8cc 6004 	str.w	r6, [ip, #4]
	target_register->mode.callbacks = true;
 8017e2e:	2301      	movs	r3, #1
 8017e30:	706b      	strb	r3, [r5, #1]
	target_register->access.write = true;
 8017e32:	722b      	strb	r3, [r5, #8]
 8017e34:	e787      	b.n	8017d46 <_ZN7Sensors12AddRegistersEv+0x1a2>
	  _M_realloc_insert(end(), __x);
 8017e36:	4660      	mov	r0, ip
 8017e38:	f7fc fe52 	bl	8014ae0 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	} else {
 8017e3c:	e7f7      	b.n	8017e2e <_ZN7Sensors12AddRegistersEv+0x28a>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8017e3e:	8969      	ldrh	r1, [r5, #10]
	if (__n >= this->size())
 8017e40:	4291      	cmp	r1, r2
 8017e42:	d302      	bcc.n	8017e4a <_ZN7Sensors12AddRegistersEv+0x2a6>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8017e44:	480d      	ldr	r0, [pc, #52]	@ (8017e7c <_ZN7Sensors12AddRegistersEv+0x2d8>)
 8017e46:	f001 fda0 	bl	801998a <_ZSt24__throw_out_of_range_fmtPKcz>
	return *(this->_M_impl._M_start + __n);
 8017e4a:	eb03 1301 	add.w	r3, r3, r1, lsl #4
		callback->write = write;
 8017e4e:	e9c3 4001 	strd	r4, r0, [r3, #4]
 8017e52:	e7ec      	b.n	8017e2e <_ZN7Sensors12AddRegistersEv+0x28a>
 8017e54:	08017687 	.word	0x08017687
 8017e58:	080177ff 	.word	0x080177ff
 8017e5c:	080176c7 	.word	0x080176c7
 8017e60:	080178e3 	.word	0x080178e3
 8017e64:	08017853 	.word	0x08017853
 8017e68:	08017995 	.word	0x08017995
 8017e6c:	08017935 	.word	0x08017935
 8017e70:	080177ad 	.word	0x080177ad
 8017e74:	08017341 	.word	0x08017341
 8017e78:	0801772d 	.word	0x0801772d
 8017e7c:	0801a080 	.word	0x0801a080

08017e80 <_ZN8Services4InitEP9RegistersP13CommunicationP4LEDS>:
 *
 * @param input registers_: the Registers instance
 * @param input communication_: the Communication instance
 * @param input leds_: the LEDS instance
 */
void Services::Init(Registers* registers_, Communication* communication_, LEDS* leds_) {
 8017e80:	b510      	push	{r4, lr}
 8017e82:	4604      	mov	r4, r0
	registers = registers_;
 8017e84:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 8017e88:	f8c0 1438 	str.w	r1, [r0, #1080]	@ 0x438
	communication = communication_;
	leds = leds_;

	ServiceSemaphore = osSemaphoreNew(1,1,NULL);
 8017e8c:	2101      	movs	r1, #1
	communication = communication_;
 8017e8e:	f8c0 243c 	str.w	r2, [r0, #1084]	@ 0x43c
	ServiceSemaphore = osSemaphoreNew(1,1,NULL);
 8017e92:	2200      	movs	r2, #0
	leds = leds_;
 8017e94:	f8c0 3440 	str.w	r3, [r0, #1088]	@ 0x440
	ServiceSemaphore = osSemaphoreNew(1,1,NULL);
 8017e98:	4608      	mov	r0, r1
 8017e9a:	f7f4 f933 	bl	800c104 <osSemaphoreNew>
 8017e9e:	6020      	str	r0, [r4, #0]
	osSemaphoreRelease(ServiceSemaphore);
}
 8017ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSemaphoreRelease(ServiceSemaphore);
 8017ea4:	f7f4 b9be 	b.w	800c224 <osSemaphoreRelease>

08017ea8 <_ZN8Services10ResetQueueEv>:

/**
 * @brief Reset the pending services
 */
void Services::ResetQueue(void) {
 8017ea8:	b538      	push	{r3, r4, r5, lr}
	queue_size = 0;
 8017eaa:	2500      	movs	r5, #0
void Services::ResetQueue(void) {
 8017eac:	4604      	mov	r4, r0
	osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 8017eae:	f04f 31ff 	mov.w	r1, #4294967295
	queue_size = 0;
 8017eb2:	7105      	strb	r5, [r0, #4]
	osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 8017eb4:	6800      	ldr	r0, [r0, #0]
 8017eb6:	f7f4 f981 	bl	800c1bc <osSemaphoreAcquire>
	for (uint8_t index = 0; index < NUMBER_OF_SERVICES; index++) {
		services[index].active = false;
		services[index].reception_flag = false;
		services[index].error = false;
	}
	osSemaphoreRelease(ServiceSemaphore);
 8017eba:	6820      	ldr	r0, [r4, #0]
		services[index].active = false;
 8017ebc:	8125      	strh	r5, [r4, #8]
		services[index].error = false;
 8017ebe:	7725      	strb	r5, [r4, #28]
		services[index].active = false;
 8017ec0:	8425      	strh	r5, [r4, #32]
		services[index].error = false;
 8017ec2:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
}
 8017ec6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	osSemaphoreRelease(ServiceSemaphore);
 8017eca:	f7f4 b9ab 	b.w	800c224 <osSemaphoreRelease>

08017ece <_ZN8ServicesC1Ev>:
Services::Services() {
 8017ece:	b510      	push	{r4, lr}
 8017ed0:	4604      	mov	r4, r0
	ResetQueue();
 8017ed2:	f7ff ffe9 	bl	8017ea8 <_ZN8Services10ResetQueueEv>
}
 8017ed6:	4620      	mov	r0, r4
 8017ed8:	bd10      	pop	{r4, pc}

08017eda <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb>:
 * @param input interface: the interface from which the data comes from, used to find the service
 * @param input access: whether WRITE or READ
 * @param output success: whether successful
 * @return service index
 */
uint8_t Services::FindQueueIndex(uint8_t start_index, Register remote_register, ServiceInterface interface, bool access, bool* success) {
 8017eda:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8017ede:	460c      	mov	r4, r1
 8017ee0:	a902      	add	r1, sp, #8
 8017ee2:	4605      	mov	r5, r0
	osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 8017ee4:	6800      	ldr	r0, [r0, #0]
uint8_t Services::FindQueueIndex(uint8_t start_index, Register remote_register, ServiceInterface interface, bool access, bool* success) {
 8017ee6:	f89d 8024 	ldrb.w	r8, [sp, #36]	@ 0x24
 8017eea:	e901 000c 	stmdb	r1, {r2, r3}
	osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 8017eee:	f04f 31ff 	mov.w	r1, #4294967295
 8017ef2:	f89d 7021 	ldrb.w	r7, [sp, #33]	@ 0x21
 8017ef6:	f7f4 f961 	bl	800c1bc <osSemaphoreAcquire>
		if (services[index].active) {
			Register registered_register = services[index].configuration.register_;
			ServiceInterface registered_interface =services[index].configuration.interface;

			// Check register address
			if (remote_register.address == registered_register.address) {
 8017efa:	f8bd 1000 	ldrh.w	r1, [sp]
 8017efe:	eb04 0344 	add.w	r3, r4, r4, lsl #1
				// Check interface
				if (interface.interface == registered_interface.interface) {
 8017f02:	f89d 0020 	ldrb.w	r0, [sp, #32]
 8017f06:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
	for (uint8_t index = start_index; index < NUMBER_OF_SERVICES; index++) {
 8017f0a:	2c01      	cmp	r4, #1
 8017f0c:	d905      	bls.n	8017f1a <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x40>
			}
		}
	}
	osSemaphoreRelease(ServiceSemaphore);
	*success = false;
	return 0;
 8017f0e:	2400      	movs	r4, #0
	osSemaphoreRelease(ServiceSemaphore);
 8017f10:	6828      	ldr	r0, [r5, #0]
 8017f12:	f7f4 f987 	bl	800c224 <osSemaphoreRelease>
	return 0;
 8017f16:	4626      	mov	r6, r4
 8017f18:	e014      	b.n	8017f44 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x6a>
		if (services[index].active) {
 8017f1a:	7a1e      	ldrb	r6, [r3, #8]
 8017f1c:	b1c6      	cbz	r6, 8017f50 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x76>
			if (remote_register.address == registered_register.address) {
 8017f1e:	895a      	ldrh	r2, [r3, #10]
 8017f20:	428a      	cmp	r2, r1
 8017f22:	d115      	bne.n	8017f50 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x76>
				if (interface.interface == registered_interface.interface) {
 8017f24:	7c9a      	ldrb	r2, [r3, #18]
 8017f26:	4282      	cmp	r2, r0
 8017f28:	d112      	bne.n	8017f50 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x76>
			ServiceInterface registered_interface =services[index].configuration.interface;
 8017f2a:	7cda      	ldrb	r2, [r3, #19]
					if (interface.address == registered_interface.address || registered_interface.address == ALL || interface.address == ALL) {
 8017f2c:	4297      	cmp	r7, r2
 8017f2e:	d003      	beq.n	8017f38 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x5e>
 8017f30:	2aff      	cmp	r2, #255	@ 0xff
 8017f32:	d001      	beq.n	8017f38 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x5e>
 8017f34:	2fff      	cmp	r7, #255	@ 0xff
 8017f36:	d10b      	bne.n	8017f50 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x76>
						if (access == services[index].configuration.access) { // check access type
 8017f38:	7d1a      	ldrb	r2, [r3, #20]
 8017f3a:	4542      	cmp	r2, r8
 8017f3c:	d108      	bne.n	8017f50 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x76>
							osSemaphoreRelease(ServiceSemaphore);
 8017f3e:	6828      	ldr	r0, [r5, #0]
 8017f40:	f7f4 f970 	bl	800c224 <osSemaphoreRelease>
							*success = true;
 8017f44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
}
 8017f46:	4620      	mov	r0, r4
							*success = true;
 8017f48:	701e      	strb	r6, [r3, #0]
}
 8017f4a:	b002      	add	sp, #8
 8017f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (uint8_t index = start_index; index < NUMBER_OF_SERVICES; index++) {
 8017f50:	3401      	adds	r4, #1
 8017f52:	3318      	adds	r3, #24
 8017f54:	b2e4      	uxtb	r4, r4
 8017f56:	e7d8      	b.n	8017f0a <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x30>

08017f58 <_ZN8Services14QueueAvailableE8Register16ServiceInterfaceb>:
 * @param input remote_register: the register information to remotely access
 * @param input interface: the interface from which the remote access will be processed
 * @param input access: whether WRITE or READ
 * @return whether successful
 */
bool Services::QueueAvailable(Register remote_register, ServiceInterface interface, bool access) {
 8017f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f5c:	b086      	sub	sp, #24
 8017f5e:	4604      	mov	r4, r0
 8017f60:	a802      	add	r0, sp, #8
 8017f62:	f89d 6030 	ldrb.w	r6, [sp, #48]	@ 0x30
 8017f66:	e880 0006 	stmia.w	r0, {r1, r2}
 8017f6a:	f8ad 3004 	strh.w	r3, [sp, #4]
	if (queue_size >= NUMBER_OF_SERVICES) return false;
 8017f6e:	7923      	ldrb	r3, [r4, #4]
 8017f70:	2b01      	cmp	r3, #1
 8017f72:	d83f      	bhi.n	8017ff4 <_ZN8Services14QueueAvailableE8Register16ServiceInterfaceb+0x9c>

	osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 8017f74:	f04f 31ff 	mov.w	r1, #4294967295
 8017f78:	6820      	ldr	r0, [r4, #0]
 8017f7a:	f8bd 5008 	ldrh.w	r5, [sp, #8]
 8017f7e:	f7f4 f91d 	bl	800c1bc <osSemaphoreAcquire>
	for (uint8_t index = 0; index < NUMBER_OF_SERVICES; index++) {
 8017f82:	4623      	mov	r3, r4
 8017f84:	f104 0130 	add.w	r1, r4, #48	@ 0x30
		if (services[index].active) {
 8017f88:	7a1a      	ldrb	r2, [r3, #8]
 8017f8a:	b3ba      	cbz	r2, 8017ffc <_ZN8Services14QueueAvailableE8Register16ServiceInterfaceb+0xa4>
			Register registered_register = services[index].configuration.register_;
			ServiceInterface registered_interface =services[index].configuration.interface;

			// Check register address
			if (remote_register.address == registered_register.address) {
 8017f8c:	f8b3 800a 	ldrh.w	r8, [r3, #10]
			Register registered_register = services[index].configuration.register_;
 8017f90:	f8d3 000a 	ldr.w	r0, [r3, #10]
 8017f94:	89da      	ldrh	r2, [r3, #14]
			if (remote_register.address == registered_register.address) {
 8017f96:	45a8      	cmp	r8, r5
			Register registered_register = services[index].configuration.register_;
 8017f98:	9004      	str	r0, [sp, #16]
 8017f9a:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017f9e:	f893 c00c 	ldrb.w	ip, [r3, #12]
 8017fa2:	7b5f      	ldrb	r7, [r3, #13]
 8017fa4:	89d8      	ldrh	r0, [r3, #14]
			ServiceInterface registered_interface =services[index].configuration.interface;
 8017fa6:	f893 e012 	ldrb.w	lr, [r3, #18]
 8017faa:	7cda      	ldrb	r2, [r3, #19]
			if (remote_register.address == registered_register.address) {
 8017fac:	d126      	bne.n	8017ffc <_ZN8Services14QueueAvailableE8Register16ServiceInterfaceb+0xa4>
				// Check interface
				if (interface.interface == registered_interface.interface) {
 8017fae:	f89d 8004 	ldrb.w	r8, [sp, #4]
 8017fb2:	45f0      	cmp	r8, lr
 8017fb4:	d122      	bne.n	8017ffc <_ZN8Services14QueueAvailableE8Register16ServiceInterfaceb+0xa4>
					// Check device address that ack the service
					if (interface.address == registered_interface.address || registered_interface.address == ALL || remote_register.address == ALL) {
 8017fb6:	f89d e005 	ldrb.w	lr, [sp, #5]
 8017fba:	4596      	cmp	lr, r2
 8017fbc:	d003      	beq.n	8017fc6 <_ZN8Services14QueueAvailableE8Register16ServiceInterfaceb+0x6e>
 8017fbe:	2aff      	cmp	r2, #255	@ 0xff
 8017fc0:	d001      	beq.n	8017fc6 <_ZN8Services14QueueAvailableE8Register16ServiceInterfaceb+0x6e>
 8017fc2:	2dff      	cmp	r5, #255	@ 0xff
 8017fc4:	d11a      	bne.n	8017ffc <_ZN8Services14QueueAvailableE8Register16ServiceInterfaceb+0xa4>
						// Check there is no other service with the same access mode
						if (access == services[index].configuration.access) {
 8017fc6:	7d1a      	ldrb	r2, [r3, #20]
 8017fc8:	42b2      	cmp	r2, r6
 8017fca:	d117      	bne.n	8017ffc <_ZN8Services14QueueAvailableE8Register16ServiceInterfaceb+0xa4>
							// Check there is no other register with the same ID and interface
							if (remote_register.type != registered_register.type || remote_register.isArray != registered_register.isArray || (remote_register.isArray && (remote_register.length != registered_register.length))) {
 8017fcc:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8017fd0:	f88d c012 	strb.w	ip, [sp, #18]
 8017fd4:	f88d 7013 	strb.w	r7, [sp, #19]
 8017fd8:	f8bd 7012 	ldrh.w	r7, [sp, #18]
 8017fdc:	4297      	cmp	r7, r2
 8017fde:	d106      	bne.n	8017fee <_ZN8Services14QueueAvailableE8Register16ServiceInterfaceb+0x96>
 8017fe0:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8017fe4:	b152      	cbz	r2, 8017ffc <_ZN8Services14QueueAvailableE8Register16ServiceInterfaceb+0xa4>
 8017fe6:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8017fea:	4282      	cmp	r2, r0
 8017fec:	d006      	beq.n	8017ffc <_ZN8Services14QueueAvailableE8Register16ServiceInterfaceb+0xa4>
								osSemaphoreRelease(ServiceSemaphore);
 8017fee:	6820      	ldr	r0, [r4, #0]
 8017ff0:	f7f4 f918 	bl	800c224 <osSemaphoreRelease>
	if (queue_size >= NUMBER_OF_SERVICES) return false;
 8017ff4:	2000      	movs	r0, #0
			}
		}
	}
	osSemaphoreRelease(ServiceSemaphore);
	return true;
}
 8017ff6:	b006      	add	sp, #24
 8017ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (uint8_t index = 0; index < NUMBER_OF_SERVICES; index++) {
 8017ffc:	3318      	adds	r3, #24
 8017ffe:	428b      	cmp	r3, r1
 8018000:	d1c2      	bne.n	8017f88 <_ZN8Services14QueueAvailableE8Register16ServiceInterfaceb+0x30>
	osSemaphoreRelease(ServiceSemaphore);
 8018002:	6820      	ldr	r0, [r4, #0]
 8018004:	f7f4 f90e 	bl	800c224 <osSemaphoreRelease>
	return true;
 8018008:	2001      	movs	r0, #1
 801800a:	e7f4      	b.n	8017ff6 <_ZN8Services14QueueAvailableE8Register16ServiceInterfaceb+0x9e>

0801800c <_ZN8Services18FindAvailableIndexEPb>:
 * @return a free queue index
 */
uint8_t Services::FindAvailableIndex(bool* success) {

	for (uint8_t index = 0; index < NUMBER_OF_SERVICES; index++) {
		if (not services[index].active) {
 801800c:	7a03      	ldrb	r3, [r0, #8]
 801800e:	b133      	cbz	r3, 801801e <_ZN8Services18FindAvailableIndexEPb+0x12>
 8018010:	f890 2020 	ldrb.w	r2, [r0, #32]
 8018014:	b12a      	cbz	r2, 8018022 <_ZN8Services18FindAvailableIndexEPb+0x16>
			*success = true;
			return index;
		}
	}

	*success = false;
 8018016:	2300      	movs	r3, #0
	for (uint8_t index = 0; index < NUMBER_OF_SERVICES; index++) {
 8018018:	2000      	movs	r0, #0
 801801a:	700b      	strb	r3, [r1, #0]
	return 0;
}
 801801c:	4770      	bx	lr
			*success = true;
 801801e:	2301      	movs	r3, #1
 8018020:	e7fa      	b.n	8018018 <_ZN8Services18FindAvailableIndexEPb+0xc>
	for (uint8_t index = 0; index < NUMBER_OF_SERVICES; index++) {
 8018022:	2001      	movs	r0, #1
 8018024:	e7f9      	b.n	801801a <_ZN8Services18FindAvailableIndexEPb+0xe>

08018026 <_ZN8Services10AddToQueueE8Register16ServiceInterfacebtPb>:
 * @param input access: access mode of the service
 * @param input timeout: time left to terminate the service procedure.
 * @param output success: whether successful
 * @return the service index
 */
uint8_t Services::AddToQueue(Register remote_register, ServiceInterface interface, bool access, uint16_t timeout, bool* success) {
 8018026:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801802a:	b085      	sub	sp, #20
 801802c:	4604      	mov	r4, r0
	osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 801802e:	6800      	ldr	r0, [r0, #0]
uint8_t Services::AddToQueue(Register remote_register, ServiceInterface interface, bool access, uint16_t timeout, bool* success) {
 8018030:	f10d 0908 	add.w	r9, sp, #8
 8018034:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8018036:	f8bd 5034 	ldrh.w	r5, [sp, #52]	@ 0x34
 801803a:	e889 0006 	stmia.w	r9, {r1, r2}
	osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 801803e:	f04f 31ff 	mov.w	r1, #4294967295
uint8_t Services::AddToQueue(Register remote_register, ServiceInterface interface, bool access, uint16_t timeout, bool* success) {
 8018042:	f8ad 3004 	strh.w	r3, [sp, #4]
	osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 8018046:	f7f4 f8b9 	bl	800c1bc <osSemaphoreAcquire>

	// Find a free index
	uint8_t index = FindAvailableIndex(success);
 801804a:	4631      	mov	r1, r6
 801804c:	4620      	mov	r0, r4
 801804e:	f7ff ffdd 	bl	801800c <_ZN8Services18FindAvailableIndexEPb>
	if (not *success) {
 8018052:	f896 8000 	ldrb.w	r8, [r6]
	uint8_t index = FindAvailableIndex(success);
 8018056:	4607      	mov	r7, r0
	if (not *success) {
 8018058:	f1b8 0f00 	cmp.w	r8, #0
 801805c:	d109      	bne.n	8018072 <_ZN8Services10AddToQueueE8Register16ServiceInterfacebtPb+0x4c>
		osSemaphoreRelease(ServiceSemaphore);
		*success = false;
		return 0;
 801805e:	4647      	mov	r7, r8
		osSemaphoreRelease(ServiceSemaphore);
 8018060:	6820      	ldr	r0, [r4, #0]
 8018062:	f7f4 f8df 	bl	800c224 <osSemaphoreRelease>
	services[index].error = false;

	osSemaphoreRelease(ServiceSemaphore);
	*success = true;
	return index;
}
 8018066:	4638      	mov	r0, r7
		*success = false;
 8018068:	f886 8000 	strb.w	r8, [r6]
}
 801806c:	b005      	add	sp, #20
 801806e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	queue_size++;
 8018072:	7923      	ldrb	r3, [r4, #4]
	services[index].active = true;
 8018074:	2201      	movs	r2, #1
	queue_size++;
 8018076:	3301      	adds	r3, #1
 8018078:	7123      	strb	r3, [r4, #4]
	services[index].active = true;
 801807a:	2318      	movs	r3, #24
 801807c:	fb03 4300 	mla	r3, r3, r0, r4
	services[index].configuration.register_ = remote_register;
 8018080:	9802      	ldr	r0, [sp, #8]
	services[index].active = true;
 8018082:	811a      	strh	r2, [r3, #8]
	services[index].configuration.register_ = remote_register;
 8018084:	f8b9 2004 	ldrh.w	r2, [r9, #4]
	services[index].timeout = timeout;
 8018088:	82dd      	strh	r5, [r3, #22]
	services[index].configuration.register_ = remote_register;
 801808a:	81da      	strh	r2, [r3, #14]
	services[index].configuration.interface = interface;
 801808c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
	services[index].configuration.register_ = remote_register;
 8018090:	f8c3 000a 	str.w	r0, [r3, #10]
	services[index].configuration.interface = interface;
 8018094:	825a      	strh	r2, [r3, #18]
	services[index].configuration.access = access;
 8018096:	f89d 2030 	ldrb.w	r2, [sp, #48]	@ 0x30
 801809a:	751a      	strb	r2, [r3, #20]
	services[index].timeout_timestamp = HAL_GetTick() + timeout;
 801809c:	f7eb f832 	bl	8003104 <HAL_GetTick>
	services[index].error = false;
 80180a0:	2200      	movs	r2, #0
 80180a2:	b23b      	sxth	r3, r7
	services[index].timeout_timestamp = HAL_GetTick() + timeout;
 80180a4:	4405      	add	r5, r0
 80180a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80180aa:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80180ae:	619d      	str	r5, [r3, #24]
	services[index].error = false;
 80180b0:	771a      	strb	r2, [r3, #28]
	osSemaphoreRelease(ServiceSemaphore);
 80180b2:	6820      	ldr	r0, [r4, #0]
 80180b4:	f7f4 f8b6 	bl	800c224 <osSemaphoreRelease>
	return index;
 80180b8:	e7d5      	b.n	8018066 <_ZN8Services10AddToQueueE8Register16ServiceInterfacebtPb+0x40>

080180ba <_ZN8Services15RemoveFromQueueEh>:
 *
 * @param input index: sevice index in queue
 * @return whether successful
 */
bool Services::RemoveFromQueue(uint8_t index) {
	if (index >= NUMBER_OF_SERVICES) return false;
 80180ba:	2901      	cmp	r1, #1
bool Services::RemoveFromQueue(uint8_t index) {
 80180bc:	b538      	push	{r3, r4, r5, lr}
 80180be:	4604      	mov	r4, r0
 80180c0:	460d      	mov	r5, r1
	if (index >= NUMBER_OF_SERVICES) return false;
 80180c2:	d811      	bhi.n	80180e8 <_ZN8Services15RemoveFromQueueEh+0x2e>

	osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 80180c4:	f04f 31ff 	mov.w	r1, #4294967295
 80180c8:	6800      	ldr	r0, [r0, #0]
 80180ca:	f7f4 f877 	bl	800c1bc <osSemaphoreAcquire>
	queue_size--;
 80180ce:	7923      	ldrb	r3, [r4, #4]
	services[index].active = false;
	services[index].reception_flag = false;
	osSemaphoreRelease(ServiceSemaphore);
 80180d0:	6820      	ldr	r0, [r4, #0]
	queue_size--;
 80180d2:	3b01      	subs	r3, #1
 80180d4:	7123      	strb	r3, [r4, #4]
	services[index].active = false;
 80180d6:	2318      	movs	r3, #24
 80180d8:	fb03 4505 	mla	r5, r3, r5, r4
 80180dc:	2300      	movs	r3, #0
 80180de:	812b      	strh	r3, [r5, #8]
	osSemaphoreRelease(ServiceSemaphore);
 80180e0:	f7f4 f8a0 	bl	800c224 <osSemaphoreRelease>
	return true;
 80180e4:	2001      	movs	r0, #1
}
 80180e6:	bd38      	pop	{r3, r4, r5, pc}
	if (index >= NUMBER_OF_SERVICES) return false;
 80180e8:	2000      	movs	r0, #0
 80180ea:	e7fc      	b.n	80180e6 <_ZN8Services15RemoveFromQueueEh+0x2c>

080180ec <_ZN8Services12ReceiveWriteE20ServiceConfigurationh>:
 * @brief Receive a write service access acknowledgment
 *
 * @param input information: service information associated to the write acknowledgment
 * @param input status: value returned by the remote module
 */
void Services::ReceiveWrite(ServiceConfiguration information, uint8_t status) {
 80180ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80180f0:	b08b      	sub	sp, #44	@ 0x2c
 80180f2:	4605      	mov	r5, r0
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
		if (not success) return;

		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
		buffer_uint8[index][0] = status;
		services[index].reception_flag = true;
 80180f4:	f04f 0918 	mov.w	r9, #24
void Services::ReceiveWrite(ServiceConfiguration information, uint8_t status) {
 80180f8:	ae05      	add	r6, sp, #20
 80180fa:	f89d 7048 	ldrb.w	r7, [sp, #72]	@ 0x48
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 80180fe:	f10d 0827 	add.w	r8, sp, #39	@ 0x27
void Services::ReceiveWrite(ServiceConfiguration information, uint8_t status) {
 8018102:	e886 000e 	stmia.w	r6, {r1, r2, r3}
	bool success = true;
 8018106:	2301      	movs	r3, #1
	uint8_t start_index = 0;
 8018108:	2100      	movs	r1, #0
	bool success = true;
 801810a:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
	while (success) {
 801810e:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8018112:	b913      	cbnz	r3, 801811a <_ZN8Services12ReceiveWriteE20ServiceConfigurationh+0x2e>
		osSemaphoreRelease(ServiceSemaphore);

		start_index = index + 1;
	}
}
 8018114:	b00b      	add	sp, #44	@ 0x2c
 8018116:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 801811a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801811e:	4628      	mov	r0, r5
 8018120:	f8cd 8008 	str.w	r8, [sp, #8]
 8018124:	9301      	str	r3, [sp, #4]
 8018126:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801812a:	f8ad 3000 	strh.w	r3, [sp]
 801812e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8018132:	f7ff fed2 	bl	8017eda <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb>
		if (not success) return;
 8018136:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 801813a:	4604      	mov	r4, r0
		if (not success) return;
 801813c:	2b00      	cmp	r3, #0
 801813e:	d0e9      	beq.n	8018114 <_ZN8Services12ReceiveWriteE20ServiceConfigurationh+0x28>
		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 8018140:	f04f 31ff 	mov.w	r1, #4294967295
 8018144:	6828      	ldr	r0, [r5, #0]
 8018146:	f7f4 f839 	bl	800c1bc <osSemaphoreAcquire>
		services[index].reception_flag = true;
 801814a:	2201      	movs	r2, #1
		buffer_uint8[index][0] = status;
 801814c:	eb05 2304 	add.w	r3, r5, r4, lsl #8
 8018150:	f883 7038 	strb.w	r7, [r3, #56]	@ 0x38
		services[index].reception_flag = true;
 8018154:	fb09 5304 	mla	r3, r9, r4, r5
		osSemaphoreRelease(ServiceSemaphore);
 8018158:	6828      	ldr	r0, [r5, #0]
		services[index].reception_flag = true;
 801815a:	725a      	strb	r2, [r3, #9]
		osSemaphoreRelease(ServiceSemaphore);
 801815c:	f7f4 f862 	bl	800c224 <osSemaphoreRelease>
		start_index = index + 1;
 8018160:	1c61      	adds	r1, r4, #1
 8018162:	b2c9      	uxtb	r1, r1
 8018164:	e7d3      	b.n	801810e <_ZN8Services12ReceiveWriteE20ServiceConfigurationh+0x22>

08018166 <_ZN8Services12ReceiveErrorE20ServiceConfigurationh>:
 * @brief Receive an service access error
 *
 * @param input information: service information associated to the acknowledgment
 * @param input error: error flag returned by the remote module
 */
void Services::ReceiveError(ServiceConfiguration information, uint8_t error) {
 8018166:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801816a:	b08a      	sub	sp, #40	@ 0x28
 801816c:	4604      	mov	r4, r0
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
		if (not success) return;

		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
		buffer_uint8[index][0] = error;
		services[index].error = true;
 801816e:	2718      	movs	r7, #24
void Services::ReceiveError(ServiceConfiguration information, uint8_t error) {
 8018170:	ae05      	add	r6, sp, #20
 8018172:	f89d 8048 	ldrb.w	r8, [sp, #72]	@ 0x48
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 8018176:	f10d 0927 	add.w	r9, sp, #39	@ 0x27
void Services::ReceiveError(ServiceConfiguration information, uint8_t error) {
 801817a:	e886 000e 	stmia.w	r6, {r1, r2, r3}
	bool success = true;
 801817e:	2301      	movs	r3, #1
	uint8_t start_index = 0;
 8018180:	2100      	movs	r1, #0
	bool success = true;
 8018182:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
	while (success) {
 8018186:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 801818a:	b913      	cbnz	r3, 8018192 <_ZN8Services12ReceiveErrorE20ServiceConfigurationh+0x2c>
		services[index].reception_flag = true;
		osSemaphoreRelease(ServiceSemaphore);

		start_index = index + 1;
	}
}
 801818c:	b00a      	add	sp, #40	@ 0x28
 801818e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 8018192:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8018196:	4620      	mov	r0, r4
 8018198:	f8cd 9008 	str.w	r9, [sp, #8]
 801819c:	9301      	str	r3, [sp, #4]
 801819e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80181a2:	f8ad 3000 	strh.w	r3, [sp]
 80181a6:	e896 000c 	ldmia.w	r6, {r2, r3}
 80181aa:	f7ff fe96 	bl	8017eda <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb>
		if (not success) return;
 80181ae:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 80181b2:	4605      	mov	r5, r0
		if (not success) return;
 80181b4:	2b00      	cmp	r3, #0
 80181b6:	d0e9      	beq.n	801818c <_ZN8Services12ReceiveErrorE20ServiceConfigurationh+0x26>
		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 80181b8:	f04f 31ff 	mov.w	r1, #4294967295
 80181bc:	6820      	ldr	r0, [r4, #0]
 80181be:	f7f3 fffd 	bl	800c1bc <osSemaphoreAcquire>
		services[index].error = true;
 80181c2:	f105 0a01 	add.w	sl, r5, #1
		buffer_uint8[index][0] = error;
 80181c6:	eb04 2305 	add.w	r3, r4, r5, lsl #8
		services[index].error = true;
 80181ca:	2201      	movs	r2, #1
		buffer_uint8[index][0] = error;
 80181cc:	f883 8038 	strb.w	r8, [r3, #56]	@ 0x38
		services[index].error = true;
 80181d0:	fb05 7307 	mla	r3, r5, r7, r7
		osSemaphoreRelease(ServiceSemaphore);
 80181d4:	6820      	ldr	r0, [r4, #0]
		services[index].reception_flag = true;
 80181d6:	fb07 4505 	mla	r5, r7, r5, r4
		services[index].error = true;
 80181da:	4423      	add	r3, r4
 80181dc:	711a      	strb	r2, [r3, #4]
		services[index].reception_flag = true;
 80181de:	726a      	strb	r2, [r5, #9]
		osSemaphoreRelease(ServiceSemaphore);
 80181e0:	f7f4 f820 	bl	800c224 <osSemaphoreRelease>
		start_index = index + 1;
 80181e4:	fa5f f18a 	uxtb.w	r1, sl
 80181e8:	e7cd      	b.n	8018186 <_ZN8Services12ReceiveErrorE20ServiceConfigurationh+0x20>

080181ea <_ZN8Services18FindRemoteRegisterE8Register16ServiceInterfacebPb>:
 * @param input interface: interface associated to the register to find
 * @param input access: access mode of the register to find
 * @param output success: whether successful
 * @return the Register complete configuration (type, isArray, length)
 */
Register Services::FindRemoteRegister(Register remote_register, ServiceInterface interface, bool access, bool* success) {
 80181ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80181ee:	b087      	sub	sp, #28
 80181f0:	460d      	mov	r5, r1
 80181f2:	4604      	mov	r4, r0
 80181f4:	a904      	add	r1, sp, #16
 80181f6:	9f10      	ldr	r7, [sp, #64]	@ 0x40
	uint8_t index;
	index = FindQueueIndex(0, remote_register, interface, access, success);
 80181f8:	4628      	mov	r0, r5
Register Services::FindRemoteRegister(Register remote_register, ServiceInterface interface, bool access, bool* success) {
 80181fa:	e881 000c 	stmia.w	r1, {r2, r3}
	index = FindQueueIndex(0, remote_register, interface, access, success);
 80181fe:	f89d 303c 	ldrb.w	r3, [sp, #60]	@ 0x3c
 8018202:	9702      	str	r7, [sp, #8]
 8018204:	9301      	str	r3, [sp, #4]
 8018206:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801820a:	f8ad 3000 	strh.w	r3, [sp]
 801820e:	e891 000c 	ldmia.w	r1, {r2, r3}
 8018212:	2100      	movs	r1, #0
 8018214:	f7ff fe61 	bl	8017eda <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb>
	if (*success) {
 8018218:	783b      	ldrb	r3, [r7, #0]
	index = FindQueueIndex(0, remote_register, interface, access, success);
 801821a:	4606      	mov	r6, r0
	if (*success) {
 801821c:	b1f3      	cbz	r3, 801825c <_ZN8Services18FindRemoteRegisterE8Register16ServiceInterfacebPb+0x72>
		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 801821e:	f04f 31ff 	mov.w	r1, #4294967295
 8018222:	6828      	ldr	r0, [r5, #0]
 8018224:	f7f3 ffca 	bl	800c1bc <osSemaphoreAcquire>
		Register found_register = services[index].configuration.register_;
 8018228:	2318      	movs	r3, #24
 801822a:	210a      	movs	r1, #10
		osSemaphoreRelease(ServiceSemaphore);
 801822c:	6828      	ldr	r0, [r5, #0]
		Register found_register = services[index].configuration.register_;
 801822e:	fb03 5206 	mla	r2, r3, r6, r5
 8018232:	fb13 1306 	smlabb	r3, r3, r6, r1
 8018236:	f8b2 900a 	ldrh.w	r9, [r2, #10]
 801823a:	442b      	add	r3, r5
 801823c:	f892 800c 	ldrb.w	r8, [r2, #12]
 8018240:	89d6      	ldrh	r6, [r2, #14]
 8018242:	78df      	ldrb	r7, [r3, #3]
		osSemaphoreRelease(ServiceSemaphore);
 8018244:	f7f3 ffee 	bl	800c224 <osSemaphoreRelease>

		return found_register;
 8018248:	f8a4 9000 	strh.w	r9, [r4]
 801824c:	f884 8002 	strb.w	r8, [r4, #2]
 8018250:	70e7      	strb	r7, [r4, #3]
 8018252:	80a6      	strh	r6, [r4, #4]
	}

	*success = false;
	return Register();
}
 8018254:	4620      	mov	r0, r4
 8018256:	b007      	add	sp, #28
 8018258:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return Register();
 801825c:	6023      	str	r3, [r4, #0]
 801825e:	80a3      	strh	r3, [r4, #4]
 8018260:	e7f8      	b.n	8018254 <_ZN8Services18FindRemoteRegisterE8Register16ServiceInterfacebPb+0x6a>
	...

08018264 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>:
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8018264:	4926      	ldr	r1, [pc, #152]	@ (8018300 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 8018266:	b510      	push	{r4, lr}
 8018268:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801826a:	4608      	mov	r0, r1
 801826c:	f001 fb6c 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8018270:	2800      	cmp	r0, #0
 8018272:	d133      	bne.n	80182dc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8018274:	4923      	ldr	r1, [pc, #140]	@ (8018304 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa0>)
 8018276:	4822      	ldr	r0, [pc, #136]	@ (8018300 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8018278:	f001 fb66 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 801827c:	2800      	cmp	r0, #0
 801827e:	d12f      	bne.n	80182e0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8018280:	4921      	ldr	r1, [pc, #132]	@ (8018308 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa4>)
 8018282:	481f      	ldr	r0, [pc, #124]	@ (8018300 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8018284:	f001 fb60 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8018288:	bb60      	cbnz	r0, 80182e4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 801828a:	4920      	ldr	r1, [pc, #128]	@ (801830c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa8>)
 801828c:	481c      	ldr	r0, [pc, #112]	@ (8018300 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 801828e:	f001 fb5b 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8018292:	bb48      	cbnz	r0, 80182e8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8018294:	491e      	ldr	r1, [pc, #120]	@ (8018310 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xac>)
 8018296:	481a      	ldr	r0, [pc, #104]	@ (8018300 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8018298:	f001 fb56 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 801829c:	bb30      	cbnz	r0, 80182ec <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 801829e:	491d      	ldr	r1, [pc, #116]	@ (8018314 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb0>)
 80182a0:	4817      	ldr	r0, [pc, #92]	@ (8018300 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 80182a2:	f001 fb51 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 80182a6:	bb18      	cbnz	r0, 80182f0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 80182a8:	491b      	ldr	r1, [pc, #108]	@ (8018318 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb4>)
 80182aa:	4815      	ldr	r0, [pc, #84]	@ (8018300 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 80182ac:	f001 fb4c 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 80182b0:	bb00      	cbnz	r0, 80182f4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 80182b2:	491a      	ldr	r1, [pc, #104]	@ (801831c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb8>)
 80182b4:	4812      	ldr	r0, [pc, #72]	@ (8018300 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 80182b6:	f001 fb47 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 80182ba:	b9e8      	cbnz	r0, 80182f8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 80182bc:	4918      	ldr	r1, [pc, #96]	@ (8018320 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xbc>)
 80182be:	4810      	ldr	r0, [pc, #64]	@ (8018300 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 80182c0:	f001 fb42 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 80182c4:	b9d0      	cbnz	r0, 80182fc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 80182c6:	4917      	ldr	r1, [pc, #92]	@ (8018324 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xc0>)
 80182c8:	480d      	ldr	r0, [pc, #52]	@ (8018300 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 80182ca:	f001 fb3d 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 80182ce:	2800      	cmp	r0, #0
 80182d0:	bf14      	ite	ne
 80182d2:	2309      	movne	r3, #9
 80182d4:	2300      	moveq	r3, #0
 80182d6:	7020      	strb	r0, [r4, #0]
}
 80182d8:	4618      	mov	r0, r3
 80182da:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80182dc:	2300      	movs	r3, #0
 80182de:	e7fa      	b.n	80182d6 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 80182e0:	2301      	movs	r3, #1
 80182e2:	e7f8      	b.n	80182d6 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 80182e4:	2302      	movs	r3, #2
 80182e6:	e7f6      	b.n	80182d6 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 80182e8:	2303      	movs	r3, #3
 80182ea:	e7f4      	b.n	80182d6 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 80182ec:	2304      	movs	r3, #4
 80182ee:	e7f2      	b.n	80182d6 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 80182f0:	2305      	movs	r3, #5
 80182f2:	e7f0      	b.n	80182d6 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 80182f4:	2306      	movs	r3, #6
 80182f6:	e7ee      	b.n	80182d6 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 80182f8:	2307      	movs	r3, #7
 80182fa:	e7ec      	b.n	80182d6 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 80182fc:	2308      	movs	r3, #8
 80182fe:	e7ea      	b.n	80182d6 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
 8018300:	0801a298 	.word	0x0801a298
 8018304:	0801a288 	.word	0x0801a288
 8018308:	0801a278 	.word	0x0801a278
 801830c:	0801a268 	.word	0x0801a268
 8018310:	0801a2a0 	.word	0x0801a2a0
 8018314:	0801a290 	.word	0x0801a290
 8018318:	0801a280 	.word	0x0801a280
 801831c:	0801a270 	.word	0x0801a270
 8018320:	0801a260 	.word	0x0801a260
 8018324:	0801a258 	.word	0x0801a258

08018328 <_ZN17MasterSubscribersC1Ev>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 8018328:	2200      	movs	r2, #0
 801832a:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801832e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8018332:	e9c0 2207 	strd	r2, r2, [r0, #28]

/**
 * @brief Class constructor
 */
MasterSubscribers::MasterSubscribers() {
}
 8018336:	4770      	bx	lr

08018338 <_ZN17MasterSubscribers4InitEP9RegistersP4LEDS>:
 * @brief Initialize the class with references to other classes. Set default values.
 *
 * @param input registers_: the Registers instance
 * @param input leds_: the LEDS instance
 */
void MasterSubscribers::Init(Registers* registers_, LEDS* leds_) {
 8018338:	b510      	push	{r4, lr}
	registers = registers_;
	leds = leds_;
 801833a:	e9c0 1200 	strd	r1, r2, [r0]

	SubscribersSemaphore = osSemaphoreNew(1,1,NULL);
 801833e:	2101      	movs	r1, #1
void MasterSubscribers::Init(Registers* registers_, LEDS* leds_) {
 8018340:	4604      	mov	r4, r0
	SubscribersSemaphore = osSemaphoreNew(1,1,NULL);
 8018342:	2200      	movs	r2, #0
 8018344:	4608      	mov	r0, r1
 8018346:	f7f3 fedd 	bl	800c104 <osSemaphoreNew>
 801834a:	60a0      	str	r0, [r4, #8]
	osSemaphoreRelease(SubscribersSemaphore);
}
 801834c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSemaphoreRelease(SubscribersSemaphore);
 8018350:	f7f3 bf68 	b.w	800c224 <osSemaphoreRelease>

08018354 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb>:
 *
 * @param input ID: subscriber ID
 * @param output success: whether successful
 * @return the subscriber index
 */
uint8_t MasterSubscribers::FindSubscriberIndex(uint8_t ID, bool* success) {
 8018354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018356:	4604      	mov	r4, r0
 8018358:	460d      	mov	r5, r1
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 801835a:	6880      	ldr	r0, [r0, #8]
 801835c:	f04f 31ff 	mov.w	r1, #4294967295
uint8_t MasterSubscribers::FindSubscriberIndex(uint8_t ID, bool* success) {
 8018360:	4616      	mov	r6, r2
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 8018362:	f7f3 ff2b 	bl	800c1bc <osSemaphoreAcquire>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8018366:	4a10      	ldr	r2, [pc, #64]	@ (80183a8 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb+0x54>)
	for (uint8_t index = 0; index < configurations.size(); index++) {
		if (configurations[index].ID == ID) {
 8018368:	2728      	movs	r7, #40	@ 0x28
 801836a:	e9d4 1303 	ldrd	r1, r3, [r4, #12]
 801836e:	1a5b      	subs	r3, r3, r1
 8018370:	10db      	asrs	r3, r3, #3
 8018372:	4353      	muls	r3, r2
	for (uint8_t index = 0; index < configurations.size(); index++) {
 8018374:	2200      	movs	r2, #0
 8018376:	b2d0      	uxtb	r0, r2
 8018378:	4298      	cmp	r0, r3
 801837a:	d305      	bcc.n	8018388 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb+0x34>
			osSemaphoreRelease(SubscribersSemaphore);
			*success = true;
			return index;
		}
	}
	osSemaphoreRelease(SubscribersSemaphore);
 801837c:	68a0      	ldr	r0, [r4, #8]
 801837e:	f7f3 ff51 	bl	800c224 <osSemaphoreRelease>
	*success = false;
	return 0;
 8018382:	2300      	movs	r3, #0
 8018384:	461d      	mov	r5, r3
 8018386:	e00b      	b.n	80183a0 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb+0x4c>
		if (configurations[index].ID == ID) {
 8018388:	fb07 fc00 	mul.w	ip, r7, r0
 801838c:	3201      	adds	r2, #1
 801838e:	f811 c00c 	ldrb.w	ip, [r1, ip]
 8018392:	45ac      	cmp	ip, r5
 8018394:	d1ef      	bne.n	8018376 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb+0x22>
 8018396:	4605      	mov	r5, r0
			osSemaphoreRelease(SubscribersSemaphore);
 8018398:	68a0      	ldr	r0, [r4, #8]
 801839a:	f7f3 ff43 	bl	800c224 <osSemaphoreRelease>
			return index;
 801839e:	2301      	movs	r3, #1
}
 80183a0:	4628      	mov	r0, r5
			*success = true;
 80183a2:	7033      	strb	r3, [r6, #0]
}
 80183a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80183a6:	bf00      	nop
 80183a8:	cccccccd 	.word	0xcccccccd

080183ac <_ZN17MasterSubscribers19SetSubscriberStatusEhb>:
bool MasterSubscribers::SetSubscriberStatus(uint8_t ID, bool status) {
 80183ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80183ae:	4616      	mov	r6, r2
	uint8_t index = FindSubscriberIndex(ID, &success);
 80183b0:	f10d 0207 	add.w	r2, sp, #7
bool MasterSubscribers::SetSubscriberStatus(uint8_t ID, bool status) {
 80183b4:	4605      	mov	r5, r0
	uint8_t index = FindSubscriberIndex(ID, &success);
 80183b6:	f7ff ffcd 	bl	8018354 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb>
	if (!success) return false;
 80183ba:	f89d 7007 	ldrb.w	r7, [sp, #7]
	uint8_t index = FindSubscriberIndex(ID, &success);
 80183be:	4604      	mov	r4, r0
	if (!success) return false;
 80183c0:	b177      	cbz	r7, 80183e0 <_ZN17MasterSubscribers19SetSubscriberStatusEhb+0x34>
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 80183c2:	f04f 31ff 	mov.w	r1, #4294967295
 80183c6:	68a8      	ldr	r0, [r5, #8]
 80183c8:	f7f3 fef8 	bl	800c1bc <osSemaphoreAcquire>
	configurations[index].activated = status;
 80183cc:	68e9      	ldr	r1, [r5, #12]
	return *(this->_M_impl._M_start + __n);
 80183ce:	b223      	sxth	r3, r4
	osSemaphoreRelease(SubscribersSemaphore);
 80183d0:	68a8      	ldr	r0, [r5, #8]
 80183d2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	configurations[index].activated = status;
 80183d6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80183da:	704e      	strb	r6, [r1, #1]
	osSemaphoreRelease(SubscribersSemaphore);
 80183dc:	f7f3 ff22 	bl	800c224 <osSemaphoreRelease>
}
 80183e0:	4638      	mov	r0, r7
 80183e2:	b003      	add	sp, #12
 80183e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080183e6 <_ZZN17MasterSubscribers12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 80183e6:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 80183e8:	4611      	mov	r1, r2
 80183ea:	b508      	push	{r3, lr}
			if (length != 2) return false;
 80183ec:	d108      	bne.n	8018400 <_ZZN17MasterSubscribers12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x1a>
			self->SetSubscriberStatus(input[0], (bool) input[1]);
 80183ee:	7852      	ldrb	r2, [r2, #1]
 80183f0:	7809      	ldrb	r1, [r1, #0]
 80183f2:	3a00      	subs	r2, #0
 80183f4:	bf18      	it	ne
 80183f6:	2201      	movne	r2, #1
 80183f8:	f7ff ffd8 	bl	80183ac <_ZN17MasterSubscribers19SetSubscriberStatusEhb>
			return true;
 80183fc:	2001      	movs	r0, #1
		}
 80183fe:	bd08      	pop	{r3, pc}
			if (length != 2) return false;
 8018400:	2000      	movs	r0, #0
 8018402:	e7fc      	b.n	80183fe <_ZZN17MasterSubscribers12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x18>

08018404 <_ZN17MasterSubscribers15AddressAcceptedEhh>:
bool MasterSubscribers::AddressAccepted(uint8_t ID, uint8_t address) {
 8018404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018406:	4616      	mov	r6, r2
	uint8_t index = FindSubscriberIndex(ID, &success);
 8018408:	f10d 0207 	add.w	r2, sp, #7
bool MasterSubscribers::AddressAccepted(uint8_t ID, uint8_t address) {
 801840c:	4605      	mov	r5, r0
	uint8_t index = FindSubscriberIndex(ID, &success);
 801840e:	f7ff ffa1 	bl	8018354 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb>
	if (!success) return false;
 8018412:	f89d 7007 	ldrb.w	r7, [sp, #7]
	uint8_t index = FindSubscriberIndex(ID, &success);
 8018416:	4604      	mov	r4, r0
	if (!success) return false;
 8018418:	b1ef      	cbz	r7, 8018456 <_ZN17MasterSubscribers15AddressAcceptedEhh+0x52>
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 801841a:	f04f 31ff 	mov.w	r1, #4294967295
 801841e:	68a8      	ldr	r0, [r5, #8]
 8018420:	f7f3 fecc 	bl	800c1bc <osSemaphoreAcquire>
 8018424:	68ea      	ldr	r2, [r5, #12]
 8018426:	b223      	sxth	r3, r4
 8018428:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801842c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8018430:	e9d3 3207 	ldrd	r3, r2, [r3, #28]
	if (configurations[index].filters.size() == 0) {
 8018434:	429a      	cmp	r2, r3
 8018436:	d109      	bne.n	801844c <_ZN17MasterSubscribers15AddressAcceptedEhh+0x48>
		osSemaphoreRelease(SubscribersSemaphore);
 8018438:	68a8      	ldr	r0, [r5, #8]
 801843a:	f7f3 fef3 	bl	800c224 <osSemaphoreRelease>
}
 801843e:	4638      	mov	r0, r7
 8018440:	b003      	add	sp, #12
 8018442:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (uint8_t filtered_address : configurations[index].filters) {
 8018444:	f813 1b01 	ldrb.w	r1, [r3], #1
		if (filtered_address == address) {
 8018448:	42b1      	cmp	r1, r6
 801844a:	e7f4      	b.n	8018436 <_ZN17MasterSubscribers15AddressAcceptedEhh+0x32>
	for (uint8_t filtered_address : configurations[index].filters) {
 801844c:	4293      	cmp	r3, r2
 801844e:	d1f9      	bne.n	8018444 <_ZN17MasterSubscribers15AddressAcceptedEhh+0x40>
	osSemaphoreRelease(SubscribersSemaphore);
 8018450:	68a8      	ldr	r0, [r5, #8]
 8018452:	f7f3 fee7 	bl	800c224 <osSemaphoreRelease>
	if (!success) return false;
 8018456:	2700      	movs	r7, #0
 8018458:	e7f1      	b.n	801843e <_ZN17MasterSubscribers15AddressAcceptedEhh+0x3a>

0801845a <_ZN17MasterSubscribers12ClearFiltersEh>:
bool MasterSubscribers::ClearFilters(uint8_t ID) {
 801845a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t index = FindSubscriberIndex(ID, &success);
 801845c:	f10d 0207 	add.w	r2, sp, #7
bool MasterSubscribers::ClearFilters(uint8_t ID) {
 8018460:	4605      	mov	r5, r0
	uint8_t index = FindSubscriberIndex(ID, &success);
 8018462:	f7ff ff77 	bl	8018354 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb>
	if (!success) return false;
 8018466:	f89d 6007 	ldrb.w	r6, [sp, #7]
	uint8_t index = FindSubscriberIndex(ID, &success);
 801846a:	4604      	mov	r4, r0
	if (!success) return false;
 801846c:	b196      	cbz	r6, 8018494 <_ZN17MasterSubscribers12ClearFiltersEh+0x3a>
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 801846e:	f04f 31ff 	mov.w	r1, #4294967295
 8018472:	68a8      	ldr	r0, [r5, #8]
 8018474:	f7f3 fea2 	bl	800c1bc <osSemaphoreAcquire>
	return *(this->_M_impl._M_start + __n);
 8018478:	68ea      	ldr	r2, [r5, #12]
 801847a:	b223      	sxth	r3, r4
	osSemaphoreRelease(SubscribersSemaphore);
 801847c:	68a8      	ldr	r0, [r5, #8]
 801847e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8018482:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8018486:	e9d3 2107 	ldrd	r2, r1, [r3, #28]
 801848a:	428a      	cmp	r2, r1
	    this->_M_impl._M_finish = __pos;
 801848c:	bf18      	it	ne
 801848e:	621a      	strne	r2, [r3, #32]
 8018490:	f7f3 fec8 	bl	800c224 <osSemaphoreRelease>
}
 8018494:	4630      	mov	r0, r6
 8018496:	b002      	add	sp, #8
 8018498:	bd70      	pop	{r4, r5, r6, pc}

0801849a <_ZZN17MasterSubscribers12AddRegistersEvENUlPvtPhtE1_4_FUNES0_tS1_t>:
			self->ClearFilters(*input);
 801849a:	7811      	ldrb	r1, [r2, #0]
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 801849c:	b508      	push	{r3, lr}
			self->ClearFilters(*input);
 801849e:	f7ff ffdc 	bl	801845a <_ZN17MasterSubscribers12ClearFiltersEh>
		}
 80184a2:	2001      	movs	r0, #1
 80184a4:	bd08      	pop	{r3, pc}
	...

080184a8 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb>:
 * @param input remote_register: register configuration with only address filled
 * @param input interface: interface from which the published data comes from
 * @param output success: whether successful
 * @return the register configuration index from the subscriber
 */
uint8_t MasterSubscribers::FindRemoteRegisterIndex(uint8_t ID, Register remote_register, SubscriberInterface interface, bool* success) {
 80184a8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80184ac:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80184ae:	ac02      	add	r4, sp, #8
 80184b0:	4605      	mov	r5, r0
 80184b2:	e904 000c 	stmdb	r4, {r2, r3}
	uint8_t subscriber_index = FindSubscriberIndex(ID, success);
 80184b6:	4632      	mov	r2, r6
 80184b8:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 80184bc:	f89d 7029 	ldrb.w	r7, [sp, #41]	@ 0x29
 80184c0:	f7ff ff48 	bl	8018354 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb>
	if (not *success)
 80184c4:	7833      	ldrb	r3, [r6, #0]
	uint8_t subscriber_index = FindSubscriberIndex(ID, success);
 80184c6:	4604      	mov	r4, r0
	if (not *success)
 80184c8:	b1eb      	cbz	r3, 8018506 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x5e>
		return 0;

	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 80184ca:	f04f 31ff 	mov.w	r1, #4294967295
 80184ce:	68a8      	ldr	r0, [r5, #8]
 80184d0:	f7f3 fe74 	bl	800c1bc <osSemaphoreAcquire>
	return *(this->_M_impl._M_start + __n);
 80184d4:	68ea      	ldr	r2, [r5, #12]
 80184d6:	b223      	sxth	r3, r4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80184d8:	4920      	ldr	r1, [pc, #128]	@ (801855c <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0xb4>)
	for (uint8_t index = 0; index < configurations[subscriber_index].remote_registers.size(); index++) {
		Register subscribed_register = configurations[subscriber_index].remote_registers[index];
		SubscriberInterface subscribed_interface = configurations[subscriber_index].interfaces[index];

		if (remote_register.address == subscribed_register.address) {
 80184da:	f8bd e000 	ldrh.w	lr, [sp]
		Register subscribed_register = configurations[subscriber_index].remote_registers[index];
 80184de:	f04f 0906 	mov.w	r9, #6
	return *(this->_M_impl._M_start + __n);
 80184e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80184e6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80184ea:	e9d2 4301 	ldrd	r4, r3, [r2, #4]
 80184ee:	1b1b      	subs	r3, r3, r4
 80184f0:	105b      	asrs	r3, r3, #1
 80184f2:	434b      	muls	r3, r1
	for (uint8_t index = 0; index < configurations[subscriber_index].remote_registers.size(); index++) {
 80184f4:	2100      	movs	r1, #0
 80184f6:	b2c8      	uxtb	r0, r1
 80184f8:	4298      	cmp	r0, r3
 80184fa:	d306      	bcc.n	801850a <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x62>
//					}
				}
			}
		}
	}
	osSemaphoreRelease(SubscribersSemaphore);
 80184fc:	68a8      	ldr	r0, [r5, #8]
 80184fe:	f7f3 fe91 	bl	800c224 <osSemaphoreRelease>
	*success = false;
 8018502:	2300      	movs	r3, #0
 8018504:	7033      	strb	r3, [r6, #0]
		return 0;
 8018506:	2400      	movs	r4, #0
 8018508:	e01d      	b.n	8018546 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x9e>
		Register subscribed_register = configurations[subscriber_index].remote_registers[index];
 801850a:	fb09 fc00 	mul.w	ip, r9, r0
		if (remote_register.address == subscribed_register.address) {
 801850e:	f834 c00c 	ldrh.w	ip, [r4, ip]
 8018512:	45f4      	cmp	ip, lr
 8018514:	d120      	bne.n	8018558 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0xb0>
	return *(this->_M_impl._M_start + __n);
 8018516:	f8d2 c010 	ldr.w	ip, [r2, #16]
 801851a:	eb0c 0a40 	add.w	sl, ip, r0, lsl #1
		SubscriberInterface subscribed_interface = configurations[subscriber_index].interfaces[index];
 801851e:	f81c c010 	ldrb.w	ip, [ip, r0, lsl #1]
			if (interface.interface == subscribed_interface.interface || subscribed_interface.interface == ALL_INTERFACES || interface.interface == ALL_INTERFACES) {
 8018522:	45c4      	cmp	ip, r8
 8018524:	d005      	beq.n	8018532 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x8a>
 8018526:	f1bc 0f07 	cmp.w	ip, #7
 801852a:	d002      	beq.n	8018532 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x8a>
 801852c:	f1b8 0f07 	cmp.w	r8, #7
 8018530:	d112      	bne.n	8018558 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0xb0>
		SubscriberInterface subscribed_interface = configurations[subscriber_index].interfaces[index];
 8018532:	f89a c001 	ldrb.w	ip, [sl, #1]
				if (interface.address == subscribed_interface.address || subscribed_interface.address == ALL || interface.address == ALL) {
 8018536:	4567      	cmp	r7, ip
 8018538:	d109      	bne.n	801854e <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0xa6>
 801853a:	4604      	mov	r4, r0
					osSemaphoreRelease(SubscribersSemaphore);
 801853c:	68a8      	ldr	r0, [r5, #8]
 801853e:	f7f3 fe71 	bl	800c224 <osSemaphoreRelease>
					*success = true;
 8018542:	2301      	movs	r3, #1
 8018544:	7033      	strb	r3, [r6, #0]
	return 0;

}
 8018546:	4620      	mov	r0, r4
 8018548:	b002      	add	sp, #8
 801854a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (interface.address == subscribed_interface.address || subscribed_interface.address == ALL || interface.address == ALL) {
 801854e:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8018552:	d0f2      	beq.n	801853a <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x92>
 8018554:	2fff      	cmp	r7, #255	@ 0xff
 8018556:	d0f0      	beq.n	801853a <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x92>
	for (uint8_t index = 0; index < configurations[subscriber_index].remote_registers.size(); index++) {
 8018558:	3101      	adds	r1, #1
 801855a:	e7cc      	b.n	80184f6 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x4e>
 801855c:	aaaaaaab 	.word	0xaaaaaaab

08018560 <_ZN17MasterSubscribers26SubscribedToRemoteRegisterEh8Register19SubscriberInterface>:
bool MasterSubscribers::SubscribedToRemoteRegister(uint8_t ID, Register remote_register, SubscriberInterface interface) {
 8018560:	b510      	push	{r4, lr}
 8018562:	b086      	sub	sp, #24
 8018564:	ac02      	add	r4, sp, #8
 8018566:	e884 000c 	stmia.w	r4, {r2, r3}
	FindRemoteRegisterIndex(ID, remote_register, interface, &success);
 801856a:	f10d 0317 	add.w	r3, sp, #23
 801856e:	9301      	str	r3, [sp, #4]
 8018570:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8018574:	f8ad 3000 	strh.w	r3, [sp]
 8018578:	e894 000c 	ldmia.w	r4, {r2, r3}
 801857c:	f7ff ff94 	bl	80184a8 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb>
}
 8018580:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8018584:	b006      	add	sp, #24
 8018586:	bd10      	pop	{r4, pc}

08018588 <_ZN17MasterSubscribers18FindRemoteRegisterE8Register19SubscriberInterfacePb>:
Register MasterSubscribers::FindRemoteRegister(Register remote_register, SubscriberInterface interface, bool* success) {
 8018588:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801858c:	460d      	mov	r5, r1
 801858e:	af02      	add	r7, sp, #8
 8018590:	4604      	mov	r4, r0
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 8018592:	f04f 31ff 	mov.w	r1, #4294967295
 8018596:	68a8      	ldr	r0, [r5, #8]
Register MasterSubscribers::FindRemoteRegister(Register remote_register, SubscriberInterface interface, bool* success) {
 8018598:	f8dd 9034 	ldr.w	r9, [sp, #52]	@ 0x34
 801859c:	e887 000c 	stmia.w	r7, {r2, r3}
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 80185a0:	f7f3 fe0c 	bl	800c1bc <osSemaphoreAcquire>
 80185a4:	e9d5 6a03 	ldrd	r6, sl, [r5, #12]
	for (SubscriberConfiguration &configuration : configurations) {
 80185a8:	4556      	cmp	r6, sl
 80185aa:	46b0      	mov	r8, r6
 80185ac:	d108      	bne.n	80185c0 <_ZN17MasterSubscribers18FindRemoteRegisterE8Register19SubscriberInterfacePb+0x38>
	osSemaphoreRelease(SubscribersSemaphore);
 80185ae:	68a8      	ldr	r0, [r5, #8]
 80185b0:	f7f3 fe38 	bl	800c224 <osSemaphoreRelease>
	*success = false;
 80185b4:	2300      	movs	r3, #0
 80185b6:	f889 3000 	strb.w	r3, [r9]
	return Register();
 80185ba:	6023      	str	r3, [r4, #0]
 80185bc:	80a3      	strh	r3, [r4, #4]
 80185be:	e022      	b.n	8018606 <_ZN17MasterSubscribers18FindRemoteRegisterE8Register19SubscriberInterfacePb+0x7e>
		index = FindRemoteRegisterIndex(configuration.ID, remote_register, interface, success);
 80185c0:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 80185c4:	4628      	mov	r0, r5
 80185c6:	f816 1b28 	ldrb.w	r1, [r6], #40
 80185ca:	f8cd 9004 	str.w	r9, [sp, #4]
 80185ce:	f8ad 3000 	strh.w	r3, [sp]
 80185d2:	e897 000c 	ldmia.w	r7, {r2, r3}
 80185d6:	f7ff ff67 	bl	80184a8 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb>
		if (*success) {
 80185da:	f899 2000 	ldrb.w	r2, [r9]
 80185de:	2a00      	cmp	r2, #0
 80185e0:	d0e2      	beq.n	80185a8 <_ZN17MasterSubscribers18FindRemoteRegisterE8Register19SubscriberInterfacePb+0x20>
 80185e2:	b203      	sxth	r3, r0
 80185e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
			osSemaphoreRelease(SubscribersSemaphore);
 80185e8:	68a8      	ldr	r0, [r5, #8]
 80185ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80185ee:	eb01 0243 	add.w	r2, r1, r3, lsl #1
			Register found_register = configuration.remote_registers[index];
 80185f2:	f831 8013 	ldrh.w	r8, [r1, r3, lsl #1]
 80185f6:	8896      	ldrh	r6, [r2, #4]
 80185f8:	8857      	ldrh	r7, [r2, #2]
			osSemaphoreRelease(SubscribersSemaphore);
 80185fa:	f7f3 fe13 	bl	800c224 <osSemaphoreRelease>
			return found_register;
 80185fe:	f8a4 8000 	strh.w	r8, [r4]
 8018602:	8067      	strh	r7, [r4, #2]
 8018604:	80a6      	strh	r6, [r4, #4]
}
 8018606:	4620      	mov	r0, r4
 8018608:	b004      	add	sp, #16
 801860a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08018610 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8018610:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8018614:	e9d0 8900 	ldrd	r8, r9, [r0]
	if (max_size() - size() < __n)
 8018618:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801861c:	4607      	mov	r7, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801861e:	eba9 0408 	sub.w	r4, r9, r8
 8018622:	468a      	mov	sl, r1
 8018624:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 8018626:	429c      	cmp	r4, r3
 8018628:	d102      	bne.n	8018630 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x20>
	  __throw_length_error(__N(__s));
 801862a:	481e      	ldr	r0, [pc, #120]	@ (80186a4 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x94>)
 801862c:	f001 f9aa 	bl	8019984 <_ZSt20__throw_length_errorPKc>
 8018630:	2c01      	cmp	r4, #1
 8018632:	4622      	mov	r2, r4
    { return __lhs.base() - __rhs.base(); }
 8018634:	eba1 0508 	sub.w	r5, r1, r8
 8018638:	bf38      	it	cc
 801863a:	2201      	movcc	r2, #1
 801863c:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801863e:	d22d      	bcs.n	801869c <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x8c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8018640:	b374      	cbz	r4, 80186a0 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x90>
 8018642:	429c      	cmp	r4, r3
 8018644:	bf28      	it	cs
 8018646:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8018648:	4620      	mov	r0, r4
 801864a:	f001 f8e6 	bl	801981a <_Znwj>
 801864e:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8018650:	f89b 3000 	ldrb.w	r3, [fp]
      if (__count > 0)
 8018654:	2d00      	cmp	r5, #0
 8018656:	5573      	strb	r3, [r6, r5]
 8018658:	dd04      	ble.n	8018664 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x54>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801865a:	462a      	mov	r2, r5
 801865c:	4641      	mov	r1, r8
 801865e:	4630      	mov	r0, r6
 8018660:	f001 fa68 	bl	8019b34 <memmove>
      ptrdiff_t __count = __last - __first;
 8018664:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
 8018668:	3501      	adds	r5, #1
      if (__count > 0)
 801866a:	f1b9 0f00 	cmp.w	r9, #0
 801866e:	4435      	add	r5, r6
 8018670:	dd04      	ble.n	801867c <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x6c>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8018672:	464a      	mov	r2, r9
 8018674:	4651      	mov	r1, sl
 8018676:	4628      	mov	r0, r5
 8018678:	f001 fb54 	bl	8019d24 <memcpy>
      return __result + __count;
 801867c:	444d      	add	r5, r9
	if (__p)
 801867e:	f1b8 0f00 	cmp.w	r8, #0
 8018682:	d005      	beq.n	8018690 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x80>
		    this->_M_impl._M_end_of_storage - __old_start);
 8018684:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8018686:	4640      	mov	r0, r8
 8018688:	eba1 0108 	sub.w	r1, r1, r8
 801868c:	f001 f8a0 	bl	80197d0 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8018690:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8018694:	4426      	add	r6, r4
 8018696:	60be      	str	r6, [r7, #8]
    }
 8018698:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801869c:	461c      	mov	r4, r3
 801869e:	e7d3      	b.n	8018648 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x38>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80186a0:	4626      	mov	r6, r4
 80186a2:	e7d5      	b.n	8018650 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x40>
 80186a4:	08019e3e 	.word	0x08019e3e

080186a8 <_ZN17MasterSubscribers9AddFilterEhh>:
bool MasterSubscribers::AddFilter(uint8_t ID, uint8_t address) {
 80186a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80186aa:	f88d 2007 	strb.w	r2, [sp, #7]
	uint8_t index = FindSubscriberIndex(ID, &success);
 80186ae:	f10d 020f 	add.w	r2, sp, #15
bool MasterSubscribers::AddFilter(uint8_t ID, uint8_t address) {
 80186b2:	4604      	mov	r4, r0
	uint8_t index = FindSubscriberIndex(ID, &success);
 80186b4:	f7ff fe4e 	bl	8018354 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb>
	if (!success) return false;
 80186b8:	f89d 500f 	ldrb.w	r5, [sp, #15]
	uint8_t index = FindSubscriberIndex(ID, &success);
 80186bc:	4601      	mov	r1, r0
	if (!success) return false;
 80186be:	b91d      	cbnz	r5, 80186c8 <_ZN17MasterSubscribers9AddFilterEhh+0x20>
 80186c0:	2500      	movs	r5, #0
}
 80186c2:	4628      	mov	r0, r5
 80186c4:	b004      	add	sp, #16
 80186c6:	bd70      	pop	{r4, r5, r6, pc}
	return *(this->_M_impl._M_start + __n);
 80186c8:	b203      	sxth	r3, r0
 80186ca:	68e2      	ldr	r2, [r4, #12]
 80186cc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80186d0:	00de      	lsls	r6, r3, #3
 80186d2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	if (configurations[index].filters.size() > 0 && AddressAccepted(index, address)) // if address already filtered, return
 80186d6:	e9d3 2307 	ldrd	r2, r3, [r3, #28]
 80186da:	429a      	cmp	r2, r3
 80186dc:	d110      	bne.n	8018700 <_ZN17MasterSubscribers9AddFilterEhh+0x58>
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 80186de:	f04f 31ff 	mov.w	r1, #4294967295
 80186e2:	68a0      	ldr	r0, [r4, #8]
 80186e4:	f7f3 fd6a 	bl	800c1bc <osSemaphoreAcquire>
 80186e8:	68e0      	ldr	r0, [r4, #12]
 80186ea:	4430      	add	r0, r6
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80186ec:	e9d0 1308 	ldrd	r1, r3, [r0, #32]
 80186f0:	4299      	cmp	r1, r3
 80186f2:	d10d      	bne.n	8018710 <_ZN17MasterSubscribers9AddFilterEhh+0x68>
	  _M_realloc_insert(end(), __x);
 80186f4:	f10d 0207 	add.w	r2, sp, #7
 80186f8:	301c      	adds	r0, #28
 80186fa:	f7ff ff89 	bl	8018610 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>
 80186fe:	e00d      	b.n	801871c <_ZN17MasterSubscribers9AddFilterEhh+0x74>
	if (configurations[index].filters.size() > 0 && AddressAccepted(index, address)) // if address already filtered, return
 8018700:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8018704:	4620      	mov	r0, r4
 8018706:	f7ff fe7d 	bl	8018404 <_ZN17MasterSubscribers15AddressAcceptedEhh>
 801870a:	2800      	cmp	r0, #0
 801870c:	d0e7      	beq.n	80186de <_ZN17MasterSubscribers9AddFilterEhh+0x36>
 801870e:	e7d7      	b.n	80186c0 <_ZN17MasterSubscribers9AddFilterEhh+0x18>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8018710:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8018714:	700b      	strb	r3, [r1, #0]
	    ++this->_M_impl._M_finish;
 8018716:	6a03      	ldr	r3, [r0, #32]
 8018718:	3301      	adds	r3, #1
 801871a:	6203      	str	r3, [r0, #32]
	osSemaphoreRelease(SubscribersSemaphore);
 801871c:	68a0      	ldr	r0, [r4, #8]
 801871e:	f7f3 fd81 	bl	800c224 <osSemaphoreRelease>
	return true;
 8018722:	e7ce      	b.n	80186c2 <_ZN17MasterSubscribers9AddFilterEhh+0x1a>

08018724 <_ZZN17MasterSubscribers12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 8018724:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8018726:	4611      	mov	r1, r2
 8018728:	b508      	push	{r3, lr}
			if (length != 2) return false;
 801872a:	d105      	bne.n	8018738 <_ZZN17MasterSubscribers12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t+0x14>
			self->AddFilter(input[0], input[1]);
 801872c:	7852      	ldrb	r2, [r2, #1]
 801872e:	7809      	ldrb	r1, [r1, #0]
 8018730:	f7ff ffba 	bl	80186a8 <_ZN17MasterSubscribers9AddFilterEhh>
 8018734:	2001      	movs	r0, #1
		}
 8018736:	bd08      	pop	{r3, pc}
			if (length != 2) return false;
 8018738:	2000      	movs	r0, #0
 801873a:	e7fc      	b.n	8018736 <_ZZN17MasterSubscribers12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t+0x12>

0801873c <_ZN9Registers11AddRegisterIhEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 801873c:	b570      	push	{r4, r5, r6, lr}
 801873e:	4604      	mov	r4, r0
 8018740:	b086      	sub	sp, #24
 8018742:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8018744:	6800      	ldr	r0, [r0, #0]
 8018746:	f04f 31ff 	mov.w	r1, #4294967295
 801874a:	f7f3 fd37 	bl	800c1bc <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 801874e:	f10d 0207 	add.w	r2, sp, #7
 8018752:	4631      	mov	r1, r6
 8018754:	4620      	mov	r0, r4
 8018756:	f7fe fcbc 	bl	80170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 801875a:	f89d 5007 	ldrb.w	r5, [sp, #7]
 801875e:	b125      	cbz	r5, 801876a <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 8018760:	6820      	ldr	r0, [r4, #0]
 8018762:	f7f3 fd5f 	bl	800c224 <osSemaphoreRelease>
}
 8018766:	b006      	add	sp, #24
 8018768:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 801876a:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 801876e:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8018772:	f7ff fd77 	bl	8018264 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	configuration_.register_info = register_;
 8018776:	2301      	movs	r3, #1
 8018778:	f8ad 600a 	strh.w	r6, [sp, #10]
 801877c:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 8018780:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 8018784:	f88d 000c 	strb.w	r0, [sp, #12]
 8018788:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 801878c:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 8018790:	2b00      	cmp	r3, #0
 8018792:	d0e5      	beq.n	8018760 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
      push_back(const value_type& __x)
 8018794:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8018796:	e9d4 5302 	ldrd	r5, r3, [r4, #8]
 801879a:	429d      	cmp	r5, r3
 801879c:	d005      	beq.n	80187aa <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x6e>
 801879e:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 80187a0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 80187a4:	3510      	adds	r5, #16
 80187a6:	60a5      	str	r5, [r4, #8]
 80187a8:	e7da      	b.n	8018760 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
	  _M_realloc_insert(end(), __x);
 80187aa:	4629      	mov	r1, r5
 80187ac:	1d20      	adds	r0, r4, #4
 80187ae:	f7f6 fb13 	bl	800edd8 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 80187b2:	e7d5      	b.n	8018760 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>

080187b4 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 80187b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80187b8:	460c      	mov	r4, r1
 80187ba:	b087      	sub	sp, #28
 80187bc:	4606      	mov	r6, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80187be:	f04f 31ff 	mov.w	r1, #4294967295
 80187c2:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 80187c4:	4698      	mov	r8, r3
 80187c6:	4691      	mov	r9, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80187c8:	f7f3 fcf8 	bl	800c1bc <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80187cc:	4621      	mov	r1, r4
 80187ce:	f10d 0207 	add.w	r2, sp, #7
 80187d2:	4630      	mov	r0, r6
 80187d4:	f7fe fc7d 	bl	80170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80187d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80187dc:	4604      	mov	r4, r0
	if (!success) {
 80187de:	b92b      	cbnz	r3, 80187ec <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x38>
	osSemaphoreRelease(RegistersSemaphore);
 80187e0:	6830      	ldr	r0, [r6, #0]
 80187e2:	f7f3 fd1f 	bl	800c224 <osSemaphoreRelease>
}
 80187e6:	b007      	add	sp, #28
 80187e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 80187ec:	f10d 0007 	add.w	r0, sp, #7
 80187f0:	f7ff fd38 	bl	8018264 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 80187f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	d0f1      	beq.n	80187e0 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (target_register->register_info.type != registered_type) {
 80187fc:	7923      	ldrb	r3, [r4, #4]
 80187fe:	4298      	cmp	r0, r3
 8018800:	d1ee      	bne.n	80187e0 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (callbacks[target_register->register_info.type] == NULL) {
 8018802:	3004      	adds	r0, #4
 8018804:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
 8018808:	2f00      	cmp	r7, #0
 801880a:	d0e9      	beq.n	80187e0 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 801880c:	7821      	ldrb	r1, [r4, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801880e:	e9d7 3500 	ldrd	r3, r5, [r7]
 8018812:	1aea      	subs	r2, r5, r3
 8018814:	1112      	asrs	r2, r2, #4
 8018816:	b9b1      	cbnz	r1, 8018846 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x92>
 8018818:	7861      	ldrb	r1, [r4, #1]
 801881a:	b9a1      	cbnz	r1, 8018846 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x92>
		callback.read = NULL;
 801881c:	9105      	str	r1, [sp, #20]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801881e:	68b9      	ldr	r1, [r7, #8]
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8018820:	8162      	strh	r2, [r4, #10]
      push_back(const value_type& __x)
 8018822:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8018824:	42a9      	cmp	r1, r5
		callback.write = write;
 8018826:	e9cd 9803 	strd	r9, r8, [sp, #12]
 801882a:	d008      	beq.n	801883e <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x8a>
 801882c:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 801882e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8018832:	3510      	adds	r5, #16
 8018834:	607d      	str	r5, [r7, #4]
	target_register->mode.callbacks = true;
 8018836:	2301      	movs	r3, #1
 8018838:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 801883a:	7223      	strb	r3, [r4, #8]
 801883c:	e7d0      	b.n	80187e0 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	  _M_realloc_insert(end(), __x);
 801883e:	4638      	mov	r0, r7
 8018840:	f7f6 fb66 	bl	800ef10 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	} else {
 8018844:	e7f7      	b.n	8018836 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x82>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8018846:	8961      	ldrh	r1, [r4, #10]
	if (__n >= this->size())
 8018848:	4291      	cmp	r1, r2
 801884a:	d302      	bcc.n	8018852 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x9e>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 801884c:	4803      	ldr	r0, [pc, #12]	@ (801885c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0xa8>)
 801884e:	f001 f89c 	bl	801998a <_ZSt24__throw_out_of_range_fmtPKcz>
	return *(this->_M_impl._M_start + __n);
 8018852:	eb03 1301 	add.w	r3, r3, r1, lsl #4
		callback->write = write;
 8018856:	e9c3 9801 	strd	r9, r8, [r3, #4]
 801885a:	e7ec      	b.n	8018836 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x82>
 801885c:	0801a080 	.word	0x0801a080

08018860 <_ZN17MasterSubscribers12AddRegistersEv>:
void MasterSubscribers::AddRegisters(void) {
 8018860:	b510      	push	{r4, lr}
 8018862:	4604      	mov	r4, r0
	registers->AddRegister<uint8_t>(REG_SUB_SET_STATUS);
 8018864:	2120      	movs	r1, #32
 8018866:	6800      	ldr	r0, [r0, #0]
 8018868:	f7ff ff68 	bl	801873c <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_SUB_SET_STATUS, 2);
 801886c:	2202      	movs	r2, #2
 801886e:	2120      	movs	r1, #32
 8018870:	6820      	ldr	r0, [r4, #0]
 8018872:	f7fe fc83 	bl	801717c <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_SUB_SET_STATUS, (void*) this,
 8018876:	4b12      	ldr	r3, [pc, #72]	@ (80188c0 <_ZN17MasterSubscribers12AddRegistersEv+0x60>)
 8018878:	4622      	mov	r2, r4
 801887a:	6820      	ldr	r0, [r4, #0]
 801887c:	2120      	movs	r1, #32
 801887e:	f7ff ff99 	bl	80187b4 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_SUB_ADD_FILTER);
 8018882:	6820      	ldr	r0, [r4, #0]
 8018884:	2121      	movs	r1, #33	@ 0x21
 8018886:	f7ff ff59 	bl	801873c <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_SUB_ADD_FILTER, 2);
 801888a:	2202      	movs	r2, #2
 801888c:	2121      	movs	r1, #33	@ 0x21
 801888e:	6820      	ldr	r0, [r4, #0]
 8018890:	f7fe fc74 	bl	801717c <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_SUB_ADD_FILTER, (void*) this,
 8018894:	4622      	mov	r2, r4
 8018896:	4b0b      	ldr	r3, [pc, #44]	@ (80188c4 <_ZN17MasterSubscribers12AddRegistersEv+0x64>)
 8018898:	2121      	movs	r1, #33	@ 0x21
 801889a:	6820      	ldr	r0, [r4, #0]
 801889c:	f7ff ff8a 	bl	80187b4 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_SUB_CLEAR_FILTERS);
 80188a0:	6820      	ldr	r0, [r4, #0]
 80188a2:	2122      	movs	r1, #34	@ 0x22
 80188a4:	f7ff ff4a 	bl	801873c <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_SUB_CLEAR_FILTERS);
 80188a8:	2122      	movs	r1, #34	@ 0x22
 80188aa:	6820      	ldr	r0, [r4, #0]
 80188ac:	f7fe fc4a 	bl	8017144 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_SUB_CLEAR_FILTERS, (void*) this,
 80188b0:	4622      	mov	r2, r4
 80188b2:	6820      	ldr	r0, [r4, #0]
 80188b4:	2122      	movs	r1, #34	@ 0x22
 80188b6:	4b04      	ldr	r3, [pc, #16]	@ (80188c8 <_ZN17MasterSubscribers12AddRegistersEv+0x68>)
}
 80188b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	registers->AddWriteCallback<uint8_t>(REG_SUB_CLEAR_FILTERS, (void*) this,
 80188bc:	f7ff bf7a 	b.w	80187b4 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
 80188c0:	080183e7 	.word	0x080183e7
 80188c4:	08018725 	.word	0x08018725
 80188c8:	0801849b 	.word	0x0801849b

080188cc <_ZN3CPG5resetEv>:
}

void CPG::reset(void) {
    //reset the oscillators states
    for(uint8_t i=0;i<MAX_OSCILLATORS;i++) {
        osc_r[i] = 0;
 80188cc:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80188d0:	2100      	movs	r1, #0
 80188d2:	f001 b949 	b.w	8019b68 <memset>

080188d6 <_ZN3CPG13set_frequencyEf>:
    update_matrices();
    reset();
}

void CPG::set_frequency(float frequency) {
    param_frequency = frequency;
 80188d6:	f500 5000 	add.w	r0, r0, #8192	@ 0x2000
 80188da:	ed80 0a98 	vstr	s0, [r0, #608]	@ 0x260
}
 80188de:	4770      	bx	lr

080188e0 <_ZN3CPG13set_directionEf>:

void CPG::set_direction(float direction) {
    param_direction = direction;
 80188e0:	f500 5000 	add.w	r0, r0, #8192	@ 0x2000
 80188e4:	ed80 0a99 	vstr	s0, [r0, #612]	@ 0x264
}
 80188e8:	4770      	bx	lr

080188ea <_ZN3CPG9set_amplcEf>:

void CPG::set_amplc(float amplc) {
    param_amplc = amplc;
 80188ea:	f500 5000 	add.w	r0, r0, #8192	@ 0x2000
 80188ee:	ed80 0a9a 	vstr	s0, [r0, #616]	@ 0x268
}
 80188f2:	4770      	bx	lr

080188f4 <_ZN3CPG9set_amplhEf>:

void CPG::set_amplh(float amplh) {
    param_amplh = amplh;
 80188f4:	f500 5000 	add.w	r0, r0, #8192	@ 0x2000
 80188f8:	ed80 0a9b 	vstr	s0, [r0, #620]	@ 0x26c
}
 80188fc:	4770      	bx	lr

080188fe <_ZN3CPG21set_coupling_strengthEf>:
    param_nwave = nwave;
    update_matrices();
}

void CPG::set_coupling_strength(float coupling_strength) {
    param_coupling_strength = coupling_strength;
 80188fe:	f500 5000 	add.w	r0, r0, #8192	@ 0x2000
 8018902:	ed80 0a9d 	vstr	s0, [r0, #628]	@ 0x274
}
 8018906:	4770      	bx	lr

08018908 <_ZN3CPG7set_a_rEf>:

void CPG::set_a_r(float a_r) {
    param_a_r = a_r;
 8018908:	f500 5000 	add.w	r0, r0, #8192	@ 0x2000
 801890c:	ed80 0a9e 	vstr	s0, [r0, #632]	@ 0x278
}
 8018910:	4770      	bx	lr
 8018912:	0000      	movs	r0, r0
 8018914:	0000      	movs	r0, r0
	...

08018918 <_ZN3CPG15update_matricesEv>:

//function to update the phi matrix called when the value of param_nwave or number_modules changes
void CPG::update_matrices(void) {
    //determines the phase shifts between modules to have the desired phase shift between head and end of tail
    float dphi = (param_nwave*2.0*M_PI)/(number_modules);
 8018918:	f500 5300 	add.w	r3, r0, #8192	@ 0x2000
    //fill the coupling matrix and the phase shift matrix
    for(uint8_t i=0;i<number_oscillators;i++) {
 801891c:	2200      	movs	r2, #0
    float dphi = (param_nwave*2.0*M_PI)/(number_modules);
 801891e:	ed93 7a9c 	vldr	s14, [r3, #624]	@ 0x270
 8018922:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8018926:	ed9f 6b2a 	vldr	d6, [pc, #168]	@ 80189d0 <_ZN3CPG15update_matricesEv+0xb8>
 801892a:	ee37 7b07 	vadd.f64	d7, d7, d7
void CPG::update_matrices(void) {
 801892e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    float dphi = (param_nwave*2.0*M_PI)/(number_modules);
 8018932:	f893 127c 	ldrb.w	r1, [r3, #636]	@ 0x27c
 8018936:	ee27 7b06 	vmul.f64	d7, d7, d6
 801893a:	f200 351f 	addw	r5, r0, #799	@ 0x31f
    for(uint8_t i=0;i<number_oscillators;i++) {
 801893e:	f893 627d 	ldrb.w	r6, [r3, #637]	@ 0x27d
    float dphi = (param_nwave*2.0*M_PI)/(number_modules);
 8018942:	ee06 1a90 	vmov	s13, r1
 8018946:	f500 6016 	add.w	r0, r0, #2400	@ 0x960
 801894a:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 801894e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8018952:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80189d8 <_ZN3CPG15update_matricesEv+0xc0>
 8018956:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
            else if((j==(number_modules+i))) {
                osc_w[i][j] = 1;
                osc_phi[i][j] = M_PI;
            }
            //if both oscillators are on the same joint
            else if((j==(i-number_modules))) {
 801895a:	eddf 6a20 	vldr	s13, [pc, #128]	@ 80189dc <_ZN3CPG15update_matricesEv+0xc4>
                osc_phi[i][j] = -dphi;
 801895e:	eef1 5a46 	vneg.f32	s11, s12
    for(uint8_t i=0;i<number_oscillators;i++) {
 8018962:	b2d3      	uxtb	r3, r2
 8018964:	429e      	cmp	r6, r3
 8018966:	d801      	bhi.n	801896c <_ZN3CPG15update_matricesEv+0x54>
                osc_w[i][j] = 0;
                osc_phi[i][j] = 0;
            }
        }
    }
 8018968:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801896c:	1c57      	adds	r7, r2, #1
            else if((j==(i-1)) && (j!=number_modules)) {
 801896e:	f102 38ff 	add.w	r8, r2, #4294967295
            else if((j==(number_modules+i))) {
 8018972:	eb02 0901 	add.w	r9, r2, r1
 8018976:	4684      	mov	ip, r0
 8018978:	46ae      	mov	lr, r5
 801897a:	2300      	movs	r3, #0
            else if((j==(i-number_modules))) {
 801897c:	1a52      	subs	r2, r2, r1
            if ((j==(i+1)) && (j!=number_modules)) {
 801897e:	42bb      	cmp	r3, r7
 8018980:	d106      	bne.n	8018990 <_ZN3CPG15update_matricesEv+0x78>
 8018982:	b2dc      	uxtb	r4, r3
 8018984:	42a1      	cmp	r1, r4
 8018986:	d003      	beq.n	8018990 <_ZN3CPG15update_matricesEv+0x78>
                osc_phi[i][j] = -dphi;
 8018988:	eef0 7a65 	vmov.f32	s15, s11
 801898c:	2401      	movs	r4, #1
 801898e:	e00c      	b.n	80189aa <_ZN3CPG15update_matricesEv+0x92>
            else if((j==(i-1)) && (j!=number_modules)) {
 8018990:	4543      	cmp	r3, r8
 8018992:	d102      	bne.n	801899a <_ZN3CPG15update_matricesEv+0x82>
 8018994:	b2dc      	uxtb	r4, r3
 8018996:	42a1      	cmp	r1, r4
 8018998:	d113      	bne.n	80189c2 <_ZN3CPG15update_matricesEv+0xaa>
            else if((j==(number_modules+i))) {
 801899a:	454b      	cmp	r3, r9
 801899c:	d014      	beq.n	80189c8 <_ZN3CPG15update_matricesEv+0xb0>
            else if((j==(i-number_modules))) {
 801899e:	4293      	cmp	r3, r2
 80189a0:	bf14      	ite	ne
 80189a2:	2400      	movne	r4, #0
 80189a4:	2401      	moveq	r4, #1
 80189a6:	fe47 7a26 	vseleq.f32	s15, s14, s13
        for(uint8_t j=0;j<number_oscillators;j++) {
 80189aa:	3301      	adds	r3, #1
                osc_w[i][j] = 1;
 80189ac:	f80e 4f01 	strb.w	r4, [lr, #1]!
                osc_phi[i][j] = -dphi;
 80189b0:	ecec 7a01 	vstmia	ip!, {s15}
        for(uint8_t j=0;j<number_oscillators;j++) {
 80189b4:	b2dc      	uxtb	r4, r3
 80189b6:	42a6      	cmp	r6, r4
 80189b8:	d8e1      	bhi.n	801897e <_ZN3CPG15update_matricesEv+0x66>
    for(uint8_t i=0;i<number_oscillators;i++) {
 80189ba:	3528      	adds	r5, #40	@ 0x28
 80189bc:	30a0      	adds	r0, #160	@ 0xa0
        for(uint8_t j=0;j<number_oscillators;j++) {
 80189be:	463a      	mov	r2, r7
 80189c0:	e7cf      	b.n	8018962 <_ZN3CPG15update_matricesEv+0x4a>
 80189c2:	eef0 7a46 	vmov.f32	s15, s12
 80189c6:	e7e1      	b.n	801898c <_ZN3CPG15update_matricesEv+0x74>
 80189c8:	eef0 7a47 	vmov.f32	s15, s14
 80189cc:	2401      	movs	r4, #1
 80189ce:	e7ec      	b.n	80189aa <_ZN3CPG15update_matricesEv+0x92>
 80189d0:	54442d18 	.word	0x54442d18
 80189d4:	400921fb 	.word	0x400921fb
 80189d8:	40490fdb 	.word	0x40490fdb
 80189dc:	00000000 	.word	0x00000000

080189e0 <_ZN3CPG4initEhfffffff>:
    number_modules = nb_modules;
 80189e0:	f500 5300 	add.w	r3, r0, #8192	@ 0x2000
    float a_r) {
 80189e4:	b510      	push	{r4, lr}
    number_modules = nb_modules;
 80189e6:	f883 127c 	strb.w	r1, [r3, #636]	@ 0x27c
    number_oscillators = number_modules*2;
 80189ea:	0049      	lsls	r1, r1, #1
    float a_r) {
 80189ec:	4604      	mov	r4, r0
    param_frequency = frequency;
 80189ee:	ed83 0a98 	vstr	s0, [r3, #608]	@ 0x260
    number_oscillators = number_modules*2;
 80189f2:	f883 127d 	strb.w	r1, [r3, #637]	@ 0x27d
    param_direction = direction;
 80189f6:	edc3 0a99 	vstr	s1, [r3, #612]	@ 0x264
    param_amplc = amplc;
 80189fa:	ed83 1a9a 	vstr	s2, [r3, #616]	@ 0x268
    param_amplh = amplh;
 80189fe:	edc3 1a9b 	vstr	s3, [r3, #620]	@ 0x26c
    param_nwave = nwave;
 8018a02:	ed83 2a9c 	vstr	s4, [r3, #624]	@ 0x270
    param_coupling_strength = coupling_strength;
 8018a06:	edc3 2a9d 	vstr	s5, [r3, #628]	@ 0x274
    param_a_r = a_r;
 8018a0a:	ed83 3a9e 	vstr	s6, [r3, #632]	@ 0x278
    update_matrices();
 8018a0e:	f7ff ff83 	bl	8018918 <_ZN3CPG15update_matricesEv>
    reset();
 8018a12:	4620      	mov	r0, r4
}
 8018a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    reset();
 8018a18:	f7ff bf58 	b.w	80188cc <_ZN3CPG5resetEv>

08018a1c <_ZN3CPG9set_nwaveEf>:
    param_nwave = nwave;
 8018a1c:	f500 5300 	add.w	r3, r0, #8192	@ 0x2000
 8018a20:	ed83 0a9c 	vstr	s0, [r3, #624]	@ 0x270
    update_matrices();
 8018a24:	f7ff bf78 	b.w	8018918 <_ZN3CPG15update_matricesEv>

08018a28 <_ZZL8UserTaskPvENUlS_tPatE_4_FUNES_tS0_t>:
	registers->SetRegisterAsSingle(REG_CPG_RESET);
	registers->AddRegisterPointer<int8_t>(REG_CPG_RESET, &reg_cpg_reset);
	registers->SetRegisterPermissions(REG_CPG_RESET, WRITE_PERMISSION);
	registers->AddWriteCallback<int8_t>(REG_CPG_RESET, argument,
		[](void* context , uint16_t register_ID , int8_t* input , uint16_t length) -> bool {
		cpg.reset();
 8018a28:	4802      	ldr	r0, [pc, #8]	@ (8018a34 <_ZZL8UserTaskPvENUlS_tPatE_4_FUNES_tS0_t+0xc>)
		[](void* context , uint16_t register_ID , int8_t* input , uint16_t length) -> bool {
 8018a2a:	b508      	push	{r3, lr}
		cpg.reset();
 8018a2c:	f7ff ff4e 	bl	80188cc <_ZN3CPG5resetEv>
		return true;
	});
 8018a30:	2001      	movs	r0, #1
 8018a32:	bd08      	pop	{r3, pc}
 8018a34:	240071b0 	.word	0x240071b0

08018a38 <_ZZL8UserTaskPvENUlS_tPftE0_4_FUNES_tS0_t>:
	registers->SetRegisterAsSingle(REG_CPG_FREQUENCY);
	registers->AddRegisterPointer<float>(REG_CPG_FREQUENCY, &reg_cpg_frequency);
	registers->SetRegisterPermissions(REG_CPG_FREQUENCY, WRITE_PERMISSION);
	registers->AddWriteCallback<float>(REG_CPG_FREQUENCY, argument,
		[](void* context , uint16_t register_ID , float* input , uint16_t length) -> bool {
		cpg.set_frequency(*input);
 8018a38:	ed92 0a00 	vldr	s0, [r2]
 8018a3c:	4802      	ldr	r0, [pc, #8]	@ (8018a48 <_ZZL8UserTaskPvENUlS_tPftE0_4_FUNES_tS0_t+0x10>)
		[](void* context , uint16_t register_ID , float* input , uint16_t length) -> bool {
 8018a3e:	b508      	push	{r3, lr}
		cpg.set_frequency(*input);
 8018a40:	f7ff ff49 	bl	80188d6 <_ZN3CPG13set_frequencyEf>
		return true;
	});
 8018a44:	2001      	movs	r0, #1
 8018a46:	bd08      	pop	{r3, pc}
 8018a48:	240071b0 	.word	0x240071b0

08018a4c <_ZZL8UserTaskPvENUlS_tPftE1_4_FUNES_tS0_t>:
	registers->SetRegisterAsSingle(REG_CPG_DIRECTION);
	registers->AddRegisterPointer<float>(REG_CPG_DIRECTION, &reg_cpg_direction);
	registers->SetRegisterPermissions(REG_CPG_DIRECTION, WRITE_PERMISSION);
	registers->AddWriteCallback<float>(REG_CPG_DIRECTION, argument,
		[](void* context , uint16_t register_ID , float* input , uint16_t length) -> bool {
		cpg.set_direction(*input);
 8018a4c:	ed92 0a00 	vldr	s0, [r2]
 8018a50:	4802      	ldr	r0, [pc, #8]	@ (8018a5c <_ZZL8UserTaskPvENUlS_tPftE1_4_FUNES_tS0_t+0x10>)
		[](void* context , uint16_t register_ID , float* input , uint16_t length) -> bool {
 8018a52:	b508      	push	{r3, lr}
		cpg.set_direction(*input);
 8018a54:	f7ff ff44 	bl	80188e0 <_ZN3CPG13set_directionEf>
		return true;
	});
 8018a58:	2001      	movs	r0, #1
 8018a5a:	bd08      	pop	{r3, pc}
 8018a5c:	240071b0 	.word	0x240071b0

08018a60 <_ZZL8UserTaskPvENUlS_tPftE2_4_FUNES_tS0_t>:
	registers->SetRegisterAsSingle(REG_CPG_AMPLC);
	registers->AddRegisterPointer<float>(REG_CPG_AMPLC, &reg_cpg_amplc);
	registers->SetRegisterPermissions(REG_CPG_AMPLC, WRITE_PERMISSION);
	registers->AddWriteCallback<float>(REG_CPG_AMPLC, argument,
		[](void* context , uint16_t register_ID , float* input , uint16_t length) -> bool {
		cpg.set_amplc(*input);
 8018a60:	ed92 0a00 	vldr	s0, [r2]
 8018a64:	4802      	ldr	r0, [pc, #8]	@ (8018a70 <_ZZL8UserTaskPvENUlS_tPftE2_4_FUNES_tS0_t+0x10>)
		[](void* context , uint16_t register_ID , float* input , uint16_t length) -> bool {
 8018a66:	b508      	push	{r3, lr}
		cpg.set_amplc(*input);
 8018a68:	f7ff ff3f 	bl	80188ea <_ZN3CPG9set_amplcEf>
		return true;
	});
 8018a6c:	2001      	movs	r0, #1
 8018a6e:	bd08      	pop	{r3, pc}
 8018a70:	240071b0 	.word	0x240071b0

08018a74 <_ZZL8UserTaskPvENUlS_tPftE3_4_FUNES_tS0_t>:
	registers->SetRegisterAsSingle(REG_CPG_AMPLH);
	registers->AddRegisterPointer<float>(REG_CPG_AMPLH, &reg_cpg_amplh);
	registers->SetRegisterPermissions(REG_CPG_AMPLH, WRITE_PERMISSION);
	registers->AddWriteCallback<float>(REG_CPG_AMPLH, argument,
		[](void* context , uint16_t register_ID , float* input , uint16_t length) -> bool {
		cpg.set_amplh(*input);
 8018a74:	ed92 0a00 	vldr	s0, [r2]
 8018a78:	4802      	ldr	r0, [pc, #8]	@ (8018a84 <_ZZL8UserTaskPvENUlS_tPftE3_4_FUNES_tS0_t+0x10>)
		[](void* context , uint16_t register_ID , float* input , uint16_t length) -> bool {
 8018a7a:	b508      	push	{r3, lr}
		cpg.set_amplh(*input);
 8018a7c:	f7ff ff3a 	bl	80188f4 <_ZN3CPG9set_amplhEf>
		return true;
	});
 8018a80:	2001      	movs	r0, #1
 8018a82:	bd08      	pop	{r3, pc}
 8018a84:	240071b0 	.word	0x240071b0

08018a88 <_ZZL8UserTaskPvENUlS_tPftE4_4_FUNES_tS0_t>:
	registers->SetRegisterAsSingle(REG_CPG_NWAVE);
	registers->AddRegisterPointer<float>(REG_CPG_NWAVE, &reg_cpg_nwave);
	registers->SetRegisterPermissions(REG_CPG_NWAVE, WRITE_PERMISSION);
	registers->AddWriteCallback<float>(REG_CPG_NWAVE, argument,
		[](void* context , uint16_t register_ID , float* input , uint16_t length) -> bool {
		cpg.set_nwave(*input);
 8018a88:	ed92 0a00 	vldr	s0, [r2]
 8018a8c:	4802      	ldr	r0, [pc, #8]	@ (8018a98 <_ZZL8UserTaskPvENUlS_tPftE4_4_FUNES_tS0_t+0x10>)
		[](void* context , uint16_t register_ID , float* input , uint16_t length) -> bool {
 8018a8e:	b508      	push	{r3, lr}
		cpg.set_nwave(*input);
 8018a90:	f7ff ffc4 	bl	8018a1c <_ZN3CPG9set_nwaveEf>
		return true;
	});
 8018a94:	2001      	movs	r0, #1
 8018a96:	bd08      	pop	{r3, pc}
 8018a98:	240071b0 	.word	0x240071b0

08018a9c <_ZZL8UserTaskPvENUlS_tPftE5_4_FUNES_tS0_t>:
	registers->SetRegisterAsSingle(REG_CPG_COUPLING_STRENGTH);
	registers->AddRegisterPointer<float>(REG_CPG_COUPLING_STRENGTH, &reg_cpg_coupling_strength);
	registers->SetRegisterPermissions(REG_CPG_COUPLING_STRENGTH, WRITE_PERMISSION);
	registers->AddWriteCallback<float>(REG_CPG_COUPLING_STRENGTH, argument,
		[](void* context , uint16_t register_ID , float* input , uint16_t length) -> bool {
		cpg.set_coupling_strength(*input);
 8018a9c:	ed92 0a00 	vldr	s0, [r2]
 8018aa0:	4802      	ldr	r0, [pc, #8]	@ (8018aac <_ZZL8UserTaskPvENUlS_tPftE5_4_FUNES_tS0_t+0x10>)
		[](void* context , uint16_t register_ID , float* input , uint16_t length) -> bool {
 8018aa2:	b508      	push	{r3, lr}
		cpg.set_coupling_strength(*input);
 8018aa4:	f7ff ff2b 	bl	80188fe <_ZN3CPG21set_coupling_strengthEf>
		return true;
	});
 8018aa8:	2001      	movs	r0, #1
 8018aaa:	bd08      	pop	{r3, pc}
 8018aac:	240071b0 	.word	0x240071b0

08018ab0 <_ZZL8UserTaskPvENUlS_tPftE6_4_FUNES_tS0_t>:
	registers->SetRegisterAsSingle(REG_CPG_A_R);
	registers->AddRegisterPointer<float>(REG_CPG_A_R, &reg_cpg_a_r);
	registers->SetRegisterPermissions(REG_CPG_A_R, WRITE_PERMISSION);
	registers->AddWriteCallback<float>(REG_CPG_A_R, argument,
		[](void* context , uint16_t register_ID , float* input , uint16_t length) -> bool {
		cpg.set_a_r(*input);
 8018ab0:	ed92 0a00 	vldr	s0, [r2]
 8018ab4:	4802      	ldr	r0, [pc, #8]	@ (8018ac0 <_ZZL8UserTaskPvENUlS_tPftE6_4_FUNES_tS0_t+0x10>)
		[](void* context , uint16_t register_ID , float* input , uint16_t length) -> bool {
 8018ab6:	b508      	push	{r3, lr}
		cpg.set_a_r(*input);
 8018ab8:	f7ff ff26 	bl	8018908 <_ZN3CPG7set_a_rEf>
		return true;
	});
 8018abc:	2001      	movs	r0, #1
 8018abe:	bd08      	pop	{r3, pc}
 8018ac0:	240071b0 	.word	0x240071b0

08018ac4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 8018ac4:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8018ac6:	4926      	ldr	r1, [pc, #152]	@ (8018b60 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 8018ac8:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8018aca:	4826      	ldr	r0, [pc, #152]	@ (8018b64 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8018acc:	f000 ff3c 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8018ad0:	2800      	cmp	r0, #0
 8018ad2:	d133      	bne.n	8018b3c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8018ad4:	4924      	ldr	r1, [pc, #144]	@ (8018b68 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa4>)
 8018ad6:	4823      	ldr	r0, [pc, #140]	@ (8018b64 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8018ad8:	f000 ff36 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8018adc:	2800      	cmp	r0, #0
 8018ade:	d12f      	bne.n	8018b40 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8018ae0:	4920      	ldr	r1, [pc, #128]	@ (8018b64 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8018ae2:	4608      	mov	r0, r1
 8018ae4:	f000 ff30 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8018ae8:	bb60      	cbnz	r0, 8018b44 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8018aea:	4920      	ldr	r1, [pc, #128]	@ (8018b6c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa8>)
 8018aec:	481d      	ldr	r0, [pc, #116]	@ (8018b64 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8018aee:	f000 ff2b 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8018af2:	bb48      	cbnz	r0, 8018b48 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8018af4:	491e      	ldr	r1, [pc, #120]	@ (8018b70 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xac>)
 8018af6:	481b      	ldr	r0, [pc, #108]	@ (8018b64 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8018af8:	f000 ff26 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8018afc:	bb30      	cbnz	r0, 8018b4c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 8018afe:	491d      	ldr	r1, [pc, #116]	@ (8018b74 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xb0>)
 8018b00:	4818      	ldr	r0, [pc, #96]	@ (8018b64 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8018b02:	f000 ff21 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8018b06:	bb18      	cbnz	r0, 8018b50 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8018b08:	491b      	ldr	r1, [pc, #108]	@ (8018b78 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xb4>)
 8018b0a:	4816      	ldr	r0, [pc, #88]	@ (8018b64 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8018b0c:	f000 ff1c 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8018b10:	bb00      	cbnz	r0, 8018b54 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 8018b12:	491a      	ldr	r1, [pc, #104]	@ (8018b7c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xb8>)
 8018b14:	4813      	ldr	r0, [pc, #76]	@ (8018b64 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8018b16:	f000 ff17 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8018b1a:	b9e8      	cbnz	r0, 8018b58 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8018b1c:	4918      	ldr	r1, [pc, #96]	@ (8018b80 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xbc>)
 8018b1e:	4811      	ldr	r0, [pc, #68]	@ (8018b64 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8018b20:	f000 ff12 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8018b24:	b9d0      	cbnz	r0, 8018b5c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 8018b26:	4917      	ldr	r1, [pc, #92]	@ (8018b84 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xc0>)
 8018b28:	480e      	ldr	r0, [pc, #56]	@ (8018b64 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8018b2a:	f000 ff0d 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 8018b2e:	2800      	cmp	r0, #0
 8018b30:	bf14      	ite	ne
 8018b32:	2309      	movne	r3, #9
 8018b34:	2300      	moveq	r3, #0
 8018b36:	7020      	strb	r0, [r4, #0]
}
 8018b38:	4618      	mov	r0, r3
 8018b3a:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8018b3c:	2300      	movs	r3, #0
 8018b3e:	e7fa      	b.n	8018b36 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8018b40:	2301      	movs	r3, #1
 8018b42:	e7f8      	b.n	8018b36 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8018b44:	2302      	movs	r3, #2
 8018b46:	e7f6      	b.n	8018b36 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8018b48:	2303      	movs	r3, #3
 8018b4a:	e7f4      	b.n	8018b36 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8018b4c:	2304      	movs	r3, #4
 8018b4e:	e7f2      	b.n	8018b36 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 8018b50:	2305      	movs	r3, #5
 8018b52:	e7f0      	b.n	8018b36 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8018b54:	2306      	movs	r3, #6
 8018b56:	e7ee      	b.n	8018b36 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 8018b58:	2307      	movs	r3, #7
 8018b5a:	e7ec      	b.n	8018b36 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8018b5c:	2308      	movs	r3, #8
 8018b5e:	e7ea      	b.n	8018b36 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
 8018b60:	0801a298 	.word	0x0801a298
 8018b64:	0801a278 	.word	0x0801a278
 8018b68:	0801a288 	.word	0x0801a288
 8018b6c:	0801a268 	.word	0x0801a268
 8018b70:	0801a2a0 	.word	0x0801a2a0
 8018b74:	0801a290 	.word	0x0801a290
 8018b78:	0801a280 	.word	0x0801a280
 8018b7c:	0801a270 	.word	0x0801a270
 8018b80:	0801a260 	.word	0x0801a260
 8018b84:	0801a258 	.word	0x0801a258

08018b88 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 8018b88:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8018b8a:	4926      	ldr	r1, [pc, #152]	@ (8018c24 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 8018b8c:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8018b8e:	4826      	ldr	r0, [pc, #152]	@ (8018c28 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 8018b90:	f000 feda 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8018b94:	2800      	cmp	r0, #0
 8018b96:	d133      	bne.n	8018c00 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8018b98:	4924      	ldr	r1, [pc, #144]	@ (8018c2c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa4>)
 8018b9a:	4823      	ldr	r0, [pc, #140]	@ (8018c28 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 8018b9c:	f000 fed4 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8018ba0:	2800      	cmp	r0, #0
 8018ba2:	d12f      	bne.n	8018c04 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8018ba4:	4922      	ldr	r1, [pc, #136]	@ (8018c30 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa8>)
 8018ba6:	4820      	ldr	r0, [pc, #128]	@ (8018c28 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 8018ba8:	f000 fece 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8018bac:	bb60      	cbnz	r0, 8018c08 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8018bae:	4921      	ldr	r1, [pc, #132]	@ (8018c34 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xac>)
 8018bb0:	481d      	ldr	r0, [pc, #116]	@ (8018c28 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 8018bb2:	f000 fec9 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8018bb6:	bb48      	cbnz	r0, 8018c0c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8018bb8:	491f      	ldr	r1, [pc, #124]	@ (8018c38 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xb0>)
 8018bba:	481b      	ldr	r0, [pc, #108]	@ (8018c28 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 8018bbc:	f000 fec4 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8018bc0:	bb30      	cbnz	r0, 8018c10 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 8018bc2:	491e      	ldr	r1, [pc, #120]	@ (8018c3c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xb4>)
 8018bc4:	4818      	ldr	r0, [pc, #96]	@ (8018c28 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 8018bc6:	f000 febf 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8018bca:	bb18      	cbnz	r0, 8018c14 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8018bcc:	491c      	ldr	r1, [pc, #112]	@ (8018c40 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xb8>)
 8018bce:	4816      	ldr	r0, [pc, #88]	@ (8018c28 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 8018bd0:	f000 feba 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8018bd4:	bb00      	cbnz	r0, 8018c18 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 8018bd6:	491b      	ldr	r1, [pc, #108]	@ (8018c44 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xbc>)
 8018bd8:	4813      	ldr	r0, [pc, #76]	@ (8018c28 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 8018bda:	f000 feb5 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8018bde:	b9e8      	cbnz	r0, 8018c1c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8018be0:	4911      	ldr	r1, [pc, #68]	@ (8018c28 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 8018be2:	4608      	mov	r0, r1
 8018be4:	f000 feb0 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8018be8:	b9d0      	cbnz	r0, 8018c20 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 8018bea:	4917      	ldr	r1, [pc, #92]	@ (8018c48 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xc0>)
 8018bec:	480e      	ldr	r0, [pc, #56]	@ (8018c28 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 8018bee:	f000 feab 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 8018bf2:	2800      	cmp	r0, #0
 8018bf4:	bf14      	ite	ne
 8018bf6:	2309      	movne	r3, #9
 8018bf8:	2300      	moveq	r3, #0
 8018bfa:	7020      	strb	r0, [r4, #0]
}
 8018bfc:	4618      	mov	r0, r3
 8018bfe:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8018c00:	2300      	movs	r3, #0
 8018c02:	e7fa      	b.n	8018bfa <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8018c04:	2301      	movs	r3, #1
 8018c06:	e7f8      	b.n	8018bfa <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8018c08:	2302      	movs	r3, #2
 8018c0a:	e7f6      	b.n	8018bfa <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8018c0c:	2303      	movs	r3, #3
 8018c0e:	e7f4      	b.n	8018bfa <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8018c10:	2304      	movs	r3, #4
 8018c12:	e7f2      	b.n	8018bfa <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 8018c14:	2305      	movs	r3, #5
 8018c16:	e7f0      	b.n	8018bfa <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8018c18:	2306      	movs	r3, #6
 8018c1a:	e7ee      	b.n	8018bfa <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 8018c1c:	2307      	movs	r3, #7
 8018c1e:	e7ec      	b.n	8018bfa <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8018c20:	2308      	movs	r3, #8
 8018c22:	e7ea      	b.n	8018bfa <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
 8018c24:	0801a298 	.word	0x0801a298
 8018c28:	0801a260 	.word	0x0801a260
 8018c2c:	0801a288 	.word	0x0801a288
 8018c30:	0801a278 	.word	0x0801a278
 8018c34:	0801a268 	.word	0x0801a268
 8018c38:	0801a2a0 	.word	0x0801a2a0
 8018c3c:	0801a290 	.word	0x0801a290
 8018c40:	0801a280 	.word	0x0801a280
 8018c44:	0801a270 	.word	0x0801a270
 8018c48:	0801a258 	.word	0x0801a258

08018c4c <_ZN9Registers9GetTypeIDIaEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 8018c4c:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8018c4e:	4926      	ldr	r1, [pc, #152]	@ (8018ce8 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 8018c50:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8018c52:	4826      	ldr	r0, [pc, #152]	@ (8018cec <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 8018c54:	f000 fe78 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8018c58:	2800      	cmp	r0, #0
 8018c5a:	d133      	bne.n	8018cc4 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8018c5c:	4924      	ldr	r1, [pc, #144]	@ (8018cf0 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa4>)
 8018c5e:	4823      	ldr	r0, [pc, #140]	@ (8018cec <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 8018c60:	f000 fe72 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8018c64:	2800      	cmp	r0, #0
 8018c66:	d12f      	bne.n	8018cc8 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8018c68:	4922      	ldr	r1, [pc, #136]	@ (8018cf4 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa8>)
 8018c6a:	4820      	ldr	r0, [pc, #128]	@ (8018cec <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 8018c6c:	f000 fe6c 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8018c70:	bb60      	cbnz	r0, 8018ccc <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8018c72:	4921      	ldr	r1, [pc, #132]	@ (8018cf8 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xac>)
 8018c74:	481d      	ldr	r0, [pc, #116]	@ (8018cec <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 8018c76:	f000 fe67 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8018c7a:	bb48      	cbnz	r0, 8018cd0 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8018c7c:	491b      	ldr	r1, [pc, #108]	@ (8018cec <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 8018c7e:	4608      	mov	r0, r1
 8018c80:	f000 fe62 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8018c84:	bb30      	cbnz	r0, 8018cd4 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 8018c86:	491d      	ldr	r1, [pc, #116]	@ (8018cfc <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xb0>)
 8018c88:	4818      	ldr	r0, [pc, #96]	@ (8018cec <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 8018c8a:	f000 fe5d 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8018c8e:	bb18      	cbnz	r0, 8018cd8 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8018c90:	491b      	ldr	r1, [pc, #108]	@ (8018d00 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xb4>)
 8018c92:	4816      	ldr	r0, [pc, #88]	@ (8018cec <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 8018c94:	f000 fe58 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8018c98:	bb00      	cbnz	r0, 8018cdc <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 8018c9a:	491a      	ldr	r1, [pc, #104]	@ (8018d04 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xb8>)
 8018c9c:	4813      	ldr	r0, [pc, #76]	@ (8018cec <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 8018c9e:	f000 fe53 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8018ca2:	b9e8      	cbnz	r0, 8018ce0 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8018ca4:	4918      	ldr	r1, [pc, #96]	@ (8018d08 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xbc>)
 8018ca6:	4811      	ldr	r0, [pc, #68]	@ (8018cec <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 8018ca8:	f000 fe4e 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8018cac:	b9d0      	cbnz	r0, 8018ce4 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 8018cae:	4917      	ldr	r1, [pc, #92]	@ (8018d0c <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xc0>)
 8018cb0:	480e      	ldr	r0, [pc, #56]	@ (8018cec <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 8018cb2:	f000 fe49 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 8018cb6:	2800      	cmp	r0, #0
 8018cb8:	bf14      	ite	ne
 8018cba:	2309      	movne	r3, #9
 8018cbc:	2300      	moveq	r3, #0
 8018cbe:	7020      	strb	r0, [r4, #0]
}
 8018cc0:	4618      	mov	r0, r3
 8018cc2:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8018cc4:	2300      	movs	r3, #0
 8018cc6:	e7fa      	b.n	8018cbe <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8018cc8:	2301      	movs	r3, #1
 8018cca:	e7f8      	b.n	8018cbe <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8018ccc:	2302      	movs	r3, #2
 8018cce:	e7f6      	b.n	8018cbe <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8018cd0:	2303      	movs	r3, #3
 8018cd2:	e7f4      	b.n	8018cbe <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8018cd4:	2304      	movs	r3, #4
 8018cd6:	e7f2      	b.n	8018cbe <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 8018cd8:	2305      	movs	r3, #5
 8018cda:	e7f0      	b.n	8018cbe <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8018cdc:	2306      	movs	r3, #6
 8018cde:	e7ee      	b.n	8018cbe <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 8018ce0:	2307      	movs	r3, #7
 8018ce2:	e7ec      	b.n	8018cbe <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8018ce4:	2308      	movs	r3, #8
 8018ce6:	e7ea      	b.n	8018cbe <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
 8018ce8:	0801a298 	.word	0x0801a298
 8018cec:	0801a2a0 	.word	0x0801a2a0
 8018cf0:	0801a288 	.word	0x0801a288
 8018cf4:	0801a278 	.word	0x0801a278
 8018cf8:	0801a268 	.word	0x0801a268
 8018cfc:	0801a290 	.word	0x0801a290
 8018d00:	0801a280 	.word	0x0801a280
 8018d04:	0801a270 	.word	0x0801a270
 8018d08:	0801a260 	.word	0x0801a260
 8018d0c:	0801a258 	.word	0x0801a258

08018d10 <_ZN4UserC1EP9RegistersP17MasterSubscribersP13CommunicationP8ServicesP10PublishersP13HardwareDelayP7SensorsP4LEDS>:
User::User(	Registers* registers_,
 8018d10:	b510      	push	{r4, lr}
	communication = communication_;
 8018d12:	6083      	str	r3, [r0, #8]
	services = services_;
 8018d14:	9b02      	ldr	r3, [sp, #8]
 8018d16:	60c3      	str	r3, [r0, #12]
	publishers = publishers_;
 8018d18:	9b03      	ldr	r3, [sp, #12]
 8018d1a:	6103      	str	r3, [r0, #16]
	hardware_delay = hardware_delay_;
 8018d1c:	9b04      	ldr	r3, [sp, #16]
 8018d1e:	6143      	str	r3, [r0, #20]
	sensors = sensors_;
 8018d20:	9b05      	ldr	r3, [sp, #20]
 8018d22:	6183      	str	r3, [r0, #24]
	leds = leds_;
 8018d24:	9b06      	ldr	r3, [sp, #24]
	subscribers = subscribers_;
 8018d26:	e9c0 1200 	strd	r1, r2, [r0]
	leds = leds_;
 8018d2a:	61c3      	str	r3, [r0, #28]
}
 8018d2c:	bd10      	pop	{r4, pc}

08018d2e <_ZN4User4InitEv>:
}
 8018d2e:	4770      	bx	lr

08018d30 <_ZN4User12AddOSThreadsEv>:
void User::AddOSThreads(void) {
 8018d30:	b530      	push	{r4, r5, lr}
	};
 8018d32:	4d19      	ldr	r5, [pc, #100]	@ (8018d98 <_ZN4User12AddOSThreadsEv+0x68>)
void User::AddOSThreads(void) {
 8018d34:	b08b      	sub	sp, #44	@ 0x2c
 8018d36:	4604      	mov	r4, r0
	};
 8018d38:	682b      	ldr	r3, [r5, #0]
 8018d3a:	f3bf 8f5b 	dmb	ish
 8018d3e:	07d9      	lsls	r1, r3, #31
 8018d40:	d417      	bmi.n	8018d72 <_ZN4User12AddOSThreadsEv+0x42>
 8018d42:	4628      	mov	r0, r5
 8018d44:	f000 fd5a 	bl	80197fc <__cxa_guard_acquire>
 8018d48:	b198      	cbz	r0, 8018d72 <_ZN4User12AddOSThreadsEv+0x42>
 8018d4a:	6822      	ldr	r2, [r4, #0]
 8018d4c:	4628      	mov	r0, r5
 8018d4e:	4b13      	ldr	r3, [pc, #76]	@ (8018d9c <_ZN4User12AddOSThreadsEv+0x6c>)
 8018d50:	601a      	str	r2, [r3, #0]
 8018d52:	6862      	ldr	r2, [r4, #4]
 8018d54:	605a      	str	r2, [r3, #4]
 8018d56:	68a2      	ldr	r2, [r4, #8]
 8018d58:	609a      	str	r2, [r3, #8]
 8018d5a:	68e2      	ldr	r2, [r4, #12]
 8018d5c:	60da      	str	r2, [r3, #12]
 8018d5e:	6922      	ldr	r2, [r4, #16]
 8018d60:	611a      	str	r2, [r3, #16]
 8018d62:	6962      	ldr	r2, [r4, #20]
 8018d64:	615a      	str	r2, [r3, #20]
 8018d66:	69a2      	ldr	r2, [r4, #24]
 8018d68:	619a      	str	r2, [r3, #24]
 8018d6a:	69e2      	ldr	r2, [r4, #28]
 8018d6c:	61da      	str	r2, [r3, #28]
 8018d6e:	f000 fd51 	bl	8019814 <__cxa_guard_release>
	const osThreadAttr_t UserTask_attributes = {
 8018d72:	2220      	movs	r2, #32
 8018d74:	2100      	movs	r1, #0
 8018d76:	a802      	add	r0, sp, #8
 8018d78:	f000 fef6 	bl	8019b68 <memset>
 8018d7c:	4b08      	ldr	r3, [pc, #32]	@ (8018da0 <_ZN4User12AddOSThreadsEv+0x70>)
 8018d7e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
	osThreadNew(UserTask, &class_instances_argument, &UserTask_attributes);
 8018d82:	4906      	ldr	r1, [pc, #24]	@ (8018d9c <_ZN4User12AddOSThreadsEv+0x6c>)
	const osThreadAttr_t UserTask_attributes = {
 8018d84:	9301      	str	r3, [sp, #4]
 8018d86:	2308      	movs	r3, #8
	osThreadNew(UserTask, &class_instances_argument, &UserTask_attributes);
 8018d88:	4806      	ldr	r0, [pc, #24]	@ (8018da4 <_ZN4User12AddOSThreadsEv+0x74>)
	const osThreadAttr_t UserTask_attributes = {
 8018d8a:	e9cd 2306 	strd	r2, r3, [sp, #24]
	osThreadNew(UserTask, &class_instances_argument, &UserTask_attributes);
 8018d8e:	aa01      	add	r2, sp, #4
 8018d90:	f7f3 f94c 	bl	800c02c <osThreadNew>
}
 8018d94:	b00b      	add	sp, #44	@ 0x2c
 8018d96:	bd30      	pop	{r4, r5, pc}
 8018d98:	24009430 	.word	0x24009430
 8018d9c:	24009434 	.word	0x24009434
 8018da0:	0801a190 	.word	0x0801a190
 8018da4:	0801911d 	.word	0x0801911d

08018da8 <_ZN3CPGC1Ev>:
#include <stdint.h>
//defines the max number of modules
#define MAX_MODULES     20
#define MAX_OSCILLATORS (MAX_MODULES*2)

class CPG {
 8018da8:	b538      	push	{r3, r4, r5, lr}
 8018daa:	25a0      	movs	r5, #160	@ 0xa0
 8018dac:	4604      	mov	r4, r0
 8018dae:	2100      	movs	r1, #0
 8018db0:	462a      	mov	r2, r5
 8018db2:	f000 fed9 	bl	8019b68 <memset>
 8018db6:	462a      	mov	r2, r5
 8018db8:	2100      	movs	r1, #0
 8018dba:	1960      	adds	r0, r4, r5
 8018dbc:	f000 fed4 	bl	8019b68 <memset>
 8018dc0:	462a      	mov	r2, r5
 8018dc2:	2100      	movs	r1, #0
 8018dc4:	f504 70a0 	add.w	r0, r4, #320	@ 0x140
 8018dc8:	f000 fece 	bl	8019b68 <memset>
 8018dcc:	462a      	mov	r2, r5
 8018dce:	2100      	movs	r1, #0
 8018dd0:	f504 70f0 	add.w	r0, r4, #480	@ 0x1e0
 8018dd4:	f000 fec8 	bl	8019b68 <memset>
 8018dd8:	462a      	mov	r2, r5
 8018dda:	2100      	movs	r1, #0
 8018ddc:	f504 7020 	add.w	r0, r4, #640	@ 0x280
 8018de0:	f000 fec2 	bl	8019b68 <memset>
 8018de4:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8018de8:	2100      	movs	r1, #0
 8018dea:	f504 7048 	add.w	r0, r4, #800	@ 0x320
 8018dee:	f000 febb 	bl	8019b68 <memset>
 8018df2:	f44f 52c8 	mov.w	r2, #6400	@ 0x1900
 8018df6:	2100      	movs	r1, #0
 8018df8:	f504 6016 	add.w	r0, r4, #2400	@ 0x960
 8018dfc:	f000 feb4 	bl	8019b68 <memset>
 8018e00:	4620      	mov	r0, r4
 8018e02:	bd38      	pop	{r3, r4, r5, pc}

08018e04 <_ZN9Registers11AddRegisterIfEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 8018e04:	b570      	push	{r4, r5, r6, lr}
 8018e06:	4604      	mov	r4, r0
 8018e08:	b086      	sub	sp, #24
 8018e0a:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8018e0c:	6800      	ldr	r0, [r0, #0]
 8018e0e:	f04f 31ff 	mov.w	r1, #4294967295
 8018e12:	f7f3 f9d3 	bl	800c1bc <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 8018e16:	f10d 0207 	add.w	r2, sp, #7
 8018e1a:	4631      	mov	r1, r6
 8018e1c:	4620      	mov	r0, r4
 8018e1e:	f7fe f958 	bl	80170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 8018e22:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8018e26:	b125      	cbz	r5, 8018e32 <_ZN9Registers11AddRegisterIfEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 8018e28:	6820      	ldr	r0, [r4, #0]
 8018e2a:	f7f3 f9fb 	bl	800c224 <osSemaphoreRelease>
}
 8018e2e:	b006      	add	sp, #24
 8018e30:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8018e32:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 8018e36:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8018e3a:	f7ff fea5 	bl	8018b88 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>
	configuration_.register_info = register_;
 8018e3e:	2301      	movs	r3, #1
 8018e40:	f8ad 600a 	strh.w	r6, [sp, #10]
 8018e44:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 8018e48:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 8018e4c:	f88d 000c 	strb.w	r0, [sp, #12]
 8018e50:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 8018e54:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 8018e58:	2b00      	cmp	r3, #0
 8018e5a:	d0e5      	beq.n	8018e28 <_ZN9Registers11AddRegisterIfEEbt.isra.0+0x24>
		registers.push_back(configuration_);
 8018e5c:	a902      	add	r1, sp, #8
 8018e5e:	1d20      	adds	r0, r4, #4
 8018e60:	f7fb fd45 	bl	80148ee <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 8018e64:	e7e0      	b.n	8018e28 <_ZN9Registers11AddRegisterIfEEbt.isra.0+0x24>

08018e66 <_ZN9Registers11AddRegisterIaEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 8018e66:	b570      	push	{r4, r5, r6, lr}
 8018e68:	4604      	mov	r4, r0
 8018e6a:	b086      	sub	sp, #24
 8018e6c:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8018e6e:	6800      	ldr	r0, [r0, #0]
 8018e70:	f04f 31ff 	mov.w	r1, #4294967295
 8018e74:	f7f3 f9a2 	bl	800c1bc <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 8018e78:	f10d 0207 	add.w	r2, sp, #7
 8018e7c:	4631      	mov	r1, r6
 8018e7e:	4620      	mov	r0, r4
 8018e80:	f7fe f927 	bl	80170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 8018e84:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8018e88:	b125      	cbz	r5, 8018e94 <_ZN9Registers11AddRegisterIaEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 8018e8a:	6820      	ldr	r0, [r4, #0]
 8018e8c:	f7f3 f9ca 	bl	800c224 <osSemaphoreRelease>
}
 8018e90:	b006      	add	sp, #24
 8018e92:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8018e94:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 8018e98:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8018e9c:	f7ff fed6 	bl	8018c4c <_ZN9Registers9GetTypeIDIaEEhPb.isra.0>
	configuration_.register_info = register_;
 8018ea0:	2301      	movs	r3, #1
 8018ea2:	f8ad 600a 	strh.w	r6, [sp, #10]
 8018ea6:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 8018eaa:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 8018eae:	f88d 000c 	strb.w	r0, [sp, #12]
 8018eb2:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 8018eb6:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 8018eba:	2b00      	cmp	r3, #0
 8018ebc:	d0e5      	beq.n	8018e8a <_ZN9Registers11AddRegisterIaEEbt.isra.0+0x24>
		registers.push_back(configuration_);
 8018ebe:	a902      	add	r1, sp, #8
 8018ec0:	1d20      	adds	r0, r4, #4
 8018ec2:	f7fb fd14 	bl	80148ee <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 8018ec6:	e7e0      	b.n	8018e8a <_ZN9Registers11AddRegisterIaEEbt.isra.0+0x24>

08018ec8 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8018ec8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8018ecc:	e9d0 8900 	ldrd	r8, r9, [r0]
 8018ed0:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 8018ed2:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8018ed6:	eba9 0208 	sub.w	r2, r9, r8
 8018eda:	4607      	mov	r7, r0
 8018edc:	468a      	mov	sl, r1
	if (max_size() - size() < __n)
 8018ede:	ebb3 1f22 	cmp.w	r3, r2, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8018ee2:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
 8018ee6:	d102      	bne.n	8018eee <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8018ee8:	4820      	ldr	r0, [pc, #128]	@ (8018f6c <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa4>)
 8018eea:	f000 fd4b 	bl	8019984 <_ZSt20__throw_length_errorPKc>
 8018eee:	45c1      	cmp	r9, r8
 8018ef0:	bf14      	ite	ne
 8018ef2:	4622      	movne	r2, r4
 8018ef4:	2201      	moveq	r2, #1
 8018ef6:	eba1 0508 	sub.w	r5, r1, r8
 8018efa:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8018efc:	d231      	bcs.n	8018f62 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8018efe:	b394      	cbz	r4, 8018f66 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9e>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8018f00:	429c      	cmp	r4, r3
 8018f02:	bf28      	it	cs
 8018f04:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8018f06:	0120      	lsls	r0, r4, #4
 8018f08:	f000 fc87 	bl	801981a <_Znwj>
 8018f0c:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8018f0e:	eb06 0c05 	add.w	ip, r6, r5
      if (__count > 0)
 8018f12:	2d00      	cmp	r5, #0
 8018f14:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8018f18:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8018f1c:	dd04      	ble.n	8018f28 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x60>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8018f1e:	462a      	mov	r2, r5
 8018f20:	4641      	mov	r1, r8
 8018f22:	4630      	mov	r0, r6
 8018f24:	f000 fe06 	bl	8019b34 <memmove>
      ptrdiff_t __count = __last - __first;
 8018f28:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
 8018f2c:	3510      	adds	r5, #16
      if (__count > 0)
 8018f2e:	f1b9 0f00 	cmp.w	r9, #0
 8018f32:	4435      	add	r5, r6
 8018f34:	dd04      	ble.n	8018f40 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x78>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8018f36:	464a      	mov	r2, r9
 8018f38:	4651      	mov	r1, sl
 8018f3a:	4628      	mov	r0, r5
 8018f3c:	f000 fef2 	bl	8019d24 <memcpy>
      return __result + __count;
 8018f40:	444d      	add	r5, r9
	if (__p)
 8018f42:	f1b8 0f00 	cmp.w	r8, #0
 8018f46:	d005      	beq.n	8018f54 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
 8018f48:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8018f4a:	4640      	mov	r0, r8
 8018f4c:	eba1 0108 	sub.w	r1, r1, r8
 8018f50:	f000 fc3e 	bl	80197d0 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8018f54:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8018f58:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 8018f5c:	60be      	str	r6, [r7, #8]
    }
 8018f5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8018f62:	461c      	mov	r4, r3
 8018f64:	e7cf      	b.n	8018f06 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8018f66:	4626      	mov	r6, r4
 8018f68:	e7d1      	b.n	8018f0e <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
 8018f6a:	bf00      	nop
 8018f6c:	08019e3e 	.word	0x08019e3e

08018f70 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 8018f70:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8018f72:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
      push_back(const value_type& __x)
 8018f76:	4605      	mov	r5, r0
 8018f78:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8018f7a:	429c      	cmp	r4, r3
 8018f7c:	d005      	beq.n	8018f8a <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE9push_backERKS1_+0x1a>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8018f7e:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 8018f80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8018f84:	3410      	adds	r4, #16
 8018f86:	606c      	str	r4, [r5, #4]
      }
 8018f88:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
 8018f8a:	4621      	mov	r1, r4
 8018f8c:	f7ff ff9c 	bl	8018ec8 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8018f90:	e7fa      	b.n	8018f88 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE9push_backERKS1_+0x18>

08018f92 <_ZN9Registers18AddRegisterPointerIaEEbtPT_.isra.0>:
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 8018f92:	b570      	push	{r4, r5, r6, lr}
 8018f94:	460c      	mov	r4, r1
 8018f96:	b086      	sub	sp, #24
 8018f98:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8018f9a:	f04f 31ff 	mov.w	r1, #4294967295
 8018f9e:	6800      	ldr	r0, [r0, #0]
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 8018fa0:	4616      	mov	r6, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8018fa2:	f7f3 f90b 	bl	800c1bc <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8018fa6:	4621      	mov	r1, r4
 8018fa8:	f10d 0207 	add.w	r2, sp, #7
 8018fac:	4628      	mov	r0, r5
 8018fae:	f7fe f890 	bl	80170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8018fb2:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8018fb6:	4604      	mov	r4, r0
	if (!success) {
 8018fb8:	b923      	cbnz	r3, 8018fc4 <_ZN9Registers18AddRegisterPointerIaEEbtPT_.isra.0+0x32>
	osSemaphoreRelease(RegistersSemaphore);
 8018fba:	6828      	ldr	r0, [r5, #0]
 8018fbc:	f7f3 f932 	bl	800c224 <osSemaphoreRelease>
}
 8018fc0:	b006      	add	sp, #24
 8018fc2:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8018fc4:	f10d 0007 	add.w	r0, sp, #7
 8018fc8:	f7ff fe40 	bl	8018c4c <_ZN9Registers9GetTypeIDIaEEhPb.isra.0>
	if (!success) {
 8018fcc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8018fd0:	2b00      	cmp	r3, #0
 8018fd2:	d0f2      	beq.n	8018fba <_ZN9Registers18AddRegisterPointerIaEEbtPT_.isra.0+0x28>
	if (target_register->register_info.type != registered_type) {
 8018fd4:	7923      	ldrb	r3, [r4, #4]
 8018fd6:	4298      	cmp	r0, r3
 8018fd8:	d1ef      	bne.n	8018fba <_ZN9Registers18AddRegisterPointerIaEEbtPT_.isra.0+0x28>
	if (callbacks[target_register->register_info.type] == NULL) {
 8018fda:	3004      	adds	r0, #4
 8018fdc:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8018fe0:	2800      	cmp	r0, #0
 8018fe2:	d0ea      	beq.n	8018fba <_ZN9Registers18AddRegisterPointerIaEEbtPT_.isra.0+0x28>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 8018fe4:	7823      	ldrb	r3, [r4, #0]
 8018fe6:	b983      	cbnz	r3, 801900a <_ZN9Registers18AddRegisterPointerIaEEbtPT_.isra.0+0x78>
 8018fe8:	7863      	ldrb	r3, [r4, #1]
 8018fea:	b973      	cbnz	r3, 801900a <_ZN9Registers18AddRegisterPointerIaEEbtPT_.isra.0+0x78>
		target_callback_list->push_back(callback);
 8018fec:	a902      	add	r1, sp, #8
		callback.pointer = pointer;
 8018fee:	9602      	str	r6, [sp, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8018ff0:	e9d0 2300 	ldrd	r2, r3, [r0]
 8018ff4:	1a9b      	subs	r3, r3, r2
 8018ff6:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8018ff8:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 8018ffa:	f7ff ffb9 	bl	8018f70 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE9push_backERKS1_>
	target_register->mode.pointer = true;
 8018ffe:	2301      	movs	r3, #1
 8019000:	7023      	strb	r3, [r4, #0]
	target_register->access.write = true;
 8019002:	f240 1301 	movw	r3, #257	@ 0x101
 8019006:	8123      	strh	r3, [r4, #8]
 8019008:	e7d7      	b.n	8018fba <_ZN9Registers18AddRegisterPointerIaEEbtPT_.isra.0+0x28>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 801900a:	8961      	ldrh	r1, [r4, #10]
 801900c:	f7f6 f9e2 	bl	800f3d4 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE2atEj>
		callback->pointer = pointer;
 8019010:	6006      	str	r6, [r0, #0]
 8019012:	e7f4      	b.n	8018ffe <_ZN9Registers18AddRegisterPointerIaEEbtPT_.isra.0+0x6c>

08019014 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8019014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019016:	460c      	mov	r4, r1
 8019018:	b087      	sub	sp, #28
 801901a:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801901c:	f04f 31ff 	mov.w	r1, #4294967295
 8019020:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8019022:	461e      	mov	r6, r3
 8019024:	4617      	mov	r7, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8019026:	f7f3 f8c9 	bl	800c1bc <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801902a:	4621      	mov	r1, r4
 801902c:	f10d 0207 	add.w	r2, sp, #7
 8019030:	4628      	mov	r0, r5
 8019032:	f7fe f84e 	bl	80170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8019036:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801903a:	4604      	mov	r4, r0
	if (!success) {
 801903c:	b923      	cbnz	r3, 8019048 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x34>
	osSemaphoreRelease(RegistersSemaphore);
 801903e:	6828      	ldr	r0, [r5, #0]
 8019040:	f7f3 f8f0 	bl	800c224 <osSemaphoreRelease>
}
 8019044:	b007      	add	sp, #28
 8019046:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8019048:	f10d 0007 	add.w	r0, sp, #7
 801904c:	f7ff fd9c 	bl	8018b88 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>
	if (!success) {
 8019050:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8019054:	2b00      	cmp	r3, #0
 8019056:	d0f2      	beq.n	801903e <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (target_register->register_info.type != registered_type) {
 8019058:	7923      	ldrb	r3, [r4, #4]
 801905a:	4298      	cmp	r0, r3
 801905c:	d1ef      	bne.n	801903e <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (callbacks[target_register->register_info.type] == NULL) {
 801905e:	3004      	adds	r0, #4
 8019060:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8019064:	2800      	cmp	r0, #0
 8019066:	d0ea      	beq.n	801903e <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 8019068:	7823      	ldrb	r3, [r4, #0]
 801906a:	b983      	cbnz	r3, 801908e <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
 801906c:	7863      	ldrb	r3, [r4, #1]
 801906e:	b973      	cbnz	r3, 801908e <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
		callback.read = NULL;
 8019070:	9305      	str	r3, [sp, #20]
		target_callback_list->push_back(callback);
 8019072:	a902      	add	r1, sp, #8
 8019074:	e9d0 2300 	ldrd	r2, r3, [r0]
		callback.write = write;
 8019078:	e9cd 7603 	strd	r7, r6, [sp, #12]
 801907c:	1a9b      	subs	r3, r3, r2
 801907e:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8019080:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 8019082:	f7fb fdd5 	bl	8014c30 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE9push_backERKS1_>
	target_register->mode.callbacks = true;
 8019086:	2301      	movs	r3, #1
 8019088:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 801908a:	7223      	strb	r3, [r4, #8]
 801908c:	e7d7      	b.n	801903e <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 801908e:	8961      	ldrh	r1, [r4, #10]
 8019090:	f7f6 f9b2 	bl	800f3f8 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE2atEj>
		callback->write = write;
 8019094:	e9c0 7601 	strd	r7, r6, [r0, #4]
 8019098:	e7f5      	b.n	8019086 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x72>

0801909a <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>:
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 801909a:	b570      	push	{r4, r5, r6, lr}
 801909c:	460c      	mov	r4, r1
 801909e:	b086      	sub	sp, #24
 80190a0:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80190a2:	f04f 31ff 	mov.w	r1, #4294967295
 80190a6:	6800      	ldr	r0, [r0, #0]
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 80190a8:	4616      	mov	r6, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80190aa:	f7f3 f887 	bl	800c1bc <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80190ae:	4621      	mov	r1, r4
 80190b0:	f10d 0207 	add.w	r2, sp, #7
 80190b4:	4628      	mov	r0, r5
 80190b6:	f7fe f80c 	bl	80170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80190ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80190be:	4604      	mov	r4, r0
	if (!success) {
 80190c0:	b923      	cbnz	r3, 80190cc <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x32>
	osSemaphoreRelease(RegistersSemaphore);
 80190c2:	6828      	ldr	r0, [r5, #0]
 80190c4:	f7f3 f8ae 	bl	800c224 <osSemaphoreRelease>
}
 80190c8:	b006      	add	sp, #24
 80190ca:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 80190cc:	f10d 0007 	add.w	r0, sp, #7
 80190d0:	f7ff fd5a 	bl	8018b88 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>
	if (!success) {
 80190d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80190d8:	2b00      	cmp	r3, #0
 80190da:	d0f2      	beq.n	80190c2 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x28>
	if (target_register->register_info.type != registered_type) {
 80190dc:	7923      	ldrb	r3, [r4, #4]
 80190de:	4298      	cmp	r0, r3
 80190e0:	d1ef      	bne.n	80190c2 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x28>
	if (callbacks[target_register->register_info.type] == NULL) {
 80190e2:	3004      	adds	r0, #4
 80190e4:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 80190e8:	2800      	cmp	r0, #0
 80190ea:	d0ea      	beq.n	80190c2 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x28>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 80190ec:	7823      	ldrb	r3, [r4, #0]
 80190ee:	b983      	cbnz	r3, 8019112 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x78>
 80190f0:	7863      	ldrb	r3, [r4, #1]
 80190f2:	b973      	cbnz	r3, 8019112 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x78>
		target_callback_list->push_back(callback);
 80190f4:	a902      	add	r1, sp, #8
		callback.pointer = pointer;
 80190f6:	9602      	str	r6, [sp, #8]
 80190f8:	e9d0 2300 	ldrd	r2, r3, [r0]
 80190fc:	1a9b      	subs	r3, r3, r2
 80190fe:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8019100:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 8019102:	f7fb fd95 	bl	8014c30 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE9push_backERKS1_>
	target_register->mode.pointer = true;
 8019106:	2301      	movs	r3, #1
 8019108:	7023      	strb	r3, [r4, #0]
	target_register->access.write = true;
 801910a:	f240 1301 	movw	r3, #257	@ 0x101
 801910e:	8123      	strh	r3, [r4, #8]
 8019110:	e7d7      	b.n	80190c2 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x28>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8019112:	8961      	ldrh	r1, [r4, #10]
 8019114:	f7f6 f970 	bl	800f3f8 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE2atEj>
		callback->pointer = pointer;
 8019118:	6006      	str	r6, [r0, #0]
 801911a:	e7f4      	b.n	8019106 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x6c>

0801911c <_ZL8UserTaskPv>:
static void UserTask(void *argument) {
 801911c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	Registers* registers = class_instances_pointer->registers;
 8019120:	6804      	ldr	r4, [r0, #0]
static void UserTask(void *argument) {
 8019122:	b09f      	sub	sp, #124	@ 0x7c
	LEDS* leds = class_instances_pointer->leds;
 8019124:	69c3      	ldr	r3, [r0, #28]
	registers->AddRegister<int8_t>(REG_CPG_SETPOINTS);
 8019126:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
static void UserTask(void *argument) {
 801912a:	4605      	mov	r5, r0
 801912c:	f04f 0a00 	mov.w	sl, #0
	LEDS* leds = class_instances_pointer->leds;
 8019130:	9305      	str	r3, [sp, #20]
	Publishers* publishers = class_instances_pointer->publishers;
 8019132:	e9d0 9803 	ldrd	r9, r8, [r0, #12]
	registers->AddRegister<int8_t>(REG_CPG_SETPOINTS);
 8019136:	4620      	mov	r0, r4
 8019138:	f7ff fe95 	bl	8018e66 <_ZN9Registers11AddRegisterIaEEbt.isra.0>
	registers->SetRegisterAsArray(REG_CPG_SETPOINTS, MODULE_NUMBER);
 801913c:	2204      	movs	r2, #4
 801913e:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 8019142:	4620      	mov	r0, r4
 8019144:	f7fe f81a 	bl	801717c <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddRegisterPointer<int8_t>(REG_CPG_SETPOINTS, reg_cpg_setpoints);
 8019148:	4aaa      	ldr	r2, [pc, #680]	@ (80193f4 <_ZL8UserTaskPv+0x2d8>)
 801914a:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 801914e:	4620      	mov	r0, r4
 8019150:	f7ff ff1f 	bl	8018f92 <_ZN9Registers18AddRegisterPointerIaEEbtPT_.isra.0>
	registers->AddRegister<int8_t>(REG_CPG_ENABLED);
 8019154:	f240 5101 	movw	r1, #1281	@ 0x501
 8019158:	4620      	mov	r0, r4
 801915a:	f7ff fe84 	bl	8018e66 <_ZN9Registers11AddRegisterIaEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_CPG_ENABLED);
 801915e:	f240 5101 	movw	r1, #1281	@ 0x501
 8019162:	4620      	mov	r0, r4
 8019164:	f7fd ffee 	bl	8017144 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterPointer<int8_t>(REG_CPG_ENABLED, &reg_cpg_enabled);
 8019168:	4aa3      	ldr	r2, [pc, #652]	@ (80193f8 <_ZL8UserTaskPv+0x2dc>)
 801916a:	f240 5101 	movw	r1, #1281	@ 0x501
 801916e:	4620      	mov	r0, r4
 8019170:	f7ff ff0f 	bl	8018f92 <_ZN9Registers18AddRegisterPointerIaEEbtPT_.isra.0>
	registers->AddRegister<int8_t>(REG_CPG_RESET);
 8019174:	f240 5102 	movw	r1, #1282	@ 0x502
 8019178:	4620      	mov	r0, r4
 801917a:	f7ff fe74 	bl	8018e66 <_ZN9Registers11AddRegisterIaEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_CPG_RESET);
 801917e:	f240 5102 	movw	r1, #1282	@ 0x502
 8019182:	4620      	mov	r0, r4
 8019184:	f7fd ffde 	bl	8017144 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterPointer<int8_t>(REG_CPG_RESET, &reg_cpg_reset);
 8019188:	4a9c      	ldr	r2, [pc, #624]	@ (80193fc <_ZL8UserTaskPv+0x2e0>)
 801918a:	f240 5102 	movw	r1, #1282	@ 0x502
 801918e:	4620      	mov	r0, r4
 8019190:	f7ff feff 	bl	8018f92 <_ZN9Registers18AddRegisterPointerIaEEbtPT_.isra.0>
	registers->SetRegisterPermissions(REG_CPG_RESET, WRITE_PERMISSION);
 8019194:	2201      	movs	r2, #1
 8019196:	f240 5102 	movw	r1, #1282	@ 0x502
 801919a:	4620      	mov	r0, r4
 801919c:	f7fe f80d 	bl	80171ba <_ZN9Registers22SetRegisterPermissionsEth>
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80191a0:	f04f 31ff 	mov.w	r1, #4294967295
 80191a4:	6820      	ldr	r0, [r4, #0]
 80191a6:	f7f3 f809 	bl	800c1bc <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80191aa:	aa12      	add	r2, sp, #72	@ 0x48
 80191ac:	f240 5102 	movw	r1, #1282	@ 0x502
 80191b0:	4620      	mov	r0, r4
 80191b2:	f7fd ff8e 	bl	80170d2 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80191b6:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80191ba:	4606      	mov	r6, r0
	if (!success) {
 80191bc:	2b00      	cmp	r3, #0
 80191be:	f040 8214 	bne.w	80195ea <_ZL8UserTaskPv+0x4ce>
	osSemaphoreRelease(RegistersSemaphore);
 80191c2:	6820      	ldr	r0, [r4, #0]
 80191c4:	f7f3 f82e 	bl	800c224 <osSemaphoreRelease>
	registers->AddRegisterPointer<float>(REG_CPG_FREQUENCY, &reg_cpg_frequency);
 80191c8:	4e8d      	ldr	r6, [pc, #564]	@ (8019400 <_ZL8UserTaskPv+0x2e4>)
	registers->AddRegister<float>(REG_CPG_FREQUENCY);
 80191ca:	4620      	mov	r0, r4
 80191cc:	f44f 61a2 	mov.w	r1, #1296	@ 0x510
 80191d0:	f7ff fe18 	bl	8018e04 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_CPG_FREQUENCY);
 80191d4:	f44f 61a2 	mov.w	r1, #1296	@ 0x510
 80191d8:	4620      	mov	r0, r4
	registers->AddRegisterPointer<float>(REG_CPG_DIRECTION, &reg_cpg_direction);
 80191da:	4f8a      	ldr	r7, [pc, #552]	@ (8019404 <_ZL8UserTaskPv+0x2e8>)
	registers->SetRegisterAsSingle(REG_CPG_FREQUENCY);
 80191dc:	f7fd ffb2 	bl	8017144 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterPointer<float>(REG_CPG_FREQUENCY, &reg_cpg_frequency);
 80191e0:	4632      	mov	r2, r6
 80191e2:	4620      	mov	r0, r4
 80191e4:	f44f 61a2 	mov.w	r1, #1296	@ 0x510
 80191e8:	f7ff ff57 	bl	801909a <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->SetRegisterPermissions(REG_CPG_FREQUENCY, WRITE_PERMISSION);
 80191ec:	2201      	movs	r2, #1
 80191ee:	f44f 61a2 	mov.w	r1, #1296	@ 0x510
 80191f2:	4620      	mov	r0, r4
 80191f4:	f7fd ffe1 	bl	80171ba <_ZN9Registers22SetRegisterPermissionsEth>
	registers->AddWriteCallback<float>(REG_CPG_FREQUENCY, argument,
 80191f8:	4b83      	ldr	r3, [pc, #524]	@ (8019408 <_ZL8UserTaskPv+0x2ec>)
 80191fa:	462a      	mov	r2, r5
 80191fc:	4620      	mov	r0, r4
 80191fe:	f44f 61a2 	mov.w	r1, #1296	@ 0x510
	registers->AddRegisterPointer<float>(REG_CPG_AMPLC, &reg_cpg_amplc);
 8019202:	f8df b234 	ldr.w	fp, [pc, #564]	@ 8019438 <_ZL8UserTaskPv+0x31c>
	registers->AddWriteCallback<float>(REG_CPG_FREQUENCY, argument,
 8019206:	f7ff ff05 	bl	8019014 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<float>(REG_CPG_DIRECTION);
 801920a:	4620      	mov	r0, r4
 801920c:	f240 5111 	movw	r1, #1297	@ 0x511
 8019210:	f7ff fdf8 	bl	8018e04 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_CPG_DIRECTION);
 8019214:	f240 5111 	movw	r1, #1297	@ 0x511
 8019218:	4620      	mov	r0, r4
 801921a:	f7fd ff93 	bl	8017144 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterPointer<float>(REG_CPG_DIRECTION, &reg_cpg_direction);
 801921e:	4620      	mov	r0, r4
 8019220:	463a      	mov	r2, r7
 8019222:	f240 5111 	movw	r1, #1297	@ 0x511
 8019226:	f7ff ff38 	bl	801909a <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->SetRegisterPermissions(REG_CPG_DIRECTION, WRITE_PERMISSION);
 801922a:	2201      	movs	r2, #1
 801922c:	f240 5111 	movw	r1, #1297	@ 0x511
 8019230:	4620      	mov	r0, r4
 8019232:	f7fd ffc2 	bl	80171ba <_ZN9Registers22SetRegisterPermissionsEth>
	registers->AddWriteCallback<float>(REG_CPG_DIRECTION, argument,
 8019236:	4b75      	ldr	r3, [pc, #468]	@ (801940c <_ZL8UserTaskPv+0x2f0>)
 8019238:	462a      	mov	r2, r5
 801923a:	4620      	mov	r0, r4
 801923c:	f240 5111 	movw	r1, #1297	@ 0x511
 8019240:	f7ff fee8 	bl	8019014 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<float>(REG_CPG_AMPLC);
 8019244:	4620      	mov	r0, r4
 8019246:	f240 5112 	movw	r1, #1298	@ 0x512
 801924a:	f7ff fddb 	bl	8018e04 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_CPG_AMPLC);
 801924e:	f240 5112 	movw	r1, #1298	@ 0x512
 8019252:	4620      	mov	r0, r4
 8019254:	f7fd ff76 	bl	8017144 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterPointer<float>(REG_CPG_AMPLC, &reg_cpg_amplc);
 8019258:	4620      	mov	r0, r4
 801925a:	465a      	mov	r2, fp
 801925c:	f240 5112 	movw	r1, #1298	@ 0x512
 8019260:	f7ff ff1b 	bl	801909a <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->SetRegisterPermissions(REG_CPG_AMPLC, WRITE_PERMISSION);
 8019264:	2201      	movs	r2, #1
 8019266:	f240 5112 	movw	r1, #1298	@ 0x512
 801926a:	4620      	mov	r0, r4
 801926c:	f7fd ffa5 	bl	80171ba <_ZN9Registers22SetRegisterPermissionsEth>
	registers->AddWriteCallback<float>(REG_CPG_AMPLC, argument,
 8019270:	4b67      	ldr	r3, [pc, #412]	@ (8019410 <_ZL8UserTaskPv+0x2f4>)
 8019272:	462a      	mov	r2, r5
 8019274:	4620      	mov	r0, r4
 8019276:	f240 5112 	movw	r1, #1298	@ 0x512
 801927a:	f7ff fecb 	bl	8019014 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<float>(REG_CPG_AMPLH);
 801927e:	4620      	mov	r0, r4
 8019280:	f240 5113 	movw	r1, #1299	@ 0x513
 8019284:	f7ff fdbe 	bl	8018e04 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_CPG_AMPLH);
 8019288:	f240 5113 	movw	r1, #1299	@ 0x513
 801928c:	4620      	mov	r0, r4
 801928e:	f7fd ff59 	bl	8017144 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterPointer<float>(REG_CPG_AMPLH, &reg_cpg_amplh);
 8019292:	4620      	mov	r0, r4
 8019294:	4a5f      	ldr	r2, [pc, #380]	@ (8019414 <_ZL8UserTaskPv+0x2f8>)
 8019296:	f240 5113 	movw	r1, #1299	@ 0x513
 801929a:	f7ff fefe 	bl	801909a <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->SetRegisterPermissions(REG_CPG_AMPLH, WRITE_PERMISSION);
 801929e:	2201      	movs	r2, #1
 80192a0:	f240 5113 	movw	r1, #1299	@ 0x513
 80192a4:	4620      	mov	r0, r4
 80192a6:	f7fd ff88 	bl	80171ba <_ZN9Registers22SetRegisterPermissionsEth>
	registers->AddWriteCallback<float>(REG_CPG_AMPLH, argument,
 80192aa:	4b5b      	ldr	r3, [pc, #364]	@ (8019418 <_ZL8UserTaskPv+0x2fc>)
 80192ac:	462a      	mov	r2, r5
 80192ae:	4620      	mov	r0, r4
 80192b0:	f240 5113 	movw	r1, #1299	@ 0x513
 80192b4:	f7ff feae 	bl	8019014 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<float>(REG_CPG_NWAVE);
 80192b8:	4620      	mov	r0, r4
 80192ba:	f240 5114 	movw	r1, #1300	@ 0x514
 80192be:	f7ff fda1 	bl	8018e04 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_CPG_NWAVE);
 80192c2:	f240 5114 	movw	r1, #1300	@ 0x514
 80192c6:	4620      	mov	r0, r4
 80192c8:	f7fd ff3c 	bl	8017144 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterPointer<float>(REG_CPG_NWAVE, &reg_cpg_nwave);
 80192cc:	4620      	mov	r0, r4
 80192ce:	4a53      	ldr	r2, [pc, #332]	@ (801941c <_ZL8UserTaskPv+0x300>)
 80192d0:	f240 5114 	movw	r1, #1300	@ 0x514
 80192d4:	f7ff fee1 	bl	801909a <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->SetRegisterPermissions(REG_CPG_NWAVE, WRITE_PERMISSION);
 80192d8:	2201      	movs	r2, #1
 80192da:	f240 5114 	movw	r1, #1300	@ 0x514
 80192de:	4620      	mov	r0, r4
 80192e0:	f7fd ff6b 	bl	80171ba <_ZN9Registers22SetRegisterPermissionsEth>
	registers->AddWriteCallback<float>(REG_CPG_NWAVE, argument,
 80192e4:	4b4e      	ldr	r3, [pc, #312]	@ (8019420 <_ZL8UserTaskPv+0x304>)
 80192e6:	462a      	mov	r2, r5
 80192e8:	4620      	mov	r0, r4
 80192ea:	f240 5114 	movw	r1, #1300	@ 0x514
 80192ee:	f7ff fe91 	bl	8019014 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<float>(REG_CPG_COUPLING_STRENGTH);
 80192f2:	4620      	mov	r0, r4
 80192f4:	f240 5115 	movw	r1, #1301	@ 0x515
 80192f8:	f7ff fd84 	bl	8018e04 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_CPG_COUPLING_STRENGTH);
 80192fc:	f240 5115 	movw	r1, #1301	@ 0x515
 8019300:	4620      	mov	r0, r4
 8019302:	f7fd ff1f 	bl	8017144 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterPointer<float>(REG_CPG_COUPLING_STRENGTH, &reg_cpg_coupling_strength);
 8019306:	4620      	mov	r0, r4
 8019308:	4a46      	ldr	r2, [pc, #280]	@ (8019424 <_ZL8UserTaskPv+0x308>)
 801930a:	f240 5115 	movw	r1, #1301	@ 0x515
 801930e:	f7ff fec4 	bl	801909a <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->SetRegisterPermissions(REG_CPG_COUPLING_STRENGTH, WRITE_PERMISSION);
 8019312:	2201      	movs	r2, #1
 8019314:	f240 5115 	movw	r1, #1301	@ 0x515
 8019318:	4620      	mov	r0, r4
 801931a:	f7fd ff4e 	bl	80171ba <_ZN9Registers22SetRegisterPermissionsEth>
	registers->AddWriteCallback<float>(REG_CPG_COUPLING_STRENGTH, argument,
 801931e:	4b42      	ldr	r3, [pc, #264]	@ (8019428 <_ZL8UserTaskPv+0x30c>)
 8019320:	462a      	mov	r2, r5
 8019322:	4620      	mov	r0, r4
 8019324:	f240 5115 	movw	r1, #1301	@ 0x515
 8019328:	f7ff fe74 	bl	8019014 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<float>(REG_CPG_A_R);
 801932c:	4620      	mov	r0, r4
 801932e:	f240 5116 	movw	r1, #1302	@ 0x516
 8019332:	f7ff fd67 	bl	8018e04 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_CPG_A_R);
 8019336:	f240 5116 	movw	r1, #1302	@ 0x516
 801933a:	4620      	mov	r0, r4
 801933c:	f7fd ff02 	bl	8017144 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterPointer<float>(REG_CPG_A_R, &reg_cpg_a_r);
 8019340:	4620      	mov	r0, r4
 8019342:	4a3a      	ldr	r2, [pc, #232]	@ (801942c <_ZL8UserTaskPv+0x310>)
 8019344:	f240 5116 	movw	r1, #1302	@ 0x516
 8019348:	f7ff fea7 	bl	801909a <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->SetRegisterPermissions(REG_CPG_A_R, WRITE_PERMISSION);
 801934c:	2201      	movs	r2, #1
 801934e:	f240 5116 	movw	r1, #1302	@ 0x516
 8019352:	4620      	mov	r0, r4
 8019354:	f7fd ff31 	bl	80171ba <_ZN9Registers22SetRegisterPermissionsEth>
	registers->AddWriteCallback<float>(REG_CPG_A_R, argument,
 8019358:	4b35      	ldr	r3, [pc, #212]	@ (8019430 <_ZL8UserTaskPv+0x314>)
 801935a:	462a      	mov	r2, r5
 801935c:	4620      	mov	r0, r4
 801935e:	f240 5116 	movw	r1, #1302	@ 0x516
	Register internal_register = registers->FindRegister(register_ID, &success);
 8019362:	2400      	movs	r4, #0
 8019364:	f7ff fe56 	bl	8019014 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0>

	// === Publisher Setup === //
	publishers->AddPublisher(PUB_CPG);
 8019368:	2101      	movs	r1, #1
 801936a:	4640      	mov	r0, r8
 801936c:	f7fd fdbe 	bl	8016eec <_ZN10Publishers12AddPublisherEh>
	publishers->SetPublisherPrescaler(PUB_CPG, 1);
 8019370:	2201      	movs	r2, #1
 8019372:	4640      	mov	r0, r8
 8019374:	4611      	mov	r1, r2
 8019376:	f7fd f852 	bl	801641e <_ZN10Publishers21SetPublisherPrescalerEht>
	publishers->LinkToInterface(PUB_CPG, CANFD1);
 801937a:	2200      	movs	r2, #0
 801937c:	2101      	movs	r1, #1
 801937e:	4640      	mov	r0, r8
 8019380:	f7fd faec 	bl	801695c <_ZN10Publishers15LinkToInterfaceEhh>
	publishers->SetPublishAddress(PUB_CPG, CANFD1, ALL);
 8019384:	23ff      	movs	r3, #255	@ 0xff
 8019386:	2200      	movs	r2, #0
 8019388:	2101      	movs	r1, #1
 801938a:	4640      	mov	r0, r8
 801938c:	f7fd f924 	bl	80165d8 <_ZN10Publishers17SetPublishAddressEhhh>

	publishers->AddTopic(PUB_CPG, REG_CPG_SETPOINTS);
 8019390:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8019394:	2101      	movs	r1, #1
 8019396:	4640      	mov	r0, r8
 8019398:	f7fd fa58 	bl	801684c <_ZN10Publishers8AddTopicEht>
	publishers->ActivateTopic(PUB_CPG, REG_CPG_SETPOINTS);
 801939c:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 80193a0:	2101      	movs	r1, #1
 80193a2:	4640      	mov	r0, r8
 80193a4:	f7fd f8de 	bl	8016564 <_ZN10Publishers13ActivateTopicEht>

	publishers->AddTopic(PUB_CPG, REG_TIMEBASE);
 80193a8:	2200      	movs	r2, #0
 80193aa:	2101      	movs	r1, #1
 80193ac:	4640      	mov	r0, r8
 80193ae:	f7fd fa4d 	bl	801684c <_ZN10Publishers8AddTopicEht>
	publishers->ActivateTopic(PUB_CPG, REG_TIMEBASE);
 80193b2:	2200      	movs	r2, #0
 80193b4:	2101      	movs	r1, #1
 80193b6:	4640      	mov	r0, r8
 80193b8:	f7fd f8d4 	bl	8016564 <_ZN10Publishers13ActivateTopicEht>

	publishers->ActivatePublisher(PUB_CPG);
 80193bc:	2101      	movs	r1, #1
 80193be:	4640      	mov	r0, r8
 80193c0:	f7fd f81b 	bl	80163fa <_ZN10Publishers17ActivatePublisherEh>

	// === CPG Setup === //
	cpg.init(MODULE_NUMBER, reg_cpg_frequency, reg_cpg_direction, reg_cpg_amplc, reg_cpg_amplc, reg_cpg_nwave, reg_cpg_coupling_strength, reg_cpg_a_r);
 80193c4:	4b19      	ldr	r3, [pc, #100]	@ (801942c <_ZL8UserTaskPv+0x310>)
 80193c6:	eddb 1a00 	vldr	s3, [fp]
 80193ca:	2104      	movs	r1, #4
 80193cc:	ed93 3a00 	vldr	s6, [r3]
 80193d0:	4b14      	ldr	r3, [pc, #80]	@ (8019424 <_ZL8UserTaskPv+0x308>)
 80193d2:	eeb0 1a61 	vmov.f32	s2, s3
 80193d6:	ed96 0a00 	vldr	s0, [r6]
 * @param input delay_mode: defines the delay function used
 */
template<typename T>
uint8_t Services::AccessRemoteRegister(uint8_t* queue_index, Register remote_register, ServiceInterface interface,  bool access, T* data, uint16_t timeout, uint8_t delay_mode) {
	// Check that the register can be added to the queue. Mainly refuses if the register address is already queued with different type or length
	if (not QueueAvailable(remote_register, interface, access)) return false;
 80193da:	2601      	movs	r6, #1
 80193dc:	edd3 2a00 	vldr	s5, [r3]
 80193e0:	4b0e      	ldr	r3, [pc, #56]	@ (801941c <_ZL8UserTaskPv+0x300>)
 80193e2:	edd7 0a00 	vldr	s1, [r7]
 80193e6:	ed93 2a00 	vldr	s4, [r3]
 80193ea:	4812      	ldr	r0, [pc, #72]	@ (8019434 <_ZL8UserTaskPv+0x318>)
 80193ec:	f7ff faf8 	bl	80189e0 <_ZN3CPG4initEhfffffff>
 80193f0:	e024      	b.n	801943c <_ZL8UserTaskPv+0x320>
 80193f2:	bf00      	nop
 80193f4:	240071aa 	.word	0x240071aa
 80193f8:	240071a9 	.word	0x240071a9
 80193fc:	240071a8 	.word	0x240071a8
 8019400:	24000028 	.word	0x24000028
 8019404:	240071a4 	.word	0x240071a4
 8019408:	08018a39 	.word	0x08018a39
 801940c:	08018a4d 	.word	0x08018a4d
 8019410:	08018a61 	.word	0x08018a61
 8019414:	24000020 	.word	0x24000020
 8019418:	08018a75 	.word	0x08018a75
 801941c:	2400001c 	.word	0x2400001c
 8019420:	08018a89 	.word	0x08018a89
 8019424:	24000018 	.word	0x24000018
 8019428:	08018a9d 	.word	0x08018a9d
 801942c:	24000014 	.word	0x24000014
 8019430:	08018ab1 	.word	0x08018ab1
 8019434:	240071b0 	.word	0x240071b0
 8019438:	24000024 	.word	0x24000024
	Register internal_register = registers->FindRegister(register_ID, &success);
 801943c:	f509 5780 	add.w	r7, r9, #4096	@ 0x1000
 8019440:	f10d 031a 	add.w	r3, sp, #26
 8019444:	2200      	movs	r2, #0
 8019446:	a809      	add	r0, sp, #36	@ 0x24
 8019448:	f8d7 1438 	ldr.w	r1, [r7, #1080]	@ 0x438
 801944c:	f7fd fe52 	bl	80170f4 <_ZN9Registers12FindRegisterEtPb>
	if (not success) return ERROR;
 8019450:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8019454:	2b00      	cmp	r3, #0
 8019456:	f000 80b5 	beq.w	80195c4 <_ZL8UserTaskPv+0x4a8>
	uint8_t declared_type = registers->GetTypeID<T>(&success);
 801945a:	f10d 001a 	add.w	r0, sp, #26
	Register internal_register = registers->FindRegister(register_ID, &success);
 801945e:	f89d 5026 	ldrb.w	r5, [sp, #38]	@ 0x26
	uint8_t declared_type = registers->GetTypeID<T>(&success);
 8019462:	f7ff fb2f 	bl	8018ac4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	if (not success) return ERROR;
 8019466:	f89d 301a 	ldrb.w	r3, [sp, #26]
 801946a:	2b00      	cmp	r3, #0
 801946c:	f000 80aa 	beq.w	80195c4 <_ZL8UserTaskPv+0x4a8>
	if (internal_register.type != declared_type) return ERROR;
 8019470:	42a8      	cmp	r0, r5
 8019472:	f040 80a7 	bne.w	80195c4 <_ZL8UserTaskPv+0x4a8>
 8019476:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
	if (not QueueAvailable(remote_register, interface, access)) return false;
 801947a:	ad0b      	add	r5, sp, #44	@ 0x2c
 801947c:	f89d 2027 	ldrb.w	r2, [sp, #39]	@ 0x27
uint8_t Services::ReadRemoteRegister(Register remote_register, ServiceInterface interface, T* output, uint16_t* length, uint16_t timeout, uint8_t delay_mode) {
 8019480:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8019484:	f64f 6305 	movw	r3, #65029	@ 0xfe05
 8019488:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 801948c:	f8ad 301c 	strh.w	r3, [sp, #28]
uint8_t Services::AccessRemoteRegister(uint8_t* queue_index, Register remote_register, ServiceInterface interface,  bool access, T* data, uint16_t timeout, uint8_t delay_mode) {
 8019490:	f88d 002e 	strb.w	r0, [sp, #46]	@ 0x2e
	if (not QueueAvailable(remote_register, interface, access)) return false;
 8019494:	4648      	mov	r0, r9
 8019496:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 801949a:	f88d 202f 	strb.w	r2, [sp, #47]	@ 0x2f
 801949e:	9600      	str	r6, [sp, #0]
 80194a0:	9b07      	ldr	r3, [sp, #28]
 80194a2:	e895 0006 	ldmia.w	r5, {r1, r2}
 80194a6:	f7fe fd57 	bl	8017f58 <_ZN8Services14QueueAvailableE8Register16ServiceInterfaceb>
 80194aa:	2800      	cmp	r0, #0
 80194ac:	d079      	beq.n	80195a2 <_ZL8UserTaskPv+0x486>

	// Override the register type
	bool success;
	remote_register.type = registers->GetTypeID<T>(&success);
 80194ae:	f10d 081b 	add.w	r8, sp, #27
 80194b2:	4640      	mov	r0, r8
 80194b4:	f7ff fb06 	bl	8018ac4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>

	if (not success) return ERROR;
 80194b8:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80194bc:	2b00      	cmp	r3, #0
 80194be:	f000 8081 	beq.w	80195c4 <_ZL8UserTaskPv+0x4a8>

	// Add service to queue
	*queue_index = AddToQueue(remote_register, interface, access, timeout, &success);
 80194c2:	2314      	movs	r3, #20
 80194c4:	f88d 002e 	strb.w	r0, [sp, #46]	@ 0x2e
 80194c8:	f8cd 8008 	str.w	r8, [sp, #8]
 80194cc:	4648      	mov	r0, r9
 80194ce:	e9cd 6300 	strd	r6, r3, [sp]
 80194d2:	9b07      	ldr	r3, [sp, #28]
 80194d4:	e895 0006 	ldmia.w	r5, {r1, r2}
 80194d8:	f7fe fda5 	bl	8018026 <_ZN8Services10AddToQueueE8Register16ServiceInterfacebtPb>

	if (not success) return ERROR;
 80194dc:	f89d 301b 	ldrb.w	r3, [sp, #27]
	*queue_index = AddToQueue(remote_register, interface, access, timeout, &success);
 80194e0:	4682      	mov	sl, r0
	if (not success) return ERROR;
 80194e2:	2b00      	cmp	r3, #0
 80194e4:	d06e      	beq.n	80195c4 <_ZL8UserTaskPv+0x4a8>

	// Send access request
	MessageHeader request;
	request.interface = interface.interface;
 80194e6:	2305      	movs	r3, #5
	request.target_address = interface.address;

	MessageElement element;
	element.ack = false;
	element.command = true;
	element.access = access;
 80194e8:	f88d 6050 	strb.w	r6, [sp, #80]	@ 0x50
	: _M_start(), _M_finish(), _M_end_of_storage()
 80194ec:	9410      	str	r4, [sp, #64]	@ 0x40
	request.interface = interface.interface;
 80194ee:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
	request.target_address = interface.address;
 80194f2:	23fe      	movs	r3, #254	@ 0xfe
 80194f4:	9417      	str	r4, [sp, #92]	@ 0x5c
 80194f6:	f88d 3044 	strb.w	r3, [sp, #68]	@ 0x44
	element.ack = false;
 80194fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80194fe:	f8ad 304e 	strh.w	r3, [sp, #78]	@ 0x4e
	element.element_register = remote_register;
 8019502:	e895 0003 	ldmia.w	r5, {r0, r1}
	if (access == WRITE) element.data = communication->BuildVector<T>(communication->BuildTVector(element, data));

	// Build message
	if (not communication->BuildPayload(&request, element)) return ERROR;
 8019506:	f8d7 543c 	ldr.w	r5, [r7, #1084]	@ 0x43c
	element.element_register = remote_register;
 801950a:	f8ad 104c 	strh.w	r1, [sp, #76]	@ 0x4c
struct MessageElement {
 801950e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8019510:	9012      	str	r0, [sp, #72]	@ 0x48
 8019512:	9018      	str	r0, [sp, #96]	@ 0x60
 8019514:	a81b      	add	r0, sp, #108	@ 0x6c
 8019516:	f8ad 1064 	strh.w	r1, [sp, #100]	@ 0x64
 801951a:	a915      	add	r1, sp, #84	@ 0x54
 801951c:	f8ad 3066 	strh.w	r3, [sp, #102]	@ 0x66
 8019520:	f88d 6068 	strb.w	r6, [sp, #104]	@ 0x68
 8019524:	e9cd 440e 	strd	r4, r4, [sp, #56]	@ 0x38
 8019528:	e9cd 4415 	strd	r4, r4, [sp, #84]	@ 0x54
 801952c:	f7e7 fa66 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
	if (not communication->BuildPayload(&request, element)) return ERROR;
 8019530:	4628      	mov	r0, r5
 8019532:	aa18      	add	r2, sp, #96	@ 0x60
 8019534:	a90d      	add	r1, sp, #52	@ 0x34
 8019536:	f7f7 fd41 	bl	8010fbc <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 801953a:	4605      	mov	r5, r0
      }
 801953c:	a81b      	add	r0, sp, #108	@ 0x6c
 801953e:	f7e7 f9ad 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8019542:	2d00      	cmp	r5, #0
 8019544:	f000 8096 	beq.w	8019674 <_ZL8UserTaskPv+0x558>

	// Send remote register access
	communication->Send(request);
 8019548:	f8d7 543c 	ldr.w	r5, [r7, #1084]	@ 0x43c
 801954c:	a90e      	add	r1, sp, #56	@ 0x38
 801954e:	f89d 3034 	ldrb.w	r3, [sp, #52]	@ 0x34
 8019552:	a819      	add	r0, sp, #100	@ 0x64
 8019554:	f88d 3060 	strb.w	r3, [sp, #96]	@ 0x60
 8019558:	f7e7 fa50 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 801955c:	4628      	mov	r0, r5

	// Wait acknowledgment or timeout
	while (1) {
		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
		if (services[*queue_index].reception_flag) {
 801955e:	2518      	movs	r5, #24
 8019560:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
	communication->Send(request);
 8019564:	a918      	add	r1, sp, #96	@ 0x60
		if (services[*queue_index].reception_flag) {
 8019566:	fb05 970a 	mla	r7, r5, sl, r9
 801956a:	f8ad 3070 	strh.w	r3, [sp, #112]	@ 0x70
	communication->Send(request);
 801956e:	f7f6 f8cf 	bl	800f710 <_ZN13Communication4SendE13MessageHeader>
 8019572:	a819      	add	r0, sp, #100	@ 0x64
 8019574:	f7e7 f992 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 8019578:	f04f 31ff 	mov.w	r1, #4294967295
 801957c:	f8d9 0000 	ldr.w	r0, [r9]
 8019580:	f7f2 fe1c 	bl	800c1bc <osSemaphoreAcquire>
		if (services[*queue_index].reception_flag) {
 8019584:	7a7b      	ldrb	r3, [r7, #9]
 8019586:	2b00      	cmp	r3, #0
 8019588:	d05c      	beq.n	8019644 <_ZL8UserTaskPv+0x528>
			osDelay(10);
		else if (delay_mode == HAL_DELAY)
			HAL_Delay(10);
	}

	return OK;
 801958a:	2500      	movs	r5, #0
			osSemaphoreRelease(ServiceSemaphore);
 801958c:	f8d9 0000 	ldr.w	r0, [r9]
 8019590:	f7f2 fe48 	bl	800c224 <osSemaphoreRelease>
 8019594:	a815      	add	r0, sp, #84	@ 0x54
 8019596:	f7e7 f981 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801959a:	a80e      	add	r0, sp, #56	@ 0x38
 801959c:	f7e7 f97e 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (flag != OK) return flag;
 80195a0:	b985      	cbnz	r5, 80195c4 <_ZL8UserTaskPv+0x4a8>
	osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 80195a2:	f04f 31ff 	mov.w	r1, #4294967295
 80195a6:	f8d9 0000 	ldr.w	r0, [r9]
 80195aa:	f7f2 fe07 	bl	800c1bc <osSemaphoreAcquire>
	if (services[queue_index].error) {
 80195ae:	2318      	movs	r3, #24
 80195b0:	fb0a 3203 	mla	r2, sl, r3, r3
 80195b4:	444a      	add	r2, r9
 80195b6:	7912      	ldrb	r2, [r2, #4]
 80195b8:	2a00      	cmp	r2, #0
 80195ba:	d05d      	beq.n	8019678 <_ZL8UserTaskPv+0x55c>
		osSemaphoreRelease(ServiceSemaphore);
 80195bc:	f8d9 0000 	ldr.w	r0, [r9]
 80195c0:	f7f2 fe30 	bl	800c224 <osSemaphoreRelease>

	uint32_t pic_data;
	uint16_t pic_length;
	for(;;) {
		services->ReadRemoteRegister<uint32_t>(REG_TIMEBASE, ServiceInterface{.interface=UART_PIC, .address=PICS } , &pic_data, &pic_length, 20);
		leds->SetLED(LED_USER3, GPIO_PIN_SET);
 80195c4:	2201      	movs	r2, #1
 80195c6:	210c      	movs	r1, #12
 80195c8:	9805      	ldr	r0, [sp, #20]
 80195ca:	f7fa f91b 	bl	8013804 <_ZN4LEDS6SetLEDEh13GPIO_PinState>
		osDelay(500);
 80195ce:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80195d2:	f7f2 fd89 	bl	800c0e8 <osDelay>
		leds->SetLED(LED_USER3, GPIO_PIN_RESET);
 80195d6:	2200      	movs	r2, #0
 80195d8:	210c      	movs	r1, #12
 80195da:	9805      	ldr	r0, [sp, #20]
 80195dc:	f7fa f912 	bl	8013804 <_ZN4LEDS6SetLEDEh13GPIO_PinState>
		osDelay(500);
 80195e0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80195e4:	f7f2 fd80 	bl	800c0e8 <osDelay>
	for(;;) {
 80195e8:	e728      	b.n	801943c <_ZL8UserTaskPv+0x320>
	uint8_t registered_type = GetTypeID<T>(&success);
 80195ea:	a812      	add	r0, sp, #72	@ 0x48
 80195ec:	f7ff fb2e 	bl	8018c4c <_ZN9Registers9GetTypeIDIaEEhPb.isra.0>
	if (!success) {
 80195f0:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 80195f4:	2b00      	cmp	r3, #0
 80195f6:	f43f ade4 	beq.w	80191c2 <_ZL8UserTaskPv+0xa6>
	if (target_register->register_info.type != registered_type) {
 80195fa:	7933      	ldrb	r3, [r6, #4]
 80195fc:	4298      	cmp	r0, r3
 80195fe:	f47f ade0 	bne.w	80191c2 <_ZL8UserTaskPv+0xa6>
	if (callbacks[target_register->register_info.type] == NULL) {
 8019602:	3004      	adds	r0, #4
 8019604:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8019608:	2800      	cmp	r0, #0
 801960a:	f43f adda 	beq.w	80191c2 <_ZL8UserTaskPv+0xa6>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 801960e:	7833      	ldrb	r3, [r6, #0]
 8019610:	4f30      	ldr	r7, [pc, #192]	@ (80196d4 <_ZL8UserTaskPv+0x5b8>)
 8019612:	b98b      	cbnz	r3, 8019638 <_ZL8UserTaskPv+0x51c>
 8019614:	7873      	ldrb	r3, [r6, #1]
 8019616:	b97b      	cbnz	r3, 8019638 <_ZL8UserTaskPv+0x51c>
		callback.read = NULL;
 8019618:	f8cd a06c 	str.w	sl, [sp, #108]	@ 0x6c
		target_callback_list->push_back(callback);
 801961c:	a918      	add	r1, sp, #96	@ 0x60
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801961e:	e9d0 2300 	ldrd	r2, r3, [r0]
		callback.write = write;
 8019622:	e9cd 5719 	strd	r5, r7, [sp, #100]	@ 0x64
 8019626:	1a9b      	subs	r3, r3, r2
 8019628:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 801962a:	8173      	strh	r3, [r6, #10]
		target_callback_list->push_back(callback);
 801962c:	f7ff fca0 	bl	8018f70 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE9push_backERKS1_>
	target_register->mode.callbacks = true;
 8019630:	2301      	movs	r3, #1
 8019632:	7073      	strb	r3, [r6, #1]
	target_register->access.write = true;
 8019634:	7233      	strb	r3, [r6, #8]
 8019636:	e5c4      	b.n	80191c2 <_ZL8UserTaskPv+0xa6>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8019638:	8971      	ldrh	r1, [r6, #10]
 801963a:	f7f5 fecb 	bl	800f3d4 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE2atEj>
		callback->write = write;
 801963e:	e9c0 5701 	strd	r5, r7, [r0, #4]
 8019642:	e7f5      	b.n	8019630 <_ZL8UserTaskPv+0x514>
		if (services[*queue_index].timeout > 0 && HAL_GetTick() > services[*queue_index].timeout_timestamp) {
 8019644:	8afb      	ldrh	r3, [r7, #22]
 8019646:	b16b      	cbz	r3, 8019664 <_ZL8UserTaskPv+0x548>
 8019648:	f7e9 fd5c 	bl	8003104 <HAL_GetTick>
 801964c:	fb0a 5305 	mla	r3, sl, r5, r5
 8019650:	f859 3003 	ldr.w	r3, [r9, r3]
 8019654:	4298      	cmp	r0, r3
 8019656:	d905      	bls.n	8019664 <_ZL8UserTaskPv+0x548>
			osSemaphoreRelease(ServiceSemaphore);
 8019658:	f8d9 0000 	ldr.w	r0, [r9]
			return TIMEOUT;
 801965c:	257f      	movs	r5, #127	@ 0x7f
			osSemaphoreRelease(ServiceSemaphore);
 801965e:	f7f2 fde1 	bl	800c224 <osSemaphoreRelease>
			return TIMEOUT;
 8019662:	e797      	b.n	8019594 <_ZL8UserTaskPv+0x478>
		osSemaphoreRelease(ServiceSemaphore);
 8019664:	f8d9 0000 	ldr.w	r0, [r9]
 8019668:	f7f2 fddc 	bl	800c224 <osSemaphoreRelease>
			osDelay(10);
 801966c:	200a      	movs	r0, #10
 801966e:	f7f2 fd3b 	bl	800c0e8 <osDelay>
 8019672:	e781      	b.n	8019578 <_ZL8UserTaskPv+0x45c>
	if (not communication->BuildPayload(&request, element)) return ERROR;
 8019674:	25ff      	movs	r5, #255	@ 0xff
 8019676:	e78d      	b.n	8019594 <_ZL8UserTaskPv+0x478>
	*length = services[queue_index].configuration.length;
 8019678:	fb03 930a 	mla	r3, r3, sl, r9
 801967c:	8a1a      	ldrh	r2, [r3, #16]
	switch (services[queue_index].configuration.register_.type) {
 801967e:	7b1b      	ldrb	r3, [r3, #12]
 8019680:	2b08      	cmp	r3, #8
 8019682:	d80c      	bhi.n	801969e <_ZL8UserTaskPv+0x582>
 8019684:	e8df f003 	tbb	[pc, r3]
 8019688:	0b140b05 	.word	0x0b140b05
 801968c:	0b0b0b1a 	.word	0x0b0b0b1a
 8019690:	1f          	.byte	0x1f
 8019691:	00          	.byte	0x00
		TranferData<uint8_t>(&buffer_uint8[queue_index][0], (uint8_t*) output, services[queue_index].configuration.length);
 8019692:	eb09 210a 	add.w	r1, r9, sl, lsl #8
		to[buffer_index] = from[buffer_index];
 8019696:	3138      	adds	r1, #56	@ 0x38
 8019698:	a808      	add	r0, sp, #32
 801969a:	f000 fb43 	bl	8019d24 <memcpy>
	osSemaphoreRelease(ServiceSemaphore);
 801969e:	f8d9 0000 	ldr.w	r0, [r9]
 80196a2:	f7f2 fdbf 	bl	800c224 <osSemaphoreRelease>
	RemoveFromQueue(queue_index);
 80196a6:	4651      	mov	r1, sl
 80196a8:	4648      	mov	r0, r9
 80196aa:	f7fe fd06 	bl	80180ba <_ZN8Services15RemoveFromQueueEh>
	return OK;
 80196ae:	e789      	b.n	80195c4 <_ZL8UserTaskPv+0x4a8>
		TranferData<uint32_t>(&buffer_uint32[queue_index][0], (uint32_t*) output, services[queue_index].configuration.length);
 80196b0:	eb09 218a 	add.w	r1, r9, sl, lsl #10
		to[buffer_index] = from[buffer_index];
 80196b4:	0092      	lsls	r2, r2, #2
 80196b6:	f501 710e 	add.w	r1, r1, #568	@ 0x238
 80196ba:	e7ed      	b.n	8019698 <_ZL8UserTaskPv+0x57c>
		TranferData<int8_t>(&buffer_int8[queue_index][0], (int8_t*) output, services[queue_index].configuration.length);
 80196bc:	eb09 210a 	add.w	r1, r9, sl, lsl #8
		to[buffer_index] = from[buffer_index];
 80196c0:	f601 2138 	addw	r1, r1, #2616	@ 0xa38
 80196c4:	e7e8      	b.n	8019698 <_ZL8UserTaskPv+0x57c>
		TranferData<float>(&buffer_float[queue_index][0], (float*) output, services[queue_index].configuration.length);
 80196c6:	eb09 218a 	add.w	r1, r9, sl, lsl #10
		to[buffer_index] = from[buffer_index];
 80196ca:	0092      	lsls	r2, r2, #2
 80196cc:	f601 4138 	addw	r1, r1, #3128	@ 0xc38
 80196d0:	e7e2      	b.n	8019698 <_ZL8UserTaskPv+0x57c>
 80196d2:	bf00      	nop
 80196d4:	08018a29 	.word	0x08018a29

080196d8 <_GLOBAL__sub_I__ZN4UserC2EP9RegistersP17MasterSubscribersP13CommunicationP8ServicesP10PublishersP13HardwareDelayP7SensorsP4LEDS>:
		else {
			leds->SetLED(LED_USER3, GPIO_PIN_RESET);
		}
		osDelay(10);
	}
}
 80196d8:	b508      	push	{r3, lr}
CPG cpg;
 80196da:	4802      	ldr	r0, [pc, #8]	@ (80196e4 <_GLOBAL__sub_I__ZN4UserC2EP9RegistersP17MasterSubscribersP13CommunicationP8ServicesP10PublishersP13HardwareDelayP7SensorsP4LEDS+0xc>)
 80196dc:	f7ff fb64 	bl	8018da8 <_ZN3CPGC1Ev>
}
 80196e0:	bd08      	pop	{r3, pc}
 80196e2:	bf00      	nop
 80196e4:	240071b0 	.word	0x240071b0

080196e8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 80196e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80196ea:	2400      	movs	r4, #0
 80196ec:	2310      	movs	r3, #16
 80196ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80196f2:	6803      	ldr	r3, [r0, #0]
 80196f4:	4615      	mov	r5, r2
 80196f6:	699e      	ldr	r6, [r3, #24]
 80196f8:	6812      	ldr	r2, [r2, #0]
 80196fa:	466b      	mov	r3, sp
 80196fc:	e9cd 4400 	strd	r4, r4, [sp]
 8019700:	47b0      	blx	r6
 8019702:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8019706:	f003 0306 	and.w	r3, r3, #6
 801970a:	2b06      	cmp	r3, #6
 801970c:	bf03      	ittte	eq
 801970e:	9b00      	ldreq	r3, [sp, #0]
 8019710:	602b      	streq	r3, [r5, #0]
 8019712:	2001      	moveq	r0, #1
 8019714:	4620      	movne	r0, r4
 8019716:	b004      	add	sp, #16
 8019718:	bd70      	pop	{r4, r5, r6, pc}

0801971a <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 801971a:	9800      	ldr	r0, [sp, #0]
 801971c:	4290      	cmp	r0, r2
 801971e:	bf0c      	ite	eq
 8019720:	2006      	moveq	r0, #6
 8019722:	2001      	movne	r0, #1
 8019724:	4770      	bx	lr
	...

08019728 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8019728:	b510      	push	{r4, lr}
 801972a:	4b03      	ldr	r3, [pc, #12]	@ (8019738 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 801972c:	6003      	str	r3, [r0, #0]
 801972e:	4604      	mov	r4, r0
 8019730:	f000 f905 	bl	801993e <_ZNSt9type_infoD1Ev>
 8019734:	4620      	mov	r0, r4
 8019736:	bd10      	pop	{r4, pc}
 8019738:	0801a1cc 	.word	0x0801a1cc

0801973c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 801973c:	b510      	push	{r4, lr}
 801973e:	4604      	mov	r4, r0
 8019740:	f7ff fff2 	bl	8019728 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8019744:	4620      	mov	r0, r4
 8019746:	2108      	movs	r1, #8
 8019748:	f000 f842 	bl	80197d0 <_ZdlPvj>
 801974c:	4620      	mov	r0, r4
 801974e:	bd10      	pop	{r4, pc}

08019750 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8019750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019754:	461f      	mov	r7, r3
 8019756:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 801975a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801975e:	4598      	cmp	r8, r3
 8019760:	4606      	mov	r6, r0
 8019762:	4615      	mov	r5, r2
 8019764:	d107      	bne.n	8019776 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8019766:	9907      	ldr	r1, [sp, #28]
 8019768:	f000 f8ee 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 801976c:	b118      	cbz	r0, 8019776 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 801976e:	7165      	strb	r5, [r4, #5]
 8019770:	2000      	movs	r0, #0
 8019772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019776:	4639      	mov	r1, r7
 8019778:	4630      	mov	r0, r6
 801977a:	f000 f8e5 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 801977e:	2800      	cmp	r0, #0
 8019780:	d0f6      	beq.n	8019770 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 8019782:	2301      	movs	r3, #1
 8019784:	f8c4 8000 	str.w	r8, [r4]
 8019788:	7125      	strb	r5, [r4, #4]
 801978a:	71a3      	strb	r3, [r4, #6]
 801978c:	e7f0      	b.n	8019770 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

0801978e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 801978e:	b538      	push	{r3, r4, r5, lr}
 8019790:	4615      	mov	r5, r2
 8019792:	461c      	mov	r4, r3
 8019794:	f000 f8d8 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8019798:	b120      	cbz	r0, 80197a4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 801979a:	2308      	movs	r3, #8
 801979c:	60e3      	str	r3, [r4, #12]
 801979e:	2306      	movs	r3, #6
 80197a0:	6025      	str	r5, [r4, #0]
 80197a2:	7123      	strb	r3, [r4, #4]
 80197a4:	bd38      	pop	{r3, r4, r5, pc}

080197a6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80197a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80197aa:	4605      	mov	r5, r0
 80197ac:	460c      	mov	r4, r1
 80197ae:	4616      	mov	r6, r2
 80197b0:	461f      	mov	r7, r3
 80197b2:	f000 f8c9 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 80197b6:	b948      	cbnz	r0, 80197cc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80197b8:	2f03      	cmp	r7, #3
 80197ba:	d807      	bhi.n	80197cc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80197bc:	6823      	ldr	r3, [r4, #0]
 80197be:	4632      	mov	r2, r6
 80197c0:	4629      	mov	r1, r5
 80197c2:	4620      	mov	r0, r4
 80197c4:	695b      	ldr	r3, [r3, #20]
 80197c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80197ca:	4718      	bx	r3
 80197cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080197d0 <_ZdlPvj>:
 80197d0:	f000 b8df 	b.w	8019992 <_ZdlPv>

080197d4 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>:
 80197d4:	b510      	push	{r4, lr}
 80197d6:	4b03      	ldr	r3, [pc, #12]	@ (80197e4 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev+0x10>)
 80197d8:	6003      	str	r3, [r0, #0]
 80197da:	4604      	mov	r4, r0
 80197dc:	f000 f8af 	bl	801993e <_ZNSt9type_infoD1Ev>
 80197e0:	4620      	mov	r0, r4
 80197e2:	bd10      	pop	{r4, pc}
 80197e4:	0801a240 	.word	0x0801a240

080197e8 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>:
 80197e8:	b510      	push	{r4, lr}
 80197ea:	4604      	mov	r4, r0
 80197ec:	f7ff fff2 	bl	80197d4 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>
 80197f0:	4620      	mov	r0, r4
 80197f2:	2108      	movs	r1, #8
 80197f4:	f7ff ffec 	bl	80197d0 <_ZdlPvj>
 80197f8:	4620      	mov	r0, r4
 80197fa:	bd10      	pop	{r4, pc}

080197fc <__cxa_guard_acquire>:
 80197fc:	6802      	ldr	r2, [r0, #0]
 80197fe:	07d2      	lsls	r2, r2, #31
 8019800:	4603      	mov	r3, r0
 8019802:	d405      	bmi.n	8019810 <__cxa_guard_acquire+0x14>
 8019804:	7842      	ldrb	r2, [r0, #1]
 8019806:	b102      	cbz	r2, 801980a <__cxa_guard_acquire+0xe>
 8019808:	deff      	udf	#255	@ 0xff
 801980a:	2001      	movs	r0, #1
 801980c:	7058      	strb	r0, [r3, #1]
 801980e:	4770      	bx	lr
 8019810:	2000      	movs	r0, #0
 8019812:	4770      	bx	lr

08019814 <__cxa_guard_release>:
 8019814:	2301      	movs	r3, #1
 8019816:	6003      	str	r3, [r0, #0]
 8019818:	4770      	bx	lr

0801981a <_Znwj>:
 801981a:	2801      	cmp	r0, #1
 801981c:	bf38      	it	cc
 801981e:	2001      	movcc	r0, #1
 8019820:	b510      	push	{r4, lr}
 8019822:	4604      	mov	r4, r0
 8019824:	4620      	mov	r0, r4
 8019826:	f000 f8c7 	bl	80199b8 <malloc>
 801982a:	b100      	cbz	r0, 801982e <_Znwj+0x14>
 801982c:	bd10      	pop	{r4, pc}
 801982e:	f000 f8b3 	bl	8019998 <_ZSt15get_new_handlerv>
 8019832:	b908      	cbnz	r0, 8019838 <_Znwj+0x1e>
 8019834:	f000 f8b8 	bl	80199a8 <abort>
 8019838:	4780      	blx	r0
 801983a:	e7f3      	b.n	8019824 <_Znwj+0xa>

0801983c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 801983c:	b510      	push	{r4, lr}
 801983e:	4b03      	ldr	r3, [pc, #12]	@ (801984c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8019840:	6003      	str	r3, [r0, #0]
 8019842:	4604      	mov	r4, r0
 8019844:	f7ff ff70 	bl	8019728 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8019848:	4620      	mov	r0, r4
 801984a:	bd10      	pop	{r4, pc}
 801984c:	0801a2e4 	.word	0x0801a2e4

08019850 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8019850:	b510      	push	{r4, lr}
 8019852:	4604      	mov	r4, r0
 8019854:	f7ff fff2 	bl	801983c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8019858:	4620      	mov	r0, r4
 801985a:	210c      	movs	r1, #12
 801985c:	f7ff ffb8 	bl	80197d0 <_ZdlPvj>
 8019860:	4620      	mov	r0, r4
 8019862:	bd10      	pop	{r4, pc}

08019864 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8019864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019868:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801986c:	4590      	cmp	r8, r2
 801986e:	4606      	mov	r6, r0
 8019870:	460f      	mov	r7, r1
 8019872:	4615      	mov	r5, r2
 8019874:	461c      	mov	r4, r3
 8019876:	d00b      	beq.n	8019890 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 8019878:	68b0      	ldr	r0, [r6, #8]
 801987a:	6803      	ldr	r3, [r0, #0]
 801987c:	f8cd 8018 	str.w	r8, [sp, #24]
 8019880:	6a1e      	ldr	r6, [r3, #32]
 8019882:	462a      	mov	r2, r5
 8019884:	4623      	mov	r3, r4
 8019886:	4639      	mov	r1, r7
 8019888:	46b4      	mov	ip, r6
 801988a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801988e:	4760      	bx	ip
 8019890:	4619      	mov	r1, r3
 8019892:	f000 f859 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 8019896:	2800      	cmp	r0, #0
 8019898:	d0ee      	beq.n	8019878 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 801989a:	2006      	movs	r0, #6
 801989c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080198a0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80198a0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198a4:	460d      	mov	r5, r1
 80198a6:	4619      	mov	r1, r3
 80198a8:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	@ 0x28
 80198ac:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	@ 0x30
 80198b0:	4681      	mov	r9, r0
 80198b2:	4617      	mov	r7, r2
 80198b4:	4698      	mov	r8, r3
 80198b6:	f000 f847 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 80198ba:	b190      	cbz	r0, 80198e2 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 80198bc:	2d00      	cmp	r5, #0
 80198be:	6034      	str	r4, [r6, #0]
 80198c0:	7137      	strb	r7, [r6, #4]
 80198c2:	db09      	blt.n	80198d8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 80198c4:	442c      	add	r4, r5
 80198c6:	45a2      	cmp	sl, r4
 80198c8:	bf14      	ite	ne
 80198ca:	2401      	movne	r4, #1
 80198cc:	2406      	moveq	r4, #6
 80198ce:	71b4      	strb	r4, [r6, #6]
 80198d0:	2000      	movs	r0, #0
 80198d2:	b001      	add	sp, #4
 80198d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198d8:	3502      	adds	r5, #2
 80198da:	d1f9      	bne.n	80198d0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80198dc:	2301      	movs	r3, #1
 80198de:	71b3      	strb	r3, [r6, #6]
 80198e0:	e7f6      	b.n	80198d0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80198e2:	4554      	cmp	r4, sl
 80198e4:	d106      	bne.n	80198f4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80198e6:	4659      	mov	r1, fp
 80198e8:	4648      	mov	r0, r9
 80198ea:	f000 f82d 	bl	8019948 <_ZNKSt9type_info7__equalERKS_>
 80198ee:	b108      	cbz	r0, 80198f4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80198f0:	7177      	strb	r7, [r6, #5]
 80198f2:	e7ed      	b.n	80198d0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80198f4:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80198f8:	6803      	ldr	r3, [r0, #0]
 80198fa:	e9cd a60c 	strd	sl, r6, [sp, #48]	@ 0x30
 80198fe:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	@ 0x28
 8019902:	69dc      	ldr	r4, [r3, #28]
 8019904:	463a      	mov	r2, r7
 8019906:	4643      	mov	r3, r8
 8019908:	4629      	mov	r1, r5
 801990a:	46a4      	mov	ip, r4
 801990c:	b001      	add	sp, #4
 801990e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019912:	4760      	bx	ip

08019914 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8019914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019918:	4607      	mov	r7, r0
 801991a:	460c      	mov	r4, r1
 801991c:	4615      	mov	r5, r2
 801991e:	461e      	mov	r6, r3
 8019920:	f7ff ff35 	bl	801978e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8019924:	b948      	cbnz	r0, 801993a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8019926:	68b8      	ldr	r0, [r7, #8]
 8019928:	6803      	ldr	r3, [r0, #0]
 801992a:	699f      	ldr	r7, [r3, #24]
 801992c:	462a      	mov	r2, r5
 801992e:	4633      	mov	r3, r6
 8019930:	4621      	mov	r1, r4
 8019932:	46bc      	mov	ip, r7
 8019934:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019938:	4760      	bx	ip
 801993a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801993e <_ZNSt9type_infoD1Ev>:
 801993e:	4770      	bx	lr

08019940 <_ZNKSt9type_info14__is_pointer_pEv>:
 8019940:	2000      	movs	r0, #0
 8019942:	4770      	bx	lr

08019944 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
 8019944:	2000      	movs	r0, #0
 8019946:	4770      	bx	lr

08019948 <_ZNKSt9type_info7__equalERKS_>:
 8019948:	4281      	cmp	r1, r0
 801994a:	b508      	push	{r3, lr}
 801994c:	d00e      	beq.n	801996c <_ZNKSt9type_info7__equalERKS_+0x24>
 801994e:	6840      	ldr	r0, [r0, #4]
 8019950:	7803      	ldrb	r3, [r0, #0]
 8019952:	2b2a      	cmp	r3, #42	@ 0x2a
 8019954:	d00c      	beq.n	8019970 <_ZNKSt9type_info7__equalERKS_+0x28>
 8019956:	6849      	ldr	r1, [r1, #4]
 8019958:	780b      	ldrb	r3, [r1, #0]
 801995a:	2b2a      	cmp	r3, #42	@ 0x2a
 801995c:	bf08      	it	eq
 801995e:	3101      	addeq	r1, #1
 8019960:	f7e6 fcbe 	bl	80002e0 <strcmp>
 8019964:	fab0 f080 	clz	r0, r0
 8019968:	0940      	lsrs	r0, r0, #5
 801996a:	bd08      	pop	{r3, pc}
 801996c:	2001      	movs	r0, #1
 801996e:	e7fc      	b.n	801996a <_ZNKSt9type_info7__equalERKS_+0x22>
 8019970:	2000      	movs	r0, #0
 8019972:	e7fa      	b.n	801996a <_ZNKSt9type_info7__equalERKS_+0x22>

08019974 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
 8019974:	f7ff bfe8 	b.w	8019948 <_ZNKSt9type_info7__equalERKS_>

08019978 <_ZSt17__throw_bad_allocv>:
 8019978:	b508      	push	{r3, lr}
 801997a:	f000 f815 	bl	80199a8 <abort>

0801997e <_ZSt28__throw_bad_array_new_lengthv>:
 801997e:	b508      	push	{r3, lr}
 8019980:	f000 f812 	bl	80199a8 <abort>

08019984 <_ZSt20__throw_length_errorPKc>:
 8019984:	b508      	push	{r3, lr}
 8019986:	f000 f80f 	bl	80199a8 <abort>

0801998a <_ZSt24__throw_out_of_range_fmtPKcz>:
 801998a:	b40f      	push	{r0, r1, r2, r3}
 801998c:	b508      	push	{r3, lr}
 801998e:	f000 f80b 	bl	80199a8 <abort>

08019992 <_ZdlPv>:
 8019992:	f000 b819 	b.w	80199c8 <free>
	...

08019998 <_ZSt15get_new_handlerv>:
 8019998:	4b02      	ldr	r3, [pc, #8]	@ (80199a4 <_ZSt15get_new_handlerv+0xc>)
 801999a:	6818      	ldr	r0, [r3, #0]
 801999c:	f3bf 8f5b 	dmb	ish
 80199a0:	4770      	bx	lr
 80199a2:	bf00      	nop
 80199a4:	24009454 	.word	0x24009454

080199a8 <abort>:
 80199a8:	b508      	push	{r3, lr}
 80199aa:	2006      	movs	r0, #6
 80199ac:	f000 f90c 	bl	8019bc8 <raise>
 80199b0:	2001      	movs	r0, #1
 80199b2:	f7e9 fab3 	bl	8002f1c <_exit>
	...

080199b8 <malloc>:
 80199b8:	4b02      	ldr	r3, [pc, #8]	@ (80199c4 <malloc+0xc>)
 80199ba:	4601      	mov	r1, r0
 80199bc:	6818      	ldr	r0, [r3, #0]
 80199be:	f000 b82d 	b.w	8019a1c <_malloc_r>
 80199c2:	bf00      	nop
 80199c4:	2400002c 	.word	0x2400002c

080199c8 <free>:
 80199c8:	4b02      	ldr	r3, [pc, #8]	@ (80199d4 <free+0xc>)
 80199ca:	4601      	mov	r1, r0
 80199cc:	6818      	ldr	r0, [r3, #0]
 80199ce:	f000 b9b7 	b.w	8019d40 <_free_r>
 80199d2:	bf00      	nop
 80199d4:	2400002c 	.word	0x2400002c

080199d8 <sbrk_aligned>:
 80199d8:	b570      	push	{r4, r5, r6, lr}
 80199da:	4e0f      	ldr	r6, [pc, #60]	@ (8019a18 <sbrk_aligned+0x40>)
 80199dc:	460c      	mov	r4, r1
 80199de:	6831      	ldr	r1, [r6, #0]
 80199e0:	4605      	mov	r5, r0
 80199e2:	b911      	cbnz	r1, 80199ea <sbrk_aligned+0x12>
 80199e4:	f000 f962 	bl	8019cac <_sbrk_r>
 80199e8:	6030      	str	r0, [r6, #0]
 80199ea:	4621      	mov	r1, r4
 80199ec:	4628      	mov	r0, r5
 80199ee:	f000 f95d 	bl	8019cac <_sbrk_r>
 80199f2:	1c43      	adds	r3, r0, #1
 80199f4:	d103      	bne.n	80199fe <sbrk_aligned+0x26>
 80199f6:	f04f 34ff 	mov.w	r4, #4294967295
 80199fa:	4620      	mov	r0, r4
 80199fc:	bd70      	pop	{r4, r5, r6, pc}
 80199fe:	1cc4      	adds	r4, r0, #3
 8019a00:	f024 0403 	bic.w	r4, r4, #3
 8019a04:	42a0      	cmp	r0, r4
 8019a06:	d0f8      	beq.n	80199fa <sbrk_aligned+0x22>
 8019a08:	1a21      	subs	r1, r4, r0
 8019a0a:	4628      	mov	r0, r5
 8019a0c:	f000 f94e 	bl	8019cac <_sbrk_r>
 8019a10:	3001      	adds	r0, #1
 8019a12:	d1f2      	bne.n	80199fa <sbrk_aligned+0x22>
 8019a14:	e7ef      	b.n	80199f6 <sbrk_aligned+0x1e>
 8019a16:	bf00      	nop
 8019a18:	24009458 	.word	0x24009458

08019a1c <_malloc_r>:
 8019a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019a20:	1ccd      	adds	r5, r1, #3
 8019a22:	f025 0503 	bic.w	r5, r5, #3
 8019a26:	3508      	adds	r5, #8
 8019a28:	2d0c      	cmp	r5, #12
 8019a2a:	bf38      	it	cc
 8019a2c:	250c      	movcc	r5, #12
 8019a2e:	2d00      	cmp	r5, #0
 8019a30:	4606      	mov	r6, r0
 8019a32:	db01      	blt.n	8019a38 <_malloc_r+0x1c>
 8019a34:	42a9      	cmp	r1, r5
 8019a36:	d904      	bls.n	8019a42 <_malloc_r+0x26>
 8019a38:	230c      	movs	r3, #12
 8019a3a:	6033      	str	r3, [r6, #0]
 8019a3c:	2000      	movs	r0, #0
 8019a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019a42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8019b18 <_malloc_r+0xfc>
 8019a46:	f000 f869 	bl	8019b1c <__malloc_lock>
 8019a4a:	f8d8 3000 	ldr.w	r3, [r8]
 8019a4e:	461c      	mov	r4, r3
 8019a50:	bb44      	cbnz	r4, 8019aa4 <_malloc_r+0x88>
 8019a52:	4629      	mov	r1, r5
 8019a54:	4630      	mov	r0, r6
 8019a56:	f7ff ffbf 	bl	80199d8 <sbrk_aligned>
 8019a5a:	1c43      	adds	r3, r0, #1
 8019a5c:	4604      	mov	r4, r0
 8019a5e:	d158      	bne.n	8019b12 <_malloc_r+0xf6>
 8019a60:	f8d8 4000 	ldr.w	r4, [r8]
 8019a64:	4627      	mov	r7, r4
 8019a66:	2f00      	cmp	r7, #0
 8019a68:	d143      	bne.n	8019af2 <_malloc_r+0xd6>
 8019a6a:	2c00      	cmp	r4, #0
 8019a6c:	d04b      	beq.n	8019b06 <_malloc_r+0xea>
 8019a6e:	6823      	ldr	r3, [r4, #0]
 8019a70:	4639      	mov	r1, r7
 8019a72:	4630      	mov	r0, r6
 8019a74:	eb04 0903 	add.w	r9, r4, r3
 8019a78:	f000 f918 	bl	8019cac <_sbrk_r>
 8019a7c:	4581      	cmp	r9, r0
 8019a7e:	d142      	bne.n	8019b06 <_malloc_r+0xea>
 8019a80:	6821      	ldr	r1, [r4, #0]
 8019a82:	1a6d      	subs	r5, r5, r1
 8019a84:	4629      	mov	r1, r5
 8019a86:	4630      	mov	r0, r6
 8019a88:	f7ff ffa6 	bl	80199d8 <sbrk_aligned>
 8019a8c:	3001      	adds	r0, #1
 8019a8e:	d03a      	beq.n	8019b06 <_malloc_r+0xea>
 8019a90:	6823      	ldr	r3, [r4, #0]
 8019a92:	442b      	add	r3, r5
 8019a94:	6023      	str	r3, [r4, #0]
 8019a96:	f8d8 3000 	ldr.w	r3, [r8]
 8019a9a:	685a      	ldr	r2, [r3, #4]
 8019a9c:	bb62      	cbnz	r2, 8019af8 <_malloc_r+0xdc>
 8019a9e:	f8c8 7000 	str.w	r7, [r8]
 8019aa2:	e00f      	b.n	8019ac4 <_malloc_r+0xa8>
 8019aa4:	6822      	ldr	r2, [r4, #0]
 8019aa6:	1b52      	subs	r2, r2, r5
 8019aa8:	d420      	bmi.n	8019aec <_malloc_r+0xd0>
 8019aaa:	2a0b      	cmp	r2, #11
 8019aac:	d917      	bls.n	8019ade <_malloc_r+0xc2>
 8019aae:	1961      	adds	r1, r4, r5
 8019ab0:	42a3      	cmp	r3, r4
 8019ab2:	6025      	str	r5, [r4, #0]
 8019ab4:	bf18      	it	ne
 8019ab6:	6059      	strne	r1, [r3, #4]
 8019ab8:	6863      	ldr	r3, [r4, #4]
 8019aba:	bf08      	it	eq
 8019abc:	f8c8 1000 	streq.w	r1, [r8]
 8019ac0:	5162      	str	r2, [r4, r5]
 8019ac2:	604b      	str	r3, [r1, #4]
 8019ac4:	4630      	mov	r0, r6
 8019ac6:	f000 f82f 	bl	8019b28 <__malloc_unlock>
 8019aca:	f104 000b 	add.w	r0, r4, #11
 8019ace:	1d23      	adds	r3, r4, #4
 8019ad0:	f020 0007 	bic.w	r0, r0, #7
 8019ad4:	1ac2      	subs	r2, r0, r3
 8019ad6:	bf1c      	itt	ne
 8019ad8:	1a1b      	subne	r3, r3, r0
 8019ada:	50a3      	strne	r3, [r4, r2]
 8019adc:	e7af      	b.n	8019a3e <_malloc_r+0x22>
 8019ade:	6862      	ldr	r2, [r4, #4]
 8019ae0:	42a3      	cmp	r3, r4
 8019ae2:	bf0c      	ite	eq
 8019ae4:	f8c8 2000 	streq.w	r2, [r8]
 8019ae8:	605a      	strne	r2, [r3, #4]
 8019aea:	e7eb      	b.n	8019ac4 <_malloc_r+0xa8>
 8019aec:	4623      	mov	r3, r4
 8019aee:	6864      	ldr	r4, [r4, #4]
 8019af0:	e7ae      	b.n	8019a50 <_malloc_r+0x34>
 8019af2:	463c      	mov	r4, r7
 8019af4:	687f      	ldr	r7, [r7, #4]
 8019af6:	e7b6      	b.n	8019a66 <_malloc_r+0x4a>
 8019af8:	461a      	mov	r2, r3
 8019afa:	685b      	ldr	r3, [r3, #4]
 8019afc:	42a3      	cmp	r3, r4
 8019afe:	d1fb      	bne.n	8019af8 <_malloc_r+0xdc>
 8019b00:	2300      	movs	r3, #0
 8019b02:	6053      	str	r3, [r2, #4]
 8019b04:	e7de      	b.n	8019ac4 <_malloc_r+0xa8>
 8019b06:	230c      	movs	r3, #12
 8019b08:	6033      	str	r3, [r6, #0]
 8019b0a:	4630      	mov	r0, r6
 8019b0c:	f000 f80c 	bl	8019b28 <__malloc_unlock>
 8019b10:	e794      	b.n	8019a3c <_malloc_r+0x20>
 8019b12:	6005      	str	r5, [r0, #0]
 8019b14:	e7d6      	b.n	8019ac4 <_malloc_r+0xa8>
 8019b16:	bf00      	nop
 8019b18:	2400945c 	.word	0x2400945c

08019b1c <__malloc_lock>:
 8019b1c:	4801      	ldr	r0, [pc, #4]	@ (8019b24 <__malloc_lock+0x8>)
 8019b1e:	f000 b8ff 	b.w	8019d20 <__retarget_lock_acquire_recursive>
 8019b22:	bf00      	nop
 8019b24:	2400959c 	.word	0x2400959c

08019b28 <__malloc_unlock>:
 8019b28:	4801      	ldr	r0, [pc, #4]	@ (8019b30 <__malloc_unlock+0x8>)
 8019b2a:	f000 b8fa 	b.w	8019d22 <__retarget_lock_release_recursive>
 8019b2e:	bf00      	nop
 8019b30:	2400959c 	.word	0x2400959c

08019b34 <memmove>:
 8019b34:	4288      	cmp	r0, r1
 8019b36:	b510      	push	{r4, lr}
 8019b38:	eb01 0402 	add.w	r4, r1, r2
 8019b3c:	d902      	bls.n	8019b44 <memmove+0x10>
 8019b3e:	4284      	cmp	r4, r0
 8019b40:	4623      	mov	r3, r4
 8019b42:	d807      	bhi.n	8019b54 <memmove+0x20>
 8019b44:	1e43      	subs	r3, r0, #1
 8019b46:	42a1      	cmp	r1, r4
 8019b48:	d008      	beq.n	8019b5c <memmove+0x28>
 8019b4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019b4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019b52:	e7f8      	b.n	8019b46 <memmove+0x12>
 8019b54:	4402      	add	r2, r0
 8019b56:	4601      	mov	r1, r0
 8019b58:	428a      	cmp	r2, r1
 8019b5a:	d100      	bne.n	8019b5e <memmove+0x2a>
 8019b5c:	bd10      	pop	{r4, pc}
 8019b5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019b62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019b66:	e7f7      	b.n	8019b58 <memmove+0x24>

08019b68 <memset>:
 8019b68:	4402      	add	r2, r0
 8019b6a:	4603      	mov	r3, r0
 8019b6c:	4293      	cmp	r3, r2
 8019b6e:	d100      	bne.n	8019b72 <memset+0xa>
 8019b70:	4770      	bx	lr
 8019b72:	f803 1b01 	strb.w	r1, [r3], #1
 8019b76:	e7f9      	b.n	8019b6c <memset+0x4>

08019b78 <_raise_r>:
 8019b78:	291f      	cmp	r1, #31
 8019b7a:	b538      	push	{r3, r4, r5, lr}
 8019b7c:	4605      	mov	r5, r0
 8019b7e:	460c      	mov	r4, r1
 8019b80:	d904      	bls.n	8019b8c <_raise_r+0x14>
 8019b82:	2316      	movs	r3, #22
 8019b84:	6003      	str	r3, [r0, #0]
 8019b86:	f04f 30ff 	mov.w	r0, #4294967295
 8019b8a:	bd38      	pop	{r3, r4, r5, pc}
 8019b8c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8019b8e:	b112      	cbz	r2, 8019b96 <_raise_r+0x1e>
 8019b90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019b94:	b94b      	cbnz	r3, 8019baa <_raise_r+0x32>
 8019b96:	4628      	mov	r0, r5
 8019b98:	f000 f886 	bl	8019ca8 <_getpid_r>
 8019b9c:	4622      	mov	r2, r4
 8019b9e:	4601      	mov	r1, r0
 8019ba0:	4628      	mov	r0, r5
 8019ba2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019ba6:	f000 b86d 	b.w	8019c84 <_kill_r>
 8019baa:	2b01      	cmp	r3, #1
 8019bac:	d00a      	beq.n	8019bc4 <_raise_r+0x4c>
 8019bae:	1c59      	adds	r1, r3, #1
 8019bb0:	d103      	bne.n	8019bba <_raise_r+0x42>
 8019bb2:	2316      	movs	r3, #22
 8019bb4:	6003      	str	r3, [r0, #0]
 8019bb6:	2001      	movs	r0, #1
 8019bb8:	e7e7      	b.n	8019b8a <_raise_r+0x12>
 8019bba:	2100      	movs	r1, #0
 8019bbc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8019bc0:	4620      	mov	r0, r4
 8019bc2:	4798      	blx	r3
 8019bc4:	2000      	movs	r0, #0
 8019bc6:	e7e0      	b.n	8019b8a <_raise_r+0x12>

08019bc8 <raise>:
 8019bc8:	4b02      	ldr	r3, [pc, #8]	@ (8019bd4 <raise+0xc>)
 8019bca:	4601      	mov	r1, r0
 8019bcc:	6818      	ldr	r0, [r3, #0]
 8019bce:	f7ff bfd3 	b.w	8019b78 <_raise_r>
 8019bd2:	bf00      	nop
 8019bd4:	2400002c 	.word	0x2400002c

08019bd8 <_reclaim_reent>:
 8019bd8:	4b29      	ldr	r3, [pc, #164]	@ (8019c80 <_reclaim_reent+0xa8>)
 8019bda:	681b      	ldr	r3, [r3, #0]
 8019bdc:	4283      	cmp	r3, r0
 8019bde:	b570      	push	{r4, r5, r6, lr}
 8019be0:	4604      	mov	r4, r0
 8019be2:	d04b      	beq.n	8019c7c <_reclaim_reent+0xa4>
 8019be4:	69c3      	ldr	r3, [r0, #28]
 8019be6:	b1ab      	cbz	r3, 8019c14 <_reclaim_reent+0x3c>
 8019be8:	68db      	ldr	r3, [r3, #12]
 8019bea:	b16b      	cbz	r3, 8019c08 <_reclaim_reent+0x30>
 8019bec:	2500      	movs	r5, #0
 8019bee:	69e3      	ldr	r3, [r4, #28]
 8019bf0:	68db      	ldr	r3, [r3, #12]
 8019bf2:	5959      	ldr	r1, [r3, r5]
 8019bf4:	2900      	cmp	r1, #0
 8019bf6:	d13b      	bne.n	8019c70 <_reclaim_reent+0x98>
 8019bf8:	3504      	adds	r5, #4
 8019bfa:	2d80      	cmp	r5, #128	@ 0x80
 8019bfc:	d1f7      	bne.n	8019bee <_reclaim_reent+0x16>
 8019bfe:	69e3      	ldr	r3, [r4, #28]
 8019c00:	4620      	mov	r0, r4
 8019c02:	68d9      	ldr	r1, [r3, #12]
 8019c04:	f000 f89c 	bl	8019d40 <_free_r>
 8019c08:	69e3      	ldr	r3, [r4, #28]
 8019c0a:	6819      	ldr	r1, [r3, #0]
 8019c0c:	b111      	cbz	r1, 8019c14 <_reclaim_reent+0x3c>
 8019c0e:	4620      	mov	r0, r4
 8019c10:	f000 f896 	bl	8019d40 <_free_r>
 8019c14:	6961      	ldr	r1, [r4, #20]
 8019c16:	b111      	cbz	r1, 8019c1e <_reclaim_reent+0x46>
 8019c18:	4620      	mov	r0, r4
 8019c1a:	f000 f891 	bl	8019d40 <_free_r>
 8019c1e:	69e1      	ldr	r1, [r4, #28]
 8019c20:	b111      	cbz	r1, 8019c28 <_reclaim_reent+0x50>
 8019c22:	4620      	mov	r0, r4
 8019c24:	f000 f88c 	bl	8019d40 <_free_r>
 8019c28:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8019c2a:	b111      	cbz	r1, 8019c32 <_reclaim_reent+0x5a>
 8019c2c:	4620      	mov	r0, r4
 8019c2e:	f000 f887 	bl	8019d40 <_free_r>
 8019c32:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019c34:	b111      	cbz	r1, 8019c3c <_reclaim_reent+0x64>
 8019c36:	4620      	mov	r0, r4
 8019c38:	f000 f882 	bl	8019d40 <_free_r>
 8019c3c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8019c3e:	b111      	cbz	r1, 8019c46 <_reclaim_reent+0x6e>
 8019c40:	4620      	mov	r0, r4
 8019c42:	f000 f87d 	bl	8019d40 <_free_r>
 8019c46:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8019c48:	b111      	cbz	r1, 8019c50 <_reclaim_reent+0x78>
 8019c4a:	4620      	mov	r0, r4
 8019c4c:	f000 f878 	bl	8019d40 <_free_r>
 8019c50:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8019c52:	b111      	cbz	r1, 8019c5a <_reclaim_reent+0x82>
 8019c54:	4620      	mov	r0, r4
 8019c56:	f000 f873 	bl	8019d40 <_free_r>
 8019c5a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8019c5c:	b111      	cbz	r1, 8019c64 <_reclaim_reent+0x8c>
 8019c5e:	4620      	mov	r0, r4
 8019c60:	f000 f86e 	bl	8019d40 <_free_r>
 8019c64:	6a23      	ldr	r3, [r4, #32]
 8019c66:	b14b      	cbz	r3, 8019c7c <_reclaim_reent+0xa4>
 8019c68:	4620      	mov	r0, r4
 8019c6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019c6e:	4718      	bx	r3
 8019c70:	680e      	ldr	r6, [r1, #0]
 8019c72:	4620      	mov	r0, r4
 8019c74:	f000 f864 	bl	8019d40 <_free_r>
 8019c78:	4631      	mov	r1, r6
 8019c7a:	e7bb      	b.n	8019bf4 <_reclaim_reent+0x1c>
 8019c7c:	bd70      	pop	{r4, r5, r6, pc}
 8019c7e:	bf00      	nop
 8019c80:	2400002c 	.word	0x2400002c

08019c84 <_kill_r>:
 8019c84:	b538      	push	{r3, r4, r5, lr}
 8019c86:	4d07      	ldr	r5, [pc, #28]	@ (8019ca4 <_kill_r+0x20>)
 8019c88:	2300      	movs	r3, #0
 8019c8a:	4604      	mov	r4, r0
 8019c8c:	4608      	mov	r0, r1
 8019c8e:	4611      	mov	r1, r2
 8019c90:	602b      	str	r3, [r5, #0]
 8019c92:	f7e9 f93b 	bl	8002f0c <_kill>
 8019c96:	1c43      	adds	r3, r0, #1
 8019c98:	d102      	bne.n	8019ca0 <_kill_r+0x1c>
 8019c9a:	682b      	ldr	r3, [r5, #0]
 8019c9c:	b103      	cbz	r3, 8019ca0 <_kill_r+0x1c>
 8019c9e:	6023      	str	r3, [r4, #0]
 8019ca0:	bd38      	pop	{r3, r4, r5, pc}
 8019ca2:	bf00      	nop
 8019ca4:	24009598 	.word	0x24009598

08019ca8 <_getpid_r>:
 8019ca8:	f7e9 b92e 	b.w	8002f08 <_getpid>

08019cac <_sbrk_r>:
 8019cac:	b538      	push	{r3, r4, r5, lr}
 8019cae:	4d06      	ldr	r5, [pc, #24]	@ (8019cc8 <_sbrk_r+0x1c>)
 8019cb0:	2300      	movs	r3, #0
 8019cb2:	4604      	mov	r4, r0
 8019cb4:	4608      	mov	r0, r1
 8019cb6:	602b      	str	r3, [r5, #0]
 8019cb8:	f7e9 f936 	bl	8002f28 <_sbrk>
 8019cbc:	1c43      	adds	r3, r0, #1
 8019cbe:	d102      	bne.n	8019cc6 <_sbrk_r+0x1a>
 8019cc0:	682b      	ldr	r3, [r5, #0]
 8019cc2:	b103      	cbz	r3, 8019cc6 <_sbrk_r+0x1a>
 8019cc4:	6023      	str	r3, [r4, #0]
 8019cc6:	bd38      	pop	{r3, r4, r5, pc}
 8019cc8:	24009598 	.word	0x24009598

08019ccc <__errno>:
 8019ccc:	4b01      	ldr	r3, [pc, #4]	@ (8019cd4 <__errno+0x8>)
 8019cce:	6818      	ldr	r0, [r3, #0]
 8019cd0:	4770      	bx	lr
 8019cd2:	bf00      	nop
 8019cd4:	2400002c 	.word	0x2400002c

08019cd8 <__libc_init_array>:
 8019cd8:	b570      	push	{r4, r5, r6, lr}
 8019cda:	4d0d      	ldr	r5, [pc, #52]	@ (8019d10 <__libc_init_array+0x38>)
 8019cdc:	4c0d      	ldr	r4, [pc, #52]	@ (8019d14 <__libc_init_array+0x3c>)
 8019cde:	1b64      	subs	r4, r4, r5
 8019ce0:	10a4      	asrs	r4, r4, #2
 8019ce2:	2600      	movs	r6, #0
 8019ce4:	42a6      	cmp	r6, r4
 8019ce6:	d109      	bne.n	8019cfc <__libc_init_array+0x24>
 8019ce8:	4d0b      	ldr	r5, [pc, #44]	@ (8019d18 <__libc_init_array+0x40>)
 8019cea:	4c0c      	ldr	r4, [pc, #48]	@ (8019d1c <__libc_init_array+0x44>)
 8019cec:	f000 f872 	bl	8019dd4 <_init>
 8019cf0:	1b64      	subs	r4, r4, r5
 8019cf2:	10a4      	asrs	r4, r4, #2
 8019cf4:	2600      	movs	r6, #0
 8019cf6:	42a6      	cmp	r6, r4
 8019cf8:	d105      	bne.n	8019d06 <__libc_init_array+0x2e>
 8019cfa:	bd70      	pop	{r4, r5, r6, pc}
 8019cfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8019d00:	4798      	blx	r3
 8019d02:	3601      	adds	r6, #1
 8019d04:	e7ee      	b.n	8019ce4 <__libc_init_array+0xc>
 8019d06:	f855 3b04 	ldr.w	r3, [r5], #4
 8019d0a:	4798      	blx	r3
 8019d0c:	3601      	adds	r6, #1
 8019d0e:	e7f2      	b.n	8019cf6 <__libc_init_array+0x1e>
 8019d10:	0801a328 	.word	0x0801a328
 8019d14:	0801a328 	.word	0x0801a328
 8019d18:	0801a328 	.word	0x0801a328
 8019d1c:	0801a334 	.word	0x0801a334

08019d20 <__retarget_lock_acquire_recursive>:
 8019d20:	4770      	bx	lr

08019d22 <__retarget_lock_release_recursive>:
 8019d22:	4770      	bx	lr

08019d24 <memcpy>:
 8019d24:	440a      	add	r2, r1
 8019d26:	4291      	cmp	r1, r2
 8019d28:	f100 33ff 	add.w	r3, r0, #4294967295
 8019d2c:	d100      	bne.n	8019d30 <memcpy+0xc>
 8019d2e:	4770      	bx	lr
 8019d30:	b510      	push	{r4, lr}
 8019d32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019d36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019d3a:	4291      	cmp	r1, r2
 8019d3c:	d1f9      	bne.n	8019d32 <memcpy+0xe>
 8019d3e:	bd10      	pop	{r4, pc}

08019d40 <_free_r>:
 8019d40:	b538      	push	{r3, r4, r5, lr}
 8019d42:	4605      	mov	r5, r0
 8019d44:	2900      	cmp	r1, #0
 8019d46:	d041      	beq.n	8019dcc <_free_r+0x8c>
 8019d48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019d4c:	1f0c      	subs	r4, r1, #4
 8019d4e:	2b00      	cmp	r3, #0
 8019d50:	bfb8      	it	lt
 8019d52:	18e4      	addlt	r4, r4, r3
 8019d54:	f7ff fee2 	bl	8019b1c <__malloc_lock>
 8019d58:	4a1d      	ldr	r2, [pc, #116]	@ (8019dd0 <_free_r+0x90>)
 8019d5a:	6813      	ldr	r3, [r2, #0]
 8019d5c:	b933      	cbnz	r3, 8019d6c <_free_r+0x2c>
 8019d5e:	6063      	str	r3, [r4, #4]
 8019d60:	6014      	str	r4, [r2, #0]
 8019d62:	4628      	mov	r0, r5
 8019d64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019d68:	f7ff bede 	b.w	8019b28 <__malloc_unlock>
 8019d6c:	42a3      	cmp	r3, r4
 8019d6e:	d908      	bls.n	8019d82 <_free_r+0x42>
 8019d70:	6820      	ldr	r0, [r4, #0]
 8019d72:	1821      	adds	r1, r4, r0
 8019d74:	428b      	cmp	r3, r1
 8019d76:	bf01      	itttt	eq
 8019d78:	6819      	ldreq	r1, [r3, #0]
 8019d7a:	685b      	ldreq	r3, [r3, #4]
 8019d7c:	1809      	addeq	r1, r1, r0
 8019d7e:	6021      	streq	r1, [r4, #0]
 8019d80:	e7ed      	b.n	8019d5e <_free_r+0x1e>
 8019d82:	461a      	mov	r2, r3
 8019d84:	685b      	ldr	r3, [r3, #4]
 8019d86:	b10b      	cbz	r3, 8019d8c <_free_r+0x4c>
 8019d88:	42a3      	cmp	r3, r4
 8019d8a:	d9fa      	bls.n	8019d82 <_free_r+0x42>
 8019d8c:	6811      	ldr	r1, [r2, #0]
 8019d8e:	1850      	adds	r0, r2, r1
 8019d90:	42a0      	cmp	r0, r4
 8019d92:	d10b      	bne.n	8019dac <_free_r+0x6c>
 8019d94:	6820      	ldr	r0, [r4, #0]
 8019d96:	4401      	add	r1, r0
 8019d98:	1850      	adds	r0, r2, r1
 8019d9a:	4283      	cmp	r3, r0
 8019d9c:	6011      	str	r1, [r2, #0]
 8019d9e:	d1e0      	bne.n	8019d62 <_free_r+0x22>
 8019da0:	6818      	ldr	r0, [r3, #0]
 8019da2:	685b      	ldr	r3, [r3, #4]
 8019da4:	6053      	str	r3, [r2, #4]
 8019da6:	4408      	add	r0, r1
 8019da8:	6010      	str	r0, [r2, #0]
 8019daa:	e7da      	b.n	8019d62 <_free_r+0x22>
 8019dac:	d902      	bls.n	8019db4 <_free_r+0x74>
 8019dae:	230c      	movs	r3, #12
 8019db0:	602b      	str	r3, [r5, #0]
 8019db2:	e7d6      	b.n	8019d62 <_free_r+0x22>
 8019db4:	6820      	ldr	r0, [r4, #0]
 8019db6:	1821      	adds	r1, r4, r0
 8019db8:	428b      	cmp	r3, r1
 8019dba:	bf04      	itt	eq
 8019dbc:	6819      	ldreq	r1, [r3, #0]
 8019dbe:	685b      	ldreq	r3, [r3, #4]
 8019dc0:	6063      	str	r3, [r4, #4]
 8019dc2:	bf04      	itt	eq
 8019dc4:	1809      	addeq	r1, r1, r0
 8019dc6:	6021      	streq	r1, [r4, #0]
 8019dc8:	6054      	str	r4, [r2, #4]
 8019dca:	e7ca      	b.n	8019d62 <_free_r+0x22>
 8019dcc:	bd38      	pop	{r3, r4, r5, pc}
 8019dce:	bf00      	nop
 8019dd0:	2400945c 	.word	0x2400945c

08019dd4 <_init>:
 8019dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019dd6:	bf00      	nop
 8019dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019dda:	bc08      	pop	{r3}
 8019ddc:	469e      	mov	lr, r3
 8019dde:	4770      	bx	lr

08019de0 <_fini>:
 8019de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019de2:	bf00      	nop
 8019de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019de6:	bc08      	pop	{r3}
 8019de8:	469e      	mov	lr, r3
 8019dea:	4770      	bx	lr
