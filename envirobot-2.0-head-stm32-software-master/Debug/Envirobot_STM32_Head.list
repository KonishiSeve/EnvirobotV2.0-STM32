
Envirobot_STM32_Head.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016844  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000520  08016ae4  08016ae4  00017ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017004  08017004  00018004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0801700c  0801700c  0001800c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08017014  08017014  00018014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000064  24000000  0801701c  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00006a80  24000064  08017080  00019064  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24006ae4  08017080  00019ae4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00019064  2**0
                  CONTENTS, READONLY
 10 .debug_info   002f0277  00000000  00000000  00019092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000104b5  00000000  00000000  00309309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 0005e0ef  00000000  00000000  003197be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003a48  00000000  00000000  003778b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000a150  00000000  00000000  0037b2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00012122  00000000  00000000  00385448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0007b937  00000000  00000000  0039756a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0022cc8b  00000000  00000000  00412ea1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0063fb2c  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000c490  00000000  00000000  0063fb70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000007d  00000000  00000000  0064c000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000064 	.word	0x24000064
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08016acc 	.word	0x08016acc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000068 	.word	0x24000068
 80002dc:	08016acc 	.word	0x08016acc

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <__aeabi_uldivmod>:
 80002f4:	b953      	cbnz	r3, 800030c <__aeabi_uldivmod+0x18>
 80002f6:	b94a      	cbnz	r2, 800030c <__aeabi_uldivmod+0x18>
 80002f8:	2900      	cmp	r1, #0
 80002fa:	bf08      	it	eq
 80002fc:	2800      	cmpeq	r0, #0
 80002fe:	bf1c      	itt	ne
 8000300:	f04f 31ff 	movne.w	r1, #4294967295
 8000304:	f04f 30ff 	movne.w	r0, #4294967295
 8000308:	f000 b96a 	b.w	80005e0 <__aeabi_idiv0>
 800030c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000310:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000314:	f000 f806 	bl	8000324 <__udivmoddi4>
 8000318:	f8dd e004 	ldr.w	lr, [sp, #4]
 800031c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000320:	b004      	add	sp, #16
 8000322:	4770      	bx	lr

08000324 <__udivmoddi4>:
 8000324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000328:	9d08      	ldr	r5, [sp, #32]
 800032a:	460c      	mov	r4, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14e      	bne.n	80003ce <__udivmoddi4+0xaa>
 8000330:	4694      	mov	ip, r2
 8000332:	458c      	cmp	ip, r1
 8000334:	4686      	mov	lr, r0
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	d962      	bls.n	8000402 <__udivmoddi4+0xde>
 800033c:	b14a      	cbz	r2, 8000352 <__udivmoddi4+0x2e>
 800033e:	f1c2 0320 	rsb	r3, r2, #32
 8000342:	4091      	lsls	r1, r2
 8000344:	fa20 f303 	lsr.w	r3, r0, r3
 8000348:	fa0c fc02 	lsl.w	ip, ip, r2
 800034c:	4319      	orrs	r1, r3
 800034e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000352:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000356:	fa1f f68c 	uxth.w	r6, ip
 800035a:	fbb1 f4f7 	udiv	r4, r1, r7
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb07 1114 	mls	r1, r7, r4, r1
 8000366:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800036a:	fb04 f106 	mul.w	r1, r4, r6
 800036e:	4299      	cmp	r1, r3
 8000370:	d90a      	bls.n	8000388 <__udivmoddi4+0x64>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f104 30ff 	add.w	r0, r4, #4294967295
 800037a:	f080 8112 	bcs.w	80005a2 <__udivmoddi4+0x27e>
 800037e:	4299      	cmp	r1, r3
 8000380:	f240 810f 	bls.w	80005a2 <__udivmoddi4+0x27e>
 8000384:	3c02      	subs	r4, #2
 8000386:	4463      	add	r3, ip
 8000388:	1a59      	subs	r1, r3, r1
 800038a:	fa1f f38e 	uxth.w	r3, lr
 800038e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000392:	fb07 1110 	mls	r1, r7, r0, r1
 8000396:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800039a:	fb00 f606 	mul.w	r6, r0, r6
 800039e:	429e      	cmp	r6, r3
 80003a0:	d90a      	bls.n	80003b8 <__udivmoddi4+0x94>
 80003a2:	eb1c 0303 	adds.w	r3, ip, r3
 80003a6:	f100 31ff 	add.w	r1, r0, #4294967295
 80003aa:	f080 80fc 	bcs.w	80005a6 <__udivmoddi4+0x282>
 80003ae:	429e      	cmp	r6, r3
 80003b0:	f240 80f9 	bls.w	80005a6 <__udivmoddi4+0x282>
 80003b4:	4463      	add	r3, ip
 80003b6:	3802      	subs	r0, #2
 80003b8:	1b9b      	subs	r3, r3, r6
 80003ba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003be:	2100      	movs	r1, #0
 80003c0:	b11d      	cbz	r5, 80003ca <__udivmoddi4+0xa6>
 80003c2:	40d3      	lsrs	r3, r2
 80003c4:	2200      	movs	r2, #0
 80003c6:	e9c5 3200 	strd	r3, r2, [r5]
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d905      	bls.n	80003de <__udivmoddi4+0xba>
 80003d2:	b10d      	cbz	r5, 80003d8 <__udivmoddi4+0xb4>
 80003d4:	e9c5 0100 	strd	r0, r1, [r5]
 80003d8:	2100      	movs	r1, #0
 80003da:	4608      	mov	r0, r1
 80003dc:	e7f5      	b.n	80003ca <__udivmoddi4+0xa6>
 80003de:	fab3 f183 	clz	r1, r3
 80003e2:	2900      	cmp	r1, #0
 80003e4:	d146      	bne.n	8000474 <__udivmoddi4+0x150>
 80003e6:	42a3      	cmp	r3, r4
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xcc>
 80003ea:	4290      	cmp	r0, r2
 80003ec:	f0c0 80f0 	bcc.w	80005d0 <__udivmoddi4+0x2ac>
 80003f0:	1a86      	subs	r6, r0, r2
 80003f2:	eb64 0303 	sbc.w	r3, r4, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	2d00      	cmp	r5, #0
 80003fa:	d0e6      	beq.n	80003ca <__udivmoddi4+0xa6>
 80003fc:	e9c5 6300 	strd	r6, r3, [r5]
 8000400:	e7e3      	b.n	80003ca <__udivmoddi4+0xa6>
 8000402:	2a00      	cmp	r2, #0
 8000404:	f040 8090 	bne.w	8000528 <__udivmoddi4+0x204>
 8000408:	eba1 040c 	sub.w	r4, r1, ip
 800040c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000410:	fa1f f78c 	uxth.w	r7, ip
 8000414:	2101      	movs	r1, #1
 8000416:	fbb4 f6f8 	udiv	r6, r4, r8
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb08 4416 	mls	r4, r8, r6, r4
 8000422:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000426:	fb07 f006 	mul.w	r0, r7, r6
 800042a:	4298      	cmp	r0, r3
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x11c>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f106 34ff 	add.w	r4, r6, #4294967295
 8000436:	d202      	bcs.n	800043e <__udivmoddi4+0x11a>
 8000438:	4298      	cmp	r0, r3
 800043a:	f200 80cd 	bhi.w	80005d8 <__udivmoddi4+0x2b4>
 800043e:	4626      	mov	r6, r4
 8000440:	1a1c      	subs	r4, r3, r0
 8000442:	fa1f f38e 	uxth.w	r3, lr
 8000446:	fbb4 f0f8 	udiv	r0, r4, r8
 800044a:	fb08 4410 	mls	r4, r8, r0, r4
 800044e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000452:	fb00 f707 	mul.w	r7, r0, r7
 8000456:	429f      	cmp	r7, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x148>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x146>
 8000464:	429f      	cmp	r7, r3
 8000466:	f200 80b0 	bhi.w	80005ca <__udivmoddi4+0x2a6>
 800046a:	4620      	mov	r0, r4
 800046c:	1bdb      	subs	r3, r3, r7
 800046e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0x9c>
 8000474:	f1c1 0620 	rsb	r6, r1, #32
 8000478:	408b      	lsls	r3, r1
 800047a:	fa22 f706 	lsr.w	r7, r2, r6
 800047e:	431f      	orrs	r7, r3
 8000480:	fa20 fc06 	lsr.w	ip, r0, r6
 8000484:	fa04 f301 	lsl.w	r3, r4, r1
 8000488:	ea43 030c 	orr.w	r3, r3, ip
 800048c:	40f4      	lsrs	r4, r6
 800048e:	fa00 f801 	lsl.w	r8, r0, r1
 8000492:	0c38      	lsrs	r0, r7, #16
 8000494:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000498:	fbb4 fef0 	udiv	lr, r4, r0
 800049c:	fa1f fc87 	uxth.w	ip, r7
 80004a0:	fb00 441e 	mls	r4, r0, lr, r4
 80004a4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a8:	fb0e f90c 	mul.w	r9, lr, ip
 80004ac:	45a1      	cmp	r9, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	d90a      	bls.n	80004ca <__udivmoddi4+0x1a6>
 80004b4:	193c      	adds	r4, r7, r4
 80004b6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004ba:	f080 8084 	bcs.w	80005c6 <__udivmoddi4+0x2a2>
 80004be:	45a1      	cmp	r9, r4
 80004c0:	f240 8081 	bls.w	80005c6 <__udivmoddi4+0x2a2>
 80004c4:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c8:	443c      	add	r4, r7
 80004ca:	eba4 0409 	sub.w	r4, r4, r9
 80004ce:	fa1f f983 	uxth.w	r9, r3
 80004d2:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d6:	fb00 4413 	mls	r4, r0, r3, r4
 80004da:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004de:	fb03 fc0c 	mul.w	ip, r3, ip
 80004e2:	45a4      	cmp	ip, r4
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x1d2>
 80004e6:	193c      	adds	r4, r7, r4
 80004e8:	f103 30ff 	add.w	r0, r3, #4294967295
 80004ec:	d267      	bcs.n	80005be <__udivmoddi4+0x29a>
 80004ee:	45a4      	cmp	ip, r4
 80004f0:	d965      	bls.n	80005be <__udivmoddi4+0x29a>
 80004f2:	3b02      	subs	r3, #2
 80004f4:	443c      	add	r4, r7
 80004f6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004fa:	fba0 9302 	umull	r9, r3, r0, r2
 80004fe:	eba4 040c 	sub.w	r4, r4, ip
 8000502:	429c      	cmp	r4, r3
 8000504:	46ce      	mov	lr, r9
 8000506:	469c      	mov	ip, r3
 8000508:	d351      	bcc.n	80005ae <__udivmoddi4+0x28a>
 800050a:	d04e      	beq.n	80005aa <__udivmoddi4+0x286>
 800050c:	b155      	cbz	r5, 8000524 <__udivmoddi4+0x200>
 800050e:	ebb8 030e 	subs.w	r3, r8, lr
 8000512:	eb64 040c 	sbc.w	r4, r4, ip
 8000516:	fa04 f606 	lsl.w	r6, r4, r6
 800051a:	40cb      	lsrs	r3, r1
 800051c:	431e      	orrs	r6, r3
 800051e:	40cc      	lsrs	r4, r1
 8000520:	e9c5 6400 	strd	r6, r4, [r5]
 8000524:	2100      	movs	r1, #0
 8000526:	e750      	b.n	80003ca <__udivmoddi4+0xa6>
 8000528:	f1c2 0320 	rsb	r3, r2, #32
 800052c:	fa20 f103 	lsr.w	r1, r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa24 f303 	lsr.w	r3, r4, r3
 8000538:	4094      	lsls	r4, r2
 800053a:	430c      	orrs	r4, r1
 800053c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000540:	fa00 fe02 	lsl.w	lr, r0, r2
 8000544:	fa1f f78c 	uxth.w	r7, ip
 8000548:	fbb3 f0f8 	udiv	r0, r3, r8
 800054c:	fb08 3110 	mls	r1, r8, r0, r3
 8000550:	0c23      	lsrs	r3, r4, #16
 8000552:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000556:	fb00 f107 	mul.w	r1, r0, r7
 800055a:	4299      	cmp	r1, r3
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x24c>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 36ff 	add.w	r6, r0, #4294967295
 8000566:	d22c      	bcs.n	80005c2 <__udivmoddi4+0x29e>
 8000568:	4299      	cmp	r1, r3
 800056a:	d92a      	bls.n	80005c2 <__udivmoddi4+0x29e>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1a5b      	subs	r3, r3, r1
 8000572:	b2a4      	uxth	r4, r4
 8000574:	fbb3 f1f8 	udiv	r1, r3, r8
 8000578:	fb08 3311 	mls	r3, r8, r1, r3
 800057c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000580:	fb01 f307 	mul.w	r3, r1, r7
 8000584:	42a3      	cmp	r3, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x276>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000590:	d213      	bcs.n	80005ba <__udivmoddi4+0x296>
 8000592:	42a3      	cmp	r3, r4
 8000594:	d911      	bls.n	80005ba <__udivmoddi4+0x296>
 8000596:	3902      	subs	r1, #2
 8000598:	4464      	add	r4, ip
 800059a:	1ae4      	subs	r4, r4, r3
 800059c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005a0:	e739      	b.n	8000416 <__udivmoddi4+0xf2>
 80005a2:	4604      	mov	r4, r0
 80005a4:	e6f0      	b.n	8000388 <__udivmoddi4+0x64>
 80005a6:	4608      	mov	r0, r1
 80005a8:	e706      	b.n	80003b8 <__udivmoddi4+0x94>
 80005aa:	45c8      	cmp	r8, r9
 80005ac:	d2ae      	bcs.n	800050c <__udivmoddi4+0x1e8>
 80005ae:	ebb9 0e02 	subs.w	lr, r9, r2
 80005b2:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b6:	3801      	subs	r0, #1
 80005b8:	e7a8      	b.n	800050c <__udivmoddi4+0x1e8>
 80005ba:	4631      	mov	r1, r6
 80005bc:	e7ed      	b.n	800059a <__udivmoddi4+0x276>
 80005be:	4603      	mov	r3, r0
 80005c0:	e799      	b.n	80004f6 <__udivmoddi4+0x1d2>
 80005c2:	4630      	mov	r0, r6
 80005c4:	e7d4      	b.n	8000570 <__udivmoddi4+0x24c>
 80005c6:	46d6      	mov	lr, sl
 80005c8:	e77f      	b.n	80004ca <__udivmoddi4+0x1a6>
 80005ca:	4463      	add	r3, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e74d      	b.n	800046c <__udivmoddi4+0x148>
 80005d0:	4606      	mov	r6, r0
 80005d2:	4623      	mov	r3, r4
 80005d4:	4608      	mov	r0, r1
 80005d6:	e70f      	b.n	80003f8 <__udivmoddi4+0xd4>
 80005d8:	3e02      	subs	r6, #2
 80005da:	4463      	add	r3, ip
 80005dc:	e730      	b.n	8000440 <__udivmoddi4+0x11c>
 80005de:	bf00      	nop

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <_Z14TrajectoryTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TrajectoryTask */
void TrajectoryTask(void *argument)
{
 80005e4:	b508      	push	{r3, lr}
  for(;;)
  {
#ifdef USE_MOTION_GENERATOR
	  motion_generator.Spin();
#else
	  osDelay(1000);
 80005e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005ea:	f00b fd6b 	bl	800c0c4 <osDelay>
  for(;;)
 80005ee:	e7fa      	b.n	80005e6 <_Z14TrajectoryTaskPv+0x2>

080005f0 <_Z17CommunicationTaskPv>:
{
  /* USER CODE BEGIN CommunicationTask */
  /* Infinite loop */
  for(;;)
  {
	  communication.Spin();
 80005f0:	4c02      	ldr	r4, [pc, #8]	@ (80005fc <_Z17CommunicationTaskPv+0xc>)
{
 80005f2:	b508      	push	{r3, lr}
	  communication.Spin();
 80005f4:	4620      	mov	r0, r4
 80005f6:	f00e fe4d 	bl	800f294 <_ZN13Communication4SpinEv>
  for(;;)
 80005fa:	e7fb      	b.n	80005f4 <_Z17CommunicationTaskPv+0x4>
 80005fc:	24000e4c 	.word	0x24000e4c

08000600 <_Z8LEDsTaskPv>:
  /* USER CODE BEGIN LEDsTask */
  /* Infinite loop */
  for(;;)
  {
#ifdef USE_LEDS
	  leds.Spin();
 8000600:	4c02      	ldr	r4, [pc, #8]	@ (800060c <_Z8LEDsTaskPv+0xc>)
{
 8000602:	b508      	push	{r3, lr}
	  leds.Spin();
 8000604:	4620      	mov	r0, r4
 8000606:	f011 f8f4 	bl	80117f2 <_ZN4LEDS4SpinEv>
  for(;;)
 800060a:	e7fb      	b.n	8000604 <_Z8LEDsTaskPv+0x4>
 800060c:	24000130 	.word	0x24000130

08000610 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE5GetIDEPvPb>:
 * @param input pointer: the hardware interface handle pointer
 * @param output success: whether successful
 * @return the interface ID associated to the input handle
 */
template<typename H>
uint8_t TemplateCommunicationProtocol<H>::GetID(void* pointer, bool* success) {
 8000610:	b4f0      	push	{r4, r5, r6, r7}
 8000612:	e9d0 350e 	ldrd	r3, r5, [r0, #56]	@ 0x38
	uint8_t index = 0;
	for (H* interface : interfaces) {
 8000616:	2400      	movs	r4, #0
 8000618:	429d      	cmp	r5, r3
 800061a:	461e      	mov	r6, r3
 800061c:	d103      	bne.n	8000626 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE5GetIDEPvPb+0x16>
		if (interface == pointer)
			return GetIDFromIndex(index, success);
		index += 1;
	}
	*success = false;
 800061e:	2000      	movs	r0, #0
	return 0;
}
 8000620:	bcf0      	pop	{r4, r5, r6, r7}
	*success = false;
 8000622:	7010      	strb	r0, [r2, #0]
}
 8000624:	4770      	bx	lr
		if (interface == pointer)
 8000626:	6836      	ldr	r6, [r6, #0]
 8000628:	3304      	adds	r3, #4
 800062a:	1c67      	adds	r7, r4, #1
 800062c:	428e      	cmp	r6, r1
 800062e:	d103      	bne.n	8000638 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE5GetIDEPvPb+0x28>
			return GetIDFromIndex(index, success);
 8000630:	b2e1      	uxtb	r1, r4
}
 8000632:	bcf0      	pop	{r4, r5, r6, r7}
			return GetIDFromIndex(index, success);
 8000634:	f012 beed 	b.w	8013412 <_ZN21CommunicationProtocol14GetIDFromIndexEhPb>
 8000638:	463c      	mov	r4, r7
 800063a:	e7ed      	b.n	8000618 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE5GetIDEPvPb+0x8>

0800063c <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE5GetIDEPvPb>:
uint8_t TemplateCommunicationProtocol<H>::GetID(void* pointer, bool* success) {
 800063c:	b4f0      	push	{r4, r5, r6, r7}
 800063e:	e9d0 350e 	ldrd	r3, r5, [r0, #56]	@ 0x38
	for (H* interface : interfaces) {
 8000642:	2400      	movs	r4, #0
 8000644:	429d      	cmp	r5, r3
 8000646:	461e      	mov	r6, r3
 8000648:	d103      	bne.n	8000652 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE5GetIDEPvPb+0x16>
	*success = false;
 800064a:	2000      	movs	r0, #0
}
 800064c:	bcf0      	pop	{r4, r5, r6, r7}
	*success = false;
 800064e:	7010      	strb	r0, [r2, #0]
}
 8000650:	4770      	bx	lr
		if (interface == pointer)
 8000652:	6836      	ldr	r6, [r6, #0]
 8000654:	3304      	adds	r3, #4
 8000656:	1c67      	adds	r7, r4, #1
 8000658:	428e      	cmp	r6, r1
 800065a:	d103      	bne.n	8000664 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE5GetIDEPvPb+0x28>
			return GetIDFromIndex(index, success);
 800065c:	b2e1      	uxtb	r1, r4
}
 800065e:	bcf0      	pop	{r4, r5, r6, r7}
			return GetIDFromIndex(index, success);
 8000660:	f012 bed7 	b.w	8013412 <_ZN21CommunicationProtocol14GetIDFromIndexEhPb>
 8000664:	463c      	mov	r4, r7
 8000666:	e7ed      	b.n	8000644 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE5GetIDEPvPb+0x8>

08000668 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>:
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8000668:	0089      	lsls	r1, r1, #2
 800066a:	f015 bf2d 	b.w	80164c8 <_ZdlPvj>

0800066e <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>:
 800066e:	0109      	lsls	r1, r1, #4
 8000670:	f015 bf2a 	b.w	80164c8 <_ZdlPvj>

08000674 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>:
      _GLIBCXX20_CONSTEXPR
      pointer
      _M_allocate(size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8000674:	2800      	cmp	r0, #0
      _M_allocate(size_t __n)
 8000676:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8000678:	d006      	beq.n	8000688 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0x14>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800067a:	da01      	bge.n	8000680 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0xc>
	    std::__throw_bad_alloc();
 800067c:	f015 fff8 	bl	8016670 <_ZSt17__throw_bad_allocv>
      }
 8000680:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8000684:	f015 bf45 	b.w	8016512 <_Znwj>
 8000688:	bd08      	pop	{r3, pc}

0800068a <_Z11SensorsTaskPv>:
void SensorsTask(void *argument)
 800068a:	b508      	push	{r3, lr}
 800068c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000690:	f00b fd18 	bl	800c0c4 <osDelay>
 8000694:	e7fa      	b.n	800068c <_Z11SensorsTaskPv+0x2>
	...

08000698 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8000698:	b513      	push	{r0, r1, r4, lr}
 800069a:	4601      	mov	r1, r0
	uint8_t ID = communication.GetID((void*) huart, &success);
 800069c:	f10d 0207 	add.w	r2, sp, #7
 80006a0:	480a      	ldr	r0, [pc, #40]	@ (80006cc <HAL_UART_ErrorCallback+0x34>)
 80006a2:	f00e f95d 	bl	800e960 <_ZN13Communication5GetIDEPvPb>
	if (!success) {return;}
 80006a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
	uint8_t ID = communication.GetID((void*) huart, &success);
 80006aa:	4604      	mov	r4, r0
	if (!success) {return;}
 80006ac:	b15b      	cbz	r3, 80006c6 <HAL_UART_ErrorCallback+0x2e>
	uint16_t* buffer_index = communication.GetBufferIndex(ID, &success);
 80006ae:	4601      	mov	r1, r0
 80006b0:	f10d 0207 	add.w	r2, sp, #7
 80006b4:	4805      	ldr	r0, [pc, #20]	@ (80006cc <HAL_UART_ErrorCallback+0x34>)
 80006b6:	f00e f972 	bl	800e99e <_ZN13Communication14GetBufferIndexEhPb>
	*buffer_index = 0; // resets the buffer index to the DMA pointer
 80006ba:	2300      	movs	r3, #0
	communication.ActivateReception(ID);
 80006bc:	4621      	mov	r1, r4
	*buffer_index = 0; // resets the buffer index to the DMA pointer
 80006be:	8003      	strh	r3, [r0, #0]
	communication.ActivateReception(ID);
 80006c0:	4802      	ldr	r0, [pc, #8]	@ (80006cc <HAL_UART_ErrorCallback+0x34>)
 80006c2:	f00e f987 	bl	800e9d4 <_ZN13Communication17ActivateReceptionEh>
}
 80006c6:	b002      	add	sp, #8
 80006c8:	bd10      	pop	{r4, pc}
 80006ca:	bf00      	nop
 80006cc:	24000e4c 	.word	0x24000e4c

080006d0 <HAL_FDCAN_ErrorCallback>:
void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan) {
 80006d0:	b507      	push	{r0, r1, r2, lr}
 80006d2:	4601      	mov	r1, r0
	uint8_t ID = communication.GetID((void*) hfdcan, &success);
 80006d4:	f10d 0207 	add.w	r2, sp, #7
 80006d8:	4806      	ldr	r0, [pc, #24]	@ (80006f4 <HAL_FDCAN_ErrorCallback+0x24>)
 80006da:	f00e f941 	bl	800e960 <_ZN13Communication5GetIDEPvPb>
	if (!success) {return;}
 80006de:	f89d 3007 	ldrb.w	r3, [sp, #7]
	uint8_t ID = communication.GetID((void*) hfdcan, &success);
 80006e2:	4601      	mov	r1, r0
	if (!success) {return;}
 80006e4:	b113      	cbz	r3, 80006ec <HAL_FDCAN_ErrorCallback+0x1c>
	communication.ActivateReception(ID);
 80006e6:	4803      	ldr	r0, [pc, #12]	@ (80006f4 <HAL_FDCAN_ErrorCallback+0x24>)
 80006e8:	f00e f974 	bl	800e9d4 <_ZN13Communication17ActivateReceptionEh>
}
 80006ec:	b003      	add	sp, #12
 80006ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80006f2:	bf00      	nop
 80006f4:	24000e4c 	.word	0x24000e4c

080006f8 <_Z18SystemClock_Configv>:
{
 80006f8:	b510      	push	{r4, lr}
 80006fa:	b09e      	sub	sp, #120	@ 0x78
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fc:	224c      	movs	r2, #76	@ 0x4c
 80006fe:	2100      	movs	r1, #0
 8000700:	a80b      	add	r0, sp, #44	@ 0x2c
 8000702:	f016 f8ad 	bl	8016860 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000706:	2220      	movs	r2, #32
 8000708:	2100      	movs	r1, #0
 800070a:	a803      	add	r0, sp, #12
 800070c:	f016 f8a8 	bl	8016860 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000710:	2002      	movs	r0, #2
 8000712:	f006 f947 	bl	80069a4 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000716:	2300      	movs	r3, #0
 8000718:	9300      	str	r3, [sp, #0]
 800071a:	4b3a      	ldr	r3, [pc, #232]	@ (8000804 <_Z18SystemClock_Configv+0x10c>)
 800071c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800071e:	f022 0201 	bic.w	r2, r2, #1
 8000722:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	9300      	str	r3, [sp, #0]
 800072c:	4b36      	ldr	r3, [pc, #216]	@ (8000808 <_Z18SystemClock_Configv+0x110>)
 800072e:	699a      	ldr	r2, [r3, #24]
 8000730:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000734:	619a      	str	r2, [r3, #24]
 8000736:	699a      	ldr	r2, [r3, #24]
 8000738:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 800073c:	9200      	str	r2, [sp, #0]
 800073e:	9a00      	ldr	r2, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000740:	699a      	ldr	r2, [r3, #24]
 8000742:	0492      	lsls	r2, r2, #18
 8000744:	d5fc      	bpl.n	8000740 <_Z18SystemClock_Configv+0x48>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000746:	4a31      	ldr	r2, [pc, #196]	@ (800080c <_Z18SystemClock_Configv+0x114>)
 8000748:	f8d2 10f4 	ldr.w	r1, [r2, #244]	@ 0xf4
 800074c:	f041 0102 	orr.w	r1, r1, #2
 8000750:	f8c2 10f4 	str.w	r1, [r2, #244]	@ 0xf4
 8000754:	f8d2 10f4 	ldr.w	r1, [r2, #244]	@ 0xf4
 8000758:	f001 0102 	and.w	r1, r1, #2
 800075c:	9101      	str	r1, [sp, #4]
 800075e:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000760:	2100      	movs	r1, #0
 8000762:	9102      	str	r1, [sp, #8]
 8000764:	6999      	ldr	r1, [r3, #24]
 8000766:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 800076a:	6199      	str	r1, [r3, #24]
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000772:	9302      	str	r3, [sp, #8]
 8000774:	4b23      	ldr	r3, [pc, #140]	@ (8000804 <_Z18SystemClock_Configv+0x10c>)
 8000776:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000778:	f041 0101 	orr.w	r1, r1, #1
 800077c:	62d9      	str	r1, [r3, #44]	@ 0x2c
 800077e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000780:	4921      	ldr	r1, [pc, #132]	@ (8000808 <_Z18SystemClock_Configv+0x110>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	9302      	str	r3, [sp, #8]
 8000788:	9b02      	ldr	r3, [sp, #8]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800078a:	698b      	ldr	r3, [r1, #24]
 800078c:	049b      	lsls	r3, r3, #18
 800078e:	d5fc      	bpl.n	800078a <_Z18SystemClock_Configv+0x92>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000790:	6a93      	ldr	r3, [r2, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000792:	2001      	movs	r0, #1
  RCC_OscInitStruct.PLL.PLLR = 4;
 8000794:	2404      	movs	r4, #4
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000796:	f04f 0c0c 	mov.w	ip, #12
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800079a:	f023 0303 	bic.w	r3, r3, #3
 800079e:	f043 0302 	orr.w	r3, r3, #2
 80007a2:	6293      	str	r3, [r2, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  RCC_OscInitStruct.PLL.PLLN = 80;
 80007a8:	2250      	movs	r2, #80	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007aa:	e9cd 030b 	strd	r0, r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ae:	2302      	movs	r3, #2
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b0:	a80b      	add	r0, sp, #44	@ 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007b2:	e9cd 3314 	strd	r3, r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = 2;
 80007b6:	9316      	str	r3, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007b8:	e9cd 2317 	strd	r2, r3, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 80007bc:	2318      	movs	r3, #24
 80007be:	e9cd 3419 	strd	r3, r4, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007c2:	2300      	movs	r3, #0
 80007c4:	e9cd c31b 	strd	ip, r3, [sp, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007c8:	931d      	str	r3, [sp, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ca:	f006 f915 	bl	80069f8 <HAL_RCC_OscConfig>
 80007ce:	b108      	cbz	r0, 80007d4 <_Z18SystemClock_Configv+0xdc>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d2:	e7fe      	b.n	80007d2 <_Z18SystemClock_Configv+0xda>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d4:	223f      	movs	r2, #63	@ 0x3f
 80007d6:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007d8:	2108      	movs	r1, #8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007da:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007dc:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007de:	e9cd 2303 	strd	r2, r3, [sp, #12]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007e2:	2340      	movs	r3, #64	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007e8:	e9cd 1306 	strd	r1, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007ec:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007ee:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007f0:	e9cd 2309 	strd	r2, r3, [sp, #36]	@ 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007f4:	f006 fd34 	bl	8007260 <HAL_RCC_ClockConfig>
 80007f8:	b108      	cbz	r0, 80007fe <_Z18SystemClock_Configv+0x106>
 80007fa:	b672      	cpsid	i
  while (1)
 80007fc:	e7fe      	b.n	80007fc <_Z18SystemClock_Configv+0x104>
}
 80007fe:	b01e      	add	sp, #120	@ 0x78
 8000800:	bd10      	pop	{r4, pc}
 8000802:	bf00      	nop
 8000804:	58000400 	.word	0x58000400
 8000808:	58024800 	.word	0x58024800
 800080c:	58024400 	.word	0x58024400

08000810 <_Z24PeriphCommonClock_Configv>:
{
 8000810:	b500      	push	{lr}
 8000812:	b0b1      	sub	sp, #196	@ 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000814:	22a0      	movs	r2, #160	@ 0xa0
 8000816:	2100      	movs	r1, #0
 8000818:	a808      	add	r0, sp, #32
 800081a:	f016 f821 	bl	8016860 <memset>
  PeriphClkInitStruct.PLL2.PLL2M = 3;
 800081e:	f44f 2308 	mov.w	r3, #557056	@ 0x88000
 8000822:	2203      	movs	r2, #3
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000824:	2119      	movs	r1, #25
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000826:	a801      	add	r0, sp, #4
  PeriphClkInitStruct.PLL2.PLL2M = 3;
 8000828:	e9cd 3201 	strd	r3, r2, [sp, #4]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800082c:	2302      	movs	r3, #2
 800082e:	e9cd 1303 	strd	r1, r3, [sp, #12]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000832:	21c0      	movs	r1, #192	@ 0xc0
  PeriphClkInitStruct.PLL3.PLL3M = 2;
 8000834:	930a      	str	r3, [sp, #40]	@ 0x28
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000836:	9107      	str	r1, [sp, #28]
  PeriphClkInitStruct.PLL3.PLL3N = 40;
 8000838:	2128      	movs	r1, #40	@ 0x28
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800083a:	e9cd 3305 	strd	r3, r3, [sp, #20]
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 800083e:	e9cd 130b 	strd	r1, r3, [sp, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3R = 3;
 8000842:	e9cd 320d 	strd	r3, r2, [sp, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000846:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800084a:	930f      	str	r3, [sp, #60]	@ 0x3c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 800084c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000850:	931c      	str	r3, [sp, #112]	@ 0x70
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8000852:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000856:	9329      	str	r3, [sp, #164]	@ 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000858:	f006 ffc8 	bl	80077ec <HAL_RCCEx_PeriphCLKConfig>
 800085c:	b108      	cbz	r0, 8000862 <_Z24PeriphCommonClock_Configv+0x52>
 800085e:	b672      	cpsid	i
  while (1)
 8000860:	e7fe      	b.n	8000860 <_Z24PeriphCommonClock_Configv+0x50>
}
 8000862:	b031      	add	sp, #196	@ 0xc4
 8000864:	f85d fb04 	ldr.w	pc, [sp], #4

08000868 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM5) {
 8000868:	6802      	ldr	r2, [r0, #0]
 800086a:	4b09      	ldr	r3, [pc, #36]	@ (8000890 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800086c:	429a      	cmp	r2, r3
{
 800086e:	b510      	push	{r4, lr}
 8000870:	4604      	mov	r4, r0
  if (htim->Instance == TIM5) {
 8000872:	d101      	bne.n	8000878 <HAL_TIM_PeriodElapsedCallback+0x10>
    HAL_IncTick();
 8000874:	f002 fc28 	bl	80030c8 <HAL_IncTick>
  if (hardware_delay.AssignedTimer(htim)) {
 8000878:	4621      	mov	r1, r4
 800087a:	4806      	ldr	r0, [pc, #24]	@ (8000894 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800087c:	f010 fea8 	bl	80115d0 <_ZN13HardwareDelay13AssignedTimerEP17TIM_HandleTypeDef>
 8000880:	b120      	cbz	r0, 800088c <HAL_TIM_PeriodElapsedCallback+0x24>
    hardware_delay.TriggeredDelay();
 8000882:	4804      	ldr	r0, [pc, #16]	@ (8000894 <HAL_TIM_PeriodElapsedCallback+0x2c>)
}
 8000884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hardware_delay.TriggeredDelay();
 8000888:	f010 bf11 	b.w	80116ae <_ZN13HardwareDelay14TriggeredDelayEv>
}
 800088c:	bd10      	pop	{r4, pc}
 800088e:	bf00      	nop
 8000890:	40000c00 	.word	0x40000c00
 8000894:	240001d4 	.word	0x240001d4

08000898 <Error_Handler>:
 8000898:	b672      	cpsid	i
  while (1)
 800089a:	e7fe      	b.n	800089a <Error_Handler+0x2>

0800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800089c:	b510      	push	{r4, lr}
 800089e:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 80008a0:	6800      	ldr	r0, [r0, #0]
      _GLIBCXX20_CONSTEXPR
      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
 80008a2:	b118      	cbz	r0, 80008ac <_ZNSt12_Vector_baseIhSaIhEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80008a4:	68a1      	ldr	r1, [r4, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80008a6:	1a09      	subs	r1, r1, r0
 80008a8:	f015 fe0e 	bl	80164c8 <_ZdlPvj>
      }
 80008ac:	4620      	mov	r0, r4
 80008ae:	bd10      	pop	{r4, pc}

080008b0 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>:
       *
       *  Whether the allocator is moved depends on the allocator traits.
       */
      _GLIBCXX20_CONSTEXPR
      vector&
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 80008b0:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 80008b2:	680d      	ldr	r5, [r1, #0]
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 80008b4:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 80008b6:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 80008b8:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 80008bc:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 80008be:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 80008c0:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 80008c2:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 80008c4:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 80008c6:	688d      	ldr	r5, [r1, #8]
 80008c8:	6085      	str	r5, [r0, #8]
      }
 80008ca:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 80008cc:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 80008ce:	e9c1 3300 	strd	r3, r3, [r1]
 80008d2:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 80008d6:	f7ff ffe1 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	constexpr bool __move_storage =
	  _Alloc_traits::_S_propagate_on_move_assign()
	  || _Alloc_traits::_S_always_equal();
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
	return *this;
      }
 80008da:	b005      	add	sp, #20
 80008dc:	bd30      	pop	{r4, r5, pc}

080008de <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>:
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
 80008de:	b510      	push	{r4, lr}
 80008e0:	4604      	mov	r4, r0
 80008e2:	4610      	mov	r0, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80008e4:	e9d4 2300 	ldrd	r2, r3, [r4]
      {
	if (max_size() - size() < __n)
 80008e8:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80008ec:	1a9b      	subs	r3, r3, r2
	if (max_size() - size() < __n)
 80008ee:	1ae2      	subs	r2, r4, r3
 80008f0:	428a      	cmp	r2, r1
 80008f2:	d201      	bcs.n	80008f8 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x1a>
	  __throw_length_error(__N(__s));
 80008f4:	f015 fec2 	bl	801667c <_ZSt20__throw_length_errorPKc>
 80008f8:	4299      	cmp	r1, r3
 80008fa:	bf38      	it	cc
 80008fc:	4619      	movcc	r1, r3
 80008fe:	185b      	adds	r3, r3, r1
 8000900:	d204      	bcs.n	800090c <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x2e>
 8000902:	42a3      	cmp	r3, r4
 8000904:	bf28      	it	cs
 8000906:	4623      	movcs	r3, r4
 8000908:	4618      	mov	r0, r3

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
      }
 800090a:	bd10      	pop	{r4, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800090c:	4620      	mov	r0, r4
 800090e:	e7fc      	b.n	800090a <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x2c>

08000910 <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 8000910:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000914:	e9d0 8a00 	ldrd	r8, sl, [r0]
 8000918:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 800091a:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800091e:	ebaa 0208 	sub.w	r2, sl, r8
 8000922:	4607      	mov	r7, r0
 8000924:	4689      	mov	r9, r1
	if (max_size() - size() < __n)
 8000926:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800092a:	ea4f 04a2 	mov.w	r4, r2, asr #2
	if (max_size() - size() < __n)
 800092e:	d102      	bne.n	8000936 <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8000930:	481f      	ldr	r0, [pc, #124]	@ (80009b0 <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa0>)
 8000932:	f015 fea3 	bl	801667c <_ZSt20__throw_length_errorPKc>
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8000936:	45c2      	cmp	sl, r8
 8000938:	bf14      	ite	ne
 800093a:	4622      	movne	r2, r4
 800093c:	2201      	moveq	r2, #1
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800093e:	eba1 0508 	sub.w	r5, r1, r8
 8000942:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8000944:	d22f      	bcs.n	80009a6 <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x96>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8000946:	b384      	cbz	r4, 80009aa <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8000948:	429c      	cmp	r4, r3
 800094a:	bf28      	it	cs
 800094c:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800094e:	00a0      	lsls	r0, r4, #2
 8000950:	f015 fddf 	bl	8016512 <_Znwj>
 8000954:	4606      	mov	r6, r0
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8000956:	f8db 3000 	ldr.w	r3, [fp]
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result,
		   [[__maybe_unused__]] allocator<_Up>& __alloc) noexcept
    {
      ptrdiff_t __count = __last - __first;
      if (__count > 0)
 800095a:	2d00      	cmp	r5, #0
 800095c:	5173      	str	r3, [r6, r5]
 800095e:	dd04      	ble.n	800096a <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x5a>
	      __gnu_cxx::__normal_iterator<_Tp*, void> __out(__result);
	      __out = std::__relocate_a_1(__first, __last, __out, __alloc);
	      return __out.base();
	    }
#endif
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8000960:	462a      	mov	r2, r5
 8000962:	4641      	mov	r1, r8
 8000964:	4630      	mov	r0, r6
 8000966:	f015 ff61 	bl	801682c <memmove>
      ptrdiff_t __count = __last - __first;
 800096a:	ebaa 0a09 	sub.w	sl, sl, r9
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
 800096e:	3504      	adds	r5, #4
      if (__count > 0)
 8000970:	f1ba 0f00 	cmp.w	sl, #0
 8000974:	4435      	add	r5, r6
 8000976:	dd04      	ble.n	8000982 <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x72>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8000978:	4652      	mov	r2, sl
 800097a:	4649      	mov	r1, r9
 800097c:	4628      	mov	r0, r5
 800097e:	f016 f84d 	bl	8016a1c <memcpy>
	}
      return __result + __count;
 8000982:	4455      	add	r5, sl
	if (__p)
 8000984:	f1b8 0f00 	cmp.w	r8, #0
 8000988:	d006      	beq.n	8000998 <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x88>
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
 800098a:	68b9      	ldr	r1, [r7, #8]
 800098c:	4640      	mov	r0, r8
 800098e:	eba1 0108 	sub.w	r1, r1, r8
 8000992:	1089      	asrs	r1, r1, #2
 8000994:	f7ff fe68 	bl	8000668 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
 8000998:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800099c:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 80009a0:	60be      	str	r6, [r7, #8]
    }
 80009a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80009a6:	461c      	mov	r4, r3
 80009a8:	e7d1      	b.n	800094e <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80009aa:	4626      	mov	r6, r4
 80009ac:	e7d3      	b.n	8000956 <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
 80009ae:	bf00      	nop
 80009b0:	08016b36 	.word	0x08016b36

080009b4 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE12AddInterfaceEhPS0_>:
void TemplateCommunicationProtocol<H>::AddInterface(uint8_t ID, H* interface) {
 80009b4:	b513      	push	{r0, r1, r4, lr}
 80009b6:	4604      	mov	r4, r0
 80009b8:	9201      	str	r2, [sp, #4]
	AddInterfaceID(ID);
 80009ba:	f012 fcc5 	bl	8013348 <_ZN21CommunicationProtocol14AddInterfaceIDEh>
	AddInterfaceBuffer();
 80009be:	4620      	mov	r0, r4
 80009c0:	f012 fe5c 	bl	801367c <_ZN21CommunicationProtocol18AddInterfaceBufferEv>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80009c4:	e9d4 130f 	ldrd	r1, r3, [r4, #60]	@ 0x3c
 80009c8:	4299      	cmp	r1, r3
 80009ca:	d005      	beq.n	80009d8 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE12AddInterfaceEhPS0_+0x24>
 80009cc:	9b01      	ldr	r3, [sp, #4]
 80009ce:	f841 3b04 	str.w	r3, [r1], #4
	    ++this->_M_impl._M_finish;
 80009d2:	63e1      	str	r1, [r4, #60]	@ 0x3c
}
 80009d4:	b002      	add	sp, #8
 80009d6:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), __x);
 80009d8:	aa01      	add	r2, sp, #4
 80009da:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 80009de:	f7ff ff97 	bl	8000910 <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
 80009e2:	e7f7      	b.n	80009d4 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE12AddInterfaceEhPS0_+0x20>

080009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
    struct __copy_move<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
	_GLIBCXX20_CONSTEXPR
	static _Tp*
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80009e4:	b510      	push	{r4, lr}
					       is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::value, "type must be assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
 80009e6:	1a0c      	subs	r4, r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80009e8:	4613      	mov	r3, r2
	  if (_Num)
 80009ea:	d005      	beq.n	80009f8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x14>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80009ec:	4601      	mov	r1, r0
 80009ee:	4622      	mov	r2, r4
 80009f0:	4618      	mov	r0, r3
 80009f2:	f015 ff1b 	bl	801682c <memmove>
 80009f6:	4603      	mov	r3, r0
	  return __result + _Num;
	}
 80009f8:	1918      	adds	r0, r3, r4
 80009fa:	bd10      	pop	{r4, pc}

080009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>:
      vector(const vector& __x)
 80009fc:	b570      	push	{r4, r5, r6, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80009fe:	e9d1 3600 	ldrd	r3, r6, [r1]
      vector(const vector& __x)
 8000a02:	4604      	mov	r4, r0
 8000a04:	460d      	mov	r5, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000a06:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000a08:	2300      	movs	r3, #0
 8000a0a:	e9c0 3300 	strd	r3, r3, [r0]
 8000a0e:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8000a10:	4630      	mov	r0, r6
 8000a12:	f7ff fe2f 	bl	8000674 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8000a16:	4406      	add	r6, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8000a18:	4602      	mov	r2, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8000a1a:	60a6      	str	r6, [r4, #8]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8000a1c:	e9c4 0000 	strd	r0, r0, [r4]
      if (std::is_constant_evaluated())
	return std::__copy_move<_IsMove, false, _Category>::
	  __copy_m(__first, __last, __result);
#endif
      return std::__copy_move<_IsMove, __memcpyable<_OI, _II>::__value,
			      _Category>::__copy_m(__first, __last, __result);
 8000a20:	e9d5 0100 	ldrd	r0, r1, [r5]
 8000a24:	f7ff ffde 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	this->_M_impl._M_finish =
 8000a28:	6060      	str	r0, [r4, #4]
      }
 8000a2a:	4620      	mov	r0, r4
 8000a2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08000a30 <HAL_FDCAN_RxFifo0Callback>:
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 8000a30:	07cb      	lsls	r3, r1, #31
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8000a32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000a36:	4604      	mov	r4, r0
 8000a38:	b0a3      	sub	sp, #140	@ 0x8c
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 8000a3a:	d512      	bpl.n	8000a62 <HAL_FDCAN_RxFifo0Callback+0x32>
	    HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData);
 8000a3c:	ab12      	add	r3, sp, #72	@ 0x48
 8000a3e:	aa08      	add	r2, sp, #32
 8000a40:	2140      	movs	r1, #64	@ 0x40
 8000a42:	f004 fff5 	bl	8005a30 <HAL_FDCAN_GetRxMessage>
		ID = communication.GetID((void*) hfdcan, &success);
 8000a46:	f10d 0207 	add.w	r2, sp, #7
 8000a4a:	4621      	mov	r1, r4
 8000a4c:	482c      	ldr	r0, [pc, #176]	@ (8000b00 <HAL_FDCAN_RxFifo0Callback+0xd0>)
 8000a4e:	f00d ff87 	bl	800e960 <_ZN13Communication5GetIDEPvPb>
		if (!success) {communication.ActivateReception(ID); return;}
 8000a52:	f89d 3007 	ldrb.w	r3, [sp, #7]
		ID = communication.GetID((void*) hfdcan, &success);
 8000a56:	4606      	mov	r6, r0
		if (!success) {communication.ActivateReception(ID); return;}
 8000a58:	b933      	cbnz	r3, 8000a68 <HAL_FDCAN_RxFifo0Callback+0x38>
 8000a5a:	4601      	mov	r1, r0
 8000a5c:	4828      	ldr	r0, [pc, #160]	@ (8000b00 <HAL_FDCAN_RxFifo0Callback+0xd0>)
 8000a5e:	f00d ffb9 	bl	800e9d4 <_ZN13Communication17ActivateReceptionEh>
}
 8000a62:	b023      	add	sp, #140	@ 0x8c
 8000a64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8000a68:	2040      	movs	r0, #64	@ 0x40
	    uint8_t target_address = (uint8_t) RxHeader.Identifier;
 8000a6a:	f89d 8020 	ldrb.w	r8, [sp, #32]
 8000a6e:	f7ff fe01 	bl	8000674 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8000a72:	ab12      	add	r3, sp, #72	@ 0x48
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8000a74:	f100 0740 	add.w	r7, r0, #64	@ 0x40
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8000a78:	4605      	mov	r5, r0
 8000a7a:	4604      	mov	r4, r0
 8000a7c:	f10d 0c88 	add.w	ip, sp, #136	@ 0x88
 8000a80:	9002      	str	r0, [sp, #8]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8000a82:	9704      	str	r7, [sp, #16]
 8000a84:	461a      	mov	r2, r3
 8000a86:	3408      	adds	r4, #8
 8000a88:	ca03      	ldmia	r2!, {r0, r1}
 8000a8a:	4562      	cmp	r2, ip
 8000a8c:	f844 0c08 	str.w	r0, [r4, #-8]
 8000a90:	f844 1c04 	str.w	r1, [r4, #-4]
 8000a94:	4613      	mov	r3, r2
 8000a96:	d1f5      	bne.n	8000a84 <HAL_FDCAN_RxFifo0Callback+0x54>
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8000a98:	4a1a      	ldr	r2, [pc, #104]	@ (8000b04 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	a802      	add	r0, sp, #8
	  this->_M_impl._M_finish =
 8000a9e:	9703      	str	r7, [sp, #12]
 8000aa0:	f7ff ff1d 	bl	80008de <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8000aa4:	4681      	mov	r9, r0
      pointer __new_start(this->_M_allocate(__len));
 8000aa6:	f7ff fde5 	bl	8000674 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8000aaa:	462a      	mov	r2, r5
 8000aac:	4603      	mov	r3, r0
 8000aae:	4604      	mov	r4, r0
 8000ab0:	f803 8b01 	strb.w	r8, [r3], #1
 8000ab4:	f852 1b04 	ldr.w	r1, [r2], #4
 8000ab8:	42ba      	cmp	r2, r7
 8000aba:	f843 1b04 	str.w	r1, [r3], #4
 8000abe:	d1f9      	bne.n	8000ab4 <HAL_FDCAN_RxFifo0Callback+0x84>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8000ac0:	4628      	mov	r0, r5
 8000ac2:	2140      	movs	r1, #64	@ 0x40
 8000ac4:	f015 fd00 	bl	80164c8 <_ZdlPvj>
      return __result + __count;
 8000ac8:	f104 0341 	add.w	r3, r4, #65	@ 0x41
      this->_M_impl._M_start = __new_start;
 8000acc:	9402      	str	r4, [sp, #8]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8000ace:	444c      	add	r4, r9
		communication.Process(ID, received_data, &success);
 8000ad0:	a902      	add	r1, sp, #8
 8000ad2:	a805      	add	r0, sp, #20
      this->_M_impl._M_finish = __new_finish;
 8000ad4:	9303      	str	r3, [sp, #12]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8000ad6:	9404      	str	r4, [sp, #16]
 8000ad8:	f7ff ff90 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8000adc:	f10d 0307 	add.w	r3, sp, #7
 8000ae0:	aa05      	add	r2, sp, #20
 8000ae2:	4631      	mov	r1, r6
 8000ae4:	4806      	ldr	r0, [pc, #24]	@ (8000b00 <HAL_FDCAN_RxFifo0Callback+0xd0>)
 8000ae6:	f010 fcf3 	bl	80114d0 <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb>
      }
 8000aea:	a805      	add	r0, sp, #20
 8000aec:	f7ff fed6 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		communication.ActivateReception(ID);
 8000af0:	4631      	mov	r1, r6
 8000af2:	4803      	ldr	r0, [pc, #12]	@ (8000b00 <HAL_FDCAN_RxFifo0Callback+0xd0>)
 8000af4:	f00d ff6e 	bl	800e9d4 <_ZN13Communication17ActivateReceptionEh>
 8000af8:	a802      	add	r0, sp, #8
 8000afa:	f7ff fecf 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8000afe:	e7b0      	b.n	8000a62 <HAL_FDCAN_RxFifo0Callback+0x32>
 8000b00:	24000e4c 	.word	0x24000e4c
 8000b04:	08016b36 	.word	0x08016b36

08000b08 <_ZNSt6vectorIhSaIhEEC1IN9__gnu_cxx17__normal_iteratorIPhS1_EEvEET_S7_RKS0_>:
	vector(_InputIterator __first, _InputIterator __last,
 8000b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000b0a:	2300      	movs	r3, #0

      // Called by constructors to check initial size.
      static _GLIBCXX20_CONSTEXPR size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8000b0c:	1a57      	subs	r7, r2, r1
	vector(_InputIterator __first, _InputIterator __last,
 8000b0e:	4604      	mov	r4, r0
 8000b10:	460d      	mov	r5, r1
 8000b12:	4616      	mov	r6, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000b14:	6083      	str	r3, [r0, #8]
 8000b16:	e9c0 3300 	strd	r3, r3, [r0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8000b1a:	d502      	bpl.n	8000b22 <_ZNSt6vectorIhSaIhEEC1IN9__gnu_cxx17__normal_iteratorIPhS1_EEvEET_S7_RKS0_+0x1a>
	  __throw_length_error(
 8000b1c:	4808      	ldr	r0, [pc, #32]	@ (8000b40 <_ZNSt6vectorIhSaIhEEC1IN9__gnu_cxx17__normal_iteratorIPhS1_EEvEET_S7_RKS0_+0x38>)
 8000b1e:	f015 fdad 	bl	801667c <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8000b22:	4638      	mov	r0, r7
 8000b24:	f7ff fda6 	bl	8000674 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8000b28:	4407      	add	r7, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8000b2a:	4602      	mov	r2, r0
 8000b2c:	6020      	str	r0, [r4, #0]
			      _Category>::__copy_m(__first, __last, __result);
 8000b2e:	4631      	mov	r1, r6
 8000b30:	4628      	mov	r0, r5
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8000b32:	60a7      	str	r7, [r4, #8]
 8000b34:	f7ff ff56 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	  this->_M_impl._M_finish =
 8000b38:	6060      	str	r0, [r4, #4]
	}
 8000b3a:	4620      	mov	r0, r4
 8000b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	08016b50 	.word	0x08016b50

08000b44 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>:
      vector(initializer_list<value_type> __l,
 8000b44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000b46:	ab02      	add	r3, sp, #8
 8000b48:	4604      	mov	r4, r0
 8000b4a:	460e      	mov	r6, r1
      constexpr initializer_list() noexcept
      : _M_array(0), _M_len(0) { }

      // Number of elements.
      constexpr size_type
      size() const noexcept { return _M_len; }
 8000b4c:	4615      	mov	r5, r2
      constexpr const_iterator
      begin() const noexcept { return _M_array; }

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8000b4e:	188f      	adds	r7, r1, r2
 8000b50:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000b54:	2300      	movs	r3, #0
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8000b56:	429a      	cmp	r2, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000b58:	6083      	str	r3, [r0, #8]
 8000b5a:	e9c0 3300 	strd	r3, r3, [r0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8000b5e:	da02      	bge.n	8000b66 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_+0x22>
	  __throw_length_error(
 8000b60:	4808      	ldr	r0, [pc, #32]	@ (8000b84 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_+0x40>)
 8000b62:	f015 fd8b 	bl	801667c <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8000b66:	4610      	mov	r0, r2
 8000b68:	f7ff fd84 	bl	8000674 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8000b6c:	4405      	add	r5, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8000b6e:	4602      	mov	r2, r0
 8000b70:	6020      	str	r0, [r4, #0]
 8000b72:	4639      	mov	r1, r7
 8000b74:	4630      	mov	r0, r6
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8000b76:	60a5      	str	r5, [r4, #8]
 8000b78:	f7ff ff34 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	  this->_M_impl._M_finish =
 8000b7c:	6060      	str	r0, [r4, #4]
      }
 8000b7e:	4620      	mov	r0, r4
 8000b80:	b003      	add	sp, #12
 8000b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b84:	08016b50 	.word	0x08016b50

08000b88 <main>:
{
 8000b88:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f04f 0814 	mov.w	r8, #20
{
 8000b90:	b0b7      	sub	sp, #220	@ 0xdc
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b92:	4dd6      	ldr	r5, [pc, #856]	@ (8000eec <main+0x364>)
  HAL_Init();
 8000b94:	f002 fa6a 	bl	800306c <HAL_Init>
  SystemClock_Config();
 8000b98:	f7ff fdae 	bl	80006f8 <_Z18SystemClock_Configv>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2400      	movs	r4, #0
  PeriphCommonClock_Config();
 8000b9e:	f7ff fe37 	bl	8000810 <_Z24PeriphCommonClock_Configv>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba2:	4642      	mov	r2, r8
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	a82f      	add	r0, sp, #188	@ 0xbc
 8000ba8:	f015 fe5a 	bl	8016860 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bac:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  HAL_GPIO_WritePin(GPIOE, EN_CM4_Pin|nBT_CM4_Pin|nWL_CM4_Pin, GPIO_PIN_SET);
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	2134      	movs	r1, #52	@ 0x34
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bb4:	f043 0310 	orr.w	r3, r3, #16
  HAL_GPIO_WritePin(GPIOE, EN_CM4_Pin|nBT_CM4_Pin|nWL_CM4_Pin, GPIO_PIN_SET);
 8000bb8:	48cd      	ldr	r0, [pc, #820]	@ (8000ef0 <main+0x368>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000bba:	2711      	movs	r7, #17
  GPIO_InitStruct.Pin = PG_CM4_Pin;
 8000bbc:	f04f 0b08 	mov.w	fp, #8
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bc0:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc4:	2601      	movs	r6, #1
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bc6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  GPIO_InitStruct.Pin = nRST_IMU_Pin;
 8000bca:	f04f 0a02 	mov.w	sl, #2
  GPIO_InitStruct.Pin = WAKE_4G_Pin;
 8000bce:	f04f 0910 	mov.w	r9, #16
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bd2:	f003 0310 	and.w	r3, r3, #16
 8000bd6:	9306      	str	r3, [sp, #24]
 8000bd8:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bda:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000bde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000be2:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000be6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000bea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bee:	9307      	str	r3, [sp, #28]
 8000bf0:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000bf6:	f043 0301 	orr.w	r3, r3, #1
 8000bfa:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000bfe:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	9308      	str	r3, [sp, #32]
 8000c08:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000c0e:	f043 0304 	orr.w	r3, r3, #4
 8000c12:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000c16:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000c1a:	f003 0304 	and.w	r3, r3, #4
 8000c1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8000c20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c22:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000c26:	f043 0302 	orr.w	r3, r3, #2
 8000c2a:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000c2e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	930a      	str	r3, [sp, #40]	@ 0x28
 8000c38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c3a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000c3e:	f043 0308 	orr.w	r3, r3, #8
 8000c42:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000c46:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000c4a:	f003 0308 	and.w	r3, r3, #8
 8000c4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000c50:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  HAL_GPIO_WritePin(GPIOE, EN_CM4_Pin|nBT_CM4_Pin|nWL_CM4_Pin, GPIO_PIN_SET);
 8000c52:	f005 fad1 	bl	80061f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, STOP_CM4_Pin|LED_STATUS_Pin|LED_ACTIVITY_Pin|LED_FAULT_Pin
 8000c56:	2200      	movs	r2, #0
 8000c58:	f64f 0140 	movw	r1, #63552	@ 0xf840
 8000c5c:	48a4      	ldr	r0, [pc, #656]	@ (8000ef0 <main+0x368>)
 8000c5e:	f005 facb 	bl	80061f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(nRST_IMU_GPIO_Port, nRST_IMU_Pin, GPIO_PIN_SET);
 8000c62:	2201      	movs	r2, #1
 8000c64:	2102      	movs	r1, #2
 8000c66:	48a3      	ldr	r0, [pc, #652]	@ (8000ef4 <main+0x36c>)
 8000c68:	f005 fac6 	bl	80061f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(WDISABLE_4G_GPIO_Port, WDISABLE_4G_Pin, GPIO_PIN_SET);
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	2120      	movs	r1, #32
 8000c70:	48a1      	ldr	r0, [pc, #644]	@ (8000ef8 <main+0x370>)
 8000c72:	f005 fac1 	bl	80061f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PERST_4G_GPIO_Port, PERST_4G_Pin, GPIO_PIN_SET);
 8000c76:	2201      	movs	r2, #1
 8000c78:	2102      	movs	r1, #2
 8000c7a:	48a0      	ldr	r0, [pc, #640]	@ (8000efc <main+0x374>)
 8000c7c:	f005 fabc 	bl	80061f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED_USER3_Pin|LED_UART_CM4_Pin, GPIO_PIN_RESET);
 8000c80:	2200      	movs	r2, #0
 8000c82:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8000c86:	489d      	ldr	r0, [pc, #628]	@ (8000efc <main+0x374>)
 8000c88:	f005 fab6 	bl	80061f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, SW_OUTPUT_Pin|SW_OVERWRITE_Pin|LED_UART_BACK_Pin|LED_FDCAN2_Pin
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f44f 614f 	mov.w	r1, #3312	@ 0xcf0
 8000c92:	489b      	ldr	r0, [pc, #620]	@ (8000f00 <main+0x378>)
 8000c94:	f005 fab0 	bl	80061f8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c98:	2334      	movs	r3, #52	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c9a:	a92f      	add	r1, sp, #188	@ 0xbc
 8000c9c:	4894      	ldr	r0, [pc, #592]	@ (8000ef0 <main+0x368>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c9e:	e9cd 372f 	strd	r3, r7, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ca6:	f005 f997 	bl	8005fd8 <HAL_GPIO_Init>
  HAL_GPIO_Init(PG_CM4_GPIO_Port, &GPIO_InitStruct);
 8000caa:	a92f      	add	r1, sp, #188	@ 0xbc
 8000cac:	4890      	ldr	r0, [pc, #576]	@ (8000ef0 <main+0x368>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	9431      	str	r4, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb0:	e9cd b42f 	strd	fp, r4, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(PG_CM4_GPIO_Port, &GPIO_InitStruct);
 8000cb4:	f005 f990 	bl	8005fd8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb8:	f64f 0340 	movw	r3, #63552	@ 0xf840
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cbc:	a92f      	add	r1, sp, #188	@ 0xbc
 8000cbe:	488c      	ldr	r0, [pc, #560]	@ (8000ef0 <main+0x368>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc0:	e9cd 362f 	strd	r3, r6, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cc8:	f005 f986 	bl	8005fd8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DRDY_IMU_Pin|SD_PRESENCE_Pin;
 8000ccc:	f248 0301 	movw	r3, #32769	@ 0x8001
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd0:	a92f      	add	r1, sp, #188	@ 0xbc
 8000cd2:	4888      	ldr	r0, [pc, #544]	@ (8000ef4 <main+0x36c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	9431      	str	r4, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd6:	e9cd 342f 	strd	r3, r4, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cda:	f005 f97d 	bl	8005fd8 <HAL_GPIO_Init>
  HAL_GPIO_Init(nRST_IMU_GPIO_Port, &GPIO_InitStruct);
 8000cde:	a92f      	add	r1, sp, #188	@ 0xbc
 8000ce0:	4884      	ldr	r0, [pc, #528]	@ (8000ef4 <main+0x36c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000ce2:	e9cd a72f 	strd	sl, r7, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce6:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  HAL_GPIO_Init(nRST_IMU_GPIO_Port, &GPIO_InitStruct);
 8000cea:	f005 f975 	bl	8005fd8 <HAL_GPIO_Init>
  HAL_GPIO_Init(WAKE_4G_GPIO_Port, &GPIO_InitStruct);
 8000cee:	a92f      	add	r1, sp, #188	@ 0xbc
 8000cf0:	4881      	ldr	r0, [pc, #516]	@ (8000ef8 <main+0x370>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cf2:	9631      	str	r6, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf4:	e9cd 942f 	strd	r9, r4, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(WAKE_4G_GPIO_Port, &GPIO_InitStruct);
 8000cf8:	f005 f96e 	bl	8005fd8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = WDISABLE_4G_Pin;
 8000cfc:	2320      	movs	r3, #32
  HAL_GPIO_Init(WDISABLE_4G_GPIO_Port, &GPIO_InitStruct);
 8000cfe:	a92f      	add	r1, sp, #188	@ 0xbc
 8000d00:	487d      	ldr	r0, [pc, #500]	@ (8000ef8 <main+0x370>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000d02:	e9cd 372f 	strd	r3, r7, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  HAL_GPIO_Init(WDISABLE_4G_GPIO_Port, &GPIO_InitStruct);
 8000d0a:	f005 f965 	bl	8005fd8 <HAL_GPIO_Init>
  HAL_GPIO_Init(PERST_4G_GPIO_Port, &GPIO_InitStruct);
 8000d0e:	a92f      	add	r1, sp, #188	@ 0xbc
 8000d10:	487a      	ldr	r0, [pc, #488]	@ (8000efc <main+0x374>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000d12:	e9cd a72f 	strd	sl, r7, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d16:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d1a:	f44f 1a88 	mov.w	sl, #1114112	@ 0x110000
  HAL_GPIO_Init(PERST_4G_GPIO_Port, &GPIO_InitStruct);
 8000d1e:	f005 f95b 	bl	8005fd8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d22:	2324      	movs	r3, #36	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d24:	a92f      	add	r1, sp, #188	@ 0xbc
 8000d26:	4875      	ldr	r0, [pc, #468]	@ (8000efc <main+0x374>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	9431      	str	r4, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d2a:	e9cd 3a2f 	strd	r3, sl, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2e:	f005 f953 	bl	8005fd8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_USER3_Pin|LED_UART_CM4_Pin;
 8000d32:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d36:	a92f      	add	r1, sp, #188	@ 0xbc
 8000d38:	4870      	ldr	r0, [pc, #448]	@ (8000efc <main+0x374>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3a:	e9cd 362f 	strd	r3, r6, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d42:	f005 f949 	bl	8005fd8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SW_OUTPUT_Pin|SW_OVERWRITE_Pin|LED_UART_BACK_Pin|LED_FDCAN2_Pin
 8000d46:	f44f 634f 	mov.w	r3, #3312	@ 0xcf0
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d4a:	a92f      	add	r1, sp, #188	@ 0xbc
 8000d4c:	486c      	ldr	r0, [pc, #432]	@ (8000f00 <main+0x378>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4e:	e9cd 362f 	strd	r3, r6, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d52:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d56:	f005 f93f 	bl	8005fd8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SW_INPUT_Pin;
 8000d5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  HAL_GPIO_Init(SW_INPUT_GPIO_Port, &GPIO_InitStruct);
 8000d5e:	a92f      	add	r1, sp, #188	@ 0xbc
 8000d60:	4867      	ldr	r0, [pc, #412]	@ (8000f00 <main+0x378>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	9431      	str	r4, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d64:	e9cd 342f 	strd	r3, r4, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(SW_INPUT_GPIO_Port, &GPIO_InitStruct);
 8000d68:	f005 f936 	bl	8005fd8 <HAL_GPIO_Init>
  HAL_GPIO_Init(LED_RS485_GPIO_Port, &GPIO_InitStruct);
 8000d6c:	a92f      	add	r1, sp, #188	@ 0xbc
 8000d6e:	4864      	ldr	r0, [pc, #400]	@ (8000f00 <main+0x378>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	9431      	str	r4, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d72:	e9cd ba2f 	strd	fp, sl, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(LED_RS485_GPIO_Port, &GPIO_InitStruct);
 8000d76:	f005 f92f 	bl	8005fd8 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d7a:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d7e:	4622      	mov	r2, r4
 8000d80:	2105      	movs	r1, #5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d82:	4333      	orrs	r3, r6
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d84:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d86:	f8c5 30d8 	str.w	r3, [r5, #216]	@ 0xd8
 8000d8a:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
 8000d8e:	4033      	ands	r3, r6
 8000d90:	9304      	str	r3, [sp, #16]
 8000d92:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d94:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
 8000d98:	f043 0302 	orr.w	r3, r3, #2
 8000d9c:	f8c5 30d8 	str.w	r3, [r5, #216]	@ 0xd8
 8000da0:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
  hadc1.Instance = ADC1;
 8000da4:	4d57      	ldr	r5, [pc, #348]	@ (8000f04 <main+0x37c>)
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000da6:	f003 0302 	and.w	r3, r3, #2
 8000daa:	9305      	str	r3, [sp, #20]
 8000dac:	9b05      	ldr	r3, [sp, #20]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000dae:	f002 ff9f 	bl	8003cf0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000db2:	200b      	movs	r0, #11
 8000db4:	f002 ffac 	bl	8003d10 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000db8:	4622      	mov	r2, r4
 8000dba:	2105      	movs	r1, #5
 8000dbc:	200c      	movs	r0, #12
 8000dbe:	f002 ff97 	bl	8003cf0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000dc2:	200c      	movs	r0, #12
 8000dc4:	f002 ffa4 	bl	8003d10 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000dc8:	4622      	mov	r2, r4
 8000dca:	2105      	movs	r1, #5
 8000dcc:	200d      	movs	r0, #13
 8000dce:	f002 ff8f 	bl	8003cf0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000dd2:	200d      	movs	r0, #13
 8000dd4:	f002 ff9c 	bl	8003d10 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000dd8:	4622      	mov	r2, r4
 8000dda:	2105      	movs	r1, #5
 8000ddc:	200e      	movs	r0, #14
 8000dde:	f002 ff87 	bl	8003cf0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000de2:	200e      	movs	r0, #14
 8000de4:	f002 ff94 	bl	8003d10 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000de8:	4622      	mov	r2, r4
 8000dea:	2105      	movs	r1, #5
 8000dec:	200f      	movs	r0, #15
 8000dee:	f002 ff7f 	bl	8003cf0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000df2:	200f      	movs	r0, #15
 8000df4:	f002 ff8c 	bl	8003d10 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000df8:	4622      	mov	r2, r4
 8000dfa:	2105      	movs	r1, #5
 8000dfc:	4648      	mov	r0, r9
 8000dfe:	f002 ff77 	bl	8003cf0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000e02:	4648      	mov	r0, r9
 8000e04:	f002 ff84 	bl	8003d10 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000e08:	4622      	mov	r2, r4
 8000e0a:	2105      	movs	r1, #5
 8000e0c:	4638      	mov	r0, r7
 8000e0e:	f002 ff6f 	bl	8003cf0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000e12:	4638      	mov	r0, r7
 8000e14:	f002 ff7c 	bl	8003d10 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000e18:	4622      	mov	r2, r4
 8000e1a:	2105      	movs	r1, #5
 8000e1c:	202f      	movs	r0, #47	@ 0x2f
 8000e1e:	f002 ff67 	bl	8003cf0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000e22:	202f      	movs	r0, #47	@ 0x2f
 8000e24:	f002 ff74 	bl	8003d10 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000e28:	4622      	mov	r2, r4
 8000e2a:	2105      	movs	r1, #5
 8000e2c:	2038      	movs	r0, #56	@ 0x38
 8000e2e:	f002 ff5f 	bl	8003cf0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000e32:	2038      	movs	r0, #56	@ 0x38
 8000e34:	f002 ff6c 	bl	8003d10 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000e38:	4622      	mov	r2, r4
 8000e3a:	2105      	movs	r1, #5
 8000e3c:	2039      	movs	r0, #57	@ 0x39
 8000e3e:	f002 ff57 	bl	8003cf0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000e42:	2039      	movs	r0, #57	@ 0x39
 8000e44:	f002 ff64 	bl	8003d10 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000e48:	4622      	mov	r2, r4
 8000e4a:	2105      	movs	r1, #5
 8000e4c:	203a      	movs	r0, #58	@ 0x3a
 8000e4e:	f002 ff4f 	bl	8003cf0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000e52:	203a      	movs	r0, #58	@ 0x3a
 8000e54:	f002 ff5c 	bl	8003d10 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000e58:	4622      	mov	r2, r4
 8000e5a:	2105      	movs	r1, #5
 8000e5c:	203b      	movs	r0, #59	@ 0x3b
 8000e5e:	f002 ff47 	bl	8003cf0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000e62:	203b      	movs	r0, #59	@ 0x3b
 8000e64:	f002 ff54 	bl	8003d10 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8000e68:	4622      	mov	r2, r4
 8000e6a:	2105      	movs	r1, #5
 8000e6c:	203c      	movs	r0, #60	@ 0x3c
 8000e6e:	f002 ff3f 	bl	8003cf0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000e72:	203c      	movs	r0, #60	@ 0x3c
 8000e74:	f002 ff4c 	bl	8003d10 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 8000e78:	4622      	mov	r2, r4
 8000e7a:	2105      	movs	r1, #5
 8000e7c:	2044      	movs	r0, #68	@ 0x44
 8000e7e:	f002 ff37 	bl	8003cf0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000e82:	2044      	movs	r0, #68	@ 0x44
 8000e84:	f002 ff44 	bl	8003d10 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8000e88:	4622      	mov	r2, r4
 8000e8a:	2105      	movs	r1, #5
 8000e8c:	2045      	movs	r0, #69	@ 0x45
 8000e8e:	f002 ff2f 	bl	8003cf0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000e92:	2045      	movs	r0, #69	@ 0x45
 8000e94:	f002 ff3c 	bl	8003d10 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8000e98:	4622      	mov	r2, r4
 8000e9a:	2105      	movs	r1, #5
 8000e9c:	2046      	movs	r0, #70	@ 0x46
 8000e9e:	f002 ff27 	bl	8003cf0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000ea2:	2046      	movs	r0, #70	@ 0x46
 8000ea4:	f002 ff34 	bl	8003d10 <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ea8:	4621      	mov	r1, r4
 8000eaa:	221c      	movs	r2, #28
 8000eac:	a82f      	add	r0, sp, #188	@ 0xbc
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eae:	2704      	movs	r7, #4
  ADC_MultiModeTypeDef multimode = {0};
 8000eb0:	942d      	str	r4, [sp, #180]	@ 0xb4
 8000eb2:	e9cd 442b 	strd	r4, r4, [sp, #172]	@ 0xac
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eb6:	f015 fcd3 	bl	8016860 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8000eba:	4913      	ldr	r1, [pc, #76]	@ (8000f08 <main+0x380>)
 8000ebc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ec0:	4628      	mov	r0, r5
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ec2:	612f      	str	r7, [r5, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ec4:	82ac      	strh	r4, [r5, #20]
  hadc1.Init.NbrOfConversion = 1;
 8000ec6:	61ae      	str	r6, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ec8:	772c      	strb	r4, [r5, #28]
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000eca:	636c      	str	r4, [r5, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000ecc:	f885 4038 	strb.w	r4, [r5, #56]	@ 0x38
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8000ed0:	e9c5 1300 	strd	r1, r3, [r5]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ed4:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ed8:	e9c5 4409 	strd	r4, r4, [r5, #36]	@ 0x24
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000edc:	e9c5 440b 	strd	r4, r4, [r5, #44]	@ 0x2c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ee0:	f002 fc8c 	bl	80037fc <HAL_ADC_Init>
 8000ee4:	b190      	cbz	r0, 8000f0c <main+0x384>
 8000ee6:	b672      	cpsid	i
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <main+0x360>
 8000eea:	bf00      	nop
 8000eec:	58024400 	.word	0x58024400
 8000ef0:	58021000 	.word	0x58021000
 8000ef4:	58020000 	.word	0x58020000
 8000ef8:	58020800 	.word	0x58020800
 8000efc:	58020400 	.word	0x58020400
 8000f00:	58020c00 	.word	0x58020c00
 8000f04:	24001ed0 	.word	0x24001ed0
 8000f08:	40022000 	.word	0x40022000
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f0c:	902b      	str	r0, [sp, #172]	@ 0xac
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f0e:	a92b      	add	r1, sp, #172	@ 0xac
 8000f10:	4628      	mov	r0, r5
 8000f12:	f002 fdf3 	bl	8003afc <HAL_ADCEx_MultiModeConfigChannel>
 8000f16:	b108      	cbz	r0, 8000f1c <main+0x394>
 8000f18:	b672      	cpsid	i
  while (1)
 8000f1a:	e7fe      	b.n	8000f1a <main+0x392>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f1c:	4aa5      	ldr	r2, [pc, #660]	@ (80011b4 <main+0x62c>)
 8000f1e:	2306      	movs	r3, #6
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f20:	2403      	movs	r4, #3
  sConfig.OffsetSignedSaturation = DISABLE;
 8000f22:	f88d 00d5 	strb.w	r0, [sp, #213]	@ 0xd5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f26:	a92f      	add	r1, sp, #188	@ 0xbc
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f28:	e9cd 232f 	strd	r2, r3, [sp, #188]	@ 0xbc
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f2c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
  sConfig.Offset = 0;
 8000f30:	e9cd 7033 	strd	r7, r0, [sp, #204]	@ 0xcc
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f34:	4628      	mov	r0, r5
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f36:	e9cd 4331 	strd	r4, r3, [sp, #196]	@ 0xc4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f3a:	f002 f91f 	bl	800317c <HAL_ADC_ConfigChannel>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	b108      	cbz	r0, 8000f46 <main+0x3be>
 8000f42:	b672      	cpsid	i
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <main+0x3bc>
  hfdcan1.Instance = FDCAN1;
 8000f46:	489c      	ldr	r0, [pc, #624]	@ (80011b8 <main+0x630>)
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 8000f48:	f04f 090a 	mov.w	r9, #10
  hfdcan1.Instance = FDCAN1;
 8000f4c:	4b9b      	ldr	r3, [pc, #620]	@ (80011bc <main+0x634>)
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 8000f4e:	2512      	movs	r5, #18
  hfdcan1.Init.NominalTimeSeg1 = 79;
 8000f50:	f04f 0b4f 	mov.w	fp, #79	@ 0x4f
  hfdcan1.Init.DataTimeSeg1 = 21;
 8000f54:	f04f 0a15 	mov.w	sl, #21
  hfdcan1.Instance = FDCAN1;
 8000f58:	6003      	str	r3, [r0, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000f5a:	f44f 7340 	mov.w	r3, #768	@ 0x300
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000f5e:	8202      	strh	r2, [r0, #16]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000f60:	7482      	strb	r2, [r0, #18]
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000f62:	63c2      	str	r2, [r0, #60]	@ 0x3c
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_64;
 8000f64:	6685      	str	r5, [r0, #104]	@ 0x68
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000f66:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hfdcan1.Init.StdFiltersNbr = 0;
 8000f6a:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000f6e:	e9c0 2712 	strd	r2, r7, [r0, #72]	@ 0x48
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000f72:	e9c0 2714 	strd	r2, r7, [r0, #80]	@ 0x50
  hfdcan1.Init.TxBuffersNbr = 0;
 8000f76:	e9c0 2216 	strd	r2, r2, [r0, #88]	@ 0x58
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000f7a:	e9c0 9218 	strd	r9, r2, [r0, #96]	@ 0x60
  hfdcan1.Init.NominalSyncJumpWidth = 20;
 8000f7e:	e9c0 6805 	strd	r6, r8, [r0, #20]
  hfdcan1.Init.NominalTimeSeg2 = 20;
 8000f82:	e9c0 b807 	strd	fp, r8, [r0, #28]
  hfdcan1.Init.DataSyncJumpWidth = 3;
 8000f86:	e9c0 6409 	strd	r6, r4, [r0, #36]	@ 0x24
  hfdcan1.Init.DataTimeSeg2 = 3;
 8000f8a:	e9c0 a40b 	strd	sl, r4, [r0, #44]	@ 0x2c
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 8000f8e:	e9c0 9510 	strd	r9, r5, [r0, #64]	@ 0x40
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000f92:	f004 fb93 	bl	80056bc <HAL_FDCAN_Init>
 8000f96:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	b108      	cbz	r0, 8000fa2 <main+0x41a>
 8000f9e:	b672      	cpsid	i
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <main+0x418>
  hfdcan2.Instance = FDCAN2;
 8000fa2:	4887      	ldr	r0, [pc, #540]	@ (80011c0 <main+0x638>)
 8000fa4:	4987      	ldr	r1, [pc, #540]	@ (80011c4 <main+0x63c>)
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000fa6:	8202      	strh	r2, [r0, #16]
  hfdcan2.Instance = FDCAN2;
 8000fa8:	6001      	str	r1, [r0, #0]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000faa:	7482      	strb	r2, [r0, #18]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000fac:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hfdcan2.Init.MessageRAMOffset = 360;
 8000fb0:	f44f 73b4 	mov.w	r3, #360	@ 0x168
  hfdcan2.Init.NominalSyncJumpWidth = 20;
 8000fb4:	e9c0 6805 	strd	r6, r8, [r0, #20]
  hfdcan2.Init.NominalTimeSeg2 = 20;
 8000fb8:	e9c0 b807 	strd	fp, r8, [r0, #28]
  hfdcan2.Init.DataSyncJumpWidth = 3;
 8000fbc:	e9c0 6409 	strd	r6, r4, [r0, #36]	@ 0x24
  hfdcan2.Init.DataTimeSeg2 = 3;
 8000fc0:	e9c0 a40b 	strd	sl, r4, [r0, #44]	@ 0x2c
  hfdcan2.Init.StdFiltersNbr = 0;
 8000fc4:	e9c0 320d 	strd	r3, r2, [r0, #52]	@ 0x34
  hfdcan2.Init.RxFifo0ElmtsNbr = 10;
 8000fc8:	e9c0 290f 	strd	r2, r9, [r0, #60]	@ 0x3c
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000fcc:	e9c0 5211 	strd	r5, r2, [r0, #68]	@ 0x44
  hfdcan2.Init.RxBuffersNbr = 0;
 8000fd0:	e9c0 7213 	strd	r7, r2, [r0, #76]	@ 0x4c
  hfdcan2.Init.TxEventsNbr = 0;
 8000fd4:	e9c0 7215 	strd	r7, r2, [r0, #84]	@ 0x54
  hfdcan2.Init.TxFifoQueueElmtsNbr = 10;
 8000fd8:	e9c0 2917 	strd	r2, r9, [r0, #92]	@ 0x5c
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_64;
 8000fdc:	e9c0 2519 	strd	r2, r5, [r0, #100]	@ 0x64
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000fe0:	f004 fb6c 	bl	80056bc <HAL_FDCAN_Init>
 8000fe4:	b108      	cbz	r0, 8000fea <main+0x462>
 8000fe6:	b672      	cpsid	i
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <main+0x460>
  hi2c1.Instance = I2C1;
 8000fea:	4c77      	ldr	r4, [pc, #476]	@ (80011c8 <main+0x640>)
  hi2c1.Init.Timing = 0x307075B1;
 8000fec:	4b77      	ldr	r3, [pc, #476]	@ (80011cc <main+0x644>)
 8000fee:	4d78      	ldr	r5, [pc, #480]	@ (80011d0 <main+0x648>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ff0:	6220      	str	r0, [r4, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ff2:	e9c4 0602 	strd	r0, r6, [r4, #8]
  hi2c1.Init.OwnAddress2 = 0;
 8000ff6:	e9c4 0004 	strd	r0, r0, [r4, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ffa:	e9c4 0006 	strd	r0, r0, [r4, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ffe:	4620      	mov	r0, r4
  hi2c1.Init.Timing = 0x307075B1;
 8001000:	e9c4 3500 	strd	r3, r5, [r4]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001004:	f005 fa82 	bl	800650c <HAL_I2C_Init>
 8001008:	4601      	mov	r1, r0
 800100a:	b108      	cbz	r0, 8001010 <main+0x488>
 800100c:	b672      	cpsid	i
  while (1)
 800100e:	e7fe      	b.n	800100e <main+0x486>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001010:	4620      	mov	r0, r4
 8001012:	f005 fc6d 	bl	80068f0 <HAL_I2CEx_ConfigAnalogFilter>
 8001016:	4601      	mov	r1, r0
 8001018:	b108      	cbz	r0, 800101e <main+0x496>
 800101a:	b672      	cpsid	i
  while (1)
 800101c:	e7fe      	b.n	800101c <main+0x494>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800101e:	4620      	mov	r0, r4
 8001020:	f005 fc94 	bl	800694c <HAL_I2CEx_ConfigDigitalFilter>
 8001024:	b108      	cbz	r0, 800102a <main+0x4a2>
 8001026:	b672      	cpsid	i
  while (1)
 8001028:	e7fe      	b.n	8001028 <main+0x4a0>
  hi2c4.Instance = I2C4;
 800102a:	4c6a      	ldr	r4, [pc, #424]	@ (80011d4 <main+0x64c>)
 800102c:	4b6a      	ldr	r3, [pc, #424]	@ (80011d8 <main+0x650>)
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800102e:	6220      	str	r0, [r4, #32]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001030:	e9c4 0602 	strd	r0, r6, [r4, #8]
  hi2c4.Init.OwnAddress2 = 0;
 8001034:	e9c4 0004 	strd	r0, r0, [r4, #16]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001038:	e9c4 0006 	strd	r0, r0, [r4, #24]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800103c:	4620      	mov	r0, r4
  hi2c4.Init.Timing = 0x307075B1;
 800103e:	e9c4 3500 	strd	r3, r5, [r4]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001042:	f005 fa63 	bl	800650c <HAL_I2C_Init>
 8001046:	4601      	mov	r1, r0
 8001048:	b108      	cbz	r0, 800104e <main+0x4c6>
 800104a:	b672      	cpsid	i
  while (1)
 800104c:	e7fe      	b.n	800104c <main+0x4c4>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800104e:	4620      	mov	r0, r4
 8001050:	f005 fc4e 	bl	80068f0 <HAL_I2CEx_ConfigAnalogFilter>
 8001054:	b108      	cbz	r0, 800105a <main+0x4d2>
 8001056:	b672      	cpsid	i
  while (1)
 8001058:	e7fe      	b.n	8001058 <main+0x4d0>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 800105a:	2100      	movs	r1, #0
 800105c:	485d      	ldr	r0, [pc, #372]	@ (80011d4 <main+0x64c>)
 800105e:	f005 fc75 	bl	800694c <HAL_I2CEx_ConfigDigitalFilter>
 8001062:	b108      	cbz	r0, 8001068 <main+0x4e0>
 8001064:	b672      	cpsid	i
  while (1)
 8001066:	e7fe      	b.n	8001066 <main+0x4de>
  huart1.Instance = USART1;
 8001068:	4c5c      	ldr	r4, [pc, #368]	@ (80011dc <main+0x654>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 800106a:	250c      	movs	r5, #12
  huart1.Init.BaudRate = 115200;
 800106c:	4b5c      	ldr	r3, [pc, #368]	@ (80011e0 <main+0x658>)
 800106e:	f44f 36e1 	mov.w	r6, #115200	@ 0x1c200
  huart1.Init.Parity = UART_PARITY_NONE;
 8001072:	6120      	str	r0, [r4, #16]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001074:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001078:	e9c4 5005 	strd	r5, r0, [r4, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800107c:	e9c4 0007 	strd	r0, r0, [r4, #28]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001080:	e9c4 0009 	strd	r0, r0, [r4, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001084:	4620      	mov	r0, r4
  huart1.Init.BaudRate = 115200;
 8001086:	e9c4 3600 	strd	r3, r6, [r4]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800108a:	f00a fa90 	bl	800b5ae <HAL_UART_Init>
 800108e:	4601      	mov	r1, r0
 8001090:	b108      	cbz	r0, 8001096 <main+0x50e>
 8001092:	b672      	cpsid	i
  while (1)
 8001094:	e7fe      	b.n	8001094 <main+0x50c>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001096:	4620      	mov	r0, r4
 8001098:	f00a fba2 	bl	800b7e0 <HAL_UARTEx_SetTxFifoThreshold>
 800109c:	4601      	mov	r1, r0
 800109e:	b108      	cbz	r0, 80010a4 <main+0x51c>
 80010a0:	b672      	cpsid	i
  while (1)
 80010a2:	e7fe      	b.n	80010a2 <main+0x51a>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010a4:	4620      	mov	r0, r4
 80010a6:	f00a fbc0 	bl	800b82a <HAL_UARTEx_SetRxFifoThreshold>
 80010aa:	b108      	cbz	r0, 80010b0 <main+0x528>
 80010ac:	b672      	cpsid	i
  while (1)
 80010ae:	e7fe      	b.n	80010ae <main+0x526>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80010b0:	4620      	mov	r0, r4
 80010b2:	f00a fb76 	bl	800b7a2 <HAL_UARTEx_DisableFifoMode>
 80010b6:	b108      	cbz	r0, 80010bc <main+0x534>
 80010b8:	b672      	cpsid	i
  while (1)
 80010ba:	e7fe      	b.n	80010ba <main+0x532>
  huart2.Instance = USART2;
 80010bc:	4c49      	ldr	r4, [pc, #292]	@ (80011e4 <main+0x65c>)
 80010be:	4b4a      	ldr	r3, [pc, #296]	@ (80011e8 <main+0x660>)
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010c0:	62a0      	str	r0, [r4, #40]	@ 0x28
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010c2:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010c6:	e9c4 0504 	strd	r0, r5, [r4, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ca:	e9c4 0006 	strd	r0, r0, [r4, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010ce:	e9c4 0008 	strd	r0, r0, [r4, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010d2:	4620      	mov	r0, r4
  huart2.Init.BaudRate = 115200;
 80010d4:	e9c4 3600 	strd	r3, r6, [r4]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010d8:	f00a fa69 	bl	800b5ae <HAL_UART_Init>
 80010dc:	4601      	mov	r1, r0
 80010de:	b108      	cbz	r0, 80010e4 <main+0x55c>
 80010e0:	b672      	cpsid	i
  while (1)
 80010e2:	e7fe      	b.n	80010e2 <main+0x55a>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010e4:	4620      	mov	r0, r4
 80010e6:	f00a fb7b 	bl	800b7e0 <HAL_UARTEx_SetTxFifoThreshold>
 80010ea:	4601      	mov	r1, r0
 80010ec:	b108      	cbz	r0, 80010f2 <main+0x56a>
 80010ee:	b672      	cpsid	i
  while (1)
 80010f0:	e7fe      	b.n	80010f0 <main+0x568>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010f2:	4620      	mov	r0, r4
 80010f4:	f00a fb99 	bl	800b82a <HAL_UARTEx_SetRxFifoThreshold>
 80010f8:	b108      	cbz	r0, 80010fe <main+0x576>
 80010fa:	b672      	cpsid	i
  while (1)
 80010fc:	e7fe      	b.n	80010fc <main+0x574>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80010fe:	4620      	mov	r0, r4
 8001100:	f00a fb4f 	bl	800b7a2 <HAL_UARTEx_DisableFifoMode>
 8001104:	4603      	mov	r3, r0
 8001106:	b108      	cbz	r0, 800110c <main+0x584>
 8001108:	b672      	cpsid	i
  while (1)
 800110a:	e7fe      	b.n	800110a <main+0x582>
  huart3.Instance = USART3;
 800110c:	4837      	ldr	r0, [pc, #220]	@ (80011ec <main+0x664>)
  if (HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800110e:	4619      	mov	r1, r3
  huart3.Instance = USART3;
 8001110:	4a37      	ldr	r2, [pc, #220]	@ (80011f0 <main+0x668>)
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001112:	6283      	str	r3, [r0, #40]	@ 0x28
  huart3.Init.BaudRate = 115200;
 8001114:	e9c0 2600 	strd	r2, r6, [r0]
  if (HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8001118:	461a      	mov	r2, r3
  huart3.Init.StopBits = UART_STOPBITS_1;
 800111a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800111e:	e9c0 3504 	strd	r3, r5, [r0, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001122:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001126:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800112a:	f00a faf3 	bl	800b714 <HAL_RS485Ex_Init>
 800112e:	b108      	cbz	r0, 8001134 <main+0x5ac>
 8001130:	b672      	cpsid	i
  while (1)
 8001132:	e7fe      	b.n	8001132 <main+0x5aa>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001134:	2100      	movs	r1, #0
 8001136:	482d      	ldr	r0, [pc, #180]	@ (80011ec <main+0x664>)
 8001138:	f00a fb52 	bl	800b7e0 <HAL_UARTEx_SetTxFifoThreshold>
 800113c:	4601      	mov	r1, r0
 800113e:	b108      	cbz	r0, 8001144 <main+0x5bc>
 8001140:	b672      	cpsid	i
  while (1)
 8001142:	e7fe      	b.n	8001142 <main+0x5ba>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001144:	4829      	ldr	r0, [pc, #164]	@ (80011ec <main+0x664>)
 8001146:	f00a fb70 	bl	800b82a <HAL_UARTEx_SetRxFifoThreshold>
 800114a:	b108      	cbz	r0, 8001150 <main+0x5c8>
 800114c:	b672      	cpsid	i
  while (1)
 800114e:	e7fe      	b.n	800114e <main+0x5c6>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001150:	4826      	ldr	r0, [pc, #152]	@ (80011ec <main+0x664>)
 8001152:	f00a fb26 	bl	800b7a2 <HAL_UARTEx_DisableFifoMode>
 8001156:	b108      	cbz	r0, 800115c <main+0x5d4>
 8001158:	b672      	cpsid	i
  while (1)
 800115a:	e7fe      	b.n	800115a <main+0x5d2>
  huart6.Instance = USART6;
 800115c:	4c25      	ldr	r4, [pc, #148]	@ (80011f4 <main+0x66c>)
  huart6.Init.BaudRate = 115200;
 800115e:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001162:	f8df a094 	ldr.w	sl, [pc, #148]	@ 80011f8 <main+0x670>
  huart6.Init.Parity = UART_PARITY_NONE;
 8001166:	6120      	str	r0, [r4, #16]
  huart6.Init.BaudRate = 115200;
 8001168:	e9c4 a300 	strd	sl, r3, [r4]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800116c:	230c      	movs	r3, #12
  huart6.Init.StopBits = UART_STOPBITS_1;
 800116e:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001172:	e9c4 3005 	strd	r3, r0, [r4, #20]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001176:	e9c4 0007 	strd	r0, r0, [r4, #28]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800117a:	e9c4 0009 	strd	r0, r0, [r4, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800117e:	4620      	mov	r0, r4
 8001180:	f00a fa15 	bl	800b5ae <HAL_UART_Init>
 8001184:	4601      	mov	r1, r0
 8001186:	b108      	cbz	r0, 800118c <main+0x604>
 8001188:	b672      	cpsid	i
  while (1)
 800118a:	e7fe      	b.n	800118a <main+0x602>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800118c:	4620      	mov	r0, r4
 800118e:	f00a fb27 	bl	800b7e0 <HAL_UARTEx_SetTxFifoThreshold>
 8001192:	4601      	mov	r1, r0
 8001194:	b108      	cbz	r0, 800119a <main+0x612>
 8001196:	b672      	cpsid	i
  while (1)
 8001198:	e7fe      	b.n	8001198 <main+0x610>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800119a:	4620      	mov	r0, r4
 800119c:	f00a fb45 	bl	800b82a <HAL_UARTEx_SetRxFifoThreshold>
 80011a0:	b108      	cbz	r0, 80011a6 <main+0x61e>
 80011a2:	b672      	cpsid	i
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <main+0x61c>
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80011a6:	4620      	mov	r0, r4
 80011a8:	f00a fafb 	bl	800b7a2 <HAL_UARTEx_DisableFifoMode>
 80011ac:	4604      	mov	r4, r0
 80011ae:	b328      	cbz	r0, 80011fc <main+0x674>
 80011b0:	b672      	cpsid	i
  while (1)
 80011b2:	e7fe      	b.n	80011b2 <main+0x62a>
 80011b4:	4b840000 	.word	0x4b840000
 80011b8:	24001dcc 	.word	0x24001dcc
 80011bc:	4000a000 	.word	0x4000a000
 80011c0:	24001d2c 	.word	0x24001d2c
 80011c4:	4000a400 	.word	0x4000a400
 80011c8:	24001ce0 	.word	0x24001ce0
 80011cc:	40005400 	.word	0x40005400
 80011d0:	307075b1 	.word	0x307075b1
 80011d4:	24001c94 	.word	0x24001c94
 80011d8:	58001c00 	.word	0x58001c00
 80011dc:	24001850 	.word	0x24001850
 80011e0:	40011000 	.word	0x40011000
 80011e4:	240017c0 	.word	0x240017c0
 80011e8:	40004400 	.word	0x40004400
 80011ec:	24001730 	.word	0x24001730
 80011f0:	40004800 	.word	0x40004800
 80011f4:	240016a0 	.word	0x240016a0
 80011f8:	40011400 	.word	0x40011400
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011fc:	4601      	mov	r1, r0
 80011fe:	2210      	movs	r2, #16
 8001200:	a82f      	add	r0, sp, #188	@ 0xbc
  htim4.Instance = TIM4;
 8001202:	4da5      	ldr	r5, [pc, #660]	@ (8001498 <main+0x910>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001204:	f015 fb2c 	bl	8016860 <memset>
  htim4.Init.Prescaler = 60000;
 8001208:	f8df 92c0 	ldr.w	r9, [pc, #704]	@ 80014cc <main+0x944>
 800120c:	f64e 2360 	movw	r3, #60000	@ 0xea60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001210:	ae2b      	add	r6, sp, #172	@ 0xac
 8001212:	942b      	str	r4, [sp, #172]	@ 0xac
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001214:	4628      	mov	r0, r5
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001216:	60ac      	str	r4, [r5, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001218:	61ac      	str	r4, [r5, #24]
  htim4.Init.Prescaler = 60000;
 800121a:	e9c5 9300 	strd	r9, r3, [r5]
  htim4.Init.Period = 65535;
 800121e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001222:	e9c6 4401 	strd	r4, r4, [r6, #4]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001226:	e9c5 3403 	strd	r3, r4, [r5, #12]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800122a:	f008 ff75 	bl	800a118 <HAL_TIM_Base_Init>
 800122e:	b108      	cbz	r0, 8001234 <main+0x6ac>
 8001230:	b672      	cpsid	i
  while (1)
 8001232:	e7fe      	b.n	8001232 <main+0x6aa>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001234:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001238:	a92f      	add	r1, sp, #188	@ 0xbc
 800123a:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800123c:	932f      	str	r3, [sp, #188]	@ 0xbc
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800123e:	f009 f8bf 	bl	800a3c0 <HAL_TIM_ConfigClockSource>
 8001242:	b108      	cbz	r0, 8001248 <main+0x6c0>
 8001244:	b672      	cpsid	i
  while (1)
 8001246:	e7fe      	b.n	8001246 <main+0x6be>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001248:	902b      	str	r0, [sp, #172]	@ 0xac
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800124a:	4631      	mov	r1, r6
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800124c:	902d      	str	r0, [sp, #180]	@ 0xb4
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800124e:	4628      	mov	r0, r5
 8001250:	f009 fa1a 	bl	800a688 <HAL_TIMEx_MasterConfigSynchronization>
 8001254:	b108      	cbz	r0, 800125a <main+0x6d2>
 8001256:	b672      	cpsid	i
  while (1)
 8001258:	e7fe      	b.n	8001258 <main+0x6d0>
  ADC_ChannelConfTypeDef sConfig = {0};
 800125a:	221c      	movs	r2, #28
 800125c:	2100      	movs	r1, #0
 800125e:	a82f      	add	r0, sp, #188	@ 0xbc
  hadc3.Instance = ADC3;
 8001260:	4c8e      	ldr	r4, [pc, #568]	@ (800149c <main+0x914>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8001262:	f015 fafd 	bl	8016860 <memset>
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8001266:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800126a:	f8df e264 	ldr.w	lr, [pc, #612]	@ 80014d0 <main+0x948>
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800126e:	f04f 0808 	mov.w	r8, #8
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001272:	2504      	movs	r5, #4
  hadc3.Init.NbrOfConversion = 1;
 8001274:	2201      	movs	r2, #1
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001276:	4620      	mov	r0, r4
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001278:	6125      	str	r5, [r4, #16]
  hadc3.Init.NbrOfConversion = 1;
 800127a:	61a2      	str	r2, [r4, #24]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 800127c:	e9c4 e300 	strd	lr, r3, [r4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001280:	2300      	movs	r3, #0
 8001282:	e9c4 8302 	strd	r8, r3, [r4, #8]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001286:	82a3      	strh	r3, [r4, #20]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001288:	7723      	strb	r3, [r4, #28]
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800128a:	6363      	str	r3, [r4, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800128c:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001290:	e9c4 3309 	strd	r3, r3, [r4, #36]	@ 0x24
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001294:	e9c4 330b 	strd	r3, r3, [r4, #44]	@ 0x2c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001298:	f002 fab0 	bl	80037fc <HAL_ADC_Init>
 800129c:	b108      	cbz	r0, 80012a2 <main+0x71a>
 800129e:	b672      	cpsid	i
  while (1)
 80012a0:	e7fe      	b.n	80012a0 <main+0x718>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012a2:	2306      	movs	r3, #6
 80012a4:	4f7e      	ldr	r7, [pc, #504]	@ (80014a0 <main+0x918>)
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012a6:	f04f 0c03 	mov.w	ip, #3
  sConfig.OffsetSignedSaturation = DISABLE;
 80012aa:	f88d 00d5 	strb.w	r0, [sp, #213]	@ 0xd5
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012ae:	a92f      	add	r1, sp, #188	@ 0xbc
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012b0:	e9cd 732f 	strd	r7, r3, [sp, #188]	@ 0xbc
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012b4:	f240 73ff 	movw	r3, #2047	@ 0x7ff
  sConfig.Offset = 0;
 80012b8:	e9cd 5033 	strd	r5, r0, [sp, #204]	@ 0xcc
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012bc:	4620      	mov	r0, r4
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012be:	e9cd c331 	strd	ip, r3, [sp, #196]	@ 0xc4
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012c2:	f001 ff5b 	bl	800317c <HAL_ADC_ConfigChannel>
 80012c6:	b108      	cbz	r0, 80012cc <main+0x744>
 80012c8:	b672      	cpsid	i
  while (1)
 80012ca:	e7fe      	b.n	80012ca <main+0x742>
  huart4.Instance = UART4;
 80012cc:	4c75      	ldr	r4, [pc, #468]	@ (80014a4 <main+0x91c>)
  huart4.Init.Mode = UART_MODE_TX_RX;
 80012ce:	250c      	movs	r5, #12
  huart4.Init.BaudRate = 115200;
 80012d0:	4b75      	ldr	r3, [pc, #468]	@ (80014a8 <main+0x920>)
 80012d2:	f44f 37e1 	mov.w	r7, #115200	@ 0x1c200
  huart4.Init.Parity = UART_PARITY_NONE;
 80012d6:	6120      	str	r0, [r4, #16]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80012d8:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012dc:	e9c4 5005 	strd	r5, r0, [r4, #20]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012e0:	e9c4 0007 	strd	r0, r0, [r4, #28]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012e4:	e9c4 0009 	strd	r0, r0, [r4, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80012e8:	4620      	mov	r0, r4
  huart4.Init.BaudRate = 115200;
 80012ea:	e9c4 3700 	strd	r3, r7, [r4]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80012ee:	f00a f95e 	bl	800b5ae <HAL_UART_Init>
 80012f2:	4601      	mov	r1, r0
 80012f4:	b108      	cbz	r0, 80012fa <main+0x772>
 80012f6:	b672      	cpsid	i
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <main+0x770>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012fa:	4620      	mov	r0, r4
 80012fc:	f00a fa70 	bl	800b7e0 <HAL_UARTEx_SetTxFifoThreshold>
 8001300:	4601      	mov	r1, r0
 8001302:	b108      	cbz	r0, 8001308 <main+0x780>
 8001304:	b672      	cpsid	i
  while (1)
 8001306:	e7fe      	b.n	8001306 <main+0x77e>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001308:	4620      	mov	r0, r4
 800130a:	f00a fa8e 	bl	800b82a <HAL_UARTEx_SetRxFifoThreshold>
 800130e:	b108      	cbz	r0, 8001314 <main+0x78c>
 8001310:	b672      	cpsid	i
  while (1)
 8001312:	e7fe      	b.n	8001312 <main+0x78a>
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001314:	4620      	mov	r0, r4
 8001316:	f00a fa44 	bl	800b7a2 <HAL_UARTEx_DisableFifoMode>
 800131a:	b108      	cbz	r0, 8001320 <main+0x798>
 800131c:	b672      	cpsid	i
  while (1)
 800131e:	e7fe      	b.n	800131e <main+0x796>
  huart8.Instance = UART8;
 8001320:	4c62      	ldr	r4, [pc, #392]	@ (80014ac <main+0x924>)
 8001322:	4b63      	ldr	r3, [pc, #396]	@ (80014b0 <main+0x928>)
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001324:	62a0      	str	r0, [r4, #40]	@ 0x28
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001326:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800132a:	e9c4 0504 	strd	r0, r5, [r4, #16]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 800132e:	e9c4 0006 	strd	r0, r0, [r4, #24]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001332:	e9c4 0008 	strd	r0, r0, [r4, #32]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001336:	4620      	mov	r0, r4
  huart8.Init.BaudRate = 115200;
 8001338:	e9c4 3700 	strd	r3, r7, [r4]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800133c:	f00a f937 	bl	800b5ae <HAL_UART_Init>
 8001340:	4601      	mov	r1, r0
 8001342:	b108      	cbz	r0, 8001348 <main+0x7c0>
 8001344:	b672      	cpsid	i
  while (1)
 8001346:	e7fe      	b.n	8001346 <main+0x7be>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001348:	4620      	mov	r0, r4
 800134a:	f00a fa49 	bl	800b7e0 <HAL_UARTEx_SetTxFifoThreshold>
 800134e:	4601      	mov	r1, r0
 8001350:	b108      	cbz	r0, 8001356 <main+0x7ce>
 8001352:	b672      	cpsid	i
  while (1)
 8001354:	e7fe      	b.n	8001354 <main+0x7cc>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001356:	4620      	mov	r0, r4
 8001358:	f00a fa67 	bl	800b82a <HAL_UARTEx_SetRxFifoThreshold>
 800135c:	b108      	cbz	r0, 8001362 <main+0x7da>
 800135e:	b672      	cpsid	i
  while (1)
 8001360:	e7fe      	b.n	8001360 <main+0x7d8>
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001362:	4620      	mov	r0, r4
 8001364:	f00a fa1d 	bl	800b7a2 <HAL_UARTEx_DisableFifoMode>
 8001368:	b108      	cbz	r0, 800136e <main+0x7e6>
 800136a:	b672      	cpsid	i
  while (1)
 800136c:	e7fe      	b.n	800136c <main+0x7e4>
  huart7.Instance = UART7;
 800136e:	4c51      	ldr	r4, [pc, #324]	@ (80014b4 <main+0x92c>)
  huart7.Init.BaudRate = 115200;
 8001370:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001374:	4950      	ldr	r1, [pc, #320]	@ (80014b8 <main+0x930>)
  huart7.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001376:	200c      	movs	r0, #12
 8001378:	f44f 7240 	mov.w	r2, #768	@ 0x300
  huart7.Init.BaudRate = 115200;
 800137c:	e9c4 1300 	strd	r1, r3, [r4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001380:	2300      	movs	r3, #0
  huart7.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001382:	e9c4 0205 	strd	r0, r2, [r4, #20]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001386:	4620      	mov	r0, r4
  huart7.Init.Parity = UART_PARITY_NONE;
 8001388:	6123      	str	r3, [r4, #16]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800138a:	e9c4 3302 	strd	r3, r3, [r4, #8]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800138e:	e9c4 3307 	strd	r3, r3, [r4, #28]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001392:	e9c4 3309 	strd	r3, r3, [r4, #36]	@ 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001396:	f00a f90a 	bl	800b5ae <HAL_UART_Init>
 800139a:	4601      	mov	r1, r0
 800139c:	b108      	cbz	r0, 80013a2 <main+0x81a>
 800139e:	b672      	cpsid	i
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <main+0x818>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013a2:	4620      	mov	r0, r4
 80013a4:	f00a fa1c 	bl	800b7e0 <HAL_UARTEx_SetTxFifoThreshold>
 80013a8:	4601      	mov	r1, r0
 80013aa:	b108      	cbz	r0, 80013b0 <main+0x828>
 80013ac:	b672      	cpsid	i
  while (1)
 80013ae:	e7fe      	b.n	80013ae <main+0x826>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013b0:	4620      	mov	r0, r4
 80013b2:	f00a fa3a 	bl	800b82a <HAL_UARTEx_SetRxFifoThreshold>
 80013b6:	b108      	cbz	r0, 80013bc <main+0x834>
 80013b8:	b672      	cpsid	i
  while (1)
 80013ba:	e7fe      	b.n	80013ba <main+0x832>
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 80013bc:	4620      	mov	r0, r4
 80013be:	f00a f9f0 	bl	800b7a2 <HAL_UARTEx_DisableFifoMode>
 80013c2:	4603      	mov	r3, r0
 80013c4:	b108      	cbz	r0, 80013ca <main+0x842>
 80013c6:	b672      	cpsid	i
  while (1)
 80013c8:	e7fe      	b.n	80013c8 <main+0x840>
  hsd1.Instance = SDMMC1;
 80013ca:	483c      	ldr	r0, [pc, #240]	@ (80014bc <main+0x934>)
 80013cc:	4a3c      	ldr	r2, [pc, #240]	@ (80014c0 <main+0x938>)
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80013ce:	6083      	str	r3, [r0, #8]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80013d0:	e9c0 2300 	strd	r2, r3, [r0]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80013d4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80013d8:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hsd1.Init.ClockDiv = 4;
 80013dc:	2304      	movs	r3, #4
 80013de:	6143      	str	r3, [r0, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80013e0:	f008 f9f1 	bl	80097c6 <HAL_SD_Init>
 80013e4:	4605      	mov	r5, r0
 80013e6:	b108      	cbz	r0, 80013ec <main+0x864>
 80013e8:	b672      	cpsid	i
  while (1)
 80013ea:	e7fe      	b.n	80013ea <main+0x862>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ec:	af28      	add	r7, sp, #160	@ 0xa0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ee:	4601      	mov	r1, r0
 80013f0:	2210      	movs	r2, #16
 80013f2:	4630      	mov	r0, r6
 80013f4:	f015 fa34 	bl	8016860 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013f8:	221c      	movs	r2, #28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013fa:	9528      	str	r5, [sp, #160]	@ 0xa0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013fc:	4629      	mov	r1, r5
 80013fe:	a82f      	add	r0, sp, #188	@ 0xbc
  htim3.Instance = TIM3;
 8001400:	4c30      	ldr	r4, [pc, #192]	@ (80014c4 <main+0x93c>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001402:	e9c7 5501 	strd	r5, r5, [r7, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001406:	f015 fa2b 	bl	8016860 <memset>
  htim3.Init.Prescaler = 10;
 800140a:	230a      	movs	r3, #10
 800140c:	4a2e      	ldr	r2, [pc, #184]	@ (80014c8 <main+0x940>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800140e:	4620      	mov	r0, r4
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001410:	60a5      	str	r5, [r4, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001412:	61a5      	str	r5, [r4, #24]
  htim3.Init.Prescaler = 10;
 8001414:	e9c4 2300 	strd	r2, r3, [r4]
  htim3.Init.Period = 255;
 8001418:	23ff      	movs	r3, #255	@ 0xff
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800141a:	e9c4 3503 	strd	r3, r5, [r4, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800141e:	f008 fe7b 	bl	800a118 <HAL_TIM_Base_Init>
 8001422:	b108      	cbz	r0, 8001428 <main+0x8a0>
 8001424:	b672      	cpsid	i
  while (1)
 8001426:	e7fe      	b.n	8001426 <main+0x89e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001428:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800142c:	4631      	mov	r1, r6
 800142e:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001430:	932b      	str	r3, [sp, #172]	@ 0xac
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001432:	f008 ffc5 	bl	800a3c0 <HAL_TIM_ConfigClockSource>
 8001436:	b108      	cbz	r0, 800143c <main+0x8b4>
 8001438:	b672      	cpsid	i
  while (1)
 800143a:	e7fe      	b.n	800143a <main+0x8b2>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800143c:	4620      	mov	r0, r4
 800143e:	f008 fe9b 	bl	800a178 <HAL_TIM_PWM_Init>
 8001442:	b108      	cbz	r0, 8001448 <main+0x8c0>
 8001444:	b672      	cpsid	i
  while (1)
 8001446:	e7fe      	b.n	8001446 <main+0x8be>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001448:	9028      	str	r0, [sp, #160]	@ 0xa0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800144a:	4639      	mov	r1, r7
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800144c:	902a      	str	r0, [sp, #168]	@ 0xa8
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800144e:	4620      	mov	r0, r4
 8001450:	f009 f91a 	bl	800a688 <HAL_TIMEx_MasterConfigSynchronization>
 8001454:	4602      	mov	r2, r0
 8001456:	b108      	cbz	r0, 800145c <main+0x8d4>
 8001458:	b672      	cpsid	i
  while (1)
 800145a:	e7fe      	b.n	800145a <main+0x8d2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800145c:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800145e:	9033      	str	r0, [sp, #204]	@ 0xcc
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001460:	a92f      	add	r1, sp, #188	@ 0xbc
  sConfigOC.Pulse = 0;
 8001462:	e9cd 302f 	strd	r3, r0, [sp, #188]	@ 0xbc
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001466:	2302      	movs	r3, #2
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001468:	4620      	mov	r0, r4
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800146a:	9331      	str	r3, [sp, #196]	@ 0xc4
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800146c:	f008 fefe 	bl	800a26c <HAL_TIM_PWM_ConfigChannel>
 8001470:	b108      	cbz	r0, 8001476 <main+0x8ee>
 8001472:	b672      	cpsid	i
  while (1)
 8001474:	e7fe      	b.n	8001474 <main+0x8ec>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001476:	2204      	movs	r2, #4
 8001478:	a92f      	add	r1, sp, #188	@ 0xbc
 800147a:	4812      	ldr	r0, [pc, #72]	@ (80014c4 <main+0x93c>)
 800147c:	f008 fef6 	bl	800a26c <HAL_TIM_PWM_ConfigChannel>
 8001480:	b108      	cbz	r0, 8001486 <main+0x8fe>
 8001482:	b672      	cpsid	i
  while (1)
 8001484:	e7fe      	b.n	8001484 <main+0x8fc>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001486:	2208      	movs	r2, #8
 8001488:	a92f      	add	r1, sp, #188	@ 0xbc
 800148a:	480e      	ldr	r0, [pc, #56]	@ (80014c4 <main+0x93c>)
 800148c:	f008 feee 	bl	800a26c <HAL_TIM_PWM_ConfigChannel>
 8001490:	4605      	mov	r5, r0
 8001492:	b1f8      	cbz	r0, 80014d4 <main+0x94c>
 8001494:	b672      	cpsid	i
  while (1)
 8001496:	e7fe      	b.n	8001496 <main+0x90e>
 8001498:	24001a90 	.word	0x24001a90
 800149c:	24001e6c 	.word	0x24001e6c
 80014a0:	cfb80000 	.word	0xcfb80000
 80014a4:	24001a00 	.word	0x24001a00
 80014a8:	40004c00 	.word	0x40004c00
 80014ac:	240018e0 	.word	0x240018e0
 80014b0:	40007c00 	.word	0x40007c00
 80014b4:	24001970 	.word	0x24001970
 80014b8:	40007800 	.word	0x40007800
 80014bc:	24001b28 	.word	0x24001b28
 80014c0:	52007000 	.word	0x52007000
 80014c4:	24001adc 	.word	0x24001adc
 80014c8:	40000400 	.word	0x40000400
 80014cc:	40000800 	.word	0x40000800
 80014d0:	58026000 	.word	0x58026000
  HAL_TIM_MspPostInit(&htim3);
 80014d4:	48d0      	ldr	r0, [pc, #832]	@ (8001818 <main+0xc90>)
  leds.AddLED(LED_UART_RS485, GPIO {LED_RS485_GPIO_Port, LED_RS485_Pin});
 80014d6:	f04f 0a08 	mov.w	sl, #8
  HAL_TIM_MspPostInit(&htim3);
 80014da:	f000 ffe9 	bl	80024b0 <HAL_TIM_MspPostInit>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 80014de:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80014e2:	4629      	mov	r1, r5
 80014e4:	48cd      	ldr	r0, [pc, #820]	@ (800181c <main+0xc94>)
  leds.Init(&registers);
 80014e6:	4cce      	ldr	r4, [pc, #824]	@ (8001820 <main+0xc98>)
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 80014e8:	f002 fab4 	bl	8003a54 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 80014ec:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80014f0:	4629      	mov	r1, r5
 80014f2:	48cc      	ldr	r0, [pc, #816]	@ (8001824 <main+0xc9c>)
  leds.AddLED(LED_UART_CM4, GPIO {LED_UART_CM4_GPIO_Port, LED_UART_CM4_Pin});
 80014f4:	f44f 6b00 	mov.w	fp, #2048	@ 0x800
  HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 80014f8:	f002 faac 	bl	8003a54 <HAL_ADCEx_Calibration_Start>
  registers.Init();
 80014fc:	48ca      	ldr	r0, [pc, #808]	@ (8001828 <main+0xca0>)
 80014fe:	f013 fc20 	bl	8014d42 <_ZN9Registers4InitEv>
  leds.Init(&registers);
 8001502:	49c9      	ldr	r1, [pc, #804]	@ (8001828 <main+0xca0>)
 8001504:	4620      	mov	r0, r4
  leds.AddLED(LED_UART_RS485, GPIO {LED_RS485_GPIO_Port, LED_RS485_Pin});
 8001506:	f8df 8360 	ldr.w	r8, [pc, #864]	@ 8001868 <main+0xce0>
  leds.Init(&registers);
 800150a:	f010 f965 	bl	80117d8 <_ZN4LEDS4InitEP9Registers>
  registers.Init(); 																registers.AddBaseRegisters();
 800150e:	48c6      	ldr	r0, [pc, #792]	@ (8001828 <main+0xca0>)
 8001510:	f013 fc17 	bl	8014d42 <_ZN9Registers4InitEv>
 8001514:	48c4      	ldr	r0, [pc, #784]	@ (8001828 <main+0xca0>)
 8001516:	f013 fcc9 	bl	8014eac <_ZN9Registers16AddBaseRegistersEv>
  communication.Init(&registers, &services, &subscribers, &leds);					communication.AddRegisters();
 800151a:	4bc4      	ldr	r3, [pc, #784]	@ (800182c <main+0xca4>)
 800151c:	4ac4      	ldr	r2, [pc, #784]	@ (8001830 <main+0xca8>)
 800151e:	49c2      	ldr	r1, [pc, #776]	@ (8001828 <main+0xca0>)
 8001520:	48c4      	ldr	r0, [pc, #784]	@ (8001834 <main+0xcac>)
 8001522:	9400      	str	r4, [sp, #0]
 8001524:	f00d f9dd 	bl	800e8e2 <_ZN13Communication4InitEP9RegistersP8ServicesP17MasterSubscribersP4LEDS>
 8001528:	48c2      	ldr	r0, [pc, #776]	@ (8001834 <main+0xcac>)
 800152a:	f00d fcd5 	bl	800eed8 <_ZN13Communication12AddRegistersEv>
  services.Init(&registers, &communication, &leds);
 800152e:	4623      	mov	r3, r4
 8001530:	4ac0      	ldr	r2, [pc, #768]	@ (8001834 <main+0xcac>)
 8001532:	49bd      	ldr	r1, [pc, #756]	@ (8001828 <main+0xca0>)
 8001534:	48be      	ldr	r0, [pc, #760]	@ (8001830 <main+0xca8>)
 8001536:	f014 faab 	bl	8015a90 <_ZN8Services4InitEP9RegistersP13CommunicationP4LEDS>
  publishers.Init(&registers, &communication); 										publishers.AddRegisters();
 800153a:	4abe      	ldr	r2, [pc, #760]	@ (8001834 <main+0xcac>)
 800153c:	49ba      	ldr	r1, [pc, #744]	@ (8001828 <main+0xca0>)
 800153e:	48be      	ldr	r0, [pc, #760]	@ (8001838 <main+0xcb0>)
 8001540:	f012 ff26 	bl	8014390 <_ZN10Publishers4InitEP9RegistersP13Communication>
 8001544:	48bc      	ldr	r0, [pc, #752]	@ (8001838 <main+0xcb0>)
 8001546:	f013 fae3 	bl	8014b10 <_ZN10Publishers12AddRegistersEv>
  subscribers.Init(&registers, &leds);												subscribers.AddRegisters();
 800154a:	4622      	mov	r2, r4
 800154c:	49b6      	ldr	r1, [pc, #728]	@ (8001828 <main+0xca0>)
 800154e:	48b7      	ldr	r0, [pc, #732]	@ (800182c <main+0xca4>)
 8001550:	f014 fc1a 	bl	8015d88 <_ZN17MasterSubscribers4InitEP9RegistersP4LEDS>
 8001554:	48b5      	ldr	r0, [pc, #724]	@ (800182c <main+0xca4>)
 8001556:	f014 feab 	bl	80162b0 <_ZN17MasterSubscribers12AddRegistersEv>
  sensors.Init(&registers, &publishers, &hardware_delay, &leds);					sensors.AddRegisters();
 800155a:	4bb8      	ldr	r3, [pc, #736]	@ (800183c <main+0xcb4>)
 800155c:	4ab6      	ldr	r2, [pc, #728]	@ (8001838 <main+0xcb0>)
 800155e:	49b2      	ldr	r1, [pc, #712]	@ (8001828 <main+0xca0>)
 8001560:	48b7      	ldr	r0, [pc, #732]	@ (8001840 <main+0xcb8>)
 8001562:	9400      	str	r4, [sp, #0]
 8001564:	f013 fe5d 	bl	8015222 <_ZN7Sensors4InitEP9RegistersP10PublishersP13HardwareDelayP4LEDS>
 8001568:	48b5      	ldr	r0, [pc, #724]	@ (8001840 <main+0xcb8>)
 800156a:	f014 f923 	bl	80157b4 <_ZN7Sensors12AddRegistersEv>
  leds.Init(&registers);															leds.AddRegisters();
 800156e:	49ae      	ldr	r1, [pc, #696]	@ (8001828 <main+0xca0>)
 8001570:	4620      	mov	r0, r4
  leds.AddLED(LED_UART_CM4, GPIO {LED_UART_CM4_GPIO_Port, LED_UART_CM4_Pin});
 8001572:	f8df 92f8 	ldr.w	r9, [pc, #760]	@ 800186c <main+0xce4>
  leds.Init(&registers);															leds.AddRegisters();
 8001576:	f010 f92f 	bl	80117d8 <_ZN4LEDS4InitEP9Registers>
 800157a:	4620      	mov	r0, r4
 800157c:	f010 fd88 	bl	8012090 <_ZN4LEDS12AddRegistersEv>
  motion_generator.Init(&registers, &publishers, &services, &leds);					motion_generator.AddRegisters();
 8001580:	4bab      	ldr	r3, [pc, #684]	@ (8001830 <main+0xca8>)
 8001582:	4aad      	ldr	r2, [pc, #692]	@ (8001838 <main+0xcb0>)
 8001584:	49a8      	ldr	r1, [pc, #672]	@ (8001828 <main+0xca0>)
 8001586:	48af      	ldr	r0, [pc, #700]	@ (8001844 <main+0xcbc>)
 8001588:	9400      	str	r4, [sp, #0]
 800158a:	f011 fe23 	bl	80131d4 <_ZN15MotionGenerator4InitEP9RegistersP10PublishersP8ServicesP4LEDS>
 800158e:	48ad      	ldr	r0, [pc, #692]	@ (8001844 <main+0xcbc>)
 8001590:	f011 fbea 	bl	8012d68 <_ZN15MotionGenerator12AddRegistersEv>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); 			// R LED
 8001594:	4629      	mov	r1, r5
 8001596:	48a0      	ldr	r0, [pc, #640]	@ (8001818 <main+0xc90>)
 8001598:	f008 ffbe 	bl	800a518 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); 			// G LED
 800159c:	2104      	movs	r1, #4
 800159e:	489e      	ldr	r0, [pc, #632]	@ (8001818 <main+0xc90>)
 80015a0:	f008 ffba 	bl	800a518 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); 			// B LED
 80015a4:	2108      	movs	r1, #8
 80015a6:	489c      	ldr	r0, [pc, #624]	@ (8001818 <main+0xc90>)
 80015a8:	f008 ffb6 	bl	800a518 <HAL_TIM_PWM_Start>
  leds.AddLED(LED_UART_RS485, GPIO {LED_RS485_GPIO_Port, LED_RS485_Pin});
 80015ac:	f8ad a05c 	strh.w	sl, [sp, #92]	@ 0x5c
 80015b0:	4642      	mov	r2, r8
 80015b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80015b4:	2104      	movs	r1, #4
 80015b6:	4620      	mov	r0, r4
 80015b8:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
 80015bc:	f010 fe98 	bl	80122f0 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_UART_BACK, GPIO {LED_UART_BACK_GPIO_Port, LED_UART_BACK_Pin});
 80015c0:	2310      	movs	r3, #16
 80015c2:	4642      	mov	r2, r8
 80015c4:	2103      	movs	r1, #3
 80015c6:	4620      	mov	r0, r4
 80015c8:	f8ad 3064 	strh.w	r3, [sp, #100]	@ 0x64
 80015cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80015ce:	f8cd 8060 	str.w	r8, [sp, #96]	@ 0x60
 80015d2:	f010 fe8d 	bl	80122f0 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_CANFD2, GPIO {LED_FDCAN2_GPIO_Port, LED_FDCAN2_Pin});
 80015d6:	2320      	movs	r3, #32
 80015d8:	4642      	mov	r2, r8
 80015da:	2101      	movs	r1, #1
 80015dc:	4620      	mov	r0, r4
 80015de:	f8ad 306c 	strh.w	r3, [sp, #108]	@ 0x6c
 80015e2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80015e4:	f8cd 8068 	str.w	r8, [sp, #104]	@ 0x68
 80015e8:	f010 fe82 	bl	80122f0 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_CANFD1, GPIO {LED_FDCAN1_GPIO_Port, LED_FDCAN1_Pin});
 80015ec:	2340      	movs	r3, #64	@ 0x40
 80015ee:	4642      	mov	r2, r8
 80015f0:	4629      	mov	r1, r5
 80015f2:	4620      	mov	r0, r4
 80015f4:	f8ad 3074 	strh.w	r3, [sp, #116]	@ 0x74
 80015f8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80015fa:	f8cd 8070 	str.w	r8, [sp, #112]	@ 0x70
 80015fe:	f010 fe77 	bl	80122f0 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_UART_CM4, GPIO {LED_UART_CM4_GPIO_Port, LED_UART_CM4_Pin});
 8001602:	f8ad b07c 	strh.w	fp, [sp, #124]	@ 0x7c
  leds.AddLED(LED_STATUS, GPIO {LED_STATUS_GPIO_Port, LED_STATUS_Pin});
 8001606:	f508 6880 	add.w	r8, r8, #1024	@ 0x400
  leds.AddLED(LED_UART_CM4, GPIO {LED_UART_CM4_GPIO_Port, LED_UART_CM4_Pin});
 800160a:	464a      	mov	r2, r9
 800160c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800160e:	2102      	movs	r1, #2
 8001610:	4620      	mov	r0, r4
 8001612:	f8cd 9078 	str.w	r9, [sp, #120]	@ 0x78
 8001616:	f010 fe6b 	bl	80122f0 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_STATUS, GPIO {LED_STATUS_GPIO_Port, LED_STATUS_Pin});
 800161a:	f8ad b084 	strh.w	fp, [sp, #132]	@ 0x84
 800161e:	4642      	mov	r2, r8
 8001620:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8001622:	2107      	movs	r1, #7
 8001624:	4620      	mov	r0, r4
 8001626:	f8cd 8080 	str.w	r8, [sp, #128]	@ 0x80
 800162a:	f010 fe61 	bl	80122f0 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_ACTIVITY, GPIO {LED_ACTIVITY_GPIO_Port, LED_ACTIVITY_Pin});
 800162e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001632:	4642      	mov	r2, r8
 8001634:	4651      	mov	r1, sl
 8001636:	f8ad 308c 	strh.w	r3, [sp, #140]	@ 0x8c
 800163a:	4620      	mov	r0, r4
 800163c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800163e:	f8cd 8088 	str.w	r8, [sp, #136]	@ 0x88
 8001642:	f010 fe55 	bl	80122f0 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_FAULT, GPIO {LED_FAULT_GPIO_Port, LED_FAULT_Pin});
 8001646:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800164a:	4642      	mov	r2, r8
 800164c:	2109      	movs	r1, #9
 800164e:	4620      	mov	r0, r4
 8001650:	f8ad 3094 	strh.w	r3, [sp, #148]	@ 0x94
 8001654:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8001656:	f8cd 8090 	str.w	r8, [sp, #144]	@ 0x90
 800165a:	f010 fe49 	bl	80122f0 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_USER1, GPIO {LED_USER1_GPIO_Port, LED_USER1_Pin});
 800165e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001662:	4642      	mov	r2, r8
 8001664:	210a      	movs	r1, #10
 8001666:	4620      	mov	r0, r4
 8001668:	f8ad 309c 	strh.w	r3, [sp, #156]	@ 0x9c
 800166c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800166e:	f8cd 8098 	str.w	r8, [sp, #152]	@ 0x98
 8001672:	f010 fe3d 	bl	80122f0 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_USER2, GPIO {LED_USER2_GPIO_Port, LED_USER2_Pin});
 8001676:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800167a:	f8cd 80a0 	str.w	r8, [sp, #160]	@ 0xa0
 800167e:	210b      	movs	r1, #11
 8001680:	4620      	mov	r0, r4
 8001682:	f8ad 30a4 	strh.w	r3, [sp, #164]	@ 0xa4
  leds.ConfigureTimings(LED_CANFD1, std::vector<uint8_t>{1}, 2);
 8001686:	f10d 0848 	add.w	r8, sp, #72	@ 0x48
  leds.AddLED(LED_USER2, GPIO {LED_USER2_GPIO_Port, LED_USER2_Pin});
 800168a:	e897 000c 	ldmia.w	r7, {r2, r3}
 800168e:	f010 fe2f 	bl	80122f0 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_USER3, GPIO {LED_USER3_GPIO_Port, LED_USER3_Pin});
 8001692:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  leds.ConfigureTimings(LED_CANFD1, std::vector<uint8_t>{1}, 2);
 8001696:	af14      	add	r7, sp, #80	@ 0x50
  leds.AddLED(LED_USER3, GPIO {LED_USER3_GPIO_Port, LED_USER3_Pin});
 8001698:	f8cd 90ac 	str.w	r9, [sp, #172]	@ 0xac
 800169c:	f8ad 30b0 	strh.w	r3, [sp, #176]	@ 0xb0
 80016a0:	210c      	movs	r1, #12
 80016a2:	4620      	mov	r0, r4
  leds.ConfigureTimings(LED_UART_BACK, std::vector<uint8_t>{1}, 2);
 80016a4:	f10d 090c 	add.w	r9, sp, #12
  leds.AddLED(LED_USER3, GPIO {LED_USER3_GPIO_Port, LED_USER3_Pin});
 80016a8:	e896 000c 	ldmia.w	r6, {r2, r3}
  leds.ConfigureTimings(LED_CANFD1, std::vector<uint8_t>{1}, 2);
 80016ac:	2601      	movs	r6, #1
  leds.AddLED(LED_USER3, GPIO {LED_USER3_GPIO_Port, LED_USER3_Pin});
 80016ae:	f010 fe1f 	bl	80122f0 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.ConfigureTimings(LED_CANFD1, std::vector<uint8_t>{1}, 2);
 80016b2:	463b      	mov	r3, r7
 80016b4:	4641      	mov	r1, r8
 80016b6:	4632      	mov	r2, r6
 80016b8:	a82f      	add	r0, sp, #188	@ 0xbc
 80016ba:	f88d 6048 	strb.w	r6, [sp, #72]	@ 0x48
 80016be:	e9cd 860c 	strd	r8, r6, [sp, #48]	@ 0x30
 80016c2:	f7ff fa3f 	bl	8000b44 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 80016c6:	2302      	movs	r3, #2
 80016c8:	aa2f      	add	r2, sp, #188	@ 0xbc
 80016ca:	4629      	mov	r1, r5
 80016cc:	4620      	mov	r0, r4
 80016ce:	f010 fe52 	bl	8012376 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
      }
 80016d2:	a82f      	add	r0, sp, #188	@ 0xbc
 80016d4:	f7ff f8e2 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
  leds.ConfigureTimings(LED_CANFD2, std::vector<uint8_t>{1}, 2);
 80016d8:	463b      	mov	r3, r7
 80016da:	4632      	mov	r2, r6
 80016dc:	4641      	mov	r1, r8
 80016de:	a82f      	add	r0, sp, #188	@ 0xbc
 80016e0:	f88d 6048 	strb.w	r6, [sp, #72]	@ 0x48
 80016e4:	e9cd 860e 	strd	r8, r6, [sp, #56]	@ 0x38
 80016e8:	f7ff fa2c 	bl	8000b44 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 80016ec:	2302      	movs	r3, #2
 80016ee:	aa2f      	add	r2, sp, #188	@ 0xbc
 80016f0:	4631      	mov	r1, r6
 80016f2:	4620      	mov	r0, r4
 80016f4:	f010 fe3f 	bl	8012376 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
 80016f8:	a82f      	add	r0, sp, #188	@ 0xbc
 80016fa:	f7ff f8cf 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
  leds.ConfigureTimings(LED_UART_CM4, std::vector<uint8_t>{1}, 2);
 80016fe:	463b      	mov	r3, r7
 8001700:	4632      	mov	r2, r6
 8001702:	4641      	mov	r1, r8
 8001704:	a82f      	add	r0, sp, #188	@ 0xbc
 8001706:	f88d 6048 	strb.w	r6, [sp, #72]	@ 0x48
 800170a:	e9cd 8610 	strd	r8, r6, [sp, #64]	@ 0x40
 800170e:	f7ff fa19 	bl	8000b44 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8001712:	2302      	movs	r3, #2
 8001714:	aa2f      	add	r2, sp, #188	@ 0xbc
 8001716:	4620      	mov	r0, r4
 8001718:	4619      	mov	r1, r3
 800171a:	f010 fe2c 	bl	8012376 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
 800171e:	a82f      	add	r0, sp, #188	@ 0xbc
 8001720:	f7ff f8bc 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
  leds.ConfigureTimings(LED_UART_BACK, std::vector<uint8_t>{1}, 2);
 8001724:	463b      	mov	r3, r7
 8001726:	a82f      	add	r0, sp, #188	@ 0xbc
 8001728:	f88d 600c 	strb.w	r6, [sp, #12]
 800172c:	e9cd 9612 	strd	r9, r6, [sp, #72]	@ 0x48
 8001730:	e898 0006 	ldmia.w	r8, {r1, r2}
 8001734:	f7ff fa06 	bl	8000b44 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8001738:	2302      	movs	r3, #2
 800173a:	aa2f      	add	r2, sp, #188	@ 0xbc
 800173c:	2103      	movs	r1, #3
 800173e:	4620      	mov	r0, r4
 8001740:	f010 fe19 	bl	8012376 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
 8001744:	a82f      	add	r0, sp, #188	@ 0xbc
 8001746:	f7ff f8a9 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
  leds.ConfigureTimings(LED_UART_RS485, std::vector<uint8_t>{1}, 2);
 800174a:	eb0d 030a 	add.w	r3, sp, sl
 800174e:	a82f      	add	r0, sp, #188	@ 0xbc
 8001750:	f88d 6008 	strb.w	r6, [sp, #8]
 8001754:	e9cd 3614 	strd	r3, r6, [sp, #80]	@ 0x50
 8001758:	464b      	mov	r3, r9
 800175a:	e897 0006 	ldmia.w	r7, {r1, r2}
 800175e:	f7ff f9f1 	bl	8000b44 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8001762:	2302      	movs	r3, #2
 8001764:	aa2f      	add	r2, sp, #188	@ 0xbc
 8001766:	2104      	movs	r1, #4
 8001768:	4620      	mov	r0, r4
 800176a:	f010 fe04 	bl	8012376 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
 800176e:	a82f      	add	r0, sp, #188	@ 0xbc
 8001770:	f7ff f894 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
  leds.AddRGBLED(LED_RGB, const_cast<uint32_t*>(&(TIM3->CCR1)), const_cast<uint32_t*>(&(TIM3->CCR2)), const_cast<uint32_t*>(&(TIM3->CCR3)));
 8001774:	4b34      	ldr	r3, [pc, #208]	@ (8001848 <main+0xcc0>)
 8001776:	4a35      	ldr	r2, [pc, #212]	@ (800184c <main+0xcc4>)
 8001778:	210d      	movs	r1, #13
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	4620      	mov	r0, r4
 800177e:	3b04      	subs	r3, #4
 8001780:	f010 fbba 	bl	8011ef8 <_ZN4LEDS9AddRGBLEDEhPmS0_S0_>
  leds.TestLEDs();
 8001784:	4620      	mov	r0, r4
 8001786:	f010 fd18 	bl	80121ba <_ZN4LEDS8TestLEDsEv>
  StartupLEDS(&leds);
 800178a:	4620      	mov	r0, r4
 800178c:	f00c fe12 	bl	800e3b4 <_Z11StartupLEDSP4LEDS>
  communication.SetModuleAddress(STM32_HEAD);
 8001790:	4631      	mov	r1, r6
 8001792:	4828      	ldr	r0, [pc, #160]	@ (8001834 <main+0xcac>)
 8001794:	f00d f931 	bl	800e9fa <_ZN13Communication16SetModuleAddressEh>
  protocol_uart.SetProtocolPayloadMaxLength(256);
 8001798:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800179c:	482c      	ldr	r0, [pc, #176]	@ (8001850 <main+0xcc8>)
 800179e:	f011 fe5f 	bl	8013460 <_ZN21CommunicationProtocol27SetProtocolPayloadMaxLengthEt>
  protocol_uart.AddInterface(UART_CM4, &huart1);
 80017a2:	4a2c      	ldr	r2, [pc, #176]	@ (8001854 <main+0xccc>)
 80017a4:	2102      	movs	r1, #2
 80017a6:	482a      	ldr	r0, [pc, #168]	@ (8001850 <main+0xcc8>)
 80017a8:	f7ff f904 	bl	80009b4 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE12AddInterfaceEhPS0_>
  protocol_uart.AddInterface(UART_BACK, &huart6);
 80017ac:	4a2a      	ldr	r2, [pc, #168]	@ (8001858 <main+0xcd0>)
 80017ae:	2103      	movs	r1, #3
 80017b0:	4827      	ldr	r0, [pc, #156]	@ (8001850 <main+0xcc8>)
 80017b2:	f7ff f8ff 	bl	80009b4 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE12AddInterfaceEhPS0_>
  protocol_uart.AddInterface(UART_PIC, &huart2);
 80017b6:	4a29      	ldr	r2, [pc, #164]	@ (800185c <main+0xcd4>)
 80017b8:	2105      	movs	r1, #5
 80017ba:	4825      	ldr	r0, [pc, #148]	@ (8001850 <main+0xcc8>)
 80017bc:	f7ff f8fa 	bl	80009b4 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE12AddInterfaceEhPS0_>
  communication.AddProtocol(&protocol_uart);
 80017c0:	4923      	ldr	r1, [pc, #140]	@ (8001850 <main+0xcc8>)
 80017c2:	481c      	ldr	r0, [pc, #112]	@ (8001834 <main+0xcac>)
 80017c4:	f00d f9e6 	bl	800eb94 <_ZN13Communication11AddProtocolEP21CommunicationProtocol>
  communication.ActivateReception(UART_CM4);
 80017c8:	2102      	movs	r1, #2
 80017ca:	481a      	ldr	r0, [pc, #104]	@ (8001834 <main+0xcac>)
 80017cc:	f00d f902 	bl	800e9d4 <_ZN13Communication17ActivateReceptionEh>
  communication.ActivateReception(UART_BACK);
 80017d0:	2103      	movs	r1, #3
 80017d2:	4818      	ldr	r0, [pc, #96]	@ (8001834 <main+0xcac>)
 80017d4:	f00d f8fe 	bl	800e9d4 <_ZN13Communication17ActivateReceptionEh>
  communication.ActivateReception(UART_PIC);
 80017d8:	2105      	movs	r1, #5
 80017da:	4816      	ldr	r0, [pc, #88]	@ (8001834 <main+0xcac>)
 80017dc:	f00d f8fa 	bl	800e9d4 <_ZN13Communication17ActivateReceptionEh>
  protocol_canfd.SetProtocolPayloadMaxLength(62);
 80017e0:	213e      	movs	r1, #62	@ 0x3e
 80017e2:	481f      	ldr	r0, [pc, #124]	@ (8001860 <main+0xcd8>)
 80017e4:	f011 fe3c 	bl	8013460 <_ZN21CommunicationProtocol27SetProtocolPayloadMaxLengthEt>
  protocol_canfd.AddInterface(CANFD1, &hfdcan1);
 80017e8:	4a1e      	ldr	r2, [pc, #120]	@ (8001864 <main+0xcdc>)
 80017ea:	4629      	mov	r1, r5
 80017ec:	481c      	ldr	r0, [pc, #112]	@ (8001860 <main+0xcd8>)
 80017ee:	f012 f8d3 	bl	8013998 <_ZN11CANProtocol12AddInterfaceEhP19FDCAN_HandleTypeDef>
  protocol_canfd.ConfigureFilters(CANFD1);
 80017f2:	4629      	mov	r1, r5
 80017f4:	481a      	ldr	r0, [pc, #104]	@ (8001860 <main+0xcd8>)
 80017f6:	f012 f82e 	bl	8013856 <_ZN11CANProtocol16ConfigureFiltersEh>
  protocol_canfd.ActivateReception(CANFD1);
 80017fa:	4629      	mov	r1, r5
 80017fc:	4818      	ldr	r0, [pc, #96]	@ (8001860 <main+0xcd8>)
 80017fe:	f012 f83d 	bl	801387c <_ZN11CANProtocol17ActivateReceptionEh>
  protocol_canfd.Start(CANFD1);
 8001802:	4629      	mov	r1, r5
 8001804:	4816      	ldr	r0, [pc, #88]	@ (8001860 <main+0xcd8>)
 8001806:	f012 f84a 	bl	801389e <_ZN11CANProtocol5StartEh>
  communication.AddProtocol(&protocol_canfd);
 800180a:	4915      	ldr	r1, [pc, #84]	@ (8001860 <main+0xcd8>)
 800180c:	4809      	ldr	r0, [pc, #36]	@ (8001834 <main+0xcac>)
 800180e:	f00d f9c1 	bl	800eb94 <_ZN13Communication11AddProtocolEP21CommunicationProtocol>
  communication.ActivateReception(CANFD1);
 8001812:	4629      	mov	r1, r5
 8001814:	e02c      	b.n	8001870 <main+0xce8>
 8001816:	bf00      	nop
 8001818:	24001adc 	.word	0x24001adc
 800181c:	24001ed0 	.word	0x24001ed0
 8001820:	24000130 	.word	0x24000130
 8001824:	24001e6c 	.word	0x24001e6c
 8001828:	24000f68 	.word	0x24000f68
 800182c:	24000e88 	.word	0x24000e88
 8001830:	24000208 	.word	0x24000208
 8001834:	24000e4c 	.word	0x24000e4c
 8001838:	240001f0 	.word	0x240001f0
 800183c:	240001d4 	.word	0x240001d4
 8001840:	24000168 	.word	0x24000168
 8001844:	240000c8 	.word	0x240000c8
 8001848:	4000043c 	.word	0x4000043c
 800184c:	40000434 	.word	0x40000434
 8001850:	24000f00 	.word	0x24000f00
 8001854:	24001850 	.word	0x24001850
 8001858:	240016a0 	.word	0x240016a0
 800185c:	240017c0 	.word	0x240017c0
 8001860:	24000eac 	.word	0x24000eac
 8001864:	24001dcc 	.word	0x24001dcc
 8001868:	58020c00 	.word	0x58020c00
 800186c:	58020400 	.word	0x58020400
 8001870:	4814      	ldr	r0, [pc, #80]	@ (80018c4 <main+0xd3c>)
 8001872:	f00d f8af 	bl	800e9d4 <_ZN13Communication17ActivateReceptionEh>
  user.Init();
 8001876:	4814      	ldr	r0, [pc, #80]	@ (80018c8 <main+0xd40>)
 8001878:	f014 fd74 	bl	8016364 <_ZN4User4InitEv>
  osKernelInitialize();
 800187c:	f00a fb96 	bl	800bfac <osKernelInitialize>
  TrajectoryHandle = osThreadNew(TrajectoryTask, NULL, &Trajectory_attributes);
 8001880:	4a12      	ldr	r2, [pc, #72]	@ (80018cc <main+0xd44>)
 8001882:	4629      	mov	r1, r5
 8001884:	4812      	ldr	r0, [pc, #72]	@ (80018d0 <main+0xd48>)
 8001886:	f00a fbbf 	bl	800c008 <osThreadNew>
 800188a:	4b12      	ldr	r3, [pc, #72]	@ (80018d4 <main+0xd4c>)
  SensorsHandle = osThreadNew(SensorsTask, NULL, &Sensors_attributes);
 800188c:	4a12      	ldr	r2, [pc, #72]	@ (80018d8 <main+0xd50>)
 800188e:	4629      	mov	r1, r5
  TrajectoryHandle = osThreadNew(TrajectoryTask, NULL, &Trajectory_attributes);
 8001890:	6018      	str	r0, [r3, #0]
  SensorsHandle = osThreadNew(SensorsTask, NULL, &Sensors_attributes);
 8001892:	4812      	ldr	r0, [pc, #72]	@ (80018dc <main+0xd54>)
 8001894:	f00a fbb8 	bl	800c008 <osThreadNew>
 8001898:	4b11      	ldr	r3, [pc, #68]	@ (80018e0 <main+0xd58>)
  CommunicationHandle = osThreadNew(CommunicationTask, NULL, &Communication_attributes);
 800189a:	4a12      	ldr	r2, [pc, #72]	@ (80018e4 <main+0xd5c>)
 800189c:	4629      	mov	r1, r5
  SensorsHandle = osThreadNew(SensorsTask, NULL, &Sensors_attributes);
 800189e:	6018      	str	r0, [r3, #0]
  CommunicationHandle = osThreadNew(CommunicationTask, NULL, &Communication_attributes);
 80018a0:	4811      	ldr	r0, [pc, #68]	@ (80018e8 <main+0xd60>)
 80018a2:	f00a fbb1 	bl	800c008 <osThreadNew>
 80018a6:	4b11      	ldr	r3, [pc, #68]	@ (80018ec <main+0xd64>)
  LEDsHandle = osThreadNew(LEDsTask, NULL, &LEDs_attributes);
 80018a8:	4a11      	ldr	r2, [pc, #68]	@ (80018f0 <main+0xd68>)
 80018aa:	4629      	mov	r1, r5
  CommunicationHandle = osThreadNew(CommunicationTask, NULL, &Communication_attributes);
 80018ac:	6018      	str	r0, [r3, #0]
  LEDsHandle = osThreadNew(LEDsTask, NULL, &LEDs_attributes);
 80018ae:	4811      	ldr	r0, [pc, #68]	@ (80018f4 <main+0xd6c>)
 80018b0:	f00a fbaa 	bl	800c008 <osThreadNew>
 80018b4:	4b10      	ldr	r3, [pc, #64]	@ (80018f8 <main+0xd70>)
 80018b6:	6018      	str	r0, [r3, #0]
  user.AddOSThreads();
 80018b8:	4803      	ldr	r0, [pc, #12]	@ (80018c8 <main+0xd40>)
 80018ba:	f014 fd55 	bl	8016368 <_ZN4User12AddOSThreadsEv>
  osKernelStart();
 80018be:	f00a fb87 	bl	800bfd0 <osKernelStart>
  while (1)
 80018c2:	e7fe      	b.n	80018c2 <main+0xd3a>
 80018c4:	24000e4c 	.word	0x24000e4c
 80018c8:	24000080 	.word	0x24000080
 80018cc:	08016cec 	.word	0x08016cec
 80018d0:	080005e5 	.word	0x080005e5
 80018d4:	2400100c 	.word	0x2400100c
 80018d8:	08016cc8 	.word	0x08016cc8
 80018dc:	0800068b 	.word	0x0800068b
 80018e0:	24001008 	.word	0x24001008
 80018e4:	08016ca4 	.word	0x08016ca4
 80018e8:	080005f1 	.word	0x080005f1
 80018ec:	24001004 	.word	0x24001004
 80018f0:	08016c80 	.word	0x08016c80
 80018f4:	08000601 	.word	0x08000601
 80018f8:	24001000 	.word	0x24001000

080018fc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80018fc:	b510      	push	{r4, lr}
	  if (_Num)
 80018fe:	1a0c      	subs	r4, r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8001900:	4613      	mov	r3, r2
	  if (_Num)
 8001902:	d005      	beq.n	8001910 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x14>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8001904:	4601      	mov	r1, r0
 8001906:	4622      	mov	r2, r4
 8001908:	4618      	mov	r0, r3
 800190a:	f014 ff8f 	bl	801682c <memmove>
 800190e:	4603      	mov	r3, r0
	}
 8001910:	1918      	adds	r0, r3, r4
 8001912:	bd10      	pop	{r4, pc}

08001914 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001918:	b08b      	sub	sp, #44	@ 0x2c
	: _M_start(), _M_finish(), _M_end_of_storage()
 800191a:	2300      	movs	r3, #0
 800191c:	460c      	mov	r4, r1
	ID = communication.GetID((void*) huart, &success);
 800191e:	4601      	mov	r1, r0
 8001920:	f10d 020f 	add.w	r2, sp, #15
 8001924:	4852      	ldr	r0, [pc, #328]	@ (8001a70 <HAL_UARTEx_RxEventCallback+0x15c>)
 8001926:	9306      	str	r3, [sp, #24]
 8001928:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800192c:	f00d f818 	bl	800e960 <_ZN13Communication5GetIDEPvPb>
	if (!success) {return;}
 8001930:	f89d 300f 	ldrb.w	r3, [sp, #15]
	ID = communication.GetID((void*) huart, &success);
 8001934:	4605      	mov	r5, r0
	if (!success) {return;}
 8001936:	b1a3      	cbz	r3, 8001962 <HAL_UARTEx_RxEventCallback+0x4e>
	std::vector<uint8_t>* buffer = communication.GetBuffer(ID, &success);
 8001938:	4601      	mov	r1, r0
 800193a:	f10d 020f 	add.w	r2, sp, #15
 800193e:	484c      	ldr	r0, [pc, #304]	@ (8001a70 <HAL_UARTEx_RxEventCallback+0x15c>)
 8001940:	f00d f822 	bl	800e988 <_ZN13Communication9GetBufferEhPb>
	uint16_t* buffer_index = communication.GetBufferIndex(ID, &success);
 8001944:	f10d 020f 	add.w	r2, sp, #15
	std::vector<uint8_t>* buffer = communication.GetBuffer(ID, &success);
 8001948:	4607      	mov	r7, r0
	uint16_t* buffer_index = communication.GetBufferIndex(ID, &success);
 800194a:	4629      	mov	r1, r5
 800194c:	4848      	ldr	r0, [pc, #288]	@ (8001a70 <HAL_UARTEx_RxEventCallback+0x15c>)
 800194e:	f00d f826 	bl	800e99e <_ZN13Communication14GetBufferIndexEhPb>
	if (!success) {communication.ActivateReception(ID); return;}
 8001952:	f89d 300f 	ldrb.w	r3, [sp, #15]
	uint16_t* buffer_index = communication.GetBufferIndex(ID, &success);
 8001956:	4680      	mov	r8, r0
	if (!success) {communication.ActivateReception(ID); return;}
 8001958:	b94b      	cbnz	r3, 800196e <HAL_UARTEx_RxEventCallback+0x5a>
	communication.ActivateReception(ID);
 800195a:	4629      	mov	r1, r5
 800195c:	4844      	ldr	r0, [pc, #272]	@ (8001a70 <HAL_UARTEx_RxEventCallback+0x15c>)
 800195e:	f00d f839 	bl	800e9d4 <_ZN13Communication17ActivateReceptionEh>
      }
 8001962:	a804      	add	r0, sp, #16
 8001964:	f7fe ff9a 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 8001968:	b00b      	add	sp, #44	@ 0x2c
 800196a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (Size == *buffer_index) {communication.ActivateReception(ID); return;}
 800196e:	8801      	ldrh	r1, [r0, #0]
 8001970:	42a1      	cmp	r1, r4
 8001972:	d0f2      	beq.n	800195a <HAL_UARTEx_RxEventCallback+0x46>
      : _M_current(__i) { }
 8001974:	683a      	ldr	r2, [r7, #0]
		received_data = std::vector<uint8_t>(buffer->begin() + *buffer_index, buffer->begin() + Size);
 8001976:	ab03      	add	r3, sp, #12
      { return __normal_iterator(_M_current + __n); }
 8001978:	4411      	add	r1, r2
	if (Size > *buffer_index)
 800197a:	d228      	bcs.n	80019ce <HAL_UARTEx_RxEventCallback+0xba>
		received_data = std::vector<uint8_t>(buffer->begin() + *buffer_index, buffer->begin() + Size);
 800197c:	4422      	add	r2, r4
 800197e:	a807      	add	r0, sp, #28
 8001980:	f7ff f8c2 	bl	8000b08 <_ZNSt6vectorIhSaIhEEC1IN9__gnu_cxx17__normal_iteratorIPhS1_EEvEET_S7_RKS0_>
 8001984:	a804      	add	r0, sp, #16
 8001986:	a907      	add	r1, sp, #28
 8001988:	f7fe ff92 	bl	80008b0 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 800198c:	a807      	add	r0, sp, #28
 800198e:	f7fe ff85 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	uint16_t processed_length = communication.Process(ID, received_data, &success);
 8001992:	a904      	add	r1, sp, #16
 8001994:	a807      	add	r0, sp, #28
 8001996:	f7ff f831 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 800199a:	f10d 030f 	add.w	r3, sp, #15
 800199e:	aa07      	add	r2, sp, #28
 80019a0:	4629      	mov	r1, r5
 80019a2:	4833      	ldr	r0, [pc, #204]	@ (8001a70 <HAL_UARTEx_RxEventCallback+0x15c>)
 80019a4:	f00f fd94 	bl	80114d0 <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb>
 80019a8:	4604      	mov	r4, r0
 80019aa:	a807      	add	r0, sp, #28
 80019ac:	f7fe ff76 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	*buffer_index += processed_length;
 80019b0:	f8b8 3000 	ldrh.w	r3, [r8]
 80019b4:	18e0      	adds	r0, r4, r3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80019b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019ba:	b280      	uxth	r0, r0
 80019bc:	1a9b      	subs	r3, r3, r2
 80019be:	f8a8 0000 	strh.w	r0, [r8]
	if (*buffer_index >= buffer->size())
 80019c2:	4298      	cmp	r0, r3
		*buffer_index -= buffer->size();
 80019c4:	bf24      	itt	cs
 80019c6:	1ac0      	subcs	r0, r0, r3
 80019c8:	f8a8 0000 	strhcs.w	r0, [r8]
 80019cc:	e7c5      	b.n	800195a <HAL_UARTEx_RxEventCallback+0x46>
		received_data = std::vector<uint8_t>(buffer->begin() + *buffer_index, buffer->end());
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	a807      	add	r0, sp, #28
 80019d2:	f7ff f899 	bl	8000b08 <_ZNSt6vectorIhSaIhEEC1IN9__gnu_cxx17__normal_iteratorIPhS1_EEvEET_S7_RKS0_>
 80019d6:	a907      	add	r1, sp, #28
 80019d8:	a804      	add	r0, sp, #16
 80019da:	f7fe ff69 	bl	80008b0 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 80019de:	a807      	add	r0, sp, #28
 80019e0:	f7fe ff5c 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      : _M_current(__i) { }
 80019e4:	f8d7 9000 	ldr.w	r9, [r7]
      { return __normal_iterator(_M_current + __n); }
 80019e8:	eb09 0b04 	add.w	fp, r9, r4
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __position, _ForwardIterator __first,
		      _ForwardIterator __last, std::forward_iterator_tag)
      {
	if (__first != __last)
 80019ec:	45cb      	cmp	fp, r9
 80019ee:	d0d0      	beq.n	8001992 <HAL_UARTEx_RxEventCallback+0x7e>
	  {
	    const size_type __n = std::distance(__first, __last);
	    if (size_type(this->_M_impl._M_end_of_storage
 80019f0:	9b06      	ldr	r3, [sp, #24]
      : _M_current(__i) { }
 80019f2:	e9dd a604 	ldrd	sl, r6, [sp, #16]
			  - this->_M_impl._M_finish) >= __n)
 80019f6:	1b9a      	subs	r2, r3, r6
	    if (size_type(this->_M_impl._M_end_of_storage
 80019f8:	42a2      	cmp	r2, r4
 80019fa:	d310      	bcc.n	8001a1e <HAL_UARTEx_RxEventCallback+0x10a>
			      _Category>::__copy_m(__first, __last, __result);
 80019fc:	4632      	mov	r2, r6
 80019fe:	4659      	mov	r1, fp
 8001a00:	4648      	mov	r0, r9
 8001a02:	f7fe ffef 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		    std::advance(__mid, __elems_after);
		    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
		    std::__uninitialized_copy_a(__mid, __last,
						this->_M_impl._M_finish,
						_M_get_Tp_allocator());
		    this->_M_impl._M_finish += __n - __elems_after;
 8001a06:	1932      	adds	r2, r6, r4
 8001a08:	4631      	mov	r1, r6
 8001a0a:	4630      	mov	r0, r6
 8001a0c:	9205      	str	r2, [sp, #20]
 8001a0e:	f7ff ff75 	bl	80018fc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8001a12:	4632      	mov	r2, r6
 8001a14:	4649      	mov	r1, r9
 8001a16:	4648      	mov	r0, r9
 8001a18:	f7fe ffe4 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8001a1c:	e7b9      	b.n	8001992 <HAL_UARTEx_RxEventCallback+0x7e>
		// reachable.
		pointer __old_start = this->_M_impl._M_start;
		pointer __old_finish = this->_M_impl._M_finish;

		const size_type __len =
		  _M_check_len(__n, "vector::_M_range_insert");
 8001a1e:	4621      	mov	r1, r4
 8001a20:	4a14      	ldr	r2, [pc, #80]	@ (8001a74 <HAL_UARTEx_RxEventCallback+0x160>)
 8001a22:	a804      	add	r0, sp, #16
 8001a24:	9301      	str	r3, [sp, #4]
 8001a26:	f7fe ff5a 	bl	80008de <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8001a2a:	9000      	str	r0, [sp, #0]
		pointer __new_start(this->_M_allocate(__len));
 8001a2c:	f7fe fe22 	bl	8000674 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
 8001a30:	4631      	mov	r1, r6
 8001a32:	4602      	mov	r2, r0
 8001a34:	4604      	mov	r4, r0
 8001a36:	4650      	mov	r0, sl
 8001a38:	f7ff ff60 	bl	80018fc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8001a3c:	4659      	mov	r1, fp
 8001a3e:	4602      	mov	r2, r0
 8001a40:	4648      	mov	r0, r9
 8001a42:	f7fe ffcf 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8001a46:	4631      	mov	r1, r6
 8001a48:	4602      	mov	r2, r0
 8001a4a:	4630      	mov	r0, r6
 8001a4c:	f7ff ff56 	bl	80018fc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8001a50:	4606      	mov	r6, r0
	if (__p)
 8001a52:	f1ba 0f00 	cmp.w	sl, #0
 8001a56:	d005      	beq.n	8001a64 <HAL_UARTEx_RxEventCallback+0x150>
 8001a58:	9b01      	ldr	r3, [sp, #4]
 8001a5a:	4650      	mov	r0, sl
 8001a5c:	eba3 010a 	sub.w	r1, r3, sl
 8001a60:	f014 fd32 	bl	80164c8 <_ZdlPvj>
		_GLIBCXX_ASAN_ANNOTATE_REINIT;
		_M_deallocate(__old_start,
			      this->_M_impl._M_end_of_storage - __old_start);
		this->_M_impl._M_start = __new_start;
		this->_M_impl._M_finish = __new_finish;
		this->_M_impl._M_end_of_storage = __new_start + __len;
 8001a64:	9b00      	ldr	r3, [sp, #0]
		this->_M_impl._M_finish = __new_finish;
 8001a66:	e9cd 4604 	strd	r4, r6, [sp, #16]
		this->_M_impl._M_end_of_storage = __new_start + __len;
 8001a6a:	441c      	add	r4, r3
 8001a6c:	9406      	str	r4, [sp, #24]
 8001a6e:	e790      	b.n	8001992 <HAL_UARTEx_RxEventCallback+0x7e>
 8001a70:	24000e4c 	.word	0x24000e4c
 8001a74:	08016b81 	.word	0x08016b81

08001a78 <_ZN4LEDSD1Ev>:
    uint16_t G_address;
    uint16_t B_address;
};

// LEDS class used to control the LED
class LEDS {
 8001a78:	b570      	push	{r4, r5, r6, lr}
 8001a7a:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8001a7c:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
	if (__p)
 8001a7e:	b118      	cbz	r0, 8001a88 <_ZN4LEDSD1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001a80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001a82:	1a09      	subs	r1, r1, r0
 8001a84:	f014 fd20 	bl	80164c8 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8001a88:	6a20      	ldr	r0, [r4, #32]
	if (__p)
 8001a8a:	b120      	cbz	r0, 8001a96 <_ZN4LEDSD1Ev+0x1e>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001a8c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001a8e:	1a09      	subs	r1, r1, r0
 8001a90:	1109      	asrs	r1, r1, #4
 8001a92:	f7fe fdec 	bl	800066e <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001a96:	6960      	ldr	r0, [r4, #20]
	if (__p)
 8001a98:	b120      	cbz	r0, 8001aa4 <_ZN4LEDSD1Ev+0x2c>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001a9a:	69e1      	ldr	r1, [r4, #28]
 8001a9c:	1a09      	subs	r1, r1, r0
 8001a9e:	1109      	asrs	r1, r1, #4
 8001aa0:	f7fe fde5 	bl	800066e <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001aa4:	e9d4 5602 	ldrd	r5, r6, [r4, #8]
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
 8001aa8:	42ae      	cmp	r6, r5
 8001aaa:	d107      	bne.n	8001abc <_ZN4LEDSD1Ev+0x44>
	_M_deallocate(_M_impl._M_start,
 8001aac:	68a0      	ldr	r0, [r4, #8]
	if (__p)
 8001aae:	b118      	cbz	r0, 8001ab8 <_ZN4LEDSD1Ev+0x40>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001ab0:	6921      	ldr	r1, [r4, #16]
 8001ab2:	1a09      	subs	r1, r1, r0
 8001ab4:	f014 fd08 	bl	80164c8 <_ZdlPvj>
 8001ab8:	4620      	mov	r0, r4
 8001aba:	bd70      	pop	{r4, r5, r6, pc}
      }
 8001abc:	f105 0010 	add.w	r0, r5, #16
 8001ac0:	3520      	adds	r5, #32
 8001ac2:	f7fe feeb 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8001ac6:	e7ef      	b.n	8001aa8 <_ZN4LEDSD1Ev+0x30>

08001ac8 <_ZN13CommunicationD1Ev>:

	std::vector<uint8_t> data; // TODO, set as the register type with template
};

// Communication Class to communication with other modules
class Communication {
 8001ac8:	b570      	push	{r4, r5, r6, lr}
 8001aca:	4604      	mov	r4, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001acc:	e9d0 560c 	ldrd	r5, r6, [r0, #48]	@ 0x30
 8001ad0:	42ae      	cmp	r6, r5
 8001ad2:	d112      	bne.n	8001afa <_ZN13CommunicationD1Ev+0x32>
	_M_deallocate(_M_impl._M_start,
 8001ad4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
	if (__p)
 8001ad6:	b118      	cbz	r0, 8001ae0 <_ZN13CommunicationD1Ev+0x18>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001ad8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8001ada:	1a09      	subs	r1, r1, r0
 8001adc:	f014 fcf4 	bl	80164c8 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8001ae0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
	if (__p)
 8001ae2:	b120      	cbz	r0, 8001aee <_ZN13CommunicationD1Ev+0x26>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001ae4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8001ae6:	1a09      	subs	r1, r1, r0
 8001ae8:	1089      	asrs	r1, r1, #2
 8001aea:	f7fe fdbd 	bl	8000668 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
      }
 8001aee:	f104 0018 	add.w	r0, r4, #24
 8001af2:	f7fe fed3 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8001af6:	4620      	mov	r0, r4
 8001af8:	bd70      	pop	{r4, r5, r6, pc}
 8001afa:	1d28      	adds	r0, r5, #4
 8001afc:	3514      	adds	r5, #20
 8001afe:	f7fe fecd 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8001b02:	e7e5      	b.n	8001ad0 <_ZN13CommunicationD1Ev+0x8>

08001b04 <_ZN17MasterSubscribersD1Ev>:
	std::vector<SubscriberInterface> interfaces;    // interfaces associated to remote_registers (index by index)
	std::vector<uint8_t> filters;					// list of module address filters
};

// MasterSubscribers class used to receive published data from other modules
class MasterSubscribers {
 8001b04:	b570      	push	{r4, r5, r6, lr}
 8001b06:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8001b08:	6980      	ldr	r0, [r0, #24]
	if (__p)
 8001b0a:	b120      	cbz	r0, 8001b16 <_ZN17MasterSubscribersD1Ev+0x12>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001b0c:	6a21      	ldr	r1, [r4, #32]
 8001b0e:	1a09      	subs	r1, r1, r0
 8001b10:	1089      	asrs	r1, r1, #2
 8001b12:	f7fe fda9 	bl	8000668 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001b16:	e9d4 5603 	ldrd	r5, r6, [r4, #12]
 8001b1a:	42ae      	cmp	r6, r5
 8001b1c:	d107      	bne.n	8001b2e <_ZN17MasterSubscribersD1Ev+0x2a>
	_M_deallocate(_M_impl._M_start,
 8001b1e:	68e0      	ldr	r0, [r4, #12]
	if (__p)
 8001b20:	b118      	cbz	r0, 8001b2a <_ZN17MasterSubscribersD1Ev+0x26>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001b22:	6961      	ldr	r1, [r4, #20]
 8001b24:	1a09      	subs	r1, r1, r0
 8001b26:	f014 fccf 	bl	80164c8 <_ZdlPvj>
 8001b2a:	4620      	mov	r0, r4
 8001b2c:	bd70      	pop	{r4, r5, r6, pc}
      }
 8001b2e:	f105 001c 	add.w	r0, r5, #28
 8001b32:	f7fe feb3 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	_M_deallocate(_M_impl._M_start,
 8001b36:	6928      	ldr	r0, [r5, #16]
	if (__p)
 8001b38:	b118      	cbz	r0, 8001b42 <_ZN17MasterSubscribersD1Ev+0x3e>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001b3a:	69a9      	ldr	r1, [r5, #24]
 8001b3c:	1a09      	subs	r1, r1, r0
 8001b3e:	f014 fcc3 	bl	80164c8 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8001b42:	6868      	ldr	r0, [r5, #4]
	if (__p)
 8001b44:	b118      	cbz	r0, 8001b4e <_ZN17MasterSubscribersD1Ev+0x4a>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001b46:	68e9      	ldr	r1, [r5, #12]
 8001b48:	1a09      	subs	r1, r1, r0
 8001b4a:	f014 fcbd 	bl	80164c8 <_ZdlPvj>
 8001b4e:	3528      	adds	r5, #40	@ 0x28
 8001b50:	e7e3      	b.n	8001b1a <_ZN17MasterSubscribersD1Ev+0x16>

08001b52 <_ZN9RegistersD1Ev>:
	bool (*write)(void*, uint16_t, T*, uint16_t);	// write callback
	bool (*read)(void*, uint16_t, T**, uint16_t*);	// read callback
};

// Registers class used to interface memory addresses to memory pointers and / or callbacks
class Registers {
 8001b52:	b510      	push	{r4, lr}
 8001b54:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8001b56:	f8d0 008c 	ldr.w	r0, [r0, #140]	@ 0x8c
	if (__p)
 8001b5a:	b128      	cbz	r0, 8001b68 <_ZN9RegistersD1Ev+0x16>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001b5c:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8001b60:	1a09      	subs	r1, r1, r0
 8001b62:	1109      	asrs	r1, r1, #4
 8001b64:	f7fe fd83 	bl	800066e <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001b68:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
	if (__p)
 8001b6c:	b128      	cbz	r0, 8001b7a <_ZN9RegistersD1Ev+0x28>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001b6e:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 8001b72:	1a09      	subs	r1, r1, r0
 8001b74:	1109      	asrs	r1, r1, #4
 8001b76:	f7fe fd7a 	bl	800066e <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001b7a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
	if (__p)
 8001b7c:	b120      	cbz	r0, 8001b88 <_ZN9RegistersD1Ev+0x36>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001b7e:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8001b80:	1a09      	subs	r1, r1, r0
 8001b82:	1109      	asrs	r1, r1, #4
 8001b84:	f7fe fd73 	bl	800066e <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001b88:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
	if (__p)
 8001b8a:	b120      	cbz	r0, 8001b96 <_ZN9RegistersD1Ev+0x44>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001b8c:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8001b8e:	1a09      	subs	r1, r1, r0
 8001b90:	1109      	asrs	r1, r1, #4
 8001b92:	f7fe fd6c 	bl	800066e <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001b96:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
	if (__p)
 8001b98:	b120      	cbz	r0, 8001ba4 <_ZN9RegistersD1Ev+0x52>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001b9a:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8001b9c:	1a09      	subs	r1, r1, r0
 8001b9e:	1109      	asrs	r1, r1, #4
 8001ba0:	f7fe fd65 	bl	800066e <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001ba4:	6d20      	ldr	r0, [r4, #80]	@ 0x50
	if (__p)
 8001ba6:	b120      	cbz	r0, 8001bb2 <_ZN9RegistersD1Ev+0x60>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001ba8:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8001baa:	1a09      	subs	r1, r1, r0
 8001bac:	1109      	asrs	r1, r1, #4
 8001bae:	f7fe fd5e 	bl	800066e <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001bb2:	6c60      	ldr	r0, [r4, #68]	@ 0x44
	if (__p)
 8001bb4:	b120      	cbz	r0, 8001bc0 <_ZN9RegistersD1Ev+0x6e>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001bb6:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8001bb8:	1a09      	subs	r1, r1, r0
 8001bba:	1109      	asrs	r1, r1, #4
 8001bbc:	f7fe fd57 	bl	800066e <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001bc0:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
	if (__p)
 8001bc2:	b120      	cbz	r0, 8001bce <_ZN9RegistersD1Ev+0x7c>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001bc4:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8001bc6:	1a09      	subs	r1, r1, r0
 8001bc8:	1109      	asrs	r1, r1, #4
 8001bca:	f7fe fd50 	bl	800066e <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001bce:	6860      	ldr	r0, [r4, #4]
	if (__p)
 8001bd0:	b120      	cbz	r0, 8001bdc <_ZN9RegistersD1Ev+0x8a>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001bd2:	68e1      	ldr	r1, [r4, #12]
 8001bd4:	1a09      	subs	r1, r1, r0
 8001bd6:	1109      	asrs	r1, r1, #4
 8001bd8:	f7fe fd49 	bl	800066e <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
 8001bdc:	4620      	mov	r0, r4
 8001bde:	bd10      	pop	{r4, pc}

08001be0 <_ZNSt6vectorI9PublisherSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8001be0:	b570      	push	{r4, r5, r6, lr}
 8001be2:	4604      	mov	r4, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001be4:	e9d0 5600 	ldrd	r5, r6, [r0]
 8001be8:	42ae      	cmp	r6, r5
 8001bea:	d107      	bne.n	8001bfc <_ZNSt6vectorI9PublisherSaIS0_EED1Ev+0x1c>
	_M_deallocate(_M_impl._M_start,
 8001bec:	6820      	ldr	r0, [r4, #0]
	if (__p)
 8001bee:	b118      	cbz	r0, 8001bf8 <_ZNSt6vectorI9PublisherSaIS0_EED1Ev+0x18>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001bf0:	68a1      	ldr	r1, [r4, #8]
 8001bf2:	1a09      	subs	r1, r1, r0
 8001bf4:	f014 fc68 	bl	80164c8 <_ZdlPvj>
      }
 8001bf8:	4620      	mov	r0, r4
 8001bfa:	bd70      	pop	{r4, r5, r6, pc}
	_M_deallocate(_M_impl._M_start,
 8001bfc:	6968      	ldr	r0, [r5, #20]
	if (__p)
 8001bfe:	b120      	cbz	r0, 8001c0a <_ZNSt6vectorI9PublisherSaIS0_EED1Ev+0x2a>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001c00:	69e9      	ldr	r1, [r5, #28]
 8001c02:	1a09      	subs	r1, r1, r0
 8001c04:	1089      	asrs	r1, r1, #2
 8001c06:	f7fe fd2f 	bl	8000668 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001c0a:	68a8      	ldr	r0, [r5, #8]
	if (__p)
 8001c0c:	b118      	cbz	r0, 8001c16 <_ZNSt6vectorI9PublisherSaIS0_EED1Ev+0x36>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001c0e:	6929      	ldr	r1, [r5, #16]
 8001c10:	1a09      	subs	r1, r1, r0
 8001c12:	f014 fc59 	bl	80164c8 <_ZdlPvj>
 8001c16:	3520      	adds	r5, #32
 8001c18:	e7e6      	b.n	8001be8 <_ZNSt6vectorI9PublisherSaIS0_EED1Ev+0x8>

08001c1a <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8001c1a:	b570      	push	{r4, r5, r6, lr}
 8001c1c:	4604      	mov	r4, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001c1e:	e9d0 5600 	ldrd	r5, r6, [r0]
 8001c22:	42ae      	cmp	r6, r5
 8001c24:	d107      	bne.n	8001c36 <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev+0x1c>
	_M_deallocate(_M_impl._M_start,
 8001c26:	6820      	ldr	r0, [r4, #0]
	if (__p)
 8001c28:	b118      	cbz	r0, 8001c32 <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev+0x18>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001c2a:	68a1      	ldr	r1, [r4, #8]
 8001c2c:	1a09      	subs	r1, r1, r0
 8001c2e:	f014 fc4b 	bl	80164c8 <_ZdlPvj>
      }
 8001c32:	4620      	mov	r0, r4
 8001c34:	bd70      	pop	{r4, r5, r6, pc}
 8001c36:	4628      	mov	r0, r5
 8001c38:	350c      	adds	r5, #12
 8001c3a:	f7fe fe2f 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8001c3e:	e7f0      	b.n	8001c22 <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev+0x8>

08001c40 <_ZN21CommunicationProtocolD1Ev>:
	uint8_t target_address;
	uint8_t source_address;
};

// CommunicationProtocol class used as a basis to derive custom Protocols
class CommunicationProtocol {
 8001c40:	4b0b      	ldr	r3, [pc, #44]	@ (8001c70 <_ZN21CommunicationProtocolD1Ev+0x30>)
 8001c42:	b510      	push	{r4, lr}
 8001c44:	4604      	mov	r4, r0
 8001c46:	6003      	str	r3, [r0, #0]
	_M_deallocate(_M_impl._M_start,
 8001c48:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
	if (__p)
 8001c4a:	b118      	cbz	r0, 8001c54 <_ZN21CommunicationProtocolD1Ev+0x14>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001c4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001c4e:	1a09      	subs	r1, r1, r0
 8001c50:	f014 fc3a 	bl	80164c8 <_ZdlPvj>
 8001c54:	f104 0020 	add.w	r0, r4, #32
 8001c58:	f7ff ffdf 	bl	8001c1a <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev>
      }
 8001c5c:	f104 0010 	add.w	r0, r4, #16
 8001c60:	f7fe fe1c 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8001c64:	1d20      	adds	r0, r4, #4
 8001c66:	f7ff ffd8 	bl	8001c1a <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev>
 8001c6a:	4620      	mov	r0, r4
 8001c6c:	bd10      	pop	{r4, pc}
 8001c6e:	bf00      	nop
 8001c70:	08016e04 	.word	0x08016e04

08001c74 <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001c74:	b510      	push	{r4, lr}
 8001c76:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8001c78:	6800      	ldr	r0, [r0, #0]
	if (__p)
 8001c7a:	b120      	cbz	r0, 8001c86 <_ZNSt12_Vector_baseIfSaIfEED1Ev+0x12>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001c7c:	68a1      	ldr	r1, [r4, #8]
 8001c7e:	1a09      	subs	r1, r1, r0
 8001c80:	1089      	asrs	r1, r1, #2
 8001c82:	f7fe fcf1 	bl	8000668 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
      }
 8001c86:	4620      	mov	r0, r4
 8001c88:	bd10      	pop	{r4, pc}

08001c8a <_ZNSt12_Vector_baseI9I2CAccessSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001c8a:	b510      	push	{r4, lr}
 8001c8c:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8001c8e:	6800      	ldr	r0, [r0, #0]
	if (__p)
 8001c90:	b118      	cbz	r0, 8001c9a <_ZNSt12_Vector_baseI9I2CAccessSaIS0_EED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001c92:	68a1      	ldr	r1, [r4, #8]
 8001c94:	1a09      	subs	r1, r1, r0
 8001c96:	f014 fc17 	bl	80164c8 <_ZdlPvj>
      }
 8001c9a:	4620      	mov	r0, r4
 8001c9c:	bd10      	pop	{r4, pc}

08001c9e <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001c9e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ca2:	4604      	mov	r4, r0
 8001ca4:	460f      	mov	r7, r1
	  for (; __first != __last; ++__first)
 8001ca6:	42bc      	cmp	r4, r7
 8001ca8:	d101      	bne.n	8001cae <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_+0x10>
	    std::_Destroy(std::__addressof(*__first));
	}
 8001caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001cae:	e9d4 5803 	ldrd	r5, r8, [r4, #12]
	  for (; __first != __last; ++__first)
 8001cb2:	45a8      	cmp	r8, r5
 8001cb4:	d107      	bne.n	8001cc6 <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_+0x28>
	_M_deallocate(_M_impl._M_start,
 8001cb6:	68e0      	ldr	r0, [r4, #12]
	if (__p)
 8001cb8:	b118      	cbz	r0, 8001cc2 <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_+0x24>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001cba:	6961      	ldr	r1, [r4, #20]
 8001cbc:	1a09      	subs	r1, r1, r0
 8001cbe:	f014 fc03 	bl	80164c8 <_ZdlPvj>
 8001cc2:	3418      	adds	r4, #24
 8001cc4:	e7ef      	b.n	8001ca6 <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_+0x8>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001cc6:	e9d5 6905 	ldrd	r6, r9, [r5, #20]
 8001cca:	45b1      	cmp	r9, r6
 8001ccc:	d107      	bne.n	8001cde <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_+0x40>
	_M_deallocate(_M_impl._M_start,
 8001cce:	6968      	ldr	r0, [r5, #20]
	if (__p)
 8001cd0:	b118      	cbz	r0, 8001cda <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_+0x3c>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001cd2:	69e9      	ldr	r1, [r5, #28]
 8001cd4:	1a09      	subs	r1, r1, r0
 8001cd6:	f014 fbf7 	bl	80164c8 <_ZdlPvj>
 8001cda:	3528      	adds	r5, #40	@ 0x28
 8001cdc:	e7e9      	b.n	8001cb2 <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_+0x14>
      }
 8001cde:	f106 000c 	add.w	r0, r6, #12
 8001ce2:	3618      	adds	r6, #24
 8001ce4:	f7ff ffd1 	bl	8001c8a <_ZNSt12_Vector_baseI9I2CAccessSaIS0_EED1Ev>
 8001ce8:	e7ef      	b.n	8001cca <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_+0x2c>

08001cea <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001cea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cec:	4604      	mov	r4, r0
 8001cee:	460e      	mov	r6, r1
	  for (; __first != __last; ++__first)
 8001cf0:	42b4      	cmp	r4, r6
 8001cf2:	d100      	bne.n	8001cf6 <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_+0xc>
	}
 8001cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001cf6:	e9d4 571c 	ldrd	r5, r7, [r4, #112]	@ 0x70
	  for (; __first != __last; ++__first)
 8001cfa:	42af      	cmp	r7, r5
 8001cfc:	d118      	bne.n	8001d30 <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_+0x46>
	_M_deallocate(_M_impl._M_start,
 8001cfe:	6f20      	ldr	r0, [r4, #112]	@ 0x70
	if (__p)
 8001d00:	b118      	cbz	r0, 8001d0a <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_+0x20>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001d02:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8001d04:	1a09      	subs	r1, r1, r0
 8001d06:	f014 fbdf 	bl	80164c8 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8001d0a:	6e60      	ldr	r0, [r4, #100]	@ 0x64
	if (__p)
 8001d0c:	b120      	cbz	r0, 8001d18 <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_+0x2e>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001d0e:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8001d10:	1a09      	subs	r1, r1, r0
 8001d12:	1089      	asrs	r1, r1, #2
 8001d14:	f7fe fca8 	bl	8000668 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8001d18:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	@ 0x58
 8001d1c:	f7ff ffbf 	bl	8001c9e <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_>
	_M_deallocate(_M_impl._M_start,
 8001d20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
	if (__p)
 8001d22:	b118      	cbz	r0, 8001d2c <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_+0x42>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001d24:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8001d26:	1a09      	subs	r1, r1, r0
 8001d28:	f014 fbce 	bl	80164c8 <_ZdlPvj>
	  for (; __first != __last; ++__first)
 8001d2c:	347c      	adds	r4, #124	@ 0x7c
 8001d2e:	e7df      	b.n	8001cf0 <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_+0x6>
      }
 8001d30:	f105 0014 	add.w	r0, r5, #20
 8001d34:	3520      	adds	r5, #32
 8001d36:	f7ff ffa8 	bl	8001c8a <_ZNSt12_Vector_baseI9I2CAccessSaIS0_EED1Ev>
 8001d3a:	e7de      	b.n	8001cfa <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_+0x10>

08001d3c <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8001d3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001d40:	e9d0 8a00 	ldrd	r8, sl, [r0]
 8001d44:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 8001d46:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001d4a:	ebaa 0208 	sub.w	r2, sl, r8
 8001d4e:	4607      	mov	r7, r0
 8001d50:	4689      	mov	r9, r1
	if (max_size() - size() < __n)
 8001d52:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001d56:	ea4f 04a2 	mov.w	r4, r2, asr #2
	if (max_size() - size() < __n)
 8001d5a:	d102      	bne.n	8001d62 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8001d5c:	481f      	ldr	r0, [pc, #124]	@ (8001ddc <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa0>)
 8001d5e:	f014 fc8d 	bl	801667c <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 8001d62:	45c2      	cmp	sl, r8
 8001d64:	bf14      	ite	ne
 8001d66:	4622      	movne	r2, r4
 8001d68:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 8001d6a:	eba1 0508 	sub.w	r5, r1, r8
 8001d6e:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8001d70:	d22f      	bcs.n	8001dd2 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x96>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8001d72:	b384      	cbz	r4, 8001dd6 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8001d74:	429c      	cmp	r4, r3
 8001d76:	bf28      	it	cs
 8001d78:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8001d7a:	00a0      	lsls	r0, r4, #2
 8001d7c:	f014 fbc9 	bl	8016512 <_Znwj>
 8001d80:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8001d82:	f8db 3000 	ldr.w	r3, [fp]
      if (__count > 0)
 8001d86:	2d00      	cmp	r5, #0
 8001d88:	5173      	str	r3, [r6, r5]
 8001d8a:	dd04      	ble.n	8001d96 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x5a>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8001d8c:	462a      	mov	r2, r5
 8001d8e:	4641      	mov	r1, r8
 8001d90:	4630      	mov	r0, r6
 8001d92:	f014 fd4b 	bl	801682c <memmove>
      ptrdiff_t __count = __last - __first;
 8001d96:	ebaa 0a09 	sub.w	sl, sl, r9
	      ++__new_finish;
 8001d9a:	3504      	adds	r5, #4
      if (__count > 0)
 8001d9c:	f1ba 0f00 	cmp.w	sl, #0
 8001da0:	4435      	add	r5, r6
 8001da2:	dd04      	ble.n	8001dae <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x72>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8001da4:	4652      	mov	r2, sl
 8001da6:	4649      	mov	r1, r9
 8001da8:	4628      	mov	r0, r5
 8001daa:	f014 fe37 	bl	8016a1c <memcpy>
      return __result + __count;
 8001dae:	4455      	add	r5, sl
	if (__p)
 8001db0:	f1b8 0f00 	cmp.w	r8, #0
 8001db4:	d006      	beq.n	8001dc4 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x88>
		    this->_M_impl._M_end_of_storage - __old_start);
 8001db6:	68b9      	ldr	r1, [r7, #8]
 8001db8:	4640      	mov	r0, r8
 8001dba:	eba1 0108 	sub.w	r1, r1, r8
 8001dbe:	1089      	asrs	r1, r1, #2
 8001dc0:	f7fe fc52 	bl	8000668 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
      this->_M_impl._M_finish = __new_finish;
 8001dc4:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8001dc8:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8001dcc:	60be      	str	r6, [r7, #8]
    }
 8001dce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8001dd2:	461c      	mov	r4, r3
 8001dd4:	e7d1      	b.n	8001d7a <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8001dd6:	4626      	mov	r6, r4
 8001dd8:	e7d3      	b.n	8001d82 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
 8001dda:	bf00      	nop
 8001ddc:	08016b36 	.word	0x08016b36

08001de0 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12AddInterfaceEhPS0_>:
void TemplateCommunicationProtocol<H>::AddInterface(uint8_t ID, H* interface) {
 8001de0:	b513      	push	{r0, r1, r4, lr}
 8001de2:	4604      	mov	r4, r0
 8001de4:	9201      	str	r2, [sp, #4]
	AddInterfaceID(ID);
 8001de6:	f011 faaf 	bl	8013348 <_ZN21CommunicationProtocol14AddInterfaceIDEh>
	AddInterfaceBuffer();
 8001dea:	4620      	mov	r0, r4
 8001dec:	f011 fc46 	bl	801367c <_ZN21CommunicationProtocol18AddInterfaceBufferEv>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8001df0:	e9d4 130f 	ldrd	r1, r3, [r4, #60]	@ 0x3c
 8001df4:	4299      	cmp	r1, r3
 8001df6:	d005      	beq.n	8001e04 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12AddInterfaceEhPS0_+0x24>
 8001df8:	9b01      	ldr	r3, [sp, #4]
 8001dfa:	f841 3b04 	str.w	r3, [r1], #4
	    ++this->_M_impl._M_finish;
 8001dfe:	63e1      	str	r1, [r4, #60]	@ 0x3c
}
 8001e00:	b002      	add	sp, #8
 8001e02:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), __x);
 8001e04:	aa01      	add	r2, sp, #4
 8001e06:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8001e0a:	f7ff ff97 	bl	8001d3c <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
 8001e0e:	e7f7      	b.n	8001e00 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12AddInterfaceEhPS0_+0x20>

08001e10 <_GLOBAL__sub_I_hadc1>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
Registers registers;
 8001e14:	4c1f      	ldr	r4, [pc, #124]	@ (8001e94 <_GLOBAL__sub_I_hadc1+0x84>)
}
 8001e16:	b087      	sub	sp, #28
MasterSubscribers subscribers;
 8001e18:	4d1f      	ldr	r5, [pc, #124]	@ (8001e98 <_GLOBAL__sub_I_hadc1+0x88>)
Registers registers;
 8001e1a:	4620      	mov	r0, r4
Communication communication;
 8001e1c:	4e1f      	ldr	r6, [pc, #124]	@ (8001e9c <_GLOBAL__sub_I_hadc1+0x8c>)
Registers registers;
 8001e1e:	f012 ff59 	bl	8014cd4 <_ZN9RegistersC1Ev>
UARTProtocol protocol_uart;
 8001e22:	481f      	ldr	r0, [pc, #124]	@ (8001ea0 <_GLOBAL__sub_I_hadc1+0x90>)
 8001e24:	f012 f8de 	bl	8013fe4 <_ZN12UARTProtocolC1Ev>
CANProtocol protocol_canfd;
 8001e28:	481e      	ldr	r0, [pc, #120]	@ (8001ea4 <_GLOBAL__sub_I_hadc1+0x94>)
 8001e2a:	f011 fc8b 	bl	8013744 <_ZN11CANProtocolC1Ev>
Services services;
 8001e2e:	4f1e      	ldr	r7, [pc, #120]	@ (8001ea8 <_GLOBAL__sub_I_hadc1+0x98>)
MasterSubscribers subscribers;
 8001e30:	4628      	mov	r0, r5
Publishers publishers;
 8001e32:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 8001ebc <_GLOBAL__sub_I_hadc1+0xac>
MasterSubscribers subscribers;
 8001e36:	f013 ff9f 	bl	8015d78 <_ZN17MasterSubscribersC1Ev>
Communication communication;
 8001e3a:	4630      	mov	r0, r6
 8001e3c:	f00c fd44 	bl	800e8c8 <_ZN13CommunicationC1Ev>
HardwareDelay hardware_delay(&htim4);
 8001e40:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 8001ec0 <_GLOBAL__sub_I_hadc1+0xb0>
Services services;
 8001e44:	4638      	mov	r0, r7
Sensors sensors;
 8001e46:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8001ec4 <_GLOBAL__sub_I_hadc1+0xb4>
Services services;
 8001e4a:	f013 fe46 	bl	8015ada <_ZN8ServicesC1Ev>
Publishers publishers;
 8001e4e:	4640      	mov	r0, r8
 8001e50:	f012 fc60 	bl	8014714 <_ZN10PublishersC1Ev>
LEDS leds;
 8001e54:	f8df b070 	ldr.w	fp, [pc, #112]	@ 8001ec8 <_GLOBAL__sub_I_hadc1+0xb8>
HardwareDelay hardware_delay(&htim4);
 8001e58:	4914      	ldr	r1, [pc, #80]	@ (8001eac <_GLOBAL__sub_I_hadc1+0x9c>)
 8001e5a:	4648      	mov	r0, r9
 8001e5c:	f00f fb97 	bl	801158e <_ZN13HardwareDelayC1EP17TIM_HandleTypeDef>
Sensors sensors;
 8001e60:	4650      	mov	r0, sl
 8001e62:	f013 f9ab 	bl	80151bc <_ZN7SensorsC1Ev>
LEDS leds;
 8001e66:	4658      	mov	r0, fp
 8001e68:	f00f fca8 	bl	80117bc <_ZN4LEDSC1Ev>
MotionGenerator motion_generator;
 8001e6c:	4810      	ldr	r0, [pc, #64]	@ (8001eb0 <_GLOBAL__sub_I_hadc1+0xa0>)
 8001e6e:	f010 fc4b 	bl	8012708 <_ZN15MotionGeneratorC1Ev>
PlatformSensors platform_sensors;
 8001e72:	4810      	ldr	r0, [pc, #64]	@ (8001eb4 <_GLOBAL__sub_I_hadc1+0xa4>)
 8001e74:	f00c fb20 	bl	800e4b8 <_ZN15PlatformSensorsC1Ev>
User user(&registers, &subscribers, &communication, &services, &publishers, &hardware_delay, &sensors, &leds);
 8001e78:	4633      	mov	r3, r6
 8001e7a:	462a      	mov	r2, r5
 8001e7c:	4621      	mov	r1, r4
 8001e7e:	9700      	str	r7, [sp, #0]
 8001e80:	480d      	ldr	r0, [pc, #52]	@ (8001eb8 <_GLOBAL__sub_I_hadc1+0xa8>)
 8001e82:	e9cd ab03 	strd	sl, fp, [sp, #12]
 8001e86:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8001e8a:	f014 fa5c 	bl	8016346 <_ZN4UserC1EP9RegistersP17MasterSubscribersP13CommunicationP8ServicesP10PublishersP13HardwareDelayP7SensorsP4LEDS>
}
 8001e8e:	b007      	add	sp, #28
 8001e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e94:	24000f68 	.word	0x24000f68
 8001e98:	24000e88 	.word	0x24000e88
 8001e9c:	24000e4c 	.word	0x24000e4c
 8001ea0:	24000f00 	.word	0x24000f00
 8001ea4:	24000eac 	.word	0x24000eac
 8001ea8:	24000208 	.word	0x24000208
 8001eac:	24001a90 	.word	0x24001a90
 8001eb0:	240000c8 	.word	0x240000c8
 8001eb4:	240000a0 	.word	0x240000a0
 8001eb8:	24000080 	.word	0x24000080
 8001ebc:	240001f0 	.word	0x240001f0
 8001ec0:	240001d4 	.word	0x240001d4
 8001ec4:	24000168 	.word	0x24000168
 8001ec8:	24000130 	.word	0x24000130

08001ecc <_GLOBAL__sub_D_hadc1>:
 8001ecc:	b510      	push	{r4, lr}
      }
 8001ece:	4832      	ldr	r0, [pc, #200]	@ (8001f98 <_GLOBAL__sub_D_hadc1+0xcc>)
 8001ed0:	f7ff fed0 	bl	8001c74 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8001ed4:	4831      	ldr	r0, [pc, #196]	@ (8001f9c <_GLOBAL__sub_D_hadc1+0xd0>)
 8001ed6:	f7ff fecd 	bl	8001c74 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
	_M_deallocate(_M_impl._M_start,
 8001eda:	4c31      	ldr	r4, [pc, #196]	@ (8001fa0 <_GLOBAL__sub_D_hadc1+0xd4>)
      }
 8001edc:	4831      	ldr	r0, [pc, #196]	@ (8001fa4 <_GLOBAL__sub_D_hadc1+0xd8>)
 8001ede:	f7ff fec9 	bl	8001c74 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
LEDS leds;
 8001ee2:	4831      	ldr	r0, [pc, #196]	@ (8001fa8 <_GLOBAL__sub_D_hadc1+0xdc>)
 8001ee4:	f7ff fdc8 	bl	8001a78 <_ZN4LEDSD1Ev>
	_M_deallocate(_M_impl._M_start,
 8001ee8:	6d20      	ldr	r0, [r4, #80]	@ 0x50
	if (__p)
 8001eea:	b118      	cbz	r0, 8001ef4 <_GLOBAL__sub_D_hadc1+0x28>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001eec:	6da1      	ldr	r1, [r4, #88]	@ 0x58
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8001eee:	1a09      	subs	r1, r1, r0
 8001ef0:	f014 faea 	bl	80164c8 <_ZdlPvj>
      }
 8001ef4:	482d      	ldr	r0, [pc, #180]	@ (8001fac <_GLOBAL__sub_D_hadc1+0xe0>)
 8001ef6:	f7ff febd 	bl	8001c74 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
	__destroy(__first, __last);
 8001efa:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8001efe:	f7ff fef4 	bl	8001cea <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_>
	_M_deallocate(_M_impl._M_start,
 8001f02:	6920      	ldr	r0, [r4, #16]
	if (__p)
 8001f04:	b118      	cbz	r0, 8001f0e <_GLOBAL__sub_D_hadc1+0x42>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001f06:	69a1      	ldr	r1, [r4, #24]
 8001f08:	1a09      	subs	r1, r1, r0
 8001f0a:	f014 fadd 	bl	80164c8 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8001f0e:	4b28      	ldr	r3, [pc, #160]	@ (8001fb0 <_GLOBAL__sub_D_hadc1+0xe4>)
 8001f10:	6918      	ldr	r0, [r3, #16]
	if (__p)
 8001f12:	b118      	cbz	r0, 8001f1c <_GLOBAL__sub_D_hadc1+0x50>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001f14:	6999      	ldr	r1, [r3, #24]
 8001f16:	1a09      	subs	r1, r1, r0
 8001f18:	f014 fad6 	bl	80164c8 <_ZdlPvj>
	std::vector<PublishInterface> interfaces; 	// links interfaces to the publisher
	std::vector<Topic> topics;					// topics of the publisher
};

// Publishers class used to broadcast registers on the bus
class Publishers {
 8001f1c:	4825      	ldr	r0, [pc, #148]	@ (8001fb4 <_GLOBAL__sub_D_hadc1+0xe8>)
 8001f1e:	f7ff fe5f 	bl	8001be0 <_ZNSt6vectorI9PublisherSaIS0_EED1Ev>
#include <stm32h7xx_hal.h>

#include "Protocols/Communication/Core/TemplateCommunicationProtocol.hpp"

// CANProtocol class used to interface with every CANFD interface
class CANProtocol : public TemplateCommunicationProtocol<FDCAN_HandleTypeDef> {
 8001f22:	4c25      	ldr	r4, [pc, #148]	@ (8001fb8 <_GLOBAL__sub_D_hadc1+0xec>)
Communication communication;
 8001f24:	4825      	ldr	r0, [pc, #148]	@ (8001fbc <_GLOBAL__sub_D_hadc1+0xf0>)
 8001f26:	f7ff fdcf 	bl	8001ac8 <_ZN13CommunicationD1Ev>
MasterSubscribers subscribers;
 8001f2a:	4825      	ldr	r0, [pc, #148]	@ (8001fc0 <_GLOBAL__sub_D_hadc1+0xf4>)
 8001f2c:	f7ff fdea 	bl	8001b04 <_ZN17MasterSubscribersD1Ev>
 8001f30:	4b24      	ldr	r3, [pc, #144]	@ (8001fc4 <_GLOBAL__sub_D_hadc1+0xf8>)
	_M_deallocate(_M_impl._M_start,
 8001f32:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8001f34:	6023      	str	r3, [r4, #0]
	if (__p)
 8001f36:	b118      	cbz	r0, 8001f40 <_GLOBAL__sub_D_hadc1+0x74>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001f38:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8001f3a:	1a09      	subs	r1, r1, r0
 8001f3c:	f014 fac4 	bl	80164c8 <_ZdlPvj>
class TemplateCommunicationProtocol : public CommunicationProtocol {
 8001f40:	4b21      	ldr	r3, [pc, #132]	@ (8001fc8 <_GLOBAL__sub_D_hadc1+0xfc>)
	_M_deallocate(_M_impl._M_start,
 8001f42:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001f44:	6023      	str	r3, [r4, #0]
	if (__p)
 8001f46:	b120      	cbz	r0, 8001f52 <_GLOBAL__sub_D_hadc1+0x86>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001f48:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8001f4a:	1a09      	subs	r1, r1, r0
 8001f4c:	1089      	asrs	r1, r1, #2
 8001f4e:	f7fe fb8b 	bl	8000668 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
#include "Protocols/Communication/Core/TemplateCommunicationProtocol.hpp"

#include "Definitions/CommunicationDefinition.h"

// UARTProtocol class used to interface with every UART interface
class UARTProtocol : public TemplateCommunicationProtocol<UART_HandleTypeDef> {
 8001f52:	4c1e      	ldr	r4, [pc, #120]	@ (8001fcc <_GLOBAL__sub_D_hadc1+0x100>)
 8001f54:	4818      	ldr	r0, [pc, #96]	@ (8001fb8 <_GLOBAL__sub_D_hadc1+0xec>)
 8001f56:	f7ff fe73 	bl	8001c40 <_ZN21CommunicationProtocolD1Ev>
 8001f5a:	4b1d      	ldr	r3, [pc, #116]	@ (8001fd0 <_GLOBAL__sub_D_hadc1+0x104>)
 8001f5c:	4620      	mov	r0, r4
 8001f5e:	f840 3b5c 	str.w	r3, [r0], #92
      }
 8001f62:	f7fe fc9b 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8001f66:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8001f6a:	f7fe fc97 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8001f6e:	f104 0044 	add.w	r0, r4, #68	@ 0x44
 8001f72:	f7fe fc93 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8001f76:	4b17      	ldr	r3, [pc, #92]	@ (8001fd4 <_GLOBAL__sub_D_hadc1+0x108>)
	_M_deallocate(_M_impl._M_start,
 8001f78:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001f7a:	6023      	str	r3, [r4, #0]
	if (__p)
 8001f7c:	b120      	cbz	r0, 8001f88 <_GLOBAL__sub_D_hadc1+0xbc>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001f7e:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8001f80:	1a09      	subs	r1, r1, r0
 8001f82:	1089      	asrs	r1, r1, #2
 8001f84:	f7fe fb70 	bl	8000668 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
 8001f88:	4810      	ldr	r0, [pc, #64]	@ (8001fcc <_GLOBAL__sub_D_hadc1+0x100>)
 8001f8a:	f7ff fe59 	bl	8001c40 <_ZN21CommunicationProtocolD1Ev>
Registers registers;
 8001f8e:	4812      	ldr	r0, [pc, #72]	@ (8001fd8 <_GLOBAL__sub_D_hadc1+0x10c>)
 8001f90:	f7ff fddf 	bl	8001b52 <_ZN9RegistersD1Ev>
}
 8001f94:	bd10      	pop	{r4, pc}
 8001f96:	bf00      	nop
 8001f98:	24000118 	.word	0x24000118
 8001f9c:	240000f8 	.word	0x240000f8
 8001fa0:	24000168 	.word	0x24000168
 8001fa4:	240000ec 	.word	0x240000ec
 8001fa8:	24000130 	.word	0x24000130
 8001fac:	24000184 	.word	0x24000184
 8001fb0:	240001d4 	.word	0x240001d4
 8001fb4:	240001fc 	.word	0x240001fc
 8001fb8:	24000eac 	.word	0x24000eac
 8001fbc:	24000e4c 	.word	0x24000e4c
 8001fc0:	24000e88 	.word	0x24000e88
 8001fc4:	08016e38 	.word	0x08016e38
 8001fc8:	08016c44 	.word	0x08016c44
 8001fcc:	24000f00 	.word	0x24000f00
 8001fd0:	08016e74 	.word	0x08016e74
 8001fd4:	08016c28 	.word	0x08016c28
 8001fd8:	24000f68 	.word	0x24000f68

08001fdc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fdc:	b500      	push	{lr}
 8001fde:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe0:	4b0a      	ldr	r3, [pc, #40]	@ (800200c <HAL_MspInit+0x30>)
 8001fe2:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8001fe6:	f042 0202 	orr.w	r2, r2, #2
 8001fea:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8001fee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	9301      	str	r3, [sp, #4]
 8001ff8:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	210f      	movs	r1, #15
 8001ffe:	f06f 0001 	mvn.w	r0, #1
 8002002:	f001 fe75 	bl	8003cf0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002006:	b003      	add	sp, #12
 8002008:	f85d fb04 	ldr.w	pc, [sp], #4
 800200c:	58024400 	.word	0x58024400

08002010 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002010:	b500      	push	{lr}
 8002012:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002014:	2300      	movs	r3, #0
 8002016:	9303      	str	r3, [sp, #12]
 8002018:	9304      	str	r3, [sp, #16]
 800201a:	9305      	str	r3, [sp, #20]
 800201c:	9306      	str	r3, [sp, #24]
 800201e:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 8002020:	6803      	ldr	r3, [r0, #0]
 8002022:	4a1c      	ldr	r2, [pc, #112]	@ (8002094 <HAL_ADC_MspInit+0x84>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d005      	beq.n	8002034 <HAL_ADC_MspInit+0x24>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC3)
 8002028:	4a1b      	ldr	r2, [pc, #108]	@ (8002098 <HAL_ADC_MspInit+0x88>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d024      	beq.n	8002078 <HAL_ADC_MspInit+0x68>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800202e:	b009      	add	sp, #36	@ 0x24
 8002030:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002034:	4b19      	ldr	r3, [pc, #100]	@ (800209c <HAL_ADC_MspInit+0x8c>)
 8002036:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 800203a:	f042 0220 	orr.w	r2, r2, #32
 800203e:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 8002042:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8002046:	f002 0220 	and.w	r2, r2, #32
 800204a:	9200      	str	r2, [sp, #0]
 800204c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800204e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002052:	f042 0201 	orr.w	r2, r2, #1
 8002056:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800205a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	9301      	str	r3, [sp, #4]
 8002064:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002066:	2310      	movs	r3, #16
 8002068:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800206a:	2303      	movs	r3, #3
 800206c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206e:	a903      	add	r1, sp, #12
 8002070:	480b      	ldr	r0, [pc, #44]	@ (80020a0 <HAL_ADC_MspInit+0x90>)
 8002072:	f003 ffb1 	bl	8005fd8 <HAL_GPIO_Init>
 8002076:	e7da      	b.n	800202e <HAL_ADC_MspInit+0x1e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002078:	4b08      	ldr	r3, [pc, #32]	@ (800209c <HAL_ADC_MspInit+0x8c>)
 800207a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800207e:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8002082:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800208a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800208e:	9302      	str	r3, [sp, #8]
 8002090:	9b02      	ldr	r3, [sp, #8]
}
 8002092:	e7cc      	b.n	800202e <HAL_ADC_MspInit+0x1e>
 8002094:	40022000 	.word	0x40022000
 8002098:	58026000 	.word	0x58026000
 800209c:	58024400 	.word	0x58024400
 80020a0:	58020000 	.word	0x58020000

080020a4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80020a4:	b500      	push	{lr}
 80020a6:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a8:	2300      	movs	r3, #0
 80020aa:	9305      	str	r3, [sp, #20]
 80020ac:	9306      	str	r3, [sp, #24]
 80020ae:	9307      	str	r3, [sp, #28]
 80020b0:	9308      	str	r3, [sp, #32]
 80020b2:	9309      	str	r3, [sp, #36]	@ 0x24
  if(hfdcan->Instance==FDCAN1)
 80020b4:	6803      	ldr	r3, [r0, #0]
 80020b6:	4a3b      	ldr	r2, [pc, #236]	@ (80021a4 <HAL_FDCAN_MspInit+0x100>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d005      	beq.n	80020c8 <HAL_FDCAN_MspInit+0x24>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
  else if(hfdcan->Instance==FDCAN2)
 80020bc:	4a3a      	ldr	r2, [pc, #232]	@ (80021a8 <HAL_FDCAN_MspInit+0x104>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d039      	beq.n	8002136 <HAL_FDCAN_MspInit+0x92>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 80020c2:	b00b      	add	sp, #44	@ 0x2c
 80020c4:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80020c8:	4a38      	ldr	r2, [pc, #224]	@ (80021ac <HAL_FDCAN_MspInit+0x108>)
 80020ca:	6813      	ldr	r3, [r2, #0]
 80020cc:	3301      	adds	r3, #1
 80020ce:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d022      	beq.n	800211a <HAL_FDCAN_MspInit+0x76>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d4:	4b36      	ldr	r3, [pc, #216]	@ (80021b0 <HAL_FDCAN_MspInit+0x10c>)
 80020d6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80020da:	f042 0201 	orr.w	r2, r2, #1
 80020de:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80020e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	9302      	str	r3, [sp, #8]
 80020ec:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80020ee:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80020f2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f4:	2302      	movs	r3, #2
 80020f6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f8:	2303      	movs	r3, #3
 80020fa:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80020fc:	2309      	movs	r3, #9
 80020fe:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002100:	a905      	add	r1, sp, #20
 8002102:	482c      	ldr	r0, [pc, #176]	@ (80021b4 <HAL_FDCAN_MspInit+0x110>)
 8002104:	f003 ff68 	bl	8005fd8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8002108:	2200      	movs	r2, #0
 800210a:	2105      	movs	r1, #5
 800210c:	2013      	movs	r0, #19
 800210e:	f001 fdef 	bl	8003cf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002112:	2013      	movs	r0, #19
 8002114:	f001 fdfc 	bl	8003d10 <HAL_NVIC_EnableIRQ>
 8002118:	e7d3      	b.n	80020c2 <HAL_FDCAN_MspInit+0x1e>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800211a:	4b25      	ldr	r3, [pc, #148]	@ (80021b0 <HAL_FDCAN_MspInit+0x10c>)
 800211c:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 8002120:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002124:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
 8002128:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800212c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002130:	9301      	str	r3, [sp, #4]
 8002132:	9b01      	ldr	r3, [sp, #4]
 8002134:	e7ce      	b.n	80020d4 <HAL_FDCAN_MspInit+0x30>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002136:	4a1d      	ldr	r2, [pc, #116]	@ (80021ac <HAL_FDCAN_MspInit+0x108>)
 8002138:	6813      	ldr	r3, [r2, #0]
 800213a:	3301      	adds	r3, #1
 800213c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800213e:	2b01      	cmp	r3, #1
 8002140:	d021      	beq.n	8002186 <HAL_FDCAN_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002142:	4b1b      	ldr	r3, [pc, #108]	@ (80021b0 <HAL_FDCAN_MspInit+0x10c>)
 8002144:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002148:	f042 0202 	orr.w	r2, r2, #2
 800214c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	9304      	str	r3, [sp, #16]
 800215a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800215c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002160:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002162:	2302      	movs	r3, #2
 8002164:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002166:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002168:	2309      	movs	r3, #9
 800216a:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800216c:	a905      	add	r1, sp, #20
 800216e:	4812      	ldr	r0, [pc, #72]	@ (80021b8 <HAL_FDCAN_MspInit+0x114>)
 8002170:	f003 ff32 	bl	8005fd8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 5, 0);
 8002174:	2200      	movs	r2, #0
 8002176:	2105      	movs	r1, #5
 8002178:	2014      	movs	r0, #20
 800217a:	f001 fdb9 	bl	8003cf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 800217e:	2014      	movs	r0, #20
 8002180:	f001 fdc6 	bl	8003d10 <HAL_NVIC_EnableIRQ>
}
 8002184:	e79d      	b.n	80020c2 <HAL_FDCAN_MspInit+0x1e>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002186:	4b0a      	ldr	r3, [pc, #40]	@ (80021b0 <HAL_FDCAN_MspInit+0x10c>)
 8002188:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 800218c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002190:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
 8002194:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800219c:	9303      	str	r3, [sp, #12]
 800219e:	9b03      	ldr	r3, [sp, #12]
 80021a0:	e7cf      	b.n	8002142 <HAL_FDCAN_MspInit+0x9e>
 80021a2:	bf00      	nop
 80021a4:	4000a000 	.word	0x4000a000
 80021a8:	4000a400 	.word	0x4000a400
 80021ac:	24001f34 	.word	0x24001f34
 80021b0:	58024400 	.word	0x58024400
 80021b4:	58020000 	.word	0x58020000
 80021b8:	58020400 	.word	0x58020400

080021bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021bc:	b570      	push	{r4, r5, r6, lr}
 80021be:	b0b8      	sub	sp, #224	@ 0xe0
 80021c0:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c2:	2100      	movs	r1, #0
 80021c4:	9133      	str	r1, [sp, #204]	@ 0xcc
 80021c6:	9134      	str	r1, [sp, #208]	@ 0xd0
 80021c8:	9135      	str	r1, [sp, #212]	@ 0xd4
 80021ca:	9136      	str	r1, [sp, #216]	@ 0xd8
 80021cc:	9137      	str	r1, [sp, #220]	@ 0xdc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021ce:	22bc      	movs	r2, #188	@ 0xbc
 80021d0:	a804      	add	r0, sp, #16
 80021d2:	f014 fb45 	bl	8016860 <memset>
  if(hi2c->Instance==I2C1)
 80021d6:	6823      	ldr	r3, [r4, #0]
 80021d8:	4a52      	ldr	r2, [pc, #328]	@ (8002324 <HAL_I2C_MspInit+0x168>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d004      	beq.n	80021e8 <HAL_I2C_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C4)
 80021de:	4a52      	ldr	r2, [pc, #328]	@ (8002328 <HAL_I2C_MspInit+0x16c>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d06c      	beq.n	80022be <HAL_I2C_MspInit+0x102>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80021e4:	b038      	add	sp, #224	@ 0xe0
 80021e6:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80021e8:	2308      	movs	r3, #8
 80021ea:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021ec:	a804      	add	r0, sp, #16
 80021ee:	f005 fafd 	bl	80077ec <HAL_RCCEx_PeriphCLKConfig>
 80021f2:	2800      	cmp	r0, #0
 80021f4:	d15a      	bne.n	80022ac <HAL_I2C_MspInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f6:	4e4d      	ldr	r6, [pc, #308]	@ (800232c <HAL_I2C_MspInit+0x170>)
 80021f8:	f8d6 30e0 	ldr.w	r3, [r6, #224]	@ 0xe0
 80021fc:	f043 0302 	orr.w	r3, r3, #2
 8002200:	f8c6 30e0 	str.w	r3, [r6, #224]	@ 0xe0
 8002204:	f8d6 30e0 	ldr.w	r3, [r6, #224]	@ 0xe0
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002210:	23c0      	movs	r3, #192	@ 0xc0
 8002212:	9333      	str	r3, [sp, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002214:	2312      	movs	r3, #18
 8002216:	9334      	str	r3, [sp, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002218:	2500      	movs	r5, #0
 800221a:	9535      	str	r5, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221c:	9536      	str	r5, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800221e:	2304      	movs	r3, #4
 8002220:	9337      	str	r3, [sp, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002222:	a933      	add	r1, sp, #204	@ 0xcc
 8002224:	4842      	ldr	r0, [pc, #264]	@ (8002330 <HAL_I2C_MspInit+0x174>)
 8002226:	f003 fed7 	bl	8005fd8 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800222a:	f8d6 30e8 	ldr.w	r3, [r6, #232]	@ 0xe8
 800222e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002232:	f8c6 30e8 	str.w	r3, [r6, #232]	@ 0xe8
 8002236:	f8d6 30e8 	ldr.w	r3, [r6, #232]	@ 0xe8
 800223a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800223e:	9301      	str	r3, [sp, #4]
 8002240:	9b01      	ldr	r3, [sp, #4]
    hdma_i2c1_tx.Instance = DMA2_Stream0;
 8002242:	483c      	ldr	r0, [pc, #240]	@ (8002334 <HAL_I2C_MspInit+0x178>)
 8002244:	4b3c      	ldr	r3, [pc, #240]	@ (8002338 <HAL_I2C_MspInit+0x17c>)
 8002246:	6003      	str	r3, [r0, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8002248:	2322      	movs	r3, #34	@ 0x22
 800224a:	6043      	str	r3, [r0, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800224c:	2340      	movs	r3, #64	@ 0x40
 800224e:	6083      	str	r3, [r0, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002250:	60c5      	str	r5, [r0, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002252:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002256:	6103      	str	r3, [r0, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002258:	6145      	str	r5, [r0, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800225a:	6185      	str	r5, [r0, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800225c:	61c5      	str	r5, [r0, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800225e:	6205      	str	r5, [r0, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002260:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002262:	f001 ff6b 	bl	800413c <HAL_DMA_Init>
 8002266:	bb20      	cbnz	r0, 80022b2 <HAL_I2C_MspInit+0xf6>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8002268:	4b32      	ldr	r3, [pc, #200]	@ (8002334 <HAL_I2C_MspInit+0x178>)
 800226a:	63a3      	str	r3, [r4, #56]	@ 0x38
 800226c:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_i2c1_rx.Instance = DMA2_Stream1;
 800226e:	4833      	ldr	r0, [pc, #204]	@ (800233c <HAL_I2C_MspInit+0x180>)
 8002270:	4b33      	ldr	r3, [pc, #204]	@ (8002340 <HAL_I2C_MspInit+0x184>)
 8002272:	6003      	str	r3, [r0, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8002274:	2321      	movs	r3, #33	@ 0x21
 8002276:	6043      	str	r3, [r0, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002278:	2300      	movs	r3, #0
 800227a:	6083      	str	r3, [r0, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800227c:	60c3      	str	r3, [r0, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800227e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002282:	6102      	str	r2, [r0, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002284:	6143      	str	r3, [r0, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002286:	6183      	str	r3, [r0, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002288:	61c3      	str	r3, [r0, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800228a:	6203      	str	r3, [r0, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800228c:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800228e:	f001 ff55 	bl	800413c <HAL_DMA_Init>
 8002292:	b988      	cbnz	r0, 80022b8 <HAL_I2C_MspInit+0xfc>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8002294:	4b29      	ldr	r3, [pc, #164]	@ (800233c <HAL_I2C_MspInit+0x180>)
 8002296:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8002298:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800229a:	2200      	movs	r2, #0
 800229c:	2105      	movs	r1, #5
 800229e:	201f      	movs	r0, #31
 80022a0:	f001 fd26 	bl	8003cf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80022a4:	201f      	movs	r0, #31
 80022a6:	f001 fd33 	bl	8003d10 <HAL_NVIC_EnableIRQ>
 80022aa:	e79b      	b.n	80021e4 <HAL_I2C_MspInit+0x28>
      Error_Handler();
 80022ac:	f7fe faf4 	bl	8000898 <Error_Handler>
 80022b0:	e7a1      	b.n	80021f6 <HAL_I2C_MspInit+0x3a>
      Error_Handler();
 80022b2:	f7fe faf1 	bl	8000898 <Error_Handler>
 80022b6:	e7d7      	b.n	8002268 <HAL_I2C_MspInit+0xac>
      Error_Handler();
 80022b8:	f7fe faee 	bl	8000898 <Error_Handler>
 80022bc:	e7ea      	b.n	8002294 <HAL_I2C_MspInit+0xd8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80022be:	2310      	movs	r3, #16
 80022c0:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022c2:	eb0d 0003 	add.w	r0, sp, r3
 80022c6:	f005 fa91 	bl	80077ec <HAL_RCCEx_PeriphCLKConfig>
 80022ca:	bb38      	cbnz	r0, 800231c <HAL_I2C_MspInit+0x160>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022cc:	4c17      	ldr	r4, [pc, #92]	@ (800232c <HAL_I2C_MspInit+0x170>)
 80022ce:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80022d2:	f043 0302 	orr.w	r3, r3, #2
 80022d6:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80022da:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	9302      	str	r3, [sp, #8]
 80022e4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80022e6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80022ea:	9333      	str	r3, [sp, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022ec:	2312      	movs	r3, #18
 80022ee:	9334      	str	r3, [sp, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f0:	2300      	movs	r3, #0
 80022f2:	9335      	str	r3, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f4:	9336      	str	r3, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 80022f6:	2306      	movs	r3, #6
 80022f8:	9337      	str	r3, [sp, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022fa:	a933      	add	r1, sp, #204	@ 0xcc
 80022fc:	480c      	ldr	r0, [pc, #48]	@ (8002330 <HAL_I2C_MspInit+0x174>)
 80022fe:	f003 fe6b 	bl	8005fd8 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8002302:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
 8002306:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800230a:	f8c4 30f4 	str.w	r3, [r4, #244]	@ 0xf4
 800230e:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
 8002312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002316:	9303      	str	r3, [sp, #12]
 8002318:	9b03      	ldr	r3, [sp, #12]
}
 800231a:	e763      	b.n	80021e4 <HAL_I2C_MspInit+0x28>
      Error_Handler();
 800231c:	f7fe fabc 	bl	8000898 <Error_Handler>
 8002320:	e7d4      	b.n	80022cc <HAL_I2C_MspInit+0x110>
 8002322:	bf00      	nop
 8002324:	40005400 	.word	0x40005400
 8002328:	58001c00 	.word	0x58001c00
 800232c:	58024400 	.word	0x58024400
 8002330:	58020400 	.word	0x58020400
 8002334:	24001c1c 	.word	0x24001c1c
 8002338:	40020410 	.word	0x40020410
 800233c:	24001ba4 	.word	0x24001ba4
 8002340:	40020428 	.word	0x40020428

08002344 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002344:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002348:	b0b9      	sub	sp, #228	@ 0xe4
 800234a:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800234c:	2100      	movs	r1, #0
 800234e:	9133      	str	r1, [sp, #204]	@ 0xcc
 8002350:	9134      	str	r1, [sp, #208]	@ 0xd0
 8002352:	9135      	str	r1, [sp, #212]	@ 0xd4
 8002354:	9136      	str	r1, [sp, #216]	@ 0xd8
 8002356:	9137      	str	r1, [sp, #220]	@ 0xdc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002358:	22bc      	movs	r2, #188	@ 0xbc
 800235a:	a804      	add	r0, sp, #16
 800235c:	f014 fa80 	bl	8016860 <memset>
  if(hsd->Instance==SDMMC1)
 8002360:	6822      	ldr	r2, [r4, #0]
 8002362:	4b34      	ldr	r3, [pc, #208]	@ (8002434 <HAL_SD_MspInit+0xf0>)
 8002364:	429a      	cmp	r2, r3
 8002366:	d002      	beq.n	800236e <HAL_SD_MspInit+0x2a>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002368:	b039      	add	sp, #228	@ 0xe4
 800236a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 800236e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002372:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002374:	a804      	add	r0, sp, #16
 8002376:	f005 fa39 	bl	80077ec <HAL_RCCEx_PeriphCLKConfig>
 800237a:	2800      	cmp	r0, #0
 800237c:	d157      	bne.n	800242e <HAL_SD_MspInit+0xea>
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800237e:	4b2e      	ldr	r3, [pc, #184]	@ (8002438 <HAL_SD_MspInit+0xf4>)
 8002380:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8002384:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002388:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800238c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8002390:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 8002394:	9201      	str	r2, [sp, #4]
 8002396:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002398:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800239c:	f042 0204 	orr.w	r2, r2, #4
 80023a0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80023a4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80023a8:	f002 0204 	and.w	r2, r2, #4
 80023ac:	9202      	str	r2, [sp, #8]
 80023ae:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023b0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80023b4:	f042 0208 	orr.w	r2, r2, #8
 80023b8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80023bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023c0:	f003 0308 	and.w	r3, r3, #8
 80023c4:	9303      	str	r3, [sp, #12]
 80023c6:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80023c8:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80023cc:	9333      	str	r3, [sp, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ce:	2602      	movs	r6, #2
 80023d0:	9634      	str	r6, [sp, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023d2:	f04f 0801 	mov.w	r8, #1
 80023d6:	f8cd 80d4 	str.w	r8, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023da:	2503      	movs	r5, #3
 80023dc:	9536      	str	r5, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80023de:	240c      	movs	r4, #12
 80023e0:	9437      	str	r4, [sp, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023e2:	f8df 905c 	ldr.w	r9, [pc, #92]	@ 8002440 <HAL_SD_MspInit+0xfc>
 80023e6:	a933      	add	r1, sp, #204	@ 0xcc
 80023e8:	4648      	mov	r0, r9
 80023ea:	f003 fdf5 	bl	8005fd8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80023ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023f2:	9333      	str	r3, [sp, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f4:	9634      	str	r6, [sp, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f6:	2700      	movs	r7, #0
 80023f8:	9735      	str	r7, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023fa:	9536      	str	r5, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80023fc:	9437      	str	r4, [sp, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023fe:	a933      	add	r1, sp, #204	@ 0xcc
 8002400:	4648      	mov	r0, r9
 8002402:	f003 fde9 	bl	8005fd8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002406:	2304      	movs	r3, #4
 8002408:	9333      	str	r3, [sp, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240a:	9634      	str	r6, [sp, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800240c:	f8cd 80d4 	str.w	r8, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002410:	9536      	str	r5, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002412:	9437      	str	r4, [sp, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002414:	a933      	add	r1, sp, #204	@ 0xcc
 8002416:	4809      	ldr	r0, [pc, #36]	@ (800243c <HAL_SD_MspInit+0xf8>)
 8002418:	f003 fdde 	bl	8005fd8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 800241c:	463a      	mov	r2, r7
 800241e:	2105      	movs	r1, #5
 8002420:	2031      	movs	r0, #49	@ 0x31
 8002422:	f001 fc65 	bl	8003cf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8002426:	2031      	movs	r0, #49	@ 0x31
 8002428:	f001 fc72 	bl	8003d10 <HAL_NVIC_EnableIRQ>
}
 800242c:	e79c      	b.n	8002368 <HAL_SD_MspInit+0x24>
      Error_Handler();
 800242e:	f7fe fa33 	bl	8000898 <Error_Handler>
 8002432:	e7a4      	b.n	800237e <HAL_SD_MspInit+0x3a>
 8002434:	52007000 	.word	0x52007000
 8002438:	58024400 	.word	0x58024400
 800243c:	58020c00 	.word	0x58020c00
 8002440:	58020800 	.word	0x58020800

08002444 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002444:	b500      	push	{lr}
 8002446:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM3)
 8002448:	6803      	ldr	r3, [r0, #0]
 800244a:	4a16      	ldr	r2, [pc, #88]	@ (80024a4 <HAL_TIM_Base_MspInit+0x60>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d005      	beq.n	800245c <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8002450:	4a15      	ldr	r2, [pc, #84]	@ (80024a8 <HAL_TIM_Base_MspInit+0x64>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d010      	beq.n	8002478 <HAL_TIM_Base_MspInit+0x34>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002456:	b003      	add	sp, #12
 8002458:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 800245c:	4b13      	ldr	r3, [pc, #76]	@ (80024ac <HAL_TIM_Base_MspInit+0x68>)
 800245e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002462:	f042 0202 	orr.w	r2, r2, #2
 8002466:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 800246a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	9b00      	ldr	r3, [sp, #0]
 8002476:	e7ee      	b.n	8002456 <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002478:	4b0c      	ldr	r3, [pc, #48]	@ (80024ac <HAL_TIM_Base_MspInit+0x68>)
 800247a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800247e:	f042 0204 	orr.w	r2, r2, #4
 8002482:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8002486:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800248a:	f003 0304 	and.w	r3, r3, #4
 800248e:	9301      	str	r3, [sp, #4]
 8002490:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002492:	2200      	movs	r2, #0
 8002494:	2105      	movs	r1, #5
 8002496:	201e      	movs	r0, #30
 8002498:	f001 fc2a 	bl	8003cf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800249c:	201e      	movs	r0, #30
 800249e:	f001 fc37 	bl	8003d10 <HAL_NVIC_EnableIRQ>
}
 80024a2:	e7d8      	b.n	8002456 <HAL_TIM_Base_MspInit+0x12>
 80024a4:	40000400 	.word	0x40000400
 80024a8:	40000800 	.word	0x40000800
 80024ac:	58024400 	.word	0x58024400

080024b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024b0:	b510      	push	{r4, lr}
 80024b2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b4:	2300      	movs	r3, #0
 80024b6:	9303      	str	r3, [sp, #12]
 80024b8:	9304      	str	r3, [sp, #16]
 80024ba:	9305      	str	r3, [sp, #20]
 80024bc:	9306      	str	r3, [sp, #24]
 80024be:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM3)
 80024c0:	6802      	ldr	r2, [r0, #0]
 80024c2:	4b19      	ldr	r3, [pc, #100]	@ (8002528 <HAL_TIM_MspPostInit+0x78>)
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d001      	beq.n	80024cc <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80024c8:	b008      	add	sp, #32
 80024ca:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024cc:	4b17      	ldr	r3, [pc, #92]	@ (800252c <HAL_TIM_MspPostInit+0x7c>)
 80024ce:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80024d2:	f042 0201 	orr.w	r2, r2, #1
 80024d6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80024da:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80024de:	f002 0201 	and.w	r2, r2, #1
 80024e2:	9201      	str	r2, [sp, #4]
 80024e4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024e6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80024ea:	f042 0202 	orr.w	r2, r2, #2
 80024ee:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80024f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	9302      	str	r3, [sp, #8]
 80024fc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin;
 80024fe:	23c0      	movs	r3, #192	@ 0xc0
 8002500:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002502:	2402      	movs	r4, #2
 8002504:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002506:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002508:	a903      	add	r1, sp, #12
 800250a:	4809      	ldr	r0, [pc, #36]	@ (8002530 <HAL_TIM_MspPostInit+0x80>)
 800250c:	f003 fd64 	bl	8005fd8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LED_B_Pin;
 8002510:	2301      	movs	r3, #1
 8002512:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002514:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002516:	2300      	movs	r3, #0
 8002518:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800251c:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 800251e:	a903      	add	r1, sp, #12
 8002520:	4804      	ldr	r0, [pc, #16]	@ (8002534 <HAL_TIM_MspPostInit+0x84>)
 8002522:	f003 fd59 	bl	8005fd8 <HAL_GPIO_Init>
}
 8002526:	e7cf      	b.n	80024c8 <HAL_TIM_MspPostInit+0x18>
 8002528:	40000400 	.word	0x40000400
 800252c:	58024400 	.word	0x58024400
 8002530:	58020000 	.word	0x58020000
 8002534:	58020400 	.word	0x58020400

08002538 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800253a:	b0c5      	sub	sp, #276	@ 0x114
 800253c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800253e:	2100      	movs	r1, #0
 8002540:	913f      	str	r1, [sp, #252]	@ 0xfc
 8002542:	9140      	str	r1, [sp, #256]	@ 0x100
 8002544:	9141      	str	r1, [sp, #260]	@ 0x104
 8002546:	9142      	str	r1, [sp, #264]	@ 0x108
 8002548:	9143      	str	r1, [sp, #268]	@ 0x10c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800254a:	22bc      	movs	r2, #188	@ 0xbc
 800254c:	a810      	add	r0, sp, #64	@ 0x40
 800254e:	f014 f987 	bl	8016860 <memset>
  if(huart->Instance==UART4)
 8002552:	6823      	ldr	r3, [r4, #0]
 8002554:	4a7b      	ldr	r2, [pc, #492]	@ (8002744 <HAL_UART_MspInit+0x20c>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d019      	beq.n	800258e <HAL_UART_MspInit+0x56>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(huart->Instance==UART7)
 800255a:	4a7b      	ldr	r2, [pc, #492]	@ (8002748 <HAL_UART_MspInit+0x210>)
 800255c:	4293      	cmp	r3, r2
 800255e:	f000 8082 	beq.w	8002666 <HAL_UART_MspInit+0x12e>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
  else if(huart->Instance==UART8)
 8002562:	4a7a      	ldr	r2, [pc, #488]	@ (800274c <HAL_UART_MspInit+0x214>)
 8002564:	4293      	cmp	r3, r2
 8002566:	f000 8111 	beq.w	800278c <HAL_UART_MspInit+0x254>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
  else if(huart->Instance==USART1)
 800256a:	4a79      	ldr	r2, [pc, #484]	@ (8002750 <HAL_UART_MspInit+0x218>)
 800256c:	4293      	cmp	r3, r2
 800256e:	f000 817a 	beq.w	8002866 <HAL_UART_MspInit+0x32e>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8002572:	4a78      	ldr	r2, [pc, #480]	@ (8002754 <HAL_UART_MspInit+0x21c>)
 8002574:	4293      	cmp	r3, r2
 8002576:	f000 81e4 	beq.w	8002942 <HAL_UART_MspInit+0x40a>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 800257a:	4a77      	ldr	r2, [pc, #476]	@ (8002758 <HAL_UART_MspInit+0x220>)
 800257c:	4293      	cmp	r3, r2
 800257e:	f000 826b 	beq.w	8002a58 <HAL_UART_MspInit+0x520>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 8002582:	4a76      	ldr	r2, [pc, #472]	@ (800275c <HAL_UART_MspInit+0x224>)
 8002584:	4293      	cmp	r3, r2
 8002586:	f000 82ec 	beq.w	8002b62 <HAL_UART_MspInit+0x62a>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800258a:	b045      	add	sp, #276	@ 0x114
 800258c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800258e:	2302      	movs	r3, #2
 8002590:	9310      	str	r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002592:	a810      	add	r0, sp, #64	@ 0x40
 8002594:	f005 f92a 	bl	80077ec <HAL_RCCEx_PeriphCLKConfig>
 8002598:	2800      	cmp	r0, #0
 800259a:	d15b      	bne.n	8002654 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_UART4_CLK_ENABLE();
 800259c:	4b70      	ldr	r3, [pc, #448]	@ (8002760 <HAL_UART_MspInit+0x228>)
 800259e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80025a2:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80025a6:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 80025aa:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80025ae:	f402 2200 	and.w	r2, r2, #524288	@ 0x80000
 80025b2:	9201      	str	r2, [sp, #4]
 80025b4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025b6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80025ba:	f042 0208 	orr.w	r2, r2, #8
 80025be:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80025c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	9302      	str	r3, [sp, #8]
 80025cc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = RX4_GNSS_Pin|TX4_GNSS_Pin;
 80025ce:	2303      	movs	r3, #3
 80025d0:	933f      	str	r3, [sp, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d2:	2302      	movs	r3, #2
 80025d4:	9340      	str	r3, [sp, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d6:	2500      	movs	r5, #0
 80025d8:	9541      	str	r5, [sp, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025da:	9542      	str	r5, [sp, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80025dc:	2308      	movs	r3, #8
 80025de:	9343      	str	r3, [sp, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025e0:	a93f      	add	r1, sp, #252	@ 0xfc
 80025e2:	4860      	ldr	r0, [pc, #384]	@ (8002764 <HAL_UART_MspInit+0x22c>)
 80025e4:	f003 fcf8 	bl	8005fd8 <HAL_GPIO_Init>
    hdma_uart4_tx.Instance = DMA2_Stream2;
 80025e8:	485f      	ldr	r0, [pc, #380]	@ (8002768 <HAL_UART_MspInit+0x230>)
 80025ea:	4b60      	ldr	r3, [pc, #384]	@ (800276c <HAL_UART_MspInit+0x234>)
 80025ec:	6003      	str	r3, [r0, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 80025ee:	2340      	movs	r3, #64	@ 0x40
 80025f0:	6043      	str	r3, [r0, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025f2:	6083      	str	r3, [r0, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025f4:	60c5      	str	r5, [r0, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025fa:	6103      	str	r3, [r0, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025fc:	6145      	str	r5, [r0, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025fe:	6185      	str	r5, [r0, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8002600:	61c5      	str	r5, [r0, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002602:	6205      	str	r5, [r0, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002604:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8002606:	f001 fd99 	bl	800413c <HAL_DMA_Init>
 800260a:	bb30      	cbnz	r0, 800265a <HAL_UART_MspInit+0x122>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 800260c:	4b56      	ldr	r3, [pc, #344]	@ (8002768 <HAL_UART_MspInit+0x230>)
 800260e:	67a3      	str	r3, [r4, #120]	@ 0x78
 8002610:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_uart4_rx.Instance = DMA2_Stream3;
 8002612:	4857      	ldr	r0, [pc, #348]	@ (8002770 <HAL_UART_MspInit+0x238>)
 8002614:	4b57      	ldr	r3, [pc, #348]	@ (8002774 <HAL_UART_MspInit+0x23c>)
 8002616:	6003      	str	r3, [r0, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8002618:	233f      	movs	r3, #63	@ 0x3f
 800261a:	6043      	str	r3, [r0, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800261c:	2300      	movs	r3, #0
 800261e:	6083      	str	r3, [r0, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002620:	60c3      	str	r3, [r0, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002622:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002626:	6102      	str	r2, [r0, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002628:	6143      	str	r3, [r0, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800262a:	6183      	str	r3, [r0, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 800262c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002630:	61c2      	str	r2, [r0, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002632:	6203      	str	r3, [r0, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002634:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002636:	f001 fd81 	bl	800413c <HAL_DMA_Init>
 800263a:	b988      	cbnz	r0, 8002660 <HAL_UART_MspInit+0x128>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800263c:	4b4c      	ldr	r3, [pc, #304]	@ (8002770 <HAL_UART_MspInit+0x238>)
 800263e:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8002640:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8002642:	2200      	movs	r2, #0
 8002644:	2105      	movs	r1, #5
 8002646:	2034      	movs	r0, #52	@ 0x34
 8002648:	f001 fb52 	bl	8003cf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800264c:	2034      	movs	r0, #52	@ 0x34
 800264e:	f001 fb5f 	bl	8003d10 <HAL_NVIC_EnableIRQ>
 8002652:	e79a      	b.n	800258a <HAL_UART_MspInit+0x52>
      Error_Handler();
 8002654:	f7fe f920 	bl	8000898 <Error_Handler>
 8002658:	e7a0      	b.n	800259c <HAL_UART_MspInit+0x64>
      Error_Handler();
 800265a:	f7fe f91d 	bl	8000898 <Error_Handler>
 800265e:	e7d5      	b.n	800260c <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8002660:	f7fe f91a 	bl	8000898 <Error_Handler>
 8002664:	e7ea      	b.n	800263c <HAL_UART_MspInit+0x104>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8002666:	2302      	movs	r3, #2
 8002668:	9310      	str	r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800266a:	a810      	add	r0, sp, #64	@ 0x40
 800266c:	f005 f8be 	bl	80077ec <HAL_RCCEx_PeriphCLKConfig>
 8002670:	2800      	cmp	r0, #0
 8002672:	d15d      	bne.n	8002730 <HAL_UART_MspInit+0x1f8>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002674:	4b3a      	ldr	r3, [pc, #232]	@ (8002760 <HAL_UART_MspInit+0x228>)
 8002676:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800267a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800267e:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8002682:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002686:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800268a:	9203      	str	r2, [sp, #12]
 800268c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800268e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002692:	f042 0210 	orr.w	r2, r2, #16
 8002696:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800269a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800269e:	f003 0310 	and.w	r3, r3, #16
 80026a2:	9304      	str	r3, [sp, #16]
 80026a4:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = RX7_4G_Pin|TX7_4G_Pin|RTS7_4G_Pin|CTS7_4G_Pin;
 80026a6:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 80026aa:	933f      	str	r3, [sp, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ac:	2302      	movs	r3, #2
 80026ae:	9340      	str	r3, [sp, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b0:	2500      	movs	r5, #0
 80026b2:	9541      	str	r5, [sp, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b4:	9542      	str	r5, [sp, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80026b6:	2307      	movs	r3, #7
 80026b8:	9343      	str	r3, [sp, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026ba:	a93f      	add	r1, sp, #252	@ 0xfc
 80026bc:	482e      	ldr	r0, [pc, #184]	@ (8002778 <HAL_UART_MspInit+0x240>)
 80026be:	f003 fc8b 	bl	8005fd8 <HAL_GPIO_Init>
    hdma_uart7_tx.Instance = DMA2_Stream4;
 80026c2:	482e      	ldr	r0, [pc, #184]	@ (800277c <HAL_UART_MspInit+0x244>)
 80026c4:	4b2e      	ldr	r3, [pc, #184]	@ (8002780 <HAL_UART_MspInit+0x248>)
 80026c6:	6003      	str	r3, [r0, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 80026c8:	2350      	movs	r3, #80	@ 0x50
 80026ca:	6043      	str	r3, [r0, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026cc:	2340      	movs	r3, #64	@ 0x40
 80026ce:	6083      	str	r3, [r0, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026d0:	60c5      	str	r5, [r0, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80026d6:	6103      	str	r3, [r0, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026d8:	6145      	str	r5, [r0, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026da:	6185      	str	r5, [r0, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 80026dc:	61c5      	str	r5, [r0, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 80026de:	6205      	str	r5, [r0, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026e0:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 80026e2:	f001 fd2b 	bl	800413c <HAL_DMA_Init>
 80026e6:	bb30      	cbnz	r0, 8002736 <HAL_UART_MspInit+0x1fe>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart7_tx);
 80026e8:	4b24      	ldr	r3, [pc, #144]	@ (800277c <HAL_UART_MspInit+0x244>)
 80026ea:	67a3      	str	r3, [r4, #120]	@ 0x78
 80026ec:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_uart7_rx.Instance = DMA2_Stream5;
 80026ee:	4825      	ldr	r0, [pc, #148]	@ (8002784 <HAL_UART_MspInit+0x24c>)
 80026f0:	4b25      	ldr	r3, [pc, #148]	@ (8002788 <HAL_UART_MspInit+0x250>)
 80026f2:	6003      	str	r3, [r0, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 80026f4:	234f      	movs	r3, #79	@ 0x4f
 80026f6:	6043      	str	r3, [r0, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026f8:	2300      	movs	r3, #0
 80026fa:	6083      	str	r3, [r0, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026fc:	60c3      	str	r3, [r0, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002702:	6102      	str	r2, [r0, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002704:	6143      	str	r3, [r0, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002706:	6183      	str	r3, [r0, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 8002708:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800270c:	61c2      	str	r2, [r0, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 800270e:	6203      	str	r3, [r0, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002710:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8002712:	f001 fd13 	bl	800413c <HAL_DMA_Init>
 8002716:	b988      	cbnz	r0, 800273c <HAL_UART_MspInit+0x204>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 8002718:	4b1a      	ldr	r3, [pc, #104]	@ (8002784 <HAL_UART_MspInit+0x24c>)
 800271a:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800271c:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 800271e:	2200      	movs	r2, #0
 8002720:	2105      	movs	r1, #5
 8002722:	2052      	movs	r0, #82	@ 0x52
 8002724:	f001 fae4 	bl	8003cf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8002728:	2052      	movs	r0, #82	@ 0x52
 800272a:	f001 faf1 	bl	8003d10 <HAL_NVIC_EnableIRQ>
 800272e:	e72c      	b.n	800258a <HAL_UART_MspInit+0x52>
      Error_Handler();
 8002730:	f7fe f8b2 	bl	8000898 <Error_Handler>
 8002734:	e79e      	b.n	8002674 <HAL_UART_MspInit+0x13c>
      Error_Handler();
 8002736:	f7fe f8af 	bl	8000898 <Error_Handler>
 800273a:	e7d5      	b.n	80026e8 <HAL_UART_MspInit+0x1b0>
      Error_Handler();
 800273c:	f7fe f8ac 	bl	8000898 <Error_Handler>
 8002740:	e7ea      	b.n	8002718 <HAL_UART_MspInit+0x1e0>
 8002742:	bf00      	nop
 8002744:	40004c00 	.word	0x40004c00
 8002748:	40007800 	.word	0x40007800
 800274c:	40007c00 	.word	0x40007c00
 8002750:	40011000 	.word	0x40011000
 8002754:	40004400 	.word	0x40004400
 8002758:	40004800 	.word	0x40004800
 800275c:	40011400 	.word	0x40011400
 8002760:	58024400 	.word	0x58024400
 8002764:	58020c00 	.word	0x58020c00
 8002768:	24001628 	.word	0x24001628
 800276c:	40020440 	.word	0x40020440
 8002770:	240015b0 	.word	0x240015b0
 8002774:	40020458 	.word	0x40020458
 8002778:	58021000 	.word	0x58021000
 800277c:	24001538 	.word	0x24001538
 8002780:	40020470 	.word	0x40020470
 8002784:	240014c0 	.word	0x240014c0
 8002788:	40020488 	.word	0x40020488
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 800278c:	2302      	movs	r3, #2
 800278e:	9310      	str	r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002790:	a810      	add	r0, sp, #64	@ 0x40
 8002792:	f005 f82b 	bl	80077ec <HAL_RCCEx_PeriphCLKConfig>
 8002796:	2800      	cmp	r0, #0
 8002798:	d15c      	bne.n	8002854 <HAL_UART_MspInit+0x31c>
    __HAL_RCC_UART8_CLK_ENABLE();
 800279a:	4ba0      	ldr	r3, [pc, #640]	@ (8002a1c <HAL_UART_MspInit+0x4e4>)
 800279c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80027a0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80027a4:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 80027a8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80027ac:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80027b0:	9205      	str	r2, [sp, #20]
 80027b2:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80027b4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80027b8:	f042 0210 	orr.w	r2, r2, #16
 80027bc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80027c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027c4:	f003 0310 	and.w	r3, r3, #16
 80027c8:	9306      	str	r3, [sp, #24]
 80027ca:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = RX8_EXT_Pin|TX8_EXT_Pin;
 80027cc:	2303      	movs	r3, #3
 80027ce:	933f      	str	r3, [sp, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d0:	2302      	movs	r3, #2
 80027d2:	9340      	str	r3, [sp, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d4:	2500      	movs	r5, #0
 80027d6:	9541      	str	r5, [sp, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d8:	9542      	str	r5, [sp, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80027da:	2308      	movs	r3, #8
 80027dc:	9343      	str	r3, [sp, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027de:	a93f      	add	r1, sp, #252	@ 0xfc
 80027e0:	488f      	ldr	r0, [pc, #572]	@ (8002a20 <HAL_UART_MspInit+0x4e8>)
 80027e2:	f003 fbf9 	bl	8005fd8 <HAL_GPIO_Init>
    hdma_uart8_tx.Instance = DMA2_Stream6;
 80027e6:	488f      	ldr	r0, [pc, #572]	@ (8002a24 <HAL_UART_MspInit+0x4ec>)
 80027e8:	4b8f      	ldr	r3, [pc, #572]	@ (8002a28 <HAL_UART_MspInit+0x4f0>)
 80027ea:	6003      	str	r3, [r0, #0]
    hdma_uart8_tx.Init.Request = DMA_REQUEST_UART8_TX;
 80027ec:	2352      	movs	r3, #82	@ 0x52
 80027ee:	6043      	str	r3, [r0, #4]
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027f0:	2340      	movs	r3, #64	@ 0x40
 80027f2:	6083      	str	r3, [r0, #8]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027f4:	60c5      	str	r5, [r0, #12]
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 80027f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027fa:	6103      	str	r3, [r0, #16]
    hdma_uart8_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027fc:	6145      	str	r5, [r0, #20]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027fe:	6185      	str	r5, [r0, #24]
    hdma_uart8_tx.Init.Mode = DMA_NORMAL;
 8002800:	61c5      	str	r5, [r0, #28]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002802:	6205      	str	r5, [r0, #32]
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002804:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 8002806:	f001 fc99 	bl	800413c <HAL_DMA_Init>
 800280a:	bb30      	cbnz	r0, 800285a <HAL_UART_MspInit+0x322>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart8_tx);
 800280c:	4b85      	ldr	r3, [pc, #532]	@ (8002a24 <HAL_UART_MspInit+0x4ec>)
 800280e:	67a3      	str	r3, [r4, #120]	@ 0x78
 8002810:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_uart8_rx.Instance = DMA2_Stream7;
 8002812:	4886      	ldr	r0, [pc, #536]	@ (8002a2c <HAL_UART_MspInit+0x4f4>)
 8002814:	4b86      	ldr	r3, [pc, #536]	@ (8002a30 <HAL_UART_MspInit+0x4f8>)
 8002816:	6003      	str	r3, [r0, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 8002818:	2351      	movs	r3, #81	@ 0x51
 800281a:	6043      	str	r3, [r0, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800281c:	2300      	movs	r3, #0
 800281e:	6083      	str	r3, [r0, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002820:	60c3      	str	r3, [r0, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002822:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002826:	6102      	str	r2, [r0, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002828:	6143      	str	r3, [r0, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800282a:	6183      	str	r3, [r0, #24]
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 800282c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002830:	61c2      	str	r2, [r0, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002832:	6203      	str	r3, [r0, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002834:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8002836:	f001 fc81 	bl	800413c <HAL_DMA_Init>
 800283a:	b988      	cbnz	r0, 8002860 <HAL_UART_MspInit+0x328>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 800283c:	4b7b      	ldr	r3, [pc, #492]	@ (8002a2c <HAL_UART_MspInit+0x4f4>)
 800283e:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8002840:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 8002842:	2200      	movs	r2, #0
 8002844:	2105      	movs	r1, #5
 8002846:	2053      	movs	r0, #83	@ 0x53
 8002848:	f001 fa52 	bl	8003cf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 800284c:	2053      	movs	r0, #83	@ 0x53
 800284e:	f001 fa5f 	bl	8003d10 <HAL_NVIC_EnableIRQ>
 8002852:	e69a      	b.n	800258a <HAL_UART_MspInit+0x52>
      Error_Handler();
 8002854:	f7fe f820 	bl	8000898 <Error_Handler>
 8002858:	e79f      	b.n	800279a <HAL_UART_MspInit+0x262>
      Error_Handler();
 800285a:	f7fe f81d 	bl	8000898 <Error_Handler>
 800285e:	e7d5      	b.n	800280c <HAL_UART_MspInit+0x2d4>
      Error_Handler();
 8002860:	f7fe f81a 	bl	8000898 <Error_Handler>
 8002864:	e7ea      	b.n	800283c <HAL_UART_MspInit+0x304>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002866:	2301      	movs	r3, #1
 8002868:	9310      	str	r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800286a:	a810      	add	r0, sp, #64	@ 0x40
 800286c:	f004 ffbe 	bl	80077ec <HAL_RCCEx_PeriphCLKConfig>
 8002870:	2800      	cmp	r0, #0
 8002872:	d15d      	bne.n	8002930 <HAL_UART_MspInit+0x3f8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002874:	4b69      	ldr	r3, [pc, #420]	@ (8002a1c <HAL_UART_MspInit+0x4e4>)
 8002876:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800287a:	f042 0210 	orr.w	r2, r2, #16
 800287e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8002882:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8002886:	f002 0210 	and.w	r2, r2, #16
 800288a:	9207      	str	r2, [sp, #28]
 800288c:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800288e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002892:	f042 0201 	orr.w	r2, r2, #1
 8002896:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800289a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	9308      	str	r3, [sp, #32]
 80028a4:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Pin = TX1_FRONT_Pin|RX1_FRONT_Pin;
 80028a6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80028aa:	933f      	str	r3, [sp, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ac:	2302      	movs	r3, #2
 80028ae:	9340      	str	r3, [sp, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b0:	2500      	movs	r5, #0
 80028b2:	9541      	str	r5, [sp, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b4:	9542      	str	r5, [sp, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028b6:	2307      	movs	r3, #7
 80028b8:	9343      	str	r3, [sp, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ba:	a93f      	add	r1, sp, #252	@ 0xfc
 80028bc:	485d      	ldr	r0, [pc, #372]	@ (8002a34 <HAL_UART_MspInit+0x4fc>)
 80028be:	f003 fb8b 	bl	8005fd8 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Stream0;
 80028c2:	485d      	ldr	r0, [pc, #372]	@ (8002a38 <HAL_UART_MspInit+0x500>)
 80028c4:	4b5d      	ldr	r3, [pc, #372]	@ (8002a3c <HAL_UART_MspInit+0x504>)
 80028c6:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80028c8:	232a      	movs	r3, #42	@ 0x2a
 80028ca:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028cc:	2340      	movs	r3, #64	@ 0x40
 80028ce:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028d0:	60c5      	str	r5, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028d6:	6103      	str	r3, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028d8:	6145      	str	r5, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028da:	6185      	str	r5, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80028dc:	61c5      	str	r5, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80028de:	6205      	str	r5, [r0, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028e0:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80028e2:	f001 fc2b 	bl	800413c <HAL_DMA_Init>
 80028e6:	bb30      	cbnz	r0, 8002936 <HAL_UART_MspInit+0x3fe>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80028e8:	4b53      	ldr	r3, [pc, #332]	@ (8002a38 <HAL_UART_MspInit+0x500>)
 80028ea:	67a3      	str	r3, [r4, #120]	@ 0x78
 80028ec:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_usart1_rx.Instance = DMA1_Stream1;
 80028ee:	4854      	ldr	r0, [pc, #336]	@ (8002a40 <HAL_UART_MspInit+0x508>)
 80028f0:	4b54      	ldr	r3, [pc, #336]	@ (8002a44 <HAL_UART_MspInit+0x50c>)
 80028f2:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80028f4:	2329      	movs	r3, #41	@ 0x29
 80028f6:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028f8:	2300      	movs	r3, #0
 80028fa:	6083      	str	r3, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028fc:	60c3      	str	r3, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002902:	6102      	str	r2, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002904:	6143      	str	r3, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002906:	6183      	str	r3, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002908:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800290c:	61c2      	str	r2, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800290e:	6203      	str	r3, [r0, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002910:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002912:	f001 fc13 	bl	800413c <HAL_DMA_Init>
 8002916:	b988      	cbnz	r0, 800293c <HAL_UART_MspInit+0x404>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002918:	4b49      	ldr	r3, [pc, #292]	@ (8002a40 <HAL_UART_MspInit+0x508>)
 800291a:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800291c:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800291e:	2200      	movs	r2, #0
 8002920:	2105      	movs	r1, #5
 8002922:	2025      	movs	r0, #37	@ 0x25
 8002924:	f001 f9e4 	bl	8003cf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002928:	2025      	movs	r0, #37	@ 0x25
 800292a:	f001 f9f1 	bl	8003d10 <HAL_NVIC_EnableIRQ>
 800292e:	e62c      	b.n	800258a <HAL_UART_MspInit+0x52>
      Error_Handler();
 8002930:	f7fd ffb2 	bl	8000898 <Error_Handler>
 8002934:	e79e      	b.n	8002874 <HAL_UART_MspInit+0x33c>
      Error_Handler();
 8002936:	f7fd ffaf 	bl	8000898 <Error_Handler>
 800293a:	e7d5      	b.n	80028e8 <HAL_UART_MspInit+0x3b0>
      Error_Handler();
 800293c:	f7fd ffac 	bl	8000898 <Error_Handler>
 8002940:	e7ea      	b.n	8002918 <HAL_UART_MspInit+0x3e0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002942:	2302      	movs	r3, #2
 8002944:	9310      	str	r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002946:	a810      	add	r0, sp, #64	@ 0x40
 8002948:	f004 ff50 	bl	80077ec <HAL_RCCEx_PeriphCLKConfig>
 800294c:	2800      	cmp	r0, #0
 800294e:	d15c      	bne.n	8002a0a <HAL_UART_MspInit+0x4d2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002950:	4b32      	ldr	r3, [pc, #200]	@ (8002a1c <HAL_UART_MspInit+0x4e4>)
 8002952:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002956:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800295a:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 800295e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002962:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8002966:	9209      	str	r2, [sp, #36]	@ 0x24
 8002968:	9a09      	ldr	r2, [sp, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800296a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800296e:	f042 0201 	orr.w	r2, r2, #1
 8002972:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	930a      	str	r3, [sp, #40]	@ 0x28
 8002980:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pin = TX2_RADIO_Pin|RX2_RADIO_Pin;
 8002982:	230c      	movs	r3, #12
 8002984:	933f      	str	r3, [sp, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002986:	2302      	movs	r3, #2
 8002988:	9340      	str	r3, [sp, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298a:	2500      	movs	r5, #0
 800298c:	9541      	str	r5, [sp, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298e:	9542      	str	r5, [sp, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002990:	2307      	movs	r3, #7
 8002992:	9343      	str	r3, [sp, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002994:	a93f      	add	r1, sp, #252	@ 0xfc
 8002996:	4827      	ldr	r0, [pc, #156]	@ (8002a34 <HAL_UART_MspInit+0x4fc>)
 8002998:	f003 fb1e 	bl	8005fd8 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream2;
 800299c:	482a      	ldr	r0, [pc, #168]	@ (8002a48 <HAL_UART_MspInit+0x510>)
 800299e:	4b2b      	ldr	r3, [pc, #172]	@ (8002a4c <HAL_UART_MspInit+0x514>)
 80029a0:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80029a2:	232c      	movs	r3, #44	@ 0x2c
 80029a4:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029a6:	2340      	movs	r3, #64	@ 0x40
 80029a8:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029aa:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80029b0:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029b2:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029b4:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80029b6:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80029b8:	6205      	str	r5, [r0, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029ba:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80029bc:	f001 fbbe 	bl	800413c <HAL_DMA_Init>
 80029c0:	bb30      	cbnz	r0, 8002a10 <HAL_UART_MspInit+0x4d8>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80029c2:	4b21      	ldr	r3, [pc, #132]	@ (8002a48 <HAL_UART_MspInit+0x510>)
 80029c4:	67a3      	str	r3, [r4, #120]	@ 0x78
 80029c6:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_usart2_rx.Instance = DMA1_Stream3;
 80029c8:	4821      	ldr	r0, [pc, #132]	@ (8002a50 <HAL_UART_MspInit+0x518>)
 80029ca:	4b22      	ldr	r3, [pc, #136]	@ (8002a54 <HAL_UART_MspInit+0x51c>)
 80029cc:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80029ce:	232b      	movs	r3, #43	@ 0x2b
 80029d0:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029d2:	2300      	movs	r3, #0
 80029d4:	6083      	str	r3, [r0, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029d6:	60c3      	str	r3, [r0, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029dc:	6102      	str	r2, [r0, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029de:	6143      	str	r3, [r0, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029e0:	6183      	str	r3, [r0, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80029e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029e6:	61c2      	str	r2, [r0, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80029e8:	6203      	str	r3, [r0, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029ea:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80029ec:	f001 fba6 	bl	800413c <HAL_DMA_Init>
 80029f0:	b988      	cbnz	r0, 8002a16 <HAL_UART_MspInit+0x4de>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80029f2:	4b17      	ldr	r3, [pc, #92]	@ (8002a50 <HAL_UART_MspInit+0x518>)
 80029f4:	67e3      	str	r3, [r4, #124]	@ 0x7c
 80029f6:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80029f8:	2200      	movs	r2, #0
 80029fa:	2105      	movs	r1, #5
 80029fc:	2026      	movs	r0, #38	@ 0x26
 80029fe:	f001 f977 	bl	8003cf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a02:	2026      	movs	r0, #38	@ 0x26
 8002a04:	f001 f984 	bl	8003d10 <HAL_NVIC_EnableIRQ>
 8002a08:	e5bf      	b.n	800258a <HAL_UART_MspInit+0x52>
      Error_Handler();
 8002a0a:	f7fd ff45 	bl	8000898 <Error_Handler>
 8002a0e:	e79f      	b.n	8002950 <HAL_UART_MspInit+0x418>
      Error_Handler();
 8002a10:	f7fd ff42 	bl	8000898 <Error_Handler>
 8002a14:	e7d5      	b.n	80029c2 <HAL_UART_MspInit+0x48a>
      Error_Handler();
 8002a16:	f7fd ff3f 	bl	8000898 <Error_Handler>
 8002a1a:	e7ea      	b.n	80029f2 <HAL_UART_MspInit+0x4ba>
 8002a1c:	58024400 	.word	0x58024400
 8002a20:	58021000 	.word	0x58021000
 8002a24:	24001448 	.word	0x24001448
 8002a28:	400204a0 	.word	0x400204a0
 8002a2c:	240013d0 	.word	0x240013d0
 8002a30:	400204b8 	.word	0x400204b8
 8002a34:	58020000 	.word	0x58020000
 8002a38:	24001358 	.word	0x24001358
 8002a3c:	40020010 	.word	0x40020010
 8002a40:	240012e0 	.word	0x240012e0
 8002a44:	40020028 	.word	0x40020028
 8002a48:	24001268 	.word	0x24001268
 8002a4c:	40020040 	.word	0x40020040
 8002a50:	240011f0 	.word	0x240011f0
 8002a54:	40020058 	.word	0x40020058
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002a58:	2302      	movs	r3, #2
 8002a5a:	9310      	str	r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a5c:	a810      	add	r0, sp, #64	@ 0x40
 8002a5e:	f004 fec5 	bl	80077ec <HAL_RCCEx_PeriphCLKConfig>
 8002a62:	2800      	cmp	r0, #0
 8002a64:	d174      	bne.n	8002b50 <HAL_UART_MspInit+0x618>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a66:	4b75      	ldr	r3, [pc, #468]	@ (8002c3c <HAL_UART_MspInit+0x704>)
 8002a68:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002a6c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002a70:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8002a74:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002a78:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8002a7c:	920b      	str	r2, [sp, #44]	@ 0x2c
 8002a7e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a80:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002a84:	f042 0202 	orr.w	r2, r2, #2
 8002a88:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002a8c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002a90:	f002 0202 	and.w	r2, r2, #2
 8002a94:	920c      	str	r2, [sp, #48]	@ 0x30
 8002a96:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a98:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002a9c:	f042 0208 	orr.w	r2, r2, #8
 8002aa0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002aa8:	f003 0308 	and.w	r3, r3, #8
 8002aac:	930d      	str	r3, [sp, #52]	@ 0x34
 8002aae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
    GPIO_InitStruct.Pin = DE3_RS485_Pin;
 8002ab0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002ab4:	933f      	str	r3, [sp, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab6:	2702      	movs	r7, #2
 8002ab8:	9740      	str	r7, [sp, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aba:	2500      	movs	r5, #0
 8002abc:	9541      	str	r5, [sp, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002abe:	9542      	str	r5, [sp, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ac0:	2607      	movs	r6, #7
 8002ac2:	9643      	str	r6, [sp, #268]	@ 0x10c
    HAL_GPIO_Init(DE3_RS485_GPIO_Port, &GPIO_InitStruct);
 8002ac4:	a93f      	add	r1, sp, #252	@ 0xfc
 8002ac6:	485e      	ldr	r0, [pc, #376]	@ (8002c40 <HAL_UART_MspInit+0x708>)
 8002ac8:	f003 fa86 	bl	8005fd8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TX3_RS485_Pin|RX3_RS485_Pin;
 8002acc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002ad0:	933f      	str	r3, [sp, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad2:	9740      	str	r7, [sp, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad4:	9541      	str	r5, [sp, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad6:	9542      	str	r5, [sp, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ad8:	9643      	str	r6, [sp, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ada:	a93f      	add	r1, sp, #252	@ 0xfc
 8002adc:	4859      	ldr	r0, [pc, #356]	@ (8002c44 <HAL_UART_MspInit+0x70c>)
 8002ade:	f003 fa7b 	bl	8005fd8 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream4;
 8002ae2:	4859      	ldr	r0, [pc, #356]	@ (8002c48 <HAL_UART_MspInit+0x710>)
 8002ae4:	4b59      	ldr	r3, [pc, #356]	@ (8002c4c <HAL_UART_MspInit+0x714>)
 8002ae6:	6003      	str	r3, [r0, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002ae8:	232e      	movs	r3, #46	@ 0x2e
 8002aea:	6043      	str	r3, [r0, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002aec:	2340      	movs	r3, #64	@ 0x40
 8002aee:	6083      	str	r3, [r0, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002af0:	60c5      	str	r5, [r0, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002af2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002af6:	6103      	str	r3, [r0, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002af8:	6145      	str	r5, [r0, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002afa:	6185      	str	r5, [r0, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002afc:	61c5      	str	r5, [r0, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002afe:	6205      	str	r5, [r0, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b00:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002b02:	f001 fb1b 	bl	800413c <HAL_DMA_Init>
 8002b06:	bb30      	cbnz	r0, 8002b56 <HAL_UART_MspInit+0x61e>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002b08:	4b4f      	ldr	r3, [pc, #316]	@ (8002c48 <HAL_UART_MspInit+0x710>)
 8002b0a:	67a3      	str	r3, [r4, #120]	@ 0x78
 8002b0c:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_usart3_rx.Instance = DMA1_Stream5;
 8002b0e:	4850      	ldr	r0, [pc, #320]	@ (8002c50 <HAL_UART_MspInit+0x718>)
 8002b10:	4b50      	ldr	r3, [pc, #320]	@ (8002c54 <HAL_UART_MspInit+0x71c>)
 8002b12:	6003      	str	r3, [r0, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002b14:	232d      	movs	r3, #45	@ 0x2d
 8002b16:	6043      	str	r3, [r0, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	6083      	str	r3, [r0, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b1c:	60c3      	str	r3, [r0, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b1e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b22:	6102      	str	r2, [r0, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b24:	6143      	str	r3, [r0, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b26:	6183      	str	r3, [r0, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002b28:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b2c:	61c2      	str	r2, [r0, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b2e:	6203      	str	r3, [r0, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b30:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002b32:	f001 fb03 	bl	800413c <HAL_DMA_Init>
 8002b36:	b988      	cbnz	r0, 8002b5c <HAL_UART_MspInit+0x624>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002b38:	4b45      	ldr	r3, [pc, #276]	@ (8002c50 <HAL_UART_MspInit+0x718>)
 8002b3a:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8002b3c:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002b3e:	2200      	movs	r2, #0
 8002b40:	2105      	movs	r1, #5
 8002b42:	2027      	movs	r0, #39	@ 0x27
 8002b44:	f001 f8d4 	bl	8003cf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002b48:	2027      	movs	r0, #39	@ 0x27
 8002b4a:	f001 f8e1 	bl	8003d10 <HAL_NVIC_EnableIRQ>
 8002b4e:	e51c      	b.n	800258a <HAL_UART_MspInit+0x52>
      Error_Handler();
 8002b50:	f7fd fea2 	bl	8000898 <Error_Handler>
 8002b54:	e787      	b.n	8002a66 <HAL_UART_MspInit+0x52e>
      Error_Handler();
 8002b56:	f7fd fe9f 	bl	8000898 <Error_Handler>
 8002b5a:	e7d5      	b.n	8002b08 <HAL_UART_MspInit+0x5d0>
      Error_Handler();
 8002b5c:	f7fd fe9c 	bl	8000898 <Error_Handler>
 8002b60:	e7ea      	b.n	8002b38 <HAL_UART_MspInit+0x600>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002b62:	2301      	movs	r3, #1
 8002b64:	9310      	str	r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b66:	a810      	add	r0, sp, #64	@ 0x40
 8002b68:	f004 fe40 	bl	80077ec <HAL_RCCEx_PeriphCLKConfig>
 8002b6c:	2800      	cmp	r0, #0
 8002b6e:	d15c      	bne.n	8002c2a <HAL_UART_MspInit+0x6f2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002b70:	4b32      	ldr	r3, [pc, #200]	@ (8002c3c <HAL_UART_MspInit+0x704>)
 8002b72:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8002b76:	f042 0220 	orr.w	r2, r2, #32
 8002b7a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8002b7e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8002b82:	f002 0220 	and.w	r2, r2, #32
 8002b86:	920e      	str	r2, [sp, #56]	@ 0x38
 8002b88:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b8a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002b8e:	f042 0204 	orr.w	r2, r2, #4
 8002b92:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b9a:	f003 0304 	and.w	r3, r3, #4
 8002b9e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8002ba0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
    GPIO_InitStruct.Pin = TX6_BACK_Pin|RX6_BACK_Pin;
 8002ba2:	23c0      	movs	r3, #192	@ 0xc0
 8002ba4:	933f      	str	r3, [sp, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	9340      	str	r3, [sp, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002baa:	2500      	movs	r5, #0
 8002bac:	9541      	str	r5, [sp, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bae:	9542      	str	r5, [sp, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8002bb0:	2307      	movs	r3, #7
 8002bb2:	9343      	str	r3, [sp, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bb4:	a93f      	add	r1, sp, #252	@ 0xfc
 8002bb6:	4828      	ldr	r0, [pc, #160]	@ (8002c58 <HAL_UART_MspInit+0x720>)
 8002bb8:	f003 fa0e 	bl	8005fd8 <HAL_GPIO_Init>
    hdma_usart6_tx.Instance = DMA1_Stream6;
 8002bbc:	4827      	ldr	r0, [pc, #156]	@ (8002c5c <HAL_UART_MspInit+0x724>)
 8002bbe:	4b28      	ldr	r3, [pc, #160]	@ (8002c60 <HAL_UART_MspInit+0x728>)
 8002bc0:	6003      	str	r3, [r0, #0]
    hdma_usart6_tx.Init.Request = DMA_REQUEST_USART6_TX;
 8002bc2:	2348      	movs	r3, #72	@ 0x48
 8002bc4:	6043      	str	r3, [r0, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002bc6:	2340      	movs	r3, #64	@ 0x40
 8002bc8:	6083      	str	r3, [r0, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bca:	60c5      	str	r5, [r0, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002bcc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002bd0:	6103      	str	r3, [r0, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bd2:	6145      	str	r5, [r0, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bd4:	6185      	str	r5, [r0, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8002bd6:	61c5      	str	r5, [r0, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002bd8:	6205      	str	r5, [r0, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bda:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8002bdc:	f001 faae 	bl	800413c <HAL_DMA_Init>
 8002be0:	bb30      	cbnz	r0, 8002c30 <HAL_UART_MspInit+0x6f8>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8002be2:	4b1e      	ldr	r3, [pc, #120]	@ (8002c5c <HAL_UART_MspInit+0x724>)
 8002be4:	67a3      	str	r3, [r4, #120]	@ 0x78
 8002be6:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_usart6_rx.Instance = DMA1_Stream7;
 8002be8:	481e      	ldr	r0, [pc, #120]	@ (8002c64 <HAL_UART_MspInit+0x72c>)
 8002bea:	4b1f      	ldr	r3, [pc, #124]	@ (8002c68 <HAL_UART_MspInit+0x730>)
 8002bec:	6003      	str	r3, [r0, #0]
    hdma_usart6_rx.Init.Request = DMA_REQUEST_USART6_RX;
 8002bee:	2347      	movs	r3, #71	@ 0x47
 8002bf0:	6043      	str	r3, [r0, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	6083      	str	r3, [r0, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bf6:	60c3      	str	r3, [r0, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002bf8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002bfc:	6102      	str	r2, [r0, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bfe:	6143      	str	r3, [r0, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c00:	6183      	str	r3, [r0, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8002c02:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c06:	61c2      	str	r2, [r0, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c08:	6203      	str	r3, [r0, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c0a:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002c0c:	f001 fa96 	bl	800413c <HAL_DMA_Init>
 8002c10:	b988      	cbnz	r0, 8002c36 <HAL_UART_MspInit+0x6fe>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8002c12:	4b14      	ldr	r3, [pc, #80]	@ (8002c64 <HAL_UART_MspInit+0x72c>)
 8002c14:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8002c16:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8002c18:	2200      	movs	r2, #0
 8002c1a:	2105      	movs	r1, #5
 8002c1c:	2047      	movs	r0, #71	@ 0x47
 8002c1e:	f001 f867 	bl	8003cf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002c22:	2047      	movs	r0, #71	@ 0x47
 8002c24:	f001 f874 	bl	8003d10 <HAL_NVIC_EnableIRQ>
}
 8002c28:	e4af      	b.n	800258a <HAL_UART_MspInit+0x52>
      Error_Handler();
 8002c2a:	f7fd fe35 	bl	8000898 <Error_Handler>
 8002c2e:	e79f      	b.n	8002b70 <HAL_UART_MspInit+0x638>
      Error_Handler();
 8002c30:	f7fd fe32 	bl	8000898 <Error_Handler>
 8002c34:	e7d5      	b.n	8002be2 <HAL_UART_MspInit+0x6aa>
      Error_Handler();
 8002c36:	f7fd fe2f 	bl	8000898 <Error_Handler>
 8002c3a:	e7ea      	b.n	8002c12 <HAL_UART_MspInit+0x6da>
 8002c3c:	58024400 	.word	0x58024400
 8002c40:	58020400 	.word	0x58020400
 8002c44:	58020c00 	.word	0x58020c00
 8002c48:	24001178 	.word	0x24001178
 8002c4c:	40020070 	.word	0x40020070
 8002c50:	24001100 	.word	0x24001100
 8002c54:	40020088 	.word	0x40020088
 8002c58:	58020800 	.word	0x58020800
 8002c5c:	24001088 	.word	0x24001088
 8002c60:	400200a0 	.word	0x400200a0
 8002c64:	24001010 	.word	0x24001010
 8002c68:	400200b8 	.word	0x400200b8

08002c6c <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM5 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c6c:	280f      	cmp	r0, #15
 8002c6e:	d901      	bls.n	8002c74 <HAL_InitTick+0x8>
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8002c70:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim5);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8002c72:	4770      	bx	lr
{
 8002c74:	b510      	push	{r4, lr}
 8002c76:	b08a      	sub	sp, #40	@ 0x28
 8002c78:	4604      	mov	r4, r0
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0U);
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	4601      	mov	r1, r0
 8002c7e:	2032      	movs	r0, #50	@ 0x32
 8002c80:	f001 f836 	bl	8003cf0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002c84:	2032      	movs	r0, #50	@ 0x32
 8002c86:	f001 f843 	bl	8003d10 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002c8a:	4b1a      	ldr	r3, [pc, #104]	@ (8002cf4 <HAL_InitTick+0x88>)
 8002c8c:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM5_CLK_ENABLE();
 8002c8e:	4b1a      	ldr	r3, [pc, #104]	@ (8002cf8 <HAL_InitTick+0x8c>)
 8002c90:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002c94:	f042 0208 	orr.w	r2, r2, #8
 8002c98:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8002c9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ca0:	f003 0308 	and.w	r3, r3, #8
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	9b00      	ldr	r3, [sp, #0]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ca8:	a901      	add	r1, sp, #4
 8002caa:	a802      	add	r0, sp, #8
 8002cac:	f004 fc68 	bl	8007580 <HAL_RCC_GetClockConfig>
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002cb0:	9b07      	ldr	r3, [sp, #28]
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002cb2:	b9bb      	cbnz	r3, 8002ce4 <HAL_InitTick+0x78>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002cb4:	f004 fc40 	bl	8007538 <HAL_RCC_GetPCLK1Freq>
 8002cb8:	4603      	mov	r3, r0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002cba:	4a10      	ldr	r2, [pc, #64]	@ (8002cfc <HAL_InitTick+0x90>)
 8002cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc0:	0c9b      	lsrs	r3, r3, #18
 8002cc2:	3b01      	subs	r3, #1
  htim5.Instance = TIM5;
 8002cc4:	480e      	ldr	r0, [pc, #56]	@ (8002d00 <HAL_InitTick+0x94>)
 8002cc6:	4a0f      	ldr	r2, [pc, #60]	@ (8002d04 <HAL_InitTick+0x98>)
 8002cc8:	6002      	str	r2, [r0, #0]
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8002cca:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002cce:	60c2      	str	r2, [r0, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8002cd0:	6043      	str	r3, [r0, #4]
  htim5.Init.ClockDivision = 0;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	6103      	str	r3, [r0, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cd6:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8002cd8:	f007 fa1e 	bl	800a118 <HAL_TIM_Base_Init>
 8002cdc:	b130      	cbz	r0, 8002cec <HAL_InitTick+0x80>
  return HAL_ERROR;
 8002cde:	2001      	movs	r0, #1
}
 8002ce0:	b00a      	add	sp, #40	@ 0x28
 8002ce2:	bd10      	pop	{r4, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002ce4:	f004 fc28 	bl	8007538 <HAL_RCC_GetPCLK1Freq>
 8002ce8:	0043      	lsls	r3, r0, #1
 8002cea:	e7e6      	b.n	8002cba <HAL_InitTick+0x4e>
    return HAL_TIM_Base_Start_IT(&htim5);
 8002cec:	4804      	ldr	r0, [pc, #16]	@ (8002d00 <HAL_InitTick+0x94>)
 8002cee:	f007 f85d 	bl	8009dac <HAL_TIM_Base_Start_IT>
 8002cf2:	e7f5      	b.n	8002ce0 <HAL_InitTick+0x74>
 8002cf4:	2400000c 	.word	0x2400000c
 8002cf8:	58024400 	.word	0x58024400
 8002cfc:	431bde83 	.word	0x431bde83
 8002d00:	24001f38 	.word	0x24001f38
 8002d04:	40000c00 	.word	0x40000c00

08002d08 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d08:	e7fe      	b.n	8002d08 <NMI_Handler>

08002d0a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d0a:	e7fe      	b.n	8002d0a <HardFault_Handler>

08002d0c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d0c:	e7fe      	b.n	8002d0c <MemManage_Handler>

08002d0e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d0e:	e7fe      	b.n	8002d0e <BusFault_Handler>

08002d10 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d10:	e7fe      	b.n	8002d10 <UsageFault_Handler>

08002d12 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d12:	4770      	bx	lr

08002d14 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002d14:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002d16:	4802      	ldr	r0, [pc, #8]	@ (8002d20 <DMA1_Stream0_IRQHandler+0xc>)
 8002d18:	f002 f806 	bl	8004d28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002d1c:	bd08      	pop	{r3, pc}
 8002d1e:	bf00      	nop
 8002d20:	24001358 	.word	0x24001358

08002d24 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002d24:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002d26:	4802      	ldr	r0, [pc, #8]	@ (8002d30 <DMA1_Stream1_IRQHandler+0xc>)
 8002d28:	f001 fffe 	bl	8004d28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002d2c:	bd08      	pop	{r3, pc}
 8002d2e:	bf00      	nop
 8002d30:	240012e0 	.word	0x240012e0

08002d34 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002d34:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002d36:	4802      	ldr	r0, [pc, #8]	@ (8002d40 <DMA1_Stream2_IRQHandler+0xc>)
 8002d38:	f001 fff6 	bl	8004d28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002d3c:	bd08      	pop	{r3, pc}
 8002d3e:	bf00      	nop
 8002d40:	24001268 	.word	0x24001268

08002d44 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002d44:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002d46:	4802      	ldr	r0, [pc, #8]	@ (8002d50 <DMA1_Stream3_IRQHandler+0xc>)
 8002d48:	f001 ffee 	bl	8004d28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002d4c:	bd08      	pop	{r3, pc}
 8002d4e:	bf00      	nop
 8002d50:	240011f0 	.word	0x240011f0

08002d54 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002d54:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002d56:	4802      	ldr	r0, [pc, #8]	@ (8002d60 <DMA1_Stream4_IRQHandler+0xc>)
 8002d58:	f001 ffe6 	bl	8004d28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002d5c:	bd08      	pop	{r3, pc}
 8002d5e:	bf00      	nop
 8002d60:	24001178 	.word	0x24001178

08002d64 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002d64:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002d66:	4802      	ldr	r0, [pc, #8]	@ (8002d70 <DMA1_Stream5_IRQHandler+0xc>)
 8002d68:	f001 ffde 	bl	8004d28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002d6c:	bd08      	pop	{r3, pc}
 8002d6e:	bf00      	nop
 8002d70:	24001100 	.word	0x24001100

08002d74 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002d74:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8002d76:	4802      	ldr	r0, [pc, #8]	@ (8002d80 <DMA1_Stream6_IRQHandler+0xc>)
 8002d78:	f001 ffd6 	bl	8004d28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002d7c:	bd08      	pop	{r3, pc}
 8002d7e:	bf00      	nop
 8002d80:	24001088 	.word	0x24001088

08002d84 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002d84:	b508      	push	{r3, lr}
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002d86:	4802      	ldr	r0, [pc, #8]	@ (8002d90 <FDCAN1_IT0_IRQHandler+0xc>)
 8002d88:	f002 ff98 	bl	8005cbc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8002d8c:	bd08      	pop	{r3, pc}
 8002d8e:	bf00      	nop
 8002d90:	24001dcc 	.word	0x24001dcc

08002d94 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8002d94:	b508      	push	{r3, lr}
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8002d96:	4802      	ldr	r0, [pc, #8]	@ (8002da0 <FDCAN2_IT0_IRQHandler+0xc>)
 8002d98:	f002 ff90 	bl	8005cbc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8002d9c:	bd08      	pop	{r3, pc}
 8002d9e:	bf00      	nop
 8002da0:	24001d2c 	.word	0x24001d2c

08002da4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002da4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002da6:	4802      	ldr	r0, [pc, #8]	@ (8002db0 <TIM4_IRQHandler+0xc>)
 8002da8:	f007 f866 	bl	8009e78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002dac:	bd08      	pop	{r3, pc}
 8002dae:	bf00      	nop
 8002db0:	24001a90 	.word	0x24001a90

08002db4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002db4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002db6:	4802      	ldr	r0, [pc, #8]	@ (8002dc0 <I2C1_EV_IRQHandler+0xc>)
 8002db8:	f003 fd92 	bl	80068e0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002dbc:	bd08      	pop	{r3, pc}
 8002dbe:	bf00      	nop
 8002dc0:	24001ce0 	.word	0x24001ce0

08002dc4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002dc4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002dc6:	4802      	ldr	r0, [pc, #8]	@ (8002dd0 <USART1_IRQHandler+0xc>)
 8002dc8:	f007 fdc6 	bl	800a958 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002dcc:	bd08      	pop	{r3, pc}
 8002dce:	bf00      	nop
 8002dd0:	24001850 	.word	0x24001850

08002dd4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002dd4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002dd6:	4802      	ldr	r0, [pc, #8]	@ (8002de0 <USART2_IRQHandler+0xc>)
 8002dd8:	f007 fdbe 	bl	800a958 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002ddc:	bd08      	pop	{r3, pc}
 8002dde:	bf00      	nop
 8002de0:	240017c0 	.word	0x240017c0

08002de4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002de4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002de6:	4802      	ldr	r0, [pc, #8]	@ (8002df0 <USART3_IRQHandler+0xc>)
 8002de8:	f007 fdb6 	bl	800a958 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002dec:	bd08      	pop	{r3, pc}
 8002dee:	bf00      	nop
 8002df0:	24001730 	.word	0x24001730

08002df4 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002df4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002df6:	4802      	ldr	r0, [pc, #8]	@ (8002e00 <DMA1_Stream7_IRQHandler+0xc>)
 8002df8:	f001 ff96 	bl	8004d28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002dfc:	bd08      	pop	{r3, pc}
 8002dfe:	bf00      	nop
 8002e00:	24001010 	.word	0x24001010

08002e04 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8002e04:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8002e06:	4802      	ldr	r0, [pc, #8]	@ (8002e10 <SDMMC1_IRQHandler+0xc>)
 8002e08:	f006 fd3e 	bl	8009888 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8002e0c:	bd08      	pop	{r3, pc}
 8002e0e:	bf00      	nop
 8002e10:	24001b28 	.word	0x24001b28

08002e14 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002e14:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002e16:	4802      	ldr	r0, [pc, #8]	@ (8002e20 <TIM5_IRQHandler+0xc>)
 8002e18:	f007 f82e 	bl	8009e78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002e1c:	bd08      	pop	{r3, pc}
 8002e1e:	bf00      	nop
 8002e20:	24001f38 	.word	0x24001f38

08002e24 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002e24:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002e26:	4802      	ldr	r0, [pc, #8]	@ (8002e30 <UART4_IRQHandler+0xc>)
 8002e28:	f007 fd96 	bl	800a958 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002e2c:	bd08      	pop	{r3, pc}
 8002e2e:	bf00      	nop
 8002e30:	24001a00 	.word	0x24001a00

08002e34 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002e34:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002e36:	4802      	ldr	r0, [pc, #8]	@ (8002e40 <DMA2_Stream0_IRQHandler+0xc>)
 8002e38:	f001 ff76 	bl	8004d28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002e3c:	bd08      	pop	{r3, pc}
 8002e3e:	bf00      	nop
 8002e40:	24001c1c 	.word	0x24001c1c

08002e44 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002e44:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002e46:	4802      	ldr	r0, [pc, #8]	@ (8002e50 <DMA2_Stream1_IRQHandler+0xc>)
 8002e48:	f001 ff6e 	bl	8004d28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002e4c:	bd08      	pop	{r3, pc}
 8002e4e:	bf00      	nop
 8002e50:	24001ba4 	.word	0x24001ba4

08002e54 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002e54:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002e56:	4802      	ldr	r0, [pc, #8]	@ (8002e60 <DMA2_Stream2_IRQHandler+0xc>)
 8002e58:	f001 ff66 	bl	8004d28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002e5c:	bd08      	pop	{r3, pc}
 8002e5e:	bf00      	nop
 8002e60:	24001628 	.word	0x24001628

08002e64 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002e64:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002e66:	4802      	ldr	r0, [pc, #8]	@ (8002e70 <DMA2_Stream3_IRQHandler+0xc>)
 8002e68:	f001 ff5e 	bl	8004d28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002e6c:	bd08      	pop	{r3, pc}
 8002e6e:	bf00      	nop
 8002e70:	240015b0 	.word	0x240015b0

08002e74 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8002e74:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8002e76:	4802      	ldr	r0, [pc, #8]	@ (8002e80 <DMA2_Stream4_IRQHandler+0xc>)
 8002e78:	f001 ff56 	bl	8004d28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8002e7c:	bd08      	pop	{r3, pc}
 8002e7e:	bf00      	nop
 8002e80:	24001538 	.word	0x24001538

08002e84 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8002e84:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8002e86:	4802      	ldr	r0, [pc, #8]	@ (8002e90 <DMA2_Stream5_IRQHandler+0xc>)
 8002e88:	f001 ff4e 	bl	8004d28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8002e8c:	bd08      	pop	{r3, pc}
 8002e8e:	bf00      	nop
 8002e90:	240014c0 	.word	0x240014c0

08002e94 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002e94:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_tx);
 8002e96:	4802      	ldr	r0, [pc, #8]	@ (8002ea0 <DMA2_Stream6_IRQHandler+0xc>)
 8002e98:	f001 ff46 	bl	8004d28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002e9c:	bd08      	pop	{r3, pc}
 8002e9e:	bf00      	nop
 8002ea0:	24001448 	.word	0x24001448

08002ea4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002ea4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8002ea6:	4802      	ldr	r0, [pc, #8]	@ (8002eb0 <DMA2_Stream7_IRQHandler+0xc>)
 8002ea8:	f001 ff3e 	bl	8004d28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002eac:	bd08      	pop	{r3, pc}
 8002eae:	bf00      	nop
 8002eb0:	240013d0 	.word	0x240013d0

08002eb4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002eb4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002eb6:	4802      	ldr	r0, [pc, #8]	@ (8002ec0 <USART6_IRQHandler+0xc>)
 8002eb8:	f007 fd4e 	bl	800a958 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002ebc:	bd08      	pop	{r3, pc}
 8002ebe:	bf00      	nop
 8002ec0:	240016a0 	.word	0x240016a0

08002ec4 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8002ec4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8002ec6:	4802      	ldr	r0, [pc, #8]	@ (8002ed0 <UART7_IRQHandler+0xc>)
 8002ec8:	f007 fd46 	bl	800a958 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8002ecc:	bd08      	pop	{r3, pc}
 8002ece:	bf00      	nop
 8002ed0:	24001970 	.word	0x24001970

08002ed4 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8002ed4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8002ed6:	4802      	ldr	r0, [pc, #8]	@ (8002ee0 <UART8_IRQHandler+0xc>)
 8002ed8:	f007 fd3e 	bl	800a958 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8002edc:	bd08      	pop	{r3, pc}
 8002ede:	bf00      	nop
 8002ee0:	240018e0 	.word	0x240018e0

08002ee4 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8002ee4:	2001      	movs	r0, #1
 8002ee6:	4770      	bx	lr

08002ee8 <_kill>:

int _kill(int pid, int sig)
{
 8002ee8:	b508      	push	{r3, lr}
	errno = EINVAL;
 8002eea:	f013 fd6b 	bl	80169c4 <__errno>
 8002eee:	2316      	movs	r3, #22
 8002ef0:	6003      	str	r3, [r0, #0]
	return -1;
}
 8002ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef6:	bd08      	pop	{r3, pc}

08002ef8 <_exit>:

void _exit (int status)
{
 8002ef8:	b508      	push	{r3, lr}
	_kill(status, -1);
 8002efa:	f04f 31ff 	mov.w	r1, #4294967295
 8002efe:	f7ff fff3 	bl	8002ee8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002f02:	e7fe      	b.n	8002f02 <_exit+0xa>

08002f04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f04:	b510      	push	{r4, lr}
 8002f06:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f08:	4a0c      	ldr	r2, [pc, #48]	@ (8002f3c <_sbrk+0x38>)
 8002f0a:	490d      	ldr	r1, [pc, #52]	@ (8002f40 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f0c:	480d      	ldr	r0, [pc, #52]	@ (8002f44 <_sbrk+0x40>)
 8002f0e:	6800      	ldr	r0, [r0, #0]
 8002f10:	b140      	cbz	r0, 8002f24 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f12:	480c      	ldr	r0, [pc, #48]	@ (8002f44 <_sbrk+0x40>)
 8002f14:	6800      	ldr	r0, [r0, #0]
 8002f16:	4403      	add	r3, r0
 8002f18:	1a52      	subs	r2, r2, r1
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d806      	bhi.n	8002f2c <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002f1e:	4a09      	ldr	r2, [pc, #36]	@ (8002f44 <_sbrk+0x40>)
 8002f20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8002f22:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002f24:	4807      	ldr	r0, [pc, #28]	@ (8002f44 <_sbrk+0x40>)
 8002f26:	4c08      	ldr	r4, [pc, #32]	@ (8002f48 <_sbrk+0x44>)
 8002f28:	6004      	str	r4, [r0, #0]
 8002f2a:	e7f2      	b.n	8002f12 <_sbrk+0xe>
    errno = ENOMEM;
 8002f2c:	f013 fd4a 	bl	80169c4 <__errno>
 8002f30:	230c      	movs	r3, #12
 8002f32:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002f34:	f04f 30ff 	mov.w	r0, #4294967295
 8002f38:	e7f3      	b.n	8002f22 <_sbrk+0x1e>
 8002f3a:	bf00      	nop
 8002f3c:	24080000 	.word	0x24080000
 8002f40:	00000400 	.word	0x00000400
 8002f44:	24001f84 	.word	0x24001f84
 8002f48:	24006ae8 	.word	0x24006ae8

08002f4c <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002f4c:	4a27      	ldr	r2, [pc, #156]	@ (8002fec <SystemInit+0xa0>)
 8002f4e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002f52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f56:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002f5a:	4b25      	ldr	r3, [pc, #148]	@ (8002ff0 <SystemInit+0xa4>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	2b06      	cmp	r3, #6
 8002f64:	d806      	bhi.n	8002f74 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002f66:	4a22      	ldr	r2, [pc, #136]	@ (8002ff0 <SystemInit+0xa4>)
 8002f68:	6813      	ldr	r3, [r2, #0]
 8002f6a:	f023 030f 	bic.w	r3, r3, #15
 8002f6e:	f043 0307 	orr.w	r3, r3, #7
 8002f72:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002f74:	4b1f      	ldr	r3, [pc, #124]	@ (8002ff4 <SystemInit+0xa8>)
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	f042 0201 	orr.w	r2, r2, #1
 8002f7c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002f7e:	2200      	movs	r2, #0
 8002f80:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002f82:	6819      	ldr	r1, [r3, #0]
 8002f84:	4a1c      	ldr	r2, [pc, #112]	@ (8002ff8 <SystemInit+0xac>)
 8002f86:	400a      	ands	r2, r1
 8002f88:	601a      	str	r2, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002f8a:	4b19      	ldr	r3, [pc, #100]	@ (8002ff0 <SystemInit+0xa4>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f013 0f08 	tst.w	r3, #8
 8002f92:	d006      	beq.n	8002fa2 <SystemInit+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002f94:	4a16      	ldr	r2, [pc, #88]	@ (8002ff0 <SystemInit+0xa4>)
 8002f96:	6813      	ldr	r3, [r2, #0]
 8002f98:	f023 030f 	bic.w	r3, r3, #15
 8002f9c:	f043 0307 	orr.w	r3, r3, #7
 8002fa0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002fa2:	4b14      	ldr	r3, [pc, #80]	@ (8002ff4 <SystemInit+0xa8>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002fa8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002faa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002fac:	4913      	ldr	r1, [pc, #76]	@ (8002ffc <SystemInit+0xb0>)
 8002fae:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002fb0:	4913      	ldr	r1, [pc, #76]	@ (8003000 <SystemInit+0xb4>)
 8002fb2:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002fb4:	4913      	ldr	r1, [pc, #76]	@ (8003004 <SystemInit+0xb8>)
 8002fb6:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002fb8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002fba:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002fbc:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002fbe:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002fc0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002fc2:	6819      	ldr	r1, [r3, #0]
 8002fc4:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 8002fc8:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002fca:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002fcc:	4b0e      	ldr	r3, [pc, #56]	@ (8003008 <SystemInit+0xbc>)
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	4b0e      	ldr	r3, [pc, #56]	@ (800300c <SystemInit+0xc0>)
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002fd8:	d203      	bcs.n	8002fe2 <SystemInit+0x96>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002fda:	4b0d      	ldr	r3, [pc, #52]	@ (8003010 <SystemInit+0xc4>)
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8003014 <SystemInit+0xc8>)
 8002fe4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002fe8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002fea:	4770      	bx	lr
 8002fec:	e000ed00 	.word	0xe000ed00
 8002ff0:	52002000 	.word	0x52002000
 8002ff4:	58024400 	.word	0x58024400
 8002ff8:	eaf6ed7f 	.word	0xeaf6ed7f
 8002ffc:	02020200 	.word	0x02020200
 8003000:	01ff0000 	.word	0x01ff0000
 8003004:	01010280 	.word	0x01010280
 8003008:	5c001000 	.word	0x5c001000
 800300c:	ffff0000 	.word	0xffff0000
 8003010:	51008000 	.word	0x51008000
 8003014:	52004000 	.word	0x52004000

08003018 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003018:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003050 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800301c:	f7ff ff96 	bl	8002f4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003020:	480c      	ldr	r0, [pc, #48]	@ (8003054 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003022:	490d      	ldr	r1, [pc, #52]	@ (8003058 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003024:	4a0d      	ldr	r2, [pc, #52]	@ (800305c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003028:	e002      	b.n	8003030 <LoopCopyDataInit>

0800302a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800302a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800302c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800302e:	3304      	adds	r3, #4

08003030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003034:	d3f9      	bcc.n	800302a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003036:	4a0a      	ldr	r2, [pc, #40]	@ (8003060 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003038:	4c0a      	ldr	r4, [pc, #40]	@ (8003064 <LoopFillZerobss+0x22>)
  movs r3, #0
 800303a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800303c:	e001      	b.n	8003042 <LoopFillZerobss>

0800303e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800303e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003040:	3204      	adds	r2, #4

08003042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003044:	d3fb      	bcc.n	800303e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003046:	f013 fcc3 	bl	80169d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800304a:	f7fd fd9d 	bl	8000b88 <main>
  bx  lr
 800304e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003050:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003054:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003058:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 800305c:	0801701c 	.word	0x0801701c
  ldr r2, =_sbss
 8003060:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 8003064:	24006ae4 	.word	0x24006ae4

08003068 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003068:	e7fe      	b.n	8003068 <ADC3_IRQHandler>
	...

0800306c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800306c:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800306e:	2003      	movs	r0, #3
 8003070:	f000 fe2c 	bl	8003ccc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003074:	f003 fffa 	bl	800706c <HAL_RCC_GetSysClockFreq>
 8003078:	490f      	ldr	r1, [pc, #60]	@ (80030b8 <HAL_Init+0x4c>)
 800307a:	698b      	ldr	r3, [r1, #24]
 800307c:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8003080:	4a0e      	ldr	r2, [pc, #56]	@ (80030bc <HAL_Init+0x50>)
 8003082:	5cd3      	ldrb	r3, [r2, r3]
 8003084:	f003 031f 	and.w	r3, r3, #31
 8003088:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800308a:	698b      	ldr	r3, [r1, #24]
 800308c:	f003 030f 	and.w	r3, r3, #15
 8003090:	5cd3      	ldrb	r3, [r2, r3]
 8003092:	f003 031f 	and.w	r3, r3, #31
 8003096:	fa20 f303 	lsr.w	r3, r0, r3
 800309a:	4a09      	ldr	r2, [pc, #36]	@ (80030c0 <HAL_Init+0x54>)
 800309c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800309e:	4b09      	ldr	r3, [pc, #36]	@ (80030c4 <HAL_Init+0x58>)
 80030a0:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030a2:	2000      	movs	r0, #0
 80030a4:	f7ff fde2 	bl	8002c6c <HAL_InitTick>
 80030a8:	b110      	cbz	r0, 80030b0 <HAL_Init+0x44>
  {
    return HAL_ERROR;
 80030aa:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 80030ac:	4620      	mov	r0, r4
 80030ae:	bd10      	pop	{r4, pc}
 80030b0:	4604      	mov	r4, r0
  HAL_MspInit();
 80030b2:	f7fe ff93 	bl	8001fdc <HAL_MspInit>
  return HAL_OK;
 80030b6:	e7f9      	b.n	80030ac <HAL_Init+0x40>
 80030b8:	58024400 	.word	0x58024400
 80030bc:	08016d10 	.word	0x08016d10
 80030c0:	24000000 	.word	0x24000000
 80030c4:	24000004 	.word	0x24000004

080030c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80030c8:	4b03      	ldr	r3, [pc, #12]	@ (80030d8 <HAL_IncTick+0x10>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	4a03      	ldr	r2, [pc, #12]	@ (80030dc <HAL_IncTick+0x14>)
 80030ce:	6811      	ldr	r1, [r2, #0]
 80030d0:	440b      	add	r3, r1
 80030d2:	6013      	str	r3, [r2, #0]
}
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	24000008 	.word	0x24000008
 80030dc:	24001f88 	.word	0x24001f88

080030e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80030e0:	4b01      	ldr	r3, [pc, #4]	@ (80030e8 <HAL_GetTick+0x8>)
 80030e2:	6818      	ldr	r0, [r3, #0]
}
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	24001f88 	.word	0x24001f88

080030ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030ec:	b538      	push	{r3, r4, r5, lr}
 80030ee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80030f0:	f7ff fff6 	bl	80030e0 <HAL_GetTick>
 80030f4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030f6:	f1b4 3fff 	cmp.w	r4, #4294967295
 80030fa:	d002      	beq.n	8003102 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80030fc:	4b04      	ldr	r3, [pc, #16]	@ (8003110 <HAL_Delay+0x24>)
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003102:	f7ff ffed 	bl	80030e0 <HAL_GetTick>
 8003106:	1b40      	subs	r0, r0, r5
 8003108:	42a0      	cmp	r0, r4
 800310a:	d3fa      	bcc.n	8003102 <HAL_Delay+0x16>
  {
  }
}
 800310c:	bd38      	pop	{r3, r4, r5, pc}
 800310e:	bf00      	nop
 8003110:	24000008 	.word	0x24000008

08003114 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8003114:	4b01      	ldr	r3, [pc, #4]	@ (800311c <HAL_GetREVID+0x8>)
 8003116:	6818      	ldr	r0, [r3, #0]
}
 8003118:	0c00      	lsrs	r0, r0, #16
 800311a:	4770      	bx	lr
 800311c:	5c001000 	.word	0x5c001000

08003120 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003120:	b410      	push	{r4}
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003122:	3030      	adds	r0, #48	@ 0x30
 8003124:	0a0b      	lsrs	r3, r1, #8
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	f003 030c 	and.w	r3, r3, #12

  MODIFY_REG(*preg,
 800312c:	58c4      	ldr	r4, [r0, r3]
 800312e:	f001 011f 	and.w	r1, r1, #31
 8003132:	f04f 0c1f 	mov.w	ip, #31
 8003136:	fa0c fc01 	lsl.w	ip, ip, r1
 800313a:	ea24 0c0c 	bic.w	ip, r4, ip
 800313e:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8003142:	408a      	lsls	r2, r1
 8003144:	ea4c 0202 	orr.w	r2, ip, r2
 8003148:	50c2      	str	r2, [r0, r3]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800314a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800314e:	4770      	bx	lr

08003150 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003150:	b410      	push	{r4}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003152:	3014      	adds	r0, #20
 8003154:	0e4b      	lsrs	r3, r1, #25
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	f003 0304 	and.w	r3, r3, #4

  MODIFY_REG(*preg,
 800315c:	58c4      	ldr	r4, [r0, r3]
 800315e:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8003162:	f04f 0c07 	mov.w	ip, #7
 8003166:	fa0c fc01 	lsl.w	ip, ip, r1
 800316a:	ea24 0c0c 	bic.w	ip, r4, ip
 800316e:	408a      	lsls	r2, r1
 8003170:	ea4c 0202 	orr.w	r2, ip, r2
 8003174:	50c2      	str	r2, [r0, r3]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003176:	f85d 4b04 	ldr.w	r4, [sp], #4
 800317a:	4770      	bx	lr

0800317c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800317c:	b570      	push	{r4, r5, r6, lr}
 800317e:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003180:	2300      	movs	r3, #0
 8003182:	9301      	str	r3, [sp, #4]
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003184:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 8003188:	2b01      	cmp	r3, #1
 800318a:	f000 8224 	beq.w	80035d6 <HAL_ADC_ConfigChannel+0x45a>
 800318e:	4604      	mov	r4, r0
 8003190:	460d      	mov	r5, r1
 8003192:	2301      	movs	r3, #1
 8003194:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003198:	6802      	ldr	r2, [r0, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800319a:	6893      	ldr	r3, [r2, #8]
 800319c:	f013 0f04 	tst.w	r3, #4
 80031a0:	d009      	beq.n	80031b6 <HAL_ADC_ConfigChannel+0x3a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031a2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80031a4:	f043 0320 	orr.w	r3, r3, #32
 80031a8:	6543      	str	r3, [r0, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80031aa:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031ac:	2300      	movs	r3, #0
 80031ae:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 80031b2:	b002      	add	sp, #8
 80031b4:	bd70      	pop	{r4, r5, r6, pc}
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80031b6:	680b      	ldr	r3, [r1, #0]
 80031b8:	f3c3 0113 	ubfx	r1, r3, #0, #20
 80031bc:	2900      	cmp	r1, #0
 80031be:	d13c      	bne.n	800323a <HAL_ADC_ConfigChannel+0xbe>
 80031c0:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80031c4:	2101      	movs	r1, #1
 80031c6:	4099      	lsls	r1, r3
 80031c8:	69d3      	ldr	r3, [r2, #28]
 80031ca:	430b      	orrs	r3, r1
 80031cc:	61d3      	str	r3, [r2, #28]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80031ce:	682a      	ldr	r2, [r5, #0]
 80031d0:	6869      	ldr	r1, [r5, #4]
 80031d2:	6820      	ldr	r0, [r4, #0]
 80031d4:	f7ff ffa4 	bl	8003120 <LL_ADC_REG_SetSequencerRanks>
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031d8:	6820      	ldr	r0, [r4, #0]
 80031da:	6883      	ldr	r3, [r0, #8]
 80031dc:	f013 0304 	ands.w	r3, r3, #4
 80031e0:	d000      	beq.n	80031e4 <HAL_ADC_ConfigChannel+0x68>
 80031e2:	2301      	movs	r3, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80031e4:	6882      	ldr	r2, [r0, #8]
 80031e6:	f012 0208 	ands.w	r2, r2, #8
 80031ea:	d000      	beq.n	80031ee <HAL_ADC_ConfigChannel+0x72>
 80031ec:	2201      	movs	r2, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80031ee:	ea52 0603 	orrs.w	r6, r2, r3
 80031f2:	d02e      	beq.n	8003252 <HAL_ADC_ConfigChannel+0xd6>
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031f4:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031f6:	6893      	ldr	r3, [r2, #8]
 80031f8:	f013 0f01 	tst.w	r3, #1
 80031fc:	f040 81e7 	bne.w	80035ce <HAL_ADC_ConfigChannel+0x452>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003200:	682b      	ldr	r3, [r5, #0]
 8003202:	68e8      	ldr	r0, [r5, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8003204:	f8d2 10c0 	ldr.w	r1, [r2, #192]	@ 0xc0
 8003208:	f3c3 0613 	ubfx	r6, r3, #0, #20
 800320c:	ea21 0106 	bic.w	r1, r1, r6
 8003210:	f000 0618 	and.w	r6, r0, #24
 8003214:	48ae      	ldr	r0, [pc, #696]	@ (80034d0 <HAL_ADC_ConfigChannel+0x354>)
 8003216:	40f0      	lsrs	r0, r6
 8003218:	4003      	ands	r3, r0
 800321a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800321e:	430b      	orrs	r3, r1
 8003220:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003224:	68ea      	ldr	r2, [r5, #12]
 8003226:	4bab      	ldr	r3, [pc, #684]	@ (80034d4 <HAL_ADC_ConfigChannel+0x358>)
 8003228:	429a      	cmp	r2, r3
 800322a:	f000 80a1 	beq.w	8003370 <HAL_ADC_ConfigChannel+0x1f4>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800322e:	682b      	ldr	r3, [r5, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	f2c0 8153 	blt.w	80034dc <HAL_ADC_ConfigChannel+0x360>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003236:	2000      	movs	r0, #0
 8003238:	e7b8      	b.n	80031ac <HAL_ADC_ConfigChannel+0x30>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323a:	fa93 f3a3 	rbit	r3, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800323e:	b133      	cbz	r3, 800324e <HAL_ADC_ConfigChannel+0xd2>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8003240:	fab3 f383 	clz	r3, r3
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003244:	f003 031f 	and.w	r3, r3, #31
 8003248:	2101      	movs	r1, #1
 800324a:	4099      	lsls	r1, r3
 800324c:	e7bc      	b.n	80031c8 <HAL_ADC_ConfigChannel+0x4c>
    return 32U;
 800324e:	2320      	movs	r3, #32
 8003250:	e7f8      	b.n	8003244 <HAL_ADC_ConfigChannel+0xc8>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003252:	68aa      	ldr	r2, [r5, #8]
 8003254:	6829      	ldr	r1, [r5, #0]
 8003256:	f7ff ff7b 	bl	8003150 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800325a:	4b9f      	ldr	r3, [pc, #636]	@ (80034d8 <HAL_ADC_ConfigChannel+0x35c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003262:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003266:	d00b      	beq.n	8003280 <HAL_ADC_ConfigChannel+0x104>
 8003268:	6822      	ldr	r2, [r4, #0]
 800326a:	68d3      	ldr	r3, [r2, #12]
 800326c:	f013 0f10 	tst.w	r3, #16
 8003270:	d13b      	bne.n	80032ea <HAL_ADC_ConfigChannel+0x16e>
 8003272:	696b      	ldr	r3, [r5, #20]
 8003274:	68d2      	ldr	r2, [r2, #12]
 8003276:	f3c2 0282 	ubfx	r2, r2, #2, #3
 800327a:	0052      	lsls	r2, r2, #1
 800327c:	4093      	lsls	r3, r2
 800327e:	e006      	b.n	800328e <HAL_ADC_ConfigChannel+0x112>
 8003280:	696b      	ldr	r3, [r5, #20]
 8003282:	6822      	ldr	r2, [r4, #0]
 8003284:	68d2      	ldr	r2, [r2, #12]
 8003286:	f3c2 0282 	ubfx	r2, r2, #2, #3
 800328a:	0052      	lsls	r2, r2, #1
 800328c:	4093      	lsls	r3, r2
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800328e:	6929      	ldr	r1, [r5, #16]
 8003290:	2904      	cmp	r1, #4
 8003292:	d038      	beq.n	8003306 <HAL_ADC_ConfigChannel+0x18a>
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003294:	6822      	ldr	r2, [r4, #0]
 8003296:	6828      	ldr	r0, [r5, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003298:	f102 0c60 	add.w	ip, r2, #96	@ 0x60
    MODIFY_REG(*preg,
 800329c:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
 80032a0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80032a4:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 80032a8:	4303      	orrs	r3, r0
 80032aa:	4313      	orrs	r3, r2
 80032ac:	f84c 3021 	str.w	r3, [ip, r1, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80032b0:	6823      	ldr	r3, [r4, #0]
 80032b2:	6928      	ldr	r0, [r5, #16]
 80032b4:	7e6a      	ldrb	r2, [r5, #25]
 80032b6:	2a01      	cmp	r2, #1
 80032b8:	d01f      	beq.n	80032fa <HAL_ADC_ConfigChannel+0x17e>
 80032ba:	4631      	mov	r1, r6
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032bc:	3360      	adds	r3, #96	@ 0x60
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80032be:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80032c2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80032c6:	430a      	orrs	r2, r1
 80032c8:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80032cc:	6821      	ldr	r1, [r4, #0]
 80032ce:	692a      	ldr	r2, [r5, #16]
 80032d0:	7e2b      	ldrb	r3, [r5, #24]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d014      	beq.n	8003300 <HAL_ADC_ConfigChannel+0x184>
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80032d6:	690b      	ldr	r3, [r1, #16]
 80032d8:	f423 43f0 	bic.w	r3, r3, #30720	@ 0x7800
 80032dc:	f002 021f 	and.w	r2, r2, #31
 80032e0:	fa06 f202 	lsl.w	r2, r6, r2
 80032e4:	4313      	orrs	r3, r2
 80032e6:	610b      	str	r3, [r1, #16]
}
 80032e8:	e784      	b.n	80031f4 <HAL_ADC_ConfigChannel+0x78>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80032ea:	696b      	ldr	r3, [r5, #20]
 80032ec:	68d2      	ldr	r2, [r2, #12]
 80032ee:	0892      	lsrs	r2, r2, #2
 80032f0:	f002 0204 	and.w	r2, r2, #4
 80032f4:	0052      	lsls	r2, r2, #1
 80032f6:	4093      	lsls	r3, r2
 80032f8:	e7c9      	b.n	800328e <HAL_ADC_ConfigChannel+0x112>
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80032fa:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80032fe:	e7dd      	b.n	80032bc <HAL_ADC_ConfigChannel+0x140>
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003300:	f44f 6600 	mov.w	r6, #2048	@ 0x800
 8003304:	e7e7      	b.n	80032d6 <HAL_ADC_ConfigChannel+0x15a>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003306:	6822      	ldr	r2, [r4, #0]
 8003308:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 800330a:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
 800330e:	6829      	ldr	r1, [r5, #0]
 8003310:	ebb3 6f81 	cmp.w	r3, r1, lsl #26
 8003314:	d01d      	beq.n	8003352 <HAL_ADC_ConfigChannel+0x1d6>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003316:	6822      	ldr	r2, [r4, #0]
 8003318:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 800331a:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
 800331e:	6829      	ldr	r1, [r5, #0]
 8003320:	ebb3 6f81 	cmp.w	r3, r1, lsl #26
 8003324:	d01a      	beq.n	800335c <HAL_ADC_ConfigChannel+0x1e0>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003326:	6822      	ldr	r2, [r4, #0]
 8003328:	6e93      	ldr	r3, [r2, #104]	@ 0x68
 800332a:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
 800332e:	6829      	ldr	r1, [r5, #0]
 8003330:	ebb3 6f81 	cmp.w	r3, r1, lsl #26
 8003334:	d017      	beq.n	8003366 <HAL_ADC_ConfigChannel+0x1ea>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003336:	6822      	ldr	r2, [r4, #0]
 8003338:	6ed3      	ldr	r3, [r2, #108]	@ 0x6c
 800333a:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
 800333e:	6829      	ldr	r1, [r5, #0]
 8003340:	ebb3 6f81 	cmp.w	r3, r1, lsl #26
 8003344:	f47f af56 	bne.w	80031f4 <HAL_ADC_ConfigChannel+0x78>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003348:	6ed3      	ldr	r3, [r2, #108]	@ 0x6c
 800334a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800334e:	66d3      	str	r3, [r2, #108]	@ 0x6c
 8003350:	e750      	b.n	80031f4 <HAL_ADC_ConfigChannel+0x78>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003352:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8003354:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003358:	6613      	str	r3, [r2, #96]	@ 0x60
 800335a:	e7dc      	b.n	8003316 <HAL_ADC_ConfigChannel+0x19a>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800335c:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 800335e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003362:	6653      	str	r3, [r2, #100]	@ 0x64
 8003364:	e7df      	b.n	8003326 <HAL_ADC_ConfigChannel+0x1aa>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003366:	6e93      	ldr	r3, [r2, #104]	@ 0x68
 8003368:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800336c:	6693      	str	r3, [r2, #104]	@ 0x68
 800336e:	e7e2      	b.n	8003336 <HAL_ADC_ConfigChannel+0x1ba>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003370:	6820      	ldr	r0, [r4, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003372:	682b      	ldr	r3, [r5, #0]
 8003374:	f3c3 0613 	ubfx	r6, r3, #0, #20
 8003378:	bb3e      	cbnz	r6, 80033ca <HAL_ADC_ConfigChannel+0x24e>
 800337a:	0e9a      	lsrs	r2, r3, #26
 800337c:	3201      	adds	r2, #1
 800337e:	f002 021f 	and.w	r2, r2, #31
 8003382:	2a09      	cmp	r2, #9
 8003384:	bf8c      	ite	hi
 8003386:	2200      	movhi	r2, #0
 8003388:	2201      	movls	r2, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800338a:	2a00      	cmp	r2, #0
 800338c:	d055      	beq.n	800343a <HAL_ADC_ConfigChannel+0x2be>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800338e:	bb5e      	cbnz	r6, 80033e8 <HAL_ADC_ConfigChannel+0x26c>
 8003390:	0e99      	lsrs	r1, r3, #26
 8003392:	3101      	adds	r1, #1
 8003394:	0689      	lsls	r1, r1, #26
 8003396:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 800339a:	bb8e      	cbnz	r6, 8003400 <HAL_ADC_ConfigChannel+0x284>
 800339c:	ea4f 6c93 	mov.w	ip, r3, lsr #26
 80033a0:	f10c 0c01 	add.w	ip, ip, #1
 80033a4:	f00c 0c1f 	and.w	ip, ip, #31
 80033a8:	2201      	movs	r2, #1
 80033aa:	fa02 f20c 	lsl.w	r2, r2, ip
 80033ae:	4311      	orrs	r1, r2
 80033b0:	bbae      	cbnz	r6, 800341e <HAL_ADC_ConfigChannel+0x2a2>
 80033b2:	0e9b      	lsrs	r3, r3, #26
 80033b4:	3301      	adds	r3, #1
 80033b6:	f003 031f 	and.w	r3, r3, #31
 80033ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80033be:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033c0:	4319      	orrs	r1, r3
 80033c2:	68aa      	ldr	r2, [r5, #8]
 80033c4:	f7ff fec4 	bl	8003150 <LL_ADC_SetChannelSamplingTime>
 80033c8:	e731      	b.n	800322e <HAL_ADC_ConfigChannel+0xb2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ca:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 80033ce:	b14a      	cbz	r2, 80033e4 <HAL_ADC_ConfigChannel+0x268>
  return __builtin_clz(value);
 80033d0:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80033d4:	3201      	adds	r2, #1
 80033d6:	f002 021f 	and.w	r2, r2, #31
 80033da:	2a09      	cmp	r2, #9
 80033dc:	bf8c      	ite	hi
 80033de:	2200      	movhi	r2, #0
 80033e0:	2201      	movls	r2, #1
 80033e2:	e7d2      	b.n	800338a <HAL_ADC_ConfigChannel+0x20e>
    return 32U;
 80033e4:	2220      	movs	r2, #32
 80033e6:	e7f5      	b.n	80033d4 <HAL_ADC_ConfigChannel+0x258>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e8:	fa93 f1a3 	rbit	r1, r3
  if (value == 0U)
 80033ec:	b131      	cbz	r1, 80033fc <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80033ee:	fab1 f181 	clz	r1, r1
 80033f2:	3101      	adds	r1, #1
 80033f4:	0689      	lsls	r1, r1, #26
 80033f6:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 80033fa:	e7ce      	b.n	800339a <HAL_ADC_ConfigChannel+0x21e>
    return 32U;
 80033fc:	2120      	movs	r1, #32
 80033fe:	e7f8      	b.n	80033f2 <HAL_ADC_ConfigChannel+0x276>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003400:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 8003404:	b14a      	cbz	r2, 800341a <HAL_ADC_ConfigChannel+0x29e>
  return __builtin_clz(value);
 8003406:	fab2 f282 	clz	r2, r2
 800340a:	3201      	adds	r2, #1
 800340c:	f002 021f 	and.w	r2, r2, #31
 8003410:	f04f 0c01 	mov.w	ip, #1
 8003414:	fa0c f202 	lsl.w	r2, ip, r2
 8003418:	e7c9      	b.n	80033ae <HAL_ADC_ConfigChannel+0x232>
    return 32U;
 800341a:	2220      	movs	r2, #32
 800341c:	e7f5      	b.n	800340a <HAL_ADC_ConfigChannel+0x28e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341e:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8003422:	b143      	cbz	r3, 8003436 <HAL_ADC_ConfigChannel+0x2ba>
  return __builtin_clz(value);
 8003424:	fab3 f383 	clz	r3, r3
 8003428:	3301      	adds	r3, #1
 800342a:	f003 031f 	and.w	r3, r3, #31
 800342e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003432:	051b      	lsls	r3, r3, #20
 8003434:	e7c4      	b.n	80033c0 <HAL_ADC_ConfigChannel+0x244>
    return 32U;
 8003436:	2320      	movs	r3, #32
 8003438:	e7f6      	b.n	8003428 <HAL_ADC_ConfigChannel+0x2ac>
 800343a:	b9e6      	cbnz	r6, 8003476 <HAL_ADC_ConfigChannel+0x2fa>
 800343c:	0e99      	lsrs	r1, r3, #26
 800343e:	3101      	adds	r1, #1
 8003440:	0689      	lsls	r1, r1, #26
 8003442:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 8003446:	bb16      	cbnz	r6, 800348e <HAL_ADC_ConfigChannel+0x312>
 8003448:	ea4f 6c93 	mov.w	ip, r3, lsr #26
 800344c:	f10c 0c01 	add.w	ip, ip, #1
 8003450:	f00c 0c1f 	and.w	ip, ip, #31
 8003454:	2201      	movs	r2, #1
 8003456:	fa02 f20c 	lsl.w	r2, r2, ip
 800345a:	4311      	orrs	r1, r2
 800345c:	bb36      	cbnz	r6, 80034ac <HAL_ADC_ConfigChannel+0x330>
 800345e:	0e9b      	lsrs	r3, r3, #26
 8003460:	3301      	adds	r3, #1
 8003462:	f003 031f 	and.w	r3, r3, #31
 8003466:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800346a:	3b1e      	subs	r3, #30
 800346c:	051b      	lsls	r3, r3, #20
 800346e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003472:	4319      	orrs	r1, r3
 8003474:	e7a5      	b.n	80033c2 <HAL_ADC_ConfigChannel+0x246>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003476:	fa93 f1a3 	rbit	r1, r3
  if (value == 0U)
 800347a:	b131      	cbz	r1, 800348a <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 800347c:	fab1 f181 	clz	r1, r1
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003480:	3101      	adds	r1, #1
 8003482:	0689      	lsls	r1, r1, #26
 8003484:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 8003488:	e7dd      	b.n	8003446 <HAL_ADC_ConfigChannel+0x2ca>
    return 32U;
 800348a:	2120      	movs	r1, #32
 800348c:	e7f8      	b.n	8003480 <HAL_ADC_ConfigChannel+0x304>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348e:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 8003492:	b14a      	cbz	r2, 80034a8 <HAL_ADC_ConfigChannel+0x32c>
  return __builtin_clz(value);
 8003494:	fab2 f282 	clz	r2, r2
 8003498:	3201      	adds	r2, #1
 800349a:	f002 021f 	and.w	r2, r2, #31
 800349e:	f04f 0c01 	mov.w	ip, #1
 80034a2:	fa0c f202 	lsl.w	r2, ip, r2
 80034a6:	e7d8      	b.n	800345a <HAL_ADC_ConfigChannel+0x2de>
    return 32U;
 80034a8:	2220      	movs	r2, #32
 80034aa:	e7f5      	b.n	8003498 <HAL_ADC_ConfigChannel+0x31c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ac:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80034b0:	b15b      	cbz	r3, 80034ca <HAL_ADC_ConfigChannel+0x34e>
  return __builtin_clz(value);
 80034b2:	fab3 f383 	clz	r3, r3
 80034b6:	3301      	adds	r3, #1
 80034b8:	f003 031f 	and.w	r3, r3, #31
 80034bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80034c0:	3b1e      	subs	r3, #30
 80034c2:	051b      	lsls	r3, r3, #20
 80034c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80034c8:	e7d3      	b.n	8003472 <HAL_ADC_ConfigChannel+0x2f6>
    return 32U;
 80034ca:	2320      	movs	r3, #32
 80034cc:	e7f3      	b.n	80034b6 <HAL_ADC_ConfigChannel+0x33a>
 80034ce:	bf00      	nop
 80034d0:	000fffff 	.word	0x000fffff
 80034d4:	47ff0000 	.word	0x47ff0000
 80034d8:	5c001000 	.word	0x5c001000
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034dc:	6822      	ldr	r2, [r4, #0]
 80034de:	493f      	ldr	r1, [pc, #252]	@ (80035dc <HAL_ADC_ConfigChannel+0x460>)
 80034e0:	483f      	ldr	r0, [pc, #252]	@ (80035e0 <HAL_ADC_ConfigChannel+0x464>)
 80034e2:	4282      	cmp	r2, r0
 80034e4:	bf18      	it	ne
 80034e6:	428a      	cmpne	r2, r1
 80034e8:	bf0c      	ite	eq
 80034ea:	2101      	moveq	r1, #1
 80034ec:	2100      	movne	r1, #0
 80034ee:	d118      	bne.n	8003522 <HAL_ADC_ConfigChannel+0x3a6>
 80034f0:	4e3c      	ldr	r6, [pc, #240]	@ (80035e4 <HAL_ADC_ConfigChannel+0x468>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80034f2:	68b5      	ldr	r5, [r6, #8]
 80034f4:	f005 7ce0 	and.w	ip, r5, #29360128	@ 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034f8:	b1a9      	cbz	r1, 8003526 <HAL_ADC_ConfigChannel+0x3aa>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034fa:	4938      	ldr	r1, [pc, #224]	@ (80035dc <HAL_ADC_ConfigChannel+0x460>)
 80034fc:	6888      	ldr	r0, [r1, #8]
 80034fe:	f010 0001 	ands.w	r0, r0, #1
 8003502:	d000      	beq.n	8003506 <HAL_ADC_ConfigChannel+0x38a>
 8003504:	2001      	movs	r0, #1
 8003506:	4936      	ldr	r1, [pc, #216]	@ (80035e0 <HAL_ADC_ConfigChannel+0x464>)
 8003508:	6889      	ldr	r1, [r1, #8]
 800350a:	f011 0101 	ands.w	r1, r1, #1
 800350e:	d000      	beq.n	8003512 <HAL_ADC_ConfigChannel+0x396>
 8003510:	2101      	movs	r1, #1
 8003512:	4301      	orrs	r1, r0
 8003514:	d00c      	beq.n	8003530 <HAL_ADC_ConfigChannel+0x3b4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003516:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003518:	f043 0320 	orr.w	r3, r3, #32
 800351c:	6563      	str	r3, [r4, #84]	@ 0x54
          tmp_hal_status = HAL_ERROR;
 800351e:	2001      	movs	r0, #1
 8003520:	e644      	b.n	80031ac <HAL_ADC_ConfigChannel+0x30>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003522:	4e31      	ldr	r6, [pc, #196]	@ (80035e8 <HAL_ADC_ConfigChannel+0x46c>)
 8003524:	e7e5      	b.n	80034f2 <HAL_ADC_ConfigChannel+0x376>
 8003526:	4931      	ldr	r1, [pc, #196]	@ (80035ec <HAL_ADC_ConfigChannel+0x470>)
 8003528:	6889      	ldr	r1, [r1, #8]
 800352a:	f011 0f01 	tst.w	r1, #1
 800352e:	d1f2      	bne.n	8003516 <HAL_ADC_ConfigChannel+0x39a>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003530:	492f      	ldr	r1, [pc, #188]	@ (80035f0 <HAL_ADC_ConfigChannel+0x474>)
 8003532:	428b      	cmp	r3, r1
 8003534:	d007      	beq.n	8003546 <HAL_ADC_ConfigChannel+0x3ca>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003536:	492f      	ldr	r1, [pc, #188]	@ (80035f4 <HAL_ADC_ConfigChannel+0x478>)
 8003538:	428b      	cmp	r3, r1
 800353a:	d026      	beq.n	800358a <HAL_ADC_ConfigChannel+0x40e>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800353c:	492e      	ldr	r1, [pc, #184]	@ (80035f8 <HAL_ADC_ConfigChannel+0x47c>)
 800353e:	428b      	cmp	r3, r1
 8003540:	d034      	beq.n	80035ac <HAL_ADC_ConfigChannel+0x430>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003542:	2000      	movs	r0, #0
 8003544:	e632      	b.n	80031ac <HAL_ADC_ConfigChannel+0x30>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003546:	f415 0f00 	tst.w	r5, #8388608	@ 0x800000
 800354a:	d1f4      	bne.n	8003536 <HAL_ADC_ConfigChannel+0x3ba>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800354c:	4b27      	ldr	r3, [pc, #156]	@ (80035ec <HAL_ADC_ConfigChannel+0x470>)
 800354e:	429a      	cmp	r2, r3
 8003550:	d001      	beq.n	8003556 <HAL_ADC_ConfigChannel+0x3da>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003552:	2000      	movs	r0, #0
 8003554:	e62a      	b.n	80031ac <HAL_ADC_ConfigChannel+0x30>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003556:	f44c 0300 	orr.w	r3, ip, #8388608	@ 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800355a:	68b2      	ldr	r2, [r6, #8]
 800355c:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8003560:	4313      	orrs	r3, r2
 8003562:	60b3      	str	r3, [r6, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003564:	4b25      	ldr	r3, [pc, #148]	@ (80035fc <HAL_ADC_ConfigChannel+0x480>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	099b      	lsrs	r3, r3, #6
 800356a:	4a25      	ldr	r2, [pc, #148]	@ (8003600 <HAL_ADC_ConfigChannel+0x484>)
 800356c:	fba2 2303 	umull	r2, r3, r2, r3
 8003570:	099b      	lsrs	r3, r3, #6
 8003572:	3301      	adds	r3, #1
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	9301      	str	r3, [sp, #4]
              while (wait_loop_index != 0UL)
 8003578:	e002      	b.n	8003580 <HAL_ADC_ConfigChannel+0x404>
                wait_loop_index--;
 800357a:	9b01      	ldr	r3, [sp, #4]
 800357c:	3b01      	subs	r3, #1
 800357e:	9301      	str	r3, [sp, #4]
              while (wait_loop_index != 0UL)
 8003580:	9b01      	ldr	r3, [sp, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1f9      	bne.n	800357a <HAL_ADC_ConfigChannel+0x3fe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003586:	2000      	movs	r0, #0
 8003588:	e610      	b.n	80031ac <HAL_ADC_ConfigChannel+0x30>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800358a:	f015 7f80 	tst.w	r5, #16777216	@ 0x1000000
 800358e:	d1d5      	bne.n	800353c <HAL_ADC_ConfigChannel+0x3c0>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003590:	4b16      	ldr	r3, [pc, #88]	@ (80035ec <HAL_ADC_ConfigChannel+0x470>)
 8003592:	429a      	cmp	r2, r3
 8003594:	d001      	beq.n	800359a <HAL_ADC_ConfigChannel+0x41e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003596:	2000      	movs	r0, #0
 8003598:	e608      	b.n	80031ac <HAL_ADC_ConfigChannel+0x30>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800359a:	f04c 7380 	orr.w	r3, ip, #16777216	@ 0x1000000
 800359e:	68b2      	ldr	r2, [r6, #8]
 80035a0:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 80035a4:	4313      	orrs	r3, r2
 80035a6:	60b3      	str	r3, [r6, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035a8:	2000      	movs	r0, #0
}
 80035aa:	e5ff      	b.n	80031ac <HAL_ADC_ConfigChannel+0x30>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80035ac:	f415 0f80 	tst.w	r5, #4194304	@ 0x400000
 80035b0:	d10f      	bne.n	80035d2 <HAL_ADC_ConfigChannel+0x456>
            if (ADC_VREFINT_INSTANCE(hadc))
 80035b2:	4b0e      	ldr	r3, [pc, #56]	@ (80035ec <HAL_ADC_ConfigChannel+0x470>)
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d001      	beq.n	80035bc <HAL_ADC_ConfigChannel+0x440>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035b8:	2000      	movs	r0, #0
 80035ba:	e5f7      	b.n	80031ac <HAL_ADC_ConfigChannel+0x30>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80035bc:	f44c 0380 	orr.w	r3, ip, #4194304	@ 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80035c0:	68b2      	ldr	r2, [r6, #8]
 80035c2:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 80035c6:	4313      	orrs	r3, r2
 80035c8:	60b3      	str	r3, [r6, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035ca:	2000      	movs	r0, #0
}
 80035cc:	e5ee      	b.n	80031ac <HAL_ADC_ConfigChannel+0x30>
 80035ce:	2000      	movs	r0, #0
 80035d0:	e5ec      	b.n	80031ac <HAL_ADC_ConfigChannel+0x30>
 80035d2:	2000      	movs	r0, #0
 80035d4:	e5ea      	b.n	80031ac <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 80035d6:	2002      	movs	r0, #2
 80035d8:	e5eb      	b.n	80031b2 <HAL_ADC_ConfigChannel+0x36>
 80035da:	bf00      	nop
 80035dc:	40022000 	.word	0x40022000
 80035e0:	40022100 	.word	0x40022100
 80035e4:	40022300 	.word	0x40022300
 80035e8:	58026300 	.word	0x58026300
 80035ec:	58026000 	.word	0x58026000
 80035f0:	cb840000 	.word	0xcb840000
 80035f4:	c7520000 	.word	0xc7520000
 80035f8:	cfb80000 	.word	0xcfb80000
 80035fc:	24000004 	.word	0x24000004
 8003600:	053e2d63 	.word	0x053e2d63

08003604 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003604:	b538      	push	{r3, r4, r5, lr}
 8003606:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003608:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800360a:	6893      	ldr	r3, [r2, #8]
 800360c:	f013 0302 	ands.w	r3, r3, #2
 8003610:	d000      	beq.n	8003614 <ADC_Disable+0x10>
 8003612:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003614:	6891      	ldr	r1, [r2, #8]
 8003616:	f011 0f01 	tst.w	r1, #1
 800361a:	d037      	beq.n	800368c <ADC_Disable+0x88>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 800361c:	2b00      	cmp	r3, #0
 800361e:	d137      	bne.n	8003690 <ADC_Disable+0x8c>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003620:	6893      	ldr	r3, [r2, #8]
 8003622:	f003 030d 	and.w	r3, r3, #13
 8003626:	2b01      	cmp	r3, #1
 8003628:	d009      	beq.n	800363e <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800362a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800362c:	f043 0310 	orr.w	r3, r3, #16
 8003630:	6563      	str	r3, [r4, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003632:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003634:	f043 0301 	orr.w	r3, r3, #1
 8003638:	65a3      	str	r3, [r4, #88]	@ 0x58

      return HAL_ERROR;
 800363a:	2001      	movs	r0, #1
 800363c:	e027      	b.n	800368e <ADC_Disable+0x8a>
  MODIFY_REG(ADCx->CR,
 800363e:	6891      	ldr	r1, [r2, #8]
 8003640:	4b14      	ldr	r3, [pc, #80]	@ (8003694 <ADC_Disable+0x90>)
 8003642:	400b      	ands	r3, r1
 8003644:	f043 0302 	orr.w	r3, r3, #2
 8003648:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800364a:	6823      	ldr	r3, [r4, #0]
 800364c:	2203      	movs	r2, #3
 800364e:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003650:	f7ff fd46 	bl	80030e0 <HAL_GetTick>
 8003654:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003656:	6823      	ldr	r3, [r4, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f013 0f01 	tst.w	r3, #1
 800365e:	d013      	beq.n	8003688 <ADC_Disable+0x84>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003660:	f7ff fd3e 	bl	80030e0 <HAL_GetTick>
 8003664:	1b40      	subs	r0, r0, r5
 8003666:	2802      	cmp	r0, #2
 8003668:	d9f5      	bls.n	8003656 <ADC_Disable+0x52>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800366a:	6823      	ldr	r3, [r4, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f013 0f01 	tst.w	r3, #1
 8003672:	d0f0      	beq.n	8003656 <ADC_Disable+0x52>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003674:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003676:	f043 0310 	orr.w	r3, r3, #16
 800367a:	6563      	str	r3, [r4, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800367c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800367e:	f043 0301 	orr.w	r3, r3, #1
 8003682:	65a3      	str	r3, [r4, #88]	@ 0x58

          return HAL_ERROR;
 8003684:	2001      	movs	r0, #1
 8003686:	e002      	b.n	800368e <ADC_Disable+0x8a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003688:	2000      	movs	r0, #0
 800368a:	e000      	b.n	800368e <ADC_Disable+0x8a>
 800368c:	2000      	movs	r0, #0
}
 800368e:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8003690:	2000      	movs	r0, #0
 8003692:	e7fc      	b.n	800368e <ADC_Disable+0x8a>
 8003694:	7fffffc0 	.word	0x7fffffc0

08003698 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003698:	b538      	push	{r3, r4, r5, lr}
 800369a:	4604      	mov	r4, r0
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800369c:	6803      	ldr	r3, [r0, #0]
 800369e:	494f      	ldr	r1, [pc, #316]	@ (80037dc <ADC_ConfigureBoostMode+0x144>)
 80036a0:	4a4f      	ldr	r2, [pc, #316]	@ (80037e0 <ADC_ConfigureBoostMode+0x148>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	bf18      	it	ne
 80036a6:	428b      	cmpne	r3, r1
 80036a8:	d123      	bne.n	80036f2 <ADC_ConfigureBoostMode+0x5a>
 80036aa:	4b4e      	ldr	r3, [pc, #312]	@ (80037e4 <ADC_ConfigureBoostMode+0x14c>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 80036b2:	bf14      	ite	ne
 80036b4:	2301      	movne	r3, #1
 80036b6:	2300      	moveq	r3, #0
 80036b8:	b34b      	cbz	r3, 800370e <ADC_ConfigureBoostMode+0x76>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80036ba:	f003 ff1b 	bl	80074f4 <HAL_RCC_GetHCLKFreq>
 80036be:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 80036c0:	6863      	ldr	r3, [r4, #4]
 80036c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80036c6:	d01c      	beq.n	8003702 <ADC_ConfigureBoostMode+0x6a>
 80036c8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80036cc:	d01d      	beq.n	800370a <ADC_ConfigureBoostMode+0x72>
 80036ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036d2:	d016      	beq.n	8003702 <ADC_ConfigureBoostMode+0x6a>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80036d4:	f7ff fd1e 	bl	8003114 <HAL_GetREVID>
 80036d8:	f241 0303 	movw	r3, #4099	@ 0x1003
 80036dc:	4298      	cmp	r0, r3
 80036de:	d857      	bhi.n	8003790 <ADC_ConfigureBoostMode+0xf8>
  {
    if (freq > 20000000UL)
 80036e0:	4b41      	ldr	r3, [pc, #260]	@ (80037e8 <ADC_ConfigureBoostMode+0x150>)
 80036e2:	429d      	cmp	r5, r3
 80036e4:	d94e      	bls.n	8003784 <ADC_ConfigureBoostMode+0xec>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80036e6:	6822      	ldr	r2, [r4, #0]
 80036e8:	6893      	ldr	r3, [r2, #8]
 80036ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036ee:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80036f0:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80036f2:	4b3e      	ldr	r3, [pc, #248]	@ (80037ec <ADC_ConfigureBoostMode+0x154>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 80036fa:	bf14      	ite	ne
 80036fc:	2301      	movne	r3, #1
 80036fe:	2300      	moveq	r3, #0
 8003700:	e7da      	b.n	80036b8 <ADC_ConfigureBoostMode+0x20>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003702:	0c1b      	lsrs	r3, r3, #16
 8003704:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 8003708:	e7e4      	b.n	80036d4 <ADC_ConfigureBoostMode+0x3c>
        freq /= 4UL;
 800370a:	0885      	lsrs	r5, r0, #2
        break;
 800370c:	e7e2      	b.n	80036d4 <ADC_ConfigureBoostMode+0x3c>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800370e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003712:	f005 f859 	bl	80087c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003716:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8003718:	6863      	ldr	r3, [r4, #4]
 800371a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800371e:	d02d      	beq.n	800377c <ADC_ConfigureBoostMode+0xe4>
 8003720:	d822      	bhi.n	8003768 <ADC_ConfigureBoostMode+0xd0>
 8003722:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003726:	d027      	beq.n	8003778 <ADC_ConfigureBoostMode+0xe0>
 8003728:	d904      	bls.n	8003734 <ADC_ConfigureBoostMode+0x9c>
 800372a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800372e:	d1d1      	bne.n	80036d4 <ADC_ConfigureBoostMode+0x3c>
        freq /= 32UL;
 8003730:	0945      	lsrs	r5, r0, #5
        break;
 8003732:	e7cf      	b.n	80036d4 <ADC_ConfigureBoostMode+0x3c>
    switch (hadc->Init.ClockPrescaler)
 8003734:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003738:	d00d      	beq.n	8003756 <ADC_ConfigureBoostMode+0xbe>
 800373a:	d906      	bls.n	800374a <ADC_ConfigureBoostMode+0xb2>
 800373c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003740:	d009      	beq.n	8003756 <ADC_ConfigureBoostMode+0xbe>
 8003742:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003746:	d006      	beq.n	8003756 <ADC_ConfigureBoostMode+0xbe>
 8003748:	e7c4      	b.n	80036d4 <ADC_ConfigureBoostMode+0x3c>
 800374a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800374e:	d002      	beq.n	8003756 <ADC_ConfigureBoostMode+0xbe>
 8003750:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003754:	d104      	bne.n	8003760 <ADC_ConfigureBoostMode+0xc8>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003756:	0c9b      	lsrs	r3, r3, #18
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 800375e:	e7b9      	b.n	80036d4 <ADC_ConfigureBoostMode+0x3c>
    switch (hadc->Init.ClockPrescaler)
 8003760:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003764:	d0f7      	beq.n	8003756 <ADC_ConfigureBoostMode+0xbe>
 8003766:	e7b5      	b.n	80036d4 <ADC_ConfigureBoostMode+0x3c>
 8003768:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800376c:	d008      	beq.n	8003780 <ADC_ConfigureBoostMode+0xe8>
 800376e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003772:	d1af      	bne.n	80036d4 <ADC_ConfigureBoostMode+0x3c>
        freq /= 256UL;
 8003774:	0a05      	lsrs	r5, r0, #8
        break;
 8003776:	e7ad      	b.n	80036d4 <ADC_ConfigureBoostMode+0x3c>
        freq /= 16UL;
 8003778:	0905      	lsrs	r5, r0, #4
        break;
 800377a:	e7ab      	b.n	80036d4 <ADC_ConfigureBoostMode+0x3c>
        freq /= 64UL;
 800377c:	0985      	lsrs	r5, r0, #6
        break;
 800377e:	e7a9      	b.n	80036d4 <ADC_ConfigureBoostMode+0x3c>
        freq /= 128UL;
 8003780:	09c5      	lsrs	r5, r0, #7
        break;
 8003782:	e7a7      	b.n	80036d4 <ADC_ConfigureBoostMode+0x3c>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003784:	6822      	ldr	r2, [r4, #0]
 8003786:	6893      	ldr	r3, [r2, #8]
 8003788:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800378c:	6093      	str	r3, [r2, #8]
 800378e:	e7af      	b.n	80036f0 <ADC_ConfigureBoostMode+0x58>
    if (freq <= 6250000UL)
 8003790:	4b17      	ldr	r3, [pc, #92]	@ (80037f0 <ADC_ConfigureBoostMode+0x158>)
 8003792:	429d      	cmp	r5, r3
 8003794:	d805      	bhi.n	80037a2 <ADC_ConfigureBoostMode+0x10a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003796:	6822      	ldr	r2, [r4, #0]
 8003798:	6893      	ldr	r3, [r2, #8]
 800379a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800379e:	6093      	str	r3, [r2, #8]
 80037a0:	e7a6      	b.n	80036f0 <ADC_ConfigureBoostMode+0x58>
    else if (freq <= 12500000UL)
 80037a2:	4b14      	ldr	r3, [pc, #80]	@ (80037f4 <ADC_ConfigureBoostMode+0x15c>)
 80037a4:	429d      	cmp	r5, r3
 80037a6:	d807      	bhi.n	80037b8 <ADC_ConfigureBoostMode+0x120>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80037a8:	6822      	ldr	r2, [r4, #0]
 80037aa:	6893      	ldr	r3, [r2, #8]
 80037ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037b4:	6093      	str	r3, [r2, #8]
 80037b6:	e79b      	b.n	80036f0 <ADC_ConfigureBoostMode+0x58>
    else if (freq <= 25000000UL)
 80037b8:	4b0f      	ldr	r3, [pc, #60]	@ (80037f8 <ADC_ConfigureBoostMode+0x160>)
 80037ba:	429d      	cmp	r5, r3
 80037bc:	d807      	bhi.n	80037ce <ADC_ConfigureBoostMode+0x136>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80037be:	6822      	ldr	r2, [r4, #0]
 80037c0:	6893      	ldr	r3, [r2, #8]
 80037c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80037ca:	6093      	str	r3, [r2, #8]
 80037cc:	e790      	b.n	80036f0 <ADC_ConfigureBoostMode+0x58>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80037ce:	6822      	ldr	r2, [r4, #0]
 80037d0:	6893      	ldr	r3, [r2, #8]
 80037d2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80037d6:	6093      	str	r3, [r2, #8]
}
 80037d8:	e78a      	b.n	80036f0 <ADC_ConfigureBoostMode+0x58>
 80037da:	bf00      	nop
 80037dc:	40022000 	.word	0x40022000
 80037e0:	40022100 	.word	0x40022100
 80037e4:	40022300 	.word	0x40022300
 80037e8:	01312d00 	.word	0x01312d00
 80037ec:	58026300 	.word	0x58026300
 80037f0:	00bebc21 	.word	0x00bebc21
 80037f4:	017d7841 	.word	0x017d7841
 80037f8:	02faf081 	.word	0x02faf081

080037fc <HAL_ADC_Init>:
{
 80037fc:	b530      	push	{r4, r5, lr}
 80037fe:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8003800:	2300      	movs	r3, #0
 8003802:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8003804:	2800      	cmp	r0, #0
 8003806:	f000 810a 	beq.w	8003a1e <HAL_ADC_Init+0x222>
 800380a:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 800380c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800380e:	b1eb      	cbz	r3, 800384c <HAL_ADC_Init+0x50>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003810:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003812:	689a      	ldr	r2, [r3, #8]
 8003814:	f012 5f00 	tst.w	r2, #536870912	@ 0x20000000
 8003818:	d003      	beq.n	8003822 <HAL_ADC_Init+0x26>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800381a:	6899      	ldr	r1, [r3, #8]
 800381c:	4a81      	ldr	r2, [pc, #516]	@ (8003a24 <HAL_ADC_Init+0x228>)
 800381e:	400a      	ands	r2, r1
 8003820:	609a      	str	r2, [r3, #8]
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003822:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003824:	689a      	ldr	r2, [r3, #8]
 8003826:	f012 5f80 	tst.w	r2, #268435456	@ 0x10000000
 800382a:	d11c      	bne.n	8003866 <HAL_ADC_Init+0x6a>
  MODIFY_REG(ADCx->CR,
 800382c:	6899      	ldr	r1, [r3, #8]
 800382e:	4a7e      	ldr	r2, [pc, #504]	@ (8003a28 <HAL_ADC_Init+0x22c>)
 8003830:	400a      	ands	r2, r1
 8003832:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003836:	609a      	str	r2, [r3, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003838:	4b7c      	ldr	r3, [pc, #496]	@ (8003a2c <HAL_ADC_Init+0x230>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	099b      	lsrs	r3, r3, #6
 800383e:	4a7c      	ldr	r2, [pc, #496]	@ (8003a30 <HAL_ADC_Init+0x234>)
 8003840:	fba2 2303 	umull	r2, r3, r2, r3
 8003844:	099b      	lsrs	r3, r3, #6
 8003846:	3301      	adds	r3, #1
 8003848:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800384a:	e009      	b.n	8003860 <HAL_ADC_Init+0x64>
    HAL_ADC_MspInit(hadc);
 800384c:	f7fe fbe0 	bl	8002010 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003850:	2300      	movs	r3, #0
 8003852:	65a3      	str	r3, [r4, #88]	@ 0x58
    hadc->Lock = HAL_UNLOCKED;
 8003854:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
 8003858:	e7da      	b.n	8003810 <HAL_ADC_Init+0x14>
      wait_loop_index--;
 800385a:	9b01      	ldr	r3, [sp, #4]
 800385c:	3b01      	subs	r3, #1
 800385e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003860:	9b01      	ldr	r3, [sp, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1f9      	bne.n	800385a <HAL_ADC_Init+0x5e>
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003866:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003868:	6893      	ldr	r3, [r2, #8]
 800386a:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800386e:	f040 8099 	bne.w	80039a4 <HAL_ADC_Init+0x1a8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003872:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003874:	f043 0310 	orr.w	r3, r3, #16
 8003878:	6563      	str	r3, [r4, #84]	@ 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800387a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800387c:	f043 0301 	orr.w	r3, r3, #1
 8003880:	65a3      	str	r3, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 8003882:	2501      	movs	r5, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003884:	6893      	ldr	r3, [r2, #8]
 8003886:	f013 0304 	ands.w	r3, r3, #4
 800388a:	d000      	beq.n	800388e <HAL_ADC_Init+0x92>
 800388c:	2301      	movs	r3, #1
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800388e:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8003890:	f011 0f10 	tst.w	r1, #16
 8003894:	f040 80bb 	bne.w	8003a0e <HAL_ADC_Init+0x212>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003898:	2b00      	cmp	r3, #0
 800389a:	f040 80b8 	bne.w	8003a0e <HAL_ADC_Init+0x212>
    ADC_STATE_CLR_SET(hadc->State,
 800389e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80038a0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80038a4:	f043 0302 	orr.w	r3, r3, #2
 80038a8:	6563      	str	r3, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038aa:	6893      	ldr	r3, [r2, #8]
 80038ac:	f013 0f01 	tst.w	r3, #1
 80038b0:	d11e      	bne.n	80038f0 <HAL_ADC_Init+0xf4>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038b2:	4960      	ldr	r1, [pc, #384]	@ (8003a34 <HAL_ADC_Init+0x238>)
 80038b4:	4b60      	ldr	r3, [pc, #384]	@ (8003a38 <HAL_ADC_Init+0x23c>)
 80038b6:	429a      	cmp	r2, r3
 80038b8:	bf18      	it	ne
 80038ba:	428a      	cmpne	r2, r1
 80038bc:	bf0c      	ite	eq
 80038be:	2201      	moveq	r2, #1
 80038c0:	2200      	movne	r2, #0
 80038c2:	d171      	bne.n	80039a8 <HAL_ADC_Init+0x1ac>
 80038c4:	6889      	ldr	r1, [r1, #8]
 80038c6:	f011 0101 	ands.w	r1, r1, #1
 80038ca:	d000      	beq.n	80038ce <HAL_ADC_Init+0xd2>
 80038cc:	2101      	movs	r1, #1
 80038ce:	4b5a      	ldr	r3, [pc, #360]	@ (8003a38 <HAL_ADC_Init+0x23c>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f013 0301 	ands.w	r3, r3, #1
 80038d6:	d000      	beq.n	80038da <HAL_ADC_Init+0xde>
 80038d8:	2301      	movs	r3, #1
 80038da:	430b      	orrs	r3, r1
 80038dc:	d108      	bne.n	80038f0 <HAL_ADC_Init+0xf4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80038de:	2a00      	cmp	r2, #0
 80038e0:	d068      	beq.n	80039b4 <HAL_ADC_Init+0x1b8>
 80038e2:	4956      	ldr	r1, [pc, #344]	@ (8003a3c <HAL_ADC_Init+0x240>)
 80038e4:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80038e6:	688a      	ldr	r2, [r1, #8]
 80038e8:	f422 127c 	bic.w	r2, r2, #4128768	@ 0x3f0000
 80038ec:	4313      	orrs	r3, r2
 80038ee:	608b      	str	r3, [r1, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80038f0:	f7ff fc10 	bl	8003114 <HAL_GetREVID>
 80038f4:	f241 0303 	movw	r3, #4099	@ 0x1003
 80038f8:	4298      	cmp	r0, r3
 80038fa:	d902      	bls.n	8003902 <HAL_ADC_Init+0x106>
 80038fc:	68a3      	ldr	r3, [r4, #8]
 80038fe:	2b10      	cmp	r3, #16
 8003900:	d05a      	beq.n	80039b8 <HAL_ADC_Init+0x1bc>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003902:	7d62      	ldrb	r2, [r4, #21]
                  hadc->Init.Overrun                                                    |
 8003904:	6b23      	ldr	r3, [r4, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003906:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                  hadc->Init.Resolution                                                 |
 800390a:	68a2      	ldr	r2, [r4, #8]
                  hadc->Init.Overrun                                                    |
 800390c:	4313      	orrs	r3, r2
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800390e:	7f22      	ldrb	r2, [r4, #28]
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003910:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003914:	7f22      	ldrb	r2, [r4, #28]
 8003916:	2a01      	cmp	r2, #1
 8003918:	d059      	beq.n	80039ce <HAL_ADC_Init+0x1d2>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800391a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800391c:	b122      	cbz	r2, 8003928 <HAL_ADC_Init+0x12c>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800391e:	f402 7278 	and.w	r2, r2, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003922:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8003924:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003926:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003928:	6821      	ldr	r1, [r4, #0]
 800392a:	68c8      	ldr	r0, [r1, #12]
 800392c:	4a44      	ldr	r2, [pc, #272]	@ (8003a40 <HAL_ADC_Init+0x244>)
 800392e:	4002      	ands	r2, r0
 8003930:	431a      	orrs	r2, r3
 8003932:	60ca      	str	r2, [r1, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003934:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003936:	688a      	ldr	r2, [r1, #8]
 8003938:	f012 0204 	ands.w	r2, r2, #4
 800393c:	d000      	beq.n	8003940 <HAL_ADC_Init+0x144>
 800393e:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003940:	688b      	ldr	r3, [r1, #8]
 8003942:	f013 0308 	ands.w	r3, r3, #8
 8003946:	d000      	beq.n	800394a <HAL_ADC_Init+0x14e>
 8003948:	2301      	movs	r3, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800394a:	4313      	orrs	r3, r2
 800394c:	d11b      	bne.n	8003986 <HAL_ADC_Init+0x18a>
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800394e:	7d22      	ldrb	r2, [r4, #20]
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003950:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
      tmpCFGR = (
 8003952:	ea43 3282 	orr.w	r2, r3, r2, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003956:	68c8      	ldr	r0, [r1, #12]
 8003958:	4b3a      	ldr	r3, [pc, #232]	@ (8003a44 <HAL_ADC_Init+0x248>)
 800395a:	4003      	ands	r3, r0
 800395c:	4313      	orrs	r3, r2
 800395e:	60cb      	str	r3, [r1, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8003960:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8003964:	2b01      	cmp	r3, #1
 8003966:	d037      	beq.n	80039d8 <HAL_ADC_Init+0x1dc>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003968:	6822      	ldr	r2, [r4, #0]
 800396a:	6913      	ldr	r3, [r2, #16]
 800396c:	f023 0301 	bic.w	r3, r3, #1
 8003970:	6113      	str	r3, [r2, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003972:	6822      	ldr	r2, [r4, #0]
 8003974:	6913      	ldr	r3, [r2, #16]
 8003976:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800397a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800397c:	430b      	orrs	r3, r1
 800397e:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 8003980:	4620      	mov	r0, r4
 8003982:	f7ff fe89 	bl	8003698 <ADC_ConfigureBoostMode>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003986:	68e3      	ldr	r3, [r4, #12]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d037      	beq.n	80039fc <HAL_ADC_Init+0x200>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800398c:	6822      	ldr	r2, [r4, #0]
 800398e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8003990:	f023 030f 	bic.w	r3, r3, #15
 8003994:	6313      	str	r3, [r2, #48]	@ 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003996:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003998:	f023 0303 	bic.w	r3, r3, #3
 800399c:	f043 0301 	orr.w	r3, r3, #1
 80039a0:	6563      	str	r3, [r4, #84]	@ 0x54
 80039a2:	e039      	b.n	8003a18 <HAL_ADC_Init+0x21c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039a4:	2500      	movs	r5, #0
 80039a6:	e76d      	b.n	8003884 <HAL_ADC_Init+0x88>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80039a8:	4b27      	ldr	r3, [pc, #156]	@ (8003a48 <HAL_ADC_Init+0x24c>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f013 0f01 	tst.w	r3, #1
 80039b0:	d19e      	bne.n	80038f0 <HAL_ADC_Init+0xf4>
 80039b2:	e794      	b.n	80038de <HAL_ADC_Init+0xe2>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80039b4:	4925      	ldr	r1, [pc, #148]	@ (8003a4c <HAL_ADC_Init+0x250>)
 80039b6:	e795      	b.n	80038e4 <HAL_ADC_Init+0xe8>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80039b8:	7d61      	ldrb	r1, [r4, #21]
                  hadc->Init.Overrun                                                    |
 80039ba:	6b22      	ldr	r2, [r4, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80039bc:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
                  hadc->Init.Overrun                                                    |
 80039c0:	4313      	orrs	r3, r2
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80039c2:	7f22      	ldrb	r2, [r4, #28]
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80039c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80039c8:	f043 030c 	orr.w	r3, r3, #12
 80039cc:	e7a2      	b.n	8003914 <HAL_ADC_Init+0x118>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80039ce:	6a22      	ldr	r2, [r4, #32]
 80039d0:	3a01      	subs	r2, #1
 80039d2:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80039d6:	e7a0      	b.n	800391a <HAL_ADC_Init+0x11e>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80039d8:	6820      	ldr	r0, [r4, #0]
 80039da:	6902      	ldr	r2, [r0, #16]
 80039dc:	4b1c      	ldr	r3, [pc, #112]	@ (8003a50 <HAL_ADC_Init+0x254>)
 80039de:	4013      	ands	r3, r2
 80039e0:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80039e2:	1e51      	subs	r1, r2, #1
 80039e4:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80039e6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80039ea:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80039ec:	430a      	orrs	r2, r1
 80039ee:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80039f0:	430a      	orrs	r2, r1
 80039f2:	4313      	orrs	r3, r2
 80039f4:	f043 0301 	orr.w	r3, r3, #1
 80039f8:	6103      	str	r3, [r0, #16]
 80039fa:	e7ba      	b.n	8003972 <HAL_ADC_Init+0x176>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80039fc:	6821      	ldr	r1, [r4, #0]
 80039fe:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8003a00:	f023 030f 	bic.w	r3, r3, #15
 8003a04:	69a2      	ldr	r2, [r4, #24]
 8003a06:	3a01      	subs	r2, #1
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	630b      	str	r3, [r1, #48]	@ 0x30
 8003a0c:	e7c3      	b.n	8003996 <HAL_ADC_Init+0x19a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a0e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003a10:	f043 0310 	orr.w	r3, r3, #16
 8003a14:	6563      	str	r3, [r4, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 8003a16:	2501      	movs	r5, #1
}
 8003a18:	4628      	mov	r0, r5
 8003a1a:	b003      	add	sp, #12
 8003a1c:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8003a1e:	2501      	movs	r5, #1
 8003a20:	e7fa      	b.n	8003a18 <HAL_ADC_Init+0x21c>
 8003a22:	bf00      	nop
 8003a24:	5fffffc0 	.word	0x5fffffc0
 8003a28:	6fffffc0 	.word	0x6fffffc0
 8003a2c:	24000004 	.word	0x24000004
 8003a30:	053e2d63 	.word	0x053e2d63
 8003a34:	40022000 	.word	0x40022000
 8003a38:	40022100 	.word	0x40022100
 8003a3c:	40022300 	.word	0x40022300
 8003a40:	fff0c003 	.word	0xfff0c003
 8003a44:	ffffbffc 	.word	0xffffbffc
 8003a48:	58026000 	.word	0x58026000
 8003a4c:	58026300 	.word	0x58026300
 8003a50:	fc00f81e 	.word	0xfc00f81e

08003a54 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003a54:	b570      	push	{r4, r5, r6, lr}
 8003a56:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a5c:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d043      	beq.n	8003aec <HAL_ADCEx_Calibration_Start+0x98>
 8003a64:	4604      	mov	r4, r0
 8003a66:	460d      	mov	r5, r1
 8003a68:	4616      	mov	r6, r2
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003a70:	f7ff fdc8 	bl	8003604 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003a74:	2800      	cmp	r0, #0
 8003a76:	d130      	bne.n	8003ada <HAL_ADCEx_Calibration_Start+0x86>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a78:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003a7a:	4b1d      	ldr	r3, [pc, #116]	@ (8003af0 <HAL_ADCEx_Calibration_Start+0x9c>)
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	f043 0302 	orr.w	r3, r3, #2
 8003a82:	6563      	str	r3, [r4, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8003a84:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003a86:	688a      	ldr	r2, [r1, #8]
 8003a88:	4b1a      	ldr	r3, [pc, #104]	@ (8003af4 <HAL_ADCEx_Calibration_Start+0xa0>)
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	f405 3580 	and.w	r5, r5, #65536	@ 0x10000
 8003a90:	f006 4680 	and.w	r6, r6, #1073741824	@ 0x40000000
 8003a94:	ea45 0206 	orr.w	r2, r5, r6
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003a9e:	608b      	str	r3, [r1, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003aa0:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	db06      	blt.n	8003ab6 <HAL_ADCEx_Calibration_Start+0x62>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003aa8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003aaa:	f023 0303 	bic.w	r3, r3, #3
 8003aae:	f043 0301 	orr.w	r3, r3, #1
 8003ab2:	6563      	str	r3, [r4, #84]	@ 0x54
 8003ab4:	e015      	b.n	8003ae2 <HAL_ADCEx_Calibration_Start+0x8e>
      wait_loop_index++;
 8003ab6:	9b01      	ldr	r3, [sp, #4]
 8003ab8:	3301      	adds	r3, #1
 8003aba:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003abc:	9a01      	ldr	r2, [sp, #4]
 8003abe:	4b0e      	ldr	r3, [pc, #56]	@ (8003af8 <HAL_ADCEx_Calibration_Start+0xa4>)
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d3ed      	bcc.n	8003aa0 <HAL_ADCEx_Calibration_Start+0x4c>
        ADC_STATE_CLR_SET(hadc->State,
 8003ac4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003ac6:	f023 0312 	bic.w	r3, r3, #18
 8003aca:	f043 0310 	orr.w	r3, r3, #16
 8003ace:	6563      	str	r3, [r4, #84]	@ 0x54
        __HAL_UNLOCK(hadc);
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_ERROR;
 8003ad6:	2001      	movs	r0, #1
 8003ad8:	e006      	b.n	8003ae8 <HAL_ADCEx_Calibration_Start+0x94>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ada:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003adc:	f043 0310 	orr.w	r3, r3, #16
 8003ae0:	6563      	str	r3, [r4, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8003ae8:	b002      	add	sp, #8
 8003aea:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hadc);
 8003aec:	2002      	movs	r0, #2
 8003aee:	e7fb      	b.n	8003ae8 <HAL_ADCEx_Calibration_Start+0x94>
 8003af0:	ffffeefd 	.word	0xffffeefd
 8003af4:	3ffeffc0 	.word	0x3ffeffc0
 8003af8:	25c3f800 	.word	0x25c3f800

08003afc <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003afc:	f890 2050 	ldrb.w	r2, [r0, #80]	@ 0x50
 8003b00:	2a01      	cmp	r2, #1
 8003b02:	f000 8096 	beq.w	8003c32 <HAL_ADCEx_MultiModeConfigChannel+0x136>
{
 8003b06:	b430      	push	{r4, r5}
 8003b08:	b09a      	sub	sp, #104	@ 0x68
 8003b0a:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f880 2050 	strb.w	r2, [r0, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003b12:	2200      	movs	r2, #0
 8003b14:	9216      	str	r2, [sp, #88]	@ 0x58
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003b16:	9217      	str	r2, [sp, #92]	@ 0x5c

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003b18:	6800      	ldr	r0, [r0, #0]
 8003b1a:	4a47      	ldr	r2, [pc, #284]	@ (8003c38 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003b1c:	4290      	cmp	r0, r2
 8003b1e:	d036      	beq.n	8003b8e <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8003b20:	2200      	movs	r2, #0
 8003b22:	9201      	str	r2, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 8003b24:	9a01      	ldr	r2, [sp, #4]
 8003b26:	2a00      	cmp	r2, #0
 8003b28:	d035      	beq.n	8003b96 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b2a:	6892      	ldr	r2, [r2, #8]
 8003b2c:	f012 0204 	ands.w	r2, r2, #4
 8003b30:	d000      	beq.n	8003b34 <HAL_ADCEx_MultiModeConfigChannel+0x38>
 8003b32:	2201      	movs	r2, #1
 8003b34:	6884      	ldr	r4, [r0, #8]
 8003b36:	f014 0f04 	tst.w	r4, #4
 8003b3a:	d16b      	bne.n	8003c14 <HAL_ADCEx_MultiModeConfigChannel+0x118>
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003b3c:	2a00      	cmp	r2, #0
 8003b3e:	d169      	bne.n	8003c14 <HAL_ADCEx_MultiModeConfigChannel+0x118>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003b40:	4c3d      	ldr	r4, [pc, #244]	@ (8003c38 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003b42:	4a3e      	ldr	r2, [pc, #248]	@ (8003c3c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003b44:	4290      	cmp	r0, r2
 8003b46:	bf18      	it	ne
 8003b48:	42a0      	cmpne	r0, r4
 8003b4a:	d12d      	bne.n	8003ba8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003b4c:	f502 7200 	add.w	r2, r2, #512	@ 0x200

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b50:	6808      	ldr	r0, [r1, #0]
 8003b52:	2800      	cmp	r0, #0
 8003b54:	d039      	beq.n	8003bca <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003b56:	6890      	ldr	r0, [r2, #8]
 8003b58:	f420 4040 	bic.w	r0, r0, #49152	@ 0xc000
 8003b5c:	684c      	ldr	r4, [r1, #4]
 8003b5e:	4320      	orrs	r0, r4
 8003b60:	6090      	str	r0, [r2, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b62:	6818      	ldr	r0, [r3, #0]
 8003b64:	4d34      	ldr	r5, [pc, #208]	@ (8003c38 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003b66:	4c35      	ldr	r4, [pc, #212]	@ (8003c3c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003b68:	42a0      	cmp	r0, r4
 8003b6a:	bf18      	it	ne
 8003b6c:	42a8      	cmpne	r0, r5
 8003b6e:	d11d      	bne.n	8003bac <HAL_ADCEx_MultiModeConfigChannel+0xb0>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b70:	68ac      	ldr	r4, [r5, #8]
 8003b72:	f014 0401 	ands.w	r4, r4, #1
 8003b76:	d000      	beq.n	8003b7a <HAL_ADCEx_MultiModeConfigChannel+0x7e>
 8003b78:	2401      	movs	r4, #1
 8003b7a:	4830      	ldr	r0, [pc, #192]	@ (8003c3c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003b7c:	6880      	ldr	r0, [r0, #8]
 8003b7e:	f010 0001 	ands.w	r0, r0, #1
 8003b82:	d000      	beq.n	8003b86 <HAL_ADCEx_MultiModeConfigChannel+0x8a>
 8003b84:	2001      	movs	r0, #1
 8003b86:	4320      	orrs	r0, r4
 8003b88:	d015      	beq.n	8003bb6 <HAL_ADCEx_MultiModeConfigChannel+0xba>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b8a:	2000      	movs	r0, #0
 8003b8c:	e047      	b.n	8003c1e <HAL_ADCEx_MultiModeConfigChannel+0x122>
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003b8e:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8003b92:	9201      	str	r2, [sp, #4]
 8003b94:	e7c6      	b.n	8003b24 <HAL_ADCEx_MultiModeConfigChannel+0x28>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b96:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b98:	f042 0220 	orr.w	r2, r2, #32
 8003b9c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hadc);
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003ba4:	2001      	movs	r0, #1
 8003ba6:	e03d      	b.n	8003c24 <HAL_ADCEx_MultiModeConfigChannel+0x128>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003ba8:	4a25      	ldr	r2, [pc, #148]	@ (8003c40 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003baa:	e7d1      	b.n	8003b50 <HAL_ADCEx_MultiModeConfigChannel+0x54>
 8003bac:	4825      	ldr	r0, [pc, #148]	@ (8003c44 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003bae:	6880      	ldr	r0, [r0, #8]
 8003bb0:	f010 0f01 	tst.w	r0, #1
 8003bb4:	d139      	bne.n	8003c2a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003bb6:	6894      	ldr	r4, [r2, #8]
 8003bb8:	4823      	ldr	r0, [pc, #140]	@ (8003c48 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003bba:	4020      	ands	r0, r4
 8003bbc:	680c      	ldr	r4, [r1, #0]
 8003bbe:	6889      	ldr	r1, [r1, #8]
 8003bc0:	4321      	orrs	r1, r4
 8003bc2:	4308      	orrs	r0, r1
 8003bc4:	6090      	str	r0, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bc6:	2000      	movs	r0, #0
 8003bc8:	e029      	b.n	8003c1e <HAL_ADCEx_MultiModeConfigChannel+0x122>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003bca:	6891      	ldr	r1, [r2, #8]
 8003bcc:	f421 4140 	bic.w	r1, r1, #49152	@ 0xc000
 8003bd0:	6091      	str	r1, [r2, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003bd2:	6819      	ldr	r1, [r3, #0]
 8003bd4:	4c18      	ldr	r4, [pc, #96]	@ (8003c38 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003bd6:	4819      	ldr	r0, [pc, #100]	@ (8003c3c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003bd8:	4281      	cmp	r1, r0
 8003bda:	bf18      	it	ne
 8003bdc:	42a1      	cmpne	r1, r4
 8003bde:	d10e      	bne.n	8003bfe <HAL_ADCEx_MultiModeConfigChannel+0x102>
 8003be0:	68a0      	ldr	r0, [r4, #8]
 8003be2:	f010 0001 	ands.w	r0, r0, #1
 8003be6:	d000      	beq.n	8003bea <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8003be8:	2001      	movs	r0, #1
 8003bea:	4914      	ldr	r1, [pc, #80]	@ (8003c3c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003bec:	6889      	ldr	r1, [r1, #8]
 8003bee:	f011 0101 	ands.w	r1, r1, #1
 8003bf2:	d000      	beq.n	8003bf6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	4301      	orrs	r1, r0
 8003bf8:	d006      	beq.n	8003c08 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bfa:	2000      	movs	r0, #0
 8003bfc:	e00f      	b.n	8003c1e <HAL_ADCEx_MultiModeConfigChannel+0x122>
 8003bfe:	4911      	ldr	r1, [pc, #68]	@ (8003c44 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003c00:	6889      	ldr	r1, [r1, #8]
 8003c02:	f011 0f01 	tst.w	r1, #1
 8003c06:	d112      	bne.n	8003c2e <HAL_ADCEx_MultiModeConfigChannel+0x132>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003c08:	6890      	ldr	r0, [r2, #8]
 8003c0a:	490f      	ldr	r1, [pc, #60]	@ (8003c48 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003c0c:	4001      	ands	r1, r0
 8003c0e:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c10:	2000      	movs	r0, #0
 8003c12:	e004      	b.n	8003c1e <HAL_ADCEx_MultiModeConfigChannel+0x122>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c14:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003c16:	f042 0220 	orr.w	r2, r2, #32
 8003c1a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003c1c:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8003c24:	b01a      	add	sp, #104	@ 0x68
 8003c26:	bc30      	pop	{r4, r5}
 8003c28:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c2a:	2000      	movs	r0, #0
 8003c2c:	e7f7      	b.n	8003c1e <HAL_ADCEx_MultiModeConfigChannel+0x122>
 8003c2e:	2000      	movs	r0, #0
 8003c30:	e7f5      	b.n	8003c1e <HAL_ADCEx_MultiModeConfigChannel+0x122>
  __HAL_LOCK(hadc);
 8003c32:	2002      	movs	r0, #2
}
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	40022000 	.word	0x40022000
 8003c3c:	40022100 	.word	0x40022100
 8003c40:	58026300 	.word	0x58026300
 8003c44:	58026000 	.word	0x58026000
 8003c48:	fffff0e0 	.word	0xfffff0e0

08003c4c <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8003c4c:	2800      	cmp	r0, #0
 8003c4e:	db07      	blt.n	8003c60 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c50:	f000 021f 	and.w	r2, r0, #31
 8003c54:	0940      	lsrs	r0, r0, #5
 8003c56:	2301      	movs	r3, #1
 8003c58:	4093      	lsls	r3, r2
 8003c5a:	4a02      	ldr	r2, [pc, #8]	@ (8003c64 <__NVIC_EnableIRQ+0x18>)
 8003c5c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	e000e100 	.word	0xe000e100

08003c68 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8003c68:	2800      	cmp	r0, #0
 8003c6a:	db04      	blt.n	8003c76 <__NVIC_SetPriority+0xe>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c6c:	0109      	lsls	r1, r1, #4
 8003c6e:	b2c9      	uxtb	r1, r1
 8003c70:	4b04      	ldr	r3, [pc, #16]	@ (8003c84 <__NVIC_SetPriority+0x1c>)
 8003c72:	5419      	strb	r1, [r3, r0]
 8003c74:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c76:	f000 000f 	and.w	r0, r0, #15
 8003c7a:	0109      	lsls	r1, r1, #4
 8003c7c:	b2c9      	uxtb	r1, r1
 8003c7e:	4b02      	ldr	r3, [pc, #8]	@ (8003c88 <__NVIC_SetPriority+0x20>)
 8003c80:	5419      	strb	r1, [r3, r0]
  }
}
 8003c82:	4770      	bx	lr
 8003c84:	e000e400 	.word	0xe000e400
 8003c88:	e000ed14 	.word	0xe000ed14

08003c8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c8c:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c8e:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c92:	f1c0 0c07 	rsb	ip, r0, #7
 8003c96:	f1bc 0f04 	cmp.w	ip, #4
 8003c9a:	bf28      	it	cs
 8003c9c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ca0:	1d03      	adds	r3, r0, #4
 8003ca2:	2b06      	cmp	r3, #6
 8003ca4:	d90f      	bls.n	8003cc6 <NVIC_EncodePriority+0x3a>
 8003ca6:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ca8:	f04f 3eff 	mov.w	lr, #4294967295
 8003cac:	fa0e f00c 	lsl.w	r0, lr, ip
 8003cb0:	ea21 0100 	bic.w	r1, r1, r0
 8003cb4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cb6:	fa0e fe03 	lsl.w	lr, lr, r3
 8003cba:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8003cbe:	ea41 0002 	orr.w	r0, r1, r2
 8003cc2:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	e7ee      	b.n	8003ca8 <NVIC_EncodePriority+0x1c>
	...

08003ccc <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ccc:	4906      	ldr	r1, [pc, #24]	@ (8003ce8 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8003cce:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cd0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003cd4:	041b      	lsls	r3, r3, #16
 8003cd6:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cd8:	0200      	lsls	r0, r0, #8
 8003cda:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cde:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8003ce0:	4a02      	ldr	r2, [pc, #8]	@ (8003cec <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003ce2:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8003ce4:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003ce6:	4770      	bx	lr
 8003ce8:	e000ed00 	.word	0xe000ed00
 8003cec:	05fa0000 	.word	0x05fa0000

08003cf0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cf0:	b510      	push	{r4, lr}
 8003cf2:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cf4:	4b05      	ldr	r3, [pc, #20]	@ (8003d0c <HAL_NVIC_SetPriority+0x1c>)
 8003cf6:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cf8:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8003cfc:	f7ff ffc6 	bl	8003c8c <NVIC_EncodePriority>
 8003d00:	4601      	mov	r1, r0
 8003d02:	4620      	mov	r0, r4
 8003d04:	f7ff ffb0 	bl	8003c68 <__NVIC_SetPriority>
}
 8003d08:	bd10      	pop	{r4, pc}
 8003d0a:	bf00      	nop
 8003d0c:	e000ed00 	.word	0xe000ed00

08003d10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d10:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d12:	f7ff ff9b 	bl	8003c4c <__NVIC_EnableIRQ>
}
 8003d16:	bd08      	pop	{r3, pc}

08003d18 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d18:	b4f0      	push	{r4, r5, r6, r7}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d1a:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d1c:	6804      	ldr	r4, [r0, #0]
 8003d1e:	4e66      	ldr	r6, [pc, #408]	@ (8003eb8 <DMA_SetConfig+0x1a0>)
 8003d20:	4d66      	ldr	r5, [pc, #408]	@ (8003ebc <DMA_SetConfig+0x1a4>)
 8003d22:	42ac      	cmp	r4, r5
 8003d24:	bf18      	it	ne
 8003d26:	42b4      	cmpne	r4, r6
 8003d28:	d042      	beq.n	8003db0 <DMA_SetConfig+0x98>
 8003d2a:	3518      	adds	r5, #24
 8003d2c:	42ac      	cmp	r4, r5
 8003d2e:	d03f      	beq.n	8003db0 <DMA_SetConfig+0x98>
 8003d30:	3518      	adds	r5, #24
 8003d32:	42ac      	cmp	r4, r5
 8003d34:	d03c      	beq.n	8003db0 <DMA_SetConfig+0x98>
 8003d36:	3518      	adds	r5, #24
 8003d38:	42ac      	cmp	r4, r5
 8003d3a:	d039      	beq.n	8003db0 <DMA_SetConfig+0x98>
 8003d3c:	3518      	adds	r5, #24
 8003d3e:	42ac      	cmp	r4, r5
 8003d40:	d036      	beq.n	8003db0 <DMA_SetConfig+0x98>
 8003d42:	3518      	adds	r5, #24
 8003d44:	42ac      	cmp	r4, r5
 8003d46:	d033      	beq.n	8003db0 <DMA_SetConfig+0x98>
 8003d48:	3518      	adds	r5, #24
 8003d4a:	42ac      	cmp	r4, r5
 8003d4c:	d030      	beq.n	8003db0 <DMA_SetConfig+0x98>
 8003d4e:	f505 7556 	add.w	r5, r5, #856	@ 0x358
 8003d52:	42ac      	cmp	r4, r5
 8003d54:	d02c      	beq.n	8003db0 <DMA_SetConfig+0x98>
 8003d56:	3518      	adds	r5, #24
 8003d58:	42ac      	cmp	r4, r5
 8003d5a:	d029      	beq.n	8003db0 <DMA_SetConfig+0x98>
 8003d5c:	3518      	adds	r5, #24
 8003d5e:	42ac      	cmp	r4, r5
 8003d60:	d026      	beq.n	8003db0 <DMA_SetConfig+0x98>
 8003d62:	3518      	adds	r5, #24
 8003d64:	42ac      	cmp	r4, r5
 8003d66:	d023      	beq.n	8003db0 <DMA_SetConfig+0x98>
 8003d68:	3518      	adds	r5, #24
 8003d6a:	42ac      	cmp	r4, r5
 8003d6c:	d020      	beq.n	8003db0 <DMA_SetConfig+0x98>
 8003d6e:	3518      	adds	r5, #24
 8003d70:	42ac      	cmp	r4, r5
 8003d72:	d01d      	beq.n	8003db0 <DMA_SetConfig+0x98>
 8003d74:	3518      	adds	r5, #24
 8003d76:	42ac      	cmp	r4, r5
 8003d78:	d01a      	beq.n	8003db0 <DMA_SetConfig+0x98>
 8003d7a:	3518      	adds	r5, #24
 8003d7c:	42ac      	cmp	r4, r5
 8003d7e:	d017      	beq.n	8003db0 <DMA_SetConfig+0x98>
 8003d80:	4d4f      	ldr	r5, [pc, #316]	@ (8003ec0 <DMA_SetConfig+0x1a8>)
 8003d82:	42ac      	cmp	r4, r5
 8003d84:	d014      	beq.n	8003db0 <DMA_SetConfig+0x98>
 8003d86:	3514      	adds	r5, #20
 8003d88:	42ac      	cmp	r4, r5
 8003d8a:	d011      	beq.n	8003db0 <DMA_SetConfig+0x98>
 8003d8c:	3514      	adds	r5, #20
 8003d8e:	42ac      	cmp	r4, r5
 8003d90:	d00e      	beq.n	8003db0 <DMA_SetConfig+0x98>
 8003d92:	3514      	adds	r5, #20
 8003d94:	42ac      	cmp	r4, r5
 8003d96:	d00b      	beq.n	8003db0 <DMA_SetConfig+0x98>
 8003d98:	3514      	adds	r5, #20
 8003d9a:	42ac      	cmp	r4, r5
 8003d9c:	d008      	beq.n	8003db0 <DMA_SetConfig+0x98>
 8003d9e:	3514      	adds	r5, #20
 8003da0:	42ac      	cmp	r4, r5
 8003da2:	d005      	beq.n	8003db0 <DMA_SetConfig+0x98>
 8003da4:	3514      	adds	r5, #20
 8003da6:	42ac      	cmp	r4, r5
 8003da8:	d002      	beq.n	8003db0 <DMA_SetConfig+0x98>
 8003daa:	3514      	adds	r5, #20
 8003dac:	42ac      	cmp	r4, r5
 8003dae:	d107      	bne.n	8003dc0 <DMA_SetConfig+0xa8>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003db0:	6e44      	ldr	r4, [r0, #100]	@ 0x64
 8003db2:	6e85      	ldr	r5, [r0, #104]	@ 0x68
 8003db4:	6065      	str	r5, [r4, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003db6:	6ec4      	ldr	r4, [r0, #108]	@ 0x6c
 8003db8:	b114      	cbz	r4, 8003dc0 <DMA_SetConfig+0xa8>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dba:	6f04      	ldr	r4, [r0, #112]	@ 0x70
 8003dbc:	6f45      	ldr	r5, [r0, #116]	@ 0x74
 8003dbe:	6065      	str	r5, [r4, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003dc0:	6804      	ldr	r4, [r0, #0]
 8003dc2:	4e3d      	ldr	r6, [pc, #244]	@ (8003eb8 <DMA_SetConfig+0x1a0>)
 8003dc4:	4d3d      	ldr	r5, [pc, #244]	@ (8003ebc <DMA_SetConfig+0x1a4>)
 8003dc6:	42ac      	cmp	r4, r5
 8003dc8:	bf18      	it	ne
 8003dca:	42b4      	cmpne	r4, r6
 8003dcc:	d052      	beq.n	8003e74 <DMA_SetConfig+0x15c>
 8003dce:	3518      	adds	r5, #24
 8003dd0:	42ac      	cmp	r4, r5
 8003dd2:	d04f      	beq.n	8003e74 <DMA_SetConfig+0x15c>
 8003dd4:	3518      	adds	r5, #24
 8003dd6:	42ac      	cmp	r4, r5
 8003dd8:	d04c      	beq.n	8003e74 <DMA_SetConfig+0x15c>
 8003dda:	3518      	adds	r5, #24
 8003ddc:	42ac      	cmp	r4, r5
 8003dde:	d049      	beq.n	8003e74 <DMA_SetConfig+0x15c>
 8003de0:	3518      	adds	r5, #24
 8003de2:	42ac      	cmp	r4, r5
 8003de4:	d046      	beq.n	8003e74 <DMA_SetConfig+0x15c>
 8003de6:	3518      	adds	r5, #24
 8003de8:	42ac      	cmp	r4, r5
 8003dea:	d043      	beq.n	8003e74 <DMA_SetConfig+0x15c>
 8003dec:	3518      	adds	r5, #24
 8003dee:	42ac      	cmp	r4, r5
 8003df0:	d040      	beq.n	8003e74 <DMA_SetConfig+0x15c>
 8003df2:	f505 7556 	add.w	r5, r5, #856	@ 0x358
 8003df6:	42ac      	cmp	r4, r5
 8003df8:	d03c      	beq.n	8003e74 <DMA_SetConfig+0x15c>
 8003dfa:	3518      	adds	r5, #24
 8003dfc:	42ac      	cmp	r4, r5
 8003dfe:	d039      	beq.n	8003e74 <DMA_SetConfig+0x15c>
 8003e00:	3518      	adds	r5, #24
 8003e02:	42ac      	cmp	r4, r5
 8003e04:	d036      	beq.n	8003e74 <DMA_SetConfig+0x15c>
 8003e06:	3518      	adds	r5, #24
 8003e08:	42ac      	cmp	r4, r5
 8003e0a:	d033      	beq.n	8003e74 <DMA_SetConfig+0x15c>
 8003e0c:	3518      	adds	r5, #24
 8003e0e:	42ac      	cmp	r4, r5
 8003e10:	d030      	beq.n	8003e74 <DMA_SetConfig+0x15c>
 8003e12:	3518      	adds	r5, #24
 8003e14:	42ac      	cmp	r4, r5
 8003e16:	d02d      	beq.n	8003e74 <DMA_SetConfig+0x15c>
 8003e18:	3518      	adds	r5, #24
 8003e1a:	42ac      	cmp	r4, r5
 8003e1c:	d02a      	beq.n	8003e74 <DMA_SetConfig+0x15c>
 8003e1e:	3518      	adds	r5, #24
 8003e20:	42ac      	cmp	r4, r5
 8003e22:	d027      	beq.n	8003e74 <DMA_SetConfig+0x15c>

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003e24:	4e26      	ldr	r6, [pc, #152]	@ (8003ec0 <DMA_SetConfig+0x1a8>)
 8003e26:	4d27      	ldr	r5, [pc, #156]	@ (8003ec4 <DMA_SetConfig+0x1ac>)
 8003e28:	42ac      	cmp	r4, r5
 8003e2a:	bf18      	it	ne
 8003e2c:	42b4      	cmpne	r4, r6
 8003e2e:	d011      	beq.n	8003e54 <DMA_SetConfig+0x13c>
 8003e30:	4d25      	ldr	r5, [pc, #148]	@ (8003ec8 <DMA_SetConfig+0x1b0>)
 8003e32:	42ac      	cmp	r4, r5
 8003e34:	d00e      	beq.n	8003e54 <DMA_SetConfig+0x13c>
 8003e36:	3514      	adds	r5, #20
 8003e38:	42ac      	cmp	r4, r5
 8003e3a:	d00b      	beq.n	8003e54 <DMA_SetConfig+0x13c>
 8003e3c:	3514      	adds	r5, #20
 8003e3e:	42ac      	cmp	r4, r5
 8003e40:	d008      	beq.n	8003e54 <DMA_SetConfig+0x13c>
 8003e42:	3514      	adds	r5, #20
 8003e44:	42ac      	cmp	r4, r5
 8003e46:	d005      	beq.n	8003e54 <DMA_SetConfig+0x13c>
 8003e48:	3514      	adds	r5, #20
 8003e4a:	42ac      	cmp	r4, r5
 8003e4c:	d002      	beq.n	8003e54 <DMA_SetConfig+0x13c>
 8003e4e:	3514      	adds	r5, #20
 8003e50:	42ac      	cmp	r4, r5
 8003e52:	d124      	bne.n	8003e9e <DMA_SetConfig+0x186>
  {
    /* Clear all flags */
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003e54:	6dc4      	ldr	r4, [r0, #92]	@ 0x5c
 8003e56:	f004 051f 	and.w	r5, r4, #31
 8003e5a:	2401      	movs	r4, #1
 8003e5c:	40ac      	lsls	r4, r5
 8003e5e:	607c      	str	r4, [r7, #4]

    /* Configure DMA Channel data length */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003e60:	6804      	ldr	r4, [r0, #0]
 8003e62:	6063      	str	r3, [r4, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e64:	6883      	ldr	r3, [r0, #8]
 8003e66:	2b40      	cmp	r3, #64	@ 0x40
 8003e68:	d020      	beq.n	8003eac <DMA_SetConfig+0x194>
    }
    /* Memory to Peripheral */
    else
    {
      /* Configure DMA Channel source address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003e6a:	6803      	ldr	r3, [r0, #0]
 8003e6c:	6099      	str	r1, [r3, #8]

      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003e6e:	6803      	ldr	r3, [r0, #0]
 8003e70:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003e72:	e014      	b.n	8003e9e <DMA_SetConfig+0x186>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003e74:	6dc4      	ldr	r4, [r0, #92]	@ 0x5c
 8003e76:	f004 0c1f 	and.w	ip, r4, #31
 8003e7a:	243f      	movs	r4, #63	@ 0x3f
 8003e7c:	fa04 f40c 	lsl.w	r4, r4, ip
 8003e80:	60bc      	str	r4, [r7, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e82:	6805      	ldr	r5, [r0, #0]
 8003e84:	682c      	ldr	r4, [r5, #0]
 8003e86:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
 8003e8a:	602c      	str	r4, [r5, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003e8c:	6804      	ldr	r4, [r0, #0]
 8003e8e:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e90:	6883      	ldr	r3, [r0, #8]
 8003e92:	2b40      	cmp	r3, #64	@ 0x40
 8003e94:	d005      	beq.n	8003ea2 <DMA_SetConfig+0x18a>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003e96:	6803      	ldr	r3, [r0, #0]
 8003e98:	6099      	str	r1, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003e9a:	6803      	ldr	r3, [r0, #0]
 8003e9c:	60da      	str	r2, [r3, #12]
}
 8003e9e:	bcf0      	pop	{r4, r5, r6, r7}
 8003ea0:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003ea2:	6803      	ldr	r3, [r0, #0]
 8003ea4:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003ea6:	6803      	ldr	r3, [r0, #0]
 8003ea8:	60d9      	str	r1, [r3, #12]
 8003eaa:	e7f8      	b.n	8003e9e <DMA_SetConfig+0x186>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003eac:	6803      	ldr	r3, [r0, #0]
 8003eae:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003eb0:	6803      	ldr	r3, [r0, #0]
 8003eb2:	60d9      	str	r1, [r3, #12]
 8003eb4:	e7f3      	b.n	8003e9e <DMA_SetConfig+0x186>
 8003eb6:	bf00      	nop
 8003eb8:	40020010 	.word	0x40020010
 8003ebc:	40020028 	.word	0x40020028
 8003ec0:	58025408 	.word	0x58025408
 8003ec4:	5802541c 	.word	0x5802541c
 8003ec8:	58025430 	.word	0x58025430

08003ecc <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ecc:	6803      	ldr	r3, [r0, #0]
 8003ece:	4927      	ldr	r1, [pc, #156]	@ (8003f6c <DMA_CalcBaseAndBitshift+0xa0>)
 8003ed0:	4a27      	ldr	r2, [pc, #156]	@ (8003f70 <DMA_CalcBaseAndBitshift+0xa4>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	bf18      	it	ne
 8003ed6:	428b      	cmpne	r3, r1
 8003ed8:	d02f      	beq.n	8003f3a <DMA_CalcBaseAndBitshift+0x6e>
 8003eda:	3218      	adds	r2, #24
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d02c      	beq.n	8003f3a <DMA_CalcBaseAndBitshift+0x6e>
 8003ee0:	3218      	adds	r2, #24
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d029      	beq.n	8003f3a <DMA_CalcBaseAndBitshift+0x6e>
 8003ee6:	3218      	adds	r2, #24
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d026      	beq.n	8003f3a <DMA_CalcBaseAndBitshift+0x6e>
 8003eec:	3218      	adds	r2, #24
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d023      	beq.n	8003f3a <DMA_CalcBaseAndBitshift+0x6e>
 8003ef2:	3218      	adds	r2, #24
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d020      	beq.n	8003f3a <DMA_CalcBaseAndBitshift+0x6e>
 8003ef8:	3218      	adds	r2, #24
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d01d      	beq.n	8003f3a <DMA_CalcBaseAndBitshift+0x6e>
 8003efe:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d019      	beq.n	8003f3a <DMA_CalcBaseAndBitshift+0x6e>
 8003f06:	3218      	adds	r2, #24
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d016      	beq.n	8003f3a <DMA_CalcBaseAndBitshift+0x6e>
 8003f0c:	3218      	adds	r2, #24
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d013      	beq.n	8003f3a <DMA_CalcBaseAndBitshift+0x6e>
 8003f12:	3218      	adds	r2, #24
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d010      	beq.n	8003f3a <DMA_CalcBaseAndBitshift+0x6e>
 8003f18:	3218      	adds	r2, #24
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d00d      	beq.n	8003f3a <DMA_CalcBaseAndBitshift+0x6e>
 8003f1e:	3218      	adds	r2, #24
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d00a      	beq.n	8003f3a <DMA_CalcBaseAndBitshift+0x6e>
 8003f24:	3218      	adds	r2, #24
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d007      	beq.n	8003f3a <DMA_CalcBaseAndBitshift+0x6e>
 8003f2a:	3218      	adds	r2, #24
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d004      	beq.n	8003f3a <DMA_CalcBaseAndBitshift+0x6e>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003f30:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003f34:	6583      	str	r3, [r0, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
}
 8003f36:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8003f38:	4770      	bx	lr
{
 8003f3a:	b410      	push	{r4}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003f3c:	b2d9      	uxtb	r1, r3
 8003f3e:	3910      	subs	r1, #16
 8003f40:	4a0c      	ldr	r2, [pc, #48]	@ (8003f74 <DMA_CalcBaseAndBitshift+0xa8>)
 8003f42:	fba2 4201 	umull	r4, r2, r2, r1
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003f46:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8003f4a:	4c0b      	ldr	r4, [pc, #44]	@ (8003f78 <DMA_CalcBaseAndBitshift+0xac>)
 8003f4c:	5ca2      	ldrb	r2, [r4, r2]
 8003f4e:	65c2      	str	r2, [r0, #92]	@ 0x5c
    if (stream_number > 3U)
 8003f50:	295f      	cmp	r1, #95	@ 0x5f
 8003f52:	d907      	bls.n	8003f64 <DMA_CalcBaseAndBitshift+0x98>
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003f54:	4a09      	ldr	r2, [pc, #36]	@ (8003f7c <DMA_CalcBaseAndBitshift+0xb0>)
 8003f56:	401a      	ands	r2, r3
 8003f58:	3204      	adds	r2, #4
 8003f5a:	6582      	str	r2, [r0, #88]	@ 0x58
}
 8003f5c:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8003f5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f62:	4770      	bx	lr
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003f64:	4a05      	ldr	r2, [pc, #20]	@ (8003f7c <DMA_CalcBaseAndBitshift+0xb0>)
 8003f66:	401a      	ands	r2, r3
 8003f68:	6582      	str	r2, [r0, #88]	@ 0x58
 8003f6a:	e7f7      	b.n	8003f5c <DMA_CalcBaseAndBitshift+0x90>
 8003f6c:	40020010 	.word	0x40020010
 8003f70:	40020028 	.word	0x40020028
 8003f74:	aaaaaaab 	.word	0xaaaaaaab
 8003f78:	08016d20 	.word	0x08016d20
 8003f7c:	fffffc00 	.word	0xfffffc00

08003f80 <DMA_CheckFifoParam>:
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f80:	6983      	ldr	r3, [r0, #24]
 8003f82:	b99b      	cbnz	r3, 8003fac <DMA_CheckFifoParam+0x2c>
  {
    switch (hdma->Init.FIFOThreshold)
 8003f84:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d00a      	beq.n	8003fa0 <DMA_CheckFifoParam+0x20>
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d002      	beq.n	8003f94 <DMA_CheckFifoParam+0x14>
 8003f8e:	b10b      	cbz	r3, 8003f94 <DMA_CheckFifoParam+0x14>
 8003f90:	2000      	movs	r0, #0
 8003f92:	4770      	bx	lr
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f94:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8003f96:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8003f9a:	d12a      	bne.n	8003ff2 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8003f9c:	2000      	movs	r0, #0
 8003f9e:	4770      	bx	lr
          status = HAL_ERROR;
        }
        break;

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003fa0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8003fa2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003fa6:	d026      	beq.n	8003ff6 <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8003fa8:	2000      	movs	r0, #0
 8003faa:	4770      	bx	lr
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003fac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fb0:	d00a      	beq.n	8003fc8 <DMA_CheckFifoParam+0x48>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003fb2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d926      	bls.n	8004006 <DMA_CheckFifoParam+0x86>
 8003fb8:	2b03      	cmp	r3, #3
 8003fba:	d126      	bne.n	800400a <DMA_CheckFifoParam+0x8a>
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;

      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fbc:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8003fbe:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8003fc2:	d124      	bne.n	800400e <DMA_CheckFifoParam+0x8e>
  HAL_StatusTypeDef status = HAL_OK;
 8003fc4:	2000      	movs	r0, #0
 8003fc6:	4770      	bx	lr
    switch (hdma->Init.FIFOThreshold)
 8003fc8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003fca:	2b03      	cmp	r3, #3
 8003fcc:	d803      	bhi.n	8003fd6 <DMA_CheckFifoParam+0x56>
 8003fce:	e8df f003 	tbb	[pc, r3]
 8003fd2:	0414      	.short	0x0414
 8003fd4:	0a14      	.short	0x0a14
 8003fd6:	2000      	movs	r0, #0
 8003fd8:	4770      	bx	lr
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fda:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8003fdc:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8003fe0:	d10d      	bne.n	8003ffe <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8003fe2:	2000      	movs	r0, #0
 8003fe4:	4770      	bx	lr
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003fe6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8003fe8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003fec:	d009      	beq.n	8004002 <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 8003fee:	2000      	movs	r0, #0
 8003ff0:	4770      	bx	lr
          status = HAL_ERROR;
 8003ff2:	2001      	movs	r0, #1
 8003ff4:	4770      	bx	lr
          status = HAL_ERROR;
 8003ff6:	2001      	movs	r0, #1
 8003ff8:	4770      	bx	lr
        status = HAL_ERROR;
 8003ffa:	2001      	movs	r0, #1
 8003ffc:	4770      	bx	lr
          status = HAL_ERROR;
 8003ffe:	2001      	movs	r0, #1
 8004000:	4770      	bx	lr
          status = HAL_ERROR;
 8004002:	2001      	movs	r0, #1
 8004004:	4770      	bx	lr
        status = HAL_ERROR;
 8004006:	2001      	movs	r0, #1
 8004008:	4770      	bx	lr
    switch (hdma->Init.FIFOThreshold)
 800400a:	2000      	movs	r0, #0
 800400c:	4770      	bx	lr
        {
          status = HAL_ERROR;
 800400e:	2001      	movs	r0, #1
        break;
    }
  }

  return status;
}
 8004010:	4770      	bx	lr
	...

08004014 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004014:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004016:	4921      	ldr	r1, [pc, #132]	@ (800409c <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8004018:	4a21      	ldr	r2, [pc, #132]	@ (80040a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 800401a:	4293      	cmp	r3, r2
 800401c:	bf18      	it	ne
 800401e:	428b      	cmpne	r3, r1
 8004020:	d027      	beq.n	8004072 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004022:	3214      	adds	r2, #20
 8004024:	4293      	cmp	r3, r2
 8004026:	d024      	beq.n	8004072 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004028:	3214      	adds	r2, #20
 800402a:	4293      	cmp	r3, r2
 800402c:	d021      	beq.n	8004072 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800402e:	3214      	adds	r2, #20
 8004030:	4293      	cmp	r3, r2
 8004032:	d01e      	beq.n	8004072 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004034:	3214      	adds	r2, #20
 8004036:	4293      	cmp	r3, r2
 8004038:	d01b      	beq.n	8004072 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800403a:	3214      	adds	r2, #20
 800403c:	4293      	cmp	r3, r2
 800403e:	d018      	beq.n	8004072 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004040:	3214      	adds	r2, #20
 8004042:	4293      	cmp	r3, r2
 8004044:	d015      	beq.n	8004072 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004046:	b2da      	uxtb	r2, r3
 8004048:	3a10      	subs	r2, #16
 800404a:	4916      	ldr	r1, [pc, #88]	@ (80040a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 800404c:	fba1 1202 	umull	r1, r2, r1, r2
 8004050:	0912      	lsrs	r2, r2, #4

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004052:	4915      	ldr	r1, [pc, #84]	@ (80040a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x94>)
 8004054:	4419      	add	r1, r3
 8004056:	29a8      	cmp	r1, #168	@ 0xa8
 8004058:	d91e      	bls.n	8004098 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800405a:	4b14      	ldr	r3, [pc, #80]	@ (80040ac <DMA_CalcDMAMUXChannelBaseAndMask+0x98>)
 800405c:	4413      	add	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	6603      	str	r3, [r0, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004062:	4b13      	ldr	r3, [pc, #76]	@ (80040b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x9c>)
 8004064:	6643      	str	r3, [r0, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004066:	f002 021f 	and.w	r2, r2, #31
 800406a:	2301      	movs	r3, #1
 800406c:	4093      	lsls	r3, r2
 800406e:	6683      	str	r3, [r0, #104]	@ 0x68
  }
}
 8004070:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004072:	b2db      	uxtb	r3, r3
 8004074:	3b08      	subs	r3, #8
 8004076:	4a0f      	ldr	r2, [pc, #60]	@ (80040b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 8004078:	fba2 2303 	umull	r2, r3, r2, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800407c:	4a0e      	ldr	r2, [pc, #56]	@ (80040b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
 800407e:	eb02 1213 	add.w	r2, r2, r3, lsr #4
 8004082:	0092      	lsls	r2, r2, #2
 8004084:	6602      	str	r2, [r0, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004086:	4a0d      	ldr	r2, [pc, #52]	@ (80040bc <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8004088:	6642      	str	r2, [r0, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800408a:	f3c3 1304 	ubfx	r3, r3, #4, #5
 800408e:	2201      	movs	r2, #1
 8004090:	fa02 f303 	lsl.w	r3, r2, r3
 8004094:	6683      	str	r3, [r0, #104]	@ 0x68
 8004096:	4770      	bx	lr
      stream_number += 8U;
 8004098:	3208      	adds	r2, #8
 800409a:	e7de      	b.n	800405a <DMA_CalcDMAMUXChannelBaseAndMask+0x46>
 800409c:	58025408 	.word	0x58025408
 80040a0:	5802541c 	.word	0x5802541c
 80040a4:	aaaaaaab 	.word	0xaaaaaaab
 80040a8:	bffdfbf0 	.word	0xbffdfbf0
 80040ac:	10008200 	.word	0x10008200
 80040b0:	40020880 	.word	0x40020880
 80040b4:	cccccccd 	.word	0xcccccccd
 80040b8:	16009600 	.word	0x16009600
 80040bc:	58025880 	.word	0x58025880

080040c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80040c0:	7901      	ldrb	r1, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80040c2:	1e4a      	subs	r2, r1, #1
 80040c4:	2a07      	cmp	r2, #7
 80040c6:	d82b      	bhi.n	8004120 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x60>
{
 80040c8:	b430      	push	{r4, r5}
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80040ca:	6803      	ldr	r3, [r0, #0]
 80040cc:	4d15      	ldr	r5, [pc, #84]	@ (8004124 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x64>)
 80040ce:	4c16      	ldr	r4, [pc, #88]	@ (8004128 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>)
 80040d0:	42a3      	cmp	r3, r4
 80040d2:	bf18      	it	ne
 80040d4:	42ab      	cmpne	r3, r5
 80040d6:	d018      	beq.n	800410a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 80040d8:	3414      	adds	r4, #20
 80040da:	42a3      	cmp	r3, r4
 80040dc:	d015      	beq.n	800410a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 80040de:	3414      	adds	r4, #20
 80040e0:	42a3      	cmp	r3, r4
 80040e2:	d012      	beq.n	800410a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 80040e4:	3414      	adds	r4, #20
 80040e6:	42a3      	cmp	r3, r4
 80040e8:	d00f      	beq.n	800410a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 80040ea:	3414      	adds	r4, #20
 80040ec:	42a3      	cmp	r3, r4
 80040ee:	d00c      	beq.n	800410a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 80040f0:	3414      	adds	r4, #20
 80040f2:	42a3      	cmp	r3, r4
 80040f4:	d009      	beq.n	800410a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 80040f6:	3414      	adds	r4, #20
 80040f8:	42a3      	cmp	r3, r4
 80040fa:	d006      	beq.n	800410a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80040fc:	4b0b      	ldr	r3, [pc, #44]	@ (800412c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>)
 80040fe:	440b      	add	r3, r1
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	66c3      	str	r3, [r0, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004104:	4b0a      	ldr	r3, [pc, #40]	@ (8004130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>)
 8004106:	6703      	str	r3, [r0, #112]	@ 0x70
 8004108:	e005      	b.n	8004116 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x56>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800410a:	4b0a      	ldr	r3, [pc, #40]	@ (8004134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x74>)
 800410c:	440b      	add	r3, r1
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	66c3      	str	r3, [r0, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004112:	4b09      	ldr	r3, [pc, #36]	@ (8004138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x78>)
 8004114:	6703      	str	r3, [r0, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004116:	2301      	movs	r3, #1
 8004118:	4093      	lsls	r3, r2
 800411a:	6743      	str	r3, [r0, #116]	@ 0x74
  }
}
 800411c:	bc30      	pop	{r4, r5}
 800411e:	4770      	bx	lr
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	58025408 	.word	0x58025408
 8004128:	5802541c 	.word	0x5802541c
 800412c:	1000823f 	.word	0x1000823f
 8004130:	40020940 	.word	0x40020940
 8004134:	1600963f 	.word	0x1600963f
 8004138:	58025940 	.word	0x58025940

0800413c <HAL_DMA_Init>:
{
 800413c:	b570      	push	{r4, r5, r6, lr}
 800413e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004140:	f7fe ffce 	bl	80030e0 <HAL_GetTick>
  if(hdma == NULL)
 8004144:	2c00      	cmp	r4, #0
 8004146:	f000 81b6 	beq.w	80044b6 <HAL_DMA_Init+0x37a>
 800414a:	4605      	mov	r5, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800414c:	6823      	ldr	r3, [r4, #0]
 800414e:	4953      	ldr	r1, [pc, #332]	@ (800429c <HAL_DMA_Init+0x160>)
 8004150:	4a53      	ldr	r2, [pc, #332]	@ (80042a0 <HAL_DMA_Init+0x164>)
 8004152:	4293      	cmp	r3, r2
 8004154:	bf18      	it	ne
 8004156:	428b      	cmpne	r3, r1
 8004158:	bf0c      	ite	eq
 800415a:	2101      	moveq	r1, #1
 800415c:	2100      	movne	r1, #0
 800415e:	d050      	beq.n	8004202 <HAL_DMA_Init+0xc6>
 8004160:	3218      	adds	r2, #24
 8004162:	4293      	cmp	r3, r2
 8004164:	d04d      	beq.n	8004202 <HAL_DMA_Init+0xc6>
 8004166:	3218      	adds	r2, #24
 8004168:	4293      	cmp	r3, r2
 800416a:	d04a      	beq.n	8004202 <HAL_DMA_Init+0xc6>
 800416c:	3218      	adds	r2, #24
 800416e:	4293      	cmp	r3, r2
 8004170:	d047      	beq.n	8004202 <HAL_DMA_Init+0xc6>
 8004172:	3218      	adds	r2, #24
 8004174:	4293      	cmp	r3, r2
 8004176:	d044      	beq.n	8004202 <HAL_DMA_Init+0xc6>
 8004178:	3218      	adds	r2, #24
 800417a:	4293      	cmp	r3, r2
 800417c:	d041      	beq.n	8004202 <HAL_DMA_Init+0xc6>
 800417e:	3218      	adds	r2, #24
 8004180:	4293      	cmp	r3, r2
 8004182:	d03e      	beq.n	8004202 <HAL_DMA_Init+0xc6>
 8004184:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004188:	4293      	cmp	r3, r2
 800418a:	d03a      	beq.n	8004202 <HAL_DMA_Init+0xc6>
 800418c:	3218      	adds	r2, #24
 800418e:	4293      	cmp	r3, r2
 8004190:	d037      	beq.n	8004202 <HAL_DMA_Init+0xc6>
 8004192:	3218      	adds	r2, #24
 8004194:	4293      	cmp	r3, r2
 8004196:	d034      	beq.n	8004202 <HAL_DMA_Init+0xc6>
 8004198:	3218      	adds	r2, #24
 800419a:	4293      	cmp	r3, r2
 800419c:	d031      	beq.n	8004202 <HAL_DMA_Init+0xc6>
 800419e:	3218      	adds	r2, #24
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d02e      	beq.n	8004202 <HAL_DMA_Init+0xc6>
 80041a4:	3218      	adds	r2, #24
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d02b      	beq.n	8004202 <HAL_DMA_Init+0xc6>
 80041aa:	3218      	adds	r2, #24
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d028      	beq.n	8004202 <HAL_DMA_Init+0xc6>
 80041b0:	3218      	adds	r2, #24
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d025      	beq.n	8004202 <HAL_DMA_Init+0xc6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80041b6:	493b      	ldr	r1, [pc, #236]	@ (80042a4 <HAL_DMA_Init+0x168>)
 80041b8:	4a3b      	ldr	r2, [pc, #236]	@ (80042a8 <HAL_DMA_Init+0x16c>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	bf18      	it	ne
 80041be:	428b      	cmpne	r3, r1
 80041c0:	f000 8131 	beq.w	8004426 <HAL_DMA_Init+0x2ea>
 80041c4:	4a39      	ldr	r2, [pc, #228]	@ (80042ac <HAL_DMA_Init+0x170>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	f000 812d 	beq.w	8004426 <HAL_DMA_Init+0x2ea>
 80041cc:	3214      	adds	r2, #20
 80041ce:	4293      	cmp	r3, r2
 80041d0:	f000 8129 	beq.w	8004426 <HAL_DMA_Init+0x2ea>
 80041d4:	3214      	adds	r2, #20
 80041d6:	4293      	cmp	r3, r2
 80041d8:	f000 8125 	beq.w	8004426 <HAL_DMA_Init+0x2ea>
 80041dc:	3214      	adds	r2, #20
 80041de:	4293      	cmp	r3, r2
 80041e0:	f000 8121 	beq.w	8004426 <HAL_DMA_Init+0x2ea>
 80041e4:	3214      	adds	r2, #20
 80041e6:	4293      	cmp	r3, r2
 80041e8:	f000 811d 	beq.w	8004426 <HAL_DMA_Init+0x2ea>
 80041ec:	3214      	adds	r2, #20
 80041ee:	4293      	cmp	r3, r2
 80041f0:	f000 8119 	beq.w	8004426 <HAL_DMA_Init+0x2ea>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80041f4:	2340      	movs	r3, #64	@ 0x40
 80041f6:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80041f8:	2303      	movs	r3, #3
 80041fa:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 80041fe:	2001      	movs	r0, #1
 8004200:	e04a      	b.n	8004298 <HAL_DMA_Init+0x15c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8004202:	2202      	movs	r2, #2
 8004204:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8004208:	2200      	movs	r2, #0
 800420a:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
    __HAL_DMA_DISABLE(hdma);
 800420e:	bb79      	cbnz	r1, 8004270 <HAL_DMA_Init+0x134>
 8004210:	4a27      	ldr	r2, [pc, #156]	@ (80042b0 <HAL_DMA_Init+0x174>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d02c      	beq.n	8004270 <HAL_DMA_Init+0x134>
 8004216:	3218      	adds	r2, #24
 8004218:	4293      	cmp	r3, r2
 800421a:	d029      	beq.n	8004270 <HAL_DMA_Init+0x134>
 800421c:	3218      	adds	r2, #24
 800421e:	4293      	cmp	r3, r2
 8004220:	d026      	beq.n	8004270 <HAL_DMA_Init+0x134>
 8004222:	3218      	adds	r2, #24
 8004224:	4293      	cmp	r3, r2
 8004226:	d023      	beq.n	8004270 <HAL_DMA_Init+0x134>
 8004228:	3218      	adds	r2, #24
 800422a:	4293      	cmp	r3, r2
 800422c:	d020      	beq.n	8004270 <HAL_DMA_Init+0x134>
 800422e:	3218      	adds	r2, #24
 8004230:	4293      	cmp	r3, r2
 8004232:	d01d      	beq.n	8004270 <HAL_DMA_Init+0x134>
 8004234:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004238:	4293      	cmp	r3, r2
 800423a:	d019      	beq.n	8004270 <HAL_DMA_Init+0x134>
 800423c:	3218      	adds	r2, #24
 800423e:	4293      	cmp	r3, r2
 8004240:	d016      	beq.n	8004270 <HAL_DMA_Init+0x134>
 8004242:	3218      	adds	r2, #24
 8004244:	4293      	cmp	r3, r2
 8004246:	d013      	beq.n	8004270 <HAL_DMA_Init+0x134>
 8004248:	3218      	adds	r2, #24
 800424a:	4293      	cmp	r3, r2
 800424c:	d010      	beq.n	8004270 <HAL_DMA_Init+0x134>
 800424e:	3218      	adds	r2, #24
 8004250:	4293      	cmp	r3, r2
 8004252:	d00d      	beq.n	8004270 <HAL_DMA_Init+0x134>
 8004254:	3218      	adds	r2, #24
 8004256:	4293      	cmp	r3, r2
 8004258:	d00a      	beq.n	8004270 <HAL_DMA_Init+0x134>
 800425a:	3218      	adds	r2, #24
 800425c:	4293      	cmp	r3, r2
 800425e:	d007      	beq.n	8004270 <HAL_DMA_Init+0x134>
 8004260:	3218      	adds	r2, #24
 8004262:	4293      	cmp	r3, r2
 8004264:	d004      	beq.n	8004270 <HAL_DMA_Init+0x134>
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	f022 0201 	bic.w	r2, r2, #1
 800426c:	601a      	str	r2, [r3, #0]
 800426e:	e003      	b.n	8004278 <HAL_DMA_Init+0x13c>
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	f022 0201 	bic.w	r2, r2, #1
 8004276:	601a      	str	r2, [r3, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004278:	6823      	ldr	r3, [r4, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	f012 0f01 	tst.w	r2, #1
 8004280:	d018      	beq.n	80042b4 <HAL_DMA_Init+0x178>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004282:	f7fe ff2d 	bl	80030e0 <HAL_GetTick>
 8004286:	1b43      	subs	r3, r0, r5
 8004288:	2b05      	cmp	r3, #5
 800428a:	d9f5      	bls.n	8004278 <HAL_DMA_Init+0x13c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800428c:	2320      	movs	r3, #32
 800428e:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8004290:	2303      	movs	r3, #3
 8004292:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        return HAL_ERROR;
 8004296:	2001      	movs	r0, #1
}
 8004298:	bd70      	pop	{r4, r5, r6, pc}
 800429a:	bf00      	nop
 800429c:	40020010 	.word	0x40020010
 80042a0:	40020028 	.word	0x40020028
 80042a4:	58025408 	.word	0x58025408
 80042a8:	5802541c 	.word	0x5802541c
 80042ac:	58025430 	.word	0x58025430
 80042b0:	40020040 	.word	0x40020040
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80042b4:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80042b6:	4981      	ldr	r1, [pc, #516]	@ (80044bc <HAL_DMA_Init+0x380>)
 80042b8:	4011      	ands	r1, r2
    registerValue |=  hdma->Init.Direction           |
 80042ba:	68a2      	ldr	r2, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042bc:	68e0      	ldr	r0, [r4, #12]
    registerValue |=  hdma->Init.Direction           |
 80042be:	4302      	orrs	r2, r0
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042c0:	6920      	ldr	r0, [r4, #16]
 80042c2:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042c4:	6960      	ldr	r0, [r4, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042c6:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042c8:	69a0      	ldr	r0, [r4, #24]
 80042ca:	4302      	orrs	r2, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 80042cc:	69e0      	ldr	r0, [r4, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042ce:	4302      	orrs	r2, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 80042d0:	6a20      	ldr	r0, [r4, #32]
 80042d2:	4302      	orrs	r2, r0
    registerValue |=  hdma->Init.Direction           |
 80042d4:	430a      	orrs	r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042d6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80042d8:	2904      	cmp	r1, #4
 80042da:	f000 8099 	beq.w	8004410 <HAL_DMA_Init+0x2d4>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80042de:	4978      	ldr	r1, [pc, #480]	@ (80044c0 <HAL_DMA_Init+0x384>)
 80042e0:	6808      	ldr	r0, [r1, #0]
 80042e2:	4978      	ldr	r1, [pc, #480]	@ (80044c4 <HAL_DMA_Init+0x388>)
 80042e4:	4001      	ands	r1, r0
 80042e6:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 80042ea:	d311      	bcc.n	8004310 <HAL_DMA_Init+0x1d4>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80042ec:	6861      	ldr	r1, [r4, #4]
 80042ee:	f1a1 0529 	sub.w	r5, r1, #41	@ 0x29
 80042f2:	f1a1 003f 	sub.w	r0, r1, #63	@ 0x3f
 80042f6:	2803      	cmp	r0, #3
 80042f8:	bf88      	it	hi
 80042fa:	2d05      	cmphi	r5, #5
 80042fc:	d906      	bls.n	800430c <HAL_DMA_Init+0x1d0>
 80042fe:	f1a1 0047 	sub.w	r0, r1, #71	@ 0x47
 8004302:	2801      	cmp	r0, #1
 8004304:	d902      	bls.n	800430c <HAL_DMA_Init+0x1d0>
 8004306:	394f      	subs	r1, #79	@ 0x4f
 8004308:	2903      	cmp	r1, #3
 800430a:	d801      	bhi.n	8004310 <HAL_DMA_Init+0x1d4>
        registerValue |= DMA_SxCR_TRBUFF;
 800430c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004310:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004312:	6826      	ldr	r6, [r4, #0]
 8004314:	6975      	ldr	r5, [r6, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004316:	f025 0507 	bic.w	r5, r5, #7
    registerValue |= hdma->Init.FIFOMode;
 800431a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800431c:	431d      	orrs	r5, r3
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800431e:	2b04      	cmp	r3, #4
 8004320:	d108      	bne.n	8004334 <HAL_DMA_Init+0x1f8>
      registerValue |= hdma->Init.FIFOThreshold;
 8004322:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004324:	431d      	orrs	r5, r3
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004326:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004328:	b123      	cbz	r3, 8004334 <HAL_DMA_Init+0x1f8>
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800432a:	4620      	mov	r0, r4
 800432c:	f7ff fe28 	bl	8003f80 <DMA_CheckFifoParam>
 8004330:	2800      	cmp	r0, #0
 8004332:	d172      	bne.n	800441a <HAL_DMA_Init+0x2de>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004334:	6175      	str	r5, [r6, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004336:	4620      	mov	r0, r4
 8004338:	f7ff fdc8 	bl	8003ecc <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800433c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800433e:	f003 021f 	and.w	r2, r3, #31
 8004342:	233f      	movs	r3, #63	@ 0x3f
 8004344:	4093      	lsls	r3, r2
 8004346:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004348:	6823      	ldr	r3, [r4, #0]
 800434a:	495f      	ldr	r1, [pc, #380]	@ (80044c8 <HAL_DMA_Init+0x38c>)
 800434c:	4a5f      	ldr	r2, [pc, #380]	@ (80044cc <HAL_DMA_Init+0x390>)
 800434e:	4293      	cmp	r3, r2
 8004350:	bf18      	it	ne
 8004352:	428b      	cmpne	r3, r1
 8004354:	d042      	beq.n	80043dc <HAL_DMA_Init+0x2a0>
 8004356:	3218      	adds	r2, #24
 8004358:	4293      	cmp	r3, r2
 800435a:	d03f      	beq.n	80043dc <HAL_DMA_Init+0x2a0>
 800435c:	3218      	adds	r2, #24
 800435e:	4293      	cmp	r3, r2
 8004360:	d03c      	beq.n	80043dc <HAL_DMA_Init+0x2a0>
 8004362:	3218      	adds	r2, #24
 8004364:	4293      	cmp	r3, r2
 8004366:	d039      	beq.n	80043dc <HAL_DMA_Init+0x2a0>
 8004368:	3218      	adds	r2, #24
 800436a:	4293      	cmp	r3, r2
 800436c:	d036      	beq.n	80043dc <HAL_DMA_Init+0x2a0>
 800436e:	3218      	adds	r2, #24
 8004370:	4293      	cmp	r3, r2
 8004372:	d033      	beq.n	80043dc <HAL_DMA_Init+0x2a0>
 8004374:	3218      	adds	r2, #24
 8004376:	4293      	cmp	r3, r2
 8004378:	d030      	beq.n	80043dc <HAL_DMA_Init+0x2a0>
 800437a:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 800437e:	4293      	cmp	r3, r2
 8004380:	d02c      	beq.n	80043dc <HAL_DMA_Init+0x2a0>
 8004382:	3218      	adds	r2, #24
 8004384:	4293      	cmp	r3, r2
 8004386:	d029      	beq.n	80043dc <HAL_DMA_Init+0x2a0>
 8004388:	3218      	adds	r2, #24
 800438a:	4293      	cmp	r3, r2
 800438c:	d026      	beq.n	80043dc <HAL_DMA_Init+0x2a0>
 800438e:	3218      	adds	r2, #24
 8004390:	4293      	cmp	r3, r2
 8004392:	d023      	beq.n	80043dc <HAL_DMA_Init+0x2a0>
 8004394:	3218      	adds	r2, #24
 8004396:	4293      	cmp	r3, r2
 8004398:	d020      	beq.n	80043dc <HAL_DMA_Init+0x2a0>
 800439a:	3218      	adds	r2, #24
 800439c:	4293      	cmp	r3, r2
 800439e:	d01d      	beq.n	80043dc <HAL_DMA_Init+0x2a0>
 80043a0:	3218      	adds	r2, #24
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d01a      	beq.n	80043dc <HAL_DMA_Init+0x2a0>
 80043a6:	3218      	adds	r2, #24
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d017      	beq.n	80043dc <HAL_DMA_Init+0x2a0>
 80043ac:	4a48      	ldr	r2, [pc, #288]	@ (80044d0 <HAL_DMA_Init+0x394>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d014      	beq.n	80043dc <HAL_DMA_Init+0x2a0>
 80043b2:	3214      	adds	r2, #20
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d011      	beq.n	80043dc <HAL_DMA_Init+0x2a0>
 80043b8:	3214      	adds	r2, #20
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d00e      	beq.n	80043dc <HAL_DMA_Init+0x2a0>
 80043be:	3214      	adds	r2, #20
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d00b      	beq.n	80043dc <HAL_DMA_Init+0x2a0>
 80043c4:	3214      	adds	r2, #20
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d008      	beq.n	80043dc <HAL_DMA_Init+0x2a0>
 80043ca:	3214      	adds	r2, #20
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d005      	beq.n	80043dc <HAL_DMA_Init+0x2a0>
 80043d0:	3214      	adds	r2, #20
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d002      	beq.n	80043dc <HAL_DMA_Init+0x2a0>
 80043d6:	3214      	adds	r2, #20
 80043d8:	4293      	cmp	r3, r2
 80043da:	d113      	bne.n	8004404 <HAL_DMA_Init+0x2c8>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80043dc:	4620      	mov	r0, r4
 80043de:	f7ff fe19 	bl	8004014 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80043e2:	68a3      	ldr	r3, [r4, #8]
 80043e4:	2b80      	cmp	r3, #128	@ 0x80
 80043e6:	d059      	beq.n	800449c <HAL_DMA_Init+0x360>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80043e8:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80043ea:	7922      	ldrb	r2, [r4, #4]
 80043ec:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80043f0:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 80043f2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80043f4:	6863      	ldr	r3, [r4, #4]
 80043f6:	3b01      	subs	r3, #1
 80043f8:	2b07      	cmp	r3, #7
 80043fa:	d952      	bls.n	80044a2 <HAL_DMA_Init+0x366>
      hdma->DMAmuxRequestGen = 0U;
 80043fc:	2300      	movs	r3, #0
 80043fe:	66e3      	str	r3, [r4, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004400:	6723      	str	r3, [r4, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004402:	6763      	str	r3, [r4, #116]	@ 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004404:	2000      	movs	r0, #0
 8004406:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8004408:	2301      	movs	r3, #1
 800440a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 800440e:	e743      	b.n	8004298 <HAL_DMA_Init+0x15c>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004410:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004412:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8004414:	4301      	orrs	r1, r0
 8004416:	430a      	orrs	r2, r1
 8004418:	e761      	b.n	80042de <HAL_DMA_Init+0x1a2>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800441a:	2340      	movs	r3, #64	@ 0x40
 800441c:	6563      	str	r3, [r4, #84]	@ 0x54
          hdma->State = HAL_DMA_STATE_READY;
 800441e:	2001      	movs	r0, #1
 8004420:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
          return HAL_ERROR;
 8004424:	e738      	b.n	8004298 <HAL_DMA_Init+0x15c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8004426:	2202      	movs	r2, #2
 8004428:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 800442c:	2200      	movs	r2, #0
 800442e:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004432:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004434:	4927      	ldr	r1, [pc, #156]	@ (80044d4 <HAL_DMA_Init+0x398>)
 8004436:	4011      	ands	r1, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004438:	68a2      	ldr	r2, [r4, #8]
 800443a:	2a40      	cmp	r2, #64	@ 0x40
 800443c:	d02c      	beq.n	8004498 <HAL_DMA_Init+0x35c>
 800443e:	2a80      	cmp	r2, #128	@ 0x80
 8004440:	d027      	beq.n	8004492 <HAL_DMA_Init+0x356>
 8004442:	2200      	movs	r2, #0
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004444:	68e0      	ldr	r0, [r4, #12]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004446:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800444a:	6920      	ldr	r0, [r4, #16]
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800444c:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004450:	6960      	ldr	r0, [r4, #20]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004452:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004456:	69a0      	ldr	r0, [r4, #24]
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004458:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800445c:	69e0      	ldr	r0, [r4, #28]
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800445e:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004462:	6a20      	ldr	r0, [r4, #32]
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004464:	ea42 1210 	orr.w	r2, r2, r0, lsr #4
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004468:	430a      	orrs	r2, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800446a:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800446c:	6822      	ldr	r2, [r4, #0]
 800446e:	4b1a      	ldr	r3, [pc, #104]	@ (80044d8 <HAL_DMA_Init+0x39c>)
 8004470:	4413      	add	r3, r2
 8004472:	4a1a      	ldr	r2, [pc, #104]	@ (80044dc <HAL_DMA_Init+0x3a0>)
 8004474:	fba2 2303 	umull	r2, r3, r2, r3
 8004478:	091b      	lsrs	r3, r3, #4
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	65e3      	str	r3, [r4, #92]	@ 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800447e:	4620      	mov	r0, r4
 8004480:	f7ff fd24 	bl	8003ecc <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004484:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004486:	f002 011f 	and.w	r1, r2, #31
 800448a:	2201      	movs	r2, #1
 800448c:	408a      	lsls	r2, r1
 800448e:	6042      	str	r2, [r0, #4]
 8004490:	e75a      	b.n	8004348 <HAL_DMA_Init+0x20c>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004492:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004496:	e7d5      	b.n	8004444 <HAL_DMA_Init+0x308>
 8004498:	2210      	movs	r2, #16
 800449a:	e7d3      	b.n	8004444 <HAL_DMA_Init+0x308>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800449c:	2300      	movs	r3, #0
 800449e:	6063      	str	r3, [r4, #4]
 80044a0:	e7a2      	b.n	80043e8 <HAL_DMA_Init+0x2ac>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80044a2:	4620      	mov	r0, r4
 80044a4:	f7ff fe0c 	bl	80040c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80044a8:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80044aa:	2200      	movs	r2, #0
 80044ac:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044ae:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80044b0:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 80044b2:	605a      	str	r2, [r3, #4]
 80044b4:	e7a6      	b.n	8004404 <HAL_DMA_Init+0x2c8>
    return HAL_ERROR;
 80044b6:	2001      	movs	r0, #1
 80044b8:	e6ee      	b.n	8004298 <HAL_DMA_Init+0x15c>
 80044ba:	bf00      	nop
 80044bc:	fe10803f 	.word	0xfe10803f
 80044c0:	5c001000 	.word	0x5c001000
 80044c4:	ffff0000 	.word	0xffff0000
 80044c8:	40020010 	.word	0x40020010
 80044cc:	40020028 	.word	0x40020028
 80044d0:	58025408 	.word	0x58025408
 80044d4:	fffe000f 	.word	0xfffe000f
 80044d8:	a7fdabf8 	.word	0xa7fdabf8
 80044dc:	cccccccd 	.word	0xcccccccd

080044e0 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 80044e0:	2800      	cmp	r0, #0
 80044e2:	f000 813e 	beq.w	8004762 <HAL_DMA_Start_IT+0x282>
{
 80044e6:	b570      	push	{r4, r5, r6, lr}
 80044e8:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 80044ea:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 80044ee:	2801      	cmp	r0, #1
 80044f0:	f000 8139 	beq.w	8004766 <HAL_DMA_Start_IT+0x286>
 80044f4:	2001      	movs	r0, #1
 80044f6:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80044fa:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 80044fe:	b2c0      	uxtb	r0, r0
 8004500:	2801      	cmp	r0, #1
 8004502:	d007      	beq.n	8004514 <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004504:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004508:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 800450a:	2300      	movs	r3, #0
 800450c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    status = HAL_ERROR;
 8004510:	2001      	movs	r0, #1
}
 8004512:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8004514:	2002      	movs	r0, #2
 8004516:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800451a:	2000      	movs	r0, #0
 800451c:	6560      	str	r0, [r4, #84]	@ 0x54
    __HAL_DMA_DISABLE(hdma);
 800451e:	6820      	ldr	r0, [r4, #0]
 8004520:	4e92      	ldr	r6, [pc, #584]	@ (800476c <HAL_DMA_Start_IT+0x28c>)
 8004522:	4d93      	ldr	r5, [pc, #588]	@ (8004770 <HAL_DMA_Start_IT+0x290>)
 8004524:	42a8      	cmp	r0, r5
 8004526:	bf18      	it	ne
 8004528:	42b0      	cmpne	r0, r6
 800452a:	d02f      	beq.n	800458c <HAL_DMA_Start_IT+0xac>
 800452c:	3518      	adds	r5, #24
 800452e:	42a8      	cmp	r0, r5
 8004530:	d02c      	beq.n	800458c <HAL_DMA_Start_IT+0xac>
 8004532:	3518      	adds	r5, #24
 8004534:	42a8      	cmp	r0, r5
 8004536:	d029      	beq.n	800458c <HAL_DMA_Start_IT+0xac>
 8004538:	3518      	adds	r5, #24
 800453a:	42a8      	cmp	r0, r5
 800453c:	d026      	beq.n	800458c <HAL_DMA_Start_IT+0xac>
 800453e:	3518      	adds	r5, #24
 8004540:	42a8      	cmp	r0, r5
 8004542:	d023      	beq.n	800458c <HAL_DMA_Start_IT+0xac>
 8004544:	3518      	adds	r5, #24
 8004546:	42a8      	cmp	r0, r5
 8004548:	d020      	beq.n	800458c <HAL_DMA_Start_IT+0xac>
 800454a:	3518      	adds	r5, #24
 800454c:	42a8      	cmp	r0, r5
 800454e:	d01d      	beq.n	800458c <HAL_DMA_Start_IT+0xac>
 8004550:	f505 7556 	add.w	r5, r5, #856	@ 0x358
 8004554:	42a8      	cmp	r0, r5
 8004556:	d019      	beq.n	800458c <HAL_DMA_Start_IT+0xac>
 8004558:	3518      	adds	r5, #24
 800455a:	42a8      	cmp	r0, r5
 800455c:	d016      	beq.n	800458c <HAL_DMA_Start_IT+0xac>
 800455e:	3518      	adds	r5, #24
 8004560:	42a8      	cmp	r0, r5
 8004562:	d013      	beq.n	800458c <HAL_DMA_Start_IT+0xac>
 8004564:	3518      	adds	r5, #24
 8004566:	42a8      	cmp	r0, r5
 8004568:	d010      	beq.n	800458c <HAL_DMA_Start_IT+0xac>
 800456a:	3518      	adds	r5, #24
 800456c:	42a8      	cmp	r0, r5
 800456e:	d00d      	beq.n	800458c <HAL_DMA_Start_IT+0xac>
 8004570:	3518      	adds	r5, #24
 8004572:	42a8      	cmp	r0, r5
 8004574:	d00a      	beq.n	800458c <HAL_DMA_Start_IT+0xac>
 8004576:	3518      	adds	r5, #24
 8004578:	42a8      	cmp	r0, r5
 800457a:	d007      	beq.n	800458c <HAL_DMA_Start_IT+0xac>
 800457c:	3518      	adds	r5, #24
 800457e:	42a8      	cmp	r0, r5
 8004580:	d004      	beq.n	800458c <HAL_DMA_Start_IT+0xac>
 8004582:	6805      	ldr	r5, [r0, #0]
 8004584:	f025 0501 	bic.w	r5, r5, #1
 8004588:	6005      	str	r5, [r0, #0]
 800458a:	e003      	b.n	8004594 <HAL_DMA_Start_IT+0xb4>
 800458c:	6805      	ldr	r5, [r0, #0]
 800458e:	f025 0501 	bic.w	r5, r5, #1
 8004592:	6005      	str	r5, [r0, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004594:	4620      	mov	r0, r4
 8004596:	f7ff fbbf 	bl	8003d18 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800459a:	6823      	ldr	r3, [r4, #0]
 800459c:	4973      	ldr	r1, [pc, #460]	@ (800476c <HAL_DMA_Start_IT+0x28c>)
 800459e:	4a74      	ldr	r2, [pc, #464]	@ (8004770 <HAL_DMA_Start_IT+0x290>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	bf18      	it	ne
 80045a4:	428b      	cmpne	r3, r1
 80045a6:	d038      	beq.n	800461a <HAL_DMA_Start_IT+0x13a>
 80045a8:	3218      	adds	r2, #24
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d035      	beq.n	800461a <HAL_DMA_Start_IT+0x13a>
 80045ae:	3218      	adds	r2, #24
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d032      	beq.n	800461a <HAL_DMA_Start_IT+0x13a>
 80045b4:	3218      	adds	r2, #24
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d02f      	beq.n	800461a <HAL_DMA_Start_IT+0x13a>
 80045ba:	3218      	adds	r2, #24
 80045bc:	4293      	cmp	r3, r2
 80045be:	d02c      	beq.n	800461a <HAL_DMA_Start_IT+0x13a>
 80045c0:	3218      	adds	r2, #24
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d029      	beq.n	800461a <HAL_DMA_Start_IT+0x13a>
 80045c6:	3218      	adds	r2, #24
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d026      	beq.n	800461a <HAL_DMA_Start_IT+0x13a>
 80045cc:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d022      	beq.n	800461a <HAL_DMA_Start_IT+0x13a>
 80045d4:	3218      	adds	r2, #24
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d01f      	beq.n	800461a <HAL_DMA_Start_IT+0x13a>
 80045da:	3218      	adds	r2, #24
 80045dc:	4293      	cmp	r3, r2
 80045de:	d01c      	beq.n	800461a <HAL_DMA_Start_IT+0x13a>
 80045e0:	3218      	adds	r2, #24
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d019      	beq.n	800461a <HAL_DMA_Start_IT+0x13a>
 80045e6:	3218      	adds	r2, #24
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d016      	beq.n	800461a <HAL_DMA_Start_IT+0x13a>
 80045ec:	3218      	adds	r2, #24
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d013      	beq.n	800461a <HAL_DMA_Start_IT+0x13a>
 80045f2:	3218      	adds	r2, #24
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d010      	beq.n	800461a <HAL_DMA_Start_IT+0x13a>
 80045f8:	3218      	adds	r2, #24
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d00d      	beq.n	800461a <HAL_DMA_Start_IT+0x13a>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	f022 020e 	bic.w	r2, r2, #14
 8004604:	f042 020a 	orr.w	r2, r2, #10
 8004608:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800460a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800460c:	b193      	cbz	r3, 8004634 <HAL_DMA_Start_IT+0x154>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800460e:	6822      	ldr	r2, [r4, #0]
 8004610:	6813      	ldr	r3, [r2, #0]
 8004612:	f043 0304 	orr.w	r3, r3, #4
 8004616:	6013      	str	r3, [r2, #0]
 8004618:	e00c      	b.n	8004634 <HAL_DMA_Start_IT+0x154>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	f022 021e 	bic.w	r2, r2, #30
 8004620:	f042 0216 	orr.w	r2, r2, #22
 8004624:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8004626:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004628:	b123      	cbz	r3, 8004634 <HAL_DMA_Start_IT+0x154>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800462a:	6822      	ldr	r2, [r4, #0]
 800462c:	6813      	ldr	r3, [r2, #0]
 800462e:	f043 0308 	orr.w	r3, r3, #8
 8004632:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004634:	6823      	ldr	r3, [r4, #0]
 8004636:	494d      	ldr	r1, [pc, #308]	@ (800476c <HAL_DMA_Start_IT+0x28c>)
 8004638:	4a4d      	ldr	r2, [pc, #308]	@ (8004770 <HAL_DMA_Start_IT+0x290>)
 800463a:	4293      	cmp	r3, r2
 800463c:	bf18      	it	ne
 800463e:	428b      	cmpne	r3, r1
 8004640:	d042      	beq.n	80046c8 <HAL_DMA_Start_IT+0x1e8>
 8004642:	3218      	adds	r2, #24
 8004644:	4293      	cmp	r3, r2
 8004646:	d03f      	beq.n	80046c8 <HAL_DMA_Start_IT+0x1e8>
 8004648:	3218      	adds	r2, #24
 800464a:	4293      	cmp	r3, r2
 800464c:	d03c      	beq.n	80046c8 <HAL_DMA_Start_IT+0x1e8>
 800464e:	3218      	adds	r2, #24
 8004650:	4293      	cmp	r3, r2
 8004652:	d039      	beq.n	80046c8 <HAL_DMA_Start_IT+0x1e8>
 8004654:	3218      	adds	r2, #24
 8004656:	4293      	cmp	r3, r2
 8004658:	d036      	beq.n	80046c8 <HAL_DMA_Start_IT+0x1e8>
 800465a:	3218      	adds	r2, #24
 800465c:	4293      	cmp	r3, r2
 800465e:	d033      	beq.n	80046c8 <HAL_DMA_Start_IT+0x1e8>
 8004660:	3218      	adds	r2, #24
 8004662:	4293      	cmp	r3, r2
 8004664:	d030      	beq.n	80046c8 <HAL_DMA_Start_IT+0x1e8>
 8004666:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 800466a:	4293      	cmp	r3, r2
 800466c:	d02c      	beq.n	80046c8 <HAL_DMA_Start_IT+0x1e8>
 800466e:	3218      	adds	r2, #24
 8004670:	4293      	cmp	r3, r2
 8004672:	d029      	beq.n	80046c8 <HAL_DMA_Start_IT+0x1e8>
 8004674:	3218      	adds	r2, #24
 8004676:	4293      	cmp	r3, r2
 8004678:	d026      	beq.n	80046c8 <HAL_DMA_Start_IT+0x1e8>
 800467a:	3218      	adds	r2, #24
 800467c:	4293      	cmp	r3, r2
 800467e:	d023      	beq.n	80046c8 <HAL_DMA_Start_IT+0x1e8>
 8004680:	3218      	adds	r2, #24
 8004682:	4293      	cmp	r3, r2
 8004684:	d020      	beq.n	80046c8 <HAL_DMA_Start_IT+0x1e8>
 8004686:	3218      	adds	r2, #24
 8004688:	4293      	cmp	r3, r2
 800468a:	d01d      	beq.n	80046c8 <HAL_DMA_Start_IT+0x1e8>
 800468c:	3218      	adds	r2, #24
 800468e:	4293      	cmp	r3, r2
 8004690:	d01a      	beq.n	80046c8 <HAL_DMA_Start_IT+0x1e8>
 8004692:	3218      	adds	r2, #24
 8004694:	4293      	cmp	r3, r2
 8004696:	d017      	beq.n	80046c8 <HAL_DMA_Start_IT+0x1e8>
 8004698:	4a36      	ldr	r2, [pc, #216]	@ (8004774 <HAL_DMA_Start_IT+0x294>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d014      	beq.n	80046c8 <HAL_DMA_Start_IT+0x1e8>
 800469e:	3214      	adds	r2, #20
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d011      	beq.n	80046c8 <HAL_DMA_Start_IT+0x1e8>
 80046a4:	3214      	adds	r2, #20
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d00e      	beq.n	80046c8 <HAL_DMA_Start_IT+0x1e8>
 80046aa:	3214      	adds	r2, #20
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d00b      	beq.n	80046c8 <HAL_DMA_Start_IT+0x1e8>
 80046b0:	3214      	adds	r2, #20
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d008      	beq.n	80046c8 <HAL_DMA_Start_IT+0x1e8>
 80046b6:	3214      	adds	r2, #20
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d005      	beq.n	80046c8 <HAL_DMA_Start_IT+0x1e8>
 80046bc:	3214      	adds	r2, #20
 80046be:	4293      	cmp	r3, r2
 80046c0:	d002      	beq.n	80046c8 <HAL_DMA_Start_IT+0x1e8>
 80046c2:	3214      	adds	r2, #20
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d10e      	bne.n	80046e6 <HAL_DMA_Start_IT+0x206>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80046c8:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 80046d0:	d003      	beq.n	80046da <HAL_DMA_Start_IT+0x1fa>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046d8:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 80046da:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80046dc:	b11b      	cbz	r3, 80046e6 <HAL_DMA_Start_IT+0x206>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046e4:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80046e6:	6823      	ldr	r3, [r4, #0]
 80046e8:	4920      	ldr	r1, [pc, #128]	@ (800476c <HAL_DMA_Start_IT+0x28c>)
 80046ea:	4a21      	ldr	r2, [pc, #132]	@ (8004770 <HAL_DMA_Start_IT+0x290>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	bf18      	it	ne
 80046f0:	428b      	cmpne	r3, r1
 80046f2:	d030      	beq.n	8004756 <HAL_DMA_Start_IT+0x276>
 80046f4:	3218      	adds	r2, #24
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d02d      	beq.n	8004756 <HAL_DMA_Start_IT+0x276>
 80046fa:	3218      	adds	r2, #24
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d02a      	beq.n	8004756 <HAL_DMA_Start_IT+0x276>
 8004700:	3218      	adds	r2, #24
 8004702:	4293      	cmp	r3, r2
 8004704:	d027      	beq.n	8004756 <HAL_DMA_Start_IT+0x276>
 8004706:	3218      	adds	r2, #24
 8004708:	4293      	cmp	r3, r2
 800470a:	d024      	beq.n	8004756 <HAL_DMA_Start_IT+0x276>
 800470c:	3218      	adds	r2, #24
 800470e:	4293      	cmp	r3, r2
 8004710:	d021      	beq.n	8004756 <HAL_DMA_Start_IT+0x276>
 8004712:	3218      	adds	r2, #24
 8004714:	4293      	cmp	r3, r2
 8004716:	d01e      	beq.n	8004756 <HAL_DMA_Start_IT+0x276>
 8004718:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 800471c:	4293      	cmp	r3, r2
 800471e:	d01a      	beq.n	8004756 <HAL_DMA_Start_IT+0x276>
 8004720:	3218      	adds	r2, #24
 8004722:	4293      	cmp	r3, r2
 8004724:	d017      	beq.n	8004756 <HAL_DMA_Start_IT+0x276>
 8004726:	3218      	adds	r2, #24
 8004728:	4293      	cmp	r3, r2
 800472a:	d014      	beq.n	8004756 <HAL_DMA_Start_IT+0x276>
 800472c:	3218      	adds	r2, #24
 800472e:	4293      	cmp	r3, r2
 8004730:	d011      	beq.n	8004756 <HAL_DMA_Start_IT+0x276>
 8004732:	3218      	adds	r2, #24
 8004734:	4293      	cmp	r3, r2
 8004736:	d00e      	beq.n	8004756 <HAL_DMA_Start_IT+0x276>
 8004738:	3218      	adds	r2, #24
 800473a:	4293      	cmp	r3, r2
 800473c:	d00b      	beq.n	8004756 <HAL_DMA_Start_IT+0x276>
 800473e:	3218      	adds	r2, #24
 8004740:	4293      	cmp	r3, r2
 8004742:	d008      	beq.n	8004756 <HAL_DMA_Start_IT+0x276>
 8004744:	3218      	adds	r2, #24
 8004746:	4293      	cmp	r3, r2
 8004748:	d005      	beq.n	8004756 <HAL_DMA_Start_IT+0x276>
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	f042 0201 	orr.w	r2, r2, #1
 8004750:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004752:	2000      	movs	r0, #0
 8004754:	e6dd      	b.n	8004512 <HAL_DMA_Start_IT+0x32>
    __HAL_DMA_ENABLE(hdma);
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	f042 0201 	orr.w	r2, r2, #1
 800475c:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800475e:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8004760:	e6d7      	b.n	8004512 <HAL_DMA_Start_IT+0x32>
    return HAL_ERROR;
 8004762:	2001      	movs	r0, #1
}
 8004764:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8004766:	2002      	movs	r0, #2
 8004768:	e6d3      	b.n	8004512 <HAL_DMA_Start_IT+0x32>
 800476a:	bf00      	nop
 800476c:	40020010 	.word	0x40020010
 8004770:	40020028 	.word	0x40020028
 8004774:	58025408 	.word	0x58025408

08004778 <HAL_DMA_Abort>:
{
 8004778:	b570      	push	{r4, r5, r6, lr}
 800477a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800477c:	f7fe fcb0 	bl	80030e0 <HAL_GetTick>
  if(hdma == NULL)
 8004780:	2c00      	cmp	r4, #0
 8004782:	f000 8191 	beq.w	8004aa8 <HAL_DMA_Abort+0x330>
 8004786:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004788:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b02      	cmp	r3, #2
 8004790:	d006      	beq.n	80047a0 <HAL_DMA_Abort+0x28>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004792:	2380      	movs	r3, #128	@ 0x80
 8004794:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8004796:	2300      	movs	r3, #0
 8004798:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 800479c:	2001      	movs	r0, #1
}
 800479e:	bd70      	pop	{r4, r5, r6, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80047a0:	6823      	ldr	r3, [r4, #0]
 80047a2:	498c      	ldr	r1, [pc, #560]	@ (80049d4 <HAL_DMA_Abort+0x25c>)
 80047a4:	4a8c      	ldr	r2, [pc, #560]	@ (80049d8 <HAL_DMA_Abort+0x260>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	bf18      	it	ne
 80047aa:	428b      	cmpne	r3, r1
 80047ac:	d030      	beq.n	8004810 <HAL_DMA_Abort+0x98>
 80047ae:	3218      	adds	r2, #24
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d02d      	beq.n	8004810 <HAL_DMA_Abort+0x98>
 80047b4:	3218      	adds	r2, #24
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d02a      	beq.n	8004810 <HAL_DMA_Abort+0x98>
 80047ba:	3218      	adds	r2, #24
 80047bc:	4293      	cmp	r3, r2
 80047be:	d027      	beq.n	8004810 <HAL_DMA_Abort+0x98>
 80047c0:	3218      	adds	r2, #24
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d024      	beq.n	8004810 <HAL_DMA_Abort+0x98>
 80047c6:	3218      	adds	r2, #24
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d021      	beq.n	8004810 <HAL_DMA_Abort+0x98>
 80047cc:	3218      	adds	r2, #24
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d01e      	beq.n	8004810 <HAL_DMA_Abort+0x98>
 80047d2:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d01a      	beq.n	8004810 <HAL_DMA_Abort+0x98>
 80047da:	3218      	adds	r2, #24
 80047dc:	4293      	cmp	r3, r2
 80047de:	d017      	beq.n	8004810 <HAL_DMA_Abort+0x98>
 80047e0:	3218      	adds	r2, #24
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d014      	beq.n	8004810 <HAL_DMA_Abort+0x98>
 80047e6:	3218      	adds	r2, #24
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d011      	beq.n	8004810 <HAL_DMA_Abort+0x98>
 80047ec:	3218      	adds	r2, #24
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d00e      	beq.n	8004810 <HAL_DMA_Abort+0x98>
 80047f2:	3218      	adds	r2, #24
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d00b      	beq.n	8004810 <HAL_DMA_Abort+0x98>
 80047f8:	3218      	adds	r2, #24
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d008      	beq.n	8004810 <HAL_DMA_Abort+0x98>
 80047fe:	3218      	adds	r2, #24
 8004800:	4293      	cmp	r3, r2
 8004802:	d005      	beq.n	8004810 <HAL_DMA_Abort+0x98>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	f022 020e 	bic.w	r2, r2, #14
 800480a:	601a      	str	r2, [r3, #0]
      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800480c:	6826      	ldr	r6, [r4, #0]
 800480e:	e009      	b.n	8004824 <HAL_DMA_Abort+0xac>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	f022 021e 	bic.w	r2, r2, #30
 8004816:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004818:	6822      	ldr	r2, [r4, #0]
 800481a:	6953      	ldr	r3, [r2, #20]
 800481c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004820:	6153      	str	r3, [r2, #20]
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004822:	6826      	ldr	r6, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004824:	6823      	ldr	r3, [r4, #0]
 8004826:	496b      	ldr	r1, [pc, #428]	@ (80049d4 <HAL_DMA_Abort+0x25c>)
 8004828:	4a6b      	ldr	r2, [pc, #428]	@ (80049d8 <HAL_DMA_Abort+0x260>)
 800482a:	4293      	cmp	r3, r2
 800482c:	bf18      	it	ne
 800482e:	428b      	cmpne	r3, r1
 8004830:	d042      	beq.n	80048b8 <HAL_DMA_Abort+0x140>
 8004832:	3218      	adds	r2, #24
 8004834:	4293      	cmp	r3, r2
 8004836:	d03f      	beq.n	80048b8 <HAL_DMA_Abort+0x140>
 8004838:	3218      	adds	r2, #24
 800483a:	4293      	cmp	r3, r2
 800483c:	d03c      	beq.n	80048b8 <HAL_DMA_Abort+0x140>
 800483e:	3218      	adds	r2, #24
 8004840:	4293      	cmp	r3, r2
 8004842:	d039      	beq.n	80048b8 <HAL_DMA_Abort+0x140>
 8004844:	3218      	adds	r2, #24
 8004846:	4293      	cmp	r3, r2
 8004848:	d036      	beq.n	80048b8 <HAL_DMA_Abort+0x140>
 800484a:	3218      	adds	r2, #24
 800484c:	4293      	cmp	r3, r2
 800484e:	d033      	beq.n	80048b8 <HAL_DMA_Abort+0x140>
 8004850:	3218      	adds	r2, #24
 8004852:	4293      	cmp	r3, r2
 8004854:	d030      	beq.n	80048b8 <HAL_DMA_Abort+0x140>
 8004856:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 800485a:	4293      	cmp	r3, r2
 800485c:	d02c      	beq.n	80048b8 <HAL_DMA_Abort+0x140>
 800485e:	3218      	adds	r2, #24
 8004860:	4293      	cmp	r3, r2
 8004862:	d029      	beq.n	80048b8 <HAL_DMA_Abort+0x140>
 8004864:	3218      	adds	r2, #24
 8004866:	4293      	cmp	r3, r2
 8004868:	d026      	beq.n	80048b8 <HAL_DMA_Abort+0x140>
 800486a:	3218      	adds	r2, #24
 800486c:	4293      	cmp	r3, r2
 800486e:	d023      	beq.n	80048b8 <HAL_DMA_Abort+0x140>
 8004870:	3218      	adds	r2, #24
 8004872:	4293      	cmp	r3, r2
 8004874:	d020      	beq.n	80048b8 <HAL_DMA_Abort+0x140>
 8004876:	3218      	adds	r2, #24
 8004878:	4293      	cmp	r3, r2
 800487a:	d01d      	beq.n	80048b8 <HAL_DMA_Abort+0x140>
 800487c:	3218      	adds	r2, #24
 800487e:	4293      	cmp	r3, r2
 8004880:	d01a      	beq.n	80048b8 <HAL_DMA_Abort+0x140>
 8004882:	3218      	adds	r2, #24
 8004884:	4293      	cmp	r3, r2
 8004886:	d017      	beq.n	80048b8 <HAL_DMA_Abort+0x140>
 8004888:	4a54      	ldr	r2, [pc, #336]	@ (80049dc <HAL_DMA_Abort+0x264>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d014      	beq.n	80048b8 <HAL_DMA_Abort+0x140>
 800488e:	3214      	adds	r2, #20
 8004890:	4293      	cmp	r3, r2
 8004892:	d011      	beq.n	80048b8 <HAL_DMA_Abort+0x140>
 8004894:	3214      	adds	r2, #20
 8004896:	4293      	cmp	r3, r2
 8004898:	d00e      	beq.n	80048b8 <HAL_DMA_Abort+0x140>
 800489a:	3214      	adds	r2, #20
 800489c:	4293      	cmp	r3, r2
 800489e:	d00b      	beq.n	80048b8 <HAL_DMA_Abort+0x140>
 80048a0:	3214      	adds	r2, #20
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d008      	beq.n	80048b8 <HAL_DMA_Abort+0x140>
 80048a6:	3214      	adds	r2, #20
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d005      	beq.n	80048b8 <HAL_DMA_Abort+0x140>
 80048ac:	3214      	adds	r2, #20
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d002      	beq.n	80048b8 <HAL_DMA_Abort+0x140>
 80048b2:	3214      	adds	r2, #20
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d104      	bne.n	80048c2 <HAL_DMA_Abort+0x14a>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80048b8:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80048ba:	6813      	ldr	r3, [r2, #0]
 80048bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048c0:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80048c2:	6823      	ldr	r3, [r4, #0]
 80048c4:	4943      	ldr	r1, [pc, #268]	@ (80049d4 <HAL_DMA_Abort+0x25c>)
 80048c6:	4a44      	ldr	r2, [pc, #272]	@ (80049d8 <HAL_DMA_Abort+0x260>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	bf18      	it	ne
 80048cc:	428b      	cmpne	r3, r1
 80048ce:	d02f      	beq.n	8004930 <HAL_DMA_Abort+0x1b8>
 80048d0:	3218      	adds	r2, #24
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d02c      	beq.n	8004930 <HAL_DMA_Abort+0x1b8>
 80048d6:	3218      	adds	r2, #24
 80048d8:	4293      	cmp	r3, r2
 80048da:	d029      	beq.n	8004930 <HAL_DMA_Abort+0x1b8>
 80048dc:	3218      	adds	r2, #24
 80048de:	4293      	cmp	r3, r2
 80048e0:	d026      	beq.n	8004930 <HAL_DMA_Abort+0x1b8>
 80048e2:	3218      	adds	r2, #24
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d023      	beq.n	8004930 <HAL_DMA_Abort+0x1b8>
 80048e8:	3218      	adds	r2, #24
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d020      	beq.n	8004930 <HAL_DMA_Abort+0x1b8>
 80048ee:	3218      	adds	r2, #24
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d01d      	beq.n	8004930 <HAL_DMA_Abort+0x1b8>
 80048f4:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d019      	beq.n	8004930 <HAL_DMA_Abort+0x1b8>
 80048fc:	3218      	adds	r2, #24
 80048fe:	4293      	cmp	r3, r2
 8004900:	d016      	beq.n	8004930 <HAL_DMA_Abort+0x1b8>
 8004902:	3218      	adds	r2, #24
 8004904:	4293      	cmp	r3, r2
 8004906:	d013      	beq.n	8004930 <HAL_DMA_Abort+0x1b8>
 8004908:	3218      	adds	r2, #24
 800490a:	4293      	cmp	r3, r2
 800490c:	d010      	beq.n	8004930 <HAL_DMA_Abort+0x1b8>
 800490e:	3218      	adds	r2, #24
 8004910:	4293      	cmp	r3, r2
 8004912:	d00d      	beq.n	8004930 <HAL_DMA_Abort+0x1b8>
 8004914:	3218      	adds	r2, #24
 8004916:	4293      	cmp	r3, r2
 8004918:	d00a      	beq.n	8004930 <HAL_DMA_Abort+0x1b8>
 800491a:	3218      	adds	r2, #24
 800491c:	4293      	cmp	r3, r2
 800491e:	d007      	beq.n	8004930 <HAL_DMA_Abort+0x1b8>
 8004920:	3218      	adds	r2, #24
 8004922:	4293      	cmp	r3, r2
 8004924:	d004      	beq.n	8004930 <HAL_DMA_Abort+0x1b8>
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	f022 0201 	bic.w	r2, r2, #1
 800492c:	601a      	str	r2, [r3, #0]
 800492e:	e003      	b.n	8004938 <HAL_DMA_Abort+0x1c0>
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	f022 0201 	bic.w	r2, r2, #1
 8004936:	601a      	str	r2, [r3, #0]
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004938:	6833      	ldr	r3, [r6, #0]
 800493a:	f013 0f01 	tst.w	r3, #1
 800493e:	d00e      	beq.n	800495e <HAL_DMA_Abort+0x1e6>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004940:	f7fe fbce 	bl	80030e0 <HAL_GetTick>
 8004944:	1b43      	subs	r3, r0, r5
 8004946:	2b05      	cmp	r3, #5
 8004948:	d9f6      	bls.n	8004938 <HAL_DMA_Abort+0x1c0>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800494a:	2320      	movs	r3, #32
 800494c:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 800494e:	2303      	movs	r3, #3
 8004950:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8004954:	2300      	movs	r3, #0
 8004956:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        return HAL_ERROR;
 800495a:	2001      	movs	r0, #1
 800495c:	e71f      	b.n	800479e <HAL_DMA_Abort+0x26>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800495e:	6823      	ldr	r3, [r4, #0]
 8004960:	491c      	ldr	r1, [pc, #112]	@ (80049d4 <HAL_DMA_Abort+0x25c>)
 8004962:	4a1d      	ldr	r2, [pc, #116]	@ (80049d8 <HAL_DMA_Abort+0x260>)
 8004964:	4293      	cmp	r3, r2
 8004966:	bf18      	it	ne
 8004968:	428b      	cmpne	r3, r1
 800496a:	d039      	beq.n	80049e0 <HAL_DMA_Abort+0x268>
 800496c:	3218      	adds	r2, #24
 800496e:	4293      	cmp	r3, r2
 8004970:	d036      	beq.n	80049e0 <HAL_DMA_Abort+0x268>
 8004972:	3218      	adds	r2, #24
 8004974:	4293      	cmp	r3, r2
 8004976:	d033      	beq.n	80049e0 <HAL_DMA_Abort+0x268>
 8004978:	3218      	adds	r2, #24
 800497a:	4293      	cmp	r3, r2
 800497c:	d030      	beq.n	80049e0 <HAL_DMA_Abort+0x268>
 800497e:	3218      	adds	r2, #24
 8004980:	4293      	cmp	r3, r2
 8004982:	d02d      	beq.n	80049e0 <HAL_DMA_Abort+0x268>
 8004984:	3218      	adds	r2, #24
 8004986:	4293      	cmp	r3, r2
 8004988:	d02a      	beq.n	80049e0 <HAL_DMA_Abort+0x268>
 800498a:	3218      	adds	r2, #24
 800498c:	4293      	cmp	r3, r2
 800498e:	d027      	beq.n	80049e0 <HAL_DMA_Abort+0x268>
 8004990:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004994:	4293      	cmp	r3, r2
 8004996:	d023      	beq.n	80049e0 <HAL_DMA_Abort+0x268>
 8004998:	3218      	adds	r2, #24
 800499a:	4293      	cmp	r3, r2
 800499c:	d020      	beq.n	80049e0 <HAL_DMA_Abort+0x268>
 800499e:	3218      	adds	r2, #24
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d01d      	beq.n	80049e0 <HAL_DMA_Abort+0x268>
 80049a4:	3218      	adds	r2, #24
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d01a      	beq.n	80049e0 <HAL_DMA_Abort+0x268>
 80049aa:	3218      	adds	r2, #24
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d017      	beq.n	80049e0 <HAL_DMA_Abort+0x268>
 80049b0:	3218      	adds	r2, #24
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d014      	beq.n	80049e0 <HAL_DMA_Abort+0x268>
 80049b6:	3218      	adds	r2, #24
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d011      	beq.n	80049e0 <HAL_DMA_Abort+0x268>
 80049bc:	3218      	adds	r2, #24
 80049be:	4293      	cmp	r3, r2
 80049c0:	d00e      	beq.n	80049e0 <HAL_DMA_Abort+0x268>
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80049c2:	6da1      	ldr	r1, [r4, #88]	@ 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80049c4:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80049c6:	f003 021f 	and.w	r2, r3, #31
 80049ca:	2301      	movs	r3, #1
 80049cc:	4093      	lsls	r3, r2
 80049ce:	604b      	str	r3, [r1, #4]
 80049d0:	e00d      	b.n	80049ee <HAL_DMA_Abort+0x276>
 80049d2:	bf00      	nop
 80049d4:	40020010 	.word	0x40020010
 80049d8:	40020028 	.word	0x40020028
 80049dc:	58025408 	.word	0x58025408
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049e0:	6da1      	ldr	r1, [r4, #88]	@ 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80049e2:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80049e4:	f003 021f 	and.w	r2, r3, #31
 80049e8:	233f      	movs	r3, #63	@ 0x3f
 80049ea:	4093      	lsls	r3, r2
 80049ec:	608b      	str	r3, [r1, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80049ee:	6823      	ldr	r3, [r4, #0]
 80049f0:	492e      	ldr	r1, [pc, #184]	@ (8004aac <HAL_DMA_Abort+0x334>)
 80049f2:	4a2f      	ldr	r2, [pc, #188]	@ (8004ab0 <HAL_DMA_Abort+0x338>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	bf18      	it	ne
 80049f8:	428b      	cmpne	r3, r1
 80049fa:	d042      	beq.n	8004a82 <HAL_DMA_Abort+0x30a>
 80049fc:	3218      	adds	r2, #24
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d03f      	beq.n	8004a82 <HAL_DMA_Abort+0x30a>
 8004a02:	3218      	adds	r2, #24
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d03c      	beq.n	8004a82 <HAL_DMA_Abort+0x30a>
 8004a08:	3218      	adds	r2, #24
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d039      	beq.n	8004a82 <HAL_DMA_Abort+0x30a>
 8004a0e:	3218      	adds	r2, #24
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d036      	beq.n	8004a82 <HAL_DMA_Abort+0x30a>
 8004a14:	3218      	adds	r2, #24
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d033      	beq.n	8004a82 <HAL_DMA_Abort+0x30a>
 8004a1a:	3218      	adds	r2, #24
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d030      	beq.n	8004a82 <HAL_DMA_Abort+0x30a>
 8004a20:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d02c      	beq.n	8004a82 <HAL_DMA_Abort+0x30a>
 8004a28:	3218      	adds	r2, #24
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d029      	beq.n	8004a82 <HAL_DMA_Abort+0x30a>
 8004a2e:	3218      	adds	r2, #24
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d026      	beq.n	8004a82 <HAL_DMA_Abort+0x30a>
 8004a34:	3218      	adds	r2, #24
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d023      	beq.n	8004a82 <HAL_DMA_Abort+0x30a>
 8004a3a:	3218      	adds	r2, #24
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d020      	beq.n	8004a82 <HAL_DMA_Abort+0x30a>
 8004a40:	3218      	adds	r2, #24
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d01d      	beq.n	8004a82 <HAL_DMA_Abort+0x30a>
 8004a46:	3218      	adds	r2, #24
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d01a      	beq.n	8004a82 <HAL_DMA_Abort+0x30a>
 8004a4c:	3218      	adds	r2, #24
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d017      	beq.n	8004a82 <HAL_DMA_Abort+0x30a>
 8004a52:	4a18      	ldr	r2, [pc, #96]	@ (8004ab4 <HAL_DMA_Abort+0x33c>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d014      	beq.n	8004a82 <HAL_DMA_Abort+0x30a>
 8004a58:	3214      	adds	r2, #20
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d011      	beq.n	8004a82 <HAL_DMA_Abort+0x30a>
 8004a5e:	3214      	adds	r2, #20
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d00e      	beq.n	8004a82 <HAL_DMA_Abort+0x30a>
 8004a64:	3214      	adds	r2, #20
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d00b      	beq.n	8004a82 <HAL_DMA_Abort+0x30a>
 8004a6a:	3214      	adds	r2, #20
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d008      	beq.n	8004a82 <HAL_DMA_Abort+0x30a>
 8004a70:	3214      	adds	r2, #20
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d005      	beq.n	8004a82 <HAL_DMA_Abort+0x30a>
 8004a76:	3214      	adds	r2, #20
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d002      	beq.n	8004a82 <HAL_DMA_Abort+0x30a>
 8004a7c:	3214      	adds	r2, #20
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d10b      	bne.n	8004a9a <HAL_DMA_Abort+0x322>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a84:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 8004a86:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8004a88:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8004a8a:	b133      	cbz	r3, 8004a9a <HAL_DMA_Abort+0x322>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a92:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a94:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8004a96:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 8004a98:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8004aa0:	2000      	movs	r0, #0
 8004aa2:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  return HAL_OK;
 8004aa6:	e67a      	b.n	800479e <HAL_DMA_Abort+0x26>
    return HAL_ERROR;
 8004aa8:	2001      	movs	r0, #1
 8004aaa:	e678      	b.n	800479e <HAL_DMA_Abort+0x26>
 8004aac:	40020010 	.word	0x40020010
 8004ab0:	40020028 	.word	0x40020028
 8004ab4:	58025408 	.word	0x58025408

08004ab8 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8004ab8:	2800      	cmp	r0, #0
 8004aba:	f000 8128 	beq.w	8004d0e <HAL_DMA_Abort_IT+0x256>
{
 8004abe:	b508      	push	{r3, lr}
 8004ac0:	4602      	mov	r2, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ac2:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d003      	beq.n	8004ad4 <HAL_DMA_Abort_IT+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004acc:	2380      	movs	r3, #128	@ 0x80
 8004ace:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8004ad0:	2001      	movs	r0, #1
}
 8004ad2:	bd08      	pop	{r3, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ad4:	6803      	ldr	r3, [r0, #0]
 8004ad6:	4890      	ldr	r0, [pc, #576]	@ (8004d18 <HAL_DMA_Abort_IT+0x260>)
 8004ad8:	4990      	ldr	r1, [pc, #576]	@ (8004d1c <HAL_DMA_Abort_IT+0x264>)
 8004ada:	428b      	cmp	r3, r1
 8004adc:	bf18      	it	ne
 8004ade:	4283      	cmpne	r3, r0
 8004ae0:	bf0c      	ite	eq
 8004ae2:	2001      	moveq	r0, #1
 8004ae4:	2000      	movne	r0, #0
 8004ae6:	d065      	beq.n	8004bb4 <HAL_DMA_Abort_IT+0xfc>
 8004ae8:	3118      	adds	r1, #24
 8004aea:	428b      	cmp	r3, r1
 8004aec:	d062      	beq.n	8004bb4 <HAL_DMA_Abort_IT+0xfc>
 8004aee:	3118      	adds	r1, #24
 8004af0:	428b      	cmp	r3, r1
 8004af2:	d05f      	beq.n	8004bb4 <HAL_DMA_Abort_IT+0xfc>
 8004af4:	3118      	adds	r1, #24
 8004af6:	428b      	cmp	r3, r1
 8004af8:	d05c      	beq.n	8004bb4 <HAL_DMA_Abort_IT+0xfc>
 8004afa:	3118      	adds	r1, #24
 8004afc:	428b      	cmp	r3, r1
 8004afe:	d059      	beq.n	8004bb4 <HAL_DMA_Abort_IT+0xfc>
 8004b00:	3118      	adds	r1, #24
 8004b02:	428b      	cmp	r3, r1
 8004b04:	d056      	beq.n	8004bb4 <HAL_DMA_Abort_IT+0xfc>
 8004b06:	3118      	adds	r1, #24
 8004b08:	428b      	cmp	r3, r1
 8004b0a:	d053      	beq.n	8004bb4 <HAL_DMA_Abort_IT+0xfc>
 8004b0c:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8004b10:	428b      	cmp	r3, r1
 8004b12:	d04f      	beq.n	8004bb4 <HAL_DMA_Abort_IT+0xfc>
 8004b14:	3118      	adds	r1, #24
 8004b16:	428b      	cmp	r3, r1
 8004b18:	d04c      	beq.n	8004bb4 <HAL_DMA_Abort_IT+0xfc>
 8004b1a:	3118      	adds	r1, #24
 8004b1c:	428b      	cmp	r3, r1
 8004b1e:	d049      	beq.n	8004bb4 <HAL_DMA_Abort_IT+0xfc>
 8004b20:	3118      	adds	r1, #24
 8004b22:	428b      	cmp	r3, r1
 8004b24:	d046      	beq.n	8004bb4 <HAL_DMA_Abort_IT+0xfc>
 8004b26:	3118      	adds	r1, #24
 8004b28:	428b      	cmp	r3, r1
 8004b2a:	d043      	beq.n	8004bb4 <HAL_DMA_Abort_IT+0xfc>
 8004b2c:	3118      	adds	r1, #24
 8004b2e:	428b      	cmp	r3, r1
 8004b30:	d040      	beq.n	8004bb4 <HAL_DMA_Abort_IT+0xfc>
 8004b32:	3118      	adds	r1, #24
 8004b34:	428b      	cmp	r3, r1
 8004b36:	d03d      	beq.n	8004bb4 <HAL_DMA_Abort_IT+0xfc>
 8004b38:	3118      	adds	r1, #24
 8004b3a:	428b      	cmp	r3, r1
 8004b3c:	d03a      	beq.n	8004bb4 <HAL_DMA_Abort_IT+0xfc>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004b3e:	6819      	ldr	r1, [r3, #0]
 8004b40:	f021 010e 	bic.w	r1, r1, #14
 8004b44:	6019      	str	r1, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 8004b46:	6813      	ldr	r3, [r2, #0]
 8004b48:	4873      	ldr	r0, [pc, #460]	@ (8004d18 <HAL_DMA_Abort_IT+0x260>)
 8004b4a:	4974      	ldr	r1, [pc, #464]	@ (8004d1c <HAL_DMA_Abort_IT+0x264>)
 8004b4c:	428b      	cmp	r3, r1
 8004b4e:	bf18      	it	ne
 8004b50:	4283      	cmpne	r3, r0
 8004b52:	d06a      	beq.n	8004c2a <HAL_DMA_Abort_IT+0x172>
 8004b54:	4972      	ldr	r1, [pc, #456]	@ (8004d20 <HAL_DMA_Abort_IT+0x268>)
 8004b56:	428b      	cmp	r3, r1
 8004b58:	d067      	beq.n	8004c2a <HAL_DMA_Abort_IT+0x172>
 8004b5a:	3118      	adds	r1, #24
 8004b5c:	428b      	cmp	r3, r1
 8004b5e:	d064      	beq.n	8004c2a <HAL_DMA_Abort_IT+0x172>
 8004b60:	3118      	adds	r1, #24
 8004b62:	428b      	cmp	r3, r1
 8004b64:	d061      	beq.n	8004c2a <HAL_DMA_Abort_IT+0x172>
 8004b66:	3118      	adds	r1, #24
 8004b68:	428b      	cmp	r3, r1
 8004b6a:	d05e      	beq.n	8004c2a <HAL_DMA_Abort_IT+0x172>
 8004b6c:	3118      	adds	r1, #24
 8004b6e:	428b      	cmp	r3, r1
 8004b70:	d05b      	beq.n	8004c2a <HAL_DMA_Abort_IT+0x172>
 8004b72:	3118      	adds	r1, #24
 8004b74:	428b      	cmp	r3, r1
 8004b76:	d058      	beq.n	8004c2a <HAL_DMA_Abort_IT+0x172>
 8004b78:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8004b7c:	428b      	cmp	r3, r1
 8004b7e:	d054      	beq.n	8004c2a <HAL_DMA_Abort_IT+0x172>
 8004b80:	3118      	adds	r1, #24
 8004b82:	428b      	cmp	r3, r1
 8004b84:	d051      	beq.n	8004c2a <HAL_DMA_Abort_IT+0x172>
 8004b86:	3118      	adds	r1, #24
 8004b88:	428b      	cmp	r3, r1
 8004b8a:	d04e      	beq.n	8004c2a <HAL_DMA_Abort_IT+0x172>
 8004b8c:	3118      	adds	r1, #24
 8004b8e:	428b      	cmp	r3, r1
 8004b90:	d04b      	beq.n	8004c2a <HAL_DMA_Abort_IT+0x172>
 8004b92:	3118      	adds	r1, #24
 8004b94:	428b      	cmp	r3, r1
 8004b96:	d048      	beq.n	8004c2a <HAL_DMA_Abort_IT+0x172>
 8004b98:	3118      	adds	r1, #24
 8004b9a:	428b      	cmp	r3, r1
 8004b9c:	d045      	beq.n	8004c2a <HAL_DMA_Abort_IT+0x172>
 8004b9e:	3118      	adds	r1, #24
 8004ba0:	428b      	cmp	r3, r1
 8004ba2:	d042      	beq.n	8004c2a <HAL_DMA_Abort_IT+0x172>
 8004ba4:	3118      	adds	r1, #24
 8004ba6:	428b      	cmp	r3, r1
 8004ba8:	d03f      	beq.n	8004c2a <HAL_DMA_Abort_IT+0x172>
 8004baa:	6819      	ldr	r1, [r3, #0]
 8004bac:	f021 0101 	bic.w	r1, r1, #1
 8004bb0:	6019      	str	r1, [r3, #0]
 8004bb2:	e03e      	b.n	8004c32 <HAL_DMA_Abort_IT+0x17a>
      hdma->State = HAL_DMA_STATE_ABORT;
 8004bb4:	2104      	movs	r1, #4
 8004bb6:	f882 1035 	strb.w	r1, [r2, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8004bba:	bb80      	cbnz	r0, 8004c1e <HAL_DMA_Abort_IT+0x166>
 8004bbc:	4a58      	ldr	r2, [pc, #352]	@ (8004d20 <HAL_DMA_Abort_IT+0x268>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d02d      	beq.n	8004c1e <HAL_DMA_Abort_IT+0x166>
 8004bc2:	3218      	adds	r2, #24
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d02a      	beq.n	8004c1e <HAL_DMA_Abort_IT+0x166>
 8004bc8:	3218      	adds	r2, #24
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d027      	beq.n	8004c1e <HAL_DMA_Abort_IT+0x166>
 8004bce:	3218      	adds	r2, #24
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d024      	beq.n	8004c1e <HAL_DMA_Abort_IT+0x166>
 8004bd4:	3218      	adds	r2, #24
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d021      	beq.n	8004c1e <HAL_DMA_Abort_IT+0x166>
 8004bda:	3218      	adds	r2, #24
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d01e      	beq.n	8004c1e <HAL_DMA_Abort_IT+0x166>
 8004be0:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d01a      	beq.n	8004c1e <HAL_DMA_Abort_IT+0x166>
 8004be8:	3218      	adds	r2, #24
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d017      	beq.n	8004c1e <HAL_DMA_Abort_IT+0x166>
 8004bee:	3218      	adds	r2, #24
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d014      	beq.n	8004c1e <HAL_DMA_Abort_IT+0x166>
 8004bf4:	3218      	adds	r2, #24
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d011      	beq.n	8004c1e <HAL_DMA_Abort_IT+0x166>
 8004bfa:	3218      	adds	r2, #24
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d00e      	beq.n	8004c1e <HAL_DMA_Abort_IT+0x166>
 8004c00:	3218      	adds	r2, #24
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d00b      	beq.n	8004c1e <HAL_DMA_Abort_IT+0x166>
 8004c06:	3218      	adds	r2, #24
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d008      	beq.n	8004c1e <HAL_DMA_Abort_IT+0x166>
 8004c0c:	3218      	adds	r2, #24
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d005      	beq.n	8004c1e <HAL_DMA_Abort_IT+0x166>
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	f022 0201 	bic.w	r2, r2, #1
 8004c18:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004c1a:	2000      	movs	r0, #0
 8004c1c:	e759      	b.n	8004ad2 <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	f022 0201 	bic.w	r2, r2, #1
 8004c24:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004c26:	2000      	movs	r0, #0
      __HAL_DMA_DISABLE(hdma);
 8004c28:	e753      	b.n	8004ad2 <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 8004c2a:	6819      	ldr	r1, [r3, #0]
 8004c2c:	f021 0101 	bic.w	r1, r1, #1
 8004c30:	6019      	str	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c32:	6813      	ldr	r3, [r2, #0]
 8004c34:	4838      	ldr	r0, [pc, #224]	@ (8004d18 <HAL_DMA_Abort_IT+0x260>)
 8004c36:	4939      	ldr	r1, [pc, #228]	@ (8004d1c <HAL_DMA_Abort_IT+0x264>)
 8004c38:	428b      	cmp	r3, r1
 8004c3a:	bf18      	it	ne
 8004c3c:	4283      	cmpne	r3, r0
 8004c3e:	d042      	beq.n	8004cc6 <HAL_DMA_Abort_IT+0x20e>
 8004c40:	3118      	adds	r1, #24
 8004c42:	428b      	cmp	r3, r1
 8004c44:	d03f      	beq.n	8004cc6 <HAL_DMA_Abort_IT+0x20e>
 8004c46:	3118      	adds	r1, #24
 8004c48:	428b      	cmp	r3, r1
 8004c4a:	d03c      	beq.n	8004cc6 <HAL_DMA_Abort_IT+0x20e>
 8004c4c:	3118      	adds	r1, #24
 8004c4e:	428b      	cmp	r3, r1
 8004c50:	d039      	beq.n	8004cc6 <HAL_DMA_Abort_IT+0x20e>
 8004c52:	3118      	adds	r1, #24
 8004c54:	428b      	cmp	r3, r1
 8004c56:	d036      	beq.n	8004cc6 <HAL_DMA_Abort_IT+0x20e>
 8004c58:	3118      	adds	r1, #24
 8004c5a:	428b      	cmp	r3, r1
 8004c5c:	d033      	beq.n	8004cc6 <HAL_DMA_Abort_IT+0x20e>
 8004c5e:	3118      	adds	r1, #24
 8004c60:	428b      	cmp	r3, r1
 8004c62:	d030      	beq.n	8004cc6 <HAL_DMA_Abort_IT+0x20e>
 8004c64:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8004c68:	428b      	cmp	r3, r1
 8004c6a:	d02c      	beq.n	8004cc6 <HAL_DMA_Abort_IT+0x20e>
 8004c6c:	3118      	adds	r1, #24
 8004c6e:	428b      	cmp	r3, r1
 8004c70:	d029      	beq.n	8004cc6 <HAL_DMA_Abort_IT+0x20e>
 8004c72:	3118      	adds	r1, #24
 8004c74:	428b      	cmp	r3, r1
 8004c76:	d026      	beq.n	8004cc6 <HAL_DMA_Abort_IT+0x20e>
 8004c78:	3118      	adds	r1, #24
 8004c7a:	428b      	cmp	r3, r1
 8004c7c:	d023      	beq.n	8004cc6 <HAL_DMA_Abort_IT+0x20e>
 8004c7e:	3118      	adds	r1, #24
 8004c80:	428b      	cmp	r3, r1
 8004c82:	d020      	beq.n	8004cc6 <HAL_DMA_Abort_IT+0x20e>
 8004c84:	3118      	adds	r1, #24
 8004c86:	428b      	cmp	r3, r1
 8004c88:	d01d      	beq.n	8004cc6 <HAL_DMA_Abort_IT+0x20e>
 8004c8a:	3118      	adds	r1, #24
 8004c8c:	428b      	cmp	r3, r1
 8004c8e:	d01a      	beq.n	8004cc6 <HAL_DMA_Abort_IT+0x20e>
 8004c90:	3118      	adds	r1, #24
 8004c92:	428b      	cmp	r3, r1
 8004c94:	d017      	beq.n	8004cc6 <HAL_DMA_Abort_IT+0x20e>
 8004c96:	4923      	ldr	r1, [pc, #140]	@ (8004d24 <HAL_DMA_Abort_IT+0x26c>)
 8004c98:	428b      	cmp	r3, r1
 8004c9a:	d014      	beq.n	8004cc6 <HAL_DMA_Abort_IT+0x20e>
 8004c9c:	3114      	adds	r1, #20
 8004c9e:	428b      	cmp	r3, r1
 8004ca0:	d011      	beq.n	8004cc6 <HAL_DMA_Abort_IT+0x20e>
 8004ca2:	3114      	adds	r1, #20
 8004ca4:	428b      	cmp	r3, r1
 8004ca6:	d00e      	beq.n	8004cc6 <HAL_DMA_Abort_IT+0x20e>
 8004ca8:	3114      	adds	r1, #20
 8004caa:	428b      	cmp	r3, r1
 8004cac:	d00b      	beq.n	8004cc6 <HAL_DMA_Abort_IT+0x20e>
 8004cae:	3114      	adds	r1, #20
 8004cb0:	428b      	cmp	r3, r1
 8004cb2:	d008      	beq.n	8004cc6 <HAL_DMA_Abort_IT+0x20e>
 8004cb4:	3114      	adds	r1, #20
 8004cb6:	428b      	cmp	r3, r1
 8004cb8:	d005      	beq.n	8004cc6 <HAL_DMA_Abort_IT+0x20e>
 8004cba:	3114      	adds	r1, #20
 8004cbc:	428b      	cmp	r3, r1
 8004cbe:	d002      	beq.n	8004cc6 <HAL_DMA_Abort_IT+0x20e>
 8004cc0:	3114      	adds	r1, #20
 8004cc2:	428b      	cmp	r3, r1
 8004cc4:	d117      	bne.n	8004cf6 <HAL_DMA_Abort_IT+0x23e>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004cc6:	6e11      	ldr	r1, [r2, #96]	@ 0x60
 8004cc8:	680b      	ldr	r3, [r1, #0]
 8004cca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cce:	600b      	str	r3, [r1, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cd0:	6d90      	ldr	r0, [r2, #88]	@ 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004cd2:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8004cd4:	f003 011f 	and.w	r1, r3, #31
 8004cd8:	2301      	movs	r3, #1
 8004cda:	408b      	lsls	r3, r1
 8004cdc:	6043      	str	r3, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004cde:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 8004ce0:	6e91      	ldr	r1, [r2, #104]	@ 0x68
 8004ce2:	6059      	str	r1, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8004ce4:	6ed3      	ldr	r3, [r2, #108]	@ 0x6c
 8004ce6:	b133      	cbz	r3, 8004cf6 <HAL_DMA_Abort_IT+0x23e>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004ce8:	6819      	ldr	r1, [r3, #0]
 8004cea:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 8004cee:	6019      	str	r1, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004cf0:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8004cf2:	6f51      	ldr	r1, [r2, #116]	@ 0x74
 8004cf4:	6059      	str	r1, [r3, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	f882 3035 	strb.w	r3, [r2, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
      if(hdma->XferAbortCallback != NULL)
 8004d02:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8004d04:	b12b      	cbz	r3, 8004d12 <HAL_DMA_Abort_IT+0x25a>
        hdma->XferAbortCallback(hdma);
 8004d06:	4610      	mov	r0, r2
 8004d08:	4798      	blx	r3
  return HAL_OK;
 8004d0a:	2000      	movs	r0, #0
 8004d0c:	e6e1      	b.n	8004ad2 <HAL_DMA_Abort_IT+0x1a>
    return HAL_ERROR;
 8004d0e:	2001      	movs	r0, #1
}
 8004d10:	4770      	bx	lr
  return HAL_OK;
 8004d12:	2000      	movs	r0, #0
 8004d14:	e6dd      	b.n	8004ad2 <HAL_DMA_Abort_IT+0x1a>
 8004d16:	bf00      	nop
 8004d18:	40020010 	.word	0x40020010
 8004d1c:	40020028 	.word	0x40020028
 8004d20:	40020040 	.word	0x40020040
 8004d24:	58025408 	.word	0x58025408

08004d28 <HAL_DMA_IRQHandler>:
{
 8004d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004d32:	4b7d      	ldr	r3, [pc, #500]	@ (8004f28 <HAL_DMA_IRQHandler+0x200>)
 8004d34:	681d      	ldr	r5, [r3, #0]
 8004d36:	4b7d      	ldr	r3, [pc, #500]	@ (8004f2c <HAL_DMA_IRQHandler+0x204>)
 8004d38:	fba3 3505 	umull	r3, r5, r3, r5
 8004d3c:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d3e:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr_dma  = regs_dma->ISR;
 8004d40:	683e      	ldr	r6, [r7, #0]
  tmpisr_bdma = regs_bdma->ISR;
 8004d42:	f8d7 c000 	ldr.w	ip, [r7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004d46:	6803      	ldr	r3, [r0, #0]
 8004d48:	4979      	ldr	r1, [pc, #484]	@ (8004f30 <HAL_DMA_IRQHandler+0x208>)
 8004d4a:	487a      	ldr	r0, [pc, #488]	@ (8004f34 <HAL_DMA_IRQHandler+0x20c>)
 8004d4c:	4283      	cmp	r3, r0
 8004d4e:	bf18      	it	ne
 8004d50:	428b      	cmpne	r3, r1
 8004d52:	bf0c      	ite	eq
 8004d54:	2001      	moveq	r0, #1
 8004d56:	2000      	movne	r0, #0
 8004d58:	d061      	beq.n	8004e1e <HAL_DMA_IRQHandler+0xf6>
 8004d5a:	4a77      	ldr	r2, [pc, #476]	@ (8004f38 <HAL_DMA_IRQHandler+0x210>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d05e      	beq.n	8004e1e <HAL_DMA_IRQHandler+0xf6>
 8004d60:	3218      	adds	r2, #24
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d05b      	beq.n	8004e1e <HAL_DMA_IRQHandler+0xf6>
 8004d66:	3218      	adds	r2, #24
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d058      	beq.n	8004e1e <HAL_DMA_IRQHandler+0xf6>
 8004d6c:	3218      	adds	r2, #24
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d055      	beq.n	8004e1e <HAL_DMA_IRQHandler+0xf6>
 8004d72:	3218      	adds	r2, #24
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d052      	beq.n	8004e1e <HAL_DMA_IRQHandler+0xf6>
 8004d78:	3218      	adds	r2, #24
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d04f      	beq.n	8004e1e <HAL_DMA_IRQHandler+0xf6>
 8004d7e:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d04b      	beq.n	8004e1e <HAL_DMA_IRQHandler+0xf6>
 8004d86:	3218      	adds	r2, #24
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d048      	beq.n	8004e1e <HAL_DMA_IRQHandler+0xf6>
 8004d8c:	3218      	adds	r2, #24
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d045      	beq.n	8004e1e <HAL_DMA_IRQHandler+0xf6>
 8004d92:	3218      	adds	r2, #24
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d042      	beq.n	8004e1e <HAL_DMA_IRQHandler+0xf6>
 8004d98:	3218      	adds	r2, #24
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d03f      	beq.n	8004e1e <HAL_DMA_IRQHandler+0xf6>
 8004d9e:	3218      	adds	r2, #24
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d03c      	beq.n	8004e1e <HAL_DMA_IRQHandler+0xf6>
 8004da4:	3218      	adds	r2, #24
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d039      	beq.n	8004e1e <HAL_DMA_IRQHandler+0xf6>
 8004daa:	3218      	adds	r2, #24
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d036      	beq.n	8004e1e <HAL_DMA_IRQHandler+0xf6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004db0:	4962      	ldr	r1, [pc, #392]	@ (8004f3c <HAL_DMA_IRQHandler+0x214>)
 8004db2:	4a63      	ldr	r2, [pc, #396]	@ (8004f40 <HAL_DMA_IRQHandler+0x218>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	bf18      	it	ne
 8004db8:	428b      	cmpne	r3, r1
 8004dba:	d012      	beq.n	8004de2 <HAL_DMA_IRQHandler+0xba>
 8004dbc:	4a61      	ldr	r2, [pc, #388]	@ (8004f44 <HAL_DMA_IRQHandler+0x21c>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d00f      	beq.n	8004de2 <HAL_DMA_IRQHandler+0xba>
 8004dc2:	3214      	adds	r2, #20
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d00c      	beq.n	8004de2 <HAL_DMA_IRQHandler+0xba>
 8004dc8:	3214      	adds	r2, #20
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d009      	beq.n	8004de2 <HAL_DMA_IRQHandler+0xba>
 8004dce:	3214      	adds	r2, #20
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d006      	beq.n	8004de2 <HAL_DMA_IRQHandler+0xba>
 8004dd4:	3214      	adds	r2, #20
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d003      	beq.n	8004de2 <HAL_DMA_IRQHandler+0xba>
 8004dda:	3214      	adds	r2, #20
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	f040 8261 	bne.w	80052a4 <HAL_DMA_IRQHandler+0x57c>
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004de2:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004de4:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8004de6:	f001 011f 	and.w	r1, r1, #31
 8004dea:	2004      	movs	r0, #4
 8004dec:	4088      	lsls	r0, r1
 8004dee:	ea10 0f0c 	tst.w	r0, ip
 8004df2:	f000 82a7 	beq.w	8005344 <HAL_DMA_IRQHandler+0x61c>
 8004df6:	f012 0f04 	tst.w	r2, #4
 8004dfa:	f000 82a3 	beq.w	8005344 <HAL_DMA_IRQHandler+0x61c>
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004dfe:	6078      	str	r0, [r7, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e00:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8004e04:	f000 825a 	beq.w	80052bc <HAL_DMA_IRQHandler+0x594>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004e08:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 8004e0c:	f040 8250 	bne.w	80052b0 <HAL_DMA_IRQHandler+0x588>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004e10:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	f000 8246 	beq.w	80052a4 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferM1HalfCpltCallback(hdma);
 8004e18:	4620      	mov	r0, r4
 8004e1a:	4798      	blx	r3
 8004e1c:	e242      	b.n	80052a4 <HAL_DMA_IRQHandler+0x57c>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004e1e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004e20:	f002 011f 	and.w	r1, r2, #31
 8004e24:	2208      	movs	r2, #8
 8004e26:	408a      	lsls	r2, r1
 8004e28:	4232      	tst	r2, r6
 8004e2a:	d041      	beq.n	8004eb0 <HAL_DMA_IRQHandler+0x188>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004e2c:	bb70      	cbnz	r0, 8004e8c <HAL_DMA_IRQHandler+0x164>
 8004e2e:	4a42      	ldr	r2, [pc, #264]	@ (8004f38 <HAL_DMA_IRQHandler+0x210>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d02b      	beq.n	8004e8c <HAL_DMA_IRQHandler+0x164>
 8004e34:	3218      	adds	r2, #24
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d028      	beq.n	8004e8c <HAL_DMA_IRQHandler+0x164>
 8004e3a:	3218      	adds	r2, #24
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d025      	beq.n	8004e8c <HAL_DMA_IRQHandler+0x164>
 8004e40:	3218      	adds	r2, #24
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d022      	beq.n	8004e8c <HAL_DMA_IRQHandler+0x164>
 8004e46:	3218      	adds	r2, #24
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d01f      	beq.n	8004e8c <HAL_DMA_IRQHandler+0x164>
 8004e4c:	3218      	adds	r2, #24
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d01c      	beq.n	8004e8c <HAL_DMA_IRQHandler+0x164>
 8004e52:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d018      	beq.n	8004e8c <HAL_DMA_IRQHandler+0x164>
 8004e5a:	3218      	adds	r2, #24
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d015      	beq.n	8004e8c <HAL_DMA_IRQHandler+0x164>
 8004e60:	3218      	adds	r2, #24
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d012      	beq.n	8004e8c <HAL_DMA_IRQHandler+0x164>
 8004e66:	3218      	adds	r2, #24
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d00f      	beq.n	8004e8c <HAL_DMA_IRQHandler+0x164>
 8004e6c:	3218      	adds	r2, #24
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d00c      	beq.n	8004e8c <HAL_DMA_IRQHandler+0x164>
 8004e72:	3218      	adds	r2, #24
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d009      	beq.n	8004e8c <HAL_DMA_IRQHandler+0x164>
 8004e78:	3218      	adds	r2, #24
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d006      	beq.n	8004e8c <HAL_DMA_IRQHandler+0x164>
 8004e7e:	3218      	adds	r2, #24
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d003      	beq.n	8004e8c <HAL_DMA_IRQHandler+0x164>
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8004e8a:	e002      	b.n	8004e92 <HAL_DMA_IRQHandler+0x16a>
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8004e92:	b16a      	cbz	r2, 8004eb0 <HAL_DMA_IRQHandler+0x188>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	f022 0204 	bic.w	r2, r2, #4
 8004e9a:	601a      	str	r2, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004e9c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004e9e:	f003 021f 	and.w	r2, r3, #31
 8004ea2:	2308      	movs	r3, #8
 8004ea4:	4093      	lsls	r3, r2
 8004ea6:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004ea8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004eaa:	f043 0301 	orr.w	r3, r3, #1
 8004eae:	6563      	str	r3, [r4, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004eb0:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004eb2:	f002 021f 	and.w	r2, r2, #31
 8004eb6:	fa26 f302 	lsr.w	r3, r6, r2
 8004eba:	f013 0f01 	tst.w	r3, #1
 8004ebe:	d047      	beq.n	8004f50 <HAL_DMA_IRQHandler+0x228>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004ec0:	6823      	ldr	r3, [r4, #0]
 8004ec2:	481b      	ldr	r0, [pc, #108]	@ (8004f30 <HAL_DMA_IRQHandler+0x208>)
 8004ec4:	491b      	ldr	r1, [pc, #108]	@ (8004f34 <HAL_DMA_IRQHandler+0x20c>)
 8004ec6:	428b      	cmp	r3, r1
 8004ec8:	bf18      	it	ne
 8004eca:	4283      	cmpne	r3, r0
 8004ecc:	d03c      	beq.n	8004f48 <HAL_DMA_IRQHandler+0x220>
 8004ece:	3118      	adds	r1, #24
 8004ed0:	428b      	cmp	r3, r1
 8004ed2:	d039      	beq.n	8004f48 <HAL_DMA_IRQHandler+0x220>
 8004ed4:	3118      	adds	r1, #24
 8004ed6:	428b      	cmp	r3, r1
 8004ed8:	d036      	beq.n	8004f48 <HAL_DMA_IRQHandler+0x220>
 8004eda:	3118      	adds	r1, #24
 8004edc:	428b      	cmp	r3, r1
 8004ede:	d033      	beq.n	8004f48 <HAL_DMA_IRQHandler+0x220>
 8004ee0:	3118      	adds	r1, #24
 8004ee2:	428b      	cmp	r3, r1
 8004ee4:	d030      	beq.n	8004f48 <HAL_DMA_IRQHandler+0x220>
 8004ee6:	3118      	adds	r1, #24
 8004ee8:	428b      	cmp	r3, r1
 8004eea:	d02d      	beq.n	8004f48 <HAL_DMA_IRQHandler+0x220>
 8004eec:	3118      	adds	r1, #24
 8004eee:	428b      	cmp	r3, r1
 8004ef0:	d02a      	beq.n	8004f48 <HAL_DMA_IRQHandler+0x220>
 8004ef2:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8004ef6:	428b      	cmp	r3, r1
 8004ef8:	d026      	beq.n	8004f48 <HAL_DMA_IRQHandler+0x220>
 8004efa:	3118      	adds	r1, #24
 8004efc:	428b      	cmp	r3, r1
 8004efe:	d023      	beq.n	8004f48 <HAL_DMA_IRQHandler+0x220>
 8004f00:	3118      	adds	r1, #24
 8004f02:	428b      	cmp	r3, r1
 8004f04:	d020      	beq.n	8004f48 <HAL_DMA_IRQHandler+0x220>
 8004f06:	3118      	adds	r1, #24
 8004f08:	428b      	cmp	r3, r1
 8004f0a:	d01d      	beq.n	8004f48 <HAL_DMA_IRQHandler+0x220>
 8004f0c:	3118      	adds	r1, #24
 8004f0e:	428b      	cmp	r3, r1
 8004f10:	d01a      	beq.n	8004f48 <HAL_DMA_IRQHandler+0x220>
 8004f12:	3118      	adds	r1, #24
 8004f14:	428b      	cmp	r3, r1
 8004f16:	d017      	beq.n	8004f48 <HAL_DMA_IRQHandler+0x220>
 8004f18:	3118      	adds	r1, #24
 8004f1a:	428b      	cmp	r3, r1
 8004f1c:	d014      	beq.n	8004f48 <HAL_DMA_IRQHandler+0x220>
 8004f1e:	3118      	adds	r1, #24
 8004f20:	428b      	cmp	r3, r1
 8004f22:	d011      	beq.n	8004f48 <HAL_DMA_IRQHandler+0x220>
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	e013      	b.n	8004f50 <HAL_DMA_IRQHandler+0x228>
 8004f28:	24000004 	.word	0x24000004
 8004f2c:	1b4e81b5 	.word	0x1b4e81b5
 8004f30:	40020010 	.word	0x40020010
 8004f34:	40020028 	.word	0x40020028
 8004f38:	40020040 	.word	0x40020040
 8004f3c:	58025408 	.word	0x58025408
 8004f40:	5802541c 	.word	0x5802541c
 8004f44:	58025430 	.word	0x58025430
 8004f48:	695b      	ldr	r3, [r3, #20]
 8004f4a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004f4e:	d13b      	bne.n	8004fc8 <HAL_DMA_IRQHandler+0x2a0>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004f50:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004f52:	f003 031f 	and.w	r3, r3, #31
 8004f56:	2204      	movs	r2, #4
 8004f58:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5c:	4233      	tst	r3, r6
 8004f5e:	d03f      	beq.n	8004fe0 <HAL_DMA_IRQHandler+0x2b8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004f60:	6822      	ldr	r2, [r4, #0]
 8004f62:	4896      	ldr	r0, [pc, #600]	@ (80051bc <HAL_DMA_IRQHandler+0x494>)
 8004f64:	4996      	ldr	r1, [pc, #600]	@ (80051c0 <HAL_DMA_IRQHandler+0x498>)
 8004f66:	428a      	cmp	r2, r1
 8004f68:	bf18      	it	ne
 8004f6a:	4282      	cmpne	r2, r0
 8004f6c:	d034      	beq.n	8004fd8 <HAL_DMA_IRQHandler+0x2b0>
 8004f6e:	3118      	adds	r1, #24
 8004f70:	428a      	cmp	r2, r1
 8004f72:	d031      	beq.n	8004fd8 <HAL_DMA_IRQHandler+0x2b0>
 8004f74:	3118      	adds	r1, #24
 8004f76:	428a      	cmp	r2, r1
 8004f78:	d02e      	beq.n	8004fd8 <HAL_DMA_IRQHandler+0x2b0>
 8004f7a:	3118      	adds	r1, #24
 8004f7c:	428a      	cmp	r2, r1
 8004f7e:	d02b      	beq.n	8004fd8 <HAL_DMA_IRQHandler+0x2b0>
 8004f80:	3118      	adds	r1, #24
 8004f82:	428a      	cmp	r2, r1
 8004f84:	d028      	beq.n	8004fd8 <HAL_DMA_IRQHandler+0x2b0>
 8004f86:	3118      	adds	r1, #24
 8004f88:	428a      	cmp	r2, r1
 8004f8a:	d025      	beq.n	8004fd8 <HAL_DMA_IRQHandler+0x2b0>
 8004f8c:	3118      	adds	r1, #24
 8004f8e:	428a      	cmp	r2, r1
 8004f90:	d022      	beq.n	8004fd8 <HAL_DMA_IRQHandler+0x2b0>
 8004f92:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8004f96:	428a      	cmp	r2, r1
 8004f98:	d01e      	beq.n	8004fd8 <HAL_DMA_IRQHandler+0x2b0>
 8004f9a:	3118      	adds	r1, #24
 8004f9c:	428a      	cmp	r2, r1
 8004f9e:	d01b      	beq.n	8004fd8 <HAL_DMA_IRQHandler+0x2b0>
 8004fa0:	3118      	adds	r1, #24
 8004fa2:	428a      	cmp	r2, r1
 8004fa4:	d018      	beq.n	8004fd8 <HAL_DMA_IRQHandler+0x2b0>
 8004fa6:	3118      	adds	r1, #24
 8004fa8:	428a      	cmp	r2, r1
 8004faa:	d015      	beq.n	8004fd8 <HAL_DMA_IRQHandler+0x2b0>
 8004fac:	3118      	adds	r1, #24
 8004fae:	428a      	cmp	r2, r1
 8004fb0:	d012      	beq.n	8004fd8 <HAL_DMA_IRQHandler+0x2b0>
 8004fb2:	3118      	adds	r1, #24
 8004fb4:	428a      	cmp	r2, r1
 8004fb6:	d00f      	beq.n	8004fd8 <HAL_DMA_IRQHandler+0x2b0>
 8004fb8:	3118      	adds	r1, #24
 8004fba:	428a      	cmp	r2, r1
 8004fbc:	d00c      	beq.n	8004fd8 <HAL_DMA_IRQHandler+0x2b0>
 8004fbe:	3118      	adds	r1, #24
 8004fc0:	428a      	cmp	r2, r1
 8004fc2:	d009      	beq.n	8004fd8 <HAL_DMA_IRQHandler+0x2b0>
 8004fc4:	6813      	ldr	r3, [r2, #0]
 8004fc6:	e00b      	b.n	8004fe0 <HAL_DMA_IRQHandler+0x2b8>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004fc8:	2301      	movs	r3, #1
 8004fca:	4093      	lsls	r3, r2
 8004fcc:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004fce:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004fd0:	f043 0302 	orr.w	r3, r3, #2
 8004fd4:	6563      	str	r3, [r4, #84]	@ 0x54
 8004fd6:	e7bb      	b.n	8004f50 <HAL_DMA_IRQHandler+0x228>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004fd8:	6812      	ldr	r2, [r2, #0]
 8004fda:	f012 0f02 	tst.w	r2, #2
 8004fde:	d13d      	bne.n	800505c <HAL_DMA_IRQHandler+0x334>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004fe0:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004fe2:	f003 031f 	and.w	r3, r3, #31
 8004fe6:	2210      	movs	r2, #16
 8004fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fec:	4233      	tst	r3, r6
 8004fee:	d05f      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x388>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004ff0:	6822      	ldr	r2, [r4, #0]
 8004ff2:	4872      	ldr	r0, [pc, #456]	@ (80051bc <HAL_DMA_IRQHandler+0x494>)
 8004ff4:	4972      	ldr	r1, [pc, #456]	@ (80051c0 <HAL_DMA_IRQHandler+0x498>)
 8004ff6:	428a      	cmp	r2, r1
 8004ff8:	bf18      	it	ne
 8004ffa:	4282      	cmpne	r2, r0
 8004ffc:	d034      	beq.n	8005068 <HAL_DMA_IRQHandler+0x340>
 8004ffe:	3118      	adds	r1, #24
 8005000:	428a      	cmp	r2, r1
 8005002:	d031      	beq.n	8005068 <HAL_DMA_IRQHandler+0x340>
 8005004:	3118      	adds	r1, #24
 8005006:	428a      	cmp	r2, r1
 8005008:	d02e      	beq.n	8005068 <HAL_DMA_IRQHandler+0x340>
 800500a:	3118      	adds	r1, #24
 800500c:	428a      	cmp	r2, r1
 800500e:	d02b      	beq.n	8005068 <HAL_DMA_IRQHandler+0x340>
 8005010:	3118      	adds	r1, #24
 8005012:	428a      	cmp	r2, r1
 8005014:	d028      	beq.n	8005068 <HAL_DMA_IRQHandler+0x340>
 8005016:	3118      	adds	r1, #24
 8005018:	428a      	cmp	r2, r1
 800501a:	d025      	beq.n	8005068 <HAL_DMA_IRQHandler+0x340>
 800501c:	3118      	adds	r1, #24
 800501e:	428a      	cmp	r2, r1
 8005020:	d022      	beq.n	8005068 <HAL_DMA_IRQHandler+0x340>
 8005022:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8005026:	428a      	cmp	r2, r1
 8005028:	d01e      	beq.n	8005068 <HAL_DMA_IRQHandler+0x340>
 800502a:	3118      	adds	r1, #24
 800502c:	428a      	cmp	r2, r1
 800502e:	d01b      	beq.n	8005068 <HAL_DMA_IRQHandler+0x340>
 8005030:	3118      	adds	r1, #24
 8005032:	428a      	cmp	r2, r1
 8005034:	d018      	beq.n	8005068 <HAL_DMA_IRQHandler+0x340>
 8005036:	3118      	adds	r1, #24
 8005038:	428a      	cmp	r2, r1
 800503a:	d015      	beq.n	8005068 <HAL_DMA_IRQHandler+0x340>
 800503c:	3118      	adds	r1, #24
 800503e:	428a      	cmp	r2, r1
 8005040:	d012      	beq.n	8005068 <HAL_DMA_IRQHandler+0x340>
 8005042:	3118      	adds	r1, #24
 8005044:	428a      	cmp	r2, r1
 8005046:	d00f      	beq.n	8005068 <HAL_DMA_IRQHandler+0x340>
 8005048:	3118      	adds	r1, #24
 800504a:	428a      	cmp	r2, r1
 800504c:	d00c      	beq.n	8005068 <HAL_DMA_IRQHandler+0x340>
 800504e:	3118      	adds	r1, #24
 8005050:	428a      	cmp	r2, r1
 8005052:	d009      	beq.n	8005068 <HAL_DMA_IRQHandler+0x340>
 8005054:	6812      	ldr	r2, [r2, #0]
 8005056:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800505a:	e008      	b.n	800506e <HAL_DMA_IRQHandler+0x346>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800505c:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800505e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005060:	f043 0304 	orr.w	r3, r3, #4
 8005064:	6563      	str	r3, [r4, #84]	@ 0x54
 8005066:	e7bb      	b.n	8004fe0 <HAL_DMA_IRQHandler+0x2b8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005068:	6812      	ldr	r2, [r2, #0]
 800506a:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 800506e:	b1fa      	cbz	r2, 80050b0 <HAL_DMA_IRQHandler+0x388>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005070:	60bb      	str	r3, [r7, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005072:	6823      	ldr	r3, [r4, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 800507a:	d00d      	beq.n	8005098 <HAL_DMA_IRQHandler+0x370>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8005082:	d104      	bne.n	800508e <HAL_DMA_IRQHandler+0x366>
            if(hdma->XferHalfCpltCallback != NULL)
 8005084:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005086:	b19b      	cbz	r3, 80050b0 <HAL_DMA_IRQHandler+0x388>
              hdma->XferHalfCpltCallback(hdma);
 8005088:	4620      	mov	r0, r4
 800508a:	4798      	blx	r3
 800508c:	e010      	b.n	80050b0 <HAL_DMA_IRQHandler+0x388>
            if(hdma->XferM1HalfCpltCallback != NULL)
 800508e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8005090:	b173      	cbz	r3, 80050b0 <HAL_DMA_IRQHandler+0x388>
              hdma->XferM1HalfCpltCallback(hdma);
 8005092:	4620      	mov	r0, r4
 8005094:	4798      	blx	r3
 8005096:	e00b      	b.n	80050b0 <HAL_DMA_IRQHandler+0x388>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800509e:	d103      	bne.n	80050a8 <HAL_DMA_IRQHandler+0x380>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	f022 0208 	bic.w	r2, r2, #8
 80050a6:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 80050a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80050aa:	b10b      	cbz	r3, 80050b0 <HAL_DMA_IRQHandler+0x388>
            hdma->XferHalfCpltCallback(hdma);
 80050ac:	4620      	mov	r0, r4
 80050ae:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80050b0:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80050b2:	f003 031f 	and.w	r3, r3, #31
 80050b6:	2220      	movs	r2, #32
 80050b8:	fa02 f303 	lsl.w	r3, r2, r3
 80050bc:	4233      	tst	r3, r6
 80050be:	f000 8093 	beq.w	80051e8 <HAL_DMA_IRQHandler+0x4c0>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80050c2:	6822      	ldr	r2, [r4, #0]
 80050c4:	483d      	ldr	r0, [pc, #244]	@ (80051bc <HAL_DMA_IRQHandler+0x494>)
 80050c6:	493e      	ldr	r1, [pc, #248]	@ (80051c0 <HAL_DMA_IRQHandler+0x498>)
 80050c8:	428a      	cmp	r2, r1
 80050ca:	bf18      	it	ne
 80050cc:	4282      	cmpne	r2, r0
 80050ce:	d02e      	beq.n	800512e <HAL_DMA_IRQHandler+0x406>
 80050d0:	3118      	adds	r1, #24
 80050d2:	428a      	cmp	r2, r1
 80050d4:	d02b      	beq.n	800512e <HAL_DMA_IRQHandler+0x406>
 80050d6:	3118      	adds	r1, #24
 80050d8:	428a      	cmp	r2, r1
 80050da:	d028      	beq.n	800512e <HAL_DMA_IRQHandler+0x406>
 80050dc:	3118      	adds	r1, #24
 80050de:	428a      	cmp	r2, r1
 80050e0:	d025      	beq.n	800512e <HAL_DMA_IRQHandler+0x406>
 80050e2:	3118      	adds	r1, #24
 80050e4:	428a      	cmp	r2, r1
 80050e6:	d022      	beq.n	800512e <HAL_DMA_IRQHandler+0x406>
 80050e8:	3118      	adds	r1, #24
 80050ea:	428a      	cmp	r2, r1
 80050ec:	d01f      	beq.n	800512e <HAL_DMA_IRQHandler+0x406>
 80050ee:	3118      	adds	r1, #24
 80050f0:	428a      	cmp	r2, r1
 80050f2:	d01c      	beq.n	800512e <HAL_DMA_IRQHandler+0x406>
 80050f4:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 80050f8:	428a      	cmp	r2, r1
 80050fa:	d018      	beq.n	800512e <HAL_DMA_IRQHandler+0x406>
 80050fc:	3118      	adds	r1, #24
 80050fe:	428a      	cmp	r2, r1
 8005100:	d015      	beq.n	800512e <HAL_DMA_IRQHandler+0x406>
 8005102:	3118      	adds	r1, #24
 8005104:	428a      	cmp	r2, r1
 8005106:	d012      	beq.n	800512e <HAL_DMA_IRQHandler+0x406>
 8005108:	3118      	adds	r1, #24
 800510a:	428a      	cmp	r2, r1
 800510c:	d00f      	beq.n	800512e <HAL_DMA_IRQHandler+0x406>
 800510e:	3118      	adds	r1, #24
 8005110:	428a      	cmp	r2, r1
 8005112:	d00c      	beq.n	800512e <HAL_DMA_IRQHandler+0x406>
 8005114:	3118      	adds	r1, #24
 8005116:	428a      	cmp	r2, r1
 8005118:	d009      	beq.n	800512e <HAL_DMA_IRQHandler+0x406>
 800511a:	3118      	adds	r1, #24
 800511c:	428a      	cmp	r2, r1
 800511e:	d006      	beq.n	800512e <HAL_DMA_IRQHandler+0x406>
 8005120:	3118      	adds	r1, #24
 8005122:	428a      	cmp	r2, r1
 8005124:	d003      	beq.n	800512e <HAL_DMA_IRQHandler+0x406>
 8005126:	6812      	ldr	r2, [r2, #0]
 8005128:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800512c:	e002      	b.n	8005134 <HAL_DMA_IRQHandler+0x40c>
 800512e:	6812      	ldr	r2, [r2, #0]
 8005130:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8005134:	2a00      	cmp	r2, #0
 8005136:	d057      	beq.n	80051e8 <HAL_DMA_IRQHandler+0x4c0>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005138:	60bb      	str	r3, [r7, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800513a:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2b04      	cmp	r3, #4
 8005142:	d00e      	beq.n	8005162 <HAL_DMA_IRQHandler+0x43a>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005144:	6823      	ldr	r3, [r4, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 800514c:	d03a      	beq.n	80051c4 <HAL_DMA_IRQHandler+0x49c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8005154:	d12d      	bne.n	80051b2 <HAL_DMA_IRQHandler+0x48a>
            if(hdma->XferM1CpltCallback != NULL)
 8005156:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8005158:	2b00      	cmp	r3, #0
 800515a:	d045      	beq.n	80051e8 <HAL_DMA_IRQHandler+0x4c0>
              hdma->XferM1CpltCallback(hdma);
 800515c:	4620      	mov	r0, r4
 800515e:	4798      	blx	r3
 8005160:	e042      	b.n	80051e8 <HAL_DMA_IRQHandler+0x4c0>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005162:	6822      	ldr	r2, [r4, #0]
 8005164:	6813      	ldr	r3, [r2, #0]
 8005166:	f023 0316 	bic.w	r3, r3, #22
 800516a:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800516c:	6822      	ldr	r2, [r4, #0]
 800516e:	6953      	ldr	r3, [r2, #20]
 8005170:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005174:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005176:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005178:	b1bb      	cbz	r3, 80051aa <HAL_DMA_IRQHandler+0x482>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800517a:	6822      	ldr	r2, [r4, #0]
 800517c:	6813      	ldr	r3, [r2, #0]
 800517e:	f023 0308 	bic.w	r3, r3, #8
 8005182:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005184:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005186:	f003 021f 	and.w	r2, r3, #31
 800518a:	233f      	movs	r3, #63	@ 0x3f
 800518c:	4093      	lsls	r3, r2
 800518e:	60bb      	str	r3, [r7, #8]
          hdma->State = HAL_DMA_STATE_READY;
 8005190:	2301      	movs	r3, #1
 8005192:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8005196:	2300      	movs	r3, #0
 8005198:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
          if(hdma->XferAbortCallback != NULL)
 800519c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f000 8080 	beq.w	80052a4 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferAbortCallback(hdma);
 80051a4:	4620      	mov	r0, r4
 80051a6:	4798      	blx	r3
          return;
 80051a8:	e07c      	b.n	80052a4 <HAL_DMA_IRQHandler+0x57c>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80051aa:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d1e4      	bne.n	800517a <HAL_DMA_IRQHandler+0x452>
 80051b0:	e7e8      	b.n	8005184 <HAL_DMA_IRQHandler+0x45c>
            if(hdma->XferCpltCallback != NULL)
 80051b2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80051b4:	b1c3      	cbz	r3, 80051e8 <HAL_DMA_IRQHandler+0x4c0>
              hdma->XferCpltCallback(hdma);
 80051b6:	4620      	mov	r0, r4
 80051b8:	4798      	blx	r3
 80051ba:	e015      	b.n	80051e8 <HAL_DMA_IRQHandler+0x4c0>
 80051bc:	40020010 	.word	0x40020010
 80051c0:	40020028 	.word	0x40020028
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80051ca:	d109      	bne.n	80051e0 <HAL_DMA_IRQHandler+0x4b8>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	f022 0210 	bic.w	r2, r2, #16
 80051d2:	601a      	str	r2, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 80051d4:	2301      	movs	r3, #1
 80051d6:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
            __HAL_UNLOCK(hdma);
 80051da:	2300      	movs	r3, #0
 80051dc:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
          if(hdma->XferCpltCallback != NULL)
 80051e0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80051e2:	b10b      	cbz	r3, 80051e8 <HAL_DMA_IRQHandler+0x4c0>
            hdma->XferCpltCallback(hdma);
 80051e4:	4620      	mov	r0, r4
 80051e6:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80051e8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d05a      	beq.n	80052a4 <HAL_DMA_IRQHandler+0x57c>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80051ee:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80051f0:	f013 0f01 	tst.w	r3, #1
 80051f4:	d052      	beq.n	800529c <HAL_DMA_IRQHandler+0x574>
        hdma->State = HAL_DMA_STATE_ABORT;
 80051f6:	2304      	movs	r3, #4
 80051f8:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_DMA_DISABLE(hdma);
 80051fc:	6823      	ldr	r3, [r4, #0]
 80051fe:	4996      	ldr	r1, [pc, #600]	@ (8005458 <HAL_DMA_IRQHandler+0x730>)
 8005200:	4a96      	ldr	r2, [pc, #600]	@ (800545c <HAL_DMA_IRQHandler+0x734>)
 8005202:	4293      	cmp	r3, r2
 8005204:	bf18      	it	ne
 8005206:	428b      	cmpne	r3, r1
 8005208:	d02f      	beq.n	800526a <HAL_DMA_IRQHandler+0x542>
 800520a:	3218      	adds	r2, #24
 800520c:	4293      	cmp	r3, r2
 800520e:	d02c      	beq.n	800526a <HAL_DMA_IRQHandler+0x542>
 8005210:	3218      	adds	r2, #24
 8005212:	4293      	cmp	r3, r2
 8005214:	d029      	beq.n	800526a <HAL_DMA_IRQHandler+0x542>
 8005216:	3218      	adds	r2, #24
 8005218:	4293      	cmp	r3, r2
 800521a:	d026      	beq.n	800526a <HAL_DMA_IRQHandler+0x542>
 800521c:	3218      	adds	r2, #24
 800521e:	4293      	cmp	r3, r2
 8005220:	d023      	beq.n	800526a <HAL_DMA_IRQHandler+0x542>
 8005222:	3218      	adds	r2, #24
 8005224:	4293      	cmp	r3, r2
 8005226:	d020      	beq.n	800526a <HAL_DMA_IRQHandler+0x542>
 8005228:	3218      	adds	r2, #24
 800522a:	4293      	cmp	r3, r2
 800522c:	d01d      	beq.n	800526a <HAL_DMA_IRQHandler+0x542>
 800522e:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8005232:	4293      	cmp	r3, r2
 8005234:	d019      	beq.n	800526a <HAL_DMA_IRQHandler+0x542>
 8005236:	3218      	adds	r2, #24
 8005238:	4293      	cmp	r3, r2
 800523a:	d016      	beq.n	800526a <HAL_DMA_IRQHandler+0x542>
 800523c:	3218      	adds	r2, #24
 800523e:	4293      	cmp	r3, r2
 8005240:	d013      	beq.n	800526a <HAL_DMA_IRQHandler+0x542>
 8005242:	3218      	adds	r2, #24
 8005244:	4293      	cmp	r3, r2
 8005246:	d010      	beq.n	800526a <HAL_DMA_IRQHandler+0x542>
 8005248:	3218      	adds	r2, #24
 800524a:	4293      	cmp	r3, r2
 800524c:	d00d      	beq.n	800526a <HAL_DMA_IRQHandler+0x542>
 800524e:	3218      	adds	r2, #24
 8005250:	4293      	cmp	r3, r2
 8005252:	d00a      	beq.n	800526a <HAL_DMA_IRQHandler+0x542>
 8005254:	3218      	adds	r2, #24
 8005256:	4293      	cmp	r3, r2
 8005258:	d007      	beq.n	800526a <HAL_DMA_IRQHandler+0x542>
 800525a:	3218      	adds	r2, #24
 800525c:	4293      	cmp	r3, r2
 800525e:	d004      	beq.n	800526a <HAL_DMA_IRQHandler+0x542>
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	f022 0201 	bic.w	r2, r2, #1
 8005266:	601a      	str	r2, [r3, #0]
 8005268:	e003      	b.n	8005272 <HAL_DMA_IRQHandler+0x54a>
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	f022 0201 	bic.w	r2, r2, #1
 8005270:	601a      	str	r2, [r3, #0]
          if (++count > timeout)
 8005272:	9b01      	ldr	r3, [sp, #4]
 8005274:	3301      	adds	r3, #1
 8005276:	9301      	str	r3, [sp, #4]
 8005278:	42ab      	cmp	r3, r5
 800527a:	d804      	bhi.n	8005286 <HAL_DMA_IRQHandler+0x55e>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800527c:	6823      	ldr	r3, [r4, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f013 0f01 	tst.w	r3, #1
 8005284:	d1f5      	bne.n	8005272 <HAL_DMA_IRQHandler+0x54a>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005286:	6823      	ldr	r3, [r4, #0]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f013 0f01 	tst.w	r3, #1
 800528e:	d00b      	beq.n	80052a8 <HAL_DMA_IRQHandler+0x580>
          hdma->State = HAL_DMA_STATE_ERROR;
 8005290:	2303      	movs	r3, #3
 8005292:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8005296:	2300      	movs	r3, #0
 8005298:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      if(hdma->XferErrorCallback != NULL)
 800529c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800529e:	b10b      	cbz	r3, 80052a4 <HAL_DMA_IRQHandler+0x57c>
        hdma->XferErrorCallback(hdma);
 80052a0:	4620      	mov	r0, r4
 80052a2:	4798      	blx	r3
}
 80052a4:	b003      	add	sp, #12
 80052a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hdma->State = HAL_DMA_STATE_READY;
 80052a8:	2301      	movs	r3, #1
 80052aa:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
 80052ae:	e7f2      	b.n	8005296 <HAL_DMA_IRQHandler+0x56e>
          if(hdma->XferHalfCpltCallback != NULL)
 80052b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d0f6      	beq.n	80052a4 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferHalfCpltCallback(hdma);
 80052b6:	4620      	mov	r0, r4
 80052b8:	4798      	blx	r3
 80052ba:	e7f3      	b.n	80052a4 <HAL_DMA_IRQHandler+0x57c>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80052bc:	f012 0f20 	tst.w	r2, #32
 80052c0:	d13a      	bne.n	8005338 <HAL_DMA_IRQHandler+0x610>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80052c2:	6823      	ldr	r3, [r4, #0]
 80052c4:	4964      	ldr	r1, [pc, #400]	@ (8005458 <HAL_DMA_IRQHandler+0x730>)
 80052c6:	4a65      	ldr	r2, [pc, #404]	@ (800545c <HAL_DMA_IRQHandler+0x734>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	bf18      	it	ne
 80052cc:	428b      	cmpne	r3, r1
 80052ce:	d02f      	beq.n	8005330 <HAL_DMA_IRQHandler+0x608>
 80052d0:	3218      	adds	r2, #24
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d02c      	beq.n	8005330 <HAL_DMA_IRQHandler+0x608>
 80052d6:	3218      	adds	r2, #24
 80052d8:	4293      	cmp	r3, r2
 80052da:	d029      	beq.n	8005330 <HAL_DMA_IRQHandler+0x608>
 80052dc:	3218      	adds	r2, #24
 80052de:	4293      	cmp	r3, r2
 80052e0:	d026      	beq.n	8005330 <HAL_DMA_IRQHandler+0x608>
 80052e2:	3218      	adds	r2, #24
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d023      	beq.n	8005330 <HAL_DMA_IRQHandler+0x608>
 80052e8:	3218      	adds	r2, #24
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d020      	beq.n	8005330 <HAL_DMA_IRQHandler+0x608>
 80052ee:	3218      	adds	r2, #24
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d01d      	beq.n	8005330 <HAL_DMA_IRQHandler+0x608>
 80052f4:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d019      	beq.n	8005330 <HAL_DMA_IRQHandler+0x608>
 80052fc:	3218      	adds	r2, #24
 80052fe:	4293      	cmp	r3, r2
 8005300:	d016      	beq.n	8005330 <HAL_DMA_IRQHandler+0x608>
 8005302:	3218      	adds	r2, #24
 8005304:	4293      	cmp	r3, r2
 8005306:	d013      	beq.n	8005330 <HAL_DMA_IRQHandler+0x608>
 8005308:	3218      	adds	r2, #24
 800530a:	4293      	cmp	r3, r2
 800530c:	d010      	beq.n	8005330 <HAL_DMA_IRQHandler+0x608>
 800530e:	3218      	adds	r2, #24
 8005310:	4293      	cmp	r3, r2
 8005312:	d00d      	beq.n	8005330 <HAL_DMA_IRQHandler+0x608>
 8005314:	3218      	adds	r2, #24
 8005316:	4293      	cmp	r3, r2
 8005318:	d00a      	beq.n	8005330 <HAL_DMA_IRQHandler+0x608>
 800531a:	3218      	adds	r2, #24
 800531c:	4293      	cmp	r3, r2
 800531e:	d007      	beq.n	8005330 <HAL_DMA_IRQHandler+0x608>
 8005320:	3218      	adds	r2, #24
 8005322:	4293      	cmp	r3, r2
 8005324:	d004      	beq.n	8005330 <HAL_DMA_IRQHandler+0x608>
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	f022 0204 	bic.w	r2, r2, #4
 800532c:	601a      	str	r2, [r3, #0]
 800532e:	e003      	b.n	8005338 <HAL_DMA_IRQHandler+0x610>
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	f022 0208 	bic.w	r2, r2, #8
 8005336:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8005338:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800533a:	2b00      	cmp	r3, #0
 800533c:	d0b2      	beq.n	80052a4 <HAL_DMA_IRQHandler+0x57c>
          hdma->XferHalfCpltCallback(hdma);
 800533e:	4620      	mov	r0, r4
 8005340:	4798      	blx	r3
 8005342:	e7af      	b.n	80052a4 <HAL_DMA_IRQHandler+0x57c>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005344:	2002      	movs	r0, #2
 8005346:	4088      	lsls	r0, r1
 8005348:	ea10 0f0c 	tst.w	r0, ip
 800534c:	d060      	beq.n	8005410 <HAL_DMA_IRQHandler+0x6e8>
 800534e:	f012 0f02 	tst.w	r2, #2
 8005352:	d05d      	beq.n	8005410 <HAL_DMA_IRQHandler+0x6e8>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005354:	6078      	str	r0, [r7, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005356:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 800535a:	d00e      	beq.n	800537a <HAL_DMA_IRQHandler+0x652>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800535c:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 8005360:	d105      	bne.n	800536e <HAL_DMA_IRQHandler+0x646>
          if(hdma->XferM1CpltCallback != NULL)
 8005362:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8005364:	2b00      	cmp	r3, #0
 8005366:	d09d      	beq.n	80052a4 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferM1CpltCallback(hdma);
 8005368:	4620      	mov	r0, r4
 800536a:	4798      	blx	r3
 800536c:	e79a      	b.n	80052a4 <HAL_DMA_IRQHandler+0x57c>
          if(hdma->XferCpltCallback != NULL)
 800536e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005370:	2b00      	cmp	r3, #0
 8005372:	d097      	beq.n	80052a4 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferCpltCallback(hdma);
 8005374:	4620      	mov	r0, r4
 8005376:	4798      	blx	r3
 8005378:	e794      	b.n	80052a4 <HAL_DMA_IRQHandler+0x57c>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800537a:	f012 0f20 	tst.w	r2, #32
 800537e:	d140      	bne.n	8005402 <HAL_DMA_IRQHandler+0x6da>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005380:	6823      	ldr	r3, [r4, #0]
 8005382:	4935      	ldr	r1, [pc, #212]	@ (8005458 <HAL_DMA_IRQHandler+0x730>)
 8005384:	4a35      	ldr	r2, [pc, #212]	@ (800545c <HAL_DMA_IRQHandler+0x734>)
 8005386:	4293      	cmp	r3, r2
 8005388:	bf18      	it	ne
 800538a:	428b      	cmpne	r3, r1
 800538c:	d02f      	beq.n	80053ee <HAL_DMA_IRQHandler+0x6c6>
 800538e:	3218      	adds	r2, #24
 8005390:	4293      	cmp	r3, r2
 8005392:	d02c      	beq.n	80053ee <HAL_DMA_IRQHandler+0x6c6>
 8005394:	3218      	adds	r2, #24
 8005396:	4293      	cmp	r3, r2
 8005398:	d029      	beq.n	80053ee <HAL_DMA_IRQHandler+0x6c6>
 800539a:	3218      	adds	r2, #24
 800539c:	4293      	cmp	r3, r2
 800539e:	d026      	beq.n	80053ee <HAL_DMA_IRQHandler+0x6c6>
 80053a0:	3218      	adds	r2, #24
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d023      	beq.n	80053ee <HAL_DMA_IRQHandler+0x6c6>
 80053a6:	3218      	adds	r2, #24
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d020      	beq.n	80053ee <HAL_DMA_IRQHandler+0x6c6>
 80053ac:	3218      	adds	r2, #24
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d01d      	beq.n	80053ee <HAL_DMA_IRQHandler+0x6c6>
 80053b2:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d019      	beq.n	80053ee <HAL_DMA_IRQHandler+0x6c6>
 80053ba:	3218      	adds	r2, #24
 80053bc:	4293      	cmp	r3, r2
 80053be:	d016      	beq.n	80053ee <HAL_DMA_IRQHandler+0x6c6>
 80053c0:	3218      	adds	r2, #24
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d013      	beq.n	80053ee <HAL_DMA_IRQHandler+0x6c6>
 80053c6:	3218      	adds	r2, #24
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d010      	beq.n	80053ee <HAL_DMA_IRQHandler+0x6c6>
 80053cc:	3218      	adds	r2, #24
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d00d      	beq.n	80053ee <HAL_DMA_IRQHandler+0x6c6>
 80053d2:	3218      	adds	r2, #24
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d00a      	beq.n	80053ee <HAL_DMA_IRQHandler+0x6c6>
 80053d8:	3218      	adds	r2, #24
 80053da:	4293      	cmp	r3, r2
 80053dc:	d007      	beq.n	80053ee <HAL_DMA_IRQHandler+0x6c6>
 80053de:	3218      	adds	r2, #24
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d004      	beq.n	80053ee <HAL_DMA_IRQHandler+0x6c6>
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	f022 020a 	bic.w	r2, r2, #10
 80053ea:	601a      	str	r2, [r3, #0]
 80053ec:	e003      	b.n	80053f6 <HAL_DMA_IRQHandler+0x6ce>
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	f022 0214 	bic.w	r2, r2, #20
 80053f4:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80053f6:	2301      	movs	r3, #1
 80053f8:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 80053fc:	2300      	movs	r3, #0
 80053fe:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 8005402:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005404:	2b00      	cmp	r3, #0
 8005406:	f43f af4d 	beq.w	80052a4 <HAL_DMA_IRQHandler+0x57c>
          hdma->XferCpltCallback(hdma);
 800540a:	4620      	mov	r0, r4
 800540c:	4798      	blx	r3
 800540e:	e749      	b.n	80052a4 <HAL_DMA_IRQHandler+0x57c>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005410:	2008      	movs	r0, #8
 8005412:	fa00 f101 	lsl.w	r1, r0, r1
 8005416:	ea11 0f0c 	tst.w	r1, ip
 800541a:	f43f af43 	beq.w	80052a4 <HAL_DMA_IRQHandler+0x57c>
 800541e:	f012 0f08 	tst.w	r2, #8
 8005422:	f43f af3f 	beq.w	80052a4 <HAL_DMA_IRQHandler+0x57c>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	f022 020e 	bic.w	r2, r2, #14
 800542c:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800542e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005430:	f003 031f 	and.w	r3, r3, #31
 8005434:	2201      	movs	r2, #1
 8005436:	fa02 f303 	lsl.w	r3, r2, r3
 800543a:	607b      	str	r3, [r7, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800543c:	6562      	str	r2, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_READY;
 800543e:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8005442:	2300      	movs	r3, #0
 8005444:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      if (hdma->XferErrorCallback != NULL)
 8005448:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800544a:	2b00      	cmp	r3, #0
 800544c:	f43f af2a 	beq.w	80052a4 <HAL_DMA_IRQHandler+0x57c>
        hdma->XferErrorCallback(hdma);
 8005450:	4620      	mov	r0, r4
 8005452:	4798      	blx	r3
  }
 8005454:	e726      	b.n	80052a4 <HAL_DMA_IRQHandler+0x57c>
 8005456:	bf00      	nop
 8005458:	40020010 	.word	0x40020010
 800545c:	40020028 	.word	0x40020028

08005460 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005460:	b430      	push	{r4, r5}
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005462:	6b41      	ldr	r1, [r0, #52]	@ 0x34

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005464:	6804      	ldr	r4, [r0, #0]
 8005466:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800546a:	4a6f      	ldr	r2, [pc, #444]	@ (8005628 <FDCAN_CalcultateRamBlockAddresses+0x1c8>)
 800546c:	4013      	ands	r3, r2
 800546e:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 8005472:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005476:	6804      	ldr	r4, [r0, #0]
 8005478:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800547c:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8005480:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 8005482:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8005486:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800548a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800548c:	440b      	add	r3, r1
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800548e:	6804      	ldr	r4, [r0, #0]
 8005490:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 8005494:	4011      	ands	r1, r2
 8005496:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 800549a:	f8c4 1088 	str.w	r1, [r4, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800549e:	6804      	ldr	r4, [r0, #0]
 80054a0:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 80054a4:	f421 01fe 	bic.w	r1, r1, #8323072	@ 0x7f0000
 80054a8:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 80054aa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80054ae:	f8c4 1088 	str.w	r1, [r4, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80054b2:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 80054b4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80054b8:	6804      	ldr	r4, [r0, #0]
 80054ba:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 80054be:	4011      	ands	r1, r2
 80054c0:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 80054c4:	f8c4 10a0 	str.w	r1, [r4, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80054c8:	6804      	ldr	r4, [r0, #0]
 80054ca:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 80054ce:	f421 01fe 	bic.w	r1, r1, #8323072	@ 0x7f0000
 80054d2:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 80054d4:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80054d8:	f8c4 10a0 	str.w	r1, [r4, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80054dc:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 80054de:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 80054e0:	fb04 3301 	mla	r3, r4, r1, r3
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80054e4:	6804      	ldr	r4, [r0, #0]
 80054e6:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 80054ea:	4011      	ands	r1, r2
 80054ec:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 80054f0:	f8c4 10b0 	str.w	r1, [r4, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80054f4:	6804      	ldr	r4, [r0, #0]
 80054f6:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 80054fa:	f421 01fe 	bic.w	r1, r1, #8323072	@ 0x7f0000
 80054fe:	6c85      	ldr	r5, [r0, #72]	@ 0x48
 8005500:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8005504:	f8c4 10b0 	str.w	r1, [r4, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005508:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 800550a:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
 800550c:	fb04 3301 	mla	r3, r4, r1, r3
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005510:	6804      	ldr	r4, [r0, #0]
 8005512:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 8005516:	4011      	ands	r1, r2
 8005518:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 800551c:	f8c4 10ac 	str.w	r1, [r4, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005520:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8005522:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8005524:	fb04 3301 	mla	r3, r4, r1, r3
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005528:	6804      	ldr	r4, [r0, #0]
 800552a:	f8d4 10f0 	ldr.w	r1, [r4, #240]	@ 0xf0
 800552e:	4011      	ands	r1, r2
 8005530:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 8005534:	f8c4 10f0 	str.w	r1, [r4, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005538:	6804      	ldr	r4, [r0, #0]
 800553a:	f8d4 10f0 	ldr.w	r1, [r4, #240]	@ 0xf0
 800553e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
 8005542:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 8005544:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8005548:	f8c4 10f0 	str.w	r1, [r4, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800554c:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 800554e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005552:	6804      	ldr	r4, [r0, #0]
 8005554:	f8d4 10c0 	ldr.w	r1, [r4, #192]	@ 0xc0
 8005558:	400a      	ands	r2, r1
 800555a:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
 800555e:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005562:	6802      	ldr	r2, [r0, #0]
 8005564:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8005568:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 800556c:	6dc1      	ldr	r1, [r0, #92]	@ 0x5c
 800556e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005572:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005576:	6802      	ldr	r2, [r0, #0]
 8005578:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 800557c:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8005580:	6e01      	ldr	r1, [r0, #96]	@ 0x60
 8005582:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005586:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800558a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800558c:	4a27      	ldr	r2, [pc, #156]	@ (800562c <FDCAN_CalcultateRamBlockAddresses+0x1cc>)
 800558e:	441a      	add	r2, r3
 8005590:	0092      	lsls	r2, r2, #2
 8005592:	66c2      	str	r2, [r0, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005594:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8005596:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800559a:	6703      	str	r3, [r0, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800559c:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 800559e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80055a2:	6743      	str	r3, [r0, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80055a4:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 80055a6:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 80055a8:	fb04 f101 	mul.w	r1, r4, r1
 80055ac:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80055b0:	6783      	str	r3, [r0, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80055b2:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 80055b4:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
 80055b6:	fb04 f101 	mul.w	r1, r4, r1
 80055ba:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80055be:	67c3      	str	r3, [r0, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80055c0:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 80055c2:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 80055c4:	fb04 f101 	mul.w	r1, r4, r1
 80055c8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80055cc:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80055d0:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 80055d2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80055d6:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80055da:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 80055dc:	6dc4      	ldr	r4, [r0, #92]	@ 0x5c
 80055de:	fb01 fc04 	mul.w	ip, r1, r4
 80055e2:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 80055e6:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80055ea:	6e04      	ldr	r4, [r0, #96]	@ 0x60
 80055ec:	fb04 f101 	mul.w	r1, r4, r1
 80055f0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80055f4:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80055f8:	490d      	ldr	r1, [pc, #52]	@ (8005630 <FDCAN_CalcultateRamBlockAddresses+0x1d0>)
 80055fa:	428b      	cmp	r3, r1
 80055fc:	d90d      	bls.n	800561a <FDCAN_CalcultateRamBlockAddresses+0x1ba>
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80055fe:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8005602:	f043 0320 	orr.w	r3, r3, #32
 8005606:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800560a:	2303      	movs	r3, #3
 800560c:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98

    return HAL_ERROR;
 8005610:	2001      	movs	r0, #1
 8005612:	e007      	b.n	8005624 <FDCAN_CalcultateRamBlockAddresses+0x1c4>
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005614:	2300      	movs	r3, #0
 8005616:	f842 3b04 	str.w	r3, [r2], #4
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800561a:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
 800561e:	4293      	cmp	r3, r2
 8005620:	d8f8      	bhi.n	8005614 <FDCAN_CalcultateRamBlockAddresses+0x1b4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005622:	2000      	movs	r0, #0
}
 8005624:	bc30      	pop	{r4, r5}
 8005626:	4770      	bx	lr
 8005628:	ffff0003 	.word	0xffff0003
 800562c:	10002b00 	.word	0x10002b00
 8005630:	4000d3fc 	.word	0x4000d3fc

08005634 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8005634:	b570      	push	{r4, r5, r6, lr}
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8005636:	684c      	ldr	r4, [r1, #4]
 8005638:	b9f4      	cbnz	r4, 8005678 <FDCAN_CopyMessageToRAM+0x44>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800563a:	690d      	ldr	r5, [r1, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800563c:	688c      	ldr	r4, [r1, #8]
                   FDCAN_STANDARD_ID |
 800563e:	4325      	orrs	r5, r4
                   (pTxHeader->Identifier << 18));
 8005640:	680c      	ldr	r4, [r1, #0]
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005642:	ea45 4584 	orr.w	r5, r5, r4, lsl #18
                   pTxHeader->TxFrameType |
                   pTxHeader->Identifier);
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8005646:	6a0e      	ldr	r6, [r1, #32]
                 pTxHeader->TxEventFifoControl |
 8005648:	69cc      	ldr	r4, [r1, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800564a:	ea44 6406 	orr.w	r4, r4, r6, lsl #24
                 pTxHeader->FDFormat |
 800564e:	698e      	ldr	r6, [r1, #24]
                 pTxHeader->TxEventFifoControl |
 8005650:	4334      	orrs	r4, r6
                 pTxHeader->BitRateSwitch |
 8005652:	694e      	ldr	r6, [r1, #20]
                 pTxHeader->FDFormat |
 8005654:	4334      	orrs	r4, r6
                 pTxHeader->DataLength);
 8005656:	68ce      	ldr	r6, [r1, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8005658:	4334      	orrs	r4, r6

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 800565a:	f8d0 6084 	ldr.w	r6, [r0, #132]	@ 0x84
 800565e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8005660:	fb00 f303 	mul.w	r3, r0, r3
 8005664:	eb06 0e83 	add.w	lr, r6, r3, lsl #2

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8005668:	f846 5023 	str.w	r5, [r6, r3, lsl #2]
  TxAddress++;
  *TxAddress = TxElementW2;
 800566c:	f8ce 4004 	str.w	r4, [lr, #4]
  TxAddress++;
 8005670:	f10e 0e08 	add.w	lr, lr, #8

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8005674:	2000      	movs	r0, #0
 8005676:	e019      	b.n	80056ac <FDCAN_CopyMessageToRAM+0x78>
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005678:	690c      	ldr	r4, [r1, #16]
                   pTxHeader->TxFrameType |
 800567a:	688d      	ldr	r5, [r1, #8]
                   FDCAN_EXTENDED_ID |
 800567c:	4325      	orrs	r5, r4
                   pTxHeader->Identifier);
 800567e:	680c      	ldr	r4, [r1, #0]
                   pTxHeader->TxFrameType |
 8005680:	4325      	orrs	r5, r4
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005682:	f045 4580 	orr.w	r5, r5, #1073741824	@ 0x40000000
 8005686:	e7de      	b.n	8005646 <FDCAN_CopyMessageToRAM+0x12>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8005688:	eb02 0c00 	add.w	ip, r2, r0
 800568c:	f89c 4003 	ldrb.w	r4, [ip, #3]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8005690:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8005694:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8005696:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 800569a:	f89c 4001 	ldrb.w	r4, [ip, #1]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 800569e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
                  (uint32_t)pTxData[ByteCounter]);
 80056a2:	5c14      	ldrb	r4, [r2, r0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80056a4:	4323      	orrs	r3, r4
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80056a6:	f84e 3b04 	str.w	r3, [lr], #4
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80056aa:	3004      	adds	r0, #4
 80056ac:	89cb      	ldrh	r3, [r1, #14]
 80056ae:	4c02      	ldr	r4, [pc, #8]	@ (80056b8 <FDCAN_CopyMessageToRAM+0x84>)
 80056b0:	5ce3      	ldrb	r3, [r4, r3]
 80056b2:	4283      	cmp	r3, r0
 80056b4:	d8e8      	bhi.n	8005688 <FDCAN_CopyMessageToRAM+0x54>
    TxAddress++;
  }
}
 80056b6:	bd70      	pop	{r4, r5, r6, pc}
 80056b8:	08016d28 	.word	0x08016d28

080056bc <HAL_FDCAN_Init>:
{
 80056bc:	b530      	push	{r4, r5, lr}
 80056be:	b095      	sub	sp, #84	@ 0x54
 80056c0:	4604      	mov	r4, r0
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80056c2:	224c      	movs	r2, #76	@ 0x4c
 80056c4:	49a0      	ldr	r1, [pc, #640]	@ (8005948 <HAL_FDCAN_Init+0x28c>)
 80056c6:	a801      	add	r0, sp, #4
 80056c8:	f011 f9a8 	bl	8016a1c <memcpy>
  if (hfdcan == NULL)
 80056cc:	2c00      	cmp	r4, #0
 80056ce:	f000 8138 	beq.w	8005942 <HAL_FDCAN_Init+0x286>
  if (hfdcan->Instance == FDCAN1)
 80056d2:	6823      	ldr	r3, [r4, #0]
 80056d4:	4a9d      	ldr	r2, [pc, #628]	@ (800594c <HAL_FDCAN_Init+0x290>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d020      	beq.n	800571c <HAL_FDCAN_Init+0x60>
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80056da:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
 80056de:	b30b      	cbz	r3, 8005724 <HAL_FDCAN_Init+0x68>
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80056e0:	6822      	ldr	r2, [r4, #0]
 80056e2:	6993      	ldr	r3, [r2, #24]
 80056e4:	f023 0310 	bic.w	r3, r3, #16
 80056e8:	6193      	str	r3, [r2, #24]
  tickstart = HAL_GetTick();
 80056ea:	f7fd fcf9 	bl	80030e0 <HAL_GetTick>
 80056ee:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80056f0:	6823      	ldr	r3, [r4, #0]
 80056f2:	699a      	ldr	r2, [r3, #24]
 80056f4:	f012 0f08 	tst.w	r2, #8
 80056f8:	d01a      	beq.n	8005730 <HAL_FDCAN_Init+0x74>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80056fa:	f7fd fcf1 	bl	80030e0 <HAL_GetTick>
 80056fe:	1b43      	subs	r3, r0, r5
 8005700:	2b0a      	cmp	r3, #10
 8005702:	d9f5      	bls.n	80056f0 <HAL_FDCAN_Init+0x34>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005704:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8005708:	f043 0301 	orr.w	r3, r3, #1
 800570c:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005710:	2303      	movs	r3, #3
 8005712:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
      return HAL_ERROR;
 8005716:	2001      	movs	r0, #1
}
 8005718:	b015      	add	sp, #84	@ 0x54
 800571a:	bd30      	pop	{r4, r5, pc}
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800571c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005720:	6063      	str	r3, [r4, #4]
 8005722:	e7da      	b.n	80056da <HAL_FDCAN_Init+0x1e>
    hfdcan->Lock = HAL_UNLOCKED;
 8005724:	f884 3099 	strb.w	r3, [r4, #153]	@ 0x99
    HAL_FDCAN_MspInit(hfdcan);
 8005728:	4620      	mov	r0, r4
 800572a:	f7fc fcbb 	bl	80020a4 <HAL_FDCAN_MspInit>
 800572e:	e7d7      	b.n	80056e0 <HAL_FDCAN_Init+0x24>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005730:	699a      	ldr	r2, [r3, #24]
 8005732:	f042 0201 	orr.w	r2, r2, #1
 8005736:	619a      	str	r2, [r3, #24]
  tickstart = HAL_GetTick();
 8005738:	f7fd fcd2 	bl	80030e0 <HAL_GetTick>
 800573c:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800573e:	6823      	ldr	r3, [r4, #0]
 8005740:	699a      	ldr	r2, [r3, #24]
 8005742:	f012 0f01 	tst.w	r2, #1
 8005746:	d10f      	bne.n	8005768 <HAL_FDCAN_Init+0xac>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005748:	f7fd fcca 	bl	80030e0 <HAL_GetTick>
 800574c:	1b40      	subs	r0, r0, r5
 800574e:	280a      	cmp	r0, #10
 8005750:	d9f5      	bls.n	800573e <HAL_FDCAN_Init+0x82>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005752:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8005756:	f043 0301 	orr.w	r3, r3, #1
 800575a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800575e:	2303      	movs	r3, #3
 8005760:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
      return HAL_ERROR;
 8005764:	2001      	movs	r0, #1
 8005766:	e7d7      	b.n	8005718 <HAL_FDCAN_Init+0x5c>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005768:	699a      	ldr	r2, [r3, #24]
 800576a:	f042 0202 	orr.w	r2, r2, #2
 800576e:	619a      	str	r2, [r3, #24]
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005770:	7c23      	ldrb	r3, [r4, #16]
 8005772:	2b01      	cmp	r3, #1
 8005774:	d040      	beq.n	80057f8 <HAL_FDCAN_Init+0x13c>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005776:	6822      	ldr	r2, [r4, #0]
 8005778:	6993      	ldr	r3, [r2, #24]
 800577a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800577e:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005780:	7c63      	ldrb	r3, [r4, #17]
 8005782:	2b01      	cmp	r3, #1
 8005784:	d03e      	beq.n	8005804 <HAL_FDCAN_Init+0x148>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005786:	6822      	ldr	r2, [r4, #0]
 8005788:	6993      	ldr	r3, [r2, #24]
 800578a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800578e:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005790:	7ca3      	ldrb	r3, [r4, #18]
 8005792:	2b01      	cmp	r3, #1
 8005794:	d03c      	beq.n	8005810 <HAL_FDCAN_Init+0x154>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005796:	6822      	ldr	r2, [r4, #0]
 8005798:	6993      	ldr	r3, [r2, #24]
 800579a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800579e:	6193      	str	r3, [r2, #24]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80057a0:	6822      	ldr	r2, [r4, #0]
 80057a2:	6993      	ldr	r3, [r2, #24]
 80057a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057a8:	68a1      	ldr	r1, [r4, #8]
 80057aa:	430b      	orrs	r3, r1
 80057ac:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80057ae:	6822      	ldr	r2, [r4, #0]
 80057b0:	6993      	ldr	r3, [r2, #24]
 80057b2:	f023 03a4 	bic.w	r3, r3, #164	@ 0xa4
 80057b6:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80057b8:	6822      	ldr	r2, [r4, #0]
 80057ba:	6913      	ldr	r3, [r2, #16]
 80057bc:	f023 0310 	bic.w	r3, r3, #16
 80057c0:	6113      	str	r3, [r2, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80057c2:	68e3      	ldr	r3, [r4, #12]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d029      	beq.n	800581c <HAL_FDCAN_Init+0x160>
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d02c      	beq.n	8005826 <HAL_FDCAN_Init+0x16a>
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	f000 809b 	beq.w	8005908 <HAL_FDCAN_Init+0x24c>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80057d2:	6822      	ldr	r2, [r4, #0]
 80057d4:	6993      	ldr	r3, [r2, #24]
 80057d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057da:	6193      	str	r3, [r2, #24]
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80057dc:	6822      	ldr	r2, [r4, #0]
 80057de:	6913      	ldr	r3, [r2, #16]
 80057e0:	f043 0310 	orr.w	r3, r3, #16
 80057e4:	6113      	str	r3, [r2, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80057e6:	68e3      	ldr	r3, [r4, #12]
 80057e8:	2b03      	cmp	r3, #3
 80057ea:	d11c      	bne.n	8005826 <HAL_FDCAN_Init+0x16a>
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80057ec:	6822      	ldr	r2, [r4, #0]
 80057ee:	6993      	ldr	r3, [r2, #24]
 80057f0:	f043 0320 	orr.w	r3, r3, #32
 80057f4:	6193      	str	r3, [r2, #24]
 80057f6:	e016      	b.n	8005826 <HAL_FDCAN_Init+0x16a>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80057f8:	6822      	ldr	r2, [r4, #0]
 80057fa:	6993      	ldr	r3, [r2, #24]
 80057fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005800:	6193      	str	r3, [r2, #24]
 8005802:	e7bd      	b.n	8005780 <HAL_FDCAN_Init+0xc4>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005804:	6822      	ldr	r2, [r4, #0]
 8005806:	6993      	ldr	r3, [r2, #24]
 8005808:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800580c:	6193      	str	r3, [r2, #24]
 800580e:	e7bf      	b.n	8005790 <HAL_FDCAN_Init+0xd4>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005810:	6822      	ldr	r2, [r4, #0]
 8005812:	6993      	ldr	r3, [r2, #24]
 8005814:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005818:	6193      	str	r3, [r2, #24]
 800581a:	e7c1      	b.n	80057a0 <HAL_FDCAN_Init+0xe4>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800581c:	6822      	ldr	r2, [r4, #0]
 800581e:	6993      	ldr	r3, [r2, #24]
 8005820:	f043 0304 	orr.w	r3, r3, #4
 8005824:	6193      	str	r3, [r2, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005826:	69a3      	ldr	r3, [r4, #24]
 8005828:	1e5a      	subs	r2, r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800582a:	69e3      	ldr	r3, [r4, #28]
 800582c:	3b01      	subs	r3, #1
 800582e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005830:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005834:	6a22      	ldr	r2, [r4, #32]
 8005836:	3a01      	subs	r2, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005838:	4313      	orrs	r3, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800583a:	6962      	ldr	r2, [r4, #20]
 800583c:	3a01      	subs	r2, #1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800583e:	6821      	ldr	r1, [r4, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005840:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005844:	61cb      	str	r3, [r1, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005846:	68a3      	ldr	r3, [r4, #8]
 8005848:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800584c:	d062      	beq.n	8005914 <HAL_FDCAN_Init+0x258>
  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800584e:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8005850:	b133      	cbz	r3, 8005860 <HAL_FDCAN_Init+0x1a4>
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005852:	6822      	ldr	r2, [r4, #0]
 8005854:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8005858:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 800585a:	430b      	orrs	r3, r1
 800585c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8005860:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005862:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8005864:	42d3      	cmn	r3, r2
 8005866:	d00d      	beq.n	8005884 <HAL_FDCAN_Init+0x1c8>
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8005868:	6821      	ldr	r1, [r4, #0]
 800586a:	f8d1 30c8 	ldr.w	r3, [r1, #200]	@ 0xc8
 800586e:	f023 0307 	bic.w	r3, r3, #7
 8005872:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 8005874:	a814      	add	r0, sp, #80	@ 0x50
 8005876:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800587a:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800587e:	4313      	orrs	r3, r2
 8005880:	f8c1 30c8 	str.w	r3, [r1, #200]	@ 0xc8
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8005884:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005886:	b16b      	cbz	r3, 80058a4 <HAL_FDCAN_Init+0x1e8>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8005888:	6821      	ldr	r1, [r4, #0]
 800588a:	f8d1 30bc 	ldr.w	r3, [r1, #188]	@ 0xbc
 800588e:	f023 0307 	bic.w	r3, r3, #7
 8005892:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8005894:	a814      	add	r0, sp, #80	@ 0x50
 8005896:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800589a:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800589e:	4313      	orrs	r3, r2
 80058a0:	f8c1 30bc 	str.w	r3, [r1, #188]	@ 0xbc
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80058a4:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80058a6:	b173      	cbz	r3, 80058c6 <HAL_FDCAN_Init+0x20a>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80058a8:	6821      	ldr	r1, [r4, #0]
 80058aa:	f8d1 30bc 	ldr.w	r3, [r1, #188]	@ 0xbc
 80058ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058b2:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 80058b4:	a814      	add	r0, sp, #80	@ 0x50
 80058b6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80058ba:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 80058be:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80058c2:	f8c1 30bc 	str.w	r3, [r1, #188]	@ 0xbc
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80058c6:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80058c8:	b173      	cbz	r3, 80058e8 <HAL_FDCAN_Init+0x22c>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80058ca:	6821      	ldr	r1, [r4, #0]
 80058cc:	f8d1 30bc 	ldr.w	r3, [r1, #188]	@ 0xbc
 80058d0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80058d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80058d6:	a814      	add	r0, sp, #80	@ 0x50
 80058d8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80058dc:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 80058e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80058e4:	f8c1 30bc 	str.w	r3, [r1, #188]	@ 0xbc
  if (hfdcan->Instance == FDCAN1)
 80058e8:	6822      	ldr	r2, [r4, #0]
 80058ea:	4b18      	ldr	r3, [pc, #96]	@ (800594c <HAL_FDCAN_Init+0x290>)
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d022      	beq.n	8005936 <HAL_FDCAN_Init+0x27a>
  hfdcan->LatestTxFifoQRequest = 0U;
 80058f0:	2300      	movs	r3, #0
 80058f2:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80058f6:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80058fa:	2301      	movs	r3, #1
 80058fc:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005900:	4620      	mov	r0, r4
 8005902:	f7ff fdad 	bl	8005460 <FDCAN_CalcultateRamBlockAddresses>
  return status;
 8005906:	e707      	b.n	8005718 <HAL_FDCAN_Init+0x5c>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005908:	6822      	ldr	r2, [r4, #0]
 800590a:	6993      	ldr	r3, [r2, #24]
 800590c:	f043 0320 	orr.w	r3, r3, #32
 8005910:	6193      	str	r3, [r2, #24]
 8005912:	e788      	b.n	8005826 <HAL_FDCAN_Init+0x16a>
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005914:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005916:	3b01      	subs	r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005918:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800591a:	3a01      	subs	r2, #1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800591c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005920:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8005922:	3a01      	subs	r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005924:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005928:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800592a:	3a01      	subs	r2, #1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800592c:	6821      	ldr	r1, [r4, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800592e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005932:	60cb      	str	r3, [r1, #12]
 8005934:	e78b      	b.n	800584e <HAL_FDCAN_Init+0x192>
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005936:	6862      	ldr	r2, [r4, #4]
 8005938:	6893      	ldr	r3, [r2, #8]
 800593a:	f023 0303 	bic.w	r3, r3, #3
 800593e:	6093      	str	r3, [r2, #8]
 8005940:	e7d6      	b.n	80058f0 <HAL_FDCAN_Init+0x234>
    return HAL_ERROR;
 8005942:	2001      	movs	r0, #1
 8005944:	e6e8      	b.n	8005718 <HAL_FDCAN_Init+0x5c>
 8005946:	bf00      	nop
 8005948:	08016ae4 	.word	0x08016ae4
 800594c:	4000a000 	.word	0x4000a000

08005950 <HAL_FDCAN_ConfigGlobalFilter>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005950:	f890 c098 	ldrb.w	ip, [r0, #152]	@ 0x98
 8005954:	fa5f fc8c 	uxtb.w	ip, ip
 8005958:	f1bc 0f01 	cmp.w	ip, #1
 800595c:	d007      	beq.n	800596e <HAL_FDCAN_ConfigGlobalFilter+0x1e>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800595e:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8005962:	f043 0304 	orr.w	r3, r3, #4
 8005966:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
    return HAL_ERROR;
 800596a:	2001      	movs	r0, #1
}
 800596c:	4770      	bx	lr
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 800596e:	0092      	lsls	r2, r2, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8005970:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8005974:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8005978:	6801      	ldr	r1, [r0, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 800597a:	9a00      	ldr	r2, [sp, #0]
 800597c:	431a      	orrs	r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800597e:	f8c1 2080 	str.w	r2, [r1, #128]	@ 0x80
    return HAL_OK;
 8005982:	2000      	movs	r0, #0
 8005984:	4770      	bx	lr

08005986 <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005986:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b01      	cmp	r3, #1
 800598e:	d007      	beq.n	80059a0 <HAL_FDCAN_Start+0x1a>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005990:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8005994:	f043 0304 	orr.w	r3, r3, #4
 8005998:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
    return HAL_ERROR;
 800599c:	2001      	movs	r0, #1
}
 800599e:	4770      	bx	lr
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80059a0:	2302      	movs	r3, #2
 80059a2:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80059a6:	6802      	ldr	r2, [r0, #0]
 80059a8:	6993      	ldr	r3, [r2, #24]
 80059aa:	f023 0301 	bic.w	r3, r3, #1
 80059ae:	6193      	str	r3, [r2, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80059b0:	2300      	movs	r3, #0
 80059b2:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
    return HAL_OK;
 80059b6:	4618      	mov	r0, r3
 80059b8:	4770      	bx	lr

080059ba <HAL_FDCAN_AddMessageToTxFifoQ>:
{
 80059ba:	b538      	push	{r3, r4, r5, lr}
 80059bc:	4604      	mov	r4, r0
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80059be:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	d12b      	bne.n	8005a20 <HAL_FDCAN_AddMessageToTxFifoQ+0x66>
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80059c8:	6803      	ldr	r3, [r0, #0]
 80059ca:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 80059ce:	f010 5f7c 	tst.w	r0, #1056964608	@ 0x3f000000
 80059d2:	d00c      	beq.n	80059ee <HAL_FDCAN_AddMessageToTxFifoQ+0x34>
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80059d4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80059d8:	f410 1f00 	tst.w	r0, #2097152	@ 0x200000
 80059dc:	d00f      	beq.n	80059fe <HAL_FDCAN_AddMessageToTxFifoQ+0x44>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80059de:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 80059e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80059e6:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
      return HAL_ERROR;
 80059ea:	2001      	movs	r0, #1
 80059ec:	e01f      	b.n	8005a2e <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80059ee:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 80059f2:	f043 0320 	orr.w	r3, r3, #32
 80059f6:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
      return HAL_ERROR;
 80059fa:	2001      	movs	r0, #1
 80059fc:	e017      	b.n	8005a2e <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80059fe:	f8d3 50c4 	ldr.w	r5, [r3, #196]	@ 0xc4
 8005a02:	f3c5 4504 	ubfx	r5, r5, #16, #5
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8005a06:	462b      	mov	r3, r5
 8005a08:	4620      	mov	r0, r4
 8005a0a:	f7ff fe13 	bl	8005634 <FDCAN_CopyMessageToRAM>
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8005a0e:	6822      	ldr	r2, [r4, #0]
 8005a10:	2301      	movs	r3, #1
 8005a12:	40ab      	lsls	r3, r5
 8005a14:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8005a18:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
    return HAL_OK;
 8005a1c:	2000      	movs	r0, #0
 8005a1e:	e006      	b.n	8005a2e <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005a20:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8005a24:	f043 0308 	orr.w	r3, r3, #8
 8005a28:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
    return HAL_ERROR;
 8005a2c:	2001      	movs	r0, #1
}
 8005a2e:	bd38      	pop	{r3, r4, r5, pc}

08005a30 <HAL_FDCAN_GetRxMessage>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005a30:	f890 c098 	ldrb.w	ip, [r0, #152]	@ 0x98
 8005a34:	fa5f fc8c 	uxtb.w	ip, ip
  if (state == HAL_FDCAN_STATE_BUSY)
 8005a38:	f1bc 0f02 	cmp.w	ip, #2
 8005a3c:	f040 80db 	bne.w	8005bf6 <HAL_FDCAN_GetRxMessage+0x1c6>
{
 8005a40:	b570      	push	{r4, r5, r6, lr}
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005a42:	2940      	cmp	r1, #64	@ 0x40
 8005a44:	d00c      	beq.n	8005a60 <HAL_FDCAN_GetRxMessage+0x30>
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005a46:	2941      	cmp	r1, #65	@ 0x41
 8005a48:	d03b      	beq.n	8005ac2 <HAL_FDCAN_GetRxMessage+0x92>
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8005a4a:	6d04      	ldr	r4, [r0, #80]	@ 0x50
 8005a4c:	428c      	cmp	r4, r1
 8005a4e:	d869      	bhi.n	8005b24 <HAL_FDCAN_GetRxMessage+0xf4>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005a50:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8005a54:	f043 0320 	orr.w	r3, r3, #32
 8005a58:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
        return HAL_ERROR;
 8005a5c:	2001      	movs	r0, #1
 8005a5e:	e0bd      	b.n	8005bdc <HAL_FDCAN_GetRxMessage+0x1ac>
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8005a60:	6804      	ldr	r4, [r0, #0]
 8005a62:	f8d4 50a0 	ldr.w	r5, [r4, #160]	@ 0xa0
 8005a66:	f415 0ffe 	tst.w	r5, #8323072	@ 0x7f0000
 8005a6a:	d00c      	beq.n	8005a86 <HAL_FDCAN_GetRxMessage+0x56>
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005a6c:	f8d4 50a4 	ldr.w	r5, [r4, #164]	@ 0xa4
 8005a70:	f015 0f7f 	tst.w	r5, #127	@ 0x7f
 8005a74:	d10f      	bne.n	8005a96 <HAL_FDCAN_GetRxMessage+0x66>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005a76:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8005a7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a7e:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
        return HAL_ERROR;
 8005a82:	2001      	movs	r0, #1
 8005a84:	e0aa      	b.n	8005bdc <HAL_FDCAN_GetRxMessage+0x1ac>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005a86:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8005a8a:	f043 0320 	orr.w	r3, r3, #32
 8005a8e:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
        return HAL_ERROR;
 8005a92:	2001      	movs	r0, #1
 8005a94:	e0a2      	b.n	8005bdc <HAL_FDCAN_GetRxMessage+0x1ac>
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8005a96:	f8d4 50a4 	ldr.w	r5, [r4, #164]	@ 0xa4
 8005a9a:	f3c5 6600 	ubfx	r6, r5, #24, #1
 8005a9e:	f015 7f80 	tst.w	r5, #16777216	@ 0x1000000
 8005aa2:	d002      	beq.n	8005aaa <HAL_FDCAN_GetRxMessage+0x7a>
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005aa4:	f8d4 50a0 	ldr.w	r5, [r4, #160]	@ 0xa0
  uint32_t GetIndex = 0;
 8005aa8:	2600      	movs	r6, #0
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005aaa:	f8d4 40a4 	ldr.w	r4, [r4, #164]	@ 0xa4
 8005aae:	f3c4 2405 	ubfx	r4, r4, #8, #6
 8005ab2:	4426      	add	r6, r4
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8005ab4:	6f45      	ldr	r5, [r0, #116]	@ 0x74
 8005ab6:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8005ab8:	fb06 f404 	mul.w	r4, r6, r4
 8005abc:	eb05 0e84 	add.w	lr, r5, r4, lsl #2
 8005ac0:	e037      	b.n	8005b32 <HAL_FDCAN_GetRxMessage+0x102>
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8005ac2:	6804      	ldr	r4, [r0, #0]
 8005ac4:	f8d4 50b0 	ldr.w	r5, [r4, #176]	@ 0xb0
 8005ac8:	f415 0ffe 	tst.w	r5, #8323072	@ 0x7f0000
 8005acc:	d00c      	beq.n	8005ae8 <HAL_FDCAN_GetRxMessage+0xb8>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005ace:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 8005ad2:	f015 0f7f 	tst.w	r5, #127	@ 0x7f
 8005ad6:	d10f      	bne.n	8005af8 <HAL_FDCAN_GetRxMessage+0xc8>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005ad8:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8005adc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ae0:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
        return HAL_ERROR;
 8005ae4:	2001      	movs	r0, #1
 8005ae6:	e079      	b.n	8005bdc <HAL_FDCAN_GetRxMessage+0x1ac>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005ae8:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8005aec:	f043 0320 	orr.w	r3, r3, #32
 8005af0:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
        return HAL_ERROR;
 8005af4:	2001      	movs	r0, #1
 8005af6:	e071      	b.n	8005bdc <HAL_FDCAN_GetRxMessage+0x1ac>
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8005af8:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 8005afc:	f3c5 6600 	ubfx	r6, r5, #24, #1
 8005b00:	f015 7f80 	tst.w	r5, #16777216	@ 0x1000000
 8005b04:	d002      	beq.n	8005b0c <HAL_FDCAN_GetRxMessage+0xdc>
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005b06:	f8d4 50b0 	ldr.w	r5, [r4, #176]	@ 0xb0
  uint32_t GetIndex = 0;
 8005b0a:	2600      	movs	r6, #0
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005b0c:	f8d4 40b4 	ldr.w	r4, [r4, #180]	@ 0xb4
 8005b10:	f3c4 2405 	ubfx	r4, r4, #8, #6
 8005b14:	4426      	add	r6, r4
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8005b16:	6f85      	ldr	r5, [r0, #120]	@ 0x78
 8005b18:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
 8005b1a:	fb06 f404 	mul.w	r4, r6, r4
 8005b1e:	eb05 0e84 	add.w	lr, r5, r4, lsl #2
 8005b22:	e006      	b.n	8005b32 <HAL_FDCAN_GetRxMessage+0x102>
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8005b24:	6fc5      	ldr	r5, [r0, #124]	@ 0x7c
 8005b26:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8005b28:	fb01 f404 	mul.w	r4, r1, r4
 8005b2c:	eb05 0e84 	add.w	lr, r5, r4, lsl #2
  uint32_t GetIndex = 0;
 8005b30:	2600      	movs	r6, #0
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005b32:	f8de 4000 	ldr.w	r4, [lr]
 8005b36:	f004 4480 	and.w	r4, r4, #1073741824	@ 0x40000000
 8005b3a:	6054      	str	r4, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005b3c:	bb64      	cbnz	r4, 8005b98 <HAL_FDCAN_GetRxMessage+0x168>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8005b3e:	f8de 4000 	ldr.w	r4, [lr]
 8005b42:	f3c4 448a 	ubfx	r4, r4, #18, #11
 8005b46:	6014      	str	r4, [r2, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005b48:	f8de 4000 	ldr.w	r4, [lr]
 8005b4c:	f004 5400 	and.w	r4, r4, #536870912	@ 0x20000000
 8005b50:	6094      	str	r4, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8005b52:	f8de 4000 	ldr.w	r4, [lr]
 8005b56:	f004 4400 	and.w	r4, r4, #2147483648	@ 0x80000000
 8005b5a:	6114      	str	r4, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005b5c:	f8be 4004 	ldrh.w	r4, [lr, #4]
 8005b60:	61d4      	str	r4, [r2, #28]
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8005b62:	f8de 4004 	ldr.w	r4, [lr, #4]
 8005b66:	f404 2470 	and.w	r4, r4, #983040	@ 0xf0000
 8005b6a:	60d4      	str	r4, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005b6c:	f8de 4004 	ldr.w	r4, [lr, #4]
 8005b70:	f404 1480 	and.w	r4, r4, #1048576	@ 0x100000
 8005b74:	6154      	str	r4, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005b76:	f8de 4004 	ldr.w	r4, [lr, #4]
 8005b7a:	f404 1400 	and.w	r4, r4, #2097152	@ 0x200000
 8005b7e:	6194      	str	r4, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8005b80:	f89e 4007 	ldrb.w	r4, [lr, #7]
 8005b84:	f004 047f 	and.w	r4, r4, #127	@ 0x7f
 8005b88:	6214      	str	r4, [r2, #32]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8005b8a:	f8de 4004 	ldr.w	r4, [lr, #4]
 8005b8e:	0fe4      	lsrs	r4, r4, #31
 8005b90:	6254      	str	r4, [r2, #36]	@ 0x24
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8005b92:	f04f 0c00 	mov.w	ip, #0
 8005b96:	e00c      	b.n	8005bb2 <HAL_FDCAN_GetRxMessage+0x182>
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005b98:	f8de 4000 	ldr.w	r4, [lr]
 8005b9c:	f024 4460 	bic.w	r4, r4, #3758096384	@ 0xe0000000
 8005ba0:	6014      	str	r4, [r2, #0]
 8005ba2:	e7d1      	b.n	8005b48 <HAL_FDCAN_GetRxMessage+0x118>
      pRxData[ByteCounter] = pData[ByteCounter];
 8005ba4:	eb0e 040c 	add.w	r4, lr, ip
 8005ba8:	7a24      	ldrb	r4, [r4, #8]
 8005baa:	f803 400c 	strb.w	r4, [r3, ip]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8005bae:	f10c 0c01 	add.w	ip, ip, #1
 8005bb2:	89d4      	ldrh	r4, [r2, #14]
 8005bb4:	4d14      	ldr	r5, [pc, #80]	@ (8005c08 <HAL_FDCAN_GetRxMessage+0x1d8>)
 8005bb6:	5d2c      	ldrb	r4, [r5, r4]
 8005bb8:	4564      	cmp	r4, ip
 8005bba:	d8f3      	bhi.n	8005ba4 <HAL_FDCAN_GetRxMessage+0x174>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005bbc:	2940      	cmp	r1, #64	@ 0x40
 8005bbe:	d009      	beq.n	8005bd4 <HAL_FDCAN_GetRxMessage+0x1a4>
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005bc0:	2941      	cmp	r1, #65	@ 0x41
 8005bc2:	d00c      	beq.n	8005bde <HAL_FDCAN_GetRxMessage+0x1ae>
      if (RxLocation < FDCAN_RX_BUFFER32)
 8005bc4:	291f      	cmp	r1, #31
 8005bc6:	d80e      	bhi.n	8005be6 <HAL_FDCAN_GetRxMessage+0x1b6>
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8005bc8:	6802      	ldr	r2, [r0, #0]
 8005bca:	2301      	movs	r3, #1
 8005bcc:	408b      	lsls	r3, r1
 8005bce:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
 8005bd2:	e002      	b.n	8005bda <HAL_FDCAN_GetRxMessage+0x1aa>
      hfdcan->Instance->RXF0A = GetIndex;
 8005bd4:	6803      	ldr	r3, [r0, #0]
 8005bd6:	f8c3 60a8 	str.w	r6, [r3, #168]	@ 0xa8
    return HAL_OK;
 8005bda:	2000      	movs	r0, #0
}
 8005bdc:	bd70      	pop	{r4, r5, r6, pc}
      hfdcan->Instance->RXF1A = GetIndex;
 8005bde:	6803      	ldr	r3, [r0, #0]
 8005be0:	f8c3 60b8 	str.w	r6, [r3, #184]	@ 0xb8
 8005be4:	e7f9      	b.n	8005bda <HAL_FDCAN_GetRxMessage+0x1aa>
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8005be6:	f001 011f 	and.w	r1, r1, #31
 8005bea:	6802      	ldr	r2, [r0, #0]
 8005bec:	2301      	movs	r3, #1
 8005bee:	408b      	lsls	r3, r1
 8005bf0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8005bf4:	e7f1      	b.n	8005bda <HAL_FDCAN_GetRxMessage+0x1aa>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005bf6:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8005bfa:	f043 0308 	orr.w	r3, r3, #8
 8005bfe:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
    return HAL_ERROR;
 8005c02:	2001      	movs	r0, #1
}
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	08016d28 	.word	0x08016d28

08005c0c <HAL_FDCAN_ActivateNotification>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005c0c:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005c10:	3b01      	subs	r3, #1
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d907      	bls.n	8005c28 <HAL_FDCAN_ActivateNotification+0x1c>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005c18:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8005c1c:	f043 0302 	orr.w	r3, r3, #2
 8005c20:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
    return HAL_ERROR;
 8005c24:	2001      	movs	r0, #1
}
 8005c26:	4770      	bx	lr
{
 8005c28:	b410      	push	{r4}
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8005c2a:	6803      	ldr	r3, [r0, #0]
 8005c2c:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
 8005c2e:	420c      	tst	r4, r1
 8005c30:	d124      	bne.n	8005c7c <HAL_FDCAN_ActivateNotification+0x70>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8005c32:	6ddc      	ldr	r4, [r3, #92]	@ 0x5c
 8005c34:	f044 0401 	orr.w	r4, r4, #1
 8005c38:	65dc      	str	r4, [r3, #92]	@ 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8005c3a:	f411 7f00 	tst.w	r1, #512	@ 0x200
 8005c3e:	d005      	beq.n	8005c4c <HAL_FDCAN_ActivateNotification+0x40>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005c40:	6804      	ldr	r4, [r0, #0]
 8005c42:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8005c46:	4313      	orrs	r3, r2
 8005c48:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005c4c:	f411 6f80 	tst.w	r1, #1024	@ 0x400
 8005c50:	d005      	beq.n	8005c5e <HAL_FDCAN_ActivateNotification+0x52>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8005c52:	6804      	ldr	r4, [r0, #0]
 8005c54:	f8d4 30e4 	ldr.w	r3, [r4, #228]	@ 0xe4
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	f8c4 30e4 	str.w	r3, [r4, #228]	@ 0xe4
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8005c5e:	6800      	ldr	r0, [r0, #0]
 8005c60:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8005c62:	4a0c      	ldr	r2, [pc, #48]	@ (8005c94 <HAL_FDCAN_ActivateNotification+0x88>)
 8005c64:	400a      	ands	r2, r1
 8005c66:	4313      	orrs	r3, r2
 8005c68:	6543      	str	r3, [r0, #84]	@ 0x54
 8005c6a:	4a0b      	ldr	r2, [pc, #44]	@ (8005c98 <HAL_FDCAN_ActivateNotification+0x8c>)
 8005c6c:	6953      	ldr	r3, [r2, #20]
 8005c6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c72:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 8005c74:	2000      	movs	r0, #0
}
 8005c76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c7a:	4770      	bx	lr
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8005c7c:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
 8005c7e:	ea31 0404 	bics.w	r4, r1, r4
 8005c82:	d002      	beq.n	8005c8a <HAL_FDCAN_ActivateNotification+0x7e>
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8005c84:	2403      	movs	r4, #3
 8005c86:	65dc      	str	r4, [r3, #92]	@ 0x5c
 8005c88:	e7d7      	b.n	8005c3a <HAL_FDCAN_ActivateNotification+0x2e>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8005c8a:	6ddc      	ldr	r4, [r3, #92]	@ 0x5c
 8005c8c:	f044 0402 	orr.w	r4, r4, #2
 8005c90:	65dc      	str	r4, [r3, #92]	@ 0x5c
 8005c92:	e7d2      	b.n	8005c3a <HAL_FDCAN_ActivateNotification+0x2e>
 8005c94:	3fcfffff 	.word	0x3fcfffff
 8005c98:	4000a800 	.word	0x4000a800

08005c9c <HAL_FDCAN_ClockCalibrationCallback>:
}
 8005c9c:	4770      	bx	lr

08005c9e <HAL_FDCAN_TxEventFifoCallback>:
}
 8005c9e:	4770      	bx	lr

08005ca0 <HAL_FDCAN_RxFifo1Callback>:
}
 8005ca0:	4770      	bx	lr

08005ca2 <HAL_FDCAN_TxFifoEmptyCallback>:
}
 8005ca2:	4770      	bx	lr

08005ca4 <HAL_FDCAN_TxBufferCompleteCallback>:
}
 8005ca4:	4770      	bx	lr

08005ca6 <HAL_FDCAN_TxBufferAbortCallback>:
}
 8005ca6:	4770      	bx	lr

08005ca8 <HAL_FDCAN_RxBufferNewMessageCallback>:
}
 8005ca8:	4770      	bx	lr

08005caa <HAL_FDCAN_TimestampWraparoundCallback>:
}
 8005caa:	4770      	bx	lr

08005cac <HAL_FDCAN_TimeoutOccurredCallback>:
}
 8005cac:	4770      	bx	lr

08005cae <HAL_FDCAN_HighPriorityMessageCallback>:
}
 8005cae:	4770      	bx	lr

08005cb0 <HAL_FDCAN_ErrorStatusCallback>:
}
 8005cb0:	4770      	bx	lr

08005cb2 <HAL_FDCAN_TT_ScheduleSyncCallback>:
}
 8005cb2:	4770      	bx	lr

08005cb4 <HAL_FDCAN_TT_TimeMarkCallback>:
}
 8005cb4:	4770      	bx	lr

08005cb6 <HAL_FDCAN_TT_StopWatchCallback>:
}
 8005cb6:	4770      	bx	lr

08005cb8 <HAL_FDCAN_TT_GlobalTimeCallback>:
}
 8005cb8:	4770      	bx	lr
	...

08005cbc <HAL_FDCAN_IRQHandler>:
{
 8005cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cc0:	b083      	sub	sp, #12
 8005cc2:	4604      	mov	r4, r0
  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8005cc4:	4bb0      	ldr	r3, [pc, #704]	@ (8005f88 <HAL_FDCAN_IRQHandler+0x2cc>)
 8005cc6:	691a      	ldr	r2, [r3, #16]
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	079b      	lsls	r3, r3, #30
 8005ccc:	ea03 7382 	and.w	r3, r3, r2, lsl #30
 8005cd0:	9301      	str	r3, [sp, #4]
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005cd2:	6803      	ldr	r3, [r0, #0]
 8005cd4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005cd6:	f402 4a70 	and.w	sl, r2, #61440	@ 0xf000
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005cda:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005cdc:	ea0a 0a02 	and.w	sl, sl, r2
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005ce0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005ce2:	f002 090f 	and.w	r9, r2, #15
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005ce6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ce8:	ea09 0902 	and.w	r9, r9, r2
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005cec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005cee:	f002 08f0 	and.w	r8, r2, #240	@ 0xf0
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005cf2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005cf4:	ea08 0802 	and.w	r8, r8, r2
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005cf8:	6d1e      	ldr	r6, [r3, #80]	@ 0x50
 8005cfa:	f006 5671 	and.w	r6, r6, #1010827264	@ 0x3c400000
  Errors &= hfdcan->Instance->IE;
 8005cfe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d00:	4016      	ands	r6, r2
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005d02:	6d1f      	ldr	r7, [r3, #80]	@ 0x50
 8005d04:	f007 7760 	and.w	r7, r7, #58720256	@ 0x3800000
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005d08:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d0a:	4017      	ands	r7, r2
  itsourceIE = hfdcan->Instance->IE;
 8005d0c:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
  itflagIR = hfdcan->Instance->IR;
 8005d0e:	f8d3 b050 	ldr.w	fp, [r3, #80]	@ 0x50
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8005d12:	f415 7f80 	tst.w	r5, #256	@ 0x100
 8005d16:	d002      	beq.n	8005d1e <HAL_FDCAN_IRQHandler+0x62>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005d18:	f41b 7f80 	tst.w	fp, #256	@ 0x100
 8005d1c:	d164      	bne.n	8005de8 <HAL_FDCAN_IRQHandler+0x12c>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8005d1e:	f415 6f80 	tst.w	r5, #1024	@ 0x400
 8005d22:	d002      	beq.n	8005d2a <HAL_FDCAN_IRQHandler+0x6e>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8005d24:	f41b 6f80 	tst.w	fp, #1024	@ 0x400
 8005d28:	d167      	bne.n	8005dfa <HAL_FDCAN_IRQHandler+0x13e>
  if (ClkCalibrationITs != 0U)
 8005d2a:	9b01      	ldr	r3, [sp, #4]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d174      	bne.n	8005e1a <HAL_FDCAN_IRQHandler+0x15e>
  if (TxEventFifoITs != 0U)
 8005d30:	f1ba 0f00 	cmp.w	sl, #0
 8005d34:	d17c      	bne.n	8005e30 <HAL_FDCAN_IRQHandler+0x174>
  if (RxFifo0ITs != 0U)
 8005d36:	f1b9 0f00 	cmp.w	r9, #0
 8005d3a:	f040 8085 	bne.w	8005e48 <HAL_FDCAN_IRQHandler+0x18c>
  if (RxFifo1ITs != 0U)
 8005d3e:	f1b8 0f00 	cmp.w	r8, #0
 8005d42:	f040 808d 	bne.w	8005e60 <HAL_FDCAN_IRQHandler+0x1a4>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005d46:	f415 6f00 	tst.w	r5, #2048	@ 0x800
 8005d4a:	d003      	beq.n	8005d54 <HAL_FDCAN_IRQHandler+0x98>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8005d4c:	f41b 6f00 	tst.w	fp, #2048	@ 0x800
 8005d50:	f040 8092 	bne.w	8005e78 <HAL_FDCAN_IRQHandler+0x1bc>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8005d54:	f415 7f00 	tst.w	r5, #512	@ 0x200
 8005d58:	d003      	beq.n	8005d62 <HAL_FDCAN_IRQHandler+0xa6>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8005d5a:	f41b 7f00 	tst.w	fp, #512	@ 0x200
 8005d5e:	f040 8096 	bne.w	8005e8e <HAL_FDCAN_IRQHandler+0x1d2>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005d62:	f415 2f00 	tst.w	r5, #524288	@ 0x80000
 8005d66:	d003      	beq.n	8005d70 <HAL_FDCAN_IRQHandler+0xb4>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005d68:	f41b 2f00 	tst.w	fp, #524288	@ 0x80000
 8005d6c:	f040 809f 	bne.w	8005eae <HAL_FDCAN_IRQHandler+0x1f2>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8005d70:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8005d74:	d003      	beq.n	8005d7e <HAL_FDCAN_IRQHandler+0xc2>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8005d76:	f41b 3f80 	tst.w	fp, #65536	@ 0x10000
 8005d7a:	f040 80a3 	bne.w	8005ec4 <HAL_FDCAN_IRQHandler+0x208>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005d7e:	f415 2f80 	tst.w	r5, #262144	@ 0x40000
 8005d82:	d003      	beq.n	8005d8c <HAL_FDCAN_IRQHandler+0xd0>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005d84:	f41b 2f80 	tst.w	fp, #262144	@ 0x40000
 8005d88:	f040 80a7 	bne.w	8005eda <HAL_FDCAN_IRQHandler+0x21e>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8005d8c:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
 8005d90:	d00f      	beq.n	8005db2 <HAL_FDCAN_IRQHandler+0xf6>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8005d92:	f41b 3f00 	tst.w	fp, #131072	@ 0x20000
 8005d96:	d00c      	beq.n	8005db2 <HAL_FDCAN_IRQHandler+0xf6>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005d98:	6823      	ldr	r3, [r4, #0]
 8005d9a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005d9e:	651a      	str	r2, [r3, #80]	@ 0x50
 8005da0:	4b79      	ldr	r3, [pc, #484]	@ (8005f88 <HAL_FDCAN_IRQHandler+0x2cc>)
 8005da2:	2200      	movs	r2, #0
 8005da4:	611a      	str	r2, [r3, #16]
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005da6:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8005daa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dae:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
  if (ErrorStatusITs != 0U)
 8005db2:	2f00      	cmp	r7, #0
 8005db4:	f040 809c 	bne.w	8005ef0 <HAL_FDCAN_IRQHandler+0x234>
  if (Errors != 0U)
 8005db8:	b14e      	cbz	r6, 8005dce <HAL_FDCAN_IRQHandler+0x112>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005dba:	6823      	ldr	r3, [r4, #0]
 8005dbc:	651e      	str	r6, [r3, #80]	@ 0x50
 8005dbe:	0fb2      	lsrs	r2, r6, #30
 8005dc0:	4b71      	ldr	r3, [pc, #452]	@ (8005f88 <HAL_FDCAN_IRQHandler+0x2cc>)
 8005dc2:	611a      	str	r2, [r3, #16]
    hfdcan->ErrorCode |= Errors;
 8005dc4:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8005dc8:	4333      	orrs	r3, r6
 8005dca:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
  if (hfdcan->Instance == FDCAN1)
 8005dce:	6822      	ldr	r2, [r4, #0]
 8005dd0:	4b6e      	ldr	r3, [pc, #440]	@ (8005f8c <HAL_FDCAN_IRQHandler+0x2d0>)
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	f000 8096 	beq.w	8005f04 <HAL_FDCAN_IRQHandler+0x248>
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005dd8:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	f040 80f7 	bne.w	8005fd0 <HAL_FDCAN_IRQHandler+0x314>
}
 8005de2:	b003      	add	sp, #12
 8005de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005de8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005dec:	651a      	str	r2, [r3, #80]	@ 0x50
 8005dee:	4b66      	ldr	r3, [pc, #408]	@ (8005f88 <HAL_FDCAN_IRQHandler+0x2cc>)
 8005df0:	2200      	movs	r2, #0
 8005df2:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005df4:	f7ff ff5b 	bl	8005cae <HAL_FDCAN_HighPriorityMessageCallback>
 8005df8:	e791      	b.n	8005d1e <HAL_FDCAN_IRQHandler+0x62>
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005dfa:	6823      	ldr	r3, [r4, #0]
 8005dfc:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005e00:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005e04:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8005e08:	6518      	str	r0, [r3, #80]	@ 0x50
 8005e0a:	4b5f      	ldr	r3, [pc, #380]	@ (8005f88 <HAL_FDCAN_IRQHandler+0x2cc>)
 8005e0c:	2000      	movs	r0, #0
 8005e0e:	6118      	str	r0, [r3, #16]
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005e10:	4011      	ands	r1, r2
 8005e12:	4620      	mov	r0, r4
 8005e14:	f7ff ff47 	bl	8005ca6 <HAL_FDCAN_TxBufferAbortCallback>
 8005e18:	e787      	b.n	8005d2a <HAL_FDCAN_IRQHandler+0x6e>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8005e1a:	6823      	ldr	r3, [r4, #0]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	651a      	str	r2, [r3, #80]	@ 0x50
 8005e20:	9901      	ldr	r1, [sp, #4]
 8005e22:	0f8a      	lsrs	r2, r1, #30
 8005e24:	4b58      	ldr	r3, [pc, #352]	@ (8005f88 <HAL_FDCAN_IRQHandler+0x2cc>)
 8005e26:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8005e28:	4620      	mov	r0, r4
 8005e2a:	f7ff ff37 	bl	8005c9c <HAL_FDCAN_ClockCalibrationCallback>
 8005e2e:	e77f      	b.n	8005d30 <HAL_FDCAN_IRQHandler+0x74>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005e30:	6823      	ldr	r3, [r4, #0]
 8005e32:	f8c3 a050 	str.w	sl, [r3, #80]	@ 0x50
 8005e36:	ea4f 729a 	mov.w	r2, sl, lsr #30
 8005e3a:	4b53      	ldr	r3, [pc, #332]	@ (8005f88 <HAL_FDCAN_IRQHandler+0x2cc>)
 8005e3c:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005e3e:	4651      	mov	r1, sl
 8005e40:	4620      	mov	r0, r4
 8005e42:	f7ff ff2c 	bl	8005c9e <HAL_FDCAN_TxEventFifoCallback>
 8005e46:	e776      	b.n	8005d36 <HAL_FDCAN_IRQHandler+0x7a>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005e48:	6823      	ldr	r3, [r4, #0]
 8005e4a:	f8c3 9050 	str.w	r9, [r3, #80]	@ 0x50
 8005e4e:	ea4f 7299 	mov.w	r2, r9, lsr #30
 8005e52:	4b4d      	ldr	r3, [pc, #308]	@ (8005f88 <HAL_FDCAN_IRQHandler+0x2cc>)
 8005e54:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005e56:	4649      	mov	r1, r9
 8005e58:	4620      	mov	r0, r4
 8005e5a:	f7fa fde9 	bl	8000a30 <HAL_FDCAN_RxFifo0Callback>
 8005e5e:	e76e      	b.n	8005d3e <HAL_FDCAN_IRQHandler+0x82>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005e60:	6823      	ldr	r3, [r4, #0]
 8005e62:	f8c3 8050 	str.w	r8, [r3, #80]	@ 0x50
 8005e66:	ea4f 7298 	mov.w	r2, r8, lsr #30
 8005e6a:	4b47      	ldr	r3, [pc, #284]	@ (8005f88 <HAL_FDCAN_IRQHandler+0x2cc>)
 8005e6c:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005e6e:	4641      	mov	r1, r8
 8005e70:	4620      	mov	r0, r4
 8005e72:	f7ff ff15 	bl	8005ca0 <HAL_FDCAN_RxFifo1Callback>
 8005e76:	e766      	b.n	8005d46 <HAL_FDCAN_IRQHandler+0x8a>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005e78:	6823      	ldr	r3, [r4, #0]
 8005e7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005e7e:	651a      	str	r2, [r3, #80]	@ 0x50
 8005e80:	4b41      	ldr	r3, [pc, #260]	@ (8005f88 <HAL_FDCAN_IRQHandler+0x2cc>)
 8005e82:	2200      	movs	r2, #0
 8005e84:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005e86:	4620      	mov	r0, r4
 8005e88:	f7ff ff0b 	bl	8005ca2 <HAL_FDCAN_TxFifoEmptyCallback>
 8005e8c:	e762      	b.n	8005d54 <HAL_FDCAN_IRQHandler+0x98>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005e8e:	6823      	ldr	r3, [r4, #0]
 8005e90:	f8d3 10d8 	ldr.w	r1, [r3, #216]	@ 0xd8
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005e94:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005e98:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8005e9c:	6518      	str	r0, [r3, #80]	@ 0x50
 8005e9e:	4b3a      	ldr	r3, [pc, #232]	@ (8005f88 <HAL_FDCAN_IRQHandler+0x2cc>)
 8005ea0:	2000      	movs	r0, #0
 8005ea2:	6118      	str	r0, [r3, #16]
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005ea4:	4011      	ands	r1, r2
 8005ea6:	4620      	mov	r0, r4
 8005ea8:	f7ff fefc 	bl	8005ca4 <HAL_FDCAN_TxBufferCompleteCallback>
 8005eac:	e759      	b.n	8005d62 <HAL_FDCAN_IRQHandler+0xa6>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8005eae:	6823      	ldr	r3, [r4, #0]
 8005eb0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005eb4:	651a      	str	r2, [r3, #80]	@ 0x50
 8005eb6:	4b34      	ldr	r3, [pc, #208]	@ (8005f88 <HAL_FDCAN_IRQHandler+0x2cc>)
 8005eb8:	2200      	movs	r2, #0
 8005eba:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8005ebc:	4620      	mov	r0, r4
 8005ebe:	f7ff fef3 	bl	8005ca8 <HAL_FDCAN_RxBufferNewMessageCallback>
 8005ec2:	e755      	b.n	8005d70 <HAL_FDCAN_IRQHandler+0xb4>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005ec4:	6823      	ldr	r3, [r4, #0]
 8005ec6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005eca:	651a      	str	r2, [r3, #80]	@ 0x50
 8005ecc:	4b2e      	ldr	r3, [pc, #184]	@ (8005f88 <HAL_FDCAN_IRQHandler+0x2cc>)
 8005ece:	2200      	movs	r2, #0
 8005ed0:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005ed2:	4620      	mov	r0, r4
 8005ed4:	f7ff fee9 	bl	8005caa <HAL_FDCAN_TimestampWraparoundCallback>
 8005ed8:	e751      	b.n	8005d7e <HAL_FDCAN_IRQHandler+0xc2>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005eda:	6823      	ldr	r3, [r4, #0]
 8005edc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005ee0:	651a      	str	r2, [r3, #80]	@ 0x50
 8005ee2:	4b29      	ldr	r3, [pc, #164]	@ (8005f88 <HAL_FDCAN_IRQHandler+0x2cc>)
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005ee8:	4620      	mov	r0, r4
 8005eea:	f7ff fedf 	bl	8005cac <HAL_FDCAN_TimeoutOccurredCallback>
 8005eee:	e74d      	b.n	8005d8c <HAL_FDCAN_IRQHandler+0xd0>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005ef0:	6823      	ldr	r3, [r4, #0]
 8005ef2:	651f      	str	r7, [r3, #80]	@ 0x50
 8005ef4:	0fba      	lsrs	r2, r7, #30
 8005ef6:	4b24      	ldr	r3, [pc, #144]	@ (8005f88 <HAL_FDCAN_IRQHandler+0x2cc>)
 8005ef8:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005efa:	4639      	mov	r1, r7
 8005efc:	4620      	mov	r0, r4
 8005efe:	f7ff fed7 	bl	8005cb0 <HAL_FDCAN_ErrorStatusCallback>
 8005f02:	e759      	b.n	8005db8 <HAL_FDCAN_IRQHandler+0xfc>
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8005f04:	6863      	ldr	r3, [r4, #4]
 8005f06:	689a      	ldr	r2, [r3, #8]
 8005f08:	f012 0f03 	tst.w	r2, #3
 8005f0c:	f43f af64 	beq.w	8005dd8 <HAL_FDCAN_IRQHandler+0x11c>
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8005f10:	6a19      	ldr	r1, [r3, #32]
 8005f12:	f001 010f 	and.w	r1, r1, #15
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8005f16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8005f18:	6a18      	ldr	r0, [r3, #32]
 8005f1a:	f000 0830 	and.w	r8, r0, #48	@ 0x30
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8005f1e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8005f20:	ea08 0800 	and.w	r8, r8, r0
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8005f24:	6a1f      	ldr	r7, [r3, #32]
 8005f26:	f407 77c0 	and.w	r7, r7, #384	@ 0x180
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8005f2a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8005f2c:	4007      	ands	r7, r0
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8005f2e:	6a1e      	ldr	r6, [r3, #32]
 8005f30:	f406 46fc 	and.w	r6, r6, #32256	@ 0x7e00
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8005f34:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8005f36:	4006      	ands	r6, r0
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8005f38:	6a1d      	ldr	r5, [r3, #32]
 8005f3a:	f405 25f0 	and.w	r5, r5, #491520	@ 0x78000
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8005f3e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8005f40:	4005      	ands	r5, r0
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8005f42:	f8d3 9024 	ldr.w	r9, [r3, #36]	@ 0x24
      itflagTTIR = hfdcan->ttcan->TTIR;
 8005f46:	f8d3 a020 	ldr.w	sl, [r3, #32]
      if (TTSchedSyncITs != 0U)
 8005f4a:	4011      	ands	r1, r2
 8005f4c:	d120      	bne.n	8005f90 <HAL_FDCAN_IRQHandler+0x2d4>
      if (TTTimeMarkITs != 0U)
 8005f4e:	f1b8 0f00 	cmp.w	r8, #0
 8005f52:	d122      	bne.n	8005f9a <HAL_FDCAN_IRQHandler+0x2de>
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8005f54:	f019 0f40 	tst.w	r9, #64	@ 0x40
 8005f58:	d002      	beq.n	8005f60 <HAL_FDCAN_IRQHandler+0x2a4>
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8005f5a:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8005f5e:	d124      	bne.n	8005faa <HAL_FDCAN_IRQHandler+0x2ee>
      if (TTGlobTimeITs != 0U)
 8005f60:	bb7f      	cbnz	r7, 8005fc2 <HAL_FDCAN_IRQHandler+0x306>
      if (TTDistErrors != 0U)
 8005f62:	b136      	cbz	r6, 8005f72 <HAL_FDCAN_IRQHandler+0x2b6>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8005f64:	6863      	ldr	r3, [r4, #4]
 8005f66:	621e      	str	r6, [r3, #32]
        hfdcan->ErrorCode |= TTDistErrors;
 8005f68:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8005f6c:	4333      	orrs	r3, r6
 8005f6e:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
      if (TTFatalErrors != 0U)
 8005f72:	2d00      	cmp	r5, #0
 8005f74:	f43f af30 	beq.w	8005dd8 <HAL_FDCAN_IRQHandler+0x11c>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8005f78:	6863      	ldr	r3, [r4, #4]
 8005f7a:	621d      	str	r5, [r3, #32]
        hfdcan->ErrorCode |= TTFatalErrors;
 8005f7c:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8005f80:	432b      	orrs	r3, r5
 8005f82:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 8005f86:	e727      	b.n	8005dd8 <HAL_FDCAN_IRQHandler+0x11c>
 8005f88:	4000a800 	.word	0x4000a800
 8005f8c:	4000a000 	.word	0x4000a000
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8005f90:	6219      	str	r1, [r3, #32]
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8005f92:	4620      	mov	r0, r4
 8005f94:	f7ff fe8d 	bl	8005cb2 <HAL_FDCAN_TT_ScheduleSyncCallback>
 8005f98:	e7d9      	b.n	8005f4e <HAL_FDCAN_IRQHandler+0x292>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8005f9a:	6863      	ldr	r3, [r4, #4]
 8005f9c:	f8c3 8020 	str.w	r8, [r3, #32]
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8005fa0:	4641      	mov	r1, r8
 8005fa2:	4620      	mov	r0, r4
 8005fa4:	f7ff fe86 	bl	8005cb4 <HAL_FDCAN_TT_TimeMarkCallback>
 8005fa8:	e7d4      	b.n	8005f54 <HAL_FDCAN_IRQHandler+0x298>
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8005faa:	6863      	ldr	r3, [r4, #4]
 8005fac:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8005fae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8005fb0:	2040      	movs	r0, #64	@ 0x40
 8005fb2:	6218      	str	r0, [r3, #32]
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8005fb4:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8005fb8:	0c09      	lsrs	r1, r1, #16
 8005fba:	4620      	mov	r0, r4
 8005fbc:	f7ff fe7b 	bl	8005cb6 <HAL_FDCAN_TT_StopWatchCallback>
 8005fc0:	e7ce      	b.n	8005f60 <HAL_FDCAN_IRQHandler+0x2a4>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8005fc2:	6863      	ldr	r3, [r4, #4]
 8005fc4:	621f      	str	r7, [r3, #32]
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8005fc6:	4639      	mov	r1, r7
 8005fc8:	4620      	mov	r0, r4
 8005fca:	f7ff fe75 	bl	8005cb8 <HAL_FDCAN_TT_GlobalTimeCallback>
 8005fce:	e7c8      	b.n	8005f62 <HAL_FDCAN_IRQHandler+0x2a6>
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	f7fa fb7d 	bl	80006d0 <HAL_FDCAN_ErrorCallback>
}
 8005fd6:	e704      	b.n	8005de2 <HAL_FDCAN_IRQHandler+0x126>

08005fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fda:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8005fdc:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005fde:	e06b      	b.n	80060b8 <HAL_GPIO_Init+0xe0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005fe0:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005fe2:	005e      	lsls	r6, r3, #1
 8005fe4:	2403      	movs	r4, #3
 8005fe6:	40b4      	lsls	r4, r6
 8005fe8:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005fec:	68cc      	ldr	r4, [r1, #12]
 8005fee:	40b4      	lsls	r4, r6
 8005ff0:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8005ff2:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ff4:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005ff6:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ffa:	684c      	ldr	r4, [r1, #4]
 8005ffc:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8006000:	409c      	lsls	r4, r3
 8006002:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8006004:	6044      	str	r4, [r0, #4]
 8006006:	e069      	b.n	80060dc <HAL_GPIO_Init+0x104>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006008:	08dd      	lsrs	r5, r3, #3
 800600a:	3508      	adds	r5, #8
 800600c:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006010:	f003 0c07 	and.w	ip, r3, #7
 8006014:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8006018:	f04f 0e0f 	mov.w	lr, #15
 800601c:	fa0e fe0c 	lsl.w	lr, lr, ip
 8006020:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006024:	690c      	ldr	r4, [r1, #16]
 8006026:	fa04 f40c 	lsl.w	r4, r4, ip
 800602a:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 800602e:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8006032:	e06b      	b.n	800610c <HAL_GPIO_Init+0x134>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006034:	2409      	movs	r4, #9
 8006036:	e000      	b.n	800603a <HAL_GPIO_Init+0x62>
 8006038:	2400      	movs	r4, #0
 800603a:	fa04 f40e 	lsl.w	r4, r4, lr
 800603e:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006040:	f10c 0c02 	add.w	ip, ip, #2
 8006044:	4d69      	ldr	r5, [pc, #420]	@ (80061ec <HAL_GPIO_Init+0x214>)
 8006046:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800604a:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
 800604e:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8006050:	43d4      	mvns	r4, r2
 8006052:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006056:	684f      	ldr	r7, [r1, #4]
 8006058:	f417 1f80 	tst.w	r7, #1048576	@ 0x100000
 800605c:	d001      	beq.n	8006062 <HAL_GPIO_Init+0x8a>
        {
          temp |= iocurrent;
 800605e:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8006062:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 8006066:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8006068:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 800606a:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800606e:	684f      	ldr	r7, [r1, #4]
 8006070:	f417 1f00 	tst.w	r7, #2097152	@ 0x200000
 8006074:	d001      	beq.n	800607a <HAL_GPIO_Init+0xa2>
        {
          temp |= iocurrent;
 8006076:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 800607a:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 800607e:	606e      	str	r6, [r5, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006080:	f8d5 5084 	ldr.w	r5, [r5, #132]	@ 0x84
        temp &= ~(iocurrent);
 8006084:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006088:	684f      	ldr	r7, [r1, #4]
 800608a:	f417 3f00 	tst.w	r7, #131072	@ 0x20000
 800608e:	d001      	beq.n	8006094 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8006090:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006094:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 8006098:	f8c5 6084 	str.w	r6, [r5, #132]	@ 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800609c:	f8d5 5080 	ldr.w	r5, [r5, #128]	@ 0x80
        temp &= ~(iocurrent);
 80060a0:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80060a2:	684e      	ldr	r6, [r1, #4]
 80060a4:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
 80060a8:	d001      	beq.n	80060ae <HAL_GPIO_Init+0xd6>
        {
          temp |= iocurrent;
 80060aa:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80060ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80060b2:	f8c2 4080 	str.w	r4, [r2, #128]	@ 0x80
      }
    }

    position++;
 80060b6:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80060b8:	680a      	ldr	r2, [r1, #0]
 80060ba:	fa32 f403 	lsrs.w	r4, r2, r3
 80060be:	f000 8092 	beq.w	80061e6 <HAL_GPIO_Init+0x20e>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80060c2:	f04f 0c01 	mov.w	ip, #1
 80060c6:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00U)
 80060ca:	ea1c 0202 	ands.w	r2, ip, r2
 80060ce:	d0f2      	beq.n	80060b6 <HAL_GPIO_Init+0xde>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80060d0:	684c      	ldr	r4, [r1, #4]
 80060d2:	f004 0403 	and.w	r4, r4, #3
 80060d6:	3c01      	subs	r4, #1
 80060d8:	2c01      	cmp	r4, #1
 80060da:	d981      	bls.n	8005fe0 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80060dc:	684c      	ldr	r4, [r1, #4]
 80060de:	f004 0403 	and.w	r4, r4, #3
 80060e2:	2c03      	cmp	r4, #3
 80060e4:	d00c      	beq.n	8006100 <HAL_GPIO_Init+0x128>
      temp = GPIOx->PUPDR;
 80060e6:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80060e8:	005d      	lsls	r5, r3, #1
 80060ea:	f04f 0c03 	mov.w	ip, #3
 80060ee:	fa0c fc05 	lsl.w	ip, ip, r5
 80060f2:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80060f6:	688c      	ldr	r4, [r1, #8]
 80060f8:	40ac      	lsls	r4, r5
 80060fa:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->PUPDR = temp;
 80060fe:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006100:	684c      	ldr	r4, [r1, #4]
 8006102:	f004 0403 	and.w	r4, r4, #3
 8006106:	2c02      	cmp	r4, #2
 8006108:	f43f af7e 	beq.w	8006008 <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 800610c:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800610e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8006112:	f04f 0c03 	mov.w	ip, #3
 8006116:	fa0c fc0e 	lsl.w	ip, ip, lr
 800611a:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800611e:	684c      	ldr	r4, [r1, #4]
 8006120:	f004 0403 	and.w	r4, r4, #3
 8006124:	fa04 f40e 	lsl.w	r4, r4, lr
 8006128:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 800612c:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800612e:	684c      	ldr	r4, [r1, #4]
 8006130:	f414 3f40 	tst.w	r4, #196608	@ 0x30000
 8006134:	d0bf      	beq.n	80060b6 <HAL_GPIO_Init+0xde>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006136:	4c2e      	ldr	r4, [pc, #184]	@ (80061f0 <HAL_GPIO_Init+0x218>)
 8006138:	f8d4 50f4 	ldr.w	r5, [r4, #244]	@ 0xf4
 800613c:	f045 0502 	orr.w	r5, r5, #2
 8006140:	f8c4 50f4 	str.w	r5, [r4, #244]	@ 0xf4
 8006144:	f8d4 40f4 	ldr.w	r4, [r4, #244]	@ 0xf4
 8006148:	f004 0402 	and.w	r4, r4, #2
 800614c:	9401      	str	r4, [sp, #4]
 800614e:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8006150:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8006154:	f10c 0502 	add.w	r5, ip, #2
 8006158:	4c24      	ldr	r4, [pc, #144]	@ (80061ec <HAL_GPIO_Init+0x214>)
 800615a:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800615e:	f003 0e03 	and.w	lr, r3, #3
 8006162:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8006166:	240f      	movs	r4, #15
 8006168:	fa04 f40e 	lsl.w	r4, r4, lr
 800616c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006170:	4c20      	ldr	r4, [pc, #128]	@ (80061f4 <HAL_GPIO_Init+0x21c>)
 8006172:	42a0      	cmp	r0, r4
 8006174:	f43f af60 	beq.w	8006038 <HAL_GPIO_Init+0x60>
 8006178:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800617c:	42a0      	cmp	r0, r4
 800617e:	d022      	beq.n	80061c6 <HAL_GPIO_Init+0x1ee>
 8006180:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8006184:	42a0      	cmp	r0, r4
 8006186:	d020      	beq.n	80061ca <HAL_GPIO_Init+0x1f2>
 8006188:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800618c:	42a0      	cmp	r0, r4
 800618e:	d01e      	beq.n	80061ce <HAL_GPIO_Init+0x1f6>
 8006190:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8006194:	42a0      	cmp	r0, r4
 8006196:	d01c      	beq.n	80061d2 <HAL_GPIO_Init+0x1fa>
 8006198:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800619c:	42a0      	cmp	r0, r4
 800619e:	d01a      	beq.n	80061d6 <HAL_GPIO_Init+0x1fe>
 80061a0:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80061a4:	42a0      	cmp	r0, r4
 80061a6:	d018      	beq.n	80061da <HAL_GPIO_Init+0x202>
 80061a8:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80061ac:	42a0      	cmp	r0, r4
 80061ae:	d016      	beq.n	80061de <HAL_GPIO_Init+0x206>
 80061b0:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80061b4:	42a0      	cmp	r0, r4
 80061b6:	d014      	beq.n	80061e2 <HAL_GPIO_Init+0x20a>
 80061b8:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80061bc:	42a0      	cmp	r0, r4
 80061be:	f43f af39 	beq.w	8006034 <HAL_GPIO_Init+0x5c>
 80061c2:	240a      	movs	r4, #10
 80061c4:	e739      	b.n	800603a <HAL_GPIO_Init+0x62>
 80061c6:	2401      	movs	r4, #1
 80061c8:	e737      	b.n	800603a <HAL_GPIO_Init+0x62>
 80061ca:	2402      	movs	r4, #2
 80061cc:	e735      	b.n	800603a <HAL_GPIO_Init+0x62>
 80061ce:	2403      	movs	r4, #3
 80061d0:	e733      	b.n	800603a <HAL_GPIO_Init+0x62>
 80061d2:	2404      	movs	r4, #4
 80061d4:	e731      	b.n	800603a <HAL_GPIO_Init+0x62>
 80061d6:	2405      	movs	r4, #5
 80061d8:	e72f      	b.n	800603a <HAL_GPIO_Init+0x62>
 80061da:	2406      	movs	r4, #6
 80061dc:	e72d      	b.n	800603a <HAL_GPIO_Init+0x62>
 80061de:	2407      	movs	r4, #7
 80061e0:	e72b      	b.n	800603a <HAL_GPIO_Init+0x62>
 80061e2:	2408      	movs	r4, #8
 80061e4:	e729      	b.n	800603a <HAL_GPIO_Init+0x62>
  }
}
 80061e6:	b003      	add	sp, #12
 80061e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061ea:	bf00      	nop
 80061ec:	58000400 	.word	0x58000400
 80061f0:	58024400 	.word	0x58024400
 80061f4:	58020000 	.word	0x58020000

080061f8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80061f8:	b10a      	cbz	r2, 80061fe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80061fa:	6181      	str	r1, [r0, #24]
 80061fc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80061fe:	0409      	lsls	r1, r1, #16
 8006200:	6181      	str	r1, [r0, #24]
  }
}
 8006202:	4770      	bx	lr

08006204 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006204:	6803      	ldr	r3, [r0, #0]
 8006206:	699a      	ldr	r2, [r3, #24]
 8006208:	f012 0f02 	tst.w	r2, #2
 800620c:	d001      	beq.n	8006212 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 800620e:	2200      	movs	r2, #0
 8006210:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006212:	6803      	ldr	r3, [r0, #0]
 8006214:	699a      	ldr	r2, [r3, #24]
 8006216:	f012 0f01 	tst.w	r2, #1
 800621a:	d103      	bne.n	8006224 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800621c:	699a      	ldr	r2, [r3, #24]
 800621e:	f042 0201 	orr.w	r2, r2, #1
 8006222:	619a      	str	r2, [r3, #24]
  }
}
 8006224:	4770      	bx	lr

08006226 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006226:	b410      	push	{r4}
 8006228:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800622a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800622e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006232:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006234:	4321      	orrs	r1, r4
 8006236:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800623a:	6802      	ldr	r2, [r0, #0]
 800623c:	6853      	ldr	r3, [r2, #4]
 800623e:	0d64      	lsrs	r4, r4, #21
 8006240:	f404 6480 	and.w	r4, r4, #1024	@ 0x400
 8006244:	f044 747f 	orr.w	r4, r4, #66846720	@ 0x3fc0000
 8006248:	f444 3458 	orr.w	r4, r4, #221184	@ 0x36000
 800624c:	f444 747f 	orr.w	r4, r4, #1020	@ 0x3fc
 8006250:	f044 0403 	orr.w	r4, r4, #3
 8006254:	ea23 0304 	bic.w	r3, r3, r4
 8006258:	430b      	orrs	r3, r1
 800625a:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800625c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006260:	4770      	bx	lr

08006262 <I2C_IsErrorOccurred>:
{
 8006262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006266:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 8006268:	6803      	ldr	r3, [r0, #0]
 800626a:	699f      	ldr	r7, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800626c:	f017 0710 	ands.w	r7, r7, #16
 8006270:	d04e      	beq.n	8006310 <I2C_IsErrorOccurred+0xae>
 8006272:	460e      	mov	r6, r1
 8006274:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006276:	2210      	movs	r2, #16
 8006278:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800627a:	2500      	movs	r5, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800627c:	6823      	ldr	r3, [r4, #0]
 800627e:	6998      	ldr	r0, [r3, #24]
 8006280:	f010 0f20 	tst.w	r0, #32
 8006284:	d13d      	bne.n	8006302 <I2C_IsErrorOccurred+0xa0>
 8006286:	2d00      	cmp	r5, #0
 8006288:	d13b      	bne.n	8006302 <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 800628a:	f1b6 3fff 	cmp.w	r6, #4294967295
 800628e:	d0f5      	beq.n	800627c <I2C_IsErrorOccurred+0x1a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006290:	f7fc ff26 	bl	80030e0 <HAL_GetTick>
 8006294:	eba0 0008 	sub.w	r0, r0, r8
 8006298:	42b0      	cmp	r0, r6
 800629a:	d801      	bhi.n	80062a0 <I2C_IsErrorOccurred+0x3e>
 800629c:	2e00      	cmp	r6, #0
 800629e:	d1ed      	bne.n	800627c <I2C_IsErrorOccurred+0x1a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80062a0:	6821      	ldr	r1, [r4, #0]
 80062a2:	684a      	ldr	r2, [r1, #4]
 80062a4:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
          tmp2 = hi2c->Mode;
 80062a8:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 80062ac:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80062ae:	6988      	ldr	r0, [r1, #24]
 80062b0:	f410 4f00 	tst.w	r0, #32768	@ 0x8000
 80062b4:	d004      	beq.n	80062c0 <I2C_IsErrorOccurred+0x5e>
              (tmp2 != HAL_I2C_MODE_SLAVE))
 80062b6:	3b20      	subs	r3, #32
 80062b8:	bf18      	it	ne
 80062ba:	2301      	movne	r3, #1
              (tmp1 != I2C_CR2_STOP) && \
 80062bc:	b902      	cbnz	r2, 80062c0 <I2C_IsErrorOccurred+0x5e>
 80062be:	b9c3      	cbnz	r3, 80062f2 <I2C_IsErrorOccurred+0x90>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80062c0:	6823      	ldr	r3, [r4, #0]
 80062c2:	699b      	ldr	r3, [r3, #24]
 80062c4:	f013 0f20 	tst.w	r3, #32
 80062c8:	d1d8      	bne.n	800627c <I2C_IsErrorOccurred+0x1a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80062ca:	f7fc ff09 	bl	80030e0 <HAL_GetTick>
 80062ce:	eba0 0008 	sub.w	r0, r0, r8
 80062d2:	2819      	cmp	r0, #25
 80062d4:	d9f4      	bls.n	80062c0 <I2C_IsErrorOccurred+0x5e>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062d6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80062d8:	f043 0320 	orr.w	r3, r3, #32
 80062dc:	6463      	str	r3, [r4, #68]	@ 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80062de:	2320      	movs	r3, #32
 80062e0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80062e4:	2300      	movs	r3, #0
 80062e6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
              __HAL_UNLOCK(hi2c);
 80062ea:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
              status = HAL_ERROR;
 80062ee:	2501      	movs	r5, #1
 80062f0:	e7e6      	b.n	80062c0 <I2C_IsErrorOccurred+0x5e>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80062f2:	684b      	ldr	r3, [r1, #4]
 80062f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80062f8:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 80062fa:	f7fc fef1 	bl	80030e0 <HAL_GetTick>
 80062fe:	4680      	mov	r8, r0
 8006300:	e7de      	b.n	80062c0 <I2C_IsErrorOccurred+0x5e>
    if (status == HAL_OK)
 8006302:	2d00      	cmp	r5, #0
 8006304:	d140      	bne.n	8006388 <I2C_IsErrorOccurred+0x126>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006306:	2220      	movs	r2, #32
 8006308:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 800630a:	2704      	movs	r7, #4
    status = HAL_ERROR;
 800630c:	2501      	movs	r5, #1
 800630e:	e000      	b.n	8006312 <I2C_IsErrorOccurred+0xb0>
  HAL_StatusTypeDef status = HAL_OK;
 8006310:	2500      	movs	r5, #0
  itflag = hi2c->Instance->ISR;
 8006312:	6822      	ldr	r2, [r4, #0]
 8006314:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006316:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800631a:	d005      	beq.n	8006328 <I2C_IsErrorOccurred+0xc6>
    error_code |= HAL_I2C_ERROR_BERR;
 800631c:	f047 0701 	orr.w	r7, r7, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006320:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006324:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8006326:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006328:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800632c:	d006      	beq.n	800633c <I2C_IsErrorOccurred+0xda>
    error_code |= HAL_I2C_ERROR_OVR;
 800632e:	f047 0708 	orr.w	r7, r7, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006332:	6822      	ldr	r2, [r4, #0]
 8006334:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006338:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 800633a:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800633c:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8006340:	d024      	beq.n	800638c <I2C_IsErrorOccurred+0x12a>
    error_code |= HAL_I2C_ERROR_ARLO;
 8006342:	f047 0702 	orr.w	r7, r7, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006346:	6823      	ldr	r3, [r4, #0]
 8006348:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800634c:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 800634e:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 8006350:	4620      	mov	r0, r4
 8006352:	f7ff ff57 	bl	8006204 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8006356:	6822      	ldr	r2, [r4, #0]
 8006358:	6853      	ldr	r3, [r2, #4]
 800635a:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 800635e:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8006362:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8006366:	f023 0301 	bic.w	r3, r3, #1
 800636a:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 800636c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800636e:	433b      	orrs	r3, r7
 8006370:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006372:	2320      	movs	r3, #32
 8006374:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006378:	2300      	movs	r3, #0
 800637a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 800637e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8006382:	4628      	mov	r0, r5
 8006384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    error_code |= HAL_I2C_ERROR_AF;
 8006388:	2704      	movs	r7, #4
 800638a:	e7c2      	b.n	8006312 <I2C_IsErrorOccurred+0xb0>
  if (status != HAL_OK)
 800638c:	2d00      	cmp	r5, #0
 800638e:	d0f8      	beq.n	8006382 <I2C_IsErrorOccurred+0x120>
 8006390:	e7de      	b.n	8006350 <I2C_IsErrorOccurred+0xee>

08006392 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8006392:	b570      	push	{r4, r5, r6, lr}
 8006394:	4604      	mov	r4, r0
 8006396:	460d      	mov	r5, r1
 8006398:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800639a:	6823      	ldr	r3, [r4, #0]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	f013 0f02 	tst.w	r3, #2
 80063a2:	d11d      	bne.n	80063e0 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80063a4:	4632      	mov	r2, r6
 80063a6:	4629      	mov	r1, r5
 80063a8:	4620      	mov	r0, r4
 80063aa:	f7ff ff5a 	bl	8006262 <I2C_IsErrorOccurred>
 80063ae:	b9c8      	cbnz	r0, 80063e4 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 80063b0:	f1b5 3fff 	cmp.w	r5, #4294967295
 80063b4:	d0f1      	beq.n	800639a <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063b6:	f7fc fe93 	bl	80030e0 <HAL_GetTick>
 80063ba:	1b80      	subs	r0, r0, r6
 80063bc:	42a8      	cmp	r0, r5
 80063be:	d801      	bhi.n	80063c4 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80063c0:	2d00      	cmp	r5, #0
 80063c2:	d1ea      	bne.n	800639a <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063c4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80063c6:	f043 0320 	orr.w	r3, r3, #32
 80063ca:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80063cc:	2320      	movs	r3, #32
 80063ce:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80063d2:	2300      	movs	r3, #0
 80063d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 80063d8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return HAL_ERROR;
 80063dc:	2001      	movs	r0, #1
 80063de:	e000      	b.n	80063e2 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 80063e0:	2000      	movs	r0, #0
}
 80063e2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80063e4:	2001      	movs	r0, #1
 80063e6:	e7fc      	b.n	80063e2 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

080063e8 <I2C_WaitOnFlagUntilTimeout>:
{
 80063e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063ec:	4606      	mov	r6, r0
 80063ee:	4688      	mov	r8, r1
 80063f0:	4617      	mov	r7, r2
 80063f2:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063f4:	6834      	ldr	r4, [r6, #0]
 80063f6:	69a4      	ldr	r4, [r4, #24]
 80063f8:	ea38 0404 	bics.w	r4, r8, r4
 80063fc:	bf0c      	ite	eq
 80063fe:	2401      	moveq	r4, #1
 8006400:	2400      	movne	r4, #0
 8006402:	42bc      	cmp	r4, r7
 8006404:	d118      	bne.n	8006438 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8006406:	f1b5 3fff 	cmp.w	r5, #4294967295
 800640a:	d0f3      	beq.n	80063f4 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800640c:	f7fc fe68 	bl	80030e0 <HAL_GetTick>
 8006410:	9b06      	ldr	r3, [sp, #24]
 8006412:	1ac0      	subs	r0, r0, r3
 8006414:	42a8      	cmp	r0, r5
 8006416:	d801      	bhi.n	800641c <I2C_WaitOnFlagUntilTimeout+0x34>
 8006418:	2d00      	cmp	r5, #0
 800641a:	d1eb      	bne.n	80063f4 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800641c:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 800641e:	f043 0320 	orr.w	r3, r3, #32
 8006422:	6473      	str	r3, [r6, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006424:	2320      	movs	r3, #32
 8006426:	f886 3041 	strb.w	r3, [r6, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800642a:	2300      	movs	r3, #0
 800642c:	f886 3042 	strb.w	r3, [r6, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 8006430:	f886 3040 	strb.w	r3, [r6, #64]	@ 0x40
        return HAL_ERROR;
 8006434:	2001      	movs	r0, #1
 8006436:	e000      	b.n	800643a <I2C_WaitOnFlagUntilTimeout+0x52>
  return HAL_OK;
 8006438:	2000      	movs	r0, #0
}
 800643a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006440 <I2C_RequestMemoryWrite>:
{
 8006440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006444:	b082      	sub	sp, #8
 8006446:	4604      	mov	r4, r0
 8006448:	4690      	mov	r8, r2
 800644a:	461d      	mov	r5, r3
 800644c:	9e08      	ldr	r6, [sp, #32]
 800644e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006450:	4b19      	ldr	r3, [pc, #100]	@ (80064b8 <I2C_RequestMemoryWrite+0x78>)
 8006452:	9300      	str	r3, [sp, #0]
 8006454:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006458:	b2ea      	uxtb	r2, r5
 800645a:	f7ff fee4 	bl	8006226 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800645e:	463a      	mov	r2, r7
 8006460:	4631      	mov	r1, r6
 8006462:	4620      	mov	r0, r4
 8006464:	f7ff ff95 	bl	8006392 <I2C_WaitOnTXISFlagUntilTimeout>
 8006468:	b9f8      	cbnz	r0, 80064aa <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800646a:	2d01      	cmp	r5, #1
 800646c:	d10e      	bne.n	800648c <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800646e:	6823      	ldr	r3, [r4, #0]
 8006470:	fa5f f288 	uxtb.w	r2, r8
 8006474:	629a      	str	r2, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006476:	9700      	str	r7, [sp, #0]
 8006478:	4633      	mov	r3, r6
 800647a:	2200      	movs	r2, #0
 800647c:	2180      	movs	r1, #128	@ 0x80
 800647e:	4620      	mov	r0, r4
 8006480:	f7ff ffb2 	bl	80063e8 <I2C_WaitOnFlagUntilTimeout>
 8006484:	b9a8      	cbnz	r0, 80064b2 <I2C_RequestMemoryWrite+0x72>
}
 8006486:	b002      	add	sp, #8
 8006488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800648c:	6823      	ldr	r3, [r4, #0]
 800648e:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8006492:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006494:	463a      	mov	r2, r7
 8006496:	4631      	mov	r1, r6
 8006498:	4620      	mov	r0, r4
 800649a:	f7ff ff7a 	bl	8006392 <I2C_WaitOnTXISFlagUntilTimeout>
 800649e:	b930      	cbnz	r0, 80064ae <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80064a0:	6823      	ldr	r3, [r4, #0]
 80064a2:	fa5f f288 	uxtb.w	r2, r8
 80064a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80064a8:	e7e5      	b.n	8006476 <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 80064aa:	2001      	movs	r0, #1
 80064ac:	e7eb      	b.n	8006486 <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 80064ae:	2001      	movs	r0, #1
 80064b0:	e7e9      	b.n	8006486 <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 80064b2:	2001      	movs	r0, #1
 80064b4:	e7e7      	b.n	8006486 <I2C_RequestMemoryWrite+0x46>
 80064b6:	bf00      	nop
 80064b8:	80002000 	.word	0x80002000

080064bc <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80064bc:	b570      	push	{r4, r5, r6, lr}
 80064be:	4605      	mov	r5, r0
 80064c0:	460c      	mov	r4, r1
 80064c2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80064c4:	682b      	ldr	r3, [r5, #0]
 80064c6:	699b      	ldr	r3, [r3, #24]
 80064c8:	f013 0f20 	tst.w	r3, #32
 80064cc:	d11a      	bne.n	8006504 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80064ce:	4632      	mov	r2, r6
 80064d0:	4621      	mov	r1, r4
 80064d2:	4628      	mov	r0, r5
 80064d4:	f7ff fec5 	bl	8006262 <I2C_IsErrorOccurred>
 80064d8:	b9b0      	cbnz	r0, 8006508 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064da:	f7fc fe01 	bl	80030e0 <HAL_GetTick>
 80064de:	1b80      	subs	r0, r0, r6
 80064e0:	42a0      	cmp	r0, r4
 80064e2:	d801      	bhi.n	80064e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 80064e4:	2c00      	cmp	r4, #0
 80064e6:	d1ed      	bne.n	80064c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064e8:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 80064ea:	f043 0320 	orr.w	r3, r3, #32
 80064ee:	646b      	str	r3, [r5, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80064f0:	2320      	movs	r3, #32
 80064f2:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80064f6:	2300      	movs	r3, #0
 80064f8:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80064fc:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
      return HAL_ERROR;
 8006500:	2001      	movs	r0, #1
}
 8006502:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8006504:	2000      	movs	r0, #0
 8006506:	e7fc      	b.n	8006502 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8006508:	2001      	movs	r0, #1
 800650a:	e7fa      	b.n	8006502 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

0800650c <HAL_I2C_Init>:
  if (hi2c == NULL)
 800650c:	2800      	cmp	r0, #0
 800650e:	d057      	beq.n	80065c0 <HAL_I2C_Init+0xb4>
{
 8006510:	b510      	push	{r4, lr}
 8006512:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006514:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8006518:	2b00      	cmp	r3, #0
 800651a:	d041      	beq.n	80065a0 <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800651c:	2324      	movs	r3, #36	@ 0x24
 800651e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8006522:	6822      	ldr	r2, [r4, #0]
 8006524:	6813      	ldr	r3, [r2, #0]
 8006526:	f023 0301 	bic.w	r3, r3, #1
 800652a:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800652c:	6863      	ldr	r3, [r4, #4]
 800652e:	6822      	ldr	r2, [r4, #0]
 8006530:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8006534:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006536:	6822      	ldr	r2, [r4, #0]
 8006538:	6893      	ldr	r3, [r2, #8]
 800653a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800653e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006540:	68e3      	ldr	r3, [r4, #12]
 8006542:	2b01      	cmp	r3, #1
 8006544:	d031      	beq.n	80065aa <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006546:	68a3      	ldr	r3, [r4, #8]
 8006548:	6822      	ldr	r2, [r4, #0]
 800654a:	f443 4304 	orr.w	r3, r3, #33792	@ 0x8400
 800654e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006550:	68e3      	ldr	r3, [r4, #12]
 8006552:	2b02      	cmp	r3, #2
 8006554:	d02f      	beq.n	80065b6 <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006556:	6822      	ldr	r2, [r4, #0]
 8006558:	6851      	ldr	r1, [r2, #4]
 800655a:	4b1a      	ldr	r3, [pc, #104]	@ (80065c4 <HAL_I2C_Init+0xb8>)
 800655c:	430b      	orrs	r3, r1
 800655e:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006560:	6822      	ldr	r2, [r4, #0]
 8006562:	68d3      	ldr	r3, [r2, #12]
 8006564:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006568:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800656a:	6923      	ldr	r3, [r4, #16]
 800656c:	6962      	ldr	r2, [r4, #20]
 800656e:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006570:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006572:	6822      	ldr	r2, [r4, #0]
 8006574:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006578:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800657a:	69e3      	ldr	r3, [r4, #28]
 800657c:	6a21      	ldr	r1, [r4, #32]
 800657e:	6822      	ldr	r2, [r4, #0]
 8006580:	430b      	orrs	r3, r1
 8006582:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8006584:	6822      	ldr	r2, [r4, #0]
 8006586:	6813      	ldr	r3, [r2, #0]
 8006588:	f043 0301 	orr.w	r3, r3, #1
 800658c:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800658e:	2000      	movs	r0, #0
 8006590:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006592:	2320      	movs	r3, #32
 8006594:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006598:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800659a:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 800659e:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80065a0:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 80065a4:	f7fb fe0a 	bl	80021bc <HAL_I2C_MspInit>
 80065a8:	e7b8      	b.n	800651c <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80065aa:	68a3      	ldr	r3, [r4, #8]
 80065ac:	6822      	ldr	r2, [r4, #0]
 80065ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065b2:	6093      	str	r3, [r2, #8]
 80065b4:	e7cc      	b.n	8006550 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80065b6:	6823      	ldr	r3, [r4, #0]
 80065b8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80065bc:	605a      	str	r2, [r3, #4]
 80065be:	e7ca      	b.n	8006556 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 80065c0:	2001      	movs	r0, #1
}
 80065c2:	4770      	bx	lr
 80065c4:	02008000 	.word	0x02008000

080065c8 <HAL_I2C_Mem_Write>:
{
 80065c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065cc:	b083      	sub	sp, #12
 80065ce:	460d      	mov	r5, r1
 80065d0:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 80065d4:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80065d6:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 80065da:	b2c9      	uxtb	r1, r1
 80065dc:	2920      	cmp	r1, #32
 80065de:	f040 80bc 	bne.w	800675a <HAL_I2C_Mem_Write+0x192>
 80065e2:	4604      	mov	r4, r0
 80065e4:	4690      	mov	r8, r2
 80065e6:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 80065e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80065ea:	f1ba 0f00 	cmp.w	sl, #0
 80065ee:	bf18      	it	ne
 80065f0:	2b00      	cmpne	r3, #0
 80065f2:	d016      	beq.n	8006622 <HAL_I2C_Mem_Write+0x5a>
    __HAL_LOCK(hi2c);
 80065f4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	f000 80b2 	beq.w	8006762 <HAL_I2C_Mem_Write+0x19a>
 80065fe:	f04f 0b01 	mov.w	fp, #1
 8006602:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8006606:	f7fc fd6b 	bl	80030e0 <HAL_GetTick>
 800660a:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800660c:	9000      	str	r0, [sp, #0]
 800660e:	2319      	movs	r3, #25
 8006610:	465a      	mov	r2, fp
 8006612:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006616:	4620      	mov	r0, r4
 8006618:	f7ff fee6 	bl	80063e8 <I2C_WaitOnFlagUntilTimeout>
 800661c:	b130      	cbz	r0, 800662c <HAL_I2C_Mem_Write+0x64>
      return HAL_ERROR;
 800661e:	2001      	movs	r0, #1
 8006620:	e09c      	b.n	800675c <HAL_I2C_Mem_Write+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006622:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006626:	6443      	str	r3, [r0, #68]	@ 0x44
      return  HAL_ERROR;
 8006628:	2001      	movs	r0, #1
 800662a:	e097      	b.n	800675c <HAL_I2C_Mem_Write+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800662c:	2321      	movs	r3, #33	@ 0x21
 800662e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006632:	2340      	movs	r3, #64	@ 0x40
 8006634:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006638:	2300      	movs	r3, #0
 800663a:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 800663c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800663e:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006640:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006644:	6363      	str	r3, [r4, #52]	@ 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006646:	9601      	str	r6, [sp, #4]
 8006648:	9700      	str	r7, [sp, #0]
 800664a:	464b      	mov	r3, r9
 800664c:	4642      	mov	r2, r8
 800664e:	4629      	mov	r1, r5
 8006650:	4620      	mov	r0, r4
 8006652:	f7ff fef5 	bl	8006440 <I2C_RequestMemoryWrite>
 8006656:	b970      	cbnz	r0, 8006676 <HAL_I2C_Mem_Write+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006658:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800665a:	b29b      	uxth	r3, r3
 800665c:	2bff      	cmp	r3, #255	@ 0xff
 800665e:	d90f      	bls.n	8006680 <HAL_I2C_Mem_Write+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006660:	22ff      	movs	r2, #255	@ 0xff
 8006662:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006664:	2300      	movs	r3, #0
 8006666:	9300      	str	r3, [sp, #0]
 8006668:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800666c:	4629      	mov	r1, r5
 800666e:	4620      	mov	r0, r4
 8006670:	f7ff fdd9 	bl	8006226 <I2C_TransferConfig>
 8006674:	e021      	b.n	80066ba <HAL_I2C_Mem_Write+0xf2>
      __HAL_UNLOCK(hi2c);
 8006676:	2300      	movs	r3, #0
 8006678:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800667c:	4658      	mov	r0, fp
 800667e:	e06d      	b.n	800675c <HAL_I2C_Mem_Write+0x194>
      hi2c->XferSize = hi2c->XferCount;
 8006680:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8006682:	b292      	uxth	r2, r2
 8006684:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006686:	2300      	movs	r3, #0
 8006688:	9300      	str	r3, [sp, #0]
 800668a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800668e:	b2d2      	uxtb	r2, r2
 8006690:	4629      	mov	r1, r5
 8006692:	4620      	mov	r0, r4
 8006694:	f7ff fdc7 	bl	8006226 <I2C_TransferConfig>
 8006698:	e00f      	b.n	80066ba <HAL_I2C_Mem_Write+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 800669a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800669c:	b292      	uxth	r2, r2
 800669e:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80066a0:	2300      	movs	r3, #0
 80066a2:	9300      	str	r3, [sp, #0]
 80066a4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80066a8:	b2d2      	uxtb	r2, r2
 80066aa:	4629      	mov	r1, r5
 80066ac:	4620      	mov	r0, r4
 80066ae:	f7ff fdba 	bl	8006226 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80066b2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d033      	beq.n	8006722 <HAL_I2C_Mem_Write+0x15a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066ba:	4632      	mov	r2, r6
 80066bc:	4639      	mov	r1, r7
 80066be:	4620      	mov	r0, r4
 80066c0:	f7ff fe67 	bl	8006392 <I2C_WaitOnTXISFlagUntilTimeout>
 80066c4:	2800      	cmp	r0, #0
 80066c6:	d14e      	bne.n	8006766 <HAL_I2C_Mem_Write+0x19e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80066c8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80066ca:	6823      	ldr	r3, [r4, #0]
 80066cc:	7812      	ldrb	r2, [r2, #0]
 80066ce:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->pBuffPtr++;
 80066d0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80066d2:	3301      	adds	r3, #1
 80066d4:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80066d6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80066d8:	b29b      	uxth	r3, r3
 80066da:	3b01      	subs	r3, #1
 80066dc:	b29b      	uxth	r3, r3
 80066de:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80066e0:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80066e2:	3b01      	subs	r3, #1
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80066e8:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80066ea:	b292      	uxth	r2, r2
 80066ec:	2a00      	cmp	r2, #0
 80066ee:	d0e0      	beq.n	80066b2 <HAL_I2C_Mem_Write+0xea>
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d1de      	bne.n	80066b2 <HAL_I2C_Mem_Write+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80066f4:	9600      	str	r6, [sp, #0]
 80066f6:	463b      	mov	r3, r7
 80066f8:	2200      	movs	r2, #0
 80066fa:	2180      	movs	r1, #128	@ 0x80
 80066fc:	4620      	mov	r0, r4
 80066fe:	f7ff fe73 	bl	80063e8 <I2C_WaitOnFlagUntilTimeout>
 8006702:	bb90      	cbnz	r0, 800676a <HAL_I2C_Mem_Write+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006704:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8006706:	b29b      	uxth	r3, r3
 8006708:	2bff      	cmp	r3, #255	@ 0xff
 800670a:	d9c6      	bls.n	800669a <HAL_I2C_Mem_Write+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800670c:	22ff      	movs	r2, #255	@ 0xff
 800670e:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006710:	2300      	movs	r3, #0
 8006712:	9300      	str	r3, [sp, #0]
 8006714:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006718:	4629      	mov	r1, r5
 800671a:	4620      	mov	r0, r4
 800671c:	f7ff fd83 	bl	8006226 <I2C_TransferConfig>
 8006720:	e7c7      	b.n	80066b2 <HAL_I2C_Mem_Write+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006722:	4632      	mov	r2, r6
 8006724:	4639      	mov	r1, r7
 8006726:	4620      	mov	r0, r4
 8006728:	f7ff fec8 	bl	80064bc <I2C_WaitOnSTOPFlagUntilTimeout>
 800672c:	b9f8      	cbnz	r0, 800676e <HAL_I2C_Mem_Write+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800672e:	6823      	ldr	r3, [r4, #0]
 8006730:	2220      	movs	r2, #32
 8006732:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8006734:	6821      	ldr	r1, [r4, #0]
 8006736:	684b      	ldr	r3, [r1, #4]
 8006738:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 800673c:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8006740:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8006744:	f023 0301 	bic.w	r3, r3, #1
 8006748:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800674a:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800674e:	2300      	movs	r3, #0
 8006750:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8006754:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    return HAL_OK;
 8006758:	e000      	b.n	800675c <HAL_I2C_Mem_Write+0x194>
    return HAL_BUSY;
 800675a:	2002      	movs	r0, #2
}
 800675c:	b003      	add	sp, #12
 800675e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8006762:	2002      	movs	r0, #2
 8006764:	e7fa      	b.n	800675c <HAL_I2C_Mem_Write+0x194>
        return HAL_ERROR;
 8006766:	2001      	movs	r0, #1
 8006768:	e7f8      	b.n	800675c <HAL_I2C_Mem_Write+0x194>
          return HAL_ERROR;
 800676a:	2001      	movs	r0, #1
 800676c:	e7f6      	b.n	800675c <HAL_I2C_Mem_Write+0x194>
      return HAL_ERROR;
 800676e:	2001      	movs	r0, #1
 8006770:	e7f4      	b.n	800675c <HAL_I2C_Mem_Write+0x194>
	...

08006774 <HAL_I2C_IsDeviceReady>:
{
 8006774:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006778:	b085      	sub	sp, #20
 800677a:	461d      	mov	r5, r3
  __IO uint32_t I2C_Trials = 0UL;
 800677c:	2300      	movs	r3, #0
 800677e:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006780:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8006784:	b2db      	uxtb	r3, r3
 8006786:	2b20      	cmp	r3, #32
 8006788:	f040 809c 	bne.w	80068c4 <HAL_I2C_IsDeviceReady+0x150>
 800678c:	4606      	mov	r6, r0
 800678e:	4689      	mov	r9, r1
 8006790:	4690      	mov	r8, r2
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006792:	6803      	ldr	r3, [r0, #0]
 8006794:	699b      	ldr	r3, [r3, #24]
 8006796:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800679a:	f040 8095 	bne.w	80068c8 <HAL_I2C_IsDeviceReady+0x154>
    __HAL_LOCK(hi2c);
 800679e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	f000 8092 	beq.w	80068cc <HAL_I2C_IsDeviceReady+0x158>
 80067a8:	2301      	movs	r3, #1
 80067aa:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 80067ae:	2324      	movs	r3, #36	@ 0x24
 80067b0:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067b4:	2300      	movs	r3, #0
 80067b6:	6443      	str	r3, [r0, #68]	@ 0x44
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80067b8:	68f3      	ldr	r3, [r6, #12]
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d010      	beq.n	80067e0 <HAL_I2C_IsDeviceReady+0x6c>
 80067be:	f3c9 0309 	ubfx	r3, r9, #0, #10
 80067c2:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 80067c6:	6832      	ldr	r2, [r6, #0]
 80067c8:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 80067ca:	f7fc fc89 	bl	80030e0 <HAL_GetTick>
 80067ce:	4607      	mov	r7, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80067d0:	6832      	ldr	r2, [r6, #0]
 80067d2:	6993      	ldr	r3, [r2, #24]
 80067d4:	f3c3 1c40 	ubfx	ip, r3, #5, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80067d8:	6993      	ldr	r3, [r2, #24]
 80067da:	f3c3 1300 	ubfx	r3, r3, #4, #1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80067de:	e00b      	b.n	80067f8 <HAL_I2C_IsDeviceReady+0x84>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80067e0:	f3c9 0209 	ubfx	r2, r9, #0, #10
 80067e4:	4b3d      	ldr	r3, [pc, #244]	@ (80068dc <HAL_I2C_IsDeviceReady+0x168>)
 80067e6:	4313      	orrs	r3, r2
 80067e8:	e7ed      	b.n	80067c6 <HAL_I2C_IsDeviceReady+0x52>
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80067ea:	6833      	ldr	r3, [r6, #0]
 80067ec:	699c      	ldr	r4, [r3, #24]
 80067ee:	f3c4 1c40 	ubfx	ip, r4, #5, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80067f2:	699b      	ldr	r3, [r3, #24]
 80067f4:	f3c3 1300 	ubfx	r3, r3, #4, #1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80067f8:	ea5c 0c03 	orrs.w	ip, ip, r3
 80067fc:	d117      	bne.n	800682e <HAL_I2C_IsDeviceReady+0xba>
        if (Timeout != HAL_MAX_DELAY)
 80067fe:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006802:	d0f2      	beq.n	80067ea <HAL_I2C_IsDeviceReady+0x76>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006804:	f7fc fc6c 	bl	80030e0 <HAL_GetTick>
 8006808:	1bc0      	subs	r0, r0, r7
 800680a:	42a8      	cmp	r0, r5
 800680c:	d801      	bhi.n	8006812 <HAL_I2C_IsDeviceReady+0x9e>
 800680e:	2d00      	cmp	r5, #0
 8006810:	d1eb      	bne.n	80067ea <HAL_I2C_IsDeviceReady+0x76>
            hi2c->State = HAL_I2C_STATE_READY;
 8006812:	2320      	movs	r3, #32
 8006814:	f886 3041 	strb.w	r3, [r6, #65]	@ 0x41
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006818:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 800681a:	f043 0320 	orr.w	r3, r3, #32
 800681e:	6473      	str	r3, [r6, #68]	@ 0x44
            __HAL_UNLOCK(hi2c);
 8006820:	2300      	movs	r3, #0
 8006822:	f886 3040 	strb.w	r3, [r6, #64]	@ 0x40
            return HAL_ERROR;
 8006826:	2001      	movs	r0, #1
}
 8006828:	b005      	add	sp, #20
 800682a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800682e:	6833      	ldr	r3, [r6, #0]
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	f013 0f10 	tst.w	r3, #16
 8006836:	d023      	beq.n	8006880 <HAL_I2C_IsDeviceReady+0x10c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006838:	9700      	str	r7, [sp, #0]
 800683a:	462b      	mov	r3, r5
 800683c:	2200      	movs	r2, #0
 800683e:	2120      	movs	r1, #32
 8006840:	4630      	mov	r0, r6
 8006842:	f7ff fdd1 	bl	80063e8 <I2C_WaitOnFlagUntilTimeout>
 8006846:	2800      	cmp	r0, #0
 8006848:	d144      	bne.n	80068d4 <HAL_I2C_IsDeviceReady+0x160>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800684a:	6833      	ldr	r3, [r6, #0]
 800684c:	2210      	movs	r2, #16
 800684e:	61da      	str	r2, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006850:	6833      	ldr	r3, [r6, #0]
 8006852:	2220      	movs	r2, #32
 8006854:	61da      	str	r2, [r3, #28]
      if (I2C_Trials == Trials)
 8006856:	9b03      	ldr	r3, [sp, #12]
 8006858:	4543      	cmp	r3, r8
 800685a:	d022      	beq.n	80068a2 <HAL_I2C_IsDeviceReady+0x12e>
      I2C_Trials++;
 800685c:	9b03      	ldr	r3, [sp, #12]
 800685e:	3301      	adds	r3, #1
 8006860:	9303      	str	r3, [sp, #12]
    } while (I2C_Trials < Trials);
 8006862:	9b03      	ldr	r3, [sp, #12]
 8006864:	4543      	cmp	r3, r8
 8006866:	d3a7      	bcc.n	80067b8 <HAL_I2C_IsDeviceReady+0x44>
    hi2c->State = HAL_I2C_STATE_READY;
 8006868:	2320      	movs	r3, #32
 800686a:	f886 3041 	strb.w	r3, [r6, #65]	@ 0x41
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800686e:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 8006870:	f043 0320 	orr.w	r3, r3, #32
 8006874:	6473      	str	r3, [r6, #68]	@ 0x44
    __HAL_UNLOCK(hi2c);
 8006876:	2300      	movs	r3, #0
 8006878:	f886 3040 	strb.w	r3, [r6, #64]	@ 0x40
    return HAL_ERROR;
 800687c:	2001      	movs	r0, #1
 800687e:	e7d3      	b.n	8006828 <HAL_I2C_IsDeviceReady+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006880:	9700      	str	r7, [sp, #0]
 8006882:	462b      	mov	r3, r5
 8006884:	2200      	movs	r2, #0
 8006886:	2120      	movs	r1, #32
 8006888:	4630      	mov	r0, r6
 800688a:	f7ff fdad 	bl	80063e8 <I2C_WaitOnFlagUntilTimeout>
 800688e:	b9f8      	cbnz	r0, 80068d0 <HAL_I2C_IsDeviceReady+0x15c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006890:	6832      	ldr	r2, [r6, #0]
 8006892:	2320      	movs	r3, #32
 8006894:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 8006896:	f886 3041 	strb.w	r3, [r6, #65]	@ 0x41
        __HAL_UNLOCK(hi2c);
 800689a:	2300      	movs	r3, #0
 800689c:	f886 3040 	strb.w	r3, [r6, #64]	@ 0x40
        return HAL_OK;
 80068a0:	e7c2      	b.n	8006828 <HAL_I2C_IsDeviceReady+0xb4>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80068a2:	6832      	ldr	r2, [r6, #0]
 80068a4:	6853      	ldr	r3, [r2, #4]
 80068a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80068aa:	6053      	str	r3, [r2, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80068ac:	9700      	str	r7, [sp, #0]
 80068ae:	462b      	mov	r3, r5
 80068b0:	2200      	movs	r2, #0
 80068b2:	2120      	movs	r1, #32
 80068b4:	4630      	mov	r0, r6
 80068b6:	f7ff fd97 	bl	80063e8 <I2C_WaitOnFlagUntilTimeout>
 80068ba:	b968      	cbnz	r0, 80068d8 <HAL_I2C_IsDeviceReady+0x164>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068bc:	6833      	ldr	r3, [r6, #0]
 80068be:	2220      	movs	r2, #32
 80068c0:	61da      	str	r2, [r3, #28]
 80068c2:	e7cb      	b.n	800685c <HAL_I2C_IsDeviceReady+0xe8>
    return HAL_BUSY;
 80068c4:	2002      	movs	r0, #2
 80068c6:	e7af      	b.n	8006828 <HAL_I2C_IsDeviceReady+0xb4>
      return HAL_BUSY;
 80068c8:	2002      	movs	r0, #2
 80068ca:	e7ad      	b.n	8006828 <HAL_I2C_IsDeviceReady+0xb4>
    __HAL_LOCK(hi2c);
 80068cc:	2002      	movs	r0, #2
 80068ce:	e7ab      	b.n	8006828 <HAL_I2C_IsDeviceReady+0xb4>
          return HAL_ERROR;
 80068d0:	2001      	movs	r0, #1
 80068d2:	e7a9      	b.n	8006828 <HAL_I2C_IsDeviceReady+0xb4>
          return HAL_ERROR;
 80068d4:	2001      	movs	r0, #1
 80068d6:	e7a7      	b.n	8006828 <HAL_I2C_IsDeviceReady+0xb4>
          return HAL_ERROR;
 80068d8:	2001      	movs	r0, #1
 80068da:	e7a5      	b.n	8006828 <HAL_I2C_IsDeviceReady+0xb4>
 80068dc:	02002000 	.word	0x02002000

080068e0 <HAL_I2C_EV_IRQHandler>:
{
 80068e0:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80068e2:	6803      	ldr	r3, [r0, #0]
 80068e4:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80068e6:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 80068e8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80068ea:	b103      	cbz	r3, 80068ee <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 80068ec:	4798      	blx	r3
}
 80068ee:	bd08      	pop	{r3, pc}

080068f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80068f0:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068f2:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 80068f6:	b2d2      	uxtb	r2, r2
 80068f8:	2a20      	cmp	r2, #32
 80068fa:	d123      	bne.n	8006944 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068fc:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8006900:	2a01      	cmp	r2, #1
 8006902:	d021      	beq.n	8006948 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8006904:	2201      	movs	r2, #1
 8006906:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800690a:	2224      	movs	r2, #36	@ 0x24
 800690c:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006910:	6800      	ldr	r0, [r0, #0]
 8006912:	6802      	ldr	r2, [r0, #0]
 8006914:	f022 0201 	bic.w	r2, r2, #1
 8006918:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800691a:	6818      	ldr	r0, [r3, #0]
 800691c:	6802      	ldr	r2, [r0, #0]
 800691e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006922:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006924:	6818      	ldr	r0, [r3, #0]
 8006926:	6802      	ldr	r2, [r0, #0]
 8006928:	4311      	orrs	r1, r2
 800692a:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 800692c:	6819      	ldr	r1, [r3, #0]
 800692e:	680a      	ldr	r2, [r1, #0]
 8006930:	f042 0201 	orr.w	r2, r2, #1
 8006934:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006936:	2220      	movs	r2, #32
 8006938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800693c:	2000      	movs	r0, #0
 800693e:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 8006942:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8006944:	2002      	movs	r0, #2
 8006946:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8006948:	2002      	movs	r0, #2
  }
}
 800694a:	4770      	bx	lr

0800694c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800694c:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800694e:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8006952:	b2d2      	uxtb	r2, r2
 8006954:	2a20      	cmp	r2, #32
 8006956:	d121      	bne.n	800699c <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006958:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800695c:	2a01      	cmp	r2, #1
 800695e:	d01f      	beq.n	80069a0 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8006960:	2201      	movs	r2, #1
 8006962:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006966:	2224      	movs	r2, #36	@ 0x24
 8006968:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800696c:	6800      	ldr	r0, [r0, #0]
 800696e:	6802      	ldr	r2, [r0, #0]
 8006970:	f022 0201 	bic.w	r2, r2, #1
 8006974:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006976:	6818      	ldr	r0, [r3, #0]
 8006978:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800697a:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800697e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006982:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006984:	6819      	ldr	r1, [r3, #0]
 8006986:	680a      	ldr	r2, [r1, #0]
 8006988:	f042 0201 	orr.w	r2, r2, #1
 800698c:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800698e:	2220      	movs	r2, #32
 8006990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006994:	2000      	movs	r0, #0
 8006996:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 800699a:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800699c:	2002      	movs	r0, #2
 800699e:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80069a0:	2002      	movs	r0, #2
  }
}
 80069a2:	4770      	bx	lr

080069a4 <HAL_PWREx_ConfigSupply>:
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80069a4:	4b13      	ldr	r3, [pc, #76]	@ (80069f4 <HAL_PWREx_ConfigSupply+0x50>)
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	f013 0f04 	tst.w	r3, #4
 80069ac:	d107      	bne.n	80069be <HAL_PWREx_ConfigSupply+0x1a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80069ae:	4b11      	ldr	r3, [pc, #68]	@ (80069f4 <HAL_PWREx_ConfigSupply+0x50>)
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	f003 0307 	and.w	r3, r3, #7
 80069b6:	4283      	cmp	r3, r0
 80069b8:	d01a      	beq.n	80069f0 <HAL_PWREx_ConfigSupply+0x4c>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80069ba:	2001      	movs	r0, #1
 80069bc:	4770      	bx	lr
{
 80069be:	b510      	push	{r4, lr}
      return HAL_OK;
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80069c0:	4a0c      	ldr	r2, [pc, #48]	@ (80069f4 <HAL_PWREx_ConfigSupply+0x50>)
 80069c2:	68d3      	ldr	r3, [r2, #12]
 80069c4:	f023 0307 	bic.w	r3, r3, #7
 80069c8:	4303      	orrs	r3, r0
 80069ca:	60d3      	str	r3, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80069cc:	f7fc fb88 	bl	80030e0 <HAL_GetTick>
 80069d0:	4604      	mov	r4, r0

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80069d2:	4b08      	ldr	r3, [pc, #32]	@ (80069f4 <HAL_PWREx_ConfigSupply+0x50>)
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 80069da:	d107      	bne.n	80069ec <HAL_PWREx_ConfigSupply+0x48>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80069dc:	f7fc fb80 	bl	80030e0 <HAL_GetTick>
 80069e0:	1b00      	subs	r0, r0, r4
 80069e2:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80069e6:	d9f4      	bls.n	80069d2 <HAL_PWREx_ConfigSupply+0x2e>
    {
      return HAL_ERROR;
 80069e8:	2001      	movs	r0, #1
 80069ea:	e000      	b.n	80069ee <HAL_PWREx_ConfigSupply+0x4a>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80069ec:	2000      	movs	r0, #0
}
 80069ee:	bd10      	pop	{r4, pc}
      return HAL_OK;
 80069f0:	2000      	movs	r0, #0
}
 80069f2:	4770      	bx	lr
 80069f4:	58024800 	.word	0x58024800

080069f8 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80069f8:	2800      	cmp	r0, #0
 80069fa:	f000 8318 	beq.w	800702e <HAL_RCC_OscConfig+0x636>
{
 80069fe:	b538      	push	{r3, r4, r5, lr}
 8006a00:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a02:	6803      	ldr	r3, [r0, #0]
 8006a04:	f013 0f01 	tst.w	r3, #1
 8006a08:	d025      	beq.n	8006a56 <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a0a:	4a94      	ldr	r2, [pc, #592]	@ (8006c5c <HAL_RCC_OscConfig+0x264>)
 8006a0c:	6913      	ldr	r3, [r2, #16]
 8006a0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a12:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006a14:	2b10      	cmp	r3, #16
 8006a16:	d015      	beq.n	8006a44 <HAL_RCC_OscConfig+0x4c>
 8006a18:	2b18      	cmp	r3, #24
 8006a1a:	d00f      	beq.n	8006a3c <HAL_RCC_OscConfig+0x44>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a1c:	6863      	ldr	r3, [r4, #4]
 8006a1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a22:	d03f      	beq.n	8006aa4 <HAL_RCC_OscConfig+0xac>
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d153      	bne.n	8006ad0 <HAL_RCC_OscConfig+0xd8>
 8006a28:	4b8c      	ldr	r3, [pc, #560]	@ (8006c5c <HAL_RCC_OscConfig+0x264>)
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006a30:	601a      	str	r2, [r3, #0]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006a38:	601a      	str	r2, [r3, #0]
 8006a3a:	e038      	b.n	8006aae <HAL_RCC_OscConfig+0xb6>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006a3c:	f002 0203 	and.w	r2, r2, #3
 8006a40:	2a02      	cmp	r2, #2
 8006a42:	d1eb      	bne.n	8006a1c <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a44:	4b85      	ldr	r3, [pc, #532]	@ (8006c5c <HAL_RCC_OscConfig+0x264>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8006a4c:	d003      	beq.n	8006a56 <HAL_RCC_OscConfig+0x5e>
 8006a4e:	6863      	ldr	r3, [r4, #4]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f000 82ee 	beq.w	8007032 <HAL_RCC_OscConfig+0x63a>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a56:	6823      	ldr	r3, [r4, #0]
 8006a58:	f013 0f02 	tst.w	r3, #2
 8006a5c:	f000 80a1 	beq.w	8006ba2 <HAL_RCC_OscConfig+0x1aa>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a60:	4a7e      	ldr	r2, [pc, #504]	@ (8006c5c <HAL_RCC_OscConfig+0x264>)
 8006a62:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a64:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006a66:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 8006a6a:	d05a      	beq.n	8006b22 <HAL_RCC_OscConfig+0x12a>
 8006a6c:	2b18      	cmp	r3, #24
 8006a6e:	d055      	beq.n	8006b1c <HAL_RCC_OscConfig+0x124>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006a70:	68e3      	ldr	r3, [r4, #12]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	f000 80de 	beq.w	8006c34 <HAL_RCC_OscConfig+0x23c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006a78:	4978      	ldr	r1, [pc, #480]	@ (8006c5c <HAL_RCC_OscConfig+0x264>)
 8006a7a:	680a      	ldr	r2, [r1, #0]
 8006a7c:	f022 0219 	bic.w	r2, r2, #25
 8006a80:	4313      	orrs	r3, r2
 8006a82:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a84:	f7fc fb2c 	bl	80030e0 <HAL_GetTick>
 8006a88:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a8a:	4b74      	ldr	r3, [pc, #464]	@ (8006c5c <HAL_RCC_OscConfig+0x264>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f013 0f04 	tst.w	r3, #4
 8006a92:	f040 80ad 	bne.w	8006bf0 <HAL_RCC_OscConfig+0x1f8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a96:	f7fc fb23 	bl	80030e0 <HAL_GetTick>
 8006a9a:	1b40      	subs	r0, r0, r5
 8006a9c:	2802      	cmp	r0, #2
 8006a9e:	d9f4      	bls.n	8006a8a <HAL_RCC_OscConfig+0x92>
          {
            return HAL_TIMEOUT;
 8006aa0:	2003      	movs	r0, #3
 8006aa2:	e2cd      	b.n	8007040 <HAL_RCC_OscConfig+0x648>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006aa4:	4a6d      	ldr	r2, [pc, #436]	@ (8006c5c <HAL_RCC_OscConfig+0x264>)
 8006aa6:	6813      	ldr	r3, [r2, #0]
 8006aa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006aac:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006aae:	6863      	ldr	r3, [r4, #4]
 8006ab0:	b32b      	cbz	r3, 8006afe <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 8006ab2:	f7fc fb15 	bl	80030e0 <HAL_GetTick>
 8006ab6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006ab8:	4b68      	ldr	r3, [pc, #416]	@ (8006c5c <HAL_RCC_OscConfig+0x264>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8006ac0:	d1c9      	bne.n	8006a56 <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ac2:	f7fc fb0d 	bl	80030e0 <HAL_GetTick>
 8006ac6:	1b40      	subs	r0, r0, r5
 8006ac8:	2864      	cmp	r0, #100	@ 0x64
 8006aca:	d9f5      	bls.n	8006ab8 <HAL_RCC_OscConfig+0xc0>
            return HAL_TIMEOUT;
 8006acc:	2003      	movs	r0, #3
 8006ace:	e2b7      	b.n	8007040 <HAL_RCC_OscConfig+0x648>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ad0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006ad4:	d009      	beq.n	8006aea <HAL_RCC_OscConfig+0xf2>
 8006ad6:	4b61      	ldr	r3, [pc, #388]	@ (8006c5c <HAL_RCC_OscConfig+0x264>)
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006ade:	601a      	str	r2, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006ae6:	601a      	str	r2, [r3, #0]
 8006ae8:	e7e1      	b.n	8006aae <HAL_RCC_OscConfig+0xb6>
 8006aea:	4b5c      	ldr	r3, [pc, #368]	@ (8006c5c <HAL_RCC_OscConfig+0x264>)
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006af2:	601a      	str	r2, [r3, #0]
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006afa:	601a      	str	r2, [r3, #0]
 8006afc:	e7d7      	b.n	8006aae <HAL_RCC_OscConfig+0xb6>
        tickstart = HAL_GetTick();
 8006afe:	f7fc faef 	bl	80030e0 <HAL_GetTick>
 8006b02:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006b04:	4b55      	ldr	r3, [pc, #340]	@ (8006c5c <HAL_RCC_OscConfig+0x264>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8006b0c:	d0a3      	beq.n	8006a56 <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b0e:	f7fc fae7 	bl	80030e0 <HAL_GetTick>
 8006b12:	1b40      	subs	r0, r0, r5
 8006b14:	2864      	cmp	r0, #100	@ 0x64
 8006b16:	d9f5      	bls.n	8006b04 <HAL_RCC_OscConfig+0x10c>
            return HAL_TIMEOUT;
 8006b18:	2003      	movs	r0, #3
 8006b1a:	e291      	b.n	8007040 <HAL_RCC_OscConfig+0x648>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006b1c:	f012 0f03 	tst.w	r2, #3
 8006b20:	d1a6      	bne.n	8006a70 <HAL_RCC_OscConfig+0x78>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b22:	4b4e      	ldr	r3, [pc, #312]	@ (8006c5c <HAL_RCC_OscConfig+0x264>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f013 0f04 	tst.w	r3, #4
 8006b2a:	d003      	beq.n	8006b34 <HAL_RCC_OscConfig+0x13c>
 8006b2c:	68e3      	ldr	r3, [r4, #12]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	f000 8281 	beq.w	8007036 <HAL_RCC_OscConfig+0x63e>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006b34:	4a49      	ldr	r2, [pc, #292]	@ (8006c5c <HAL_RCC_OscConfig+0x264>)
 8006b36:	6813      	ldr	r3, [r2, #0]
 8006b38:	f023 0319 	bic.w	r3, r3, #25
 8006b3c:	68e1      	ldr	r1, [r4, #12]
 8006b3e:	430b      	orrs	r3, r1
 8006b40:	6013      	str	r3, [r2, #0]
          tickstart = HAL_GetTick();
 8006b42:	f7fc facd 	bl	80030e0 <HAL_GetTick>
 8006b46:	4605      	mov	r5, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b48:	4b44      	ldr	r3, [pc, #272]	@ (8006c5c <HAL_RCC_OscConfig+0x264>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f013 0f04 	tst.w	r3, #4
 8006b50:	d106      	bne.n	8006b60 <HAL_RCC_OscConfig+0x168>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b52:	f7fc fac5 	bl	80030e0 <HAL_GetTick>
 8006b56:	1b40      	subs	r0, r0, r5
 8006b58:	2802      	cmp	r0, #2
 8006b5a:	d9f5      	bls.n	8006b48 <HAL_RCC_OscConfig+0x150>
              return HAL_TIMEOUT;
 8006b5c:	2003      	movs	r0, #3
 8006b5e:	e26f      	b.n	8007040 <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b60:	f7fc fad8 	bl	8003114 <HAL_GetREVID>
 8006b64:	f241 0303 	movw	r3, #4099	@ 0x1003
 8006b68:	4298      	cmp	r0, r3
 8006b6a:	d812      	bhi.n	8006b92 <HAL_RCC_OscConfig+0x19a>
 8006b6c:	6922      	ldr	r2, [r4, #16]
 8006b6e:	2a40      	cmp	r2, #64	@ 0x40
 8006b70:	d007      	beq.n	8006b82 <HAL_RCC_OscConfig+0x18a>
 8006b72:	493a      	ldr	r1, [pc, #232]	@ (8006c5c <HAL_RCC_OscConfig+0x264>)
 8006b74:	684b      	ldr	r3, [r1, #4]
 8006b76:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006b7a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8006b7e:	604b      	str	r3, [r1, #4]
 8006b80:	e00f      	b.n	8006ba2 <HAL_RCC_OscConfig+0x1aa>
 8006b82:	4a36      	ldr	r2, [pc, #216]	@ (8006c5c <HAL_RCC_OscConfig+0x264>)
 8006b84:	6853      	ldr	r3, [r2, #4]
 8006b86:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006b8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b8e:	6053      	str	r3, [r2, #4]
 8006b90:	e007      	b.n	8006ba2 <HAL_RCC_OscConfig+0x1aa>
 8006b92:	4a32      	ldr	r2, [pc, #200]	@ (8006c5c <HAL_RCC_OscConfig+0x264>)
 8006b94:	6853      	ldr	r3, [r2, #4]
 8006b96:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8006b9a:	6921      	ldr	r1, [r4, #16]
 8006b9c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006ba0:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006ba2:	6823      	ldr	r3, [r4, #0]
 8006ba4:	f013 0f10 	tst.w	r3, #16
 8006ba8:	f000 8088 	beq.w	8006cbc <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006bac:	4a2b      	ldr	r2, [pc, #172]	@ (8006c5c <HAL_RCC_OscConfig+0x264>)
 8006bae:	6913      	ldr	r3, [r2, #16]
 8006bb0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006bb4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006bb6:	2b08      	cmp	r3, #8
 8006bb8:	d056      	beq.n	8006c68 <HAL_RCC_OscConfig+0x270>
 8006bba:	2b18      	cmp	r3, #24
 8006bbc:	d050      	beq.n	8006c60 <HAL_RCC_OscConfig+0x268>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006bbe:	69e3      	ldr	r3, [r4, #28]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f000 80b8 	beq.w	8006d36 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006bc6:	4a25      	ldr	r2, [pc, #148]	@ (8006c5c <HAL_RCC_OscConfig+0x264>)
 8006bc8:	6813      	ldr	r3, [r2, #0]
 8006bca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bd0:	f7fc fa86 	bl	80030e0 <HAL_GetTick>
 8006bd4:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006bd6:	4b21      	ldr	r3, [pc, #132]	@ (8006c5c <HAL_RCC_OscConfig+0x264>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8006bde:	f040 8088 	bne.w	8006cf2 <HAL_RCC_OscConfig+0x2fa>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006be2:	f7fc fa7d 	bl	80030e0 <HAL_GetTick>
 8006be6:	1b40      	subs	r0, r0, r5
 8006be8:	2802      	cmp	r0, #2
 8006bea:	d9f4      	bls.n	8006bd6 <HAL_RCC_OscConfig+0x1de>
          {
            return HAL_TIMEOUT;
 8006bec:	2003      	movs	r0, #3
 8006bee:	e227      	b.n	8007040 <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bf0:	f7fc fa90 	bl	8003114 <HAL_GetREVID>
 8006bf4:	f241 0303 	movw	r3, #4099	@ 0x1003
 8006bf8:	4298      	cmp	r0, r3
 8006bfa:	d812      	bhi.n	8006c22 <HAL_RCC_OscConfig+0x22a>
 8006bfc:	6922      	ldr	r2, [r4, #16]
 8006bfe:	2a40      	cmp	r2, #64	@ 0x40
 8006c00:	d007      	beq.n	8006c12 <HAL_RCC_OscConfig+0x21a>
 8006c02:	4916      	ldr	r1, [pc, #88]	@ (8006c5c <HAL_RCC_OscConfig+0x264>)
 8006c04:	684b      	ldr	r3, [r1, #4]
 8006c06:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006c0a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8006c0e:	604b      	str	r3, [r1, #4]
 8006c10:	e7c7      	b.n	8006ba2 <HAL_RCC_OscConfig+0x1aa>
 8006c12:	4a12      	ldr	r2, [pc, #72]	@ (8006c5c <HAL_RCC_OscConfig+0x264>)
 8006c14:	6853      	ldr	r3, [r2, #4]
 8006c16:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006c1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c1e:	6053      	str	r3, [r2, #4]
 8006c20:	e7bf      	b.n	8006ba2 <HAL_RCC_OscConfig+0x1aa>
 8006c22:	4a0e      	ldr	r2, [pc, #56]	@ (8006c5c <HAL_RCC_OscConfig+0x264>)
 8006c24:	6853      	ldr	r3, [r2, #4]
 8006c26:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8006c2a:	6921      	ldr	r1, [r4, #16]
 8006c2c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006c30:	6053      	str	r3, [r2, #4]
 8006c32:	e7b6      	b.n	8006ba2 <HAL_RCC_OscConfig+0x1aa>
        __HAL_RCC_HSI_DISABLE();
 8006c34:	4a09      	ldr	r2, [pc, #36]	@ (8006c5c <HAL_RCC_OscConfig+0x264>)
 8006c36:	6813      	ldr	r3, [r2, #0]
 8006c38:	f023 0301 	bic.w	r3, r3, #1
 8006c3c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006c3e:	f7fc fa4f 	bl	80030e0 <HAL_GetTick>
 8006c42:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006c44:	4b05      	ldr	r3, [pc, #20]	@ (8006c5c <HAL_RCC_OscConfig+0x264>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f013 0f04 	tst.w	r3, #4
 8006c4c:	d0a9      	beq.n	8006ba2 <HAL_RCC_OscConfig+0x1aa>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c4e:	f7fc fa47 	bl	80030e0 <HAL_GetTick>
 8006c52:	1b40      	subs	r0, r0, r5
 8006c54:	2802      	cmp	r0, #2
 8006c56:	d9f5      	bls.n	8006c44 <HAL_RCC_OscConfig+0x24c>
            return HAL_TIMEOUT;
 8006c58:	2003      	movs	r0, #3
 8006c5a:	e1f1      	b.n	8007040 <HAL_RCC_OscConfig+0x648>
 8006c5c:	58024400 	.word	0x58024400
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006c60:	f002 0203 	and.w	r2, r2, #3
 8006c64:	2a01      	cmp	r2, #1
 8006c66:	d1aa      	bne.n	8006bbe <HAL_RCC_OscConfig+0x1c6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c68:	4ba1      	ldr	r3, [pc, #644]	@ (8006ef0 <HAL_RCC_OscConfig+0x4f8>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8006c70:	d003      	beq.n	8006c7a <HAL_RCC_OscConfig+0x282>
 8006c72:	69e3      	ldr	r3, [r4, #28]
 8006c74:	2b80      	cmp	r3, #128	@ 0x80
 8006c76:	f040 81e0 	bne.w	800703a <HAL_RCC_OscConfig+0x642>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c7a:	f7fc fa4b 	bl	8003114 <HAL_GetREVID>
 8006c7e:	f241 0303 	movw	r3, #4099	@ 0x1003
 8006c82:	4298      	cmp	r0, r3
 8006c84:	d812      	bhi.n	8006cac <HAL_RCC_OscConfig+0x2b4>
 8006c86:	6a22      	ldr	r2, [r4, #32]
 8006c88:	2a20      	cmp	r2, #32
 8006c8a:	d007      	beq.n	8006c9c <HAL_RCC_OscConfig+0x2a4>
 8006c8c:	4998      	ldr	r1, [pc, #608]	@ (8006ef0 <HAL_RCC_OscConfig+0x4f8>)
 8006c8e:	684b      	ldr	r3, [r1, #4]
 8006c90:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006c94:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8006c98:	604b      	str	r3, [r1, #4]
 8006c9a:	e00f      	b.n	8006cbc <HAL_RCC_OscConfig+0x2c4>
 8006c9c:	4a94      	ldr	r2, [pc, #592]	@ (8006ef0 <HAL_RCC_OscConfig+0x4f8>)
 8006c9e:	6853      	ldr	r3, [r2, #4]
 8006ca0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006ca4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006ca8:	6053      	str	r3, [r2, #4]
 8006caa:	e007      	b.n	8006cbc <HAL_RCC_OscConfig+0x2c4>
 8006cac:	4a90      	ldr	r2, [pc, #576]	@ (8006ef0 <HAL_RCC_OscConfig+0x4f8>)
 8006cae:	68d3      	ldr	r3, [r2, #12]
 8006cb0:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8006cb4:	6a21      	ldr	r1, [r4, #32]
 8006cb6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006cba:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cbc:	6823      	ldr	r3, [r4, #0]
 8006cbe:	f013 0f08 	tst.w	r3, #8
 8006cc2:	d060      	beq.n	8006d86 <HAL_RCC_OscConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006cc4:	6963      	ldr	r3, [r4, #20]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d049      	beq.n	8006d5e <HAL_RCC_OscConfig+0x366>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006cca:	4a89      	ldr	r2, [pc, #548]	@ (8006ef0 <HAL_RCC_OscConfig+0x4f8>)
 8006ccc:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8006cce:	f043 0301 	orr.w	r3, r3, #1
 8006cd2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cd4:	f7fc fa04 	bl	80030e0 <HAL_GetTick>
 8006cd8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006cda:	4b85      	ldr	r3, [pc, #532]	@ (8006ef0 <HAL_RCC_OscConfig+0x4f8>)
 8006cdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cde:	f013 0f02 	tst.w	r3, #2
 8006ce2:	d150      	bne.n	8006d86 <HAL_RCC_OscConfig+0x38e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ce4:	f7fc f9fc 	bl	80030e0 <HAL_GetTick>
 8006ce8:	1b40      	subs	r0, r0, r5
 8006cea:	2802      	cmp	r0, #2
 8006cec:	d9f5      	bls.n	8006cda <HAL_RCC_OscConfig+0x2e2>
        {
          return HAL_TIMEOUT;
 8006cee:	2003      	movs	r0, #3
 8006cf0:	e1a6      	b.n	8007040 <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006cf2:	f7fc fa0f 	bl	8003114 <HAL_GetREVID>
 8006cf6:	f241 0303 	movw	r3, #4099	@ 0x1003
 8006cfa:	4298      	cmp	r0, r3
 8006cfc:	d812      	bhi.n	8006d24 <HAL_RCC_OscConfig+0x32c>
 8006cfe:	6a22      	ldr	r2, [r4, #32]
 8006d00:	2a20      	cmp	r2, #32
 8006d02:	d007      	beq.n	8006d14 <HAL_RCC_OscConfig+0x31c>
 8006d04:	497a      	ldr	r1, [pc, #488]	@ (8006ef0 <HAL_RCC_OscConfig+0x4f8>)
 8006d06:	684b      	ldr	r3, [r1, #4]
 8006d08:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006d0c:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8006d10:	604b      	str	r3, [r1, #4]
 8006d12:	e7d3      	b.n	8006cbc <HAL_RCC_OscConfig+0x2c4>
 8006d14:	4a76      	ldr	r2, [pc, #472]	@ (8006ef0 <HAL_RCC_OscConfig+0x4f8>)
 8006d16:	6853      	ldr	r3, [r2, #4]
 8006d18:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006d1c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006d20:	6053      	str	r3, [r2, #4]
 8006d22:	e7cb      	b.n	8006cbc <HAL_RCC_OscConfig+0x2c4>
 8006d24:	4a72      	ldr	r2, [pc, #456]	@ (8006ef0 <HAL_RCC_OscConfig+0x4f8>)
 8006d26:	68d3      	ldr	r3, [r2, #12]
 8006d28:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8006d2c:	6a21      	ldr	r1, [r4, #32]
 8006d2e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006d32:	60d3      	str	r3, [r2, #12]
 8006d34:	e7c2      	b.n	8006cbc <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_CSI_DISABLE();
 8006d36:	4a6e      	ldr	r2, [pc, #440]	@ (8006ef0 <HAL_RCC_OscConfig+0x4f8>)
 8006d38:	6813      	ldr	r3, [r2, #0]
 8006d3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d3e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006d40:	f7fc f9ce 	bl	80030e0 <HAL_GetTick>
 8006d44:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006d46:	4b6a      	ldr	r3, [pc, #424]	@ (8006ef0 <HAL_RCC_OscConfig+0x4f8>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8006d4e:	d0b5      	beq.n	8006cbc <HAL_RCC_OscConfig+0x2c4>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006d50:	f7fc f9c6 	bl	80030e0 <HAL_GetTick>
 8006d54:	1b40      	subs	r0, r0, r5
 8006d56:	2802      	cmp	r0, #2
 8006d58:	d9f5      	bls.n	8006d46 <HAL_RCC_OscConfig+0x34e>
            return HAL_TIMEOUT;
 8006d5a:	2003      	movs	r0, #3
 8006d5c:	e170      	b.n	8007040 <HAL_RCC_OscConfig+0x648>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d5e:	4a64      	ldr	r2, [pc, #400]	@ (8006ef0 <HAL_RCC_OscConfig+0x4f8>)
 8006d60:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8006d62:	f023 0301 	bic.w	r3, r3, #1
 8006d66:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d68:	f7fc f9ba 	bl	80030e0 <HAL_GetTick>
 8006d6c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006d6e:	4b60      	ldr	r3, [pc, #384]	@ (8006ef0 <HAL_RCC_OscConfig+0x4f8>)
 8006d70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d72:	f013 0f02 	tst.w	r3, #2
 8006d76:	d006      	beq.n	8006d86 <HAL_RCC_OscConfig+0x38e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d78:	f7fc f9b2 	bl	80030e0 <HAL_GetTick>
 8006d7c:	1b40      	subs	r0, r0, r5
 8006d7e:	2802      	cmp	r0, #2
 8006d80:	d9f5      	bls.n	8006d6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006d82:	2003      	movs	r0, #3
 8006d84:	e15c      	b.n	8007040 <HAL_RCC_OscConfig+0x648>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006d86:	6823      	ldr	r3, [r4, #0]
 8006d88:	f013 0f20 	tst.w	r3, #32
 8006d8c:	d029      	beq.n	8006de2 <HAL_RCC_OscConfig+0x3ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006d8e:	69a3      	ldr	r3, [r4, #24]
 8006d90:	b19b      	cbz	r3, 8006dba <HAL_RCC_OscConfig+0x3c2>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006d92:	4a57      	ldr	r2, [pc, #348]	@ (8006ef0 <HAL_RCC_OscConfig+0x4f8>)
 8006d94:	6813      	ldr	r3, [r2, #0]
 8006d96:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006d9a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006d9c:	f7fc f9a0 	bl	80030e0 <HAL_GetTick>
 8006da0:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006da2:	4b53      	ldr	r3, [pc, #332]	@ (8006ef0 <HAL_RCC_OscConfig+0x4f8>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8006daa:	d11a      	bne.n	8006de2 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006dac:	f7fc f998 	bl	80030e0 <HAL_GetTick>
 8006db0:	1b40      	subs	r0, r0, r5
 8006db2:	2802      	cmp	r0, #2
 8006db4:	d9f5      	bls.n	8006da2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006db6:	2003      	movs	r0, #3
 8006db8:	e142      	b.n	8007040 <HAL_RCC_OscConfig+0x648>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006dba:	4a4d      	ldr	r2, [pc, #308]	@ (8006ef0 <HAL_RCC_OscConfig+0x4f8>)
 8006dbc:	6813      	ldr	r3, [r2, #0]
 8006dbe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006dc2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006dc4:	f7fc f98c 	bl	80030e0 <HAL_GetTick>
 8006dc8:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006dca:	4b49      	ldr	r3, [pc, #292]	@ (8006ef0 <HAL_RCC_OscConfig+0x4f8>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8006dd2:	d006      	beq.n	8006de2 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006dd4:	f7fc f984 	bl	80030e0 <HAL_GetTick>
 8006dd8:	1b40      	subs	r0, r0, r5
 8006dda:	2802      	cmp	r0, #2
 8006ddc:	d9f5      	bls.n	8006dca <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8006dde:	2003      	movs	r0, #3
 8006de0:	e12e      	b.n	8007040 <HAL_RCC_OscConfig+0x648>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006de2:	6823      	ldr	r3, [r4, #0]
 8006de4:	f013 0f04 	tst.w	r3, #4
 8006de8:	d121      	bne.n	8006e2e <HAL_RCC_OscConfig+0x436>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006dea:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f000 8126 	beq.w	800703e <HAL_RCC_OscConfig+0x646>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006df2:	4a3f      	ldr	r2, [pc, #252]	@ (8006ef0 <HAL_RCC_OscConfig+0x4f8>)
 8006df4:	6912      	ldr	r2, [r2, #16]
 8006df6:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8006dfa:	2a18      	cmp	r2, #24
 8006dfc:	f000 80ee 	beq.w	8006fdc <HAL_RCC_OscConfig+0x5e4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e00:	2b02      	cmp	r3, #2
 8006e02:	d079      	beq.n	8006ef8 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e04:	4a3a      	ldr	r2, [pc, #232]	@ (8006ef0 <HAL_RCC_OscConfig+0x4f8>)
 8006e06:	6813      	ldr	r3, [r2, #0]
 8006e08:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e0e:	f7fc f967 	bl	80030e0 <HAL_GetTick>
 8006e12:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e14:	4b36      	ldr	r3, [pc, #216]	@ (8006ef0 <HAL_RCC_OscConfig+0x4f8>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8006e1c:	f000 80dc 	beq.w	8006fd8 <HAL_RCC_OscConfig+0x5e0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e20:	f7fc f95e 	bl	80030e0 <HAL_GetTick>
 8006e24:	1b00      	subs	r0, r0, r4
 8006e26:	2802      	cmp	r0, #2
 8006e28:	d9f4      	bls.n	8006e14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006e2a:	2003      	movs	r0, #3
 8006e2c:	e108      	b.n	8007040 <HAL_RCC_OscConfig+0x648>
    PWR->CR1 |= PWR_CR1_DBP;
 8006e2e:	4a31      	ldr	r2, [pc, #196]	@ (8006ef4 <HAL_RCC_OscConfig+0x4fc>)
 8006e30:	6813      	ldr	r3, [r2, #0]
 8006e32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e36:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006e38:	f7fc f952 	bl	80030e0 <HAL_GetTick>
 8006e3c:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e3e:	4b2d      	ldr	r3, [pc, #180]	@ (8006ef4 <HAL_RCC_OscConfig+0x4fc>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8006e46:	d106      	bne.n	8006e56 <HAL_RCC_OscConfig+0x45e>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006e48:	f7fc f94a 	bl	80030e0 <HAL_GetTick>
 8006e4c:	1b40      	subs	r0, r0, r5
 8006e4e:	2864      	cmp	r0, #100	@ 0x64
 8006e50:	d9f5      	bls.n	8006e3e <HAL_RCC_OscConfig+0x446>
        return HAL_TIMEOUT;
 8006e52:	2003      	movs	r0, #3
 8006e54:	e0f4      	b.n	8007040 <HAL_RCC_OscConfig+0x648>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e56:	68a3      	ldr	r3, [r4, #8]
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d00a      	beq.n	8006e72 <HAL_RCC_OscConfig+0x47a>
 8006e5c:	bb0b      	cbnz	r3, 8006ea2 <HAL_RCC_OscConfig+0x4aa>
 8006e5e:	4b24      	ldr	r3, [pc, #144]	@ (8006ef0 <HAL_RCC_OscConfig+0x4f8>)
 8006e60:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006e62:	f022 0201 	bic.w	r2, r2, #1
 8006e66:	671a      	str	r2, [r3, #112]	@ 0x70
 8006e68:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006e6a:	f022 0204 	bic.w	r2, r2, #4
 8006e6e:	671a      	str	r2, [r3, #112]	@ 0x70
 8006e70:	e004      	b.n	8006e7c <HAL_RCC_OscConfig+0x484>
 8006e72:	4a1f      	ldr	r2, [pc, #124]	@ (8006ef0 <HAL_RCC_OscConfig+0x4f8>)
 8006e74:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8006e76:	f043 0301 	orr.w	r3, r3, #1
 8006e7a:	6713      	str	r3, [r2, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e7c:	68a3      	ldr	r3, [r4, #8]
 8006e7e:	b333      	cbz	r3, 8006ece <HAL_RCC_OscConfig+0x4d6>
      tickstart = HAL_GetTick();
 8006e80:	f7fc f92e 	bl	80030e0 <HAL_GetTick>
 8006e84:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e86:	4b1a      	ldr	r3, [pc, #104]	@ (8006ef0 <HAL_RCC_OscConfig+0x4f8>)
 8006e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e8a:	f013 0f02 	tst.w	r3, #2
 8006e8e:	d1ac      	bne.n	8006dea <HAL_RCC_OscConfig+0x3f2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e90:	f7fc f926 	bl	80030e0 <HAL_GetTick>
 8006e94:	1b40      	subs	r0, r0, r5
 8006e96:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006e9a:	4298      	cmp	r0, r3
 8006e9c:	d9f3      	bls.n	8006e86 <HAL_RCC_OscConfig+0x48e>
          return HAL_TIMEOUT;
 8006e9e:	2003      	movs	r0, #3
 8006ea0:	e0ce      	b.n	8007040 <HAL_RCC_OscConfig+0x648>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ea2:	2b05      	cmp	r3, #5
 8006ea4:	d009      	beq.n	8006eba <HAL_RCC_OscConfig+0x4c2>
 8006ea6:	4b12      	ldr	r3, [pc, #72]	@ (8006ef0 <HAL_RCC_OscConfig+0x4f8>)
 8006ea8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006eaa:	f022 0201 	bic.w	r2, r2, #1
 8006eae:	671a      	str	r2, [r3, #112]	@ 0x70
 8006eb0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006eb2:	f022 0204 	bic.w	r2, r2, #4
 8006eb6:	671a      	str	r2, [r3, #112]	@ 0x70
 8006eb8:	e7e0      	b.n	8006e7c <HAL_RCC_OscConfig+0x484>
 8006eba:	4b0d      	ldr	r3, [pc, #52]	@ (8006ef0 <HAL_RCC_OscConfig+0x4f8>)
 8006ebc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006ebe:	f042 0204 	orr.w	r2, r2, #4
 8006ec2:	671a      	str	r2, [r3, #112]	@ 0x70
 8006ec4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006ec6:	f042 0201 	orr.w	r2, r2, #1
 8006eca:	671a      	str	r2, [r3, #112]	@ 0x70
 8006ecc:	e7d6      	b.n	8006e7c <HAL_RCC_OscConfig+0x484>
      tickstart = HAL_GetTick();
 8006ece:	f7fc f907 	bl	80030e0 <HAL_GetTick>
 8006ed2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006ed4:	4b06      	ldr	r3, [pc, #24]	@ (8006ef0 <HAL_RCC_OscConfig+0x4f8>)
 8006ed6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ed8:	f013 0f02 	tst.w	r3, #2
 8006edc:	d085      	beq.n	8006dea <HAL_RCC_OscConfig+0x3f2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ede:	f7fc f8ff 	bl	80030e0 <HAL_GetTick>
 8006ee2:	1b40      	subs	r0, r0, r5
 8006ee4:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006ee8:	4298      	cmp	r0, r3
 8006eea:	d9f3      	bls.n	8006ed4 <HAL_RCC_OscConfig+0x4dc>
          return HAL_TIMEOUT;
 8006eec:	2003      	movs	r0, #3
 8006eee:	e0a7      	b.n	8007040 <HAL_RCC_OscConfig+0x648>
 8006ef0:	58024400 	.word	0x58024400
 8006ef4:	58024800 	.word	0x58024800
        __HAL_RCC_PLL_DISABLE();
 8006ef8:	4a59      	ldr	r2, [pc, #356]	@ (8007060 <HAL_RCC_OscConfig+0x668>)
 8006efa:	6813      	ldr	r3, [r2, #0]
 8006efc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f00:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006f02:	f7fc f8ed 	bl	80030e0 <HAL_GetTick>
 8006f06:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f08:	4b55      	ldr	r3, [pc, #340]	@ (8007060 <HAL_RCC_OscConfig+0x668>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8006f10:	d006      	beq.n	8006f20 <HAL_RCC_OscConfig+0x528>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f12:	f7fc f8e5 	bl	80030e0 <HAL_GetTick>
 8006f16:	1b40      	subs	r0, r0, r5
 8006f18:	2802      	cmp	r0, #2
 8006f1a:	d9f5      	bls.n	8006f08 <HAL_RCC_OscConfig+0x510>
            return HAL_TIMEOUT;
 8006f1c:	2003      	movs	r0, #3
 8006f1e:	e08f      	b.n	8007040 <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f20:	4b4f      	ldr	r3, [pc, #316]	@ (8007060 <HAL_RCC_OscConfig+0x668>)
 8006f22:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8006f24:	4a4f      	ldr	r2, [pc, #316]	@ (8007064 <HAL_RCC_OscConfig+0x66c>)
 8006f26:	400a      	ands	r2, r1
 8006f28:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8006f2a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8006f2c:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8006f30:	430a      	orrs	r2, r1
 8006f32:	629a      	str	r2, [r3, #40]	@ 0x28
 8006f34:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8006f36:	3a01      	subs	r2, #1
 8006f38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f3e:	3901      	subs	r1, #1
 8006f40:	0249      	lsls	r1, r1, #9
 8006f42:	b289      	uxth	r1, r1
 8006f44:	430a      	orrs	r2, r1
 8006f46:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006f48:	3901      	subs	r1, #1
 8006f4a:	0409      	lsls	r1, r1, #16
 8006f4c:	f401 01fe 	and.w	r1, r1, #8323072	@ 0x7f0000
 8006f50:	430a      	orrs	r2, r1
 8006f52:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8006f54:	3901      	subs	r1, #1
 8006f56:	0609      	lsls	r1, r1, #24
 8006f58:	f001 41fe 	and.w	r1, r1, #2130706432	@ 0x7f000000
 8006f5c:	430a      	orrs	r2, r1
 8006f5e:	631a      	str	r2, [r3, #48]	@ 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8006f60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f62:	f022 0201 	bic.w	r2, r2, #1
 8006f66:	62da      	str	r2, [r3, #44]	@ 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006f68:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006f6a:	4a3f      	ldr	r2, [pc, #252]	@ (8007068 <HAL_RCC_OscConfig+0x670>)
 8006f6c:	400a      	ands	r2, r1
 8006f6e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006f70:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8006f74:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006f76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f78:	f022 020c 	bic.w	r2, r2, #12
 8006f7c:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8006f7e:	430a      	orrs	r2, r1
 8006f80:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006f82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f84:	f022 0202 	bic.w	r2, r2, #2
 8006f88:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006f8a:	430a      	orrs	r2, r1
 8006f8c:	62da      	str	r2, [r3, #44]	@ 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006f8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f90:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006f94:	62da      	str	r2, [r3, #44]	@ 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f98:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006f9c:	62da      	str	r2, [r3, #44]	@ 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006f9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fa0:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006fa4:	62da      	str	r2, [r3, #44]	@ 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8006fa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fa8:	f042 0201 	orr.w	r2, r2, #1
 8006fac:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8006fb4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006fb6:	f7fc f893 	bl	80030e0 <HAL_GetTick>
 8006fba:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006fbc:	4b28      	ldr	r3, [pc, #160]	@ (8007060 <HAL_RCC_OscConfig+0x668>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8006fc4:	d106      	bne.n	8006fd4 <HAL_RCC_OscConfig+0x5dc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fc6:	f7fc f88b 	bl	80030e0 <HAL_GetTick>
 8006fca:	1b00      	subs	r0, r0, r4
 8006fcc:	2802      	cmp	r0, #2
 8006fce:	d9f5      	bls.n	8006fbc <HAL_RCC_OscConfig+0x5c4>
            return HAL_TIMEOUT;
 8006fd0:	2003      	movs	r0, #3
 8006fd2:	e035      	b.n	8007040 <HAL_RCC_OscConfig+0x648>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8006fd4:	2000      	movs	r0, #0
 8006fd6:	e033      	b.n	8007040 <HAL_RCC_OscConfig+0x648>
 8006fd8:	2000      	movs	r0, #0
 8006fda:	e031      	b.n	8007040 <HAL_RCC_OscConfig+0x648>
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006fdc:	4a20      	ldr	r2, [pc, #128]	@ (8007060 <HAL_RCC_OscConfig+0x668>)
 8006fde:	6a91      	ldr	r1, [r2, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006fe0:	6b10      	ldr	r0, [r2, #48]	@ 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d02d      	beq.n	8007042 <HAL_RCC_OscConfig+0x64a>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fe6:	f001 0303 	and.w	r3, r1, #3
 8006fea:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d12a      	bne.n	8007046 <HAL_RCC_OscConfig+0x64e>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ff0:	f3c1 1105 	ubfx	r1, r1, #4, #6
 8006ff4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ff6:	4299      	cmp	r1, r3
 8006ff8:	d127      	bne.n	800704a <HAL_RCC_OscConfig+0x652>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006ffa:	f3c0 0208 	ubfx	r2, r0, #0, #9
 8006ffe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007000:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007002:	429a      	cmp	r2, r3
 8007004:	d123      	bne.n	800704e <HAL_RCC_OscConfig+0x656>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007006:	f3c0 2246 	ubfx	r2, r0, #9, #7
 800700a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800700c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800700e:	429a      	cmp	r2, r3
 8007010:	d11f      	bne.n	8007052 <HAL_RCC_OscConfig+0x65a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007012:	f3c0 4206 	ubfx	r2, r0, #16, #7
 8007016:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007018:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800701a:	429a      	cmp	r2, r3
 800701c:	d11b      	bne.n	8007056 <HAL_RCC_OscConfig+0x65e>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800701e:	f3c0 6006 	ubfx	r0, r0, #24, #7
 8007022:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007024:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007026:	4298      	cmp	r0, r3
 8007028:	d117      	bne.n	800705a <HAL_RCC_OscConfig+0x662>
  return HAL_OK;
 800702a:	2000      	movs	r0, #0
 800702c:	e008      	b.n	8007040 <HAL_RCC_OscConfig+0x648>
    return HAL_ERROR;
 800702e:	2001      	movs	r0, #1
}
 8007030:	4770      	bx	lr
        return HAL_ERROR;
 8007032:	2001      	movs	r0, #1
 8007034:	e004      	b.n	8007040 <HAL_RCC_OscConfig+0x648>
        return HAL_ERROR;
 8007036:	2001      	movs	r0, #1
 8007038:	e002      	b.n	8007040 <HAL_RCC_OscConfig+0x648>
        return HAL_ERROR;
 800703a:	2001      	movs	r0, #1
 800703c:	e000      	b.n	8007040 <HAL_RCC_OscConfig+0x648>
  return HAL_OK;
 800703e:	2000      	movs	r0, #0
}
 8007040:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 8007042:	2001      	movs	r0, #1
 8007044:	e7fc      	b.n	8007040 <HAL_RCC_OscConfig+0x648>
 8007046:	2001      	movs	r0, #1
 8007048:	e7fa      	b.n	8007040 <HAL_RCC_OscConfig+0x648>
 800704a:	2001      	movs	r0, #1
 800704c:	e7f8      	b.n	8007040 <HAL_RCC_OscConfig+0x648>
 800704e:	2001      	movs	r0, #1
 8007050:	e7f6      	b.n	8007040 <HAL_RCC_OscConfig+0x648>
 8007052:	2001      	movs	r0, #1
 8007054:	e7f4      	b.n	8007040 <HAL_RCC_OscConfig+0x648>
 8007056:	2001      	movs	r0, #1
 8007058:	e7f2      	b.n	8007040 <HAL_RCC_OscConfig+0x648>
 800705a:	2001      	movs	r0, #1
 800705c:	e7f0      	b.n	8007040 <HAL_RCC_OscConfig+0x648>
 800705e:	bf00      	nop
 8007060:	58024400 	.word	0x58024400
 8007064:	fffffc0c 	.word	0xfffffc0c
 8007068:	ffff0007 	.word	0xffff0007

0800706c <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800706c:	4b74      	ldr	r3, [pc, #464]	@ (8007240 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800706e:	691b      	ldr	r3, [r3, #16]
 8007070:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007074:	2b10      	cmp	r3, #16
 8007076:	f000 80de 	beq.w	8007236 <HAL_RCC_GetSysClockFreq+0x1ca>
 800707a:	2b18      	cmp	r3, #24
 800707c:	d00f      	beq.n	800709e <HAL_RCC_GetSysClockFreq+0x32>
 800707e:	b10b      	cbz	r3, 8007084 <HAL_RCC_GetSysClockFreq+0x18>
 8007080:	4870      	ldr	r0, [pc, #448]	@ (8007244 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8007082:	4770      	bx	lr
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007084:	4b6e      	ldr	r3, [pc, #440]	@ (8007240 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f013 0f20 	tst.w	r3, #32
 800708c:	f000 80d5 	beq.w	800723a <HAL_RCC_GetSysClockFreq+0x1ce>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007090:	4b6b      	ldr	r3, [pc, #428]	@ (8007240 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007098:	486b      	ldr	r0, [pc, #428]	@ (8007248 <HAL_RCC_GetSysClockFreq+0x1dc>)
 800709a:	40d8      	lsrs	r0, r3
 800709c:	4770      	bx	lr
{
 800709e:	b410      	push	{r4}
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070a0:	4b67      	ldr	r3, [pc, #412]	@ (8007240 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80070a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80070a4:	f002 0203 	and.w	r2, r2, #3
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80070a8:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 80070aa:	f3c4 1005 	ubfx	r0, r4, #4, #6
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80070ae:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80070b0:	f001 0101 	and.w	r1, r1, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80070b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070b6:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 80070ba:	fb01 f303 	mul.w	r3, r1, r3
 80070be:	ee07 3a90 	vmov	s15, r3
 80070c2:	eef8 7a67 	vcvt.f32.u32	s15, s15

    if (pllm != 0U)
 80070c6:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
 80070ca:	f000 8094 	beq.w	80071f6 <HAL_RCC_GetSysClockFreq+0x18a>
    {
      switch (pllsource)
 80070ce:	2a01      	cmp	r2, #1
 80070d0:	d066      	beq.n	80071a0 <HAL_RCC_GetSysClockFreq+0x134>
 80070d2:	2a02      	cmp	r2, #2
 80070d4:	f000 8092 	beq.w	80071fc <HAL_RCC_GetSysClockFreq+0x190>
 80070d8:	b1e2      	cbz	r2, 8007114 <HAL_RCC_GetSysClockFreq+0xa8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80070da:	ee07 0a10 	vmov	s14, r0
 80070de:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80070e2:	ed9f 6a5a 	vldr	s12, [pc, #360]	@ 800724c <HAL_RCC_GetSysClockFreq+0x1e0>
 80070e6:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80070ea:	4b55      	ldr	r3, [pc, #340]	@ (8007240 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80070ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070f2:	ee06 3a90 	vmov	s13, r3
 80070f6:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80070fa:	ed9f 6a55 	vldr	s12, [pc, #340]	@ 8007250 <HAL_RCC_GetSysClockFreq+0x1e4>
 80070fe:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007106:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800710a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800710e:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8007112:	e061      	b.n	80071d8 <HAL_RCC_GetSysClockFreq+0x16c>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007114:	4b4a      	ldr	r3, [pc, #296]	@ (8007240 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f013 0f20 	tst.w	r3, #32
 800711c:	d023      	beq.n	8007166 <HAL_RCC_GetSysClockFreq+0xfa>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800711e:	4948      	ldr	r1, [pc, #288]	@ (8007240 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8007120:	680a      	ldr	r2, [r1, #0]
 8007122:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8007126:	4b48      	ldr	r3, [pc, #288]	@ (8007248 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8007128:	40d3      	lsrs	r3, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800712a:	ee07 3a10 	vmov	s14, r3
 800712e:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007132:	ee07 0a10 	vmov	s14, r0
 8007136:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 800713a:	ee86 7a86 	vdiv.f32	s14, s13, s12
 800713e:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8007140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007144:	ee06 3a90 	vmov	s13, r3
 8007148:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800714c:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8007250 <HAL_RCC_GetSysClockFreq+0x1e4>
 8007150:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007154:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007158:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800715c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007160:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007164:	e038      	b.n	80071d8 <HAL_RCC_GetSysClockFreq+0x16c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007166:	ee07 0a10 	vmov	s14, r0
 800716a:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800716e:	ed9f 6a39 	vldr	s12, [pc, #228]	@ 8007254 <HAL_RCC_GetSysClockFreq+0x1e8>
 8007172:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007176:	4b32      	ldr	r3, [pc, #200]	@ (8007240 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8007178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800717a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800717e:	ee06 3a90 	vmov	s13, r3
 8007182:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007186:	ed9f 6a32 	vldr	s12, [pc, #200]	@ 8007250 <HAL_RCC_GetSysClockFreq+0x1e4>
 800718a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800718e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007192:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800719a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800719e:	e01b      	b.n	80071d8 <HAL_RCC_GetSysClockFreq+0x16c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80071a0:	ee07 0a10 	vmov	s14, r0
 80071a4:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80071a8:	ed9f 6a28 	vldr	s12, [pc, #160]	@ 800724c <HAL_RCC_GetSysClockFreq+0x1e0>
 80071ac:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80071b0:	4b23      	ldr	r3, [pc, #140]	@ (8007240 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80071b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071b8:	ee06 3a90 	vmov	s13, r3
 80071bc:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80071c0:	ed9f 6a23 	vldr	s12, [pc, #140]	@ 8007250 <HAL_RCC_GetSysClockFreq+0x1e4>
 80071c4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80071c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071d4:	ee27 7a27 	vmul.f32	s14, s14, s15
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80071d8:	4b19      	ldr	r3, [pc, #100]	@ (8007240 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80071da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071dc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80071e0:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80071e2:	ee07 3a90 	vmov	s15, r3
 80071e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ea:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80071ee:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 80071f2:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 80071f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071fa:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80071fc:	ee07 0a10 	vmov	s14, r0
 8007200:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007204:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8007258 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007208:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800720c:	4b0c      	ldr	r3, [pc, #48]	@ (8007240 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800720e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007210:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007214:	ee06 3a90 	vmov	s13, r3
 8007218:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800721c:	ed9f 6a0c 	vldr	s12, [pc, #48]	@ 8007250 <HAL_RCC_GetSysClockFreq+0x1e4>
 8007220:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007224:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007228:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800722c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007230:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8007234:	e7d0      	b.n	80071d8 <HAL_RCC_GetSysClockFreq+0x16c>
    sysclockfreq = HSE_VALUE;
 8007236:	4809      	ldr	r0, [pc, #36]	@ (800725c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007238:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800723a:	4803      	ldr	r0, [pc, #12]	@ (8007248 <HAL_RCC_GetSysClockFreq+0x1dc>)
}
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	58024400 	.word	0x58024400
 8007244:	003d0900 	.word	0x003d0900
 8007248:	03d09000 	.word	0x03d09000
 800724c:	4a742400 	.word	0x4a742400
 8007250:	39000000 	.word	0x39000000
 8007254:	4c742400 	.word	0x4c742400
 8007258:	4bb71b00 	.word	0x4bb71b00
 800725c:	016e3600 	.word	0x016e3600

08007260 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8007260:	2800      	cmp	r0, #0
 8007262:	f000 8132 	beq.w	80074ca <HAL_RCC_ClockConfig+0x26a>
{
 8007266:	b570      	push	{r4, r5, r6, lr}
 8007268:	460d      	mov	r5, r1
 800726a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800726c:	4b9b      	ldr	r3, [pc, #620]	@ (80074dc <HAL_RCC_ClockConfig+0x27c>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f003 030f 	and.w	r3, r3, #15
 8007274:	428b      	cmp	r3, r1
 8007276:	d20b      	bcs.n	8007290 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007278:	4a98      	ldr	r2, [pc, #608]	@ (80074dc <HAL_RCC_ClockConfig+0x27c>)
 800727a:	6813      	ldr	r3, [r2, #0]
 800727c:	f023 030f 	bic.w	r3, r3, #15
 8007280:	430b      	orrs	r3, r1
 8007282:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007284:	6813      	ldr	r3, [r2, #0]
 8007286:	f003 030f 	and.w	r3, r3, #15
 800728a:	428b      	cmp	r3, r1
 800728c:	f040 811f 	bne.w	80074ce <HAL_RCC_ClockConfig+0x26e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007290:	6823      	ldr	r3, [r4, #0]
 8007292:	f013 0f04 	tst.w	r3, #4
 8007296:	d00c      	beq.n	80072b2 <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007298:	6922      	ldr	r2, [r4, #16]
 800729a:	4b91      	ldr	r3, [pc, #580]	@ (80074e0 <HAL_RCC_ClockConfig+0x280>)
 800729c:	699b      	ldr	r3, [r3, #24]
 800729e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d905      	bls.n	80072b2 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80072a6:	498e      	ldr	r1, [pc, #568]	@ (80074e0 <HAL_RCC_ClockConfig+0x280>)
 80072a8:	698b      	ldr	r3, [r1, #24]
 80072aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072ae:	431a      	orrs	r2, r3
 80072b0:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072b2:	6823      	ldr	r3, [r4, #0]
 80072b4:	f013 0f08 	tst.w	r3, #8
 80072b8:	d00c      	beq.n	80072d4 <HAL_RCC_ClockConfig+0x74>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80072ba:	6962      	ldr	r2, [r4, #20]
 80072bc:	4b88      	ldr	r3, [pc, #544]	@ (80074e0 <HAL_RCC_ClockConfig+0x280>)
 80072be:	69db      	ldr	r3, [r3, #28]
 80072c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d905      	bls.n	80072d4 <HAL_RCC_ClockConfig+0x74>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80072c8:	4985      	ldr	r1, [pc, #532]	@ (80074e0 <HAL_RCC_ClockConfig+0x280>)
 80072ca:	69cb      	ldr	r3, [r1, #28]
 80072cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072d0:	431a      	orrs	r2, r3
 80072d2:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072d4:	6823      	ldr	r3, [r4, #0]
 80072d6:	f013 0f10 	tst.w	r3, #16
 80072da:	d00c      	beq.n	80072f6 <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80072dc:	69a2      	ldr	r2, [r4, #24]
 80072de:	4b80      	ldr	r3, [pc, #512]	@ (80074e0 <HAL_RCC_ClockConfig+0x280>)
 80072e0:	69db      	ldr	r3, [r3, #28]
 80072e2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d905      	bls.n	80072f6 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80072ea:	497d      	ldr	r1, [pc, #500]	@ (80074e0 <HAL_RCC_ClockConfig+0x280>)
 80072ec:	69cb      	ldr	r3, [r1, #28]
 80072ee:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80072f2:	431a      	orrs	r2, r3
 80072f4:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80072f6:	6823      	ldr	r3, [r4, #0]
 80072f8:	f013 0f20 	tst.w	r3, #32
 80072fc:	d00c      	beq.n	8007318 <HAL_RCC_ClockConfig+0xb8>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80072fe:	69e2      	ldr	r2, [r4, #28]
 8007300:	4b77      	ldr	r3, [pc, #476]	@ (80074e0 <HAL_RCC_ClockConfig+0x280>)
 8007302:	6a1b      	ldr	r3, [r3, #32]
 8007304:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007308:	429a      	cmp	r2, r3
 800730a:	d905      	bls.n	8007318 <HAL_RCC_ClockConfig+0xb8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800730c:	4974      	ldr	r1, [pc, #464]	@ (80074e0 <HAL_RCC_ClockConfig+0x280>)
 800730e:	6a0b      	ldr	r3, [r1, #32]
 8007310:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007314:	431a      	orrs	r2, r3
 8007316:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007318:	6823      	ldr	r3, [r4, #0]
 800731a:	f013 0f02 	tst.w	r3, #2
 800731e:	d00c      	beq.n	800733a <HAL_RCC_ClockConfig+0xda>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007320:	68e2      	ldr	r2, [r4, #12]
 8007322:	4b6f      	ldr	r3, [pc, #444]	@ (80074e0 <HAL_RCC_ClockConfig+0x280>)
 8007324:	699b      	ldr	r3, [r3, #24]
 8007326:	f003 030f 	and.w	r3, r3, #15
 800732a:	429a      	cmp	r2, r3
 800732c:	d905      	bls.n	800733a <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800732e:	496c      	ldr	r1, [pc, #432]	@ (80074e0 <HAL_RCC_ClockConfig+0x280>)
 8007330:	698b      	ldr	r3, [r1, #24]
 8007332:	f023 030f 	bic.w	r3, r3, #15
 8007336:	431a      	orrs	r2, r3
 8007338:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800733a:	6823      	ldr	r3, [r4, #0]
 800733c:	f013 0f01 	tst.w	r3, #1
 8007340:	d041      	beq.n	80073c6 <HAL_RCC_ClockConfig+0x166>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007342:	4a67      	ldr	r2, [pc, #412]	@ (80074e0 <HAL_RCC_ClockConfig+0x280>)
 8007344:	6993      	ldr	r3, [r2, #24]
 8007346:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800734a:	68a1      	ldr	r1, [r4, #8]
 800734c:	430b      	orrs	r3, r1
 800734e:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007350:	6863      	ldr	r3, [r4, #4]
 8007352:	2b02      	cmp	r3, #2
 8007354:	d00a      	beq.n	800736c <HAL_RCC_ClockConfig+0x10c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007356:	2b03      	cmp	r3, #3
 8007358:	d027      	beq.n	80073aa <HAL_RCC_ClockConfig+0x14a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800735a:	2b01      	cmp	r3, #1
 800735c:	d02c      	beq.n	80073b8 <HAL_RCC_ClockConfig+0x158>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800735e:	4a60      	ldr	r2, [pc, #384]	@ (80074e0 <HAL_RCC_ClockConfig+0x280>)
 8007360:	6812      	ldr	r2, [r2, #0]
 8007362:	f012 0f04 	tst.w	r2, #4
 8007366:	d106      	bne.n	8007376 <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 8007368:	2001      	movs	r0, #1
 800736a:	e0ad      	b.n	80074c8 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800736c:	6812      	ldr	r2, [r2, #0]
 800736e:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8007372:	f000 80ae 	beq.w	80074d2 <HAL_RCC_ClockConfig+0x272>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007376:	495a      	ldr	r1, [pc, #360]	@ (80074e0 <HAL_RCC_ClockConfig+0x280>)
 8007378:	690a      	ldr	r2, [r1, #16]
 800737a:	f022 0207 	bic.w	r2, r2, #7
 800737e:	4313      	orrs	r3, r2
 8007380:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 8007382:	f7fb fead 	bl	80030e0 <HAL_GetTick>
 8007386:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007388:	4b55      	ldr	r3, [pc, #340]	@ (80074e0 <HAL_RCC_ClockConfig+0x280>)
 800738a:	691b      	ldr	r3, [r3, #16]
 800738c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007390:	6862      	ldr	r2, [r4, #4]
 8007392:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8007396:	d016      	beq.n	80073c6 <HAL_RCC_ClockConfig+0x166>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007398:	f7fb fea2 	bl	80030e0 <HAL_GetTick>
 800739c:	1b80      	subs	r0, r0, r6
 800739e:	f241 3388 	movw	r3, #5000	@ 0x1388
 80073a2:	4298      	cmp	r0, r3
 80073a4:	d9f0      	bls.n	8007388 <HAL_RCC_ClockConfig+0x128>
            return HAL_TIMEOUT;
 80073a6:	2003      	movs	r0, #3
 80073a8:	e08e      	b.n	80074c8 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80073aa:	4a4d      	ldr	r2, [pc, #308]	@ (80074e0 <HAL_RCC_ClockConfig+0x280>)
 80073ac:	6812      	ldr	r2, [r2, #0]
 80073ae:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80073b2:	d1e0      	bne.n	8007376 <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 80073b4:	2001      	movs	r0, #1
 80073b6:	e087      	b.n	80074c8 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80073b8:	4a49      	ldr	r2, [pc, #292]	@ (80074e0 <HAL_RCC_ClockConfig+0x280>)
 80073ba:	6812      	ldr	r2, [r2, #0]
 80073bc:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80073c0:	d1d9      	bne.n	8007376 <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 80073c2:	2001      	movs	r0, #1
 80073c4:	e080      	b.n	80074c8 <HAL_RCC_ClockConfig+0x268>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073c6:	6823      	ldr	r3, [r4, #0]
 80073c8:	f013 0f02 	tst.w	r3, #2
 80073cc:	d00c      	beq.n	80073e8 <HAL_RCC_ClockConfig+0x188>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80073ce:	68e2      	ldr	r2, [r4, #12]
 80073d0:	4b43      	ldr	r3, [pc, #268]	@ (80074e0 <HAL_RCC_ClockConfig+0x280>)
 80073d2:	699b      	ldr	r3, [r3, #24]
 80073d4:	f003 030f 	and.w	r3, r3, #15
 80073d8:	429a      	cmp	r2, r3
 80073da:	d205      	bcs.n	80073e8 <HAL_RCC_ClockConfig+0x188>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073dc:	4940      	ldr	r1, [pc, #256]	@ (80074e0 <HAL_RCC_ClockConfig+0x280>)
 80073de:	698b      	ldr	r3, [r1, #24]
 80073e0:	f023 030f 	bic.w	r3, r3, #15
 80073e4:	431a      	orrs	r2, r3
 80073e6:	618a      	str	r2, [r1, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80073e8:	4b3c      	ldr	r3, [pc, #240]	@ (80074dc <HAL_RCC_ClockConfig+0x27c>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 030f 	and.w	r3, r3, #15
 80073f0:	42ab      	cmp	r3, r5
 80073f2:	d90a      	bls.n	800740a <HAL_RCC_ClockConfig+0x1aa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073f4:	4a39      	ldr	r2, [pc, #228]	@ (80074dc <HAL_RCC_ClockConfig+0x27c>)
 80073f6:	6813      	ldr	r3, [r2, #0]
 80073f8:	f023 030f 	bic.w	r3, r3, #15
 80073fc:	432b      	orrs	r3, r5
 80073fe:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007400:	6813      	ldr	r3, [r2, #0]
 8007402:	f003 030f 	and.w	r3, r3, #15
 8007406:	42ab      	cmp	r3, r5
 8007408:	d165      	bne.n	80074d6 <HAL_RCC_ClockConfig+0x276>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800740a:	6823      	ldr	r3, [r4, #0]
 800740c:	f013 0f04 	tst.w	r3, #4
 8007410:	d00c      	beq.n	800742c <HAL_RCC_ClockConfig+0x1cc>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007412:	6922      	ldr	r2, [r4, #16]
 8007414:	4b32      	ldr	r3, [pc, #200]	@ (80074e0 <HAL_RCC_ClockConfig+0x280>)
 8007416:	699b      	ldr	r3, [r3, #24]
 8007418:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800741c:	429a      	cmp	r2, r3
 800741e:	d205      	bcs.n	800742c <HAL_RCC_ClockConfig+0x1cc>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007420:	492f      	ldr	r1, [pc, #188]	@ (80074e0 <HAL_RCC_ClockConfig+0x280>)
 8007422:	698b      	ldr	r3, [r1, #24]
 8007424:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007428:	431a      	orrs	r2, r3
 800742a:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800742c:	6823      	ldr	r3, [r4, #0]
 800742e:	f013 0f08 	tst.w	r3, #8
 8007432:	d00c      	beq.n	800744e <HAL_RCC_ClockConfig+0x1ee>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007434:	6962      	ldr	r2, [r4, #20]
 8007436:	4b2a      	ldr	r3, [pc, #168]	@ (80074e0 <HAL_RCC_ClockConfig+0x280>)
 8007438:	69db      	ldr	r3, [r3, #28]
 800743a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800743e:	429a      	cmp	r2, r3
 8007440:	d205      	bcs.n	800744e <HAL_RCC_ClockConfig+0x1ee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007442:	4927      	ldr	r1, [pc, #156]	@ (80074e0 <HAL_RCC_ClockConfig+0x280>)
 8007444:	69cb      	ldr	r3, [r1, #28]
 8007446:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800744a:	431a      	orrs	r2, r3
 800744c:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800744e:	6823      	ldr	r3, [r4, #0]
 8007450:	f013 0f10 	tst.w	r3, #16
 8007454:	d00c      	beq.n	8007470 <HAL_RCC_ClockConfig+0x210>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007456:	69a2      	ldr	r2, [r4, #24]
 8007458:	4b21      	ldr	r3, [pc, #132]	@ (80074e0 <HAL_RCC_ClockConfig+0x280>)
 800745a:	69db      	ldr	r3, [r3, #28]
 800745c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007460:	429a      	cmp	r2, r3
 8007462:	d205      	bcs.n	8007470 <HAL_RCC_ClockConfig+0x210>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007464:	491e      	ldr	r1, [pc, #120]	@ (80074e0 <HAL_RCC_ClockConfig+0x280>)
 8007466:	69cb      	ldr	r3, [r1, #28]
 8007468:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800746c:	431a      	orrs	r2, r3
 800746e:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007470:	6823      	ldr	r3, [r4, #0]
 8007472:	f013 0f20 	tst.w	r3, #32
 8007476:	d00c      	beq.n	8007492 <HAL_RCC_ClockConfig+0x232>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007478:	69e2      	ldr	r2, [r4, #28]
 800747a:	4b19      	ldr	r3, [pc, #100]	@ (80074e0 <HAL_RCC_ClockConfig+0x280>)
 800747c:	6a1b      	ldr	r3, [r3, #32]
 800747e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007482:	429a      	cmp	r2, r3
 8007484:	d205      	bcs.n	8007492 <HAL_RCC_ClockConfig+0x232>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007486:	4916      	ldr	r1, [pc, #88]	@ (80074e0 <HAL_RCC_ClockConfig+0x280>)
 8007488:	6a0b      	ldr	r3, [r1, #32]
 800748a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800748e:	431a      	orrs	r2, r3
 8007490:	620a      	str	r2, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007492:	f7ff fdeb 	bl	800706c <HAL_RCC_GetSysClockFreq>
 8007496:	4912      	ldr	r1, [pc, #72]	@ (80074e0 <HAL_RCC_ClockConfig+0x280>)
 8007498:	698b      	ldr	r3, [r1, #24]
 800749a:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800749e:	4a11      	ldr	r2, [pc, #68]	@ (80074e4 <HAL_RCC_ClockConfig+0x284>)
 80074a0:	5cd3      	ldrb	r3, [r2, r3]
 80074a2:	f003 031f 	and.w	r3, r3, #31
 80074a6:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80074a8:	698b      	ldr	r3, [r1, #24]
 80074aa:	f003 030f 	and.w	r3, r3, #15
 80074ae:	5cd3      	ldrb	r3, [r2, r3]
 80074b0:	f003 031f 	and.w	r3, r3, #31
 80074b4:	fa20 f303 	lsr.w	r3, r0, r3
 80074b8:	4a0b      	ldr	r2, [pc, #44]	@ (80074e8 <HAL_RCC_ClockConfig+0x288>)
 80074ba:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 80074bc:	4b0b      	ldr	r3, [pc, #44]	@ (80074ec <HAL_RCC_ClockConfig+0x28c>)
 80074be:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 80074c0:	4b0b      	ldr	r3, [pc, #44]	@ (80074f0 <HAL_RCC_ClockConfig+0x290>)
 80074c2:	6818      	ldr	r0, [r3, #0]
 80074c4:	f7fb fbd2 	bl	8002c6c <HAL_InitTick>
}
 80074c8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80074ca:	2001      	movs	r0, #1
}
 80074cc:	4770      	bx	lr
      return HAL_ERROR;
 80074ce:	2001      	movs	r0, #1
 80074d0:	e7fa      	b.n	80074c8 <HAL_RCC_ClockConfig+0x268>
          return HAL_ERROR;
 80074d2:	2001      	movs	r0, #1
 80074d4:	e7f8      	b.n	80074c8 <HAL_RCC_ClockConfig+0x268>
      return HAL_ERROR;
 80074d6:	2001      	movs	r0, #1
 80074d8:	e7f6      	b.n	80074c8 <HAL_RCC_ClockConfig+0x268>
 80074da:	bf00      	nop
 80074dc:	52002000 	.word	0x52002000
 80074e0:	58024400 	.word	0x58024400
 80074e4:	08016d10 	.word	0x08016d10
 80074e8:	24000000 	.word	0x24000000
 80074ec:	24000004 	.word	0x24000004
 80074f0:	2400000c 	.word	0x2400000c

080074f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80074f4:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80074f6:	f7ff fdb9 	bl	800706c <HAL_RCC_GetSysClockFreq>
 80074fa:	4a0b      	ldr	r2, [pc, #44]	@ (8007528 <HAL_RCC_GetHCLKFreq+0x34>)
 80074fc:	6993      	ldr	r3, [r2, #24]
 80074fe:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8007502:	490a      	ldr	r1, [pc, #40]	@ (800752c <HAL_RCC_GetHCLKFreq+0x38>)
 8007504:	5ccb      	ldrb	r3, [r1, r3]
 8007506:	f003 031f 	and.w	r3, r3, #31
 800750a:	fa20 f303 	lsr.w	r3, r0, r3
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800750e:	6992      	ldr	r2, [r2, #24]
 8007510:	f002 020f 	and.w	r2, r2, #15
 8007514:	5c88      	ldrb	r0, [r1, r2]
 8007516:	f000 001f 	and.w	r0, r0, #31
 800751a:	fa23 f000 	lsr.w	r0, r3, r0
 800751e:	4a04      	ldr	r2, [pc, #16]	@ (8007530 <HAL_RCC_GetHCLKFreq+0x3c>)
 8007520:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007522:	4a04      	ldr	r2, [pc, #16]	@ (8007534 <HAL_RCC_GetHCLKFreq+0x40>)
 8007524:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8007526:	bd08      	pop	{r3, pc}
 8007528:	58024400 	.word	0x58024400
 800752c:	08016d10 	.word	0x08016d10
 8007530:	24000000 	.word	0x24000000
 8007534:	24000004 	.word	0x24000004

08007538 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007538:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800753a:	f7ff ffdb 	bl	80074f4 <HAL_RCC_GetHCLKFreq>
 800753e:	4b05      	ldr	r3, [pc, #20]	@ (8007554 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8007540:	69db      	ldr	r3, [r3, #28]
 8007542:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8007546:	4a04      	ldr	r2, [pc, #16]	@ (8007558 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007548:	5cd3      	ldrb	r3, [r2, r3]
 800754a:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800754e:	40d8      	lsrs	r0, r3
 8007550:	bd08      	pop	{r3, pc}
 8007552:	bf00      	nop
 8007554:	58024400 	.word	0x58024400
 8007558:	08016d10 	.word	0x08016d10

0800755c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800755c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800755e:	f7ff ffc9 	bl	80074f4 <HAL_RCC_GetHCLKFreq>
 8007562:	4b05      	ldr	r3, [pc, #20]	@ (8007578 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8007564:	69db      	ldr	r3, [r3, #28]
 8007566:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800756a:	4a04      	ldr	r2, [pc, #16]	@ (800757c <HAL_RCC_GetPCLK2Freq+0x20>)
 800756c:	5cd3      	ldrb	r3, [r2, r3]
 800756e:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007572:	40d8      	lsrs	r0, r3
 8007574:	bd08      	pop	{r3, pc}
 8007576:	bf00      	nop
 8007578:	58024400 	.word	0x58024400
 800757c:	08016d10 	.word	0x08016d10

08007580 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007580:	233f      	movs	r3, #63	@ 0x3f
 8007582:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007584:	4b11      	ldr	r3, [pc, #68]	@ (80075cc <HAL_RCC_GetClockConfig+0x4c>)
 8007586:	691a      	ldr	r2, [r3, #16]
 8007588:	f002 0207 	and.w	r2, r2, #7
 800758c:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800758e:	699a      	ldr	r2, [r3, #24]
 8007590:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 8007594:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007596:	699a      	ldr	r2, [r3, #24]
 8007598:	f002 020f 	and.w	r2, r2, #15
 800759c:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800759e:	699a      	ldr	r2, [r3, #24]
 80075a0:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80075a4:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80075a6:	69da      	ldr	r2, [r3, #28]
 80075a8:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80075ac:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80075ae:	69da      	ldr	r2, [r3, #28]
 80075b0:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 80075b4:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80075b6:	6a1b      	ldr	r3, [r3, #32]
 80075b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80075bc:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80075be:	4b04      	ldr	r3, [pc, #16]	@ (80075d0 <HAL_RCC_GetClockConfig+0x50>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 030f 	and.w	r3, r3, #15
 80075c6:	600b      	str	r3, [r1, #0]
}
 80075c8:	4770      	bx	lr
 80075ca:	bf00      	nop
 80075cc:	58024400 	.word	0x58024400
 80075d0:	52002000 	.word	0x52002000

080075d4 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80075d4:	4b40      	ldr	r3, [pc, #256]	@ (80076d8 <RCCEx_PLL2_Config+0x104>)
 80075d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075d8:	f003 0303 	and.w	r3, r3, #3
 80075dc:	2b03      	cmp	r3, #3
 80075de:	d079      	beq.n	80076d4 <RCCEx_PLL2_Config+0x100>
{
 80075e0:	b570      	push	{r4, r5, r6, lr}
 80075e2:	4605      	mov	r5, r0
 80075e4:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80075e6:	4a3c      	ldr	r2, [pc, #240]	@ (80076d8 <RCCEx_PLL2_Config+0x104>)
 80075e8:	6813      	ldr	r3, [r2, #0]
 80075ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80075ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075f0:	f7fb fd76 	bl	80030e0 <HAL_GetTick>
 80075f4:	4604      	mov	r4, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80075f6:	4b38      	ldr	r3, [pc, #224]	@ (80076d8 <RCCEx_PLL2_Config+0x104>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 80075fe:	d006      	beq.n	800760e <RCCEx_PLL2_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007600:	f7fb fd6e 	bl	80030e0 <HAL_GetTick>
 8007604:	1b03      	subs	r3, r0, r4
 8007606:	2b02      	cmp	r3, #2
 8007608:	d9f5      	bls.n	80075f6 <RCCEx_PLL2_Config+0x22>
      {
        return HAL_TIMEOUT;
 800760a:	2003      	movs	r0, #3

  }


  return status;
}
 800760c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800760e:	4b32      	ldr	r3, [pc, #200]	@ (80076d8 <RCCEx_PLL2_Config+0x104>)
 8007610:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007612:	f422 327c 	bic.w	r2, r2, #258048	@ 0x3f000
 8007616:	6829      	ldr	r1, [r5, #0]
 8007618:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 800761c:	629a      	str	r2, [r3, #40]	@ 0x28
 800761e:	686a      	ldr	r2, [r5, #4]
 8007620:	3a01      	subs	r2, #1
 8007622:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007626:	68a9      	ldr	r1, [r5, #8]
 8007628:	3901      	subs	r1, #1
 800762a:	0249      	lsls	r1, r1, #9
 800762c:	b289      	uxth	r1, r1
 800762e:	430a      	orrs	r2, r1
 8007630:	68e9      	ldr	r1, [r5, #12]
 8007632:	3901      	subs	r1, #1
 8007634:	0409      	lsls	r1, r1, #16
 8007636:	f401 01fe 	and.w	r1, r1, #8323072	@ 0x7f0000
 800763a:	430a      	orrs	r2, r1
 800763c:	6929      	ldr	r1, [r5, #16]
 800763e:	3901      	subs	r1, #1
 8007640:	0609      	lsls	r1, r1, #24
 8007642:	f001 41fe 	and.w	r1, r1, #2130706432	@ 0x7f000000
 8007646:	430a      	orrs	r2, r1
 8007648:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800764a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800764c:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8007650:	6969      	ldr	r1, [r5, #20]
 8007652:	430a      	orrs	r2, r1
 8007654:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007656:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007658:	f022 0220 	bic.w	r2, r2, #32
 800765c:	69a9      	ldr	r1, [r5, #24]
 800765e:	430a      	orrs	r2, r1
 8007660:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007662:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007664:	f022 0210 	bic.w	r2, r2, #16
 8007668:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800766a:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800766c:	4a1b      	ldr	r2, [pc, #108]	@ (80076dc <RCCEx_PLL2_Config+0x108>)
 800766e:	400a      	ands	r2, r1
 8007670:	69e9      	ldr	r1, [r5, #28]
 8007672:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8007676:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007678:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800767a:	f042 0210 	orr.w	r2, r2, #16
 800767e:	62da      	str	r2, [r3, #44]	@ 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8007680:	b9c6      	cbnz	r6, 80076b4 <RCCEx_PLL2_Config+0xe0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007682:	461a      	mov	r2, r3
 8007684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007686:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800768a:	62d3      	str	r3, [r2, #44]	@ 0x2c
    __HAL_RCC_PLL2_ENABLE();
 800768c:	4a12      	ldr	r2, [pc, #72]	@ (80076d8 <RCCEx_PLL2_Config+0x104>)
 800768e:	6813      	ldr	r3, [r2, #0]
 8007690:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007694:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8007696:	f7fb fd23 	bl	80030e0 <HAL_GetTick>
 800769a:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800769c:	4b0e      	ldr	r3, [pc, #56]	@ (80076d8 <RCCEx_PLL2_Config+0x104>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 80076a4:	d114      	bne.n	80076d0 <RCCEx_PLL2_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80076a6:	f7fb fd1b 	bl	80030e0 <HAL_GetTick>
 80076aa:	1b00      	subs	r0, r0, r4
 80076ac:	2802      	cmp	r0, #2
 80076ae:	d9f5      	bls.n	800769c <RCCEx_PLL2_Config+0xc8>
        return HAL_TIMEOUT;
 80076b0:	2003      	movs	r0, #3
 80076b2:	e7ab      	b.n	800760c <RCCEx_PLL2_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 80076b4:	2e01      	cmp	r6, #1
 80076b6:	d005      	beq.n	80076c4 <RCCEx_PLL2_Config+0xf0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80076b8:	4a07      	ldr	r2, [pc, #28]	@ (80076d8 <RCCEx_PLL2_Config+0x104>)
 80076ba:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80076bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80076c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80076c2:	e7e3      	b.n	800768c <RCCEx_PLL2_Config+0xb8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80076c4:	4a04      	ldr	r2, [pc, #16]	@ (80076d8 <RCCEx_PLL2_Config+0x104>)
 80076c6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80076c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80076cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80076ce:	e7dd      	b.n	800768c <RCCEx_PLL2_Config+0xb8>
  return status;
 80076d0:	2000      	movs	r0, #0
 80076d2:	e79b      	b.n	800760c <RCCEx_PLL2_Config+0x38>
    return HAL_ERROR;
 80076d4:	2001      	movs	r0, #1
}
 80076d6:	4770      	bx	lr
 80076d8:	58024400 	.word	0x58024400
 80076dc:	ffff0007 	.word	0xffff0007

080076e0 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80076e0:	4b40      	ldr	r3, [pc, #256]	@ (80077e4 <RCCEx_PLL3_Config+0x104>)
 80076e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076e4:	f003 0303 	and.w	r3, r3, #3
 80076e8:	2b03      	cmp	r3, #3
 80076ea:	d079      	beq.n	80077e0 <RCCEx_PLL3_Config+0x100>
{
 80076ec:	b570      	push	{r4, r5, r6, lr}
 80076ee:	4605      	mov	r5, r0
 80076f0:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80076f2:	4a3c      	ldr	r2, [pc, #240]	@ (80077e4 <RCCEx_PLL3_Config+0x104>)
 80076f4:	6813      	ldr	r3, [r2, #0]
 80076f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80076fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076fc:	f7fb fcf0 	bl	80030e0 <HAL_GetTick>
 8007700:	4604      	mov	r4, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007702:	4b38      	ldr	r3, [pc, #224]	@ (80077e4 <RCCEx_PLL3_Config+0x104>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 800770a:	d006      	beq.n	800771a <RCCEx_PLL3_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800770c:	f7fb fce8 	bl	80030e0 <HAL_GetTick>
 8007710:	1b03      	subs	r3, r0, r4
 8007712:	2b02      	cmp	r3, #2
 8007714:	d9f5      	bls.n	8007702 <RCCEx_PLL3_Config+0x22>
      {
        return HAL_TIMEOUT;
 8007716:	2003      	movs	r0, #3

  }


  return status;
}
 8007718:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800771a:	4b32      	ldr	r3, [pc, #200]	@ (80077e4 <RCCEx_PLL3_Config+0x104>)
 800771c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800771e:	f022 727c 	bic.w	r2, r2, #66060288	@ 0x3f00000
 8007722:	6829      	ldr	r1, [r5, #0]
 8007724:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8007728:	629a      	str	r2, [r3, #40]	@ 0x28
 800772a:	686a      	ldr	r2, [r5, #4]
 800772c:	3a01      	subs	r2, #1
 800772e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007732:	68a9      	ldr	r1, [r5, #8]
 8007734:	3901      	subs	r1, #1
 8007736:	0249      	lsls	r1, r1, #9
 8007738:	b289      	uxth	r1, r1
 800773a:	430a      	orrs	r2, r1
 800773c:	68e9      	ldr	r1, [r5, #12]
 800773e:	3901      	subs	r1, #1
 8007740:	0409      	lsls	r1, r1, #16
 8007742:	f401 01fe 	and.w	r1, r1, #8323072	@ 0x7f0000
 8007746:	430a      	orrs	r2, r1
 8007748:	6929      	ldr	r1, [r5, #16]
 800774a:	3901      	subs	r1, #1
 800774c:	0609      	lsls	r1, r1, #24
 800774e:	f001 41fe 	and.w	r1, r1, #2130706432	@ 0x7f000000
 8007752:	430a      	orrs	r2, r1
 8007754:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007756:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007758:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800775c:	6969      	ldr	r1, [r5, #20]
 800775e:	430a      	orrs	r2, r1
 8007760:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007762:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007764:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007768:	69a9      	ldr	r1, [r5, #24]
 800776a:	430a      	orrs	r2, r1
 800776c:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 800776e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007770:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007774:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007776:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8007778:	4a1b      	ldr	r2, [pc, #108]	@ (80077e8 <RCCEx_PLL3_Config+0x108>)
 800777a:	400a      	ands	r2, r1
 800777c:	69e9      	ldr	r1, [r5, #28]
 800777e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8007782:	645a      	str	r2, [r3, #68]	@ 0x44
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007786:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800778a:	62da      	str	r2, [r3, #44]	@ 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800778c:	b9c6      	cbnz	r6, 80077c0 <RCCEx_PLL3_Config+0xe0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800778e:	461a      	mov	r2, r3
 8007790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007792:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007796:	62d3      	str	r3, [r2, #44]	@ 0x2c
    __HAL_RCC_PLL3_ENABLE();
 8007798:	4a12      	ldr	r2, [pc, #72]	@ (80077e4 <RCCEx_PLL3_Config+0x104>)
 800779a:	6813      	ldr	r3, [r2, #0]
 800779c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80077a0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80077a2:	f7fb fc9d 	bl	80030e0 <HAL_GetTick>
 80077a6:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80077a8:	4b0e      	ldr	r3, [pc, #56]	@ (80077e4 <RCCEx_PLL3_Config+0x104>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 80077b0:	d114      	bne.n	80077dc <RCCEx_PLL3_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80077b2:	f7fb fc95 	bl	80030e0 <HAL_GetTick>
 80077b6:	1b00      	subs	r0, r0, r4
 80077b8:	2802      	cmp	r0, #2
 80077ba:	d9f5      	bls.n	80077a8 <RCCEx_PLL3_Config+0xc8>
        return HAL_TIMEOUT;
 80077bc:	2003      	movs	r0, #3
 80077be:	e7ab      	b.n	8007718 <RCCEx_PLL3_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 80077c0:	2e01      	cmp	r6, #1
 80077c2:	d005      	beq.n	80077d0 <RCCEx_PLL3_Config+0xf0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80077c4:	4a07      	ldr	r2, [pc, #28]	@ (80077e4 <RCCEx_PLL3_Config+0x104>)
 80077c6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80077c8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80077cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80077ce:	e7e3      	b.n	8007798 <RCCEx_PLL3_Config+0xb8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80077d0:	4a04      	ldr	r2, [pc, #16]	@ (80077e4 <RCCEx_PLL3_Config+0x104>)
 80077d2:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80077d4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80077d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80077da:	e7dd      	b.n	8007798 <RCCEx_PLL3_Config+0xb8>
  return status;
 80077dc:	2000      	movs	r0, #0
 80077de:	e79b      	b.n	8007718 <RCCEx_PLL3_Config+0x38>
    return HAL_ERROR;
 80077e0:	2001      	movs	r0, #1
}
 80077e2:	4770      	bx	lr
 80077e4:	58024400 	.word	0x58024400
 80077e8:	ffff0007 	.word	0xffff0007

080077ec <HAL_RCCEx_PeriphCLKConfig>:
{
 80077ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ee:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80077f0:	6803      	ldr	r3, [r0, #0]
 80077f2:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 80077f6:	d030      	beq.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->SpdifrxClockSelection)
 80077f8:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 80077fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80077fe:	d026      	beq.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8007800:	d80e      	bhi.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8007802:	b1eb      	cbz	r3, 8007840 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8007804:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007808:	d107      	bne.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800780a:	2102      	movs	r1, #2
 800780c:	3004      	adds	r0, #4
 800780e:	f7ff fee1 	bl	80075d4 <RCCEx_PLL2_Config>
 8007812:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007814:	b145      	cbz	r5, 8007828 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8007816:	462e      	mov	r6, r5
 8007818:	e021      	b.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800781a:	2601      	movs	r6, #1
 800781c:	4635      	mov	r5, r6
 800781e:	e01e      	b.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8007820:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007824:	d109      	bne.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8007826:	2500      	movs	r5, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007828:	4a95      	ldr	r2, [pc, #596]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800782a:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800782c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007830:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8007832:	430b      	orrs	r3, r1
 8007834:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007836:	2600      	movs	r6, #0
 8007838:	e011      	b.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800783a:	2601      	movs	r6, #1
 800783c:	4635      	mov	r5, r6
 800783e:	e00e      	b.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007840:	4a8f      	ldr	r2, [pc, #572]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007842:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007844:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007848:	62d3      	str	r3, [r2, #44]	@ 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800784a:	2500      	movs	r5, #0
 800784c:	e7ec      	b.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800784e:	2102      	movs	r1, #2
 8007850:	3024      	adds	r0, #36	@ 0x24
 8007852:	f7ff ff45 	bl	80076e0 <RCCEx_PLL3_Config>
 8007856:	4605      	mov	r5, r0
      break;
 8007858:	e7dc      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x28>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800785a:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800785c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800785e:	6823      	ldr	r3, [r4, #0]
 8007860:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8007864:	d014      	beq.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    switch(PeriphClkInit->Sai1ClockSelection)
 8007866:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007868:	2b04      	cmp	r3, #4
 800786a:	d830      	bhi.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800786c:	e8df f003 	tbb	[pc, r3]
 8007870:	08282203 	.word	0x08282203
 8007874:	08          	.byte	0x08
 8007875:	00          	.byte	0x00
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007876:	4a82      	ldr	r2, [pc, #520]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007878:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800787a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800787e:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if(ret == HAL_OK)
 8007880:	bb45      	cbnz	r5, 80078d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007882:	4a7f      	ldr	r2, [pc, #508]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007884:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8007886:	f023 0307 	bic.w	r3, r3, #7
 800788a:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800788c:	430b      	orrs	r3, r1
 800788e:	6513      	str	r3, [r2, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007890:	6823      	ldr	r3, [r4, #0]
 8007892:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8007896:	d02f      	beq.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai23ClockSelection)
 8007898:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800789a:	2b80      	cmp	r3, #128	@ 0x80
 800789c:	d049      	beq.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x146>
 800789e:	d81e      	bhi.n	80078de <HAL_RCCEx_PeriphCLKConfig+0xf2>
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d040      	beq.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x13a>
 80078a4:	2b40      	cmp	r3, #64	@ 0x40
 80078a6:	d117      	bne.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80078a8:	2100      	movs	r1, #0
 80078aa:	1d20      	adds	r0, r4, #4
 80078ac:	f7ff fe92 	bl	80075d4 <RCCEx_PLL2_Config>
 80078b0:	4605      	mov	r5, r0
      break;
 80078b2:	e019      	b.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80078b4:	2100      	movs	r1, #0
 80078b6:	1d20      	adds	r0, r4, #4
 80078b8:	f7ff fe8c 	bl	80075d4 <RCCEx_PLL2_Config>
 80078bc:	4605      	mov	r5, r0
      break;
 80078be:	e7df      	b.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x94>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80078c0:	2100      	movs	r1, #0
 80078c2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80078c6:	f7ff ff0b 	bl	80076e0 <RCCEx_PLL3_Config>
 80078ca:	4605      	mov	r5, r0
      break;
 80078cc:	e7d8      	b.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch(PeriphClkInit->Sai1ClockSelection)
 80078ce:	2601      	movs	r6, #1
 80078d0:	4635      	mov	r5, r6
 80078d2:	e7dd      	b.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80078d4:	462e      	mov	r6, r5
 80078d6:	e7db      	b.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    switch(PeriphClkInit->Sai23ClockSelection)
 80078d8:	2601      	movs	r6, #1
 80078da:	4635      	mov	r5, r6
 80078dc:	e00c      	b.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80078de:	2bc0      	cmp	r3, #192	@ 0xc0
 80078e0:	d002      	beq.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 80078e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078e6:	d11b      	bne.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x134>
    if(ret == HAL_OK)
 80078e8:	bb55      	cbnz	r5, 8007940 <HAL_RCCEx_PeriphCLKConfig+0x154>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80078ea:	4a65      	ldr	r2, [pc, #404]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80078ec:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80078ee:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 80078f2:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80078f4:	430b      	orrs	r3, r1
 80078f6:	6513      	str	r3, [r2, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80078f8:	6823      	ldr	r3, [r4, #0]
 80078fa:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80078fe:	d045      	beq.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    switch(PeriphClkInit->Sai4AClockSelection)
 8007900:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 8007904:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007908:	d038      	beq.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x190>
 800790a:	d81e      	bhi.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800790c:	b383      	cbz	r3, 8007970 <HAL_RCCEx_PeriphCLKConfig+0x184>
 800790e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007912:	d117      	bne.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x158>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007914:	2100      	movs	r1, #0
 8007916:	1d20      	adds	r0, r4, #4
 8007918:	f7ff fe5c 	bl	80075d4 <RCCEx_PLL2_Config>
 800791c:	4605      	mov	r5, r0
      break;
 800791e:	e01a      	b.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x16a>
    switch(PeriphClkInit->Sai23ClockSelection)
 8007920:	2601      	movs	r6, #1
 8007922:	4635      	mov	r5, r6
 8007924:	e7e8      	b.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007926:	4a56      	ldr	r2, [pc, #344]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007928:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800792a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800792e:	62d3      	str	r3, [r2, #44]	@ 0x2c
      break;
 8007930:	e7da      	b.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007932:	2100      	movs	r1, #0
 8007934:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007938:	f7ff fed2 	bl	80076e0 <RCCEx_PLL3_Config>
 800793c:	4605      	mov	r5, r0
      break;
 800793e:	e7d3      	b.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8007940:	462e      	mov	r6, r5
 8007942:	e7d9      	b.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai4AClockSelection)
 8007944:	2601      	movs	r6, #1
 8007946:	4635      	mov	r5, r6
 8007948:	e020      	b.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 800794a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800794e:	d002      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8007950:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007954:	d109      	bne.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    if(ret == HAL_OK)
 8007956:	b9c5      	cbnz	r5, 800798a <HAL_RCCEx_PeriphCLKConfig+0x19e>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007958:	4a49      	ldr	r2, [pc, #292]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800795a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800795c:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 8007960:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
 8007964:	430b      	orrs	r3, r1
 8007966:	6593      	str	r3, [r2, #88]	@ 0x58
 8007968:	e010      	b.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    switch(PeriphClkInit->Sai4AClockSelection)
 800796a:	2601      	movs	r6, #1
 800796c:	4635      	mov	r5, r6
 800796e:	e00d      	b.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007970:	4a43      	ldr	r2, [pc, #268]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007972:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007974:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007978:	62d3      	str	r3, [r2, #44]	@ 0x2c
      break;
 800797a:	e7ec      	b.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x16a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800797c:	2100      	movs	r1, #0
 800797e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007982:	f7ff fead 	bl	80076e0 <RCCEx_PLL3_Config>
 8007986:	4605      	mov	r5, r0
      break;
 8007988:	e7e5      	b.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 800798a:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800798c:	6823      	ldr	r3, [r4, #0]
 800798e:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8007992:	d023      	beq.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    switch(PeriphClkInit->Sai4BClockSelection)
 8007994:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
 8007998:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800799c:	d041      	beq.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x236>
 800799e:	d80d      	bhi.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d038      	beq.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80079a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80079a8:	d105      	bne.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80079aa:	2100      	movs	r1, #0
 80079ac:	1d20      	adds	r0, r4, #4
 80079ae:	f7ff fe11 	bl	80075d4 <RCCEx_PLL2_Config>
 80079b2:	4605      	mov	r5, r0
      break;
 80079b4:	e008      	b.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    switch(PeriphClkInit->Sai4BClockSelection)
 80079b6:	2601      	movs	r6, #1
 80079b8:	4635      	mov	r5, r6
 80079ba:	e00f      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80079bc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80079c0:	d002      	beq.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80079c2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80079c6:	d123      	bne.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0x224>
    if(ret == HAL_OK)
 80079c8:	2d00      	cmp	r5, #0
 80079ca:	d131      	bne.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x244>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80079cc:	4a2c      	ldr	r2, [pc, #176]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80079ce:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80079d0:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80079d4:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 80079d8:	430b      	orrs	r3, r1
 80079da:	6593      	str	r3, [r2, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80079dc:	6823      	ldr	r3, [r4, #0]
 80079de:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80079e2:	d02e      	beq.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x256>
    switch(PeriphClkInit->QspiClockSelection)
 80079e4:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80079e6:	2b20      	cmp	r3, #32
 80079e8:	d03f      	beq.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x27e>
 80079ea:	d826      	bhi.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x24e>
 80079ec:	b133      	cbz	r3, 80079fc <HAL_RCCEx_PeriphCLKConfig+0x210>
 80079ee:	2b10      	cmp	r3, #16
 80079f0:	d120      	bne.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x248>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079f2:	4a23      	ldr	r2, [pc, #140]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80079f4:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80079f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if(ret == HAL_OK)
 80079fc:	2d00      	cmp	r5, #0
 80079fe:	d13a      	bne.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x28a>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007a00:	4a1f      	ldr	r2, [pc, #124]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007a02:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8007a04:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8007a08:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007a0a:	430b      	orrs	r3, r1
 8007a0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007a0e:	e018      	b.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x256>
    switch(PeriphClkInit->Sai4BClockSelection)
 8007a10:	2601      	movs	r6, #1
 8007a12:	4635      	mov	r5, r6
 8007a14:	e7e2      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a16:	4a1a      	ldr	r2, [pc, #104]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007a18:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007a1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a1e:	62d3      	str	r3, [r2, #44]	@ 0x2c
      break;
 8007a20:	e7d2      	b.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a22:	2100      	movs	r1, #0
 8007a24:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007a28:	f7ff fe5a 	bl	80076e0 <RCCEx_PLL3_Config>
 8007a2c:	4605      	mov	r5, r0
      break;
 8007a2e:	e7cb      	b.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007a30:	462e      	mov	r6, r5
 8007a32:	e7d3      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    switch(PeriphClkInit->QspiClockSelection)
 8007a34:	2601      	movs	r6, #1
 8007a36:	4635      	mov	r5, r6
 8007a38:	e003      	b.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8007a3a:	2b30      	cmp	r3, #48	@ 0x30
 8007a3c:	d0de      	beq.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x210>
 8007a3e:	2601      	movs	r6, #1
 8007a40:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007a42:	6823      	ldr	r3, [r4, #0]
 8007a44:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8007a48:	d02b      	beq.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    switch(PeriphClkInit->Spi123ClockSelection)
 8007a4a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8007a4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a50:	d04c      	beq.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x300>
 8007a52:	d817      	bhi.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d043      	beq.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8007a58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a5c:	d10d      	bne.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x28e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a5e:	2100      	movs	r1, #0
 8007a60:	1d20      	adds	r0, r4, #4
 8007a62:	f7ff fdb7 	bl	80075d4 <RCCEx_PLL2_Config>
 8007a66:	4605      	mov	r5, r0
      break;
 8007a68:	e012      	b.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007a6a:	2102      	movs	r1, #2
 8007a6c:	1d20      	adds	r0, r4, #4
 8007a6e:	f7ff fdb1 	bl	80075d4 <RCCEx_PLL2_Config>
 8007a72:	4605      	mov	r5, r0
      break;
 8007a74:	e7c2      	b.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x210>
 8007a76:	462e      	mov	r6, r5
 8007a78:	e7e3      	b.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x256>
    switch(PeriphClkInit->Spi123ClockSelection)
 8007a7a:	2601      	movs	r6, #1
 8007a7c:	4635      	mov	r5, r6
 8007a7e:	e010      	b.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8007a80:	58024400 	.word	0x58024400
 8007a84:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007a88:	d002      	beq.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8007a8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a8e:	d124      	bne.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    if(ret == HAL_OK)
 8007a90:	2d00      	cmp	r5, #0
 8007a92:	d132      	bne.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007a94:	4a75      	ldr	r2, [pc, #468]	@ (8007c6c <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007a96:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8007a98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a9c:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8007a9e:	430b      	orrs	r3, r1
 8007aa0:	6513      	str	r3, [r2, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007aa2:	6823      	ldr	r3, [r4, #0]
 8007aa4:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8007aa8:	d037      	beq.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x32e>
    switch(PeriphClkInit->Spi45ClockSelection)
 8007aaa:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8007aac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ab0:	d051      	beq.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8007ab2:	d827      	bhi.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8007ab4:	b13b      	cbz	r3, 8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007ab6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007aba:	d120      	bne.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0x312>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007abc:	2101      	movs	r1, #1
 8007abe:	1d20      	adds	r0, r4, #4
 8007ac0:	f7ff fd88 	bl	80075d4 <RCCEx_PLL2_Config>
 8007ac4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007ac6:	2d00      	cmp	r5, #0
 8007ac8:	d14c      	bne.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x378>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007aca:	4a68      	ldr	r2, [pc, #416]	@ (8007c6c <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007acc:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8007ace:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8007ad2:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8007ad4:	430b      	orrs	r3, r1
 8007ad6:	6513      	str	r3, [r2, #80]	@ 0x50
 8007ad8:	e01f      	b.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x32e>
    switch(PeriphClkInit->Spi123ClockSelection)
 8007ada:	2601      	movs	r6, #1
 8007adc:	4635      	mov	r5, r6
 8007ade:	e7e0      	b.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ae0:	4a62      	ldr	r2, [pc, #392]	@ (8007c6c <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007ae2:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007ae4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ae8:	62d3      	str	r3, [r2, #44]	@ 0x2c
      break;
 8007aea:	e7d1      	b.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007aec:	2100      	movs	r1, #0
 8007aee:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007af2:	f7ff fdf5 	bl	80076e0 <RCCEx_PLL3_Config>
 8007af6:	4605      	mov	r5, r0
      break;
 8007af8:	e7ca      	b.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8007afa:	462e      	mov	r6, r5
 8007afc:	e7d1      	b.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    switch(PeriphClkInit->Spi45ClockSelection)
 8007afe:	2601      	movs	r6, #1
 8007b00:	4635      	mov	r5, r6
 8007b02:	e00a      	b.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8007b04:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007b08:	d0dd      	beq.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007b0a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007b0e:	d0da      	beq.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007b10:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007b14:	d0d7      	beq.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007b16:	2601      	movs	r6, #1
 8007b18:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007b1a:	6823      	ldr	r3, [r4, #0]
 8007b1c:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8007b20:	d030      	beq.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x398>
    switch(PeriphClkInit->Spi6ClockSelection)
 8007b22:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
 8007b26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b2a:	d044      	beq.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 8007b2c:	d81f      	bhi.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007b2e:	b13b      	cbz	r3, 8007b40 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8007b30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b34:	d118      	bne.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x37c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007b36:	2101      	movs	r1, #1
 8007b38:	1d20      	adds	r0, r4, #4
 8007b3a:	f7ff fd4b 	bl	80075d4 <RCCEx_PLL2_Config>
 8007b3e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007b40:	2d00      	cmp	r5, #0
 8007b42:	d13f      	bne.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007b44:	4a49      	ldr	r2, [pc, #292]	@ (8007c6c <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007b46:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8007b48:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 8007b4c:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 8007b50:	430b      	orrs	r3, r1
 8007b52:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b54:	e016      	b.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x398>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b56:	2101      	movs	r1, #1
 8007b58:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007b5c:	f7ff fdc0 	bl	80076e0 <RCCEx_PLL3_Config>
 8007b60:	4605      	mov	r5, r0
      break;
 8007b62:	e7b0      	b.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007b64:	462e      	mov	r6, r5
 8007b66:	e7d8      	b.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x32e>
    switch(PeriphClkInit->Spi6ClockSelection)
 8007b68:	2601      	movs	r6, #1
 8007b6a:	4635      	mov	r5, r6
 8007b6c:	e00a      	b.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8007b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b72:	d0e5      	beq.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8007b74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b78:	d0e2      	beq.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8007b7a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007b7e:	d0df      	beq.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8007b80:	2601      	movs	r6, #1
 8007b82:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007b84:	6823      	ldr	r3, [r4, #0]
 8007b86:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8007b8a:	d009      	beq.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    switch(PeriphClkInit->FdcanClockSelection)
 8007b8c:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8007b8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b92:	d019      	beq.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 8007b94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b98:	d024      	beq.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007b9a:	b1d3      	cbz	r3, 8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007b9c:	2601      	movs	r6, #1
 8007b9e:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007ba0:	6823      	ldr	r3, [r4, #0]
 8007ba2:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8007ba6:	d032      	beq.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x422>
    switch(PeriphClkInit->FmcClockSelection)
 8007ba8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007baa:	2b03      	cmp	r3, #3
 8007bac:	d859      	bhi.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007bae:	e8df f003 	tbb	[pc, r3]
 8007bb2:	2126      	.short	0x2126
 8007bb4:	2652      	.short	0x2652
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007bb6:	2101      	movs	r1, #1
 8007bb8:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007bbc:	f7ff fd90 	bl	80076e0 <RCCEx_PLL3_Config>
 8007bc0:	4605      	mov	r5, r0
      break;
 8007bc2:	e7bd      	b.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8007bc4:	462e      	mov	r6, r5
 8007bc6:	e7dd      	b.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x398>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bc8:	4a28      	ldr	r2, [pc, #160]	@ (8007c6c <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007bca:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007bcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007bd0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if(ret == HAL_OK)
 8007bd2:	b96d      	cbnz	r5, 8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x404>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007bd4:	4a25      	ldr	r2, [pc, #148]	@ (8007c6c <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007bd6:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8007bd8:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8007bdc:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8007bde:	430b      	orrs	r3, r1
 8007be0:	6513      	str	r3, [r2, #80]	@ 0x50
 8007be2:	e7dd      	b.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007be4:	2101      	movs	r1, #1
 8007be6:	1d20      	adds	r0, r4, #4
 8007be8:	f7ff fcf4 	bl	80075d4 <RCCEx_PLL2_Config>
 8007bec:	4605      	mov	r5, r0
      break;
 8007bee:	e7f0      	b.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007bf0:	462e      	mov	r6, r5
 8007bf2:	e7d5      	b.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bf4:	4a1d      	ldr	r2, [pc, #116]	@ (8007c6c <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007bf6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007bf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007bfc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if(ret == HAL_OK)
 8007bfe:	bb9d      	cbnz	r5, 8007c68 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007c00:	4a1a      	ldr	r2, [pc, #104]	@ (8007c6c <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007c02:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8007c04:	f023 0303 	bic.w	r3, r3, #3
 8007c08:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007c0a:	430b      	orrs	r3, r1
 8007c0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007c0e:	6823      	ldr	r3, [r4, #0]
 8007c10:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8007c14:	d12c      	bne.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x484>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007c16:	6823      	ldr	r3, [r4, #0]
 8007c18:	f013 0f01 	tst.w	r3, #1
 8007c1c:	f000 80a3 	beq.w	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x57a>
    switch(PeriphClkInit->Usart16ClockSelection)
 8007c20:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8007c22:	2b28      	cmp	r3, #40	@ 0x28
 8007c24:	f200 809d 	bhi.w	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x576>
 8007c28:	e8df f003 	tbb	[pc, r3]
 8007c2c:	9b9b9b8b 	.word	0x9b9b9b8b
 8007c30:	9b9b9b9b 	.word	0x9b9b9b9b
 8007c34:	9b9b9b86 	.word	0x9b9b9b86
 8007c38:	9b9b9b9b 	.word	0x9b9b9b9b
 8007c3c:	9b9b9b94 	.word	0x9b9b9b94
 8007c40:	9b9b9b9b 	.word	0x9b9b9b9b
 8007c44:	9b9b9b8b 	.word	0x9b9b9b8b
 8007c48:	9b9b9b9b 	.word	0x9b9b9b9b
 8007c4c:	9b9b9b8b 	.word	0x9b9b9b8b
 8007c50:	9b9b9b9b 	.word	0x9b9b9b9b
 8007c54:	8b          	.byte	0x8b
 8007c55:	00          	.byte	0x00
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007c56:	2102      	movs	r1, #2
 8007c58:	1d20      	adds	r0, r4, #4
 8007c5a:	f7ff fcbb 	bl	80075d4 <RCCEx_PLL2_Config>
 8007c5e:	4605      	mov	r5, r0
      break;
 8007c60:	e7cd      	b.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x412>
    switch(PeriphClkInit->FmcClockSelection)
 8007c62:	2601      	movs	r6, #1
 8007c64:	4635      	mov	r5, r6
 8007c66:	e7d2      	b.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x422>
 8007c68:	462e      	mov	r6, r5
 8007c6a:	e7d0      	b.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x422>
 8007c6c:	58024400 	.word	0x58024400
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c70:	4a8f      	ldr	r2, [pc, #572]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007c72:	6813      	ldr	r3, [r2, #0]
 8007c74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c78:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8007c7a:	f7fb fa31 	bl	80030e0 <HAL_GetTick>
 8007c7e:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c80:	4b8b      	ldr	r3, [pc, #556]	@ (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8007c88:	d105      	bne.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c8a:	f7fb fa29 	bl	80030e0 <HAL_GetTick>
 8007c8e:	1bc0      	subs	r0, r0, r7
 8007c90:	2864      	cmp	r0, #100	@ 0x64
 8007c92:	d9f5      	bls.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x494>
        ret = HAL_TIMEOUT;
 8007c94:	2503      	movs	r5, #3
    if(ret == HAL_OK)
 8007c96:	2d00      	cmp	r5, #0
 8007c98:	d14a      	bne.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x544>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007c9a:	4b86      	ldr	r3, [pc, #536]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c9e:	f8d4 20b0 	ldr.w	r2, [r4, #176]	@ 0xb0
 8007ca2:	4053      	eors	r3, r2
 8007ca4:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8007ca8:	d00c      	beq.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007caa:	4b82      	ldr	r3, [pc, #520]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007cac:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007cae:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8007cb2:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007cb4:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8007cb8:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007cba:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007cbc:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8007cc0:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 8007cc2:	671a      	str	r2, [r3, #112]	@ 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007cc4:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 8007cc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ccc:	d015      	beq.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x50e>
      if(ret == HAL_OK)
 8007cce:	bb8d      	cbnz	r5, 8007d34 <HAL_RCCEx_PeriphCLKConfig+0x548>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007cd0:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 8007cd4:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8007cd8:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8007cdc:	d01e      	beq.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x530>
 8007cde:	4a75      	ldr	r2, [pc, #468]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007ce0:	6913      	ldr	r3, [r2, #16]
 8007ce2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007ce6:	6113      	str	r3, [r2, #16]
 8007ce8:	4972      	ldr	r1, [pc, #456]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007cea:	6f0b      	ldr	r3, [r1, #112]	@ 0x70
 8007cec:	f8d4 20b0 	ldr.w	r2, [r4, #176]	@ 0xb0
 8007cf0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	670b      	str	r3, [r1, #112]	@ 0x70
 8007cf8:	e78d      	b.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x42a>
        tickstart = HAL_GetTick();
 8007cfa:	f7fb f9f1 	bl	80030e0 <HAL_GetTick>
 8007cfe:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d00:	4b6c      	ldr	r3, [pc, #432]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007d02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d04:	f013 0f02 	tst.w	r3, #2
 8007d08:	d1e1      	bne.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x4e2>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d0a:	f7fb f9e9 	bl	80030e0 <HAL_GetTick>
 8007d0e:	1bc0      	subs	r0, r0, r7
 8007d10:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007d14:	4298      	cmp	r0, r3
 8007d16:	d9f3      	bls.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x514>
            ret = HAL_TIMEOUT;
 8007d18:	2503      	movs	r5, #3
 8007d1a:	e7d8      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x4e2>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d1c:	4865      	ldr	r0, [pc, #404]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007d1e:	6902      	ldr	r2, [r0, #16]
 8007d20:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 8007d24:	4964      	ldr	r1, [pc, #400]	@ (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d26:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	6103      	str	r3, [r0, #16]
 8007d2e:	e7db      	b.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      status = ret;
 8007d30:	462e      	mov	r6, r5
 8007d32:	e770      	b.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x42a>
        status = ret;
 8007d34:	462e      	mov	r6, r5
 8007d36:	e76e      	b.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007d38:	2101      	movs	r1, #1
 8007d3a:	1d20      	adds	r0, r4, #4
 8007d3c:	f7ff fc4a 	bl	80075d4 <RCCEx_PLL2_Config>
 8007d40:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007d42:	b9e5      	cbnz	r5, 8007d7e <HAL_RCCEx_PeriphCLKConfig+0x592>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007d44:	4a5b      	ldr	r2, [pc, #364]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007d46:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8007d48:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8007d4c:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8007d4e:	430b      	orrs	r3, r1
 8007d50:	6553      	str	r3, [r2, #84]	@ 0x54
 8007d52:	e008      	b.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x57a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007d54:	2101      	movs	r1, #1
 8007d56:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007d5a:	f7ff fcc1 	bl	80076e0 <RCCEx_PLL3_Config>
 8007d5e:	4605      	mov	r5, r0
      break;
 8007d60:	e7ef      	b.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x556>
    switch(PeriphClkInit->Usart16ClockSelection)
 8007d62:	2601      	movs	r6, #1
 8007d64:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007d66:	6823      	ldr	r3, [r4, #0]
 8007d68:	f013 0f02 	tst.w	r3, #2
 8007d6c:	d016      	beq.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007d6e:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8007d70:	2b05      	cmp	r3, #5
 8007d72:	d827      	bhi.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
 8007d74:	e8df f003 	tbb	[pc, r3]
 8007d78:	0a1f050a 	.word	0x0a1f050a
 8007d7c:	0a0a      	.short	0x0a0a
 8007d7e:	462e      	mov	r6, r5
 8007d80:	e7f1      	b.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x57a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007d82:	2101      	movs	r1, #1
 8007d84:	1d20      	adds	r0, r4, #4
 8007d86:	f7ff fc25 	bl	80075d4 <RCCEx_PLL2_Config>
 8007d8a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007d8c:	b9ed      	cbnz	r5, 8007dca <HAL_RCCEx_PeriphCLKConfig+0x5de>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007d8e:	4a49      	ldr	r2, [pc, #292]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007d90:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8007d92:	f023 0307 	bic.w	r3, r3, #7
 8007d96:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8007d98:	430b      	orrs	r3, r1
 8007d9a:	6553      	str	r3, [r2, #84]	@ 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d9c:	6823      	ldr	r3, [r4, #0]
 8007d9e:	f013 0f04 	tst.w	r3, #4
 8007da2:	d022      	beq.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007da4:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8007da8:	2b05      	cmp	r3, #5
 8007daa:	d843      	bhi.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8007dac:	e8df f003 	tbb	[pc, r3]
 8007db0:	143b0f14 	.word	0x143b0f14
 8007db4:	1414      	.short	0x1414
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007db6:	2101      	movs	r1, #1
 8007db8:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007dbc:	f7ff fc90 	bl	80076e0 <RCCEx_PLL3_Config>
 8007dc0:	4605      	mov	r5, r0
      break;
 8007dc2:	e7e3      	b.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007dc4:	2601      	movs	r6, #1
 8007dc6:	4635      	mov	r5, r6
 8007dc8:	e7e8      	b.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x5b0>
 8007dca:	462e      	mov	r6, r5
 8007dcc:	e7e6      	b.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x5b0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007dce:	2101      	movs	r1, #1
 8007dd0:	1d20      	adds	r0, r4, #4
 8007dd2:	f7ff fbff 	bl	80075d4 <RCCEx_PLL2_Config>
 8007dd6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007dd8:	bb7d      	cbnz	r5, 8007e3a <HAL_RCCEx_PeriphCLKConfig+0x64e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007dda:	4a36      	ldr	r2, [pc, #216]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007ddc:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8007dde:	f023 0307 	bic.w	r3, r3, #7
 8007de2:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 8007de6:	430b      	orrs	r3, r1
 8007de8:	6593      	str	r3, [r2, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007dea:	6823      	ldr	r3, [r4, #0]
 8007dec:	f013 0f20 	tst.w	r3, #32
 8007df0:	d033      	beq.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x66e>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007df2:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 8007df6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007dfa:	d04c      	beq.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8007dfc:	d822      	bhi.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x658>
 8007dfe:	b13b      	cbz	r3, 8007e10 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8007e00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e04:	d11b      	bne.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0x652>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e06:	2100      	movs	r1, #0
 8007e08:	1d20      	adds	r0, r4, #4
 8007e0a:	f7ff fbe3 	bl	80075d4 <RCCEx_PLL2_Config>
 8007e0e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007e10:	2d00      	cmp	r5, #0
 8007e12:	d147      	bne.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007e14:	4a27      	ldr	r2, [pc, #156]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007e16:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8007e18:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 8007e1c:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
 8007e20:	430b      	orrs	r3, r1
 8007e22:	6553      	str	r3, [r2, #84]	@ 0x54
 8007e24:	e019      	b.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x66e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007e26:	2101      	movs	r1, #1
 8007e28:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007e2c:	f7ff fc58 	bl	80076e0 <RCCEx_PLL3_Config>
 8007e30:	4605      	mov	r5, r0
      break;
 8007e32:	e7d1      	b.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007e34:	2601      	movs	r6, #1
 8007e36:	4635      	mov	r5, r6
 8007e38:	e7d7      	b.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x5fe>
 8007e3a:	462e      	mov	r6, r5
 8007e3c:	e7d5      	b.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007e3e:	2601      	movs	r6, #1
 8007e40:	4635      	mov	r5, r6
 8007e42:	e00a      	b.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007e44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e48:	d0e2      	beq.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8007e4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007e4e:	d0df      	beq.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8007e50:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007e54:	d0dc      	beq.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8007e56:	2601      	movs	r6, #1
 8007e58:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007e5a:	6823      	ldr	r3, [r4, #0]
 8007e5c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8007e60:	d037      	beq.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007e62:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8007e66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e6a:	d052      	beq.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x726>
 8007e6c:	d826      	bhi.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 8007e6e:	b13b      	cbz	r3, 8007e80 <HAL_RCCEx_PeriphCLKConfig+0x694>
 8007e70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e74:	d118      	bne.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e76:	2100      	movs	r1, #0
 8007e78:	1d20      	adds	r0, r4, #4
 8007e7a:	f7ff fbab 	bl	80075d4 <RCCEx_PLL2_Config>
 8007e7e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007e80:	2d00      	cmp	r5, #0
 8007e82:	d14d      	bne.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x734>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007e84:	4a0b      	ldr	r2, [pc, #44]	@ (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007e86:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8007e88:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8007e8c:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
 8007e90:	430b      	orrs	r3, r1
 8007e92:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e94:	e01d      	b.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007e96:	2102      	movs	r1, #2
 8007e98:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007e9c:	f7ff fc20 	bl	80076e0 <RCCEx_PLL3_Config>
 8007ea0:	4605      	mov	r5, r0
      break;
 8007ea2:	e7b5      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8007ea4:	462e      	mov	r6, r5
 8007ea6:	e7d8      	b.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x66e>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007ea8:	2601      	movs	r6, #1
 8007eaa:	4635      	mov	r5, r6
 8007eac:	e011      	b.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
 8007eae:	bf00      	nop
 8007eb0:	58024800 	.word	0x58024800
 8007eb4:	58024400 	.word	0x58024400
 8007eb8:	00ffffcf 	.word	0x00ffffcf
 8007ebc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ec0:	d0de      	beq.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x694>
 8007ec2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007ec6:	d0db      	beq.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x694>
 8007ec8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007ecc:	d0d8      	beq.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x694>
 8007ece:	2601      	movs	r6, #1
 8007ed0:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007ed2:	6823      	ldr	r3, [r4, #0]
 8007ed4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007ed8:	d032      	beq.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x754>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007eda:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8007ede:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ee2:	f000 809d 	beq.w	8008020 <HAL_RCCEx_PeriphCLKConfig+0x834>
 8007ee6:	d820      	bhi.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007ee8:	b13b      	cbz	r3, 8007efa <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8007eea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007eee:	d119      	bne.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x738>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ef0:	2100      	movs	r1, #0
 8007ef2:	1d20      	adds	r0, r4, #4
 8007ef4:	f7ff fb6e 	bl	80075d4 <RCCEx_PLL2_Config>
 8007ef8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007efa:	2d00      	cmp	r5, #0
 8007efc:	f040 8097 	bne.w	800802e <HAL_RCCEx_PeriphCLKConfig+0x842>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007f00:	4aa5      	ldr	r2, [pc, #660]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8007f02:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8007f04:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8007f08:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 8007f0c:	430b      	orrs	r3, r1
 8007f0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007f10:	e016      	b.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x754>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007f12:	2102      	movs	r1, #2
 8007f14:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007f18:	f7ff fbe2 	bl	80076e0 <RCCEx_PLL3_Config>
 8007f1c:	4605      	mov	r5, r0
      break;
 8007f1e:	e7af      	b.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x694>
 8007f20:	462e      	mov	r6, r5
 8007f22:	e7d6      	b.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007f24:	2601      	movs	r6, #1
 8007f26:	4635      	mov	r5, r6
 8007f28:	e00a      	b.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8007f2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f2e:	d0e4      	beq.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8007f30:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007f34:	d0e1      	beq.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8007f36:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007f3a:	d0de      	beq.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8007f3c:	2601      	movs	r6, #1
 8007f3e:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007f40:	6823      	ldr	r3, [r4, #0]
 8007f42:	f013 0f08 	tst.w	r3, #8
 8007f46:	d00c      	beq.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x776>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007f48:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8007f4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f50:	d06f      	beq.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x846>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007f52:	4a91      	ldr	r2, [pc, #580]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8007f54:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8007f56:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8007f5a:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8007f5e:	430b      	orrs	r3, r1
 8007f60:	6553      	str	r3, [r2, #84]	@ 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007f62:	6823      	ldr	r3, [r4, #0]
 8007f64:	f013 0f10 	tst.w	r3, #16
 8007f68:	d00c      	beq.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x798>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007f6a:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 8007f6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f72:	d067      	beq.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x858>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007f74:	4a88      	ldr	r2, [pc, #544]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8007f76:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8007f78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f7c:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8007f80:	430b      	orrs	r3, r1
 8007f82:	6593      	str	r3, [r2, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007f84:	6823      	ldr	r3, [r4, #0]
 8007f86:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8007f8a:	d00b      	beq.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    switch(PeriphClkInit->AdcClockSelection)
 8007f8c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 8007f90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f94:	d06e      	beq.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8007f96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f9a:	d061      	beq.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x874>
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d05a      	beq.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x86a>
 8007fa0:	2601      	movs	r6, #1
 8007fa2:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007fa4:	6823      	ldr	r3, [r4, #0]
 8007fa6:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8007faa:	d00c      	beq.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x7da>
    switch(PeriphClkInit->UsbClockSelection)
 8007fac:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8007fb0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007fb4:	d076      	beq.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8007fb6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007fba:	d069      	beq.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 8007fbc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007fc0:	d061      	beq.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8007fc2:	2601      	movs	r6, #1
 8007fc4:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007fc6:	6823      	ldr	r3, [r4, #0]
 8007fc8:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8007fcc:	d007      	beq.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    switch(PeriphClkInit->SdmmcClockSelection)
 8007fce:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d070      	beq.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
 8007fd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fd8:	d07b      	beq.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8007fda:	2601      	movs	r6, #1
 8007fdc:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007fde:	6823      	ldr	r3, [r4, #0]
 8007fe0:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8007fe4:	d17d      	bne.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007fe6:	6823      	ldr	r3, [r4, #0]
 8007fe8:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8007fec:	f000 8086 	beq.w	80080fc <HAL_RCCEx_PeriphCLKConfig+0x910>
    switch(PeriphClkInit->RngClockSelection)
 8007ff0:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8007ff2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ff6:	f000 80c6 	beq.w	8008186 <HAL_RCCEx_PeriphCLKConfig+0x99a>
 8007ffa:	d97c      	bls.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8007ffc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008000:	d003      	beq.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8008002:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008006:	f040 80bc 	bne.w	8008182 <HAL_RCCEx_PeriphCLKConfig+0x996>
    if(ret == HAL_OK)
 800800a:	2d00      	cmp	r5, #0
 800800c:	f040 80c1 	bne.w	8008192 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008010:	4a61      	ldr	r2, [pc, #388]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8008012:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8008014:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008018:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 800801a:	430b      	orrs	r3, r1
 800801c:	6553      	str	r3, [r2, #84]	@ 0x54
 800801e:	e06d      	b.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x910>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008020:	2102      	movs	r1, #2
 8008022:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008026:	f7ff fb5b 	bl	80076e0 <RCCEx_PLL3_Config>
 800802a:	4605      	mov	r5, r0
      break;
 800802c:	e765      	b.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x70e>
 800802e:	462e      	mov	r6, r5
 8008030:	e786      	b.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x754>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008032:	2102      	movs	r1, #2
 8008034:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008038:	f7ff fb52 	bl	80076e0 <RCCEx_PLL3_Config>
 800803c:	2800      	cmp	r0, #0
 800803e:	d088      	beq.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x766>
          status = HAL_ERROR;
 8008040:	2601      	movs	r6, #1
 8008042:	e786      	b.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x766>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008044:	2102      	movs	r1, #2
 8008046:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800804a:	f7ff fb49 	bl	80076e0 <RCCEx_PLL3_Config>
 800804e:	2800      	cmp	r0, #0
 8008050:	d090      	beq.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x788>
        status = HAL_ERROR;
 8008052:	2601      	movs	r6, #1
 8008054:	e78e      	b.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x788>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008056:	2100      	movs	r1, #0
 8008058:	1d20      	adds	r0, r4, #4
 800805a:	f7ff fabb 	bl	80075d4 <RCCEx_PLL2_Config>
 800805e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008060:	b97d      	cbnz	r5, 8008082 <HAL_RCCEx_PeriphCLKConfig+0x896>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008062:	4a4d      	ldr	r2, [pc, #308]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8008064:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8008066:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800806a:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 800806e:	430b      	orrs	r3, r1
 8008070:	6593      	str	r3, [r2, #88]	@ 0x58
 8008072:	e797      	b.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008074:	2102      	movs	r1, #2
 8008076:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800807a:	f7ff fb31 	bl	80076e0 <RCCEx_PLL3_Config>
 800807e:	4605      	mov	r5, r0
      break;
 8008080:	e7ee      	b.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x874>
 8008082:	462e      	mov	r6, r5
 8008084:	e78e      	b.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008086:	4a44      	ldr	r2, [pc, #272]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8008088:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800808a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800808e:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if(ret == HAL_OK)
 8008090:	b97d      	cbnz	r5, 80080b2 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008092:	4a41      	ldr	r2, [pc, #260]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8008094:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8008096:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800809a:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 800809e:	430b      	orrs	r3, r1
 80080a0:	6553      	str	r3, [r2, #84]	@ 0x54
 80080a2:	e790      	b.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x7da>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80080a4:	2101      	movs	r1, #1
 80080a6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80080aa:	f7ff fb19 	bl	80076e0 <RCCEx_PLL3_Config>
 80080ae:	4605      	mov	r5, r0
      break;
 80080b0:	e7ee      	b.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 80080b2:	462e      	mov	r6, r5
 80080b4:	e787      	b.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x7da>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080b6:	4a38      	ldr	r2, [pc, #224]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 80080b8:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80080ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080be:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if(ret == HAL_OK)
 80080c0:	b96d      	cbnz	r5, 80080de <HAL_RCCEx_PeriphCLKConfig+0x8f2>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80080c2:	4a35      	ldr	r2, [pc, #212]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 80080c4:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80080c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80080ca:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 80080cc:	430b      	orrs	r3, r1
 80080ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80080d0:	e785      	b.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x7f2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80080d2:	2102      	movs	r1, #2
 80080d4:	1d20      	adds	r0, r4, #4
 80080d6:	f7ff fa7d 	bl	80075d4 <RCCEx_PLL2_Config>
 80080da:	4605      	mov	r5, r0
      break;
 80080dc:	e7f0      	b.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>
 80080de:	462e      	mov	r6, r5
 80080e0:	e77d      	b.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80080e2:	2102      	movs	r1, #2
 80080e4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80080e8:	f7ff fafa 	bl	80076e0 <RCCEx_PLL3_Config>
 80080ec:	2800      	cmp	r0, #0
 80080ee:	f43f af7a 	beq.w	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x7fa>
      status=HAL_ERROR;
 80080f2:	2601      	movs	r6, #1
 80080f4:	e777      	b.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x7fa>
    switch(PeriphClkInit->RngClockSelection)
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d087      	beq.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x81e>
 80080fa:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80080fc:	6823      	ldr	r3, [r4, #0]
 80080fe:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8008102:	d006      	beq.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0x926>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008104:	4a24      	ldr	r2, [pc, #144]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8008106:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8008108:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800810c:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 800810e:	430b      	orrs	r3, r1
 8008110:	6513      	str	r3, [r2, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008112:	6823      	ldr	r3, [r4, #0]
 8008114:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8008118:	d007      	beq.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x93e>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800811a:	4a1f      	ldr	r2, [pc, #124]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800811c:	6913      	ldr	r3, [r2, #16]
 800811e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008122:	f8d4 10b4 	ldr.w	r1, [r4, #180]	@ 0xb4
 8008126:	430b      	orrs	r3, r1
 8008128:	6113      	str	r3, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800812a:	6823      	ldr	r3, [r4, #0]
 800812c:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8008130:	d006      	beq.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x954>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008132:	4a19      	ldr	r2, [pc, #100]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8008134:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8008136:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800813a:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800813c:	430b      	orrs	r3, r1
 800813e:	6513      	str	r3, [r2, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008140:	6823      	ldr	r3, [r4, #0]
 8008142:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008146:	d009      	beq.n	800815c <HAL_RCCEx_PeriphCLKConfig+0x970>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008148:	4b13      	ldr	r3, [pc, #76]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800814a:	691a      	ldr	r2, [r3, #16]
 800814c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008150:	611a      	str	r2, [r3, #16]
 8008152:	691a      	ldr	r2, [r3, #16]
 8008154:	f8d4 10b8 	ldr.w	r1, [r4, #184]	@ 0xb8
 8008158:	430a      	orrs	r2, r1
 800815a:	611a      	str	r2, [r3, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800815c:	6823      	ldr	r3, [r4, #0]
 800815e:	2b00      	cmp	r3, #0
 8008160:	db1c      	blt.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008162:	6823      	ldr	r3, [r4, #0]
 8008164:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8008168:	d007      	beq.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x98e>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800816a:	4a0b      	ldr	r2, [pc, #44]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800816c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800816e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8008172:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 8008176:	430b      	orrs	r3, r1
 8008178:	6553      	str	r3, [r2, #84]	@ 0x54
  if (status == HAL_OK)
 800817a:	b106      	cbz	r6, 800817e <HAL_RCCEx_PeriphCLKConfig+0x992>
  return HAL_ERROR;
 800817c:	2601      	movs	r6, #1
}
 800817e:	4630      	mov	r0, r6
 8008180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PeriphClkInit->RngClockSelection)
 8008182:	2601      	movs	r6, #1
 8008184:	e7ba      	b.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x910>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008186:	4a04      	ldr	r2, [pc, #16]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8008188:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800818a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800818e:	62d3      	str	r3, [r2, #44]	@ 0x2c
      break;
 8008190:	e73b      	b.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8008192:	462e      	mov	r6, r5
 8008194:	e7b2      	b.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x910>
 8008196:	bf00      	nop
 8008198:	58024400 	.word	0x58024400
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800819c:	4a03      	ldr	r2, [pc, #12]	@ (80081ac <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800819e:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80081a0:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 80081a4:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80081a6:	430b      	orrs	r3, r1
 80081a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80081aa:	e7da      	b.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0x976>
 80081ac:	58024400 	.word	0x58024400

080081b0 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 80081b0:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80081b2:	f7ff f99f 	bl	80074f4 <HAL_RCC_GetHCLKFreq>
 80081b6:	4b05      	ldr	r3, [pc, #20]	@ (80081cc <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 80081b8:	6a1b      	ldr	r3, [r3, #32]
 80081ba:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80081be:	4a04      	ldr	r2, [pc, #16]	@ (80081d0 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 80081c0:	5cd3      	ldrb	r3, [r2, r3]
 80081c2:	f003 031f 	and.w	r3, r3, #31
}
 80081c6:	40d8      	lsrs	r0, r3
 80081c8:	bd08      	pop	{r3, pc}
 80081ca:	bf00      	nop
 80081cc:	58024400 	.word	0x58024400
 80081d0:	08016d10 	.word	0x08016d10

080081d4 <HAL_RCCEx_GetPLL2ClockFreq>:
{
 80081d4:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80081d6:	4b78      	ldr	r3, [pc, #480]	@ (80083b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80081d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80081da:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 80081dc:	f3c4 3c05 	ubfx	ip, r4, #12, #6
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80081e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80081e2:	f3c1 1100 	ubfx	r1, r1, #4, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80081e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081e8:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 80081ec:	fb01 f303 	mul.w	r3, r1, r3
  if (pll2m != 0U)
 80081f0:	f414 3f7c 	tst.w	r4, #258048	@ 0x3f000
 80081f4:	f000 80db 	beq.w	80083ae <HAL_RCCEx_GetPLL2ClockFreq+0x1da>
 80081f8:	f002 0203 	and.w	r2, r2, #3
 80081fc:	ee07 3a90 	vmov	s15, r3
 8008200:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8008204:	2a01      	cmp	r2, #1
 8008206:	d066      	beq.n	80082d6 <HAL_RCCEx_GetPLL2ClockFreq+0x102>
 8008208:	2a02      	cmp	r2, #2
 800820a:	f000 80b3 	beq.w	8008374 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800820e:	b1e2      	cbz	r2, 800824a <HAL_RCCEx_GetPLL2ClockFreq+0x76>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008210:	ee07 ca10 	vmov	s14, ip
 8008214:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008218:	ed9f 6a68 	vldr	s12, [pc, #416]	@ 80083bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 800821c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008220:	4b65      	ldr	r3, [pc, #404]	@ (80083b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8008222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008228:	ee06 3a90 	vmov	s13, r3
 800822c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8008230:	ed9f 6a63 	vldr	s12, [pc, #396]	@ 80083c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8008234:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008238:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800823c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008240:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008244:	ee27 7a27 	vmul.f32	s14, s14, s15
      break;
 8008248:	e061      	b.n	800830e <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800824a:	4b5b      	ldr	r3, [pc, #364]	@ (80083b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f013 0f20 	tst.w	r3, #32
 8008252:	d023      	beq.n	800829c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008254:	4958      	ldr	r1, [pc, #352]	@ (80083b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8008256:	680a      	ldr	r2, [r1, #0]
 8008258:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800825c:	4b59      	ldr	r3, [pc, #356]	@ (80083c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>)
 800825e:	40d3      	lsrs	r3, r2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008260:	ee07 3a10 	vmov	s14, r3
 8008264:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008268:	ee07 ca10 	vmov	s14, ip
 800826c:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8008270:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8008274:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 8008276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800827a:	ee06 3a90 	vmov	s13, r3
 800827e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8008282:	ed9f 6a4f 	vldr	s12, [pc, #316]	@ 80083c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8008286:	ee67 7a86 	vmul.f32	s15, s15, s12
 800828a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800828e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008296:	ee27 7a27 	vmul.f32	s14, s14, s15
 800829a:	e038      	b.n	800830e <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800829c:	ee07 ca10 	vmov	s14, ip
 80082a0:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80082a4:	ed9f 6a48 	vldr	s12, [pc, #288]	@ 80083c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1f4>
 80082a8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80082ac:	4b42      	ldr	r3, [pc, #264]	@ (80083b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80082ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082b4:	ee06 3a90 	vmov	s13, r3
 80082b8:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80082bc:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 80083c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 80082c0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80082c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80082d4:	e01b      	b.n	800830e <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80082d6:	ee07 ca10 	vmov	s14, ip
 80082da:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80082de:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 80083bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 80082e2:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80082e6:	4b34      	ldr	r3, [pc, #208]	@ (80083b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80082e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082ee:	ee06 3a90 	vmov	s13, r3
 80082f2:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80082f6:	ed9f 6a32 	vldr	s12, [pc, #200]	@ 80083c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 80082fa:	ee67 7a86 	vmul.f32	s15, s15, s12
 80082fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008302:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008306:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800830a:	ee27 7a27 	vmul.f32	s14, s14, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800830e:	4a2a      	ldr	r2, [pc, #168]	@ (80083b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8008310:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8008312:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008316:	ee07 3a90 	vmov	s15, r3
 800831a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800831e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008326:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800832a:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 800832e:	ed80 6a00 	vstr	s12, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008332:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8008334:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8008338:	ee07 3a90 	vmov	s15, r3
 800833c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008340:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008344:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8008348:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 800834c:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008350:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8008352:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8008356:	ee07 3a90 	vmov	s15, r3
 800835a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800835e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008362:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008366:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800836a:	edc0 6a02 	vstr	s13, [r0, #8]
}
 800836e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008372:	4770      	bx	lr
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008374:	ee07 ca10 	vmov	s14, ip
 8008378:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800837c:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80083cc <HAL_RCCEx_GetPLL2ClockFreq+0x1f8>
 8008380:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008384:	4b0c      	ldr	r3, [pc, #48]	@ (80083b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8008386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008388:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800838c:	ee06 3a90 	vmov	s13, r3
 8008390:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8008394:	ed9f 6a0a 	vldr	s12, [pc, #40]	@ 80083c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8008398:	ee67 7a86 	vmul.f32	s15, s15, s12
 800839c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083a8:	ee27 7a27 	vmul.f32	s14, s14, s15
      break;
 80083ac:	e7af      	b.n	800830e <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80083ae:	2300      	movs	r3, #0
 80083b0:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80083b2:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80083b4:	6083      	str	r3, [r0, #8]
}
 80083b6:	e7da      	b.n	800836e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>
 80083b8:	58024400 	.word	0x58024400
 80083bc:	4a742400 	.word	0x4a742400
 80083c0:	39000000 	.word	0x39000000
 80083c4:	03d09000 	.word	0x03d09000
 80083c8:	4c742400 	.word	0x4c742400
 80083cc:	4bb71b00 	.word	0x4bb71b00

080083d0 <HAL_RCCEx_GetPLL3ClockFreq>:
{
 80083d0:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80083d2:	4b78      	ldr	r3, [pc, #480]	@ (80085b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80083d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80083d6:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 80083d8:	f3c4 5c05 	ubfx	ip, r4, #20, #6
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80083dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80083de:	f3c1 2100 	ubfx	r1, r1, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80083e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083e4:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 80083e8:	fb01 f303 	mul.w	r3, r1, r3
  if (pll3m != 0U)
 80083ec:	f014 7f7c 	tst.w	r4, #66060288	@ 0x3f00000
 80083f0:	f000 80db 	beq.w	80085aa <HAL_RCCEx_GetPLL3ClockFreq+0x1da>
 80083f4:	f002 0203 	and.w	r2, r2, #3
 80083f8:	ee07 3a90 	vmov	s15, r3
 80083fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8008400:	2a01      	cmp	r2, #1
 8008402:	d066      	beq.n	80084d2 <HAL_RCCEx_GetPLL3ClockFreq+0x102>
 8008404:	2a02      	cmp	r2, #2
 8008406:	f000 80b3 	beq.w	8008570 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800840a:	b1e2      	cbz	r2, 8008446 <HAL_RCCEx_GetPLL3ClockFreq+0x76>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800840c:	ee07 ca10 	vmov	s14, ip
 8008410:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008414:	ed9f 6a68 	vldr	s12, [pc, #416]	@ 80085b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8008418:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800841c:	4b65      	ldr	r3, [pc, #404]	@ (80085b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800841e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008424:	ee06 3a90 	vmov	s13, r3
 8008428:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800842c:	ed9f 6a63 	vldr	s12, [pc, #396]	@ 80085bc <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8008430:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008434:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008438:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800843c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008440:	ee27 7a27 	vmul.f32	s14, s14, s15
      break;
 8008444:	e061      	b.n	800850a <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008446:	4b5b      	ldr	r3, [pc, #364]	@ (80085b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f013 0f20 	tst.w	r3, #32
 800844e:	d023      	beq.n	8008498 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008450:	4958      	ldr	r1, [pc, #352]	@ (80085b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8008452:	680a      	ldr	r2, [r1, #0]
 8008454:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8008458:	4b59      	ldr	r3, [pc, #356]	@ (80085c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>)
 800845a:	40d3      	lsrs	r3, r2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800845c:	ee07 3a10 	vmov	s14, r3
 8008460:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008464:	ee07 ca10 	vmov	s14, ip
 8008468:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 800846c:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8008470:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008476:	ee06 3a90 	vmov	s13, r3
 800847a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800847e:	ed9f 6a4f 	vldr	s12, [pc, #316]	@ 80085bc <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8008482:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800848a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800848e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008492:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008496:	e038      	b.n	800850a <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008498:	ee07 ca10 	vmov	s14, ip
 800849c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80084a0:	ed9f 6a48 	vldr	s12, [pc, #288]	@ 80085c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1f4>
 80084a4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80084a8:	4b42      	ldr	r3, [pc, #264]	@ (80085b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80084aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084b0:	ee06 3a90 	vmov	s13, r3
 80084b4:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80084b8:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 80085bc <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 80084bc:	ee67 7a86 	vmul.f32	s15, s15, s12
 80084c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80084d0:	e01b      	b.n	800850a <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80084d2:	ee07 ca10 	vmov	s14, ip
 80084d6:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80084da:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 80085b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 80084de:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80084e2:	4b34      	ldr	r3, [pc, #208]	@ (80085b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80084e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084ea:	ee06 3a90 	vmov	s13, r3
 80084ee:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80084f2:	ed9f 6a32 	vldr	s12, [pc, #200]	@ 80085bc <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 80084f6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80084fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008506:	ee27 7a27 	vmul.f32	s14, s14, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800850a:	4a2a      	ldr	r2, [pc, #168]	@ (80085b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800850c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800850e:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008512:	ee07 3a90 	vmov	s15, r3
 8008516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800851a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800851e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008522:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8008526:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 800852a:	ed80 6a00 	vstr	s12, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800852e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8008530:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8008534:	ee07 3a90 	vmov	s15, r3
 8008538:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800853c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008540:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8008544:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8008548:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800854c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800854e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8008552:	ee07 3a90 	vmov	s15, r3
 8008556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800855a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800855e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008562:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8008566:	edc0 6a02 	vstr	s13, [r0, #8]
}
 800856a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800856e:	4770      	bx	lr
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008570:	ee07 ca10 	vmov	s14, ip
 8008574:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008578:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80085c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1f8>
 800857c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008580:	4b0c      	ldr	r3, [pc, #48]	@ (80085b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8008582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008588:	ee06 3a90 	vmov	s13, r3
 800858c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8008590:	ed9f 6a0a 	vldr	s12, [pc, #40]	@ 80085bc <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8008594:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008598:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800859c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085a4:	ee27 7a27 	vmul.f32	s14, s14, s15
      break;
 80085a8:	e7af      	b.n	800850a <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80085aa:	2300      	movs	r3, #0
 80085ac:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80085ae:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80085b0:	6083      	str	r3, [r0, #8]
}
 80085b2:	e7da      	b.n	800856a <HAL_RCCEx_GetPLL3ClockFreq+0x19a>
 80085b4:	58024400 	.word	0x58024400
 80085b8:	4a742400 	.word	0x4a742400
 80085bc:	39000000 	.word	0x39000000
 80085c0:	03d09000 	.word	0x03d09000
 80085c4:	4c742400 	.word	0x4c742400
 80085c8:	4bb71b00 	.word	0x4bb71b00

080085cc <HAL_RCCEx_GetPLL1ClockFreq>:
{
 80085cc:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80085ce:	4b78      	ldr	r3, [pc, #480]	@ (80087b0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 80085d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80085d2:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 80085d4:	f3c4 1c05 	ubfx	ip, r4, #4, #6
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80085d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80085da:	f001 0101 	and.w	r1, r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80085de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085e0:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 80085e4:	fb01 f303 	mul.w	r3, r1, r3
  if (pll1m != 0U)
 80085e8:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
 80085ec:	f000 80db 	beq.w	80087a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1da>
 80085f0:	f002 0203 	and.w	r2, r2, #3
 80085f4:	ee07 3a90 	vmov	s15, r3
 80085f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 80085fc:	2a01      	cmp	r2, #1
 80085fe:	d066      	beq.n	80086ce <HAL_RCCEx_GetPLL1ClockFreq+0x102>
 8008600:	2a02      	cmp	r2, #2
 8008602:	f000 80b3 	beq.w	800876c <HAL_RCCEx_GetPLL1ClockFreq+0x1a0>
 8008606:	b1e2      	cbz	r2, 8008642 <HAL_RCCEx_GetPLL1ClockFreq+0x76>
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008608:	ee07 ca10 	vmov	s14, ip
 800860c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008610:	ed9f 6a68 	vldr	s12, [pc, #416]	@ 80087b4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8008614:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008618:	4b65      	ldr	r3, [pc, #404]	@ (80087b0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 800861a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800861c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008620:	ee06 3a90 	vmov	s13, r3
 8008624:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8008628:	ed9f 6a63 	vldr	s12, [pc, #396]	@ 80087b8 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 800862c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008630:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008634:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008638:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800863c:	ee27 7a27 	vmul.f32	s14, s14, s15
      break;
 8008640:	e061      	b.n	8008706 <HAL_RCCEx_GetPLL1ClockFreq+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008642:	4b5b      	ldr	r3, [pc, #364]	@ (80087b0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f013 0f20 	tst.w	r3, #32
 800864a:	d023      	beq.n	8008694 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800864c:	4958      	ldr	r1, [pc, #352]	@ (80087b0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 800864e:	680a      	ldr	r2, [r1, #0]
 8008650:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8008654:	4b59      	ldr	r3, [pc, #356]	@ (80087bc <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>)
 8008656:	40d3      	lsrs	r3, r2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008658:	ee07 3a10 	vmov	s14, r3
 800865c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008660:	ee07 ca10 	vmov	s14, ip
 8008664:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8008668:	ee86 7a86 	vdiv.f32	s14, s13, s12
 800866c:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 800866e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008672:	ee06 3a90 	vmov	s13, r3
 8008676:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800867a:	ed9f 6a4f 	vldr	s12, [pc, #316]	@ 80087b8 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 800867e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008686:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800868a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800868e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008692:	e038      	b.n	8008706 <HAL_RCCEx_GetPLL1ClockFreq+0x13a>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008694:	ee07 ca10 	vmov	s14, ip
 8008698:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800869c:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 80087b4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 80086a0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80086a4:	4b42      	ldr	r3, [pc, #264]	@ (80087b0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 80086a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086ac:	ee06 3a90 	vmov	s13, r3
 80086b0:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80086b4:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 80087b8 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 80086b8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80086bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80086cc:	e01b      	b.n	8008706 <HAL_RCCEx_GetPLL1ClockFreq+0x13a>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80086ce:	ee07 ca10 	vmov	s14, ip
 80086d2:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80086d6:	ed9f 6a3a 	vldr	s12, [pc, #232]	@ 80087c0 <HAL_RCCEx_GetPLL1ClockFreq+0x1f4>
 80086da:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80086de:	4b34      	ldr	r3, [pc, #208]	@ (80087b0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 80086e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086e6:	ee06 3a90 	vmov	s13, r3
 80086ea:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80086ee:	ed9f 6a32 	vldr	s12, [pc, #200]	@ 80087b8 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 80086f2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80086f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008702:	ee27 7a27 	vmul.f32	s14, s14, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008706:	4a2a      	ldr	r2, [pc, #168]	@ (80087b0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8008708:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800870a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800870e:	ee07 3a90 	vmov	s15, r3
 8008712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008716:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800871a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800871e:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8008722:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8008726:	ed80 6a00 	vstr	s12, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800872a:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800872c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8008730:	ee07 3a90 	vmov	s15, r3
 8008734:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008738:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800873c:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8008740:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8008744:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008748:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800874a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800874e:	ee07 3a90 	vmov	s15, r3
 8008752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800875a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800875e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8008762:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8008766:	f85d 4b04 	ldr.w	r4, [sp], #4
 800876a:	4770      	bx	lr
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800876c:	ee07 ca10 	vmov	s14, ip
 8008770:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008774:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80087c4 <HAL_RCCEx_GetPLL1ClockFreq+0x1f8>
 8008778:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800877c:	4b0c      	ldr	r3, [pc, #48]	@ (80087b0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 800877e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008784:	ee06 3a90 	vmov	s13, r3
 8008788:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800878c:	ed9f 6a0a 	vldr	s12, [pc, #40]	@ 80087b8 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8008790:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008794:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008798:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800879c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087a0:	ee27 7a27 	vmul.f32	s14, s14, s15
      break;
 80087a4:	e7af      	b.n	8008706 <HAL_RCCEx_GetPLL1ClockFreq+0x13a>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80087a6:	2300      	movs	r3, #0
 80087a8:	6003      	str	r3, [r0, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80087aa:	6043      	str	r3, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80087ac:	6083      	str	r3, [r0, #8]
}
 80087ae:	e7da      	b.n	8008766 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>
 80087b0:	58024400 	.word	0x58024400
 80087b4:	4c742400 	.word	0x4c742400
 80087b8:	39000000 	.word	0x39000000
 80087bc:	03d09000 	.word	0x03d09000
 80087c0:	4a742400 	.word	0x4a742400
 80087c4:	4bb71b00 	.word	0x4bb71b00

080087c8 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 80087c8:	b500      	push	{lr}
 80087ca:	b08b      	sub	sp, #44	@ 0x2c
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80087cc:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 80087d0:	d020      	beq.n	8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80087d2:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 80087d6:	d071      	beq.n	80088bc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80087d8:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
 80087dc:	f000 80c8 	beq.w	8008970 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80087e0:	f5b0 6f00 	cmp.w	r0, #2048	@ 0x800
 80087e4:	f000 8121 	beq.w	8008a2a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80087e8:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 80087ec:	f000 8182 	beq.w	8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80087f0:	f5b0 2f00 	cmp.w	r0, #524288	@ 0x80000
 80087f4:	f000 81db 	beq.w	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80087f8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80087fc:	f000 821f 	beq.w	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008800:	f5b0 4f80 	cmp.w	r0, #16384	@ 0x4000
 8008804:	f000 8239 	beq.w	8008c7a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008808:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800880c:	f000 8284 	beq.w	8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
      frequency = 0;
 8008810:	2000      	movs	r0, #0
 8008812:	e2b2      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008814:	4b95      	ldr	r3, [pc, #596]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008816:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008818:	f003 0307 	and.w	r3, r3, #7
      switch (saiclocksource)
 800881c:	2b04      	cmp	r3, #4
 800881e:	f200 82a3 	bhi.w	8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8008822:	e8df f003 	tbb	[pc, r3]
 8008826:	1005      	.short	0x1005
 8008828:	031b      	.short	0x031b
 800882a:	26          	.byte	0x26
 800882b:	00          	.byte	0x00
 800882c:	4890      	ldr	r0, [pc, #576]	@ (8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800882e:	e2a4      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008830:	4b8e      	ldr	r3, [pc, #568]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008832:	6818      	ldr	r0, [r3, #0]
 8008834:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8008838:	f000 829f 	beq.w	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800883c:	a807      	add	r0, sp, #28
 800883e:	f7ff fec5 	bl	80085cc <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8008842:	9808      	ldr	r0, [sp, #32]
 8008844:	e299      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008846:	4b89      	ldr	r3, [pc, #548]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008848:	6818      	ldr	r0, [r3, #0]
 800884a:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800884e:	f000 8294 	beq.w	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008852:	a804      	add	r0, sp, #16
 8008854:	f7ff fcbe 	bl	80081d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008858:	9804      	ldr	r0, [sp, #16]
 800885a:	e28e      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800885c:	4b83      	ldr	r3, [pc, #524]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800885e:	6818      	ldr	r0, [r3, #0]
 8008860:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8008864:	f000 8289 	beq.w	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008868:	a801      	add	r0, sp, #4
 800886a:	f7ff fdb1 	bl	80083d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800886e:	9801      	ldr	r0, [sp, #4]
 8008870:	e283      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008872:	4a7e      	ldr	r2, [pc, #504]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008874:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8008876:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800887a:	6812      	ldr	r2, [r2, #0]
 800887c:	f012 0f04 	tst.w	r2, #4
 8008880:	d007      	beq.n	8008892 <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 8008882:	b933      	cbnz	r3, 8008892 <HAL_RCCEx_GetPeriphCLKFreq+0xca>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008884:	4b79      	ldr	r3, [pc, #484]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800888c:	4879      	ldr	r0, [pc, #484]	@ (8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 800888e:	40d8      	lsrs	r0, r3
 8008890:	e273      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008892:	4a76      	ldr	r2, [pc, #472]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008894:	6812      	ldr	r2, [r2, #0]
 8008896:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800889a:	d003      	beq.n	80088a4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800889c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80088a0:	f000 8264 	beq.w	8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80088a4:	4a71      	ldr	r2, [pc, #452]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80088a6:	6812      	ldr	r2, [r2, #0]
 80088a8:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80088ac:	f000 8260 	beq.w	8008d70 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80088b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088b4:	f000 825e 	beq.w	8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>
            frequency = 0;
 80088b8:	2000      	movs	r0, #0
 80088ba:	e25e      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80088bc:	4b6b      	ldr	r3, [pc, #428]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80088be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088c0:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
      switch (saiclocksource)
 80088c4:	2b80      	cmp	r3, #128	@ 0x80
 80088c6:	d033      	beq.n	8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 80088c8:	d915      	bls.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 80088ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80088cc:	f000 8254 	beq.w	8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 80088d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088d4:	d11f      	bne.n	8008916 <HAL_RCCEx_GetPeriphCLKFreq+0x14e>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80088d6:	4a65      	ldr	r2, [pc, #404]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80088d8:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80088da:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80088de:	6812      	ldr	r2, [r2, #0]
 80088e0:	f012 0f04 	tst.w	r2, #4
 80088e4:	d02f      	beq.n	8008946 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 80088e6:	bb73      	cbnz	r3, 8008946 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80088e8:	4b60      	ldr	r3, [pc, #384]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80088f0:	4860      	ldr	r0, [pc, #384]	@ (8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 80088f2:	40d8      	lsrs	r0, r3
 80088f4:	e241      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (saiclocksource)
 80088f6:	b183      	cbz	r3, 800891a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 80088f8:	2b40      	cmp	r3, #64	@ 0x40
 80088fa:	d10a      	bne.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80088fc:	4b5b      	ldr	r3, [pc, #364]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80088fe:	6818      	ldr	r0, [r3, #0]
 8008900:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8008904:	f000 8239 	beq.w	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008908:	a804      	add	r0, sp, #16
 800890a:	f7ff fc63 	bl	80081d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800890e:	9804      	ldr	r0, [sp, #16]
 8008910:	e233      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = 0;
 8008912:	2000      	movs	r0, #0
 8008914:	e231      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 8008916:	2000      	movs	r0, #0
 8008918:	e22f      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800891a:	4b54      	ldr	r3, [pc, #336]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800891c:	6818      	ldr	r0, [r3, #0]
 800891e:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8008922:	f000 822a 	beq.w	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008926:	a807      	add	r0, sp, #28
 8008928:	f7ff fe50 	bl	80085cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800892c:	9808      	ldr	r0, [sp, #32]
 800892e:	e224      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008930:	4b4e      	ldr	r3, [pc, #312]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008932:	6818      	ldr	r0, [r3, #0]
 8008934:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8008938:	f000 821f 	beq.w	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800893c:	a801      	add	r0, sp, #4
 800893e:	f7ff fd47 	bl	80083d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008942:	9801      	ldr	r0, [sp, #4]
 8008944:	e219      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008946:	4a49      	ldr	r2, [pc, #292]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008948:	6812      	ldr	r2, [r2, #0]
 800894a:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800894e:	d003      	beq.n	8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8008950:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008954:	f000 8214 	beq.w	8008d80 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008958:	4a44      	ldr	r2, [pc, #272]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800895a:	6812      	ldr	r2, [r2, #0]
 800895c:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8008960:	f000 8210 	beq.w	8008d84 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
 8008964:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008968:	f000 820e 	beq.w	8008d88 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
            frequency = 0;
 800896c:	2000      	movs	r0, #0
 800896e:	e204      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008970:	4b3e      	ldr	r3, [pc, #248]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008974:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
      switch (saiclocksource)
 8008978:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800897c:	d035      	beq.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0x222>
 800897e:	d916      	bls.n	80089ae <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008980:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008984:	f000 8202 	beq.w	8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8008988:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800898c:	d120      	bne.n	80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800898e:	4a37      	ldr	r2, [pc, #220]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008990:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8008992:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008996:	6812      	ldr	r2, [r2, #0]
 8008998:	f012 0f04 	tst.w	r2, #4
 800899c:	d030      	beq.n	8008a00 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 800899e:	bb7b      	cbnz	r3, 8008a00 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80089a0:	4b32      	ldr	r3, [pc, #200]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80089a8:	4832      	ldr	r0, [pc, #200]	@ (8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 80089aa:	40d8      	lsrs	r0, r3
 80089ac:	e1e5      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (saiclocksource)
 80089ae:	b18b      	cbz	r3, 80089d4 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 80089b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80089b4:	d10a      	bne.n	80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x204>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089b6:	4b2d      	ldr	r3, [pc, #180]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80089b8:	6818      	ldr	r0, [r3, #0]
 80089ba:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 80089be:	f000 81dc 	beq.w	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089c2:	a804      	add	r0, sp, #16
 80089c4:	f7ff fc06 	bl	80081d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80089c8:	9804      	ldr	r0, [sp, #16]
 80089ca:	e1d6      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = 0;
 80089cc:	2000      	movs	r0, #0
 80089ce:	e1d4      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 80089d0:	2000      	movs	r0, #0
 80089d2:	e1d2      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80089d4:	4b25      	ldr	r3, [pc, #148]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80089d6:	6818      	ldr	r0, [r3, #0]
 80089d8:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 80089dc:	f000 81cd 	beq.w	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80089e0:	a807      	add	r0, sp, #28
 80089e2:	f7ff fdf3 	bl	80085cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80089e6:	9808      	ldr	r0, [sp, #32]
 80089e8:	e1c7      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80089ea:	4b20      	ldr	r3, [pc, #128]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80089ec:	6818      	ldr	r0, [r3, #0]
 80089ee:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 80089f2:	f000 81c2 	beq.w	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089f6:	a801      	add	r0, sp, #4
 80089f8:	f7ff fcea 	bl	80083d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80089fc:	9801      	ldr	r0, [sp, #4]
 80089fe:	e1bc      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a00:	4a1a      	ldr	r2, [pc, #104]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008a02:	6812      	ldr	r2, [r2, #0]
 8008a04:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8008a08:	d003      	beq.n	8008a12 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
 8008a0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a0e:	f000 81bf 	beq.w	8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a12:	4a16      	ldr	r2, [pc, #88]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008a14:	6812      	ldr	r2, [r2, #0]
 8008a16:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8008a1a:	f000 81bb 	beq.w	8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8008a1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a22:	f000 81b9 	beq.w	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>
            frequency = 0;
 8008a26:	2000      	movs	r0, #0
 8008a28:	e1a7      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008a2a:	4b10      	ldr	r3, [pc, #64]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a2e:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
      switch (saiclocksource)
 8008a32:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a36:	d03d      	beq.n	8008ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
 8008a38:	d91e      	bls.n	8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>
 8008a3a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008a3e:	f000 81ad 	beq.w	8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8008a42:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008a46:	d128      	bne.n	8008a9a <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008a48:	4a08      	ldr	r2, [pc, #32]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008a4a:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8008a4c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a50:	6812      	ldr	r2, [r2, #0]
 8008a52:	f012 0f04 	tst.w	r2, #4
 8008a56:	d038      	beq.n	8008aca <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d136      	bne.n	8008aca <HAL_RCCEx_GetPeriphCLKFreq+0x302>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008a5c:	4b03      	ldr	r3, [pc, #12]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008a64:	4803      	ldr	r0, [pc, #12]	@ (8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 8008a66:	40d8      	lsrs	r0, r3
 8008a68:	e187      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 8008a6a:	bf00      	nop
 8008a6c:	58024400 	.word	0x58024400
 8008a70:	00bb8000 	.word	0x00bb8000
 8008a74:	03d09000 	.word	0x03d09000
      switch (saiclocksource)
 8008a78:	b18b      	cbz	r3, 8008a9e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8008a7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008a7e:	d10a      	bne.n	8008a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a80:	4b99      	ldr	r3, [pc, #612]	@ (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008a82:	6818      	ldr	r0, [r3, #0]
 8008a84:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8008a88:	f000 8177 	beq.w	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a8c:	a804      	add	r0, sp, #16
 8008a8e:	f7ff fba1 	bl	80081d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a92:	9804      	ldr	r0, [sp, #16]
 8008a94:	e171      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = 0;
 8008a96:	2000      	movs	r0, #0
 8008a98:	e16f      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 8008a9a:	2000      	movs	r0, #0
 8008a9c:	e16d      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a9e:	4b92      	ldr	r3, [pc, #584]	@ (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008aa0:	6818      	ldr	r0, [r3, #0]
 8008aa2:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8008aa6:	f000 8168 	beq.w	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008aaa:	a807      	add	r0, sp, #28
 8008aac:	f7ff fd8e 	bl	80085cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ab0:	9808      	ldr	r0, [sp, #32]
 8008ab2:	e162      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008ab4:	4b8c      	ldr	r3, [pc, #560]	@ (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008ab6:	6818      	ldr	r0, [r3, #0]
 8008ab8:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8008abc:	f000 815d 	beq.w	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ac0:	a801      	add	r0, sp, #4
 8008ac2:	f7ff fc85 	bl	80083d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008ac6:	9801      	ldr	r0, [sp, #4]
 8008ac8:	e157      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008aca:	4a87      	ldr	r2, [pc, #540]	@ (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008acc:	6812      	ldr	r2, [r2, #0]
 8008ace:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8008ad2:	d003      	beq.n	8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8008ad4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ad8:	f000 8162 	beq.w	8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008adc:	4a82      	ldr	r2, [pc, #520]	@ (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008ade:	6812      	ldr	r2, [r2, #0]
 8008ae0:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8008ae4:	f000 815e 	beq.w	8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
 8008ae8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008aec:	f000 815c 	beq.w	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
            frequency = 0;
 8008af0:	2000      	movs	r0, #0
 8008af2:	e142      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008af4:	4b7c      	ldr	r3, [pc, #496]	@ (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008af6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008af8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
      switch (srcclk)
 8008afc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b00:	d035      	beq.n	8008b6e <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 8008b02:	d916      	bls.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 8008b04:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008b08:	f000 8150 	beq.w	8008dac <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8008b0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b10:	d120      	bne.n	8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008b12:	4a75      	ldr	r2, [pc, #468]	@ (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008b14:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8008b16:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008b1a:	6812      	ldr	r2, [r2, #0]
 8008b1c:	f012 0f04 	tst.w	r2, #4
 8008b20:	d030      	beq.n	8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8008b22:	bb7b      	cbnz	r3, 8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008b24:	4b70      	ldr	r3, [pc, #448]	@ (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008b2c:	486f      	ldr	r0, [pc, #444]	@ (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008b2e:	40d8      	lsrs	r0, r3
 8008b30:	e123      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (srcclk)
 8008b32:	b18b      	cbz	r3, 8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8008b34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b38:	d10a      	bne.n	8008b50 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b3a:	4b6b      	ldr	r3, [pc, #428]	@ (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008b3c:	6818      	ldr	r0, [r3, #0]
 8008b3e:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8008b42:	f000 811a 	beq.w	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b46:	a804      	add	r0, sp, #16
 8008b48:	f7ff fb44 	bl	80081d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008b4c:	9804      	ldr	r0, [sp, #16]
 8008b4e:	e114      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = 0;
 8008b50:	2000      	movs	r0, #0
 8008b52:	e112      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 8008b54:	2000      	movs	r0, #0
 8008b56:	e110      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b58:	4b63      	ldr	r3, [pc, #396]	@ (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008b5a:	6818      	ldr	r0, [r3, #0]
 8008b5c:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8008b60:	f000 810b 	beq.w	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b64:	a807      	add	r0, sp, #28
 8008b66:	f7ff fd31 	bl	80085cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b6a:	9808      	ldr	r0, [sp, #32]
 8008b6c:	e105      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b6e:	4b5e      	ldr	r3, [pc, #376]	@ (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008b70:	6818      	ldr	r0, [r3, #0]
 8008b72:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8008b76:	f000 8100 	beq.w	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b7a:	a801      	add	r0, sp, #4
 8008b7c:	f7ff fc28 	bl	80083d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008b80:	9801      	ldr	r0, [sp, #4]
 8008b82:	e0fa      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008b84:	4a58      	ldr	r2, [pc, #352]	@ (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008b86:	6812      	ldr	r2, [r2, #0]
 8008b88:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8008b8c:	d003      	beq.n	8008b96 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8008b8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b92:	f000 810d 	beq.w	8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008b96:	4a54      	ldr	r2, [pc, #336]	@ (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008b98:	6812      	ldr	r2, [r2, #0]
 8008b9a:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8008b9e:	f000 8109 	beq.w	8008db4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
 8008ba2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ba6:	f000 8107 	beq.w	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
            frequency = 0;
 8008baa:	2000      	movs	r0, #0
 8008bac:	e0e5      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008bae:	4b4e      	ldr	r3, [pc, #312]	@ (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bb2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
      switch (srcclk)
 8008bb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008bba:	d010      	beq.n	8008bde <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 8008bbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008bc0:	d018      	beq.n	8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
 8008bc2:	b10b      	cbz	r3, 8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x400>
 8008bc4:	2000      	movs	r0, #0
 8008bc6:	e0d8      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008bc8:	4b47      	ldr	r3, [pc, #284]	@ (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008bca:	6818      	ldr	r0, [r3, #0]
 8008bcc:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8008bd0:	f000 80d3 	beq.w	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bd4:	a804      	add	r0, sp, #16
 8008bd6:	f7ff fafd 	bl	80081d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008bda:	9804      	ldr	r0, [sp, #16]
 8008bdc:	e0cd      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008bde:	4b42      	ldr	r3, [pc, #264]	@ (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008be0:	6818      	ldr	r0, [r3, #0]
 8008be2:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8008be6:	f000 80c8 	beq.w	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bea:	a801      	add	r0, sp, #4
 8008bec:	f7ff fbf0 	bl	80083d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008bf0:	9803      	ldr	r0, [sp, #12]
 8008bf2:	e0c2      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008bf4:	4a3c      	ldr	r2, [pc, #240]	@ (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008bf6:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8008bf8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008bfc:	6812      	ldr	r2, [r2, #0]
 8008bfe:	f012 0f04 	tst.w	r2, #4
 8008c02:	d007      	beq.n	8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
 8008c04:	b933      	cbnz	r3, 8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008c06:	4b38      	ldr	r3, [pc, #224]	@ (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008c0e:	4837      	ldr	r0, [pc, #220]	@ (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008c10:	40d8      	lsrs	r0, r3
 8008c12:	e0b2      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008c14:	4a34      	ldr	r2, [pc, #208]	@ (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008c16:	6812      	ldr	r2, [r2, #0]
 8008c18:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8008c1c:	d003      	beq.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
 8008c1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c22:	f000 80cb 	beq.w	8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x5f4>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c26:	4a30      	ldr	r2, [pc, #192]	@ (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008c28:	6812      	ldr	r2, [r2, #0]
 8008c2a:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8008c2e:	f000 80c7 	beq.w	8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
 8008c32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c36:	f000 80c5 	beq.w	8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
            frequency = 0;
 8008c3a:	2000      	movs	r0, #0
 8008c3c:	e09d      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008c3e:	4b2a      	ldr	r3, [pc, #168]	@ (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      switch (srcclk)
 8008c42:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 8008c46:	d002      	beq.n	8008c4e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 8008c48:	b963      	cbnz	r3, 8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x49c>
 8008c4a:	2000      	movs	r0, #0
 8008c4c:	e095      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008c4e:	4b26      	ldr	r3, [pc, #152]	@ (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008c50:	6818      	ldr	r0, [r3, #0]
 8008c52:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8008c56:	f000 8090 	beq.w	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c5a:	a807      	add	r0, sp, #28
 8008c5c:	f7ff fcb6 	bl	80085cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c60:	9808      	ldr	r0, [sp, #32]
 8008c62:	e08a      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c64:	4b20      	ldr	r3, [pc, #128]	@ (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008c66:	6818      	ldr	r0, [r3, #0]
 8008c68:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8008c6c:	f000 8085 	beq.w	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c70:	a804      	add	r0, sp, #16
 8008c72:	f7ff faaf 	bl	80081d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008c76:	9806      	ldr	r0, [sp, #24]
 8008c78:	e07f      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8008c7a:	4b1b      	ldr	r3, [pc, #108]	@ (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c7e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
      switch (srcclk)
 8008c82:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008c86:	d035      	beq.n	8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
 8008c88:	d815      	bhi.n	8008cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 8008c8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c8e:	d021      	beq.n	8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
 8008c90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c94:	d109      	bne.n	8008caa <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c96:	4b14      	ldr	r3, [pc, #80]	@ (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008c98:	6818      	ldr	r0, [r3, #0]
 8008c9a:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8008c9e:	d06c      	beq.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ca0:	a801      	add	r0, sp, #4
 8008ca2:	f7ff fb95 	bl	80083d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008ca6:	9802      	ldr	r0, [sp, #8]
 8008ca8:	e067      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (srcclk)
 8008caa:	b913      	cbnz	r3, 8008cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008cac:	f7ff fa80 	bl	80081b0 <HAL_RCCEx_GetD3PCLK1Freq>
          break;
 8008cb0:	e063      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (srcclk)
 8008cb2:	2000      	movs	r0, #0
 8008cb4:	e061      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 8008cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cba:	d026      	beq.n	8008d0a <HAL_RCCEx_GetPeriphCLKFreq+0x542>
 8008cbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008cc0:	d106      	bne.n	8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x508>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008cc2:	4b09      	ldr	r3, [pc, #36]	@ (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008cc4:	6818      	ldr	r0, [r3, #0]
 8008cc6:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8008cca:	d056      	beq.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = HSE_VALUE;
 8008ccc:	4808      	ldr	r0, [pc, #32]	@ (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008cce:	e054      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (srcclk)
 8008cd0:	2000      	movs	r0, #0
 8008cd2:	e052      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008cd4:	4b04      	ldr	r3, [pc, #16]	@ (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008cd6:	6818      	ldr	r0, [r3, #0]
 8008cd8:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8008cdc:	d04d      	beq.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cde:	a804      	add	r0, sp, #16
 8008ce0:	f7ff fa78 	bl	80081d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008ce4:	9805      	ldr	r0, [sp, #20]
 8008ce6:	e048      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 8008ce8:	58024400 	.word	0x58024400
 8008cec:	03d09000 	.word	0x03d09000
 8008cf0:	016e3600 	.word	0x016e3600
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008cf4:	4b34      	ldr	r3, [pc, #208]	@ (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 8008cf6:	6818      	ldr	r0, [r3, #0]
 8008cf8:	f010 0004 	ands.w	r0, r0, #4
 8008cfc:	d03d      	beq.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008d04:	4831      	ldr	r0, [pc, #196]	@ (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8008d06:	40d8      	lsrs	r0, r3
 8008d08:	e037      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008d0a:	4b2f      	ldr	r3, [pc, #188]	@ (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 8008d0c:	6818      	ldr	r0, [r3, #0]
 8008d0e:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 8008d12:	d032      	beq.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = CSI_VALUE;
 8008d14:	482e      	ldr	r0, [pc, #184]	@ (8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 8008d16:	e030      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8008d18:	4b2b      	ldr	r3, [pc, #172]	@ (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 8008d1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d1c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
      switch (srcclk)
 8008d20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d24:	d00c      	beq.n	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8008d26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d2a:	d013      	beq.n	8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>
 8008d2c:	b10b      	cbz	r3, 8008d32 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8008d2e:	2000      	movs	r0, #0
  return frequency;
 8008d30:	e023      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008d32:	4b25      	ldr	r3, [pc, #148]	@ (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 8008d34:	6818      	ldr	r0, [r3, #0]
 8008d36:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8008d3a:	d01e      	beq.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = HSE_VALUE;
 8008d3c:	4825      	ldr	r0, [pc, #148]	@ (8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 8008d3e:	e01c      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008d40:	4b21      	ldr	r3, [pc, #132]	@ (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 8008d42:	6818      	ldr	r0, [r3, #0]
 8008d44:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8008d48:	d017      	beq.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d4a:	a807      	add	r0, sp, #28
 8008d4c:	f7ff fc3e 	bl	80085cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d50:	9808      	ldr	r0, [sp, #32]
 8008d52:	e012      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d54:	4b1c      	ldr	r3, [pc, #112]	@ (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 8008d56:	6818      	ldr	r0, [r3, #0]
 8008d58:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8008d5c:	d00d      	beq.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d5e:	a804      	add	r0, sp, #16
 8008d60:	f7ff fa38 	bl	80081d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008d64:	9805      	ldr	r0, [sp, #20]
 8008d66:	e008      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = 0;
 8008d68:	2000      	movs	r0, #0
 8008d6a:	e006      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = CSI_VALUE;
 8008d6c:	4818      	ldr	r0, [pc, #96]	@ (8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 8008d6e:	e004      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = 0;
 8008d70:	2000      	movs	r0, #0
 8008d72:	e002      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = HSE_VALUE;
 8008d74:	4817      	ldr	r0, [pc, #92]	@ (8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 8008d76:	e000      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (saiclocksource)
 8008d78:	4817      	ldr	r0, [pc, #92]	@ (8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x610>)
}
 8008d7a:	b00b      	add	sp, #44	@ 0x2c
 8008d7c:	f85d fb04 	ldr.w	pc, [sp], #4
            frequency = CSI_VALUE;
 8008d80:	4813      	ldr	r0, [pc, #76]	@ (8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 8008d82:	e7fa      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = 0;
 8008d84:	2000      	movs	r0, #0
 8008d86:	e7f8      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = HSE_VALUE;
 8008d88:	4812      	ldr	r0, [pc, #72]	@ (8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 8008d8a:	e7f6      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (saiclocksource)
 8008d8c:	4812      	ldr	r0, [pc, #72]	@ (8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x610>)
 8008d8e:	e7f4      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = CSI_VALUE;
 8008d90:	480f      	ldr	r0, [pc, #60]	@ (8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 8008d92:	e7f2      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = 0;
 8008d94:	2000      	movs	r0, #0
 8008d96:	e7f0      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = HSE_VALUE;
 8008d98:	480e      	ldr	r0, [pc, #56]	@ (8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 8008d9a:	e7ee      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (saiclocksource)
 8008d9c:	480e      	ldr	r0, [pc, #56]	@ (8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x610>)
 8008d9e:	e7ec      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = CSI_VALUE;
 8008da0:	480b      	ldr	r0, [pc, #44]	@ (8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 8008da2:	e7ea      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = 0;
 8008da4:	2000      	movs	r0, #0
 8008da6:	e7e8      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = HSE_VALUE;
 8008da8:	480a      	ldr	r0, [pc, #40]	@ (8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 8008daa:	e7e6      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (srcclk)
 8008dac:	480a      	ldr	r0, [pc, #40]	@ (8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x610>)
 8008dae:	e7e4      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = CSI_VALUE;
 8008db0:	4807      	ldr	r0, [pc, #28]	@ (8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 8008db2:	e7e2      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = 0;
 8008db4:	2000      	movs	r0, #0
 8008db6:	e7e0      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = HSE_VALUE;
 8008db8:	4806      	ldr	r0, [pc, #24]	@ (8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 8008dba:	e7de      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = CSI_VALUE;
 8008dbc:	4804      	ldr	r0, [pc, #16]	@ (8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 8008dbe:	e7dc      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = 0;
 8008dc0:	2000      	movs	r0, #0
 8008dc2:	e7da      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = HSE_VALUE;
 8008dc4:	4803      	ldr	r0, [pc, #12]	@ (8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 8008dc6:	e7d8      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 8008dc8:	58024400 	.word	0x58024400
 8008dcc:	03d09000 	.word	0x03d09000
 8008dd0:	003d0900 	.word	0x003d0900
 8008dd4:	016e3600 	.word	0x016e3600
 8008dd8:	00bb8000 	.word	0x00bb8000

08008ddc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008ddc:	b570      	push	{r4, r5, r6, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8008de2:	2300      	movs	r3, #0
 8008de4:	9301      	str	r3, [sp, #4]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008de6:	6800      	ldr	r0, [r0, #0]
 8008de8:	f002 fde4 	bl	800b9b4 <SDMMC_CmdGoIdleState>
  if (errorstate != HAL_SD_ERROR_NONE)
 8008dec:	4605      	mov	r5, r0
 8008dee:	b110      	cbz	r0, 8008df6 <SD_PowerON+0x1a>
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
}
 8008df0:	4628      	mov	r0, r5
 8008df2:	b002      	add	sp, #8
 8008df4:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008df6:	6820      	ldr	r0, [r4, #0]
 8008df8:	f003 f8b4 	bl	800bf64 <SDMMC_CmdOperCond>
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8008dfc:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8008e00:	d007      	beq.n	8008e12 <SD_PowerON+0x36>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008e02:	2301      	movs	r3, #1
 8008e04:	63e3      	str	r3, [r4, #60]	@ 0x3c
  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8008e06:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d00b      	beq.n	8008e24 <SD_PowerON+0x48>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008e0c:	462e      	mov	r6, r5
 8008e0e:	4628      	mov	r0, r5
 8008e10:	e014      	b.n	8008e3c <SD_PowerON+0x60>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008e12:	2300      	movs	r3, #0
 8008e14:	63e3      	str	r3, [r4, #60]	@ 0x3c
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008e16:	6820      	ldr	r0, [r4, #0]
 8008e18:	f002 fdcc 	bl	800b9b4 <SDMMC_CmdGoIdleState>
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e1c:	2800      	cmp	r0, #0
 8008e1e:	d0f2      	beq.n	8008e06 <SD_PowerON+0x2a>
      return errorstate;
 8008e20:	4605      	mov	r5, r0
 8008e22:	e7e5      	b.n	8008df0 <SD_PowerON+0x14>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008e24:	2100      	movs	r1, #0
 8008e26:	6820      	ldr	r0, [r4, #0]
 8008e28:	f002 fee7 	bl	800bbfa <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e2c:	2800      	cmp	r0, #0
 8008e2e:	d0ed      	beq.n	8008e0c <SD_PowerON+0x30>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008e30:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8008e34:	e7dc      	b.n	8008df0 <SD_PowerON+0x14>
    count++;
 8008e36:	9b01      	ldr	r3, [sp, #4]
 8008e38:	3301      	adds	r3, #1
 8008e3a:	9301      	str	r3, [sp, #4]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008e3c:	9a01      	ldr	r2, [sp, #4]
 8008e3e:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d813      	bhi.n	8008e6e <SD_PowerON+0x92>
 8008e46:	b996      	cbnz	r6, 8008e6e <SD_PowerON+0x92>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008e48:	2100      	movs	r1, #0
 8008e4a:	6820      	ldr	r0, [r4, #0]
 8008e4c:	f002 fed5 	bl	800bbfa <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e50:	b9d0      	cbnz	r0, 8008e88 <SD_PowerON+0xac>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8008e52:	4912      	ldr	r1, [pc, #72]	@ (8008e9c <SD_PowerON+0xc0>)
 8008e54:	6820      	ldr	r0, [r4, #0]
 8008e56:	f002 ffd1 	bl	800bdfc <SDMMC_CmdAppOperCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e5a:	4606      	mov	r6, r0
 8008e5c:	b9b0      	cbnz	r0, 8008e8c <SD_PowerON+0xb0>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008e5e:	2100      	movs	r1, #0
 8008e60:	6820      	ldr	r0, [r4, #0]
 8008e62:	f002 fd92 	bl	800b98a <SDMMC_GetResponse>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008e66:	0fc3      	lsrs	r3, r0, #31
 8008e68:	d0e5      	beq.n	8008e36 <SD_PowerON+0x5a>
 8008e6a:	461e      	mov	r6, r3
 8008e6c:	e7e3      	b.n	8008e36 <SD_PowerON+0x5a>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8008e6e:	9a01      	ldr	r2, [sp, #4]
 8008e70:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d80c      	bhi.n	8008e92 <SD_PowerON+0xb6>
  hsd->SdCard.CardType = CARD_SDSC;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	63a3      	str	r3, [r4, #56]	@ 0x38
  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8008e7c:	f010 4380 	ands.w	r3, r0, #1073741824	@ 0x40000000
 8008e80:	d00a      	beq.n	8008e98 <SD_PowerON+0xbc>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008e82:	2301      	movs	r3, #1
 8008e84:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008e86:	e7b3      	b.n	8008df0 <SD_PowerON+0x14>
      return errorstate;
 8008e88:	4605      	mov	r5, r0
 8008e8a:	e7b1      	b.n	8008df0 <SD_PowerON+0x14>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008e8c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8008e90:	e7ae      	b.n	8008df0 <SD_PowerON+0x14>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008e92:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
 8008e96:	e7ab      	b.n	8008df0 <SD_PowerON+0x14>
  return HAL_SD_ERROR_NONE;
 8008e98:	461d      	mov	r5, r3
 8008e9a:	e7a9      	b.n	8008df0 <SD_PowerON+0x14>
 8008e9c:	c1100000 	.word	0xc1100000

08008ea0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008ea0:	b570      	push	{r4, r5, r6, lr}
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8008ea2:	6a44      	ldr	r4, [r0, #36]	@ 0x24

  if (hsd->RxXferSize >= 32U)
 8008ea4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8008ea6:	2b1f      	cmp	r3, #31
 8008ea8:	d815      	bhi.n	8008ed6 <SD_Read_IT+0x36>
    }

    hsd->pRxBuffPtr = tmp;
    hsd->RxXferSize -= 32U;
  }
}
 8008eaa:	bd70      	pop	{r4, r5, r6, pc}
      data = SDMMC_ReadFIFO(hsd->Instance);
 8008eac:	6830      	ldr	r0, [r6, #0]
 8008eae:	f002 fd45 	bl	800b93c <SDMMC_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 8008eb2:	7020      	strb	r0, [r4, #0]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008eb4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8008eb8:	7063      	strb	r3, [r4, #1]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008eba:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8008ebe:	70a3      	strb	r3, [r4, #2]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008ec0:	0e00      	lsrs	r0, r0, #24
 8008ec2:	70e0      	strb	r0, [r4, #3]
      tmp++;
 8008ec4:	3404      	adds	r4, #4
    for (count = 0U; count < 8U; count++)
 8008ec6:	3501      	adds	r5, #1
 8008ec8:	2d07      	cmp	r5, #7
 8008eca:	d9ef      	bls.n	8008eac <SD_Read_IT+0xc>
    hsd->pRxBuffPtr = tmp;
 8008ecc:	6274      	str	r4, [r6, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 8008ece:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8008ed0:	3b20      	subs	r3, #32
 8008ed2:	62b3      	str	r3, [r6, #40]	@ 0x28
}
 8008ed4:	e7e9      	b.n	8008eaa <SD_Read_IT+0xa>
 8008ed6:	4606      	mov	r6, r0
    for (count = 0U; count < 8U; count++)
 8008ed8:	2500      	movs	r5, #0
 8008eda:	e7f5      	b.n	8008ec8 <SD_Read_IT+0x28>

08008edc <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008edc:	b570      	push	{r4, r5, r6, lr}
 8008ede:	b082      	sub	sp, #8
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8008ee0:	69c4      	ldr	r4, [r0, #28]

  if (hsd->TxXferSize >= 32U)
 8008ee2:	6a03      	ldr	r3, [r0, #32]
 8008ee4:	2b1f      	cmp	r3, #31
 8008ee6:	d81c      	bhi.n	8008f22 <SD_Write_IT+0x46>
    }

    hsd->pTxBuffPtr = tmp;
    hsd->TxXferSize -= 32U;
  }
}
 8008ee8:	b002      	add	sp, #8
 8008eea:	bd70      	pop	{r4, r5, r6, pc}
      data = (uint32_t)(*tmp);
 8008eec:	7823      	ldrb	r3, [r4, #0]
 8008eee:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 8008ef0:	7862      	ldrb	r2, [r4, #1]
 8008ef2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008ef6:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 8008ef8:	78a2      	ldrb	r2, [r4, #2]
 8008efa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008efe:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 8008f00:	78e2      	ldrb	r2, [r4, #3]
 8008f02:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008f06:	9301      	str	r3, [sp, #4]
      tmp++;
 8008f08:	3404      	adds	r4, #4
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008f0a:	a901      	add	r1, sp, #4
 8008f0c:	6830      	ldr	r0, [r6, #0]
 8008f0e:	f002 fd18 	bl	800b942 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8008f12:	3501      	adds	r5, #1
 8008f14:	2d07      	cmp	r5, #7
 8008f16:	d9e9      	bls.n	8008eec <SD_Write_IT+0x10>
    hsd->pTxBuffPtr = tmp;
 8008f18:	61f4      	str	r4, [r6, #28]
    hsd->TxXferSize -= 32U;
 8008f1a:	6a33      	ldr	r3, [r6, #32]
 8008f1c:	3b20      	subs	r3, #32
 8008f1e:	6233      	str	r3, [r6, #32]
}
 8008f20:	e7e2      	b.n	8008ee8 <SD_Write_IT+0xc>
 8008f22:	4606      	mov	r6, r0
    for (count = 0U; count < 8U; count++)
 8008f24:	2500      	movs	r5, #0
 8008f26:	e7f5      	b.n	8008f14 <SD_Write_IT+0x38>

08008f28 <SD_SendSDStatus>:
{
 8008f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f2a:	b087      	sub	sp, #28
 8008f2c:	4605      	mov	r5, r0
 8008f2e:	460e      	mov	r6, r1
  uint32_t tickstart = HAL_GetTick();
 8008f30:	f7fa f8d6 	bl	80030e0 <HAL_GetTick>
 8008f34:	4607      	mov	r7, r0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008f36:	2100      	movs	r1, #0
 8008f38:	6828      	ldr	r0, [r5, #0]
 8008f3a:	f002 fd26 	bl	800b98a <SDMMC_GetResponse>
 8008f3e:	f010 7f00 	tst.w	r0, #33554432	@ 0x2000000
 8008f42:	d164      	bne.n	800900e <SD_SendSDStatus+0xe6>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8008f44:	2140      	movs	r1, #64	@ 0x40
 8008f46:	6828      	ldr	r0, [r5, #0]
 8008f48:	f002 fdf8 	bl	800bb3c <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	b110      	cbz	r0, 8008f56 <SD_SendSDStatus+0x2e>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008f50:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8008f52:	636a      	str	r2, [r5, #52]	@ 0x34
    return errorstate;
 8008f54:	e05d      	b.n	8009012 <SD_SendSDStatus+0xea>
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008f56:	6c69      	ldr	r1, [r5, #68]	@ 0x44
 8008f58:	0409      	lsls	r1, r1, #16
 8008f5a:	6828      	ldr	r0, [r5, #0]
 8008f5c:	f002 fe4d 	bl	800bbfa <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f60:	4603      	mov	r3, r0
 8008f62:	b110      	cbz	r0, 8008f6a <SD_SendSDStatus+0x42>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008f64:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8008f66:	636a      	str	r2, [r5, #52]	@ 0x34
    return errorstate;
 8008f68:	e053      	b.n	8009012 <SD_SendSDStatus+0xea>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f6e:	9300      	str	r3, [sp, #0]
  config.DataLength    = 64U;
 8008f70:	2340      	movs	r3, #64	@ 0x40
 8008f72:	9301      	str	r3, [sp, #4]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8008f74:	2360      	movs	r3, #96	@ 0x60
 8008f76:	9302      	str	r3, [sp, #8]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008f78:	2302      	movs	r3, #2
 8008f7a:	9303      	str	r3, [sp, #12]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	9304      	str	r3, [sp, #16]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008f80:	2301      	movs	r3, #1
 8008f82:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008f84:	4669      	mov	r1, sp
 8008f86:	6828      	ldr	r0, [r5, #0]
 8008f88:	f002 fd02 	bl	800b990 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008f8c:	6828      	ldr	r0, [r5, #0]
 8008f8e:	f002 fe98 	bl	800bcc2 <SDMMC_CmdStatusRegister>
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f92:	4603      	mov	r3, r0
 8008f94:	b180      	cbz	r0, 8008fb8 <SD_SendSDStatus+0x90>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008f96:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8008f98:	636a      	str	r2, [r5, #52]	@ 0x34
    return errorstate;
 8008f9a:	e03a      	b.n	8009012 <SD_SendSDStatus+0xea>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008f9c:	6828      	ldr	r0, [r5, #0]
 8008f9e:	f002 fccd 	bl	800b93c <SDMMC_ReadFIFO>
 8008fa2:	f846 0b04 	str.w	r0, [r6], #4
      for (count = 0U; count < 8U; count++)
 8008fa6:	3401      	adds	r4, #1
 8008fa8:	2c07      	cmp	r4, #7
 8008faa:	d9f7      	bls.n	8008f9c <SD_SendSDStatus+0x74>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008fac:	f7fa f898 	bl	80030e0 <HAL_GetTick>
 8008fb0:	1bc0      	subs	r0, r0, r7
 8008fb2:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008fb6:	d02f      	beq.n	8009018 <SD_SendSDStatus+0xf0>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008fb8:	682b      	ldr	r3, [r5, #0]
 8008fba:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8008fbc:	f414 7495 	ands.w	r4, r4, #298	@ 0x12a
 8008fc0:	d104      	bne.n	8008fcc <SD_SendSDStatus+0xa4>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008fc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fc4:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8008fc8:	d0f0      	beq.n	8008fac <SD_SendSDStatus+0x84>
 8008fca:	e7ed      	b.n	8008fa8 <SD_SendSDStatus+0x80>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008fcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008fce:	f012 0f08 	tst.w	r2, #8
 8008fd2:	d124      	bne.n	800901e <SD_SendSDStatus+0xf6>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008fd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008fd6:	f012 0f02 	tst.w	r2, #2
 8008fda:	d122      	bne.n	8009022 <SD_SendSDStatus+0xfa>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008fdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fde:	f013 0f20 	tst.w	r3, #32
 8008fe2:	d120      	bne.n	8009026 <SD_SendSDStatus+0xfe>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8008fe4:	6828      	ldr	r0, [r5, #0]
 8008fe6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8008fe8:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 8008fec:	d00c      	beq.n	8009008 <SD_SendSDStatus+0xe0>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008fee:	f002 fca5 	bl	800b93c <SDMMC_ReadFIFO>
 8008ff2:	f846 0b04 	str.w	r0, [r6], #4
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008ff6:	f7fa f873 	bl	80030e0 <HAL_GetTick>
 8008ffa:	1bc0      	subs	r0, r0, r7
 8008ffc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009000:	d1f0      	bne.n	8008fe4 <SD_SendSDStatus+0xbc>
      return HAL_SD_ERROR_TIMEOUT;
 8009002:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009006:	e004      	b.n	8009012 <SD_SendSDStatus+0xea>
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009008:	4a08      	ldr	r2, [pc, #32]	@ (800902c <SD_SendSDStatus+0x104>)
 800900a:	6382      	str	r2, [r0, #56]	@ 0x38
  return HAL_SD_ERROR_NONE;
 800900c:	e001      	b.n	8009012 <SD_SendSDStatus+0xea>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800900e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
}
 8009012:	4618      	mov	r0, r3
 8009014:	b007      	add	sp, #28
 8009016:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_SD_ERROR_TIMEOUT;
 8009018:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800901c:	e7f9      	b.n	8009012 <SD_SendSDStatus+0xea>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800901e:	2308      	movs	r3, #8
 8009020:	e7f7      	b.n	8009012 <SD_SendSDStatus+0xea>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009022:	2302      	movs	r3, #2
 8009024:	e7f5      	b.n	8009012 <SD_SendSDStatus+0xea>
    return HAL_SD_ERROR_RX_OVERRUN;
 8009026:	2320      	movs	r3, #32
 8009028:	e7f3      	b.n	8009012 <SD_SendSDStatus+0xea>
 800902a:	bf00      	nop
 800902c:	18000f3a 	.word	0x18000f3a

08009030 <SD_FindSCR>:
{
 8009030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009032:	b089      	sub	sp, #36	@ 0x24
 8009034:	4604      	mov	r4, r0
 8009036:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8009038:	f7fa f852 	bl	80030e0 <HAL_GetTick>
 800903c:	4605      	mov	r5, r0
  uint32_t tempscr[2U] = {0UL, 0UL};
 800903e:	2300      	movs	r3, #0
 8009040:	9300      	str	r3, [sp, #0]
 8009042:	9301      	str	r3, [sp, #4]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009044:	2108      	movs	r1, #8
 8009046:	6820      	ldr	r0, [r4, #0]
 8009048:	f002 fd78 	bl	800bb3c <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800904c:	4606      	mov	r6, r0
 800904e:	b110      	cbz	r0, 8009056 <SD_FindSCR+0x26>
}
 8009050:	4630      	mov	r0, r6
 8009052:	b009      	add	sp, #36	@ 0x24
 8009054:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009056:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009058:	0409      	lsls	r1, r1, #16
 800905a:	6820      	ldr	r0, [r4, #0]
 800905c:	f002 fdcd 	bl	800bbfa <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009060:	4606      	mov	r6, r0
 8009062:	2800      	cmp	r0, #0
 8009064:	d1f4      	bne.n	8009050 <SD_FindSCR+0x20>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009066:	f04f 33ff 	mov.w	r3, #4294967295
 800906a:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 800906c:	2308      	movs	r3, #8
 800906e:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009070:	2330      	movs	r3, #48	@ 0x30
 8009072:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009074:	2302      	movs	r3, #2
 8009076:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009078:	2300      	movs	r3, #0
 800907a:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800907c:	2301      	movs	r3, #1
 800907e:	9307      	str	r3, [sp, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009080:	a902      	add	r1, sp, #8
 8009082:	6820      	ldr	r0, [r4, #0]
 8009084:	f002 fc84 	bl	800b990 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009088:	6820      	ldr	r0, [r4, #0]
 800908a:	f002 fde8 	bl	800bc5e <SDMMC_CmdSendSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 800908e:	4606      	mov	r6, r0
 8009090:	b130      	cbz	r0, 80090a0 <SD_FindSCR+0x70>
 8009092:	e7dd      	b.n	8009050 <SD_FindSCR+0x20>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009094:	f7fa f824 	bl	80030e0 <HAL_GetTick>
 8009098:	1b43      	subs	r3, r0, r5
 800909a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800909e:	d046      	beq.n	800912e <SD_FindSCR+0xfe>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80090a0:	6820      	ldr	r0, [r4, #0]
 80090a2:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80090a4:	f240 532a 	movw	r3, #1322	@ 0x52a
 80090a8:	421a      	tst	r2, r3
 80090aa:	d10e      	bne.n	80090ca <SD_FindSCR+0x9a>
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80090ac:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80090ae:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 80090b2:	d1ef      	bne.n	8009094 <SD_FindSCR+0x64>
 80090b4:	2e00      	cmp	r6, #0
 80090b6:	d1ed      	bne.n	8009094 <SD_FindSCR+0x64>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80090b8:	f002 fc40 	bl	800b93c <SDMMC_ReadFIFO>
 80090bc:	9000      	str	r0, [sp, #0]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80090be:	6820      	ldr	r0, [r4, #0]
 80090c0:	f002 fc3c 	bl	800b93c <SDMMC_ReadFIFO>
 80090c4:	9001      	str	r0, [sp, #4]
      index++;
 80090c6:	3601      	adds	r6, #1
 80090c8:	e7e4      	b.n	8009094 <SD_FindSCR+0x64>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80090ca:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80090cc:	f013 0f08 	tst.w	r3, #8
 80090d0:	d124      	bne.n	800911c <SD_FindSCR+0xec>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80090d2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80090d4:	f013 0f02 	tst.w	r3, #2
 80090d8:	d123      	bne.n	8009122 <SD_FindSCR+0xf2>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80090da:	6b46      	ldr	r6, [r0, #52]	@ 0x34
 80090dc:	f016 0620 	ands.w	r6, r6, #32
 80090e0:	d122      	bne.n	8009128 <SD_FindSCR+0xf8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80090e2:	4b14      	ldr	r3, [pc, #80]	@ (8009134 <SD_FindSCR+0x104>)
 80090e4:	6383      	str	r3, [r0, #56]	@ 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80090e6:	9a01      	ldr	r2, [sp, #4]
 80090e8:	0213      	lsls	r3, r2, #8
 80090ea:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80090ee:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80090f2:	0a11      	lsrs	r1, r2, #8
 80090f4:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80090f8:	430b      	orrs	r3, r1
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80090fa:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80090fe:	603b      	str	r3, [r7, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009100:	9a00      	ldr	r2, [sp, #0]
 8009102:	0213      	lsls	r3, r2, #8
 8009104:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009108:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800910c:	0a11      	lsrs	r1, r2, #8
 800910e:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009112:	430b      	orrs	r3, r1
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009114:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009118:	607b      	str	r3, [r7, #4]
  return HAL_SD_ERROR_NONE;
 800911a:	e799      	b.n	8009050 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800911c:	2608      	movs	r6, #8
 800911e:	6386      	str	r6, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009120:	e796      	b.n	8009050 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009122:	2602      	movs	r6, #2
 8009124:	6386      	str	r6, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009126:	e793      	b.n	8009050 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009128:	2620      	movs	r6, #32
 800912a:	6386      	str	r6, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 800912c:	e790      	b.n	8009050 <SD_FindSCR+0x20>
      return HAL_SD_ERROR_TIMEOUT;
 800912e:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
 8009132:	e78d      	b.n	8009050 <SD_FindSCR+0x20>
 8009134:	18000f3a 	.word	0x18000f3a

08009138 <SD_WideBus_Enable>:
{
 8009138:	b510      	push	{r4, lr}
 800913a:	b082      	sub	sp, #8
 800913c:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0UL, 0UL};
 800913e:	2100      	movs	r1, #0
 8009140:	9100      	str	r1, [sp, #0]
 8009142:	9101      	str	r1, [sp, #4]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009144:	6800      	ldr	r0, [r0, #0]
 8009146:	f002 fc20 	bl	800b98a <SDMMC_GetResponse>
 800914a:	f010 7f00 	tst.w	r0, #33554432	@ 0x2000000
 800914e:	d113      	bne.n	8009178 <SD_WideBus_Enable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 8009150:	4669      	mov	r1, sp
 8009152:	4620      	mov	r0, r4
 8009154:	f7ff ff6c 	bl	8009030 <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009158:	b980      	cbnz	r0, 800917c <SD_WideBus_Enable+0x44>
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800915a:	9b01      	ldr	r3, [sp, #4]
 800915c:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8009160:	d00e      	beq.n	8009180 <SD_WideBus_Enable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009162:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009164:	0409      	lsls	r1, r1, #16
 8009166:	6820      	ldr	r0, [r4, #0]
 8009168:	f002 fd47 	bl	800bbfa <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800916c:	b930      	cbnz	r0, 800917c <SD_WideBus_Enable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800916e:	2102      	movs	r1, #2
 8009170:	6820      	ldr	r0, [r4, #0]
 8009172:	f002 fd5b 	bl	800bc2c <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
 8009176:	e001      	b.n	800917c <SD_WideBus_Enable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009178:	f44f 6000 	mov.w	r0, #2048	@ 0x800
}
 800917c:	b002      	add	sp, #8
 800917e:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009180:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8009184:	e7fa      	b.n	800917c <SD_WideBus_Enable+0x44>

08009186 <SD_WideBus_Disable>:
{
 8009186:	b510      	push	{r4, lr}
 8009188:	b082      	sub	sp, #8
 800918a:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0UL, 0UL};
 800918c:	2100      	movs	r1, #0
 800918e:	9100      	str	r1, [sp, #0]
 8009190:	9101      	str	r1, [sp, #4]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009192:	6800      	ldr	r0, [r0, #0]
 8009194:	f002 fbf9 	bl	800b98a <SDMMC_GetResponse>
 8009198:	f010 7f00 	tst.w	r0, #33554432	@ 0x2000000
 800919c:	d113      	bne.n	80091c6 <SD_WideBus_Disable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 800919e:	4669      	mov	r1, sp
 80091a0:	4620      	mov	r0, r4
 80091a2:	f7ff ff45 	bl	8009030 <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 80091a6:	b980      	cbnz	r0, 80091ca <SD_WideBus_Disable+0x44>
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80091a8:	9b01      	ldr	r3, [sp, #4]
 80091aa:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80091ae:	d00e      	beq.n	80091ce <SD_WideBus_Disable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80091b0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80091b2:	0409      	lsls	r1, r1, #16
 80091b4:	6820      	ldr	r0, [r4, #0]
 80091b6:	f002 fd20 	bl	800bbfa <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 80091ba:	b930      	cbnz	r0, 80091ca <SD_WideBus_Disable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80091bc:	2100      	movs	r1, #0
 80091be:	6820      	ldr	r0, [r4, #0]
 80091c0:	f002 fd34 	bl	800bc2c <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
 80091c4:	e001      	b.n	80091ca <SD_WideBus_Disable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80091c6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
}
 80091ca:	b002      	add	sp, #8
 80091cc:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80091ce:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80091d2:	e7fa      	b.n	80091ca <SD_WideBus_Disable+0x44>

080091d4 <SD_SendStatus>:
{
 80091d4:	b570      	push	{r4, r5, r6, lr}
  if (pCardStatus == NULL)
 80091d6:	b181      	cbz	r1, 80091fa <SD_SendStatus+0x26>
 80091d8:	4604      	mov	r4, r0
 80091da:	460e      	mov	r6, r1
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80091dc:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 80091de:	0409      	lsls	r1, r1, #16
 80091e0:	6800      	ldr	r0, [r0, #0]
 80091e2:	f002 fd55 	bl	800bc90 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 80091e6:	4605      	mov	r5, r0
 80091e8:	b108      	cbz	r0, 80091ee <SD_SendStatus+0x1a>
}
 80091ea:	4628      	mov	r0, r5
 80091ec:	bd70      	pop	{r4, r5, r6, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80091ee:	2100      	movs	r1, #0
 80091f0:	6820      	ldr	r0, [r4, #0]
 80091f2:	f002 fbca 	bl	800b98a <SDMMC_GetResponse>
 80091f6:	6030      	str	r0, [r6, #0]
  return HAL_SD_ERROR_NONE;
 80091f8:	e7f7      	b.n	80091ea <SD_SendStatus+0x16>
    return HAL_SD_ERROR_PARAM;
 80091fa:	f04f 6500 	mov.w	r5, #134217728	@ 0x8000000
 80091fe:	e7f4      	b.n	80091ea <SD_SendStatus+0x16>

08009200 <HAL_SD_TxCpltCallback>:
}
 8009200:	4770      	bx	lr

08009202 <HAL_SD_RxCpltCallback>:
}
 8009202:	4770      	bx	lr

08009204 <HAL_SD_ErrorCallback>:
}
 8009204:	4770      	bx	lr
	...

08009208 <HAL_SD_GetCardCSD>:
{
 8009208:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800920a:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 800920c:	0f92      	lsrs	r2, r2, #30
 800920e:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009210:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8009212:	f3c2 6283 	ubfx	r2, r2, #26, #4
 8009216:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009218:	f890 205f 	ldrb.w	r2, [r0, #95]	@ 0x5f
 800921c:	f002 0203 	and.w	r2, r2, #3
 8009220:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009222:	f890 205e 	ldrb.w	r2, [r0, #94]	@ 0x5e
 8009226:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009228:	f890 205d 	ldrb.w	r2, [r0, #93]	@ 0x5d
 800922c:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800922e:	f890 205c 	ldrb.w	r2, [r0, #92]	@ 0x5c
 8009232:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009234:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8009236:	0d12      	lsrs	r2, r2, #20
 8009238:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800923a:	f8b0 2062 	ldrh.w	r2, [r0, #98]	@ 0x62
 800923e:	f002 020f 	and.w	r2, r2, #15
 8009242:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009244:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8009246:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800924a:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800924c:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 800924e:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8009252:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009254:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8009256:	f3c2 3240 	ubfx	r2, r2, #13, #1
 800925a:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800925c:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 800925e:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8009262:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009264:	2200      	movs	r2, #0
 8009266:	734a      	strb	r2, [r1, #13]
  if (hsd->SdCard.CardType == CARD_SDSC)
 8009268:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 800926a:	2a00      	cmp	r2, #0
 800926c:	f040 8086 	bne.w	800937c <HAL_SD_GetCardCSD+0x174>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009270:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 8009272:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8009276:	ea02 0280 	and.w	r2, r2, r0, lsl #2
 800927a:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 800927c:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 8009280:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009282:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009284:	f3c2 62c2 	ubfx	r2, r2, #27, #3
 8009288:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800928a:	f893 2067 	ldrb.w	r2, [r3, #103]	@ 0x67
 800928e:	f002 0207 	and.w	r2, r2, #7
 8009292:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009294:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009296:	f3c2 5242 	ubfx	r2, r2, #21, #3
 800929a:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800929c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800929e:	f3c2 4282 	ubfx	r2, r2, #18, #3
 80092a2:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80092a4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80092a6:	f3c2 32c2 	ubfx	r2, r2, #15, #3
 80092aa:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80092ac:	690a      	ldr	r2, [r1, #16]
 80092ae:	3201      	adds	r2, #1
 80092b0:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80092b2:	7e08      	ldrb	r0, [r1, #24]
 80092b4:	f000 0007 	and.w	r0, r0, #7
 80092b8:	3002      	adds	r0, #2
 80092ba:	4082      	lsls	r2, r0
 80092bc:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80092be:	f891 c008 	ldrb.w	ip, [r1, #8]
 80092c2:	f00c 0c0f 	and.w	ip, ip, #15
 80092c6:	2001      	movs	r0, #1
 80092c8:	fa00 f00c 	lsl.w	r0, r0, ip
 80092cc:	64d8      	str	r0, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80092ce:	0a40      	lsrs	r0, r0, #9
 80092d0:	fb00 f202 	mul.w	r2, r0, r2
 80092d4:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 80092d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80092da:	655a      	str	r2, [r3, #84]	@ 0x54
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80092dc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80092de:	f3c2 3280 	ubfx	r2, r2, #14, #1
 80092e2:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80092e4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80092e6:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 80092ea:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80092ec:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80092ee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80092f2:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80092f4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80092f6:	0fd2      	lsrs	r2, r2, #31
 80092f8:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80092fa:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80092fc:	f3c2 7241 	ubfx	r2, r2, #29, #2
 8009300:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009302:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8009304:	f3c2 6282 	ubfx	r2, r2, #26, #3
 8009308:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800930a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800930c:	f3c2 5283 	ubfx	r2, r2, #22, #4
 8009310:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009312:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8009314:	f3c2 5240 	ubfx	r2, r2, #21, #1
 8009318:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 800931c:	2000      	movs	r0, #0
 800931e:	f881 0021 	strb.w	r0, [r1, #33]	@ 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009322:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8009326:	f002 0201 	and.w	r2, r2, #1
 800932a:	f881 2022 	strb.w	r2, [r1, #34]	@ 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800932e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8009330:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8009334:	f881 2023 	strb.w	r2, [r1, #35]	@ 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009338:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800933a:	f3c2 3280 	ubfx	r2, r2, #14, #1
 800933e:	f881 2024 	strb.w	r2, [r1, #36]	@ 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009342:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8009344:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8009348:	f881 2025 	strb.w	r2, [r1, #37]	@ 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800934c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800934e:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8009352:	f881 2026 	strb.w	r2, [r1, #38]	@ 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009356:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8009358:	f3c2 2281 	ubfx	r2, r2, #10, #2
 800935c:	f881 2027 	strb.w	r2, [r1, #39]	@ 0x27
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009360:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8009362:	f3c2 2201 	ubfx	r2, r2, #8, #2
 8009366:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800936a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800936c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8009370:	f881 3029 	strb.w	r3, [r1, #41]	@ 0x29
  pCSD->Reserved4 = 1;
 8009374:	2301      	movs	r3, #1
 8009376:	f881 302a 	strb.w	r3, [r1, #42]	@ 0x2a
}
 800937a:	4770      	bx	lr
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800937c:	2a01      	cmp	r2, #1
 800937e:	d111      	bne.n	80093a4 <HAL_SD_GetCardCSD+0x19c>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009380:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8009382:	0412      	lsls	r2, r2, #16
 8009384:	f402 127c 	and.w	r2, r2, #4128768	@ 0x3f0000
 8009388:	f8b0 0066 	ldrh.w	r0, [r0, #102]	@ 0x66
 800938c:	4302      	orrs	r2, r0
 800938e:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009390:	690a      	ldr	r2, [r1, #16]
 8009392:	3201      	adds	r2, #1
 8009394:	0292      	lsls	r2, r2, #10
 8009396:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009398:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800939a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800939e:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80093a0:	655a      	str	r2, [r3, #84]	@ 0x54
 80093a2:	e79b      	b.n	80092dc <HAL_SD_GetCardCSD+0xd4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80093a4:	6802      	ldr	r2, [r0, #0]
 80093a6:	4905      	ldr	r1, [pc, #20]	@ (80093bc <HAL_SD_GetCardCSD+0x1b4>)
 80093a8:	6391      	str	r1, [r2, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80093aa:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80093ac:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80093b0:	6342      	str	r2, [r0, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80093b2:	2001      	movs	r0, #1
 80093b4:	f883 0030 	strb.w	r0, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80093b8:	4770      	bx	lr
 80093ba:	bf00      	nop
 80093bc:	1fe00fff 	.word	0x1fe00fff

080093c0 <SD_InitCard>:
{
 80093c0:	b530      	push	{r4, r5, lr}
 80093c2:	b08d      	sub	sp, #52	@ 0x34
 80093c4:	4604      	mov	r4, r0
  uint16_t sd_rca = 0U;
 80093c6:	2300      	movs	r3, #0
 80093c8:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint32_t tickstart = HAL_GetTick();
 80093cc:	f7f9 fe88 	bl	80030e0 <HAL_GetTick>
 80093d0:	4605      	mov	r5, r0
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 80093d2:	6820      	ldr	r0, [r4, #0]
 80093d4:	f002 fac0 	bl	800b958 <SDMMC_GetPowerState>
 80093d8:	2800      	cmp	r0, #0
 80093da:	d067      	beq.n	80094ac <SD_InitCard+0xec>
  if (hsd->SdCard.CardType != CARD_SECURED)
 80093dc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80093de:	2b03      	cmp	r3, #3
 80093e0:	d117      	bne.n	8009412 <SD_InitCard+0x52>
  if (hsd->SdCard.CardType != CARD_SECURED)
 80093e2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80093e4:	2b03      	cmp	r3, #3
 80093e6:	d02f      	beq.n	8009448 <SD_InitCard+0x88>
    while (sd_rca == 0U)
 80093e8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80093ec:	bb63      	cbnz	r3, 8009448 <SD_InitCard+0x88>
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80093ee:	f10d 0102 	add.w	r1, sp, #2
 80093f2:	6820      	ldr	r0, [r4, #0]
 80093f4:	f002 fd6a 	bl	800becc <SDMMC_CmdSetRelAdd>
      if (errorstate != HAL_SD_ERROR_NONE)
 80093f8:	4603      	mov	r3, r0
 80093fa:	2800      	cmp	r0, #0
 80093fc:	d158      	bne.n	80094b0 <SD_InitCard+0xf0>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 80093fe:	f7f9 fe6f 	bl	80030e0 <HAL_GetTick>
 8009402:	1b43      	subs	r3, r0, r5
 8009404:	f241 3287 	movw	r2, #4999	@ 0x1387
 8009408:	4293      	cmp	r3, r2
 800940a:	d9ed      	bls.n	80093e8 <SD_InitCard+0x28>
        return HAL_SD_ERROR_TIMEOUT;
 800940c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009410:	e04e      	b.n	80094b0 <SD_InitCard+0xf0>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009412:	6820      	ldr	r0, [r4, #0]
 8009414:	f002 fc9e 	bl	800bd54 <SDMMC_CmdSendCID>
    if (errorstate != HAL_SD_ERROR_NONE)
 8009418:	4603      	mov	r3, r0
 800941a:	2800      	cmp	r0, #0
 800941c:	d148      	bne.n	80094b0 <SD_InitCard+0xf0>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800941e:	2100      	movs	r1, #0
 8009420:	6820      	ldr	r0, [r4, #0]
 8009422:	f002 fab2 	bl	800b98a <SDMMC_GetResponse>
 8009426:	66e0      	str	r0, [r4, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009428:	2104      	movs	r1, #4
 800942a:	6820      	ldr	r0, [r4, #0]
 800942c:	f002 faad 	bl	800b98a <SDMMC_GetResponse>
 8009430:	6720      	str	r0, [r4, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009432:	2108      	movs	r1, #8
 8009434:	6820      	ldr	r0, [r4, #0]
 8009436:	f002 faa8 	bl	800b98a <SDMMC_GetResponse>
 800943a:	6760      	str	r0, [r4, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800943c:	210c      	movs	r1, #12
 800943e:	6820      	ldr	r0, [r4, #0]
 8009440:	f002 faa3 	bl	800b98a <SDMMC_GetResponse>
 8009444:	67a0      	str	r0, [r4, #120]	@ 0x78
 8009446:	e7cc      	b.n	80093e2 <SD_InitCard+0x22>
  if (hsd->SdCard.CardType != CARD_SECURED)
 8009448:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800944a:	2b03      	cmp	r3, #3
 800944c:	d01c      	beq.n	8009488 <SD_InitCard+0xc8>
    hsd->SdCard.RelCardAdd = sd_rca;
 800944e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8009452:	6461      	str	r1, [r4, #68]	@ 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009454:	0409      	lsls	r1, r1, #16
 8009456:	6820      	ldr	r0, [r4, #0]
 8009458:	f002 fc92 	bl	800bd80 <SDMMC_CmdSendCSD>
    if (errorstate != HAL_SD_ERROR_NONE)
 800945c:	4603      	mov	r3, r0
 800945e:	bb38      	cbnz	r0, 80094b0 <SD_InitCard+0xf0>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009460:	2100      	movs	r1, #0
 8009462:	6820      	ldr	r0, [r4, #0]
 8009464:	f002 fa91 	bl	800b98a <SDMMC_GetResponse>
 8009468:	65e0      	str	r0, [r4, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800946a:	2104      	movs	r1, #4
 800946c:	6820      	ldr	r0, [r4, #0]
 800946e:	f002 fa8c 	bl	800b98a <SDMMC_GetResponse>
 8009472:	6620      	str	r0, [r4, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009474:	2108      	movs	r1, #8
 8009476:	6820      	ldr	r0, [r4, #0]
 8009478:	f002 fa87 	bl	800b98a <SDMMC_GetResponse>
 800947c:	6660      	str	r0, [r4, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800947e:	210c      	movs	r1, #12
 8009480:	6820      	ldr	r0, [r4, #0]
 8009482:	f002 fa82 	bl	800b98a <SDMMC_GetResponse>
 8009486:	66a0      	str	r0, [r4, #104]	@ 0x68
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009488:	2104      	movs	r1, #4
 800948a:	6820      	ldr	r0, [r4, #0]
 800948c:	f002 fa7d 	bl	800b98a <SDMMC_GetResponse>
 8009490:	0d00      	lsrs	r0, r0, #20
 8009492:	6420      	str	r0, [r4, #64]	@ 0x40
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009494:	a901      	add	r1, sp, #4
 8009496:	4620      	mov	r0, r4
 8009498:	f7ff feb6 	bl	8009208 <HAL_SD_GetCardCSD>
 800949c:	b958      	cbnz	r0, 80094b6 <SD_InitCard+0xf6>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800949e:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80094a0:	0409      	lsls	r1, r1, #16
 80094a2:	6820      	ldr	r0, [r4, #0]
 80094a4:	f002 fb90 	bl	800bbc8 <SDMMC_CmdSelDesel>
 80094a8:	4603      	mov	r3, r0
  if (errorstate != HAL_SD_ERROR_NONE)
 80094aa:	e001      	b.n	80094b0 <SD_InitCard+0xf0>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80094ac:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	b00d      	add	sp, #52	@ 0x34
 80094b4:	bd30      	pop	{r4, r5, pc}
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80094b6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80094ba:	e7f9      	b.n	80094b0 <SD_InitCard+0xf0>

080094bc <HAL_SD_InitCard>:
{
 80094bc:	b570      	push	{r4, r5, r6, lr}
 80094be:	b088      	sub	sp, #32
 80094c0:	4604      	mov	r4, r0
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80094c2:	2300      	movs	r3, #0
 80094c4:	9303      	str	r3, [sp, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80094c6:	9304      	str	r3, [sp, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80094c8:	9305      	str	r3, [sp, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80094ca:	9306      	str	r3, [sp, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80094cc:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80094d0:	f7ff f97a 	bl	80087c8 <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
 80094d4:	b938      	cbnz	r0, 80094e6 <HAL_SD_InitCard+0x2a>
    hsd->State = HAL_SD_STATE_READY;
 80094d6:	2001      	movs	r0, #1
 80094d8:	f884 0030 	strb.w	r0, [r4, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80094dc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80094e0:	6363      	str	r3, [r4, #52]	@ 0x34
}
 80094e2:	b008      	add	sp, #32
 80094e4:	bd70      	pop	{r4, r5, r6, pc}
 80094e6:	4606      	mov	r6, r0
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80094e8:	0a05      	lsrs	r5, r0, #8
 80094ea:	4b22      	ldr	r3, [pc, #136]	@ (8009574 <HAL_SD_InitCard+0xb8>)
 80094ec:	fba3 3505 	umull	r3, r5, r3, r5
 80094f0:	092d      	lsrs	r5, r5, #4
 80094f2:	9507      	str	r5, [sp, #28]
  (void)SDMMC_Init(hsd->Instance, Init);
 80094f4:	ab08      	add	r3, sp, #32
 80094f6:	e913 0003 	ldmdb	r3, {r0, r1}
 80094fa:	e88d 0003 	stmia.w	sp, {r0, r1}
 80094fe:	ab03      	add	r3, sp, #12
 8009500:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009502:	6820      	ldr	r0, [r4, #0]
 8009504:	f002 fa02 	bl	800b90c <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009508:	6820      	ldr	r0, [r4, #0]
 800950a:	f002 fa1f 	bl	800b94c <SDMMC_PowerState_ON>
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800950e:	006d      	lsls	r5, r5, #1
 8009510:	fbb6 f6f5 	udiv	r6, r6, r5
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8009514:	4818      	ldr	r0, [pc, #96]	@ (8009578 <HAL_SD_InitCard+0xbc>)
 8009516:	fbb0 f0f6 	udiv	r0, r0, r6
 800951a:	3001      	adds	r0, #1
 800951c:	f7f9 fde6 	bl	80030ec <HAL_Delay>
  errorstate = SD_PowerON(hsd);
 8009520:	4620      	mov	r0, r4
 8009522:	f7ff fc5b 	bl	8008ddc <SD_PowerON>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009526:	4602      	mov	r2, r0
 8009528:	b130      	cbz	r0, 8009538 <HAL_SD_InitCard+0x7c>
    hsd->State = HAL_SD_STATE_READY;
 800952a:	2001      	movs	r0, #1
 800952c:	f884 0030 	strb.w	r0, [r4, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8009530:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009532:	4313      	orrs	r3, r2
 8009534:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8009536:	e7d4      	b.n	80094e2 <HAL_SD_InitCard+0x26>
  errorstate = SD_InitCard(hsd);
 8009538:	4620      	mov	r0, r4
 800953a:	f7ff ff41 	bl	80093c0 <SD_InitCard>
  if (errorstate != HAL_SD_ERROR_NONE)
 800953e:	4602      	mov	r2, r0
 8009540:	b130      	cbz	r0, 8009550 <HAL_SD_InitCard+0x94>
    hsd->State = HAL_SD_STATE_READY;
 8009542:	2001      	movs	r0, #1
 8009544:	f884 0030 	strb.w	r0, [r4, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8009548:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800954a:	4313      	orrs	r3, r2
 800954c:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 800954e:	e7c8      	b.n	80094e2 <HAL_SD_InitCard+0x26>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009550:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009554:	6820      	ldr	r0, [r4, #0]
 8009556:	f002 faf1 	bl	800bb3c <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800955a:	b908      	cbnz	r0, 8009560 <HAL_SD_InitCard+0xa4>
  return HAL_OK;
 800955c:	2000      	movs	r0, #0
 800955e:	e7c0      	b.n	80094e2 <HAL_SD_InitCard+0x26>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009560:	6823      	ldr	r3, [r4, #0]
 8009562:	4906      	ldr	r1, [pc, #24]	@ (800957c <HAL_SD_InitCard+0xc0>)
 8009564:	6399      	str	r1, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009566:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009568:	4303      	orrs	r3, r0
 800956a:	6363      	str	r3, [r4, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800956c:	2001      	movs	r0, #1
 800956e:	f884 0030 	strb.w	r0, [r4, #48]	@ 0x30
    return HAL_ERROR;
 8009572:	e7b6      	b.n	80094e2 <HAL_SD_InitCard+0x26>
 8009574:	014f8b59 	.word	0x014f8b59
 8009578:	00012110 	.word	0x00012110
 800957c:	1fe00fff 	.word	0x1fe00fff

08009580 <HAL_SD_GetCardStatus>:
{
 8009580:	b530      	push	{r4, r5, lr}
 8009582:	b091      	sub	sp, #68	@ 0x44
  if (hsd->State == HAL_SD_STATE_BUSY)
 8009584:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8009588:	b2db      	uxtb	r3, r3
 800958a:	2b03      	cmp	r3, #3
 800958c:	d059      	beq.n	8009642 <HAL_SD_GetCardStatus+0xc2>
 800958e:	4604      	mov	r4, r0
 8009590:	460d      	mov	r5, r1
  errorstate = SD_SendSDStatus(hsd, sd_status);
 8009592:	4669      	mov	r1, sp
 8009594:	f7ff fcc8 	bl	8008f28 <SD_SendSDStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009598:	b1b8      	cbz	r0, 80095ca <HAL_SD_GetCardStatus+0x4a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800959a:	6823      	ldr	r3, [r4, #0]
 800959c:	492b      	ldr	r1, [pc, #172]	@ (800964c <HAL_SD_GetCardStatus+0xcc>)
 800959e:	6399      	str	r1, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80095a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80095a2:	4303      	orrs	r3, r0
 80095a4:	6363      	str	r3, [r4, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80095a6:	2501      	movs	r5, #1
 80095a8:	f884 5030 	strb.w	r5, [r4, #48]	@ 0x30
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80095ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80095b0:	6820      	ldr	r0, [r4, #0]
 80095b2:	f002 fac3 	bl	800bb3c <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 80095b6:	2800      	cmp	r0, #0
 80095b8:	d044      	beq.n	8009644 <HAL_SD_GetCardStatus+0xc4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80095ba:	6822      	ldr	r2, [r4, #0]
 80095bc:	4923      	ldr	r1, [pc, #140]	@ (800964c <HAL_SD_GetCardStatus+0xcc>)
 80095be:	6391      	str	r1, [r2, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 80095c0:	6360      	str	r0, [r4, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80095c2:	2501      	movs	r5, #1
 80095c4:	f884 5030 	strb.w	r5, [r4, #48]	@ 0x30
    status = HAL_ERROR;
 80095c8:	e03c      	b.n	8009644 <HAL_SD_GetCardStatus+0xc4>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80095ca:	9a00      	ldr	r2, [sp, #0]
 80095cc:	f3c2 1381 	ubfx	r3, r2, #6, #2
 80095d0:	702b      	strb	r3, [r5, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80095d2:	f3c2 1340 	ubfx	r3, r2, #5, #1
 80095d6:	706b      	strb	r3, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80095d8:	0a13      	lsrs	r3, r2, #8
 80095da:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80095de:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	806b      	strh	r3, [r5, #2]
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80095e6:	9a01      	ldr	r2, [sp, #4]
 80095e8:	0213      	lsls	r3, r2, #8
 80095ea:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80095ee:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80095f2:	0a11      	lsrs	r1, r2, #8
 80095f4:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80095f8:	430b      	orrs	r3, r1
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80095fa:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80095fe:	606b      	str	r3, [r5, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009600:	9b02      	ldr	r3, [sp, #8]
 8009602:	b2da      	uxtb	r2, r3
 8009604:	722a      	strb	r2, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8009606:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800960a:	726a      	strb	r2, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800960c:	f3c3 5203 	ubfx	r2, r3, #20, #4
 8009610:	72aa      	strb	r2, [r5, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8009612:	0c1b      	lsrs	r3, r3, #16
 8009614:	9a03      	ldr	r2, [sp, #12]
 8009616:	b2d1      	uxtb	r1, r2
 8009618:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800961c:	430b      	orrs	r3, r1
 800961e:	81ab      	strh	r3, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8009620:	f3c2 2385 	ubfx	r3, r2, #10, #6
 8009624:	73ab      	strb	r3, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8009626:	f3c2 2301 	ubfx	r3, r2, #8, #2
 800962a:	73eb      	strb	r3, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800962c:	f3c2 1303 	ubfx	r3, r2, #4, #4
 8009630:	742b      	strb	r3, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8009632:	f002 020f 	and.w	r2, r2, #15
 8009636:	746a      	strb	r2, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8009638:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800963c:	74ab      	strb	r3, [r5, #18]
  HAL_StatusTypeDef status = HAL_OK;
 800963e:	2500      	movs	r5, #0
 8009640:	e7b4      	b.n	80095ac <HAL_SD_GetCardStatus+0x2c>
    return HAL_ERROR;
 8009642:	2501      	movs	r5, #1
}
 8009644:	4628      	mov	r0, r5
 8009646:	b011      	add	sp, #68	@ 0x44
 8009648:	bd30      	pop	{r4, r5, pc}
 800964a:	bf00      	nop
 800964c:	1fe00fff 	.word	0x1fe00fff

08009650 <HAL_SD_ConfigWideBusOperation>:
{
 8009650:	b530      	push	{r4, r5, lr}
 8009652:	b089      	sub	sp, #36	@ 0x24
 8009654:	4604      	mov	r4, r0
 8009656:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 8009658:	2303      	movs	r3, #3
 800965a:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
  if (hsd->SdCard.CardType != CARD_SECURED)
 800965e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8009660:	2b03      	cmp	r3, #3
 8009662:	d01c      	beq.n	800969e <HAL_SD_ConfigWideBusOperation+0x4e>
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8009664:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8009668:	d008      	beq.n	800967c <HAL_SD_ConfigWideBusOperation+0x2c>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800966a:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 800966e:	d00a      	beq.n	8009686 <HAL_SD_ConfigWideBusOperation+0x36>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8009670:	b179      	cbz	r1, 8009692 <HAL_SD_ConfigWideBusOperation+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009672:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8009674:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009678:	6343      	str	r3, [r0, #52]	@ 0x34
 800967a:	e014      	b.n	80096a6 <HAL_SD_ConfigWideBusOperation+0x56>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800967c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800967e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009682:	6343      	str	r3, [r0, #52]	@ 0x34
 8009684:	e00f      	b.n	80096a6 <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Enable(hsd);
 8009686:	f7ff fd57 	bl	8009138 <SD_WideBus_Enable>
      hsd->ErrorCode |= errorstate;
 800968a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800968c:	4303      	orrs	r3, r0
 800968e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009690:	e009      	b.n	80096a6 <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Disable(hsd);
 8009692:	f7ff fd78 	bl	8009186 <SD_WideBus_Disable>
      hsd->ErrorCode |= errorstate;
 8009696:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009698:	4303      	orrs	r3, r0
 800969a:	6363      	str	r3, [r4, #52]	@ 0x34
 800969c:	e003      	b.n	80096a6 <HAL_SD_ConfigWideBusOperation+0x56>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800969e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80096a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80096a4:	6343      	str	r3, [r0, #52]	@ 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80096a6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80096a8:	b1b3      	cbz	r3, 80096d8 <HAL_SD_ConfigWideBusOperation+0x88>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80096aa:	6823      	ldr	r3, [r4, #0]
 80096ac:	4a39      	ldr	r2, [pc, #228]	@ (8009794 <HAL_SD_ConfigWideBusOperation+0x144>)
 80096ae:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 80096b0:	2501      	movs	r5, #1
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80096b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80096b6:	6820      	ldr	r0, [r4, #0]
 80096b8:	f002 fa40 	bl	800bb3c <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 80096bc:	b130      	cbz	r0, 80096cc <HAL_SD_ConfigWideBusOperation+0x7c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80096be:	6823      	ldr	r3, [r4, #0]
 80096c0:	4934      	ldr	r1, [pc, #208]	@ (8009794 <HAL_SD_ConfigWideBusOperation+0x144>)
 80096c2:	6399      	str	r1, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80096c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80096c6:	4303      	orrs	r3, r0
 80096c8:	6363      	str	r3, [r4, #52]	@ 0x34
    status = HAL_ERROR;
 80096ca:	2501      	movs	r5, #1
  hsd->State = HAL_SD_STATE_READY;
 80096cc:	2301      	movs	r3, #1
 80096ce:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
}
 80096d2:	4628      	mov	r0, r5
 80096d4:	b009      	add	sp, #36	@ 0x24
 80096d6:	bd30      	pop	{r4, r5, pc}
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80096d8:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80096dc:	f7ff f874 	bl	80087c8 <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
 80096e0:	4602      	mov	r2, r0
 80096e2:	2800      	cmp	r0, #0
 80096e4:	d050      	beq.n	8009788 <HAL_SD_ConfigWideBusOperation+0x138>
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80096e6:	6863      	ldr	r3, [r4, #4]
 80096e8:	9303      	str	r3, [sp, #12]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80096ea:	68a3      	ldr	r3, [r4, #8]
 80096ec:	9304      	str	r3, [sp, #16]
      Init.BusWide             = WideMode;
 80096ee:	9505      	str	r5, [sp, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80096f0:	6923      	ldr	r3, [r4, #16]
 80096f2:	9306      	str	r3, [sp, #24]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80096f4:	6961      	ldr	r1, [r4, #20]
 80096f6:	4b28      	ldr	r3, [pc, #160]	@ (8009798 <HAL_SD_ConfigWideBusOperation+0x148>)
 80096f8:	fba3 0302 	umull	r0, r3, r3, r2
 80096fc:	0e18      	lsrs	r0, r3, #24
 80096fe:	ebb1 6f13 	cmp.w	r1, r3, lsr #24
 8009702:	d30c      	bcc.n	800971e <HAL_SD_ConfigWideBusOperation+0xce>
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009704:	9107      	str	r1, [sp, #28]
      (void)SDMMC_Init(hsd->Instance, Init);
 8009706:	ab08      	add	r3, sp, #32
 8009708:	e913 0003 	ldmdb	r3, {r0, r1}
 800970c:	e88d 0003 	stmia.w	sp, {r0, r1}
 8009710:	ab03      	add	r3, sp, #12
 8009712:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009714:	6820      	ldr	r0, [r4, #0]
 8009716:	f002 f8f9 	bl	800b90c <SDMMC_Init>
  HAL_StatusTypeDef status = HAL_OK;
 800971a:	2500      	movs	r5, #0
 800971c:	e7c9      	b.n	80096b2 <HAL_SD_ConfigWideBusOperation+0x62>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800971e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009720:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009724:	d008      	beq.n	8009738 <HAL_SD_ConfigWideBusOperation+0xe8>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8009726:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800972a:	d007      	beq.n	800973c <HAL_SD_ConfigWideBusOperation+0xec>
        if (hsd->Init.ClockDiv == 0U)
 800972c:	bb11      	cbnz	r1, 8009774 <HAL_SD_ConfigWideBusOperation+0x124>
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800972e:	4b1b      	ldr	r3, [pc, #108]	@ (800979c <HAL_SD_ConfigWideBusOperation+0x14c>)
 8009730:	429a      	cmp	r2, r3
 8009732:	d91d      	bls.n	8009770 <HAL_SD_ConfigWideBusOperation+0x120>
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8009734:	9007      	str	r0, [sp, #28]
 8009736:	e7e6      	b.n	8009706 <HAL_SD_ConfigWideBusOperation+0xb6>
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009738:	9107      	str	r1, [sp, #28]
 800973a:	e7e4      	b.n	8009706 <HAL_SD_ConfigWideBusOperation+0xb6>
        if (hsd->Init.ClockDiv == 0U)
 800973c:	b951      	cbnz	r1, 8009754 <HAL_SD_ConfigWideBusOperation+0x104>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800973e:	4b18      	ldr	r3, [pc, #96]	@ (80097a0 <HAL_SD_ConfigWideBusOperation+0x150>)
 8009740:	429a      	cmp	r2, r3
 8009742:	d905      	bls.n	8009750 <HAL_SD_ConfigWideBusOperation+0x100>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009744:	4b14      	ldr	r3, [pc, #80]	@ (8009798 <HAL_SD_ConfigWideBusOperation+0x148>)
 8009746:	fba3 2302 	umull	r2, r3, r3, r2
 800974a:	0e5b      	lsrs	r3, r3, #25
 800974c:	9307      	str	r3, [sp, #28]
 800974e:	e7da      	b.n	8009706 <HAL_SD_ConfigWideBusOperation+0xb6>
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009750:	9107      	str	r1, [sp, #28]
 8009752:	e7d8      	b.n	8009706 <HAL_SD_ConfigWideBusOperation+0xb6>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8009754:	004b      	lsls	r3, r1, #1
 8009756:	fbb2 f3f3 	udiv	r3, r2, r3
 800975a:	4811      	ldr	r0, [pc, #68]	@ (80097a0 <HAL_SD_ConfigWideBusOperation+0x150>)
 800975c:	4283      	cmp	r3, r0
 800975e:	d905      	bls.n	800976c <HAL_SD_ConfigWideBusOperation+0x11c>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009760:	4b0d      	ldr	r3, [pc, #52]	@ (8009798 <HAL_SD_ConfigWideBusOperation+0x148>)
 8009762:	fba3 2302 	umull	r2, r3, r3, r2
 8009766:	0e5b      	lsrs	r3, r3, #25
 8009768:	9307      	str	r3, [sp, #28]
 800976a:	e7cc      	b.n	8009706 <HAL_SD_ConfigWideBusOperation+0xb6>
            Init.ClockDiv = hsd->Init.ClockDiv;
 800976c:	9107      	str	r1, [sp, #28]
 800976e:	e7ca      	b.n	8009706 <HAL_SD_ConfigWideBusOperation+0xb6>
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009770:	9107      	str	r1, [sp, #28]
 8009772:	e7c8      	b.n	8009706 <HAL_SD_ConfigWideBusOperation+0xb6>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8009774:	004b      	lsls	r3, r1, #1
 8009776:	fbb2 f2f3 	udiv	r2, r2, r3
 800977a:	4b08      	ldr	r3, [pc, #32]	@ (800979c <HAL_SD_ConfigWideBusOperation+0x14c>)
 800977c:	429a      	cmp	r2, r3
 800977e:	d901      	bls.n	8009784 <HAL_SD_ConfigWideBusOperation+0x134>
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8009780:	9007      	str	r0, [sp, #28]
 8009782:	e7c0      	b.n	8009706 <HAL_SD_ConfigWideBusOperation+0xb6>
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009784:	9107      	str	r1, [sp, #28]
 8009786:	e7be      	b.n	8009706 <HAL_SD_ConfigWideBusOperation+0xb6>
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8009788:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800978a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800978e:	6363      	str	r3, [r4, #52]	@ 0x34
      status = HAL_ERROR;
 8009790:	2501      	movs	r5, #1
 8009792:	e78e      	b.n	80096b2 <HAL_SD_ConfigWideBusOperation+0x62>
 8009794:	1fe00fff 	.word	0x1fe00fff
 8009798:	55e63b89 	.word	0x55e63b89
 800979c:	017d7840 	.word	0x017d7840
 80097a0:	02faf080 	.word	0x02faf080

080097a4 <HAL_SD_GetCardState>:
{
 80097a4:	b510      	push	{r4, lr}
 80097a6:	b082      	sub	sp, #8
 80097a8:	4604      	mov	r4, r0
  uint32_t resp1 = 0;
 80097aa:	2300      	movs	r3, #0
 80097ac:	9301      	str	r3, [sp, #4]
  errorstate = SD_SendStatus(hsd, &resp1);
 80097ae:	a901      	add	r1, sp, #4
 80097b0:	f7ff fd10 	bl	80091d4 <SD_SendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 80097b4:	b110      	cbz	r0, 80097bc <HAL_SD_GetCardState+0x18>
    hsd->ErrorCode |= errorstate;
 80097b6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80097b8:	4303      	orrs	r3, r0
 80097ba:	6363      	str	r3, [r4, #52]	@ 0x34
}
 80097bc:	9801      	ldr	r0, [sp, #4]
 80097be:	f3c0 2043 	ubfx	r0, r0, #9, #4
 80097c2:	b002      	add	sp, #8
 80097c4:	bd10      	pop	{r4, pc}

080097c6 <HAL_SD_Init>:
{
 80097c6:	b570      	push	{r4, r5, r6, lr}
 80097c8:	b086      	sub	sp, #24
  if (hsd == NULL)
 80097ca:	2800      	cmp	r0, #0
 80097cc:	d054      	beq.n	8009878 <HAL_SD_Init+0xb2>
 80097ce:	4604      	mov	r4, r0
  if (hsd->State == HAL_SD_STATE_RESET)
 80097d0:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 80097d4:	b153      	cbz	r3, 80097ec <HAL_SD_Init+0x26>
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80097d6:	2304      	movs	r3, #4
 80097d8:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80097dc:	4620      	mov	r0, r4
 80097de:	f7ff fe6d 	bl	80094bc <HAL_SD_InitCard>
 80097e2:	b138      	cbz	r0, 80097f4 <HAL_SD_Init+0x2e>
    return HAL_ERROR;
 80097e4:	2501      	movs	r5, #1
}
 80097e6:	4628      	mov	r0, r5
 80097e8:	b006      	add	sp, #24
 80097ea:	bd70      	pop	{r4, r5, r6, pc}
    hsd->Lock = HAL_UNLOCKED;
 80097ec:	7603      	strb	r3, [r0, #24]
    HAL_SD_MspInit(hsd);
 80097ee:	f7f8 fda9 	bl	8002344 <HAL_SD_MspInit>
 80097f2:	e7f0      	b.n	80097d6 <HAL_SD_Init+0x10>
  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80097f4:	a901      	add	r1, sp, #4
 80097f6:	4620      	mov	r0, r4
 80097f8:	f7ff fec2 	bl	8009580 <HAL_SD_GetCardStatus>
 80097fc:	2800      	cmp	r0, #0
 80097fe:	d13d      	bne.n	800987c <HAL_SD_Init+0xb6>
  speedgrade = CardStatus.UhsSpeedGrade;
 8009800:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8009804:	b2db      	uxtb	r3, r3
  unitsize = CardStatus.UhsAllocationUnitSize;
 8009806:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800980a:	b2d2      	uxtb	r2, r2
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800980c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800980e:	2901      	cmp	r1, #1
 8009810:	d00b      	beq.n	800982a <HAL_SD_Init+0x64>
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009812:	2901      	cmp	r1, #1
 8009814:	d00f      	beq.n	8009836 <HAL_SD_Init+0x70>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8009816:	2300      	movs	r3, #0
 8009818:	65a3      	str	r3, [r4, #88]	@ 0x58
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800981a:	68e1      	ldr	r1, [r4, #12]
 800981c:	4620      	mov	r0, r4
 800981e:	f7ff ff17 	bl	8009650 <HAL_SD_ConfigWideBusOperation>
 8009822:	4605      	mov	r5, r0
 8009824:	b158      	cbz	r0, 800983e <HAL_SD_Init+0x78>
    return HAL_ERROR;
 8009826:	2501      	movs	r5, #1
 8009828:	e7dd      	b.n	80097e6 <HAL_SD_Init+0x20>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800982a:	4313      	orrs	r3, r2
 800982c:	d0f1      	beq.n	8009812 <HAL_SD_Init+0x4c>
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800982e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009832:	65a3      	str	r3, [r4, #88]	@ 0x58
 8009834:	e7f1      	b.n	800981a <HAL_SD_Init+0x54>
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8009836:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800983a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800983c:	e7ed      	b.n	800981a <HAL_SD_Init+0x54>
  tickstart = HAL_GetTick();
 800983e:	f7f9 fc4f 	bl	80030e0 <HAL_GetTick>
 8009842:	4606      	mov	r6, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009844:	4620      	mov	r0, r4
 8009846:	f7ff ffad 	bl	80097a4 <HAL_SD_GetCardState>
 800984a:	2804      	cmp	r0, #4
 800984c:	d00d      	beq.n	800986a <HAL_SD_Init+0xa4>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800984e:	f7f9 fc47 	bl	80030e0 <HAL_GetTick>
 8009852:	1b80      	subs	r0, r0, r6
 8009854:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009858:	d1f4      	bne.n	8009844 <HAL_SD_Init+0x7e>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800985a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800985e:	6363      	str	r3, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009860:	2301      	movs	r3, #1
 8009862:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
      return HAL_TIMEOUT;
 8009866:	2503      	movs	r5, #3
 8009868:	e7bd      	b.n	80097e6 <HAL_SD_Init+0x20>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800986a:	2300      	movs	r3, #0
 800986c:	6363      	str	r3, [r4, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800986e:	62e3      	str	r3, [r4, #44]	@ 0x2c
  hsd->State = HAL_SD_STATE_READY;
 8009870:	2301      	movs	r3, #1
 8009872:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
  return HAL_OK;
 8009876:	e7b6      	b.n	80097e6 <HAL_SD_Init+0x20>
    return HAL_ERROR;
 8009878:	2501      	movs	r5, #1
 800987a:	e7b4      	b.n	80097e6 <HAL_SD_Init+0x20>
    return HAL_ERROR;
 800987c:	2501      	movs	r5, #1
 800987e:	e7b2      	b.n	80097e6 <HAL_SD_Init+0x20>

08009880 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8009880:	4770      	bx	lr

08009882 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8009882:	4770      	bx	lr

08009884 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8009884:	4770      	bx	lr

08009886 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8009886:	4770      	bx	lr

08009888 <HAL_SD_IRQHandler>:
{
 8009888:	b538      	push	{r3, r4, r5, lr}
 800988a:	4604      	mov	r4, r0
  uint32_t context = hsd->Context;
 800988c:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800988e:	6803      	ldr	r3, [r0, #0]
 8009890:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009892:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8009896:	d002      	beq.n	800989e <HAL_SD_IRQHandler+0x16>
 8009898:	f015 0f08 	tst.w	r5, #8
 800989c:	d12a      	bne.n	80098f4 <HAL_SD_IRQHandler+0x6c>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800989e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80098a0:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80098a4:	d067      	beq.n	8009976 <HAL_SD_IRQHandler+0xee>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80098a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80098aa:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80098ac:	6822      	ldr	r2, [r4, #0]
 80098ae:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80098b0:	4b7e      	ldr	r3, [pc, #504]	@ (8009aac <HAL_SD_IRQHandler+0x224>)
 80098b2:	400b      	ands	r3, r1
 80098b4:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80098b6:	6822      	ldr	r2, [r4, #0]
 80098b8:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80098ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80098be:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80098c0:	6822      	ldr	r2, [r4, #0]
 80098c2:	68d3      	ldr	r3, [r2, #12]
 80098c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80098c8:	60d3      	str	r3, [r2, #12]
    if ((context & SD_CONTEXT_IT) != 0U)
 80098ca:	f015 0f08 	tst.w	r5, #8
 80098ce:	d025      	beq.n	800991c <HAL_SD_IRQHandler+0x94>
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80098d0:	f015 0f22 	tst.w	r5, #34	@ 0x22
 80098d4:	d111      	bne.n	80098fa <HAL_SD_IRQHandler+0x72>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80098d6:	6823      	ldr	r3, [r4, #0]
 80098d8:	4a75      	ldr	r2, [pc, #468]	@ (8009ab0 <HAL_SD_IRQHandler+0x228>)
 80098da:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80098dc:	2301      	movs	r3, #1
 80098de:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80098e2:	2300      	movs	r3, #0
 80098e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80098e6:	f015 0f03 	tst.w	r5, #3
 80098ea:	d013      	beq.n	8009914 <HAL_SD_IRQHandler+0x8c>
        HAL_SD_RxCpltCallback(hsd);
 80098ec:	4620      	mov	r0, r4
 80098ee:	f7ff fc88 	bl	8009202 <HAL_SD_RxCpltCallback>
 80098f2:	e001      	b.n	80098f8 <HAL_SD_IRQHandler+0x70>
    SD_Read_IT(hsd);
 80098f4:	f7ff fad4 	bl	8008ea0 <SD_Read_IT>
}
 80098f8:	bd38      	pop	{r3, r4, r5, pc}
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80098fa:	6820      	ldr	r0, [r4, #0]
 80098fc:	f002 f938 	bl	800bb70 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 8009900:	4603      	mov	r3, r0
 8009902:	2800      	cmp	r0, #0
 8009904:	d0e7      	beq.n	80098d6 <HAL_SD_IRQHandler+0x4e>
          hsd->ErrorCode |= errorstate;
 8009906:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8009908:	4313      	orrs	r3, r2
 800990a:	6363      	str	r3, [r4, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 800990c:	4620      	mov	r0, r4
 800990e:	f7ff fc79 	bl	8009204 <HAL_SD_ErrorCallback>
 8009912:	e7e0      	b.n	80098d6 <HAL_SD_IRQHandler+0x4e>
        HAL_SD_TxCpltCallback(hsd);
 8009914:	4620      	mov	r0, r4
 8009916:	f7ff fc73 	bl	8009200 <HAL_SD_TxCpltCallback>
 800991a:	e7ed      	b.n	80098f8 <HAL_SD_IRQHandler+0x70>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800991c:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8009920:	d0ea      	beq.n	80098f8 <HAL_SD_IRQHandler+0x70>
      hsd->Instance->DLEN = 0;
 8009922:	6822      	ldr	r2, [r4, #0]
 8009924:	2300      	movs	r3, #0
 8009926:	6293      	str	r3, [r2, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 8009928:	6822      	ldr	r2, [r4, #0]
 800992a:	62d3      	str	r3, [r2, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800992c:	6822      	ldr	r2, [r4, #0]
 800992e:	6513      	str	r3, [r2, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009930:	f015 0f22 	tst.w	r5, #34	@ 0x22
 8009934:	d10e      	bne.n	8009954 <HAL_SD_IRQHandler+0xcc>
      hsd->State = HAL_SD_STATE_READY;
 8009936:	2301      	movs	r3, #1
 8009938:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800993c:	2300      	movs	r3, #0
 800993e:	62e3      	str	r3, [r4, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009940:	f015 0f30 	tst.w	r5, #48	@ 0x30
 8009944:	d113      	bne.n	800996e <HAL_SD_IRQHandler+0xe6>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009946:	f015 0f03 	tst.w	r5, #3
 800994a:	d0d5      	beq.n	80098f8 <HAL_SD_IRQHandler+0x70>
        HAL_SD_RxCpltCallback(hsd);
 800994c:	4620      	mov	r0, r4
 800994e:	f7ff fc58 	bl	8009202 <HAL_SD_RxCpltCallback>
 8009952:	e7d1      	b.n	80098f8 <HAL_SD_IRQHandler+0x70>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009954:	6820      	ldr	r0, [r4, #0]
 8009956:	f002 f90b 	bl	800bb70 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800995a:	4603      	mov	r3, r0
 800995c:	2800      	cmp	r0, #0
 800995e:	d0ea      	beq.n	8009936 <HAL_SD_IRQHandler+0xae>
          hsd->ErrorCode |= errorstate;
 8009960:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8009962:	4313      	orrs	r3, r2
 8009964:	6363      	str	r3, [r4, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 8009966:	4620      	mov	r0, r4
 8009968:	f7ff fc4c 	bl	8009204 <HAL_SD_ErrorCallback>
 800996c:	e7e3      	b.n	8009936 <HAL_SD_IRQHandler+0xae>
        HAL_SD_TxCpltCallback(hsd);
 800996e:	4620      	mov	r0, r4
 8009970:	f7ff fc46 	bl	8009200 <HAL_SD_TxCpltCallback>
 8009974:	e7e7      	b.n	8009946 <HAL_SD_IRQHandler+0xbe>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009976:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009978:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 800997c:	d002      	beq.n	8009984 <HAL_SD_IRQHandler+0xfc>
 800997e:	f015 0f08 	tst.w	r5, #8
 8009982:	d162      	bne.n	8009a4a <HAL_SD_IRQHandler+0x1c2>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8009984:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009986:	f012 0f3a 	tst.w	r2, #58	@ 0x3a
 800998a:	d06b      	beq.n	8009a64 <HAL_SD_IRQHandler+0x1dc>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800998c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800998e:	f012 0f02 	tst.w	r2, #2
 8009992:	d003      	beq.n	800999c <HAL_SD_IRQHandler+0x114>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009994:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8009996:	f042 0202 	orr.w	r2, r2, #2
 800999a:	6362      	str	r2, [r4, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800999c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800999e:	f012 0f08 	tst.w	r2, #8
 80099a2:	d003      	beq.n	80099ac <HAL_SD_IRQHandler+0x124>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80099a4:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80099a6:	f042 0208 	orr.w	r2, r2, #8
 80099aa:	6362      	str	r2, [r4, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80099ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80099ae:	f012 0f20 	tst.w	r2, #32
 80099b2:	d003      	beq.n	80099bc <HAL_SD_IRQHandler+0x134>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80099b4:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80099b6:	f042 0220 	orr.w	r2, r2, #32
 80099ba:	6362      	str	r2, [r4, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 80099bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80099be:	f012 0f10 	tst.w	r2, #16
 80099c2:	d003      	beq.n	80099cc <HAL_SD_IRQHandler+0x144>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80099c4:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80099c6:	f042 0210 	orr.w	r2, r2, #16
 80099ca:	6362      	str	r2, [r4, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80099cc:	4a38      	ldr	r2, [pc, #224]	@ (8009ab0 <HAL_SD_IRQHandler+0x228>)
 80099ce:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80099d0:	6822      	ldr	r2, [r4, #0]
 80099d2:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80099d4:	f423 739d 	bic.w	r3, r3, #314	@ 0x13a
 80099d8:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80099da:	6822      	ldr	r2, [r4, #0]
 80099dc:	68d3      	ldr	r3, [r2, #12]
 80099de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80099e2:	60d3      	str	r3, [r2, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 80099e4:	6822      	ldr	r2, [r4, #0]
 80099e6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80099e8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80099ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 80099ee:	6822      	ldr	r2, [r4, #0]
 80099f0:	68d3      	ldr	r3, [r2, #12]
 80099f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099f6:	60d3      	str	r3, [r2, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80099f8:	6820      	ldr	r0, [r4, #0]
 80099fa:	f002 f8b9 	bl	800bb70 <SDMMC_CmdStopTransfer>
 80099fe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009a00:	4303      	orrs	r3, r0
 8009a02:	6363      	str	r3, [r4, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8009a04:	6822      	ldr	r2, [r4, #0]
 8009a06:	68d3      	ldr	r3, [r2, #12]
 8009a08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a0c:	60d3      	str	r3, [r2, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8009a0e:	6823      	ldr	r3, [r4, #0]
 8009a10:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009a14:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8009a16:	f015 0f08 	tst.w	r5, #8
 8009a1a:	d11a      	bne.n	8009a52 <HAL_SD_IRQHandler+0x1ca>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8009a1c:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8009a20:	f43f af6a 	beq.w	80098f8 <HAL_SD_IRQHandler+0x70>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009a24:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	f43f af66 	beq.w	80098f8 <HAL_SD_IRQHandler+0x70>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8009a2c:	6822      	ldr	r2, [r4, #0]
 8009a2e:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8009a30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a34:	63d3      	str	r3, [r2, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8009a36:	6823      	ldr	r3, [r4, #0]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 8009a42:	4620      	mov	r0, r4
 8009a44:	f7ff fbde 	bl	8009204 <HAL_SD_ErrorCallback>
 8009a48:	e756      	b.n	80098f8 <HAL_SD_IRQHandler+0x70>
    SD_Write_IT(hsd);
 8009a4a:	4620      	mov	r0, r4
 8009a4c:	f7ff fa46 	bl	8008edc <SD_Write_IT>
 8009a50:	e752      	b.n	80098f8 <HAL_SD_IRQHandler+0x70>
      hsd->State = HAL_SD_STATE_READY;
 8009a52:	2301      	movs	r3, #1
 8009a54:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	62e3      	str	r3, [r4, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 8009a5c:	4620      	mov	r0, r4
 8009a5e:	f7ff fbd1 	bl	8009204 <HAL_SD_ErrorCallback>
 8009a62:	e749      	b.n	80098f8 <HAL_SD_IRQHandler+0x70>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8009a64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009a66:	f012 5f80 	tst.w	r2, #268435456	@ 0x10000000
 8009a6a:	f43f af45 	beq.w	80098f8 <HAL_SD_IRQHandler+0x70>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8009a6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a72:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8009a74:	6823      	ldr	r3, [r4, #0]
 8009a76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a78:	f013 0f04 	tst.w	r3, #4
 8009a7c:	d10a      	bne.n	8009a94 <HAL_SD_IRQHandler+0x20c>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009a7e:	f015 0f20 	tst.w	r5, #32
 8009a82:	d003      	beq.n	8009a8c <HAL_SD_IRQHandler+0x204>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8009a84:	4620      	mov	r0, r4
 8009a86:	f7ff fefe 	bl	8009886 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
 8009a8a:	e735      	b.n	80098f8 <HAL_SD_IRQHandler+0x70>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8009a8c:	4620      	mov	r0, r4
 8009a8e:	f7ff fef8 	bl	8009882 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
 8009a92:	e731      	b.n	80098f8 <HAL_SD_IRQHandler+0x70>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009a94:	f015 0f20 	tst.w	r5, #32
 8009a98:	d003      	beq.n	8009aa2 <HAL_SD_IRQHandler+0x21a>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8009a9a:	4620      	mov	r0, r4
 8009a9c:	f7ff fef2 	bl	8009884 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
 8009aa0:	e72a      	b.n	80098f8 <HAL_SD_IRQHandler+0x70>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8009aa2:	4620      	mov	r0, r4
 8009aa4:	f7ff feec 	bl	8009880 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8009aa8:	e726      	b.n	80098f8 <HAL_SD_IRQHandler+0x70>
 8009aaa:	bf00      	nop
 8009aac:	ffff3ec5 	.word	0xffff3ec5
 8009ab0:	18000f3a 	.word	0x18000f3a

08009ab4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ab4:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ab6:	6a03      	ldr	r3, [r0, #32]
 8009ab8:	f023 0301 	bic.w	r3, r3, #1
 8009abc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009abe:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ac0:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ac2:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009ac4:	4b1e      	ldr	r3, [pc, #120]	@ (8009b40 <TIM_OC1_SetConfig+0x8c>)
 8009ac6:	4023      	ands	r3, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ac8:	680d      	ldr	r5, [r1, #0]
 8009aca:	431d      	orrs	r5, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009acc:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009ad0:	688b      	ldr	r3, [r1, #8]
 8009ad2:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009ad4:	4a1b      	ldr	r2, [pc, #108]	@ (8009b44 <TIM_OC1_SetConfig+0x90>)
 8009ad6:	4c1c      	ldr	r4, [pc, #112]	@ (8009b48 <TIM_OC1_SetConfig+0x94>)
 8009ad8:	42a0      	cmp	r0, r4
 8009ada:	bf18      	it	ne
 8009adc:	4290      	cmpne	r0, r2
 8009ade:	bf0c      	ite	eq
 8009ae0:	2201      	moveq	r2, #1
 8009ae2:	2200      	movne	r2, #0
 8009ae4:	d00c      	beq.n	8009b00 <TIM_OC1_SetConfig+0x4c>
 8009ae6:	f504 4480 	add.w	r4, r4, #16384	@ 0x4000
 8009aea:	42a0      	cmp	r0, r4
 8009aec:	bf14      	ite	ne
 8009aee:	2400      	movne	r4, #0
 8009af0:	2401      	moveq	r4, #1
 8009af2:	4f16      	ldr	r7, [pc, #88]	@ (8009b4c <TIM_OC1_SetConfig+0x98>)
 8009af4:	42b8      	cmp	r0, r7
 8009af6:	d003      	beq.n	8009b00 <TIM_OC1_SetConfig+0x4c>
 8009af8:	b914      	cbnz	r4, 8009b00 <TIM_OC1_SetConfig+0x4c>
 8009afa:	4c15      	ldr	r4, [pc, #84]	@ (8009b50 <TIM_OC1_SetConfig+0x9c>)
 8009afc:	42a0      	cmp	r0, r4
 8009afe:	d105      	bne.n	8009b0c <TIM_OC1_SetConfig+0x58>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009b00:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009b04:	68cc      	ldr	r4, [r1, #12]
 8009b06:	4323      	orrs	r3, r4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009b08:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b0c:	b95a      	cbnz	r2, 8009b26 <TIM_OC1_SetConfig+0x72>
 8009b0e:	4a11      	ldr	r2, [pc, #68]	@ (8009b54 <TIM_OC1_SetConfig+0xa0>)
 8009b10:	4290      	cmp	r0, r2
 8009b12:	bf14      	ite	ne
 8009b14:	2200      	movne	r2, #0
 8009b16:	2201      	moveq	r2, #1
 8009b18:	4c0c      	ldr	r4, [pc, #48]	@ (8009b4c <TIM_OC1_SetConfig+0x98>)
 8009b1a:	42a0      	cmp	r0, r4
 8009b1c:	d003      	beq.n	8009b26 <TIM_OC1_SetConfig+0x72>
 8009b1e:	b912      	cbnz	r2, 8009b26 <TIM_OC1_SetConfig+0x72>
 8009b20:	4a0b      	ldr	r2, [pc, #44]	@ (8009b50 <TIM_OC1_SetConfig+0x9c>)
 8009b22:	4290      	cmp	r0, r2
 8009b24:	d105      	bne.n	8009b32 <TIM_OC1_SetConfig+0x7e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009b26:	f426 7640 	bic.w	r6, r6, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009b2a:	694a      	ldr	r2, [r1, #20]
 8009b2c:	4332      	orrs	r2, r6
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009b2e:	698e      	ldr	r6, [r1, #24]
 8009b30:	4316      	orrs	r6, r2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b32:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b34:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009b36:	684a      	ldr	r2, [r1, #4]
 8009b38:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b3a:	6203      	str	r3, [r0, #32]
}
 8009b3c:	bcf0      	pop	{r4, r5, r6, r7}
 8009b3e:	4770      	bx	lr
 8009b40:	fffeff8c 	.word	0xfffeff8c
 8009b44:	40010000 	.word	0x40010000
 8009b48:	40010400 	.word	0x40010400
 8009b4c:	40014000 	.word	0x40014000
 8009b50:	40014800 	.word	0x40014800
 8009b54:	40014400 	.word	0x40014400

08009b58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b58:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009b5a:	6a03      	ldr	r3, [r0, #32]
 8009b5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009b60:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b62:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b64:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b66:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009b68:	4a1a      	ldr	r2, [pc, #104]	@ (8009bd4 <TIM_OC3_SetConfig+0x7c>)
 8009b6a:	4022      	ands	r2, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b6c:	680e      	ldr	r6, [r1, #0]
 8009b6e:	4316      	orrs	r6, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009b70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009b74:	688a      	ldr	r2, [r1, #8]
 8009b76:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009b7a:	4a17      	ldr	r2, [pc, #92]	@ (8009bd8 <TIM_OC3_SetConfig+0x80>)
 8009b7c:	4c17      	ldr	r4, [pc, #92]	@ (8009bdc <TIM_OC3_SetConfig+0x84>)
 8009b7e:	42a0      	cmp	r0, r4
 8009b80:	bf18      	it	ne
 8009b82:	4290      	cmpne	r0, r2
 8009b84:	bf0c      	ite	eq
 8009b86:	2201      	moveq	r2, #1
 8009b88:	2200      	movne	r2, #0
 8009b8a:	d106      	bne.n	8009b9a <TIM_OC3_SetConfig+0x42>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009b8c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009b90:	68cc      	ldr	r4, [r1, #12]
 8009b92:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009b96:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b9a:	b95a      	cbnz	r2, 8009bb4 <TIM_OC3_SetConfig+0x5c>
 8009b9c:	4a10      	ldr	r2, [pc, #64]	@ (8009be0 <TIM_OC3_SetConfig+0x88>)
 8009b9e:	4290      	cmp	r0, r2
 8009ba0:	bf14      	ite	ne
 8009ba2:	2200      	movne	r2, #0
 8009ba4:	2201      	moveq	r2, #1
 8009ba6:	4c0f      	ldr	r4, [pc, #60]	@ (8009be4 <TIM_OC3_SetConfig+0x8c>)
 8009ba8:	42a0      	cmp	r0, r4
 8009baa:	d003      	beq.n	8009bb4 <TIM_OC3_SetConfig+0x5c>
 8009bac:	b912      	cbnz	r2, 8009bb4 <TIM_OC3_SetConfig+0x5c>
 8009bae:	4a0e      	ldr	r2, [pc, #56]	@ (8009be8 <TIM_OC3_SetConfig+0x90>)
 8009bb0:	4290      	cmp	r0, r2
 8009bb2:	d107      	bne.n	8009bc4 <TIM_OC3_SetConfig+0x6c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009bb4:	f425 5240 	bic.w	r2, r5, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009bb8:	694c      	ldr	r4, [r1, #20]
 8009bba:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009bbe:	698c      	ldr	r4, [r1, #24]
 8009bc0:	ea42 1504 	orr.w	r5, r2, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bc4:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009bc6:	61c6      	str	r6, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009bc8:	684a      	ldr	r2, [r1, #4]
 8009bca:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bcc:	6203      	str	r3, [r0, #32]
}
 8009bce:	bc70      	pop	{r4, r5, r6}
 8009bd0:	4770      	bx	lr
 8009bd2:	bf00      	nop
 8009bd4:	fffeff8c 	.word	0xfffeff8c
 8009bd8:	40010000 	.word	0x40010000
 8009bdc:	40010400 	.word	0x40010400
 8009be0:	40014400 	.word	0x40014400
 8009be4:	40014000 	.word	0x40014000
 8009be8:	40014800 	.word	0x40014800

08009bec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009bec:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009bee:	6a03      	ldr	r3, [r0, #32]
 8009bf0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009bf4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bf6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bf8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009bfa:	69c5      	ldr	r5, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009bfc:	4a14      	ldr	r2, [pc, #80]	@ (8009c50 <TIM_OC4_SetConfig+0x64>)
 8009bfe:	402a      	ands	r2, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c00:	680d      	ldr	r5, [r1, #0]
 8009c02:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009c06:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009c0a:	688d      	ldr	r5, [r1, #8]
 8009c0c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c10:	4e10      	ldr	r6, [pc, #64]	@ (8009c54 <TIM_OC4_SetConfig+0x68>)
 8009c12:	4d11      	ldr	r5, [pc, #68]	@ (8009c58 <TIM_OC4_SetConfig+0x6c>)
 8009c14:	42a8      	cmp	r0, r5
 8009c16:	bf18      	it	ne
 8009c18:	42b0      	cmpne	r0, r6
 8009c1a:	d00d      	beq.n	8009c38 <TIM_OC4_SetConfig+0x4c>
 8009c1c:	f505 4580 	add.w	r5, r5, #16384	@ 0x4000
 8009c20:	42a8      	cmp	r0, r5
 8009c22:	bf14      	ite	ne
 8009c24:	2500      	movne	r5, #0
 8009c26:	2501      	moveq	r5, #1
 8009c28:	f506 4680 	add.w	r6, r6, #16384	@ 0x4000
 8009c2c:	42b0      	cmp	r0, r6
 8009c2e:	d003      	beq.n	8009c38 <TIM_OC4_SetConfig+0x4c>
 8009c30:	b915      	cbnz	r5, 8009c38 <TIM_OC4_SetConfig+0x4c>
 8009c32:	4d0a      	ldr	r5, [pc, #40]	@ (8009c5c <TIM_OC4_SetConfig+0x70>)
 8009c34:	42a8      	cmp	r0, r5
 8009c36:	d104      	bne.n	8009c42 <TIM_OC4_SetConfig+0x56>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009c38:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009c3c:	694d      	ldr	r5, [r1, #20]
 8009c3e:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c42:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c44:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009c46:	684a      	ldr	r2, [r1, #4]
 8009c48:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c4a:	6203      	str	r3, [r0, #32]
}
 8009c4c:	bc70      	pop	{r4, r5, r6}
 8009c4e:	4770      	bx	lr
 8009c50:	feff8cff 	.word	0xfeff8cff
 8009c54:	40010000 	.word	0x40010000
 8009c58:	40010400 	.word	0x40010400
 8009c5c:	40014800 	.word	0x40014800

08009c60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009c60:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009c62:	6a03      	ldr	r3, [r0, #32]
 8009c64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009c68:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c6a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c6c:	6842      	ldr	r2, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009c6e:	6d45      	ldr	r5, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009c70:	4e14      	ldr	r6, [pc, #80]	@ (8009cc4 <TIM_OC5_SetConfig+0x64>)
 8009c72:	402e      	ands	r6, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c74:	680d      	ldr	r5, [r1, #0]
 8009c76:	432e      	orrs	r6, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009c78:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009c7c:	688c      	ldr	r4, [r1, #8]
 8009c7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c82:	4d11      	ldr	r5, [pc, #68]	@ (8009cc8 <TIM_OC5_SetConfig+0x68>)
 8009c84:	4c11      	ldr	r4, [pc, #68]	@ (8009ccc <TIM_OC5_SetConfig+0x6c>)
 8009c86:	42a0      	cmp	r0, r4
 8009c88:	bf18      	it	ne
 8009c8a:	42a8      	cmpne	r0, r5
 8009c8c:	d00d      	beq.n	8009caa <TIM_OC5_SetConfig+0x4a>
 8009c8e:	f504 4480 	add.w	r4, r4, #16384	@ 0x4000
 8009c92:	42a0      	cmp	r0, r4
 8009c94:	bf14      	ite	ne
 8009c96:	2400      	movne	r4, #0
 8009c98:	2401      	moveq	r4, #1
 8009c9a:	f505 4580 	add.w	r5, r5, #16384	@ 0x4000
 8009c9e:	42a8      	cmp	r0, r5
 8009ca0:	d003      	beq.n	8009caa <TIM_OC5_SetConfig+0x4a>
 8009ca2:	b914      	cbnz	r4, 8009caa <TIM_OC5_SetConfig+0x4a>
 8009ca4:	4c0a      	ldr	r4, [pc, #40]	@ (8009cd0 <TIM_OC5_SetConfig+0x70>)
 8009ca6:	42a0      	cmp	r0, r4
 8009ca8:	d104      	bne.n	8009cb4 <TIM_OC5_SetConfig+0x54>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009caa:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009cae:	694c      	ldr	r4, [r1, #20]
 8009cb0:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cb4:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009cb6:	6546      	str	r6, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009cb8:	684a      	ldr	r2, [r1, #4]
 8009cba:	6582      	str	r2, [r0, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cbc:	6203      	str	r3, [r0, #32]
}
 8009cbe:	bc70      	pop	{r4, r5, r6}
 8009cc0:	4770      	bx	lr
 8009cc2:	bf00      	nop
 8009cc4:	fffeff8f 	.word	0xfffeff8f
 8009cc8:	40010000 	.word	0x40010000
 8009ccc:	40010400 	.word	0x40010400
 8009cd0:	40014800 	.word	0x40014800

08009cd4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009cd4:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009cd6:	6a03      	ldr	r3, [r0, #32]
 8009cd8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009cdc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cde:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ce0:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009ce2:	6d45      	ldr	r5, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009ce4:	4a14      	ldr	r2, [pc, #80]	@ (8009d38 <TIM_OC6_SetConfig+0x64>)
 8009ce6:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ce8:	680d      	ldr	r5, [r1, #0]
 8009cea:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009cee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009cf2:	688d      	ldr	r5, [r1, #8]
 8009cf4:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cf8:	4e10      	ldr	r6, [pc, #64]	@ (8009d3c <TIM_OC6_SetConfig+0x68>)
 8009cfa:	4d11      	ldr	r5, [pc, #68]	@ (8009d40 <TIM_OC6_SetConfig+0x6c>)
 8009cfc:	42a8      	cmp	r0, r5
 8009cfe:	bf18      	it	ne
 8009d00:	42b0      	cmpne	r0, r6
 8009d02:	d00d      	beq.n	8009d20 <TIM_OC6_SetConfig+0x4c>
 8009d04:	f505 4580 	add.w	r5, r5, #16384	@ 0x4000
 8009d08:	42a8      	cmp	r0, r5
 8009d0a:	bf14      	ite	ne
 8009d0c:	2500      	movne	r5, #0
 8009d0e:	2501      	moveq	r5, #1
 8009d10:	f506 4680 	add.w	r6, r6, #16384	@ 0x4000
 8009d14:	42b0      	cmp	r0, r6
 8009d16:	d003      	beq.n	8009d20 <TIM_OC6_SetConfig+0x4c>
 8009d18:	b915      	cbnz	r5, 8009d20 <TIM_OC6_SetConfig+0x4c>
 8009d1a:	4d0a      	ldr	r5, [pc, #40]	@ (8009d44 <TIM_OC6_SetConfig+0x70>)
 8009d1c:	42a8      	cmp	r0, r5
 8009d1e:	d104      	bne.n	8009d2a <TIM_OC6_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009d20:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009d24:	694d      	ldr	r5, [r1, #20]
 8009d26:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d2a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009d2c:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009d2e:	684a      	ldr	r2, [r1, #4]
 8009d30:	65c2      	str	r2, [r0, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d32:	6203      	str	r3, [r0, #32]
}
 8009d34:	bc70      	pop	{r4, r5, r6}
 8009d36:	4770      	bx	lr
 8009d38:	feff8fff 	.word	0xfeff8fff
 8009d3c:	40010000 	.word	0x40010000
 8009d40:	40010400 	.word	0x40010400
 8009d44:	40014800 	.word	0x40014800

08009d48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d48:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009d4a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d4c:	6a04      	ldr	r4, [r0, #32]
 8009d4e:	f024 0401 	bic.w	r4, r4, #1
 8009d52:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d54:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009d56:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009d5a:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009d5e:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8009d62:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009d64:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8009d66:	6203      	str	r3, [r0, #32]
}
 8009d68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d6c:	4770      	bx	lr

08009d6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d6e:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d70:	6a03      	ldr	r3, [r0, #32]
 8009d72:	f023 0310 	bic.w	r3, r3, #16
 8009d76:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d78:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8009d7a:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009d7c:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009d80:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009d84:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8009d88:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009d8c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8009d8e:	6203      	str	r3, [r0, #32]
}
 8009d90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d94:	4770      	bx	lr
	...

08009d98 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009d98:	6882      	ldr	r2, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009d9a:	4b03      	ldr	r3, [pc, #12]	@ (8009da8 <TIM_ITRx_SetConfig+0x10>)
 8009d9c:	4013      	ands	r3, r2
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009d9e:	430b      	orrs	r3, r1
 8009da0:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009da4:	6083      	str	r3, [r0, #8]
}
 8009da6:	4770      	bx	lr
 8009da8:	ffcfff8f 	.word	0xffcfff8f

08009dac <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8009dac:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8009db0:	b2db      	uxtb	r3, r3
 8009db2:	2b01      	cmp	r3, #1
 8009db4:	d13a      	bne.n	8009e2c <HAL_TIM_Base_Start_IT+0x80>
  htim->State = HAL_TIM_STATE_BUSY;
 8009db6:	2302      	movs	r3, #2
 8009db8:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009dbc:	6802      	ldr	r2, [r0, #0]
 8009dbe:	68d3      	ldr	r3, [r2, #12]
 8009dc0:	f043 0301 	orr.w	r3, r3, #1
 8009dc4:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009dc6:	6803      	ldr	r3, [r0, #0]
 8009dc8:	4a1a      	ldr	r2, [pc, #104]	@ (8009e34 <HAL_TIM_Base_Start_IT+0x88>)
 8009dca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009dce:	bf18      	it	ne
 8009dd0:	4293      	cmpne	r3, r2
 8009dd2:	d01d      	beq.n	8009e10 <HAL_TIM_Base_Start_IT+0x64>
 8009dd4:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d019      	beq.n	8009e10 <HAL_TIM_Base_Start_IT+0x64>
 8009ddc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d015      	beq.n	8009e10 <HAL_TIM_Base_Start_IT+0x64>
 8009de4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d011      	beq.n	8009e10 <HAL_TIM_Base_Start_IT+0x64>
 8009dec:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8009df0:	4293      	cmp	r3, r2
 8009df2:	d00d      	beq.n	8009e10 <HAL_TIM_Base_Start_IT+0x64>
 8009df4:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d009      	beq.n	8009e10 <HAL_TIM_Base_Start_IT+0x64>
 8009dfc:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d005      	beq.n	8009e10 <HAL_TIM_Base_Start_IT+0x64>
    __HAL_TIM_ENABLE(htim);
 8009e04:	681a      	ldr	r2, [r3, #0]
 8009e06:	f042 0201 	orr.w	r2, r2, #1
 8009e0a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8009e0c:	2000      	movs	r0, #0
 8009e0e:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e10:	6899      	ldr	r1, [r3, #8]
 8009e12:	4a09      	ldr	r2, [pc, #36]	@ (8009e38 <HAL_TIM_Base_Start_IT+0x8c>)
 8009e14:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e16:	2a06      	cmp	r2, #6
 8009e18:	bf18      	it	ne
 8009e1a:	f5b2 3f80 	cmpne.w	r2, #65536	@ 0x10000
 8009e1e:	d007      	beq.n	8009e30 <HAL_TIM_Base_Start_IT+0x84>
      __HAL_TIM_ENABLE(htim);
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	f042 0201 	orr.w	r2, r2, #1
 8009e26:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8009e28:	2000      	movs	r0, #0
 8009e2a:	4770      	bx	lr
    return HAL_ERROR;
 8009e2c:	2001      	movs	r0, #1
 8009e2e:	4770      	bx	lr
  return HAL_OK;
 8009e30:	2000      	movs	r0, #0
}
 8009e32:	4770      	bx	lr
 8009e34:	40010000 	.word	0x40010000
 8009e38:	00010007 	.word	0x00010007

08009e3c <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009e3c:	6802      	ldr	r2, [r0, #0]
 8009e3e:	68d3      	ldr	r3, [r2, #12]
 8009e40:	f023 0301 	bic.w	r3, r3, #1
 8009e44:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 8009e46:	6803      	ldr	r3, [r0, #0]
 8009e48:	6a19      	ldr	r1, [r3, #32]
 8009e4a:	f241 1211 	movw	r2, #4369	@ 0x1111
 8009e4e:	4211      	tst	r1, r2
 8009e50:	d108      	bne.n	8009e64 <HAL_TIM_Base_Stop_IT+0x28>
 8009e52:	6a19      	ldr	r1, [r3, #32]
 8009e54:	f240 4244 	movw	r2, #1092	@ 0x444
 8009e58:	4211      	tst	r1, r2
 8009e5a:	d103      	bne.n	8009e64 <HAL_TIM_Base_Stop_IT+0x28>
 8009e5c:	681a      	ldr	r2, [r3, #0]
 8009e5e:	f022 0201 	bic.w	r2, r2, #1
 8009e62:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8009e64:	2301      	movs	r3, #1
 8009e66:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
}
 8009e6a:	2000      	movs	r0, #0
 8009e6c:	4770      	bx	lr

08009e6e <HAL_TIM_PWM_MspInit>:
}
 8009e6e:	4770      	bx	lr

08009e70 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8009e70:	4770      	bx	lr

08009e72 <HAL_TIM_IC_CaptureCallback>:
}
 8009e72:	4770      	bx	lr

08009e74 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8009e74:	4770      	bx	lr

08009e76 <HAL_TIM_TriggerCallback>:
}
 8009e76:	4770      	bx	lr

08009e78 <HAL_TIM_IRQHandler>:
{
 8009e78:	b510      	push	{r4, lr}
 8009e7a:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009e7c:	6803      	ldr	r3, [r0, #0]
 8009e7e:	691a      	ldr	r2, [r3, #16]
 8009e80:	f012 0f02 	tst.w	r2, #2
 8009e84:	d011      	beq.n	8009eaa <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009e86:	68da      	ldr	r2, [r3, #12]
 8009e88:	f012 0f02 	tst.w	r2, #2
 8009e8c:	d00d      	beq.n	8009eaa <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009e8e:	f06f 0202 	mvn.w	r2, #2
 8009e92:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009e94:	2301      	movs	r3, #1
 8009e96:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009e98:	6803      	ldr	r3, [r0, #0]
 8009e9a:	699b      	ldr	r3, [r3, #24]
 8009e9c:	f013 0f03 	tst.w	r3, #3
 8009ea0:	d079      	beq.n	8009f96 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8009ea2:	f7ff ffe6 	bl	8009e72 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009eaa:	6823      	ldr	r3, [r4, #0]
 8009eac:	691a      	ldr	r2, [r3, #16]
 8009eae:	f012 0f04 	tst.w	r2, #4
 8009eb2:	d012      	beq.n	8009eda <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009eb4:	68da      	ldr	r2, [r3, #12]
 8009eb6:	f012 0f04 	tst.w	r2, #4
 8009eba:	d00e      	beq.n	8009eda <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009ebc:	f06f 0204 	mvn.w	r2, #4
 8009ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009ec2:	2302      	movs	r3, #2
 8009ec4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009ec6:	6823      	ldr	r3, [r4, #0]
 8009ec8:	699b      	ldr	r3, [r3, #24]
 8009eca:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8009ece:	d068      	beq.n	8009fa2 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	f7ff ffce 	bl	8009e72 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009eda:	6823      	ldr	r3, [r4, #0]
 8009edc:	691a      	ldr	r2, [r3, #16]
 8009ede:	f012 0f08 	tst.w	r2, #8
 8009ee2:	d012      	beq.n	8009f0a <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009ee4:	68da      	ldr	r2, [r3, #12]
 8009ee6:	f012 0f08 	tst.w	r2, #8
 8009eea:	d00e      	beq.n	8009f0a <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009eec:	f06f 0208 	mvn.w	r2, #8
 8009ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009ef2:	2304      	movs	r3, #4
 8009ef4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009ef6:	6823      	ldr	r3, [r4, #0]
 8009ef8:	69db      	ldr	r3, [r3, #28]
 8009efa:	f013 0f03 	tst.w	r3, #3
 8009efe:	d057      	beq.n	8009fb0 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8009f00:	4620      	mov	r0, r4
 8009f02:	f7ff ffb6 	bl	8009e72 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f06:	2300      	movs	r3, #0
 8009f08:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009f0a:	6823      	ldr	r3, [r4, #0]
 8009f0c:	691a      	ldr	r2, [r3, #16]
 8009f0e:	f012 0f10 	tst.w	r2, #16
 8009f12:	d012      	beq.n	8009f3a <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009f14:	68da      	ldr	r2, [r3, #12]
 8009f16:	f012 0f10 	tst.w	r2, #16
 8009f1a:	d00e      	beq.n	8009f3a <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009f1c:	f06f 0210 	mvn.w	r2, #16
 8009f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009f22:	2308      	movs	r3, #8
 8009f24:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009f26:	6823      	ldr	r3, [r4, #0]
 8009f28:	69db      	ldr	r3, [r3, #28]
 8009f2a:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8009f2e:	d046      	beq.n	8009fbe <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8009f30:	4620      	mov	r0, r4
 8009f32:	f7ff ff9e 	bl	8009e72 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f36:	2300      	movs	r3, #0
 8009f38:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009f3a:	6823      	ldr	r3, [r4, #0]
 8009f3c:	691a      	ldr	r2, [r3, #16]
 8009f3e:	f012 0f01 	tst.w	r2, #1
 8009f42:	d003      	beq.n	8009f4c <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009f44:	68da      	ldr	r2, [r3, #12]
 8009f46:	f012 0f01 	tst.w	r2, #1
 8009f4a:	d13f      	bne.n	8009fcc <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009f4c:	6823      	ldr	r3, [r4, #0]
 8009f4e:	691a      	ldr	r2, [r3, #16]
 8009f50:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8009f54:	d003      	beq.n	8009f5e <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009f56:	68da      	ldr	r2, [r3, #12]
 8009f58:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8009f5c:	d13d      	bne.n	8009fda <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009f5e:	6823      	ldr	r3, [r4, #0]
 8009f60:	691a      	ldr	r2, [r3, #16]
 8009f62:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8009f66:	d003      	beq.n	8009f70 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009f68:	68da      	ldr	r2, [r3, #12]
 8009f6a:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8009f6e:	d13b      	bne.n	8009fe8 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009f70:	6823      	ldr	r3, [r4, #0]
 8009f72:	691a      	ldr	r2, [r3, #16]
 8009f74:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8009f78:	d003      	beq.n	8009f82 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009f7a:	68da      	ldr	r2, [r3, #12]
 8009f7c:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8009f80:	d139      	bne.n	8009ff6 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009f82:	6823      	ldr	r3, [r4, #0]
 8009f84:	691a      	ldr	r2, [r3, #16]
 8009f86:	f012 0f20 	tst.w	r2, #32
 8009f8a:	d003      	beq.n	8009f94 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009f8c:	68da      	ldr	r2, [r3, #12]
 8009f8e:	f012 0f20 	tst.w	r2, #32
 8009f92:	d137      	bne.n	800a004 <HAL_TIM_IRQHandler+0x18c>
}
 8009f94:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f96:	f7ff ff6b 	bl	8009e70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f9a:	4620      	mov	r0, r4
 8009f9c:	f7ff ff6a 	bl	8009e74 <HAL_TIM_PWM_PulseFinishedCallback>
 8009fa0:	e781      	b.n	8009ea6 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fa2:	4620      	mov	r0, r4
 8009fa4:	f7ff ff64 	bl	8009e70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fa8:	4620      	mov	r0, r4
 8009faa:	f7ff ff63 	bl	8009e74 <HAL_TIM_PWM_PulseFinishedCallback>
 8009fae:	e792      	b.n	8009ed6 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fb0:	4620      	mov	r0, r4
 8009fb2:	f7ff ff5d 	bl	8009e70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fb6:	4620      	mov	r0, r4
 8009fb8:	f7ff ff5c 	bl	8009e74 <HAL_TIM_PWM_PulseFinishedCallback>
 8009fbc:	e7a3      	b.n	8009f06 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fbe:	4620      	mov	r0, r4
 8009fc0:	f7ff ff56 	bl	8009e70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fc4:	4620      	mov	r0, r4
 8009fc6:	f7ff ff55 	bl	8009e74 <HAL_TIM_PWM_PulseFinishedCallback>
 8009fca:	e7b4      	b.n	8009f36 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009fcc:	f06f 0201 	mvn.w	r2, #1
 8009fd0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8009fd2:	4620      	mov	r0, r4
 8009fd4:	f7f6 fc48 	bl	8000868 <HAL_TIM_PeriodElapsedCallback>
 8009fd8:	e7b8      	b.n	8009f4c <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009fda:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009fde:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8009fe0:	4620      	mov	r0, r4
 8009fe2:	f000 fba2 	bl	800a72a <HAL_TIMEx_BreakCallback>
 8009fe6:	e7ba      	b.n	8009f5e <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009fe8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009fec:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8009fee:	4620      	mov	r0, r4
 8009ff0:	f000 fb9c 	bl	800a72c <HAL_TIMEx_Break2Callback>
 8009ff4:	e7bc      	b.n	8009f70 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009ff6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009ffa:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8009ffc:	4620      	mov	r0, r4
 8009ffe:	f7ff ff3a 	bl	8009e76 <HAL_TIM_TriggerCallback>
 800a002:	e7be      	b.n	8009f82 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a004:	f06f 0220 	mvn.w	r2, #32
 800a008:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800a00a:	4620      	mov	r0, r4
 800a00c:	f000 fb8c 	bl	800a728 <HAL_TIMEx_CommutCallback>
}
 800a010:	e7c0      	b.n	8009f94 <HAL_TIM_IRQHandler+0x11c>
	...

0800a014 <TIM_Base_SetConfig>:
{
 800a014:	b530      	push	{r4, r5, lr}
  tmpcr1 = TIMx->CR1;
 800a016:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a018:	4a39      	ldr	r2, [pc, #228]	@ (800a100 <TIM_Base_SetConfig+0xec>)
 800a01a:	4290      	cmp	r0, r2
 800a01c:	bf14      	ite	ne
 800a01e:	f04f 0e00 	movne.w	lr, #0
 800a022:	f04f 0e01 	moveq.w	lr, #1
 800a026:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800a02a:	bf14      	ite	ne
 800a02c:	4672      	movne	r2, lr
 800a02e:	f04e 0201 	orreq.w	r2, lr, #1
 800a032:	b9aa      	cbnz	r2, 800a060 <TIM_Base_SetConfig+0x4c>
 800a034:	4c33      	ldr	r4, [pc, #204]	@ (800a104 <TIM_Base_SetConfig+0xf0>)
 800a036:	42a0      	cmp	r0, r4
 800a038:	bf14      	ite	ne
 800a03a:	2400      	movne	r4, #0
 800a03c:	2401      	moveq	r4, #1
 800a03e:	4d32      	ldr	r5, [pc, #200]	@ (800a108 <TIM_Base_SetConfig+0xf4>)
 800a040:	42a8      	cmp	r0, r5
 800a042:	d00d      	beq.n	800a060 <TIM_Base_SetConfig+0x4c>
 800a044:	b964      	cbnz	r4, 800a060 <TIM_Base_SetConfig+0x4c>
 800a046:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 800a04a:	f504 3482 	add.w	r4, r4, #66560	@ 0x10400
 800a04e:	42a0      	cmp	r0, r4
 800a050:	bf14      	ite	ne
 800a052:	2400      	movne	r4, #0
 800a054:	2401      	moveq	r4, #1
 800a056:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 800a05a:	42a8      	cmp	r0, r5
 800a05c:	d000      	beq.n	800a060 <TIM_Base_SetConfig+0x4c>
 800a05e:	b11c      	cbz	r4, 800a068 <TIM_Base_SetConfig+0x54>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a060:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800a064:	684c      	ldr	r4, [r1, #4]
 800a066:	4323      	orrs	r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a068:	bb12      	cbnz	r2, 800a0b0 <TIM_Base_SetConfig+0x9c>
 800a06a:	4a26      	ldr	r2, [pc, #152]	@ (800a104 <TIM_Base_SetConfig+0xf0>)
 800a06c:	4290      	cmp	r0, r2
 800a06e:	bf14      	ite	ne
 800a070:	2200      	movne	r2, #0
 800a072:	2201      	moveq	r2, #1
 800a074:	4c24      	ldr	r4, [pc, #144]	@ (800a108 <TIM_Base_SetConfig+0xf4>)
 800a076:	42a0      	cmp	r0, r4
 800a078:	d01a      	beq.n	800a0b0 <TIM_Base_SetConfig+0x9c>
 800a07a:	b9ca      	cbnz	r2, 800a0b0 <TIM_Base_SetConfig+0x9c>
 800a07c:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800a080:	f502 3282 	add.w	r2, r2, #66560	@ 0x10400
 800a084:	4290      	cmp	r0, r2
 800a086:	bf14      	ite	ne
 800a088:	2200      	movne	r2, #0
 800a08a:	2201      	moveq	r2, #1
 800a08c:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
 800a090:	42a0      	cmp	r0, r4
 800a092:	d00d      	beq.n	800a0b0 <TIM_Base_SetConfig+0x9c>
 800a094:	b962      	cbnz	r2, 800a0b0 <TIM_Base_SetConfig+0x9c>
 800a096:	4a1d      	ldr	r2, [pc, #116]	@ (800a10c <TIM_Base_SetConfig+0xf8>)
 800a098:	4290      	cmp	r0, r2
 800a09a:	bf14      	ite	ne
 800a09c:	2200      	movne	r2, #0
 800a09e:	2201      	moveq	r2, #1
 800a0a0:	f504 349a 	add.w	r4, r4, #78848	@ 0x13400
 800a0a4:	42a0      	cmp	r0, r4
 800a0a6:	d003      	beq.n	800a0b0 <TIM_Base_SetConfig+0x9c>
 800a0a8:	b912      	cbnz	r2, 800a0b0 <TIM_Base_SetConfig+0x9c>
 800a0aa:	4a19      	ldr	r2, [pc, #100]	@ (800a110 <TIM_Base_SetConfig+0xfc>)
 800a0ac:	4290      	cmp	r0, r2
 800a0ae:	d104      	bne.n	800a0ba <TIM_Base_SetConfig+0xa6>
    tmpcr1 &= ~TIM_CR1_CKD;
 800a0b0:	f423 7c40 	bic.w	ip, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a0b4:	68cb      	ldr	r3, [r1, #12]
 800a0b6:	ea43 030c 	orr.w	r3, r3, ip
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a0ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a0be:	694a      	ldr	r2, [r1, #20]
 800a0c0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800a0c2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a0c4:	688a      	ldr	r2, [r1, #8]
 800a0c6:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800a0c8:	680a      	ldr	r2, [r1, #0]
 800a0ca:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a0cc:	4a11      	ldr	r2, [pc, #68]	@ (800a114 <TIM_Base_SetConfig+0x100>)
 800a0ce:	4290      	cmp	r0, r2
 800a0d0:	bf14      	ite	ne
 800a0d2:	4673      	movne	r3, lr
 800a0d4:	f04e 0301 	orreq.w	r3, lr, #1
 800a0d8:	b963      	cbnz	r3, 800a0f4 <TIM_Base_SetConfig+0xe0>
 800a0da:	4b0c      	ldr	r3, [pc, #48]	@ (800a10c <TIM_Base_SetConfig+0xf8>)
 800a0dc:	4298      	cmp	r0, r3
 800a0de:	bf14      	ite	ne
 800a0e0:	2300      	movne	r3, #0
 800a0e2:	2301      	moveq	r3, #1
 800a0e4:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800a0e8:	4290      	cmp	r0, r2
 800a0ea:	d003      	beq.n	800a0f4 <TIM_Base_SetConfig+0xe0>
 800a0ec:	b913      	cbnz	r3, 800a0f4 <TIM_Base_SetConfig+0xe0>
 800a0ee:	4b08      	ldr	r3, [pc, #32]	@ (800a110 <TIM_Base_SetConfig+0xfc>)
 800a0f0:	4298      	cmp	r0, r3
 800a0f2:	d101      	bne.n	800a0f8 <TIM_Base_SetConfig+0xe4>
    TIMx->RCR = Structure->RepetitionCounter;
 800a0f4:	690b      	ldr	r3, [r1, #16]
 800a0f6:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	6143      	str	r3, [r0, #20]
}
 800a0fc:	bd30      	pop	{r4, r5, pc}
 800a0fe:	bf00      	nop
 800a100:	40010000 	.word	0x40010000
 800a104:	40000800 	.word	0x40000800
 800a108:	40000400 	.word	0x40000400
 800a10c:	40014400 	.word	0x40014400
 800a110:	40014800 	.word	0x40014800
 800a114:	40010400 	.word	0x40010400

0800a118 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800a118:	b360      	cbz	r0, 800a174 <HAL_TIM_Base_Init+0x5c>
{
 800a11a:	b510      	push	{r4, lr}
 800a11c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800a11e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800a122:	b313      	cbz	r3, 800a16a <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800a124:	2302      	movs	r3, #2
 800a126:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a12a:	4621      	mov	r1, r4
 800a12c:	f851 0b04 	ldr.w	r0, [r1], #4
 800a130:	f7ff ff70 	bl	800a014 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a134:	2301      	movs	r3, #1
 800a136:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a13a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800a13e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800a142:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800a146:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800a14a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a14e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a152:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800a156:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800a15a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800a15e:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800a162:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800a166:	2000      	movs	r0, #0
}
 800a168:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800a16a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800a16e:	f7f8 f969 	bl	8002444 <HAL_TIM_Base_MspInit>
 800a172:	e7d7      	b.n	800a124 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800a174:	2001      	movs	r0, #1
}
 800a176:	4770      	bx	lr

0800a178 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800a178:	b360      	cbz	r0, 800a1d4 <HAL_TIM_PWM_Init+0x5c>
{
 800a17a:	b510      	push	{r4, lr}
 800a17c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800a17e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800a182:	b313      	cbz	r3, 800a1ca <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800a184:	2302      	movs	r3, #2
 800a186:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a18a:	4621      	mov	r1, r4
 800a18c:	f851 0b04 	ldr.w	r0, [r1], #4
 800a190:	f7ff ff40 	bl	800a014 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a194:	2301      	movs	r3, #1
 800a196:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a19a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800a19e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800a1a2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800a1a6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800a1aa:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a1ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1b2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800a1b6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800a1ba:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800a1be:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800a1c2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800a1c6:	2000      	movs	r0, #0
}
 800a1c8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800a1ca:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800a1ce:	f7ff fe4e 	bl	8009e6e <HAL_TIM_PWM_MspInit>
 800a1d2:	e7d7      	b.n	800a184 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 800a1d4:	2001      	movs	r0, #1
}
 800a1d6:	4770      	bx	lr

0800a1d8 <TIM_OC2_SetConfig>:
{
 800a1d8:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a1da:	6a03      	ldr	r3, [r0, #32]
 800a1dc:	f023 0310 	bic.w	r3, r3, #16
 800a1e0:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800a1e2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800a1e4:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800a1e6:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a1e8:	4e1a      	ldr	r6, [pc, #104]	@ (800a254 <TIM_OC2_SetConfig+0x7c>)
 800a1ea:	4026      	ands	r6, r4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a1ec:	680c      	ldr	r4, [r1, #0]
 800a1ee:	ea46 2604 	orr.w	r6, r6, r4, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800a1f2:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a1f6:	688a      	ldr	r2, [r1, #8]
 800a1f8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a1fc:	4a16      	ldr	r2, [pc, #88]	@ (800a258 <TIM_OC2_SetConfig+0x80>)
 800a1fe:	4c17      	ldr	r4, [pc, #92]	@ (800a25c <TIM_OC2_SetConfig+0x84>)
 800a200:	42a0      	cmp	r0, r4
 800a202:	bf18      	it	ne
 800a204:	4290      	cmpne	r0, r2
 800a206:	bf0c      	ite	eq
 800a208:	2201      	moveq	r2, #1
 800a20a:	2200      	movne	r2, #0
 800a20c:	d106      	bne.n	800a21c <TIM_OC2_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC2NP;
 800a20e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a212:	68cc      	ldr	r4, [r1, #12]
 800a214:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800a218:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a21c:	b95a      	cbnz	r2, 800a236 <TIM_OC2_SetConfig+0x5e>
 800a21e:	4a10      	ldr	r2, [pc, #64]	@ (800a260 <TIM_OC2_SetConfig+0x88>)
 800a220:	4290      	cmp	r0, r2
 800a222:	bf14      	ite	ne
 800a224:	2200      	movne	r2, #0
 800a226:	2201      	moveq	r2, #1
 800a228:	4c0e      	ldr	r4, [pc, #56]	@ (800a264 <TIM_OC2_SetConfig+0x8c>)
 800a22a:	42a0      	cmp	r0, r4
 800a22c:	d003      	beq.n	800a236 <TIM_OC2_SetConfig+0x5e>
 800a22e:	b912      	cbnz	r2, 800a236 <TIM_OC2_SetConfig+0x5e>
 800a230:	4a0d      	ldr	r2, [pc, #52]	@ (800a268 <TIM_OC2_SetConfig+0x90>)
 800a232:	4290      	cmp	r0, r2
 800a234:	d107      	bne.n	800a246 <TIM_OC2_SetConfig+0x6e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a236:	f425 6c40 	bic.w	ip, r5, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a23a:	694a      	ldr	r2, [r1, #20]
 800a23c:	ea4c 0c82 	orr.w	ip, ip, r2, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a240:	698a      	ldr	r2, [r1, #24]
 800a242:	ea4c 0582 	orr.w	r5, ip, r2, lsl #2
  TIMx->CR2 = tmpcr2;
 800a246:	6045      	str	r5, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800a248:	6186      	str	r6, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800a24a:	684a      	ldr	r2, [r1, #4]
 800a24c:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 800a24e:	6203      	str	r3, [r0, #32]
}
 800a250:	bc70      	pop	{r4, r5, r6}
 800a252:	4770      	bx	lr
 800a254:	feff8cff 	.word	0xfeff8cff
 800a258:	40010000 	.word	0x40010000
 800a25c:	40010400 	.word	0x40010400
 800a260:	40014400 	.word	0x40014400
 800a264:	40014000 	.word	0x40014000
 800a268:	40014800 	.word	0x40014800

0800a26c <HAL_TIM_PWM_ConfigChannel>:
{
 800a26c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800a26e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800a272:	2b01      	cmp	r3, #1
 800a274:	f000 8095 	beq.w	800a3a2 <HAL_TIM_PWM_ConfigChannel+0x136>
 800a278:	4604      	mov	r4, r0
 800a27a:	460d      	mov	r5, r1
 800a27c:	2301      	movs	r3, #1
 800a27e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 800a282:	2a14      	cmp	r2, #20
 800a284:	f200 8088 	bhi.w	800a398 <HAL_TIM_PWM_ConfigChannel+0x12c>
 800a288:	e8df f002 	tbb	[pc, r2]
 800a28c:	8686860b 	.word	0x8686860b
 800a290:	8686861f 	.word	0x8686861f
 800a294:	86868634 	.word	0x86868634
 800a298:	86868648 	.word	0x86868648
 800a29c:	8686865d 	.word	0x8686865d
 800a2a0:	71          	.byte	0x71
 800a2a1:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a2a2:	6800      	ldr	r0, [r0, #0]
 800a2a4:	f7ff fc06 	bl	8009ab4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a2a8:	6822      	ldr	r2, [r4, #0]
 800a2aa:	6993      	ldr	r3, [r2, #24]
 800a2ac:	f043 0308 	orr.w	r3, r3, #8
 800a2b0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a2b2:	6822      	ldr	r2, [r4, #0]
 800a2b4:	6993      	ldr	r3, [r2, #24]
 800a2b6:	f023 0304 	bic.w	r3, r3, #4
 800a2ba:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a2bc:	6822      	ldr	r2, [r4, #0]
 800a2be:	6993      	ldr	r3, [r2, #24]
 800a2c0:	6929      	ldr	r1, [r5, #16]
 800a2c2:	430b      	orrs	r3, r1
 800a2c4:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800a2c6:	2000      	movs	r0, #0
      break;
 800a2c8:	e067      	b.n	800a39a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a2ca:	6800      	ldr	r0, [r0, #0]
 800a2cc:	f7ff ff84 	bl	800a1d8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a2d0:	6822      	ldr	r2, [r4, #0]
 800a2d2:	6993      	ldr	r3, [r2, #24]
 800a2d4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a2d8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a2da:	6822      	ldr	r2, [r4, #0]
 800a2dc:	6993      	ldr	r3, [r2, #24]
 800a2de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a2e2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a2e4:	6822      	ldr	r2, [r4, #0]
 800a2e6:	6993      	ldr	r3, [r2, #24]
 800a2e8:	6929      	ldr	r1, [r5, #16]
 800a2ea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800a2ee:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800a2f0:	2000      	movs	r0, #0
      break;
 800a2f2:	e052      	b.n	800a39a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a2f4:	6800      	ldr	r0, [r0, #0]
 800a2f6:	f7ff fc2f 	bl	8009b58 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a2fa:	6822      	ldr	r2, [r4, #0]
 800a2fc:	69d3      	ldr	r3, [r2, #28]
 800a2fe:	f043 0308 	orr.w	r3, r3, #8
 800a302:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a304:	6822      	ldr	r2, [r4, #0]
 800a306:	69d3      	ldr	r3, [r2, #28]
 800a308:	f023 0304 	bic.w	r3, r3, #4
 800a30c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a30e:	6822      	ldr	r2, [r4, #0]
 800a310:	69d3      	ldr	r3, [r2, #28]
 800a312:	6929      	ldr	r1, [r5, #16]
 800a314:	430b      	orrs	r3, r1
 800a316:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800a318:	2000      	movs	r0, #0
      break;
 800a31a:	e03e      	b.n	800a39a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a31c:	6800      	ldr	r0, [r0, #0]
 800a31e:	f7ff fc65 	bl	8009bec <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a322:	6822      	ldr	r2, [r4, #0]
 800a324:	69d3      	ldr	r3, [r2, #28]
 800a326:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a32a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a32c:	6822      	ldr	r2, [r4, #0]
 800a32e:	69d3      	ldr	r3, [r2, #28]
 800a330:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a334:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a336:	6822      	ldr	r2, [r4, #0]
 800a338:	69d3      	ldr	r3, [r2, #28]
 800a33a:	6929      	ldr	r1, [r5, #16]
 800a33c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800a340:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800a342:	2000      	movs	r0, #0
      break;
 800a344:	e029      	b.n	800a39a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a346:	6800      	ldr	r0, [r0, #0]
 800a348:	f7ff fc8a 	bl	8009c60 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a34c:	6822      	ldr	r2, [r4, #0]
 800a34e:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a350:	f043 0308 	orr.w	r3, r3, #8
 800a354:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a356:	6822      	ldr	r2, [r4, #0]
 800a358:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a35a:	f023 0304 	bic.w	r3, r3, #4
 800a35e:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a360:	6822      	ldr	r2, [r4, #0]
 800a362:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a364:	6929      	ldr	r1, [r5, #16]
 800a366:	430b      	orrs	r3, r1
 800a368:	6553      	str	r3, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 800a36a:	2000      	movs	r0, #0
      break;
 800a36c:	e015      	b.n	800a39a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a36e:	6800      	ldr	r0, [r0, #0]
 800a370:	f7ff fcb0 	bl	8009cd4 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a374:	6822      	ldr	r2, [r4, #0]
 800a376:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a378:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a37c:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a37e:	6822      	ldr	r2, [r4, #0]
 800a380:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a382:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a386:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a388:	6822      	ldr	r2, [r4, #0]
 800a38a:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a38c:	6929      	ldr	r1, [r5, #16]
 800a38e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800a392:	6553      	str	r3, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 800a394:	2000      	movs	r0, #0
      break;
 800a396:	e000      	b.n	800a39a <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 800a398:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800a39a:	2300      	movs	r3, #0
 800a39c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800a3a0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 800a3a2:	2002      	movs	r0, #2
 800a3a4:	e7fc      	b.n	800a3a0 <HAL_TIM_PWM_ConfigChannel+0x134>

0800a3a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a3a6:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a3a8:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a3aa:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a3ae:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800a3b2:	430a      	orrs	r2, r1
 800a3b4:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a3b8:	6082      	str	r2, [r0, #8]
}
 800a3ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3be:	4770      	bx	lr

0800a3c0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800a3c0:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	f000 808f 	beq.w	800a4e8 <HAL_TIM_ConfigClockSource+0x128>
{
 800a3ca:	b510      	push	{r4, lr}
 800a3cc:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800a3d4:	2302      	movs	r3, #2
 800a3d6:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800a3da:	6802      	ldr	r2, [r0, #0]
 800a3dc:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a3de:	4b43      	ldr	r3, [pc, #268]	@ (800a4ec <HAL_TIM_ConfigClockSource+0x12c>)
 800a3e0:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 800a3e2:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800a3e4:	680b      	ldr	r3, [r1, #0]
 800a3e6:	2b70      	cmp	r3, #112	@ 0x70
 800a3e8:	d055      	beq.n	800a496 <HAL_TIM_ConfigClockSource+0xd6>
 800a3ea:	d831      	bhi.n	800a450 <HAL_TIM_ConfigClockSource+0x90>
 800a3ec:	2b50      	cmp	r3, #80	@ 0x50
 800a3ee:	d06c      	beq.n	800a4ca <HAL_TIM_ConfigClockSource+0x10a>
 800a3f0:	d90c      	bls.n	800a40c <HAL_TIM_ConfigClockSource+0x4c>
 800a3f2:	2b60      	cmp	r3, #96	@ 0x60
 800a3f4:	d12a      	bne.n	800a44c <HAL_TIM_ConfigClockSource+0x8c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a3f6:	68ca      	ldr	r2, [r1, #12]
 800a3f8:	6849      	ldr	r1, [r1, #4]
 800a3fa:	6820      	ldr	r0, [r4, #0]
 800a3fc:	f7ff fcb7 	bl	8009d6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a400:	2160      	movs	r1, #96	@ 0x60
 800a402:	6820      	ldr	r0, [r4, #0]
 800a404:	f7ff fcc8 	bl	8009d98 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800a408:	2000      	movs	r0, #0
      break;
 800a40a:	e035      	b.n	800a478 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 800a40c:	2b40      	cmp	r3, #64	@ 0x40
 800a40e:	d10a      	bne.n	800a426 <HAL_TIM_ConfigClockSource+0x66>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a410:	68ca      	ldr	r2, [r1, #12]
 800a412:	6849      	ldr	r1, [r1, #4]
 800a414:	6820      	ldr	r0, [r4, #0]
 800a416:	f7ff fc97 	bl	8009d48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a41a:	2140      	movs	r1, #64	@ 0x40
 800a41c:	6820      	ldr	r0, [r4, #0]
 800a41e:	f7ff fcbb 	bl	8009d98 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800a422:	2000      	movs	r0, #0
      break;
 800a424:	e028      	b.n	800a478 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 800a426:	d85b      	bhi.n	800a4e0 <HAL_TIM_ConfigClockSource+0x120>
 800a428:	2b20      	cmp	r3, #32
 800a42a:	d007      	beq.n	800a43c <HAL_TIM_ConfigClockSource+0x7c>
 800a42c:	d903      	bls.n	800a436 <HAL_TIM_ConfigClockSource+0x76>
 800a42e:	2b30      	cmp	r3, #48	@ 0x30
 800a430:	d004      	beq.n	800a43c <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 800a432:	2001      	movs	r0, #1
 800a434:	e020      	b.n	800a478 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 800a436:	b10b      	cbz	r3, 800a43c <HAL_TIM_ConfigClockSource+0x7c>
 800a438:	2b10      	cmp	r3, #16
 800a43a:	d105      	bne.n	800a448 <HAL_TIM_ConfigClockSource+0x88>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a43c:	4619      	mov	r1, r3
 800a43e:	6820      	ldr	r0, [r4, #0]
 800a440:	f7ff fcaa 	bl	8009d98 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800a444:	2000      	movs	r0, #0
      break;
 800a446:	e017      	b.n	800a478 <HAL_TIM_ConfigClockSource+0xb8>
      status = HAL_ERROR;
 800a448:	2001      	movs	r0, #1
 800a44a:	e015      	b.n	800a478 <HAL_TIM_ConfigClockSource+0xb8>
 800a44c:	2001      	movs	r0, #1
 800a44e:	e013      	b.n	800a478 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 800a450:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a454:	d02c      	beq.n	800a4b0 <HAL_TIM_ConfigClockSource+0xf0>
 800a456:	d90b      	bls.n	800a470 <HAL_TIM_ConfigClockSource+0xb0>
 800a458:	4a25      	ldr	r2, [pc, #148]	@ (800a4f0 <HAL_TIM_ConfigClockSource+0x130>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d0ee      	beq.n	800a43c <HAL_TIM_ConfigClockSource+0x7c>
 800a45e:	d912      	bls.n	800a486 <HAL_TIM_ConfigClockSource+0xc6>
 800a460:	4a24      	ldr	r2, [pc, #144]	@ (800a4f4 <HAL_TIM_ConfigClockSource+0x134>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d0ea      	beq.n	800a43c <HAL_TIM_ConfigClockSource+0x7c>
 800a466:	3210      	adds	r2, #16
 800a468:	4293      	cmp	r3, r2
 800a46a:	d0e7      	beq.n	800a43c <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 800a46c:	2001      	movs	r0, #1
 800a46e:	e003      	b.n	800a478 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 800a470:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a474:	d136      	bne.n	800a4e4 <HAL_TIM_ConfigClockSource+0x124>
 800a476:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800a478:	2301      	movs	r3, #1
 800a47a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800a47e:	2300      	movs	r3, #0
 800a480:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800a484:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 800a486:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a48a:	d0d7      	beq.n	800a43c <HAL_TIM_ConfigClockSource+0x7c>
 800a48c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a490:	d0d4      	beq.n	800a43c <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 800a492:	2001      	movs	r0, #1
 800a494:	e7f0      	b.n	800a478 <HAL_TIM_ConfigClockSource+0xb8>
      TIM_ETR_SetConfig(htim->Instance,
 800a496:	68cb      	ldr	r3, [r1, #12]
 800a498:	684a      	ldr	r2, [r1, #4]
 800a49a:	6889      	ldr	r1, [r1, #8]
 800a49c:	6820      	ldr	r0, [r4, #0]
 800a49e:	f7ff ff82 	bl	800a3a6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a4a2:	6822      	ldr	r2, [r4, #0]
 800a4a4:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a4a6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 800a4aa:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800a4ac:	2000      	movs	r0, #0
      break;
 800a4ae:	e7e3      	b.n	800a478 <HAL_TIM_ConfigClockSource+0xb8>
      TIM_ETR_SetConfig(htim->Instance,
 800a4b0:	68cb      	ldr	r3, [r1, #12]
 800a4b2:	684a      	ldr	r2, [r1, #4]
 800a4b4:	6889      	ldr	r1, [r1, #8]
 800a4b6:	6820      	ldr	r0, [r4, #0]
 800a4b8:	f7ff ff75 	bl	800a3a6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a4bc:	6822      	ldr	r2, [r4, #0]
 800a4be:	6893      	ldr	r3, [r2, #8]
 800a4c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a4c4:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800a4c6:	2000      	movs	r0, #0
      break;
 800a4c8:	e7d6      	b.n	800a478 <HAL_TIM_ConfigClockSource+0xb8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a4ca:	68ca      	ldr	r2, [r1, #12]
 800a4cc:	6849      	ldr	r1, [r1, #4]
 800a4ce:	6820      	ldr	r0, [r4, #0]
 800a4d0:	f7ff fc3a 	bl	8009d48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a4d4:	2150      	movs	r1, #80	@ 0x50
 800a4d6:	6820      	ldr	r0, [r4, #0]
 800a4d8:	f7ff fc5e 	bl	8009d98 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800a4dc:	2000      	movs	r0, #0
      break;
 800a4de:	e7cb      	b.n	800a478 <HAL_TIM_ConfigClockSource+0xb8>
      status = HAL_ERROR;
 800a4e0:	2001      	movs	r0, #1
 800a4e2:	e7c9      	b.n	800a478 <HAL_TIM_ConfigClockSource+0xb8>
 800a4e4:	2001      	movs	r0, #1
 800a4e6:	e7c7      	b.n	800a478 <HAL_TIM_ConfigClockSource+0xb8>
  __HAL_LOCK(htim);
 800a4e8:	2002      	movs	r0, #2
}
 800a4ea:	4770      	bx	lr
 800a4ec:	ffce0088 	.word	0xffce0088
 800a4f0:	00100020 	.word	0x00100020
 800a4f4:	00100030 	.word	0x00100030

0800a4f8 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a4f8:	f001 011f 	and.w	r1, r1, #31
 800a4fc:	f04f 0c01 	mov.w	ip, #1
 800a500:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a504:	6a03      	ldr	r3, [r0, #32]
 800a506:	ea23 030c 	bic.w	r3, r3, ip
 800a50a:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a50c:	6a03      	ldr	r3, [r0, #32]
 800a50e:	408a      	lsls	r2, r1
 800a510:	4313      	orrs	r3, r2
 800a512:	6203      	str	r3, [r0, #32]
}
 800a514:	4770      	bx	lr
	...

0800a518 <HAL_TIM_PWM_Start>:
{
 800a518:	b510      	push	{r4, lr}
 800a51a:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a51c:	2910      	cmp	r1, #16
 800a51e:	d83d      	bhi.n	800a59c <HAL_TIM_PWM_Start+0x84>
 800a520:	e8df f001 	tbb	[pc, r1]
 800a524:	3c3c3c09 	.word	0x3c3c3c09
 800a528:	3c3c3c20 	.word	0x3c3c3c20
 800a52c:	3c3c3c27 	.word	0x3c3c3c27
 800a530:	3c3c3c2e 	.word	0x3c3c3c2e
 800a534:	35          	.byte	0x35
 800a535:	00          	.byte	0x00
 800a536:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 800a53a:	b2db      	uxtb	r3, r3
 800a53c:	3b01      	subs	r3, #1
 800a53e:	bf18      	it	ne
 800a540:	2301      	movne	r3, #1
 800a542:	2b00      	cmp	r3, #0
 800a544:	f040 8096 	bne.w	800a674 <HAL_TIM_PWM_Start+0x15c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a548:	2910      	cmp	r1, #16
 800a54a:	f200 8081 	bhi.w	800a650 <HAL_TIM_PWM_Start+0x138>
 800a54e:	e8df f001 	tbb	[pc, r1]
 800a552:	7f2c      	.short	0x7f2c
 800a554:	7f6f7f7f 	.word	0x7f6f7f7f
 800a558:	7f737f7f 	.word	0x7f737f7f
 800a55c:	7f777f7f 	.word	0x7f777f7f
 800a560:	7f7f      	.short	0x7f7f
 800a562:	7b          	.byte	0x7b
 800a563:	00          	.byte	0x00
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a564:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 800a568:	b2db      	uxtb	r3, r3
 800a56a:	3b01      	subs	r3, #1
 800a56c:	bf18      	it	ne
 800a56e:	2301      	movne	r3, #1
 800a570:	e7e7      	b.n	800a542 <HAL_TIM_PWM_Start+0x2a>
 800a572:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800a576:	b2db      	uxtb	r3, r3
 800a578:	3b01      	subs	r3, #1
 800a57a:	bf18      	it	ne
 800a57c:	2301      	movne	r3, #1
 800a57e:	e7e0      	b.n	800a542 <HAL_TIM_PWM_Start+0x2a>
 800a580:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800a584:	b2db      	uxtb	r3, r3
 800a586:	3b01      	subs	r3, #1
 800a588:	bf18      	it	ne
 800a58a:	2301      	movne	r3, #1
 800a58c:	e7d9      	b.n	800a542 <HAL_TIM_PWM_Start+0x2a>
 800a58e:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800a592:	b2db      	uxtb	r3, r3
 800a594:	3b01      	subs	r3, #1
 800a596:	bf18      	it	ne
 800a598:	2301      	movne	r3, #1
 800a59a:	e7d2      	b.n	800a542 <HAL_TIM_PWM_Start+0x2a>
 800a59c:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800a5a0:	b2db      	uxtb	r3, r3
 800a5a2:	3b01      	subs	r3, #1
 800a5a4:	bf18      	it	ne
 800a5a6:	2301      	movne	r3, #1
 800a5a8:	e7cb      	b.n	800a542 <HAL_TIM_PWM_Start+0x2a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a5aa:	2302      	movs	r3, #2
 800a5ac:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a5b0:	2201      	movs	r2, #1
 800a5b2:	6820      	ldr	r0, [r4, #0]
 800a5b4:	f7ff ffa0 	bl	800a4f8 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a5b8:	6823      	ldr	r3, [r4, #0]
 800a5ba:	4930      	ldr	r1, [pc, #192]	@ (800a67c <HAL_TIM_PWM_Start+0x164>)
 800a5bc:	4a30      	ldr	r2, [pc, #192]	@ (800a680 <HAL_TIM_PWM_Start+0x168>)
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	bf18      	it	ne
 800a5c2:	428b      	cmpne	r3, r1
 800a5c4:	d00b      	beq.n	800a5de <HAL_TIM_PWM_Start+0xc6>
 800a5c6:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d007      	beq.n	800a5de <HAL_TIM_PWM_Start+0xc6>
 800a5ce:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d003      	beq.n	800a5de <HAL_TIM_PWM_Start+0xc6>
 800a5d6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d103      	bne.n	800a5e6 <HAL_TIM_PWM_Start+0xce>
    __HAL_TIM_MOE_ENABLE(htim);
 800a5de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a5e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a5e4:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5e6:	6823      	ldr	r3, [r4, #0]
 800a5e8:	4a24      	ldr	r2, [pc, #144]	@ (800a67c <HAL_TIM_PWM_Start+0x164>)
 800a5ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5ee:	bf18      	it	ne
 800a5f0:	4293      	cmpne	r3, r2
 800a5f2:	d031      	beq.n	800a658 <HAL_TIM_PWM_Start+0x140>
 800a5f4:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d02d      	beq.n	800a658 <HAL_TIM_PWM_Start+0x140>
 800a5fc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a600:	4293      	cmp	r3, r2
 800a602:	d029      	beq.n	800a658 <HAL_TIM_PWM_Start+0x140>
 800a604:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a608:	4293      	cmp	r3, r2
 800a60a:	d025      	beq.n	800a658 <HAL_TIM_PWM_Start+0x140>
 800a60c:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800a610:	4293      	cmp	r3, r2
 800a612:	d021      	beq.n	800a658 <HAL_TIM_PWM_Start+0x140>
 800a614:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800a618:	4293      	cmp	r3, r2
 800a61a:	d01d      	beq.n	800a658 <HAL_TIM_PWM_Start+0x140>
 800a61c:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800a620:	4293      	cmp	r3, r2
 800a622:	d019      	beq.n	800a658 <HAL_TIM_PWM_Start+0x140>
    __HAL_TIM_ENABLE(htim);
 800a624:	681a      	ldr	r2, [r3, #0]
 800a626:	f042 0201 	orr.w	r2, r2, #1
 800a62a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800a62c:	2000      	movs	r0, #0
 800a62e:	e022      	b.n	800a676 <HAL_TIM_PWM_Start+0x15e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a630:	2302      	movs	r3, #2
 800a632:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800a636:	e7bb      	b.n	800a5b0 <HAL_TIM_PWM_Start+0x98>
 800a638:	2302      	movs	r3, #2
 800a63a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800a63e:	e7b7      	b.n	800a5b0 <HAL_TIM_PWM_Start+0x98>
 800a640:	2302      	movs	r3, #2
 800a642:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800a646:	e7b3      	b.n	800a5b0 <HAL_TIM_PWM_Start+0x98>
 800a648:	2302      	movs	r3, #2
 800a64a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a64e:	e7af      	b.n	800a5b0 <HAL_TIM_PWM_Start+0x98>
 800a650:	2302      	movs	r3, #2
 800a652:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a656:	e7ab      	b.n	800a5b0 <HAL_TIM_PWM_Start+0x98>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a658:	6899      	ldr	r1, [r3, #8]
 800a65a:	4a0a      	ldr	r2, [pc, #40]	@ (800a684 <HAL_TIM_PWM_Start+0x16c>)
 800a65c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a65e:	2a06      	cmp	r2, #6
 800a660:	bf18      	it	ne
 800a662:	f5b2 3f80 	cmpne.w	r2, #65536	@ 0x10000
 800a666:	d007      	beq.n	800a678 <HAL_TIM_PWM_Start+0x160>
      __HAL_TIM_ENABLE(htim);
 800a668:	681a      	ldr	r2, [r3, #0]
 800a66a:	f042 0201 	orr.w	r2, r2, #1
 800a66e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800a670:	2000      	movs	r0, #0
 800a672:	e000      	b.n	800a676 <HAL_TIM_PWM_Start+0x15e>
    return HAL_ERROR;
 800a674:	2001      	movs	r0, #1
}
 800a676:	bd10      	pop	{r4, pc}
  return HAL_OK;
 800a678:	2000      	movs	r0, #0
 800a67a:	e7fc      	b.n	800a676 <HAL_TIM_PWM_Start+0x15e>
 800a67c:	40010000 	.word	0x40010000
 800a680:	40010400 	.word	0x40010400
 800a684:	00010007 	.word	0x00010007

0800a688 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a688:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 800a68c:	2a01      	cmp	r2, #1
 800a68e:	d045      	beq.n	800a71c <HAL_TIMEx_MasterConfigSynchronization+0x94>
{
 800a690:	b470      	push	{r4, r5, r6}
 800a692:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 800a694:	2201      	movs	r2, #1
 800a696:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a69a:	2202      	movs	r2, #2
 800a69c:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a6a0:	6802      	ldr	r2, [r0, #0]
 800a6a2:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a6a4:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a6a6:	4e1e      	ldr	r6, [pc, #120]	@ (800a720 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 800a6a8:	4d1e      	ldr	r5, [pc, #120]	@ (800a724 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 800a6aa:	42aa      	cmp	r2, r5
 800a6ac:	bf18      	it	ne
 800a6ae:	42b2      	cmpne	r2, r6
 800a6b0:	d103      	bne.n	800a6ba <HAL_TIMEx_MasterConfigSynchronization+0x32>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a6b2:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a6b6:	684d      	ldr	r5, [r1, #4]
 800a6b8:	4328      	orrs	r0, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a6ba:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a6be:	680d      	ldr	r5, [r1, #0]
 800a6c0:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a6c2:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6c4:	681a      	ldr	r2, [r3, #0]
 800a6c6:	4816      	ldr	r0, [pc, #88]	@ (800a720 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 800a6c8:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800a6cc:	bf18      	it	ne
 800a6ce:	4282      	cmpne	r2, r0
 800a6d0:	d017      	beq.n	800a702 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a6d2:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 800a6d6:	4282      	cmp	r2, r0
 800a6d8:	d013      	beq.n	800a702 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a6da:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800a6de:	4282      	cmp	r2, r0
 800a6e0:	d00f      	beq.n	800a702 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a6e2:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800a6e6:	4282      	cmp	r2, r0
 800a6e8:	d00b      	beq.n	800a702 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a6ea:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 800a6ee:	4282      	cmp	r2, r0
 800a6f0:	d007      	beq.n	800a702 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a6f2:	f5a0 406c 	sub.w	r0, r0, #60416	@ 0xec00
 800a6f6:	4282      	cmp	r2, r0
 800a6f8:	d003      	beq.n	800a702 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a6fa:	f500 3094 	add.w	r0, r0, #75776	@ 0x12800
 800a6fe:	4282      	cmp	r2, r0
 800a700:	d104      	bne.n	800a70c <HAL_TIMEx_MasterConfigSynchronization+0x84>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a702:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a706:	6889      	ldr	r1, [r1, #8]
 800a708:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a70a:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a70c:	2201      	movs	r2, #1
 800a70e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a712:	2000      	movs	r0, #0
 800a714:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 800a718:	bc70      	pop	{r4, r5, r6}
 800a71a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800a71c:	2002      	movs	r0, #2
}
 800a71e:	4770      	bx	lr
 800a720:	40010000 	.word	0x40010000
 800a724:	40010400 	.word	0x40010400

0800a728 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a728:	4770      	bx	lr

0800a72a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a72a:	4770      	bx	lr

0800a72c <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a72c:	4770      	bx	lr

0800a72e <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a72e:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a730:	e852 3f00 	ldrex	r3, [r2]
 800a734:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a738:	e842 3100 	strex	r1, r3, [r2]
 800a73c:	2900      	cmp	r1, #0
 800a73e:	d1f6      	bne.n	800a72e <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a740:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a742:	f102 0308 	add.w	r3, r2, #8
 800a746:	e853 3f00 	ldrex	r3, [r3]
 800a74a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a74e:	3208      	adds	r2, #8
 800a750:	e842 3100 	strex	r1, r3, [r2]
 800a754:	2900      	cmp	r1, #0
 800a756:	d1f3      	bne.n	800a740 <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a758:	2320      	movs	r3, #32
 800a75a:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
}
 800a75e:	4770      	bx	lr

0800a760 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a760:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a762:	e852 3f00 	ldrex	r3, [r2]
 800a766:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a76a:	e842 3100 	strex	r1, r3, [r2]
 800a76e:	2900      	cmp	r1, #0
 800a770:	d1f6      	bne.n	800a760 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a772:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a774:	f102 0308 	add.w	r3, r2, #8
 800a778:	e853 1f00 	ldrex	r1, [r3]
 800a77c:	4b0d      	ldr	r3, [pc, #52]	@ (800a7b4 <UART_EndRxTransfer+0x54>)
 800a77e:	400b      	ands	r3, r1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a780:	3208      	adds	r2, #8
 800a782:	e842 3100 	strex	r1, r3, [r2]
 800a786:	2900      	cmp	r1, #0
 800a788:	d1f3      	bne.n	800a772 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a78a:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800a78c:	2b01      	cmp	r3, #1
 800a78e:	d006      	beq.n	800a79e <UART_EndRxTransfer+0x3e>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a790:	2320      	movs	r3, #32
 800a792:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a796:	2300      	movs	r3, #0
 800a798:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a79a:	6703      	str	r3, [r0, #112]	@ 0x70
}
 800a79c:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a79e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7a0:	e852 3f00 	ldrex	r3, [r2]
 800a7a4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7a8:	e842 3100 	strex	r1, r3, [r2]
 800a7ac:	2900      	cmp	r1, #0
 800a7ae:	d1f6      	bne.n	800a79e <UART_EndRxTransfer+0x3e>
 800a7b0:	e7ee      	b.n	800a790 <UART_EndRxTransfer+0x30>
 800a7b2:	bf00      	nop
 800a7b4:	effffffe 	.word	0xeffffffe

0800a7b8 <HAL_UART_Transmit_DMA>:
{
 800a7b8:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800a7ba:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 800a7be:	2a20      	cmp	r2, #32
 800a7c0:	d14a      	bne.n	800a858 <HAL_UART_Transmit_DMA+0xa0>
{
 800a7c2:	b510      	push	{r4, lr}
 800a7c4:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	bf18      	it	ne
 800a7ca:	2900      	cmpne	r1, #0
 800a7cc:	d046      	beq.n	800a85c <HAL_UART_Transmit_DMA+0xa4>
    __HAL_LOCK(huart);
 800a7ce:	f890 2080 	ldrb.w	r2, [r0, #128]	@ 0x80
 800a7d2:	2a01      	cmp	r2, #1
 800a7d4:	d044      	beq.n	800a860 <HAL_UART_Transmit_DMA+0xa8>
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	f880 2080 	strb.w	r2, [r0, #128]	@ 0x80
    huart->pTxBuffPtr  = pData;
 800a7dc:	6501      	str	r1, [r0, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800a7de:	f8a0 3054 	strh.w	r3, [r0, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a7e2:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a7ec:	2221      	movs	r2, #33	@ 0x21
 800a7ee:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
    if (huart->hdmatx != NULL)
 800a7f2:	6f82      	ldr	r2, [r0, #120]	@ 0x78
 800a7f4:	b1e2      	cbz	r2, 800a830 <HAL_UART_Transmit_DMA+0x78>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a7f6:	491b      	ldr	r1, [pc, #108]	@ (800a864 <HAL_UART_Transmit_DMA+0xac>)
 800a7f8:	63d1      	str	r1, [r2, #60]	@ 0x3c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a7fa:	6f82      	ldr	r2, [r0, #120]	@ 0x78
 800a7fc:	491a      	ldr	r1, [pc, #104]	@ (800a868 <HAL_UART_Transmit_DMA+0xb0>)
 800a7fe:	6411      	str	r1, [r2, #64]	@ 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a800:	6f82      	ldr	r2, [r0, #120]	@ 0x78
 800a802:	491a      	ldr	r1, [pc, #104]	@ (800a86c <HAL_UART_Transmit_DMA+0xb4>)
 800a804:	64d1      	str	r1, [r2, #76]	@ 0x4c
      huart->hdmatx->XferAbortCallback = NULL;
 800a806:	6f82      	ldr	r2, [r0, #120]	@ 0x78
 800a808:	2100      	movs	r1, #0
 800a80a:	6511      	str	r1, [r2, #80]	@ 0x50
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a80c:	6802      	ldr	r2, [r0, #0]
 800a80e:	3228      	adds	r2, #40	@ 0x28
 800a810:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 800a812:	6f80      	ldr	r0, [r0, #120]	@ 0x78
 800a814:	f7f9 fe64 	bl	80044e0 <HAL_DMA_Start_IT>
 800a818:	b150      	cbz	r0, 800a830 <HAL_UART_Transmit_DMA+0x78>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a81a:	2310      	movs	r3, #16
 800a81c:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        __HAL_UNLOCK(huart);
 800a820:	2300      	movs	r3, #0
 800a822:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
        huart->gState = HAL_UART_STATE_READY;
 800a826:	2320      	movs	r3, #32
 800a828:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
        return HAL_ERROR;
 800a82c:	2001      	movs	r0, #1
 800a82e:	e012      	b.n	800a856 <HAL_UART_Transmit_DMA+0x9e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a830:	6823      	ldr	r3, [r4, #0]
 800a832:	2240      	movs	r2, #64	@ 0x40
 800a834:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 800a836:	2300      	movs	r3, #0
 800a838:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a83c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a83e:	f102 0308 	add.w	r3, r2, #8
 800a842:	e853 3f00 	ldrex	r3, [r3]
 800a846:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a84a:	3208      	adds	r2, #8
 800a84c:	e842 3100 	strex	r1, r3, [r2]
 800a850:	2900      	cmp	r1, #0
 800a852:	d1f3      	bne.n	800a83c <HAL_UART_Transmit_DMA+0x84>
    return HAL_OK;
 800a854:	2000      	movs	r0, #0
}
 800a856:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800a858:	2002      	movs	r0, #2
}
 800a85a:	4770      	bx	lr
      return HAL_ERROR;
 800a85c:	2001      	movs	r0, #1
 800a85e:	e7fa      	b.n	800a856 <HAL_UART_Transmit_DMA+0x9e>
    __HAL_LOCK(huart);
 800a860:	2002      	movs	r0, #2
 800a862:	e7f8      	b.n	800a856 <HAL_UART_Transmit_DMA+0x9e>
 800a864:	0800a873 	.word	0x0800a873
 800a868:	0800a8df 	.word	0x0800a8df
 800a86c:	0800a8ed 	.word	0x0800a8ed

0800a870 <HAL_UART_TxCpltCallback>:
}
 800a870:	4770      	bx	lr

0800a872 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a872:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a874:	6b81      	ldr	r1, [r0, #56]	@ 0x38

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a876:	69c3      	ldr	r3, [r0, #28]
 800a878:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a87c:	d018      	beq.n	800a8b0 <UART_DMATransmitCplt+0x3e>
  {
    huart->TxXferCount = 0U;
 800a87e:	2300      	movs	r3, #0
 800a880:	f8a1 3056 	strh.w	r3, [r1, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a884:	680a      	ldr	r2, [r1, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a886:	f102 0308 	add.w	r3, r2, #8
 800a88a:	e853 3f00 	ldrex	r3, [r3]
 800a88e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a892:	3208      	adds	r2, #8
 800a894:	e842 3000 	strex	r0, r3, [r2]
 800a898:	2800      	cmp	r0, #0
 800a89a:	d1f3      	bne.n	800a884 <UART_DMATransmitCplt+0x12>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a89c:	680a      	ldr	r2, [r1, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a89e:	e852 3f00 	ldrex	r3, [r2]
 800a8a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8a6:	e842 3000 	strex	r0, r3, [r2]
 800a8aa:	2800      	cmp	r0, #0
 800a8ac:	d1f6      	bne.n	800a89c <UART_DMATransmitCplt+0x2a>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a8ae:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800a8b0:	4608      	mov	r0, r1
 800a8b2:	f7ff ffdd 	bl	800a870 <HAL_UART_TxCpltCallback>
}
 800a8b6:	e7fa      	b.n	800a8ae <UART_DMATransmitCplt+0x3c>

0800a8b8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a8b8:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a8ba:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8bc:	e852 3f00 	ldrex	r3, [r2]
 800a8c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8c4:	e842 3100 	strex	r1, r3, [r2]
 800a8c8:	2900      	cmp	r1, #0
 800a8ca:	d1f6      	bne.n	800a8ba <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a8cc:	2320      	movs	r3, #32
 800a8ce:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	6743      	str	r3, [r0, #116]	@ 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a8d6:	f7ff ffcb 	bl	800a870 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a8da:	bd08      	pop	{r3, pc}

0800a8dc <HAL_UART_TxHalfCpltCallback>:
}
 800a8dc:	4770      	bx	lr

0800a8de <UART_DMATxHalfCplt>:
{
 800a8de:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 800a8e0:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 800a8e2:	f7ff fffb 	bl	800a8dc <HAL_UART_TxHalfCpltCallback>
}
 800a8e6:	bd08      	pop	{r3, pc}

0800a8e8 <HAL_UART_RxCpltCallback>:
}
 800a8e8:	4770      	bx	lr

0800a8ea <HAL_UART_RxHalfCpltCallback>:
}
 800a8ea:	4770      	bx	lr

0800a8ec <UART_DMAError>:
{
 800a8ec:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a8ee:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a8f0:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a8f4:	f8d4 5088 	ldr.w	r5, [r4, #136]	@ 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a8f8:	6823      	ldr	r3, [r4, #0]
 800a8fa:	689b      	ldr	r3, [r3, #8]
 800a8fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a900:	d001      	beq.n	800a906 <UART_DMAError+0x1a>
 800a902:	2a21      	cmp	r2, #33	@ 0x21
 800a904:	d010      	beq.n	800a928 <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a906:	6823      	ldr	r3, [r4, #0]
 800a908:	689b      	ldr	r3, [r3, #8]
 800a90a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800a90e:	d001      	beq.n	800a914 <UART_DMAError+0x28>
 800a910:	2d22      	cmp	r5, #34	@ 0x22
 800a912:	d010      	beq.n	800a936 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a914:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 800a918:	f043 0310 	orr.w	r3, r3, #16
 800a91c:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  HAL_UART_ErrorCallback(huart);
 800a920:	4620      	mov	r0, r4
 800a922:	f7f5 feb9 	bl	8000698 <HAL_UART_ErrorCallback>
}
 800a926:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 800a928:	2300      	movs	r3, #0
 800a92a:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a92e:	4620      	mov	r0, r4
 800a930:	f7ff fefd 	bl	800a72e <UART_EndTxTransfer>
 800a934:	e7e7      	b.n	800a906 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 800a936:	2300      	movs	r3, #0
 800a938:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a93c:	4620      	mov	r0, r4
 800a93e:	f7ff ff0f 	bl	800a760 <UART_EndRxTransfer>
 800a942:	e7e7      	b.n	800a914 <UART_DMAError+0x28>

0800a944 <UART_DMAAbortOnError>:
{
 800a944:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a946:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0U;
 800a948:	2300      	movs	r3, #0
 800a94a:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a94e:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
  HAL_UART_ErrorCallback(huart);
 800a952:	f7f5 fea1 	bl	8000698 <HAL_UART_ErrorCallback>
}
 800a956:	bd08      	pop	{r3, pc}

0800a958 <HAL_UART_IRQHandler>:
{
 800a958:	b570      	push	{r4, r5, r6, lr}
 800a95a:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a95c:	6802      	ldr	r2, [r0, #0]
 800a95e:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a960:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a962:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 800a964:	f640 0c0f 	movw	ip, #2063	@ 0x80f
 800a968:	ea13 0f0c 	tst.w	r3, ip
 800a96c:	d10d      	bne.n	800a98a <HAL_UART_IRQHandler+0x32>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a96e:	f013 0f20 	tst.w	r3, #32
 800a972:	d010      	beq.n	800a996 <HAL_UART_IRQHandler+0x3e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a974:	f010 0f20 	tst.w	r0, #32
 800a978:	d102      	bne.n	800a980 <HAL_UART_IRQHandler+0x28>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a97a:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 800a97e:	d00a      	beq.n	800a996 <HAL_UART_IRQHandler+0x3e>
      if (huart->RxISR != NULL)
 800a980:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800a982:	b393      	cbz	r3, 800a9ea <HAL_UART_IRQHandler+0x92>
        huart->RxISR(huart);
 800a984:	4620      	mov	r0, r4
 800a986:	4798      	blx	r3
      return;
 800a988:	e02f      	b.n	800a9ea <HAL_UART_IRQHandler+0x92>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a98a:	4d86      	ldr	r5, [pc, #536]	@ (800aba4 <HAL_UART_IRQHandler+0x24c>)
 800a98c:	400d      	ands	r5, r1
 800a98e:	d12d      	bne.n	800a9ec <HAL_UART_IRQHandler+0x94>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a990:	4e85      	ldr	r6, [pc, #532]	@ (800aba8 <HAL_UART_IRQHandler+0x250>)
 800a992:	4230      	tst	r0, r6
 800a994:	d12a      	bne.n	800a9ec <HAL_UART_IRQHandler+0x94>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a996:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 800a998:	2d01      	cmp	r5, #1
 800a99a:	f000 80bd 	beq.w	800ab18 <HAL_UART_IRQHandler+0x1c0>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a99e:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800a9a2:	d003      	beq.n	800a9ac <HAL_UART_IRQHandler+0x54>
 800a9a4:	f411 0f80 	tst.w	r1, #4194304	@ 0x400000
 800a9a8:	f040 818b 	bne.w	800acc2 <HAL_UART_IRQHandler+0x36a>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a9ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a9b0:	d007      	beq.n	800a9c2 <HAL_UART_IRQHandler+0x6a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a9b2:	f010 0f80 	tst.w	r0, #128	@ 0x80
 800a9b6:	f040 818b 	bne.w	800acd0 <HAL_UART_IRQHandler+0x378>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a9ba:	f411 0f00 	tst.w	r1, #8388608	@ 0x800000
 800a9be:	f040 8187 	bne.w	800acd0 <HAL_UART_IRQHandler+0x378>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a9c2:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800a9c6:	d003      	beq.n	800a9d0 <HAL_UART_IRQHandler+0x78>
 800a9c8:	f010 0f40 	tst.w	r0, #64	@ 0x40
 800a9cc:	f040 8187 	bne.w	800acde <HAL_UART_IRQHandler+0x386>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a9d0:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800a9d4:	d003      	beq.n	800a9de <HAL_UART_IRQHandler+0x86>
 800a9d6:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 800a9da:	f040 8184 	bne.w	800ace6 <HAL_UART_IRQHandler+0x38e>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a9de:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800a9e2:	d002      	beq.n	800a9ea <HAL_UART_IRQHandler+0x92>
 800a9e4:	2800      	cmp	r0, #0
 800a9e6:	f2c0 8182 	blt.w	800acee <HAL_UART_IRQHandler+0x396>
}
 800a9ea:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a9ec:	f013 0f01 	tst.w	r3, #1
 800a9f0:	d009      	beq.n	800aa06 <HAL_UART_IRQHandler+0xae>
 800a9f2:	f410 7f80 	tst.w	r0, #256	@ 0x100
 800a9f6:	d006      	beq.n	800aa06 <HAL_UART_IRQHandler+0xae>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a9f8:	2601      	movs	r6, #1
 800a9fa:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a9fc:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 800aa00:	4332      	orrs	r2, r6
 800aa02:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa06:	f013 0f02 	tst.w	r3, #2
 800aa0a:	d00b      	beq.n	800aa24 <HAL_UART_IRQHandler+0xcc>
 800aa0c:	f011 0f01 	tst.w	r1, #1
 800aa10:	d008      	beq.n	800aa24 <HAL_UART_IRQHandler+0xcc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aa12:	6822      	ldr	r2, [r4, #0]
 800aa14:	2602      	movs	r6, #2
 800aa16:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aa18:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 800aa1c:	f042 0204 	orr.w	r2, r2, #4
 800aa20:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa24:	f013 0f04 	tst.w	r3, #4
 800aa28:	d00b      	beq.n	800aa42 <HAL_UART_IRQHandler+0xea>
 800aa2a:	f011 0f01 	tst.w	r1, #1
 800aa2e:	d008      	beq.n	800aa42 <HAL_UART_IRQHandler+0xea>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aa30:	6822      	ldr	r2, [r4, #0]
 800aa32:	2604      	movs	r6, #4
 800aa34:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aa36:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 800aa3a:	f042 0202 	orr.w	r2, r2, #2
 800aa3e:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 800aa42:	f013 0f08 	tst.w	r3, #8
 800aa46:	d00b      	beq.n	800aa60 <HAL_UART_IRQHandler+0x108>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800aa48:	f010 0f20 	tst.w	r0, #32
 800aa4c:	d100      	bne.n	800aa50 <HAL_UART_IRQHandler+0xf8>
 800aa4e:	b13d      	cbz	r5, 800aa60 <HAL_UART_IRQHandler+0x108>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aa50:	6822      	ldr	r2, [r4, #0]
 800aa52:	2508      	movs	r5, #8
 800aa54:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aa56:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 800aa5a:	432a      	orrs	r2, r5
 800aa5c:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800aa60:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800aa64:	d00c      	beq.n	800aa80 <HAL_UART_IRQHandler+0x128>
 800aa66:	f010 6f80 	tst.w	r0, #67108864	@ 0x4000000
 800aa6a:	d009      	beq.n	800aa80 <HAL_UART_IRQHandler+0x128>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aa6c:	6822      	ldr	r2, [r4, #0]
 800aa6e:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 800aa72:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800aa74:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 800aa78:	f042 0220 	orr.w	r2, r2, #32
 800aa7c:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aa80:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 800aa84:	2a00      	cmp	r2, #0
 800aa86:	d0b0      	beq.n	800a9ea <HAL_UART_IRQHandler+0x92>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800aa88:	f013 0f20 	tst.w	r3, #32
 800aa8c:	d009      	beq.n	800aaa2 <HAL_UART_IRQHandler+0x14a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aa8e:	f010 0f20 	tst.w	r0, #32
 800aa92:	d102      	bne.n	800aa9a <HAL_UART_IRQHandler+0x142>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aa94:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 800aa98:	d003      	beq.n	800aaa2 <HAL_UART_IRQHandler+0x14a>
        if (huart->RxISR != NULL)
 800aa9a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800aa9c:	b10b      	cbz	r3, 800aaa2 <HAL_UART_IRQHandler+0x14a>
          huart->RxISR(huart);
 800aa9e:	4620      	mov	r0, r4
 800aaa0:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 800aaa2:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aaa6:	6823      	ldr	r3, [r4, #0]
 800aaa8:	689b      	ldr	r3, [r3, #8]
 800aaaa:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800aaae:	d102      	bne.n	800aab6 <HAL_UART_IRQHandler+0x15e>
 800aab0:	f012 0f28 	tst.w	r2, #40	@ 0x28
 800aab4:	d029      	beq.n	800ab0a <HAL_UART_IRQHandler+0x1b2>
        UART_EndRxTransfer(huart);
 800aab6:	4620      	mov	r0, r4
 800aab8:	f7ff fe52 	bl	800a760 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aabc:	6823      	ldr	r3, [r4, #0]
 800aabe:	689b      	ldr	r3, [r3, #8]
 800aac0:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800aac4:	d01d      	beq.n	800ab02 <HAL_UART_IRQHandler+0x1aa>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aac6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aac8:	f102 0308 	add.w	r3, r2, #8
 800aacc:	e853 3f00 	ldrex	r3, [r3]
 800aad0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aad4:	3208      	adds	r2, #8
 800aad6:	e842 3100 	strex	r1, r3, [r2]
 800aada:	2900      	cmp	r1, #0
 800aadc:	d1f3      	bne.n	800aac6 <HAL_UART_IRQHandler+0x16e>
          if (huart->hdmarx != NULL)
 800aade:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800aae0:	b15b      	cbz	r3, 800aafa <HAL_UART_IRQHandler+0x1a2>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800aae2:	4a32      	ldr	r2, [pc, #200]	@ (800abac <HAL_UART_IRQHandler+0x254>)
 800aae4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800aae6:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 800aae8:	f7f9 ffe6 	bl	8004ab8 <HAL_DMA_Abort_IT>
 800aaec:	2800      	cmp	r0, #0
 800aaee:	f43f af7c 	beq.w	800a9ea <HAL_UART_IRQHandler+0x92>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800aaf2:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 800aaf4:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800aaf6:	4798      	blx	r3
 800aaf8:	e777      	b.n	800a9ea <HAL_UART_IRQHandler+0x92>
            HAL_UART_ErrorCallback(huart);
 800aafa:	4620      	mov	r0, r4
 800aafc:	f7f5 fdcc 	bl	8000698 <HAL_UART_ErrorCallback>
 800ab00:	e773      	b.n	800a9ea <HAL_UART_IRQHandler+0x92>
          HAL_UART_ErrorCallback(huart);
 800ab02:	4620      	mov	r0, r4
 800ab04:	f7f5 fdc8 	bl	8000698 <HAL_UART_ErrorCallback>
 800ab08:	e76f      	b.n	800a9ea <HAL_UART_IRQHandler+0x92>
        HAL_UART_ErrorCallback(huart);
 800ab0a:	4620      	mov	r0, r4
 800ab0c:	f7f5 fdc4 	bl	8000698 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab10:	2300      	movs	r3, #0
 800ab12:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
    return;
 800ab16:	e768      	b.n	800a9ea <HAL_UART_IRQHandler+0x92>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ab18:	f013 0f10 	tst.w	r3, #16
 800ab1c:	f43f af3f 	beq.w	800a99e <HAL_UART_IRQHandler+0x46>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ab20:	f010 0f10 	tst.w	r0, #16
 800ab24:	f43f af3b 	beq.w	800a99e <HAL_UART_IRQHandler+0x46>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ab28:	2310      	movs	r3, #16
 800ab2a:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab2c:	6823      	ldr	r3, [r4, #0]
 800ab2e:	689b      	ldr	r3, [r3, #8]
 800ab30:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800ab34:	f000 808d 	beq.w	800ac52 <HAL_UART_IRQHandler+0x2fa>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ab38:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800ab3a:	6813      	ldr	r3, [r2, #0]
 800ab3c:	481c      	ldr	r0, [pc, #112]	@ (800abb0 <HAL_UART_IRQHandler+0x258>)
 800ab3e:	491d      	ldr	r1, [pc, #116]	@ (800abb4 <HAL_UART_IRQHandler+0x25c>)
 800ab40:	428b      	cmp	r3, r1
 800ab42:	bf18      	it	ne
 800ab44:	4283      	cmpne	r3, r0
 800ab46:	d037      	beq.n	800abb8 <HAL_UART_IRQHandler+0x260>
 800ab48:	3118      	adds	r1, #24
 800ab4a:	428b      	cmp	r3, r1
 800ab4c:	d034      	beq.n	800abb8 <HAL_UART_IRQHandler+0x260>
 800ab4e:	3118      	adds	r1, #24
 800ab50:	428b      	cmp	r3, r1
 800ab52:	d031      	beq.n	800abb8 <HAL_UART_IRQHandler+0x260>
 800ab54:	3118      	adds	r1, #24
 800ab56:	428b      	cmp	r3, r1
 800ab58:	d02e      	beq.n	800abb8 <HAL_UART_IRQHandler+0x260>
 800ab5a:	3118      	adds	r1, #24
 800ab5c:	428b      	cmp	r3, r1
 800ab5e:	d02b      	beq.n	800abb8 <HAL_UART_IRQHandler+0x260>
 800ab60:	3118      	adds	r1, #24
 800ab62:	428b      	cmp	r3, r1
 800ab64:	d028      	beq.n	800abb8 <HAL_UART_IRQHandler+0x260>
 800ab66:	3118      	adds	r1, #24
 800ab68:	428b      	cmp	r3, r1
 800ab6a:	d025      	beq.n	800abb8 <HAL_UART_IRQHandler+0x260>
 800ab6c:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 800ab70:	428b      	cmp	r3, r1
 800ab72:	d021      	beq.n	800abb8 <HAL_UART_IRQHandler+0x260>
 800ab74:	3118      	adds	r1, #24
 800ab76:	428b      	cmp	r3, r1
 800ab78:	d01e      	beq.n	800abb8 <HAL_UART_IRQHandler+0x260>
 800ab7a:	3118      	adds	r1, #24
 800ab7c:	428b      	cmp	r3, r1
 800ab7e:	d01b      	beq.n	800abb8 <HAL_UART_IRQHandler+0x260>
 800ab80:	3118      	adds	r1, #24
 800ab82:	428b      	cmp	r3, r1
 800ab84:	d018      	beq.n	800abb8 <HAL_UART_IRQHandler+0x260>
 800ab86:	3118      	adds	r1, #24
 800ab88:	428b      	cmp	r3, r1
 800ab8a:	d015      	beq.n	800abb8 <HAL_UART_IRQHandler+0x260>
 800ab8c:	3118      	adds	r1, #24
 800ab8e:	428b      	cmp	r3, r1
 800ab90:	d012      	beq.n	800abb8 <HAL_UART_IRQHandler+0x260>
 800ab92:	3118      	adds	r1, #24
 800ab94:	428b      	cmp	r3, r1
 800ab96:	d00f      	beq.n	800abb8 <HAL_UART_IRQHandler+0x260>
 800ab98:	3118      	adds	r1, #24
 800ab9a:	428b      	cmp	r3, r1
 800ab9c:	d00c      	beq.n	800abb8 <HAL_UART_IRQHandler+0x260>
 800ab9e:	685b      	ldr	r3, [r3, #4]
 800aba0:	b29b      	uxth	r3, r3
 800aba2:	e00b      	b.n	800abbc <HAL_UART_IRQHandler+0x264>
 800aba4:	10000001 	.word	0x10000001
 800aba8:	04000120 	.word	0x04000120
 800abac:	0800a945 	.word	0x0800a945
 800abb0:	40020010 	.word	0x40020010
 800abb4:	40020028 	.word	0x40020028
 800abb8:	685b      	ldr	r3, [r3, #4]
 800abba:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	f43f af14 	beq.w	800a9ea <HAL_UART_IRQHandler+0x92>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800abc2:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 800abc6:	4299      	cmp	r1, r3
 800abc8:	f67f af0f 	bls.w	800a9ea <HAL_UART_IRQHandler+0x92>
        huart->RxXferCount = nb_remaining_rx_data;
 800abcc:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800abd0:	69d3      	ldr	r3, [r2, #28]
 800abd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800abd6:	d031      	beq.n	800ac3c <HAL_UART_IRQHandler+0x2e4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800abd8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abda:	e852 3f00 	ldrex	r3, [r2]
 800abde:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abe2:	e842 3100 	strex	r1, r3, [r2]
 800abe6:	2900      	cmp	r1, #0
 800abe8:	d1f6      	bne.n	800abd8 <HAL_UART_IRQHandler+0x280>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abea:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abec:	f102 0308 	add.w	r3, r2, #8
 800abf0:	e853 3f00 	ldrex	r3, [r3]
 800abf4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abf8:	3208      	adds	r2, #8
 800abfa:	e842 3100 	strex	r1, r3, [r2]
 800abfe:	2900      	cmp	r1, #0
 800ac00:	d1f3      	bne.n	800abea <HAL_UART_IRQHandler+0x292>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac02:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac04:	f102 0308 	add.w	r3, r2, #8
 800ac08:	e853 3f00 	ldrex	r3, [r3]
 800ac0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac10:	3208      	adds	r2, #8
 800ac12:	e842 3100 	strex	r1, r3, [r2]
 800ac16:	2900      	cmp	r1, #0
 800ac18:	d1f3      	bne.n	800ac02 <HAL_UART_IRQHandler+0x2aa>
          huart->RxState = HAL_UART_STATE_READY;
 800ac1a:	2320      	movs	r3, #32
 800ac1c:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac20:	2300      	movs	r3, #0
 800ac22:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac24:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac26:	e852 3f00 	ldrex	r3, [r2]
 800ac2a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac2e:	e842 3100 	strex	r1, r3, [r2]
 800ac32:	2900      	cmp	r1, #0
 800ac34:	d1f6      	bne.n	800ac24 <HAL_UART_IRQHandler+0x2cc>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ac36:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 800ac38:	f7f9 fd9e 	bl	8004778 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ac3c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 800ac40:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800ac44:	b29b      	uxth	r3, r3
 800ac46:	1ac9      	subs	r1, r1, r3
 800ac48:	b289      	uxth	r1, r1
 800ac4a:	4620      	mov	r0, r4
 800ac4c:	f7f6 fe62 	bl	8001914 <HAL_UARTEx_RxEventCallback>
      return;
 800ac50:	e6cb      	b.n	800a9ea <HAL_UART_IRQHandler+0x92>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ac52:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 800ac56:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800ac5a:	b29b      	uxth	r3, r3
 800ac5c:	1ac9      	subs	r1, r1, r3
 800ac5e:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800ac60:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800ac64:	b29b      	uxth	r3, r3
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	f43f aebf 	beq.w	800a9ea <HAL_UART_IRQHandler+0x92>
          && (nb_rx_data > 0U))
 800ac6c:	2900      	cmp	r1, #0
 800ac6e:	f43f aebc 	beq.w	800a9ea <HAL_UART_IRQHandler+0x92>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ac72:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac74:	e852 3f00 	ldrex	r3, [r2]
 800ac78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac7c:	e842 3000 	strex	r0, r3, [r2]
 800ac80:	2800      	cmp	r0, #0
 800ac82:	d1f6      	bne.n	800ac72 <HAL_UART_IRQHandler+0x31a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ac84:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac86:	f102 0308 	add.w	r3, r2, #8
 800ac8a:	e853 0f00 	ldrex	r0, [r3]
 800ac8e:	4b1a      	ldr	r3, [pc, #104]	@ (800acf8 <HAL_UART_IRQHandler+0x3a0>)
 800ac90:	4003      	ands	r3, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac92:	3208      	adds	r2, #8
 800ac94:	e842 3000 	strex	r0, r3, [r2]
 800ac98:	2800      	cmp	r0, #0
 800ac9a:	d1f3      	bne.n	800ac84 <HAL_UART_IRQHandler+0x32c>
        huart->RxState = HAL_UART_STATE_READY;
 800ac9c:	2320      	movs	r3, #32
 800ac9e:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aca2:	2300      	movs	r3, #0
 800aca4:	66e3      	str	r3, [r4, #108]	@ 0x6c
        huart->RxISR = NULL;
 800aca6:	6723      	str	r3, [r4, #112]	@ 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aca8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acaa:	e852 3f00 	ldrex	r3, [r2]
 800acae:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acb2:	e842 3000 	strex	r0, r3, [r2]
 800acb6:	2800      	cmp	r0, #0
 800acb8:	d1f6      	bne.n	800aca8 <HAL_UART_IRQHandler+0x350>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800acba:	4620      	mov	r0, r4
 800acbc:	f7f6 fe2a 	bl	8001914 <HAL_UARTEx_RxEventCallback>
      return;
 800acc0:	e693      	b.n	800a9ea <HAL_UART_IRQHandler+0x92>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800acc2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800acc6:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800acc8:	4620      	mov	r0, r4
 800acca:	f000 fd67 	bl	800b79c <HAL_UARTEx_WakeupCallback>
    return;
 800acce:	e68c      	b.n	800a9ea <HAL_UART_IRQHandler+0x92>
    if (huart->TxISR != NULL)
 800acd0:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	f43f ae89 	beq.w	800a9ea <HAL_UART_IRQHandler+0x92>
      huart->TxISR(huart);
 800acd8:	4620      	mov	r0, r4
 800acda:	4798      	blx	r3
    return;
 800acdc:	e685      	b.n	800a9ea <HAL_UART_IRQHandler+0x92>
    UART_EndTransmit_IT(huart);
 800acde:	4620      	mov	r0, r4
 800ace0:	f7ff fdea 	bl	800a8b8 <UART_EndTransmit_IT>
    return;
 800ace4:	e681      	b.n	800a9ea <HAL_UART_IRQHandler+0x92>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ace6:	4620      	mov	r0, r4
 800ace8:	f000 fd5a 	bl	800b7a0 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 800acec:	e67d      	b.n	800a9ea <HAL_UART_IRQHandler+0x92>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800acee:	4620      	mov	r0, r4
 800acf0:	f000 fd55 	bl	800b79e <HAL_UARTEx_RxFifoFullCallback>
    return;
 800acf4:	e679      	b.n	800a9ea <HAL_UART_IRQHandler+0x92>
 800acf6:	bf00      	nop
 800acf8:	effffffe 	.word	0xeffffffe

0800acfc <UART_DMARxHalfCplt>:
{
 800acfc:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800acfe:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad00:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800ad02:	2b01      	cmp	r3, #1
 800ad04:	d002      	beq.n	800ad0c <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 800ad06:	f7ff fdf0 	bl	800a8ea <HAL_UART_RxHalfCpltCallback>
}
 800ad0a:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ad0c:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 800ad10:	0849      	lsrs	r1, r1, #1
 800ad12:	f7f6 fdff 	bl	8001914 <HAL_UARTEx_RxEventCallback>
 800ad16:	e7f8      	b.n	800ad0a <UART_DMARxHalfCplt+0xe>

0800ad18 <UART_DMAReceiveCplt>:
{
 800ad18:	b508      	push	{r3, lr}
 800ad1a:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad1c:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ad1e:	69db      	ldr	r3, [r3, #28]
 800ad20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad24:	d029      	beq.n	800ad7a <UART_DMAReceiveCplt+0x62>
    huart->RxXferCount = 0U;
 800ad26:	2300      	movs	r3, #0
 800ad28:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad2c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad2e:	e852 3f00 	ldrex	r3, [r2]
 800ad32:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad36:	e842 3100 	strex	r1, r3, [r2]
 800ad3a:	2900      	cmp	r1, #0
 800ad3c:	d1f6      	bne.n	800ad2c <UART_DMAReceiveCplt+0x14>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad3e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad40:	f102 0308 	add.w	r3, r2, #8
 800ad44:	e853 3f00 	ldrex	r3, [r3]
 800ad48:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad4c:	3208      	adds	r2, #8
 800ad4e:	e842 3100 	strex	r1, r3, [r2]
 800ad52:	2900      	cmp	r1, #0
 800ad54:	d1f3      	bne.n	800ad3e <UART_DMAReceiveCplt+0x26>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad56:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad58:	f102 0308 	add.w	r3, r2, #8
 800ad5c:	e853 3f00 	ldrex	r3, [r3]
 800ad60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad64:	3208      	adds	r2, #8
 800ad66:	e842 3100 	strex	r1, r3, [r2]
 800ad6a:	2900      	cmp	r1, #0
 800ad6c:	d1f3      	bne.n	800ad56 <UART_DMAReceiveCplt+0x3e>
    huart->RxState = HAL_UART_STATE_READY;
 800ad6e:	2320      	movs	r3, #32
 800ad70:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad74:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800ad76:	2b01      	cmp	r3, #1
 800ad78:	d005      	beq.n	800ad86 <UART_DMAReceiveCplt+0x6e>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad7a:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800ad7c:	2b01      	cmp	r3, #1
 800ad7e:	d00c      	beq.n	800ad9a <UART_DMAReceiveCplt+0x82>
    HAL_UART_RxCpltCallback(huart);
 800ad80:	f7ff fdb2 	bl	800a8e8 <HAL_UART_RxCpltCallback>
}
 800ad84:	bd08      	pop	{r3, pc}
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad86:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad88:	e852 3f00 	ldrex	r3, [r2]
 800ad8c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad90:	e842 3100 	strex	r1, r3, [r2]
 800ad94:	2900      	cmp	r1, #0
 800ad96:	d1f6      	bne.n	800ad86 <UART_DMAReceiveCplt+0x6e>
 800ad98:	e7ef      	b.n	800ad7a <UART_DMAReceiveCplt+0x62>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ad9a:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 800ad9e:	f7f6 fdb9 	bl	8001914 <HAL_UARTEx_RxEventCallback>
 800ada2:	e7ef      	b.n	800ad84 <UART_DMAReceiveCplt+0x6c>

0800ada4 <UART_SetConfig>:
{
 800ada4:	b570      	push	{r4, r5, r6, lr}
 800ada6:	b086      	sub	sp, #24
 800ada8:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800adaa:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800adac:	6883      	ldr	r3, [r0, #8]
 800adae:	6902      	ldr	r2, [r0, #16]
 800adb0:	4313      	orrs	r3, r2
 800adb2:	6942      	ldr	r2, [r0, #20]
 800adb4:	4313      	orrs	r3, r2
 800adb6:	69c2      	ldr	r2, [r0, #28]
 800adb8:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800adba:	6808      	ldr	r0, [r1, #0]
 800adbc:	4a88      	ldr	r2, [pc, #544]	@ (800afe0 <UART_SetConfig+0x23c>)
 800adbe:	4002      	ands	r2, r0
 800adc0:	431a      	orrs	r2, r3
 800adc2:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800adc4:	6822      	ldr	r2, [r4, #0]
 800adc6:	6853      	ldr	r3, [r2, #4]
 800adc8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800adcc:	68e1      	ldr	r1, [r4, #12]
 800adce:	430b      	orrs	r3, r1
 800add0:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800add2:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800add4:	6822      	ldr	r2, [r4, #0]
 800add6:	4b83      	ldr	r3, [pc, #524]	@ (800afe4 <UART_SetConfig+0x240>)
 800add8:	429a      	cmp	r2, r3
 800adda:	d001      	beq.n	800ade0 <UART_SetConfig+0x3c>
    tmpreg |= huart->Init.OneBitSampling;
 800addc:	6a23      	ldr	r3, [r4, #32]
 800adde:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ade0:	6890      	ldr	r0, [r2, #8]
 800ade2:	4b81      	ldr	r3, [pc, #516]	@ (800afe8 <UART_SetConfig+0x244>)
 800ade4:	4003      	ands	r3, r0
 800ade6:	430b      	orrs	r3, r1
 800ade8:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800adea:	6822      	ldr	r2, [r4, #0]
 800adec:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800adee:	f023 030f 	bic.w	r3, r3, #15
 800adf2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800adf4:	430b      	orrs	r3, r1
 800adf6:	62d3      	str	r3, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800adf8:	6822      	ldr	r2, [r4, #0]
 800adfa:	4b7c      	ldr	r3, [pc, #496]	@ (800afec <UART_SetConfig+0x248>)
 800adfc:	429a      	cmp	r2, r3
 800adfe:	d021      	beq.n	800ae44 <UART_SetConfig+0xa0>
 800ae00:	4b7b      	ldr	r3, [pc, #492]	@ (800aff0 <UART_SetConfig+0x24c>)
 800ae02:	429a      	cmp	r2, r3
 800ae04:	f000 808c 	beq.w	800af20 <UART_SetConfig+0x17c>
 800ae08:	4b7a      	ldr	r3, [pc, #488]	@ (800aff4 <UART_SetConfig+0x250>)
 800ae0a:	429a      	cmp	r2, r3
 800ae0c:	f000 80a2 	beq.w	800af54 <UART_SetConfig+0x1b0>
 800ae10:	4b79      	ldr	r3, [pc, #484]	@ (800aff8 <UART_SetConfig+0x254>)
 800ae12:	429a      	cmp	r2, r3
 800ae14:	f000 80b5 	beq.w	800af82 <UART_SetConfig+0x1de>
 800ae18:	4b78      	ldr	r3, [pc, #480]	@ (800affc <UART_SetConfig+0x258>)
 800ae1a:	429a      	cmp	r2, r3
 800ae1c:	f000 80c8 	beq.w	800afb0 <UART_SetConfig+0x20c>
 800ae20:	4b77      	ldr	r3, [pc, #476]	@ (800b000 <UART_SetConfig+0x25c>)
 800ae22:	429a      	cmp	r2, r3
 800ae24:	f000 80f4 	beq.w	800b010 <UART_SetConfig+0x26c>
 800ae28:	4b76      	ldr	r3, [pc, #472]	@ (800b004 <UART_SetConfig+0x260>)
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	f000 8119 	beq.w	800b062 <UART_SetConfig+0x2be>
 800ae30:	4b75      	ldr	r3, [pc, #468]	@ (800b008 <UART_SetConfig+0x264>)
 800ae32:	429a      	cmp	r2, r3
 800ae34:	f000 812c 	beq.w	800b090 <UART_SetConfig+0x2ec>
 800ae38:	4b6a      	ldr	r3, [pc, #424]	@ (800afe4 <UART_SetConfig+0x240>)
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	f000 813f 	beq.w	800b0be <UART_SetConfig+0x31a>
 800ae40:	2380      	movs	r3, #128	@ 0x80
 800ae42:	e033      	b.n	800aeac <UART_SetConfig+0x108>
 800ae44:	4b71      	ldr	r3, [pc, #452]	@ (800b00c <UART_SetConfig+0x268>)
 800ae46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae48:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ae4c:	2b28      	cmp	r3, #40	@ 0x28
 800ae4e:	d865      	bhi.n	800af1c <UART_SetConfig+0x178>
 800ae50:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ae54:	00640029 	.word	0x00640029
 800ae58:	00640064 	.word	0x00640064
 800ae5c:	00640064 	.word	0x00640064
 800ae60:	00640064 	.word	0x00640064
 800ae64:	0064014d 	.word	0x0064014d
 800ae68:	00640064 	.word	0x00640064
 800ae6c:	00640064 	.word	0x00640064
 800ae70:	00640064 	.word	0x00640064
 800ae74:	0064002b 	.word	0x0064002b
 800ae78:	00640064 	.word	0x00640064
 800ae7c:	00640064 	.word	0x00640064
 800ae80:	00640064 	.word	0x00640064
 800ae84:	0064005e 	.word	0x0064005e
 800ae88:	00640064 	.word	0x00640064
 800ae8c:	00640064 	.word	0x00640064
 800ae90:	00640064 	.word	0x00640064
 800ae94:	00640060 	.word	0x00640060
 800ae98:	00640064 	.word	0x00640064
 800ae9c:	00640064 	.word	0x00640064
 800aea0:	00640064 	.word	0x00640064
 800aea4:	0062      	.short	0x0062
 800aea6:	2301      	movs	r3, #1
 800aea8:	e000      	b.n	800aeac <UART_SetConfig+0x108>
 800aeaa:	2308      	movs	r3, #8
  if (UART_INSTANCE_LOWPOWER(huart))
 800aeac:	494d      	ldr	r1, [pc, #308]	@ (800afe4 <UART_SetConfig+0x240>)
 800aeae:	428a      	cmp	r2, r1
 800aeb0:	f000 812f 	beq.w	800b112 <UART_SetConfig+0x36e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aeb4:	69e0      	ldr	r0, [r4, #28]
 800aeb6:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800aeba:	f000 81af 	beq.w	800b21c <UART_SetConfig+0x478>
    switch (clocksource)
 800aebe:	2b20      	cmp	r3, #32
 800aec0:	f200 8207 	bhi.w	800b2d2 <UART_SetConfig+0x52e>
 800aec4:	2b20      	cmp	r3, #32
 800aec6:	f200 8251 	bhi.w	800b36c <UART_SetConfig+0x5c8>
 800aeca:	e8df f013 	tbh	[pc, r3, lsl #1]
 800aece:	021e      	.short	0x021e
 800aed0:	024f0224 	.word	0x024f0224
 800aed4:	0227024f 	.word	0x0227024f
 800aed8:	024f024f 	.word	0x024f024f
 800aedc:	022c024f 	.word	0x022c024f
 800aee0:	024f024f 	.word	0x024f024f
 800aee4:	024f024f 	.word	0x024f024f
 800aee8:	024f024f 	.word	0x024f024f
 800aeec:	0231024f 	.word	0x0231024f
 800aef0:	024f024f 	.word	0x024f024f
 800aef4:	024f024f 	.word	0x024f024f
 800aef8:	024f024f 	.word	0x024f024f
 800aefc:	024f024f 	.word	0x024f024f
 800af00:	024f024f 	.word	0x024f024f
 800af04:	024f024f 	.word	0x024f024f
 800af08:	024f024f 	.word	0x024f024f
 800af0c:	023d024f 	.word	0x023d024f
  UART_GETCLOCKSOURCE(huart, clocksource);
 800af10:	2310      	movs	r3, #16
 800af12:	e7cb      	b.n	800aeac <UART_SetConfig+0x108>
 800af14:	2320      	movs	r3, #32
 800af16:	e7c9      	b.n	800aeac <UART_SetConfig+0x108>
 800af18:	2340      	movs	r3, #64	@ 0x40
 800af1a:	e7c7      	b.n	800aeac <UART_SetConfig+0x108>
 800af1c:	2380      	movs	r3, #128	@ 0x80
 800af1e:	e7c5      	b.n	800aeac <UART_SetConfig+0x108>
 800af20:	4b3a      	ldr	r3, [pc, #232]	@ (800b00c <UART_SetConfig+0x268>)
 800af22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af24:	f003 0307 	and.w	r3, r3, #7
 800af28:	2b05      	cmp	r3, #5
 800af2a:	d811      	bhi.n	800af50 <UART_SetConfig+0x1ac>
 800af2c:	e8df f013 	tbh	[pc, r3, lsl #1]
 800af30:	00e10006 	.word	0x00e10006
 800af34:	000a0008 	.word	0x000a0008
 800af38:	000e000c 	.word	0x000e000c
 800af3c:	2300      	movs	r3, #0
 800af3e:	e7b5      	b.n	800aeac <UART_SetConfig+0x108>
 800af40:	2308      	movs	r3, #8
 800af42:	e7b3      	b.n	800aeac <UART_SetConfig+0x108>
 800af44:	2310      	movs	r3, #16
 800af46:	e7b1      	b.n	800aeac <UART_SetConfig+0x108>
 800af48:	2320      	movs	r3, #32
 800af4a:	e7af      	b.n	800aeac <UART_SetConfig+0x108>
 800af4c:	2340      	movs	r3, #64	@ 0x40
 800af4e:	e7ad      	b.n	800aeac <UART_SetConfig+0x108>
 800af50:	2380      	movs	r3, #128	@ 0x80
 800af52:	e7ab      	b.n	800aeac <UART_SetConfig+0x108>
 800af54:	4b2d      	ldr	r3, [pc, #180]	@ (800b00c <UART_SetConfig+0x268>)
 800af56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af58:	f003 0307 	and.w	r3, r3, #7
 800af5c:	2b05      	cmp	r3, #5
 800af5e:	d80e      	bhi.n	800af7e <UART_SetConfig+0x1da>
 800af60:	e8df f003 	tbb	[pc, r3]
 800af64:	0705c903 	.word	0x0705c903
 800af68:	0b09      	.short	0x0b09
 800af6a:	2300      	movs	r3, #0
 800af6c:	e79e      	b.n	800aeac <UART_SetConfig+0x108>
 800af6e:	2308      	movs	r3, #8
 800af70:	e79c      	b.n	800aeac <UART_SetConfig+0x108>
 800af72:	2310      	movs	r3, #16
 800af74:	e79a      	b.n	800aeac <UART_SetConfig+0x108>
 800af76:	2320      	movs	r3, #32
 800af78:	e798      	b.n	800aeac <UART_SetConfig+0x108>
 800af7a:	2340      	movs	r3, #64	@ 0x40
 800af7c:	e796      	b.n	800aeac <UART_SetConfig+0x108>
 800af7e:	2380      	movs	r3, #128	@ 0x80
 800af80:	e794      	b.n	800aeac <UART_SetConfig+0x108>
 800af82:	4b22      	ldr	r3, [pc, #136]	@ (800b00c <UART_SetConfig+0x268>)
 800af84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af86:	f003 0307 	and.w	r3, r3, #7
 800af8a:	2b05      	cmp	r3, #5
 800af8c:	d80e      	bhi.n	800afac <UART_SetConfig+0x208>
 800af8e:	e8df f003 	tbb	[pc, r3]
 800af92:	b403      	.short	0xb403
 800af94:	0b090705 	.word	0x0b090705
 800af98:	2300      	movs	r3, #0
 800af9a:	e787      	b.n	800aeac <UART_SetConfig+0x108>
 800af9c:	2308      	movs	r3, #8
 800af9e:	e785      	b.n	800aeac <UART_SetConfig+0x108>
 800afa0:	2310      	movs	r3, #16
 800afa2:	e783      	b.n	800aeac <UART_SetConfig+0x108>
 800afa4:	2320      	movs	r3, #32
 800afa6:	e781      	b.n	800aeac <UART_SetConfig+0x108>
 800afa8:	2340      	movs	r3, #64	@ 0x40
 800afaa:	e77f      	b.n	800aeac <UART_SetConfig+0x108>
 800afac:	2380      	movs	r3, #128	@ 0x80
 800afae:	e77d      	b.n	800aeac <UART_SetConfig+0x108>
 800afb0:	4b16      	ldr	r3, [pc, #88]	@ (800b00c <UART_SetConfig+0x268>)
 800afb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afb4:	f003 0307 	and.w	r3, r3, #7
 800afb8:	2b05      	cmp	r3, #5
 800afba:	d80e      	bhi.n	800afda <UART_SetConfig+0x236>
 800afbc:	e8df f003 	tbb	[pc, r3]
 800afc0:	07059f03 	.word	0x07059f03
 800afc4:	0b09      	.short	0x0b09
 800afc6:	2300      	movs	r3, #0
 800afc8:	e770      	b.n	800aeac <UART_SetConfig+0x108>
 800afca:	2308      	movs	r3, #8
 800afcc:	e76e      	b.n	800aeac <UART_SetConfig+0x108>
 800afce:	2310      	movs	r3, #16
 800afd0:	e76c      	b.n	800aeac <UART_SetConfig+0x108>
 800afd2:	2320      	movs	r3, #32
 800afd4:	e76a      	b.n	800aeac <UART_SetConfig+0x108>
 800afd6:	2340      	movs	r3, #64	@ 0x40
 800afd8:	e768      	b.n	800aeac <UART_SetConfig+0x108>
 800afda:	2380      	movs	r3, #128	@ 0x80
 800afdc:	e766      	b.n	800aeac <UART_SetConfig+0x108>
 800afde:	bf00      	nop
 800afe0:	cfff69f3 	.word	0xcfff69f3
 800afe4:	58000c00 	.word	0x58000c00
 800afe8:	11fff4ff 	.word	0x11fff4ff
 800afec:	40011000 	.word	0x40011000
 800aff0:	40004400 	.word	0x40004400
 800aff4:	40004800 	.word	0x40004800
 800aff8:	40004c00 	.word	0x40004c00
 800affc:	40005000 	.word	0x40005000
 800b000:	40011400 	.word	0x40011400
 800b004:	40007800 	.word	0x40007800
 800b008:	40007c00 	.word	0x40007c00
 800b00c:	58024400 	.word	0x58024400
 800b010:	4b7d      	ldr	r3, [pc, #500]	@ (800b208 <UART_SetConfig+0x464>)
 800b012:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b014:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b018:	2b28      	cmp	r3, #40	@ 0x28
 800b01a:	d820      	bhi.n	800b05e <UART_SetConfig+0x2ba>
 800b01c:	e8df f003 	tbb	[pc, r3]
 800b020:	1f1f1f15 	.word	0x1f1f1f15
 800b024:	1f1f1f1f 	.word	0x1f1f1f1f
 800b028:	1f1f1f71 	.word	0x1f1f1f71
 800b02c:	1f1f1f1f 	.word	0x1f1f1f1f
 800b030:	1f1f1f17 	.word	0x1f1f1f17
 800b034:	1f1f1f1f 	.word	0x1f1f1f1f
 800b038:	1f1f1f19 	.word	0x1f1f1f19
 800b03c:	1f1f1f1f 	.word	0x1f1f1f1f
 800b040:	1f1f1f1b 	.word	0x1f1f1f1b
 800b044:	1f1f1f1f 	.word	0x1f1f1f1f
 800b048:	1d          	.byte	0x1d
 800b049:	00          	.byte	0x00
 800b04a:	2301      	movs	r3, #1
 800b04c:	e72e      	b.n	800aeac <UART_SetConfig+0x108>
 800b04e:	2308      	movs	r3, #8
 800b050:	e72c      	b.n	800aeac <UART_SetConfig+0x108>
 800b052:	2310      	movs	r3, #16
 800b054:	e72a      	b.n	800aeac <UART_SetConfig+0x108>
 800b056:	2320      	movs	r3, #32
 800b058:	e728      	b.n	800aeac <UART_SetConfig+0x108>
 800b05a:	2340      	movs	r3, #64	@ 0x40
 800b05c:	e726      	b.n	800aeac <UART_SetConfig+0x108>
 800b05e:	2380      	movs	r3, #128	@ 0x80
 800b060:	e724      	b.n	800aeac <UART_SetConfig+0x108>
 800b062:	4b69      	ldr	r3, [pc, #420]	@ (800b208 <UART_SetConfig+0x464>)
 800b064:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b066:	f003 0307 	and.w	r3, r3, #7
 800b06a:	2b05      	cmp	r3, #5
 800b06c:	d80e      	bhi.n	800b08c <UART_SetConfig+0x2e8>
 800b06e:	e8df f003 	tbb	[pc, r3]
 800b072:	4a03      	.short	0x4a03
 800b074:	0b090705 	.word	0x0b090705
 800b078:	2300      	movs	r3, #0
 800b07a:	e717      	b.n	800aeac <UART_SetConfig+0x108>
 800b07c:	2308      	movs	r3, #8
 800b07e:	e715      	b.n	800aeac <UART_SetConfig+0x108>
 800b080:	2310      	movs	r3, #16
 800b082:	e713      	b.n	800aeac <UART_SetConfig+0x108>
 800b084:	2320      	movs	r3, #32
 800b086:	e711      	b.n	800aeac <UART_SetConfig+0x108>
 800b088:	2340      	movs	r3, #64	@ 0x40
 800b08a:	e70f      	b.n	800aeac <UART_SetConfig+0x108>
 800b08c:	2380      	movs	r3, #128	@ 0x80
 800b08e:	e70d      	b.n	800aeac <UART_SetConfig+0x108>
 800b090:	4b5d      	ldr	r3, [pc, #372]	@ (800b208 <UART_SetConfig+0x464>)
 800b092:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b094:	f003 0307 	and.w	r3, r3, #7
 800b098:	2b05      	cmp	r3, #5
 800b09a:	d80e      	bhi.n	800b0ba <UART_SetConfig+0x316>
 800b09c:	e8df f003 	tbb	[pc, r3]
 800b0a0:	07053503 	.word	0x07053503
 800b0a4:	0b09      	.short	0x0b09
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	e700      	b.n	800aeac <UART_SetConfig+0x108>
 800b0aa:	2308      	movs	r3, #8
 800b0ac:	e6fe      	b.n	800aeac <UART_SetConfig+0x108>
 800b0ae:	2310      	movs	r3, #16
 800b0b0:	e6fc      	b.n	800aeac <UART_SetConfig+0x108>
 800b0b2:	2320      	movs	r3, #32
 800b0b4:	e6fa      	b.n	800aeac <UART_SetConfig+0x108>
 800b0b6:	2340      	movs	r3, #64	@ 0x40
 800b0b8:	e6f8      	b.n	800aeac <UART_SetConfig+0x108>
 800b0ba:	2380      	movs	r3, #128	@ 0x80
 800b0bc:	e6f6      	b.n	800aeac <UART_SetConfig+0x108>
 800b0be:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
 800b0c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b0c4:	f003 0307 	and.w	r3, r3, #7
 800b0c8:	2b05      	cmp	r3, #5
 800b0ca:	d80e      	bhi.n	800b0ea <UART_SetConfig+0x346>
 800b0cc:	e8df f003 	tbb	[pc, r3]
 800b0d0:	07051f03 	.word	0x07051f03
 800b0d4:	0b09      	.short	0x0b09
 800b0d6:	2302      	movs	r3, #2
 800b0d8:	e6e8      	b.n	800aeac <UART_SetConfig+0x108>
 800b0da:	2308      	movs	r3, #8
 800b0dc:	e6e6      	b.n	800aeac <UART_SetConfig+0x108>
 800b0de:	2310      	movs	r3, #16
 800b0e0:	e6e4      	b.n	800aeac <UART_SetConfig+0x108>
 800b0e2:	2320      	movs	r3, #32
 800b0e4:	e6e2      	b.n	800aeac <UART_SetConfig+0x108>
 800b0e6:	2340      	movs	r3, #64	@ 0x40
 800b0e8:	e6e0      	b.n	800aeac <UART_SetConfig+0x108>
 800b0ea:	2380      	movs	r3, #128	@ 0x80
 800b0ec:	e6de      	b.n	800aeac <UART_SetConfig+0x108>
 800b0ee:	2304      	movs	r3, #4
 800b0f0:	e6dc      	b.n	800aeac <UART_SetConfig+0x108>
 800b0f2:	2304      	movs	r3, #4
 800b0f4:	e6da      	b.n	800aeac <UART_SetConfig+0x108>
 800b0f6:	2304      	movs	r3, #4
 800b0f8:	e6d8      	b.n	800aeac <UART_SetConfig+0x108>
 800b0fa:	2304      	movs	r3, #4
 800b0fc:	e6d6      	b.n	800aeac <UART_SetConfig+0x108>
 800b0fe:	2304      	movs	r3, #4
 800b100:	e6d4      	b.n	800aeac <UART_SetConfig+0x108>
 800b102:	2304      	movs	r3, #4
 800b104:	e6d2      	b.n	800aeac <UART_SetConfig+0x108>
 800b106:	2304      	movs	r3, #4
 800b108:	e6d0      	b.n	800aeac <UART_SetConfig+0x108>
 800b10a:	2304      	movs	r3, #4
 800b10c:	e6ce      	b.n	800aeac <UART_SetConfig+0x108>
 800b10e:	2304      	movs	r3, #4
 800b110:	e6cc      	b.n	800aeac <UART_SetConfig+0x108>
    switch (clocksource)
 800b112:	2b20      	cmp	r3, #32
 800b114:	d827      	bhi.n	800b166 <UART_SetConfig+0x3c2>
 800b116:	2b02      	cmp	r3, #2
 800b118:	f0c0 811a 	bcc.w	800b350 <UART_SetConfig+0x5ac>
 800b11c:	3b02      	subs	r3, #2
 800b11e:	2b1e      	cmp	r3, #30
 800b120:	f200 8118 	bhi.w	800b354 <UART_SetConfig+0x5b0>
 800b124:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b128:	01160050 	.word	0x01160050
 800b12c:	01160056 	.word	0x01160056
 800b130:	01160116 	.word	0x01160116
 800b134:	0116005b 	.word	0x0116005b
 800b138:	01160116 	.word	0x01160116
 800b13c:	01160116 	.word	0x01160116
 800b140:	01160116 	.word	0x01160116
 800b144:	01160060 	.word	0x01160060
 800b148:	01160116 	.word	0x01160116
 800b14c:	01160116 	.word	0x01160116
 800b150:	01160116 	.word	0x01160116
 800b154:	01160116 	.word	0x01160116
 800b158:	01160116 	.word	0x01160116
 800b15c:	01160116 	.word	0x01160116
 800b160:	01160116 	.word	0x01160116
 800b164:	006c      	.short	0x006c
 800b166:	2b40      	cmp	r3, #64	@ 0x40
 800b168:	d12c      	bne.n	800b1c4 <UART_SetConfig+0x420>
        pclk = (uint32_t) LSE_VALUE;
 800b16a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b16e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800b170:	4b26      	ldr	r3, [pc, #152]	@ (800b20c <UART_SetConfig+0x468>)
 800b172:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800b176:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b17a:	6865      	ldr	r5, [r4, #4]
 800b17c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800b180:	4299      	cmp	r1, r3
 800b182:	f200 80e9 	bhi.w	800b358 <UART_SetConfig+0x5b4>
 800b186:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800b18a:	f200 80e7 	bhi.w	800b35c <UART_SetConfig+0x5b8>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b18e:	2600      	movs	r6, #0
 800b190:	4633      	mov	r3, r6
 800b192:	4631      	mov	r1, r6
 800b194:	f7f5 f8ae 	bl	80002f4 <__aeabi_uldivmod>
 800b198:	0209      	lsls	r1, r1, #8
 800b19a:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800b19e:	0200      	lsls	r0, r0, #8
 800b1a0:	086b      	lsrs	r3, r5, #1
 800b1a2:	18c0      	adds	r0, r0, r3
 800b1a4:	462a      	mov	r2, r5
 800b1a6:	4633      	mov	r3, r6
 800b1a8:	f141 0100 	adc.w	r1, r1, #0
 800b1ac:	f7f5 f8a2 	bl	80002f4 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b1b0:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 800b1b4:	4b16      	ldr	r3, [pc, #88]	@ (800b210 <UART_SetConfig+0x46c>)
 800b1b6:	429a      	cmp	r2, r3
 800b1b8:	f200 80d2 	bhi.w	800b360 <UART_SetConfig+0x5bc>
          huart->Instance->BRR = usartdiv;
 800b1bc:	6823      	ldr	r3, [r4, #0]
 800b1be:	60d8      	str	r0, [r3, #12]
 800b1c0:	4630      	mov	r0, r6
 800b1c2:	e0d4      	b.n	800b36e <UART_SetConfig+0x5ca>
    switch (clocksource)
 800b1c4:	2001      	movs	r0, #1
 800b1c6:	e0d2      	b.n	800b36e <UART_SetConfig+0x5ca>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b1c8:	f7fc fff2 	bl	80081b0 <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 800b1cc:	2800      	cmp	r0, #0
 800b1ce:	d1ce      	bne.n	800b16e <UART_SetConfig+0x3ca>
 800b1d0:	2000      	movs	r0, #0
 800b1d2:	e0cc      	b.n	800b36e <UART_SetConfig+0x5ca>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1d4:	a803      	add	r0, sp, #12
 800b1d6:	f7fc fffd 	bl	80081d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b1da:	9804      	ldr	r0, [sp, #16]
        break;
 800b1dc:	e7f6      	b.n	800b1cc <UART_SetConfig+0x428>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1de:	4668      	mov	r0, sp
 800b1e0:	f7fd f8f6 	bl	80083d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b1e4:	9801      	ldr	r0, [sp, #4]
        break;
 800b1e6:	e7f1      	b.n	800b1cc <UART_SetConfig+0x428>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b1e8:	4b07      	ldr	r3, [pc, #28]	@ (800b208 <UART_SetConfig+0x464>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f013 0f20 	tst.w	r3, #32
 800b1f0:	d008      	beq.n	800b204 <UART_SetConfig+0x460>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b1f2:	4b05      	ldr	r3, [pc, #20]	@ (800b208 <UART_SetConfig+0x464>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800b1fa:	4806      	ldr	r0, [pc, #24]	@ (800b214 <UART_SetConfig+0x470>)
 800b1fc:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800b1fe:	e7b6      	b.n	800b16e <UART_SetConfig+0x3ca>
    switch (clocksource)
 800b200:	4805      	ldr	r0, [pc, #20]	@ (800b218 <UART_SetConfig+0x474>)
 800b202:	e7b4      	b.n	800b16e <UART_SetConfig+0x3ca>
          pclk = (uint32_t) HSI_VALUE;
 800b204:	4803      	ldr	r0, [pc, #12]	@ (800b214 <UART_SetConfig+0x470>)
 800b206:	e7b2      	b.n	800b16e <UART_SetConfig+0x3ca>
 800b208:	58024400 	.word	0x58024400
 800b20c:	08016d38 	.word	0x08016d38
 800b210:	000ffcff 	.word	0x000ffcff
 800b214:	03d09000 	.word	0x03d09000
 800b218:	003d0900 	.word	0x003d0900
    switch (clocksource)
 800b21c:	2b20      	cmp	r3, #32
 800b21e:	d815      	bhi.n	800b24c <UART_SetConfig+0x4a8>
 800b220:	2b20      	cmp	r3, #32
 800b222:	f200 809f 	bhi.w	800b364 <UART_SetConfig+0x5c0>
 800b226:	e8df f003 	tbb	[pc, r3]
 800b22a:	3731      	.short	0x3731
 800b22c:	9d3a9d9d 	.word	0x9d3a9d9d
 800b230:	9d3f9d9d 	.word	0x9d3f9d9d
 800b234:	9d9d9d9d 	.word	0x9d9d9d9d
 800b238:	9d449d9d 	.word	0x9d449d9d
 800b23c:	9d9d9d9d 	.word	0x9d9d9d9d
 800b240:	9d9d9d9d 	.word	0x9d9d9d9d
 800b244:	9d9d9d9d 	.word	0x9d9d9d9d
 800b248:	9d9d      	.short	0x9d9d
 800b24a:	50          	.byte	0x50
 800b24b:	00          	.byte	0x00
 800b24c:	2b40      	cmp	r3, #64	@ 0x40
 800b24e:	d11b      	bne.n	800b288 <UART_SetConfig+0x4e4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b250:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800b252:	4b4d      	ldr	r3, [pc, #308]	@ (800b388 <UART_SetConfig+0x5e4>)
 800b254:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800b258:	fbb0 f0f3 	udiv	r0, r0, r3
 800b25c:	6862      	ldr	r2, [r4, #4]
 800b25e:	0853      	lsrs	r3, r2, #1
 800b260:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800b264:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b268:	f1a3 0110 	sub.w	r1, r3, #16
 800b26c:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 800b270:	4291      	cmp	r1, r2
 800b272:	d879      	bhi.n	800b368 <UART_SetConfig+0x5c4>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b274:	b29a      	uxth	r2, r3
 800b276:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b27a:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800b27e:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 800b280:	6822      	ldr	r2, [r4, #0]
 800b282:	60d3      	str	r3, [r2, #12]
 800b284:	2000      	movs	r0, #0
 800b286:	e072      	b.n	800b36e <UART_SetConfig+0x5ca>
    switch (clocksource)
 800b288:	2001      	movs	r0, #1
 800b28a:	e070      	b.n	800b36e <UART_SetConfig+0x5ca>
        pclk = HAL_RCC_GetPCLK1Freq();
 800b28c:	f7fc f954 	bl	8007538 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800b290:	2800      	cmp	r0, #0
 800b292:	d1dd      	bne.n	800b250 <UART_SetConfig+0x4ac>
 800b294:	2000      	movs	r0, #0
 800b296:	e06a      	b.n	800b36e <UART_SetConfig+0x5ca>
        pclk = HAL_RCC_GetPCLK2Freq();
 800b298:	f7fc f960 	bl	800755c <HAL_RCC_GetPCLK2Freq>
        break;
 800b29c:	e7f8      	b.n	800b290 <UART_SetConfig+0x4ec>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b29e:	a803      	add	r0, sp, #12
 800b2a0:	f7fc ff98 	bl	80081d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b2a4:	9804      	ldr	r0, [sp, #16]
        break;
 800b2a6:	e7f3      	b.n	800b290 <UART_SetConfig+0x4ec>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2a8:	4668      	mov	r0, sp
 800b2aa:	f7fd f891 	bl	80083d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b2ae:	9801      	ldr	r0, [sp, #4]
        break;
 800b2b0:	e7ee      	b.n	800b290 <UART_SetConfig+0x4ec>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2b2:	4b36      	ldr	r3, [pc, #216]	@ (800b38c <UART_SetConfig+0x5e8>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f013 0f20 	tst.w	r3, #32
 800b2ba:	d008      	beq.n	800b2ce <UART_SetConfig+0x52a>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b2bc:	4b33      	ldr	r3, [pc, #204]	@ (800b38c <UART_SetConfig+0x5e8>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800b2c4:	4832      	ldr	r0, [pc, #200]	@ (800b390 <UART_SetConfig+0x5ec>)
 800b2c6:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800b2c8:	e7c2      	b.n	800b250 <UART_SetConfig+0x4ac>
    switch (clocksource)
 800b2ca:	4832      	ldr	r0, [pc, #200]	@ (800b394 <UART_SetConfig+0x5f0>)
 800b2cc:	e7c0      	b.n	800b250 <UART_SetConfig+0x4ac>
          pclk = (uint32_t) HSI_VALUE;
 800b2ce:	4830      	ldr	r0, [pc, #192]	@ (800b390 <UART_SetConfig+0x5ec>)
 800b2d0:	e7be      	b.n	800b250 <UART_SetConfig+0x4ac>
    switch (clocksource)
 800b2d2:	2b40      	cmp	r3, #64	@ 0x40
 800b2d4:	d117      	bne.n	800b306 <UART_SetConfig+0x562>
        pclk = (uint32_t) LSE_VALUE;
 800b2d6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b2da:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800b2dc:	4b2a      	ldr	r3, [pc, #168]	@ (800b388 <UART_SetConfig+0x5e4>)
 800b2de:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800b2e2:	fbb0 f0f3 	udiv	r0, r0, r3
 800b2e6:	6863      	ldr	r3, [r4, #4]
 800b2e8:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800b2ec:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b2f0:	f1a0 0210 	sub.w	r2, r0, #16
 800b2f4:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 800b2f8:	429a      	cmp	r2, r3
 800b2fa:	d842      	bhi.n	800b382 <UART_SetConfig+0x5de>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b2fc:	6823      	ldr	r3, [r4, #0]
 800b2fe:	b280      	uxth	r0, r0
 800b300:	60d8      	str	r0, [r3, #12]
 800b302:	2000      	movs	r0, #0
 800b304:	e033      	b.n	800b36e <UART_SetConfig+0x5ca>
    switch (clocksource)
 800b306:	2001      	movs	r0, #1
 800b308:	e031      	b.n	800b36e <UART_SetConfig+0x5ca>
        pclk = HAL_RCC_GetPCLK1Freq();
 800b30a:	f7fc f915 	bl	8007538 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800b30e:	2800      	cmp	r0, #0
 800b310:	d1e3      	bne.n	800b2da <UART_SetConfig+0x536>
 800b312:	2000      	movs	r0, #0
 800b314:	e02b      	b.n	800b36e <UART_SetConfig+0x5ca>
        pclk = HAL_RCC_GetPCLK2Freq();
 800b316:	f7fc f921 	bl	800755c <HAL_RCC_GetPCLK2Freq>
        break;
 800b31a:	e7f8      	b.n	800b30e <UART_SetConfig+0x56a>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b31c:	a803      	add	r0, sp, #12
 800b31e:	f7fc ff59 	bl	80081d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b322:	9804      	ldr	r0, [sp, #16]
        break;
 800b324:	e7f3      	b.n	800b30e <UART_SetConfig+0x56a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b326:	4668      	mov	r0, sp
 800b328:	f7fd f852 	bl	80083d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b32c:	9801      	ldr	r0, [sp, #4]
        break;
 800b32e:	e7ee      	b.n	800b30e <UART_SetConfig+0x56a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b330:	4b16      	ldr	r3, [pc, #88]	@ (800b38c <UART_SetConfig+0x5e8>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	f013 0f20 	tst.w	r3, #32
 800b338:	d008      	beq.n	800b34c <UART_SetConfig+0x5a8>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b33a:	4b14      	ldr	r3, [pc, #80]	@ (800b38c <UART_SetConfig+0x5e8>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800b342:	4813      	ldr	r0, [pc, #76]	@ (800b390 <UART_SetConfig+0x5ec>)
 800b344:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800b346:	e7c8      	b.n	800b2da <UART_SetConfig+0x536>
    switch (clocksource)
 800b348:	4812      	ldr	r0, [pc, #72]	@ (800b394 <UART_SetConfig+0x5f0>)
 800b34a:	e7c6      	b.n	800b2da <UART_SetConfig+0x536>
          pclk = (uint32_t) HSI_VALUE;
 800b34c:	4810      	ldr	r0, [pc, #64]	@ (800b390 <UART_SetConfig+0x5ec>)
 800b34e:	e7c4      	b.n	800b2da <UART_SetConfig+0x536>
    switch (clocksource)
 800b350:	2001      	movs	r0, #1
 800b352:	e00c      	b.n	800b36e <UART_SetConfig+0x5ca>
 800b354:	2001      	movs	r0, #1
 800b356:	e00a      	b.n	800b36e <UART_SetConfig+0x5ca>
        ret = HAL_ERROR;
 800b358:	2001      	movs	r0, #1
 800b35a:	e008      	b.n	800b36e <UART_SetConfig+0x5ca>
 800b35c:	2001      	movs	r0, #1
 800b35e:	e006      	b.n	800b36e <UART_SetConfig+0x5ca>
          ret = HAL_ERROR;
 800b360:	2001      	movs	r0, #1
 800b362:	e004      	b.n	800b36e <UART_SetConfig+0x5ca>
    switch (clocksource)
 800b364:	2001      	movs	r0, #1
 800b366:	e002      	b.n	800b36e <UART_SetConfig+0x5ca>
        ret = HAL_ERROR;
 800b368:	2001      	movs	r0, #1
 800b36a:	e000      	b.n	800b36e <UART_SetConfig+0x5ca>
    switch (clocksource)
 800b36c:	2001      	movs	r0, #1
  huart->NbTxDataToProcess = 1;
 800b36e:	2301      	movs	r3, #1
 800b370:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b374:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 800b378:	2300      	movs	r3, #0
 800b37a:	6723      	str	r3, [r4, #112]	@ 0x70
  huart->TxISR = NULL;
 800b37c:	6763      	str	r3, [r4, #116]	@ 0x74
}
 800b37e:	b006      	add	sp, #24
 800b380:	bd70      	pop	{r4, r5, r6, pc}
        ret = HAL_ERROR;
 800b382:	2001      	movs	r0, #1
 800b384:	e7f3      	b.n	800b36e <UART_SetConfig+0x5ca>
 800b386:	bf00      	nop
 800b388:	08016d38 	.word	0x08016d38
 800b38c:	58024400 	.word	0x58024400
 800b390:	03d09000 	.word	0x03d09000
 800b394:	003d0900 	.word	0x003d0900

0800b398 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b398:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800b39a:	f013 0f01 	tst.w	r3, #1
 800b39e:	d006      	beq.n	800b3ae <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b3a0:	6802      	ldr	r2, [r0, #0]
 800b3a2:	6853      	ldr	r3, [r2, #4]
 800b3a4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b3a8:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800b3aa:	430b      	orrs	r3, r1
 800b3ac:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b3ae:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800b3b0:	f013 0f02 	tst.w	r3, #2
 800b3b4:	d006      	beq.n	800b3c4 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b3b6:	6802      	ldr	r2, [r0, #0]
 800b3b8:	6853      	ldr	r3, [r2, #4]
 800b3ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b3be:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 800b3c0:	430b      	orrs	r3, r1
 800b3c2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b3c4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800b3c6:	f013 0f04 	tst.w	r3, #4
 800b3ca:	d006      	beq.n	800b3da <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b3cc:	6802      	ldr	r2, [r0, #0]
 800b3ce:	6853      	ldr	r3, [r2, #4]
 800b3d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b3d4:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 800b3d6:	430b      	orrs	r3, r1
 800b3d8:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b3da:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800b3dc:	f013 0f08 	tst.w	r3, #8
 800b3e0:	d006      	beq.n	800b3f0 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b3e2:	6802      	ldr	r2, [r0, #0]
 800b3e4:	6853      	ldr	r3, [r2, #4]
 800b3e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b3ea:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800b3ec:	430b      	orrs	r3, r1
 800b3ee:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b3f0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800b3f2:	f013 0f10 	tst.w	r3, #16
 800b3f6:	d006      	beq.n	800b406 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b3f8:	6802      	ldr	r2, [r0, #0]
 800b3fa:	6893      	ldr	r3, [r2, #8]
 800b3fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b400:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 800b402:	430b      	orrs	r3, r1
 800b404:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b406:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800b408:	f013 0f20 	tst.w	r3, #32
 800b40c:	d006      	beq.n	800b41c <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b40e:	6802      	ldr	r2, [r0, #0]
 800b410:	6893      	ldr	r3, [r2, #8]
 800b412:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b416:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 800b418:	430b      	orrs	r3, r1
 800b41a:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b41c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800b41e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800b422:	d00a      	beq.n	800b43a <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b424:	6802      	ldr	r2, [r0, #0]
 800b426:	6853      	ldr	r3, [r2, #4]
 800b428:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b42c:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 800b42e:	430b      	orrs	r3, r1
 800b430:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b432:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800b434:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b438:	d00b      	beq.n	800b452 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b43a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800b43c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b440:	d006      	beq.n	800b450 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b442:	6802      	ldr	r2, [r0, #0]
 800b444:	6853      	ldr	r3, [r2, #4]
 800b446:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800b44a:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800b44c:	430b      	orrs	r3, r1
 800b44e:	6053      	str	r3, [r2, #4]
}
 800b450:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b452:	6802      	ldr	r2, [r0, #0]
 800b454:	6853      	ldr	r3, [r2, #4]
 800b456:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800b45a:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 800b45c:	430b      	orrs	r3, r1
 800b45e:	6053      	str	r3, [r2, #4]
 800b460:	e7eb      	b.n	800b43a <UART_AdvFeatureConfig+0xa2>

0800b462 <UART_WaitOnFlagUntilTimeout>:
{
 800b462:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b466:	4605      	mov	r5, r0
 800b468:	460f      	mov	r7, r1
 800b46a:	4616      	mov	r6, r2
 800b46c:	4699      	mov	r9, r3
 800b46e:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b472:	682b      	ldr	r3, [r5, #0]
 800b474:	69dc      	ldr	r4, [r3, #28]
 800b476:	ea37 0404 	bics.w	r4, r7, r4
 800b47a:	bf0c      	ite	eq
 800b47c:	2401      	moveq	r4, #1
 800b47e:	2400      	movne	r4, #0
 800b480:	42b4      	cmp	r4, r6
 800b482:	d157      	bne.n	800b534 <UART_WaitOnFlagUntilTimeout+0xd2>
    if (Timeout != HAL_MAX_DELAY)
 800b484:	f1b8 3fff 	cmp.w	r8, #4294967295
 800b488:	d0f3      	beq.n	800b472 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b48a:	f7f7 fe29 	bl	80030e0 <HAL_GetTick>
 800b48e:	eba0 0009 	sub.w	r0, r0, r9
 800b492:	4540      	cmp	r0, r8
 800b494:	d82f      	bhi.n	800b4f6 <UART_WaitOnFlagUntilTimeout+0x94>
 800b496:	f1b8 0f00 	cmp.w	r8, #0
 800b49a:	d02c      	beq.n	800b4f6 <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b49c:	682b      	ldr	r3, [r5, #0]
 800b49e:	681a      	ldr	r2, [r3, #0]
 800b4a0:	f012 0f04 	tst.w	r2, #4
 800b4a4:	d0e5      	beq.n	800b472 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b4a6:	69da      	ldr	r2, [r3, #28]
 800b4a8:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 800b4ac:	d0e1      	beq.n	800b472 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b4ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b4b2:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b4b4:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4b6:	e852 3f00 	ldrex	r3, [r2]
 800b4ba:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4be:	e842 3100 	strex	r1, r3, [r2]
 800b4c2:	2900      	cmp	r1, #0
 800b4c4:	d1f6      	bne.n	800b4b4 <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4c6:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4c8:	f102 0308 	add.w	r3, r2, #8
 800b4cc:	e853 3f00 	ldrex	r3, [r3]
 800b4d0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4d4:	3208      	adds	r2, #8
 800b4d6:	e842 3100 	strex	r1, r3, [r2]
 800b4da:	2900      	cmp	r1, #0
 800b4dc:	d1f3      	bne.n	800b4c6 <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 800b4de:	2320      	movs	r3, #32
 800b4e0:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b4e4:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b4e8:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
          __HAL_UNLOCK(huart);
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
          return HAL_TIMEOUT;
 800b4f2:	2003      	movs	r0, #3
 800b4f4:	e01f      	b.n	800b536 <UART_WaitOnFlagUntilTimeout+0xd4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b4f6:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4f8:	e852 3f00 	ldrex	r3, [r2]
 800b4fc:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b500:	e842 3100 	strex	r1, r3, [r2]
 800b504:	2900      	cmp	r1, #0
 800b506:	d1f6      	bne.n	800b4f6 <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b508:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b50a:	f102 0308 	add.w	r3, r2, #8
 800b50e:	e853 3f00 	ldrex	r3, [r3]
 800b512:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b516:	3208      	adds	r2, #8
 800b518:	e842 3100 	strex	r1, r3, [r2]
 800b51c:	2900      	cmp	r1, #0
 800b51e:	d1f3      	bne.n	800b508 <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 800b520:	2320      	movs	r3, #32
 800b522:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b526:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
        __HAL_UNLOCK(huart);
 800b52a:	2300      	movs	r3, #0
 800b52c:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
        return HAL_TIMEOUT;
 800b530:	2003      	movs	r0, #3
 800b532:	e000      	b.n	800b536 <UART_WaitOnFlagUntilTimeout+0xd4>
  return HAL_OK;
 800b534:	2000      	movs	r0, #0
}
 800b536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800b53a <UART_CheckIdleState>:
{
 800b53a:	b530      	push	{r4, r5, lr}
 800b53c:	b083      	sub	sp, #12
 800b53e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b540:	2300      	movs	r3, #0
 800b542:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  tickstart = HAL_GetTick();
 800b546:	f7f7 fdcb 	bl	80030e0 <HAL_GetTick>
 800b54a:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b54c:	6822      	ldr	r2, [r4, #0]
 800b54e:	6812      	ldr	r2, [r2, #0]
 800b550:	f012 0f08 	tst.w	r2, #8
 800b554:	d10f      	bne.n	800b576 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b556:	6823      	ldr	r3, [r4, #0]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f013 0f04 	tst.w	r3, #4
 800b55e:	d118      	bne.n	800b592 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 800b560:	2320      	movs	r3, #32
 800b562:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b566:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b56a:	2000      	movs	r0, #0
 800b56c:	66e0      	str	r0, [r4, #108]	@ 0x6c
  __HAL_UNLOCK(huart);
 800b56e:	f884 0080 	strb.w	r0, [r4, #128]	@ 0x80
}
 800b572:	b003      	add	sp, #12
 800b574:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b576:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b57a:	9300      	str	r3, [sp, #0]
 800b57c:	4603      	mov	r3, r0
 800b57e:	2200      	movs	r2, #0
 800b580:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b584:	4620      	mov	r0, r4
 800b586:	f7ff ff6c 	bl	800b462 <UART_WaitOnFlagUntilTimeout>
 800b58a:	2800      	cmp	r0, #0
 800b58c:	d0e3      	beq.n	800b556 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 800b58e:	2003      	movs	r0, #3
 800b590:	e7ef      	b.n	800b572 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b592:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b596:	9300      	str	r3, [sp, #0]
 800b598:	462b      	mov	r3, r5
 800b59a:	2200      	movs	r2, #0
 800b59c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b5a0:	4620      	mov	r0, r4
 800b5a2:	f7ff ff5e 	bl	800b462 <UART_WaitOnFlagUntilTimeout>
 800b5a6:	2800      	cmp	r0, #0
 800b5a8:	d0da      	beq.n	800b560 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 800b5aa:	2003      	movs	r0, #3
 800b5ac:	e7e1      	b.n	800b572 <UART_CheckIdleState+0x38>

0800b5ae <HAL_UART_Init>:
  if (huart == NULL)
 800b5ae:	b378      	cbz	r0, 800b610 <HAL_UART_Init+0x62>
{
 800b5b0:	b510      	push	{r4, lr}
 800b5b2:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800b5b4:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 800b5b8:	b30b      	cbz	r3, 800b5fe <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800b5ba:	2324      	movs	r3, #36	@ 0x24
 800b5bc:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  __HAL_UART_DISABLE(huart);
 800b5c0:	6822      	ldr	r2, [r4, #0]
 800b5c2:	6813      	ldr	r3, [r2, #0]
 800b5c4:	f023 0301 	bic.w	r3, r3, #1
 800b5c8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b5ca:	4620      	mov	r0, r4
 800b5cc:	f7ff fbea 	bl	800ada4 <UART_SetConfig>
 800b5d0:	2801      	cmp	r0, #1
 800b5d2:	d013      	beq.n	800b5fc <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b5d4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b5d6:	b9bb      	cbnz	r3, 800b608 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b5d8:	6822      	ldr	r2, [r4, #0]
 800b5da:	6853      	ldr	r3, [r2, #4]
 800b5dc:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 800b5e0:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b5e2:	6822      	ldr	r2, [r4, #0]
 800b5e4:	6893      	ldr	r3, [r2, #8]
 800b5e6:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 800b5ea:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800b5ec:	6822      	ldr	r2, [r4, #0]
 800b5ee:	6813      	ldr	r3, [r2, #0]
 800b5f0:	f043 0301 	orr.w	r3, r3, #1
 800b5f4:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800b5f6:	4620      	mov	r0, r4
 800b5f8:	f7ff ff9f 	bl	800b53a <UART_CheckIdleState>
}
 800b5fc:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800b5fe:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
    HAL_UART_MspInit(huart);
 800b602:	f7f6 ff99 	bl	8002538 <HAL_UART_MspInit>
 800b606:	e7d8      	b.n	800b5ba <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 800b608:	4620      	mov	r0, r4
 800b60a:	f7ff fec5 	bl	800b398 <UART_AdvFeatureConfig>
 800b60e:	e7e3      	b.n	800b5d8 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 800b610:	2001      	movs	r0, #1
}
 800b612:	4770      	bx	lr

0800b614 <UART_Start_Receive_DMA>:
{
 800b614:	b510      	push	{r4, lr}
 800b616:	4604      	mov	r4, r0
 800b618:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 800b61a:	6581      	str	r1, [r0, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b61c:	f8a0 205c 	strh.w	r2, [r0, #92]	@ 0x5c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b620:	2200      	movs	r2, #0
 800b622:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b626:	2222      	movs	r2, #34	@ 0x22
 800b628:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  if (huart->hdmarx != NULL)
 800b62c:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 800b62e:	b18a      	cbz	r2, 800b654 <UART_Start_Receive_DMA+0x40>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b630:	4922      	ldr	r1, [pc, #136]	@ (800b6bc <UART_Start_Receive_DMA+0xa8>)
 800b632:	63d1      	str	r1, [r2, #60]	@ 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b634:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 800b636:	4922      	ldr	r1, [pc, #136]	@ (800b6c0 <UART_Start_Receive_DMA+0xac>)
 800b638:	6411      	str	r1, [r2, #64]	@ 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b63a:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 800b63c:	4921      	ldr	r1, [pc, #132]	@ (800b6c4 <UART_Start_Receive_DMA+0xb0>)
 800b63e:	64d1      	str	r1, [r2, #76]	@ 0x4c
    huart->hdmarx->XferAbortCallback = NULL;
 800b640:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 800b642:	2100      	movs	r1, #0
 800b644:	6511      	str	r1, [r2, #80]	@ 0x50
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b646:	6801      	ldr	r1, [r0, #0]
 800b648:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 800b64a:	3124      	adds	r1, #36	@ 0x24
 800b64c:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 800b64e:	f7f8 ff47 	bl	80044e0 <HAL_DMA_Start_IT>
 800b652:	bb38      	cbnz	r0, 800b6a4 <UART_Start_Receive_DMA+0x90>
  __HAL_UNLOCK(huart);
 800b654:	2300      	movs	r3, #0
 800b656:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b65a:	6923      	ldr	r3, [r4, #16]
 800b65c:	b143      	cbz	r3, 800b670 <UART_Start_Receive_DMA+0x5c>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b65e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b660:	e852 3f00 	ldrex	r3, [r2]
 800b664:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b668:	e842 3100 	strex	r1, r3, [r2]
 800b66c:	2900      	cmp	r1, #0
 800b66e:	d1f6      	bne.n	800b65e <UART_Start_Receive_DMA+0x4a>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b670:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b672:	f102 0308 	add.w	r3, r2, #8
 800b676:	e853 3f00 	ldrex	r3, [r3]
 800b67a:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b67e:	3208      	adds	r2, #8
 800b680:	e842 3100 	strex	r1, r3, [r2]
 800b684:	2900      	cmp	r1, #0
 800b686:	d1f3      	bne.n	800b670 <UART_Start_Receive_DMA+0x5c>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b688:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b68a:	f102 0308 	add.w	r3, r2, #8
 800b68e:	e853 3f00 	ldrex	r3, [r3]
 800b692:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b696:	3208      	adds	r2, #8
 800b698:	e842 3100 	strex	r1, r3, [r2]
 800b69c:	2900      	cmp	r1, #0
 800b69e:	d1f3      	bne.n	800b688 <UART_Start_Receive_DMA+0x74>
  return HAL_OK;
 800b6a0:	2000      	movs	r0, #0
}
 800b6a2:	bd10      	pop	{r4, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b6a4:	2310      	movs	r3, #16
 800b6a6:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      __HAL_UNLOCK(huart);
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
      huart->RxState = HAL_UART_STATE_READY;
 800b6b0:	2320      	movs	r3, #32
 800b6b2:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_ERROR;
 800b6b6:	2001      	movs	r0, #1
 800b6b8:	e7f3      	b.n	800b6a2 <UART_Start_Receive_DMA+0x8e>
 800b6ba:	bf00      	nop
 800b6bc:	0800ad19 	.word	0x0800ad19
 800b6c0:	0800acfd 	.word	0x0800acfd
 800b6c4:	0800a8ed 	.word	0x0800a8ed

0800b6c8 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b6c8:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 800b6ca:	b92b      	cbnz	r3, 800b6d8 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b6d2:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
 800b6d6:	4770      	bx	lr
{
 800b6d8:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b6da:	6803      	ldr	r3, [r0, #0]
 800b6dc:	689a      	ldr	r2, [r3, #8]
 800b6de:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b6e2:	6899      	ldr	r1, [r3, #8]
 800b6e4:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b6e6:	4d09      	ldr	r5, [pc, #36]	@ (800b70c <UARTEx_SetNbDataToProcess+0x44>)
 800b6e8:	5c6b      	ldrb	r3, [r5, r1]
 800b6ea:	011b      	lsls	r3, r3, #4
                               (uint16_t)denominator[tx_fifo_threshold];
 800b6ec:	4c08      	ldr	r4, [pc, #32]	@ (800b710 <UARTEx_SetNbDataToProcess+0x48>)
 800b6ee:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b6f0:	fb93 f3f1 	sdiv	r3, r3, r1
 800b6f4:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b6f8:	5cab      	ldrb	r3, [r5, r2]
 800b6fa:	011b      	lsls	r3, r3, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 800b6fc:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b6fe:	fb93 f3f2 	sdiv	r3, r3, r2
 800b702:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
  }
}
 800b706:	bc30      	pop	{r4, r5}
 800b708:	4770      	bx	lr
 800b70a:	bf00      	nop
 800b70c:	08016d58 	.word	0x08016d58
 800b710:	08016d50 	.word	0x08016d50

0800b714 <HAL_RS485Ex_Init>:
  if (huart == NULL)
 800b714:	2800      	cmp	r0, #0
 800b716:	d03c      	beq.n	800b792 <HAL_RS485Ex_Init+0x7e>
{
 800b718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b71a:	460f      	mov	r7, r1
 800b71c:	4616      	mov	r6, r2
 800b71e:	461d      	mov	r5, r3
 800b720:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800b722:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 800b726:	b35b      	cbz	r3, 800b780 <HAL_RS485Ex_Init+0x6c>
  huart->gState = HAL_UART_STATE_BUSY;
 800b728:	2324      	movs	r3, #36	@ 0x24
 800b72a:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  __HAL_UART_DISABLE(huart);
 800b72e:	6822      	ldr	r2, [r4, #0]
 800b730:	6813      	ldr	r3, [r2, #0]
 800b732:	f023 0301 	bic.w	r3, r3, #1
 800b736:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b738:	4620      	mov	r0, r4
 800b73a:	f7ff fb33 	bl	800ada4 <UART_SetConfig>
 800b73e:	2801      	cmp	r0, #1
 800b740:	d01d      	beq.n	800b77e <HAL_RS485Ex_Init+0x6a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b742:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b744:	bb0b      	cbnz	r3, 800b78a <HAL_RS485Ex_Init+0x76>
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800b746:	6822      	ldr	r2, [r4, #0]
 800b748:	6893      	ldr	r3, [r2, #8]
 800b74a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b74e:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800b750:	6822      	ldr	r2, [r4, #0]
 800b752:	6893      	ldr	r3, [r2, #8]
 800b754:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b758:	433b      	orrs	r3, r7
 800b75a:	6093      	str	r3, [r2, #8]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800b75c:	042d      	lsls	r5, r5, #16
 800b75e:	ea45 5246 	orr.w	r2, r5, r6, lsl #21
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800b762:	6821      	ldr	r1, [r4, #0]
 800b764:	6808      	ldr	r0, [r1, #0]
 800b766:	4b0c      	ldr	r3, [pc, #48]	@ (800b798 <HAL_RS485Ex_Init+0x84>)
 800b768:	4003      	ands	r3, r0
 800b76a:	4313      	orrs	r3, r2
 800b76c:	600b      	str	r3, [r1, #0]
  __HAL_UART_ENABLE(huart);
 800b76e:	6822      	ldr	r2, [r4, #0]
 800b770:	6813      	ldr	r3, [r2, #0]
 800b772:	f043 0301 	orr.w	r3, r3, #1
 800b776:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800b778:	4620      	mov	r0, r4
 800b77a:	f7ff fede 	bl	800b53a <UART_CheckIdleState>
}
 800b77e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 800b780:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
    HAL_UART_MspInit(huart);
 800b784:	f7f6 fed8 	bl	8002538 <HAL_UART_MspInit>
 800b788:	e7ce      	b.n	800b728 <HAL_RS485Ex_Init+0x14>
    UART_AdvFeatureConfig(huart);
 800b78a:	4620      	mov	r0, r4
 800b78c:	f7ff fe04 	bl	800b398 <UART_AdvFeatureConfig>
 800b790:	e7d9      	b.n	800b746 <HAL_RS485Ex_Init+0x32>
    return HAL_ERROR;
 800b792:	2001      	movs	r0, #1
}
 800b794:	4770      	bx	lr
 800b796:	bf00      	nop
 800b798:	fc00ffff 	.word	0xfc00ffff

0800b79c <HAL_UARTEx_WakeupCallback>:
}
 800b79c:	4770      	bx	lr

0800b79e <HAL_UARTEx_RxFifoFullCallback>:
}
 800b79e:	4770      	bx	lr

0800b7a0 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 800b7a0:	4770      	bx	lr

0800b7a2 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 800b7a2:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 800b7a6:	2b01      	cmp	r3, #1
 800b7a8:	d018      	beq.n	800b7dc <HAL_UARTEx_DisableFifoMode+0x3a>
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800b7b0:	2324      	movs	r3, #36	@ 0x24
 800b7b2:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b7b6:	6803      	ldr	r3, [r0, #0]
 800b7b8:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800b7ba:	6819      	ldr	r1, [r3, #0]
 800b7bc:	f021 0101 	bic.w	r1, r1, #1
 800b7c0:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b7c2:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	6643      	str	r3, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b7ca:	6801      	ldr	r1, [r0, #0]
 800b7cc:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 800b7ce:	2220      	movs	r2, #32
 800b7d0:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
  __HAL_UNLOCK(huart);
 800b7d4:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
  return HAL_OK;
 800b7d8:	4618      	mov	r0, r3
 800b7da:	4770      	bx	lr
  __HAL_LOCK(huart);
 800b7dc:	2002      	movs	r0, #2
}
 800b7de:	4770      	bx	lr

0800b7e0 <HAL_UARTEx_SetTxFifoThreshold>:
{
 800b7e0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800b7e2:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 800b7e6:	2b01      	cmp	r3, #1
 800b7e8:	d01d      	beq.n	800b826 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800b7ea:	4604      	mov	r4, r0
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800b7f2:	2324      	movs	r3, #36	@ 0x24
 800b7f4:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b7f8:	6803      	ldr	r3, [r0, #0]
 800b7fa:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800b7fc:	681a      	ldr	r2, [r3, #0]
 800b7fe:	f022 0201 	bic.w	r2, r2, #1
 800b802:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b804:	6802      	ldr	r2, [r0, #0]
 800b806:	6893      	ldr	r3, [r2, #8]
 800b808:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 800b80c:	4319      	orrs	r1, r3
 800b80e:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800b810:	f7ff ff5a 	bl	800b6c8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b814:	6823      	ldr	r3, [r4, #0]
 800b816:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800b818:	2320      	movs	r3, #32
 800b81a:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  __HAL_UNLOCK(huart);
 800b81e:	2000      	movs	r0, #0
 800b820:	f884 0080 	strb.w	r0, [r4, #128]	@ 0x80
}
 800b824:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800b826:	2002      	movs	r0, #2
 800b828:	e7fc      	b.n	800b824 <HAL_UARTEx_SetTxFifoThreshold+0x44>

0800b82a <HAL_UARTEx_SetRxFifoThreshold>:
{
 800b82a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800b82c:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 800b830:	2b01      	cmp	r3, #1
 800b832:	d01d      	beq.n	800b870 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800b834:	4604      	mov	r4, r0
 800b836:	2301      	movs	r3, #1
 800b838:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800b83c:	2324      	movs	r3, #36	@ 0x24
 800b83e:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b842:	6803      	ldr	r3, [r0, #0]
 800b844:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800b846:	681a      	ldr	r2, [r3, #0]
 800b848:	f022 0201 	bic.w	r2, r2, #1
 800b84c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b84e:	6802      	ldr	r2, [r0, #0]
 800b850:	6893      	ldr	r3, [r2, #8]
 800b852:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 800b856:	4319      	orrs	r1, r3
 800b858:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800b85a:	f7ff ff35 	bl	800b6c8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b85e:	6823      	ldr	r3, [r4, #0]
 800b860:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800b862:	2320      	movs	r3, #32
 800b864:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  __HAL_UNLOCK(huart);
 800b868:	2000      	movs	r0, #0
 800b86a:	f884 0080 	strb.w	r0, [r4, #128]	@ 0x80
}
 800b86e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800b870:	2002      	movs	r0, #2
 800b872:	e7fc      	b.n	800b86e <HAL_UARTEx_SetRxFifoThreshold+0x44>

0800b874 <HAL_UARTEx_ReceiveToIdle_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800b874:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800b878:	2b20      	cmp	r3, #32
 800b87a:	d122      	bne.n	800b8c2 <HAL_UARTEx_ReceiveToIdle_DMA+0x4e>
{
 800b87c:	b510      	push	{r4, lr}
 800b87e:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 800b880:	2a00      	cmp	r2, #0
 800b882:	bf18      	it	ne
 800b884:	2900      	cmpne	r1, #0
 800b886:	d01e      	beq.n	800b8c6 <HAL_UARTEx_ReceiveToIdle_DMA+0x52>
    __HAL_LOCK(huart);
 800b888:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 800b88c:	2b01      	cmp	r3, #1
 800b88e:	d01c      	beq.n	800b8ca <HAL_UARTEx_ReceiveToIdle_DMA+0x56>
 800b890:	2301      	movs	r3, #1
 800b892:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b896:	66c3      	str	r3, [r0, #108]	@ 0x6c
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800b898:	f7ff febc 	bl	800b614 <UART_Start_Receive_DMA>
    if (status == HAL_OK)
 800b89c:	b9a0      	cbnz	r0, 800b8c8 <HAL_UARTEx_ReceiveToIdle_DMA+0x54>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b89e:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800b8a0:	2b01      	cmp	r3, #1
 800b8a2:	d001      	beq.n	800b8a8 <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
        status = HAL_ERROR;
 800b8a4:	2001      	movs	r0, #1
    return status;
 800b8a6:	e00f      	b.n	800b8c8 <HAL_UARTEx_ReceiveToIdle_DMA+0x54>
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b8a8:	6823      	ldr	r3, [r4, #0]
 800b8aa:	2210      	movs	r2, #16
 800b8ac:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8ae:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8b0:	e852 3f00 	ldrex	r3, [r2]
 800b8b4:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8b8:	e842 3100 	strex	r1, r3, [r2]
 800b8bc:	2900      	cmp	r1, #0
 800b8be:	d1f6      	bne.n	800b8ae <HAL_UARTEx_ReceiveToIdle_DMA+0x3a>
 800b8c0:	e002      	b.n	800b8c8 <HAL_UARTEx_ReceiveToIdle_DMA+0x54>
    return HAL_BUSY;
 800b8c2:	2002      	movs	r0, #2
}
 800b8c4:	4770      	bx	lr
      return HAL_ERROR;
 800b8c6:	2001      	movs	r0, #1
}
 800b8c8:	bd10      	pop	{r4, pc}
    __HAL_LOCK(huart);
 800b8ca:	2002      	movs	r0, #2
 800b8cc:	e7fc      	b.n	800b8c8 <HAL_UARTEx_ReceiveToIdle_DMA+0x54>
	...

0800b8d0 <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b8d0:	4b0b      	ldr	r3, [pc, #44]	@ (800b900 <SDMMC_GetCmdError+0x30>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	4a0b      	ldr	r2, [pc, #44]	@ (800b904 <SDMMC_GetCmdError+0x34>)
 800b8d6:	fba2 2303 	umull	r2, r3, r2, r3
 800b8da:	0a5b      	lsrs	r3, r3, #9
 800b8dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b8e0:	fb02 f303 	mul.w	r3, r2, r3

  do
  {
    if (count-- == 0U)
 800b8e4:	461a      	mov	r2, r3
 800b8e6:	3b01      	subs	r3, #1
 800b8e8:	b13a      	cbz	r2, 800b8fa <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b8ea:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800b8ec:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800b8f0:	d0f8      	beq.n	800b8e4 <SDMMC_GetCmdError+0x14>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b8f2:	4b05      	ldr	r3, [pc, #20]	@ (800b908 <SDMMC_GetCmdError+0x38>)
 800b8f4:	6383      	str	r3, [r0, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800b8f6:	2000      	movs	r0, #0
 800b8f8:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800b8fa:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800b8fe:	4770      	bx	lr
 800b900:	24000004 	.word	0x24000004
 800b904:	10624dd3 	.word	0x10624dd3
 800b908:	002000c5 	.word	0x002000c5

0800b90c <SDMMC_Init>:
{
 800b90c:	b084      	sub	sp, #16
 800b90e:	f10d 0c04 	add.w	ip, sp, #4
 800b912:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           | \
 800b916:	460b      	mov	r3, r1
 800b918:	4313      	orrs	r3, r2
             Init.BusWide             | \
 800b91a:	9a03      	ldr	r2, [sp, #12]
             Init.ClockPowerSave      | \
 800b91c:	4313      	orrs	r3, r2
             Init.HardwareFlowControl | \
 800b91e:	9a04      	ldr	r2, [sp, #16]
             Init.BusWide             | \
 800b920:	4313      	orrs	r3, r2
             Init.ClockDiv
 800b922:	9a05      	ldr	r2, [sp, #20]
             Init.HardwareFlowControl | \
 800b924:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b926:	6841      	ldr	r1, [r0, #4]
 800b928:	4a03      	ldr	r2, [pc, #12]	@ (800b938 <SDMMC_Init+0x2c>)
 800b92a:	400a      	ands	r2, r1
 800b92c:	4313      	orrs	r3, r2
 800b92e:	6043      	str	r3, [r0, #4]
}
 800b930:	2000      	movs	r0, #0
 800b932:	b004      	add	sp, #16
 800b934:	4770      	bx	lr
 800b936:	bf00      	nop
 800b938:	ffc02c00 	.word	0xffc02c00

0800b93c <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 800b93c:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
}
 800b940:	4770      	bx	lr

0800b942 <SDMMC_WriteFIFO>:
  SDMMCx->FIFO = *pWriteData;
 800b942:	680b      	ldr	r3, [r1, #0]
 800b944:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
}
 800b948:	2000      	movs	r0, #0
 800b94a:	4770      	bx	lr

0800b94c <SDMMC_PowerState_ON>:
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b94c:	6803      	ldr	r3, [r0, #0]
 800b94e:	f043 0303 	orr.w	r3, r3, #3
 800b952:	6003      	str	r3, [r0, #0]
}
 800b954:	2000      	movs	r0, #0
 800b956:	4770      	bx	lr

0800b958 <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b958:	6800      	ldr	r0, [r0, #0]
}
 800b95a:	f000 0003 	and.w	r0, r0, #3
 800b95e:	4770      	bx	lr

0800b960 <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
 800b960:	680b      	ldr	r3, [r1, #0]
 800b962:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b964:	684b      	ldr	r3, [r1, #4]
                       Command->Response         | \
 800b966:	688a      	ldr	r2, [r1, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b968:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt | \
 800b96a:	68ca      	ldr	r2, [r1, #12]
                       Command->Response         | \
 800b96c:	4313      	orrs	r3, r2
                       Command->CPSM);
 800b96e:	690a      	ldr	r2, [r1, #16]
                       Command->WaitForInterrupt | \
 800b970:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b972:	68c1      	ldr	r1, [r0, #12]
 800b974:	4a02      	ldr	r2, [pc, #8]	@ (800b980 <SDMMC_SendCommand+0x20>)
 800b976:	400a      	ands	r2, r1
 800b978:	4313      	orrs	r3, r2
 800b97a:	60c3      	str	r3, [r0, #12]
}
 800b97c:	2000      	movs	r0, #0
 800b97e:	4770      	bx	lr
 800b980:	fffee0c0 	.word	0xfffee0c0

0800b984 <SDMMC_GetCommandResponse>:
  return (uint8_t)(SDMMCx->RESPCMD);
 800b984:	6900      	ldr	r0, [r0, #16]
}
 800b986:	b2c0      	uxtb	r0, r0
 800b988:	4770      	bx	lr

0800b98a <SDMMC_GetResponse>:
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b98a:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 800b98c:	5840      	ldr	r0, [r0, r1]
}
 800b98e:	4770      	bx	lr

0800b990 <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b990:	680b      	ldr	r3, [r1, #0]
 800b992:	6243      	str	r3, [r0, #36]	@ 0x24
  SDMMCx->DLEN = Data->DataLength;
 800b994:	684b      	ldr	r3, [r1, #4]
 800b996:	6283      	str	r3, [r0, #40]	@ 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b998:	688b      	ldr	r3, [r1, #8]
                       Data->TransferDir   | \
 800b99a:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b99c:	4313      	orrs	r3, r2
                       Data->TransferMode  | \
 800b99e:	690a      	ldr	r2, [r1, #16]
                       Data->TransferDir   | \
 800b9a0:	4313      	orrs	r3, r2
                       Data->DPSM);
 800b9a2:	694a      	ldr	r2, [r1, #20]
                       Data->TransferMode  | \
 800b9a4:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b9a6:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800b9a8:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800b9ac:	4313      	orrs	r3, r2
 800b9ae:	62c3      	str	r3, [r0, #44]	@ 0x2c
}
 800b9b0:	2000      	movs	r0, #0
 800b9b2:	4770      	bx	lr

0800b9b4 <SDMMC_CmdGoIdleState>:
{
 800b9b4:	b510      	push	{r4, lr}
 800b9b6:	b086      	sub	sp, #24
 800b9b8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b9be:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b9c0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b9c2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b9c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b9c8:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b9ca:	a901      	add	r1, sp, #4
 800b9cc:	f7ff ffc8 	bl	800b960 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b9d0:	4620      	mov	r0, r4
 800b9d2:	f7ff ff7d 	bl	800b8d0 <SDMMC_GetCmdError>
}
 800b9d6:	b006      	add	sp, #24
 800b9d8:	bd10      	pop	{r4, pc}
	...

0800b9dc <SDMMC_GetCmdResp1>:
{
 800b9dc:	b570      	push	{r4, r5, r6, lr}
 800b9de:	4605      	mov	r5, r0
 800b9e0:	460e      	mov	r6, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b9e2:	4b51      	ldr	r3, [pc, #324]	@ (800bb28 <SDMMC_GetCmdResp1+0x14c>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	4951      	ldr	r1, [pc, #324]	@ (800bb2c <SDMMC_GetCmdResp1+0x150>)
 800b9e8:	fba1 1303 	umull	r1, r3, r1, r3
 800b9ec:	0a5b      	lsrs	r3, r3, #9
 800b9ee:	fb03 f202 	mul.w	r2, r3, r2
    if (count-- == 0U)
 800b9f2:	4613      	mov	r3, r2
 800b9f4:	3a01      	subs	r2, #1
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d05e      	beq.n	800bab8 <SDMMC_GetCmdResp1+0xdc>
    sta_reg = SDMMCx->STA;
 800b9fa:	6b6c      	ldr	r4, [r5, #52]	@ 0x34
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800b9fc:	4b4c      	ldr	r3, [pc, #304]	@ (800bb30 <SDMMC_GetCmdResp1+0x154>)
 800b9fe:	4023      	ands	r3, r4
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d0f6      	beq.n	800b9f2 <SDMMC_GetCmdResp1+0x16>
 800ba04:	f414 5f00 	tst.w	r4, #8192	@ 0x2000
 800ba08:	d1f3      	bne.n	800b9f2 <SDMMC_GetCmdResp1+0x16>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ba0a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800ba0c:	f013 0f04 	tst.w	r3, #4
 800ba10:	d106      	bne.n	800ba20 <SDMMC_GetCmdResp1+0x44>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ba12:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800ba14:	f013 0f01 	tst.w	r3, #1
 800ba18:	d005      	beq.n	800ba26 <SDMMC_GetCmdResp1+0x4a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ba1a:	2001      	movs	r0, #1
 800ba1c:	63a8      	str	r0, [r5, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba1e:	e04d      	b.n	800babc <SDMMC_GetCmdResp1+0xe0>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ba20:	2004      	movs	r0, #4
 800ba22:	63a8      	str	r0, [r5, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ba24:	e04a      	b.n	800babc <SDMMC_GetCmdResp1+0xe0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ba26:	4b43      	ldr	r3, [pc, #268]	@ (800bb34 <SDMMC_GetCmdResp1+0x158>)
 800ba28:	63ab      	str	r3, [r5, #56]	@ 0x38
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ba2a:	4628      	mov	r0, r5
 800ba2c:	f7ff ffaa 	bl	800b984 <SDMMC_GetCommandResponse>
 800ba30:	42b0      	cmp	r0, r6
 800ba32:	d001      	beq.n	800ba38 <SDMMC_GetCmdResp1+0x5c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba34:	2001      	movs	r0, #1
 800ba36:	e041      	b.n	800babc <SDMMC_GetCmdResp1+0xe0>
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ba38:	2100      	movs	r1, #0
 800ba3a:	4628      	mov	r0, r5
 800ba3c:	f7ff ffa5 	bl	800b98a <SDMMC_GetResponse>
 800ba40:	4603      	mov	r3, r0
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ba42:	483d      	ldr	r0, [pc, #244]	@ (800bb38 <SDMMC_GetCmdResp1+0x15c>)
 800ba44:	4018      	ands	r0, r3
 800ba46:	b3c8      	cbz	r0, 800babc <SDMMC_GetCmdResp1+0xe0>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	db38      	blt.n	800babe <SDMMC_GetCmdResp1+0xe2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ba4c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ba50:	d138      	bne.n	800bac4 <SDMMC_GetCmdResp1+0xe8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ba52:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 800ba56:	d137      	bne.n	800bac8 <SDMMC_GetCmdResp1+0xec>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ba58:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800ba5c:	d136      	bne.n	800bacc <SDMMC_GetCmdResp1+0xf0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ba5e:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 800ba62:	d136      	bne.n	800bad2 <SDMMC_GetCmdResp1+0xf6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ba64:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 800ba68:	d136      	bne.n	800bad8 <SDMMC_GetCmdResp1+0xfc>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ba6a:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800ba6e:	d136      	bne.n	800bade <SDMMC_GetCmdResp1+0x102>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ba70:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800ba74:	d136      	bne.n	800bae4 <SDMMC_GetCmdResp1+0x108>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ba76:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800ba7a:	d136      	bne.n	800baea <SDMMC_GetCmdResp1+0x10e>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ba7c:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 800ba80:	d136      	bne.n	800baf0 <SDMMC_GetCmdResp1+0x114>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ba82:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800ba86:	d136      	bne.n	800baf6 <SDMMC_GetCmdResp1+0x11a>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ba88:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 800ba8c:	d136      	bne.n	800bafc <SDMMC_GetCmdResp1+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ba8e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800ba92:	d136      	bne.n	800bb02 <SDMMC_GetCmdResp1+0x126>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ba94:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800ba98:	d136      	bne.n	800bb08 <SDMMC_GetCmdResp1+0x12c>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ba9a:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800ba9e:	d136      	bne.n	800bb0e <SDMMC_GetCmdResp1+0x132>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800baa0:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 800baa4:	d136      	bne.n	800bb14 <SDMMC_GetCmdResp1+0x138>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800baa6:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 800baaa:	d136      	bne.n	800bb1a <SDMMC_GetCmdResp1+0x13e>
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800baac:	f013 0f08 	tst.w	r3, #8
 800bab0:	d036      	beq.n	800bb20 <SDMMC_GetCmdResp1+0x144>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800bab2:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800bab6:	e001      	b.n	800babc <SDMMC_GetCmdResp1+0xe0>
      return SDMMC_ERROR_TIMEOUT;
 800bab8:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800babc:	bd70      	pop	{r4, r5, r6, pc}
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800babe:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800bac2:	e7fb      	b.n	800babc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bac4:	2040      	movs	r0, #64	@ 0x40
 800bac6:	e7f9      	b.n	800babc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bac8:	2080      	movs	r0, #128	@ 0x80
 800baca:	e7f7      	b.n	800babc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bacc:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800bad0:	e7f4      	b.n	800babc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bad2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800bad6:	e7f1      	b.n	800babc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bad8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800badc:	e7ee      	b.n	800babc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bade:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800bae2:	e7eb      	b.n	800babc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bae4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800bae8:	e7e8      	b.n	800babc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800baea:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800baee:	e7e5      	b.n	800babc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800baf0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800baf4:	e7e2      	b.n	800babc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CC_ERR;
 800baf6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800bafa:	e7df      	b.n	800babc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bafc:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800bb00:	e7dc      	b.n	800babc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bb02:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800bb06:	e7d9      	b.n	800babc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bb08:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800bb0c:	e7d6      	b.n	800babc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bb0e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800bb12:	e7d3      	b.n	800babc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bb14:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800bb18:	e7d0      	b.n	800babc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ERASE_RESET;
 800bb1a:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800bb1e:	e7cd      	b.n	800babc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bb20:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800bb24:	e7ca      	b.n	800babc <SDMMC_GetCmdResp1+0xe0>
 800bb26:	bf00      	nop
 800bb28:	24000004 	.word	0x24000004
 800bb2c:	10624dd3 	.word	0x10624dd3
 800bb30:	00200045 	.word	0x00200045
 800bb34:	002000c5 	.word	0x002000c5
 800bb38:	fdffe008 	.word	0xfdffe008

0800bb3c <SDMMC_CmdBlockLength>:
{
 800bb3c:	b530      	push	{r4, r5, lr}
 800bb3e:	b087      	sub	sp, #28
 800bb40:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800bb42:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800bb44:	2510      	movs	r5, #16
 800bb46:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bb48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bb4c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb4e:	2300      	movs	r3, #0
 800bb50:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bb56:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb58:	a901      	add	r1, sp, #4
 800bb5a:	f7ff ff01 	bl	800b960 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800bb5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bb62:	4629      	mov	r1, r5
 800bb64:	4620      	mov	r0, r4
 800bb66:	f7ff ff39 	bl	800b9dc <SDMMC_GetCmdResp1>
}
 800bb6a:	b007      	add	sp, #28
 800bb6c:	bd30      	pop	{r4, r5, pc}
	...

0800bb70 <SDMMC_CmdStopTransfer>:
{
 800bb70:	b530      	push	{r4, r5, lr}
 800bb72:	b087      	sub	sp, #28
 800bb74:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800bb76:	2300      	movs	r3, #0
 800bb78:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800bb7a:	250c      	movs	r5, #12
 800bb7c:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bb7e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bb82:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb84:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bb8a:	9305      	str	r3, [sp, #20]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800bb8c:	68c3      	ldr	r3, [r0, #12]
 800bb8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb92:	60c3      	str	r3, [r0, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800bb94:	68c3      	ldr	r3, [r0, #12]
 800bb96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bb9a:	60c3      	str	r3, [r0, #12]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb9c:	a901      	add	r1, sp, #4
 800bb9e:	f7ff fedf 	bl	800b960 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800bba2:	4a08      	ldr	r2, [pc, #32]	@ (800bbc4 <SDMMC_CmdStopTransfer+0x54>)
 800bba4:	4629      	mov	r1, r5
 800bba6:	4620      	mov	r0, r4
 800bba8:	f7ff ff18 	bl	800b9dc <SDMMC_GetCmdResp1>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bbac:	68e3      	ldr	r3, [r4, #12]
 800bbae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bbb2:	60e3      	str	r3, [r4, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bbb4:	f1b0 7f00 	cmp.w	r0, #33554432	@ 0x2000000
 800bbb8:	d001      	beq.n	800bbbe <SDMMC_CmdStopTransfer+0x4e>
}
 800bbba:	b007      	add	sp, #28
 800bbbc:	bd30      	pop	{r4, r5, pc}
    errorstate = SDMMC_ERROR_NONE;
 800bbbe:	2000      	movs	r0, #0
  return errorstate;
 800bbc0:	e7fb      	b.n	800bbba <SDMMC_CmdStopTransfer+0x4a>
 800bbc2:	bf00      	nop
 800bbc4:	05f5e100 	.word	0x05f5e100

0800bbc8 <SDMMC_CmdSelDesel>:
{
 800bbc8:	b530      	push	{r4, r5, lr}
 800bbca:	b087      	sub	sp, #28
 800bbcc:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800bbce:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800bbd0:	2507      	movs	r5, #7
 800bbd2:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bbd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bbd8:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bbde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bbe2:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bbe4:	a901      	add	r1, sp, #4
 800bbe6:	f7ff febb 	bl	800b960 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800bbea:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bbee:	4629      	mov	r1, r5
 800bbf0:	4620      	mov	r0, r4
 800bbf2:	f7ff fef3 	bl	800b9dc <SDMMC_GetCmdResp1>
}
 800bbf6:	b007      	add	sp, #28
 800bbf8:	bd30      	pop	{r4, r5, pc}

0800bbfa <SDMMC_CmdAppCommand>:
{
 800bbfa:	b530      	push	{r4, r5, lr}
 800bbfc:	b087      	sub	sp, #28
 800bbfe:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800bc00:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800bc02:	2537      	movs	r5, #55	@ 0x37
 800bc04:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bc06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bc0a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bc14:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc16:	a901      	add	r1, sp, #4
 800bc18:	f7ff fea2 	bl	800b960 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800bc1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bc20:	4629      	mov	r1, r5
 800bc22:	4620      	mov	r0, r4
 800bc24:	f7ff feda 	bl	800b9dc <SDMMC_GetCmdResp1>
}
 800bc28:	b007      	add	sp, #28
 800bc2a:	bd30      	pop	{r4, r5, pc}

0800bc2c <SDMMC_CmdBusWidth>:
{
 800bc2c:	b530      	push	{r4, r5, lr}
 800bc2e:	b087      	sub	sp, #28
 800bc30:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800bc32:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800bc34:	2506      	movs	r5, #6
 800bc36:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bc38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bc3c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc3e:	2300      	movs	r3, #0
 800bc40:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bc46:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc48:	a901      	add	r1, sp, #4
 800bc4a:	f7ff fe89 	bl	800b960 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800bc4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bc52:	4629      	mov	r1, r5
 800bc54:	4620      	mov	r0, r4
 800bc56:	f7ff fec1 	bl	800b9dc <SDMMC_GetCmdResp1>
}
 800bc5a:	b007      	add	sp, #28
 800bc5c:	bd30      	pop	{r4, r5, pc}

0800bc5e <SDMMC_CmdSendSCR>:
{
 800bc5e:	b530      	push	{r4, r5, lr}
 800bc60:	b087      	sub	sp, #28
 800bc62:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800bc64:	2300      	movs	r3, #0
 800bc66:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800bc68:	2533      	movs	r5, #51	@ 0x33
 800bc6a:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bc6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bc70:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc72:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bc78:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc7a:	a901      	add	r1, sp, #4
 800bc7c:	f7ff fe70 	bl	800b960 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800bc80:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bc84:	4629      	mov	r1, r5
 800bc86:	4620      	mov	r0, r4
 800bc88:	f7ff fea8 	bl	800b9dc <SDMMC_GetCmdResp1>
}
 800bc8c:	b007      	add	sp, #28
 800bc8e:	bd30      	pop	{r4, r5, pc}

0800bc90 <SDMMC_CmdSendStatus>:
{
 800bc90:	b530      	push	{r4, r5, lr}
 800bc92:	b087      	sub	sp, #28
 800bc94:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800bc96:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800bc98:	250d      	movs	r5, #13
 800bc9a:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bc9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bca0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bca2:	2300      	movs	r3, #0
 800bca4:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bca6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bcaa:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bcac:	a901      	add	r1, sp, #4
 800bcae:	f7ff fe57 	bl	800b960 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800bcb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bcb6:	4629      	mov	r1, r5
 800bcb8:	4620      	mov	r0, r4
 800bcba:	f7ff fe8f 	bl	800b9dc <SDMMC_GetCmdResp1>
}
 800bcbe:	b007      	add	sp, #28
 800bcc0:	bd30      	pop	{r4, r5, pc}

0800bcc2 <SDMMC_CmdStatusRegister>:
{
 800bcc2:	b530      	push	{r4, r5, lr}
 800bcc4:	b087      	sub	sp, #28
 800bcc6:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800bcc8:	2300      	movs	r3, #0
 800bcca:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800bccc:	250d      	movs	r5, #13
 800bcce:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bcd0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bcd4:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bcd6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bcd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bcdc:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bcde:	a901      	add	r1, sp, #4
 800bce0:	f7ff fe3e 	bl	800b960 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800bce4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bce8:	4629      	mov	r1, r5
 800bcea:	4620      	mov	r0, r4
 800bcec:	f7ff fe76 	bl	800b9dc <SDMMC_GetCmdResp1>
}
 800bcf0:	b007      	add	sp, #28
 800bcf2:	bd30      	pop	{r4, r5, pc}

0800bcf4 <SDMMC_GetCmdResp2>:
{
 800bcf4:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bcf6:	4b14      	ldr	r3, [pc, #80]	@ (800bd48 <SDMMC_GetCmdResp2+0x54>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	4a14      	ldr	r2, [pc, #80]	@ (800bd4c <SDMMC_GetCmdResp2+0x58>)
 800bcfc:	fba2 2303 	umull	r2, r3, r2, r3
 800bd00:	0a5b      	lsrs	r3, r3, #9
 800bd02:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bd06:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 800bd0a:	461a      	mov	r2, r3
 800bd0c:	3b01      	subs	r3, #1
 800bd0e:	b1ba      	cbz	r2, 800bd40 <SDMMC_GetCmdResp2+0x4c>
    sta_reg = SDMMCx->STA;
 800bd10:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd12:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800bd16:	d0f8      	beq.n	800bd0a <SDMMC_GetCmdResp2+0x16>
 800bd18:	f412 5f00 	tst.w	r2, #8192	@ 0x2000
 800bd1c:	d1f5      	bne.n	800bd0a <SDMMC_GetCmdResp2+0x16>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bd1e:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800bd20:	f013 0f04 	tst.w	r3, #4
 800bd24:	d106      	bne.n	800bd34 <SDMMC_GetCmdResp2+0x40>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bd26:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 800bd28:	f010 0001 	ands.w	r0, r0, #1
 800bd2c:	d105      	bne.n	800bd3a <SDMMC_GetCmdResp2+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bd2e:	4b08      	ldr	r3, [pc, #32]	@ (800bd50 <SDMMC_GetCmdResp2+0x5c>)
 800bd30:	638b      	str	r3, [r1, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 800bd32:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bd34:	2004      	movs	r0, #4
 800bd36:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bd38:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bd3a:	2001      	movs	r0, #1
 800bd3c:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd3e:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800bd40:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800bd44:	4770      	bx	lr
 800bd46:	bf00      	nop
 800bd48:	24000004 	.word	0x24000004
 800bd4c:	10624dd3 	.word	0x10624dd3
 800bd50:	002000c5 	.word	0x002000c5

0800bd54 <SDMMC_CmdSendCID>:
{
 800bd54:	b510      	push	{r4, lr}
 800bd56:	b086      	sub	sp, #24
 800bd58:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800bd5e:	2202      	movs	r2, #2
 800bd60:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800bd62:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800bd66:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd68:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bd6e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd70:	a901      	add	r1, sp, #4
 800bd72:	f7ff fdf5 	bl	800b960 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800bd76:	4620      	mov	r0, r4
 800bd78:	f7ff ffbc 	bl	800bcf4 <SDMMC_GetCmdResp2>
}
 800bd7c:	b006      	add	sp, #24
 800bd7e:	bd10      	pop	{r4, pc}

0800bd80 <SDMMC_CmdSendCSD>:
{
 800bd80:	b510      	push	{r4, lr}
 800bd82:	b086      	sub	sp, #24
 800bd84:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800bd86:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800bd88:	2309      	movs	r3, #9
 800bd8a:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800bd8c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800bd90:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd92:	2300      	movs	r3, #0
 800bd94:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bd9a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd9c:	a901      	add	r1, sp, #4
 800bd9e:	f7ff fddf 	bl	800b960 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800bda2:	4620      	mov	r0, r4
 800bda4:	f7ff ffa6 	bl	800bcf4 <SDMMC_GetCmdResp2>
}
 800bda8:	b006      	add	sp, #24
 800bdaa:	bd10      	pop	{r4, pc}

0800bdac <SDMMC_GetCmdResp3>:
{
 800bdac:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bdae:	4b10      	ldr	r3, [pc, #64]	@ (800bdf0 <SDMMC_GetCmdResp3+0x44>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	4a10      	ldr	r2, [pc, #64]	@ (800bdf4 <SDMMC_GetCmdResp3+0x48>)
 800bdb4:	fba2 2303 	umull	r2, r3, r2, r3
 800bdb8:	0a5b      	lsrs	r3, r3, #9
 800bdba:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bdbe:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 800bdc2:	461a      	mov	r2, r3
 800bdc4:	3b01      	subs	r3, #1
 800bdc6:	b182      	cbz	r2, 800bdea <SDMMC_GetCmdResp3+0x3e>
    sta_reg = SDMMCx->STA;
 800bdc8:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bdca:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800bdce:	d0f8      	beq.n	800bdc2 <SDMMC_GetCmdResp3+0x16>
 800bdd0:	f412 5f00 	tst.w	r2, #8192	@ 0x2000
 800bdd4:	d1f5      	bne.n	800bdc2 <SDMMC_GetCmdResp3+0x16>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bdd6:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 800bdd8:	f010 0004 	ands.w	r0, r0, #4
 800bddc:	d102      	bne.n	800bde4 <SDMMC_GetCmdResp3+0x38>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bdde:	4b06      	ldr	r3, [pc, #24]	@ (800bdf8 <SDMMC_GetCmdResp3+0x4c>)
 800bde0:	638b      	str	r3, [r1, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 800bde2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bde4:	2004      	movs	r0, #4
 800bde6:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bde8:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800bdea:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800bdee:	4770      	bx	lr
 800bdf0:	24000004 	.word	0x24000004
 800bdf4:	10624dd3 	.word	0x10624dd3
 800bdf8:	002000c5 	.word	0x002000c5

0800bdfc <SDMMC_CmdAppOperCommand>:
{
 800bdfc:	b510      	push	{r4, lr}
 800bdfe:	b086      	sub	sp, #24
 800be00:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800be02:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800be04:	2329      	movs	r3, #41	@ 0x29
 800be06:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800be0c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be0e:	2300      	movs	r3, #0
 800be10:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800be16:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be18:	a901      	add	r1, sp, #4
 800be1a:	f7ff fda1 	bl	800b960 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800be1e:	4620      	mov	r0, r4
 800be20:	f7ff ffc4 	bl	800bdac <SDMMC_GetCmdResp3>
}
 800be24:	b006      	add	sp, #24
 800be26:	bd10      	pop	{r4, pc}

0800be28 <SDMMC_GetCmdResp6>:
{
 800be28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be2a:	4605      	mov	r5, r0
 800be2c:	460e      	mov	r6, r1
 800be2e:	4617      	mov	r7, r2
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800be30:	4b23      	ldr	r3, [pc, #140]	@ (800bec0 <SDMMC_GetCmdResp6+0x98>)
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	4a23      	ldr	r2, [pc, #140]	@ (800bec4 <SDMMC_GetCmdResp6+0x9c>)
 800be36:	fba2 2303 	umull	r2, r3, r2, r3
 800be3a:	0a5b      	lsrs	r3, r3, #9
 800be3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800be40:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 800be44:	461a      	mov	r2, r3
 800be46:	3b01      	subs	r3, #1
 800be48:	b38a      	cbz	r2, 800beae <SDMMC_GetCmdResp6+0x86>
    sta_reg = SDMMCx->STA;
 800be4a:	6b6c      	ldr	r4, [r5, #52]	@ 0x34
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800be4c:	f014 0f45 	tst.w	r4, #69	@ 0x45
 800be50:	d0f8      	beq.n	800be44 <SDMMC_GetCmdResp6+0x1c>
 800be52:	f414 5f00 	tst.w	r4, #8192	@ 0x2000
 800be56:	d1f5      	bne.n	800be44 <SDMMC_GetCmdResp6+0x1c>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800be58:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800be5a:	f013 0f04 	tst.w	r3, #4
 800be5e:	d106      	bne.n	800be6e <SDMMC_GetCmdResp6+0x46>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800be60:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800be62:	f013 0f01 	tst.w	r3, #1
 800be66:	d005      	beq.n	800be74 <SDMMC_GetCmdResp6+0x4c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800be68:	2001      	movs	r0, #1
 800be6a:	63a8      	str	r0, [r5, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800be6c:	e021      	b.n	800beb2 <SDMMC_GetCmdResp6+0x8a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800be6e:	2004      	movs	r0, #4
 800be70:	63a8      	str	r0, [r5, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800be72:	e01e      	b.n	800beb2 <SDMMC_GetCmdResp6+0x8a>
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800be74:	4628      	mov	r0, r5
 800be76:	f7ff fd85 	bl	800b984 <SDMMC_GetCommandResponse>
 800be7a:	42b0      	cmp	r0, r6
 800be7c:	d001      	beq.n	800be82 <SDMMC_GetCmdResp6+0x5a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800be7e:	2001      	movs	r0, #1
 800be80:	e017      	b.n	800beb2 <SDMMC_GetCmdResp6+0x8a>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800be82:	4b11      	ldr	r3, [pc, #68]	@ (800bec8 <SDMMC_GetCmdResp6+0xa0>)
 800be84:	63ab      	str	r3, [r5, #56]	@ 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800be86:	2100      	movs	r1, #0
 800be88:	4628      	mov	r0, r5
 800be8a:	f7ff fd7e 	bl	800b98a <SDMMC_GetResponse>
 800be8e:	4603      	mov	r3, r0
  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800be90:	f410 4060 	ands.w	r0, r0, #57344	@ 0xe000
 800be94:	d008      	beq.n	800bea8 <SDMMC_GetCmdResp6+0x80>
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800be96:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 800be9a:	d10b      	bne.n	800beb4 <SDMMC_GetCmdResp6+0x8c>
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800be9c:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800bea0:	d00b      	beq.n	800beba <SDMMC_GetCmdResp6+0x92>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bea2:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800bea6:	e004      	b.n	800beb2 <SDMMC_GetCmdResp6+0x8a>
    *pRCA = (uint16_t)(response_r1 >> 16);
 800bea8:	0c1b      	lsrs	r3, r3, #16
 800beaa:	803b      	strh	r3, [r7, #0]
    return SDMMC_ERROR_NONE;
 800beac:	e001      	b.n	800beb2 <SDMMC_GetCmdResp6+0x8a>
      return SDMMC_ERROR_TIMEOUT;
 800beae:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800beb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 800beb4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800beb8:	e7fb      	b.n	800beb2 <SDMMC_GetCmdResp6+0x8a>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800beba:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800bebe:	e7f8      	b.n	800beb2 <SDMMC_GetCmdResp6+0x8a>
 800bec0:	24000004 	.word	0x24000004
 800bec4:	10624dd3 	.word	0x10624dd3
 800bec8:	002000c5 	.word	0x002000c5

0800becc <SDMMC_CmdSetRelAdd>:
{
 800becc:	b570      	push	{r4, r5, r6, lr}
 800bece:	b086      	sub	sp, #24
 800bed0:	4604      	mov	r4, r0
 800bed2:	460d      	mov	r5, r1
  sdmmc_cmdinit.Argument         = 0U;
 800bed4:	2300      	movs	r3, #0
 800bed6:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800bed8:	2603      	movs	r6, #3
 800beda:	9602      	str	r6, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bedc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bee0:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bee2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bee4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bee8:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800beea:	a901      	add	r1, sp, #4
 800beec:	f7ff fd38 	bl	800b960 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800bef0:	462a      	mov	r2, r5
 800bef2:	4631      	mov	r1, r6
 800bef4:	4620      	mov	r0, r4
 800bef6:	f7ff ff97 	bl	800be28 <SDMMC_GetCmdResp6>
}
 800befa:	b006      	add	sp, #24
 800befc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bf00 <SDMMC_GetCmdResp7>:
{
 800bf00:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bf02:	4b16      	ldr	r3, [pc, #88]	@ (800bf5c <SDMMC_GetCmdResp7+0x5c>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	4a16      	ldr	r2, [pc, #88]	@ (800bf60 <SDMMC_GetCmdResp7+0x60>)
 800bf08:	fba2 2303 	umull	r2, r3, r2, r3
 800bf0c:	0a5b      	lsrs	r3, r3, #9
 800bf0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bf12:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 800bf16:	461a      	mov	r2, r3
 800bf18:	3b01      	subs	r3, #1
 800bf1a:	b1e2      	cbz	r2, 800bf56 <SDMMC_GetCmdResp7+0x56>
    sta_reg = SDMMCx->STA;
 800bf1c:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bf1e:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800bf22:	d0f8      	beq.n	800bf16 <SDMMC_GetCmdResp7+0x16>
 800bf24:	f412 5f00 	tst.w	r2, #8192	@ 0x2000
 800bf28:	d1f5      	bne.n	800bf16 <SDMMC_GetCmdResp7+0x16>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bf2a:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800bf2c:	f013 0f04 	tst.w	r3, #4
 800bf30:	d10b      	bne.n	800bf4a <SDMMC_GetCmdResp7+0x4a>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bf32:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800bf34:	f013 0301 	ands.w	r3, r3, #1
 800bf38:	d10a      	bne.n	800bf50 <SDMMC_GetCmdResp7+0x50>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800bf3a:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 800bf3c:	f010 0040 	ands.w	r0, r0, #64	@ 0x40
 800bf40:	d00b      	beq.n	800bf5a <SDMMC_GetCmdResp7+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800bf42:	2240      	movs	r2, #64	@ 0x40
 800bf44:	638a      	str	r2, [r1, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 800bf46:	4618      	mov	r0, r3
 800bf48:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bf4a:	2004      	movs	r0, #4
 800bf4c:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bf4e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bf50:	2001      	movs	r0, #1
 800bf52:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bf54:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800bf56:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800bf5a:	4770      	bx	lr
 800bf5c:	24000004 	.word	0x24000004
 800bf60:	10624dd3 	.word	0x10624dd3

0800bf64 <SDMMC_CmdOperCond>:
{
 800bf64:	b510      	push	{r4, lr}
 800bf66:	b086      	sub	sp, #24
 800bf68:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800bf6a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800bf6e:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800bf70:	2308      	movs	r3, #8
 800bf72:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bf78:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bf82:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf84:	a901      	add	r1, sp, #4
 800bf86:	f7ff fceb 	bl	800b960 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800bf8a:	4620      	mov	r0, r4
 800bf8c:	f7ff ffb8 	bl	800bf00 <SDMMC_GetCmdResp7>
}
 800bf90:	b006      	add	sp, #24
 800bf92:	bd10      	pop	{r4, pc}

0800bf94 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800bf94:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800bf96:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800bf9a:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800bf9c:	f001 fbf6 	bl	800d78c <xTaskGetSchedulerState>
 800bfa0:	2801      	cmp	r0, #1
 800bfa2:	d100      	bne.n	800bfa6 <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800bfa4:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 800bfa6:	f001 fffd 	bl	800dfa4 <xPortSysTickHandler>
}
 800bfaa:	e7fb      	b.n	800bfa4 <SysTick_Handler+0x10>

0800bfac <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bfac:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800bfb0:	b92b      	cbnz	r3, 800bfbe <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800bfb2:	4b06      	ldr	r3, [pc, #24]	@ (800bfcc <osKernelInitialize+0x20>)
 800bfb4:	6818      	ldr	r0, [r3, #0]
 800bfb6:	b928      	cbnz	r0, 800bfc4 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bfb8:	2201      	movs	r2, #1
 800bfba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bfbc:	4770      	bx	lr
    stat = osErrorISR;
 800bfbe:	f06f 0005 	mvn.w	r0, #5
 800bfc2:	4770      	bx	lr
    } else {
      stat = osError;
 800bfc4:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800bfc8:	4770      	bx	lr
 800bfca:	bf00      	nop
 800bfcc:	240026dc 	.word	0x240026dc

0800bfd0 <osKernelStart>:
 800bfd0:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800bfd4:	b973      	cbnz	r3, 800bff4 <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800bfd6:	4b0a      	ldr	r3, [pc, #40]	@ (800c000 <osKernelStart+0x30>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	2b01      	cmp	r3, #1
 800bfdc:	d10d      	bne.n	800bffa <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 800bfde:	b510      	push	{r4, lr}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bfe0:	2400      	movs	r4, #0
 800bfe2:	4b08      	ldr	r3, [pc, #32]	@ (800c004 <osKernelStart+0x34>)
 800bfe4:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bfe6:	4b06      	ldr	r3, [pc, #24]	@ (800c000 <osKernelStart+0x30>)
 800bfe8:	2202      	movs	r2, #2
 800bfea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bfec:	f001 f91c 	bl	800d228 <vTaskStartScheduler>
      stat = osOK;
 800bff0:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800bff2:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800bff4:	f06f 0005 	mvn.w	r0, #5
 800bff8:	4770      	bx	lr
      stat = osError;
 800bffa:	f04f 30ff 	mov.w	r0, #4294967295
}
 800bffe:	4770      	bx	lr
 800c000:	240026dc 	.word	0x240026dc
 800c004:	e000ed00 	.word	0xe000ed00

0800c008 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c00a:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c00c:	2400      	movs	r4, #0
 800c00e:	9405      	str	r4, [sp, #20]
 800c010:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800c014:	bb74      	cbnz	r4, 800c074 <osThreadNew+0x6c>
 800c016:	b368      	cbz	r0, 800c074 <osThreadNew+0x6c>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800c018:	b322      	cbz	r2, 800c064 <osThreadNew+0x5c>
      if (attr->name != NULL) {
 800c01a:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800c01c:	6993      	ldr	r3, [r2, #24]
 800c01e:	b903      	cbnz	r3, 800c022 <osThreadNew+0x1a>
    prio  = (UBaseType_t)osPriorityNormal;
 800c020:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c022:	1e5c      	subs	r4, r3, #1
 800c024:	2c37      	cmp	r4, #55	@ 0x37
 800c026:	d849      	bhi.n	800c0bc <osThreadNew+0xb4>
 800c028:	6854      	ldr	r4, [r2, #4]
 800c02a:	f014 0f01 	tst.w	r4, #1
 800c02e:	d147      	bne.n	800c0c0 <osThreadNew+0xb8>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800c030:	6956      	ldr	r6, [r2, #20]
 800c032:	b16e      	cbz	r6, 800c050 <osThreadNew+0x48>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c034:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c038:	6894      	ldr	r4, [r2, #8]
 800c03a:	b12c      	cbz	r4, 800c048 <osThreadNew+0x40>
 800c03c:	68d7      	ldr	r7, [r2, #12]
 800c03e:	2fa7      	cmp	r7, #167	@ 0xa7
 800c040:	d902      	bls.n	800c048 <osThreadNew+0x40>
 800c042:	6917      	ldr	r7, [r2, #16]
 800c044:	b107      	cbz	r7, 800c048 <osThreadNew+0x40>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c046:	b9c6      	cbnz	r6, 800c07a <osThreadNew+0x72>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c048:	b12c      	cbz	r4, 800c056 <osThreadNew+0x4e>
    mem  = -1;
 800c04a:	f04f 34ff 	mov.w	r4, #4294967295
 800c04e:	e00e      	b.n	800c06e <osThreadNew+0x66>
    stack = configMINIMAL_STACK_SIZE;
 800c050:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 800c054:	e7f0      	b.n	800c038 <osThreadNew+0x30>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c056:	68d4      	ldr	r4, [r2, #12]
 800c058:	b98c      	cbnz	r4, 800c07e <osThreadNew+0x76>
 800c05a:	6914      	ldr	r4, [r2, #16]
 800c05c:	b194      	cbz	r4, 800c084 <osThreadNew+0x7c>
    mem  = -1;
 800c05e:	f04f 34ff 	mov.w	r4, #4294967295
 800c062:	e004      	b.n	800c06e <osThreadNew+0x66>
    name = NULL;
 800c064:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 800c066:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 800c068:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 800c06a:	f04f 0c80 	mov.w	ip, #128	@ 0x80
    }

    if (mem == 1) {
 800c06e:	2c01      	cmp	r4, #1
 800c070:	d00a      	beq.n	800c088 <osThreadNew+0x80>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 800c072:	b1ac      	cbz	r4, 800c0a0 <osThreadNew+0x98>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c074:	9805      	ldr	r0, [sp, #20]
}
 800c076:	b007      	add	sp, #28
 800c078:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 800c07a:	2401      	movs	r4, #1
 800c07c:	e7f7      	b.n	800c06e <osThreadNew+0x66>
    mem  = -1;
 800c07e:	f04f 34ff 	mov.w	r4, #4294967295
 800c082:	e7f4      	b.n	800c06e <osThreadNew+0x66>
          mem = 0;
 800c084:	2400      	movs	r4, #0
 800c086:	e7f2      	b.n	800c06e <osThreadNew+0x66>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c088:	6914      	ldr	r4, [r2, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c08a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c08c:	9202      	str	r2, [sp, #8]
 800c08e:	9401      	str	r4, [sp, #4]
 800c090:	9300      	str	r3, [sp, #0]
 800c092:	460b      	mov	r3, r1
 800c094:	4662      	mov	r2, ip
 800c096:	4629      	mov	r1, r5
 800c098:	f001 f858 	bl	800d14c <xTaskCreateStatic>
 800c09c:	9005      	str	r0, [sp, #20]
 800c09e:	e7e9      	b.n	800c074 <osThreadNew+0x6c>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c0a0:	aa05      	add	r2, sp, #20
 800c0a2:	9201      	str	r2, [sp, #4]
 800c0a4:	9300      	str	r3, [sp, #0]
 800c0a6:	460b      	mov	r3, r1
 800c0a8:	fa1f f28c 	uxth.w	r2, ip
 800c0ac:	4629      	mov	r1, r5
 800c0ae:	f001 f888 	bl	800d1c2 <xTaskCreate>
 800c0b2:	2801      	cmp	r0, #1
 800c0b4:	d0de      	beq.n	800c074 <osThreadNew+0x6c>
            hTask = NULL;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	9305      	str	r3, [sp, #20]
 800c0ba:	e7db      	b.n	800c074 <osThreadNew+0x6c>
        return (NULL);
 800c0bc:	2000      	movs	r0, #0
 800c0be:	e7da      	b.n	800c076 <osThreadNew+0x6e>
 800c0c0:	2000      	movs	r0, #0
 800c0c2:	e7d8      	b.n	800c076 <osThreadNew+0x6e>

0800c0c4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c0c4:	b508      	push	{r3, lr}
 800c0c6:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800c0ca:	b933      	cbnz	r3, 800c0da <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 800c0cc:	b908      	cbnz	r0, 800c0d2 <osDelay+0xe>
    stat = osOK;
 800c0ce:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 800c0d0:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 800c0d2:	f001 fa15 	bl	800d500 <vTaskDelay>
    stat = osOK;
 800c0d6:	2000      	movs	r0, #0
 800c0d8:	e7fa      	b.n	800c0d0 <osDelay+0xc>
    stat = osErrorISR;
 800c0da:	f06f 0005 	mvn.w	r0, #5
 800c0de:	e7f7      	b.n	800c0d0 <osDelay+0xc>

0800c0e0 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800c0e0:	b570      	push	{r4, r5, r6, lr}
 800c0e2:	b082      	sub	sp, #8
 800c0e4:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d14d      	bne.n	800c188 <osSemaphoreNew+0xa8>
 800c0ec:	460e      	mov	r6, r1
 800c0ee:	4614      	mov	r4, r2
 800c0f0:	4288      	cmp	r0, r1
 800c0f2:	bf34      	ite	cc
 800c0f4:	2300      	movcc	r3, #0
 800c0f6:	2301      	movcs	r3, #1
 800c0f8:	2800      	cmp	r0, #0
 800c0fa:	d049      	beq.n	800c190 <osSemaphoreNew+0xb0>
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d047      	beq.n	800c190 <osSemaphoreNew+0xb0>
    mem = -1;

    if (attr != NULL) {
 800c100:	b14a      	cbz	r2, 800c116 <osSemaphoreNew+0x36>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c102:	6895      	ldr	r5, [r2, #8]
 800c104:	b115      	cbz	r5, 800c10c <osSemaphoreNew+0x2c>
 800c106:	68d3      	ldr	r3, [r2, #12]
 800c108:	2b4f      	cmp	r3, #79	@ 0x4f
 800c10a:	d814      	bhi.n	800c136 <osSemaphoreNew+0x56>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c10c:	2d00      	cmp	r5, #0
 800c10e:	d141      	bne.n	800c194 <osSemaphoreNew+0xb4>
 800c110:	68e3      	ldr	r3, [r4, #12]
 800c112:	b10b      	cbz	r3, 800c118 <osSemaphoreNew+0x38>
 800c114:	e039      	b.n	800c18a <osSemaphoreNew+0xaa>
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 800c116:	2300      	movs	r3, #0
    }

    if (mem != -1) {
      if (max_count == 1U) {
 800c118:	2801      	cmp	r0, #1
 800c11a:	d00e      	beq.n	800c13a <osSemaphoreNew+0x5a>
            hSemaphore = NULL;
          }
        }
      }
      else {
        if (mem == 1) {
 800c11c:	bb73      	cbnz	r3, 800c17c <osSemaphoreNew+0x9c>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800c11e:	4631      	mov	r1, r6
 800c120:	f000 fa90 	bl	800c644 <xQueueCreateCountingSemaphore>
 800c124:	4605      	mov	r5, r0
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800c126:	b385      	cbz	r5, 800c18a <osSemaphoreNew+0xaa>
        if (attr != NULL) {
 800c128:	b104      	cbz	r4, 800c12c <osSemaphoreNew+0x4c>
          name = attr->name;
 800c12a:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hSemaphore, name);
 800c12c:	4621      	mov	r1, r4
 800c12e:	4628      	mov	r0, r5
 800c130:	f000 fe04 	bl	800cd3c <vQueueAddToRegistry>
 800c134:	e029      	b.n	800c18a <osSemaphoreNew+0xaa>
        mem = 1;
 800c136:	2301      	movs	r3, #1
 800c138:	e7ee      	b.n	800c118 <osSemaphoreNew+0x38>
        if (mem == 1) {
 800c13a:	b9b3      	cbnz	r3, 800c16a <osSemaphoreNew+0x8a>
            hSemaphore = xSemaphoreCreateBinary();
 800c13c:	2203      	movs	r2, #3
 800c13e:	2100      	movs	r1, #0
 800c140:	2001      	movs	r0, #1
 800c142:	f000 fa38 	bl	800c5b6 <xQueueGenericCreate>
 800c146:	4605      	mov	r5, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800c148:	2d00      	cmp	r5, #0
 800c14a:	bf18      	it	ne
 800c14c:	2e00      	cmpne	r6, #0
 800c14e:	d0ea      	beq.n	800c126 <osSemaphoreNew+0x46>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c150:	2300      	movs	r3, #0
 800c152:	461a      	mov	r2, r3
 800c154:	4619      	mov	r1, r3
 800c156:	4628      	mov	r0, r5
 800c158:	f000 fa92 	bl	800c680 <xQueueGenericSend>
 800c15c:	2801      	cmp	r0, #1
 800c15e:	d0e2      	beq.n	800c126 <osSemaphoreNew+0x46>
            vSemaphoreDelete (hSemaphore);
 800c160:	4628      	mov	r0, r5
 800c162:	f000 fe15 	bl	800cd90 <vQueueDelete>
            hSemaphore = NULL;
 800c166:	2500      	movs	r5, #0
 800c168:	e00f      	b.n	800c18a <osSemaphoreNew+0xaa>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800c16a:	68a3      	ldr	r3, [r4, #8]
 800c16c:	2203      	movs	r2, #3
 800c16e:	9200      	str	r2, [sp, #0]
 800c170:	2200      	movs	r2, #0
 800c172:	4611      	mov	r1, r2
 800c174:	f000 f9cc 	bl	800c510 <xQueueGenericCreateStatic>
 800c178:	4605      	mov	r5, r0
 800c17a:	e7e5      	b.n	800c148 <osSemaphoreNew+0x68>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800c17c:	68a2      	ldr	r2, [r4, #8]
 800c17e:	4631      	mov	r1, r6
 800c180:	f000 fa3d 	bl	800c5fe <xQueueCreateCountingSemaphoreStatic>
 800c184:	4605      	mov	r5, r0
 800c186:	e7ce      	b.n	800c126 <osSemaphoreNew+0x46>
  hSemaphore = NULL;
 800c188:	2500      	movs	r5, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800c18a:	4628      	mov	r0, r5
 800c18c:	b002      	add	sp, #8
 800c18e:	bd70      	pop	{r4, r5, r6, pc}
  hSemaphore = NULL;
 800c190:	2500      	movs	r5, #0
 800c192:	e7fa      	b.n	800c18a <osSemaphoreNew+0xaa>
 800c194:	2500      	movs	r5, #0
  return ((osSemaphoreId_t)hSemaphore);
 800c196:	e7f8      	b.n	800c18a <osSemaphoreNew+0xaa>

0800c198 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800c198:	b320      	cbz	r0, 800c1e4 <osSemaphoreAcquire+0x4c>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800c19a:	b510      	push	{r4, lr}
 800c19c:	b082      	sub	sp, #8
 800c19e:	460c      	mov	r4, r1
 800c1a0:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800c1a4:	b1b3      	cbz	r3, 800c1d4 <osSemaphoreAcquire+0x3c>
    if (timeout != 0U) {
 800c1a6:	bb01      	cbnz	r1, 800c1ea <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 800c1a8:	2100      	movs	r1, #0
 800c1aa:	9101      	str	r1, [sp, #4]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800c1ac:	aa01      	add	r2, sp, #4
 800c1ae:	f000 fd6d 	bl	800cc8c <xQueueReceiveFromISR>
 800c1b2:	2801      	cmp	r0, #1
 800c1b4:	d11c      	bne.n	800c1f0 <osSemaphoreAcquire+0x58>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800c1b6:	9801      	ldr	r0, [sp, #4]
 800c1b8:	b150      	cbz	r0, 800c1d0 <osSemaphoreAcquire+0x38>
 800c1ba:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c1be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1c2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c1c6:	f3bf 8f4f 	dsb	sy
 800c1ca:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800c1ce:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800c1d0:	b002      	add	sp, #8
 800c1d2:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800c1d4:	f000 fc87 	bl	800cae6 <xQueueSemaphoreTake>
 800c1d8:	2801      	cmp	r0, #1
 800c1da:	d00c      	beq.n	800c1f6 <osSemaphoreAcquire+0x5e>
      if (timeout != 0U) {
 800c1dc:	b16c      	cbz	r4, 800c1fa <osSemaphoreAcquire+0x62>
        stat = osErrorTimeout;
 800c1de:	f06f 0001 	mvn.w	r0, #1
 800c1e2:	e7f5      	b.n	800c1d0 <osSemaphoreAcquire+0x38>
    stat = osErrorParameter;
 800c1e4:	f06f 0003 	mvn.w	r0, #3
}
 800c1e8:	4770      	bx	lr
      stat = osErrorParameter;
 800c1ea:	f06f 0003 	mvn.w	r0, #3
 800c1ee:	e7ef      	b.n	800c1d0 <osSemaphoreAcquire+0x38>
        stat = osErrorResource;
 800c1f0:	f06f 0002 	mvn.w	r0, #2
 800c1f4:	e7ec      	b.n	800c1d0 <osSemaphoreAcquire+0x38>
  stat = osOK;
 800c1f6:	2000      	movs	r0, #0
 800c1f8:	e7ea      	b.n	800c1d0 <osSemaphoreAcquire+0x38>
        stat = osErrorResource;
 800c1fa:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800c1fe:	e7e7      	b.n	800c1d0 <osSemaphoreAcquire+0x38>

0800c200 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800c200:	b320      	cbz	r0, 800c24c <osSemaphoreRelease+0x4c>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800c202:	b500      	push	{lr}
 800c204:	b083      	sub	sp, #12
 800c206:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800c20a:	b1a3      	cbz	r3, 800c236 <osSemaphoreRelease+0x36>
    yield = pdFALSE;
 800c20c:	2300      	movs	r3, #0
 800c20e:	9301      	str	r3, [sp, #4]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c210:	a901      	add	r1, sp, #4
 800c212:	f000 fb60 	bl	800c8d6 <xQueueGiveFromISR>
 800c216:	2801      	cmp	r0, #1
 800c218:	d11b      	bne.n	800c252 <osSemaphoreRelease+0x52>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 800c21a:	9801      	ldr	r0, [sp, #4]
 800c21c:	b198      	cbz	r0, 800c246 <osSemaphoreRelease+0x46>
 800c21e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c222:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c226:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c22a:	f3bf 8f4f 	dsb	sy
 800c22e:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800c232:	2000      	movs	r0, #0
 800c234:	e007      	b.n	800c246 <osSemaphoreRelease+0x46>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c236:	2300      	movs	r3, #0
 800c238:	461a      	mov	r2, r3
 800c23a:	4619      	mov	r1, r3
 800c23c:	f000 fa20 	bl	800c680 <xQueueGenericSend>
 800c240:	2801      	cmp	r0, #1
 800c242:	d109      	bne.n	800c258 <osSemaphoreRelease+0x58>
  stat = osOK;
 800c244:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 800c246:	b003      	add	sp, #12
 800c248:	f85d fb04 	ldr.w	pc, [sp], #4
    stat = osErrorParameter;
 800c24c:	f06f 0003 	mvn.w	r0, #3
}
 800c250:	4770      	bx	lr
      stat = osErrorResource;
 800c252:	f06f 0002 	mvn.w	r0, #2
 800c256:	e7f6      	b.n	800c246 <osSemaphoreRelease+0x46>
      stat = osErrorResource;
 800c258:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800c25c:	e7f3      	b.n	800c246 <osSemaphoreRelease+0x46>
	...

0800c260 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c260:	4b03      	ldr	r3, [pc, #12]	@ (800c270 <vApplicationGetIdleTaskMemory+0x10>)
 800c262:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c264:	4b03      	ldr	r3, [pc, #12]	@ (800c274 <vApplicationGetIdleTaskMemory+0x14>)
 800c266:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c268:	2380      	movs	r3, #128	@ 0x80
 800c26a:	6013      	str	r3, [r2, #0]
}
 800c26c:	4770      	bx	lr
 800c26e:	bf00      	nop
 800c270:	24002634 	.word	0x24002634
 800c274:	24002434 	.word	0x24002434

0800c278 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c278:	4b03      	ldr	r3, [pc, #12]	@ (800c288 <vApplicationGetTimerTaskMemory+0x10>)
 800c27a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c27c:	4b03      	ldr	r3, [pc, #12]	@ (800c28c <vApplicationGetTimerTaskMemory+0x14>)
 800c27e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c280:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c284:	6013      	str	r3, [r2, #0]
}
 800c286:	4770      	bx	lr
 800c288:	2400238c 	.word	0x2400238c
 800c28c:	24001f8c 	.word	0x24001f8c

0800c290 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c290:	f100 0308 	add.w	r3, r0, #8
 800c294:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c296:	f04f 32ff 	mov.w	r2, #4294967295
 800c29a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c29c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c29e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c2a4:	4770      	bx	lr

0800c2a6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c2aa:	4770      	bx	lr

0800c2ac <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800c2ac:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c2ae:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c2b0:	689a      	ldr	r2, [r3, #8]
 800c2b2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c2b4:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c2b6:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c2b8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800c2ba:	6803      	ldr	r3, [r0, #0]
 800c2bc:	3301      	adds	r3, #1
 800c2be:	6003      	str	r3, [r0, #0]
}
 800c2c0:	4770      	bx	lr

0800c2c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c2c2:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c2c4:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c2c6:	f1b5 3fff 	cmp.w	r5, #4294967295
 800c2ca:	d011      	beq.n	800c2f0 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c2cc:	f100 0308 	add.w	r3, r0, #8
 800c2d0:	461c      	mov	r4, r3
 800c2d2:	685b      	ldr	r3, [r3, #4]
 800c2d4:	681a      	ldr	r2, [r3, #0]
 800c2d6:	42aa      	cmp	r2, r5
 800c2d8:	d9fa      	bls.n	800c2d0 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c2da:	6863      	ldr	r3, [r4, #4]
 800c2dc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c2de:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c2e0:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800c2e2:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c2e4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800c2e6:	6803      	ldr	r3, [r0, #0]
 800c2e8:	3301      	adds	r3, #1
 800c2ea:	6003      	str	r3, [r0, #0]
}
 800c2ec:	bc30      	pop	{r4, r5}
 800c2ee:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800c2f0:	6904      	ldr	r4, [r0, #16]
 800c2f2:	e7f2      	b.n	800c2da <vListInsert+0x18>

0800c2f4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c2f4:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c2f6:	6841      	ldr	r1, [r0, #4]
 800c2f8:	6882      	ldr	r2, [r0, #8]
 800c2fa:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c2fc:	6841      	ldr	r1, [r0, #4]
 800c2fe:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c300:	685a      	ldr	r2, [r3, #4]
 800c302:	4282      	cmp	r2, r0
 800c304:	d006      	beq.n	800c314 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c306:	2200      	movs	r2, #0
 800c308:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800c30a:	681a      	ldr	r2, [r3, #0]
 800c30c:	3a01      	subs	r2, #1
 800c30e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c310:	6818      	ldr	r0, [r3, #0]
}
 800c312:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c314:	6882      	ldr	r2, [r0, #8]
 800c316:	605a      	str	r2, [r3, #4]
 800c318:	e7f5      	b.n	800c306 <uxListRemove+0x12>

0800c31a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c31a:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c31c:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800c31e:	b118      	cbz	r0, 800c328 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c322:	6818      	ldr	r0, [r3, #0]
 800c324:	f1c0 0038 	rsb	r0, r0, #56	@ 0x38
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 800c328:	4770      	bx	lr

0800c32a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c32a:	b510      	push	{r4, lr}
 800c32c:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c32e:	f001 fdc9 	bl	800dec4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c332:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800c334:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800c336:	429a      	cmp	r2, r3
 800c338:	d004      	beq.n	800c344 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800c33a:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800c33c:	f001 fde4 	bl	800df08 <vPortExitCritical>

	return xReturn;
}
 800c340:	4620      	mov	r0, r4
 800c342:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800c344:	2401      	movs	r4, #1
 800c346:	e7f9      	b.n	800c33c <prvIsQueueFull+0x12>

0800c348 <prvIsQueueEmpty>:
{
 800c348:	b510      	push	{r4, lr}
 800c34a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800c34c:	f001 fdba 	bl	800dec4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c350:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800c352:	b923      	cbnz	r3, 800c35e <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 800c354:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 800c356:	f001 fdd7 	bl	800df08 <vPortExitCritical>
}
 800c35a:	4620      	mov	r0, r4
 800c35c:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 800c35e:	2400      	movs	r4, #0
 800c360:	e7f9      	b.n	800c356 <prvIsQueueEmpty+0xe>

0800c362 <prvCopyDataToQueue>:
{
 800c362:	b570      	push	{r4, r5, r6, lr}
 800c364:	4604      	mov	r4, r0
 800c366:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c368:	6b86      	ldr	r6, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c36a:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800c36c:	b95a      	cbnz	r2, 800c386 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c36e:	6803      	ldr	r3, [r0, #0]
 800c370:	b11b      	cbz	r3, 800c37a <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 800c372:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c374:	3601      	adds	r6, #1
 800c376:	63a6      	str	r6, [r4, #56]	@ 0x38
}
 800c378:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c37a:	6880      	ldr	r0, [r0, #8]
 800c37c:	f001 fa62 	bl	800d844 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c380:	2300      	movs	r3, #0
 800c382:	60a3      	str	r3, [r4, #8]
 800c384:	e7f6      	b.n	800c374 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 800c386:	b96d      	cbnz	r5, 800c3a4 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c388:	6840      	ldr	r0, [r0, #4]
 800c38a:	f00a fb47 	bl	8016a1c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c38e:	6863      	ldr	r3, [r4, #4]
 800c390:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800c392:	4413      	add	r3, r2
 800c394:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c396:	68a2      	ldr	r2, [r4, #8]
 800c398:	4293      	cmp	r3, r2
 800c39a:	d319      	bcc.n	800c3d0 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c39c:	6823      	ldr	r3, [r4, #0]
 800c39e:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800c3a0:	4628      	mov	r0, r5
 800c3a2:	e7e7      	b.n	800c374 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c3a4:	68c0      	ldr	r0, [r0, #12]
 800c3a6:	f00a fb39 	bl	8016a1c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c3aa:	68e3      	ldr	r3, [r4, #12]
 800c3ac:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800c3ae:	4251      	negs	r1, r2
 800c3b0:	1a9b      	subs	r3, r3, r2
 800c3b2:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c3b4:	6822      	ldr	r2, [r4, #0]
 800c3b6:	4293      	cmp	r3, r2
 800c3b8:	d202      	bcs.n	800c3c0 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c3ba:	68a3      	ldr	r3, [r4, #8]
 800c3bc:	440b      	add	r3, r1
 800c3be:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800c3c0:	2d02      	cmp	r5, #2
 800c3c2:	d001      	beq.n	800c3c8 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 800c3c4:	2000      	movs	r0, #0
 800c3c6:	e7d5      	b.n	800c374 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c3c8:	b126      	cbz	r6, 800c3d4 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 800c3ca:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800c3cc:	2000      	movs	r0, #0
 800c3ce:	e7d1      	b.n	800c374 <prvCopyDataToQueue+0x12>
 800c3d0:	4628      	mov	r0, r5
 800c3d2:	e7cf      	b.n	800c374 <prvCopyDataToQueue+0x12>
 800c3d4:	2000      	movs	r0, #0
 800c3d6:	e7cd      	b.n	800c374 <prvCopyDataToQueue+0x12>

0800c3d8 <prvCopyDataFromQueue>:
{
 800c3d8:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c3da:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800c3dc:	b16a      	cbz	r2, 800c3fa <prvCopyDataFromQueue+0x22>
{
 800c3de:	b510      	push	{r4, lr}
 800c3e0:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c3e2:	68d9      	ldr	r1, [r3, #12]
 800c3e4:	4411      	add	r1, r2
 800c3e6:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c3e8:	689c      	ldr	r4, [r3, #8]
 800c3ea:	42a1      	cmp	r1, r4
 800c3ec:	d301      	bcc.n	800c3f2 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c3ee:	6819      	ldr	r1, [r3, #0]
 800c3f0:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c3f2:	68d9      	ldr	r1, [r3, #12]
 800c3f4:	f00a fb12 	bl	8016a1c <memcpy>
}
 800c3f8:	bd10      	pop	{r4, pc}
 800c3fa:	4770      	bx	lr

0800c3fc <prvUnlockQueue>:
{
 800c3fc:	b538      	push	{r3, r4, r5, lr}
 800c3fe:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 800c400:	f001 fd60 	bl	800dec4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800c404:	f895 4045 	ldrb.w	r4, [r5, #69]	@ 0x45
 800c408:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c40a:	e001      	b.n	800c410 <prvUnlockQueue+0x14>
			--cTxLock;
 800c40c:	3c01      	subs	r4, #1
 800c40e:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c410:	2c00      	cmp	r4, #0
 800c412:	dd0a      	ble.n	800c42a <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c414:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800c416:	b143      	cbz	r3, 800c42a <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c418:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 800c41c:	f001 f91c 	bl	800d658 <xTaskRemoveFromEventList>
 800c420:	2800      	cmp	r0, #0
 800c422:	d0f3      	beq.n	800c40c <prvUnlockQueue+0x10>
						vTaskMissedYield();
 800c424:	f001 f9ac 	bl	800d780 <vTaskMissedYield>
 800c428:	e7f0      	b.n	800c40c <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800c42a:	23ff      	movs	r3, #255	@ 0xff
 800c42c:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800c430:	f001 fd6a 	bl	800df08 <vPortExitCritical>
	taskENTER_CRITICAL();
 800c434:	f001 fd46 	bl	800dec4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800c438:	f895 4044 	ldrb.w	r4, [r5, #68]	@ 0x44
 800c43c:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c43e:	e001      	b.n	800c444 <prvUnlockQueue+0x48>
				--cRxLock;
 800c440:	3c01      	subs	r4, #1
 800c442:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c444:	2c00      	cmp	r4, #0
 800c446:	dd0a      	ble.n	800c45e <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c448:	692b      	ldr	r3, [r5, #16]
 800c44a:	b143      	cbz	r3, 800c45e <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c44c:	f105 0010 	add.w	r0, r5, #16
 800c450:	f001 f902 	bl	800d658 <xTaskRemoveFromEventList>
 800c454:	2800      	cmp	r0, #0
 800c456:	d0f3      	beq.n	800c440 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 800c458:	f001 f992 	bl	800d780 <vTaskMissedYield>
 800c45c:	e7f0      	b.n	800c440 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 800c45e:	23ff      	movs	r3, #255	@ 0xff
 800c460:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	taskEXIT_CRITICAL();
 800c464:	f001 fd50 	bl	800df08 <vPortExitCritical>
}
 800c468:	bd38      	pop	{r3, r4, r5, pc}

0800c46a <xQueueGenericReset>:
{
 800c46a:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800c46c:	b1e0      	cbz	r0, 800c4a8 <xQueueGenericReset+0x3e>
 800c46e:	460d      	mov	r5, r1
 800c470:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800c472:	f001 fd27 	bl	800dec4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c476:	6823      	ldr	r3, [r4, #0]
 800c478:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800c47a:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800c47c:	fb01 3002 	mla	r0, r1, r2, r3
 800c480:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c482:	2000      	movs	r0, #0
 800c484:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c486:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c488:	3a01      	subs	r2, #1
 800c48a:	fb02 3301 	mla	r3, r2, r1, r3
 800c48e:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c490:	23ff      	movs	r3, #255	@ 0xff
 800c492:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c496:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800c49a:	b9fd      	cbnz	r5, 800c4dc <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c49c:	6923      	ldr	r3, [r4, #16]
 800c49e:	b963      	cbnz	r3, 800c4ba <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 800c4a0:	f001 fd32 	bl	800df08 <vPortExitCritical>
}
 800c4a4:	2001      	movs	r0, #1
 800c4a6:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c4a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4ac:	f383 8811 	msr	BASEPRI, r3
 800c4b0:	f3bf 8f6f 	isb	sy
 800c4b4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800c4b8:	e7fe      	b.n	800c4b8 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c4ba:	f104 0010 	add.w	r0, r4, #16
 800c4be:	f001 f8cb 	bl	800d658 <xTaskRemoveFromEventList>
 800c4c2:	2800      	cmp	r0, #0
 800c4c4:	d0ec      	beq.n	800c4a0 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 800c4c6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c4ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c4ce:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c4d2:	f3bf 8f4f 	dsb	sy
 800c4d6:	f3bf 8f6f 	isb	sy
 800c4da:	e7e1      	b.n	800c4a0 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c4dc:	f104 0010 	add.w	r0, r4, #16
 800c4e0:	f7ff fed6 	bl	800c290 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c4e4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800c4e8:	f7ff fed2 	bl	800c290 <vListInitialise>
 800c4ec:	e7d8      	b.n	800c4a0 <xQueueGenericReset+0x36>

0800c4ee <prvInitialiseNewQueue>:
{
 800c4ee:	b538      	push	{r3, r4, r5, lr}
 800c4f0:	461d      	mov	r5, r3
 800c4f2:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 800c4f4:	460b      	mov	r3, r1
 800c4f6:	b949      	cbnz	r1, 800c50c <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c4f8:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800c4fa:	63e0      	str	r0, [r4, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c4fc:	6423      	str	r3, [r4, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c4fe:	2101      	movs	r1, #1
 800c500:	4620      	mov	r0, r4
 800c502:	f7ff ffb2 	bl	800c46a <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800c506:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
}
 800c50a:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c50c:	6022      	str	r2, [r4, #0]
 800c50e:	e7f4      	b.n	800c4fa <prvInitialiseNewQueue+0xc>

0800c510 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c510:	b940      	cbnz	r0, 800c524 <xQueueGenericCreateStatic+0x14>
 800c512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c516:	f383 8811 	msr	BASEPRI, r3
 800c51a:	f3bf 8f6f 	isb	sy
 800c51e:	f3bf 8f4f 	dsb	sy
 800c522:	e7fe      	b.n	800c522 <xQueueGenericCreateStatic+0x12>
	{
 800c524:	b510      	push	{r4, lr}
 800c526:	b084      	sub	sp, #16
 800c528:	461c      	mov	r4, r3
		configASSERT( pxStaticQueue != NULL );
 800c52a:	b183      	cbz	r3, 800c54e <xQueueGenericCreateStatic+0x3e>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c52c:	1e0b      	subs	r3, r1, #0
 800c52e:	bf18      	it	ne
 800c530:	2301      	movne	r3, #1
 800c532:	2a00      	cmp	r2, #0
 800c534:	bf08      	it	eq
 800c536:	f043 0301 	orreq.w	r3, r3, #1
 800c53a:	b98b      	cbnz	r3, 800c560 <xQueueGenericCreateStatic+0x50>
 800c53c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c540:	f383 8811 	msr	BASEPRI, r3
 800c544:	f3bf 8f6f 	isb	sy
 800c548:	f3bf 8f4f 	dsb	sy
 800c54c:	e7fe      	b.n	800c54c <xQueueGenericCreateStatic+0x3c>
 800c54e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c552:	f383 8811 	msr	BASEPRI, r3
 800c556:	f3bf 8f6f 	isb	sy
 800c55a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 800c55e:	e7fe      	b.n	800c55e <xQueueGenericCreateStatic+0x4e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c560:	fab1 f381 	clz	r3, r1
 800c564:	095b      	lsrs	r3, r3, #5
 800c566:	2a00      	cmp	r2, #0
 800c568:	bf18      	it	ne
 800c56a:	f043 0301 	orrne.w	r3, r3, #1
 800c56e:	b943      	cbnz	r3, 800c582 <xQueueGenericCreateStatic+0x72>
 800c570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c574:	f383 8811 	msr	BASEPRI, r3
 800c578:	f3bf 8f6f 	isb	sy
 800c57c:	f3bf 8f4f 	dsb	sy
 800c580:	e7fe      	b.n	800c580 <xQueueGenericCreateStatic+0x70>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c582:	2350      	movs	r3, #80	@ 0x50
 800c584:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c586:	9b03      	ldr	r3, [sp, #12]
 800c588:	2b50      	cmp	r3, #80	@ 0x50
 800c58a:	d008      	beq.n	800c59e <xQueueGenericCreateStatic+0x8e>
 800c58c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c590:	f383 8811 	msr	BASEPRI, r3
 800c594:	f3bf 8f6f 	isb	sy
 800c598:	f3bf 8f4f 	dsb	sy
 800c59c:	e7fe      	b.n	800c59c <xQueueGenericCreateStatic+0x8c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c59e:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c5a0:	2301      	movs	r3, #1
 800c5a2:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c5a6:	9400      	str	r4, [sp, #0]
 800c5a8:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800c5ac:	f7ff ff9f 	bl	800c4ee <prvInitialiseNewQueue>
	}
 800c5b0:	4620      	mov	r0, r4
 800c5b2:	b004      	add	sp, #16
 800c5b4:	bd10      	pop	{r4, pc}

0800c5b6 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c5b6:	b940      	cbnz	r0, 800c5ca <xQueueGenericCreate+0x14>
 800c5b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5bc:	f383 8811 	msr	BASEPRI, r3
 800c5c0:	f3bf 8f6f 	isb	sy
 800c5c4:	f3bf 8f4f 	dsb	sy
 800c5c8:	e7fe      	b.n	800c5c8 <xQueueGenericCreate+0x12>
	{
 800c5ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5cc:	b083      	sub	sp, #12
 800c5ce:	460d      	mov	r5, r1
 800c5d0:	4614      	mov	r4, r2
 800c5d2:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5d4:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c5d8:	3050      	adds	r0, #80	@ 0x50
 800c5da:	f001 fe2b 	bl	800e234 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800c5de:	4607      	mov	r7, r0
 800c5e0:	b150      	cbz	r0, 800c5f8 <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c5e8:	9000      	str	r0, [sp, #0]
 800c5ea:	4623      	mov	r3, r4
 800c5ec:	f100 0250 	add.w	r2, r0, #80	@ 0x50
 800c5f0:	4629      	mov	r1, r5
 800c5f2:	4630      	mov	r0, r6
 800c5f4:	f7ff ff7b 	bl	800c4ee <prvInitialiseNewQueue>
	}
 800c5f8:	4638      	mov	r0, r7
 800c5fa:	b003      	add	sp, #12
 800c5fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c5fe <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 800c5fe:	b940      	cbnz	r0, 800c612 <xQueueCreateCountingSemaphoreStatic+0x14>
 800c600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c604:	f383 8811 	msr	BASEPRI, r3
 800c608:	f3bf 8f6f 	isb	sy
 800c60c:	f3bf 8f4f 	dsb	sy
 800c610:	e7fe      	b.n	800c610 <xQueueCreateCountingSemaphoreStatic+0x12>
	{
 800c612:	b510      	push	{r4, lr}
 800c614:	b082      	sub	sp, #8
 800c616:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 800c618:	4288      	cmp	r0, r1
 800c61a:	d208      	bcs.n	800c62e <xQueueCreateCountingSemaphoreStatic+0x30>
 800c61c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c620:	f383 8811 	msr	BASEPRI, r3
 800c624:	f3bf 8f6f 	isb	sy
 800c628:	f3bf 8f4f 	dsb	sy
 800c62c:	e7fe      	b.n	800c62c <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c62e:	2302      	movs	r3, #2
 800c630:	9300      	str	r3, [sp, #0]
 800c632:	4613      	mov	r3, r2
 800c634:	2200      	movs	r2, #0
 800c636:	4611      	mov	r1, r2
 800c638:	f7ff ff6a 	bl	800c510 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800c63c:	b100      	cbz	r0, 800c640 <xQueueCreateCountingSemaphoreStatic+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c63e:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800c640:	b002      	add	sp, #8
 800c642:	bd10      	pop	{r4, pc}

0800c644 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 800c644:	b940      	cbnz	r0, 800c658 <xQueueCreateCountingSemaphore+0x14>
 800c646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c64a:	f383 8811 	msr	BASEPRI, r3
 800c64e:	f3bf 8f6f 	isb	sy
 800c652:	f3bf 8f4f 	dsb	sy
 800c656:	e7fe      	b.n	800c656 <xQueueCreateCountingSemaphore+0x12>
	{
 800c658:	b510      	push	{r4, lr}
 800c65a:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 800c65c:	4288      	cmp	r0, r1
 800c65e:	d208      	bcs.n	800c672 <xQueueCreateCountingSemaphore+0x2e>
 800c660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c664:	f383 8811 	msr	BASEPRI, r3
 800c668:	f3bf 8f6f 	isb	sy
 800c66c:	f3bf 8f4f 	dsb	sy
 800c670:	e7fe      	b.n	800c670 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c672:	2202      	movs	r2, #2
 800c674:	2100      	movs	r1, #0
 800c676:	f7ff ff9e 	bl	800c5b6 <xQueueGenericCreate>
		if( xHandle != NULL )
 800c67a:	b100      	cbz	r0, 800c67e <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c67c:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800c67e:	bd10      	pop	{r4, pc}

0800c680 <xQueueGenericSend>:
{
 800c680:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c682:	b085      	sub	sp, #20
 800c684:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800c686:	b188      	cbz	r0, 800c6ac <xQueueGenericSend+0x2c>
 800c688:	460f      	mov	r7, r1
 800c68a:	461d      	mov	r5, r3
 800c68c:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c68e:	b1b1      	cbz	r1, 800c6be <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c690:	2d02      	cmp	r5, #2
 800c692:	d120      	bne.n	800c6d6 <xQueueGenericSend+0x56>
 800c694:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800c696:	2b01      	cmp	r3, #1
 800c698:	d01d      	beq.n	800c6d6 <xQueueGenericSend+0x56>
 800c69a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c69e:	f383 8811 	msr	BASEPRI, r3
 800c6a2:	f3bf 8f6f 	isb	sy
 800c6a6:	f3bf 8f4f 	dsb	sy
 800c6aa:	e7fe      	b.n	800c6aa <xQueueGenericSend+0x2a>
 800c6ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6b0:	f383 8811 	msr	BASEPRI, r3
 800c6b4:	f3bf 8f6f 	isb	sy
 800c6b8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800c6bc:	e7fe      	b.n	800c6bc <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c6be:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d0e5      	beq.n	800c690 <xQueueGenericSend+0x10>
 800c6c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6c8:	f383 8811 	msr	BASEPRI, r3
 800c6cc:	f3bf 8f6f 	isb	sy
 800c6d0:	f3bf 8f4f 	dsb	sy
 800c6d4:	e7fe      	b.n	800c6d4 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c6d6:	f001 f859 	bl	800d78c <xTaskGetSchedulerState>
 800c6da:	4606      	mov	r6, r0
 800c6dc:	b958      	cbnz	r0, 800c6f6 <xQueueGenericSend+0x76>
 800c6de:	9b01      	ldr	r3, [sp, #4]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d048      	beq.n	800c776 <xQueueGenericSend+0xf6>
 800c6e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6e8:	f383 8811 	msr	BASEPRI, r3
 800c6ec:	f3bf 8f6f 	isb	sy
 800c6f0:	f3bf 8f4f 	dsb	sy
 800c6f4:	e7fe      	b.n	800c6f4 <xQueueGenericSend+0x74>
 800c6f6:	2600      	movs	r6, #0
 800c6f8:	e03d      	b.n	800c776 <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c6fa:	462a      	mov	r2, r5
 800c6fc:	4639      	mov	r1, r7
 800c6fe:	4620      	mov	r0, r4
 800c700:	f7ff fe2f 	bl	800c362 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c704:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c706:	b97b      	cbnz	r3, 800c728 <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 800c708:	b148      	cbz	r0, 800c71e <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 800c70a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c70e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c712:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c716:	f3bf 8f4f 	dsb	sy
 800c71a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800c71e:	f001 fbf3 	bl	800df08 <vPortExitCritical>
				return pdPASS;
 800c722:	2001      	movs	r0, #1
}
 800c724:	b005      	add	sp, #20
 800c726:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c728:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800c72c:	f000 ff94 	bl	800d658 <xTaskRemoveFromEventList>
 800c730:	2800      	cmp	r0, #0
 800c732:	d0f4      	beq.n	800c71e <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 800c734:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c738:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c73c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c740:	f3bf 8f4f 	dsb	sy
 800c744:	f3bf 8f6f 	isb	sy
 800c748:	e7e9      	b.n	800c71e <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 800c74a:	f001 fbdd 	bl	800df08 <vPortExitCritical>
					return errQUEUE_FULL;
 800c74e:	2000      	movs	r0, #0
 800c750:	e7e8      	b.n	800c724 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c752:	a802      	add	r0, sp, #8
 800c754:	f000 ffc6 	bl	800d6e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c758:	2601      	movs	r6, #1
 800c75a:	e019      	b.n	800c790 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 800c75c:	2300      	movs	r3, #0
 800c75e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800c762:	e021      	b.n	800c7a8 <xQueueGenericSend+0x128>
 800c764:	2300      	movs	r3, #0
 800c766:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800c76a:	e023      	b.n	800c7b4 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 800c76c:	4620      	mov	r0, r4
 800c76e:	f7ff fe45 	bl	800c3fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c772:	f000 fe49 	bl	800d408 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800c776:	f001 fba5 	bl	800dec4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c77a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800c77c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800c77e:	429a      	cmp	r2, r3
 800c780:	d3bb      	bcc.n	800c6fa <xQueueGenericSend+0x7a>
 800c782:	2d02      	cmp	r5, #2
 800c784:	d0b9      	beq.n	800c6fa <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800c786:	9b01      	ldr	r3, [sp, #4]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d0de      	beq.n	800c74a <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 800c78c:	2e00      	cmp	r6, #0
 800c78e:	d0e0      	beq.n	800c752 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 800c790:	f001 fbba 	bl	800df08 <vPortExitCritical>
		vTaskSuspendAll();
 800c794:	f000 fd9e 	bl	800d2d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c798:	f001 fb94 	bl	800dec4 <vPortEnterCritical>
 800c79c:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 800c7a0:	b252      	sxtb	r2, r2
 800c7a2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c7a6:	d0d9      	beq.n	800c75c <xQueueGenericSend+0xdc>
 800c7a8:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 800c7ac:	b252      	sxtb	r2, r2
 800c7ae:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c7b2:	d0d7      	beq.n	800c764 <xQueueGenericSend+0xe4>
 800c7b4:	f001 fba8 	bl	800df08 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c7b8:	a901      	add	r1, sp, #4
 800c7ba:	a802      	add	r0, sp, #8
 800c7bc:	f000 ff9e 	bl	800d6fc <xTaskCheckForTimeOut>
 800c7c0:	b9d8      	cbnz	r0, 800c7fa <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c7c2:	4620      	mov	r0, r4
 800c7c4:	f7ff fdb1 	bl	800c32a <prvIsQueueFull>
 800c7c8:	2800      	cmp	r0, #0
 800c7ca:	d0cf      	beq.n	800c76c <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c7cc:	9901      	ldr	r1, [sp, #4]
 800c7ce:	f104 0010 	add.w	r0, r4, #16
 800c7d2:	f000 ff0d 	bl	800d5f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c7d6:	4620      	mov	r0, r4
 800c7d8:	f7ff fe10 	bl	800c3fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c7dc:	f000 fe14 	bl	800d408 <xTaskResumeAll>
 800c7e0:	2800      	cmp	r0, #0
 800c7e2:	d1c8      	bne.n	800c776 <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 800c7e4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c7e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c7ec:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c7f0:	f3bf 8f4f 	dsb	sy
 800c7f4:	f3bf 8f6f 	isb	sy
 800c7f8:	e7bd      	b.n	800c776 <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 800c7fa:	4620      	mov	r0, r4
 800c7fc:	f7ff fdfe 	bl	800c3fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c800:	f000 fe02 	bl	800d408 <xTaskResumeAll>
			return errQUEUE_FULL;
 800c804:	2000      	movs	r0, #0
 800c806:	e78d      	b.n	800c724 <xQueueGenericSend+0xa4>

0800c808 <xQueueGenericSendFromISR>:
{
 800c808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800c80c:	b190      	cbz	r0, 800c834 <xQueueGenericSendFromISR+0x2c>
 800c80e:	460f      	mov	r7, r1
 800c810:	4616      	mov	r6, r2
 800c812:	461c      	mov	r4, r3
 800c814:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c816:	b1b1      	cbz	r1, 800c846 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c818:	2c02      	cmp	r4, #2
 800c81a:	d120      	bne.n	800c85e <xQueueGenericSendFromISR+0x56>
 800c81c:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 800c81e:	2b01      	cmp	r3, #1
 800c820:	d01d      	beq.n	800c85e <xQueueGenericSendFromISR+0x56>
 800c822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c826:	f383 8811 	msr	BASEPRI, r3
 800c82a:	f3bf 8f6f 	isb	sy
 800c82e:	f3bf 8f4f 	dsb	sy
 800c832:	e7fe      	b.n	800c832 <xQueueGenericSendFromISR+0x2a>
 800c834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c838:	f383 8811 	msr	BASEPRI, r3
 800c83c:	f3bf 8f6f 	isb	sy
 800c840:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800c844:	e7fe      	b.n	800c844 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c846:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d0e5      	beq.n	800c818 <xQueueGenericSendFromISR+0x10>
 800c84c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c850:	f383 8811 	msr	BASEPRI, r3
 800c854:	f3bf 8f6f 	isb	sy
 800c858:	f3bf 8f4f 	dsb	sy
 800c85c:	e7fe      	b.n	800c85c <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c85e:	f001 fc57 	bl	800e110 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c862:	f3ef 8811 	mrs	r8, BASEPRI
 800c866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c86a:	f383 8811 	msr	BASEPRI, r3
 800c86e:	f3bf 8f6f 	isb	sy
 800c872:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c876:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 800c878:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 800c87a:	429a      	cmp	r2, r3
 800c87c:	d306      	bcc.n	800c88c <xQueueGenericSendFromISR+0x84>
 800c87e:	2c02      	cmp	r4, #2
 800c880:	d004      	beq.n	800c88c <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 800c882:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c884:	f388 8811 	msr	BASEPRI, r8
}
 800c888:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 800c88c:	f895 9045 	ldrb.w	r9, [r5, #69]	@ 0x45
 800c890:	fa4f f989 	sxtb.w	r9, r9
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c894:	6bab      	ldr	r3, [r5, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c896:	4622      	mov	r2, r4
 800c898:	4639      	mov	r1, r7
 800c89a:	4628      	mov	r0, r5
 800c89c:	f7ff fd61 	bl	800c362 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800c8a0:	f1b9 3fff 	cmp.w	r9, #4294967295
 800c8a4:	d006      	beq.n	800c8b4 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c8a6:	f109 0301 	add.w	r3, r9, #1
 800c8aa:	b25b      	sxtb	r3, r3
 800c8ac:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 800c8b0:	2001      	movs	r0, #1
 800c8b2:	e7e7      	b.n	800c884 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c8b4:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800c8b6:	b90b      	cbnz	r3, 800c8bc <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 800c8b8:	2001      	movs	r0, #1
 800c8ba:	e7e3      	b.n	800c884 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c8bc:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 800c8c0:	f000 feca 	bl	800d658 <xTaskRemoveFromEventList>
 800c8c4:	b118      	cbz	r0, 800c8ce <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 800c8c6:	b126      	cbz	r6, 800c8d2 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c8c8:	2001      	movs	r0, #1
 800c8ca:	6030      	str	r0, [r6, #0]
 800c8cc:	e7da      	b.n	800c884 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 800c8ce:	2001      	movs	r0, #1
 800c8d0:	e7d8      	b.n	800c884 <xQueueGenericSendFromISR+0x7c>
 800c8d2:	2001      	movs	r0, #1
 800c8d4:	e7d6      	b.n	800c884 <xQueueGenericSendFromISR+0x7c>

0800c8d6 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 800c8d6:	b168      	cbz	r0, 800c8f4 <xQueueGiveFromISR+0x1e>
{
 800c8d8:	b570      	push	{r4, r5, r6, lr}
 800c8da:	460c      	mov	r4, r1
 800c8dc:	4605      	mov	r5, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800c8de:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800c8e0:	b18b      	cbz	r3, 800c906 <xQueueGiveFromISR+0x30>
	__asm volatile
 800c8e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8e6:	f383 8811 	msr	BASEPRI, r3
 800c8ea:	f3bf 8f6f 	isb	sy
 800c8ee:	f3bf 8f4f 	dsb	sy
 800c8f2:	e7fe      	b.n	800c8f2 <xQueueGiveFromISR+0x1c>
 800c8f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8f8:	f383 8811 	msr	BASEPRI, r3
 800c8fc:	f3bf 8f6f 	isb	sy
 800c900:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800c904:	e7fe      	b.n	800c904 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c906:	6803      	ldr	r3, [r0, #0]
 800c908:	b1eb      	cbz	r3, 800c946 <xQueueGiveFromISR+0x70>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c90a:	f001 fc01 	bl	800e110 <vPortValidateInterruptPriority>
	__asm volatile
 800c90e:	f3ef 8611 	mrs	r6, BASEPRI
 800c912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c916:	f383 8811 	msr	BASEPRI, r3
 800c91a:	f3bf 8f6f 	isb	sy
 800c91e:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c922:	6baa      	ldr	r2, [r5, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c924:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 800c926:	4293      	cmp	r3, r2
 800c928:	d926      	bls.n	800c978 <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 800c92a:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 800c92e:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c930:	3201      	adds	r2, #1
 800c932:	63aa      	str	r2, [r5, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 800c934:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c938:	d011      	beq.n	800c95e <xQueueGiveFromISR+0x88>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c93a:	3301      	adds	r3, #1
 800c93c:	b25b      	sxtb	r3, r3
 800c93e:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 800c942:	2001      	movs	r0, #1
 800c944:	e019      	b.n	800c97a <xQueueGiveFromISR+0xa4>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c946:	6883      	ldr	r3, [r0, #8]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d0de      	beq.n	800c90a <xQueueGiveFromISR+0x34>
	__asm volatile
 800c94c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c950:	f383 8811 	msr	BASEPRI, r3
 800c954:	f3bf 8f6f 	isb	sy
 800c958:	f3bf 8f4f 	dsb	sy
 800c95c:	e7fe      	b.n	800c95c <xQueueGiveFromISR+0x86>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c95e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800c960:	b90b      	cbnz	r3, 800c966 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 800c962:	2001      	movs	r0, #1
 800c964:	e009      	b.n	800c97a <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c966:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 800c96a:	f000 fe75 	bl	800d658 <xTaskRemoveFromEventList>
 800c96e:	b138      	cbz	r0, 800c980 <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
 800c970:	b144      	cbz	r4, 800c984 <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c972:	2001      	movs	r0, #1
 800c974:	6020      	str	r0, [r4, #0]
 800c976:	e000      	b.n	800c97a <xQueueGiveFromISR+0xa4>
			xReturn = errQUEUE_FULL;
 800c978:	2000      	movs	r0, #0
	__asm volatile
 800c97a:	f386 8811 	msr	BASEPRI, r6
}
 800c97e:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
 800c980:	2001      	movs	r0, #1
 800c982:	e7fa      	b.n	800c97a <xQueueGiveFromISR+0xa4>
 800c984:	2001      	movs	r0, #1
 800c986:	e7f8      	b.n	800c97a <xQueueGiveFromISR+0xa4>

0800c988 <xQueueReceive>:
{
 800c988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c98a:	b085      	sub	sp, #20
 800c98c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800c98e:	b190      	cbz	r0, 800c9b6 <xQueueReceive+0x2e>
 800c990:	460f      	mov	r7, r1
 800c992:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c994:	b1c1      	cbz	r1, 800c9c8 <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c996:	f000 fef9 	bl	800d78c <xTaskGetSchedulerState>
 800c99a:	4606      	mov	r6, r0
 800c99c:	bb00      	cbnz	r0, 800c9e0 <xQueueReceive+0x58>
 800c99e:	9b01      	ldr	r3, [sp, #4]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d05e      	beq.n	800ca62 <xQueueReceive+0xda>
	__asm volatile
 800c9a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9a8:	f383 8811 	msr	BASEPRI, r3
 800c9ac:	f3bf 8f6f 	isb	sy
 800c9b0:	f3bf 8f4f 	dsb	sy
 800c9b4:	e7fe      	b.n	800c9b4 <xQueueReceive+0x2c>
 800c9b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9ba:	f383 8811 	msr	BASEPRI, r3
 800c9be:	f3bf 8f6f 	isb	sy
 800c9c2:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800c9c6:	e7fe      	b.n	800c9c6 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c9c8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d0e3      	beq.n	800c996 <xQueueReceive+0xe>
 800c9ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9d2:	f383 8811 	msr	BASEPRI, r3
 800c9d6:	f3bf 8f6f 	isb	sy
 800c9da:	f3bf 8f4f 	dsb	sy
 800c9de:	e7fe      	b.n	800c9de <xQueueReceive+0x56>
 800c9e0:	2600      	movs	r6, #0
 800c9e2:	e03e      	b.n	800ca62 <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c9e4:	4639      	mov	r1, r7
 800c9e6:	4620      	mov	r0, r4
 800c9e8:	f7ff fcf6 	bl	800c3d8 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c9ec:	3d01      	subs	r5, #1
 800c9ee:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c9f0:	6923      	ldr	r3, [r4, #16]
 800c9f2:	b923      	cbnz	r3, 800c9fe <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 800c9f4:	f001 fa88 	bl	800df08 <vPortExitCritical>
				return pdPASS;
 800c9f8:	2001      	movs	r0, #1
}
 800c9fa:	b005      	add	sp, #20
 800c9fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c9fe:	f104 0010 	add.w	r0, r4, #16
 800ca02:	f000 fe29 	bl	800d658 <xTaskRemoveFromEventList>
 800ca06:	2800      	cmp	r0, #0
 800ca08:	d0f4      	beq.n	800c9f4 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 800ca0a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ca0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ca12:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800ca16:	f3bf 8f4f 	dsb	sy
 800ca1a:	f3bf 8f6f 	isb	sy
 800ca1e:	e7e9      	b.n	800c9f4 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 800ca20:	f001 fa72 	bl	800df08 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800ca24:	2000      	movs	r0, #0
 800ca26:	e7e8      	b.n	800c9fa <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ca28:	a802      	add	r0, sp, #8
 800ca2a:	f000 fe5b 	bl	800d6e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ca2e:	2601      	movs	r6, #1
 800ca30:	e021      	b.n	800ca76 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 800ca32:	2300      	movs	r3, #0
 800ca34:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800ca38:	e029      	b.n	800ca8e <xQueueReceive+0x106>
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800ca40:	e02b      	b.n	800ca9a <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 800ca42:	4620      	mov	r0, r4
 800ca44:	f7ff fcda 	bl	800c3fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ca48:	f000 fcde 	bl	800d408 <xTaskResumeAll>
 800ca4c:	e009      	b.n	800ca62 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 800ca4e:	4620      	mov	r0, r4
 800ca50:	f7ff fcd4 	bl	800c3fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ca54:	f000 fcd8 	bl	800d408 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ca58:	4620      	mov	r0, r4
 800ca5a:	f7ff fc75 	bl	800c348 <prvIsQueueEmpty>
 800ca5e:	2800      	cmp	r0, #0
 800ca60:	d13f      	bne.n	800cae2 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 800ca62:	f001 fa2f 	bl	800dec4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca66:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ca68:	2d00      	cmp	r5, #0
 800ca6a:	d1bb      	bne.n	800c9e4 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800ca6c:	9b01      	ldr	r3, [sp, #4]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d0d6      	beq.n	800ca20 <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 800ca72:	2e00      	cmp	r6, #0
 800ca74:	d0d8      	beq.n	800ca28 <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 800ca76:	f001 fa47 	bl	800df08 <vPortExitCritical>
		vTaskSuspendAll();
 800ca7a:	f000 fc2b 	bl	800d2d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ca7e:	f001 fa21 	bl	800dec4 <vPortEnterCritical>
 800ca82:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800ca86:	b25b      	sxtb	r3, r3
 800ca88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca8c:	d0d1      	beq.n	800ca32 <xQueueReceive+0xaa>
 800ca8e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800ca92:	b25b      	sxtb	r3, r3
 800ca94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca98:	d0cf      	beq.n	800ca3a <xQueueReceive+0xb2>
 800ca9a:	f001 fa35 	bl	800df08 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ca9e:	a901      	add	r1, sp, #4
 800caa0:	a802      	add	r0, sp, #8
 800caa2:	f000 fe2b 	bl	800d6fc <xTaskCheckForTimeOut>
 800caa6:	2800      	cmp	r0, #0
 800caa8:	d1d1      	bne.n	800ca4e <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800caaa:	4620      	mov	r0, r4
 800caac:	f7ff fc4c 	bl	800c348 <prvIsQueueEmpty>
 800cab0:	2800      	cmp	r0, #0
 800cab2:	d0c6      	beq.n	800ca42 <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cab4:	9901      	ldr	r1, [sp, #4]
 800cab6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800caba:	f000 fd99 	bl	800d5f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cabe:	4620      	mov	r0, r4
 800cac0:	f7ff fc9c 	bl	800c3fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cac4:	f000 fca0 	bl	800d408 <xTaskResumeAll>
 800cac8:	2800      	cmp	r0, #0
 800caca:	d1ca      	bne.n	800ca62 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 800cacc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cad0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cad4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800cad8:	f3bf 8f4f 	dsb	sy
 800cadc:	f3bf 8f6f 	isb	sy
 800cae0:	e7bf      	b.n	800ca62 <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 800cae2:	2000      	movs	r0, #0
 800cae4:	e789      	b.n	800c9fa <xQueueReceive+0x72>

0800cae6 <xQueueSemaphoreTake>:
{
 800cae6:	b570      	push	{r4, r5, r6, lr}
 800cae8:	b084      	sub	sp, #16
 800caea:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800caec:	b158      	cbz	r0, 800cb06 <xQueueSemaphoreTake+0x20>
 800caee:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800caf0:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800caf2:	b18b      	cbz	r3, 800cb18 <xQueueSemaphoreTake+0x32>
 800caf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caf8:	f383 8811 	msr	BASEPRI, r3
 800cafc:	f3bf 8f6f 	isb	sy
 800cb00:	f3bf 8f4f 	dsb	sy
 800cb04:	e7fe      	b.n	800cb04 <xQueueSemaphoreTake+0x1e>
 800cb06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb0a:	f383 8811 	msr	BASEPRI, r3
 800cb0e:	f3bf 8f6f 	isb	sy
 800cb12:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800cb16:	e7fe      	b.n	800cb16 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cb18:	f000 fe38 	bl	800d78c <xTaskGetSchedulerState>
 800cb1c:	4605      	mov	r5, r0
 800cb1e:	b950      	cbnz	r0, 800cb36 <xQueueSemaphoreTake+0x50>
 800cb20:	9b01      	ldr	r3, [sp, #4]
 800cb22:	b15b      	cbz	r3, 800cb3c <xQueueSemaphoreTake+0x56>
 800cb24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb28:	f383 8811 	msr	BASEPRI, r3
 800cb2c:	f3bf 8f6f 	isb	sy
 800cb30:	f3bf 8f4f 	dsb	sy
 800cb34:	e7fe      	b.n	800cb34 <xQueueSemaphoreTake+0x4e>
 800cb36:	2600      	movs	r6, #0
 800cb38:	4635      	mov	r5, r6
 800cb3a:	e055      	b.n	800cbe8 <xQueueSemaphoreTake+0x102>
 800cb3c:	4606      	mov	r6, r0
 800cb3e:	e053      	b.n	800cbe8 <xQueueSemaphoreTake+0x102>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cb40:	3b01      	subs	r3, #1
 800cb42:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cb44:	6823      	ldr	r3, [r4, #0]
 800cb46:	b13b      	cbz	r3, 800cb58 <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb48:	6923      	ldr	r3, [r4, #16]
 800cb4a:	b94b      	cbnz	r3, 800cb60 <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 800cb4c:	f001 f9dc 	bl	800df08 <vPortExitCritical>
				return pdPASS;
 800cb50:	2601      	movs	r6, #1
}
 800cb52:	4630      	mov	r0, r6
 800cb54:	b004      	add	sp, #16
 800cb56:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cb58:	f000 ff0c 	bl	800d974 <pvTaskIncrementMutexHeldCount>
 800cb5c:	60a0      	str	r0, [r4, #8]
 800cb5e:	e7f3      	b.n	800cb48 <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb60:	f104 0010 	add.w	r0, r4, #16
 800cb64:	f000 fd78 	bl	800d658 <xTaskRemoveFromEventList>
 800cb68:	2800      	cmp	r0, #0
 800cb6a:	d0ef      	beq.n	800cb4c <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 800cb6c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cb70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb74:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800cb78:	f3bf 8f4f 	dsb	sy
 800cb7c:	f3bf 8f6f 	isb	sy
 800cb80:	e7e4      	b.n	800cb4c <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cb82:	b146      	cbz	r6, 800cb96 <xQueueSemaphoreTake+0xb0>
 800cb84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb88:	f383 8811 	msr	BASEPRI, r3
 800cb8c:	f3bf 8f6f 	isb	sy
 800cb90:	f3bf 8f4f 	dsb	sy
 800cb94:	e7fe      	b.n	800cb94 <xQueueSemaphoreTake+0xae>
					taskEXIT_CRITICAL();
 800cb96:	f001 f9b7 	bl	800df08 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800cb9a:	e7da      	b.n	800cb52 <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cb9c:	a802      	add	r0, sp, #8
 800cb9e:	f000 fda1 	bl	800d6e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cba2:	2501      	movs	r5, #1
 800cba4:	e02a      	b.n	800cbfc <xQueueSemaphoreTake+0x116>
		prvLockQueue( pxQueue );
 800cba6:	2300      	movs	r3, #0
 800cba8:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800cbac:	e032      	b.n	800cc14 <xQueueSemaphoreTake+0x12e>
 800cbae:	2300      	movs	r3, #0
 800cbb0:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800cbb4:	e034      	b.n	800cc20 <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 800cbb6:	f001 f985 	bl	800dec4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cbba:	68a0      	ldr	r0, [r4, #8]
 800cbbc:	f000 fdf6 	bl	800d7ac <xTaskPriorityInherit>
 800cbc0:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 800cbc2:	f001 f9a1 	bl	800df08 <vPortExitCritical>
 800cbc6:	e03b      	b.n	800cc40 <xQueueSemaphoreTake+0x15a>
				prvUnlockQueue( pxQueue );
 800cbc8:	4620      	mov	r0, r4
 800cbca:	f7ff fc17 	bl	800c3fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cbce:	f000 fc1b 	bl	800d408 <xTaskResumeAll>
 800cbd2:	e009      	b.n	800cbe8 <xQueueSemaphoreTake+0x102>
			prvUnlockQueue( pxQueue );
 800cbd4:	4620      	mov	r0, r4
 800cbd6:	f7ff fc11 	bl	800c3fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cbda:	f000 fc15 	bl	800d408 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cbde:	4620      	mov	r0, r4
 800cbe0:	f7ff fbb2 	bl	800c348 <prvIsQueueEmpty>
 800cbe4:	2800      	cmp	r0, #0
 800cbe6:	d142      	bne.n	800cc6e <xQueueSemaphoreTake+0x188>
		taskENTER_CRITICAL();
 800cbe8:	f001 f96c 	bl	800dec4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cbec:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d1a6      	bne.n	800cb40 <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800cbf2:	9b01      	ldr	r3, [sp, #4]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d0c4      	beq.n	800cb82 <xQueueSemaphoreTake+0x9c>
				else if( xEntryTimeSet == pdFALSE )
 800cbf8:	2d00      	cmp	r5, #0
 800cbfa:	d0cf      	beq.n	800cb9c <xQueueSemaphoreTake+0xb6>
		taskEXIT_CRITICAL();
 800cbfc:	f001 f984 	bl	800df08 <vPortExitCritical>
		vTaskSuspendAll();
 800cc00:	f000 fb68 	bl	800d2d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cc04:	f001 f95e 	bl	800dec4 <vPortEnterCritical>
 800cc08:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800cc0c:	b25b      	sxtb	r3, r3
 800cc0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc12:	d0c8      	beq.n	800cba6 <xQueueSemaphoreTake+0xc0>
 800cc14:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800cc18:	b25b      	sxtb	r3, r3
 800cc1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc1e:	d0c6      	beq.n	800cbae <xQueueSemaphoreTake+0xc8>
 800cc20:	f001 f972 	bl	800df08 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cc24:	a901      	add	r1, sp, #4
 800cc26:	a802      	add	r0, sp, #8
 800cc28:	f000 fd68 	bl	800d6fc <xTaskCheckForTimeOut>
 800cc2c:	2800      	cmp	r0, #0
 800cc2e:	d1d1      	bne.n	800cbd4 <xQueueSemaphoreTake+0xee>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cc30:	4620      	mov	r0, r4
 800cc32:	f7ff fb89 	bl	800c348 <prvIsQueueEmpty>
 800cc36:	2800      	cmp	r0, #0
 800cc38:	d0c6      	beq.n	800cbc8 <xQueueSemaphoreTake+0xe2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cc3a:	6823      	ldr	r3, [r4, #0]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d0ba      	beq.n	800cbb6 <xQueueSemaphoreTake+0xd0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cc40:	9901      	ldr	r1, [sp, #4]
 800cc42:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800cc46:	f000 fcd3 	bl	800d5f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cc4a:	4620      	mov	r0, r4
 800cc4c:	f7ff fbd6 	bl	800c3fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cc50:	f000 fbda 	bl	800d408 <xTaskResumeAll>
 800cc54:	2800      	cmp	r0, #0
 800cc56:	d1c7      	bne.n	800cbe8 <xQueueSemaphoreTake+0x102>
					portYIELD_WITHIN_API();
 800cc58:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cc5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc60:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800cc64:	f3bf 8f4f 	dsb	sy
 800cc68:	f3bf 8f6f 	isb	sy
 800cc6c:	e7bc      	b.n	800cbe8 <xQueueSemaphoreTake+0x102>
					if( xInheritanceOccurred != pdFALSE )
 800cc6e:	b90e      	cbnz	r6, 800cc74 <xQueueSemaphoreTake+0x18e>
				return errQUEUE_EMPTY;
 800cc70:	2600      	movs	r6, #0
 800cc72:	e76e      	b.n	800cb52 <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 800cc74:	f001 f926 	bl	800dec4 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800cc78:	4620      	mov	r0, r4
 800cc7a:	f7ff fb4e 	bl	800c31a <prvGetDisinheritPriorityAfterTimeout>
 800cc7e:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800cc80:	68a0      	ldr	r0, [r4, #8]
 800cc82:	f000 fe27 	bl	800d8d4 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800cc86:	f001 f93f 	bl	800df08 <vPortExitCritical>
 800cc8a:	e7f1      	b.n	800cc70 <xQueueSemaphoreTake+0x18a>

0800cc8c <xQueueReceiveFromISR>:
{
 800cc8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800cc90:	b1b0      	cbz	r0, 800ccc0 <xQueueReceiveFromISR+0x34>
 800cc92:	460d      	mov	r5, r1
 800cc94:	4690      	mov	r8, r2
 800cc96:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cc98:	b1d9      	cbz	r1, 800ccd2 <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cc9a:	f001 fa39 	bl	800e110 <vPortValidateInterruptPriority>
	__asm volatile
 800cc9e:	f3ef 8711 	mrs	r7, BASEPRI
 800cca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cca6:	f383 8811 	msr	BASEPRI, r3
 800ccaa:	f3bf 8f6f 	isb	sy
 800ccae:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ccb2:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ccb4:	b9ce      	cbnz	r6, 800ccea <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 800ccb6:	2000      	movs	r0, #0
	__asm volatile
 800ccb8:	f387 8811 	msr	BASEPRI, r7
}
 800ccbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 800ccc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccc4:	f383 8811 	msr	BASEPRI, r3
 800ccc8:	f3bf 8f6f 	isb	sy
 800cccc:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800ccd0:	e7fe      	b.n	800ccd0 <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ccd2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d0e0      	beq.n	800cc9a <xQueueReceiveFromISR+0xe>
 800ccd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccdc:	f383 8811 	msr	BASEPRI, r3
 800cce0:	f3bf 8f6f 	isb	sy
 800cce4:	f3bf 8f4f 	dsb	sy
 800cce8:	e7fe      	b.n	800cce8 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 800ccea:	f894 9044 	ldrb.w	r9, [r4, #68]	@ 0x44
 800ccee:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ccf2:	4629      	mov	r1, r5
 800ccf4:	4620      	mov	r0, r4
 800ccf6:	f7ff fb6f 	bl	800c3d8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ccfa:	1e73      	subs	r3, r6, #1
 800ccfc:	63a3      	str	r3, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 800ccfe:	f1b9 3fff 	cmp.w	r9, #4294967295
 800cd02:	d006      	beq.n	800cd12 <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800cd04:	f109 0301 	add.w	r3, r9, #1
 800cd08:	b25b      	sxtb	r3, r3
 800cd0a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
			xReturn = pdPASS;
 800cd0e:	2001      	movs	r0, #1
 800cd10:	e7d2      	b.n	800ccb8 <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd12:	6923      	ldr	r3, [r4, #16]
 800cd14:	b90b      	cbnz	r3, 800cd1a <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 800cd16:	2001      	movs	r0, #1
 800cd18:	e7ce      	b.n	800ccb8 <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd1a:	f104 0010 	add.w	r0, r4, #16
 800cd1e:	f000 fc9b 	bl	800d658 <xTaskRemoveFromEventList>
 800cd22:	b130      	cbz	r0, 800cd32 <xQueueReceiveFromISR+0xa6>
						if( pxHigherPriorityTaskWoken != NULL )
 800cd24:	f1b8 0f00 	cmp.w	r8, #0
 800cd28:	d005      	beq.n	800cd36 <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800cd2a:	2001      	movs	r0, #1
 800cd2c:	f8c8 0000 	str.w	r0, [r8]
 800cd30:	e7c2      	b.n	800ccb8 <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 800cd32:	2001      	movs	r0, #1
 800cd34:	e7c0      	b.n	800ccb8 <xQueueReceiveFromISR+0x2c>
 800cd36:	2001      	movs	r0, #1
 800cd38:	e7be      	b.n	800ccb8 <xQueueReceiveFromISR+0x2c>
	...

0800cd3c <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	2b07      	cmp	r3, #7
 800cd40:	d80c      	bhi.n	800cd5c <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cd42:	4a07      	ldr	r2, [pc, #28]	@ (800cd60 <vQueueAddToRegistry+0x24>)
 800cd44:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800cd48:	b10a      	cbz	r2, 800cd4e <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cd4a:	3301      	adds	r3, #1
 800cd4c:	e7f7      	b.n	800cd3e <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cd4e:	4a04      	ldr	r2, [pc, #16]	@ (800cd60 <vQueueAddToRegistry+0x24>)
 800cd50:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cd54:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800cd58:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cd5a:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cd5c:	4770      	bx	lr
 800cd5e:	bf00      	nop
 800cd60:	240026e0 	.word	0x240026e0

0800cd64 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cd64:	2300      	movs	r3, #0
 800cd66:	2b07      	cmp	r3, #7
 800cd68:	d80f      	bhi.n	800cd8a <vQueueUnregisterQueue+0x26>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800cd6a:	4a08      	ldr	r2, [pc, #32]	@ (800cd8c <vQueueUnregisterQueue+0x28>)
 800cd6c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800cd70:	6852      	ldr	r2, [r2, #4]
 800cd72:	4282      	cmp	r2, r0
 800cd74:	d001      	beq.n	800cd7a <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cd76:	3301      	adds	r3, #1
 800cd78:	e7f5      	b.n	800cd66 <vQueueUnregisterQueue+0x2>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800cd7a:	4a04      	ldr	r2, [pc, #16]	@ (800cd8c <vQueueUnregisterQueue+0x28>)
 800cd7c:	2100      	movs	r1, #0
 800cd7e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800cd82:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800cd86:	6051      	str	r1, [r2, #4]
				break;
 800cd88:	4770      	bx	lr
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800cd8a:	4770      	bx	lr
 800cd8c:	240026e0 	.word	0x240026e0

0800cd90 <vQueueDelete>:
	configASSERT( pxQueue );
 800cd90:	b138      	cbz	r0, 800cda2 <vQueueDelete+0x12>
{
 800cd92:	b510      	push	{r4, lr}
 800cd94:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 800cd96:	f7ff ffe5 	bl	800cd64 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800cd9a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800cd9e:	b14b      	cbz	r3, 800cdb4 <vQueueDelete+0x24>
}
 800cda0:	bd10      	pop	{r4, pc}
 800cda2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cda6:	f383 8811 	msr	BASEPRI, r3
 800cdaa:	f3bf 8f6f 	isb	sy
 800cdae:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800cdb2:	e7fe      	b.n	800cdb2 <vQueueDelete+0x22>
			vPortFree( pxQueue );
 800cdb4:	4620      	mov	r0, r4
 800cdb6:	f001 fabf 	bl	800e338 <vPortFree>
}
 800cdba:	e7f1      	b.n	800cda0 <vQueueDelete+0x10>

0800cdbc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cdbc:	b570      	push	{r4, r5, r6, lr}
 800cdbe:	4604      	mov	r4, r0
 800cdc0:	460d      	mov	r5, r1
 800cdc2:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cdc4:	f001 f87e 	bl	800dec4 <vPortEnterCritical>
 800cdc8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800cdcc:	b25b      	sxtb	r3, r3
 800cdce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdd2:	d00d      	beq.n	800cdf0 <vQueueWaitForMessageRestricted+0x34>
 800cdd4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800cdd8:	b25b      	sxtb	r3, r3
 800cdda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdde:	d00b      	beq.n	800cdf8 <vQueueWaitForMessageRestricted+0x3c>
 800cde0:	f001 f892 	bl	800df08 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cde4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800cde6:	b15b      	cbz	r3, 800ce00 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800cde8:	4620      	mov	r0, r4
 800cdea:	f7ff fb07 	bl	800c3fc <prvUnlockQueue>
	}
 800cdee:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800cdf6:	e7ed      	b.n	800cdd4 <vQueueWaitForMessageRestricted+0x18>
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800cdfe:	e7ef      	b.n	800cde0 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ce00:	4632      	mov	r2, r6
 800ce02:	4629      	mov	r1, r5
 800ce04:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800ce08:	f000 fc0a 	bl	800d620 <vTaskPlaceOnEventListRestricted>
 800ce0c:	e7ec      	b.n	800cde8 <vQueueWaitForMessageRestricted+0x2c>
	...

0800ce10 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ce10:	4b08      	ldr	r3, [pc, #32]	@ (800ce34 <prvResetNextTaskUnblockTime+0x24>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	b923      	cbnz	r3, 800ce22 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ce18:	4b07      	ldr	r3, [pc, #28]	@ (800ce38 <prvResetNextTaskUnblockTime+0x28>)
 800ce1a:	f04f 32ff 	mov.w	r2, #4294967295
 800ce1e:	601a      	str	r2, [r3, #0]
 800ce20:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce22:	4b04      	ldr	r3, [pc, #16]	@ (800ce34 <prvResetNextTaskUnblockTime+0x24>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	68db      	ldr	r3, [r3, #12]
 800ce28:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ce2a:	685a      	ldr	r2, [r3, #4]
 800ce2c:	4b02      	ldr	r3, [pc, #8]	@ (800ce38 <prvResetNextTaskUnblockTime+0x28>)
 800ce2e:	601a      	str	r2, [r3, #0]
	}
}
 800ce30:	4770      	bx	lr
 800ce32:	bf00      	nop
 800ce34:	24002790 	.word	0x24002790
 800ce38:	24002728 	.word	0x24002728

0800ce3c <prvInitialiseNewTask>:
{
 800ce3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce40:	4680      	mov	r8, r0
 800ce42:	460d      	mov	r5, r1
 800ce44:	4617      	mov	r7, r2
 800ce46:	4699      	mov	r9, r3
 800ce48:	9e08      	ldr	r6, [sp, #32]
 800ce4a:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 800ce4e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ce50:	0092      	lsls	r2, r2, #2
 800ce52:	21a5      	movs	r1, #165	@ 0xa5
 800ce54:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800ce56:	f009 fd03 	bl	8016860 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ce5a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ce5c:	f06f 4240 	mvn.w	r2, #3221225472	@ 0xc0000000
 800ce60:	443a      	add	r2, r7
 800ce62:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ce66:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 800ce6a:	2d00      	cmp	r5, #0
 800ce6c:	d042      	beq.n	800cef4 <prvInitialiseNewTask+0xb8>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ce6e:	f04f 0c00 	mov.w	ip, #0
 800ce72:	f1bc 0f0f 	cmp.w	ip, #15
 800ce76:	d809      	bhi.n	800ce8c <prvInitialiseNewTask+0x50>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ce78:	f815 300c 	ldrb.w	r3, [r5, ip]
 800ce7c:	eb04 020c 	add.w	r2, r4, ip
 800ce80:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 800ce84:	b113      	cbz	r3, 800ce8c <prvInitialiseNewTask+0x50>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ce86:	f10c 0c01 	add.w	ip, ip, #1
 800ce8a:	e7f2      	b.n	800ce72 <prvInitialiseNewTask+0x36>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ce92:	2e37      	cmp	r6, #55	@ 0x37
 800ce94:	d900      	bls.n	800ce98 <prvInitialiseNewTask+0x5c>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ce96:	2637      	movs	r6, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 800ce98:	62e6      	str	r6, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800ce9a:	64e6      	str	r6, [r4, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ce9c:	2500      	movs	r5, #0
 800ce9e:	6525      	str	r5, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cea0:	1d20      	adds	r0, r4, #4
 800cea2:	f7ff fa00 	bl	800c2a6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cea6:	f104 0018 	add.w	r0, r4, #24
 800ceaa:	f7ff f9fc 	bl	800c2a6 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ceae:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ceb0:	f1c6 0638 	rsb	r6, r6, #56	@ 0x38
 800ceb4:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ceb6:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800ceb8:	f8c4 50a0 	str.w	r5, [r4, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cebc:	f884 50a4 	strb.w	r5, [r4, #164]	@ 0xa4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cec0:	224c      	movs	r2, #76	@ 0x4c
 800cec2:	4629      	mov	r1, r5
 800cec4:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 800cec8:	f009 fcca 	bl	8016860 <memset>
 800cecc:	4b0b      	ldr	r3, [pc, #44]	@ (800cefc <prvInitialiseNewTask+0xc0>)
 800cece:	65a3      	str	r3, [r4, #88]	@ 0x58
 800ced0:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ced4:	65e2      	str	r2, [r4, #92]	@ 0x5c
 800ced6:	33d0      	adds	r3, #208	@ 0xd0
 800ced8:	6623      	str	r3, [r4, #96]	@ 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ceda:	464a      	mov	r2, r9
 800cedc:	4641      	mov	r1, r8
 800cede:	4638      	mov	r0, r7
 800cee0:	f000 ffc4 	bl	800de6c <pxPortInitialiseStack>
 800cee4:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800cee6:	f1ba 0f00 	cmp.w	sl, #0
 800ceea:	d001      	beq.n	800cef0 <prvInitialiseNewTask+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ceec:	f8ca 4000 	str.w	r4, [sl]
}
 800cef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cef4:	2300      	movs	r3, #0
 800cef6:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 800cefa:	e7ca      	b.n	800ce92 <prvInitialiseNewTask+0x56>
 800cefc:	240069a4 	.word	0x240069a4

0800cf00 <prvInitialiseTaskLists>:
{
 800cf00:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cf02:	2400      	movs	r4, #0
 800cf04:	e007      	b.n	800cf16 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cf06:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800cf0a:	0093      	lsls	r3, r2, #2
 800cf0c:	480e      	ldr	r0, [pc, #56]	@ (800cf48 <prvInitialiseTaskLists+0x48>)
 800cf0e:	4418      	add	r0, r3
 800cf10:	f7ff f9be 	bl	800c290 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cf14:	3401      	adds	r4, #1
 800cf16:	2c37      	cmp	r4, #55	@ 0x37
 800cf18:	d9f5      	bls.n	800cf06 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800cf1a:	4d0c      	ldr	r5, [pc, #48]	@ (800cf4c <prvInitialiseTaskLists+0x4c>)
 800cf1c:	4628      	mov	r0, r5
 800cf1e:	f7ff f9b7 	bl	800c290 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cf22:	4c0b      	ldr	r4, [pc, #44]	@ (800cf50 <prvInitialiseTaskLists+0x50>)
 800cf24:	4620      	mov	r0, r4
 800cf26:	f7ff f9b3 	bl	800c290 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cf2a:	480a      	ldr	r0, [pc, #40]	@ (800cf54 <prvInitialiseTaskLists+0x54>)
 800cf2c:	f7ff f9b0 	bl	800c290 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800cf30:	4809      	ldr	r0, [pc, #36]	@ (800cf58 <prvInitialiseTaskLists+0x58>)
 800cf32:	f7ff f9ad 	bl	800c290 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800cf36:	4809      	ldr	r0, [pc, #36]	@ (800cf5c <prvInitialiseTaskLists+0x5c>)
 800cf38:	f7ff f9aa 	bl	800c290 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800cf3c:	4b08      	ldr	r3, [pc, #32]	@ (800cf60 <prvInitialiseTaskLists+0x60>)
 800cf3e:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cf40:	4b08      	ldr	r3, [pc, #32]	@ (800cf64 <prvInitialiseTaskLists+0x64>)
 800cf42:	601c      	str	r4, [r3, #0]
}
 800cf44:	bd38      	pop	{r3, r4, r5, pc}
 800cf46:	bf00      	nop
 800cf48:	240027bc 	.word	0x240027bc
 800cf4c:	240027a8 	.word	0x240027a8
 800cf50:	24002794 	.word	0x24002794
 800cf54:	24002778 	.word	0x24002778
 800cf58:	24002764 	.word	0x24002764
 800cf5c:	2400274c 	.word	0x2400274c
 800cf60:	24002790 	.word	0x24002790
 800cf64:	2400278c 	.word	0x2400278c

0800cf68 <prvAddNewTaskToReadyList>:
{
 800cf68:	b510      	push	{r4, lr}
 800cf6a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800cf6c:	f000 ffaa 	bl	800dec4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800cf70:	4a22      	ldr	r2, [pc, #136]	@ (800cffc <prvAddNewTaskToReadyList+0x94>)
 800cf72:	6813      	ldr	r3, [r2, #0]
 800cf74:	3301      	adds	r3, #1
 800cf76:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cf78:	4b21      	ldr	r3, [pc, #132]	@ (800d000 <prvAddNewTaskToReadyList+0x98>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	b15b      	cbz	r3, 800cf96 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 800cf7e:	4b21      	ldr	r3, [pc, #132]	@ (800d004 <prvAddNewTaskToReadyList+0x9c>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	b96b      	cbnz	r3, 800cfa0 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cf84:	4b1e      	ldr	r3, [pc, #120]	@ (800d000 <prvAddNewTaskToReadyList+0x98>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf8a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800cf8c:	429a      	cmp	r2, r3
 800cf8e:	d807      	bhi.n	800cfa0 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 800cf90:	4b1b      	ldr	r3, [pc, #108]	@ (800d000 <prvAddNewTaskToReadyList+0x98>)
 800cf92:	601c      	str	r4, [r3, #0]
 800cf94:	e004      	b.n	800cfa0 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 800cf96:	4b1a      	ldr	r3, [pc, #104]	@ (800d000 <prvAddNewTaskToReadyList+0x98>)
 800cf98:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cf9a:	6813      	ldr	r3, [r2, #0]
 800cf9c:	2b01      	cmp	r3, #1
 800cf9e:	d029      	beq.n	800cff4 <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 800cfa0:	4a19      	ldr	r2, [pc, #100]	@ (800d008 <prvAddNewTaskToReadyList+0xa0>)
 800cfa2:	6813      	ldr	r3, [r2, #0]
 800cfa4:	3301      	adds	r3, #1
 800cfa6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cfa8:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800cfaa:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800cfac:	4b17      	ldr	r3, [pc, #92]	@ (800d00c <prvAddNewTaskToReadyList+0xa4>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	4298      	cmp	r0, r3
 800cfb2:	d901      	bls.n	800cfb8 <prvAddNewTaskToReadyList+0x50>
 800cfb4:	4b15      	ldr	r3, [pc, #84]	@ (800d00c <prvAddNewTaskToReadyList+0xa4>)
 800cfb6:	6018      	str	r0, [r3, #0]
 800cfb8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800cfbc:	1d21      	adds	r1, r4, #4
 800cfbe:	4b14      	ldr	r3, [pc, #80]	@ (800d010 <prvAddNewTaskToReadyList+0xa8>)
 800cfc0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cfc4:	f7ff f972 	bl	800c2ac <vListInsertEnd>
	taskEXIT_CRITICAL();
 800cfc8:	f000 ff9e 	bl	800df08 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800cfcc:	4b0d      	ldr	r3, [pc, #52]	@ (800d004 <prvAddNewTaskToReadyList+0x9c>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	b17b      	cbz	r3, 800cff2 <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cfd2:	4b0b      	ldr	r3, [pc, #44]	@ (800d000 <prvAddNewTaskToReadyList+0x98>)
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfd8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	d209      	bcs.n	800cff2 <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 800cfde:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cfe2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cfe6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800cfea:	f3bf 8f4f 	dsb	sy
 800cfee:	f3bf 8f6f 	isb	sy
}
 800cff2:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 800cff4:	f7ff ff84 	bl	800cf00 <prvInitialiseTaskLists>
 800cff8:	e7d2      	b.n	800cfa0 <prvAddNewTaskToReadyList+0x38>
 800cffa:	bf00      	nop
 800cffc:	24002748 	.word	0x24002748
 800d000:	24002c1c 	.word	0x24002c1c
 800d004:	2400273c 	.word	0x2400273c
 800d008:	2400272c 	.word	0x2400272c
 800d00c:	24002740 	.word	0x24002740
 800d010:	240027bc 	.word	0x240027bc

0800d014 <prvDeleteTCB>:
	{
 800d014:	b510      	push	{r4, lr}
 800d016:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d018:	3054      	adds	r0, #84	@ 0x54
 800d01a:	f009 fc59 	bl	80168d0 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d01e:	f894 30a5 	ldrb.w	r3, [r4, #165]	@ 0xa5
 800d022:	b163      	cbz	r3, 800d03e <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d024:	2b01      	cmp	r3, #1
 800d026:	d011      	beq.n	800d04c <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d028:	2b02      	cmp	r3, #2
 800d02a:	d00e      	beq.n	800d04a <prvDeleteTCB+0x36>
 800d02c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d030:	f383 8811 	msr	BASEPRI, r3
 800d034:	f3bf 8f6f 	isb	sy
 800d038:	f3bf 8f4f 	dsb	sy
 800d03c:	e7fe      	b.n	800d03c <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 800d03e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800d040:	f001 f97a 	bl	800e338 <vPortFree>
				vPortFree( pxTCB );
 800d044:	4620      	mov	r0, r4
 800d046:	f001 f977 	bl	800e338 <vPortFree>
	}
 800d04a:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 800d04c:	4620      	mov	r0, r4
 800d04e:	f001 f973 	bl	800e338 <vPortFree>
 800d052:	e7fa      	b.n	800d04a <prvDeleteTCB+0x36>

0800d054 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d054:	4b0f      	ldr	r3, [pc, #60]	@ (800d094 <prvCheckTasksWaitingTermination+0x40>)
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	b1d3      	cbz	r3, 800d090 <prvCheckTasksWaitingTermination+0x3c>
{
 800d05a:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 800d05c:	f000 ff32 	bl	800dec4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d060:	4b0d      	ldr	r3, [pc, #52]	@ (800d098 <prvCheckTasksWaitingTermination+0x44>)
 800d062:	68db      	ldr	r3, [r3, #12]
 800d064:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d066:	1d20      	adds	r0, r4, #4
 800d068:	f7ff f944 	bl	800c2f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d06c:	4a0b      	ldr	r2, [pc, #44]	@ (800d09c <prvCheckTasksWaitingTermination+0x48>)
 800d06e:	6813      	ldr	r3, [r2, #0]
 800d070:	3b01      	subs	r3, #1
 800d072:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d074:	4a07      	ldr	r2, [pc, #28]	@ (800d094 <prvCheckTasksWaitingTermination+0x40>)
 800d076:	6813      	ldr	r3, [r2, #0]
 800d078:	3b01      	subs	r3, #1
 800d07a:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 800d07c:	f000 ff44 	bl	800df08 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800d080:	4620      	mov	r0, r4
 800d082:	f7ff ffc7 	bl	800d014 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d086:	4b03      	ldr	r3, [pc, #12]	@ (800d094 <prvCheckTasksWaitingTermination+0x40>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d1e6      	bne.n	800d05c <prvCheckTasksWaitingTermination+0x8>
}
 800d08e:	bd10      	pop	{r4, pc}
 800d090:	4770      	bx	lr
 800d092:	bf00      	nop
 800d094:	24002760 	.word	0x24002760
 800d098:	24002764 	.word	0x24002764
 800d09c:	24002748 	.word	0x24002748

0800d0a0 <prvIdleTask>:
{
 800d0a0:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 800d0a2:	f7ff ffd7 	bl	800d054 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d0a6:	4b07      	ldr	r3, [pc, #28]	@ (800d0c4 <prvIdleTask+0x24>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	2b01      	cmp	r3, #1
 800d0ac:	d9f9      	bls.n	800d0a2 <prvIdleTask+0x2>
				taskYIELD();
 800d0ae:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d0b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d0b6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d0ba:	f3bf 8f4f 	dsb	sy
 800d0be:	f3bf 8f6f 	isb	sy
 800d0c2:	e7ee      	b.n	800d0a2 <prvIdleTask+0x2>
 800d0c4:	240027bc 	.word	0x240027bc

0800d0c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d0c8:	b570      	push	{r4, r5, r6, lr}
 800d0ca:	4604      	mov	r4, r0
 800d0cc:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d0ce:	4b19      	ldr	r3, [pc, #100]	@ (800d134 <prvAddCurrentTaskToDelayedList+0x6c>)
 800d0d0:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d0d2:	4b19      	ldr	r3, [pc, #100]	@ (800d138 <prvAddCurrentTaskToDelayedList+0x70>)
 800d0d4:	6818      	ldr	r0, [r3, #0]
 800d0d6:	3004      	adds	r0, #4
 800d0d8:	f7ff f90c 	bl	800c2f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d0dc:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d0e0:	bf14      	ite	ne
 800d0e2:	2300      	movne	r3, #0
 800d0e4:	2301      	moveq	r3, #1
 800d0e6:	2d00      	cmp	r5, #0
 800d0e8:	bf08      	it	eq
 800d0ea:	2300      	moveq	r3, #0
 800d0ec:	b96b      	cbnz	r3, 800d10a <prvAddCurrentTaskToDelayedList+0x42>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d0ee:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d0f0:	4b11      	ldr	r3, [pc, #68]	@ (800d138 <prvAddCurrentTaskToDelayedList+0x70>)
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800d0f6:	42a6      	cmp	r6, r4
 800d0f8:	d90e      	bls.n	800d118 <prvAddCurrentTaskToDelayedList+0x50>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d0fa:	4b10      	ldr	r3, [pc, #64]	@ (800d13c <prvAddCurrentTaskToDelayedList+0x74>)
 800d0fc:	6818      	ldr	r0, [r3, #0]
 800d0fe:	4b0e      	ldr	r3, [pc, #56]	@ (800d138 <prvAddCurrentTaskToDelayedList+0x70>)
 800d100:	6819      	ldr	r1, [r3, #0]
 800d102:	3104      	adds	r1, #4
 800d104:	f7ff f8dd 	bl	800c2c2 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d108:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d10a:	4b0b      	ldr	r3, [pc, #44]	@ (800d138 <prvAddCurrentTaskToDelayedList+0x70>)
 800d10c:	6819      	ldr	r1, [r3, #0]
 800d10e:	3104      	adds	r1, #4
 800d110:	480b      	ldr	r0, [pc, #44]	@ (800d140 <prvAddCurrentTaskToDelayedList+0x78>)
 800d112:	f7ff f8cb 	bl	800c2ac <vListInsertEnd>
 800d116:	e7f7      	b.n	800d108 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d118:	4b0a      	ldr	r3, [pc, #40]	@ (800d144 <prvAddCurrentTaskToDelayedList+0x7c>)
 800d11a:	6818      	ldr	r0, [r3, #0]
 800d11c:	4b06      	ldr	r3, [pc, #24]	@ (800d138 <prvAddCurrentTaskToDelayedList+0x70>)
 800d11e:	6819      	ldr	r1, [r3, #0]
 800d120:	3104      	adds	r1, #4
 800d122:	f7ff f8ce 	bl	800c2c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d126:	4b08      	ldr	r3, [pc, #32]	@ (800d148 <prvAddCurrentTaskToDelayedList+0x80>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	42a3      	cmp	r3, r4
 800d12c:	d9ec      	bls.n	800d108 <prvAddCurrentTaskToDelayedList+0x40>
					xNextTaskUnblockTime = xTimeToWake;
 800d12e:	4b06      	ldr	r3, [pc, #24]	@ (800d148 <prvAddCurrentTaskToDelayedList+0x80>)
 800d130:	601c      	str	r4, [r3, #0]
}
 800d132:	e7e9      	b.n	800d108 <prvAddCurrentTaskToDelayedList+0x40>
 800d134:	24002744 	.word	0x24002744
 800d138:	24002c1c 	.word	0x24002c1c
 800d13c:	2400278c 	.word	0x2400278c
 800d140:	2400274c 	.word	0x2400274c
 800d144:	24002790 	.word	0x24002790
 800d148:	24002728 	.word	0x24002728

0800d14c <xTaskCreateStatic>:
	{
 800d14c:	b530      	push	{r4, r5, lr}
 800d14e:	b087      	sub	sp, #28
 800d150:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 800d152:	b17c      	cbz	r4, 800d174 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d154:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800d156:	b1b5      	cbz	r5, 800d186 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 800d158:	25a8      	movs	r5, #168	@ 0xa8
 800d15a:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d15c:	9d04      	ldr	r5, [sp, #16]
 800d15e:	2da8      	cmp	r5, #168	@ 0xa8
 800d160:	d01a      	beq.n	800d198 <xTaskCreateStatic+0x4c>
 800d162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d166:	f383 8811 	msr	BASEPRI, r3
 800d16a:	f3bf 8f6f 	isb	sy
 800d16e:	f3bf 8f4f 	dsb	sy
 800d172:	e7fe      	b.n	800d172 <xTaskCreateStatic+0x26>
 800d174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d178:	f383 8811 	msr	BASEPRI, r3
 800d17c:	f3bf 8f6f 	isb	sy
 800d180:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 800d184:	e7fe      	b.n	800d184 <xTaskCreateStatic+0x38>
 800d186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d18a:	f383 8811 	msr	BASEPRI, r3
 800d18e:	f3bf 8f6f 	isb	sy
 800d192:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800d196:	e7fe      	b.n	800d196 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d198:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d19a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800d19c:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d19e:	2402      	movs	r4, #2
 800d1a0:	f885 40a5 	strb.w	r4, [r5, #165]	@ 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d1a4:	2400      	movs	r4, #0
 800d1a6:	9403      	str	r4, [sp, #12]
 800d1a8:	9502      	str	r5, [sp, #8]
 800d1aa:	ac05      	add	r4, sp, #20
 800d1ac:	9401      	str	r4, [sp, #4]
 800d1ae:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d1b0:	9400      	str	r4, [sp, #0]
 800d1b2:	f7ff fe43 	bl	800ce3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d1b6:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800d1b8:	f7ff fed6 	bl	800cf68 <prvAddNewTaskToReadyList>
	}
 800d1bc:	9805      	ldr	r0, [sp, #20]
 800d1be:	b007      	add	sp, #28
 800d1c0:	bd30      	pop	{r4, r5, pc}

0800d1c2 <xTaskCreate>:
	{
 800d1c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d1c6:	b085      	sub	sp, #20
 800d1c8:	4607      	mov	r7, r0
 800d1ca:	4688      	mov	r8, r1
 800d1cc:	4614      	mov	r4, r2
 800d1ce:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d1d0:	0090      	lsls	r0, r2, #2
 800d1d2:	f001 f82f 	bl	800e234 <pvPortMalloc>
			if( pxStack != NULL )
 800d1d6:	b308      	cbz	r0, 800d21c <xTaskCreate+0x5a>
 800d1d8:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d1da:	20a8      	movs	r0, #168	@ 0xa8
 800d1dc:	f001 f82a 	bl	800e234 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800d1e0:	4605      	mov	r5, r0
 800d1e2:	b1a8      	cbz	r0, 800d210 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 800d1e4:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	f880 30a5 	strb.w	r3, [r0, #165]	@ 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d1ee:	9303      	str	r3, [sp, #12]
 800d1f0:	9002      	str	r0, [sp, #8]
 800d1f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d1f4:	9301      	str	r3, [sp, #4]
 800d1f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d1f8:	9300      	str	r3, [sp, #0]
 800d1fa:	4633      	mov	r3, r6
 800d1fc:	4622      	mov	r2, r4
 800d1fe:	4641      	mov	r1, r8
 800d200:	4638      	mov	r0, r7
 800d202:	f7ff fe1b 	bl	800ce3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d206:	4628      	mov	r0, r5
 800d208:	f7ff feae 	bl	800cf68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d20c:	2001      	movs	r0, #1
 800d20e:	e007      	b.n	800d220 <xTaskCreate+0x5e>
					vPortFree( pxStack );
 800d210:	4648      	mov	r0, r9
 800d212:	f001 f891 	bl	800e338 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d216:	f04f 30ff 	mov.w	r0, #4294967295
 800d21a:	e001      	b.n	800d220 <xTaskCreate+0x5e>
 800d21c:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800d220:	b005      	add	sp, #20
 800d222:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800d228 <vTaskStartScheduler>:
{
 800d228:	b510      	push	{r4, lr}
 800d22a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d22c:	2400      	movs	r4, #0
 800d22e:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d230:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d232:	aa07      	add	r2, sp, #28
 800d234:	a906      	add	r1, sp, #24
 800d236:	a805      	add	r0, sp, #20
 800d238:	f7ff f812 	bl	800c260 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d23c:	9b05      	ldr	r3, [sp, #20]
 800d23e:	9302      	str	r3, [sp, #8]
 800d240:	9b06      	ldr	r3, [sp, #24]
 800d242:	9301      	str	r3, [sp, #4]
 800d244:	9400      	str	r4, [sp, #0]
 800d246:	4623      	mov	r3, r4
 800d248:	9a07      	ldr	r2, [sp, #28]
 800d24a:	491a      	ldr	r1, [pc, #104]	@ (800d2b4 <vTaskStartScheduler+0x8c>)
 800d24c:	481a      	ldr	r0, [pc, #104]	@ (800d2b8 <vTaskStartScheduler+0x90>)
 800d24e:	f7ff ff7d 	bl	800d14c <xTaskCreateStatic>
 800d252:	4b1a      	ldr	r3, [pc, #104]	@ (800d2bc <vTaskStartScheduler+0x94>)
 800d254:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 800d256:	b1e8      	cbz	r0, 800d294 <vTaskStartScheduler+0x6c>
			xReturn = xTimerCreateTimerTask();
 800d258:	f000 fc0a 	bl	800da70 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800d25c:	2801      	cmp	r0, #1
 800d25e:	d11a      	bne.n	800d296 <vTaskStartScheduler+0x6e>
 800d260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d264:	f383 8811 	msr	BASEPRI, r3
 800d268:	f3bf 8f6f 	isb	sy
 800d26c:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d270:	4b13      	ldr	r3, [pc, #76]	@ (800d2c0 <vTaskStartScheduler+0x98>)
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	3354      	adds	r3, #84	@ 0x54
 800d276:	4a13      	ldr	r2, [pc, #76]	@ (800d2c4 <vTaskStartScheduler+0x9c>)
 800d278:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800d27a:	4b13      	ldr	r3, [pc, #76]	@ (800d2c8 <vTaskStartScheduler+0xa0>)
 800d27c:	f04f 32ff 	mov.w	r2, #4294967295
 800d280:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d282:	4b12      	ldr	r3, [pc, #72]	@ (800d2cc <vTaskStartScheduler+0xa4>)
 800d284:	2201      	movs	r2, #1
 800d286:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d288:	4b11      	ldr	r3, [pc, #68]	@ (800d2d0 <vTaskStartScheduler+0xa8>)
 800d28a:	2200      	movs	r2, #0
 800d28c:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800d28e:	f000 feb3 	bl	800dff8 <xPortStartScheduler>
 800d292:	e003      	b.n	800d29c <vTaskStartScheduler+0x74>
			xReturn = pdFAIL;
 800d294:	2000      	movs	r0, #0
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d296:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d29a:	d001      	beq.n	800d2a0 <vTaskStartScheduler+0x78>
}
 800d29c:	b008      	add	sp, #32
 800d29e:	bd10      	pop	{r4, pc}
 800d2a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2a4:	f383 8811 	msr	BASEPRI, r3
 800d2a8:	f3bf 8f6f 	isb	sy
 800d2ac:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d2b0:	e7fe      	b.n	800d2b0 <vTaskStartScheduler+0x88>
 800d2b2:	bf00      	nop
 800d2b4:	08016d60 	.word	0x08016d60
 800d2b8:	0800d0a1 	.word	0x0800d0a1
 800d2bc:	24002724 	.word	0x24002724
 800d2c0:	24002c1c 	.word	0x24002c1c
 800d2c4:	24000014 	.word	0x24000014
 800d2c8:	24002728 	.word	0x24002728
 800d2cc:	2400273c 	.word	0x2400273c
 800d2d0:	24002744 	.word	0x24002744

0800d2d4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800d2d4:	4a02      	ldr	r2, [pc, #8]	@ (800d2e0 <vTaskSuspendAll+0xc>)
 800d2d6:	6813      	ldr	r3, [r2, #0]
 800d2d8:	3301      	adds	r3, #1
 800d2da:	6013      	str	r3, [r2, #0]
}
 800d2dc:	4770      	bx	lr
 800d2de:	bf00      	nop
 800d2e0:	24002720 	.word	0x24002720

0800d2e4 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800d2e4:	4b01      	ldr	r3, [pc, #4]	@ (800d2ec <xTaskGetTickCount+0x8>)
 800d2e6:	6818      	ldr	r0, [r3, #0]
}
 800d2e8:	4770      	bx	lr
 800d2ea:	bf00      	nop
 800d2ec:	24002744 	.word	0x24002744

0800d2f0 <xTaskIncrementTick>:
{
 800d2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d2f2:	4b3a      	ldr	r3, [pc, #232]	@ (800d3dc <xTaskIncrementTick+0xec>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d169      	bne.n	800d3ce <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d2fa:	4b39      	ldr	r3, [pc, #228]	@ (800d3e0 <xTaskIncrementTick+0xf0>)
 800d2fc:	681d      	ldr	r5, [r3, #0]
 800d2fe:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800d300:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d302:	b9c5      	cbnz	r5, 800d336 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800d304:	4b37      	ldr	r3, [pc, #220]	@ (800d3e4 <xTaskIncrementTick+0xf4>)
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	b143      	cbz	r3, 800d31e <xTaskIncrementTick+0x2e>
 800d30c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d310:	f383 8811 	msr	BASEPRI, r3
 800d314:	f3bf 8f6f 	isb	sy
 800d318:	f3bf 8f4f 	dsb	sy
 800d31c:	e7fe      	b.n	800d31c <xTaskIncrementTick+0x2c>
 800d31e:	4a31      	ldr	r2, [pc, #196]	@ (800d3e4 <xTaskIncrementTick+0xf4>)
 800d320:	6811      	ldr	r1, [r2, #0]
 800d322:	4b31      	ldr	r3, [pc, #196]	@ (800d3e8 <xTaskIncrementTick+0xf8>)
 800d324:	6818      	ldr	r0, [r3, #0]
 800d326:	6010      	str	r0, [r2, #0]
 800d328:	6019      	str	r1, [r3, #0]
 800d32a:	4a30      	ldr	r2, [pc, #192]	@ (800d3ec <xTaskIncrementTick+0xfc>)
 800d32c:	6813      	ldr	r3, [r2, #0]
 800d32e:	3301      	adds	r3, #1
 800d330:	6013      	str	r3, [r2, #0]
 800d332:	f7ff fd6d 	bl	800ce10 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d336:	4b2e      	ldr	r3, [pc, #184]	@ (800d3f0 <xTaskIncrementTick+0x100>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	42ab      	cmp	r3, r5
 800d33c:	d93d      	bls.n	800d3ba <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 800d33e:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d340:	4b2c      	ldr	r3, [pc, #176]	@ (800d3f4 <xTaskIncrementTick+0x104>)
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d346:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d34a:	009a      	lsls	r2, r3, #2
 800d34c:	4b2a      	ldr	r3, [pc, #168]	@ (800d3f8 <xTaskIncrementTick+0x108>)
 800d34e:	589b      	ldr	r3, [r3, r2]
 800d350:	2b01      	cmp	r3, #1
 800d352:	d900      	bls.n	800d356 <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 800d354:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 800d356:	4b29      	ldr	r3, [pc, #164]	@ (800d3fc <xTaskIncrementTick+0x10c>)
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d03c      	beq.n	800d3d8 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 800d35e:	2701      	movs	r7, #1
	return xSwitchRequired;
 800d360:	e03a      	b.n	800d3d8 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 800d362:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d364:	4b1f      	ldr	r3, [pc, #124]	@ (800d3e4 <xTaskIncrementTick+0xf4>)
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	b343      	cbz	r3, 800d3be <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d36c:	4b1d      	ldr	r3, [pc, #116]	@ (800d3e4 <xTaskIncrementTick+0xf4>)
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	68db      	ldr	r3, [r3, #12]
 800d372:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d374:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 800d376:	429d      	cmp	r5, r3
 800d378:	d326      	bcc.n	800d3c8 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d37a:	1d26      	adds	r6, r4, #4
 800d37c:	4630      	mov	r0, r6
 800d37e:	f7fe ffb9 	bl	800c2f4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d382:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800d384:	b11b      	cbz	r3, 800d38e <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d386:	f104 0018 	add.w	r0, r4, #24
 800d38a:	f7fe ffb3 	bl	800c2f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d38e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800d390:	4a1b      	ldr	r2, [pc, #108]	@ (800d400 <xTaskIncrementTick+0x110>)
 800d392:	6812      	ldr	r2, [r2, #0]
 800d394:	4293      	cmp	r3, r2
 800d396:	d901      	bls.n	800d39c <xTaskIncrementTick+0xac>
 800d398:	4a19      	ldr	r2, [pc, #100]	@ (800d400 <xTaskIncrementTick+0x110>)
 800d39a:	6013      	str	r3, [r2, #0]
 800d39c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d3a0:	009a      	lsls	r2, r3, #2
 800d3a2:	4631      	mov	r1, r6
 800d3a4:	4814      	ldr	r0, [pc, #80]	@ (800d3f8 <xTaskIncrementTick+0x108>)
 800d3a6:	4410      	add	r0, r2
 800d3a8:	f7fe ff80 	bl	800c2ac <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d3ac:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d3ae:	4b11      	ldr	r3, [pc, #68]	@ (800d3f4 <xTaskIncrementTick+0x104>)
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3b4:	429a      	cmp	r2, r3
 800d3b6:	d2d4      	bcs.n	800d362 <xTaskIncrementTick+0x72>
 800d3b8:	e7d4      	b.n	800d364 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 800d3ba:	2700      	movs	r7, #0
 800d3bc:	e7d2      	b.n	800d364 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d3be:	4b0c      	ldr	r3, [pc, #48]	@ (800d3f0 <xTaskIncrementTick+0x100>)
 800d3c0:	f04f 32ff 	mov.w	r2, #4294967295
 800d3c4:	601a      	str	r2, [r3, #0]
					break;
 800d3c6:	e7bb      	b.n	800d340 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 800d3c8:	4a09      	ldr	r2, [pc, #36]	@ (800d3f0 <xTaskIncrementTick+0x100>)
 800d3ca:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d3cc:	e7b8      	b.n	800d340 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 800d3ce:	4a0d      	ldr	r2, [pc, #52]	@ (800d404 <xTaskIncrementTick+0x114>)
 800d3d0:	6813      	ldr	r3, [r2, #0]
 800d3d2:	3301      	adds	r3, #1
 800d3d4:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800d3d6:	2700      	movs	r7, #0
}
 800d3d8:	4638      	mov	r0, r7
 800d3da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3dc:	24002720 	.word	0x24002720
 800d3e0:	24002744 	.word	0x24002744
 800d3e4:	24002790 	.word	0x24002790
 800d3e8:	2400278c 	.word	0x2400278c
 800d3ec:	24002730 	.word	0x24002730
 800d3f0:	24002728 	.word	0x24002728
 800d3f4:	24002c1c 	.word	0x24002c1c
 800d3f8:	240027bc 	.word	0x240027bc
 800d3fc:	24002734 	.word	0x24002734
 800d400:	24002740 	.word	0x24002740
 800d404:	24002738 	.word	0x24002738

0800d408 <xTaskResumeAll>:
{
 800d408:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 800d40a:	4b35      	ldr	r3, [pc, #212]	@ (800d4e0 <xTaskResumeAll+0xd8>)
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	b943      	cbnz	r3, 800d422 <xTaskResumeAll+0x1a>
 800d410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d414:	f383 8811 	msr	BASEPRI, r3
 800d418:	f3bf 8f6f 	isb	sy
 800d41c:	f3bf 8f4f 	dsb	sy
 800d420:	e7fe      	b.n	800d420 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800d422:	f000 fd4f 	bl	800dec4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800d426:	4b2e      	ldr	r3, [pc, #184]	@ (800d4e0 <xTaskResumeAll+0xd8>)
 800d428:	681a      	ldr	r2, [r3, #0]
 800d42a:	3a01      	subs	r2, #1
 800d42c:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d14f      	bne.n	800d4d4 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d434:	4b2b      	ldr	r3, [pc, #172]	@ (800d4e4 <xTaskResumeAll+0xdc>)
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	b90b      	cbnz	r3, 800d43e <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800d43a:	2400      	movs	r4, #0
 800d43c:	e04b      	b.n	800d4d6 <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 800d43e:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d440:	4b29      	ldr	r3, [pc, #164]	@ (800d4e8 <xTaskResumeAll+0xe0>)
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	b31b      	cbz	r3, 800d48e <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d446:	4b28      	ldr	r3, [pc, #160]	@ (800d4e8 <xTaskResumeAll+0xe0>)
 800d448:	68db      	ldr	r3, [r3, #12]
 800d44a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d44c:	f104 0018 	add.w	r0, r4, #24
 800d450:	f7fe ff50 	bl	800c2f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d454:	1d25      	adds	r5, r4, #4
 800d456:	4628      	mov	r0, r5
 800d458:	f7fe ff4c 	bl	800c2f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d45c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800d45e:	4b23      	ldr	r3, [pc, #140]	@ (800d4ec <xTaskResumeAll+0xe4>)
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	4298      	cmp	r0, r3
 800d464:	d901      	bls.n	800d46a <xTaskResumeAll+0x62>
 800d466:	4b21      	ldr	r3, [pc, #132]	@ (800d4ec <xTaskResumeAll+0xe4>)
 800d468:	6018      	str	r0, [r3, #0]
 800d46a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d46e:	4629      	mov	r1, r5
 800d470:	4b1f      	ldr	r3, [pc, #124]	@ (800d4f0 <xTaskResumeAll+0xe8>)
 800d472:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d476:	f7fe ff19 	bl	800c2ac <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d47a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d47c:	4b1d      	ldr	r3, [pc, #116]	@ (800d4f4 <xTaskResumeAll+0xec>)
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d482:	429a      	cmp	r2, r3
 800d484:	d3dc      	bcc.n	800d440 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 800d486:	4b1c      	ldr	r3, [pc, #112]	@ (800d4f8 <xTaskResumeAll+0xf0>)
 800d488:	2201      	movs	r2, #1
 800d48a:	601a      	str	r2, [r3, #0]
 800d48c:	e7d8      	b.n	800d440 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 800d48e:	b10c      	cbz	r4, 800d494 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 800d490:	f7ff fcbe 	bl	800ce10 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d494:	4b19      	ldr	r3, [pc, #100]	@ (800d4fc <xTaskResumeAll+0xf4>)
 800d496:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800d498:	b984      	cbnz	r4, 800d4bc <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 800d49a:	4b17      	ldr	r3, [pc, #92]	@ (800d4f8 <xTaskResumeAll+0xf0>)
 800d49c:	681c      	ldr	r4, [r3, #0]
 800d49e:	b1d4      	cbz	r4, 800d4d6 <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 800d4a0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d4a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d4a8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d4ac:	f3bf 8f4f 	dsb	sy
 800d4b0:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800d4b4:	2401      	movs	r4, #1
 800d4b6:	e00e      	b.n	800d4d6 <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d4b8:	3c01      	subs	r4, #1
 800d4ba:	d007      	beq.n	800d4cc <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 800d4bc:	f7ff ff18 	bl	800d2f0 <xTaskIncrementTick>
 800d4c0:	2800      	cmp	r0, #0
 800d4c2:	d0f9      	beq.n	800d4b8 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 800d4c4:	4b0c      	ldr	r3, [pc, #48]	@ (800d4f8 <xTaskResumeAll+0xf0>)
 800d4c6:	2201      	movs	r2, #1
 800d4c8:	601a      	str	r2, [r3, #0]
 800d4ca:	e7f5      	b.n	800d4b8 <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 800d4cc:	4b0b      	ldr	r3, [pc, #44]	@ (800d4fc <xTaskResumeAll+0xf4>)
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	601a      	str	r2, [r3, #0]
 800d4d2:	e7e2      	b.n	800d49a <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 800d4d4:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800d4d6:	f000 fd17 	bl	800df08 <vPortExitCritical>
}
 800d4da:	4620      	mov	r0, r4
 800d4dc:	bd38      	pop	{r3, r4, r5, pc}
 800d4de:	bf00      	nop
 800d4e0:	24002720 	.word	0x24002720
 800d4e4:	24002748 	.word	0x24002748
 800d4e8:	24002778 	.word	0x24002778
 800d4ec:	24002740 	.word	0x24002740
 800d4f0:	240027bc 	.word	0x240027bc
 800d4f4:	24002c1c 	.word	0x24002c1c
 800d4f8:	24002734 	.word	0x24002734
 800d4fc:	24002738 	.word	0x24002738

0800d500 <vTaskDelay>:
	{
 800d500:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d502:	b1a8      	cbz	r0, 800d530 <vTaskDelay+0x30>
 800d504:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 800d506:	4b10      	ldr	r3, [pc, #64]	@ (800d548 <vTaskDelay+0x48>)
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	b143      	cbz	r3, 800d51e <vTaskDelay+0x1e>
 800d50c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d510:	f383 8811 	msr	BASEPRI, r3
 800d514:	f3bf 8f6f 	isb	sy
 800d518:	f3bf 8f4f 	dsb	sy
 800d51c:	e7fe      	b.n	800d51c <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800d51e:	f7ff fed9 	bl	800d2d4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d522:	2100      	movs	r1, #0
 800d524:	4620      	mov	r0, r4
 800d526:	f7ff fdcf 	bl	800d0c8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800d52a:	f7ff ff6d 	bl	800d408 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800d52e:	b948      	cbnz	r0, 800d544 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 800d530:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d534:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d538:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d53c:	f3bf 8f4f 	dsb	sy
 800d540:	f3bf 8f6f 	isb	sy
	}
 800d544:	bd10      	pop	{r4, pc}
 800d546:	bf00      	nop
 800d548:	24002720 	.word	0x24002720

0800d54c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d54c:	4b22      	ldr	r3, [pc, #136]	@ (800d5d8 <vTaskSwitchContext+0x8c>)
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	b11b      	cbz	r3, 800d55a <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800d552:	4b22      	ldr	r3, [pc, #136]	@ (800d5dc <vTaskSwitchContext+0x90>)
 800d554:	2201      	movs	r2, #1
 800d556:	601a      	str	r2, [r3, #0]
 800d558:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800d55a:	4b20      	ldr	r3, [pc, #128]	@ (800d5dc <vTaskSwitchContext+0x90>)
 800d55c:	2200      	movs	r2, #0
 800d55e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d560:	4b1f      	ldr	r3, [pc, #124]	@ (800d5e0 <vTaskSwitchContext+0x94>)
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800d568:	008a      	lsls	r2, r1, #2
 800d56a:	491e      	ldr	r1, [pc, #120]	@ (800d5e4 <vTaskSwitchContext+0x98>)
 800d56c:	588a      	ldr	r2, [r1, r2]
 800d56e:	b95a      	cbnz	r2, 800d588 <vTaskSwitchContext+0x3c>
 800d570:	b10b      	cbz	r3, 800d576 <vTaskSwitchContext+0x2a>
 800d572:	3b01      	subs	r3, #1
 800d574:	e7f6      	b.n	800d564 <vTaskSwitchContext+0x18>
 800d576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d57a:	f383 8811 	msr	BASEPRI, r3
 800d57e:	f3bf 8f6f 	isb	sy
 800d582:	f3bf 8f4f 	dsb	sy
 800d586:	e7fe      	b.n	800d586 <vTaskSwitchContext+0x3a>
 800d588:	4608      	mov	r0, r1
 800d58a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800d58e:	008a      	lsls	r2, r1, #2
 800d590:	4402      	add	r2, r0
 800d592:	6851      	ldr	r1, [r2, #4]
 800d594:	6849      	ldr	r1, [r1, #4]
 800d596:	6051      	str	r1, [r2, #4]
 800d598:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 800d59c:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800d5a0:	3208      	adds	r2, #8
 800d5a2:	4402      	add	r2, r0
 800d5a4:	4291      	cmp	r1, r2
 800d5a6:	d00f      	beq.n	800d5c8 <vTaskSwitchContext+0x7c>
 800d5a8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800d5ac:	0091      	lsls	r1, r2, #2
 800d5ae:	4a0d      	ldr	r2, [pc, #52]	@ (800d5e4 <vTaskSwitchContext+0x98>)
 800d5b0:	440a      	add	r2, r1
 800d5b2:	6852      	ldr	r2, [r2, #4]
 800d5b4:	68d1      	ldr	r1, [r2, #12]
 800d5b6:	4a0c      	ldr	r2, [pc, #48]	@ (800d5e8 <vTaskSwitchContext+0x9c>)
 800d5b8:	6011      	str	r1, [r2, #0]
 800d5ba:	4909      	ldr	r1, [pc, #36]	@ (800d5e0 <vTaskSwitchContext+0x94>)
 800d5bc:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d5be:	6813      	ldr	r3, [r2, #0]
 800d5c0:	3354      	adds	r3, #84	@ 0x54
 800d5c2:	4a0a      	ldr	r2, [pc, #40]	@ (800d5ec <vTaskSwitchContext+0xa0>)
 800d5c4:	6013      	str	r3, [r2, #0]
}
 800d5c6:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5c8:	6848      	ldr	r0, [r1, #4]
 800d5ca:	4662      	mov	r2, ip
 800d5cc:	0091      	lsls	r1, r2, #2
 800d5ce:	4a05      	ldr	r2, [pc, #20]	@ (800d5e4 <vTaskSwitchContext+0x98>)
 800d5d0:	440a      	add	r2, r1
 800d5d2:	6050      	str	r0, [r2, #4]
 800d5d4:	e7e8      	b.n	800d5a8 <vTaskSwitchContext+0x5c>
 800d5d6:	bf00      	nop
 800d5d8:	24002720 	.word	0x24002720
 800d5dc:	24002734 	.word	0x24002734
 800d5e0:	24002740 	.word	0x24002740
 800d5e4:	240027bc 	.word	0x240027bc
 800d5e8:	24002c1c 	.word	0x24002c1c
 800d5ec:	24000014 	.word	0x24000014

0800d5f0 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800d5f0:	b158      	cbz	r0, 800d60a <vTaskPlaceOnEventList+0x1a>
{
 800d5f2:	b510      	push	{r4, lr}
 800d5f4:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d5f6:	4a09      	ldr	r2, [pc, #36]	@ (800d61c <vTaskPlaceOnEventList+0x2c>)
 800d5f8:	6811      	ldr	r1, [r2, #0]
 800d5fa:	3118      	adds	r1, #24
 800d5fc:	f7fe fe61 	bl	800c2c2 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d600:	2101      	movs	r1, #1
 800d602:	4620      	mov	r0, r4
 800d604:	f7ff fd60 	bl	800d0c8 <prvAddCurrentTaskToDelayedList>
}
 800d608:	bd10      	pop	{r4, pc}
 800d60a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d60e:	f383 8811 	msr	BASEPRI, r3
 800d612:	f3bf 8f6f 	isb	sy
 800d616:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 800d61a:	e7fe      	b.n	800d61a <vTaskPlaceOnEventList+0x2a>
 800d61c:	24002c1c 	.word	0x24002c1c

0800d620 <vTaskPlaceOnEventListRestricted>:
	{
 800d620:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800d622:	b170      	cbz	r0, 800d642 <vTaskPlaceOnEventListRestricted+0x22>
 800d624:	460d      	mov	r5, r1
 800d626:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d628:	4a0a      	ldr	r2, [pc, #40]	@ (800d654 <vTaskPlaceOnEventListRestricted+0x34>)
 800d62a:	6811      	ldr	r1, [r2, #0]
 800d62c:	3118      	adds	r1, #24
 800d62e:	f7fe fe3d 	bl	800c2ac <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 800d632:	b10c      	cbz	r4, 800d638 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 800d634:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d638:	4621      	mov	r1, r4
 800d63a:	4628      	mov	r0, r5
 800d63c:	f7ff fd44 	bl	800d0c8 <prvAddCurrentTaskToDelayedList>
	}
 800d640:	bd38      	pop	{r3, r4, r5, pc}
 800d642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d646:	f383 8811 	msr	BASEPRI, r3
 800d64a:	f3bf 8f6f 	isb	sy
 800d64e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 800d652:	e7fe      	b.n	800d652 <vTaskPlaceOnEventListRestricted+0x32>
 800d654:	24002c1c 	.word	0x24002c1c

0800d658 <xTaskRemoveFromEventList>:
{
 800d658:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d65a:	68c3      	ldr	r3, [r0, #12]
 800d65c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800d65e:	b324      	cbz	r4, 800d6aa <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d660:	f104 0518 	add.w	r5, r4, #24
 800d664:	4628      	mov	r0, r5
 800d666:	f7fe fe45 	bl	800c2f4 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d66a:	4b18      	ldr	r3, [pc, #96]	@ (800d6cc <xTaskRemoveFromEventList+0x74>)
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	bb2b      	cbnz	r3, 800d6bc <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d670:	1d25      	adds	r5, r4, #4
 800d672:	4628      	mov	r0, r5
 800d674:	f7fe fe3e 	bl	800c2f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d678:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800d67a:	4b15      	ldr	r3, [pc, #84]	@ (800d6d0 <xTaskRemoveFromEventList+0x78>)
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	4298      	cmp	r0, r3
 800d680:	d901      	bls.n	800d686 <xTaskRemoveFromEventList+0x2e>
 800d682:	4b13      	ldr	r3, [pc, #76]	@ (800d6d0 <xTaskRemoveFromEventList+0x78>)
 800d684:	6018      	str	r0, [r3, #0]
 800d686:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d68a:	4629      	mov	r1, r5
 800d68c:	4b11      	ldr	r3, [pc, #68]	@ (800d6d4 <xTaskRemoveFromEventList+0x7c>)
 800d68e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d692:	f7fe fe0b 	bl	800c2ac <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d696:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d698:	4b0f      	ldr	r3, [pc, #60]	@ (800d6d8 <xTaskRemoveFromEventList+0x80>)
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d69e:	429a      	cmp	r2, r3
 800d6a0:	d911      	bls.n	800d6c6 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 800d6a2:	2001      	movs	r0, #1
 800d6a4:	4b0d      	ldr	r3, [pc, #52]	@ (800d6dc <xTaskRemoveFromEventList+0x84>)
 800d6a6:	6018      	str	r0, [r3, #0]
}
 800d6a8:	bd38      	pop	{r3, r4, r5, pc}
 800d6aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6ae:	f383 8811 	msr	BASEPRI, r3
 800d6b2:	f3bf 8f6f 	isb	sy
 800d6b6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800d6ba:	e7fe      	b.n	800d6ba <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d6bc:	4629      	mov	r1, r5
 800d6be:	4808      	ldr	r0, [pc, #32]	@ (800d6e0 <xTaskRemoveFromEventList+0x88>)
 800d6c0:	f7fe fdf4 	bl	800c2ac <vListInsertEnd>
 800d6c4:	e7e7      	b.n	800d696 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 800d6c6:	2000      	movs	r0, #0
	return xReturn;
 800d6c8:	e7ee      	b.n	800d6a8 <xTaskRemoveFromEventList+0x50>
 800d6ca:	bf00      	nop
 800d6cc:	24002720 	.word	0x24002720
 800d6d0:	24002740 	.word	0x24002740
 800d6d4:	240027bc 	.word	0x240027bc
 800d6d8:	24002c1c 	.word	0x24002c1c
 800d6dc:	24002734 	.word	0x24002734
 800d6e0:	24002778 	.word	0x24002778

0800d6e4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d6e4:	4b03      	ldr	r3, [pc, #12]	@ (800d6f4 <vTaskInternalSetTimeOutState+0x10>)
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d6ea:	4b03      	ldr	r3, [pc, #12]	@ (800d6f8 <vTaskInternalSetTimeOutState+0x14>)
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	6043      	str	r3, [r0, #4]
}
 800d6f0:	4770      	bx	lr
 800d6f2:	bf00      	nop
 800d6f4:	24002730 	.word	0x24002730
 800d6f8:	24002744 	.word	0x24002744

0800d6fc <xTaskCheckForTimeOut>:
{
 800d6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800d6fe:	b1c8      	cbz	r0, 800d734 <xTaskCheckForTimeOut+0x38>
 800d700:	460c      	mov	r4, r1
 800d702:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 800d704:	b1f9      	cbz	r1, 800d746 <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 800d706:	f000 fbdd 	bl	800dec4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800d70a:	4b1b      	ldr	r3, [pc, #108]	@ (800d778 <xTaskCheckForTimeOut+0x7c>)
 800d70c:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d70e:	686b      	ldr	r3, [r5, #4]
 800d710:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 800d712:	6822      	ldr	r2, [r4, #0]
 800d714:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d718:	d026      	beq.n	800d768 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d71a:	4e18      	ldr	r6, [pc, #96]	@ (800d77c <xTaskCheckForTimeOut+0x80>)
 800d71c:	6836      	ldr	r6, [r6, #0]
 800d71e:	682f      	ldr	r7, [r5, #0]
 800d720:	42b7      	cmp	r7, r6
 800d722:	d001      	beq.n	800d728 <xTaskCheckForTimeOut+0x2c>
 800d724:	428b      	cmp	r3, r1
 800d726:	d924      	bls.n	800d772 <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d728:	4282      	cmp	r2, r0
 800d72a:	d815      	bhi.n	800d758 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 800d72c:	2300      	movs	r3, #0
 800d72e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800d730:	2401      	movs	r4, #1
 800d732:	e01a      	b.n	800d76a <xTaskCheckForTimeOut+0x6e>
 800d734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d738:	f383 8811 	msr	BASEPRI, r3
 800d73c:	f3bf 8f6f 	isb	sy
 800d740:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 800d744:	e7fe      	b.n	800d744 <xTaskCheckForTimeOut+0x48>
 800d746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d74a:	f383 8811 	msr	BASEPRI, r3
 800d74e:	f3bf 8f6f 	isb	sy
 800d752:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 800d756:	e7fe      	b.n	800d756 <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 800d758:	1a5b      	subs	r3, r3, r1
 800d75a:	4413      	add	r3, r2
 800d75c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d75e:	4628      	mov	r0, r5
 800d760:	f7ff ffc0 	bl	800d6e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d764:	2400      	movs	r4, #0
 800d766:	e000      	b.n	800d76a <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 800d768:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800d76a:	f000 fbcd 	bl	800df08 <vPortExitCritical>
}
 800d76e:	4620      	mov	r0, r4
 800d770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 800d772:	2401      	movs	r4, #1
 800d774:	e7f9      	b.n	800d76a <xTaskCheckForTimeOut+0x6e>
 800d776:	bf00      	nop
 800d778:	24002744 	.word	0x24002744
 800d77c:	24002730 	.word	0x24002730

0800d780 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800d780:	4b01      	ldr	r3, [pc, #4]	@ (800d788 <vTaskMissedYield+0x8>)
 800d782:	2201      	movs	r2, #1
 800d784:	601a      	str	r2, [r3, #0]
}
 800d786:	4770      	bx	lr
 800d788:	24002734 	.word	0x24002734

0800d78c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800d78c:	4b05      	ldr	r3, [pc, #20]	@ (800d7a4 <xTaskGetSchedulerState+0x18>)
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	b133      	cbz	r3, 800d7a0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d792:	4b05      	ldr	r3, [pc, #20]	@ (800d7a8 <xTaskGetSchedulerState+0x1c>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	b10b      	cbz	r3, 800d79c <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 800d798:	2000      	movs	r0, #0
	}
 800d79a:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 800d79c:	2002      	movs	r0, #2
 800d79e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d7a0:	2001      	movs	r0, #1
 800d7a2:	4770      	bx	lr
 800d7a4:	2400273c 	.word	0x2400273c
 800d7a8:	24002720 	.word	0x24002720

0800d7ac <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 800d7ac:	2800      	cmp	r0, #0
 800d7ae:	d03e      	beq.n	800d82e <xTaskPriorityInherit+0x82>
	{
 800d7b0:	b538      	push	{r3, r4, r5, lr}
 800d7b2:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d7b4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800d7b6:	4a20      	ldr	r2, [pc, #128]	@ (800d838 <xTaskPriorityInherit+0x8c>)
 800d7b8:	6812      	ldr	r2, [r2, #0]
 800d7ba:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800d7bc:	4293      	cmp	r3, r2
 800d7be:	d22e      	bcs.n	800d81e <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d7c0:	6982      	ldr	r2, [r0, #24]
 800d7c2:	2a00      	cmp	r2, #0
 800d7c4:	db05      	blt.n	800d7d2 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d7c6:	4a1c      	ldr	r2, [pc, #112]	@ (800d838 <xTaskPriorityInherit+0x8c>)
 800d7c8:	6812      	ldr	r2, [r2, #0]
 800d7ca:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800d7cc:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800d7d0:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d7d2:	6961      	ldr	r1, [r4, #20]
 800d7d4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d7d8:	4a18      	ldr	r2, [pc, #96]	@ (800d83c <xTaskPriorityInherit+0x90>)
 800d7da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d7de:	4299      	cmp	r1, r3
 800d7e0:	d005      	beq.n	800d7ee <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d7e2:	4b15      	ldr	r3, [pc, #84]	@ (800d838 <xTaskPriorityInherit+0x8c>)
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
				xReturn = pdTRUE;
 800d7ea:	2001      	movs	r0, #1
	}
 800d7ec:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d7ee:	1d25      	adds	r5, r4, #4
 800d7f0:	4628      	mov	r0, r5
 800d7f2:	f7fe fd7f 	bl	800c2f4 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d7f6:	4b10      	ldr	r3, [pc, #64]	@ (800d838 <xTaskPriorityInherit+0x8c>)
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800d7fc:	62e0      	str	r0, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d7fe:	4b10      	ldr	r3, [pc, #64]	@ (800d840 <xTaskPriorityInherit+0x94>)
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	4298      	cmp	r0, r3
 800d804:	d901      	bls.n	800d80a <xTaskPriorityInherit+0x5e>
 800d806:	4b0e      	ldr	r3, [pc, #56]	@ (800d840 <xTaskPriorityInherit+0x94>)
 800d808:	6018      	str	r0, [r3, #0]
 800d80a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d80e:	4629      	mov	r1, r5
 800d810:	4b0a      	ldr	r3, [pc, #40]	@ (800d83c <xTaskPriorityInherit+0x90>)
 800d812:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d816:	f7fe fd49 	bl	800c2ac <vListInsertEnd>
				xReturn = pdTRUE;
 800d81a:	2001      	movs	r0, #1
 800d81c:	e7e6      	b.n	800d7ec <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d81e:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800d820:	4b05      	ldr	r3, [pc, #20]	@ (800d838 <xTaskPriorityInherit+0x8c>)
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d826:	429a      	cmp	r2, r3
 800d828:	d303      	bcc.n	800d832 <xTaskPriorityInherit+0x86>
	BaseType_t xReturn = pdFALSE;
 800d82a:	2000      	movs	r0, #0
 800d82c:	e7de      	b.n	800d7ec <xTaskPriorityInherit+0x40>
 800d82e:	2000      	movs	r0, #0
	}
 800d830:	4770      	bx	lr
					xReturn = pdTRUE;
 800d832:	2001      	movs	r0, #1
		return xReturn;
 800d834:	e7da      	b.n	800d7ec <xTaskPriorityInherit+0x40>
 800d836:	bf00      	nop
 800d838:	24002c1c 	.word	0x24002c1c
 800d83c:	240027bc 	.word	0x240027bc
 800d840:	24002740 	.word	0x24002740

0800d844 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800d844:	2800      	cmp	r0, #0
 800d846:	d03b      	beq.n	800d8c0 <xTaskPriorityDisinherit+0x7c>
	{
 800d848:	b538      	push	{r3, r4, r5, lr}
 800d84a:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 800d84c:	4b1e      	ldr	r3, [pc, #120]	@ (800d8c8 <xTaskPriorityDisinherit+0x84>)
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	4283      	cmp	r3, r0
 800d852:	d008      	beq.n	800d866 <xTaskPriorityDisinherit+0x22>
 800d854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d858:	f383 8811 	msr	BASEPRI, r3
 800d85c:	f3bf 8f6f 	isb	sy
 800d860:	f3bf 8f4f 	dsb	sy
 800d864:	e7fe      	b.n	800d864 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800d866:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800d868:	b943      	cbnz	r3, 800d87c <xTaskPriorityDisinherit+0x38>
 800d86a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d86e:	f383 8811 	msr	BASEPRI, r3
 800d872:	f3bf 8f6f 	isb	sy
 800d876:	f3bf 8f4f 	dsb	sy
 800d87a:	e7fe      	b.n	800d87a <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 800d87c:	3b01      	subs	r3, #1
 800d87e:	6503      	str	r3, [r0, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d880:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800d882:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800d884:	4291      	cmp	r1, r2
 800d886:	d01d      	beq.n	800d8c4 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d888:	b10b      	cbz	r3, 800d88e <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800d88a:	2000      	movs	r0, #0
	}
 800d88c:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d88e:	1d05      	adds	r5, r0, #4
 800d890:	4628      	mov	r0, r5
 800d892:	f7fe fd2f 	bl	800c2f4 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d896:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800d898:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d89a:	f1c0 0338 	rsb	r3, r0, #56	@ 0x38
 800d89e:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800d8a0:	4b0a      	ldr	r3, [pc, #40]	@ (800d8cc <xTaskPriorityDisinherit+0x88>)
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	4298      	cmp	r0, r3
 800d8a6:	d901      	bls.n	800d8ac <xTaskPriorityDisinherit+0x68>
 800d8a8:	4b08      	ldr	r3, [pc, #32]	@ (800d8cc <xTaskPriorityDisinherit+0x88>)
 800d8aa:	6018      	str	r0, [r3, #0]
 800d8ac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d8b0:	4629      	mov	r1, r5
 800d8b2:	4b07      	ldr	r3, [pc, #28]	@ (800d8d0 <xTaskPriorityDisinherit+0x8c>)
 800d8b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d8b8:	f7fe fcf8 	bl	800c2ac <vListInsertEnd>
					xReturn = pdTRUE;
 800d8bc:	2001      	movs	r0, #1
 800d8be:	e7e5      	b.n	800d88c <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 800d8c0:	2000      	movs	r0, #0
	}
 800d8c2:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 800d8c4:	2000      	movs	r0, #0
 800d8c6:	e7e1      	b.n	800d88c <xTaskPriorityDisinherit+0x48>
 800d8c8:	24002c1c 	.word	0x24002c1c
 800d8cc:	24002740 	.word	0x24002740
 800d8d0:	240027bc 	.word	0x240027bc

0800d8d4 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 800d8d4:	2800      	cmp	r0, #0
 800d8d6:	d046      	beq.n	800d966 <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 800d8d8:	b538      	push	{r3, r4, r5, lr}
 800d8da:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 800d8dc:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800d8de:	b943      	cbnz	r3, 800d8f2 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800d8e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8e4:	f383 8811 	msr	BASEPRI, r3
 800d8e8:	f3bf 8f6f 	isb	sy
 800d8ec:	f3bf 8f4f 	dsb	sy
 800d8f0:	e7fe      	b.n	800d8f0 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d8f2:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800d8f4:	428a      	cmp	r2, r1
 800d8f6:	d200      	bcs.n	800d8fa <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d8f8:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d8fa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d8fc:	4291      	cmp	r1, r2
 800d8fe:	d001      	beq.n	800d904 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d900:	2b01      	cmp	r3, #1
 800d902:	d000      	beq.n	800d906 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 800d904:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 800d906:	4b18      	ldr	r3, [pc, #96]	@ (800d968 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	42a3      	cmp	r3, r4
 800d90c:	d022      	beq.n	800d954 <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 800d90e:	62e2      	str	r2, [r4, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d910:	69a3      	ldr	r3, [r4, #24]
 800d912:	2b00      	cmp	r3, #0
 800d914:	db02      	blt.n	800d91c <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d916:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800d91a:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d91c:	6962      	ldr	r2, [r4, #20]
 800d91e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800d922:	4b12      	ldr	r3, [pc, #72]	@ (800d96c <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800d924:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800d928:	429a      	cmp	r2, r3
 800d92a:	d1eb      	bne.n	800d904 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d92c:	1d25      	adds	r5, r4, #4
 800d92e:	4628      	mov	r0, r5
 800d930:	f7fe fce0 	bl	800c2f4 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800d934:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800d936:	4b0e      	ldr	r3, [pc, #56]	@ (800d970 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	4298      	cmp	r0, r3
 800d93c:	d901      	bls.n	800d942 <vTaskPriorityDisinheritAfterTimeout+0x6e>
 800d93e:	4b0c      	ldr	r3, [pc, #48]	@ (800d970 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800d940:	6018      	str	r0, [r3, #0]
 800d942:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d946:	4629      	mov	r1, r5
 800d948:	4b08      	ldr	r3, [pc, #32]	@ (800d96c <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800d94a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d94e:	f7fe fcad 	bl	800c2ac <vListInsertEnd>
	}
 800d952:	e7d7      	b.n	800d904 <vTaskPriorityDisinheritAfterTimeout+0x30>
 800d954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d958:	f383 8811 	msr	BASEPRI, r3
 800d95c:	f3bf 8f6f 	isb	sy
 800d960:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 800d964:	e7fe      	b.n	800d964 <vTaskPriorityDisinheritAfterTimeout+0x90>
 800d966:	4770      	bx	lr
 800d968:	24002c1c 	.word	0x24002c1c
 800d96c:	240027bc 	.word	0x240027bc
 800d970:	24002740 	.word	0x24002740

0800d974 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800d974:	4b05      	ldr	r3, [pc, #20]	@ (800d98c <pvTaskIncrementMutexHeldCount+0x18>)
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	b123      	cbz	r3, 800d984 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 800d97a:	4b04      	ldr	r3, [pc, #16]	@ (800d98c <pvTaskIncrementMutexHeldCount+0x18>)
 800d97c:	681a      	ldr	r2, [r3, #0]
 800d97e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800d980:	3301      	adds	r3, #1
 800d982:	6513      	str	r3, [r2, #80]	@ 0x50
		return pxCurrentTCB;
 800d984:	4b01      	ldr	r3, [pc, #4]	@ (800d98c <pvTaskIncrementMutexHeldCount+0x18>)
 800d986:	6818      	ldr	r0, [r3, #0]
	}
 800d988:	4770      	bx	lr
 800d98a:	bf00      	nop
 800d98c:	24002c1c 	.word	0x24002c1c

0800d990 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d990:	4b06      	ldr	r3, [pc, #24]	@ (800d9ac <prvGetNextExpireTime+0x1c>)
 800d992:	681a      	ldr	r2, [r3, #0]
 800d994:	6813      	ldr	r3, [r2, #0]
 800d996:	b92b      	cbnz	r3, 800d9a4 <prvGetNextExpireTime+0x14>
 800d998:	2301      	movs	r3, #1
 800d99a:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d99c:	b923      	cbnz	r3, 800d9a8 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d99e:	68d3      	ldr	r3, [r2, #12]
 800d9a0:	6818      	ldr	r0, [r3, #0]
 800d9a2:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	e7f8      	b.n	800d99a <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d9a8:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 800d9aa:	4770      	bx	lr
 800d9ac:	24002d20 	.word	0x24002d20

0800d9b0 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d9b0:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d9b2:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d9b4:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d9b6:	4291      	cmp	r1, r2
 800d9b8:	d80c      	bhi.n	800d9d4 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9ba:	1ad2      	subs	r2, r2, r3
 800d9bc:	6983      	ldr	r3, [r0, #24]
 800d9be:	429a      	cmp	r2, r3
 800d9c0:	d301      	bcc.n	800d9c6 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d9c2:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 800d9c4:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d9c6:	1d01      	adds	r1, r0, #4
 800d9c8:	4b0b      	ldr	r3, [pc, #44]	@ (800d9f8 <prvInsertTimerInActiveList+0x48>)
 800d9ca:	6818      	ldr	r0, [r3, #0]
 800d9cc:	f7fe fc79 	bl	800c2c2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800d9d0:	2000      	movs	r0, #0
 800d9d2:	e7f7      	b.n	800d9c4 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d9d4:	429a      	cmp	r2, r3
 800d9d6:	bf2c      	ite	cs
 800d9d8:	2200      	movcs	r2, #0
 800d9da:	2201      	movcc	r2, #1
 800d9dc:	4299      	cmp	r1, r3
 800d9de:	bf38      	it	cc
 800d9e0:	2200      	movcc	r2, #0
 800d9e2:	b10a      	cbz	r2, 800d9e8 <prvInsertTimerInActiveList+0x38>
			xProcessTimerNow = pdTRUE;
 800d9e4:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800d9e6:	e7ed      	b.n	800d9c4 <prvInsertTimerInActiveList+0x14>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d9e8:	1d01      	adds	r1, r0, #4
 800d9ea:	4b04      	ldr	r3, [pc, #16]	@ (800d9fc <prvInsertTimerInActiveList+0x4c>)
 800d9ec:	6818      	ldr	r0, [r3, #0]
 800d9ee:	f7fe fc68 	bl	800c2c2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800d9f2:	2000      	movs	r0, #0
 800d9f4:	e7e6      	b.n	800d9c4 <prvInsertTimerInActiveList+0x14>
 800d9f6:	bf00      	nop
 800d9f8:	24002d1c 	.word	0x24002d1c
 800d9fc:	24002d20 	.word	0x24002d20

0800da00 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800da00:	b530      	push	{r4, r5, lr}
 800da02:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800da04:	f000 fa5e 	bl	800dec4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800da08:	4b11      	ldr	r3, [pc, #68]	@ (800da50 <prvCheckForValidListAndQueue+0x50>)
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	b11b      	cbz	r3, 800da16 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800da0e:	f000 fa7b 	bl	800df08 <vPortExitCritical>
}
 800da12:	b003      	add	sp, #12
 800da14:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 800da16:	4d0f      	ldr	r5, [pc, #60]	@ (800da54 <prvCheckForValidListAndQueue+0x54>)
 800da18:	4628      	mov	r0, r5
 800da1a:	f7fe fc39 	bl	800c290 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800da1e:	4c0e      	ldr	r4, [pc, #56]	@ (800da58 <prvCheckForValidListAndQueue+0x58>)
 800da20:	4620      	mov	r0, r4
 800da22:	f7fe fc35 	bl	800c290 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800da26:	4b0d      	ldr	r3, [pc, #52]	@ (800da5c <prvCheckForValidListAndQueue+0x5c>)
 800da28:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800da2a:	4b0d      	ldr	r3, [pc, #52]	@ (800da60 <prvCheckForValidListAndQueue+0x60>)
 800da2c:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800da2e:	2300      	movs	r3, #0
 800da30:	9300      	str	r3, [sp, #0]
 800da32:	4b0c      	ldr	r3, [pc, #48]	@ (800da64 <prvCheckForValidListAndQueue+0x64>)
 800da34:	4a0c      	ldr	r2, [pc, #48]	@ (800da68 <prvCheckForValidListAndQueue+0x68>)
 800da36:	2110      	movs	r1, #16
 800da38:	200a      	movs	r0, #10
 800da3a:	f7fe fd69 	bl	800c510 <xQueueGenericCreateStatic>
 800da3e:	4b04      	ldr	r3, [pc, #16]	@ (800da50 <prvCheckForValidListAndQueue+0x50>)
 800da40:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 800da42:	2800      	cmp	r0, #0
 800da44:	d0e3      	beq.n	800da0e <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800da46:	4909      	ldr	r1, [pc, #36]	@ (800da6c <prvCheckForValidListAndQueue+0x6c>)
 800da48:	f7ff f978 	bl	800cd3c <vQueueAddToRegistry>
 800da4c:	e7df      	b.n	800da0e <prvCheckForValidListAndQueue+0xe>
 800da4e:	bf00      	nop
 800da50:	24002d18 	.word	0x24002d18
 800da54:	24002d38 	.word	0x24002d38
 800da58:	24002d24 	.word	0x24002d24
 800da5c:	24002d20 	.word	0x24002d20
 800da60:	24002d1c 	.word	0x24002d1c
 800da64:	24002c20 	.word	0x24002c20
 800da68:	24002c70 	.word	0x24002c70
 800da6c:	08016d68 	.word	0x08016d68

0800da70 <xTimerCreateTimerTask>:
{
 800da70:	b510      	push	{r4, lr}
 800da72:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800da74:	f7ff ffc4 	bl	800da00 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800da78:	4b12      	ldr	r3, [pc, #72]	@ (800dac4 <xTimerCreateTimerTask+0x54>)
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	b1cb      	cbz	r3, 800dab2 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800da7e:	2400      	movs	r4, #0
 800da80:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800da82:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800da84:	aa07      	add	r2, sp, #28
 800da86:	a906      	add	r1, sp, #24
 800da88:	a805      	add	r0, sp, #20
 800da8a:	f7fe fbf5 	bl	800c278 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800da8e:	9b05      	ldr	r3, [sp, #20]
 800da90:	9302      	str	r3, [sp, #8]
 800da92:	9b06      	ldr	r3, [sp, #24]
 800da94:	9301      	str	r3, [sp, #4]
 800da96:	2302      	movs	r3, #2
 800da98:	9300      	str	r3, [sp, #0]
 800da9a:	4623      	mov	r3, r4
 800da9c:	9a07      	ldr	r2, [sp, #28]
 800da9e:	490a      	ldr	r1, [pc, #40]	@ (800dac8 <xTimerCreateTimerTask+0x58>)
 800daa0:	480a      	ldr	r0, [pc, #40]	@ (800dacc <xTimerCreateTimerTask+0x5c>)
 800daa2:	f7ff fb53 	bl	800d14c <xTaskCreateStatic>
 800daa6:	4b0a      	ldr	r3, [pc, #40]	@ (800dad0 <xTimerCreateTimerTask+0x60>)
 800daa8:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800daaa:	b110      	cbz	r0, 800dab2 <xTimerCreateTimerTask+0x42>
}
 800daac:	2001      	movs	r0, #1
 800daae:	b008      	add	sp, #32
 800dab0:	bd10      	pop	{r4, pc}
 800dab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dab6:	f383 8811 	msr	BASEPRI, r3
 800daba:	f3bf 8f6f 	isb	sy
 800dabe:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800dac2:	e7fe      	b.n	800dac2 <xTimerCreateTimerTask+0x52>
 800dac4:	24002d18 	.word	0x24002d18
 800dac8:	08016d70 	.word	0x08016d70
 800dacc:	0800ddd9 	.word	0x0800ddd9
 800dad0:	24002d14 	.word	0x24002d14

0800dad4 <xTimerGenericCommand>:
	configASSERT( xTimer );
 800dad4:	b1b8      	cbz	r0, 800db06 <xTimerGenericCommand+0x32>
 800dad6:	469c      	mov	ip, r3
 800dad8:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 800dada:	4818      	ldr	r0, [pc, #96]	@ (800db3c <xTimerGenericCommand+0x68>)
 800dadc:	6800      	ldr	r0, [r0, #0]
 800dade:	b358      	cbz	r0, 800db38 <xTimerGenericCommand+0x64>
{
 800dae0:	b500      	push	{lr}
 800dae2:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 800dae4:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800dae6:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800dae8:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800daea:	2905      	cmp	r1, #5
 800daec:	dc1c      	bgt.n	800db28 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800daee:	f7ff fe4d 	bl	800d78c <xTaskGetSchedulerState>
 800daf2:	2802      	cmp	r0, #2
 800daf4:	d010      	beq.n	800db18 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800daf6:	2300      	movs	r3, #0
 800daf8:	461a      	mov	r2, r3
 800dafa:	4669      	mov	r1, sp
 800dafc:	480f      	ldr	r0, [pc, #60]	@ (800db3c <xTimerGenericCommand+0x68>)
 800dafe:	6800      	ldr	r0, [r0, #0]
 800db00:	f7fe fdbe 	bl	800c680 <xQueueGenericSend>
 800db04:	e015      	b.n	800db32 <xTimerGenericCommand+0x5e>
 800db06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db0a:	f383 8811 	msr	BASEPRI, r3
 800db0e:	f3bf 8f6f 	isb	sy
 800db12:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 800db16:	e7fe      	b.n	800db16 <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800db18:	2300      	movs	r3, #0
 800db1a:	9a06      	ldr	r2, [sp, #24]
 800db1c:	4669      	mov	r1, sp
 800db1e:	4807      	ldr	r0, [pc, #28]	@ (800db3c <xTimerGenericCommand+0x68>)
 800db20:	6800      	ldr	r0, [r0, #0]
 800db22:	f7fe fdad 	bl	800c680 <xQueueGenericSend>
 800db26:	e004      	b.n	800db32 <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800db28:	2300      	movs	r3, #0
 800db2a:	4662      	mov	r2, ip
 800db2c:	4669      	mov	r1, sp
 800db2e:	f7fe fe6b 	bl	800c808 <xQueueGenericSendFromISR>
}
 800db32:	b005      	add	sp, #20
 800db34:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 800db38:	2000      	movs	r0, #0
}
 800db3a:	4770      	bx	lr
 800db3c:	24002d18 	.word	0x24002d18

0800db40 <prvSwitchTimerLists>:
{
 800db40:	b570      	push	{r4, r5, r6, lr}
 800db42:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800db44:	4b1b      	ldr	r3, [pc, #108]	@ (800dbb4 <prvSwitchTimerLists+0x74>)
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	681a      	ldr	r2, [r3, #0]
 800db4a:	b362      	cbz	r2, 800dba6 <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800db4c:	68db      	ldr	r3, [r3, #12]
 800db4e:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db50:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800db52:	1d25      	adds	r5, r4, #4
 800db54:	4628      	mov	r0, r5
 800db56:	f7fe fbcd 	bl	800c2f4 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800db5a:	6a23      	ldr	r3, [r4, #32]
 800db5c:	4620      	mov	r0, r4
 800db5e:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800db60:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800db64:	f013 0f04 	tst.w	r3, #4
 800db68:	d0ec      	beq.n	800db44 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800db6a:	69a3      	ldr	r3, [r4, #24]
 800db6c:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800db6e:	429e      	cmp	r6, r3
 800db70:	d207      	bcs.n	800db82 <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800db72:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800db74:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800db76:	4629      	mov	r1, r5
 800db78:	4b0e      	ldr	r3, [pc, #56]	@ (800dbb4 <prvSwitchTimerLists+0x74>)
 800db7a:	6818      	ldr	r0, [r3, #0]
 800db7c:	f7fe fba1 	bl	800c2c2 <vListInsert>
 800db80:	e7e0      	b.n	800db44 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800db82:	2100      	movs	r1, #0
 800db84:	9100      	str	r1, [sp, #0]
 800db86:	460b      	mov	r3, r1
 800db88:	4632      	mov	r2, r6
 800db8a:	4620      	mov	r0, r4
 800db8c:	f7ff ffa2 	bl	800dad4 <xTimerGenericCommand>
				configASSERT( xResult );
 800db90:	2800      	cmp	r0, #0
 800db92:	d1d7      	bne.n	800db44 <prvSwitchTimerLists+0x4>
 800db94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db98:	f383 8811 	msr	BASEPRI, r3
 800db9c:	f3bf 8f6f 	isb	sy
 800dba0:	f3bf 8f4f 	dsb	sy
 800dba4:	e7fe      	b.n	800dba4 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 800dba6:	4a04      	ldr	r2, [pc, #16]	@ (800dbb8 <prvSwitchTimerLists+0x78>)
 800dba8:	6810      	ldr	r0, [r2, #0]
 800dbaa:	4902      	ldr	r1, [pc, #8]	@ (800dbb4 <prvSwitchTimerLists+0x74>)
 800dbac:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800dbae:	6013      	str	r3, [r2, #0]
}
 800dbb0:	b002      	add	sp, #8
 800dbb2:	bd70      	pop	{r4, r5, r6, pc}
 800dbb4:	24002d20 	.word	0x24002d20
 800dbb8:	24002d1c 	.word	0x24002d1c

0800dbbc <prvSampleTimeNow>:
{
 800dbbc:	b538      	push	{r3, r4, r5, lr}
 800dbbe:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 800dbc0:	f7ff fb90 	bl	800d2e4 <xTaskGetTickCount>
 800dbc4:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 800dbc6:	4b07      	ldr	r3, [pc, #28]	@ (800dbe4 <prvSampleTimeNow+0x28>)
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	4283      	cmp	r3, r0
 800dbcc:	d805      	bhi.n	800dbda <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 800dbce:	2300      	movs	r3, #0
 800dbd0:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 800dbd2:	4b04      	ldr	r3, [pc, #16]	@ (800dbe4 <prvSampleTimeNow+0x28>)
 800dbd4:	601c      	str	r4, [r3, #0]
}
 800dbd6:	4620      	mov	r0, r4
 800dbd8:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 800dbda:	f7ff ffb1 	bl	800db40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800dbde:	2301      	movs	r3, #1
 800dbe0:	602b      	str	r3, [r5, #0]
 800dbe2:	e7f6      	b.n	800dbd2 <prvSampleTimeNow+0x16>
 800dbe4:	24002d10 	.word	0x24002d10

0800dbe8 <prvProcessExpiredTimer>:
{
 800dbe8:	b570      	push	{r4, r5, r6, lr}
 800dbea:	b082      	sub	sp, #8
 800dbec:	4606      	mov	r6, r0
 800dbee:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dbf0:	4917      	ldr	r1, [pc, #92]	@ (800dc50 <prvProcessExpiredTimer+0x68>)
 800dbf2:	6809      	ldr	r1, [r1, #0]
 800dbf4:	68c9      	ldr	r1, [r1, #12]
 800dbf6:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dbf8:	1d20      	adds	r0, r4, #4
 800dbfa:	f7fe fb7b 	bl	800c2f4 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dbfe:	f894 c028 	ldrb.w	ip, [r4, #40]	@ 0x28
 800dc02:	f01c 0f04 	tst.w	ip, #4
 800dc06:	d108      	bne.n	800dc1a <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dc08:	f02c 0c01 	bic.w	ip, ip, #1
 800dc0c:	f884 c028 	strb.w	ip, [r4, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dc10:	6a23      	ldr	r3, [r4, #32]
 800dc12:	4620      	mov	r0, r4
 800dc14:	4798      	blx	r3
}
 800dc16:	b002      	add	sp, #8
 800dc18:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800dc1a:	69a1      	ldr	r1, [r4, #24]
 800dc1c:	4633      	mov	r3, r6
 800dc1e:	462a      	mov	r2, r5
 800dc20:	4431      	add	r1, r6
 800dc22:	4620      	mov	r0, r4
 800dc24:	f7ff fec4 	bl	800d9b0 <prvInsertTimerInActiveList>
 800dc28:	2800      	cmp	r0, #0
 800dc2a:	d0f1      	beq.n	800dc10 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dc2c:	2100      	movs	r1, #0
 800dc2e:	9100      	str	r1, [sp, #0]
 800dc30:	460b      	mov	r3, r1
 800dc32:	4632      	mov	r2, r6
 800dc34:	4620      	mov	r0, r4
 800dc36:	f7ff ff4d 	bl	800dad4 <xTimerGenericCommand>
			configASSERT( xResult );
 800dc3a:	2800      	cmp	r0, #0
 800dc3c:	d1e8      	bne.n	800dc10 <prvProcessExpiredTimer+0x28>
 800dc3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc42:	f383 8811 	msr	BASEPRI, r3
 800dc46:	f3bf 8f6f 	isb	sy
 800dc4a:	f3bf 8f4f 	dsb	sy
 800dc4e:	e7fe      	b.n	800dc4e <prvProcessExpiredTimer+0x66>
 800dc50:	24002d20 	.word	0x24002d20

0800dc54 <prvProcessTimerOrBlockTask>:
{
 800dc54:	b570      	push	{r4, r5, r6, lr}
 800dc56:	b082      	sub	sp, #8
 800dc58:	4606      	mov	r6, r0
 800dc5a:	460c      	mov	r4, r1
	vTaskSuspendAll();
 800dc5c:	f7ff fb3a 	bl	800d2d4 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dc60:	a801      	add	r0, sp, #4
 800dc62:	f7ff ffab 	bl	800dbbc <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800dc66:	9b01      	ldr	r3, [sp, #4]
 800dc68:	bb3b      	cbnz	r3, 800dcba <prvProcessTimerOrBlockTask+0x66>
 800dc6a:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dc6c:	42b0      	cmp	r0, r6
 800dc6e:	bf28      	it	cs
 800dc70:	2c00      	cmpcs	r4, #0
 800dc72:	d019      	beq.n	800dca8 <prvProcessTimerOrBlockTask+0x54>
				if( xListWasEmpty != pdFALSE )
 800dc74:	b124      	cbz	r4, 800dc80 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dc76:	4a13      	ldr	r2, [pc, #76]	@ (800dcc4 <prvProcessTimerOrBlockTask+0x70>)
 800dc78:	6812      	ldr	r2, [r2, #0]
 800dc7a:	6812      	ldr	r2, [r2, #0]
 800dc7c:	b9da      	cbnz	r2, 800dcb6 <prvProcessTimerOrBlockTask+0x62>
 800dc7e:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800dc80:	4622      	mov	r2, r4
 800dc82:	1b71      	subs	r1, r6, r5
 800dc84:	4b10      	ldr	r3, [pc, #64]	@ (800dcc8 <prvProcessTimerOrBlockTask+0x74>)
 800dc86:	6818      	ldr	r0, [r3, #0]
 800dc88:	f7ff f898 	bl	800cdbc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800dc8c:	f7ff fbbc 	bl	800d408 <xTaskResumeAll>
 800dc90:	b9a8      	cbnz	r0, 800dcbe <prvProcessTimerOrBlockTask+0x6a>
					portYIELD_WITHIN_API();
 800dc92:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800dc96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc9a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800dc9e:	f3bf 8f4f 	dsb	sy
 800dca2:	f3bf 8f6f 	isb	sy
 800dca6:	e00a      	b.n	800dcbe <prvProcessTimerOrBlockTask+0x6a>
				( void ) xTaskResumeAll();
 800dca8:	f7ff fbae 	bl	800d408 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800dcac:	4629      	mov	r1, r5
 800dcae:	4630      	mov	r0, r6
 800dcb0:	f7ff ff9a 	bl	800dbe8 <prvProcessExpiredTimer>
 800dcb4:	e003      	b.n	800dcbe <prvProcessTimerOrBlockTask+0x6a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dcb6:	461c      	mov	r4, r3
 800dcb8:	e7e2      	b.n	800dc80 <prvProcessTimerOrBlockTask+0x2c>
			( void ) xTaskResumeAll();
 800dcba:	f7ff fba5 	bl	800d408 <xTaskResumeAll>
}
 800dcbe:	b002      	add	sp, #8
 800dcc0:	bd70      	pop	{r4, r5, r6, pc}
 800dcc2:	bf00      	nop
 800dcc4:	24002d1c 	.word	0x24002d1c
 800dcc8:	24002d18 	.word	0x24002d18

0800dccc <prvProcessReceivedCommands>:
{
 800dccc:	b510      	push	{r4, lr}
 800dcce:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dcd0:	e002      	b.n	800dcd8 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dcd2:	9b04      	ldr	r3, [sp, #16]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	da0f      	bge.n	800dcf8 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dcd8:	2200      	movs	r2, #0
 800dcda:	a904      	add	r1, sp, #16
 800dcdc:	4b3d      	ldr	r3, [pc, #244]	@ (800ddd4 <prvProcessReceivedCommands+0x108>)
 800dcde:	6818      	ldr	r0, [r3, #0]
 800dce0:	f7fe fe52 	bl	800c988 <xQueueReceive>
 800dce4:	2800      	cmp	r0, #0
 800dce6:	d073      	beq.n	800ddd0 <prvProcessReceivedCommands+0x104>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dce8:	9b04      	ldr	r3, [sp, #16]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	daf1      	bge.n	800dcd2 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800dcee:	9907      	ldr	r1, [sp, #28]
 800dcf0:	9806      	ldr	r0, [sp, #24]
 800dcf2:	9b05      	ldr	r3, [sp, #20]
 800dcf4:	4798      	blx	r3
 800dcf6:	e7ec      	b.n	800dcd2 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800dcf8:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800dcfa:	6963      	ldr	r3, [r4, #20]
 800dcfc:	b113      	cbz	r3, 800dd04 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dcfe:	1d20      	adds	r0, r4, #4
 800dd00:	f7fe faf8 	bl	800c2f4 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dd04:	a803      	add	r0, sp, #12
 800dd06:	f7ff ff59 	bl	800dbbc <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800dd0a:	9b04      	ldr	r3, [sp, #16]
 800dd0c:	2b09      	cmp	r3, #9
 800dd0e:	d8e3      	bhi.n	800dcd8 <prvProcessReceivedCommands+0xc>
 800dd10:	e8df f003 	tbb	[pc, r3]
 800dd14:	30050505 	.word	0x30050505
 800dd18:	05055037 	.word	0x05055037
 800dd1c:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dd1e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800dd22:	f043 0301 	orr.w	r3, r3, #1
 800dd26:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dd2a:	9b05      	ldr	r3, [sp, #20]
 800dd2c:	69a1      	ldr	r1, [r4, #24]
 800dd2e:	4602      	mov	r2, r0
 800dd30:	4419      	add	r1, r3
 800dd32:	4620      	mov	r0, r4
 800dd34:	f7ff fe3c 	bl	800d9b0 <prvInsertTimerInActiveList>
 800dd38:	2800      	cmp	r0, #0
 800dd3a:	d0cd      	beq.n	800dcd8 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dd3c:	6a23      	ldr	r3, [r4, #32]
 800dd3e:	4620      	mov	r0, r4
 800dd40:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dd42:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800dd46:	f013 0f04 	tst.w	r3, #4
 800dd4a:	d0c5      	beq.n	800dcd8 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dd4c:	69a2      	ldr	r2, [r4, #24]
 800dd4e:	2100      	movs	r1, #0
 800dd50:	9100      	str	r1, [sp, #0]
 800dd52:	460b      	mov	r3, r1
 800dd54:	9805      	ldr	r0, [sp, #20]
 800dd56:	4402      	add	r2, r0
 800dd58:	4620      	mov	r0, r4
 800dd5a:	f7ff febb 	bl	800dad4 <xTimerGenericCommand>
							configASSERT( xResult );
 800dd5e:	2800      	cmp	r0, #0
 800dd60:	d1ba      	bne.n	800dcd8 <prvProcessReceivedCommands+0xc>
 800dd62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd66:	f383 8811 	msr	BASEPRI, r3
 800dd6a:	f3bf 8f6f 	isb	sy
 800dd6e:	f3bf 8f4f 	dsb	sy
 800dd72:	e7fe      	b.n	800dd72 <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dd74:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800dd78:	f023 0301 	bic.w	r3, r3, #1
 800dd7c:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					break;
 800dd80:	e7aa      	b.n	800dcd8 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dd82:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800dd86:	f043 0301 	orr.w	r3, r3, #1
 800dd8a:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800dd8e:	9905      	ldr	r1, [sp, #20]
 800dd90:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dd92:	b131      	cbz	r1, 800dda2 <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800dd94:	4603      	mov	r3, r0
 800dd96:	4602      	mov	r2, r0
 800dd98:	4401      	add	r1, r0
 800dd9a:	4620      	mov	r0, r4
 800dd9c:	f7ff fe08 	bl	800d9b0 <prvInsertTimerInActiveList>
					break;
 800dda0:	e79a      	b.n	800dcd8 <prvProcessReceivedCommands+0xc>
 800dda2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dda6:	f383 8811 	msr	BASEPRI, r3
 800ddaa:	f3bf 8f6f 	isb	sy
 800ddae:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ddb2:	e7fe      	b.n	800ddb2 <prvProcessReceivedCommands+0xe6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ddb4:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800ddb8:	f013 0f02 	tst.w	r3, #2
 800ddbc:	d004      	beq.n	800ddc8 <prvProcessReceivedCommands+0xfc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ddbe:	f023 0301 	bic.w	r3, r3, #1
 800ddc2:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 800ddc6:	e787      	b.n	800dcd8 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 800ddc8:	4620      	mov	r0, r4
 800ddca:	f000 fab5 	bl	800e338 <vPortFree>
 800ddce:	e783      	b.n	800dcd8 <prvProcessReceivedCommands+0xc>
}
 800ddd0:	b008      	add	sp, #32
 800ddd2:	bd10      	pop	{r4, pc}
 800ddd4:	24002d18 	.word	0x24002d18

0800ddd8 <prvTimerTask>:
{
 800ddd8:	b500      	push	{lr}
 800ddda:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dddc:	a801      	add	r0, sp, #4
 800ddde:	f7ff fdd7 	bl	800d990 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800dde2:	9901      	ldr	r1, [sp, #4]
 800dde4:	f7ff ff36 	bl	800dc54 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 800dde8:	f7ff ff70 	bl	800dccc <prvProcessReceivedCommands>
	for( ;; )
 800ddec:	e7f6      	b.n	800dddc <prvTimerTask+0x4>
	...

0800ddf0 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ddf0:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ddf6:	4b0d      	ldr	r3, [pc, #52]	@ (800de2c <prvTaskExitError+0x3c>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddfe:	d008      	beq.n	800de12 <prvTaskExitError+0x22>
 800de00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de04:	f383 8811 	msr	BASEPRI, r3
 800de08:	f3bf 8f6f 	isb	sy
 800de0c:	f3bf 8f4f 	dsb	sy
 800de10:	e7fe      	b.n	800de10 <prvTaskExitError+0x20>
 800de12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de16:	f383 8811 	msr	BASEPRI, r3
 800de1a:	f3bf 8f6f 	isb	sy
 800de1e:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800de22:	9b01      	ldr	r3, [sp, #4]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d0fc      	beq.n	800de22 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800de28:	b002      	add	sp, #8
 800de2a:	4770      	bx	lr
 800de2c:	24000010 	.word	0x24000010

0800de30 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800de30:	4808      	ldr	r0, [pc, #32]	@ (800de54 <prvPortStartFirstTask+0x24>)
 800de32:	6800      	ldr	r0, [r0, #0]
 800de34:	6800      	ldr	r0, [r0, #0]
 800de36:	f380 8808 	msr	MSP, r0
 800de3a:	f04f 0000 	mov.w	r0, #0
 800de3e:	f380 8814 	msr	CONTROL, r0
 800de42:	b662      	cpsie	i
 800de44:	b661      	cpsie	f
 800de46:	f3bf 8f4f 	dsb	sy
 800de4a:	f3bf 8f6f 	isb	sy
 800de4e:	df00      	svc	0
 800de50:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800de52:	0000      	.short	0x0000
 800de54:	e000ed08 	.word	0xe000ed08

0800de58 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800de58:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800de68 <vPortEnableVFP+0x10>
 800de5c:	6801      	ldr	r1, [r0, #0]
 800de5e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800de62:	6001      	str	r1, [r0, #0]
 800de64:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800de66:	0000      	.short	0x0000
 800de68:	e000ed88 	.word	0xe000ed88

0800de6c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800de6c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800de70:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800de74:	f021 0101 	bic.w	r1, r1, #1
 800de78:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800de7c:	4b05      	ldr	r3, [pc, #20]	@ (800de94 <pxPortInitialiseStack+0x28>)
 800de7e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800de82:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800de86:	f06f 0302 	mvn.w	r3, #2
 800de8a:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800de8e:	3844      	subs	r0, #68	@ 0x44
 800de90:	4770      	bx	lr
 800de92:	bf00      	nop
 800de94:	0800ddf1 	.word	0x0800ddf1
	...

0800dea0 <SVC_Handler>:
	__asm volatile (
 800dea0:	4b07      	ldr	r3, [pc, #28]	@ (800dec0 <pxCurrentTCBConst2>)
 800dea2:	6819      	ldr	r1, [r3, #0]
 800dea4:	6808      	ldr	r0, [r1, #0]
 800dea6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deaa:	f380 8809 	msr	PSP, r0
 800deae:	f3bf 8f6f 	isb	sy
 800deb2:	f04f 0000 	mov.w	r0, #0
 800deb6:	f380 8811 	msr	BASEPRI, r0
 800deba:	4770      	bx	lr
 800debc:	f3af 8000 	nop.w

0800dec0 <pxCurrentTCBConst2>:
 800dec0:	24002c1c 	.word	0x24002c1c

0800dec4 <vPortEnterCritical>:
 800dec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dec8:	f383 8811 	msr	BASEPRI, r3
 800decc:	f3bf 8f6f 	isb	sy
 800ded0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800ded4:	4a0b      	ldr	r2, [pc, #44]	@ (800df04 <vPortEnterCritical+0x40>)
 800ded6:	6813      	ldr	r3, [r2, #0]
 800ded8:	3301      	adds	r3, #1
 800deda:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800dedc:	2b01      	cmp	r3, #1
 800dede:	d000      	beq.n	800dee2 <vPortEnterCritical+0x1e>
}
 800dee0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dee2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800dee6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800deea:	f013 0fff 	tst.w	r3, #255	@ 0xff
 800deee:	d0f7      	beq.n	800dee0 <vPortEnterCritical+0x1c>
 800def0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800def4:	f383 8811 	msr	BASEPRI, r3
 800def8:	f3bf 8f6f 	isb	sy
 800defc:	f3bf 8f4f 	dsb	sy
 800df00:	e7fe      	b.n	800df00 <vPortEnterCritical+0x3c>
 800df02:	bf00      	nop
 800df04:	24000010 	.word	0x24000010

0800df08 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800df08:	4b09      	ldr	r3, [pc, #36]	@ (800df30 <vPortExitCritical+0x28>)
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	b943      	cbnz	r3, 800df20 <vPortExitCritical+0x18>
 800df0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df12:	f383 8811 	msr	BASEPRI, r3
 800df16:	f3bf 8f6f 	isb	sy
 800df1a:	f3bf 8f4f 	dsb	sy
 800df1e:	e7fe      	b.n	800df1e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800df20:	3b01      	subs	r3, #1
 800df22:	4a03      	ldr	r2, [pc, #12]	@ (800df30 <vPortExitCritical+0x28>)
 800df24:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800df26:	b90b      	cbnz	r3, 800df2c <vPortExitCritical+0x24>
	__asm volatile
 800df28:	f383 8811 	msr	BASEPRI, r3
}
 800df2c:	4770      	bx	lr
 800df2e:	bf00      	nop
 800df30:	24000010 	.word	0x24000010
	...

0800df40 <PendSV_Handler>:
	__asm volatile
 800df40:	f3ef 8009 	mrs	r0, PSP
 800df44:	f3bf 8f6f 	isb	sy
 800df48:	4b15      	ldr	r3, [pc, #84]	@ (800dfa0 <pxCurrentTCBConst>)
 800df4a:	681a      	ldr	r2, [r3, #0]
 800df4c:	f01e 0f10 	tst.w	lr, #16
 800df50:	bf08      	it	eq
 800df52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800df56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df5a:	6010      	str	r0, [r2, #0]
 800df5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800df60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800df64:	f380 8811 	msr	BASEPRI, r0
 800df68:	f3bf 8f4f 	dsb	sy
 800df6c:	f3bf 8f6f 	isb	sy
 800df70:	f7ff faec 	bl	800d54c <vTaskSwitchContext>
 800df74:	f04f 0000 	mov.w	r0, #0
 800df78:	f380 8811 	msr	BASEPRI, r0
 800df7c:	bc09      	pop	{r0, r3}
 800df7e:	6819      	ldr	r1, [r3, #0]
 800df80:	6808      	ldr	r0, [r1, #0]
 800df82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df86:	f01e 0f10 	tst.w	lr, #16
 800df8a:	bf08      	it	eq
 800df8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800df90:	f380 8809 	msr	PSP, r0
 800df94:	f3bf 8f6f 	isb	sy
 800df98:	4770      	bx	lr
 800df9a:	bf00      	nop
 800df9c:	f3af 8000 	nop.w

0800dfa0 <pxCurrentTCBConst>:
 800dfa0:	24002c1c 	.word	0x24002c1c

0800dfa4 <xPortSysTickHandler>:
{
 800dfa4:	b508      	push	{r3, lr}
	__asm volatile
 800dfa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfaa:	f383 8811 	msr	BASEPRI, r3
 800dfae:	f3bf 8f6f 	isb	sy
 800dfb2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800dfb6:	f7ff f99b 	bl	800d2f0 <xTaskIncrementTick>
 800dfba:	b128      	cbz	r0, 800dfc8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dfbc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800dfc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dfc4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 800dfc8:	2300      	movs	r3, #0
 800dfca:	f383 8811 	msr	BASEPRI, r3
}
 800dfce:	bd08      	pop	{r3, pc}

0800dfd0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dfd0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dfd8:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800dfda:	4b05      	ldr	r3, [pc, #20]	@ (800dff0 <vPortSetupTimerInterrupt+0x20>)
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	4905      	ldr	r1, [pc, #20]	@ (800dff4 <vPortSetupTimerInterrupt+0x24>)
 800dfe0:	fba1 1303 	umull	r1, r3, r1, r3
 800dfe4:	099b      	lsrs	r3, r3, #6
 800dfe6:	3b01      	subs	r3, #1
 800dfe8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800dfea:	2307      	movs	r3, #7
 800dfec:	6113      	str	r3, [r2, #16]
}
 800dfee:	4770      	bx	lr
 800dff0:	24000004 	.word	0x24000004
 800dff4:	10624dd3 	.word	0x10624dd3

0800dff8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800dff8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800dffc:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800e000:	4b3d      	ldr	r3, [pc, #244]	@ (800e0f8 <xPortStartScheduler+0x100>)
 800e002:	429a      	cmp	r2, r3
 800e004:	d01c      	beq.n	800e040 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e006:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e00a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800e00e:	4b3b      	ldr	r3, [pc, #236]	@ (800e0fc <xPortStartScheduler+0x104>)
 800e010:	429a      	cmp	r2, r3
 800e012:	d01e      	beq.n	800e052 <xPortStartScheduler+0x5a>
{
 800e014:	b530      	push	{r4, r5, lr}
 800e016:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e018:	4b39      	ldr	r3, [pc, #228]	@ (800e100 <xPortStartScheduler+0x108>)
 800e01a:	781a      	ldrb	r2, [r3, #0]
 800e01c:	b2d2      	uxtb	r2, r2
 800e01e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e020:	22ff      	movs	r2, #255	@ 0xff
 800e022:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e024:	781b      	ldrb	r3, [r3, #0]
 800e026:	b2db      	uxtb	r3, r3
 800e028:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e02c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e030:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e034:	4a33      	ldr	r2, [pc, #204]	@ (800e104 <xPortStartScheduler+0x10c>)
 800e036:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e038:	4b33      	ldr	r3, [pc, #204]	@ (800e108 <xPortStartScheduler+0x110>)
 800e03a:	2207      	movs	r2, #7
 800e03c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e03e:	e01b      	b.n	800e078 <xPortStartScheduler+0x80>
	__asm volatile
 800e040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e044:	f383 8811 	msr	BASEPRI, r3
 800e048:	f3bf 8f6f 	isb	sy
 800e04c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e050:	e7fe      	b.n	800e050 <xPortStartScheduler+0x58>
 800e052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e056:	f383 8811 	msr	BASEPRI, r3
 800e05a:	f3bf 8f6f 	isb	sy
 800e05e:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e062:	e7fe      	b.n	800e062 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 800e064:	4a28      	ldr	r2, [pc, #160]	@ (800e108 <xPortStartScheduler+0x110>)
 800e066:	6813      	ldr	r3, [r2, #0]
 800e068:	3b01      	subs	r3, #1
 800e06a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e06c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e070:	005b      	lsls	r3, r3, #1
 800e072:	b2db      	uxtb	r3, r3
 800e074:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e078:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e07c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e080:	d1f0      	bne.n	800e064 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e082:	4b21      	ldr	r3, [pc, #132]	@ (800e108 <xPortStartScheduler+0x110>)
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	2b03      	cmp	r3, #3
 800e088:	d008      	beq.n	800e09c <xPortStartScheduler+0xa4>
 800e08a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e08e:	f383 8811 	msr	BASEPRI, r3
 800e092:	f3bf 8f6f 	isb	sy
 800e096:	f3bf 8f4f 	dsb	sy
 800e09a:	e7fe      	b.n	800e09a <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e09c:	021b      	lsls	r3, r3, #8
 800e09e:	4a1a      	ldr	r2, [pc, #104]	@ (800e108 <xPortStartScheduler+0x110>)
 800e0a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e0a2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e0a6:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e0a8:	9b01      	ldr	r3, [sp, #4]
 800e0aa:	b2db      	uxtb	r3, r3
 800e0ac:	4a14      	ldr	r2, [pc, #80]	@ (800e100 <xPortStartScheduler+0x108>)
 800e0ae:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e0b0:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 800e0b4:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800e0b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e0bc:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e0c0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800e0c4:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e0c8:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800e0cc:	f7ff ff80 	bl	800dfd0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800e0d0:	2500      	movs	r5, #0
 800e0d2:	4b0e      	ldr	r3, [pc, #56]	@ (800e10c <xPortStartScheduler+0x114>)
 800e0d4:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800e0d6:	f7ff febf 	bl	800de58 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e0da:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800e0de:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e0e2:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800e0e6:	f7ff fea3 	bl	800de30 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800e0ea:	f7ff fa2f 	bl	800d54c <vTaskSwitchContext>
	prvTaskExitError();
 800e0ee:	f7ff fe7f 	bl	800ddf0 <prvTaskExitError>
}
 800e0f2:	4628      	mov	r0, r5
 800e0f4:	b003      	add	sp, #12
 800e0f6:	bd30      	pop	{r4, r5, pc}
 800e0f8:	410fc271 	.word	0x410fc271
 800e0fc:	410fc270 	.word	0x410fc270
 800e100:	e000e400 	.word	0xe000e400
 800e104:	24002d50 	.word	0x24002d50
 800e108:	24002d4c 	.word	0x24002d4c
 800e10c:	24000010 	.word	0x24000010

0800e110 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e110:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e114:	2b0f      	cmp	r3, #15
 800e116:	d90f      	bls.n	800e138 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e118:	4a11      	ldr	r2, [pc, #68]	@ (800e160 <vPortValidateInterruptPriority+0x50>)
 800e11a:	5c9b      	ldrb	r3, [r3, r2]
 800e11c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e11e:	4a11      	ldr	r2, [pc, #68]	@ (800e164 <vPortValidateInterruptPriority+0x54>)
 800e120:	7812      	ldrb	r2, [r2, #0]
 800e122:	429a      	cmp	r2, r3
 800e124:	d908      	bls.n	800e138 <vPortValidateInterruptPriority+0x28>
 800e126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e12a:	f383 8811 	msr	BASEPRI, r3
 800e12e:	f3bf 8f6f 	isb	sy
 800e132:	f3bf 8f4f 	dsb	sy
 800e136:	e7fe      	b.n	800e136 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e138:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e13c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800e140:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e144:	4a08      	ldr	r2, [pc, #32]	@ (800e168 <vPortValidateInterruptPriority+0x58>)
 800e146:	6812      	ldr	r2, [r2, #0]
 800e148:	4293      	cmp	r3, r2
 800e14a:	d908      	bls.n	800e15e <vPortValidateInterruptPriority+0x4e>
 800e14c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e150:	f383 8811 	msr	BASEPRI, r3
 800e154:	f3bf 8f6f 	isb	sy
 800e158:	f3bf 8f4f 	dsb	sy
 800e15c:	e7fe      	b.n	800e15c <vPortValidateInterruptPriority+0x4c>
	}
 800e15e:	4770      	bx	lr
 800e160:	e000e3f0 	.word	0xe000e3f0
 800e164:	24002d50 	.word	0x24002d50
 800e168:	24002d4c 	.word	0x24002d4c

0800e16c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e16c:	4a12      	ldr	r2, [pc, #72]	@ (800e1b8 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e16e:	f012 0f07 	tst.w	r2, #7
 800e172:	d01e      	beq.n	800e1b2 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e174:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e176:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e17a:	f5c1 5370 	rsb	r3, r1, #15360	@ 0x3c00
 800e17e:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e180:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e182:	480e      	ldr	r0, [pc, #56]	@ (800e1bc <prvHeapInit+0x50>)
 800e184:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e186:	2100      	movs	r1, #0
 800e188:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e18a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800e18c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e18e:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800e192:	480b      	ldr	r0, [pc, #44]	@ (800e1c0 <prvHeapInit+0x54>)
 800e194:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800e196:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e198:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e19a:	1a99      	subs	r1, r3, r2
 800e19c:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e19e:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e1a0:	4b08      	ldr	r3, [pc, #32]	@ (800e1c4 <prvHeapInit+0x58>)
 800e1a2:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e1a4:	4b08      	ldr	r3, [pc, #32]	@ (800e1c8 <prvHeapInit+0x5c>)
 800e1a6:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e1a8:	4b08      	ldr	r3, [pc, #32]	@ (800e1cc <prvHeapInit+0x60>)
 800e1aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e1ae:	601a      	str	r2, [r3, #0]
}
 800e1b0:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e1b2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800e1b6:	e7e4      	b.n	800e182 <prvHeapInit+0x16>
 800e1b8:	24002d74 	.word	0x24002d74
 800e1bc:	24002d6c 	.word	0x24002d6c
 800e1c0:	24002d68 	.word	0x24002d68
 800e1c4:	24002d60 	.word	0x24002d60
 800e1c8:	24002d64 	.word	0x24002d64
 800e1cc:	24002d54 	.word	0x24002d54

0800e1d0 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e1d0:	4b16      	ldr	r3, [pc, #88]	@ (800e22c <prvInsertBlockIntoFreeList+0x5c>)
 800e1d2:	461a      	mov	r2, r3
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	4283      	cmp	r3, r0
 800e1d8:	d3fb      	bcc.n	800e1d2 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e1da:	6851      	ldr	r1, [r2, #4]
 800e1dc:	eb02 0c01 	add.w	ip, r2, r1
 800e1e0:	4584      	cmp	ip, r0
 800e1e2:	d009      	beq.n	800e1f8 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e1e4:	6841      	ldr	r1, [r0, #4]
 800e1e6:	eb00 0c01 	add.w	ip, r0, r1
 800e1ea:	4563      	cmp	r3, ip
 800e1ec:	d009      	beq.n	800e202 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e1ee:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e1f0:	4290      	cmp	r0, r2
 800e1f2:	d019      	beq.n	800e228 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e1f4:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 800e1f6:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e1f8:	6840      	ldr	r0, [r0, #4]
 800e1fa:	4401      	add	r1, r0
 800e1fc:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800e1fe:	4610      	mov	r0, r2
 800e200:	e7f0      	b.n	800e1e4 <prvInsertBlockIntoFreeList+0x14>
{
 800e202:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e204:	4c0a      	ldr	r4, [pc, #40]	@ (800e230 <prvInsertBlockIntoFreeList+0x60>)
 800e206:	6824      	ldr	r4, [r4, #0]
 800e208:	42a3      	cmp	r3, r4
 800e20a:	d00b      	beq.n	800e224 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e20c:	685b      	ldr	r3, [r3, #4]
 800e20e:	4419      	add	r1, r3
 800e210:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e212:	6813      	ldr	r3, [r2, #0]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 800e218:	4290      	cmp	r0, r2
 800e21a:	d000      	beq.n	800e21e <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e21c:	6010      	str	r0, [r2, #0]
	}
}
 800e21e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e222:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e224:	6004      	str	r4, [r0, #0]
 800e226:	e7f7      	b.n	800e218 <prvInsertBlockIntoFreeList+0x48>
 800e228:	4770      	bx	lr
 800e22a:	bf00      	nop
 800e22c:	24002d6c 	.word	0x24002d6c
 800e230:	24002d68 	.word	0x24002d68

0800e234 <pvPortMalloc>:
{
 800e234:	b538      	push	{r3, r4, r5, lr}
 800e236:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800e238:	f7ff f84c 	bl	800d2d4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800e23c:	4b38      	ldr	r3, [pc, #224]	@ (800e320 <pvPortMalloc+0xec>)
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	b1b3      	cbz	r3, 800e270 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e242:	4b38      	ldr	r3, [pc, #224]	@ (800e324 <pvPortMalloc+0xf0>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	421c      	tst	r4, r3
 800e248:	d150      	bne.n	800e2ec <pvPortMalloc+0xb8>
			if( xWantedSize > 0 )
 800e24a:	2c00      	cmp	r4, #0
 800e24c:	d050      	beq.n	800e2f0 <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 800e24e:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e252:	f014 0f07 	tst.w	r4, #7
 800e256:	d002      	beq.n	800e25e <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e258:	f022 0207 	bic.w	r2, r2, #7
 800e25c:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e25e:	2a00      	cmp	r2, #0
 800e260:	d055      	beq.n	800e30e <pvPortMalloc+0xda>
 800e262:	4b31      	ldr	r3, [pc, #196]	@ (800e328 <pvPortMalloc+0xf4>)
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	4293      	cmp	r3, r2
 800e268:	d353      	bcc.n	800e312 <pvPortMalloc+0xde>
				pxBlock = xStart.pxNextFreeBlock;
 800e26a:	4930      	ldr	r1, [pc, #192]	@ (800e32c <pvPortMalloc+0xf8>)
 800e26c:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e26e:	e004      	b.n	800e27a <pvPortMalloc+0x46>
			prvHeapInit();
 800e270:	f7ff ff7c 	bl	800e16c <prvHeapInit>
 800e274:	e7e5      	b.n	800e242 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 800e276:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 800e278:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e27a:	6863      	ldr	r3, [r4, #4]
 800e27c:	4293      	cmp	r3, r2
 800e27e:	d202      	bcs.n	800e286 <pvPortMalloc+0x52>
 800e280:	6823      	ldr	r3, [r4, #0]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d1f7      	bne.n	800e276 <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 800e286:	4b26      	ldr	r3, [pc, #152]	@ (800e320 <pvPortMalloc+0xec>)
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	42a3      	cmp	r3, r4
 800e28c:	d043      	beq.n	800e316 <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e28e:	680d      	ldr	r5, [r1, #0]
 800e290:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e292:	6823      	ldr	r3, [r4, #0]
 800e294:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e296:	6863      	ldr	r3, [r4, #4]
 800e298:	1a9b      	subs	r3, r3, r2
 800e29a:	2b10      	cmp	r3, #16
 800e29c:	d910      	bls.n	800e2c0 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e29e:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e2a0:	f010 0f07 	tst.w	r0, #7
 800e2a4:	d008      	beq.n	800e2b8 <pvPortMalloc+0x84>
 800e2a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2aa:	f383 8811 	msr	BASEPRI, r3
 800e2ae:	f3bf 8f6f 	isb	sy
 800e2b2:	f3bf 8f4f 	dsb	sy
 800e2b6:	e7fe      	b.n	800e2b6 <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e2b8:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e2ba:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e2bc:	f7ff ff88 	bl	800e1d0 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e2c0:	6862      	ldr	r2, [r4, #4]
 800e2c2:	4919      	ldr	r1, [pc, #100]	@ (800e328 <pvPortMalloc+0xf4>)
 800e2c4:	680b      	ldr	r3, [r1, #0]
 800e2c6:	1a9b      	subs	r3, r3, r2
 800e2c8:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e2ca:	4919      	ldr	r1, [pc, #100]	@ (800e330 <pvPortMalloc+0xfc>)
 800e2cc:	6809      	ldr	r1, [r1, #0]
 800e2ce:	428b      	cmp	r3, r1
 800e2d0:	d201      	bcs.n	800e2d6 <pvPortMalloc+0xa2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e2d2:	4917      	ldr	r1, [pc, #92]	@ (800e330 <pvPortMalloc+0xfc>)
 800e2d4:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e2d6:	4b13      	ldr	r3, [pc, #76]	@ (800e324 <pvPortMalloc+0xf0>)
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	4313      	orrs	r3, r2
 800e2dc:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e2de:	2300      	movs	r3, #0
 800e2e0:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 800e2e2:	4a14      	ldr	r2, [pc, #80]	@ (800e334 <pvPortMalloc+0x100>)
 800e2e4:	6813      	ldr	r3, [r2, #0]
 800e2e6:	3301      	adds	r3, #1
 800e2e8:	6013      	str	r3, [r2, #0]
 800e2ea:	e002      	b.n	800e2f2 <pvPortMalloc+0xbe>
void *pvReturn = NULL;
 800e2ec:	2500      	movs	r5, #0
 800e2ee:	e000      	b.n	800e2f2 <pvPortMalloc+0xbe>
 800e2f0:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 800e2f2:	f7ff f889 	bl	800d408 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e2f6:	f015 0f07 	tst.w	r5, #7
 800e2fa:	d00e      	beq.n	800e31a <pvPortMalloc+0xe6>
 800e2fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e300:	f383 8811 	msr	BASEPRI, r3
 800e304:	f3bf 8f6f 	isb	sy
 800e308:	f3bf 8f4f 	dsb	sy
 800e30c:	e7fe      	b.n	800e30c <pvPortMalloc+0xd8>
void *pvReturn = NULL;
 800e30e:	2500      	movs	r5, #0
 800e310:	e7ef      	b.n	800e2f2 <pvPortMalloc+0xbe>
 800e312:	2500      	movs	r5, #0
 800e314:	e7ed      	b.n	800e2f2 <pvPortMalloc+0xbe>
 800e316:	2500      	movs	r5, #0
 800e318:	e7eb      	b.n	800e2f2 <pvPortMalloc+0xbe>
}
 800e31a:	4628      	mov	r0, r5
 800e31c:	bd38      	pop	{r3, r4, r5, pc}
 800e31e:	bf00      	nop
 800e320:	24002d68 	.word	0x24002d68
 800e324:	24002d54 	.word	0x24002d54
 800e328:	24002d64 	.word	0x24002d64
 800e32c:	24002d6c 	.word	0x24002d6c
 800e330:	24002d60 	.word	0x24002d60
 800e334:	24002d5c 	.word	0x24002d5c

0800e338 <vPortFree>:
	if( pv != NULL )
 800e338:	2800      	cmp	r0, #0
 800e33a:	d034      	beq.n	800e3a6 <vPortFree+0x6e>
{
 800e33c:	b538      	push	{r3, r4, r5, lr}
 800e33e:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800e340:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e344:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800e348:	4a17      	ldr	r2, [pc, #92]	@ (800e3a8 <vPortFree+0x70>)
 800e34a:	6812      	ldr	r2, [r2, #0]
 800e34c:	4213      	tst	r3, r2
 800e34e:	d108      	bne.n	800e362 <vPortFree+0x2a>
 800e350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e354:	f383 8811 	msr	BASEPRI, r3
 800e358:	f3bf 8f6f 	isb	sy
 800e35c:	f3bf 8f4f 	dsb	sy
 800e360:	e7fe      	b.n	800e360 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e362:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800e366:	b141      	cbz	r1, 800e37a <vPortFree+0x42>
 800e368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e36c:	f383 8811 	msr	BASEPRI, r3
 800e370:	f3bf 8f6f 	isb	sy
 800e374:	f3bf 8f4f 	dsb	sy
 800e378:	e7fe      	b.n	800e378 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e37a:	ea23 0302 	bic.w	r3, r3, r2
 800e37e:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800e382:	f7fe ffa7 	bl	800d2d4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e386:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800e38a:	4a08      	ldr	r2, [pc, #32]	@ (800e3ac <vPortFree+0x74>)
 800e38c:	6813      	ldr	r3, [r2, #0]
 800e38e:	440b      	add	r3, r1
 800e390:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e392:	4628      	mov	r0, r5
 800e394:	f7ff ff1c 	bl	800e1d0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e398:	4a05      	ldr	r2, [pc, #20]	@ (800e3b0 <vPortFree+0x78>)
 800e39a:	6813      	ldr	r3, [r2, #0]
 800e39c:	3301      	adds	r3, #1
 800e39e:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800e3a0:	f7ff f832 	bl	800d408 <xTaskResumeAll>
}
 800e3a4:	bd38      	pop	{r3, r4, r5, pc}
 800e3a6:	4770      	bx	lr
 800e3a8:	24002d54 	.word	0x24002d54
 800e3ac:	24002d64 	.word	0x24002d64
 800e3b0:	24002d58 	.word	0x24002d58

0800e3b4 <_Z11StartupLEDSP4LEDS>:
/**
 * @brief LEDs after initialization
 *
 * @param input leds: LEDS instance pointer
 */
void StartupLEDS(LEDS* leds) {
 800e3b4:	b510      	push	{r4, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	b086      	sub	sp, #24
 800e3ba:	4604      	mov	r4, r0
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800e3bc:	2001      	movs	r0, #1
 800e3be:	9305      	str	r3, [sp, #20]
 800e3c0:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800e3c4:	f008 f8a5 	bl	8016512 <_Znwj>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800e3c8:	2205      	movs	r2, #5
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800e3ca:	1c43      	adds	r3, r0, #1
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800e3cc:	9003      	str	r0, [sp, #12]
 800e3ce:	7002      	strb	r2, [r0, #0]
#ifdef USE_SMD_LEDs
	leds->ConfigureTimings(LED_STATUS, std::vector<uint8_t>{5}, 10);
 800e3d0:	2107      	movs	r1, #7
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800e3d2:	9305      	str	r3, [sp, #20]
 800e3d4:	aa03      	add	r2, sp, #12
	  this->_M_impl._M_finish =
 800e3d6:	9304      	str	r3, [sp, #16]
 800e3d8:	4620      	mov	r0, r4
 800e3da:	230a      	movs	r3, #10
 800e3dc:	f003 ffcb 	bl	8012376 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
	_M_deallocate(_M_impl._M_start,
 800e3e0:	9803      	ldr	r0, [sp, #12]
	if (__p)
 800e3e2:	b118      	cbz	r0, 800e3ec <_Z11StartupLEDSP4LEDS+0x38>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800e3e4:	9905      	ldr	r1, [sp, #20]
 800e3e6:	1a09      	subs	r1, r1, r0
 800e3e8:	f008 f86e 	bl	80164c8 <_ZdlPvj>
	leds->Blink(LED_STATUS); // blink until ID allocated
 800e3ec:	2107      	movs	r1, #7
 800e3ee:	4620      	mov	r0, r4
 800e3f0:	f003 fa6b 	bl	80118ca <_ZN4LEDS5BlinkEh>

	leds->SetRGB(LED_RGB, 0, 0, 0);
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	210d      	movs	r1, #13
 800e3f8:	4620      	mov	r0, r4
 800e3fa:	461a      	mov	r2, r3
 800e3fc:	9300      	str	r3, [sp, #0]
 800e3fe:	f003 fabe 	bl	801197e <_ZN4LEDS6SetRGBEhhhh>
#endif
}
 800e402:	b006      	add	sp, #24
 800e404:	bd10      	pop	{r4, pc}

0800e406 <_Z11IDFoundLEDSP4LEDS>:
 *
 * @param input leds: LEDS instance pointer
 */
void IDFoundLEDS(LEDS* leds) {
#ifdef USE_SMD_LEDs
	leds->SetLED(LED_STATUS, GPIO_PIN_SET);
 800e406:	2201      	movs	r2, #1
 800e408:	2107      	movs	r1, #7
 800e40a:	f003 ba3d 	b.w	8011888 <_ZN4LEDS6SetLEDEh13GPIO_PinState>

0800e40e <_Z16CommunicationLEDP4LEDSh>:
 * @param input leds: LEDS instance pointer
 * @param input interface_ID: the interface from Communication that asks for a LED single blinking. The ID should be the same than the LED ID
 */
void CommunicationLED(LEDS* leds, uint8_t interface_ID) {
#ifdef USE_SMD_LEDs
	if (interface_ID == UART_PIC || interface_ID == UART_EXTENSION) return; // no LED for these interfaces
 800e40e:	1f4b      	subs	r3, r1, #5
 800e410:	2b01      	cmp	r3, #1
 800e412:	d901      	bls.n	800e418 <_Z16CommunicationLEDP4LEDSh+0xa>

	leds->BlinkOnce(interface_ID);
 800e414:	f003 ba7c 	b.w	8011910 <_ZN4LEDS9BlinkOnceEh>
#endif
}
 800e418:	4770      	bx	lr
	...

0800e41c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>:
 *
 * @param output success: whether successful
 * @return the type ID corresponding to the input template type
 */
template <typename T>
uint8_t Registers::GetTypeID (bool* success) {
 800e41c:	b510      	push	{r4, lr}
	uint8_t type = 0;

	if (false) {}
#ifdef USE_UINT8_REGISTER
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800e41e:	491e      	ldr	r1, [pc, #120]	@ (800e498 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 800e420:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800e422:	481e      	ldr	r0, [pc, #120]	@ (800e49c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 800e424:	f008 f90c 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 800e428:	bb40      	cbnz	r0, 800e47c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x60>
#endif
#ifdef USE_UINT16_REGISTER
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800e42a:	491d      	ldr	r1, [pc, #116]	@ (800e4a0 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x84>)
 800e42c:	481b      	ldr	r0, [pc, #108]	@ (800e49c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 800e42e:	f008 f907 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 800e432:	bb28      	cbnz	r0, 800e480 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x64>
#endif
#ifdef USE_UINT32_REGISTER
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800e434:	491b      	ldr	r1, [pc, #108]	@ (800e4a4 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x88>)
 800e436:	4819      	ldr	r0, [pc, #100]	@ (800e49c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 800e438:	f008 f902 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 800e43c:	bb10      	cbnz	r0, 800e484 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x68>
#endif
#ifdef USE_UINT64_REGISTER
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800e43e:	491a      	ldr	r1, [pc, #104]	@ (800e4a8 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x8c>)
 800e440:	4816      	ldr	r0, [pc, #88]	@ (800e49c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 800e442:	f008 f8fd 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 800e446:	b9f8      	cbnz	r0, 800e488 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x6c>
#endif
#ifdef USE_INT8_REGISTER
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800e448:	4918      	ldr	r1, [pc, #96]	@ (800e4ac <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x90>)
 800e44a:	4814      	ldr	r0, [pc, #80]	@ (800e49c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 800e44c:	f008 f8f8 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 800e450:	b9e0      	cbnz	r0, 800e48c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x70>
#endif
#ifdef USE_INT16_REGISTER
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
#endif
#ifdef USE_INT32_REGISTER
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800e452:	4917      	ldr	r1, [pc, #92]	@ (800e4b0 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x94>)
 800e454:	4811      	ldr	r0, [pc, #68]	@ (800e49c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 800e456:	f008 f8f3 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 800e45a:	b9c8      	cbnz	r0, 800e490 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x74>
#endif
#ifdef USE_INT64_REGISTER
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
#endif
#ifdef USE_FLOAT_REGISTER
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800e45c:	490f      	ldr	r1, [pc, #60]	@ (800e49c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 800e45e:	4608      	mov	r0, r1
 800e460:	f008 f8ee 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 800e464:	b9b0      	cbnz	r0, 800e494 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x78>
#endif
#ifdef USE_DOUBLE_REGISTER
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 800e466:	4913      	ldr	r1, [pc, #76]	@ (800e4b4 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x98>)
 800e468:	480c      	ldr	r0, [pc, #48]	@ (800e49c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 800e46a:	f008 f8e9 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
#endif
	else {*success = false; return 0;}
 800e46e:	2800      	cmp	r0, #0
 800e470:	bf14      	ite	ne
 800e472:	2309      	movne	r3, #9
 800e474:	2300      	moveq	r3, #0
 800e476:	7020      	strb	r0, [r4, #0]

	*success = true;
	return type;
}
 800e478:	4618      	mov	r0, r3
 800e47a:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800e47c:	2300      	movs	r3, #0
 800e47e:	e7fa      	b.n	800e476 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800e480:	2301      	movs	r3, #1
 800e482:	e7f8      	b.n	800e476 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800e484:	2302      	movs	r3, #2
 800e486:	e7f6      	b.n	800e476 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800e488:	2303      	movs	r3, #3
 800e48a:	e7f4      	b.n	800e476 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800e48c:	2304      	movs	r3, #4
 800e48e:	e7f2      	b.n	800e476 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800e490:	2306      	movs	r3, #6
 800e492:	e7f0      	b.n	800e476 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800e494:	2308      	movs	r3, #8
 800e496:	e7ee      	b.n	800e476 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
 800e498:	08016f7c 	.word	0x08016f7c
 800e49c:	08016f54 	.word	0x08016f54
 800e4a0:	08016f74 	.word	0x08016f74
 800e4a4:	08016f64 	.word	0x08016f64
 800e4a8:	08016f5c 	.word	0x08016f5c
 800e4ac:	08016f84 	.word	0x08016f84
 800e4b0:	08016f6c 	.word	0x08016f6c
 800e4b4:	08016f4c 	.word	0x08016f4c

0800e4b8 <_ZN15PlatformSensorsC1Ev>:
/**
 * @brief Class constructor
 */
PlatformSensors::PlatformSensors() {

}
 800e4b8:	4770      	bx	lr
	...

0800e4bc <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb>:
 * @param output length: output length
 * @param input use_semaphore: false to disable the use of semaphores for this access. DEFAULT=true
 * @return whether successful
 */
template <typename T>
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 800e4bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4c0:	f2ad 4d14 	subw	sp, sp, #1044	@ 0x414
 800e4c4:	4689      	mov	r9, r1
	bool success;
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800e4c6:	f04f 31ff 	mov.w	r1, #4294967295
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 800e4ca:	461f      	mov	r7, r3
 800e4cc:	9000      	str	r0, [sp, #0]
 800e4ce:	4614      	mov	r4, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800e4d0:	6800      	ldr	r0, [r0, #0]
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 800e4d2:	f89d b438 	ldrb.w	fp, [sp, #1080]	@ 0x438
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800e4d6:	f7fd fe5f 	bl	800c198 <osSemaphoreAcquire>
	// Find register
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 800e4da:	f10d 020f 	add.w	r2, sp, #15
 800e4de:	4649      	mov	r1, r9
 800e4e0:	9800      	ldr	r0, [sp, #0]
 800e4e2:	f006 fc3a 	bl	8014d5a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 800e4e6:	f89d 300f 	ldrb.w	r3, [sp, #15]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 800e4ea:	4605      	mov	r5, r0
	if (!success) {
 800e4ec:	b953      	cbnz	r3, 800e504 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x48>
	}

	// Get type ID
	uint8_t registered_type = GetTypeID<T>(&success);
	if (!success) {
		osSemaphoreRelease(RegistersSemaphore);
 800e4ee:	9b00      	ldr	r3, [sp, #0]
		return false;
 800e4f0:	f04f 0a00 	mov.w	sl, #0
		osSemaphoreRelease(RegistersSemaphore);
 800e4f4:	6818      	ldr	r0, [r3, #0]
 800e4f6:	f7fd fe83 	bl	800c200 <osSemaphoreRelease>
		osSemaphoreRelease(RegistersSemaphore);
		return true;
	}
	osSemaphoreRelease(RegistersSemaphore);
	return true;
}
 800e4fa:	4650      	mov	r0, sl
 800e4fc:	f20d 4d14 	addw	sp, sp, #1044	@ 0x414
 800e500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 800e504:	f10d 000f 	add.w	r0, sp, #15
 800e508:	f7ff ff88 	bl	800e41c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>
	if (!success) {
 800e50c:	f89d a00f 	ldrb.w	sl, [sp, #15]
 800e510:	f1ba 0f00 	cmp.w	sl, #0
 800e514:	d0eb      	beq.n	800e4ee <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x32>
	if (target_register->register_info.type != registered_type) {
 800e516:	792b      	ldrb	r3, [r5, #4]
 800e518:	4283      	cmp	r3, r0
 800e51a:	d1e8      	bne.n	800e4ee <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x32>
	if (callbacks[target_register->register_info.type] == NULL) {
 800e51c:	3304      	adds	r3, #4
 800e51e:	9a00      	ldr	r2, [sp, #0]
 800e520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d0e2      	beq.n	800e4ee <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x32>
	if (target_register->access.read) {
 800e528:	7a6a      	ldrb	r2, [r5, #9]
 800e52a:	2a00      	cmp	r2, #0
 800e52c:	d05f      	beq.n	800e5ee <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x132>
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 800e52e:	8969      	ldrh	r1, [r5, #10]
		success = false; // false by default to use pointer mode if the callback doesn't update the flag
 800e530:	2200      	movs	r2, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800e532:	e9d3 0300 	ldrd	r0, r3, [r3]
 800e536:	f88d 200f 	strb.w	r2, [sp, #15]
 800e53a:	1a1b      	subs	r3, r3, r0
	if (__n >= this->size())
 800e53c:	ebb1 1f23 	cmp.w	r1, r3, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800e540:	ea4f 1223 	mov.w	r2, r3, asr #4
	if (__n >= this->size())
 800e544:	d302      	bcc.n	800e54c <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x90>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 800e546:	4839      	ldr	r0, [pc, #228]	@ (800e62c <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x170>)
 800e548:	f008 f89b 	bl	8016682 <_ZSt24__throw_out_of_range_fmtPKcz>
	return *(this->_M_impl._M_start + __n);
 800e54c:	010b      	lsls	r3, r1, #4
 800e54e:	eb00 1101 	add.w	r1, r0, r1, lsl #4
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 800e552:	f850 8003 	ldr.w	r8, [r0, r3]
 800e556:	684b      	ldr	r3, [r1, #4]
 800e558:	9301      	str	r3, [sp, #4]
 800e55a:	68cb      	ldr	r3, [r1, #12]
 800e55c:	461e      	mov	r6, r3
		if (use_semaphore && target_register->register_semaphore != NULL) {
 800e55e:	f1bb 0f00 	cmp.w	fp, #0
 800e562:	d006      	beq.n	800e572 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xb6>
 800e564:	68eb      	ldr	r3, [r5, #12]
 800e566:	b123      	cbz	r3, 800e572 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xb6>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 800e568:	f04f 31ff 	mov.w	r1, #4294967295
 800e56c:	6818      	ldr	r0, [r3, #0]
 800e56e:	f7fd fe13 	bl	800c198 <osSemaphoreAcquire>
		if (target_register->mode.callbacks) {
 800e572:	786b      	ldrb	r3, [r5, #1]
 800e574:	b1e3      	cbz	r3, 800e5b0 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xf4>
			if (output != NULL) {
 800e576:	2c00      	cmp	r4, #0
 800e578:	d03e      	beq.n	800e5f8 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x13c>
				*callback_output = output;
 800e57a:	4622      	mov	r2, r4
 800e57c:	2300      	movs	r3, #0
 800e57e:	601a      	str	r2, [r3, #0]
			if (callbacks.read != NULL) {
 800e580:	b1b6      	cbz	r6, 800e5b0 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xf4>
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 800e582:	463b      	mov	r3, r7
 800e584:	2200      	movs	r2, #0
 800e586:	4649      	mov	r1, r9
 800e588:	9801      	ldr	r0, [sp, #4]
 800e58a:	47b0      	blx	r6
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 800e58c:	796b      	ldrb	r3, [r5, #5]
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 800e58e:	f88d 000f 	strb.w	r0, [sp, #15]
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 800e592:	2b00      	cmp	r3, #0
 800e594:	d032      	beq.n	800e5fc <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x140>
 800e596:	88eb      	ldrh	r3, [r5, #6]
 800e598:	b103      	cbz	r3, 800e59c <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xe0>
					*length = 1;
 800e59a:	803b      	strh	r3, [r7, #0]
				if (*callback_output != output && output != NULL) {
 800e59c:	2300      	movs	r3, #0
 800e59e:	6819      	ldr	r1, [r3, #0]
 800e5a0:	42a1      	cmp	r1, r4
 800e5a2:	d005      	beq.n	800e5b0 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xf4>
 800e5a4:	b124      	cbz	r4, 800e5b0 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xf4>
						output[index] = (*callback_output )[index];
 800e5a6:	883a      	ldrh	r2, [r7, #0]
 800e5a8:	4620      	mov	r0, r4
 800e5aa:	0092      	lsls	r2, r2, #2
 800e5ac:	f008 fa36 	bl	8016a1c <memcpy>
		if (not success && target_register->mode.pointer) {
 800e5b0:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800e5b4:	b99b      	cbnz	r3, 800e5de <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x122>
 800e5b6:	782b      	ldrb	r3, [r5, #0]
 800e5b8:	b18b      	cbz	r3, 800e5de <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x122>
			success = true;
 800e5ba:	2301      	movs	r3, #1
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 800e5bc:	796a      	ldrb	r2, [r5, #5]
			success = true;
 800e5be:	f88d 300f 	strb.w	r3, [sp, #15]
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 800e5c2:	b35a      	cbz	r2, 800e61c <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x160>
 800e5c4:	88ea      	ldrh	r2, [r5, #6]
 800e5c6:	bb02      	cbnz	r2, 800e60a <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x14e>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800e5c8:	e9d8 2300 	ldrd	r2, r3, [r8]
 800e5cc:	1a9b      	subs	r3, r3, r2
 800e5ce:	109b      	asrs	r3, r3, #2
				*length = register_vector->size();
 800e5d0:	803b      	strh	r3, [r7, #0]
				if (output != NULL) {
 800e5d2:	b124      	cbz	r4, 800e5de <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x122>
 800e5d4:	b29b      	uxth	r3, r3
 800e5d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
					for (uint16_t index = 0; index < *length; index++) {
 800e5da:	429a      	cmp	r2, r3
 800e5dc:	d110      	bne.n	800e600 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x144>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 800e5de:	f1bb 0f00 	cmp.w	fp, #0
 800e5e2:	d004      	beq.n	800e5ee <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x132>
 800e5e4:	68eb      	ldr	r3, [r5, #12]
 800e5e6:	b113      	cbz	r3, 800e5ee <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x132>
			osSemaphoreRelease(*(target_register->register_semaphore));
 800e5e8:	6818      	ldr	r0, [r3, #0]
 800e5ea:	f7fd fe09 	bl	800c200 <osSemaphoreRelease>
	osSemaphoreRelease(RegistersSemaphore);
 800e5ee:	9b00      	ldr	r3, [sp, #0]
 800e5f0:	6818      	ldr	r0, [r3, #0]
 800e5f2:	f7fd fe05 	bl	800c200 <osSemaphoreRelease>
	return true;
 800e5f6:	e780      	b.n	800e4fa <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x3e>
				*callback_output = output_buffer; // use a temporary buffer to store values if not input. TODO the size is limited so there is possibly an issue if output == NULL and length > 256
 800e5f8:	aa04      	add	r2, sp, #16
 800e5fa:	e7bf      	b.n	800e57c <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xc0>
					*length = 1;
 800e5fc:	2301      	movs	r3, #1
 800e5fe:	e7cc      	b.n	800e59a <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xde>
						output[index] = (*register_vector)[index];
 800e600:	f852 1b04 	ldr.w	r1, [r2], #4
 800e604:	f844 1b04 	str.w	r1, [r4], #4
					for (uint16_t index = 0; index < *length; index++) {
 800e608:	e7e7      	b.n	800e5da <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x11e>
				*length = target_register->register_info.length;
 800e60a:	803a      	strh	r2, [r7, #0]
				if (output != NULL) {
 800e60c:	2c00      	cmp	r4, #0
 800e60e:	d0e6      	beq.n	800e5de <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x122>
 800e610:	0092      	lsls	r2, r2, #2
 800e612:	4641      	mov	r1, r8
 800e614:	4620      	mov	r0, r4
 800e616:	f008 f909 	bl	801682c <memmove>
	  return __result + _Num;
 800e61a:	e7e0      	b.n	800e5de <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x122>
				*length = 1;
 800e61c:	803b      	strh	r3, [r7, #0]
				if (output != NULL) {
 800e61e:	2c00      	cmp	r4, #0
 800e620:	d0dd      	beq.n	800e5de <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x122>
					*output = *callbacks.pointer;
 800e622:	f8d8 3000 	ldr.w	r3, [r8]
 800e626:	6023      	str	r3, [r4, #0]
 800e628:	e7d9      	b.n	800e5de <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x122>
 800e62a:	bf00      	nop
 800e62c:	08016d78 	.word	0x08016d78

0800e630 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
 800e630:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800e632:	b170      	cbz	r0, 800e652 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0+0x22>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800e634:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 800e638:	d306      	bcc.n	800e648 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0+0x18>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800e63a:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800e63e:	d301      	bcc.n	800e644 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0+0x14>
	      std::__throw_bad_array_new_length();
 800e640:	f008 f819 	bl	8016676 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800e644:	f008 f814 	bl	8016670 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800e648:	0080      	lsls	r0, r0, #2
      }
 800e64a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e64e:	f007 bf60 	b.w	8016512 <_Znwj>
 800e652:	bd08      	pop	{r3, pc}

0800e654 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800e654:	2800      	cmp	r0, #0
      _M_allocate(size_t __n)
 800e656:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800e658:	d006      	beq.n	800e668 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0+0x14>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800e65a:	da01      	bge.n	800e660 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0+0xc>
	    std::__throw_bad_alloc();
 800e65c:	f008 f808 	bl	8016670 <_ZSt17__throw_bad_allocv>
      }
 800e660:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800e664:	f007 bf55 	b.w	8016512 <_Znwj>
 800e668:	bd08      	pop	{r3, pc}
	...

0800e66c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 800e66c:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800e66e:	491e      	ldr	r1, [pc, #120]	@ (800e6e8 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 800e670:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800e672:	481e      	ldr	r0, [pc, #120]	@ (800e6ec <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 800e674:	f007 ffe4 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 800e678:	bb40      	cbnz	r0, 800e6cc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800e67a:	491d      	ldr	r1, [pc, #116]	@ (800e6f0 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x84>)
 800e67c:	481b      	ldr	r0, [pc, #108]	@ (800e6ec <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 800e67e:	f007 ffdf 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 800e682:	bb28      	cbnz	r0, 800e6d0 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800e684:	491b      	ldr	r1, [pc, #108]	@ (800e6f4 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x88>)
 800e686:	4819      	ldr	r0, [pc, #100]	@ (800e6ec <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 800e688:	f007 ffda 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 800e68c:	bb10      	cbnz	r0, 800e6d4 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800e68e:	491a      	ldr	r1, [pc, #104]	@ (800e6f8 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x8c>)
 800e690:	4816      	ldr	r0, [pc, #88]	@ (800e6ec <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 800e692:	f007 ffd5 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 800e696:	b9f8      	cbnz	r0, 800e6d8 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800e698:	4918      	ldr	r1, [pc, #96]	@ (800e6fc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x90>)
 800e69a:	4814      	ldr	r0, [pc, #80]	@ (800e6ec <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 800e69c:	f007 ffd0 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 800e6a0:	b9e0      	cbnz	r0, 800e6dc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800e6a2:	4917      	ldr	r1, [pc, #92]	@ (800e700 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x94>)
 800e6a4:	4811      	ldr	r0, [pc, #68]	@ (800e6ec <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 800e6a6:	f007 ffcb 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 800e6aa:	b9c8      	cbnz	r0, 800e6e0 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800e6ac:	490f      	ldr	r1, [pc, #60]	@ (800e6ec <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 800e6ae:	4608      	mov	r0, r1
 800e6b0:	f007 ffc6 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 800e6b4:	b9b0      	cbnz	r0, 800e6e4 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 800e6b6:	4913      	ldr	r1, [pc, #76]	@ (800e704 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x98>)
 800e6b8:	480c      	ldr	r0, [pc, #48]	@ (800e6ec <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 800e6ba:	f007 ffc1 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 800e6be:	2800      	cmp	r0, #0
 800e6c0:	bf14      	ite	ne
 800e6c2:	2309      	movne	r3, #9
 800e6c4:	2300      	moveq	r3, #0
 800e6c6:	7020      	strb	r0, [r4, #0]
}
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	e7fa      	b.n	800e6c6 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800e6d0:	2301      	movs	r3, #1
 800e6d2:	e7f8      	b.n	800e6c6 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800e6d4:	2302      	movs	r3, #2
 800e6d6:	e7f6      	b.n	800e6c6 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800e6d8:	2303      	movs	r3, #3
 800e6da:	e7f4      	b.n	800e6c6 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800e6dc:	2304      	movs	r3, #4
 800e6de:	e7f2      	b.n	800e6c6 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800e6e0:	2306      	movs	r3, #6
 800e6e2:	e7f0      	b.n	800e6c6 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800e6e4:	2308      	movs	r3, #8
 800e6e6:	e7ee      	b.n	800e6c6 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
 800e6e8:	08016f7c 	.word	0x08016f7c
 800e6ec:	08016f54 	.word	0x08016f54
 800e6f0:	08016f74 	.word	0x08016f74
 800e6f4:	08016f64 	.word	0x08016f64
 800e6f8:	08016f5c 	.word	0x08016f5c
 800e6fc:	08016f84 	.word	0x08016f84
 800e700:	08016f6c 	.word	0x08016f6c
 800e704:	08016f4c 	.word	0x08016f4c

0800e708 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 800e708:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800e70a:	491e      	ldr	r1, [pc, #120]	@ (800e784 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 800e70c:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800e70e:	481e      	ldr	r0, [pc, #120]	@ (800e788 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x80>)
 800e710:	f007 ff96 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 800e714:	bb40      	cbnz	r0, 800e768 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800e716:	491d      	ldr	r1, [pc, #116]	@ (800e78c <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x84>)
 800e718:	481b      	ldr	r0, [pc, #108]	@ (800e788 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x80>)
 800e71a:	f007 ff91 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 800e71e:	bb28      	cbnz	r0, 800e76c <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800e720:	491b      	ldr	r1, [pc, #108]	@ (800e790 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x88>)
 800e722:	4819      	ldr	r0, [pc, #100]	@ (800e788 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x80>)
 800e724:	f007 ff8c 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 800e728:	bb10      	cbnz	r0, 800e770 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800e72a:	491a      	ldr	r1, [pc, #104]	@ (800e794 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x8c>)
 800e72c:	4816      	ldr	r0, [pc, #88]	@ (800e788 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x80>)
 800e72e:	f007 ff87 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 800e732:	b9f8      	cbnz	r0, 800e774 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800e734:	4914      	ldr	r1, [pc, #80]	@ (800e788 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x80>)
 800e736:	4608      	mov	r0, r1
 800e738:	f007 ff82 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 800e73c:	b9e0      	cbnz	r0, 800e778 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800e73e:	4916      	ldr	r1, [pc, #88]	@ (800e798 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x90>)
 800e740:	4811      	ldr	r0, [pc, #68]	@ (800e788 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x80>)
 800e742:	f007 ff7d 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 800e746:	b9c8      	cbnz	r0, 800e77c <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800e748:	4914      	ldr	r1, [pc, #80]	@ (800e79c <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x94>)
 800e74a:	480f      	ldr	r0, [pc, #60]	@ (800e788 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x80>)
 800e74c:	f007 ff78 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 800e750:	b9b0      	cbnz	r0, 800e780 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 800e752:	4913      	ldr	r1, [pc, #76]	@ (800e7a0 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x98>)
 800e754:	480c      	ldr	r0, [pc, #48]	@ (800e788 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x80>)
 800e756:	f007 ff73 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 800e75a:	2800      	cmp	r0, #0
 800e75c:	bf14      	ite	ne
 800e75e:	2309      	movne	r3, #9
 800e760:	2300      	moveq	r3, #0
 800e762:	7020      	strb	r0, [r4, #0]
}
 800e764:	4618      	mov	r0, r3
 800e766:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800e768:	2300      	movs	r3, #0
 800e76a:	e7fa      	b.n	800e762 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800e76c:	2301      	movs	r3, #1
 800e76e:	e7f8      	b.n	800e762 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800e770:	2302      	movs	r3, #2
 800e772:	e7f6      	b.n	800e762 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800e774:	2303      	movs	r3, #3
 800e776:	e7f4      	b.n	800e762 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800e778:	2304      	movs	r3, #4
 800e77a:	e7f2      	b.n	800e762 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800e77c:	2306      	movs	r3, #6
 800e77e:	e7f0      	b.n	800e762 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800e780:	2308      	movs	r3, #8
 800e782:	e7ee      	b.n	800e762 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x5a>
 800e784:	08016f7c 	.word	0x08016f7c
 800e788:	08016f84 	.word	0x08016f84
 800e78c:	08016f74 	.word	0x08016f74
 800e790:	08016f64 	.word	0x08016f64
 800e794:	08016f5c 	.word	0x08016f5c
 800e798:	08016f6c 	.word	0x08016f6c
 800e79c:	08016f54 	.word	0x08016f54
 800e7a0:	08016f4c 	.word	0x08016f4c

0800e7a4 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0>:
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800e7a4:	e9d0 3000 	ldrd	r3, r0, [r0]
 * @param input start_index: the index to start the extraction
 * @param output success: whether successful
 * @return the typed extracted value
 */
template<typename T>
T Communication::ExtractSingle(std::vector<uint8_t> payload, uint16_t start_index, bool* success) {
 800e7a8:	b510      	push	{r4, lr}
 800e7aa:	1ac0      	subs	r0, r0, r3
	uint64_t data = 0;
	uint8_t type_length = sizeof(T);

	// Check payload length
	if (payload.size() < start_index + type_length) {
 800e7ac:	1d0c      	adds	r4, r1, #4
 800e7ae:	42a0      	cmp	r0, r4
 800e7b0:	d310      	bcc.n	800e7d4 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0+0x30>
 800e7b2:	4419      	add	r1, r3
 800e7b4:	2018      	movs	r0, #24
	uint64_t data = 0;
 800e7b6:	2300      	movs	r3, #0
		return 0;
	}

	// Fill a uint64 variable
	for (uint8_t index = 0; index < type_length; index++) {
		data |= (payload[start_index + index] << ((type_length - 1 - index) << 3));
 800e7b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e7bc:	4084      	lsls	r4, r0
	for (uint8_t index = 0; index < type_length; index++) {
 800e7be:	3808      	subs	r0, #8
 800e7c0:	f110 0f08 	cmn.w	r0, #8
		data |= (payload[start_index + index] << ((type_length - 1 - index) << 3));
 800e7c4:	ea43 0304 	orr.w	r3, r3, r4
	for (uint8_t index = 0; index < type_length; index++) {
 800e7c8:	d1f6      	bne.n	800e7b8 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0+0x14>
	// Recast to the expected type
    T* reinterpreted_data = reinterpret_cast<T*>(&data);

    // Return data
    *success = true;
	return *reinterpreted_data;
 800e7ca:	ee00 3a10 	vmov	s0, r3
 800e7ce:	2301      	movs	r3, #1
		*success = false;
 800e7d0:	7013      	strb	r3, [r2, #0]
}
 800e7d2:	bd10      	pop	{r4, pc}
 800e7d4:	2300      	movs	r3, #0
		return 0;
 800e7d6:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800e7dc <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0+0x38>
 800e7da:	e7f9      	b.n	800e7d0 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0+0x2c>
 800e7dc:	00000000 	.word	0x00000000

0800e7e0 <_ZN13Communication13ExtractSingleIaEET_St6vectorIhSaIhEEtPb.isra.0>:
T Communication::ExtractSingle(std::vector<uint8_t> payload, uint16_t start_index, bool* success) {
 800e7e0:	b510      	push	{r4, lr}
 800e7e2:	e9d0 4300 	ldrd	r4, r3, [r0]
	if (payload.size() < start_index + type_length) {
 800e7e6:	1c48      	adds	r0, r1, #1
 800e7e8:	1b1b      	subs	r3, r3, r4
 800e7ea:	4283      	cmp	r3, r0
		*success = false;
 800e7ec:	bf33      	iteet	cc
 800e7ee:	2300      	movcc	r3, #0
    *success = true;
 800e7f0:	2301      	movcs	r3, #1
	return *reinterpreted_data;
 800e7f2:	5660      	ldrsbcs	r0, [r4, r1]
		return 0;
 800e7f4:	4618      	movcc	r0, r3
 800e7f6:	7013      	strb	r3, [r2, #0]
}
 800e7f8:	bd10      	pop	{r4, pc}

0800e7fa <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>:
T Communication::ExtractSingle(std::vector<uint8_t> payload, uint16_t start_index, bool* success) {
 800e7fa:	b510      	push	{r4, lr}
 800e7fc:	e9d0 4300 	ldrd	r4, r3, [r0]
	if (payload.size() < start_index + type_length) {
 800e800:	1c48      	adds	r0, r1, #1
 800e802:	1b1b      	subs	r3, r3, r4
 800e804:	4283      	cmp	r3, r0
		*success = false;
 800e806:	bf33      	iteet	cc
 800e808:	2300      	movcc	r3, #0
    *success = true;
 800e80a:	2301      	movcs	r3, #1
		data |= (payload[start_index + index] << ((type_length - 1 - index) << 3));
 800e80c:	5c60      	ldrbcs	r0, [r4, r1]
		return 0;
 800e80e:	4618      	movcc	r0, r3
 800e810:	7013      	strb	r3, [r2, #0]
}
 800e812:	bd10      	pop	{r4, pc}

0800e814 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800e814:	2800      	cmp	r0, #0
      _M_allocate(size_t __n)
 800e816:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800e818:	d006      	beq.n	800e828 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0x14>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800e81a:	da01      	bge.n	800e820 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0xc>
	    std::__throw_bad_alloc();
 800e81c:	f007 ff28 	bl	8016670 <_ZSt17__throw_bad_allocv>
      }
 800e820:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800e824:	f007 be75 	b.w	8016512 <_Znwj>
 800e828:	bd08      	pop	{r3, pc}
	...

0800e82c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>:
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800e82c:	491e      	ldr	r1, [pc, #120]	@ (800e8a8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 800e82e:	b510      	push	{r4, lr}
 800e830:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800e832:	4608      	mov	r0, r1
 800e834:	f007 ff04 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 800e838:	bb40      	cbnz	r0, 800e88c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800e83a:	491c      	ldr	r1, [pc, #112]	@ (800e8ac <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x80>)
 800e83c:	481a      	ldr	r0, [pc, #104]	@ (800e8a8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 800e83e:	f007 feff 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 800e842:	bb28      	cbnz	r0, 800e890 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800e844:	491a      	ldr	r1, [pc, #104]	@ (800e8b0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x84>)
 800e846:	4818      	ldr	r0, [pc, #96]	@ (800e8a8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 800e848:	f007 fefa 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 800e84c:	bb10      	cbnz	r0, 800e894 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800e84e:	4919      	ldr	r1, [pc, #100]	@ (800e8b4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x88>)
 800e850:	4815      	ldr	r0, [pc, #84]	@ (800e8a8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 800e852:	f007 fef5 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 800e856:	b9f8      	cbnz	r0, 800e898 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800e858:	4917      	ldr	r1, [pc, #92]	@ (800e8b8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x8c>)
 800e85a:	4813      	ldr	r0, [pc, #76]	@ (800e8a8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 800e85c:	f007 fef0 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 800e860:	b9e0      	cbnz	r0, 800e89c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800e862:	4916      	ldr	r1, [pc, #88]	@ (800e8bc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x90>)
 800e864:	4810      	ldr	r0, [pc, #64]	@ (800e8a8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 800e866:	f007 feeb 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 800e86a:	b9c8      	cbnz	r0, 800e8a0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800e86c:	4914      	ldr	r1, [pc, #80]	@ (800e8c0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x94>)
 800e86e:	480e      	ldr	r0, [pc, #56]	@ (800e8a8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 800e870:	f007 fee6 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 800e874:	b9b0      	cbnz	r0, 800e8a4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 800e876:	4913      	ldr	r1, [pc, #76]	@ (800e8c4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x98>)
 800e878:	480b      	ldr	r0, [pc, #44]	@ (800e8a8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 800e87a:	f007 fee1 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 800e87e:	2800      	cmp	r0, #0
 800e880:	bf14      	ite	ne
 800e882:	2309      	movne	r3, #9
 800e884:	2300      	moveq	r3, #0
 800e886:	7020      	strb	r0, [r4, #0]
}
 800e888:	4618      	mov	r0, r3
 800e88a:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800e88c:	2300      	movs	r3, #0
 800e88e:	e7fa      	b.n	800e886 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800e890:	2301      	movs	r3, #1
 800e892:	e7f8      	b.n	800e886 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800e894:	2302      	movs	r3, #2
 800e896:	e7f6      	b.n	800e886 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800e898:	2303      	movs	r3, #3
 800e89a:	e7f4      	b.n	800e886 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800e89c:	2304      	movs	r3, #4
 800e89e:	e7f2      	b.n	800e886 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800e8a0:	2306      	movs	r3, #6
 800e8a2:	e7f0      	b.n	800e886 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800e8a4:	2308      	movs	r3, #8
 800e8a6:	e7ee      	b.n	800e886 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
 800e8a8:	08016f7c 	.word	0x08016f7c
 800e8ac:	08016f74 	.word	0x08016f74
 800e8b0:	08016f64 	.word	0x08016f64
 800e8b4:	08016f5c 	.word	0x08016f5c
 800e8b8:	08016f84 	.word	0x08016f84
 800e8bc:	08016f6c 	.word	0x08016f6c
 800e8c0:	08016f54 	.word	0x08016f54
 800e8c4:	08016f4c 	.word	0x08016f4c

0800e8c8 <_ZN13CommunicationC1Ev>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800e8ce:	e9c0 2208 	strd	r2, r2, [r0, #32]
 800e8d2:	e9c0 220a 	strd	r2, r2, [r0, #40]	@ 0x28
 800e8d6:	e9c0 220c 	strd	r2, r2, [r0, #48]	@ 0x30
 800e8da:	6382      	str	r2, [r0, #56]	@ 0x38

/**
 * @brief class Constructor
 */
Communication::Communication() {
	address = UNKNOWN;
 800e8dc:	22fd      	movs	r2, #253	@ 0xfd
 800e8de:	7502      	strb	r2, [r0, #20]
}
 800e8e0:	4770      	bx	lr

0800e8e2 <_ZN13Communication4InitEP9RegistersP8ServicesP17MasterSubscribersP4LEDS>:
 * @param input registers_: the Registers instance
 * @param input services_: the Services instance
 * @param input subscribers_: the MasterSubscribers instance
 * @param input leds_: the LEDS instance
 */
void Communication::Init(Registers* registers_, Services* services_, MasterSubscribers* subscribers_, LEDS* leds_) {
 800e8e2:	b510      	push	{r4, lr}
	registers = registers_;
	services = services_;
 800e8e4:	e9c0 1201 	strd	r1, r2, [r0, #4]
	subscribers = subscribers_;
 800e8e8:	60c3      	str	r3, [r0, #12]
	leds = leds_;

	CommunicationSemaphore = osSemaphoreNew(1,1,NULL);
 800e8ea:	2101      	movs	r1, #1
	leds = leds_;
 800e8ec:	9b02      	ldr	r3, [sp, #8]
void Communication::Init(Registers* registers_, Services* services_, MasterSubscribers* subscribers_, LEDS* leds_) {
 800e8ee:	4604      	mov	r4, r0
	CommunicationSemaphore = osSemaphoreNew(1,1,NULL);
 800e8f0:	2200      	movs	r2, #0
	leds = leds_;
 800e8f2:	6103      	str	r3, [r0, #16]
	CommunicationSemaphore = osSemaphoreNew(1,1,NULL);
 800e8f4:	4608      	mov	r0, r1
 800e8f6:	f7fd fbf3 	bl	800c0e0 <osSemaphoreNew>
 800e8fa:	6020      	str	r0, [r4, #0]
	osSemaphoreRelease(CommunicationSemaphore);
}
 800e8fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSemaphoreRelease(CommunicationSemaphore);
 800e900:	f7fd bc7e 	b.w	800c200 <osSemaphoreRelease>

0800e904 <_ZN13Communication12FindProtocolEhPb>:
 *
 * @param input ID: the protocol ID to find
 * @param output success: true if protocol found
 * @return the protocol pointer
 */
CommunicationProtocol* Communication::FindProtocol(uint8_t ID, bool* success) {
 800e904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e908:	460e      	mov	r6, r1
 800e90a:	4615      	mov	r5, r2
 800e90c:	e9d0 4809 	ldrd	r4, r8, [r0, #36]	@ 0x24
	for (CommunicationProtocol* &protocol : protocols) {
 800e910:	45a0      	cmp	r8, r4
 800e912:	4627      	mov	r7, r4
 800e914:	d102      	bne.n	800e91c <_ZN13Communication12FindProtocolEhPb+0x18>
 800e916:	2300      	movs	r3, #0
			*success = true;
			return protocol_pointer;
		}
	}
	*success = false;
	return NULL;
 800e918:	4618      	mov	r0, r3
 800e91a:	e008      	b.n	800e92e <_ZN13Communication12FindProtocolEhPb+0x2a>
		if (protocol->InterfaceExists(ID)) {
 800e91c:	4631      	mov	r1, r6
 800e91e:	6838      	ldr	r0, [r7, #0]
 800e920:	f004 fd6d 	bl	80133fe <_ZN21CommunicationProtocol15InterfaceExistsEh>
 800e924:	3404      	adds	r4, #4
 800e926:	4603      	mov	r3, r0
 800e928:	2800      	cmp	r0, #0
 800e92a:	d0f1      	beq.n	800e910 <_ZN13Communication12FindProtocolEhPb+0xc>
			CommunicationProtocol* protocol_pointer = protocol;
 800e92c:	6838      	ldr	r0, [r7, #0]
			*success = true;
 800e92e:	702b      	strb	r3, [r5, #0]
}
 800e930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e934 <_ZN13Communication16InGroupAddressesEh>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800e934:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 *
 * @param input address: a 8-bit address
 * @return true if the input adddress is part of the group addresses
 */
bool Communication::InGroupAddresses(uint8_t address) {
	for (uint8_t group_address : group_addresses) {
 800e938:	4293      	cmp	r3, r2
 800e93a:	d101      	bne.n	800e940 <_ZN13Communication16InGroupAddressesEh+0xc>
		if (group_address == address) return true;
	}
	return false;
 800e93c:	2000      	movs	r0, #0
 800e93e:	4770      	bx	lr
	for (uint8_t group_address : group_addresses) {
 800e940:	f813 0b01 	ldrb.w	r0, [r3], #1
		if (group_address == address) return true;
 800e944:	4288      	cmp	r0, r1
 800e946:	d1f7      	bne.n	800e938 <_ZN13Communication16InGroupAddressesEh+0x4>
 800e948:	2001      	movs	r0, #1
}
 800e94a:	4770      	bx	lr

0800e94c <_ZN13Communication13AcceptMessageE13MessageHeader>:
	return (message.target_address == ALL || message.target_address == address || InGroupAddresses(message.target_address));
 800e94c:	7c09      	ldrb	r1, [r1, #16]
 800e94e:	29ff      	cmp	r1, #255	@ 0xff
 800e950:	d004      	beq.n	800e95c <_ZN13Communication13AcceptMessageE13MessageHeader+0x10>
 800e952:	7d03      	ldrb	r3, [r0, #20]
 800e954:	428b      	cmp	r3, r1
 800e956:	d001      	beq.n	800e95c <_ZN13Communication13AcceptMessageE13MessageHeader+0x10>
 800e958:	f7ff bfec 	b.w	800e934 <_ZN13Communication16InGroupAddressesEh>
}
 800e95c:	2001      	movs	r0, #1
 800e95e:	4770      	bx	lr

0800e960 <_ZN13Communication5GetIDEPvPb>:
 *
 * @param input handle: base pointer of an hardware interface
 * @param output success: return true if the protocol has been successfully found
 * @return the registered interface ID of the input hardware handle
 */
uint8_t Communication::GetID(void* handle, bool* success) {
 800e960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e962:	460e      	mov	r6, r1
 800e964:	4614      	mov	r4, r2
 800e966:	e9d0 5709 	ldrd	r5, r7, [r0, #36]	@ 0x24
	uint8_t ID;
	for (CommunicationProtocol* protocol : protocols) {
 800e96a:	42af      	cmp	r7, r5
 800e96c:	d101      	bne.n	800e972 <_ZN13Communication5GetIDEPvPb+0x12>
		ID = protocol->GetID(handle, success);
		if (*success)
			return ID;
	}
	return 0;
 800e96e:	2000      	movs	r0, #0
 800e970:	e009      	b.n	800e986 <_ZN13Communication5GetIDEPvPb+0x26>
	for (CommunicationProtocol* protocol : protocols) {
 800e972:	f855 0b04 	ldr.w	r0, [r5], #4
		ID = protocol->GetID(handle, success);
 800e976:	4622      	mov	r2, r4
 800e978:	4631      	mov	r1, r6
 800e97a:	6803      	ldr	r3, [r0, #0]
 800e97c:	68db      	ldr	r3, [r3, #12]
 800e97e:	4798      	blx	r3
		if (*success)
 800e980:	7823      	ldrb	r3, [r4, #0]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d0f1      	beq.n	800e96a <_ZN13Communication5GetIDEPvPb+0xa>
}
 800e986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e988 <_ZN13Communication9GetBufferEhPb>:
 *
 * @param input ID: the interface ID
 * @param output success: return true if the memory pointer successfully found
 * @return the memory pointer allocated to the hardware interface
 */
std::vector<uint8_t>* Communication::GetBuffer(uint8_t ID, bool* success) {
 800e988:	b538      	push	{r3, r4, r5, lr}
 800e98a:	460c      	mov	r4, r1
 800e98c:	4615      	mov	r5, r2
	CommunicationProtocol* protocol = FindProtocol(ID, success);
 800e98e:	f7ff ffb9 	bl	800e904 <_ZN13Communication12FindProtocolEhPb>
	if (*success) {
		std::vector<uint8_t>* buffer = protocol->GetBuffer(ID, success);
 800e992:	462a      	mov	r2, r5
 800e994:	4621      	mov	r1, r4
		if (*success)
			return buffer;
	}
}
 800e996:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		std::vector<uint8_t>* buffer = protocol->GetBuffer(ID, success);
 800e99a:	f004 bd47 	b.w	801342c <_ZN21CommunicationProtocol9GetBufferEhPb>

0800e99e <_ZN13Communication14GetBufferIndexEhPb>:
 *
 * @param input ID: the interface ID
 * @param output success: return true if the index has been successfully found
 * @return the pointer to the index variable
 */
uint16_t* Communication::GetBufferIndex(uint8_t ID, bool* success) {
 800e99e:	b538      	push	{r3, r4, r5, lr}
 800e9a0:	4614      	mov	r4, r2
 800e9a2:	460d      	mov	r5, r1
	CommunicationProtocol* protocol = FindProtocol(ID, success);
 800e9a4:	f7ff ffae 	bl	800e904 <_ZN13Communication12FindProtocolEhPb>
	if (*success) {
 800e9a8:	7823      	ldrb	r3, [r4, #0]
 800e9aa:	b12b      	cbz	r3, 800e9b8 <_ZN13Communication14GetBufferIndexEhPb+0x1a>
		uint16_t* buffer_index = protocol->GetBufferIndex(ID, success);
 800e9ac:	4622      	mov	r2, r4
 800e9ae:	4629      	mov	r1, r5
 800e9b0:	f004 fd4a 	bl	8013448 <_ZN21CommunicationProtocol14GetBufferIndexEhPb>
		if (*success)
 800e9b4:	7823      	ldrb	r3, [r4, #0]
 800e9b6:	b903      	cbnz	r3, 800e9ba <_ZN13Communication14GetBufferIndexEhPb+0x1c>
			return buffer_index;
	}
	return NULL;
 800e9b8:	2000      	movs	r0, #0
}
 800e9ba:	bd38      	pop	{r3, r4, r5, pc}

0800e9bc <_ZN13Communication27GetProtocolPayloadMaxLengthEhPb>:
 *
 * @param input ID: the protocol ID
 * @param output success: return true if protocol found
 * @return the maximum payload size of the input protocol
 */
uint16_t Communication::GetProtocolPayloadMaxLength(uint8_t ID, bool* success) {
 800e9bc:	b510      	push	{r4, lr}
 800e9be:	4614      	mov	r4, r2
	CommunicationProtocol* protocol = FindProtocol(ID, success);
 800e9c0:	f7ff ffa0 	bl	800e904 <_ZN13Communication12FindProtocolEhPb>
	if (not *success)
 800e9c4:	7823      	ldrb	r3, [r4, #0]
 800e9c6:	b11b      	cbz	r3, 800e9d0 <_ZN13Communication27GetProtocolPayloadMaxLengthEhPb+0x14>
		return 0;

	return protocol->GetProtocolPayloadMaxLength();
}
 800e9c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return protocol->GetProtocolPayloadMaxLength();
 800e9cc:	f004 bd4a 	b.w	8013464 <_ZN21CommunicationProtocol27GetProtocolPayloadMaxLengthEv>
}
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	bd10      	pop	{r4, pc}

0800e9d4 <_ZN13Communication17ActivateReceptionEh>:
 * @brief Activate the hardware reading of the input protocol
 *
 * @param input ID: the protocol ID
 * @return the status of the reading activation request
 */
HAL_StatusTypeDef Communication::ActivateReception(uint8_t ID) {
 800e9d4:	b513      	push	{r0, r1, r4, lr}
	bool success;
	CommunicationProtocol* protocol = FindProtocol(ID, &success);
 800e9d6:	f10d 0207 	add.w	r2, sp, #7
HAL_StatusTypeDef Communication::ActivateReception(uint8_t ID) {
 800e9da:	460c      	mov	r4, r1
	CommunicationProtocol* protocol = FindProtocol(ID, &success);
 800e9dc:	f7ff ff92 	bl	800e904 <_ZN13Communication12FindProtocolEhPb>
	if (not success) return HAL_ERROR;
 800e9e0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e9e4:	b132      	cbz	r2, 800e9f4 <_ZN13Communication17ActivateReceptionEh+0x20>
	return protocol->ActivateReception(ID);
 800e9e6:	6803      	ldr	r3, [r0, #0]
 800e9e8:	4621      	mov	r1, r4
 800e9ea:	685b      	ldr	r3, [r3, #4]
}
 800e9ec:	b002      	add	sp, #8
 800e9ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return protocol->ActivateReception(ID);
 800e9f2:	4718      	bx	r3
}
 800e9f4:	2001      	movs	r0, #1
 800e9f6:	b002      	add	sp, #8
 800e9f8:	bd10      	pop	{r4, pc}

0800e9fa <_ZN13Communication16SetModuleAddressEh>:
 * @brief Set the module address
 *
 * @param input address_: the new module address
 * @return whether successful
 */
bool Communication::SetModuleAddress(uint8_t address_) {
 800e9fa:	b538      	push	{r3, r4, r5, lr}
 800e9fc:	4604      	mov	r4, r0
 800e9fe:	460d      	mov	r5, r1
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 800ea00:	6800      	ldr	r0, [r0, #0]
 800ea02:	f04f 31ff 	mov.w	r1, #4294967295
 800ea06:	f7fd fbc7 	bl	800c198 <osSemaphoreAcquire>
	address = address_;
	osSemaphoreRelease(CommunicationSemaphore);
 800ea0a:	6820      	ldr	r0, [r4, #0]
	address = address_;
 800ea0c:	7525      	strb	r5, [r4, #20]
	osSemaphoreRelease(CommunicationSemaphore);
 800ea0e:	f7fd fbf7 	bl	800c200 <osSemaphoreRelease>
	return true;
}
 800ea12:	2001      	movs	r0, #1
 800ea14:	bd38      	pop	{r3, r4, r5, pc}

0800ea16 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 800ea16:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 800ea18:	680d      	ldr	r5, [r1, #0]
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 800ea1a:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 800ea1c:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 800ea1e:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 800ea22:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 800ea24:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 800ea26:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 800ea28:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 800ea2a:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 800ea2c:	688d      	ldr	r5, [r1, #8]
 800ea2e:	6085      	str	r5, [r0, #8]
      }
 800ea30:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 800ea32:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 800ea34:	e9c1 3300 	strd	r3, r3, [r1]
 800ea38:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 800ea3c:	f7f1 ff2e 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      }
 800ea40:	b005      	add	sp, #20
 800ea42:	bd30      	pop	{r4, r5, pc}

0800ea44 <_ZNSt6vectorIhSaIhEE5clearEv>:
      // _M_assign_aux.
      _GLIBCXX20_CONSTEXPR
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 800ea44:	e9d0 3200 	ldrd	r3, r2, [r0]
 800ea48:	4293      	cmp	r3, r2
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
 800ea4a:	bf18      	it	ne
 800ea4c:	6043      	strne	r3, [r0, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 800ea4e:	4770      	bx	lr

0800ea50 <_ZN13Communication17ClearGroupAddressEv>:
/**
 * @brief Clear the list of group addresses
 *
 * @return whether successful
 */
bool Communication::ClearGroupAddress(void) {
 800ea50:	b538      	push	{r3, r4, r5, lr}
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 800ea52:	4605      	mov	r5, r0
bool Communication::ClearGroupAddress(void) {
 800ea54:	4604      	mov	r4, r0
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 800ea56:	f04f 31ff 	mov.w	r1, #4294967295
 800ea5a:	f855 0b18 	ldr.w	r0, [r5], #24
 800ea5e:	f7fd fb9b 	bl	800c198 <osSemaphoreAcquire>
	group_addresses.clear();
 800ea62:	4628      	mov	r0, r5
 800ea64:	f7ff ffee 	bl	800ea44 <_ZNSt6vectorIhSaIhEE5clearEv>
	osSemaphoreRelease(CommunicationSemaphore);
 800ea68:	6820      	ldr	r0, [r4, #0]
 800ea6a:	f7fd fbc9 	bl	800c200 <osSemaphoreRelease>
	return true;
}
 800ea6e:	2001      	movs	r0, #1
 800ea70:	bd38      	pop	{r3, r4, r5, pc}

0800ea72 <_ZZN13Communication12AddRegistersEvENUlPvtPhtE2_4_FUNES0_tS1_t>:
			return self->ClearGroupAddress();
 800ea72:	f7ff bfed 	b.w	800ea50 <_ZN13Communication17ClearGroupAddressEv>
	...

0800ea78 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>:
      at(size_type __n)
 800ea78:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800ea7a:	e9d0 5400 	ldrd	r5, r4, [r0]
 800ea7e:	1b64      	subs	r4, r4, r5
	if (__n >= this->size())
 800ea80:	ebb1 1f24 	cmp.w	r1, r4, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800ea84:	ea4f 1224 	mov.w	r2, r4, asr #4
	if (__n >= this->size())
 800ea88:	d302      	bcc.n	800ea90 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 800ea8a:	4803      	ldr	r0, [pc, #12]	@ (800ea98 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj+0x20>)
 800ea8c:	f007 fdf9 	bl	8016682 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 800ea90:	eb05 1001 	add.w	r0, r5, r1, lsl #4
 800ea94:	bd38      	pop	{r3, r4, r5, pc}
 800ea96:	bf00      	nop
 800ea98:	08016d78 	.word	0x08016d78

0800ea9c <_ZNSt6vectorI13MessageHeaderSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>:
    vector<_Tp, _Alloc>::
 800ea9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      { return __normal_iterator(_M_current + __n); }
 800ea9e:	f101 0314 	add.w	r3, r1, #20
      : _M_current(__i) { }
 800eaa2:	6844      	ldr	r4, [r0, #4]
 800eaa4:	4607      	mov	r7, r0
 800eaa6:	460e      	mov	r6, r1
      if (__position + 1 != end())
 800eaa8:	429c      	cmp	r4, r3
 800eaaa:	d008      	beq.n	800eabe <_ZNSt6vectorI13MessageHeaderSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0x22>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800eaac:	1ae4      	subs	r4, r4, r3
 800eaae:	4b10      	ldr	r3, [pc, #64]	@ (800eaf0 <_ZNSt6vectorI13MessageHeaderSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0x54>)
 800eab0:	1d08      	adds	r0, r1, #4
 800eab2:	10a4      	asrs	r4, r4, #2
 800eab4:	435c      	muls	r4, r3
 800eab6:	2c00      	cmp	r4, #0
 800eab8:	f100 0514 	add.w	r5, r0, #20
 800eabc:	dc08      	bgt.n	800ead0 <_ZNSt6vectorI13MessageHeaderSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0x34>
      --this->_M_impl._M_finish;
 800eabe:	6878      	ldr	r0, [r7, #4]
 800eac0:	f1a0 0314 	sub.w	r3, r0, #20
      }
 800eac4:	3810      	subs	r0, #16
 800eac6:	607b      	str	r3, [r7, #4]
 800eac8:	f7f1 fee8 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
    }
 800eacc:	4630      	mov	r0, r6
 800eace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
struct MessageHeader {
 800ead0:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 800ead4:	4629      	mov	r1, r5
 800ead6:	3c01      	subs	r4, #1
 800ead8:	f805 3c18 	strb.w	r3, [r5, #-24]
 800eadc:	f7ff ff9b 	bl	800ea16 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 800eae0:	7b2b      	ldrb	r3, [r5, #12]
 800eae2:	4628      	mov	r0, r5
 800eae4:	f805 3c08 	strb.w	r3, [r5, #-8]
 800eae8:	7b6b      	ldrb	r3, [r5, #13]
 800eaea:	f805 3c07 	strb.w	r3, [r5, #-7]
 800eaee:	e7e2      	b.n	800eab6 <_ZNSt6vectorI13MessageHeaderSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0x1a>
 800eaf0:	cccccccd 	.word	0xcccccccd

0800eaf4 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800eaf4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800eaf8:	e9d0 8a00 	ldrd	r8, sl, [r0]
 800eafc:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 800eafe:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800eb02:	ebaa 0208 	sub.w	r2, sl, r8
 800eb06:	4607      	mov	r7, r0
 800eb08:	4689      	mov	r9, r1
	if (max_size() - size() < __n)
 800eb0a:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800eb0e:	ea4f 04a2 	mov.w	r4, r2, asr #2
	if (max_size() - size() < __n)
 800eb12:	d102      	bne.n	800eb1a <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 800eb14:	481e      	ldr	r0, [pc, #120]	@ (800eb90 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9c>)
 800eb16:	f007 fdb1 	bl	801667c <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 800eb1a:	45c2      	cmp	sl, r8
 800eb1c:	bf14      	ite	ne
 800eb1e:	4622      	movne	r2, r4
 800eb20:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 800eb22:	eba1 0508 	sub.w	r5, r1, r8
 800eb26:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800eb28:	d22e      	bcs.n	800eb88 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x94>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800eb2a:	b37c      	cbz	r4, 800eb8c <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x98>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800eb2c:	429c      	cmp	r4, r3
 800eb2e:	bf28      	it	cs
 800eb30:	461c      	movcs	r4, r3
 800eb32:	00a0      	lsls	r0, r4, #2
 800eb34:	f007 fced 	bl	8016512 <_Znwj>
 800eb38:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800eb3a:	f8db 3000 	ldr.w	r3, [fp]
      if (__count > 0)
 800eb3e:	2d00      	cmp	r5, #0
 800eb40:	5173      	str	r3, [r6, r5]
 800eb42:	dd04      	ble.n	800eb4e <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x5a>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800eb44:	462a      	mov	r2, r5
 800eb46:	4641      	mov	r1, r8
 800eb48:	4630      	mov	r0, r6
 800eb4a:	f007 fe6f 	bl	801682c <memmove>
      ptrdiff_t __count = __last - __first;
 800eb4e:	ebaa 0a09 	sub.w	sl, sl, r9
	      ++__new_finish;
 800eb52:	3504      	adds	r5, #4
      if (__count > 0)
 800eb54:	f1ba 0f00 	cmp.w	sl, #0
 800eb58:	4435      	add	r5, r6
 800eb5a:	dd04      	ble.n	800eb66 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x72>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800eb5c:	4652      	mov	r2, sl
 800eb5e:	4649      	mov	r1, r9
 800eb60:	4628      	mov	r0, r5
 800eb62:	f007 ff5b 	bl	8016a1c <memcpy>
      return __result + __count;
 800eb66:	4455      	add	r5, sl
	if (__p)
 800eb68:	f1b8 0f00 	cmp.w	r8, #0
 800eb6c:	d005      	beq.n	800eb7a <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x86>
		    this->_M_impl._M_end_of_storage - __old_start);
 800eb6e:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800eb70:	4640      	mov	r0, r8
 800eb72:	eba1 0108 	sub.w	r1, r1, r8
 800eb76:	f007 fca7 	bl	80164c8 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 800eb7a:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800eb7e:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 800eb82:	60be      	str	r6, [r7, #8]
    }
 800eb84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800eb88:	461c      	mov	r4, r3
 800eb8a:	e7d2      	b.n	800eb32 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800eb8c:	4626      	mov	r6, r4
 800eb8e:	e7d4      	b.n	800eb3a <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
 800eb90:	08016b36 	.word	0x08016b36

0800eb94 <_ZN13Communication11AddProtocolEP21CommunicationProtocol>:
void Communication::AddProtocol(CommunicationProtocol* protocol) {
 800eb94:	b513      	push	{r0, r1, r4, lr}
 800eb96:	4604      	mov	r4, r0
 800eb98:	9101      	str	r1, [sp, #4]
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 800eb9a:	6800      	ldr	r0, [r0, #0]
 800eb9c:	f04f 31ff 	mov.w	r1, #4294967295
 800eba0:	f7fd fafa 	bl	800c198 <osSemaphoreAcquire>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800eba4:	e9d4 130a 	ldrd	r1, r3, [r4, #40]	@ 0x28
 800eba8:	4299      	cmp	r1, r3
 800ebaa:	d008      	beq.n	800ebbe <_ZN13Communication11AddProtocolEP21CommunicationProtocol+0x2a>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800ebac:	9b01      	ldr	r3, [sp, #4]
 800ebae:	f841 3b04 	str.w	r3, [r1], #4
	    ++this->_M_impl._M_finish;
 800ebb2:	62a1      	str	r1, [r4, #40]	@ 0x28
	osSemaphoreRelease(CommunicationSemaphore);
 800ebb4:	6820      	ldr	r0, [r4, #0]
 800ebb6:	f7fd fb23 	bl	800c200 <osSemaphoreRelease>
}
 800ebba:	b002      	add	sp, #8
 800ebbc:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), __x);
 800ebbe:	aa01      	add	r2, sp, #4
 800ebc0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800ebc4:	f7ff ff96 	bl	800eaf4 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
 800ebc8:	e7f4      	b.n	800ebb4 <_ZN13Communication11AddProtocolEP21CommunicationProtocol+0x20>
	...

0800ebcc <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800ebcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800ebd0:	e9d0 9a00 	ldrd	r9, sl, [r0]
 800ebd4:	4617      	mov	r7, r2
	if (max_size() - size() < __n)
 800ebd6:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800ebda:	ebaa 0209 	sub.w	r2, sl, r9
 800ebde:	4680      	mov	r8, r0
 800ebe0:	468b      	mov	fp, r1
	if (max_size() - size() < __n)
 800ebe2:	ebb3 1f22 	cmp.w	r3, r2, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800ebe6:	ea4f 1522 	mov.w	r5, r2, asr #4
	if (max_size() - size() < __n)
 800ebea:	d102      	bne.n	800ebf2 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 800ebec:	4826      	ldr	r0, [pc, #152]	@ (800ec88 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xbc>)
 800ebee:	f007 fd45 	bl	801667c <_ZSt20__throw_length_errorPKc>
 800ebf2:	45ca      	cmp	sl, r9
 800ebf4:	bf14      	ite	ne
 800ebf6:	462a      	movne	r2, r5
 800ebf8:	2201      	moveq	r2, #1
 800ebfa:	eba1 0409 	sub.w	r4, r1, r9
 800ebfe:	18ad      	adds	r5, r5, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800ec00:	d232      	bcs.n	800ec68 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800ec02:	b39d      	cbz	r5, 800ec6c <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa0>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800ec04:	429d      	cmp	r5, r3
 800ec06:	bf28      	it	cs
 800ec08:	461d      	movcs	r5, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800ec0a:	0128      	lsls	r0, r5, #4
 800ec0c:	f007 fc81 	bl	8016512 <_Znwj>
 800ec10:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800ec12:	4434      	add	r4, r6
      _ForwardIterator __cur = __result;
 800ec14:	46b4      	mov	ip, r6
 800ec16:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800ec1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800ec1e:	464c      	mov	r4, r9
      for (; __first != __last; ++__first, (void)++__cur)
 800ec20:	45a3      	cmp	fp, r4
 800ec22:	f10c 0c10 	add.w	ip, ip, #16
 800ec26:	f104 0710 	add.w	r7, r4, #16
 800ec2a:	d121      	bne.n	800ec70 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa4>
 800ec2c:	eba7 0709 	sub.w	r7, r7, r9
 800ec30:	46a4      	mov	ip, r4
 800ec32:	4437      	add	r7, r6
 800ec34:	46be      	mov	lr, r7
 800ec36:	4554      	cmp	r4, sl
 800ec38:	f10e 0e10 	add.w	lr, lr, #16
 800ec3c:	d11e      	bne.n	800ec7c <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb0>
 800ec3e:	eba4 040c 	sub.w	r4, r4, ip
 800ec42:	4427      	add	r7, r4
	if (__p)
 800ec44:	f1b9 0f00 	cmp.w	r9, #0
 800ec48:	d006      	beq.n	800ec58 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
 800ec4a:	f8d8 1008 	ldr.w	r1, [r8, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800ec4e:	4648      	mov	r0, r9
 800ec50:	eba1 0109 	sub.w	r1, r1, r9
 800ec54:	f007 fc38 	bl	80164c8 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 800ec58:	e9c8 6700 	strd	r6, r7, [r8]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800ec5c:	eb06 1605 	add.w	r6, r6, r5, lsl #4
 800ec60:	f8c8 6008 	str.w	r6, [r8, #8]
    }
 800ec64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800ec68:	461d      	mov	r5, r3
 800ec6a:	e7ce      	b.n	800ec0a <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800ec6c:	462e      	mov	r6, r5
 800ec6e:	e7d0      	b.n	800ec12 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800ec70:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ec74:	463c      	mov	r4, r7
 800ec76:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
 800ec7a:	e7d1      	b.n	800ec20 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x54>
 800ec7c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ec80:	3410      	adds	r4, #16
 800ec82:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
 800ec86:	e7d6      	b.n	800ec36 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x6a>
 800ec88:	08016b36 	.word	0x08016b36

0800ec8c <_ZN9Registers11AddRegisterIhEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 800ec8c:	b570      	push	{r4, r5, r6, lr}
 800ec8e:	4604      	mov	r4, r0
 800ec90:	b086      	sub	sp, #24
 800ec92:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800ec94:	6800      	ldr	r0, [r0, #0]
 800ec96:	f04f 31ff 	mov.w	r1, #4294967295
 800ec9a:	f7fd fa7d 	bl	800c198 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 800ec9e:	f10d 0207 	add.w	r2, sp, #7
 800eca2:	4631      	mov	r1, r6
 800eca4:	4620      	mov	r0, r4
 800eca6:	f006 f858 	bl	8014d5a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 800ecaa:	f89d 5007 	ldrb.w	r5, [sp, #7]
 800ecae:	b125      	cbz	r5, 800ecba <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 800ecb0:	6820      	ldr	r0, [r4, #0]
 800ecb2:	f7fd faa5 	bl	800c200 <osSemaphoreRelease>
}
 800ecb6:	b006      	add	sp, #24
 800ecb8:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 800ecba:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 800ecbe:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 800ecc2:	f7ff fdb3 	bl	800e82c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	configuration_.register_info = register_;
 800ecc6:	2301      	movs	r3, #1
 800ecc8:	f8ad 600a 	strh.w	r6, [sp, #10]
 800eccc:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 800ecd0:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 800ecd4:	f88d 000c 	strb.w	r0, [sp, #12]
 800ecd8:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 800ecdc:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d0e5      	beq.n	800ecb0 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
      push_back(const value_type& __x)
 800ece4:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800ece6:	e9d4 5302 	ldrd	r5, r3, [r4, #8]
 800ecea:	429d      	cmp	r5, r3
 800ecec:	d005      	beq.n	800ecfa <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x6e>
 800ecee:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800ecf0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 800ecf4:	3510      	adds	r5, #16
 800ecf6:	60a5      	str	r5, [r4, #8]
 800ecf8:	e7da      	b.n	800ecb0 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
	  _M_realloc_insert(end(), __x);
 800ecfa:	4629      	mov	r1, r5
 800ecfc:	1d20      	adds	r0, r4, #4
 800ecfe:	f7ff ff65 	bl	800ebcc <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 800ed02:	e7d5      	b.n	800ecb0 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>

0800ed04 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800ed04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800ed08:	e9d0 8900 	ldrd	r8, r9, [r0]
 800ed0c:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 800ed0e:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800ed12:	eba9 0208 	sub.w	r2, r9, r8
 800ed16:	4607      	mov	r7, r0
 800ed18:	468a      	mov	sl, r1
	if (max_size() - size() < __n)
 800ed1a:	ebb3 1f22 	cmp.w	r3, r2, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800ed1e:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
 800ed22:	d102      	bne.n	800ed2a <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 800ed24:	4820      	ldr	r0, [pc, #128]	@ (800eda8 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa4>)
 800ed26:	f007 fca9 	bl	801667c <_ZSt20__throw_length_errorPKc>
 800ed2a:	45c1      	cmp	r9, r8
 800ed2c:	bf14      	ite	ne
 800ed2e:	4622      	movne	r2, r4
 800ed30:	2201      	moveq	r2, #1
 800ed32:	eba1 0508 	sub.w	r5, r1, r8
 800ed36:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800ed38:	d231      	bcs.n	800ed9e <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800ed3a:	b394      	cbz	r4, 800eda2 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9e>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800ed3c:	429c      	cmp	r4, r3
 800ed3e:	bf28      	it	cs
 800ed40:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800ed42:	0120      	lsls	r0, r4, #4
 800ed44:	f007 fbe5 	bl	8016512 <_Znwj>
 800ed48:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800ed4a:	eb06 0c05 	add.w	ip, r6, r5
      if (__count > 0)
 800ed4e:	2d00      	cmp	r5, #0
 800ed50:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 800ed54:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800ed58:	dd04      	ble.n	800ed64 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x60>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800ed5a:	462a      	mov	r2, r5
 800ed5c:	4641      	mov	r1, r8
 800ed5e:	4630      	mov	r0, r6
 800ed60:	f007 fd64 	bl	801682c <memmove>
      ptrdiff_t __count = __last - __first;
 800ed64:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
 800ed68:	3510      	adds	r5, #16
      if (__count > 0)
 800ed6a:	f1b9 0f00 	cmp.w	r9, #0
 800ed6e:	4435      	add	r5, r6
 800ed70:	dd04      	ble.n	800ed7c <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x78>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800ed72:	464a      	mov	r2, r9
 800ed74:	4651      	mov	r1, sl
 800ed76:	4628      	mov	r0, r5
 800ed78:	f007 fe50 	bl	8016a1c <memcpy>
      return __result + __count;
 800ed7c:	444d      	add	r5, r9
	if (__p)
 800ed7e:	f1b8 0f00 	cmp.w	r8, #0
 800ed82:	d005      	beq.n	800ed90 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
 800ed84:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800ed86:	4640      	mov	r0, r8
 800ed88:	eba1 0108 	sub.w	r1, r1, r8
 800ed8c:	f007 fb9c 	bl	80164c8 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 800ed90:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800ed94:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 800ed98:	60be      	str	r6, [r7, #8]
    }
 800ed9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800ed9e:	461c      	mov	r4, r3
 800eda0:	e7cf      	b.n	800ed42 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800eda2:	4626      	mov	r6, r4
 800eda4:	e7d1      	b.n	800ed4a <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
 800eda6:	bf00      	nop
 800eda8:	08016b36 	.word	0x08016b36

0800edac <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 800edac:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800edae:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
      push_back(const value_type& __x)
 800edb2:	4605      	mov	r5, r0
 800edb4:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800edb6:	429c      	cmp	r4, r3
 800edb8:	d005      	beq.n	800edc6 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_+0x1a>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800edba:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 800edbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 800edc0:	3410      	adds	r4, #16
 800edc2:	606c      	str	r4, [r5, #4]
      }
 800edc4:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
 800edc6:	4621      	mov	r1, r4
 800edc8:	f7ff ff9c 	bl	800ed04 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 800edcc:	e7fa      	b.n	800edc4 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_+0x18>

0800edce <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0>:
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 800edce:	b570      	push	{r4, r5, r6, lr}
 800edd0:	460c      	mov	r4, r1
 800edd2:	b086      	sub	sp, #24
 800edd4:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800edd6:	f04f 31ff 	mov.w	r1, #4294967295
 800edda:	6800      	ldr	r0, [r0, #0]
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 800eddc:	4616      	mov	r6, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800edde:	f7fd f9db 	bl	800c198 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 800ede2:	4621      	mov	r1, r4
 800ede4:	f10d 0207 	add.w	r2, sp, #7
 800ede8:	4628      	mov	r0, r5
 800edea:	f005 ffb6 	bl	8014d5a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 800edee:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 800edf2:	4604      	mov	r4, r0
	if (!success) {
 800edf4:	b923      	cbnz	r3, 800ee00 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x32>
	osSemaphoreRelease(RegistersSemaphore);
 800edf6:	6828      	ldr	r0, [r5, #0]
 800edf8:	f7fd fa02 	bl	800c200 <osSemaphoreRelease>
}
 800edfc:	b006      	add	sp, #24
 800edfe:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 800ee00:	f10d 0007 	add.w	r0, sp, #7
 800ee04:	f7ff fd12 	bl	800e82c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 800ee08:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d0f2      	beq.n	800edf6 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x28>
	if (target_register->register_info.type != registered_type) {
 800ee10:	7923      	ldrb	r3, [r4, #4]
 800ee12:	4298      	cmp	r0, r3
 800ee14:	d1ef      	bne.n	800edf6 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x28>
	if (callbacks[target_register->register_info.type] == NULL) {
 800ee16:	3004      	adds	r0, #4
 800ee18:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 800ee1c:	2800      	cmp	r0, #0
 800ee1e:	d0ea      	beq.n	800edf6 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x28>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 800ee20:	7823      	ldrb	r3, [r4, #0]
 800ee22:	b983      	cbnz	r3, 800ee46 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x78>
 800ee24:	7863      	ldrb	r3, [r4, #1]
 800ee26:	b973      	cbnz	r3, 800ee46 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x78>
		target_callback_list->push_back(callback);
 800ee28:	a902      	add	r1, sp, #8
		callback.pointer = pointer;
 800ee2a:	9602      	str	r6, [sp, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800ee2c:	e9d0 2300 	ldrd	r2, r3, [r0]
 800ee30:	1a9b      	subs	r3, r3, r2
 800ee32:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 800ee34:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 800ee36:	f7ff ffb9 	bl	800edac <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_>
	target_register->mode.pointer = true;
 800ee3a:	2301      	movs	r3, #1
 800ee3c:	7023      	strb	r3, [r4, #0]
	target_register->access.write = true;
 800ee3e:	f240 1301 	movw	r3, #257	@ 0x101
 800ee42:	8123      	strh	r3, [r4, #8]
 800ee44:	e7d7      	b.n	800edf6 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x28>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 800ee46:	8961      	ldrh	r1, [r4, #10]
 800ee48:	f7ff fe16 	bl	800ea78 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
		callback->pointer = pointer;
 800ee4c:	6006      	str	r6, [r0, #0]
 800ee4e:	e7f4      	b.n	800ee3a <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x6c>

0800ee50 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 800ee50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee52:	460c      	mov	r4, r1
 800ee54:	b087      	sub	sp, #28
 800ee56:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800ee58:	f04f 31ff 	mov.w	r1, #4294967295
 800ee5c:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 800ee5e:	461e      	mov	r6, r3
 800ee60:	4617      	mov	r7, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800ee62:	f7fd f999 	bl	800c198 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 800ee66:	4621      	mov	r1, r4
 800ee68:	f10d 0207 	add.w	r2, sp, #7
 800ee6c:	4628      	mov	r0, r5
 800ee6e:	f005 ff74 	bl	8014d5a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 800ee72:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 800ee76:	4604      	mov	r4, r0
	if (!success) {
 800ee78:	b923      	cbnz	r3, 800ee84 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x34>
	osSemaphoreRelease(RegistersSemaphore);
 800ee7a:	6828      	ldr	r0, [r5, #0]
 800ee7c:	f7fd f9c0 	bl	800c200 <osSemaphoreRelease>
}
 800ee80:	b007      	add	sp, #28
 800ee82:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 800ee84:	f10d 0007 	add.w	r0, sp, #7
 800ee88:	f7ff fcd0 	bl	800e82c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 800ee8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d0f2      	beq.n	800ee7a <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (target_register->register_info.type != registered_type) {
 800ee94:	7923      	ldrb	r3, [r4, #4]
 800ee96:	4298      	cmp	r0, r3
 800ee98:	d1ef      	bne.n	800ee7a <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (callbacks[target_register->register_info.type] == NULL) {
 800ee9a:	3004      	adds	r0, #4
 800ee9c:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 800eea0:	2800      	cmp	r0, #0
 800eea2:	d0ea      	beq.n	800ee7a <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 800eea4:	7823      	ldrb	r3, [r4, #0]
 800eea6:	b983      	cbnz	r3, 800eeca <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
 800eea8:	7863      	ldrb	r3, [r4, #1]
 800eeaa:	b973      	cbnz	r3, 800eeca <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
		callback.read = NULL;
 800eeac:	9305      	str	r3, [sp, #20]
		target_callback_list->push_back(callback);
 800eeae:	a902      	add	r1, sp, #8
 800eeb0:	e9d0 2300 	ldrd	r2, r3, [r0]
		callback.write = write;
 800eeb4:	e9cd 7603 	strd	r7, r6, [sp, #12]
 800eeb8:	1a9b      	subs	r3, r3, r2
 800eeba:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 800eebc:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 800eebe:	f7ff ff75 	bl	800edac <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_>
	target_register->mode.callbacks = true;
 800eec2:	2301      	movs	r3, #1
 800eec4:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 800eec6:	7223      	strb	r3, [r4, #8]
 800eec8:	e7d7      	b.n	800ee7a <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 800eeca:	8961      	ldrh	r1, [r4, #10]
 800eecc:	f7ff fdd4 	bl	800ea78 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
		callback->write = write;
 800eed0:	e9c0 7601 	strd	r7, r6, [r0, #4]
 800eed4:	e7f5      	b.n	800eec2 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x72>
	...

0800eed8 <_ZN13Communication12AddRegistersEv>:
void Communication::AddRegisters(void) {
 800eed8:	b510      	push	{r4, lr}
 800eeda:	4604      	mov	r4, r0
	registers->AddRegister<uint8_t>(REG_COM_ID_PROPAGATION);
 800eedc:	2101      	movs	r1, #1
 800eede:	6840      	ldr	r0, [r0, #4]
 800eee0:	f7ff fed4 	bl	800ec8c <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_COM_ID_PROPAGATION);
 800eee4:	2101      	movs	r1, #1
 800eee6:	6860      	ldr	r0, [r4, #4]
 800eee8:	f005 ff70 	bl	8014dcc <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_COM_ID_PROPAGATION, (void*) this,
 800eeec:	4b32      	ldr	r3, [pc, #200]	@ (800efb8 <_ZN13Communication12AddRegistersEv+0xe0>)
 800eeee:	4622      	mov	r2, r4
 800eef0:	6860      	ldr	r0, [r4, #4]
 800eef2:	2101      	movs	r1, #1
 800eef4:	f7ff ffac 	bl	800ee50 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_COM_ADDRESS);
 800eef8:	6860      	ldr	r0, [r4, #4]
 800eefa:	2102      	movs	r1, #2
 800eefc:	f7ff fec6 	bl	800ec8c <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_COM_ADDRESS);
 800ef00:	2102      	movs	r1, #2
 800ef02:	6860      	ldr	r0, [r4, #4]
 800ef04:	f005 ff62 	bl	8014dcc <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_COM_ADDRESS, &CommunicationSemaphore);
 800ef08:	4622      	mov	r2, r4
 800ef0a:	2102      	movs	r1, #2
 800ef0c:	6860      	ldr	r0, [r4, #4]
 800ef0e:	f005 ff43 	bl	8014d98 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer(REG_COM_ADDRESS, &address);
 800ef12:	f104 0214 	add.w	r2, r4, #20
 800ef16:	6860      	ldr	r0, [r4, #4]
 800ef18:	2102      	movs	r1, #2
 800ef1a:	f7ff ff58 	bl	800edce <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0>
	registers->AddRegister<uint8_t>(REG_COM_ADD_GROUP_ADDRESS);
 800ef1e:	6860      	ldr	r0, [r4, #4]
 800ef20:	2103      	movs	r1, #3
 800ef22:	f7ff feb3 	bl	800ec8c <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_COM_ADD_GROUP_ADDRESS);
 800ef26:	2103      	movs	r1, #3
 800ef28:	6860      	ldr	r0, [r4, #4]
 800ef2a:	f005 ff4f 	bl	8014dcc <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_COM_ADD_GROUP_ADDRESS, (void*) this,
 800ef2e:	4622      	mov	r2, r4
 800ef30:	4b22      	ldr	r3, [pc, #136]	@ (800efbc <_ZN13Communication12AddRegistersEv+0xe4>)
 800ef32:	2103      	movs	r1, #3
 800ef34:	6860      	ldr	r0, [r4, #4]
 800ef36:	f7ff ff8b 	bl	800ee50 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_COM_REMOVE_GROUP_ADDRESS);
 800ef3a:	6860      	ldr	r0, [r4, #4]
 800ef3c:	2104      	movs	r1, #4
 800ef3e:	f7ff fea5 	bl	800ec8c <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_COM_REMOVE_GROUP_ADDRESS);
 800ef42:	2104      	movs	r1, #4
 800ef44:	6860      	ldr	r0, [r4, #4]
 800ef46:	f005 ff41 	bl	8014dcc <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_COM_REMOVE_GROUP_ADDRESS, (void*) this,
 800ef4a:	4622      	mov	r2, r4
 800ef4c:	4b1c      	ldr	r3, [pc, #112]	@ (800efc0 <_ZN13Communication12AddRegistersEv+0xe8>)
 800ef4e:	2104      	movs	r1, #4
 800ef50:	6860      	ldr	r0, [r4, #4]
 800ef52:	f7ff ff7d 	bl	800ee50 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_COM_CLEAR_GROUP_ADDRESS);
 800ef56:	6860      	ldr	r0, [r4, #4]
 800ef58:	2105      	movs	r1, #5
 800ef5a:	f7ff fe97 	bl	800ec8c <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_COM_CLEAR_GROUP_ADDRESS);
 800ef5e:	2105      	movs	r1, #5
 800ef60:	6860      	ldr	r0, [r4, #4]
 800ef62:	f005 ff33 	bl	8014dcc <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_COM_CLEAR_GROUP_ADDRESS, (void*) this,
 800ef66:	4b17      	ldr	r3, [pc, #92]	@ (800efc4 <_ZN13Communication12AddRegistersEv+0xec>)
 800ef68:	4622      	mov	r2, r4
 800ef6a:	6860      	ldr	r0, [r4, #4]
 800ef6c:	2105      	movs	r1, #5
 800ef6e:	f7ff ff6f 	bl	800ee50 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_COM_GET_GROUP_ADDRESS);
 800ef72:	6860      	ldr	r0, [r4, #4]
 800ef74:	2106      	movs	r1, #6
 800ef76:	f7ff fe89 	bl	800ec8c <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsVector(REG_COM_GET_GROUP_ADDRESS);
 800ef7a:	2106      	movs	r1, #6
 800ef7c:	6860      	ldr	r0, [r4, #4]
 800ef7e:	f005 ff5d 	bl	8014e3c <_ZN9Registers19SetRegisterAsVectorEt>
	return AddRegisterPointer(ID, reinterpreted_pointer);
 800ef82:	f104 0218 	add.w	r2, r4, #24
 800ef86:	6860      	ldr	r0, [r4, #4]
 800ef88:	2106      	movs	r1, #6
 800ef8a:	f7ff ff20 	bl	800edce <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0>
	registers->SetRegisterPermissions(REG_COM_GET_GROUP_ADDRESS, READ_PERMISSION);
 800ef8e:	2202      	movs	r2, #2
 800ef90:	2106      	movs	r1, #6
 800ef92:	6860      	ldr	r0, [r4, #4]
 800ef94:	f005 ff55 	bl	8014e42 <_ZN9Registers22SetRegisterPermissionsEth>
	registers->AddRegister<uint8_t>(REG_COM_FORWARD_MESSAGE);
 800ef98:	6860      	ldr	r0, [r4, #4]
 800ef9a:	2107      	movs	r1, #7
 800ef9c:	f7ff fe76 	bl	800ec8c <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsVector(REG_COM_FORWARD_MESSAGE);
 800efa0:	2107      	movs	r1, #7
 800efa2:	6860      	ldr	r0, [r4, #4]
 800efa4:	f005 ff4a 	bl	8014e3c <_ZN9Registers19SetRegisterAsVectorEt>
	registers->AddWriteCallback<uint8_t>(REG_COM_FORWARD_MESSAGE, (void*) this,
 800efa8:	4622      	mov	r2, r4
 800efaa:	6860      	ldr	r0, [r4, #4]
 800efac:	2107      	movs	r1, #7
 800efae:	4b06      	ldr	r3, [pc, #24]	@ (800efc8 <_ZN13Communication12AddRegistersEv+0xf0>)
}
 800efb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	registers->AddWriteCallback<uint8_t>(REG_COM_FORWARD_MESSAGE, (void*) this,
 800efb4:	f7ff bf4c 	b.w	800ee50 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
 800efb8:	08010369 	.word	0x08010369
 800efbc:	0800f149 	.word	0x0800f149
 800efc0:	0800f24d 	.word	0x0800f24d
 800efc4:	0800ea73 	.word	0x0800ea73
 800efc8:	08010015 	.word	0x08010015

0800efcc <_ZNSt12_Vector_baseIaSaIaEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800efcc:	b510      	push	{r4, lr}
 800efce:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 800efd0:	6800      	ldr	r0, [r0, #0]
	if (__p)
 800efd2:	b118      	cbz	r0, 800efdc <_ZNSt12_Vector_baseIaSaIaEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800efd4:	68a1      	ldr	r1, [r4, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800efd6:	1a09      	subs	r1, r1, r0
 800efd8:	f007 fa76 	bl	80164c8 <_ZdlPvj>
      }
 800efdc:	4620      	mov	r0, r4
 800efde:	bd10      	pop	{r4, pc}

0800efe0 <_ZNSt6vectorIaSaIaEEaSEOS1_.isra.0>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 800efe0:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 800efe2:	680d      	ldr	r5, [r1, #0]
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 800efe4:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 800efe6:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 800efe8:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 800efec:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 800efee:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 800eff0:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 800eff2:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 800eff4:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 800eff6:	688d      	ldr	r5, [r1, #8]
 800eff8:	6085      	str	r5, [r0, #8]
      }
 800effa:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 800effc:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 800effe:	e9c1 3300 	strd	r3, r3, [r1]
 800f002:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 800f006:	f7ff ffe1 	bl	800efcc <_ZNSt12_Vector_baseIaSaIaEED1Ev>
      }
 800f00a:	b005      	add	sp, #20
 800f00c:	bd30      	pop	{r4, r5, pc}

0800f00e <_ZN23SubscriberConfigurationD1Ev>:
struct SubscriberConfiguration {
 800f00e:	b510      	push	{r4, lr}
 800f010:	4604      	mov	r4, r0
      }
 800f012:	301c      	adds	r0, #28
 800f014:	f7f1 fc42 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	_M_deallocate(_M_impl._M_start,
 800f018:	6920      	ldr	r0, [r4, #16]
	if (__p)
 800f01a:	b118      	cbz	r0, 800f024 <_ZN23SubscriberConfigurationD1Ev+0x16>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800f01c:	69a1      	ldr	r1, [r4, #24]
 800f01e:	1a09      	subs	r1, r1, r0
 800f020:	f007 fa52 	bl	80164c8 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 800f024:	6860      	ldr	r0, [r4, #4]
	if (__p)
 800f026:	b118      	cbz	r0, 800f030 <_ZN23SubscriberConfigurationD1Ev+0x22>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800f028:	68e1      	ldr	r1, [r4, #12]
 800f02a:	1a09      	subs	r1, r1, r0
 800f02c:	f007 fa4c 	bl	80164c8 <_ZdlPvj>
 800f030:	4620      	mov	r0, r4
 800f032:	bd10      	pop	{r4, pc}

0800f034 <_ZNSt6vectorIfSaIfEEaSEOS1_.isra.0>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 800f034:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 800f036:	680d      	ldr	r5, [r1, #0]
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 800f038:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 800f03a:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 800f03c:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 800f040:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 800f042:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 800f044:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 800f046:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 800f048:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 800f04a:	688d      	ldr	r5, [r1, #8]
 800f04c:	6085      	str	r5, [r0, #8]
      }
 800f04e:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 800f050:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 800f052:	e9c1 3300 	strd	r3, r3, [r1]
 800f056:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 800f05a:	f7f2 fe0b 	bl	8001c74 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
      }
 800f05e:	b005      	add	sp, #20
 800f060:	bd30      	pop	{r4, r5, pc}
	...

0800f064 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>:
      vector<_Tp, _Alloc>::
 800f064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800f068:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
      vector<_Tp, _Alloc>::
 800f06c:	4605      	mov	r5, r0
 800f06e:	4689      	mov	r9, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800f070:	429c      	cmp	r4, r3
 800f072:	d006      	beq.n	800f082 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x1e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800f074:	780b      	ldrb	r3, [r1, #0]
 800f076:	7023      	strb	r3, [r4, #0]
	    ++this->_M_impl._M_finish;
 800f078:	6843      	ldr	r3, [r0, #4]
 800f07a:	3301      	adds	r3, #1
 800f07c:	6043      	str	r3, [r0, #4]
      }
 800f07e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800f082:	4a10      	ldr	r2, [pc, #64]	@ (800f0c4 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x60>)
 800f084:	2101      	movs	r1, #1
 800f086:	f7f1 fc2a 	bl	80008de <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
      pointer __old_start = this->_M_impl._M_start;
 800f08a:	682f      	ldr	r7, [r5, #0]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800f08c:	4680      	mov	r8, r0
      pointer __new_start(this->_M_allocate(__len));
 800f08e:	f7ff fbc1 	bl	800e814 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
 800f092:	1be4      	subs	r4, r4, r7
 800f094:	f899 3000 	ldrb.w	r3, [r9]
 800f098:	4606      	mov	r6, r0
      if (__count > 0)
 800f09a:	2c00      	cmp	r4, #0
 800f09c:	5503      	strb	r3, [r0, r4]
 800f09e:	dd03      	ble.n	800f0a8 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x44>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800f0a0:	4622      	mov	r2, r4
 800f0a2:	4639      	mov	r1, r7
 800f0a4:	f007 fbc2 	bl	801682c <memmove>
	      ++__new_finish;
 800f0a8:	3401      	adds	r4, #1
 800f0aa:	4434      	add	r4, r6
	if (__p)
 800f0ac:	b127      	cbz	r7, 800f0b8 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x54>
		    this->_M_impl._M_end_of_storage - __old_start);
 800f0ae:	68a9      	ldr	r1, [r5, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800f0b0:	4638      	mov	r0, r7
 800f0b2:	1bc9      	subs	r1, r1, r7
 800f0b4:	f007 fa08 	bl	80164c8 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 800f0b8:	e9c5 6400 	strd	r6, r4, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800f0bc:	4446      	add	r6, r8
 800f0be:	60ae      	str	r6, [r5, #8]
      }
 800f0c0:	e7dd      	b.n	800f07e <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x1a>
 800f0c2:	bf00      	nop
 800f0c4:	08016b36 	.word	0x08016b36

0800f0c8 <_ZN13Communication15AddGroupAddressEh>:
bool Communication::AddGroupAddress(uint8_t address) {
 800f0c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0cc:	4604      	mov	r4, r0
 800f0ce:	4689      	mov	r9, r1
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 800f0d0:	6800      	ldr	r0, [r0, #0]
 800f0d2:	f04f 31ff 	mov.w	r1, #4294967295
 800f0d6:	f7fd f85f 	bl	800c198 <osSemaphoreAcquire>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800f0da:	e9d4 5307 	ldrd	r5, r3, [r4, #28]
 800f0de:	429d      	cmp	r5, r3
 800f0e0:	d00a      	beq.n	800f0f8 <_ZN13Communication15AddGroupAddressEh+0x30>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800f0e2:	f885 9000 	strb.w	r9, [r5]
	    ++this->_M_impl._M_finish;
 800f0e6:	69e3      	ldr	r3, [r4, #28]
 800f0e8:	3301      	adds	r3, #1
 800f0ea:	61e3      	str	r3, [r4, #28]
	osSemaphoreRelease(CommunicationSemaphore);
 800f0ec:	6820      	ldr	r0, [r4, #0]
 800f0ee:	f7fd f887 	bl	800c200 <osSemaphoreRelease>
}
 800f0f2:	2001      	movs	r0, #1
 800f0f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800f0f8:	4a12      	ldr	r2, [pc, #72]	@ (800f144 <_ZN13Communication15AddGroupAddressEh+0x7c>)
 800f0fa:	2101      	movs	r1, #1
 800f0fc:	f104 0018 	add.w	r0, r4, #24
 800f100:	f7f1 fbed 	bl	80008de <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
      pointer __old_start = this->_M_impl._M_start;
 800f104:	f8d4 8018 	ldr.w	r8, [r4, #24]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800f108:	4607      	mov	r7, r0
      pointer __new_start(this->_M_allocate(__len));
 800f10a:	f7ff fb83 	bl	800e814 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
 800f10e:	eba5 0508 	sub.w	r5, r5, r8
 800f112:	4606      	mov	r6, r0
      if (__count > 0)
 800f114:	2d00      	cmp	r5, #0
 800f116:	f800 9005 	strb.w	r9, [r0, r5]
 800f11a:	dd03      	ble.n	800f124 <_ZN13Communication15AddGroupAddressEh+0x5c>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800f11c:	462a      	mov	r2, r5
 800f11e:	4641      	mov	r1, r8
 800f120:	f007 fb84 	bl	801682c <memmove>
	      ++__new_finish;
 800f124:	3501      	adds	r5, #1
 800f126:	4435      	add	r5, r6
	if (__p)
 800f128:	f1b8 0f00 	cmp.w	r8, #0
 800f12c:	d005      	beq.n	800f13a <_ZN13Communication15AddGroupAddressEh+0x72>
		    this->_M_impl._M_end_of_storage - __old_start);
 800f12e:	6a21      	ldr	r1, [r4, #32]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800f130:	4640      	mov	r0, r8
 800f132:	eba1 0108 	sub.w	r1, r1, r8
 800f136:	f007 f9c7 	bl	80164c8 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 800f13a:	e9c4 6506 	strd	r6, r5, [r4, #24]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800f13e:	443e      	add	r6, r7
 800f140:	6226      	str	r6, [r4, #32]
 800f142:	e7d3      	b.n	800f0ec <_ZN13Communication15AddGroupAddressEh+0x24>
 800f144:	08016b36 	.word	0x08016b36

0800f148 <_ZZN13Communication12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t>:
			return self->AddGroupAddress(*input);
 800f148:	7811      	ldrb	r1, [r2, #0]
 800f14a:	f7ff bfbd 	b.w	800f0c8 <_ZN13Communication15AddGroupAddressEh>
	...

0800f150 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE2atEj>:
      at(size_type __n)
 800f150:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f152:	e9d0 5400 	ldrd	r5, r4, [r0]
 800f156:	1b64      	subs	r4, r4, r5
	if (__n >= this->size())
 800f158:	ebb1 1f24 	cmp.w	r1, r4, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f15c:	ea4f 1224 	mov.w	r2, r4, asr #4
	if (__n >= this->size())
 800f160:	d302      	bcc.n	800f168 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 800f162:	4803      	ldr	r0, [pc, #12]	@ (800f170 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE2atEj+0x20>)
 800f164:	f007 fa8d 	bl	8016682 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 800f168:	eb05 1001 	add.w	r0, r5, r1, lsl #4
 800f16c:	bd38      	pop	{r3, r4, r5, pc}
 800f16e:	bf00      	nop
 800f170:	08016d78 	.word	0x08016d78

0800f174 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE2atEj>:
      at(size_type __n)
 800f174:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f176:	e9d0 5400 	ldrd	r5, r4, [r0]
 800f17a:	1b64      	subs	r4, r4, r5
	if (__n >= this->size())
 800f17c:	ebb1 1f24 	cmp.w	r1, r4, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f180:	ea4f 1224 	mov.w	r2, r4, asr #4
	if (__n >= this->size())
 800f184:	d302      	bcc.n	800f18c <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 800f186:	4803      	ldr	r0, [pc, #12]	@ (800f194 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE2atEj+0x20>)
 800f188:	f007 fa7b 	bl	8016682 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 800f18c:	eb05 1001 	add.w	r0, r5, r1, lsl #4
 800f190:	bd38      	pop	{r3, r4, r5, pc}
 800f192:	bf00      	nop
 800f194:	08016d78 	.word	0x08016d78

0800f198 <_ZNKSt6vectorIaSaIaEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800f198:	b510      	push	{r4, lr}
 800f19a:	4604      	mov	r4, r0
 800f19c:	4610      	mov	r0, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f19e:	e9d4 2300 	ldrd	r2, r3, [r4]
	if (max_size() - size() < __n)
 800f1a2:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f1a6:	1a9b      	subs	r3, r3, r2
	if (max_size() - size() < __n)
 800f1a8:	1ae2      	subs	r2, r4, r3
 800f1aa:	428a      	cmp	r2, r1
 800f1ac:	d201      	bcs.n	800f1b2 <_ZNKSt6vectorIaSaIaEE12_M_check_lenEjPKc+0x1a>
	  __throw_length_error(__N(__s));
 800f1ae:	f007 fa65 	bl	801667c <_ZSt20__throw_length_errorPKc>
 800f1b2:	4299      	cmp	r1, r3
 800f1b4:	bf38      	it	cc
 800f1b6:	4619      	movcc	r1, r3
 800f1b8:	185b      	adds	r3, r3, r1
 800f1ba:	d204      	bcs.n	800f1c6 <_ZNKSt6vectorIaSaIaEE12_M_check_lenEjPKc+0x2e>
 800f1bc:	42a3      	cmp	r3, r4
 800f1be:	bf28      	it	cs
 800f1c0:	4623      	movcs	r3, r4
 800f1c2:	4618      	mov	r0, r3
      }
 800f1c4:	bd10      	pop	{r4, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800f1c6:	4620      	mov	r0, r4
 800f1c8:	e7fc      	b.n	800f1c4 <_ZNKSt6vectorIaSaIaEE12_M_check_lenEjPKc+0x2c>

0800f1ca <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800f1ca:	b538      	push	{r3, r4, r5, lr}
 800f1cc:	4603      	mov	r3, r0
 800f1ce:	4610      	mov	r0, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f1d0:	e9d3 3500 	ldrd	r3, r5, [r3]
 800f1d4:	1aed      	subs	r5, r5, r3
	if (max_size() - size() < __n)
 800f1d6:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f1da:	10ac      	asrs	r4, r5, #2
	if (max_size() - size() < __n)
 800f1dc:	eba3 05a5 	sub.w	r5, r3, r5, asr #2
 800f1e0:	428d      	cmp	r5, r1
 800f1e2:	d201      	bcs.n	800f1e8 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x1e>
	  __throw_length_error(__N(__s));
 800f1e4:	f007 fa4a 	bl	801667c <_ZSt20__throw_length_errorPKc>
 800f1e8:	42a1      	cmp	r1, r4
 800f1ea:	bf38      	it	cc
 800f1ec:	4621      	movcc	r1, r4
 800f1ee:	1864      	adds	r4, r4, r1
 800f1f0:	d204      	bcs.n	800f1fc <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x32>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800f1f2:	429c      	cmp	r4, r3
 800f1f4:	4620      	mov	r0, r4
 800f1f6:	bf28      	it	cs
 800f1f8:	4618      	movcs	r0, r3
      }
 800f1fa:	bd38      	pop	{r3, r4, r5, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	e7fc      	b.n	800f1fa <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x30>

0800f200 <_ZN13Communication18RemoveGroupAddressEh>:
bool Communication::RemoveGroupAddress(uint8_t address_) {
 800f200:	b570      	push	{r4, r5, r6, lr}
 800f202:	4604      	mov	r4, r0
 800f204:	460d      	mov	r5, r1
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 800f206:	6800      	ldr	r0, [r0, #0]
 800f208:	f04f 31ff 	mov.w	r1, #4294967295
 800f20c:	f7fc ffc4 	bl	800c198 <osSemaphoreAcquire>
      : _M_current(__i) { }
 800f210:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
	for (uint8_t address : group_addresses) {
 800f214:	4603      	mov	r3, r0
 800f216:	428b      	cmp	r3, r1
 800f218:	d104      	bne.n	800f224 <_ZN13Communication18RemoveGroupAddressEh+0x24>
	osSemaphoreRelease(CommunicationSemaphore);
 800f21a:	6820      	ldr	r0, [r4, #0]
 800f21c:	f7fc fff0 	bl	800c200 <osSemaphoreRelease>
	return false;
 800f220:	2000      	movs	r0, #0
 800f222:	e010      	b.n	800f246 <_ZN13Communication18RemoveGroupAddressEh+0x46>
 800f224:	461a      	mov	r2, r3
		if (address == address_) {
 800f226:	f812 6b01 	ldrb.w	r6, [r2], #1
 800f22a:	42ae      	cmp	r6, r5
 800f22c:	d10c      	bne.n	800f248 <_ZN13Communication18RemoveGroupAddressEh+0x48>
      { return __normal_iterator(_M_current + __n); }
 800f22e:	1a1a      	subs	r2, r3, r0
 800f230:	fa50 f282 	uxtab	r2, r0, r2
 800f234:	1c50      	adds	r0, r2, #1
      if (__position + 1 != end())
 800f236:	4281      	cmp	r1, r0
 800f238:	d001      	beq.n	800f23e <_ZN13Communication18RemoveGroupAddressEh+0x3e>
			      _Category>::__copy_m(__first, __last, __result);
 800f23a:	f7f2 fb5f 	bl	80018fc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
      --this->_M_impl._M_finish;
 800f23e:	69e3      	ldr	r3, [r4, #28]
			return true;
 800f240:	2001      	movs	r0, #1
 800f242:	3b01      	subs	r3, #1
 800f244:	61e3      	str	r3, [r4, #28]
}
 800f246:	bd70      	pop	{r4, r5, r6, pc}
 800f248:	4613      	mov	r3, r2
 800f24a:	e7e4      	b.n	800f216 <_ZN13Communication18RemoveGroupAddressEh+0x16>

0800f24c <_ZZN13Communication12AddRegistersEvENUlPvtPhtE1_4_FUNES0_tS1_t>:
			return self->RemoveGroupAddress(*input);
 800f24c:	7811      	ldrb	r1, [r2, #0]
 800f24e:	f7ff bfd7 	b.w	800f200 <_ZN13Communication18RemoveGroupAddressEh>

0800f252 <_ZN14MessageElementC1ERKS_>:
struct MessageElement {
 800f252:	b510      	push	{r4, lr}
 800f254:	460b      	mov	r3, r1
 800f256:	4604      	mov	r4, r0
 800f258:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f25c:	7a1a      	ldrb	r2, [r3, #8]
 800f25e:	80a1      	strh	r1, [r4, #4]
 800f260:	88d9      	ldrh	r1, [r3, #6]
 800f262:	6020      	str	r0, [r4, #0]
 800f264:	f104 000c 	add.w	r0, r4, #12
 800f268:	80e1      	strh	r1, [r4, #6]
 800f26a:	f103 010c 	add.w	r1, r3, #12
 800f26e:	7222      	strb	r2, [r4, #8]
 800f270:	f7f1 fbc4 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 800f274:	4620      	mov	r0, r4
 800f276:	bd10      	pop	{r4, pc}

0800f278 <_ZN13MessageHeaderC1ERKS_>:
 800f278:	b538      	push	{r3, r4, r5, lr}
 800f27a:	460d      	mov	r5, r1
 800f27c:	f811 3b04 	ldrb.w	r3, [r1], #4
 800f280:	4604      	mov	r4, r0
 800f282:	f800 3b04 	strb.w	r3, [r0], #4
 800f286:	f7f1 fbb9 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 800f28a:	8a2b      	ldrh	r3, [r5, #16]
 800f28c:	4620      	mov	r0, r4
 800f28e:	8223      	strh	r3, [r4, #16]
 800f290:	bd38      	pop	{r3, r4, r5, pc}
	...

0800f294 <_ZN13Communication4SpinEv>:
void Communication::Spin(void) {
 800f294:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t index = 0;
 800f298:	2500      	movs	r5, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f29a:	4f29      	ldr	r7, [pc, #164]	@ (800f340 <_ZN13Communication4SpinEv+0xac>)
void Communication::Spin(void) {
 800f29c:	b08d      	sub	sp, #52	@ 0x34
 800f29e:	4604      	mov	r4, r0
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 800f2a0:	f04f 31ff 	mov.w	r1, #4294967295
 800f2a4:	6800      	ldr	r0, [r0, #0]
 800f2a6:	f7fc ff77 	bl	800c198 <osSemaphoreAcquire>
 800f2aa:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 800f2ae:	1a9b      	subs	r3, r3, r2
 800f2b0:	109b      	asrs	r3, r3, #2
 800f2b2:	437b      	muls	r3, r7
	while (index < pending_messages.size()) {
 800f2b4:	429d      	cmp	r5, r3
 800f2b6:	d308      	bcc.n	800f2ca <_ZN13Communication4SpinEv+0x36>
	osSemaphoreRelease(CommunicationSemaphore);
 800f2b8:	6820      	ldr	r0, [r4, #0]
 800f2ba:	f7fc ffa1 	bl	800c200 <osSemaphoreRelease>
	osDelay(DEFAULT_COMMUNICATION_PERIOD);
 800f2be:	2064      	movs	r0, #100	@ 0x64
}
 800f2c0:	b00d      	add	sp, #52	@ 0x34
 800f2c2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	osDelay(DEFAULT_COMMUNICATION_PERIOD);
 800f2c6:	f7fc befd 	b.w	800c0c4 <osDelay>
	return *(this->_M_impl._M_start + __n);
 800f2ca:	eb05 0185 	add.w	r1, r5, r5, lsl #2
		MessageHeader message = pending_messages[index];
 800f2ce:	a802      	add	r0, sp, #8
 800f2d0:	ea4f 0881 	mov.w	r8, r1, lsl #2
 800f2d4:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800f2d8:	f7ff ffce 	bl	800f278 <_ZN13MessageHeaderC1ERKS_>
		CommunicationProtocol* protocol = FindProtocol(message.interface, &success);
 800f2dc:	f10d 0207 	add.w	r2, sp, #7
 800f2e0:	f89d 1008 	ldrb.w	r1, [sp, #8]
 800f2e4:	4620      	mov	r0, r4
 800f2e6:	f7ff fb0d 	bl	800e904 <_ZN13Communication12FindProtocolEhPb>
		if (!success)
 800f2ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
		CommunicationProtocol* protocol = FindProtocol(message.interface, &success);
 800f2ee:	4606      	mov	r6, r0
		if (!success)
 800f2f0:	b92b      	cbnz	r3, 800f2fe <_ZN13Communication4SpinEv+0x6a>
 800f2f2:	4620      	mov	r0, r4
 800f2f4:	f850 1f30 	ldr.w	r1, [r0, #48]!
      { return _M_erase(begin() + (__position - cbegin())); }
 800f2f8:	4441      	add	r1, r8
 800f2fa:	f7ff fbcf 	bl	800ea9c <_ZNSt6vectorI13MessageHeaderSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>
		message.source_address = address; // set the source address as the module address
 800f2fe:	7d23      	ldrb	r3, [r4, #20]
		HAL_StatusTypeDef status = protocol->Send(message);
 800f300:	a902      	add	r1, sp, #8
 800f302:	a807      	add	r0, sp, #28
		message.source_address = address; // set the source address as the module address
 800f304:	f88d 3019 	strb.w	r3, [sp, #25]
		HAL_StatusTypeDef status = protocol->Send(message);
 800f308:	6833      	ldr	r3, [r6, #0]
 800f30a:	f8d3 9008 	ldr.w	r9, [r3, #8]
 800f30e:	f7ff ffb3 	bl	800f278 <_ZN13MessageHeaderC1ERKS_>
 800f312:	a907      	add	r1, sp, #28
 800f314:	4630      	mov	r0, r6
 800f316:	47c8      	blx	r9
 800f318:	4606      	mov	r6, r0
      }
 800f31a:	a808      	add	r0, sp, #32
 800f31c:	f7f1 fabe 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (status == HAL_OK || status == HAL_ERROR)
 800f320:	2e01      	cmp	r6, #1
 800f322:	d809      	bhi.n	800f338 <_ZN13Communication4SpinEv+0xa4>
 800f324:	4620      	mov	r0, r4
 800f326:	f850 1f30 	ldr.w	r1, [r0, #48]!
      { return _M_erase(begin() + (__position - cbegin())); }
 800f32a:	4441      	add	r1, r8
 800f32c:	f7ff fbb6 	bl	800ea9c <_ZNSt6vectorI13MessageHeaderSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>
      }
 800f330:	a803      	add	r0, sp, #12
 800f332:	f7f1 fab3 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 800f336:	e7b8      	b.n	800f2aa <_ZN13Communication4SpinEv+0x16>
			index++;
 800f338:	3501      	adds	r5, #1
 800f33a:	b2ed      	uxtb	r5, r5
 800f33c:	e7f8      	b.n	800f330 <_ZN13Communication4SpinEv+0x9c>
 800f33e:	bf00      	nop
 800f340:	cccccccd 	.word	0xcccccccd

0800f344 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800f344:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f348:	e9d0 7900 	ldrd	r7, r9, [r0]
 800f34c:	4b3f      	ldr	r3, [pc, #252]	@ (800f44c <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x108>)
 800f34e:	4606      	mov	r6, r0
 800f350:	eba9 0507 	sub.w	r5, r9, r7
 800f354:	4688      	mov	r8, r1
 800f356:	4614      	mov	r4, r2
 800f358:	10ad      	asrs	r5, r5, #2
 800f35a:	435d      	muls	r5, r3
	if (max_size() - size() < __n)
 800f35c:	4b3c      	ldr	r3, [pc, #240]	@ (800f450 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x10c>)
 800f35e:	429d      	cmp	r5, r3
 800f360:	d102      	bne.n	800f368 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
 800f362:	483c      	ldr	r0, [pc, #240]	@ (800f454 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x110>)
 800f364:	f007 f98a 	bl	801667c <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 800f368:	45b9      	cmp	r9, r7
 800f36a:	bf14      	ite	ne
 800f36c:	462a      	movne	r2, r5
 800f36e:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 800f370:	eba1 0b07 	sub.w	fp, r1, r7
 800f374:	18ad      	adds	r5, r5, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800f376:	d22d      	bcs.n	800f3d4 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x90>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800f378:	b375      	cbz	r5, 800f3d8 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x94>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800f37a:	429d      	cmp	r5, r3
 800f37c:	bf28      	it	cs
 800f37e:	461d      	movcs	r5, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800f380:	2014      	movs	r0, #20
 800f382:	4368      	muls	r0, r5
 800f384:	f007 f8c5 	bl	8016512 <_Znwj>
 800f388:	4682      	mov	sl, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800f38a:	4621      	mov	r1, r4
 800f38c:	eb0a 000b 	add.w	r0, sl, fp
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f390:	463c      	mov	r4, r7
      _ForwardIterator __cur = __result;
 800f392:	46d3      	mov	fp, sl
 800f394:	f7ff ff70 	bl	800f278 <_ZN13MessageHeaderC1ERKS_>
      for (; __first != __last; ++__first, (void)++__cur)
 800f398:	45a0      	cmp	r8, r4
 800f39a:	f04f 0300 	mov.w	r3, #0
 800f39e:	f10b 0b14 	add.w	fp, fp, #20
 800f3a2:	d11b      	bne.n	800f3dc <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x98>
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 800f3a4:	f04f 0800 	mov.w	r8, #0
 800f3a8:	454c      	cmp	r4, r9
 800f3aa:	465b      	mov	r3, fp
 800f3ac:	f10b 0b14 	add.w	fp, fp, #20
 800f3b0:	d12f      	bne.n	800f412 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xce>
	if (__p)
 800f3b2:	b137      	cbz	r7, 800f3c2 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x7e>
		    this->_M_impl._M_end_of_storage - __old_start);
 800f3b4:	68b1      	ldr	r1, [r6, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800f3b6:	4638      	mov	r0, r7
 800f3b8:	9301      	str	r3, [sp, #4]
 800f3ba:	1bc9      	subs	r1, r1, r7
 800f3bc:	f007 f884 	bl	80164c8 <_ZdlPvj>
 800f3c0:	9b01      	ldr	r3, [sp, #4]
      this->_M_impl._M_finish = __new_finish;
 800f3c2:	e9c6 a300 	strd	sl, r3, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800f3c6:	2314      	movs	r3, #20
 800f3c8:	fb03 a305 	mla	r3, r3, r5, sl
 800f3cc:	60b3      	str	r3, [r6, #8]
    }
 800f3ce:	b003      	add	sp, #12
 800f3d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3d4:	461d      	mov	r5, r3
 800f3d6:	e7d3      	b.n	800f380 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800f3d8:	46aa      	mov	sl, r5
 800f3da:	e7d6      	b.n	800f38a <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 800f3dc:	7822      	ldrb	r2, [r4, #0]
      }
 800f3de:	1d20      	adds	r0, r4, #4
 800f3e0:	f80b 2c14 	strb.w	r2, [fp, #-20]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 800f3e4:	6862      	ldr	r2, [r4, #4]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 800f3e6:	6063      	str	r3, [r4, #4]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 800f3e8:	f84b 2c10 	str.w	r2, [fp, #-16]
 800f3ec:	68a2      	ldr	r2, [r4, #8]
 800f3ee:	f84b 2c0c 	str.w	r2, [fp, #-12]
	  _M_end_of_storage(__x._M_end_of_storage)
 800f3f2:	68e2      	ldr	r2, [r4, #12]
 800f3f4:	f84b 2c08 	str.w	r2, [fp, #-8]
 800f3f8:	7c22      	ldrb	r2, [r4, #16]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 800f3fa:	e9c4 3302 	strd	r3, r3, [r4, #8]
 800f3fe:	f80b 2c04 	strb.w	r2, [fp, #-4]
 800f402:	3414      	adds	r4, #20
 800f404:	f814 2c03 	ldrb.w	r2, [r4, #-3]
 800f408:	f80b 2c03 	strb.w	r2, [fp, #-3]
      }
 800f40c:	f7f1 fa46 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 800f410:	e7c2      	b.n	800f398 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x54>
 800f412:	7823      	ldrb	r3, [r4, #0]
 800f414:	1d20      	adds	r0, r4, #4
 800f416:	f80b 3c14 	strb.w	r3, [fp, #-20]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 800f41a:	6863      	ldr	r3, [r4, #4]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 800f41c:	f8c4 8004 	str.w	r8, [r4, #4]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 800f420:	f84b 3c10 	str.w	r3, [fp, #-16]
 800f424:	68a3      	ldr	r3, [r4, #8]
 800f426:	f84b 3c0c 	str.w	r3, [fp, #-12]
	  _M_end_of_storage(__x._M_end_of_storage)
 800f42a:	68e3      	ldr	r3, [r4, #12]
 800f42c:	f84b 3c08 	str.w	r3, [fp, #-8]
 800f430:	7c23      	ldrb	r3, [r4, #16]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 800f432:	e9c4 8802 	strd	r8, r8, [r4, #8]
 800f436:	f80b 3c04 	strb.w	r3, [fp, #-4]
 800f43a:	3414      	adds	r4, #20
 800f43c:	f814 3c03 	ldrb.w	r3, [r4, #-3]
 800f440:	f80b 3c03 	strb.w	r3, [fp, #-3]
      }
 800f444:	f7f1 fa2a 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 800f448:	e7ae      	b.n	800f3a8 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x64>
 800f44a:	bf00      	nop
 800f44c:	cccccccd 	.word	0xcccccccd
 800f450:	06666666 	.word	0x06666666
 800f454:	08016b36 	.word	0x08016b36

0800f458 <_ZN13Communication4SendE13MessageHeader>:
HAL_StatusTypeDef Communication::Send(MessageHeader message) {
 800f458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f45a:	b087      	sub	sp, #28
 800f45c:	460d      	mov	r5, r1
	CommunicationProtocol* protocol = FindProtocol(message.interface, &success);
 800f45e:	7809      	ldrb	r1, [r1, #0]
HAL_StatusTypeDef Communication::Send(MessageHeader message) {
 800f460:	4604      	mov	r4, r0
	CommunicationProtocol* protocol = FindProtocol(message.interface, &success);
 800f462:	f10d 0203 	add.w	r2, sp, #3
 800f466:	f7ff fa4d 	bl	800e904 <_ZN13Communication12FindProtocolEhPb>
	if (!success) return HAL_ERROR;
 800f46a:	f89d 3003 	ldrb.w	r3, [sp, #3]
	CommunicationProtocol* protocol = FindProtocol(message.interface, &success);
 800f46e:	4606      	mov	r6, r0
	if (!success) return HAL_ERROR;
 800f470:	2b00      	cmp	r3, #0
 800f472:	d032      	beq.n	800f4da <_ZN13Communication4SendE13MessageHeader+0x82>
	message.source_address = address; // set the source address as the module address
 800f474:	7d23      	ldrb	r3, [r4, #20]
	CommunicationLED(leds, message.interface);
 800f476:	7829      	ldrb	r1, [r5, #0]
	message.source_address = address; // set the source address as the module address
 800f478:	746b      	strb	r3, [r5, #17]
	CommunicationLED(leds, message.interface);
 800f47a:	6920      	ldr	r0, [r4, #16]
 800f47c:	f7fe ffc7 	bl	800e40e <_Z16CommunicationLEDP4LEDSh>
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 800f480:	f04f 31ff 	mov.w	r1, #4294967295
 800f484:	6820      	ldr	r0, [r4, #0]
 800f486:	f7fc fe87 	bl	800c198 <osSemaphoreAcquire>
	HAL_StatusTypeDef status = protocol->Send(message);
 800f48a:	6833      	ldr	r3, [r6, #0]
 800f48c:	4629      	mov	r1, r5
 800f48e:	a801      	add	r0, sp, #4
 800f490:	689f      	ldr	r7, [r3, #8]
 800f492:	f7ff fef1 	bl	800f278 <_ZN13MessageHeaderC1ERKS_>
 800f496:	a901      	add	r1, sp, #4
 800f498:	4630      	mov	r0, r6
 800f49a:	47b8      	blx	r7
 800f49c:	4606      	mov	r6, r0
 800f49e:	a802      	add	r0, sp, #8
 800f4a0:	f7f1 f9fc 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (status == HAL_BUSY || status == HAL_TIMEOUT) {
 800f4a4:	1eb3      	subs	r3, r6, #2
 800f4a6:	b2db      	uxtb	r3, r3
 800f4a8:	2b01      	cmp	r3, #1
 800f4aa:	d809      	bhi.n	800f4c0 <_ZN13Communication4SendE13MessageHeader+0x68>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800f4ac:	e9d4 030d 	ldrd	r0, r3, [r4, #52]	@ 0x34
 800f4b0:	4298      	cmp	r0, r3
 800f4b2:	d00b      	beq.n	800f4cc <_ZN13Communication4SendE13MessageHeader+0x74>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800f4b4:	4629      	mov	r1, r5
 800f4b6:	f7ff fedf 	bl	800f278 <_ZN13MessageHeaderC1ERKS_>
	    ++this->_M_impl._M_finish;
 800f4ba:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f4bc:	3314      	adds	r3, #20
 800f4be:	6363      	str	r3, [r4, #52]	@ 0x34
	osSemaphoreRelease(CommunicationSemaphore);
 800f4c0:	6820      	ldr	r0, [r4, #0]
 800f4c2:	f7fc fe9d 	bl	800c200 <osSemaphoreRelease>
}
 800f4c6:	4630      	mov	r0, r6
 800f4c8:	b007      	add	sp, #28
 800f4ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  _M_realloc_insert(end(), __x);
 800f4cc:	4601      	mov	r1, r0
 800f4ce:	462a      	mov	r2, r5
 800f4d0:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 800f4d4:	f7ff ff36 	bl	800f344 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 800f4d8:	e7f2      	b.n	800f4c0 <_ZN13Communication4SendE13MessageHeader+0x68>
	if (!success) return HAL_ERROR;
 800f4da:	2601      	movs	r6, #1
 800f4dc:	e7f3      	b.n	800f4c6 <_ZN13Communication4SendE13MessageHeader+0x6e>

0800f4de <_ZN23SubscriberConfigurationC1ERKS_>:
 800f4de:	b570      	push	{r4, r5, r6, lr}
 800f4e0:	880b      	ldrh	r3, [r1, #0]
 800f4e2:	4604      	mov	r4, r0
 800f4e4:	460d      	mov	r5, r1
 800f4e6:	8003      	strh	r3, [r0, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800f4e8:	2300      	movs	r3, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f4ea:	e9d1 2601 	ldrd	r2, r6, [r1, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800f4ee:	e9c0 3301 	strd	r3, r3, [r0, #4]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800f4f2:	1ab6      	subs	r6, r6, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
 800f4f4:	60c3      	str	r3, [r0, #12]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800f4f6:	d043      	beq.n	800f580 <_ZN23SubscriberConfigurationC1ERKS_+0xa2>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800f4f8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f4fc:	429e      	cmp	r6, r3
 800f4fe:	d301      	bcc.n	800f504 <_ZN23SubscriberConfigurationC1ERKS_+0x26>
	      std::__throw_bad_array_new_length();
 800f500:	f007 f8b9 	bl	8016676 <_ZSt28__throw_bad_array_new_lengthv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800f504:	4630      	mov	r0, r6
 800f506:	f007 f804 	bl	8016512 <_Znwj>
 800f50a:	4603      	mov	r3, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800f50c:	441e      	add	r6, r3
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800f50e:	e9c4 3301 	strd	r3, r3, [r4, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800f512:	60e6      	str	r6, [r4, #12]
      : _M_current(__i) { }
 800f514:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
	  if (_Num)
 800f518:	4291      	cmp	r1, r2
	  const ptrdiff_t _Num = __last - __first;
 800f51a:	eba2 0601 	sub.w	r6, r2, r1
	  if (_Num)
 800f51e:	d004      	beq.n	800f52a <_ZN23SubscriberConfigurationC1ERKS_+0x4c>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800f520:	4618      	mov	r0, r3
 800f522:	4632      	mov	r2, r6
 800f524:	f007 f982 	bl	801682c <memmove>
 800f528:	4603      	mov	r3, r0
	  return __result + _Num;
 800f52a:	4433      	add	r3, r6
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f52c:	e9d5 2604 	ldrd	r2, r6, [r5, #16]
	this->_M_impl._M_finish =
 800f530:	60a3      	str	r3, [r4, #8]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800f532:	2300      	movs	r3, #0
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800f534:	1ab6      	subs	r6, r6, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
 800f536:	61a3      	str	r3, [r4, #24]
 800f538:	e9c4 3304 	strd	r3, r3, [r4, #16]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800f53c:	d022      	beq.n	800f584 <_ZN23SubscriberConfigurationC1ERKS_+0xa6>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800f53e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f542:	429e      	cmp	r6, r3
 800f544:	d2dc      	bcs.n	800f500 <_ZN23SubscriberConfigurationC1ERKS_+0x22>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800f546:	4630      	mov	r0, r6
 800f548:	f006 ffe3 	bl	8016512 <_Znwj>
 800f54c:	4603      	mov	r3, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800f54e:	441e      	add	r6, r3
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800f550:	e9c4 3304 	strd	r3, r3, [r4, #16]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800f554:	61a6      	str	r6, [r4, #24]
 800f556:	e9d5 1204 	ldrd	r1, r2, [r5, #16]
	  if (_Num)
 800f55a:	4291      	cmp	r1, r2
	  const ptrdiff_t _Num = __last - __first;
 800f55c:	eba2 0601 	sub.w	r6, r2, r1
	  if (_Num)
 800f560:	d004      	beq.n	800f56c <_ZN23SubscriberConfigurationC1ERKS_+0x8e>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800f562:	4618      	mov	r0, r3
 800f564:	4632      	mov	r2, r6
 800f566:	f007 f961 	bl	801682c <memmove>
 800f56a:	4603      	mov	r3, r0
	  return __result + _Num;
 800f56c:	4433      	add	r3, r6
 800f56e:	f105 011c 	add.w	r1, r5, #28
 800f572:	f104 001c 	add.w	r0, r4, #28
	this->_M_impl._M_finish =
 800f576:	6163      	str	r3, [r4, #20]
 800f578:	f7f1 fa40 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 800f57c:	4620      	mov	r0, r4
 800f57e:	bd70      	pop	{r4, r5, r6, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800f580:	4633      	mov	r3, r6
 800f582:	e7c3      	b.n	800f50c <_ZN23SubscriberConfigurationC1ERKS_+0x2e>
 800f584:	4633      	mov	r3, r6
 800f586:	e7e2      	b.n	800f54e <_ZN23SubscriberConfigurationC1ERKS_+0x70>

0800f588 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>:
 * @param input length: the number of values to extract
 * @param output success: whether successful
 * @return a vector with extracted values
 */
template<typename T>
std::vector<T> Communication::ExtractVector(std::vector<uint8_t> payload, uint16_t start_index, uint16_t length, bool* success) {
 800f588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
 800f58c:	2600      	movs	r6, #0
 800f58e:	4605      	mov	r5, r0
 800f590:	4688      	mov	r8, r1
 800f592:	4691      	mov	r9, r2
 800f594:	ed2d 8b02 	vpush	{d8}
 800f598:	b087      	sub	sp, #28
 800f59a:	6086      	str	r6, [r0, #8]
 800f59c:	9301      	str	r3, [sp, #4]
 800f59e:	e9c0 6600 	strd	r6, r6, [r0]
 800f5a2:	b2f4      	uxtb	r4, r6
	std::vector<T> data;
	uint8_t type_length = sizeof(T);

	for (uint8_t index = 0; index < length; index++) {
 800f5a4:	9b01      	ldr	r3, [sp, #4]
 800f5a6:	429c      	cmp	r4, r3
 800f5a8:	db05      	blt.n	800f5b6 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x2e>
		if (not *success)
			return data;
		data.push_back(element);
	}
	return data;
}
 800f5aa:	4628      	mov	r0, r5
 800f5ac:	b007      	add	sp, #28
 800f5ae:	ecbd 8b02 	vpop	{d8}
 800f5b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 800f5b6:	4641      	mov	r1, r8
 800f5b8:	a803      	add	r0, sp, #12
 800f5ba:	f7f1 fa1f 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 800f5be:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f5c0:	eb09 0184 	add.w	r1, r9, r4, lsl #2
 800f5c4:	a803      	add	r0, sp, #12
 800f5c6:	b289      	uxth	r1, r1
 800f5c8:	f7ff f8ec 	bl	800e7a4 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0>
      }
 800f5cc:	a803      	add	r0, sp, #12
 800f5ce:	eeb0 8a40 	vmov.f32	s16, s0
 800f5d2:	f7f1 f963 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (not *success)
 800f5d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f5d8:	781b      	ldrb	r3, [r3, #0]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d0e5      	beq.n	800f5aa <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x22>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800f5de:	e9d5 4301 	ldrd	r4, r3, [r5, #4]
 800f5e2:	429c      	cmp	r4, r3
 800f5e4:	d004      	beq.n	800f5f0 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x68>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800f5e6:	eca4 8a01 	vstmia	r4!, {s16}
	    ++this->_M_impl._M_finish;
 800f5ea:	606c      	str	r4, [r5, #4]
	for (uint8_t index = 0; index < length; index++) {
 800f5ec:	3601      	adds	r6, #1
 800f5ee:	e7d8      	b.n	800f5a2 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x1a>
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800f5f0:	2101      	movs	r1, #1
 800f5f2:	4a13      	ldr	r2, [pc, #76]	@ (800f640 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0xb8>)
 800f5f4:	4628      	mov	r0, r5
 800f5f6:	f7ff fde8 	bl	800f1ca <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>
      pointer __old_start = this->_M_impl._M_start;
 800f5fa:	682f      	ldr	r7, [r5, #0]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800f5fc:	4682      	mov	sl, r0
      pointer __new_start(this->_M_allocate(__len));
 800f5fe:	f7ff f817 	bl	800e630 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
    { return __lhs.base() - __rhs.base(); }
 800f602:	eba4 0b07 	sub.w	fp, r4, r7
 800f606:	4604      	mov	r4, r0
 800f608:	eb00 010b 	add.w	r1, r0, fp
      if (__count > 0)
 800f60c:	f1bb 0f00 	cmp.w	fp, #0
 800f610:	ed81 8a00 	vstr	s16, [r1]
 800f614:	dd03      	ble.n	800f61e <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x96>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800f616:	465a      	mov	r2, fp
 800f618:	4639      	mov	r1, r7
 800f61a:	f007 f907 	bl	801682c <memmove>
	      ++__new_finish;
 800f61e:	f10b 0204 	add.w	r2, fp, #4
 800f622:	eb04 0b02 	add.w	fp, r4, r2
	if (__p)
 800f626:	b127      	cbz	r7, 800f632 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0xaa>
		    this->_M_impl._M_end_of_storage - __old_start);
 800f628:	68a9      	ldr	r1, [r5, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800f62a:	4638      	mov	r0, r7
 800f62c:	1bc9      	subs	r1, r1, r7
 800f62e:	f006 ff4b 	bl	80164c8 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 800f632:	e9c5 4b00 	strd	r4, fp, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800f636:	eb04 048a 	add.w	r4, r4, sl, lsl #2
 800f63a:	60ac      	str	r4, [r5, #8]
 800f63c:	e7d6      	b.n	800f5ec <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x64>
 800f63e:	bf00      	nop
 800f640:	08016b36 	.word	0x08016b36

0800f644 <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb.isra.0>:
void Communication::ExtractArray(T* data, std::vector<uint8_t> payload, uint16_t start_index, uint16_t length, bool* success) {
 800f644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f648:	ed2d 8b02 	vpush	{d8}
 800f64c:	b085      	sub	sp, #20
 800f64e:	4607      	mov	r7, r0
 800f650:	4688      	mov	r8, r1
 800f652:	4691      	mov	r9, r2
 800f654:	461d      	mov	r5, r3
 800f656:	f8dd a040 	ldr.w	sl, [sp, #64]	@ 0x40
 800f65a:	2600      	movs	r6, #0
 800f65c:	b2f4      	uxtb	r4, r6
	for (uint8_t index = 0; index < length; index++) {
 800f65e:	42ac      	cmp	r4, r5
 800f660:	db04      	blt.n	800f66c <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x28>
}
 800f662:	b005      	add	sp, #20
 800f664:	ecbd 8b02 	vpop	{d8}
 800f668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 800f66c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f670:	4641      	mov	r1, r8
 800f672:	eb09 0484 	add.w	r4, r9, r4, lsl #2
 800f676:	a801      	add	r0, sp, #4
 800f678:	f7f1 f9c0 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 800f67c:	4652      	mov	r2, sl
 800f67e:	b2a1      	uxth	r1, r4
 800f680:	a801      	add	r0, sp, #4
 800f682:	f7ff f88f 	bl	800e7a4 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0>
      }
 800f686:	a801      	add	r0, sp, #4
 800f688:	eeb0 8a40 	vmov.f32	s16, s0
 800f68c:	f7f1 f906 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (not *success)
 800f690:	f89a 3000 	ldrb.w	r3, [sl]
 800f694:	3601      	adds	r6, #1
 800f696:	2b00      	cmp	r3, #0
 800f698:	d0e3      	beq.n	800f662 <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x1e>
		data[index] = element;
 800f69a:	44bb      	add	fp, r7
 800f69c:	ed8b 8a00 	vstr	s16, [fp]
	for (uint8_t index = 0; index < length; index++) {
 800f6a0:	e7dc      	b.n	800f65c <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x18>

0800f6a2 <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt>:
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 800f6a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6a6:	b09f      	sub	sp, #124	@ 0x7c
 800f6a8:	461c      	mov	r4, r3
 800f6aa:	4690      	mov	r8, r2
 800f6ac:	4689      	mov	r9, r1
	T array_values[element.element_register.length];
 800f6ae:	8895      	ldrh	r5, [r2, #4]
 800f6b0:	466a      	mov	r2, sp
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 800f6b2:	af02      	add	r7, sp, #8
	T array_values[element.element_register.length];
 800f6b4:	00ab      	lsls	r3, r5, #2
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 800f6b6:	4683      	mov	fp, r0
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 800f6b8:	3104      	adds	r1, #4
 800f6ba:	f107 061f 	add.w	r6, r7, #31
	T array_values[element.element_register.length];
 800f6be:	3307      	adds	r3, #7
 800f6c0:	f107 0a3c 	add.w	sl, r7, #60	@ 0x3c
 800f6c4:	08db      	lsrs	r3, r3, #3
 800f6c6:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 800f6ca:	469d      	mov	sp, r3
 800f6cc:	ab02      	add	r3, sp, #8
 800f6ce:	617b      	str	r3, [r7, #20]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	e9c7 330c 	strd	r3, r3, [r7, #48]	@ 0x30
 800f6d6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (not element.element_register.isArray) {
 800f6d8:	f898 3003 	ldrb.w	r3, [r8, #3]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d145      	bne.n	800f76c <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0xca>
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 800f6e0:	f107 0048 	add.w	r0, r7, #72	@ 0x48
		length_to_extract = 1;
 800f6e4:	2501      	movs	r5, #1
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 800f6e6:	f7f1 f989 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 800f6ea:	4632      	mov	r2, r6
 800f6ec:	4621      	mov	r1, r4
 800f6ee:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 800f6f2:	f7ff f857 	bl	800e7a4 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0>
      }
 800f6f6:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 800f6fa:	ed87 0a08 	vstr	s0, [r7, #32]
 800f6fe:	f7f1 f8cd 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		data = &single_value;
 800f702:	f107 0320 	add.w	r3, r7, #32
 800f706:	617b      	str	r3, [r7, #20]
	subscriber_information.interface.interface = message.interface;
 800f708:	f899 3000 	ldrb.w	r3, [r9]
 800f70c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
	subscribers->Receive<T>(subscriber_information, data);
 800f710:	f8db 600c 	ldr.w	r6, [fp, #12]
	subscriber_information.interface.interface = message.interface;
 800f714:	60fb      	str	r3, [r7, #12]
	subscriber_information.interface.address = message.source_address;
 800f716:	f899 3011 	ldrb.w	r3, [r9, #17]
 * @param input data: published data for the input register
 */
template<typename T>
void MasterSubscribers::Receive(SubscriberInput information, T* data) {
	uint8_t index = 0;
	for (SubscriberConfiguration configuration : configurations) {
 800f71a:	f04f 0900 	mov.w	r9, #0
 800f71e:	85bd      	strh	r5, [r7, #44]	@ 0x2c
 800f720:	60bb      	str	r3, [r7, #8]
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 800f728:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800f72c:	68bb      	ldr	r3, [r7, #8]
		// Check that the subscriber is active
		if (configuration.activated) {
			// Check that the sucriber is subscribed to the input published register
			if (SubscribedToRemoteRegister(configuration.ID, information.register_, information.interface)) {
 800f72e:	f8c7 a010 	str.w	sl, [r7, #16]
 800f732:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f736:	4653      	mov	r3, sl
	subscriber_information.register_ = element.element_register;
 800f738:	e898 0003 	ldmia.w	r8, {r0, r1}
 800f73c:	6278      	str	r0, [r7, #36]	@ 0x24
 800f73e:	8539      	strh	r1, [r7, #40]	@ 0x28
 800f740:	f897 8026 	ldrb.w	r8, [r7, #38]	@ 0x26
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800f744:	ca07      	ldmia	r2, {r0, r1, r2}
 800f746:	c303      	stmia	r3!, {r0, r1}
 800f748:	801a      	strh	r2, [r3, #0]
      : _M_current(__i) { }
 800f74a:	6933      	ldr	r3, [r6, #16]
 800f74c:	607b      	str	r3, [r7, #4]
	for (SubscriberConfiguration configuration : configurations) {
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	455b      	cmp	r3, fp
 800f752:	d13d      	bne.n	800f7d0 <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0x12e>
	return start_index + sizeof(T) * length_to_extract;
 800f754:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800f758:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 800f75c:	f7f2 fa8a 	bl	8001c74 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
}
 800f760:	3774      	adds	r7, #116	@ 0x74
	return start_index + sizeof(T) * length_to_extract;
 800f762:	b2a4      	uxth	r4, r4
}
 800f764:	4620      	mov	r0, r4
 800f766:	46bd      	mov	sp, r7
 800f768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (element.element_register.isArray && element.element_register.length > 0) {
 800f76c:	b185      	cbz	r5, 800f790 <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0xee>
		ExtractArray<T>(array_values, message.payload, start_index, length_to_extract, &success);
 800f76e:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 800f772:	f7f1 f943 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 800f776:	9600      	str	r6, [sp, #0]
 800f778:	6978      	ldr	r0, [r7, #20]
 800f77a:	462b      	mov	r3, r5
 800f77c:	4622      	mov	r2, r4
 800f77e:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 800f782:	f7ff ff5f 	bl	800f644 <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 800f786:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 800f78a:	f7f1 f887 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		data = array_values;
 800f78e:	e7bb      	b.n	800f708 <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0x66>
		length_to_extract = message.payload[start_index];
 800f790:	f8d9 3004 	ldr.w	r3, [r9, #4]
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 800f794:	4650      	mov	r0, sl
		length_to_extract = message.payload[start_index];
 800f796:	5d1d      	ldrb	r5, [r3, r4]
		start_index++;
 800f798:	3401      	adds	r4, #1
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 800f79a:	f7f1 f92f 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 800f79e:	4651      	mov	r1, sl
		start_index++;
 800f7a0:	b2a4      	uxth	r4, r4
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 800f7a2:	462b      	mov	r3, r5
 800f7a4:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 800f7a8:	9600      	str	r6, [sp, #0]
 800f7aa:	4622      	mov	r2, r4
 800f7ac:	f7ff feec 	bl	800f588 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 800f7b0:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 800f7b4:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 800f7b8:	f7ff fc3c 	bl	800f034 <_ZNSt6vectorIfSaIfEEaSEOS1_.isra.0>
 800f7bc:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 800f7c0:	f7f2 fa58 	bl	8001c74 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 800f7c4:	4650      	mov	r0, sl
 800f7c6:	f7f1 f869 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return _M_data_ptr(this->_M_impl._M_start); }
 800f7ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7cc:	617b      	str	r3, [r7, #20]
 800f7ce:	e79b      	b.n	800f708 <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0x66>
 800f7d0:	4659      	mov	r1, fp
 800f7d2:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 800f7d6:	f7ff fe82 	bl	800f4de <_ZN23SubscriberConfigurationC1ERKS_>
		if (configuration.activated) {
 800f7da:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800f7de:	b1f3      	cbz	r3, 800f81e <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0x17c>
			if (SubscribedToRemoteRegister(configuration.ID, information.register_, information.interface)) {
 800f7e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f7e4:	4630      	mov	r0, r6
 800f7e6:	f897 a048 	ldrb.w	sl, [r7, #72]	@ 0x48
 800f7ea:	f887 803e 	strb.w	r8, [r7, #62]	@ 0x3e
 800f7ee:	f8ad 3000 	strh.w	r3, [sp]
 800f7f2:	4651      	mov	r1, sl
 800f7f4:	693b      	ldr	r3, [r7, #16]
 800f7f6:	cb0c      	ldmia	r3, {r2, r3}
 800f7f8:	f006 fbda 	bl	8015fb0 <_ZN17MasterSubscribers26SubscribedToRemoteRegisterEh8Register19SubscriberInterface>
 800f7fc:	b178      	cbz	r0, 800f81e <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0x17c>
				// Check that the address passes the filters
				if (AddressAccepted(configuration.ID, information.interface.address)) {
 800f7fe:	68ba      	ldr	r2, [r7, #8]
 800f800:	4651      	mov	r1, sl
 800f802:	4630      	mov	r0, r6
 800f804:	f006 fb26 	bl	8015e54 <_ZN17MasterSubscribers15AddressAcceptedEhh>
 800f808:	b148      	cbz	r0, 800f81e <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0x17c>

#ifdef USE_COM_LED_SUBSCRIBER_INPUT
					CommunicationLED(leds, information.interface.interface);
 800f80a:	68f9      	ldr	r1, [r7, #12]
 800f80c:	6870      	ldr	r0, [r6, #4]
 800f80e:	f7fe fdfe 	bl	800e40e <_Z16CommunicationLEDP4LEDSh>
#endif

					// Forward the data to the subscriber
					switch (information.register_.type) {
 800f812:	f1b8 0f04 	cmp.w	r8, #4
 800f816:	d00b      	beq.n	800f830 <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0x18e>
 800f818:	f1b8 0f08 	cmp.w	r8, #8
 800f81c:	d018      	beq.n	800f850 <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0x1ae>
	for (SubscriberConfiguration configuration : configurations) {
 800f81e:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 800f822:	f109 0901 	add.w	r9, r9, #1
 800f826:	f10b 0b28 	add.w	fp, fp, #40	@ 0x28
 800f82a:	f7ff fbf0 	bl	800f00e <_ZN23SubscriberConfigurationD1Ev>
	return *this;
 800f82e:	e78e      	b.n	800f74e <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0xac>
	return *(this->_M_impl._M_start + __n);
 800f830:	fa5f f389 	uxtb.w	r3, r9
						subscribers[index]->ReceiveUINT64(information, (uint64_t*) data);
						break;
#endif
#if defined(USE_INT8_COMMUNICATION) && defined(USE_INT8_REGISTER)
					case INT8_TYPE:
						subscribers[index]->ReceiveINT8(information, (int8_t*) data);
 800f834:	69b2      	ldr	r2, [r6, #24]
 800f836:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f83a:	6803      	ldr	r3, [r0, #0]
 800f83c:	f8d3 a000 	ldr.w	sl, [r3]
						subscribers[index]->ReceiveINT64(information, (int64_t*) data);
						break;
#endif
#if defined(USE_FLOAT_COMMUNICATION) && defined(USE_FLOAT_REGISTER)
					case FLOAT_TYPE:
						subscribers[index]->ReceiveFLOAT(information, (float*) data);
 800f840:	697b      	ldr	r3, [r7, #20]
 800f842:	f887 803e 	strb.w	r8, [r7, #62]	@ 0x3e
 800f846:	9300      	str	r3, [sp, #0]
 800f848:	693b      	ldr	r3, [r7, #16]
 800f84a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f84c:	47d0      	blx	sl
						break;
 800f84e:	e7e6      	b.n	800f81e <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0x17c>
 800f850:	fa5f f389 	uxtb.w	r3, r9
						subscribers[index]->ReceiveFLOAT(information, (float*) data);
 800f854:	69b2      	ldr	r2, [r6, #24]
 800f856:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f85a:	6803      	ldr	r3, [r0, #0]
 800f85c:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800f860:	e7ee      	b.n	800f840 <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0x19e>

0800f862 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt>:
uint16_t Communication::ProcessService(MessageHeader message, MessageElement element, uint16_t start_index) {
 800f862:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f866:	b099      	sub	sp, #100	@ 0x64
 800f868:	468c      	mov	ip, r1
 800f86a:	4683      	mov	fp, r0
 800f86c:	461c      	mov	r4, r3
 800f86e:	af04      	add	r7, sp, #16
	service_information.interface = ServiceInterface{.interface=message.interface, .address=message.source_address};
 800f870:	f89c 3000 	ldrb.w	r3, [ip]
 800f874:	f89c a011 	ldrb.w	sl, [ip, #17]
 800f878:	f107 0544 	add.w	r5, r7, #68	@ 0x44
	service_information.access = element.access;
 800f87c:	7a16      	ldrb	r6, [r2, #8]
	service_information.interface = ServiceInterface{.interface=message.interface, .address=message.source_address};
 800f87e:	617b      	str	r3, [r7, #20]
	service_information.register_ = element.element_register;
 800f880:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f884:	6238      	str	r0, [r7, #32]
	if (element.command) {
 800f886:	79d0      	ldrb	r0, [r2, #7]
	service_information.register_ = element.element_register;
 800f888:	84b9      	strh	r1, [r7, #36]	@ 0x24
		uint8_t error = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 800f88a:	f10c 0104 	add.w	r1, ip, #4
	if (element.command) {
 800f88e:	b340      	cbz	r0, 800f8e2 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x80>
		uint8_t error = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 800f890:	4628      	mov	r0, r5
 800f892:	f7f1 f8b3 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 800f896:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800f89a:	4621      	mov	r1, r4
 800f89c:	4628      	mov	r0, r5
 800f89e:	f7fe ffac 	bl	800e7fa <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 800f8a2:	4680      	mov	r8, r0
      }
 800f8a4:	4628      	mov	r0, r5
 800f8a6:	f7f0 fff9 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 800f8aa:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800f8ae:	b18b      	cbz	r3, 800f8d4 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x72>
			services->ReceiveError(service_information, error);//services->ReceiveError(element.element_register, message.interface, message.source_address, element.access, error);
 800f8b0:	2301      	movs	r3, #1
 800f8b2:	f887 a029 	strb.w	sl, [r7, #41]	@ 0x29
 800f8b6:	f887 602a 	strb.w	r6, [r7, #42]	@ 0x2a
 800f8ba:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f8bc:	697b      	ldr	r3, [r7, #20]
 800f8be:	f8db 0008 	ldr.w	r0, [fp, #8]
 800f8c2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 800f8c6:	f107 0320 	add.w	r3, r7, #32
 800f8ca:	f8cd 8000 	str.w	r8, [sp]
 800f8ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f8d0:	f006 f985 	bl	8015bde <_ZN8Services12ReceiveErrorE20ServiceConfigurationh>
		return start_index + 1;
 800f8d4:	3401      	adds	r4, #1
 800f8d6:	b2a4      	uxth	r4, r4
}
 800f8d8:	4620      	mov	r0, r4
 800f8da:	3754      	adds	r7, #84	@ 0x54
 800f8dc:	46bd      	mov	sp, r7
 800f8de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (element.access == WRITE) {
 800f8e2:	bb1e      	cbnz	r6, 800f92c <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0xca>
		uint8_t value = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 800f8e4:	4628      	mov	r0, r5
 800f8e6:	f7f1 f889 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 800f8ea:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800f8ee:	4621      	mov	r1, r4
 800f8f0:	4628      	mov	r0, r5
 800f8f2:	f7fe ff82 	bl	800e7fa <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 800f8f6:	4680      	mov	r8, r0
 800f8f8:	4628      	mov	r0, r5
 800f8fa:	f7f0 ffcf 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 800f8fe:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800f902:	2b00      	cmp	r3, #0
 800f904:	d0e6      	beq.n	800f8d4 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x72>
			services->ReceiveWrite(service_information, value);//services->ReceiveWrite(element.element_register, message.interface, message.source_address, value);
 800f906:	2301      	movs	r3, #1
 800f908:	f887 a029 	strb.w	sl, [r7, #41]	@ 0x29
 800f90c:	f887 602a 	strb.w	r6, [r7, #42]	@ 0x2a
 800f910:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f912:	697b      	ldr	r3, [r7, #20]
 800f914:	f8db 0008 	ldr.w	r0, [fp, #8]
 800f918:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 800f91c:	f107 0320 	add.w	r3, r7, #32
 800f920:	f8cd 8000 	str.w	r8, [sp]
 800f924:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f926:	f006 f91d 	bl	8015b64 <_ZN8Services12ReceiveWriteE20ServiceConfigurationh>
 800f92a:	e7d3      	b.n	800f8d4 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x72>
		T array_values[element.element_register.length];
 800f92c:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 800f930:	466e      	mov	r6, sp
	}
 800f932:	f8c7 d008 	str.w	sp, [r7, #8]
		T array_values[element.element_register.length];
 800f936:	ea4f 0388 	mov.w	r3, r8, lsl #2
	: _M_start(), _M_finish(), _M_end_of_storage()
 800f93a:	6378      	str	r0, [r7, #52]	@ 0x34
 800f93c:	3307      	adds	r3, #7
 800f93e:	08db      	lsrs	r3, r3, #3
 800f940:	eba6 03c3 	sub.w	r3, r6, r3, lsl #3
 800f944:	f107 061e 	add.w	r6, r7, #30
 800f948:	469d      	mov	sp, r3
		if (not element.element_register.isArray) {
 800f94a:	78d3      	ldrb	r3, [r2, #3]
		T array_values[element.element_register.length];
 800f94c:	f10d 0910 	add.w	r9, sp, #16
 800f950:	e9c7 000b 	strd	r0, r0, [r7, #44]	@ 0x2c
		if (not element.element_register.isArray) {
 800f954:	2b00      	cmp	r3, #0
 800f956:	d13d      	bne.n	800f9d4 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x172>
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 800f958:	4628      	mov	r0, r5
			data = &single_value;
 800f95a:	f107 0938 	add.w	r9, r7, #56	@ 0x38
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 800f95e:	f7f1 f84d 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
			length_to_extract = 1;
 800f962:	f04f 0801 	mov.w	r8, #1
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 800f966:	4632      	mov	r2, r6
 800f968:	4621      	mov	r1, r4
 800f96a:	4628      	mov	r0, r5
 800f96c:	f7fe ff1a 	bl	800e7a4 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0>
      }
 800f970:	4628      	mov	r0, r5
 800f972:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38
 800f976:	f7f0 ff91 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 800f97a:	ea4f 0288 	mov.w	r2, r8, lsl #2
		if (success)
 800f97e:	7fbb      	ldrb	r3, [r7, #30]
 800f980:	613a      	str	r2, [r7, #16]
 800f982:	b1eb      	cbz	r3, 800f9c0 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x15e>
 800f984:	697b      	ldr	r3, [r7, #20]
			services->ReceiveRead<T>(service_information, data);
 800f986:	f8db 6008 	ldr.w	r6, [fp, #8]
 800f98a:	f04f 0b01 	mov.w	fp, #1
 800f98e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 800f992:	f107 0320 	add.w	r3, r7, #32
 800f996:	f887 a029 	strb.w	sl, [r7, #41]	@ 0x29
 800f99a:	f8a7 8026 	strh.w	r8, [r7, #38]	@ 0x26
 800f99e:	f887 b02a 	strb.w	fp, [r7, #42]	@ 0x2a
 800f9a2:	f897 a022 	ldrb.w	sl, [r7, #34]	@ 0x22
 * @param input information: the service feedback information
 * @param input data: returned data from the remote module
 */
template<typename T>
void Services::ReceiveRead(ServiceConfiguration information, T* data) {
	bool success = true;
 800f9a6:	f887 b01f 	strb.w	fp, [r7, #31]
 800f9aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f9ae:	693b      	ldr	r3, [r7, #16]
 800f9b0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800f9b4:	444b      	add	r3, r9
	uint8_t start_index = 0;
 800f9b6:	2100      	movs	r1, #0
 800f9b8:	60fb      	str	r3, [r7, #12]
	while (success) {
 800f9ba:	7ffb      	ldrb	r3, [r7, #31]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d13b      	bne.n	800fa38 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x1d6>
		return start_index + sizeof(T) * length_to_extract;
 800f9c0:	693b      	ldr	r3, [r7, #16]
 800f9c2:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800f9c6:	441c      	add	r4, r3
 800f9c8:	f7f2 f954 	bl	8001c74 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 800f9cc:	f8d7 d008 	ldr.w	sp, [r7, #8]
 800f9d0:	b2a4      	uxth	r4, r4
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800f9d2:	e781      	b.n	800f8d8 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x76>
		} else if (element.element_register.isArray && element.element_register.length > 0) {
 800f9d4:	f1b8 0f00 	cmp.w	r8, #0
 800f9d8:	d00d      	beq.n	800f9f6 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x194>
			ExtractArray<T>(array_values, message.payload, start_index, length_to_extract, &success);
 800f9da:	4628      	mov	r0, r5
 800f9dc:	f7f1 f80e 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 800f9e0:	4648      	mov	r0, r9
 800f9e2:	4643      	mov	r3, r8
 800f9e4:	4622      	mov	r2, r4
 800f9e6:	4629      	mov	r1, r5
 800f9e8:	9600      	str	r6, [sp, #0]
 800f9ea:	f7ff fe2b 	bl	800f644 <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 800f9ee:	4628      	mov	r0, r5
 800f9f0:	f7f0 ff54 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
			data = array_values;
 800f9f4:	e7c1      	b.n	800f97a <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x118>
			length_to_extract = message.payload[start_index];
 800f9f6:	f8dc 3004 	ldr.w	r3, [ip, #4]
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 800f9fa:	f107 0038 	add.w	r0, r7, #56	@ 0x38
			length_to_extract = message.payload[start_index];
 800f9fe:	f813 8004 	ldrb.w	r8, [r3, r4]
			start_index++;
 800fa02:	3401      	adds	r4, #1
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 800fa04:	f7f0 fffa 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 800fa08:	f107 0138 	add.w	r1, r7, #56	@ 0x38
			start_index++;
 800fa0c:	b2a4      	uxth	r4, r4
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 800fa0e:	4643      	mov	r3, r8
 800fa10:	4628      	mov	r0, r5
 800fa12:	9600      	str	r6, [sp, #0]
 800fa14:	4622      	mov	r2, r4
 800fa16:	f7ff fdb7 	bl	800f588 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 800fa1a:	4629      	mov	r1, r5
 800fa1c:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800fa20:	f7ff fb08 	bl	800f034 <_ZNSt6vectorIfSaIfEEaSEOS1_.isra.0>
 800fa24:	4628      	mov	r0, r5
 800fa26:	f7f2 f925 	bl	8001c74 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 800fa2a:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 800fa2e:	f7f0 ff35 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return _M_data_ptr(this->_M_impl._M_start); }
 800fa32:	f8d7 902c 	ldr.w	r9, [r7, #44]	@ 0x2c
 800fa36:	e7a0      	b.n	800f97a <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x118>
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 800fa38:	f107 031f 	add.w	r3, r7, #31
 800fa3c:	f887 a046 	strb.w	sl, [r7, #70]	@ 0x46
 800fa40:	4630      	mov	r0, r6
 800fa42:	e9cd b301 	strd	fp, r3, [sp, #4]
 800fa46:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800fa4a:	f8ad 3000 	strh.w	r3, [sp]
 800fa4e:	e895 000c 	ldmia.w	r5, {r2, r3}
 800fa52:	f006 f848 	bl	8015ae6 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb>
		if (not success) return;
 800fa56:	7ffa      	ldrb	r2, [r7, #31]
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 800fa58:	6078      	str	r0, [r7, #4]
		if (not success) return;
 800fa5a:	2a00      	cmp	r2, #0
 800fa5c:	d0b0      	beq.n	800f9c0 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x15e>

		if (information.length > SERVICES_BUFFER_SIZE) return;
 800fa5e:	f5b8 7f80 	cmp.w	r8, #256	@ 0x100
 800fa62:	d8ad      	bhi.n	800f9c0 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x15e>

#ifdef USE_COM_LED_SERVICES_RECEPTION
		CommunicationLED(leds, information.interface.interface);
 800fa64:	6979      	ldr	r1, [r7, #20]
 800fa66:	f8d6 0c40 	ldr.w	r0, [r6, #3136]	@ 0xc40
 800fa6a:	f7fe fcd0 	bl	800e40e <_Z16CommunicationLEDP4LEDSh>
#endif

		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 800fa6e:	f04f 31ff 	mov.w	r1, #4294967295
 800fa72:	6830      	ldr	r0, [r6, #0]
 800fa74:	f7fc fb90 	bl	800c198 <osSemaphoreAcquire>
		services[index].configuration.length = information.length;
 800fa78:	2218      	movs	r2, #24
 800fa7a:	687b      	ldr	r3, [r7, #4]

		// Transfer data to the service buffer
		switch (information.register_.type) {
 800fa7c:	f1ba 0f04 	cmp.w	sl, #4
		services[index].configuration.length = information.length;
 800fa80:	fb02 6203 	mla	r2, r2, r3, r6
 800fa84:	f8a2 8010 	strh.w	r8, [r2, #16]
		switch (information.register_.type) {
 800fa88:	d005      	beq.n	800fa96 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x234>
 800fa8a:	f1ba 0f08 	cmp.w	sl, #8
 800fa8e:	d01c      	beq.n	800faca <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x268>
 800fa90:	f1ba 0f00 	cmp.w	sl, #0
 800fa94:	d107      	bne.n	800faa6 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x244>
			TranferData<uint64_t>((uint64_t*) data, &buffer_uint64[index][0], information.length);
			break;
#endif
#if defined(USE_INT8_COMMUNICATION) && defined(USE_INT8_REGISTER)
		case INT8_TYPE:
			TranferData<int8_t>((int8_t*) data, &buffer_int8[index][0], information.length);
 800fa96:	eb06 2103 	add.w	r1, r6, r3, lsl #8
 800fa9a:	2200      	movs	r2, #0
 800fa9c:	f501 710e 	add.w	r1, r1, #568	@ 0x238
 * @param output to: base pointer to copy data to
 * @param input length: number of elements to copy
 */
template<typename T>
void Services::TranferData(T* from, T* to, uint16_t length) {
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 800faa0:	b290      	uxth	r0, r2
 800faa2:	4580      	cmp	r8, r0
 800faa4:	d80c      	bhi.n	800fac0 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x25e>
		services[index].reception_flag = true;
 800faa6:	2218      	movs	r2, #24
		osSemaphoreRelease(ServiceSemaphore);
 800faa8:	6830      	ldr	r0, [r6, #0]
		services[index].reception_flag = true;
 800faaa:	607b      	str	r3, [r7, #4]
 800faac:	fb02 6203 	mla	r2, r2, r3, r6
 800fab0:	f882 b009 	strb.w	fp, [r2, #9]
		osSemaphoreRelease(ServiceSemaphore);
 800fab4:	f7fc fba4 	bl	800c200 <osSemaphoreRelease>
		start_index = index + 1;
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	1c59      	adds	r1, r3, #1
 800fabc:	b2c9      	uxtb	r1, r1
 800fabe:	e77c      	b.n	800f9ba <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x158>
		to[buffer_index] = from[buffer_index];
 800fac0:	f919 0002 	ldrsb.w	r0, [r9, r2]
 800fac4:	5488      	strb	r0, [r1, r2]
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 800fac6:	3201      	adds	r2, #1
 800fac8:	e7ea      	b.n	800faa0 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x23e>
			TranferData<float>((float*) data, &buffer_float[index][0], information.length);
 800faca:	eb06 2283 	add.w	r2, r6, r3, lsl #10
 800face:	4649      	mov	r1, r9
 800fad0:	f502 6287 	add.w	r2, r2, #1080	@ 0x438
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 800fad4:	68f8      	ldr	r0, [r7, #12]
 800fad6:	4288      	cmp	r0, r1
 800fad8:	d0e5      	beq.n	800faa6 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x244>
		to[buffer_index] = from[buffer_index];
 800fada:	f851 0b04 	ldr.w	r0, [r1], #4
 800fade:	f842 0b04 	str.w	r0, [r2], #4
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 800fae2:	e7f7      	b.n	800fad4 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x272>

0800fae4 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>:
std::vector<T> Communication::ExtractVector(std::vector<uint8_t> payload, uint16_t start_index, uint16_t length, bool* success) {
 800fae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
 800fae8:	2600      	movs	r6, #0
 800faea:	b087      	sub	sp, #28
 800faec:	4604      	mov	r4, r0
 800faee:	4691      	mov	r9, r2
 800faf0:	9100      	str	r1, [sp, #0]
 800faf2:	9301      	str	r3, [sp, #4]
 800faf4:	6086      	str	r6, [r0, #8]
 800faf6:	e9c0 6600 	strd	r6, r6, [r0]
 800fafa:	b2f5      	uxtb	r5, r6
	for (uint8_t index = 0; index < length; index++) {
 800fafc:	9b01      	ldr	r3, [sp, #4]
 800fafe:	429d      	cmp	r5, r3
 800fb00:	db03      	blt.n	800fb0a <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x26>
}
 800fb02:	4620      	mov	r0, r4
 800fb04:	b007      	add	sp, #28
 800fb06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 800fb0a:	9900      	ldr	r1, [sp, #0]
 800fb0c:	a803      	add	r0, sp, #12
 800fb0e:	f7f0 ff75 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 800fb12:	eb05 0109 	add.w	r1, r5, r9
 800fb16:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800fb18:	a803      	add	r0, sp, #12
 800fb1a:	b289      	uxth	r1, r1
 800fb1c:	f7fe fe60 	bl	800e7e0 <_ZN13Communication13ExtractSingleIaEET_St6vectorIhSaIhEEtPb.isra.0>
 800fb20:	4607      	mov	r7, r0
      }
 800fb22:	a803      	add	r0, sp, #12
 800fb24:	f7f0 feba 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (not *success)
 800fb28:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fb2a:	781b      	ldrb	r3, [r3, #0]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d0e8      	beq.n	800fb02 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x1e>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800fb30:	e9d4 5301 	ldrd	r5, r3, [r4, #4]
 800fb34:	429d      	cmp	r5, r3
 800fb36:	d005      	beq.n	800fb44 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x60>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800fb38:	702f      	strb	r7, [r5, #0]
	    ++this->_M_impl._M_finish;
 800fb3a:	6863      	ldr	r3, [r4, #4]
 800fb3c:	3301      	adds	r3, #1
 800fb3e:	6063      	str	r3, [r4, #4]
	for (uint8_t index = 0; index < length; index++) {
 800fb40:	3601      	adds	r6, #1
 800fb42:	e7da      	b.n	800fafa <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x16>
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800fb44:	4a13      	ldr	r2, [pc, #76]	@ (800fb94 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0xb0>)
 800fb46:	2101      	movs	r1, #1
 800fb48:	4620      	mov	r0, r4
 800fb4a:	f7ff fb25 	bl	800f198 <_ZNKSt6vectorIaSaIaEE12_M_check_lenEjPKc>
      pointer __old_start = this->_M_impl._M_start;
 800fb4e:	f8d4 b000 	ldr.w	fp, [r4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800fb52:	4682      	mov	sl, r0
      pointer __new_start(this->_M_allocate(__len));
 800fb54:	f7fe fd7e 	bl	800e654 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>
    { return __lhs.base() - __rhs.base(); }
 800fb58:	eba5 080b 	sub.w	r8, r5, fp
 800fb5c:	4605      	mov	r5, r0
      if (__count > 0)
 800fb5e:	f1b8 0f00 	cmp.w	r8, #0
 800fb62:	f800 7008 	strb.w	r7, [r0, r8]
 800fb66:	dd03      	ble.n	800fb70 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x8c>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800fb68:	4642      	mov	r2, r8
 800fb6a:	4659      	mov	r1, fp
 800fb6c:	f006 fe5e 	bl	801682c <memmove>
	      ++__new_finish;
 800fb70:	f108 0201 	add.w	r2, r8, #1
 800fb74:	18af      	adds	r7, r5, r2
	if (__p)
 800fb76:	f1bb 0f00 	cmp.w	fp, #0
 800fb7a:	d005      	beq.n	800fb88 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0xa4>
		    this->_M_impl._M_end_of_storage - __old_start);
 800fb7c:	68a1      	ldr	r1, [r4, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800fb7e:	4658      	mov	r0, fp
 800fb80:	eba1 010b 	sub.w	r1, r1, fp
 800fb84:	f006 fca0 	bl	80164c8 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 800fb88:	e9c4 5700 	strd	r5, r7, [r4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800fb8c:	4455      	add	r5, sl
 800fb8e:	60a5      	str	r5, [r4, #8]
 800fb90:	e7d6      	b.n	800fb40 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x5c>
 800fb92:	bf00      	nop
 800fb94:	08016b36 	.word	0x08016b36

0800fb98 <_ZN13Communication12ExtractArrayIaEEvPT_St6vectorIhSaIhEEttPb.isra.0>:
void Communication::ExtractArray(T* data, std::vector<uint8_t> payload, uint16_t start_index, uint16_t length, bool* success) {
 800fb98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb9c:	b085      	sub	sp, #20
 800fb9e:	4607      	mov	r7, r0
 800fba0:	4688      	mov	r8, r1
 800fba2:	4691      	mov	r9, r2
 800fba4:	461c      	mov	r4, r3
 800fba6:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 800fbaa:	2600      	movs	r6, #0
 800fbac:	b2f5      	uxtb	r5, r6
	for (uint8_t index = 0; index < length; index++) {
 800fbae:	42a5      	cmp	r5, r4
 800fbb0:	db02      	blt.n	800fbb8 <_ZN13Communication12ExtractArrayIaEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x20>
}
 800fbb2:	b005      	add	sp, #20
 800fbb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 800fbb8:	4641      	mov	r1, r8
 800fbba:	a801      	add	r0, sp, #4
 800fbbc:	f7f0 ff1e 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 800fbc0:	eb05 0109 	add.w	r1, r5, r9
 800fbc4:	465a      	mov	r2, fp
 800fbc6:	a801      	add	r0, sp, #4
 800fbc8:	b289      	uxth	r1, r1
		if (not *success)
 800fbca:	3601      	adds	r6, #1
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 800fbcc:	f7fe fe08 	bl	800e7e0 <_ZN13Communication13ExtractSingleIaEET_St6vectorIhSaIhEEtPb.isra.0>
 800fbd0:	4682      	mov	sl, r0
      }
 800fbd2:	a801      	add	r0, sp, #4
 800fbd4:	f7f0 fe62 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (not *success)
 800fbd8:	f89b 3000 	ldrb.w	r3, [fp]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d0e8      	beq.n	800fbb2 <_ZN13Communication12ExtractArrayIaEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x1a>
		data[index] = element;
 800fbe0:	f807 a005 	strb.w	sl, [r7, r5]
	for (uint8_t index = 0; index < length; index++) {
 800fbe4:	e7e2      	b.n	800fbac <_ZN13Communication12ExtractArrayIaEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x14>

0800fbe6 <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt>:
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 800fbe6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbea:	b09d      	sub	sp, #116	@ 0x74
 800fbec:	461c      	mov	r4, r3
 800fbee:	4690      	mov	r8, r2
 800fbf0:	4689      	mov	r9, r1
	T array_values[element.element_register.length];
 800fbf2:	8895      	ldrh	r5, [r2, #4]
 800fbf4:	466a      	mov	r2, sp
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 800fbf6:	af02      	add	r7, sp, #8
	T array_values[element.element_register.length];
 800fbf8:	1deb      	adds	r3, r5, #7
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 800fbfa:	4683      	mov	fp, r0
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 800fbfc:	3104      	adds	r1, #4
 800fbfe:	f107 061b 	add.w	r6, r7, #27
	T array_values[element.element_register.length];
 800fc02:	08db      	lsrs	r3, r3, #3
 800fc04:	f107 0a34 	add.w	sl, r7, #52	@ 0x34
 800fc08:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 800fc0c:	469d      	mov	sp, r3
 800fc0e:	ab02      	add	r3, sp, #8
 800fc10:	617b      	str	r3, [r7, #20]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800fc12:	2300      	movs	r3, #0
 800fc14:	e9c7 330a 	strd	r3, r3, [r7, #40]	@ 0x28
 800fc18:	633b      	str	r3, [r7, #48]	@ 0x30
	if (not element.element_register.isArray) {
 800fc1a:	f898 3003 	ldrb.w	r3, [r8, #3]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d143      	bne.n	800fcaa <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt+0xc4>
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 800fc22:	f107 0040 	add.w	r0, r7, #64	@ 0x40
		length_to_extract = 1;
 800fc26:	2501      	movs	r5, #1
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 800fc28:	f7f0 fee8 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 800fc2c:	4632      	mov	r2, r6
 800fc2e:	4621      	mov	r1, r4
 800fc30:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 800fc34:	f7fe fdd4 	bl	800e7e0 <_ZN13Communication13ExtractSingleIaEET_St6vectorIhSaIhEEtPb.isra.0>
 800fc38:	76b8      	strb	r0, [r7, #26]
      }
 800fc3a:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 800fc3e:	f7f0 fe2d 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		data = &single_value;
 800fc42:	f107 031a 	add.w	r3, r7, #26
 800fc46:	617b      	str	r3, [r7, #20]
	subscriber_information.interface.interface = message.interface;
 800fc48:	f899 3000 	ldrb.w	r3, [r9]
 800fc4c:	f107 021c 	add.w	r2, r7, #28
	subscribers->Receive<T>(subscriber_information, data);
 800fc50:	f8db 600c 	ldr.w	r6, [fp, #12]
	subscriber_information.interface.interface = message.interface;
 800fc54:	60fb      	str	r3, [r7, #12]
	subscriber_information.interface.address = message.source_address;
 800fc56:	f899 3011 	ldrb.w	r3, [r9, #17]
	for (SubscriberConfiguration configuration : configurations) {
 800fc5a:	f04f 0900 	mov.w	r9, #0
 800fc5e:	84bd      	strh	r5, [r7, #36]	@ 0x24
 800fc60:	60bb      	str	r3, [r7, #8]
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 800fc68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800fc6c:	68bb      	ldr	r3, [r7, #8]
			if (SubscribedToRemoteRegister(configuration.ID, information.register_, information.interface)) {
 800fc6e:	f8c7 a010 	str.w	sl, [r7, #16]
 800fc72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800fc76:	4653      	mov	r3, sl
	subscriber_information.register_ = element.element_register;
 800fc78:	e898 0003 	ldmia.w	r8, {r0, r1}
 800fc7c:	61f8      	str	r0, [r7, #28]
 800fc7e:	8439      	strh	r1, [r7, #32]
 800fc80:	f897 801e 	ldrb.w	r8, [r7, #30]
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800fc84:	ca07      	ldmia	r2, {r0, r1, r2}
 800fc86:	c303      	stmia	r3!, {r0, r1}
 800fc88:	801a      	strh	r2, [r3, #0]
      : _M_current(__i) { }
 800fc8a:	6933      	ldr	r3, [r6, #16]
 800fc8c:	607b      	str	r3, [r7, #4]
	for (SubscriberConfiguration configuration : configurations) {
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	455b      	cmp	r3, fp
 800fc92:	d13c      	bne.n	800fd0e <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt+0x128>
	return start_index + sizeof(T) * length_to_extract;
 800fc94:	442c      	add	r4, r5
 800fc96:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800fc9a:	f7ff f997 	bl	800efcc <_ZNSt12_Vector_baseIaSaIaEED1Ev>
}
 800fc9e:	376c      	adds	r7, #108	@ 0x6c
	return start_index + sizeof(T) * length_to_extract;
 800fca0:	b2a4      	uxth	r4, r4
}
 800fca2:	4620      	mov	r0, r4
 800fca4:	46bd      	mov	sp, r7
 800fca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (element.element_register.isArray && element.element_register.length > 0) {
 800fcaa:	b185      	cbz	r5, 800fcce <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt+0xe8>
		ExtractArray<T>(array_values, message.payload, start_index, length_to_extract, &success);
 800fcac:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 800fcb0:	f7f0 fea4 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 800fcb4:	9600      	str	r6, [sp, #0]
 800fcb6:	6978      	ldr	r0, [r7, #20]
 800fcb8:	462b      	mov	r3, r5
 800fcba:	4622      	mov	r2, r4
 800fcbc:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800fcc0:	f7ff ff6a 	bl	800fb98 <_ZN13Communication12ExtractArrayIaEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 800fcc4:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 800fcc8:	f7f0 fde8 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		data = array_values;
 800fccc:	e7bc      	b.n	800fc48 <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt+0x62>
		length_to_extract = message.payload[start_index];
 800fcce:	f8d9 3004 	ldr.w	r3, [r9, #4]
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 800fcd2:	4650      	mov	r0, sl
		length_to_extract = message.payload[start_index];
 800fcd4:	5d1d      	ldrb	r5, [r3, r4]
		start_index++;
 800fcd6:	3401      	adds	r4, #1
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 800fcd8:	f7f0 fe90 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 800fcdc:	4651      	mov	r1, sl
		start_index++;
 800fcde:	b2a4      	uxth	r4, r4
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 800fce0:	462b      	mov	r3, r5
 800fce2:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 800fce6:	9600      	str	r6, [sp, #0]
 800fce8:	4622      	mov	r2, r4
 800fcea:	f7ff fefb 	bl	800fae4 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 800fcee:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800fcf2:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800fcf6:	f7ff f973 	bl	800efe0 <_ZNSt6vectorIaSaIaEEaSEOS1_.isra.0>
 800fcfa:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 800fcfe:	f7ff f965 	bl	800efcc <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 800fd02:	4650      	mov	r0, sl
 800fd04:	f7f0 fdca 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return _M_data_ptr(this->_M_impl._M_start); }
 800fd08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd0a:	617b      	str	r3, [r7, #20]
 800fd0c:	e79c      	b.n	800fc48 <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt+0x62>
 800fd0e:	4659      	mov	r1, fp
 800fd10:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 800fd14:	f7ff fbe3 	bl	800f4de <_ZN23SubscriberConfigurationC1ERKS_>
		if (configuration.activated) {
 800fd18:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800fd1c:	b1eb      	cbz	r3, 800fd5a <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt+0x174>
			if (SubscribedToRemoteRegister(configuration.ID, information.register_, information.interface)) {
 800fd1e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800fd20:	4630      	mov	r0, r6
 800fd22:	f897 a040 	ldrb.w	sl, [r7, #64]	@ 0x40
 800fd26:	f887 8036 	strb.w	r8, [r7, #54]	@ 0x36
 800fd2a:	f8ad 3000 	strh.w	r3, [sp]
 800fd2e:	4651      	mov	r1, sl
 800fd30:	693b      	ldr	r3, [r7, #16]
 800fd32:	cb0c      	ldmia	r3, {r2, r3}
 800fd34:	f006 f93c 	bl	8015fb0 <_ZN17MasterSubscribers26SubscribedToRemoteRegisterEh8Register19SubscriberInterface>
 800fd38:	b178      	cbz	r0, 800fd5a <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt+0x174>
				if (AddressAccepted(configuration.ID, information.interface.address)) {
 800fd3a:	68ba      	ldr	r2, [r7, #8]
 800fd3c:	4651      	mov	r1, sl
 800fd3e:	4630      	mov	r0, r6
 800fd40:	f006 f888 	bl	8015e54 <_ZN17MasterSubscribers15AddressAcceptedEhh>
 800fd44:	b148      	cbz	r0, 800fd5a <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt+0x174>
					CommunicationLED(leds, information.interface.interface);
 800fd46:	68f9      	ldr	r1, [r7, #12]
 800fd48:	6870      	ldr	r0, [r6, #4]
 800fd4a:	f7fe fb60 	bl	800e40e <_Z16CommunicationLEDP4LEDSh>
					switch (information.register_.type) {
 800fd4e:	f1b8 0f04 	cmp.w	r8, #4
 800fd52:	d00b      	beq.n	800fd6c <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt+0x186>
 800fd54:	f1b8 0f08 	cmp.w	r8, #8
 800fd58:	d018      	beq.n	800fd8c <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt+0x1a6>
	for (SubscriberConfiguration configuration : configurations) {
 800fd5a:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 800fd5e:	f109 0901 	add.w	r9, r9, #1
 800fd62:	f10b 0b28 	add.w	fp, fp, #40	@ 0x28
 800fd66:	f7ff f952 	bl	800f00e <_ZN23SubscriberConfigurationD1Ev>
	return *this;
 800fd6a:	e790      	b.n	800fc8e <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt+0xa8>
	return *(this->_M_impl._M_start + __n);
 800fd6c:	fa5f f389 	uxtb.w	r3, r9
						subscribers[index]->ReceiveINT8(information, (int8_t*) data);
 800fd70:	69b2      	ldr	r2, [r6, #24]
 800fd72:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fd76:	6803      	ldr	r3, [r0, #0]
 800fd78:	f8d3 a000 	ldr.w	sl, [r3]
						subscribers[index]->ReceiveFLOAT(information, (float*) data);
 800fd7c:	697b      	ldr	r3, [r7, #20]
 800fd7e:	f887 8036 	strb.w	r8, [r7, #54]	@ 0x36
 800fd82:	9300      	str	r3, [sp, #0]
 800fd84:	693b      	ldr	r3, [r7, #16]
 800fd86:	cb0e      	ldmia	r3, {r1, r2, r3}
 800fd88:	47d0      	blx	sl
						break;
 800fd8a:	e7e6      	b.n	800fd5a <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt+0x174>
 800fd8c:	fa5f f389 	uxtb.w	r3, r9
						subscribers[index]->ReceiveFLOAT(information, (float*) data);
 800fd90:	69b2      	ldr	r2, [r6, #24]
 800fd92:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fd96:	6803      	ldr	r3, [r0, #0]
 800fd98:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800fd9c:	e7ee      	b.n	800fd7c <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt+0x196>

0800fd9e <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt>:
uint16_t Communication::ProcessService(MessageHeader message, MessageElement element, uint16_t start_index) {
 800fd9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fda2:	468c      	mov	ip, r1
 800fda4:	b097      	sub	sp, #92	@ 0x5c
 800fda6:	461c      	mov	r4, r3
 800fda8:	4683      	mov	fp, r0
 800fdaa:	af04      	add	r7, sp, #16
	service_information.interface = ServiceInterface{.interface=message.interface, .address=message.source_address};
 800fdac:	f89c 3000 	ldrb.w	r3, [ip]
 800fdb0:	f89c a011 	ldrb.w	sl, [ip, #17]
 800fdb4:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 800fdb8:	60fb      	str	r3, [r7, #12]
	if (element.command) {
 800fdba:	79d3      	ldrb	r3, [r2, #7]
	service_information.access = element.access;
 800fdbc:	7a16      	ldrb	r6, [r2, #8]
	service_information.register_ = element.element_register;
 800fdbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fdc2:	83b9      	strh	r1, [r7, #28]
		uint8_t error = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 800fdc4:	f10c 0104 	add.w	r1, ip, #4
	service_information.register_ = element.element_register;
 800fdc8:	61b8      	str	r0, [r7, #24]
	if (element.command) {
 800fdca:	b343      	cbz	r3, 800fe1e <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x80>
		uint8_t error = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 800fdcc:	4628      	mov	r0, r5
 800fdce:	f7f0 fe15 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 800fdd2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800fdd6:	4621      	mov	r1, r4
 800fdd8:	4628      	mov	r0, r5
 800fdda:	f7fe fd0e 	bl	800e7fa <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 800fdde:	4680      	mov	r8, r0
      }
 800fde0:	4628      	mov	r0, r5
 800fde2:	f7f0 fd5b 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 800fde6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800fdea:	b18b      	cbz	r3, 800fe10 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x72>
			services->ReceiveError(service_information, error);//services->ReceiveError(element.element_register, message.interface, message.source_address, element.access, error);
 800fdec:	2301      	movs	r3, #1
 800fdee:	f887 a021 	strb.w	sl, [r7, #33]	@ 0x21
 800fdf2:	f887 6022 	strb.w	r6, [r7, #34]	@ 0x22
 800fdf6:	83fb      	strh	r3, [r7, #30]
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	f8db 0008 	ldr.w	r0, [fp, #8]
 800fdfe:	f887 3020 	strb.w	r3, [r7, #32]
 800fe02:	f107 0318 	add.w	r3, r7, #24
 800fe06:	f8cd 8000 	str.w	r8, [sp]
 800fe0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800fe0c:	f005 fee7 	bl	8015bde <_ZN8Services12ReceiveErrorE20ServiceConfigurationh>
		return start_index + 1;
 800fe10:	3401      	adds	r4, #1
 800fe12:	b2a4      	uxth	r4, r4
}
 800fe14:	4620      	mov	r0, r4
 800fe16:	374c      	adds	r7, #76	@ 0x4c
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (element.access == WRITE) {
 800fe1e:	bb1e      	cbnz	r6, 800fe68 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0xca>
		uint8_t value = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 800fe20:	4628      	mov	r0, r5
 800fe22:	f7f0 fdeb 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 800fe26:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800fe2a:	4621      	mov	r1, r4
 800fe2c:	4628      	mov	r0, r5
 800fe2e:	f7fe fce4 	bl	800e7fa <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 800fe32:	4680      	mov	r8, r0
 800fe34:	4628      	mov	r0, r5
 800fe36:	f7f0 fd31 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 800fe3a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d0e6      	beq.n	800fe10 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x72>
			services->ReceiveWrite(service_information, value);//services->ReceiveWrite(element.element_register, message.interface, message.source_address, value);
 800fe42:	2301      	movs	r3, #1
 800fe44:	f887 a021 	strb.w	sl, [r7, #33]	@ 0x21
 800fe48:	f887 6022 	strb.w	r6, [r7, #34]	@ 0x22
 800fe4c:	83fb      	strh	r3, [r7, #30]
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	f8db 0008 	ldr.w	r0, [fp, #8]
 800fe54:	f887 3020 	strb.w	r3, [r7, #32]
 800fe58:	f107 0318 	add.w	r3, r7, #24
 800fe5c:	f8cd 8000 	str.w	r8, [sp]
 800fe60:	cb0e      	ldmia	r3, {r1, r2, r3}
 800fe62:	f005 fe7f 	bl	8015b64 <_ZN8Services12ReceiveWriteE20ServiceConfigurationh>
 800fe66:	e7d3      	b.n	800fe10 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x72>
		T array_values[element.element_register.length];
 800fe68:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 800fe6c:	466e      	mov	r6, sp
	}
 800fe6e:	f8c7 d008 	str.w	sp, [r7, #8]
		T array_values[element.element_register.length];
 800fe72:	f108 0007 	add.w	r0, r8, #7
	: _M_start(), _M_finish(), _M_end_of_storage()
 800fe76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fe78:	08c0      	lsrs	r0, r0, #3
 800fe7a:	eba6 00c0 	sub.w	r0, r6, r0, lsl #3
 800fe7e:	f107 0617 	add.w	r6, r7, #23
 800fe82:	4685      	mov	sp, r0
 800fe84:	e9c7 3309 	strd	r3, r3, [r7, #36]	@ 0x24
		if (not element.element_register.isArray) {
 800fe88:	78d3      	ldrb	r3, [r2, #3]
		T array_values[element.element_register.length];
 800fe8a:	f10d 0910 	add.w	r9, sp, #16
		if (not element.element_register.isArray) {
 800fe8e:	bbc3      	cbnz	r3, 800ff02 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x164>
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 800fe90:	4628      	mov	r0, r5
			data = &single_value;
 800fe92:	f107 0916 	add.w	r9, r7, #22
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 800fe96:	f7f0 fdb1 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
			length_to_extract = 1;
 800fe9a:	f04f 0801 	mov.w	r8, #1
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 800fe9e:	4632      	mov	r2, r6
 800fea0:	4621      	mov	r1, r4
 800fea2:	4628      	mov	r0, r5
 800fea4:	f7fe fc9c 	bl	800e7e0 <_ZN13Communication13ExtractSingleIaEET_St6vectorIhSaIhEEtPb.isra.0>
 800fea8:	75b8      	strb	r0, [r7, #22]
      }
 800feaa:	4628      	mov	r0, r5
 800feac:	f7f0 fcf6 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 800feb0:	7dfb      	ldrb	r3, [r7, #23]
 800feb2:	b1eb      	cbz	r3, 800fef0 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x152>
 800feb4:	68fb      	ldr	r3, [r7, #12]
			services->ReceiveRead<T>(service_information, data);
 800feb6:	f8db 6008 	ldr.w	r6, [fp, #8]
 800feba:	f04f 0b01 	mov.w	fp, #1
 800febe:	f887 3020 	strb.w	r3, [r7, #32]
 800fec2:	f107 0318 	add.w	r3, r7, #24
 800fec6:	f887 a021 	strb.w	sl, [r7, #33]	@ 0x21
 800feca:	f8a7 801e 	strh.w	r8, [r7, #30]
 800fece:	f887 b022 	strb.w	fp, [r7, #34]	@ 0x22
 800fed2:	f897 a01a 	ldrb.w	sl, [r7, #26]
	bool success = true;
 800fed6:	f887 b030 	strb.w	fp, [r7, #48]	@ 0x30
 800feda:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fede:	eb09 0388 	add.w	r3, r9, r8, lsl #2
 800fee2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	uint8_t start_index = 0;
 800fee6:	2100      	movs	r1, #0
 800fee8:	607b      	str	r3, [r7, #4]
	while (success) {
 800feea:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800feee:	bbd3      	cbnz	r3, 800ff66 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x1c8>
		return start_index + sizeof(T) * length_to_extract;
 800fef0:	4444      	add	r4, r8
 800fef2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800fef6:	f7ff f869 	bl	800efcc <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 800fefa:	f8d7 d008 	ldr.w	sp, [r7, #8]
 800fefe:	b2a4      	uxth	r4, r4
 800ff00:	e788      	b.n	800fe14 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x76>
		} else if (element.element_register.isArray && element.element_register.length > 0) {
 800ff02:	f1b8 0f00 	cmp.w	r8, #0
 800ff06:	d00d      	beq.n	800ff24 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x186>
			ExtractArray<T>(array_values, message.payload, start_index, length_to_extract, &success);
 800ff08:	4628      	mov	r0, r5
 800ff0a:	f7f0 fd77 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 800ff0e:	4648      	mov	r0, r9
 800ff10:	4643      	mov	r3, r8
 800ff12:	4622      	mov	r2, r4
 800ff14:	4629      	mov	r1, r5
 800ff16:	9600      	str	r6, [sp, #0]
 800ff18:	f7ff fe3e 	bl	800fb98 <_ZN13Communication12ExtractArrayIaEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 800ff1c:	4628      	mov	r0, r5
 800ff1e:	f7f0 fcbd 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
			data = array_values;
 800ff22:	e7c5      	b.n	800feb0 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x112>
			length_to_extract = message.payload[start_index];
 800ff24:	f8dc 3004 	ldr.w	r3, [ip, #4]
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 800ff28:	f107 0030 	add.w	r0, r7, #48	@ 0x30
			length_to_extract = message.payload[start_index];
 800ff2c:	f813 8004 	ldrb.w	r8, [r3, r4]
			start_index++;
 800ff30:	3401      	adds	r4, #1
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 800ff32:	f7f0 fd63 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 800ff36:	f107 0130 	add.w	r1, r7, #48	@ 0x30
			start_index++;
 800ff3a:	b2a4      	uxth	r4, r4
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 800ff3c:	4643      	mov	r3, r8
 800ff3e:	4628      	mov	r0, r5
 800ff40:	9600      	str	r6, [sp, #0]
 800ff42:	4622      	mov	r2, r4
 800ff44:	f7ff fdce 	bl	800fae4 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 800ff48:	4629      	mov	r1, r5
 800ff4a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800ff4e:	f7ff f847 	bl	800efe0 <_ZNSt6vectorIaSaIaEEaSEOS1_.isra.0>
 800ff52:	4628      	mov	r0, r5
 800ff54:	f7ff f83a 	bl	800efcc <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 800ff58:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 800ff5c:	f7f0 fc9e 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return _M_data_ptr(this->_M_impl._M_start); }
 800ff60:	f8d7 9024 	ldr.w	r9, [r7, #36]	@ 0x24
 800ff64:	e7a4      	b.n	800feb0 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x112>
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 800ff66:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800ff6a:	f887 a03e 	strb.w	sl, [r7, #62]	@ 0x3e
 800ff6e:	4630      	mov	r0, r6
 800ff70:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ff74:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800ff78:	f8ad 3000 	strh.w	r3, [sp]
 800ff7c:	e895 000c 	ldmia.w	r5, {r2, r3}
 800ff80:	f005 fdb1 	bl	8015ae6 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb>
		if (not success) return;
 800ff84:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 800ff88:	6038      	str	r0, [r7, #0]
		if (not success) return;
 800ff8a:	2a00      	cmp	r2, #0
 800ff8c:	d0b0      	beq.n	800fef0 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x152>
		if (information.length > SERVICES_BUFFER_SIZE) return;
 800ff8e:	f5b8 7f80 	cmp.w	r8, #256	@ 0x100
 800ff92:	d8ad      	bhi.n	800fef0 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x152>
		CommunicationLED(leds, information.interface.interface);
 800ff94:	68f9      	ldr	r1, [r7, #12]
 800ff96:	f8d6 0c40 	ldr.w	r0, [r6, #3136]	@ 0xc40
 800ff9a:	f7fe fa38 	bl	800e40e <_Z16CommunicationLEDP4LEDSh>
		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 800ff9e:	f04f 31ff 	mov.w	r1, #4294967295
 800ffa2:	6830      	ldr	r0, [r6, #0]
 800ffa4:	f7fc f8f8 	bl	800c198 <osSemaphoreAcquire>
		services[index].configuration.length = information.length;
 800ffa8:	2218      	movs	r2, #24
 800ffaa:	683b      	ldr	r3, [r7, #0]
		switch (information.register_.type) {
 800ffac:	f1ba 0f04 	cmp.w	sl, #4
		services[index].configuration.length = information.length;
 800ffb0:	fb02 6203 	mla	r2, r2, r3, r6
 800ffb4:	f8a2 8010 	strh.w	r8, [r2, #16]
		switch (information.register_.type) {
 800ffb8:	d005      	beq.n	800ffc6 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x228>
 800ffba:	f1ba 0f08 	cmp.w	sl, #8
 800ffbe:	d01c      	beq.n	800fffa <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x25c>
 800ffc0:	f1ba 0f00 	cmp.w	sl, #0
 800ffc4:	d107      	bne.n	800ffd6 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x238>
			TranferData<int8_t>((int8_t*) data, &buffer_int8[index][0], information.length);
 800ffc6:	eb06 2103 	add.w	r1, r6, r3, lsl #8
 800ffca:	2200      	movs	r2, #0
 800ffcc:	f501 710e 	add.w	r1, r1, #568	@ 0x238
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 800ffd0:	b290      	uxth	r0, r2
 800ffd2:	4580      	cmp	r8, r0
 800ffd4:	d80c      	bhi.n	800fff0 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x252>
		services[index].reception_flag = true;
 800ffd6:	2218      	movs	r2, #24
		osSemaphoreRelease(ServiceSemaphore);
 800ffd8:	6830      	ldr	r0, [r6, #0]
		services[index].reception_flag = true;
 800ffda:	603b      	str	r3, [r7, #0]
 800ffdc:	fb02 6203 	mla	r2, r2, r3, r6
 800ffe0:	f882 b009 	strb.w	fp, [r2, #9]
		osSemaphoreRelease(ServiceSemaphore);
 800ffe4:	f7fc f90c 	bl	800c200 <osSemaphoreRelease>
		start_index = index + 1;
 800ffe8:	683b      	ldr	r3, [r7, #0]
 800ffea:	1c59      	adds	r1, r3, #1
 800ffec:	b2c9      	uxtb	r1, r1
 800ffee:	e77c      	b.n	800feea <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x14c>
		to[buffer_index] = from[buffer_index];
 800fff0:	f919 0002 	ldrsb.w	r0, [r9, r2]
 800fff4:	5488      	strb	r0, [r1, r2]
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 800fff6:	3201      	adds	r2, #1
 800fff8:	e7ea      	b.n	800ffd0 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x232>
			TranferData<float>((float*) data, &buffer_float[index][0], information.length);
 800fffa:	eb06 2283 	add.w	r2, r6, r3, lsl #10
 800fffe:	4649      	mov	r1, r9
 8010000:	f502 6287 	add.w	r2, r2, #1080	@ 0x438
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 8010004:	6878      	ldr	r0, [r7, #4]
 8010006:	4281      	cmp	r1, r0
 8010008:	d0e5      	beq.n	800ffd6 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x238>
		to[buffer_index] = from[buffer_index];
 801000a:	f851 0b04 	ldr.w	r0, [r1], #4
 801000e:	f842 0b04 	str.w	r0, [r2], #4
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 8010012:	e7f7      	b.n	8010004 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x266>

08010014 <_ZZN13Communication12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t>:
			if (length < 3) return false;
 8010014:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8010016:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010018:	4606      	mov	r6, r0
 801001a:	b08b      	sub	sp, #44	@ 0x2c
 801001c:	4615      	mov	r5, r2
 801001e:	f04f 0400 	mov.w	r4, #0
			if (length < 3) return false;
 8010022:	d92e      	bls.n	8010082 <_ZZN13Communication12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x6e>
			msg.interface = input[0];
 8010024:	7812      	ldrb	r2, [r2, #0]
			msg.payload = std::vector<uint8_t> (&input[2], &input[length]);
 8010026:	18ef      	adds	r7, r5, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010028:	9403      	str	r4, [sp, #12]
			msg.interface = input[0];
 801002a:	f88d 2000 	strb.w	r2, [sp]
			msg.target_address = input[1];
 801002e:	786a      	ldrb	r2, [r5, #1]
 8010030:	e9cd 4401 	strd	r4, r4, [sp, #4]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 8010034:	1e9c      	subs	r4, r3, #2
 8010036:	f88d 2010 	strb.w	r2, [sp, #16]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 801003a:	4620      	mov	r0, r4
 801003c:	f7fe fbea 	bl	800e814 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8010040:	4404      	add	r4, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8010042:	4602      	mov	r2, r0
			      _Category>::__copy_m(__first, __last, __result);
 8010044:	4639      	mov	r1, r7
 8010046:	9005      	str	r0, [sp, #20]
 8010048:	1ca8      	adds	r0, r5, #2
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801004a:	9407      	str	r4, [sp, #28]
 801004c:	f7f0 fcca 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
			msg.payload = std::vector<uint8_t> (&input[2], &input[length]);
 8010050:	a905      	add	r1, sp, #20
	  this->_M_impl._M_finish =
 8010052:	9006      	str	r0, [sp, #24]
 8010054:	a801      	add	r0, sp, #4
 8010056:	f7fe fcde 	bl	800ea16 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 801005a:	a805      	add	r0, sp, #20
 801005c:	f7f0 fc1e 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
			return self->Send(msg);
 8010060:	4669      	mov	r1, sp
 8010062:	a805      	add	r0, sp, #20
 8010064:	f7ff f908 	bl	800f278 <_ZN13MessageHeaderC1ERKS_>
 8010068:	a905      	add	r1, sp, #20
 801006a:	4630      	mov	r0, r6
 801006c:	f7ff f9f4 	bl	800f458 <_ZN13Communication4SendE13MessageHeader>
 8010070:	1e04      	subs	r4, r0, #0
 8010072:	a806      	add	r0, sp, #24
 8010074:	bf18      	it	ne
 8010076:	2401      	movne	r4, #1
 8010078:	f7f0 fc10 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801007c:	a801      	add	r0, sp, #4
 801007e:	f7f0 fc0d 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		}
 8010082:	4620      	mov	r0, r4
 8010084:	b00b      	add	sp, #44	@ 0x2c
 8010086:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010088 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_>:
	insert(const_iterator __position, _InputIterator __first,
 8010088:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (__first != __last)
 801008c:	429a      	cmp	r2, r3
      : _M_current(__i) { }
 801008e:	f8d0 a000 	ldr.w	sl, [r0]
 8010092:	4604      	mov	r4, r0
 8010094:	460d      	mov	r5, r1
 8010096:	4617      	mov	r7, r2
 8010098:	4699      	mov	r9, r3
    { return __lhs.base() - __rhs.base(); }
 801009a:	eba1 0b0a 	sub.w	fp, r1, sl
 801009e:	d020      	beq.n	80100e2 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_+0x5a>
 80100a0:	eba3 0802 	sub.w	r8, r3, r2
			  - this->_M_impl._M_finish) >= __n)
 80100a4:	e9d0 6201 	ldrd	r6, r2, [r0, #4]
 80100a8:	1b92      	subs	r2, r2, r6
	    if (size_type(this->_M_impl._M_end_of_storage
 80100aa:	4590      	cmp	r8, r2
 80100ac:	d836      	bhi.n	801011c <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_+0x94>
 80100ae:	eba6 0a01 	sub.w	sl, r6, r1
		if (__elems_after > __n)
 80100b2:	45d0      	cmp	r8, sl
 80100b4:	d21a      	bcs.n	80100ec <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_+0x64>
		    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 80100b6:	eba6 0a08 	sub.w	sl, r6, r8
 80100ba:	4632      	mov	r2, r6
 80100bc:	4631      	mov	r1, r6
 80100be:	4650      	mov	r0, sl
 80100c0:	f7f1 fc1c 	bl	80018fc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		    this->_M_impl._M_finish += __n;
 80100c4:	6863      	ldr	r3, [r4, #4]
					       is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::value, "type must be assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
 80100c6:	ebba 0205 	subs.w	r2, sl, r5
 80100ca:	4443      	add	r3, r8
 80100cc:	6063      	str	r3, [r4, #4]
 80100ce:	d003      	beq.n	80100d8 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_+0x50>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80100d0:	4629      	mov	r1, r5
 80100d2:	1ab0      	subs	r0, r6, r2
 80100d4:	f006 fbaa 	bl	801682c <memmove>
			      _Category>::__copy_m(__first, __last, __result);
 80100d8:	462a      	mov	r2, r5
 80100da:	4649      	mov	r1, r9
 80100dc:	4638      	mov	r0, r7
 80100de:	f7f0 fc81 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
      { return __normal_iterator(_M_current + __n); }
 80100e2:	6820      	ldr	r0, [r4, #0]
	}
 80100e4:	4458      	add	r0, fp
 80100e6:	b003      	add	sp, #12
 80100e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { _M_current += __n; return *this; }
 80100ec:	eb07 030a 	add.w	r3, r7, sl
 80100f0:	4632      	mov	r2, r6
 80100f2:	4649      	mov	r1, r9
		    this->_M_impl._M_finish += __n - __elems_after;
 80100f4:	eba8 080a 	sub.w	r8, r8, sl
 80100f8:	4618      	mov	r0, r3
 80100fa:	9301      	str	r3, [sp, #4]
 80100fc:	f7f0 fc72 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8010100:	6862      	ldr	r2, [r4, #4]
 8010102:	4631      	mov	r1, r6
 8010104:	4628      	mov	r0, r5
 8010106:	4442      	add	r2, r8
 8010108:	6062      	str	r2, [r4, #4]
 801010a:	f7f1 fbf7 	bl	80018fc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		    this->_M_impl._M_finish += __elems_after;
 801010e:	6862      	ldr	r2, [r4, #4]
 8010110:	9b01      	ldr	r3, [sp, #4]
 8010112:	4452      	add	r2, sl
 8010114:	4619      	mov	r1, r3
 8010116:	6062      	str	r2, [r4, #4]
 8010118:	462a      	mov	r2, r5
 801011a:	e7df      	b.n	80100dc <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_+0x54>
		  _M_check_len(__n, "vector::_M_range_insert");
 801011c:	4641      	mov	r1, r8
 801011e:	4a13      	ldr	r2, [pc, #76]	@ (801016c <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_+0xe4>)
 8010120:	f7f0 fbdd 	bl	80008de <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8010124:	9001      	str	r0, [sp, #4]
		pointer __new_start(this->_M_allocate(__len));
 8010126:	f7fe fb75 	bl	800e814 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
 801012a:	4629      	mov	r1, r5
 801012c:	4602      	mov	r2, r0
 801012e:	4680      	mov	r8, r0
 8010130:	4650      	mov	r0, sl
 8010132:	f7f1 fbe3 	bl	80018fc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8010136:	4649      	mov	r1, r9
 8010138:	4602      	mov	r2, r0
 801013a:	4638      	mov	r0, r7
 801013c:	f7f0 fc52 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8010140:	4631      	mov	r1, r6
 8010142:	4602      	mov	r2, r0
 8010144:	4628      	mov	r0, r5
 8010146:	f7f1 fbd9 	bl	80018fc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 801014a:	4605      	mov	r5, r0
	if (__p)
 801014c:	f1ba 0f00 	cmp.w	sl, #0
 8010150:	d005      	beq.n	801015e <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_+0xd6>
			      this->_M_impl._M_end_of_storage - __old_start);
 8010152:	68a1      	ldr	r1, [r4, #8]
 8010154:	4650      	mov	r0, sl
 8010156:	eba1 010a 	sub.w	r1, r1, sl
 801015a:	f006 f9b5 	bl	80164c8 <_ZdlPvj>
		this->_M_impl._M_end_of_storage = __new_start + __len;
 801015e:	9b01      	ldr	r3, [sp, #4]
 8010160:	4443      	add	r3, r8
		this->_M_impl._M_finish = __new_finish;
 8010162:	e9c4 8500 	strd	r8, r5, [r4]
		this->_M_impl._M_end_of_storage = __new_start + __len;
 8010166:	60a3      	str	r3, [r4, #8]
 8010168:	e7bb      	b.n	80100e2 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_+0x5a>
 801016a:	bf00      	nop
 801016c:	08016b81 	.word	0x08016b81

08010170 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>:
bool Communication::BuildPayload(MessageHeader* message, MessageElement element) {
 8010170:	b5f0      	push	{r4, r5, r6, r7, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010172:	2300      	movs	r3, #0
 8010174:	b085      	sub	sp, #20
 8010176:	4614      	mov	r4, r2
 8010178:	4606      	mov	r6, r0
 801017a:	9303      	str	r3, [sp, #12]
 801017c:	460d      	mov	r5, r1
 801017e:	e9cd 3301 	strd	r3, r3, [sp, #4]
	if (element.ack) header|= ACK_MASK;
 8010182:	7993      	ldrb	r3, [r2, #6]
	if (element.command) header|= COMMAND_MASK;
 8010184:	79d2      	ldrb	r2, [r2, #7]
	if (element.ack) header|= ACK_MASK;
 8010186:	01db      	lsls	r3, r3, #7
 8010188:	b2db      	uxtb	r3, r3
	if (element.command) header|= COMMAND_MASK;
 801018a:	b10a      	cbz	r2, 8010190 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0x20>
 801018c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
	if (element.access) header|= ACCESS_MASK;
 8010190:	7a22      	ldrb	r2, [r4, #8]
 8010192:	b10a      	cbz	r2, 8010198 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0x28>
 8010194:	f043 0320 	orr.w	r3, r3, #32
	coded_element.push_back(header | ((element.element_register.address >> 8) & ~(ACK_MASK | COMMAND_MASK | ACCESS_MASK)));
 8010198:	8822      	ldrh	r2, [r4, #0]
      { emplace_back(std::move(__x)); }
 801019a:	f10d 0103 	add.w	r1, sp, #3
 801019e:	a801      	add	r0, sp, #4
 80101a0:	f3c2 2204 	ubfx	r2, r2, #8, #5
 80101a4:	4313      	orrs	r3, r2
 80101a6:	f88d 3003 	strb.w	r3, [sp, #3]
 80101aa:	f7fe ff5b 	bl	800f064 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
	coded_element.push_back(element.element_register.address & 0xFF);
 80101ae:	8823      	ldrh	r3, [r4, #0]
 80101b0:	f10d 0103 	add.w	r1, sp, #3
 80101b4:	a801      	add	r0, sp, #4
 80101b6:	f88d 3003 	strb.w	r3, [sp, #3]
 80101ba:	f7fe ff53 	bl	800f064 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
	if (element.element_register.isArray && element.element_register.length == 0)
 80101be:	78e3      	ldrb	r3, [r4, #3]
 80101c0:	b15b      	cbz	r3, 80101da <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0x6a>
 80101c2:	88a3      	ldrh	r3, [r4, #4]
 80101c4:	b94b      	cbnz	r3, 80101da <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0x6a>
 80101c6:	f10d 0103 	add.w	r1, sp, #3
 80101ca:	a801      	add	r0, sp, #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80101cc:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 80101d0:	1a9b      	subs	r3, r3, r2
		coded_element.push_back(element.data.size());
 80101d2:	f88d 3003 	strb.w	r3, [sp, #3]
      { emplace_back(std::move(__x)); }
 80101d6:	f7fe ff45 	bl	800f064 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
	coded_element.insert(coded_element.end(), element.data.begin(), element.data.end()); // Big-Endian representation, MSB first
 80101da:	9902      	ldr	r1, [sp, #8]
 80101dc:	a801      	add	r0, sp, #4
 80101de:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 80101e2:	f7ff ff51 	bl	8010088 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_>
	uint16_t max_length = GetProtocolPayloadMaxLength(message->interface, &success);
 80101e6:	4630      	mov	r0, r6
 80101e8:	f10d 0203 	add.w	r2, sp, #3
 80101ec:	7829      	ldrb	r1, [r5, #0]
 80101ee:	f7fe fbe5 	bl	800e9bc <_ZN13Communication27GetProtocolPayloadMaxLengthEhPb>
	if (not success) return false;
 80101f2:	f89d 6003 	ldrb.w	r6, [sp, #3]
 80101f6:	b15e      	cbz	r6, 8010210 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0xa0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80101f8:	68a9      	ldr	r1, [r5, #8]
 80101fa:	686c      	ldr	r4, [r5, #4]
 80101fc:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8010200:	1b0c      	subs	r4, r1, r4
 8010202:	1a9f      	subs	r7, r3, r2
	if (message->payload.size() + coded_element.size() > max_length)
 8010204:	443c      	add	r4, r7
 8010206:	4284      	cmp	r4, r0
 8010208:	d808      	bhi.n	801021c <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0xac>
	message->payload.insert(message->payload.end(), coded_element.begin(), coded_element.end());
 801020a:	1d28      	adds	r0, r5, #4
 801020c:	f7ff ff3c 	bl	8010088 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_>
      }
 8010210:	a801      	add	r0, sp, #4
 8010212:	f7f0 fb43 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 8010216:	4630      	mov	r0, r6
 8010218:	b005      	add	sp, #20
 801021a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (not success) return false;
 801021c:	2600      	movs	r6, #0
 801021e:	e7f7      	b.n	8010210 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0xa0>

08010220 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement>:
bool Communication::FindRegister(MessageHeader message, MessageHeader* response, MessageElement* element) {
 8010220:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010224:	461c      	mov	r4, r3
 8010226:	b097      	sub	sp, #92	@ 0x5c
	uint16_t register_id = element->element_register.address;
 8010228:	f8b3 9000 	ldrh.w	r9, [r3]
bool Communication::FindRegister(MessageHeader message, MessageHeader* response, MessageElement* element) {
 801022c:	4605      	mov	r5, r0
	if (not element->ack && element->command) {
 801022e:	799b      	ldrb	r3, [r3, #6]
bool Communication::FindRegister(MessageHeader message, MessageHeader* response, MessageElement* element) {
 8010230:	4617      	mov	r7, r2
 8010232:	f10d 0820 	add.w	r8, sp, #32
	if (not element->ack && element->command) {
 8010236:	2b00      	cmp	r3, #0
 8010238:	d165      	bne.n	8010306 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0xe6>
 801023a:	79e3      	ldrb	r3, [r4, #7]
 801023c:	2b00      	cmp	r3, #0
 801023e:	d07c      	beq.n	801033a <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0x11a>
		if (registers->IsRegistered(register_id))
 8010240:	4649      	mov	r1, r9
 8010242:	6868      	ldr	r0, [r5, #4]
 8010244:	f004 fe1c 	bl	8014e80 <_ZN9Registers12IsRegisteredEt>
 8010248:	4606      	mov	r6, r0
 801024a:	b168      	cbz	r0, 8010268 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0x48>
			element->element_register = registers->FindRegister(register_id, &success);
 801024c:	4643      	mov	r3, r8
 801024e:	464a      	mov	r2, r9
 8010250:	6869      	ldr	r1, [r5, #4]
 8010252:	a804      	add	r0, sp, #16
 8010254:	f004 fd92 	bl	8014d7c <_ZN9Registers12FindRegisterEtPb>
		element->element_register = subscribers->FindRemoteRegister(Register{.address=register_id}, SubscriberInterface{.interface=message.interface, .address=message.source_address}, &success);
 8010258:	9804      	ldr	r0, [sp, #16]
	return success;
 801025a:	f89d 6020 	ldrb.w	r6, [sp, #32]
		element->element_register = subscribers->FindRemoteRegister(Register{.address=register_id}, SubscriberInterface{.interface=message.interface, .address=message.source_address}, &success);
 801025e:	6020      	str	r0, [r4, #0]
 8010260:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8010264:	80a3      	strh	r3, [r4, #4]
	return success;
 8010266:	e04a      	b.n	80102fe <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0xde>
			response_content.ack = true;
 8010268:	f240 1301 	movw	r3, #257	@ 0x101
	: _M_start(), _M_finish(), _M_end_of_storage()
 801026c:	900f      	str	r0, [sp, #60]	@ 0x3c
			response_content.element_register.address = register_id;
 801026e:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
			response_content.ack = true;
 8010272:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
			response_content.access = element->access;
 8010276:	7a23      	ldrb	r3, [r4, #8]
 8010278:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
			response_content.data = std::vector<uint8_t>{UNKNOWN_REGISTER};
 801027c:	230f      	movs	r3, #15
 801027e:	f88d 3018 	strb.w	r3, [sp, #24]
 8010282:	ab06      	add	r3, sp, #24
 8010284:	9308      	str	r3, [sp, #32]
 8010286:	2301      	movs	r3, #1
 8010288:	e9cd 000d 	strd	r0, r0, [sp, #52]	@ 0x34
 801028c:	9309      	str	r3, [sp, #36]	@ 0x24
 801028e:	a810      	add	r0, sp, #64	@ 0x40
 8010290:	ab07      	add	r3, sp, #28
 8010292:	e898 0006 	ldmia.w	r8, {r1, r2}
 8010296:	f7f0 fc55 	bl	8000b44 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 801029a:	a910      	add	r1, sp, #64	@ 0x40
 801029c:	a80d      	add	r0, sp, #52	@ 0x34
 801029e:	f7fe fbba 	bl	800ea16 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 80102a2:	a810      	add	r0, sp, #64	@ 0x40
 80102a4:	f7f0 fafa 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
			if (not BuildPayload(response, response_content)) {
 80102a8:	a90a      	add	r1, sp, #40	@ 0x28
 80102aa:	a810      	add	r0, sp, #64	@ 0x40
 80102ac:	f7fe ffd1 	bl	800f252 <_ZN14MessageElementC1ERKS_>
 80102b0:	aa10      	add	r2, sp, #64	@ 0x40
 80102b2:	4639      	mov	r1, r7
 80102b4:	4628      	mov	r0, r5
 80102b6:	f7ff ff5b 	bl	8010170 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 80102ba:	4604      	mov	r4, r0
 80102bc:	a813      	add	r0, sp, #76	@ 0x4c
 80102be:	f7f0 faed 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80102c2:	b9cc      	cbnz	r4, 80102f8 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0xd8>
				Send(*response);
 80102c4:	4639      	mov	r1, r7
 80102c6:	a810      	add	r0, sp, #64	@ 0x40
 80102c8:	f7fe ffd6 	bl	800f278 <_ZN13MessageHeaderC1ERKS_>
 80102cc:	a910      	add	r1, sp, #64	@ 0x40
 80102ce:	4628      	mov	r0, r5
 80102d0:	f7ff f8c2 	bl	800f458 <_ZN13Communication4SendE13MessageHeader>
 80102d4:	a811      	add	r0, sp, #68	@ 0x44
 80102d6:	f7f0 fae1 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
				response->payload.clear();
 80102da:	1d38      	adds	r0, r7, #4
 80102dc:	f7fe fbb2 	bl	800ea44 <_ZNSt6vectorIhSaIhEE5clearEv>
				BuildPayload(response, response_content);
 80102e0:	a90a      	add	r1, sp, #40	@ 0x28
 80102e2:	a810      	add	r0, sp, #64	@ 0x40
 80102e4:	f7fe ffb5 	bl	800f252 <_ZN14MessageElementC1ERKS_>
 80102e8:	aa10      	add	r2, sp, #64	@ 0x40
 80102ea:	4639      	mov	r1, r7
 80102ec:	4628      	mov	r0, r5
 80102ee:	f7ff ff3f 	bl	8010170 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 80102f2:	a813      	add	r0, sp, #76	@ 0x4c
 80102f4:	f7f0 fad2 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80102f8:	a80d      	add	r0, sp, #52	@ 0x34
 80102fa:	f7f0 facf 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 80102fe:	4630      	mov	r0, r6
 8010300:	b017      	add	sp, #92	@ 0x5c
 8010302:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		element->element_register = services->FindRemoteRegister(Register{.address=register_id}, ServiceInterface{.interface=message.interface, .address=message.source_address}, element->access, &success);
 8010306:	2300      	movs	r3, #0
 8010308:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 801030c:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8010310:	780b      	ldrb	r3, [r1, #0]
 8010312:	f88d 3018 	strb.w	r3, [sp, #24]
 8010316:	7c4b      	ldrb	r3, [r1, #17]
 8010318:	f8cd 8008 	str.w	r8, [sp, #8]
 801031c:	f88d 3019 	strb.w	r3, [sp, #25]
 8010320:	7a23      	ldrb	r3, [r4, #8]
 8010322:	9301      	str	r3, [sp, #4]
 8010324:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8010328:	f8ad 3000 	strh.w	r3, [sp]
 801032c:	6881      	ldr	r1, [r0, #8]
 801032e:	a804      	add	r0, sp, #16
 8010330:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8010334:	f005 fc95 	bl	8015c62 <_ZN8Services18FindRemoteRegisterE8Register16ServiceInterfacebPb>
 8010338:	e78e      	b.n	8010258 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0x38>
		element->element_register = subscribers->FindRemoteRegister(Register{.address=register_id}, SubscriberInterface{.interface=message.interface, .address=message.source_address}, &success);
 801033a:	f8cd 3042 	str.w	r3, [sp, #66]	@ 0x42
 801033e:	a804      	add	r0, sp, #16
 8010340:	780b      	ldrb	r3, [r1, #0]
 8010342:	f8ad 9040 	strh.w	r9, [sp, #64]	@ 0x40
 8010346:	f88d 301c 	strb.w	r3, [sp, #28]
 801034a:	7c4b      	ldrb	r3, [r1, #17]
 801034c:	f8cd 8004 	str.w	r8, [sp, #4]
 8010350:	f88d 301d 	strb.w	r3, [sp, #29]
 8010354:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8010358:	f8ad 3000 	strh.w	r3, [sp]
 801035c:	68e9      	ldr	r1, [r5, #12]
 801035e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010362:	f005 fe39 	bl	8015fd8 <_ZN17MasterSubscribers18FindRemoteRegisterE8Register19SubscriberInterfacePb>
 8010366:	e777      	b.n	8010258 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0x38>

08010368 <_ZZN13Communication12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t>:
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8010368:	b530      	push	{r4, r5, lr}
 801036a:	4604      	mov	r4, r0
 801036c:	b093      	sub	sp, #76	@ 0x4c
			self->SetModuleAddress(*input);
 801036e:	7811      	ldrb	r1, [r2, #0]
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8010370:	4615      	mov	r5, r2
			self->SetModuleAddress(*input);
 8010372:	f7fe fb42 	bl	800e9fa <_ZN13Communication16SetModuleAddressEh>
			IDFoundLEDS(self->leds);
 8010376:	6920      	ldr	r0, [r4, #16]
 8010378:	f7fe f845 	bl	800e406 <_Z11IDFoundLEDSP4LEDS>
	: _M_start(), _M_finish(), _M_end_of_storage()
 801037c:	2300      	movs	r3, #0
			message.interface = UART_BACK;
 801037e:	2203      	movs	r2, #3
      { emplace_back(std::move(__x)); }
 8010380:	a90c      	add	r1, sp, #48	@ 0x30
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010382:	9304      	str	r3, [sp, #16]
      { emplace_back(std::move(__x)); }
 8010384:	a809      	add	r0, sp, #36	@ 0x24
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010386:	930b      	str	r3, [sp, #44]	@ 0x2c
			element.access = WRITE;
 8010388:	f88d 3020 	strb.w	r3, [sp, #32]
			message.interface = UART_BACK;
 801038c:	f88d 2004 	strb.w	r2, [sp, #4]
			element.ack = false;
 8010390:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010394:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010398:	e9cd 3309 	strd	r3, r3, [sp, #36]	@ 0x24
			element.data.push_back(*input + 1);
 801039c:	782b      	ldrb	r3, [r5, #0]
			element.ack = false;
 801039e:	f8ad 201e 	strh.w	r2, [sp, #30]
			element.data.push_back(*input + 1);
 80103a2:	3301      	adds	r3, #1
 80103a4:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
      { emplace_back(std::move(__x)); }
 80103a8:	f7fe fe5c 	bl	800f064 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
			element.element_register = self->registers->FindRegister(REG_COM_ID_PROPAGATION, &success);
 80103ac:	f10d 0303 	add.w	r3, sp, #3
 80103b0:	2201      	movs	r2, #1
 80103b2:	6861      	ldr	r1, [r4, #4]
 80103b4:	a806      	add	r0, sp, #24
 80103b6:	f004 fce1 	bl	8014d7c <_ZN9Registers12FindRegisterEtPb>
			self->BuildPayload(&message, element);
 80103ba:	a906      	add	r1, sp, #24
 80103bc:	a80c      	add	r0, sp, #48	@ 0x30
 80103be:	f7fe ff48 	bl	800f252 <_ZN14MessageElementC1ERKS_>
 80103c2:	aa0c      	add	r2, sp, #48	@ 0x30
 80103c4:	a901      	add	r1, sp, #4
 80103c6:	4620      	mov	r0, r4
 80103c8:	f7ff fed2 	bl	8010170 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
      }
 80103cc:	a80f      	add	r0, sp, #60	@ 0x3c
 80103ce:	f7f0 fa65 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
			self->Send(message);
 80103d2:	a901      	add	r1, sp, #4
 80103d4:	a80c      	add	r0, sp, #48	@ 0x30
 80103d6:	f7fe ff4f 	bl	800f278 <_ZN13MessageHeaderC1ERKS_>
 80103da:	a90c      	add	r1, sp, #48	@ 0x30
 80103dc:	4620      	mov	r0, r4
 80103de:	f7ff f83b 	bl	800f458 <_ZN13Communication4SendE13MessageHeader>
 80103e2:	a80d      	add	r0, sp, #52	@ 0x34
 80103e4:	f7f0 fa5a 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80103e8:	a809      	add	r0, sp, #36	@ 0x24
 80103ea:	f7f0 fa57 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80103ee:	a802      	add	r0, sp, #8
 80103f0:	f7f0 fa54 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		}
 80103f4:	2001      	movs	r0, #1
 80103f6:	b013      	add	sp, #76	@ 0x4c
 80103f8:	bd30      	pop	{r4, r5, pc}

080103fa <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPajEET_S3_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 80103fa:	b510      	push	{r4, lr}
	  if (__n > 0)
 80103fc:	460a      	mov	r2, r1
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 80103fe:	4604      	mov	r4, r0
	  if (__n > 0)
 8010400:	b141      	cbz	r1, 8010414 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPajEET_S3_T0_+0x1a>
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8010402:	2100      	movs	r1, #0
	       std::random_access_iterator_tag)
    {
#if __cplusplus >= 201103L
      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
#endif
      if (__n <= 0)
 8010404:	2a01      	cmp	r2, #1
 8010406:	f800 1b01 	strb.w	r1, [r0], #1
 801040a:	d005      	beq.n	8010418 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPajEET_S3_T0_+0x1e>
	return __first;

      __glibcxx_requires_can_increment(__first, __n);

      std::__fill_a(__first, __first + __n, __value);
 801040c:	4414      	add	r4, r2
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 801040e:	3a01      	subs	r2, #1
 8010410:	f006 fa26 	bl	8016860 <memset>
	}
 8010414:	4620      	mov	r0, r4
 8010416:	bd10      	pop	{r4, pc}
	      ++__first;
 8010418:	4604      	mov	r4, r0
 801041a:	e7fb      	b.n	8010414 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPajEET_S3_T0_+0x1a>

0801041c <_ZNSt6vectorIaSaIaEE17_M_default_appendEj>:
    vector<_Tp, _Alloc>::
 801041c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010420:	4604      	mov	r4, r0
      if (__n != 0)
 8010422:	460d      	mov	r5, r1
 8010424:	b159      	cbz	r1, 801043e <_ZNSt6vectorIaSaIaEE17_M_default_appendEj+0x22>
					 - this->_M_impl._M_finish);
 8010426:	6882      	ldr	r2, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010428:	e9d0 7300 	ldrd	r7, r3, [r0]
 801042c:	1ad2      	subs	r2, r2, r3
 801042e:	eba3 0807 	sub.w	r8, r3, r7
	  if (__navail >= __n)
 8010432:	428a      	cmp	r2, r1
 8010434:	d305      	bcc.n	8010442 <_ZNSt6vectorIaSaIaEE17_M_default_appendEj+0x26>
	__uninit_default_n(__first, __n);
 8010436:	4618      	mov	r0, r3
 8010438:	f7ff ffdf 	bl	80103fa <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPajEET_S3_T0_>
	      this->_M_impl._M_finish =
 801043c:	6060      	str	r0, [r4, #4]
    }
 801043e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		_M_check_len(__n, "vector::_M_default_append");
 8010442:	4a11      	ldr	r2, [pc, #68]	@ (8010488 <_ZNSt6vectorIaSaIaEE17_M_default_appendEj+0x6c>)
 8010444:	f7fe fea8 	bl	800f198 <_ZNKSt6vectorIaSaIaEE12_M_check_lenEjPKc>
 8010448:	4681      	mov	r9, r0
	      pointer __new_start(this->_M_allocate(__len));
 801044a:	f7fe f903 	bl	800e654 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>
 801044e:	4629      	mov	r1, r5
 8010450:	4606      	mov	r6, r0
 8010452:	4440      	add	r0, r8
 8010454:	f7ff ffd1 	bl	80103fa <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPajEET_S3_T0_>
      if (__count > 0)
 8010458:	f1b8 0f00 	cmp.w	r8, #0
 801045c:	d00a      	beq.n	8010474 <_ZNSt6vectorIaSaIaEE17_M_default_appendEj+0x58>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801045e:	4642      	mov	r2, r8
 8010460:	4639      	mov	r1, r7
 8010462:	4630      	mov	r0, r6
 8010464:	f006 f9e2 	bl	801682c <memmove>
			    this->_M_impl._M_end_of_storage - __old_start);
 8010468:	68a1      	ldr	r1, [r4, #8]
 801046a:	4638      	mov	r0, r7
 801046c:	1bc9      	subs	r1, r1, r7
 801046e:	f006 f82b 	bl	80164c8 <_ZdlPvj>
      { __a.deallocate(__p, __n); }
 8010472:	e001      	b.n	8010478 <_ZNSt6vectorIaSaIaEE17_M_default_appendEj+0x5c>
	if (__p)
 8010474:	2f00      	cmp	r7, #0
 8010476:	d1f7      	bne.n	8010468 <_ZNSt6vectorIaSaIaEE17_M_default_appendEj+0x4c>
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8010478:	4445      	add	r5, r8
	      this->_M_impl._M_start = __new_start;
 801047a:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_finish = __new_start + __size + __n;
 801047c:	4435      	add	r5, r6
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 801047e:	444e      	add	r6, r9
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8010480:	6065      	str	r5, [r4, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 8010482:	60a6      	str	r6, [r4, #8]
    }
 8010484:	e7db      	b.n	801043e <_ZNSt6vectorIaSaIaEE17_M_default_appendEj+0x22>
 8010486:	bf00      	nop
 8010488:	08016dc2 	.word	0x08016dc2

0801048c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 801048c:	b510      	push	{r4, lr}
	  if (_Num)
 801048e:	1a0c      	subs	r4, r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8010490:	4613      	mov	r3, r2
	  if (_Num)
 8010492:	d005      	beq.n	80104a0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_+0x14>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8010494:	4601      	mov	r1, r0
 8010496:	4622      	mov	r2, r4
 8010498:	4618      	mov	r0, r3
 801049a:	f006 f9c7 	bl	801682c <memmove>
 801049e:	4603      	mov	r3, r0
	}
 80104a0:	1918      	adds	r0, r3, r4
 80104a2:	bd10      	pop	{r4, pc}

080104a4 <_ZNSt6vectorIaSaIaEEC1ERKS1_>:
      vector(const vector& __x)
 80104a4:	b570      	push	{r4, r5, r6, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80104a6:	e9d1 3600 	ldrd	r3, r6, [r1]
      vector(const vector& __x)
 80104aa:	4604      	mov	r4, r0
 80104ac:	460d      	mov	r5, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80104ae:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 80104b0:	2300      	movs	r3, #0
 80104b2:	e9c0 3300 	strd	r3, r3, [r0]
 80104b6:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
 80104b8:	4630      	mov	r0, r6
 80104ba:	f7fe f8cb 	bl	800e654 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80104be:	4406      	add	r6, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 80104c0:	4602      	mov	r2, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80104c2:	60a6      	str	r6, [r4, #8]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 80104c4:	e9c4 0000 	strd	r0, r0, [r4]
			      _Category>::__copy_m(__first, __last, __result);
 80104c8:	e9d5 0100 	ldrd	r0, r1, [r5]
 80104cc:	f7ff ffde 	bl	801048c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
	this->_M_impl._M_finish =
 80104d0:	6060      	str	r0, [r4, #4]
      }
 80104d2:	4620      	mov	r0, r4
 80104d4:	bd70      	pop	{r4, r5, r6, pc}

080104d6 <_ZN9Registers13WriteRegisterIaEEbtPT_tb>:
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 80104d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104da:	b085      	sub	sp, #20
 80104dc:	4606      	mov	r6, r0
 80104de:	4688      	mov	r8, r1
 80104e0:	461f      	mov	r7, r3
 80104e2:	f89d 3038 	ldrb.w	r3, [sp, #56]	@ 0x38
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80104e6:	f04f 31ff 	mov.w	r1, #4294967295
 80104ea:	6800      	ldr	r0, [r0, #0]
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 80104ec:	4615      	mov	r5, r2
 80104ee:	9301      	str	r3, [sp, #4]
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80104f0:	f7fb fe52 	bl	800c198 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80104f4:	f10d 020f 	add.w	r2, sp, #15
 80104f8:	4641      	mov	r1, r8
 80104fa:	4630      	mov	r0, r6
 80104fc:	f004 fc2d 	bl	8014d5a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8010500:	f89d 300f 	ldrb.w	r3, [sp, #15]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8010504:	4604      	mov	r4, r0
	if (!success) {
 8010506:	b933      	cbnz	r3, 8010516 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x40>
		osSemaphoreRelease(RegistersSemaphore);
 8010508:	6830      	ldr	r0, [r6, #0]
 801050a:	f7fb fe79 	bl	800c200 <osSemaphoreRelease>
		return false;
 801050e:	2000      	movs	r0, #0
}
 8010510:	b005      	add	sp, #20
 8010512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8010516:	f10d 000f 	add.w	r0, sp, #15
 801051a:	f7fe f8f5 	bl	800e708 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0>
	if (!success) {
 801051e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8010522:	2b00      	cmp	r3, #0
 8010524:	d0f0      	beq.n	8010508 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x32>
	if (target_register->register_info.type != registered_type) {
 8010526:	7923      	ldrb	r3, [r4, #4]
 8010528:	4283      	cmp	r3, r0
 801052a:	d1ed      	bne.n	8010508 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x32>
	if (callbacks[target_register->register_info.type] == NULL) {
 801052c:	3304      	adds	r3, #4
 801052e:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 8010532:	2800      	cmp	r0, #0
 8010534:	d0e8      	beq.n	8010508 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x32>
	if (target_register->access.write) {
 8010536:	7a23      	ldrb	r3, [r4, #8]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d0e5      	beq.n	8010508 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x32>
		success = false;
 801053c:	2300      	movs	r3, #0
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 801053e:	8961      	ldrh	r1, [r4, #10]
		success = false;
 8010540:	f88d 300f 	strb.w	r3, [sp, #15]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8010544:	f7fe fe04 	bl	800f150 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE2atEj>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8010548:	9b01      	ldr	r3, [sp, #4]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 801054a:	f8d0 9008 	ldr.w	r9, [r0, #8]
 801054e:	e9d0 ba00 	ldrd	fp, sl, [r0]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8010552:	b133      	cbz	r3, 8010562 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x8c>
 8010554:	68e3      	ldr	r3, [r4, #12]
 8010556:	b123      	cbz	r3, 8010562 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x8c>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 8010558:	f04f 31ff 	mov.w	r1, #4294967295
 801055c:	6818      	ldr	r0, [r3, #0]
 801055e:	f7fb fe1b 	bl	800c198 <osSemaphoreAcquire>
		if (target_register->mode.pointer) {
 8010562:	7823      	ldrb	r3, [r4, #0]
 8010564:	b1db      	cbz	r3, 801059e <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xc8>
			success = true;
 8010566:	2301      	movs	r3, #1
 8010568:	f88d 300f 	strb.w	r3, [sp, #15]
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 801056c:	7963      	ldrb	r3, [r4, #5]
 801056e:	2b00      	cmp	r3, #0
 8010570:	d045      	beq.n	80105fe <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x128>
 8010572:	88e1      	ldrh	r1, [r4, #6]
 8010574:	2900      	cmp	r1, #0
 8010576:	d13c      	bne.n	80105f2 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x11c>
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8010578:	e9db 3100 	ldrd	r3, r1, [fp]
 801057c:	428b      	cmp	r3, r1
	    this->_M_impl._M_finish = __pos;
 801057e:	bf18      	it	ne
 8010580:	f8cb 3004 	strne.w	r3, [fp, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010584:	f8db 0004 	ldr.w	r0, [fp, #4]
 8010588:	1ac1      	subs	r1, r0, r3
	if (__new_size > size())
 801058a:	428f      	cmp	r7, r1
 801058c:	d924      	bls.n	80105d8 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x102>
	  _M_default_append(__new_size - size());
 801058e:	1a79      	subs	r1, r7, r1
 8010590:	4658      	mov	r0, fp
 8010592:	f7ff ff43 	bl	801041c <_ZNSt6vectorIaSaIaEE17_M_default_appendEj>
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 8010596:	2300      	movs	r3, #0
				for (uint16_t index = 0; index < length; index++) {
 8010598:	b299      	uxth	r1, r3
 801059a:	42b9      	cmp	r1, r7
 801059c:	d323      	bcc.n	80105e6 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x110>
		if (target_register->mode.callbacks) {
 801059e:	7863      	ldrb	r3, [r4, #1]
 80105a0:	b16b      	cbz	r3, 80105be <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xe8>
			if (callbacks.write != NULL) {
 80105a2:	f1b9 0f00 	cmp.w	r9, #0
 80105a6:	d00a      	beq.n	80105be <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xe8>
				if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 80105a8:	7963      	ldrb	r3, [r4, #5]
 80105aa:	b36b      	cbz	r3, 8010608 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x132>
 80105ac:	88e3      	ldrh	r3, [r4, #6]
 80105ae:	b903      	cbnz	r3, 80105b2 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xdc>
					success = callbacks.write(callbacks.context, ID, value, length);
 80105b0:	463b      	mov	r3, r7
					success = callbacks.write(callbacks.context, ID, value, 1);
 80105b2:	462a      	mov	r2, r5
 80105b4:	4641      	mov	r1, r8
 80105b6:	4650      	mov	r0, sl
 80105b8:	47c8      	blx	r9
 80105ba:	f88d 000f 	strb.w	r0, [sp, #15]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 80105be:	9b01      	ldr	r3, [sp, #4]
 80105c0:	b123      	cbz	r3, 80105cc <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xf6>
 80105c2:	68e3      	ldr	r3, [r4, #12]
 80105c4:	b113      	cbz	r3, 80105cc <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xf6>
			osSemaphoreRelease(*(target_register->register_semaphore));
 80105c6:	6818      	ldr	r0, [r3, #0]
 80105c8:	f7fb fe1a 	bl	800c200 <osSemaphoreRelease>
		osSemaphoreRelease(RegistersSemaphore);
 80105cc:	6830      	ldr	r0, [r6, #0]
 80105ce:	f7fb fe17 	bl	800c200 <osSemaphoreRelease>
		return success;
 80105d2:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80105d6:	e79b      	b.n	8010510 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x3a>
	else if (__new_size < size())
 80105d8:	d2dd      	bcs.n	8010596 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xc0>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 80105da:	443b      	add	r3, r7
	if (size_type __n = this->_M_impl._M_finish - __pos)
 80105dc:	4298      	cmp	r0, r3
 80105de:	d0da      	beq.n	8010596 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xc0>
	    this->_M_impl._M_finish = __pos;
 80105e0:	f8cb 3004 	str.w	r3, [fp, #4]
 80105e4:	e7d7      	b.n	8010596 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xc0>
					(*register_vector)[index] = value[index];
 80105e6:	56e8      	ldrsb	r0, [r5, r3]
 80105e8:	f8db 1000 	ldr.w	r1, [fp]
 80105ec:	54c8      	strb	r0, [r1, r3]
				for (uint16_t index = 0; index < length; index++) {
 80105ee:	3301      	adds	r3, #1
 80105f0:	e7d2      	b.n	8010598 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xc2>
 80105f2:	465a      	mov	r2, fp
 80105f4:	4429      	add	r1, r5
 80105f6:	4628      	mov	r0, r5
 80105f8:	f7ff ff48 	bl	801048c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80105fc:	e7cf      	b.n	801059e <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xc8>
				*(callbacks.pointer) = *value;
 80105fe:	f995 3000 	ldrsb.w	r3, [r5]
 8010602:	f88b 3000 	strb.w	r3, [fp]
 8010606:	e7ca      	b.n	801059e <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xc8>
					success = callbacks.write(callbacks.context, ID, value, 1);
 8010608:	2301      	movs	r3, #1
 801060a:	e7d2      	b.n	80105b2 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xdc>

0801060c <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t>:
uint16_t Communication::ProcessWrite(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 801060c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010610:	b091      	sub	sp, #68	@ 0x44
 8010612:	4605      	mov	r5, r0
 8010614:	4691      	mov	r9, r2
 8010616:	4608      	mov	r0, r1
 8010618:	af02      	add	r7, sp, #8
 801061a:	469a      	mov	sl, r3
		T value = ExtractSingle<T>(message.payload, start_index, &success);
 801061c:	3104      	adds	r1, #4
uint16_t Communication::ProcessWrite(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 801061e:	f8d7 b060 	ldr.w	fp, [r7, #96]	@ 0x60
 8010622:	f107 060b 	add.w	r6, r7, #11
 8010626:	f8b7 4064 	ldrh.w	r4, [r7, #100]	@ 0x64
	if (not element.element_register.isArray) {
 801062a:	f89b 8003 	ldrb.w	r8, [fp, #3]
 801062e:	f1b8 0f00 	cmp.w	r8, #0
 8010632:	d176      	bne.n	8010722 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x116>
		T value = ExtractSingle<T>(message.payload, start_index, &success);
 8010634:	f107 0020 	add.w	r0, r7, #32
 8010638:	f7f0 f9e0 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 801063c:	4632      	mov	r2, r6
 801063e:	4621      	mov	r1, r4
 8010640:	f107 0020 	add.w	r0, r7, #32
 8010644:	f7fe f8cc 	bl	800e7e0 <_ZN13Communication13ExtractSingleIaEET_St6vectorIhSaIhEEtPb.isra.0>
 8010648:	7538      	strb	r0, [r7, #20]
      }
 801064a:	f107 0020 	add.w	r0, r7, #32
 801064e:	f7f0 f925 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8010652:	7afb      	ldrb	r3, [r7, #11]
 8010654:	b153      	cbz	r3, 801066c <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x60>
			success = registers->WriteRegister<T>(element.element_register.address, &value);
 8010656:	2301      	movs	r3, #1
 8010658:	f8bb 1000 	ldrh.w	r1, [fp]
 801065c:	f107 0214 	add.w	r2, r7, #20
 8010660:	9300      	str	r3, [sp, #0]
 8010662:	4643      	mov	r3, r8
 8010664:	6868      	ldr	r0, [r5, #4]
 8010666:	f7ff ff36 	bl	80104d6 <_ZN9Registers13WriteRegisterIaEEbtPT_tb>
 801066a:	72f8      	strb	r0, [r7, #11]
		length_to_extract = 1;
 801066c:	f04f 0801 	mov.w	r8, #1
	if (success)
 8010670:	7afb      	ldrb	r3, [r7, #11]
		response_content.data = std::vector<uint8_t>{OK};
 8010672:	f10a 060c 	add.w	r6, sl, #12
 8010676:	f107 0214 	add.w	r2, r7, #20
 801067a:	f107 010c 	add.w	r1, r7, #12
	if (success)
 801067e:	2b00      	cmp	r3, #0
 8010680:	f000 80ce 	beq.w	8010820 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x214>
		response_content.data = std::vector<uint8_t>{OK};
 8010684:	2300      	movs	r3, #0
 8010686:	723b      	strb	r3, [r7, #8]
 8010688:	f107 0308 	add.w	r3, r7, #8
 801068c:	60fb      	str	r3, [r7, #12]
 801068e:	2301      	movs	r3, #1
 8010690:	613b      	str	r3, [r7, #16]
 8010692:	4613      	mov	r3, r2
 8010694:	c906      	ldmia	r1, {r1, r2}
		response_content.data = std::vector<uint8_t>{ERROR};
 8010696:	f107 0020 	add.w	r0, r7, #32
 801069a:	f7f0 fa53 	bl	8000b44 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 801069e:	f107 0120 	add.w	r1, r7, #32
 80106a2:	4630      	mov	r0, r6
 80106a4:	f7fe f9b7 	bl	800ea16 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 80106a8:	f107 0020 	add.w	r0, r7, #32
 80106ac:	f7f0 f8f6 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not BuildPayload(response, response_content)) {
 80106b0:	4651      	mov	r1, sl
 80106b2:	f107 0020 	add.w	r0, r7, #32
 80106b6:	f7fe fdcc 	bl	800f252 <_ZN14MessageElementC1ERKS_>
 80106ba:	f107 0220 	add.w	r2, r7, #32
 80106be:	4649      	mov	r1, r9
 80106c0:	4628      	mov	r0, r5
 80106c2:	f7ff fd55 	bl	8010170 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 80106c6:	4606      	mov	r6, r0
 80106c8:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80106cc:	f7f0 f8e6 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80106d0:	bb06      	cbnz	r6, 8010714 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x108>
		Send(*response);
 80106d2:	4649      	mov	r1, r9
 80106d4:	f107 0020 	add.w	r0, r7, #32
 80106d8:	f7fe fdce 	bl	800f278 <_ZN13MessageHeaderC1ERKS_>
 80106dc:	f107 0120 	add.w	r1, r7, #32
 80106e0:	4628      	mov	r0, r5
 80106e2:	f7fe feb9 	bl	800f458 <_ZN13Communication4SendE13MessageHeader>
 80106e6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80106ea:	f7f0 f8d7 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		response->payload.clear();
 80106ee:	f109 0004 	add.w	r0, r9, #4
 80106f2:	f7fe f9a7 	bl	800ea44 <_ZNSt6vectorIhSaIhEE5clearEv>
		BuildPayload(response, response_content);
 80106f6:	4651      	mov	r1, sl
 80106f8:	f107 0020 	add.w	r0, r7, #32
 80106fc:	f7fe fda9 	bl	800f252 <_ZN14MessageElementC1ERKS_>
 8010700:	f107 0220 	add.w	r2, r7, #32
 8010704:	4649      	mov	r1, r9
 8010706:	4628      	mov	r0, r5
 8010708:	f7ff fd32 	bl	8010170 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 801070c:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8010710:	f7f0 f8c4 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return start_index + sizeof(T) * length_to_extract;
 8010714:	eb04 0008 	add.w	r0, r4, r8
}
 8010718:	373c      	adds	r7, #60	@ 0x3c
 801071a:	b280      	uxth	r0, r0
 801071c:	46bd      	mov	sp, r7
 801071e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (element.element_register.isArray && element.element_register.length > 0) {
 8010722:	f8bb 8004 	ldrh.w	r8, [fp, #4]
 8010726:	f1b8 0f00 	cmp.w	r8, #0
 801072a:	d029      	beq.n	8010780 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x174>
		T values[length_to_extract];
 801072c:	f108 0307 	add.w	r3, r8, #7
 8010730:	466a      	mov	r2, sp
	} else if (element.element_register.isArray && element.element_register.length == 0) {
 8010732:	f8c7 d000 	str.w	sp, [r7]
		ExtractArray<T>(values, message.payload, start_index, length_to_extract, &success);
 8010736:	f107 0020 	add.w	r0, r7, #32
		T values[length_to_extract];
 801073a:	08db      	lsrs	r3, r3, #3
 801073c:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 8010740:	469d      	mov	sp, r3
 8010742:	ab02      	add	r3, sp, #8
 8010744:	607b      	str	r3, [r7, #4]
		ExtractArray<T>(values, message.payload, start_index, length_to_extract, &success);
 8010746:	f7f0 f959 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 801074a:	9600      	str	r6, [sp, #0]
 801074c:	4643      	mov	r3, r8
 801074e:	4622      	mov	r2, r4
 8010750:	f107 0120 	add.w	r1, r7, #32
 8010754:	6878      	ldr	r0, [r7, #4]
 8010756:	f7ff fa1f 	bl	800fb98 <_ZN13Communication12ExtractArrayIaEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 801075a:	f107 0020 	add.w	r0, r7, #32
 801075e:	f7f0 f89d 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8010762:	7afb      	ldrb	r3, [r7, #11]
 8010764:	b14b      	cbz	r3, 801077a <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x16e>
			success = registers->WriteRegister<T>(element.element_register.address, values);
 8010766:	2301      	movs	r3, #1
 8010768:	f8bb 1000 	ldrh.w	r1, [fp]
 801076c:	9300      	str	r3, [sp, #0]
 801076e:	2300      	movs	r3, #0
 8010770:	687a      	ldr	r2, [r7, #4]
 8010772:	6868      	ldr	r0, [r5, #4]
 8010774:	f7ff feaf 	bl	80104d6 <_ZN9Registers13WriteRegisterIaEEbtPT_tb>
 8010778:	72f8      	strb	r0, [r7, #11]
 801077a:	f8d7 d000 	ldr.w	sp, [r7]
	} else if (element.element_register.isArray && element.element_register.length == 0) {
 801077e:	e777      	b.n	8010670 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x64>
		length_to_extract = message.payload[start_index];
 8010780:	6843      	ldr	r3, [r0, #4]
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8010782:	f107 0020 	add.w	r0, r7, #32
		length_to_extract = message.payload[start_index];
 8010786:	f813 8004 	ldrb.w	r8, [r3, r4]
		start_index++;
 801078a:	3401      	adds	r4, #1
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 801078c:	f7f0 f936 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010790:	f107 0120 	add.w	r1, r7, #32
		start_index++;
 8010794:	b2a4      	uxth	r4, r4
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8010796:	4643      	mov	r3, r8
 8010798:	f107 0014 	add.w	r0, r7, #20
 801079c:	9600      	str	r6, [sp, #0]
 801079e:	4622      	mov	r2, r4
 80107a0:	f7ff f9a0 	bl	800fae4 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 80107a4:	f107 0020 	add.w	r0, r7, #32
 80107a8:	f7f0 f878 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 80107ac:	7afb      	ldrb	r3, [r7, #11]
 80107ae:	b1fb      	cbz	r3, 80107f0 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x1e4>
			success = registers->WriteVectorRegister<T>(element.element_register.address, values); // previously &values
 80107b0:	686e      	ldr	r6, [r5, #4]
 80107b2:	f107 0114 	add.w	r1, r7, #20
 80107b6:	f8bb b000 	ldrh.w	fp, [fp]
 80107ba:	f107 0020 	add.w	r0, r7, #32
 80107be:	f7ff fe71 	bl	80104a4 <_ZNSt6vectorIaSaIaEEC1ERKS1_>
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80107c2:	f04f 31ff 	mov.w	r1, #4294967295
 80107c6:	6830      	ldr	r0, [r6, #0]
 80107c8:	f7fb fce6 	bl	800c198 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80107cc:	f107 020c 	add.w	r2, r7, #12
 80107d0:	4659      	mov	r1, fp
 80107d2:	4630      	mov	r0, r6
 80107d4:	f004 fac1 	bl	8014d5a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80107d8:	7b3a      	ldrb	r2, [r7, #12]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80107da:	4603      	mov	r3, r0
		osSemaphoreRelease(RegistersSemaphore);
 80107dc:	6830      	ldr	r0, [r6, #0]
	if (!success) {
 80107de:	b962      	cbnz	r2, 80107fa <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x1ee>
		osSemaphoreRelease(RegistersSemaphore);
 80107e0:	f7fb fd0e 	bl	800c200 <osSemaphoreRelease>
		return false;
 80107e4:	2000      	movs	r0, #0
 80107e6:	72f8      	strb	r0, [r7, #11]
 80107e8:	f107 0020 	add.w	r0, r7, #32
 80107ec:	f7fe fbee 	bl	800efcc <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 80107f0:	f107 0014 	add.w	r0, r7, #20
 80107f4:	f7fe fbea 	bl	800efcc <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 80107f8:	e73a      	b.n	8010670 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x64>
	if (!(target_register->register_info.isArray && target_register->register_info.length == 0)) {
 80107fa:	795a      	ldrb	r2, [r3, #5]
 80107fc:	2a00      	cmp	r2, #0
 80107fe:	d0ef      	beq.n	80107e0 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x1d4>
 8010800:	88db      	ldrh	r3, [r3, #6]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d1ec      	bne.n	80107e0 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x1d4>
	osSemaphoreRelease(RegistersSemaphore);
 8010806:	f7fb fcfb 	bl	800c200 <osSemaphoreRelease>
	return WriteRegister(ID, value.data(), value.size(), use_semaphore);
 801080a:	2101      	movs	r1, #1
 801080c:	4630      	mov	r0, r6
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801080e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8010812:	9100      	str	r1, [sp, #0]
 8010814:	4659      	mov	r1, fp
 8010816:	1a9b      	subs	r3, r3, r2
 8010818:	b29b      	uxth	r3, r3
 801081a:	f7ff fe5c 	bl	80104d6 <_ZN9Registers13WriteRegisterIaEEbtPT_tb>
 801081e:	e7e2      	b.n	80107e6 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x1da>
		response_content.data = std::vector<uint8_t>{ERROR};
 8010820:	23ff      	movs	r3, #255	@ 0xff
 8010822:	723b      	strb	r3, [r7, #8]
 8010824:	f107 0308 	add.w	r3, r7, #8
 8010828:	617b      	str	r3, [r7, #20]
 801082a:	2301      	movs	r3, #1
 801082c:	61bb      	str	r3, [r7, #24]
 801082e:	460b      	mov	r3, r1
 8010830:	ca06      	ldmia	r2, {r1, r2}
 8010832:	e730      	b.n	8010696 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x8a>

08010834 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt>:
uint16_t Communication::ProcessCommand(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 8010834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010838:	460f      	mov	r7, r1
 801083a:	b0b1      	sub	sp, #196	@ 0xc4
 801083c:	461c      	mov	r4, r3
 801083e:	4680      	mov	r8, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010840:	f04f 0900 	mov.w	r9, #0
 8010844:	f8bd a0e8 	ldrh.w	sl, [sp, #232]	@ 0xe8
 8010848:	9203      	str	r2, [sp, #12]
 801084a:	ad2a      	add	r5, sp, #168	@ 0xa8
 801084c:	f8cd 9074 	str.w	r9, [sp, #116]	@ 0x74
	response_content.element_register = element.element_register;
 8010850:	e9d3 0100 	ldrd	r0, r1, [r3]
	response_content.ack = true;
 8010854:	2301      	movs	r3, #1
	response_content.element_register = element.element_register;
 8010856:	9018      	str	r0, [sp, #96]	@ 0x60
	response_content.ack = true;
 8010858:	f8ad 3066 	strh.w	r3, [sp, #102]	@ 0x66
	response_content.access = element.access;
 801085c:	7a23      	ldrb	r3, [r4, #8]
	response_content.element_register = element.element_register;
 801085e:	f8ad 1064 	strh.w	r1, [sp, #100]	@ 0x64
	CommunicationLED(leds, message.interface);
 8010862:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8010866:	7839      	ldrb	r1, [r7, #0]
	response_content.access = element.access;
 8010868:	f88d 3068 	strb.w	r3, [sp, #104]	@ 0x68
 801086c:	e9cd 991b 	strd	r9, r9, [sp, #108]	@ 0x6c
	CommunicationLED(leds, message.interface);
 8010870:	f7fd fdcd 	bl	800e40e <_Z16CommunicationLEDP4LEDSh>
	if (element.access == WRITE) {
 8010874:	7a23      	ldrb	r3, [r4, #8]
		return ProcessWrite<T>(message, response, response_content, element, start_index);
 8010876:	4639      	mov	r1, r7
	if (element.access == WRITE) {
 8010878:	bb1b      	cbnz	r3, 80108c2 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x8e>
		return ProcessWrite<T>(message, response, response_content, element, start_index);
 801087a:	a81e      	add	r0, sp, #120	@ 0x78
 801087c:	f7fe fcfc 	bl	800f278 <_ZN13MessageHeaderC1ERKS_>
 8010880:	a918      	add	r1, sp, #96	@ 0x60
 8010882:	a824      	add	r0, sp, #144	@ 0x90
 8010884:	f7fe fce5 	bl	800f252 <_ZN14MessageElementC1ERKS_>
 8010888:	4621      	mov	r1, r4
 801088a:	4628      	mov	r0, r5
 801088c:	f7fe fce1 	bl	800f252 <_ZN14MessageElementC1ERKS_>
 8010890:	ab24      	add	r3, sp, #144	@ 0x90
 8010892:	9a03      	ldr	r2, [sp, #12]
 8010894:	a91e      	add	r1, sp, #120	@ 0x78
 8010896:	4640      	mov	r0, r8
 8010898:	e9cd 5a00 	strd	r5, sl, [sp]
 801089c:	f7ff feb6 	bl	801060c <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t>
 80108a0:	4682      	mov	sl, r0
      }
 80108a2:	a82d      	add	r0, sp, #180	@ 0xb4
 80108a4:	f7ef fffa 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80108a8:	a827      	add	r0, sp, #156	@ 0x9c
 80108aa:	f7ef fff7 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80108ae:	a81f      	add	r0, sp, #124	@ 0x7c
 80108b0:	f7ef fff4 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80108b4:	a81b      	add	r0, sp, #108	@ 0x6c
 80108b6:	f7ef fff1 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 80108ba:	4650      	mov	r0, sl
 80108bc:	b031      	add	sp, #196	@ 0xc4
 80108be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return ProcessRead<T>(message, response, response_content, element, start_index);
 80108c2:	a813      	add	r0, sp, #76	@ 0x4c
 80108c4:	f7fe fcd8 	bl	800f278 <_ZN13MessageHeaderC1ERKS_>
 80108c8:	a918      	add	r1, sp, #96	@ 0x60
 80108ca:	a81e      	add	r0, sp, #120	@ 0x78
 80108cc:	f7fe fcc1 	bl	800f252 <_ZN14MessageElementC1ERKS_>
 80108d0:	4621      	mov	r1, r4
 80108d2:	a824      	add	r0, sp, #144	@ 0x90
 80108d4:	f7fe fcbd 	bl	800f252 <_ZN14MessageElementC1ERKS_>
uint16_t Communication::ProcessRead(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 80108d8:	f8d8 7004 	ldr.w	r7, [r8, #4]
std::vector<uint8_t> Communication::ReadElement(MessageElement* element, bool* success) {
	std::vector<uint8_t> data;

	T register_read;
	uint16_t length;
	*success = registers->ReadRegister<T>(element->element_register.address, &register_read, &length);
 80108dc:	f8bd b090 	ldrh.w	fp, [sp, #144]	@ 0x90
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80108e0:	f04f 31ff 	mov.w	r1, #4294967295
 80108e4:	6838      	ldr	r0, [r7, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80108e6:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 80108ea:	e9cd 9907 	strd	r9, r9, [sp, #28]
 80108ee:	f7fb fc53 	bl	800c198 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80108f2:	462a      	mov	r2, r5
 80108f4:	4659      	mov	r1, fp
 80108f6:	4638      	mov	r0, r7
 80108f8:	f004 fa2f 	bl	8014d5a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80108fc:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8010900:	4604      	mov	r4, r0
	if (!success) {
 8010902:	2b00      	cmp	r3, #0
 8010904:	d15c      	bne.n	80109c0 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x18c>
		osSemaphoreRelease(RegistersSemaphore);
 8010906:	6838      	ldr	r0, [r7, #0]
 8010908:	f7fb fc7a 	bl	800c200 <osSemaphoreRelease>
		return false;
 801090c:	2300      	movs	r3, #0
 801090e:	9304      	str	r3, [sp, #16]
	response_content.data = ReadElement<T>(&element, &success);
 8010910:	a907      	add	r1, sp, #28
 8010912:	a821      	add	r0, sp, #132	@ 0x84
 8010914:	f7fe f87f 	bl	800ea16 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8010918:	a807      	add	r0, sp, #28
 801091a:	f7ef ffbf 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not success) {
 801091e:	9b04      	ldr	r3, [sp, #16]
 8010920:	b9ab      	cbnz	r3, 801094e <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x11a>
		response_content.data = std::vector<uint8_t>{ERROR};
 8010922:	22ff      	movs	r2, #255	@ 0xff
		response_content.command = true; // this is an error flag for a read ack
 8010924:	2301      	movs	r3, #1
		response_content.data = std::vector<uint8_t>{ERROR};
 8010926:	4628      	mov	r0, r5
 8010928:	f88d 2028 	strb.w	r2, [sp, #40]	@ 0x28
 801092c:	aa0a      	add	r2, sp, #40	@ 0x28
		response_content.command = true; // this is an error flag for a read ack
 801092e:	f88d 307f 	strb.w	r3, [sp, #127]	@ 0x7f
		response_content.data = std::vector<uint8_t>{ERROR};
 8010932:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010936:	ab0d      	add	r3, sp, #52	@ 0x34
 8010938:	2201      	movs	r2, #1
 801093a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801093c:	f7f0 f902 	bl	8000b44 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8010940:	a821      	add	r0, sp, #132	@ 0x84
 8010942:	4629      	mov	r1, r5
 8010944:	f7fe f867 	bl	800ea16 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 8010948:	4628      	mov	r0, r5
 801094a:	f7ef ffa7 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not BuildPayload(response, response_content) && response->payload.size() > 0) { // if no space available, send the data and then rebuild a new response
 801094e:	a91e      	add	r1, sp, #120	@ 0x78
 8010950:	4628      	mov	r0, r5
 8010952:	f7fe fc7e 	bl	800f252 <_ZN14MessageElementC1ERKS_>
 8010956:	462a      	mov	r2, r5
 8010958:	9903      	ldr	r1, [sp, #12]
 801095a:	4640      	mov	r0, r8
 801095c:	f7ff fc08 	bl	8010170 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8010960:	2800      	cmp	r0, #0
 8010962:	f040 812e 	bne.w	8010bc2 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x38e>
 8010966:	9b03      	ldr	r3, [sp, #12]
 8010968:	e9d3 3401 	ldrd	r3, r4, [r3, #4]
 801096c:	1ae4      	subs	r4, r4, r3
 801096e:	bf18      	it	ne
 8010970:	2401      	movne	r4, #1
 8010972:	a82d      	add	r0, sp, #180	@ 0xb4
 8010974:	f7ef ff92 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8010978:	b1d4      	cbz	r4, 80109b0 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x17c>
		Send(*response);
 801097a:	9903      	ldr	r1, [sp, #12]
 801097c:	a82a      	add	r0, sp, #168	@ 0xa8
 801097e:	f7fe fc7b 	bl	800f278 <_ZN13MessageHeaderC1ERKS_>
 8010982:	a92a      	add	r1, sp, #168	@ 0xa8
 8010984:	4640      	mov	r0, r8
 8010986:	f7fe fd67 	bl	800f458 <_ZN13Communication4SendE13MessageHeader>
 801098a:	a82b      	add	r0, sp, #172	@ 0xac
 801098c:	f7ef ff86 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		response->payload.clear();
 8010990:	9b03      	ldr	r3, [sp, #12]
 8010992:	1d18      	adds	r0, r3, #4
 8010994:	f7fe f856 	bl	800ea44 <_ZNSt6vectorIhSaIhEE5clearEv>
		BuildPayload(response, response_content);
 8010998:	a91e      	add	r1, sp, #120	@ 0x78
 801099a:	a82a      	add	r0, sp, #168	@ 0xa8
 801099c:	f7fe fc59 	bl	800f252 <_ZN14MessageElementC1ERKS_>
 80109a0:	aa2a      	add	r2, sp, #168	@ 0xa8
 80109a2:	9903      	ldr	r1, [sp, #12]
 80109a4:	4640      	mov	r0, r8
 80109a6:	f7ff fbe3 	bl	8010170 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 80109aa:	a82d      	add	r0, sp, #180	@ 0xb4
 80109ac:	f7ef ff76 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80109b0:	a827      	add	r0, sp, #156	@ 0x9c
 80109b2:	f7ef ff73 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80109b6:	a821      	add	r0, sp, #132	@ 0x84
 80109b8:	f7ef ff70 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80109bc:	a814      	add	r0, sp, #80	@ 0x50
 80109be:	e777      	b.n	80108b0 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x7c>
	uint8_t registered_type = GetTypeID<T>(&success);
 80109c0:	4628      	mov	r0, r5
 80109c2:	f7fd fea1 	bl	800e708 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0>
	if (!success) {
 80109c6:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
 80109ca:	9304      	str	r3, [sp, #16]
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d09a      	beq.n	8010906 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0xd2>
	if (target_register->register_info.type != registered_type) {
 80109d0:	7923      	ldrb	r3, [r4, #4]
 80109d2:	4298      	cmp	r0, r3
 80109d4:	d197      	bne.n	8010906 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0xd2>
	if (callbacks[target_register->register_info.type] == NULL) {
 80109d6:	3004      	adds	r0, #4
 80109d8:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 80109dc:	2800      	cmp	r0, #0
 80109de:	d092      	beq.n	8010906 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0xd2>
	if (target_register->access.read) {
 80109e0:	7a63      	ldrb	r3, [r4, #9]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d031      	beq.n	8010a4a <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x216>
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 80109e6:	8961      	ldrh	r1, [r4, #10]
		success = false; // false by default to use pointer mode if the callback doesn't update the flag
 80109e8:	f88d 90a8 	strb.w	r9, [sp, #168]	@ 0xa8
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 80109ec:	f7fe fbb0 	bl	800f150 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE2atEj>
 80109f0:	e9d0 9300 	ldrd	r9, r3, [r0]
 80109f4:	9305      	str	r3, [sp, #20]
 80109f6:	68c3      	ldr	r3, [r0, #12]
 80109f8:	461e      	mov	r6, r3
		if (use_semaphore && target_register->register_semaphore != NULL) {
 80109fa:	68e3      	ldr	r3, [r4, #12]
 80109fc:	b123      	cbz	r3, 8010a08 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x1d4>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 80109fe:	f04f 31ff 	mov.w	r1, #4294967295
 8010a02:	6818      	ldr	r0, [r3, #0]
 8010a04:	f7fb fbc8 	bl	800c198 <osSemaphoreAcquire>
		if (target_register->mode.callbacks) {
 8010a08:	7863      	ldrb	r3, [r4, #1]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d161      	bne.n	8010ad2 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x29e>
		if (not success && target_register->mode.pointer) {
 8010a0e:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
 8010a12:	b9ab      	cbnz	r3, 8010a40 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x20c>
 8010a14:	7823      	ldrb	r3, [r4, #0]
 8010a16:	b19b      	cbz	r3, 8010a40 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x20c>
			success = true;
 8010a18:	2301      	movs	r3, #1
 8010a1a:	f88d 30a8 	strb.w	r3, [sp, #168]	@ 0xa8
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 8010a1e:	7962      	ldrb	r2, [r4, #5]
 8010a20:	2a00      	cmp	r2, #0
 8010a22:	f000 8088 	beq.w	8010b36 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x302>
 8010a26:	88e1      	ldrh	r1, [r4, #6]
 8010a28:	2900      	cmp	r1, #0
 8010a2a:	d17c      	bne.n	8010b26 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x2f2>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010a2c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010a30:	1a9b      	subs	r3, r3, r2
 8010a32:	aa06      	add	r2, sp, #24
				*length = register_vector->size();
 8010a34:	b29b      	uxth	r3, r3
 8010a36:	f8ad 301a 	strh.w	r3, [sp, #26]
					for (uint16_t index = 0; index < *length; index++) {
 8010a3a:	b288      	uxth	r0, r1
 8010a3c:	4283      	cmp	r3, r0
 8010a3e:	d86b      	bhi.n	8010b18 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x2e4>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8010a40:	68e3      	ldr	r3, [r4, #12]
 8010a42:	b113      	cbz	r3, 8010a4a <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x216>
			osSemaphoreRelease(*(target_register->register_semaphore));
 8010a44:	6818      	ldr	r0, [r3, #0]
 8010a46:	f7fb fbdb 	bl	800c200 <osSemaphoreRelease>
	osSemaphoreRelease(RegistersSemaphore);
 8010a4a:	6838      	ldr	r0, [r7, #0]
 8010a4c:	f7fb fbd8 	bl	800c200 <osSemaphoreRelease>

	if (not *success)
		return data;

	// Get vector of type T
	std::vector<T> register_read_vector_cast = BuildTVector(*element, &register_read);
 8010a50:	a924      	add	r1, sp, #144	@ 0x90
 8010a52:	4628      	mov	r0, r5
 8010a54:	f7fe fbfd 	bl	800f252 <_ZN14MessageElementC1ERKS_>
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010a58:	2300      	movs	r3, #0
 8010a5a:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 8010a5e:	930c      	str	r3, [sp, #48]	@ 0x30
	if (not element.element_register.isArray) {
 8010a60:	f89d 30ab 	ldrb.w	r3, [sp, #171]	@ 0xab
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d16d      	bne.n	8010b44 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x310>
		vector = std::vector<T>{*data};
 8010a68:	f89d 3018 	ldrb.w	r3, [sp, #24]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8010a6c:	2001      	movs	r0, #1
 8010a6e:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8010a72:	f7fd fdef 	bl	800e654 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>
			      _Category>::__copy_m(__first, __last, __result);
 8010a76:	f10d 0135 	add.w	r1, sp, #53	@ 0x35
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8010a7a:	1c43      	adds	r3, r0, #1
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8010a7c:	4602      	mov	r2, r0
 8010a7e:	9010      	str	r0, [sp, #64]	@ 0x40
 8010a80:	a80d      	add	r0, sp, #52	@ 0x34
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8010a82:	9312      	str	r3, [sp, #72]	@ 0x48
 8010a84:	f7ff fd02 	bl	801048c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
		vector = std::vector<T>(data, data + element.element_register.length);
 8010a88:	a910      	add	r1, sp, #64	@ 0x40
	  this->_M_impl._M_finish =
 8010a8a:	9011      	str	r0, [sp, #68]	@ 0x44
 8010a8c:	a80a      	add	r0, sp, #40	@ 0x28
 8010a8e:	f7fe faa7 	bl	800efe0 <_ZNSt6vectorIaSaIaEEaSEOS1_.isra.0>
      }
 8010a92:	a810      	add	r0, sp, #64	@ 0x40
 8010a94:	f7fe fa9a 	bl	800efcc <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 8010a98:	a82d      	add	r0, sp, #180	@ 0xb4
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010a9a:	2400      	movs	r4, #0
      }
 8010a9c:	f7ef fefe 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>

	// transform it in vector of uint8_t
	data = BuildVector<T>(register_read_vector_cast);
 8010aa0:	a90a      	add	r1, sp, #40	@ 0x28
 8010aa2:	a810      	add	r0, sp, #64	@ 0x40
 8010aa4:	f7ff fcfe 	bl	80104a4 <_ZNSt6vectorIaSaIaEEC1ERKS1_>
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010aa8:	940f      	str	r4, [sp, #60]	@ 0x3c
      : _M_current(__i) { }
 8010aaa:	e9dd 7910 	ldrd	r7, r9, [sp, #64]	@ 0x40
 8010aae:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
    for (T input : inputs) {
 8010ab2:	45b9      	cmp	r9, r7
 8010ab4:	d16f      	bne.n	8010b96 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x362>
	data = BuildVector<T>(register_read_vector_cast);
 8010ab6:	a90d      	add	r1, sp, #52	@ 0x34
 8010ab8:	a807      	add	r0, sp, #28
 8010aba:	f7fd ffac 	bl	800ea16 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8010abe:	a80d      	add	r0, sp, #52	@ 0x34
 8010ac0:	f7ef feec 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8010ac4:	a810      	add	r0, sp, #64	@ 0x40
 8010ac6:	f7fe fa81 	bl	800efcc <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 8010aca:	a80a      	add	r0, sp, #40	@ 0x28
 8010acc:	f7fe fa7e 	bl	800efcc <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 8010ad0:	e71e      	b.n	8010910 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0xdc>
				*callback_output = output;
 8010ad2:	2200      	movs	r2, #0
 8010ad4:	ab06      	add	r3, sp, #24
 8010ad6:	6013      	str	r3, [r2, #0]
			if (callbacks.read != NULL) {
 8010ad8:	2e00      	cmp	r6, #0
 8010ada:	d098      	beq.n	8010a0e <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x1da>
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 8010adc:	f10d 031a 	add.w	r3, sp, #26
 8010ae0:	4659      	mov	r1, fp
 8010ae2:	9805      	ldr	r0, [sp, #20]
 8010ae4:	47b0      	blx	r6
 8010ae6:	f88d 00a8 	strb.w	r0, [sp, #168]	@ 0xa8
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 8010aea:	7963      	ldrb	r3, [r4, #5]
 8010aec:	b143      	cbz	r3, 8010b00 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x2cc>
 8010aee:	88e3      	ldrh	r3, [r4, #6]
 8010af0:	b10b      	cbz	r3, 8010af6 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x2c2>
					*length = 1;
 8010af2:	f8ad 301a 	strh.w	r3, [sp, #26]
					for (uint16_t index = 0; index < *length; index++) {
 8010af6:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 8010afa:	a906      	add	r1, sp, #24
 8010afc:	2300      	movs	r3, #0
 8010afe:	e007      	b.n	8010b10 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x2dc>
					*length = 1;
 8010b00:	2301      	movs	r3, #1
 8010b02:	e7f6      	b.n	8010af2 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x2be>
						output[index] = (*callback_output )[index];
 8010b04:	2200      	movs	r2, #0
 8010b06:	6812      	ldr	r2, [r2, #0]
 8010b08:	5cd2      	ldrb	r2, [r2, r3]
 8010b0a:	3301      	adds	r3, #1
 8010b0c:	f801 2b01 	strb.w	r2, [r1], #1
					for (uint16_t index = 0; index < *length; index++) {
 8010b10:	b29a      	uxth	r2, r3
 8010b12:	4290      	cmp	r0, r2
 8010b14:	d8f6      	bhi.n	8010b04 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x2d0>
 8010b16:	e77a      	b.n	8010a0e <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x1da>
						output[index] = (*register_vector)[index];
 8010b18:	f8d9 0000 	ldr.w	r0, [r9]
 8010b1c:	5640      	ldrsb	r0, [r0, r1]
 8010b1e:	3101      	adds	r1, #1
 8010b20:	f802 0b01 	strb.w	r0, [r2], #1
					for (uint16_t index = 0; index < *length; index++) {
 8010b24:	e789      	b.n	8010a3a <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x206>
				*length = target_register->register_info.length;
 8010b26:	f8ad 101a 	strh.w	r1, [sp, #26]
 8010b2a:	aa06      	add	r2, sp, #24
 8010b2c:	4449      	add	r1, r9
 8010b2e:	4648      	mov	r0, r9
 8010b30:	f7ff fcac 	bl	801048c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8010b34:	e784      	b.n	8010a40 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x20c>
				*length = 1;
 8010b36:	f8ad 301a 	strh.w	r3, [sp, #26]
					*output = *callbacks.pointer;
 8010b3a:	f999 3000 	ldrsb.w	r3, [r9]
 8010b3e:	f88d 3018 	strb.w	r3, [sp, #24]
 8010b42:	e77d      	b.n	8010a40 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x20c>
	} else if (element.element_register.isArray && element.element_register.length > 0)
 8010b44:	f8bd 40ac 	ldrh.w	r4, [sp, #172]	@ 0xac
 8010b48:	b154      	cbz	r4, 8010b60 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x32c>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8010b4a:	4620      	mov	r0, r4
 8010b4c:	f7fd fd82 	bl	800e654 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8010b50:	1903      	adds	r3, r0, r4
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8010b52:	4602      	mov	r2, r0
 8010b54:	9010      	str	r0, [sp, #64]	@ 0x40
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8010b56:	9312      	str	r3, [sp, #72]	@ 0x48
			      _Category>::__copy_m(__first, __last, __result);
 8010b58:	ab06      	add	r3, sp, #24
 8010b5a:	1919      	adds	r1, r3, r4
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	e791      	b.n	8010a84 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x250>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010b60:	e9dd 9b06 	ldrd	r9, fp, [sp, #24]
	  if (__xlen > capacity())
 8010b64:	ebbb 0709 	subs.w	r7, fp, r9
 8010b68:	d00f      	beq.n	8010b8a <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x356>
	  pointer __result = this->_M_allocate(__n);
 8010b6a:	4638      	mov	r0, r7
 8010b6c:	f7fd fd72 	bl	800e654 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>
 8010b70:	4604      	mov	r4, r0
 8010b72:	4602      	mov	r2, r0
 8010b74:	4659      	mov	r1, fp
 8010b76:	4648      	mov	r0, r9
 8010b78:	f7ff fc88 	bl	801048c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
	      this->_M_impl._M_start = __tmp;
 8010b7c:	940a      	str	r4, [sp, #40]	@ 0x28
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8010b7e:	443c      	add	r4, r7
 8010b80:	940c      	str	r4, [sp, #48]	@ 0x30
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8010b82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010b84:	443b      	add	r3, r7
 8010b86:	930b      	str	r3, [sp, #44]	@ 0x2c
      return *this;
 8010b88:	e786      	b.n	8010a98 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x264>
 8010b8a:	463a      	mov	r2, r7
 8010b8c:	4659      	mov	r1, fp
 8010b8e:	4648      	mov	r0, r9
 8010b90:	f7ff fc7c 	bl	801048c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8010b94:	e7f5      	b.n	8010b82 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x34e>
    for (T input : inputs) {
 8010b96:	f917 3b01 	ldrsb.w	r3, [r7], #1
      { emplace_back(std::move(__x)); }
 8010b9a:	f10d 0119 	add.w	r1, sp, #25
 8010b9e:	4628      	mov	r0, r5
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010ba0:	942c      	str	r4, [sp, #176]	@ 0xb0
		data.push_back((uint8_t) ((reinterpreted_input >> ((type_length - 1 - index) << 3)) & 0xFF)); // previously (8 * (type_length - 1 - index))) & 0xFF))
 8010ba2:	f88d 3019 	strb.w	r3, [sp, #25]
 8010ba6:	e9cd 442a 	strd	r4, r4, [sp, #168]	@ 0xa8
      { emplace_back(std::move(__x)); }
 8010baa:	f7fe fa5b 	bl	800f064 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
        data.insert(data.end(), single.begin(), single.end());
 8010bae:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010bb0:	a80d      	add	r0, sp, #52	@ 0x34
 8010bb2:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	@ 0xa8
 8010bb6:	f7ff fa67 	bl	8010088 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_>
      }
 8010bba:	4628      	mov	r0, r5
 8010bbc:	f7ef fe6e 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return *this;
 8010bc0:	e777      	b.n	8010ab2 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x27e>
	if (not BuildPayload(response, response_content) && response->payload.size() > 0) { // if no space available, send the data and then rebuild a new response
 8010bc2:	2400      	movs	r4, #0
 8010bc4:	e6d5      	b.n	8010972 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x13e>

08010bc6 <_ZN13Communication14ProcessElementIaEEt13MessageHeaderPS1_14MessageElementt>:
uint16_t Communication::ProcessElement(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 8010bc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010bc8:	461c      	mov	r4, r3
 8010bca:	b08f      	sub	sp, #60	@ 0x3c
	if (not element.ack && element.command) {
 8010bcc:	799b      	ldrb	r3, [r3, #6]
uint16_t Communication::ProcessElement(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 8010bce:	4605      	mov	r5, r0
 8010bd0:	4617      	mov	r7, r2
 8010bd2:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
	if (not element.ack && element.command) {
 8010bd6:	b9cb      	cbnz	r3, 8010c0c <_ZN13Communication14ProcessElementIaEEt13MessageHeaderPS1_14MessageElementt+0x46>
 8010bd8:	79e3      	ldrb	r3, [r4, #7]
		return ProcessCommand<T>(message, response, element, start_index);
 8010bda:	a803      	add	r0, sp, #12
	if (not element.ack && element.command) {
 8010bdc:	b323      	cbz	r3, 8010c28 <_ZN13Communication14ProcessElementIaEEt13MessageHeaderPS1_14MessageElementt+0x62>
		return ProcessCommand<T>(message, response, element, start_index);
 8010bde:	f7fe fb4b 	bl	800f278 <_ZN13MessageHeaderC1ERKS_>
 8010be2:	4621      	mov	r1, r4
 8010be4:	a808      	add	r0, sp, #32
 8010be6:	f7fe fb34 	bl	800f252 <_ZN14MessageElementC1ERKS_>
 8010bea:	ab08      	add	r3, sp, #32
 8010bec:	463a      	mov	r2, r7
 8010bee:	a903      	add	r1, sp, #12
 8010bf0:	4628      	mov	r0, r5
 8010bf2:	9600      	str	r6, [sp, #0]
 8010bf4:	f7ff fe1e 	bl	8010834 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt>
		return ProcessSubscriber<T>(message, element, start_index);
 8010bf8:	4604      	mov	r4, r0
 8010bfa:	a80b      	add	r0, sp, #44	@ 0x2c
 8010bfc:	f7ef fe4e 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8010c00:	a804      	add	r0, sp, #16
 8010c02:	f7ef fe4b 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 8010c06:	4620      	mov	r0, r4
 8010c08:	b00f      	add	sp, #60	@ 0x3c
 8010c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ProcessService<T>(message, element, start_index);
 8010c0c:	a803      	add	r0, sp, #12
 8010c0e:	f7fe fb33 	bl	800f278 <_ZN13MessageHeaderC1ERKS_>
 8010c12:	4621      	mov	r1, r4
 8010c14:	a808      	add	r0, sp, #32
 8010c16:	f7fe fb1c 	bl	800f252 <_ZN14MessageElementC1ERKS_>
 8010c1a:	4633      	mov	r3, r6
 8010c1c:	aa08      	add	r2, sp, #32
 8010c1e:	a903      	add	r1, sp, #12
 8010c20:	4628      	mov	r0, r5
 8010c22:	f7ff f8bc 	bl	800fd9e <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt>
 8010c26:	e7e7      	b.n	8010bf8 <_ZN13Communication14ProcessElementIaEEt13MessageHeaderPS1_14MessageElementt+0x32>
		return ProcessSubscriber<T>(message, element, start_index);
 8010c28:	f7fe fb26 	bl	800f278 <_ZN13MessageHeaderC1ERKS_>
 8010c2c:	4621      	mov	r1, r4
 8010c2e:	a808      	add	r0, sp, #32
 8010c30:	f7fe fb0f 	bl	800f252 <_ZN14MessageElementC1ERKS_>
 8010c34:	4633      	mov	r3, r6
 8010c36:	aa08      	add	r2, sp, #32
 8010c38:	a903      	add	r1, sp, #12
 8010c3a:	4628      	mov	r0, r5
 8010c3c:	f7fe ffd3 	bl	800fbe6 <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt>
 8010c40:	e7da      	b.n	8010bf8 <_ZN13Communication14ProcessElementIaEEt13MessageHeaderPS1_14MessageElementt+0x32>

08010c42 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPfjEET_S3_T0_>:
 8010c42:	4603      	mov	r3, r0
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 8010c44:	b510      	push	{r4, lr}
	  if (__n > 0)
 8010c46:	b179      	cbz	r1, 8010c68 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPfjEET_S3_T0_+0x26>
 8010c48:	2200      	movs	r2, #0
      if (__n <= 0)
 8010c4a:	1e4c      	subs	r4, r1, #1
 8010c4c:	f843 2b04 	str.w	r2, [r3], #4
 8010c50:	d00a      	beq.n	8010c68 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPfjEET_S3_T0_+0x26>
      std::__fill_a(__first, __first + __n, __value);
 8010c52:	eb03 0484 	add.w	r4, r3, r4, lsl #2
	*__first = __tmp;
 8010c56:	2100      	movs	r1, #0
 8010c58:	1a24      	subs	r4, r4, r0
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	3c04      	subs	r4, #4
 8010c5e:	4622      	mov	r2, r4
 8010c60:	f005 fdfe 	bl	8016860 <memset>
 8010c64:	4603      	mov	r3, r0
 8010c66:	4423      	add	r3, r4
	}
 8010c68:	4618      	mov	r0, r3
 8010c6a:	bd10      	pop	{r4, pc}

08010c6c <_ZNSt6vectorIfSaIfEE17_M_default_appendEj>:
    vector<_Tp, _Alloc>::
 8010c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c70:	4604      	mov	r4, r0
      if (__n != 0)
 8010c72:	460e      	mov	r6, r1
 8010c74:	b171      	cbz	r1, 8010c94 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x28>
					 - this->_M_impl._M_finish);
 8010c76:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010c78:	e9d0 8200 	ldrd	r8, r2, [r0]
 8010c7c:	1a9b      	subs	r3, r3, r2
 8010c7e:	eba2 0a08 	sub.w	sl, r2, r8
	  if (__navail >= __n)
 8010c82:	ebb1 0fa3 	cmp.w	r1, r3, asr #2
 8010c86:	ea4f 07aa 	mov.w	r7, sl, asr #2
 8010c8a:	d805      	bhi.n	8010c98 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x2c>
	__uninit_default_n(__first, __n);
 8010c8c:	4610      	mov	r0, r2
 8010c8e:	f7ff ffd8 	bl	8010c42 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPfjEET_S3_T0_>
	      this->_M_impl._M_finish =
 8010c92:	6060      	str	r0, [r4, #4]
    }
 8010c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		_M_check_len(__n, "vector::_M_default_append");
 8010c98:	4a12      	ldr	r2, [pc, #72]	@ (8010ce4 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x78>)
 8010c9a:	f7fe fa96 	bl	800f1ca <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>
 8010c9e:	4681      	mov	r9, r0
	      pointer __new_start(this->_M_allocate(__len));
 8010ca0:	f7fd fcc6 	bl	800e630 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
 8010ca4:	4631      	mov	r1, r6
 8010ca6:	4605      	mov	r5, r0
 8010ca8:	4450      	add	r0, sl
 8010caa:	f7ff ffca 	bl	8010c42 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPfjEET_S3_T0_>
      if (__count > 0)
 8010cae:	f1ba 0f00 	cmp.w	sl, #0
 8010cb2:	d00b      	beq.n	8010ccc <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x60>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8010cb4:	4652      	mov	r2, sl
 8010cb6:	4641      	mov	r1, r8
 8010cb8:	4628      	mov	r0, r5
 8010cba:	f005 fdb7 	bl	801682c <memmove>
			    this->_M_impl._M_end_of_storage - __old_start);
 8010cbe:	68a1      	ldr	r1, [r4, #8]
 8010cc0:	4640      	mov	r0, r8
 8010cc2:	eba1 0108 	sub.w	r1, r1, r8
 8010cc6:	f005 fbff 	bl	80164c8 <_ZdlPvj>
      }
 8010cca:	e002      	b.n	8010cd2 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x66>
	if (__p)
 8010ccc:	f1b8 0f00 	cmp.w	r8, #0
 8010cd0:	d1f5      	bne.n	8010cbe <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x52>
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8010cd2:	4437      	add	r7, r6
	      this->_M_impl._M_start = __new_start;
 8010cd4:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8010cd6:	eb05 0787 	add.w	r7, r5, r7, lsl #2
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 8010cda:	eb05 0589 	add.w	r5, r5, r9, lsl #2
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8010cde:	6067      	str	r7, [r4, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 8010ce0:	60a5      	str	r5, [r4, #8]
    }
 8010ce2:	e7d7      	b.n	8010c94 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x28>
 8010ce4:	08016dc2 	.word	0x08016dc2

08010ce8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	  if (_Num)
 8010ce8:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8010cea:	4613      	mov	r3, r2
 8010cec:	b510      	push	{r4, lr}
	  const ptrdiff_t _Num = __last - __first;
 8010cee:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
 8010cf2:	d005      	beq.n	8010d00 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8010cf4:	4601      	mov	r1, r0
 8010cf6:	4622      	mov	r2, r4
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	f005 fd97 	bl	801682c <memmove>
 8010cfe:	4603      	mov	r3, r0
	}
 8010d00:	1918      	adds	r0, r3, r4
 8010d02:	bd10      	pop	{r4, pc}

08010d04 <_ZNSt6vectorIfSaIfEEC1ERKS1_>:
      vector(const vector& __x)
 8010d04:	b570      	push	{r4, r5, r6, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010d06:	e9d1 3600 	ldrd	r3, r6, [r1]
      vector(const vector& __x)
 8010d0a:	4604      	mov	r4, r0
 8010d0c:	460d      	mov	r5, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010d0e:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010d10:	2300      	movs	r3, #0
 8010d12:	e9c0 3300 	strd	r3, r3, [r0]
 8010d16:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8010d18:	10b0      	asrs	r0, r6, #2
 8010d1a:	f7fd fc89 	bl	800e630 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8010d1e:	4406      	add	r6, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8010d20:	4602      	mov	r2, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8010d22:	60a6      	str	r6, [r4, #8]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8010d24:	e9c4 0000 	strd	r0, r0, [r4]
			      _Category>::__copy_m(__first, __last, __result);
 8010d28:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010d2c:	f7ff ffdc 	bl	8010ce8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	this->_M_impl._M_finish =
 8010d30:	6060      	str	r0, [r4, #4]
      }
 8010d32:	4620      	mov	r0, r4
 8010d34:	bd70      	pop	{r4, r5, r6, pc}

08010d36 <_ZN9Registers13WriteRegisterIfEEbtPT_tb>:
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 8010d36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d3a:	b085      	sub	sp, #20
 8010d3c:	4606      	mov	r6, r0
 8010d3e:	4688      	mov	r8, r1
 8010d40:	461f      	mov	r7, r3
 8010d42:	f89d 3038 	ldrb.w	r3, [sp, #56]	@ 0x38
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8010d46:	f04f 31ff 	mov.w	r1, #4294967295
 8010d4a:	6800      	ldr	r0, [r0, #0]
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 8010d4c:	4615      	mov	r5, r2
 8010d4e:	9301      	str	r3, [sp, #4]
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8010d50:	f7fb fa22 	bl	800c198 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8010d54:	f10d 020f 	add.w	r2, sp, #15
 8010d58:	4641      	mov	r1, r8
 8010d5a:	4630      	mov	r0, r6
 8010d5c:	f003 fffd 	bl	8014d5a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8010d60:	f89d 300f 	ldrb.w	r3, [sp, #15]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8010d64:	4604      	mov	r4, r0
	if (!success) {
 8010d66:	b933      	cbnz	r3, 8010d76 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x40>
		osSemaphoreRelease(RegistersSemaphore);
 8010d68:	6830      	ldr	r0, [r6, #0]
 8010d6a:	f7fb fa49 	bl	800c200 <osSemaphoreRelease>
		return false;
 8010d6e:	2000      	movs	r0, #0
}
 8010d70:	b005      	add	sp, #20
 8010d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8010d76:	f10d 000f 	add.w	r0, sp, #15
 8010d7a:	f7fd fc77 	bl	800e66c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>
	if (!success) {
 8010d7e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d0f0      	beq.n	8010d68 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x32>
	if (target_register->register_info.type != registered_type) {
 8010d86:	7923      	ldrb	r3, [r4, #4]
 8010d88:	4283      	cmp	r3, r0
 8010d8a:	d1ed      	bne.n	8010d68 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x32>
	if (callbacks[target_register->register_info.type] == NULL) {
 8010d8c:	3304      	adds	r3, #4
 8010d8e:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 8010d92:	2800      	cmp	r0, #0
 8010d94:	d0e8      	beq.n	8010d68 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x32>
	if (target_register->access.write) {
 8010d96:	7a23      	ldrb	r3, [r4, #8]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d0e5      	beq.n	8010d68 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x32>
		success = false;
 8010d9c:	2300      	movs	r3, #0
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8010d9e:	8961      	ldrh	r1, [r4, #10]
		success = false;
 8010da0:	f88d 300f 	strb.w	r3, [sp, #15]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8010da4:	f7fe f9e6 	bl	800f174 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE2atEj>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8010da8:	9b01      	ldr	r3, [sp, #4]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8010daa:	f8d0 9008 	ldr.w	r9, [r0, #8]
 8010dae:	e9d0 ba00 	ldrd	fp, sl, [r0]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8010db2:	b133      	cbz	r3, 8010dc2 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x8c>
 8010db4:	68e3      	ldr	r3, [r4, #12]
 8010db6:	b123      	cbz	r3, 8010dc2 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x8c>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 8010db8:	f04f 31ff 	mov.w	r1, #4294967295
 8010dbc:	6818      	ldr	r0, [r3, #0]
 8010dbe:	f7fb f9eb 	bl	800c198 <osSemaphoreAcquire>
		if (target_register->mode.pointer) {
 8010dc2:	7823      	ldrb	r3, [r4, #0]
 8010dc4:	b1eb      	cbz	r3, 8010e02 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xcc>
			success = true;
 8010dc6:	2301      	movs	r3, #1
 8010dc8:	f88d 300f 	strb.w	r3, [sp, #15]
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 8010dcc:	7963      	ldrb	r3, [r4, #5]
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d04d      	beq.n	8010e6e <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x138>
 8010dd2:	88e1      	ldrh	r1, [r4, #6]
 8010dd4:	2900      	cmp	r1, #0
 8010dd6:	d143      	bne.n	8010e60 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x12a>
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8010dd8:	e9db 3100 	ldrd	r3, r1, [fp]
 8010ddc:	428b      	cmp	r3, r1
	    this->_M_impl._M_finish = __pos;
 8010dde:	bf18      	it	ne
 8010de0:	f8cb 3004 	strne.w	r3, [fp, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010de4:	f8db 0004 	ldr.w	r0, [fp, #4]
 8010de8:	1ac1      	subs	r1, r0, r3
 8010dea:	1089      	asrs	r1, r1, #2
	if (__new_size > size())
 8010dec:	428f      	cmp	r7, r1
 8010dee:	d925      	bls.n	8010e3c <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x106>
	  _M_default_append(__new_size - size());
 8010df0:	1a79      	subs	r1, r7, r1
 8010df2:	4658      	mov	r0, fp
 8010df4:	f7ff ff3a 	bl	8010c6c <_ZNSt6vectorIfSaIfEE17_M_default_appendEj>
 8010df8:	4628      	mov	r0, r5
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 8010dfa:	2300      	movs	r3, #0
				for (uint16_t index = 0; index < length; index++) {
 8010dfc:	b299      	uxth	r1, r3
 8010dfe:	42b9      	cmp	r1, r7
 8010e00:	d324      	bcc.n	8010e4c <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x116>
		if (target_register->mode.callbacks) {
 8010e02:	7863      	ldrb	r3, [r4, #1]
 8010e04:	b16b      	cbz	r3, 8010e22 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xec>
			if (callbacks.write != NULL) {
 8010e06:	f1b9 0f00 	cmp.w	r9, #0
 8010e0a:	d00a      	beq.n	8010e22 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xec>
				if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 8010e0c:	7963      	ldrb	r3, [r4, #5]
 8010e0e:	b393      	cbz	r3, 8010e76 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x140>
 8010e10:	88e3      	ldrh	r3, [r4, #6]
 8010e12:	b903      	cbnz	r3, 8010e16 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xe0>
					success = callbacks.write(callbacks.context, ID, value, length);
 8010e14:	463b      	mov	r3, r7
					success = callbacks.write(callbacks.context, ID, value, 1);
 8010e16:	462a      	mov	r2, r5
 8010e18:	4641      	mov	r1, r8
 8010e1a:	4650      	mov	r0, sl
 8010e1c:	47c8      	blx	r9
 8010e1e:	f88d 000f 	strb.w	r0, [sp, #15]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8010e22:	9b01      	ldr	r3, [sp, #4]
 8010e24:	b123      	cbz	r3, 8010e30 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xfa>
 8010e26:	68e3      	ldr	r3, [r4, #12]
 8010e28:	b113      	cbz	r3, 8010e30 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xfa>
			osSemaphoreRelease(*(target_register->register_semaphore));
 8010e2a:	6818      	ldr	r0, [r3, #0]
 8010e2c:	f7fb f9e8 	bl	800c200 <osSemaphoreRelease>
		osSemaphoreRelease(RegistersSemaphore);
 8010e30:	6830      	ldr	r0, [r6, #0]
 8010e32:	f7fb f9e5 	bl	800c200 <osSemaphoreRelease>
		return success;
 8010e36:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8010e3a:	e799      	b.n	8010d70 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x3a>
	else if (__new_size < size())
 8010e3c:	d2dc      	bcs.n	8010df8 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xc2>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 8010e3e:	eb03 0387 	add.w	r3, r3, r7, lsl #2
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8010e42:	4298      	cmp	r0, r3
 8010e44:	d0d8      	beq.n	8010df8 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xc2>
	    this->_M_impl._M_finish = __pos;
 8010e46:	f8cb 3004 	str.w	r3, [fp, #4]
 8010e4a:	e7d5      	b.n	8010df8 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xc2>
					(*register_vector)[index] = value[index];
 8010e4c:	f8db 1000 	ldr.w	r1, [fp]
 8010e50:	f850 cb04 	ldr.w	ip, [r0], #4
 8010e54:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8010e58:	3301      	adds	r3, #1
 8010e5a:	f8c1 c000 	str.w	ip, [r1]
				for (uint16_t index = 0; index < length; index++) {
 8010e5e:	e7cd      	b.n	8010dfc <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xc6>
 8010e60:	465a      	mov	r2, fp
 8010e62:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8010e66:	4628      	mov	r0, r5
 8010e68:	f7ff ff3e 	bl	8010ce8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8010e6c:	e7c9      	b.n	8010e02 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xcc>
				*(callbacks.pointer) = *value;
 8010e6e:	682b      	ldr	r3, [r5, #0]
 8010e70:	f8cb 3000 	str.w	r3, [fp]
 8010e74:	e7c5      	b.n	8010e02 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xcc>
					success = callbacks.write(callbacks.context, ID, value, 1);
 8010e76:	2301      	movs	r3, #1
 8010e78:	e7cd      	b.n	8010e16 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xe0>

08010e7a <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t>:
uint16_t Communication::ProcessWrite(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 8010e7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e7e:	b091      	sub	sp, #68	@ 0x44
 8010e80:	4605      	mov	r5, r0
 8010e82:	4691      	mov	r9, r2
 8010e84:	4608      	mov	r0, r1
 8010e86:	af02      	add	r7, sp, #8
 8010e88:	469a      	mov	sl, r3
		T value = ExtractSingle<T>(message.payload, start_index, &success);
 8010e8a:	3104      	adds	r1, #4
uint16_t Communication::ProcessWrite(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 8010e8c:	f8d7 b060 	ldr.w	fp, [r7, #96]	@ 0x60
 8010e90:	f107 060b 	add.w	r6, r7, #11
 8010e94:	f8b7 4064 	ldrh.w	r4, [r7, #100]	@ 0x64
	if (not element.element_register.isArray) {
 8010e98:	f89b 8003 	ldrb.w	r8, [fp, #3]
 8010e9c:	f1b8 0f00 	cmp.w	r8, #0
 8010ea0:	d177      	bne.n	8010f92 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x118>
		T value = ExtractSingle<T>(message.payload, start_index, &success);
 8010ea2:	f107 0020 	add.w	r0, r7, #32
 8010ea6:	f7ef fda9 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010eaa:	4632      	mov	r2, r6
 8010eac:	4621      	mov	r1, r4
 8010eae:	f107 0020 	add.w	r0, r7, #32
 8010eb2:	f7fd fc77 	bl	800e7a4 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0>
      }
 8010eb6:	f107 0020 	add.w	r0, r7, #32
 8010eba:	ed87 0a05 	vstr	s0, [r7, #20]
 8010ebe:	f7ef fced 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8010ec2:	7afb      	ldrb	r3, [r7, #11]
 8010ec4:	b153      	cbz	r3, 8010edc <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x62>
			success = registers->WriteRegister<T>(element.element_register.address, &value);
 8010ec6:	2301      	movs	r3, #1
 8010ec8:	f8bb 1000 	ldrh.w	r1, [fp]
 8010ecc:	f107 0214 	add.w	r2, r7, #20
 8010ed0:	9300      	str	r3, [sp, #0]
 8010ed2:	4643      	mov	r3, r8
 8010ed4:	6868      	ldr	r0, [r5, #4]
 8010ed6:	f7ff ff2e 	bl	8010d36 <_ZN9Registers13WriteRegisterIfEEbtPT_tb>
 8010eda:	72f8      	strb	r0, [r7, #11]
		length_to_extract = 1;
 8010edc:	f04f 0801 	mov.w	r8, #1
	if (success)
 8010ee0:	7afb      	ldrb	r3, [r7, #11]
		response_content.data = std::vector<uint8_t>{OK};
 8010ee2:	f10a 060c 	add.w	r6, sl, #12
 8010ee6:	f107 0214 	add.w	r2, r7, #20
 8010eea:	f107 010c 	add.w	r1, r7, #12
	if (success)
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	f000 80d0 	beq.w	8011094 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x21a>
		response_content.data = std::vector<uint8_t>{OK};
 8010ef4:	2300      	movs	r3, #0
 8010ef6:	723b      	strb	r3, [r7, #8]
 8010ef8:	f107 0308 	add.w	r3, r7, #8
 8010efc:	60fb      	str	r3, [r7, #12]
 8010efe:	2301      	movs	r3, #1
 8010f00:	613b      	str	r3, [r7, #16]
 8010f02:	4613      	mov	r3, r2
 8010f04:	c906      	ldmia	r1, {r1, r2}
		response_content.data = std::vector<uint8_t>{ERROR};
 8010f06:	f107 0020 	add.w	r0, r7, #32
 8010f0a:	f7ef fe1b 	bl	8000b44 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8010f0e:	f107 0120 	add.w	r1, r7, #32
 8010f12:	4630      	mov	r0, r6
 8010f14:	f7fd fd7f 	bl	800ea16 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 8010f18:	f107 0020 	add.w	r0, r7, #32
 8010f1c:	f7ef fcbe 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not BuildPayload(response, response_content)) {
 8010f20:	4651      	mov	r1, sl
 8010f22:	f107 0020 	add.w	r0, r7, #32
 8010f26:	f7fe f994 	bl	800f252 <_ZN14MessageElementC1ERKS_>
 8010f2a:	f107 0220 	add.w	r2, r7, #32
 8010f2e:	4649      	mov	r1, r9
 8010f30:	4628      	mov	r0, r5
 8010f32:	f7ff f91d 	bl	8010170 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8010f36:	4606      	mov	r6, r0
 8010f38:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8010f3c:	f7ef fcae 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8010f40:	bb06      	cbnz	r6, 8010f84 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x10a>
		Send(*response);
 8010f42:	4649      	mov	r1, r9
 8010f44:	f107 0020 	add.w	r0, r7, #32
 8010f48:	f7fe f996 	bl	800f278 <_ZN13MessageHeaderC1ERKS_>
 8010f4c:	f107 0120 	add.w	r1, r7, #32
 8010f50:	4628      	mov	r0, r5
 8010f52:	f7fe fa81 	bl	800f458 <_ZN13Communication4SendE13MessageHeader>
 8010f56:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8010f5a:	f7ef fc9f 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		response->payload.clear();
 8010f5e:	f109 0004 	add.w	r0, r9, #4
 8010f62:	f7fd fd6f 	bl	800ea44 <_ZNSt6vectorIhSaIhEE5clearEv>
		BuildPayload(response, response_content);
 8010f66:	4651      	mov	r1, sl
 8010f68:	f107 0020 	add.w	r0, r7, #32
 8010f6c:	f7fe f971 	bl	800f252 <_ZN14MessageElementC1ERKS_>
 8010f70:	f107 0220 	add.w	r2, r7, #32
 8010f74:	4649      	mov	r1, r9
 8010f76:	4628      	mov	r0, r5
 8010f78:	f7ff f8fa 	bl	8010170 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8010f7c:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8010f80:	f7ef fc8c 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return start_index + sizeof(T) * length_to_extract;
 8010f84:	eb04 0088 	add.w	r0, r4, r8, lsl #2
}
 8010f88:	373c      	adds	r7, #60	@ 0x3c
 8010f8a:	b280      	uxth	r0, r0
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (element.element_register.isArray && element.element_register.length > 0) {
 8010f92:	f8bb 8004 	ldrh.w	r8, [fp, #4]
 8010f96:	f1b8 0f00 	cmp.w	r8, #0
 8010f9a:	d02a      	beq.n	8010ff2 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x178>
		T values[length_to_extract];
 8010f9c:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8010fa0:	466a      	mov	r2, sp
	} else if (element.element_register.isArray && element.element_register.length == 0) {
 8010fa2:	f8c7 d000 	str.w	sp, [r7]
		ExtractArray<T>(values, message.payload, start_index, length_to_extract, &success);
 8010fa6:	f107 0020 	add.w	r0, r7, #32
		T values[length_to_extract];
 8010faa:	3307      	adds	r3, #7
 8010fac:	08db      	lsrs	r3, r3, #3
 8010fae:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 8010fb2:	469d      	mov	sp, r3
 8010fb4:	ab02      	add	r3, sp, #8
 8010fb6:	607b      	str	r3, [r7, #4]
		ExtractArray<T>(values, message.payload, start_index, length_to_extract, &success);
 8010fb8:	f7ef fd20 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010fbc:	9600      	str	r6, [sp, #0]
 8010fbe:	4643      	mov	r3, r8
 8010fc0:	4622      	mov	r2, r4
 8010fc2:	f107 0120 	add.w	r1, r7, #32
 8010fc6:	6878      	ldr	r0, [r7, #4]
 8010fc8:	f7fe fb3c 	bl	800f644 <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 8010fcc:	f107 0020 	add.w	r0, r7, #32
 8010fd0:	f7ef fc64 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8010fd4:	7afb      	ldrb	r3, [r7, #11]
 8010fd6:	b14b      	cbz	r3, 8010fec <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x172>
			success = registers->WriteRegister<T>(element.element_register.address, values);
 8010fd8:	2301      	movs	r3, #1
 8010fda:	f8bb 1000 	ldrh.w	r1, [fp]
 8010fde:	9300      	str	r3, [sp, #0]
 8010fe0:	2300      	movs	r3, #0
 8010fe2:	687a      	ldr	r2, [r7, #4]
 8010fe4:	6868      	ldr	r0, [r5, #4]
 8010fe6:	f7ff fea6 	bl	8010d36 <_ZN9Registers13WriteRegisterIfEEbtPT_tb>
 8010fea:	72f8      	strb	r0, [r7, #11]
 8010fec:	f8d7 d000 	ldr.w	sp, [r7]
	} else if (element.element_register.isArray && element.element_register.length == 0) {
 8010ff0:	e776      	b.n	8010ee0 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x66>
		length_to_extract = message.payload[start_index];
 8010ff2:	6843      	ldr	r3, [r0, #4]
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8010ff4:	f107 0020 	add.w	r0, r7, #32
		length_to_extract = message.payload[start_index];
 8010ff8:	f813 8004 	ldrb.w	r8, [r3, r4]
		start_index++;
 8010ffc:	3401      	adds	r4, #1
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8010ffe:	f7ef fcfd 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8011002:	f107 0120 	add.w	r1, r7, #32
		start_index++;
 8011006:	b2a4      	uxth	r4, r4
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8011008:	4643      	mov	r3, r8
 801100a:	f107 0014 	add.w	r0, r7, #20
 801100e:	9600      	str	r6, [sp, #0]
 8011010:	4622      	mov	r2, r4
 8011012:	f7fe fab9 	bl	800f588 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 8011016:	f107 0020 	add.w	r0, r7, #32
 801101a:	f7ef fc3f 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 801101e:	7afb      	ldrb	r3, [r7, #11]
 8011020:	b1fb      	cbz	r3, 8011062 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x1e8>
			success = registers->WriteVectorRegister<T>(element.element_register.address, values); // previously &values
 8011022:	686e      	ldr	r6, [r5, #4]
 8011024:	f107 0114 	add.w	r1, r7, #20
 8011028:	f8bb b000 	ldrh.w	fp, [fp]
 801102c:	f107 0020 	add.w	r0, r7, #32
 8011030:	f7ff fe68 	bl	8010d04 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8011034:	f04f 31ff 	mov.w	r1, #4294967295
 8011038:	6830      	ldr	r0, [r6, #0]
 801103a:	f7fb f8ad 	bl	800c198 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801103e:	f107 020c 	add.w	r2, r7, #12
 8011042:	4659      	mov	r1, fp
 8011044:	4630      	mov	r0, r6
 8011046:	f003 fe88 	bl	8014d5a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801104a:	7b3a      	ldrb	r2, [r7, #12]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801104c:	4603      	mov	r3, r0
		osSemaphoreRelease(RegistersSemaphore);
 801104e:	6830      	ldr	r0, [r6, #0]
	if (!success) {
 8011050:	b962      	cbnz	r2, 801106c <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x1f2>
		osSemaphoreRelease(RegistersSemaphore);
 8011052:	f7fb f8d5 	bl	800c200 <osSemaphoreRelease>
		return false;
 8011056:	2000      	movs	r0, #0
 8011058:	72f8      	strb	r0, [r7, #11]
 801105a:	f107 0020 	add.w	r0, r7, #32
 801105e:	f7f0 fe09 	bl	8001c74 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8011062:	f107 0014 	add.w	r0, r7, #20
 8011066:	f7f0 fe05 	bl	8001c74 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 801106a:	e739      	b.n	8010ee0 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x66>
	if (!(target_register->register_info.isArray && target_register->register_info.length == 0)) {
 801106c:	795a      	ldrb	r2, [r3, #5]
 801106e:	2a00      	cmp	r2, #0
 8011070:	d0ef      	beq.n	8011052 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x1d8>
 8011072:	88db      	ldrh	r3, [r3, #6]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d1ec      	bne.n	8011052 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x1d8>
	osSemaphoreRelease(RegistersSemaphore);
 8011078:	f7fb f8c2 	bl	800c200 <osSemaphoreRelease>
	return WriteRegister(ID, value.data(), value.size(), use_semaphore);
 801107c:	2101      	movs	r1, #1
 801107e:	4630      	mov	r0, r6
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011080:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011084:	9100      	str	r1, [sp, #0]
 8011086:	4659      	mov	r1, fp
 8011088:	1a9b      	subs	r3, r3, r2
 801108a:	f3c3 038f 	ubfx	r3, r3, #2, #16
 801108e:	f7ff fe52 	bl	8010d36 <_ZN9Registers13WriteRegisterIfEEbtPT_tb>
 8011092:	e7e1      	b.n	8011058 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x1de>
		response_content.data = std::vector<uint8_t>{ERROR};
 8011094:	23ff      	movs	r3, #255	@ 0xff
 8011096:	723b      	strb	r3, [r7, #8]
 8011098:	f107 0308 	add.w	r3, r7, #8
 801109c:	617b      	str	r3, [r7, #20]
 801109e:	2301      	movs	r3, #1
 80110a0:	61bb      	str	r3, [r7, #24]
 80110a2:	460b      	mov	r3, r1
 80110a4:	ca06      	ldmia	r2, {r1, r2}
 80110a6:	e72e      	b.n	8010f06 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x8c>

080110a8 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt>:
uint16_t Communication::ProcessCommand(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 80110a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110ac:	468b      	mov	fp, r1
 80110ae:	b0b1      	sub	sp, #196	@ 0xc4
 80110b0:	4607      	mov	r7, r0
 80110b2:	4698      	mov	r8, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 80110b4:	2600      	movs	r6, #0
	response_content.ack = true;
 80110b6:	f04f 0a01 	mov.w	sl, #1
uint16_t Communication::ProcessCommand(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 80110ba:	4615      	mov	r5, r2
 80110bc:	f8bd 90e8 	ldrh.w	r9, [sp, #232]	@ 0xe8
 80110c0:	961d      	str	r6, [sp, #116]	@ 0x74
 80110c2:	ac2a      	add	r4, sp, #168	@ 0xa8
	response_content.ack = true;
 80110c4:	f8ad a066 	strh.w	sl, [sp, #102]	@ 0x66
	response_content.element_register = element.element_register;
 80110c8:	e9d3 0100 	ldrd	r0, r1, [r3]
	response_content.access = element.access;
 80110cc:	7a1b      	ldrb	r3, [r3, #8]
	response_content.element_register = element.element_register;
 80110ce:	9018      	str	r0, [sp, #96]	@ 0x60
 80110d0:	f8ad 1064 	strh.w	r1, [sp, #100]	@ 0x64
	CommunicationLED(leds, message.interface);
 80110d4:	6938      	ldr	r0, [r7, #16]
 80110d6:	f89b 1000 	ldrb.w	r1, [fp]
	response_content.access = element.access;
 80110da:	f88d 3068 	strb.w	r3, [sp, #104]	@ 0x68
 80110de:	e9cd 661b 	strd	r6, r6, [sp, #108]	@ 0x6c
	CommunicationLED(leds, message.interface);
 80110e2:	f7fd f994 	bl	800e40e <_Z16CommunicationLEDP4LEDSh>
	if (element.access == WRITE) {
 80110e6:	f898 3008 	ldrb.w	r3, [r8, #8]
		return ProcessWrite<T>(message, response, response_content, element, start_index);
 80110ea:	4659      	mov	r1, fp
	if (element.access == WRITE) {
 80110ec:	bb1b      	cbnz	r3, 8011136 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x8e>
		return ProcessWrite<T>(message, response, response_content, element, start_index);
 80110ee:	a81e      	add	r0, sp, #120	@ 0x78
 80110f0:	f7fe f8c2 	bl	800f278 <_ZN13MessageHeaderC1ERKS_>
 80110f4:	a918      	add	r1, sp, #96	@ 0x60
 80110f6:	a824      	add	r0, sp, #144	@ 0x90
 80110f8:	f7fe f8ab 	bl	800f252 <_ZN14MessageElementC1ERKS_>
 80110fc:	4641      	mov	r1, r8
 80110fe:	4620      	mov	r0, r4
 8011100:	f7fe f8a7 	bl	800f252 <_ZN14MessageElementC1ERKS_>
 8011104:	ab24      	add	r3, sp, #144	@ 0x90
 8011106:	462a      	mov	r2, r5
 8011108:	a91e      	add	r1, sp, #120	@ 0x78
 801110a:	4638      	mov	r0, r7
 801110c:	e9cd 4900 	strd	r4, r9, [sp]
 8011110:	f7ff feb3 	bl	8010e7a <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t>
 8011114:	4681      	mov	r9, r0
      }
 8011116:	a82d      	add	r0, sp, #180	@ 0xb4
 8011118:	f7ef fbc0 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801111c:	a827      	add	r0, sp, #156	@ 0x9c
 801111e:	f7ef fbbd 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011122:	a81f      	add	r0, sp, #124	@ 0x7c
 8011124:	f7ef fbba 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011128:	a81b      	add	r0, sp, #108	@ 0x6c
 801112a:	f7ef fbb7 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 801112e:	4648      	mov	r0, r9
 8011130:	b031      	add	sp, #196	@ 0xc4
 8011132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return ProcessRead<T>(message, response, response_content, element, start_index);
 8011136:	a813      	add	r0, sp, #76	@ 0x4c
 8011138:	f7fe f89e 	bl	800f278 <_ZN13MessageHeaderC1ERKS_>
 801113c:	a918      	add	r1, sp, #96	@ 0x60
 801113e:	a81e      	add	r0, sp, #120	@ 0x78
 8011140:	f7fe f887 	bl	800f252 <_ZN14MessageElementC1ERKS_>
 8011144:	4641      	mov	r1, r8
 8011146:	a824      	add	r0, sp, #144	@ 0x90
 8011148:	f7fe f883 	bl	800f252 <_ZN14MessageElementC1ERKS_>
	*success = registers->ReadRegister<T>(element->element_register.address, &register_read, &length);
 801114c:	f8cd a000 	str.w	sl, [sp]
 8011150:	f10d 0316 	add.w	r3, sp, #22
 8011154:	aa06      	add	r2, sp, #24
 8011156:	f8bd 1090 	ldrh.w	r1, [sp, #144]	@ 0x90
 801115a:	6878      	ldr	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 801115c:	9609      	str	r6, [sp, #36]	@ 0x24
 801115e:	e9cd 6607 	strd	r6, r6, [sp, #28]
 8011162:	f7fd f9ab 	bl	800e4bc <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb>
	if (not *success)
 8011166:	4680      	mov	r8, r0
 8011168:	2800      	cmp	r0, #0
 801116a:	d040      	beq.n	80111ee <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x146>
	std::vector<T> register_read_vector_cast = BuildTVector(*element, &register_read);
 801116c:	a924      	add	r1, sp, #144	@ 0x90
 801116e:	4620      	mov	r0, r4
 8011170:	f7fe f86f 	bl	800f252 <_ZN14MessageElementC1ERKS_>
	if (not element.element_register.isArray) {
 8011174:	f89d 30ab 	ldrb.w	r3, [sp, #171]	@ 0xab
 8011178:	960c      	str	r6, [sp, #48]	@ 0x30
 801117a:	e9cd 660a 	strd	r6, r6, [sp, #40]	@ 0x28
 801117e:	2b00      	cmp	r3, #0
 8011180:	f040 808c 	bne.w	801129c <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x1f4>
		vector = std::vector<T>{*data};
 8011184:	9b06      	ldr	r3, [sp, #24]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8011186:	4650      	mov	r0, sl
 8011188:	930d      	str	r3, [sp, #52]	@ 0x34
 801118a:	f7fd fa51 	bl	800e630 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
			      _Category>::__copy_m(__first, __last, __result);
 801118e:	a90e      	add	r1, sp, #56	@ 0x38
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8011190:	1d03      	adds	r3, r0, #4
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8011192:	4602      	mov	r2, r0
 8011194:	9010      	str	r0, [sp, #64]	@ 0x40
 8011196:	a80d      	add	r0, sp, #52	@ 0x34
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8011198:	9312      	str	r3, [sp, #72]	@ 0x48
 801119a:	f7ff fda5 	bl	8010ce8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
		vector = std::vector<T>(data, data + element.element_register.length);
 801119e:	a910      	add	r1, sp, #64	@ 0x40
	  this->_M_impl._M_finish =
 80111a0:	9011      	str	r0, [sp, #68]	@ 0x44
 80111a2:	a80a      	add	r0, sp, #40	@ 0x28
 80111a4:	f7fd ff46 	bl	800f034 <_ZNSt6vectorIfSaIfEEaSEOS1_.isra.0>
      }
 80111a8:	a810      	add	r0, sp, #64	@ 0x40
 80111aa:	f7f0 fd63 	bl	8001c74 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 80111ae:	a82d      	add	r0, sp, #180	@ 0xb4
	: _M_start(), _M_finish(), _M_end_of_storage()
 80111b0:	2600      	movs	r6, #0
      }
 80111b2:	f7ef fb73 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	data = BuildVector<T>(register_read_vector_cast);
 80111b6:	a90a      	add	r1, sp, #40	@ 0x28
 80111b8:	a810      	add	r0, sp, #64	@ 0x40
 80111ba:	f7ff fda3 	bl	8010d04 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
      : _M_current(__i) { }
 80111be:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80111c0:	f8dd a040 	ldr.w	sl, [sp, #64]	@ 0x40
	: _M_start(), _M_finish(), _M_end_of_storage()
 80111c4:	960f      	str	r6, [sp, #60]	@ 0x3c
 80111c6:	9302      	str	r3, [sp, #8]
 80111c8:	e9cd 660d 	strd	r6, r6, [sp, #52]	@ 0x34
    for (T input : inputs) {
 80111cc:	9b02      	ldr	r3, [sp, #8]
 80111ce:	4553      	cmp	r3, sl
 80111d0:	f040 808e 	bne.w	80112f0 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x248>
	data = BuildVector<T>(register_read_vector_cast);
 80111d4:	a90d      	add	r1, sp, #52	@ 0x34
 80111d6:	a807      	add	r0, sp, #28
 80111d8:	f7fd fc1d 	bl	800ea16 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 80111dc:	a80d      	add	r0, sp, #52	@ 0x34
 80111de:	f7ef fb5d 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80111e2:	a810      	add	r0, sp, #64	@ 0x40
 80111e4:	f7f0 fd46 	bl	8001c74 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 80111e8:	a80a      	add	r0, sp, #40	@ 0x28
 80111ea:	f7f0 fd43 	bl	8001c74 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
	response_content.data = ReadElement<T>(&element, &success);
 80111ee:	a821      	add	r0, sp, #132	@ 0x84
 80111f0:	a907      	add	r1, sp, #28
 80111f2:	f7fd fc10 	bl	800ea16 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 80111f6:	a807      	add	r0, sp, #28
 80111f8:	f7ef fb50 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not success) {
 80111fc:	f1b8 0f00 	cmp.w	r8, #0
 8011200:	d115      	bne.n	801122e <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x186>
		response_content.data = std::vector<uint8_t>{ERROR};
 8011202:	22ff      	movs	r2, #255	@ 0xff
		response_content.command = true; // this is an error flag for a read ack
 8011204:	2301      	movs	r3, #1
		response_content.data = std::vector<uint8_t>{ERROR};
 8011206:	4620      	mov	r0, r4
 8011208:	f88d 2028 	strb.w	r2, [sp, #40]	@ 0x28
 801120c:	aa0a      	add	r2, sp, #40	@ 0x28
		response_content.command = true; // this is an error flag for a read ack
 801120e:	f88d 307f 	strb.w	r3, [sp, #127]	@ 0x7f
		response_content.data = std::vector<uint8_t>{ERROR};
 8011212:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011216:	ab0d      	add	r3, sp, #52	@ 0x34
 8011218:	2201      	movs	r2, #1
 801121a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801121c:	f7ef fc92 	bl	8000b44 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8011220:	a821      	add	r0, sp, #132	@ 0x84
 8011222:	4621      	mov	r1, r4
 8011224:	f7fd fbf7 	bl	800ea16 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 8011228:	4620      	mov	r0, r4
 801122a:	f7ef fb37 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not BuildPayload(response, response_content) && response->payload.size() > 0) { // if no space available, send the data and then rebuild a new response
 801122e:	a91e      	add	r1, sp, #120	@ 0x78
 8011230:	4620      	mov	r0, r4
 8011232:	f7fe f80e 	bl	800f252 <_ZN14MessageElementC1ERKS_>
 8011236:	4622      	mov	r2, r4
 8011238:	4629      	mov	r1, r5
 801123a:	4638      	mov	r0, r7
 801123c:	f7fe ff98 	bl	8010170 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8011240:	2800      	cmp	r0, #0
 8011242:	f040 8081 	bne.w	8011348 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x2a0>
 8011246:	e9d5 3601 	ldrd	r3, r6, [r5, #4]
 801124a:	1af6      	subs	r6, r6, r3
 801124c:	bf18      	it	ne
 801124e:	2601      	movne	r6, #1
 8011250:	a82d      	add	r0, sp, #180	@ 0xb4
 8011252:	f7ef fb23 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011256:	b1ce      	cbz	r6, 801128c <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x1e4>
		Send(*response);
 8011258:	4629      	mov	r1, r5
 801125a:	4620      	mov	r0, r4
 801125c:	f7fe f80c 	bl	800f278 <_ZN13MessageHeaderC1ERKS_>
 8011260:	4621      	mov	r1, r4
 8011262:	4638      	mov	r0, r7
 8011264:	f7fe f8f8 	bl	800f458 <_ZN13Communication4SendE13MessageHeader>
 8011268:	a82b      	add	r0, sp, #172	@ 0xac
 801126a:	f7ef fb17 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		response->payload.clear();
 801126e:	1d28      	adds	r0, r5, #4
 8011270:	f7fd fbe8 	bl	800ea44 <_ZNSt6vectorIhSaIhEE5clearEv>
		BuildPayload(response, response_content);
 8011274:	a91e      	add	r1, sp, #120	@ 0x78
 8011276:	4620      	mov	r0, r4
 8011278:	f7fd ffeb 	bl	800f252 <_ZN14MessageElementC1ERKS_>
 801127c:	4622      	mov	r2, r4
 801127e:	4629      	mov	r1, r5
 8011280:	4638      	mov	r0, r7
 8011282:	f7fe ff75 	bl	8010170 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8011286:	a82d      	add	r0, sp, #180	@ 0xb4
 8011288:	f7ef fb08 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801128c:	a827      	add	r0, sp, #156	@ 0x9c
 801128e:	f7ef fb05 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011292:	a821      	add	r0, sp, #132	@ 0x84
 8011294:	f7ef fb02 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011298:	a814      	add	r0, sp, #80	@ 0x50
 801129a:	e743      	b.n	8011124 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x7c>
	} else if (element.element_register.isArray && element.element_register.length > 0)
 801129c:	f8bd 00ac 	ldrh.w	r0, [sp, #172]	@ 0xac
 80112a0:	b150      	cbz	r0, 80112b8 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x210>
		vector = std::vector<T>(data, data + element.element_register.length);
 80112a2:	0086      	lsls	r6, r0, #2
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80112a4:	f7fd f9c4 	bl	800e630 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
 80112a8:	4602      	mov	r2, r0
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80112aa:	1983      	adds	r3, r0, r6
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80112ac:	9010      	str	r0, [sp, #64]	@ 0x40
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80112ae:	9312      	str	r3, [sp, #72]	@ 0x48
 80112b0:	ab06      	add	r3, sp, #24
 80112b2:	1999      	adds	r1, r3, r6
 80112b4:	4618      	mov	r0, r3
 80112b6:	e770      	b.n	801119a <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0xf2>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80112b8:	e9dd b106 	ldrd	fp, r1, [sp, #24]
	  if (__xlen > capacity())
 80112bc:	ebb1 0a0b 	subs.w	sl, r1, fp
 80112c0:	d011      	beq.n	80112e6 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x23e>
	  pointer __result = this->_M_allocate(__n);
 80112c2:	ea4f 00aa 	mov.w	r0, sl, asr #2
 80112c6:	9102      	str	r1, [sp, #8]
 80112c8:	f7fd f9b2 	bl	800e630 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
 80112cc:	4606      	mov	r6, r0
 80112ce:	4602      	mov	r2, r0
 80112d0:	9902      	ldr	r1, [sp, #8]
 80112d2:	4658      	mov	r0, fp
 80112d4:	f7ff fd08 	bl	8010ce8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	      this->_M_impl._M_start = __tmp;
 80112d8:	960a      	str	r6, [sp, #40]	@ 0x28
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 80112da:	4456      	add	r6, sl
 80112dc:	960c      	str	r6, [sp, #48]	@ 0x30
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 80112de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80112e0:	4453      	add	r3, sl
 80112e2:	930b      	str	r3, [sp, #44]	@ 0x2c
      return *this;
 80112e4:	e763      	b.n	80111ae <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x106>
 80112e6:	4652      	mov	r2, sl
 80112e8:	4658      	mov	r0, fp
 80112ea:	f7ff fcfd 	bl	8010ce8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80112ee:	e7f6      	b.n	80112de <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x236>
    for (T input : inputs) {
 80112f0:	f85a 2b04 	ldr.w	r2, [sl], #4
    std::memcpy(&reinterpreted_input, &input, sizeof(T)); // this is mandatory to get rid of the memory alignment problem. A simple cast can't work here
 80112f4:	f04f 0b18 	mov.w	fp, #24
	: _M_start(), _M_finish(), _M_end_of_storage()
 80112f8:	962c      	str	r6, [sp, #176]	@ 0xb0
 80112fa:	e9cd 662a 	strd	r6, r6, [sp, #168]	@ 0xa8
		data.push_back((uint8_t) ((reinterpreted_input >> ((type_length - 1 - index) << 3)) & 0xFF)); // previously (8 * (type_length - 1 - index))) & 0xFF))
 80112fe:	f1cb 0c20 	rsb	ip, fp, #32
 8011302:	fa22 f10b 	lsr.w	r1, r2, fp
 8011306:	f1ab 0020 	sub.w	r0, fp, #32
	for (uint8_t index = 0; index < type_length; index++) {
 801130a:	f1ab 0b08 	sub.w	fp, fp, #8
		data.push_back((uint8_t) ((reinterpreted_input >> ((type_length - 1 - index) << 3)) & 0xFF)); // previously (8 * (type_length - 1 - index))) & 0xFF))
 801130e:	fa06 fc0c 	lsl.w	ip, r6, ip
 8011312:	9203      	str	r2, [sp, #12]
 8011314:	fa26 f000 	lsr.w	r0, r6, r0
 8011318:	ea41 010c 	orr.w	r1, r1, ip
 801131c:	4301      	orrs	r1, r0
      { emplace_back(std::move(__x)); }
 801131e:	4620      	mov	r0, r4
 8011320:	f88d 1015 	strb.w	r1, [sp, #21]
 8011324:	f10d 0115 	add.w	r1, sp, #21
 8011328:	f7fd fe9c 	bl	800f064 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
	for (uint8_t index = 0; index < type_length; index++) {
 801132c:	f11b 0f08 	cmn.w	fp, #8
 8011330:	9a03      	ldr	r2, [sp, #12]
 8011332:	d1e4      	bne.n	80112fe <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x256>
        data.insert(data.end(), single.begin(), single.end());
 8011334:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011336:	a80d      	add	r0, sp, #52	@ 0x34
 8011338:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	@ 0xa8
 801133c:	f7fe fea4 	bl	8010088 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_>
      }
 8011340:	4620      	mov	r0, r4
 8011342:	f7ef faab 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return *this;
 8011346:	e741      	b.n	80111cc <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x124>
	if (not BuildPayload(response, response_content) && response->payload.size() > 0) { // if no space available, send the data and then rebuild a new response
 8011348:	2600      	movs	r6, #0
 801134a:	e781      	b.n	8011250 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x1a8>

0801134c <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt>:
uint16_t Communication::ProcessElement(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 801134c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801134e:	461c      	mov	r4, r3
 8011350:	b08f      	sub	sp, #60	@ 0x3c
	if (not element.ack && element.command) {
 8011352:	799b      	ldrb	r3, [r3, #6]
uint16_t Communication::ProcessElement(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 8011354:	4605      	mov	r5, r0
 8011356:	4617      	mov	r7, r2
 8011358:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
	if (not element.ack && element.command) {
 801135c:	b9cb      	cbnz	r3, 8011392 <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt+0x46>
 801135e:	79e3      	ldrb	r3, [r4, #7]
		return ProcessCommand<T>(message, response, element, start_index);
 8011360:	a803      	add	r0, sp, #12
	if (not element.ack && element.command) {
 8011362:	b323      	cbz	r3, 80113ae <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt+0x62>
		return ProcessCommand<T>(message, response, element, start_index);
 8011364:	f7fd ff88 	bl	800f278 <_ZN13MessageHeaderC1ERKS_>
 8011368:	4621      	mov	r1, r4
 801136a:	a808      	add	r0, sp, #32
 801136c:	f7fd ff71 	bl	800f252 <_ZN14MessageElementC1ERKS_>
 8011370:	ab08      	add	r3, sp, #32
 8011372:	463a      	mov	r2, r7
 8011374:	a903      	add	r1, sp, #12
 8011376:	4628      	mov	r0, r5
 8011378:	9600      	str	r6, [sp, #0]
 801137a:	f7ff fe95 	bl	80110a8 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt>
		return ProcessSubscriber<T>(message, element, start_index);
 801137e:	4604      	mov	r4, r0
 8011380:	a80b      	add	r0, sp, #44	@ 0x2c
 8011382:	f7ef fa8b 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011386:	a804      	add	r0, sp, #16
 8011388:	f7ef fa88 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 801138c:	4620      	mov	r0, r4
 801138e:	b00f      	add	sp, #60	@ 0x3c
 8011390:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ProcessService<T>(message, element, start_index);
 8011392:	a803      	add	r0, sp, #12
 8011394:	f7fd ff70 	bl	800f278 <_ZN13MessageHeaderC1ERKS_>
 8011398:	4621      	mov	r1, r4
 801139a:	a808      	add	r0, sp, #32
 801139c:	f7fd ff59 	bl	800f252 <_ZN14MessageElementC1ERKS_>
 80113a0:	4633      	mov	r3, r6
 80113a2:	aa08      	add	r2, sp, #32
 80113a4:	a903      	add	r1, sp, #12
 80113a6:	4628      	mov	r0, r5
 80113a8:	f7fe fa5b 	bl	800f862 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt>
 80113ac:	e7e7      	b.n	801137e <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt+0x32>
		return ProcessSubscriber<T>(message, element, start_index);
 80113ae:	f7fd ff63 	bl	800f278 <_ZN13MessageHeaderC1ERKS_>
 80113b2:	4621      	mov	r1, r4
 80113b4:	a808      	add	r0, sp, #32
 80113b6:	f7fd ff4c 	bl	800f252 <_ZN14MessageElementC1ERKS_>
 80113ba:	4633      	mov	r3, r6
 80113bc:	aa08      	add	r2, sp, #32
 80113be:	a903      	add	r1, sp, #12
 80113c0:	4628      	mov	r0, r5
 80113c2:	f7fe f96e 	bl	800f6a2 <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt>
 80113c6:	e7da      	b.n	801137e <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt+0x32>

080113c8 <_ZN13Communication12ParseMessageE13MessageHeader>:
void Communication::ParseMessage(MessageHeader message) {
 80113c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80113ca:	b099      	sub	sp, #100	@ 0x64
	response.interface = message.interface;
 80113cc:	780b      	ldrb	r3, [r1, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80113ce:	2400      	movs	r4, #0
void Communication::ParseMessage(MessageHeader message) {
 80113d0:	4606      	mov	r6, r0
	response.interface = message.interface;
 80113d2:	f88d 3008 	strb.w	r3, [sp, #8]
void Communication::ParseMessage(MessageHeader message) {
 80113d6:	460d      	mov	r5, r1
	response.target_address = message.source_address;
 80113d8:	7c4b      	ldrb	r3, [r1, #17]
 80113da:	9411      	str	r4, [sp, #68]	@ 0x44
 80113dc:	9405      	str	r4, [sp, #20]
 80113de:	f88d 3018 	strb.w	r3, [sp, #24]
 80113e2:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
 80113e6:	e9cd 4403 	strd	r4, r4, [sp, #12]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80113ea:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 80113ee:	1a9b      	subs	r3, r3, r2
	while (index < message.payload.size()) {
 80113f0:	429c      	cmp	r4, r3
 80113f2:	d203      	bcs.n	80113fc <_ZN13Communication12ParseMessageE13MessageHeader+0x34>
		if (index + 1 >= (uint16_t) message.payload.size())
 80113f4:	1c60      	adds	r0, r4, #1
 80113f6:	b29b      	uxth	r3, r3
 80113f8:	4298      	cmp	r0, r3
 80113fa:	db0b      	blt.n	8011414 <_ZN13Communication12ParseMessageE13MessageHeader+0x4c>
	if (response.payload.size() > 0)
 80113fc:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8011400:	429a      	cmp	r2, r3
 8011402:	d159      	bne.n	80114b8 <_ZN13Communication12ParseMessageE13MessageHeader+0xf0>
      }
 8011404:	a803      	add	r0, sp, #12
 8011406:	f7ef fa49 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801140a:	a80f      	add	r0, sp, #60	@ 0x3c
 801140c:	f7ef fa46 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 8011410:	b019      	add	sp, #100	@ 0x64
 8011412:	bdf0      	pop	{r4, r5, r6, r7, pc}
		element.ack = message.payload[index] & ACK_MASK;
 8011414:	5d13      	ldrb	r3, [r2, r4]
		element.element_register.address = (message.payload[index] & ~(ACK_MASK | COMMAND_MASK | ACCESS_MASK)) << 8 | message.payload[index + 1];
 8011416:	5c12      	ldrb	r2, [r2, r0]
		bool success = FindRegister(message, &response, &element);
 8011418:	a812      	add	r0, sp, #72	@ 0x48
		element.ack = message.payload[index] & ACK_MASK;
 801141a:	09d9      	lsrs	r1, r3, #7
 801141c:	f88d 1036 	strb.w	r1, [sp, #54]	@ 0x36
		element.command = message.payload[index] & COMMAND_MASK;
 8011420:	f3c3 1180 	ubfx	r1, r3, #6, #1
 8011424:	f88d 1037 	strb.w	r1, [sp, #55]	@ 0x37
		element.access = message.payload[index] & ACCESS_MASK;
 8011428:	f3c3 1140 	ubfx	r1, r3, #5, #1
		element.element_register.address = (message.payload[index] & ~(ACK_MASK | COMMAND_MASK | ACCESS_MASK)) << 8 | message.payload[index + 1];
 801142c:	021b      	lsls	r3, r3, #8
		element.access = message.payload[index] & ACCESS_MASK;
 801142e:	f88d 1038 	strb.w	r1, [sp, #56]	@ 0x38
		bool success = FindRegister(message, &response, &element);
 8011432:	4629      	mov	r1, r5
		element.element_register.address = (message.payload[index] & ~(ACK_MASK | COMMAND_MASK | ACCESS_MASK)) << 8 | message.payload[index + 1];
 8011434:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
 8011438:	4313      	orrs	r3, r2
 801143a:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
		bool success = FindRegister(message, &response, &element);
 801143e:	f7fd ff1b 	bl	800f278 <_ZN13MessageHeaderC1ERKS_>
 8011442:	ab0c      	add	r3, sp, #48	@ 0x30
 8011444:	aa02      	add	r2, sp, #8
 8011446:	a912      	add	r1, sp, #72	@ 0x48
 8011448:	4630      	mov	r0, r6
 801144a:	f7fe fee9 	bl	8010220 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement>
 801144e:	4607      	mov	r7, r0
 8011450:	a813      	add	r0, sp, #76	@ 0x4c
 8011452:	f7ef fa23 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (not success) break;
 8011456:	2f00      	cmp	r7, #0
 8011458:	d0d0      	beq.n	80113fc <_ZN13Communication12ParseMessageE13MessageHeader+0x34>
		switch (element.element_register.type) {
 801145a:	f89d 3032 	ldrb.w	r3, [sp, #50]	@ 0x32
			index = ProcessElement<int8_t>(message, &response, element, index + 2);
 801145e:	3402      	adds	r4, #2
		switch (element.element_register.type) {
 8011460:	2b04      	cmp	r3, #4
			index = ProcessElement<int8_t>(message, &response, element, index + 2);
 8011462:	b2a4      	uxth	r4, r4
		switch (element.element_register.type) {
 8011464:	d011      	beq.n	801148a <_ZN13Communication12ParseMessageE13MessageHeader+0xc2>
 8011466:	2b08      	cmp	r3, #8
 8011468:	d1bf      	bne.n	80113ea <_ZN13Communication12ParseMessageE13MessageHeader+0x22>
			index = ProcessElement<float>(message, &response, element, index + 2);
 801146a:	4629      	mov	r1, r5
 801146c:	a807      	add	r0, sp, #28
 801146e:	f7fd ff03 	bl	800f278 <_ZN13MessageHeaderC1ERKS_>
 8011472:	a90c      	add	r1, sp, #48	@ 0x30
 8011474:	a812      	add	r0, sp, #72	@ 0x48
 8011476:	f7fd feec 	bl	800f252 <_ZN14MessageElementC1ERKS_>
 801147a:	ab12      	add	r3, sp, #72	@ 0x48
 801147c:	aa02      	add	r2, sp, #8
 801147e:	a907      	add	r1, sp, #28
 8011480:	4630      	mov	r0, r6
 8011482:	9400      	str	r4, [sp, #0]
 8011484:	f7ff ff62 	bl	801134c <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt>
 8011488:	e00e      	b.n	80114a8 <_ZN13Communication12ParseMessageE13MessageHeader+0xe0>
			index = ProcessElement<int8_t>(message, &response, element, index + 2);
 801148a:	4629      	mov	r1, r5
 801148c:	a807      	add	r0, sp, #28
 801148e:	f7fd fef3 	bl	800f278 <_ZN13MessageHeaderC1ERKS_>
 8011492:	a90c      	add	r1, sp, #48	@ 0x30
 8011494:	a812      	add	r0, sp, #72	@ 0x48
 8011496:	f7fd fedc 	bl	800f252 <_ZN14MessageElementC1ERKS_>
 801149a:	ab12      	add	r3, sp, #72	@ 0x48
 801149c:	aa02      	add	r2, sp, #8
 801149e:	a907      	add	r1, sp, #28
 80114a0:	4630      	mov	r0, r6
 80114a2:	9400      	str	r4, [sp, #0]
 80114a4:	f7ff fb8f 	bl	8010bc6 <_ZN13Communication14ProcessElementIaEEt13MessageHeaderPS1_14MessageElementt>
			index = ProcessElement<float>(message, &response, element, index + 2);
 80114a8:	4604      	mov	r4, r0
 80114aa:	a815      	add	r0, sp, #84	@ 0x54
 80114ac:	f7ef f9f6 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80114b0:	a808      	add	r0, sp, #32
 80114b2:	f7ef f9f3 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
			break;
 80114b6:	e798      	b.n	80113ea <_ZN13Communication12ParseMessageE13MessageHeader+0x22>
		Send(response);
 80114b8:	a902      	add	r1, sp, #8
 80114ba:	a812      	add	r0, sp, #72	@ 0x48
 80114bc:	f7fd fedc 	bl	800f278 <_ZN13MessageHeaderC1ERKS_>
 80114c0:	a912      	add	r1, sp, #72	@ 0x48
 80114c2:	4630      	mov	r0, r6
 80114c4:	f7fd ffc8 	bl	800f458 <_ZN13Communication4SendE13MessageHeader>
 80114c8:	a813      	add	r0, sp, #76	@ 0x4c
 80114ca:	f7ef f9e7 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80114ce:	e799      	b.n	8011404 <_ZN13Communication12ParseMessageE13MessageHeader+0x3c>

080114d0 <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb>:
uint16_t Communication::Process(uint8_t ID, std::vector<uint8_t> data, bool* success) {
 80114d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80114d4:	461c      	mov	r4, r3
 80114d6:	b08e      	sub	sp, #56	@ 0x38
	uint16_t processed_length = 0;
 80114d8:	2300      	movs	r3, #0
uint16_t Communication::Process(uint8_t ID, std::vector<uint8_t> data, bool* success) {
 80114da:	4616      	mov	r6, r2
	CommunicationProtocol* protocol = FindProtocol(ID, success);
 80114dc:	4622      	mov	r2, r4
uint16_t Communication::Process(uint8_t ID, std::vector<uint8_t> data, bool* success) {
 80114de:	4605      	mov	r5, r0
 80114e0:	4688      	mov	r8, r1
	uint16_t processed_length = 0;
 80114e2:	f8ad 300e 	strh.w	r3, [sp, #14]
	CommunicationProtocol* protocol = FindProtocol(ID, success);
 80114e6:	f7fd fa0d 	bl	800e904 <_ZN13Communication12FindProtocolEhPb>
 80114ea:	4607      	mov	r7, r0
	if (not *success)
 80114ec:	7820      	ldrb	r0, [r4, #0]
 80114ee:	2800      	cmp	r0, #0
 80114f0:	d039      	beq.n	8011566 <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x96>
		MessageHeader message = protocol->DecodeProtocol(ID, data, &processed_length, success);
 80114f2:	f10d 0a0e 	add.w	sl, sp, #14
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever); // TODO ADDED
 80114f6:	f04f 31ff 	mov.w	r1, #4294967295
 80114fa:	6828      	ldr	r0, [r5, #0]
 80114fc:	f7fa fe4c 	bl	800c198 <osSemaphoreAcquire>
	while (processed_length < data.size()) {// && processed_length < data.size()) {
 8011500:	f8bd 200e 	ldrh.w	r2, [sp, #14]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011504:	e9d6 1300 	ldrd	r1, r3, [r6]
 8011508:	1a5b      	subs	r3, r3, r1
 801150a:	429a      	cmp	r2, r3
 801150c:	d226      	bcs.n	801155c <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x8c>
		MessageHeader message = protocol->DecodeProtocol(ID, data, &processed_length, success);
 801150e:	683b      	ldr	r3, [r7, #0]
 8011510:	4631      	mov	r1, r6
 8011512:	a809      	add	r0, sp, #36	@ 0x24
 8011514:	f8d3 9000 	ldr.w	r9, [r3]
 8011518:	f7ef fa70 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 801151c:	ab09      	add	r3, sp, #36	@ 0x24
 801151e:	4642      	mov	r2, r8
 8011520:	4639      	mov	r1, r7
 8011522:	a804      	add	r0, sp, #16
 8011524:	e9cd a400 	strd	sl, r4, [sp]
 8011528:	47c8      	blx	r9
      }
 801152a:	a809      	add	r0, sp, #36	@ 0x24
 801152c:	f7ef f9b6 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (not *success) break;
 8011530:	7823      	ldrb	r3, [r4, #0]
 8011532:	b183      	cbz	r3, 8011556 <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x86>
		if (!AcceptMessage(message)) {
 8011534:	a904      	add	r1, sp, #16
 8011536:	a809      	add	r0, sp, #36	@ 0x24
 8011538:	f7fd fe9e 	bl	800f278 <_ZN13MessageHeaderC1ERKS_>
 801153c:	a909      	add	r1, sp, #36	@ 0x24
 801153e:	4628      	mov	r0, r5
 8011540:	f7fd fa04 	bl	800e94c <_ZN13Communication13AcceptMessageE13MessageHeader>
 8011544:	4681      	mov	r9, r0
 8011546:	a80a      	add	r0, sp, #40	@ 0x28
 8011548:	f7ef f9a8 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801154c:	f1b9 0f00 	cmp.w	r9, #0
 8011550:	d10c      	bne.n	801156c <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x9c>
			*success = false;
 8011552:	f884 9000 	strb.w	r9, [r4]
 8011556:	a805      	add	r0, sp, #20
 8011558:	f7ef f9a0 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	osSemaphoreRelease(CommunicationSemaphore);  // TODO ADDED
 801155c:	6828      	ldr	r0, [r5, #0]
 801155e:	f7fa fe4f 	bl	800c200 <osSemaphoreRelease>
	return processed_length;
 8011562:	f8bd 000e 	ldrh.w	r0, [sp, #14]
}
 8011566:	b00e      	add	sp, #56	@ 0x38
 8011568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ParseMessage(message);
 801156c:	a904      	add	r1, sp, #16
 801156e:	a809      	add	r0, sp, #36	@ 0x24
		message.interface = ID;
 8011570:	f88d 8010 	strb.w	r8, [sp, #16]
		ParseMessage(message);
 8011574:	f7fd fe80 	bl	800f278 <_ZN13MessageHeaderC1ERKS_>
 8011578:	a909      	add	r1, sp, #36	@ 0x24
 801157a:	4628      	mov	r0, r5
 801157c:	f7ff ff24 	bl	80113c8 <_ZN13Communication12ParseMessageE13MessageHeader>
 8011580:	a80a      	add	r0, sp, #40	@ 0x28
 8011582:	f7ef f98b 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011586:	a805      	add	r0, sp, #20
 8011588:	f7ef f988 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801158c:	e7b8      	b.n	8011500 <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x30>

0801158e <_ZN13HardwareDelayC1EP17TIM_HandleTypeDef>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 801158e:	2300      	movs	r3, #0
/**
 * @brief Class constructor
 *
 * @param input timer_: the timer pointer used to generate interrupts
 */
HardwareDelay::HardwareDelay(TIM_HandleTypeDef* timer_) {
 8011590:	b570      	push	{r4, r5, r6, lr}
 8011592:	4604      	mov	r4, r0
 8011594:	6183      	str	r3, [r0, #24]
	timer = timer_;
 8011596:	6041      	str	r1, [r0, #4]
 8011598:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801159c:	2024      	movs	r0, #36	@ 0x24
 801159e:	f004 ffb8 	bl	8016512 <_Znwj>
 80115a2:	4605      	mov	r5, r0
      ptrdiff_t __count = __last - __first;
 80115a4:	e9d4 6204 	ldrd	r6, r2, [r4, #16]
 80115a8:	1b92      	subs	r2, r2, r6
      if (__count > 0)
 80115aa:	2a00      	cmp	r2, #0
 80115ac:	dd08      	ble.n	80115c0 <_ZN13HardwareDelayC1EP17TIM_HandleTypeDef+0x32>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80115ae:	4631      	mov	r1, r6
 80115b0:	f005 f93c 	bl	801682c <memmove>
			- this->_M_impl._M_start);
 80115b4:	69a1      	ldr	r1, [r4, #24]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80115b6:	4630      	mov	r0, r6
 80115b8:	1b89      	subs	r1, r1, r6
 80115ba:	f004 ff85 	bl	80164c8 <_ZdlPvj>
      }
 80115be:	e001      	b.n	80115c4 <_ZN13HardwareDelayC1EP17TIM_HandleTypeDef+0x36>
	if (__p)
 80115c0:	2e00      	cmp	r6, #0
 80115c2:	d1f7      	bne.n	80115b4 <_ZN13HardwareDelayC1EP17TIM_HandleTypeDef+0x26>

	pending_delays.reserve(DELAY_NUMBER_OF_CHANNELS);
}
 80115c4:	4620      	mov	r0, r4
	  this->_M_impl._M_finish = __tmp + __old_size;
 80115c6:	e9c4 5504 	strd	r5, r5, [r4, #16]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80115ca:	3524      	adds	r5, #36	@ 0x24
 80115cc:	61a5      	str	r5, [r4, #24]
 80115ce:	bd70      	pop	{r4, r5, r6, pc}

080115d0 <_ZN13HardwareDelay13AssignedTimerEP17TIM_HandleTypeDef>:
 * @brief Check that the input timer is registered in the class.
 *
 * @param input timer_: the timer pointer to check
 * @return true if input timer is used by the class
 */
bool HardwareDelay::AssignedTimer(TIM_HandleTypeDef* timer_) {
 80115d0:	b570      	push	{r4, r5, r6, lr}
 80115d2:	4604      	mov	r4, r0
 80115d4:	460e      	mov	r6, r1
	osSemaphoreAcquire(DelaySemaphore, osWaitForever);
 80115d6:	6800      	ldr	r0, [r0, #0]
 80115d8:	f04f 31ff 	mov.w	r1, #4294967295
 80115dc:	f7fa fddc 	bl	800c198 <osSemaphoreAcquire>
	bool result = timer == timer_;
 80115e0:	6865      	ldr	r5, [r4, #4]
	osSemaphoreRelease(DelaySemaphore);
 80115e2:	6820      	ldr	r0, [r4, #0]
	bool result = timer == timer_;
 80115e4:	1bab      	subs	r3, r5, r6
 80115e6:	425d      	negs	r5, r3
 80115e8:	415d      	adcs	r5, r3
	osSemaphoreRelease(DelaySemaphore);
 80115ea:	f7fa fe09 	bl	800c200 <osSemaphoreRelease>
	return result;
}
 80115ee:	4628      	mov	r0, r5
 80115f0:	bd70      	pop	{r4, r5, r6, pc}

080115f2 <_ZN13HardwareDelay10StartDelayEv>:
}

/**
 * @brief Setup and start the timer based on the active delay
 */
void HardwareDelay::StartDelay(void) {
 80115f2:	4603      	mov	r3, r0
	timer->Instance->CNT = 0;
 80115f4:	6840      	ldr	r0, [r0, #4]
 80115f6:	2200      	movs	r2, #0
 80115f8:	6801      	ldr	r1, [r0, #0]
 80115fa:	624a      	str	r2, [r1, #36]	@ 0x24
	return *(this->_M_impl._M_start + __n);
 80115fc:	7b1a      	ldrb	r2, [r3, #12]
	timer->Instance->ARR = pending_delays[active_delay].delay;
 80115fe:	691b      	ldr	r3, [r3, #16]
 8011600:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8011604:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8011608:	885b      	ldrh	r3, [r3, #2]
 801160a:	62cb      	str	r3, [r1, #44]	@ 0x2c
	timer->Instance->SR = ~TIM_IT_UPDATE;
 801160c:	f06f 0301 	mvn.w	r3, #1
 8011610:	610b      	str	r3, [r1, #16]
	HAL_TIM_Base_Start_IT(timer);
 8011612:	f7f8 bbcb 	b.w	8009dac <HAL_TIM_Base_Start_IT>
	...

08011618 <_ZN13HardwareDelay14StartNextDelayEv>:
}

/**
 * @brief Active and start the next delay
 */
void HardwareDelay::StartNextDelay(void) {
 8011618:	b5f0      	push	{r4, r5, r6, r7, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801161a:	e9d0 5304 	ldrd	r5, r3, [r0, #16]
 801161e:	4a1a      	ldr	r2, [pc, #104]	@ (8011688 <_ZN13HardwareDelay14StartNextDelayEv+0x70>)
 8011620:	1b59      	subs	r1, r3, r5
	if (pending_delays.size() == 0) return;
 8011622:	42ab      	cmp	r3, r5
 8011624:	ea4f 01a1 	mov.w	r1, r1, asr #2
 8011628:	fb02 f101 	mul.w	r1, r2, r1
 801162c:	d02b      	beq.n	8011686 <_ZN13HardwareDelay14StartNextDelayEv+0x6e>

	// Find the smallest delay in memory
	uint8_t min_delay = 0;
	for (uint8_t index = 1; index < pending_delays.size(); index++) {
 801162e:	2301      	movs	r3, #1
	uint8_t min_delay = 0;
 8011630:	2400      	movs	r4, #0
	return *(this->_M_impl._M_start + __n);
 8011632:	b222      	sxth	r2, r4
	for (uint8_t index = 1; index < pending_delays.size(); index++) {
 8011634:	428b      	cmp	r3, r1
 8011636:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801163a:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 801163e:	d30a      	bcc.n	8011656 <_ZN13HardwareDelay14StartNextDelayEv+0x3e>
			min_delay = index;
	}

	// Update other delays based on the active one
	active_delay = min_delay;
	for (uint8_t index = 0; index < pending_delays.size(); index++) {
 8011640:	2600      	movs	r6, #0
 8011642:	f04f 0c0c 	mov.w	ip, #12
	active_delay = min_delay;
 8011646:	7304      	strb	r4, [r0, #12]
	for (uint8_t index = 0; index < pending_delays.size(); index++) {
 8011648:	b2f3      	uxtb	r3, r6
 801164a:	428b      	cmp	r3, r1
 801164c:	d30f      	bcc.n	801166e <_ZN13HardwareDelay14StartNextDelayEv+0x56>
		}
	}

	// Start the delay
	StartDelay();
}
 801164e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	StartDelay();
 8011652:	f7ff bfce 	b.w	80115f2 <_ZN13HardwareDelay10StartDelayEv>
 8011656:	eb03 0643 	add.w	r6, r3, r3, lsl #1
		if (pending_delays[index].delay < pending_delays[min_delay].delay)
 801165a:	8852      	ldrh	r2, [r2, #2]
 801165c:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 8011660:	8876      	ldrh	r6, [r6, #2]
			min_delay = index;
 8011662:	4296      	cmp	r6, r2
 8011664:	bf38      	it	cc
 8011666:	461c      	movcc	r4, r3
	for (uint8_t index = 1; index < pending_delays.size(); index++) {
 8011668:	3301      	adds	r3, #1
 801166a:	b2db      	uxtb	r3, r3
 801166c:	e7e1      	b.n	8011632 <_ZN13HardwareDelay14StartNextDelayEv+0x1a>
		if (index != active_delay) {
 801166e:	429c      	cmp	r4, r3
 8011670:	d007      	beq.n	8011682 <_ZN13HardwareDelay14StartNextDelayEv+0x6a>
 8011672:	fb0c 5303 	mla	r3, ip, r3, r5
			pending_delays[index].delay -= pending_delays[active_delay].delay;
 8011676:	f8b2 e002 	ldrh.w	lr, [r2, #2]
 801167a:	885f      	ldrh	r7, [r3, #2]
 801167c:	eba7 070e 	sub.w	r7, r7, lr
 8011680:	805f      	strh	r7, [r3, #2]
	for (uint8_t index = 0; index < pending_delays.size(); index++) {
 8011682:	3601      	adds	r6, #1
 8011684:	e7e0      	b.n	8011648 <_ZN13HardwareDelay14StartNextDelayEv+0x30>
}
 8011686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011688:	aaaaaaab 	.word	0xaaaaaaab

0801168c <_ZNSt6vectorI5DelaySaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>:
    vector<_Tp, _Alloc>::
 801168c:	460b      	mov	r3, r1
      : _M_current(__i) { }
 801168e:	6842      	ldr	r2, [r0, #4]
      { return __normal_iterator(_M_current + __n); }
 8011690:	310c      	adds	r1, #12
      if (__position + 1 != end())
 8011692:	428a      	cmp	r2, r1
    vector<_Tp, _Alloc>::
 8011694:	b510      	push	{r4, lr}
 8011696:	4604      	mov	r4, r0
      if (__position + 1 != end())
 8011698:	d004      	beq.n	80116a4 <_ZNSt6vectorI5DelaySaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 801169a:	4618      	mov	r0, r3
 801169c:	1a52      	subs	r2, r2, r1
 801169e:	f005 f8c5 	bl	801682c <memmove>
 80116a2:	4603      	mov	r3, r0
      --this->_M_impl._M_finish;
 80116a4:	6862      	ldr	r2, [r4, #4]
    }
 80116a6:	4618      	mov	r0, r3
      --this->_M_impl._M_finish;
 80116a8:	3a0c      	subs	r2, #12
 80116aa:	6062      	str	r2, [r4, #4]
    }
 80116ac:	bd10      	pop	{r4, pc}

080116ae <_ZN13HardwareDelay14TriggeredDelayEv>:

/**
 * @brief ISR called by the timer. Summons the callback then start the next delay
 */
void HardwareDelay::TriggeredDelay(void) {
 80116ae:	b510      	push	{r4, lr}
 80116b0:	4604      	mov	r4, r0
	HAL_TIM_Base_Stop_IT(timer);
 80116b2:	6840      	ldr	r0, [r0, #4]
 80116b4:	f7f8 fbc2 	bl	8009e3c <HAL_TIM_Base_Stop_IT>

	osSemaphoreAcquire(DelaySemaphore, osWaitForever);
 80116b8:	f04f 31ff 	mov.w	r1, #4294967295
 80116bc:	6820      	ldr	r0, [r4, #0]
 80116be:	f7fa fd6b 	bl	800c198 <osSemaphoreAcquire>
	timer->Instance->SR = ~TIM_IT_UPDATE;
 80116c2:	6863      	ldr	r3, [r4, #4]
 80116c4:	f06f 0201 	mvn.w	r2, #1
 80116c8:	6921      	ldr	r1, [r4, #16]
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	611a      	str	r2, [r3, #16]
 80116ce:	7b23      	ldrb	r3, [r4, #12]
 80116d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80116d4:	0098      	lsls	r0, r3, #2
 80116d6:	eb01 0383 	add.w	r3, r1, r3, lsl #2

	// Summon callback
	if (pending_delays[active_delay].callback != NULL) {
 80116da:	689a      	ldr	r2, [r3, #8]
 80116dc:	b112      	cbz	r2, 80116e4 <_ZN13HardwareDelay14TriggeredDelayEv+0x36>
		pending_delays[active_delay].callback(pending_delays[active_delay].context, pending_delays[active_delay].ID);
 80116de:	5c09      	ldrb	r1, [r1, r0]
 80116e0:	6858      	ldr	r0, [r3, #4]
 80116e2:	4790      	blx	r2
 80116e4:	7b21      	ldrb	r1, [r4, #12]
 80116e6:	4620      	mov	r0, r4
 80116e8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80116ec:	f850 3f10 	ldr.w	r3, [r0, #16]!
      { return _M_erase(begin() + (__position - cbegin())); }
 80116f0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80116f4:	f7ff ffca 	bl	801168c <_ZNSt6vectorI5DelaySaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>

	// Remove delay
	pending_delays.erase(pending_delays.begin() + active_delay);

	// Stat next delay
	StartNextDelay();
 80116f8:	4620      	mov	r0, r4
 80116fa:	f7ff ff8d 	bl	8011618 <_ZN13HardwareDelay14StartNextDelayEv>
	osSemaphoreRelease(DelaySemaphore);
 80116fe:	6820      	ldr	r0, [r4, #0]
}
 8011700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSemaphoreRelease(DelaySemaphore);
 8011704:	f7fa bd7c 	b.w	800c200 <osSemaphoreRelease>

08011708 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8011708:	2800      	cmp	r0, #0
      _M_allocate(size_t __n)
 801170a:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801170c:	d006      	beq.n	801171c <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0x14>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 801170e:	da01      	bge.n	8011714 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0xc>
	    std::__throw_bad_alloc();
 8011710:	f004 ffae 	bl	8016670 <_ZSt17__throw_bad_allocv>
      }
 8011714:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8011718:	f004 befb 	b.w	8016512 <_Znwj>
 801171c:	bd08      	pop	{r3, pc}
	...

08011720 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>:
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8011720:	491e      	ldr	r1, [pc, #120]	@ (801179c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 8011722:	b510      	push	{r4, lr}
 8011724:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8011726:	4608      	mov	r0, r1
 8011728:	f004 ff8a 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 801172c:	bb40      	cbnz	r0, 8011780 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 801172e:	491c      	ldr	r1, [pc, #112]	@ (80117a0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x80>)
 8011730:	481a      	ldr	r0, [pc, #104]	@ (801179c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8011732:	f004 ff85 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 8011736:	bb28      	cbnz	r0, 8011784 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8011738:	491a      	ldr	r1, [pc, #104]	@ (80117a4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x84>)
 801173a:	4818      	ldr	r0, [pc, #96]	@ (801179c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 801173c:	f004 ff80 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 8011740:	bb10      	cbnz	r0, 8011788 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8011742:	4919      	ldr	r1, [pc, #100]	@ (80117a8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x88>)
 8011744:	4815      	ldr	r0, [pc, #84]	@ (801179c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8011746:	f004 ff7b 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 801174a:	b9f8      	cbnz	r0, 801178c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 801174c:	4917      	ldr	r1, [pc, #92]	@ (80117ac <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x8c>)
 801174e:	4813      	ldr	r0, [pc, #76]	@ (801179c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8011750:	f004 ff76 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 8011754:	b9e0      	cbnz	r0, 8011790 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8011756:	4916      	ldr	r1, [pc, #88]	@ (80117b0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x90>)
 8011758:	4810      	ldr	r0, [pc, #64]	@ (801179c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 801175a:	f004 ff71 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 801175e:	b9c8      	cbnz	r0, 8011794 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8011760:	4914      	ldr	r1, [pc, #80]	@ (80117b4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x94>)
 8011762:	480e      	ldr	r0, [pc, #56]	@ (801179c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8011764:	f004 ff6c 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 8011768:	b9b0      	cbnz	r0, 8011798 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 801176a:	4913      	ldr	r1, [pc, #76]	@ (80117b8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x98>)
 801176c:	480b      	ldr	r0, [pc, #44]	@ (801179c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 801176e:	f004 ff67 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 8011772:	2800      	cmp	r0, #0
 8011774:	bf14      	ite	ne
 8011776:	2309      	movne	r3, #9
 8011778:	2300      	moveq	r3, #0
 801177a:	7020      	strb	r0, [r4, #0]
}
 801177c:	4618      	mov	r0, r3
 801177e:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8011780:	2300      	movs	r3, #0
 8011782:	e7fa      	b.n	801177a <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8011784:	2301      	movs	r3, #1
 8011786:	e7f8      	b.n	801177a <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8011788:	2302      	movs	r3, #2
 801178a:	e7f6      	b.n	801177a <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 801178c:	2303      	movs	r3, #3
 801178e:	e7f4      	b.n	801177a <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8011790:	2304      	movs	r3, #4
 8011792:	e7f2      	b.n	801177a <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8011794:	2306      	movs	r3, #6
 8011796:	e7f0      	b.n	801177a <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8011798:	2308      	movs	r3, #8
 801179a:	e7ee      	b.n	801177a <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
 801179c:	08016f7c 	.word	0x08016f7c
 80117a0:	08016f74 	.word	0x08016f74
 80117a4:	08016f64 	.word	0x08016f64
 80117a8:	08016f5c 	.word	0x08016f5c
 80117ac:	08016f84 	.word	0x08016f84
 80117b0:	08016f6c 	.word	0x08016f6c
 80117b4:	08016f54 	.word	0x08016f54
 80117b8:	08016f4c 	.word	0x08016f4c

080117bc <_ZN4LEDSC1Ev>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 80117bc:	2200      	movs	r2, #0
 80117be:	e9c0 2202 	strd	r2, r2, [r0, #8]
 80117c2:	e9c0 2204 	strd	r2, r2, [r0, #16]
 80117c6:	e9c0 2206 	strd	r2, r2, [r0, #24]
 80117ca:	e9c0 2208 	strd	r2, r2, [r0, #32]
 80117ce:	e9c0 220a 	strd	r2, r2, [r0, #40]	@ 0x28
 80117d2:	e9c0 220c 	strd	r2, r2, [r0, #48]	@ 0x30
/**
 * @brief Class constructor
 */
LEDS::LEDS()
{
}
 80117d6:	4770      	bx	lr

080117d8 <_ZN4LEDS4InitEP9Registers>:
/**
 * @brief Initialize the class with references to other classes. Set default values.
 *
 * @param input registers_: the Registers instance
 */
void LEDS::Init(Registers* registers_) {
 80117d8:	b510      	push	{r4, lr}
	registers = registers_;
 80117da:	6001      	str	r1, [r0, #0]

	LEDsSemaphore = osSemaphoreNew(1,1,NULL);
 80117dc:	2101      	movs	r1, #1
void LEDS::Init(Registers* registers_) {
 80117de:	4604      	mov	r4, r0
	LEDsSemaphore = osSemaphoreNew(1,1,NULL);
 80117e0:	2200      	movs	r2, #0
 80117e2:	4608      	mov	r0, r1
 80117e4:	f7fa fc7c 	bl	800c0e0 <osSemaphoreNew>
 80117e8:	6060      	str	r0, [r4, #4]
	osSemaphoreRelease(LEDsSemaphore);
}
 80117ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSemaphoreRelease(LEDsSemaphore);
 80117ee:	f7fa bd07 	b.w	800c200 <osSemaphoreRelease>

080117f2 <_ZN4LEDS4SpinEv>:
}

/**
 * @brief Function used to process the blinking patterns of SMD LEDs. Called repeatedly in a freeRTOS task
 */
void LEDS::Spin(void) {
 80117f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117f4:	4605      	mov	r5, r0
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 80117f6:	f04f 31ff 	mov.w	r1, #4294967295
 80117fa:	6840      	ldr	r0, [r0, #4]
            }
            HAL_GPIO_WritePin(led.gpio.port, led.gpio.pin, (GPIO_PinState) state);

            led.counter++;
            if (led.counter >= led.T) {
                led.counter = 0;
 80117fc:	2700      	movs	r7, #0
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 80117fe:	f7fa fccb 	bl	800c198 <osSemaphoreAcquire>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8011802:	e9d5 4602 	ldrd	r4, r6, [r5, #8]
    for (LED & led : LEDs) {
 8011806:	42a6      	cmp	r6, r4
 8011808:	d107      	bne.n	801181a <_ZN4LEDS4SpinEv+0x28>
                if (not led.repeat)
                    led.blink = false;
            }
        }
    }
    osSemaphoreRelease(LEDsSemaphore);
 801180a:	6868      	ldr	r0, [r5, #4]
 801180c:	f7fa fcf8 	bl	800c200 <osSemaphoreRelease>

    osDelay(DEFAULT_LEDS_PERIOD);
 8011810:	2064      	movs	r0, #100	@ 0x64
}
 8011812:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    osDelay(DEFAULT_LEDS_PERIOD);
 8011816:	f7fa bc55 	b.w	800c0c4 <osDelay>
        if (led.blink) {
 801181a:	7b22      	ldrb	r2, [r4, #12]
 801181c:	b1a2      	cbz	r2, 8011848 <_ZN4LEDS4SpinEv+0x56>
 801181e:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
            for(uint8_t t : led.timings) {
 8011822:	4299      	cmp	r1, r3
 8011824:	d005      	beq.n	8011832 <_ZN4LEDS4SpinEv+0x40>
 8011826:	f813 0b01 	ldrb.w	r0, [r3], #1
                if (led.counter < t)
 801182a:	f894 c00e 	ldrb.w	ip, [r4, #14]
 801182e:	4584      	cmp	ip, r0
 8011830:	d20c      	bcs.n	801184c <_ZN4LEDS4SpinEv+0x5a>
            HAL_GPIO_WritePin(led.gpio.port, led.gpio.pin, (GPIO_PinState) state);
 8011832:	8921      	ldrh	r1, [r4, #8]
 8011834:	6860      	ldr	r0, [r4, #4]
 8011836:	f7f4 fcdf 	bl	80061f8 <HAL_GPIO_WritePin>
            led.counter++;
 801183a:	7ba3      	ldrb	r3, [r4, #14]
            if (led.counter >= led.T) {
 801183c:	7f22      	ldrb	r2, [r4, #28]
            led.counter++;
 801183e:	3301      	adds	r3, #1
 8011840:	b2db      	uxtb	r3, r3
            if (led.counter >= led.T) {
 8011842:	429a      	cmp	r2, r3
            led.counter++;
 8011844:	73a3      	strb	r3, [r4, #14]
            if (led.counter >= led.T) {
 8011846:	d904      	bls.n	8011852 <_ZN4LEDS4SpinEv+0x60>
      operator++() _GLIBCXX_NOEXCEPT
 8011848:	3420      	adds	r4, #32
	return *this;
 801184a:	e7dc      	b.n	8011806 <_ZN4LEDS4SpinEv+0x14>
                state =  not state;
 801184c:	f082 0201 	eor.w	r2, r2, #1
 8011850:	e7e7      	b.n	8011822 <_ZN4LEDS4SpinEv+0x30>
                if (not led.repeat)
 8011852:	7b63      	ldrb	r3, [r4, #13]
                led.counter = 0;
 8011854:	73a7      	strb	r7, [r4, #14]
                if (not led.repeat)
 8011856:	2b00      	cmp	r3, #0
 8011858:	d1f6      	bne.n	8011848 <_ZN4LEDS4SpinEv+0x56>
                    led.blink = false;
 801185a:	7323      	strb	r3, [r4, #12]
 801185c:	e7f4      	b.n	8011848 <_ZN4LEDS4SpinEv+0x56>

0801185e <_ZN4LEDS6GetLEDEhPb>:
 *
 * @param input ID: LED ID
 * @param output success: true whether successful
 * @return the LED index
 */
uint8_t LEDS::GetLED(uint8_t ID, bool* success) {
 801185e:	b570      	push	{r4, r5, r6, lr}
 8011860:	e9d0 3402 	ldrd	r3, r4, [r0, #8]
    uint8_t index = 0;
    for (LED & led : LEDs) {
 8011864:	2000      	movs	r0, #0
 8011866:	429c      	cmp	r4, r3
 8011868:	461d      	mov	r5, r3
 801186a:	d102      	bne.n	8011872 <_ZN4LEDS6GetLEDEhPb+0x14>
 801186c:	2300      	movs	r3, #0
            return index;
        }
        index++;
    }
    *success = false;
    return 0;
 801186e:	4618      	mov	r0, r3
 8011870:	e006      	b.n	8011880 <_ZN4LEDS6GetLEDEhPb+0x22>
        if (led.ID == ID) {
 8011872:	782d      	ldrb	r5, [r5, #0]
 8011874:	1c46      	adds	r6, r0, #1
 8011876:	3320      	adds	r3, #32
 8011878:	428d      	cmp	r5, r1
 801187a:	d103      	bne.n	8011884 <_ZN4LEDS6GetLEDEhPb+0x26>
 801187c:	b2c0      	uxtb	r0, r0
 801187e:	2301      	movs	r3, #1
            *success = true;
 8011880:	7013      	strb	r3, [r2, #0]
}
 8011882:	bd70      	pop	{r4, r5, r6, pc}
 8011884:	4630      	mov	r0, r6
 8011886:	e7ee      	b.n	8011866 <_ZN4LEDS6GetLEDEhPb+0x8>

08011888 <_ZN4LEDS6SetLEDEh13GPIO_PinState>:
bool LEDS::SetLED(uint8_t ID, GPIO_PinState state) {
 8011888:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801188a:	4616      	mov	r6, r2
    uint8_t index = GetLED(ID, &success);
 801188c:	f10d 0207 	add.w	r2, sp, #7
bool LEDS::SetLED(uint8_t ID, GPIO_PinState state) {
 8011890:	4604      	mov	r4, r0
    uint8_t index = GetLED(ID, &success);
 8011892:	f7ff ffe4 	bl	801185e <_ZN4LEDS6GetLEDEhPb>
    if (success) {
 8011896:	f89d 7007 	ldrb.w	r7, [sp, #7]
    uint8_t index = GetLED(ID, &success);
 801189a:	4605      	mov	r5, r0
    if (success) {
 801189c:	b17f      	cbz	r7, 80118be <_ZN4LEDS6SetLEDEh13GPIO_PinState+0x36>
    	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 801189e:	f04f 31ff 	mov.w	r1, #4294967295
 80118a2:	6860      	ldr	r0, [r4, #4]
 80118a4:	f7fa fc78 	bl	800c198 <osSemaphoreAcquire>
	return *(this->_M_impl._M_start + __n);
 80118a8:	68a3      	ldr	r3, [r4, #8]
 80118aa:	b22d      	sxth	r5, r5
        LEDs[index].blink = false;
 80118ac:	2200      	movs	r2, #0
 80118ae:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 80118b2:	731a      	strb	r2, [r3, #12]
        HAL_GPIO_WritePin(LEDs[index].gpio.port, LEDs[index].gpio.pin, state);
 80118b4:	4632      	mov	r2, r6
 80118b6:	8919      	ldrh	r1, [r3, #8]
 80118b8:	6858      	ldr	r0, [r3, #4]
 80118ba:	f7f4 fc9d 	bl	80061f8 <HAL_GPIO_WritePin>
    osSemaphoreRelease(LEDsSemaphore);
 80118be:	6860      	ldr	r0, [r4, #4]
 80118c0:	f7fa fc9e 	bl	800c200 <osSemaphoreRelease>
}
 80118c4:	4638      	mov	r0, r7
 80118c6:	b003      	add	sp, #12
 80118c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080118ca <_ZN4LEDS5BlinkEh>:
bool LEDS::Blink(uint8_t ID) {
 80118ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80118cc:	460d      	mov	r5, r1
 80118ce:	4604      	mov	r4, r0
    osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 80118d0:	f04f 31ff 	mov.w	r1, #4294967295
 80118d4:	6840      	ldr	r0, [r0, #4]
 80118d6:	f7fa fc5f 	bl	800c198 <osSemaphoreAcquire>
    uint8_t index = GetLED(ID, &success);
 80118da:	4629      	mov	r1, r5
 80118dc:	f10d 0207 	add.w	r2, sp, #7
 80118e0:	4620      	mov	r0, r4
 80118e2:	f7ff ffbc 	bl	801185e <_ZN4LEDS6GetLEDEhPb>
    if (success) {
 80118e6:	f89d 5007 	ldrb.w	r5, [sp, #7]
 80118ea:	b145      	cbz	r5, 80118fe <_ZN4LEDS5BlinkEh+0x34>
 80118ec:	68a3      	ldr	r3, [r4, #8]
 80118ee:	b200      	sxth	r0, r0
        LEDs[index].blink = true;
 80118f0:	f240 1201 	movw	r2, #257	@ 0x101
 80118f4:	eb03 1340 	add.w	r3, r3, r0, lsl #5
 80118f8:	819a      	strh	r2, [r3, #12]
        LEDs[index].counter = 0;
 80118fa:	2200      	movs	r2, #0
 80118fc:	739a      	strb	r2, [r3, #14]
    osSemaphoreRelease(LEDsSemaphore);
 80118fe:	6860      	ldr	r0, [r4, #4]
 8011900:	f7fa fc7e 	bl	800c200 <osSemaphoreRelease>
}
 8011904:	4628      	mov	r0, r5
 8011906:	b003      	add	sp, #12
 8011908:	bd30      	pop	{r4, r5, pc}

0801190a <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE1_4_FUNES0_tS1_t>:
			return self->Blink(*input);
 801190a:	7811      	ldrb	r1, [r2, #0]
 801190c:	f7ff bfdd 	b.w	80118ca <_ZN4LEDS5BlinkEh>

08011910 <_ZN4LEDS9BlinkOnceEh>:
bool LEDS::BlinkOnce(uint8_t ID) {
 8011910:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011912:	460d      	mov	r5, r1
 8011914:	4604      	mov	r4, r0
    osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8011916:	f04f 31ff 	mov.w	r1, #4294967295
 801191a:	6840      	ldr	r0, [r0, #4]
 801191c:	f7fa fc3c 	bl	800c198 <osSemaphoreAcquire>
    uint8_t index = GetLED(ID, &success);
 8011920:	4629      	mov	r1, r5
 8011922:	f10d 0207 	add.w	r2, sp, #7
 8011926:	4620      	mov	r0, r4
 8011928:	f7ff ff99 	bl	801185e <_ZN4LEDS6GetLEDEhPb>
    if (success) {
 801192c:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8011930:	b13d      	cbz	r5, 8011942 <_ZN4LEDS9BlinkOnceEh+0x32>
 8011932:	68a3      	ldr	r3, [r4, #8]
 8011934:	b200      	sxth	r0, r0
        LEDs[index].blink = true;
 8011936:	2201      	movs	r2, #1
 8011938:	eb03 1340 	add.w	r3, r3, r0, lsl #5
 801193c:	819a      	strh	r2, [r3, #12]
        LEDs[index].counter = 0;
 801193e:	2200      	movs	r2, #0
 8011940:	739a      	strb	r2, [r3, #14]
    osSemaphoreRelease(LEDsSemaphore);
 8011942:	6860      	ldr	r0, [r4, #4]
 8011944:	f7fa fc5c 	bl	800c200 <osSemaphoreRelease>
}
 8011948:	4628      	mov	r0, r5
 801194a:	b003      	add	sp, #12
 801194c:	bd30      	pop	{r4, r5, pc}

0801194e <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE2_4_FUNES0_tS1_t>:
			return self->BlinkOnce(*input);
 801194e:	7811      	ldrb	r1, [r2, #0]
 8011950:	f7ff bfde 	b.w	8011910 <_ZN4LEDS9BlinkOnceEh>

08011954 <_ZN4LEDS9GetRGBLEDEhPb>:
 *
 * @param input ID: LED ID
 * @param output success: true whether successful
 * @return the LED index
 */
uint8_t LEDS::GetRGBLED(uint8_t ID, bool* success) {
 8011954:	b570      	push	{r4, r5, r6, lr}
 8011956:	e9d0 3405 	ldrd	r3, r4, [r0, #20]
    uint8_t index = 0;
    for (RGBLED & led : RGB_LEDs) {
 801195a:	2000      	movs	r0, #0
 801195c:	429c      	cmp	r4, r3
 801195e:	461d      	mov	r5, r3
 8011960:	d102      	bne.n	8011968 <_ZN4LEDS9GetRGBLEDEhPb+0x14>
 8011962:	2300      	movs	r3, #0
            return index;
        }
        index++;
    }
    *success = false;
    return 0;
 8011964:	4618      	mov	r0, r3
 8011966:	e006      	b.n	8011976 <_ZN4LEDS9GetRGBLEDEhPb+0x22>
        if (led.ID == ID) {
 8011968:	782d      	ldrb	r5, [r5, #0]
 801196a:	1c46      	adds	r6, r0, #1
 801196c:	3310      	adds	r3, #16
 801196e:	428d      	cmp	r5, r1
 8011970:	d103      	bne.n	801197a <_ZN4LEDS9GetRGBLEDEhPb+0x26>
 8011972:	b2c0      	uxtb	r0, r0
 8011974:	2301      	movs	r3, #1
            *success = true;
 8011976:	7013      	strb	r3, [r2, #0]
}
 8011978:	bd70      	pop	{r4, r5, r6, pc}
 801197a:	4630      	mov	r0, r6
 801197c:	e7ee      	b.n	801195c <_ZN4LEDS9GetRGBLEDEhPb+0x8>

0801197e <_ZN4LEDS6SetRGBEhhhh>:
bool LEDS::SetRGB(uint8_t ID, uint8_t R, uint8_t G, uint8_t B) {
 801197e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011982:	4617      	mov	r7, r2
    uint8_t index = GetRGBLED(ID, &success);
 8011984:	f10d 0207 	add.w	r2, sp, #7
bool LEDS::SetRGB(uint8_t ID, uint8_t R, uint8_t G, uint8_t B) {
 8011988:	4604      	mov	r4, r0
 801198a:	461e      	mov	r6, r3
    uint8_t index = GetRGBLED(ID, &success);
 801198c:	f7ff ffe2 	bl	8011954 <_ZN4LEDS9GetRGBLEDEhPb>
    if (success) {
 8011990:	f89d 8007 	ldrb.w	r8, [sp, #7]
    uint8_t index = GetRGBLED(ID, &success);
 8011994:	4605      	mov	r5, r0
    if (success) {
 8011996:	f1b8 0f00 	cmp.w	r8, #0
 801199a:	d010      	beq.n	80119be <_ZN4LEDS6SetRGBEhhhh+0x40>
    	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 801199c:	f04f 31ff 	mov.w	r1, #4294967295
 80119a0:	6860      	ldr	r0, [r4, #4]
 80119a2:	f7fa fbf9 	bl	800c198 <osSemaphoreAcquire>
 80119a6:	6961      	ldr	r1, [r4, #20]
 80119a8:	b22d      	sxth	r5, r5
 80119aa:	eb01 1105 	add.w	r1, r1, r5, lsl #4
        RGBLED led = RGB_LEDs[index];
 80119ae:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
        *led.pulse_red = R;
 80119b2:	6849      	ldr	r1, [r1, #4]
 80119b4:	600f      	str	r7, [r1, #0]
        *led.pulse_green = G;
 80119b6:	6016      	str	r6, [r2, #0]
        *led.pulse_blue = B;
 80119b8:	f89d 2020 	ldrb.w	r2, [sp, #32]
 80119bc:	601a      	str	r2, [r3, #0]
    osSemaphoreRelease(LEDsSemaphore);
 80119be:	6860      	ldr	r0, [r4, #4]
 80119c0:	f7fa fc1e 	bl	800c200 <osSemaphoreRelease>
}
 80119c4:	4640      	mov	r0, r8
 80119c6:	b002      	add	sp, #8
 80119c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080119cc <_ZN4LEDS9GetI2CLEDEhPb>:
 *
 * @param input ID: LED ID
 * @param output success: true whether successful
 * @return the LED index
 */
uint8_t LEDS::GetI2CLED(uint8_t ID, bool* success) {
 80119cc:	b570      	push	{r4, r5, r6, lr}
 80119ce:	e9d0 3408 	ldrd	r3, r4, [r0, #32]
    uint8_t index = 0;
    for (I2CLED & led : I2C_LEDs) {
 80119d2:	2000      	movs	r0, #0
 80119d4:	429c      	cmp	r4, r3
 80119d6:	461d      	mov	r5, r3
 80119d8:	d102      	bne.n	80119e0 <_ZN4LEDS9GetI2CLEDEhPb+0x14>
 80119da:	2300      	movs	r3, #0
            return index;
        }
        index++;
    }
    *success = false;
    return 0;
 80119dc:	4618      	mov	r0, r3
 80119de:	e006      	b.n	80119ee <_ZN4LEDS9GetI2CLEDEhPb+0x22>
        if (led.ID == ID) {
 80119e0:	782d      	ldrb	r5, [r5, #0]
 80119e2:	1c46      	adds	r6, r0, #1
 80119e4:	3310      	adds	r3, #16
 80119e6:	428d      	cmp	r5, r1
 80119e8:	d103      	bne.n	80119f2 <_ZN4LEDS9GetI2CLEDEhPb+0x26>
 80119ea:	b2c0      	uxtb	r0, r0
 80119ec:	2301      	movs	r3, #1
            *success = true;
 80119ee:	7013      	strb	r3, [r2, #0]
}
 80119f0:	bd70      	pop	{r4, r5, r6, pc}
 80119f2:	4630      	mov	r0, r6
 80119f4:	e7ee      	b.n	80119d4 <_ZN4LEDS9GetI2CLEDEhPb+0x8>

080119f6 <_ZN4LEDS12GetI2CRGBLEDEhPb>:
 *
 * @param input ID: LED ID
 * @param output success: true whether successful
 * @return the LED index
 */
uint8_t LEDS::GetI2CRGBLED(uint8_t ID, bool* success) {
 80119f6:	b570      	push	{r4, r5, r6, lr}
 80119f8:	e9d0 340b 	ldrd	r3, r4, [r0, #44]	@ 0x2c
    uint8_t index = 0;
    for (I2CRGBLED & led : I2C_RGB_LEDs) {
 80119fc:	2000      	movs	r0, #0
 80119fe:	429c      	cmp	r4, r3
 8011a00:	461d      	mov	r5, r3
 8011a02:	d102      	bne.n	8011a0a <_ZN4LEDS12GetI2CRGBLEDEhPb+0x14>
 8011a04:	2300      	movs	r3, #0
            return index;
        }
        index++;
    }
    *success = false;
    return 0;
 8011a06:	4618      	mov	r0, r3
 8011a08:	e006      	b.n	8011a18 <_ZN4LEDS12GetI2CRGBLEDEhPb+0x22>
        if (led.ID == ID) {
 8011a0a:	782d      	ldrb	r5, [r5, #0]
 8011a0c:	1c46      	adds	r6, r0, #1
 8011a0e:	3314      	adds	r3, #20
 8011a10:	428d      	cmp	r5, r1
 8011a12:	d103      	bne.n	8011a1c <_ZN4LEDS12GetI2CRGBLEDEhPb+0x26>
 8011a14:	b2c0      	uxtb	r0, r0
 8011a16:	2301      	movs	r3, #1
            *success = true;
 8011a18:	7013      	strb	r3, [r2, #0]
}
 8011a1a:	bd70      	pop	{r4, r5, r6, pc}
 8011a1c:	4630      	mov	r0, r6
 8011a1e:	e7ee      	b.n	80119fe <_ZN4LEDS12GetI2CRGBLEDEhPb+0x8>

08011a20 <_ZN4LEDS15ConfigureI2CLEDEhtPhtm>:
HAL_StatusTypeDef LEDS::ConfigureI2CLED(uint8_t ID, uint16_t memory_address, uint8_t* data, uint16_t size, uint32_t timeout) {
 8011a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a24:	4604      	mov	r4, r0
 8011a26:	b089      	sub	sp, #36	@ 0x24
 8011a28:	4688      	mov	r8, r1
 8011a2a:	461f      	mov	r7, r3
 8011a2c:	9205      	str	r2, [sp, #20]
 8011a2e:	f8bd b048 	ldrh.w	fp, [sp, #72]	@ 0x48
	uint32_t end_timestamp = HAL_GetTick() + timeout;
 8011a32:	f7f1 fb55 	bl	80030e0 <HAL_GetTick>
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8011a36:	f04f 31ff 	mov.w	r1, #4294967295
	uint32_t end_timestamp = HAL_GetTick() + timeout;
 8011a3a:	4605      	mov	r5, r0
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8011a3c:	6860      	ldr	r0, [r4, #4]
 8011a3e:	f7fa fbab 	bl	800c198 <osSemaphoreAcquire>
	index = GetI2CRGBLED(ID, &success);
 8011a42:	f10d 021f 	add.w	r2, sp, #31
 8011a46:	4641      	mov	r1, r8
 8011a48:	4620      	mov	r0, r4
 8011a4a:	f7ff ffd4 	bl	80119f6 <_ZN4LEDS12GetI2CRGBLEDEhPb>
	if (success) {
 8011a4e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8011a52:	b323      	cbz	r3, 8011a9e <_ZN4LEDS15ConfigureI2CLEDEhtPhtm+0x7e>
 8011a54:	b200      	sxth	r0, r0
 8011a56:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8011a58:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8011a5c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
		present = led->present;
 8011a60:	785e      	ldrb	r6, [r3, #1]
	osSemaphoreRelease(LEDsSemaphore);
 8011a62:	6860      	ldr	r0, [r4, #4]
		interface = led->interface;
 8011a64:	f8d3 8004 	ldr.w	r8, [r3, #4]
		device_address = led->device_address;
 8011a68:	f8b3 9008 	ldrh.w	r9, [r3, #8]
		memory_address_size = led->memory_address_size;
 8011a6c:	f8b3 a00a 	ldrh.w	sl, [r3, #10]
	osSemaphoreRelease(LEDsSemaphore);
 8011a70:	f7fa fbc6 	bl	800c200 <osSemaphoreRelease>
	if (present) {
 8011a74:	b18e      	cbz	r6, 8011a9a <_ZN4LEDS15ConfigureI2CLEDEhtPhtm+0x7a>
	uint32_t end_timestamp = HAL_GetTick() + timeout;
 8011a76:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011a78:	441d      	add	r5, r3
			status = HAL_I2C_Mem_Write(interface, device_address, memory_address, memory_address_size, data, size, timeout);
 8011a7a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011a7c:	4649      	mov	r1, r9
 8011a7e:	9a05      	ldr	r2, [sp, #20]
 8011a80:	4640      	mov	r0, r8
 8011a82:	9700      	str	r7, [sp, #0]
 8011a84:	e9cd b301 	strd	fp, r3, [sp, #4]
 8011a88:	4653      	mov	r3, sl
 8011a8a:	f7f4 fd9d 	bl	80065c8 <HAL_I2C_Mem_Write>
		} while ((status == HAL_BUSY) && (HAL_GetTick() < end_timestamp)); // try until the bus is free
 8011a8e:	2802      	cmp	r0, #2
 8011a90:	d10f      	bne.n	8011ab2 <_ZN4LEDS15ConfigureI2CLEDEhtPhtm+0x92>
 8011a92:	f7f1 fb25 	bl	80030e0 <HAL_GetTick>
 8011a96:	42a8      	cmp	r0, r5
 8011a98:	d3ef      	bcc.n	8011a7a <_ZN4LEDS15ConfigureI2CLEDEhtPhtm+0x5a>
	HAL_StatusTypeDef status = HAL_BUSY;
 8011a9a:	2002      	movs	r0, #2
 8011a9c:	e009      	b.n	8011ab2 <_ZN4LEDS15ConfigureI2CLEDEhtPhtm+0x92>
		index = GetI2CLED(ID, &success);
 8011a9e:	4620      	mov	r0, r4
 8011aa0:	f7ff ff94 	bl	80119cc <_ZN4LEDS9GetI2CLEDEhPb>
		if (!success) {
 8011aa4:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8011aa8:	b933      	cbnz	r3, 8011ab8 <_ZN4LEDS15ConfigureI2CLEDEhtPhtm+0x98>
			osSemaphoreRelease(LEDsSemaphore);
 8011aaa:	6860      	ldr	r0, [r4, #4]
 8011aac:	f7fa fba8 	bl	800c200 <osSemaphoreRelease>
			return HAL_ERROR;
 8011ab0:	2001      	movs	r0, #1
}
 8011ab2:	b009      	add	sp, #36	@ 0x24
 8011ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ab8:	b200      	sxth	r0, r0
 8011aba:	6a23      	ldr	r3, [r4, #32]
 8011abc:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8011ac0:	e7ce      	b.n	8011a60 <_ZN4LEDS15ConfigureI2CLEDEhtPhtm+0x40>

08011ac2 <_ZN4LEDS15ConfigureI2CLEDEhthm>:
HAL_StatusTypeDef LEDS::ConfigureI2CLED(uint8_t ID, uint16_t memory_address, uint8_t data, uint32_t timeout) {
 8011ac2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buffer = data;
 8011ac4:	f88d 300f 	strb.w	r3, [sp, #15]
	return ConfigureI2CLED(ID, memory_address, &buffer, 1, timeout);
 8011ac8:	9b06      	ldr	r3, [sp, #24]
 8011aca:	9301      	str	r3, [sp, #4]
 8011acc:	2301      	movs	r3, #1
 8011ace:	9300      	str	r3, [sp, #0]
 8011ad0:	f10d 030f 	add.w	r3, sp, #15
 8011ad4:	f7ff ffa4 	bl	8011a20 <_ZN4LEDS15ConfigureI2CLEDEhtPhtm>
}
 8011ad8:	b005      	add	sp, #20
 8011ada:	f85d fb04 	ldr.w	pc, [sp], #4

08011ade <_ZN4LEDS6SetLEDEhhm>:
HAL_StatusTypeDef LEDS::SetLED(uint8_t ID, uint8_t value, uint32_t timeout) {
 8011ade:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8011ae2:	4604      	mov	r4, r0
 8011ae4:	460d      	mov	r5, r1
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8011ae6:	6840      	ldr	r0, [r0, #4]
 8011ae8:	f04f 31ff 	mov.w	r1, #4294967295
HAL_StatusTypeDef LEDS::SetLED(uint8_t ID, uint8_t value, uint32_t timeout) {
 8011aec:	461f      	mov	r7, r3
 8011aee:	4616      	mov	r6, r2
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8011af0:	f7fa fb52 	bl	800c198 <osSemaphoreAcquire>
	uint8_t index = GetI2CLED(ID, &success);
 8011af4:	f10d 020f 	add.w	r2, sp, #15
 8011af8:	4629      	mov	r1, r5
 8011afa:	4620      	mov	r0, r4
 8011afc:	f7ff ff66 	bl	80119cc <_ZN4LEDS9GetI2CLEDEhPb>
	if (!success) {
 8011b00:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8011b04:	b933      	cbnz	r3, 8011b14 <_ZN4LEDS6SetLEDEhhm+0x36>
		osSemaphoreRelease(LEDsSemaphore);
 8011b06:	6860      	ldr	r0, [r4, #4]
 8011b08:	f7fa fb7a 	bl	800c200 <osSemaphoreRelease>
		return HAL_ERROR;
 8011b0c:	2001      	movs	r0, #1
}
 8011b0e:	b004      	add	sp, #16
 8011b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b14:	6a23      	ldr	r3, [r4, #32]
 8011b16:	b200      	sxth	r0, r0
 8011b18:	eb03 1800 	add.w	r8, r3, r0, lsl #4
	osSemaphoreRelease(LEDsSemaphore);
 8011b1c:	6860      	ldr	r0, [r4, #4]
 8011b1e:	f7fa fb6f 	bl	800c200 <osSemaphoreRelease>
	return ConfigureI2CLED(ID, led->light_address, value, timeout);
 8011b22:	4633      	mov	r3, r6
 8011b24:	f8b8 200e 	ldrh.w	r2, [r8, #14]
 8011b28:	4629      	mov	r1, r5
 8011b2a:	4620      	mov	r0, r4
 8011b2c:	9700      	str	r7, [sp, #0]
 8011b2e:	f7ff ffc8 	bl	8011ac2 <_ZN4LEDS15ConfigureI2CLEDEhthm>
 8011b32:	e7ec      	b.n	8011b0e <_ZN4LEDS6SetLEDEhhm+0x30>

08011b34 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 8011b34:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8011b36:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011b38:	4604      	mov	r4, r0
 8011b3a:	4615      	mov	r5, r2
			if (length != 2) return false;
 8011b3c:	d002      	beq.n	8011b44 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x10>
 8011b3e:	2000      	movs	r0, #0
		}
 8011b40:	b003      	add	sp, #12
 8011b42:	bd30      	pop	{r4, r5, pc}
			self->GetLED(ID, &success);
 8011b44:	f10d 0207 	add.w	r2, sp, #7
 8011b48:	7829      	ldrb	r1, [r5, #0]
 8011b4a:	f7ff fe88 	bl	801185e <_ZN4LEDS6GetLEDEhPb>
			if (success) {
 8011b4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011b52:	b14b      	cbz	r3, 8011b68 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x34>
				return self->SetLED(input[0], (input[1] == 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8011b54:	786a      	ldrb	r2, [r5, #1]
 8011b56:	4620      	mov	r0, r4
 8011b58:	3a00      	subs	r2, #0
 8011b5a:	bf18      	it	ne
 8011b5c:	2201      	movne	r2, #1
		}
 8011b5e:	b003      	add	sp, #12
 8011b60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
				return self->SetLED(input[0], (input[1] == 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8011b64:	f7ff be90 	b.w	8011888 <_ZN4LEDS6SetLEDEh13GPIO_PinState>
			self->GetI2CLED(ID, &success);
 8011b68:	4620      	mov	r0, r4
 8011b6a:	f7ff ff2f 	bl	80119cc <_ZN4LEDS9GetI2CLEDEhPb>
			if (success) {
 8011b6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d0e3      	beq.n	8011b3e <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0xa>
				return self->SetLED(input[0], input[1]) == HAL_OK;
 8011b76:	f04f 33ff 	mov.w	r3, #4294967295
 8011b7a:	786a      	ldrb	r2, [r5, #1]
 8011b7c:	4620      	mov	r0, r4
 8011b7e:	f7ff ffae 	bl	8011ade <_ZN4LEDS6SetLEDEhhm>
 8011b82:	fab0 f080 	clz	r0, r0
 8011b86:	0940      	lsrs	r0, r0, #5
 8011b88:	e7da      	b.n	8011b40 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0xc>

08011b8a <_ZN4LEDS13SetBrightnessEhhm>:
HAL_StatusTypeDef LEDS::SetBrightness(uint8_t ID, uint8_t brightness, uint32_t timeout) {
 8011b8a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8011b8e:	4604      	mov	r4, r0
 8011b90:	460d      	mov	r5, r1
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8011b92:	6840      	ldr	r0, [r0, #4]
 8011b94:	f04f 31ff 	mov.w	r1, #4294967295
HAL_StatusTypeDef LEDS::SetBrightness(uint8_t ID, uint8_t brightness, uint32_t timeout) {
 8011b98:	461f      	mov	r7, r3
 8011b9a:	4616      	mov	r6, r2
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8011b9c:	f7fa fafc 	bl	800c198 <osSemaphoreAcquire>
	uint8_t index = GetI2CRGBLED(ID, &success);
 8011ba0:	f10d 020f 	add.w	r2, sp, #15
 8011ba4:	4629      	mov	r1, r5
 8011ba6:	4620      	mov	r0, r4
 8011ba8:	f7ff ff25 	bl	80119f6 <_ZN4LEDS12GetI2CRGBLEDEhPb>
	if (!success) {
 8011bac:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8011bb0:	b933      	cbnz	r3, 8011bc0 <_ZN4LEDS13SetBrightnessEhhm+0x36>
		osSemaphoreRelease(LEDsSemaphore);
 8011bb2:	6860      	ldr	r0, [r4, #4]
 8011bb4:	f7fa fb24 	bl	800c200 <osSemaphoreRelease>
		return HAL_ERROR;
 8011bb8:	2001      	movs	r0, #1
}
 8011bba:	b004      	add	sp, #16
 8011bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bc0:	b200      	sxth	r0, r0
 8011bc2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8011bc4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8011bc8:	eb03 0880 	add.w	r8, r3, r0, lsl #2
	osSemaphoreRelease(LEDsSemaphore);
 8011bcc:	6860      	ldr	r0, [r4, #4]
 8011bce:	f7fa fb17 	bl	800c200 <osSemaphoreRelease>
	return ConfigureI2CLED(ID, led->brightness_address, brightness, timeout);
 8011bd2:	4633      	mov	r3, r6
 8011bd4:	f8b8 200c 	ldrh.w	r2, [r8, #12]
 8011bd8:	4629      	mov	r1, r5
 8011bda:	4620      	mov	r0, r4
 8011bdc:	9700      	str	r7, [sp, #0]
 8011bde:	f7ff ff70 	bl	8011ac2 <_ZN4LEDS15ConfigureI2CLEDEhthm>
 8011be2:	e7ea      	b.n	8011bba <_ZN4LEDS13SetBrightnessEhhm+0x30>

08011be4 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE4_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 8011be4:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8011be6:	4611      	mov	r1, r2
 8011be8:	b508      	push	{r3, lr}
			if (length != 2) return false;
 8011bea:	d109      	bne.n	8011c00 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE4_4_FUNES0_tS1_t+0x1c>
			return self->SetBrightness(input[0], input[1]) == HAL_OK;
 8011bec:	f04f 33ff 	mov.w	r3, #4294967295
 8011bf0:	7852      	ldrb	r2, [r2, #1]
 8011bf2:	7809      	ldrb	r1, [r1, #0]
 8011bf4:	f7ff ffc9 	bl	8011b8a <_ZN4LEDS13SetBrightnessEhhm>
 8011bf8:	fab0 f080 	clz	r0, r0
 8011bfc:	0940      	lsrs	r0, r0, #5
		}
 8011bfe:	bd08      	pop	{r3, pc}
			if (length != 2) return false;
 8011c00:	2000      	movs	r0, #0
 8011c02:	e7fc      	b.n	8011bfe <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE4_4_FUNES0_tS1_t+0x1a>

08011c04 <_ZN4LEDS9SetI2CRGBEhhhhm>:
HAL_StatusTypeDef LEDS::SetI2CRGB(uint8_t ID, uint8_t R, uint8_t G, uint8_t B, uint32_t timeout) {
 8011c04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011c08:	4604      	mov	r4, r0
 8011c0a:	460d      	mov	r5, r1
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8011c0c:	6840      	ldr	r0, [r0, #4]
 8011c0e:	f04f 31ff 	mov.w	r1, #4294967295
HAL_StatusTypeDef LEDS::SetI2CRGB(uint8_t ID, uint8_t R, uint8_t G, uint8_t B, uint32_t timeout) {
 8011c12:	4699      	mov	r9, r3
 8011c14:	4692      	mov	sl, r2
 8011c16:	f89d 8030 	ldrb.w	r8, [sp, #48]	@ 0x30
 8011c1a:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8011c1c:	f7fa fabc 	bl	800c198 <osSemaphoreAcquire>
	uint8_t index = GetI2CRGBLED(ID, &success);
 8011c20:	f10d 020f 	add.w	r2, sp, #15
 8011c24:	4629      	mov	r1, r5
 8011c26:	4620      	mov	r0, r4
 8011c28:	f7ff fee5 	bl	80119f6 <_ZN4LEDS12GetI2CRGBLEDEhPb>
	if (!success) {
 8011c2c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8011c30:	b933      	cbnz	r3, 8011c40 <_ZN4LEDS9SetI2CRGBEhhhhm+0x3c>
		osSemaphoreRelease(LEDsSemaphore);
 8011c32:	6860      	ldr	r0, [r4, #4]
 8011c34:	f7fa fae4 	bl	800c200 <osSemaphoreRelease>
		return HAL_ERROR;
 8011c38:	2001      	movs	r0, #1
}
 8011c3a:	b004      	add	sp, #16
 8011c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c40:	b200      	sxth	r0, r0
 8011c42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011c44:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8011c48:	eb06 0680 	add.w	r6, r6, r0, lsl #2
	osSemaphoreRelease(LEDsSemaphore);
 8011c4c:	6860      	ldr	r0, [r4, #4]
 8011c4e:	f7fa fad7 	bl	800c200 <osSemaphoreRelease>
	status = ConfigureI2CLED(ID, led->R_address, R, timeout);
 8011c52:	4653      	mov	r3, sl
 8011c54:	89f2      	ldrh	r2, [r6, #14]
 8011c56:	4629      	mov	r1, r5
 8011c58:	4620      	mov	r0, r4
 8011c5a:	9700      	str	r7, [sp, #0]
 8011c5c:	f7ff ff31 	bl	8011ac2 <_ZN4LEDS15ConfigureI2CLEDEhthm>
	if (status != HAL_OK) return status;
 8011c60:	2800      	cmp	r0, #0
 8011c62:	d1ea      	bne.n	8011c3a <_ZN4LEDS9SetI2CRGBEhhhhm+0x36>
	status = ConfigureI2CLED(ID, led->G_address, G, timeout);
 8011c64:	8a32      	ldrh	r2, [r6, #16]
 8011c66:	464b      	mov	r3, r9
 8011c68:	4629      	mov	r1, r5
 8011c6a:	4620      	mov	r0, r4
 8011c6c:	9700      	str	r7, [sp, #0]
 8011c6e:	f7ff ff28 	bl	8011ac2 <_ZN4LEDS15ConfigureI2CLEDEhthm>
	if (status != HAL_OK) return status;
 8011c72:	2800      	cmp	r0, #0
 8011c74:	d1e1      	bne.n	8011c3a <_ZN4LEDS9SetI2CRGBEhhhhm+0x36>
	status = ConfigureI2CLED(ID, led->B_address, B, timeout);
 8011c76:	8a72      	ldrh	r2, [r6, #18]
 8011c78:	4643      	mov	r3, r8
 8011c7a:	4629      	mov	r1, r5
 8011c7c:	4620      	mov	r0, r4
 8011c7e:	970c      	str	r7, [sp, #48]	@ 0x30
}
 8011c80:	b004      	add	sp, #16
 8011c82:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	status = ConfigureI2CLED(ID, led->B_address, B, timeout);
 8011c86:	f7ff bf1c 	b.w	8011ac2 <_ZN4LEDS15ConfigureI2CLEDEhthm>

08011c8a <_ZN4LEDS8ClearLEDEh>:
bool LEDS::ClearLED(uint8_t ID) {
 8011c8a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8011c8e:	4604      	mov	r4, r0
 8011c90:	460d      	mov	r5, r1
    osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8011c92:	6840      	ldr	r0, [r0, #4]
 8011c94:	f04f 31ff 	mov.w	r1, #4294967295
 8011c98:	f7fa fa7e 	bl	800c198 <osSemaphoreAcquire>
    uint8_t index = GetLED(ID, &success);
 8011c9c:	f10d 020f 	add.w	r2, sp, #15
 8011ca0:	4629      	mov	r1, r5
 8011ca2:	4620      	mov	r0, r4
 8011ca4:	f7ff fddb 	bl	801185e <_ZN4LEDS6GetLEDEhPb>
    if (success) {
 8011ca8:	f89d 600f 	ldrb.w	r6, [sp, #15]
 8011cac:	b196      	cbz	r6, 8011cd4 <_ZN4LEDS8ClearLEDEh+0x4a>
 8011cae:	68a3      	ldr	r3, [r4, #8]
 8011cb0:	b200      	sxth	r0, r0
        LEDs[index].blink = false;
 8011cb2:	2200      	movs	r2, #0
 8011cb4:	eb03 1340 	add.w	r3, r3, r0, lsl #5
        HAL_GPIO_WritePin(LEDs[index].gpio.port, LEDs[index].gpio.pin, GPIO_PIN_RESET);
 8011cb8:	6858      	ldr	r0, [r3, #4]
 8011cba:	8919      	ldrh	r1, [r3, #8]
        LEDs[index].blink = false;
 8011cbc:	819a      	strh	r2, [r3, #12]
        LEDs[index].counter = 0;
 8011cbe:	739a      	strb	r2, [r3, #14]
        HAL_GPIO_WritePin(LEDs[index].gpio.port, LEDs[index].gpio.pin, GPIO_PIN_RESET);
 8011cc0:	f7f4 fa9a 	bl	80061f8 <HAL_GPIO_WritePin>
        osSemaphoreRelease(LEDsSemaphore);
 8011cc4:	6860      	ldr	r0, [r4, #4]
 8011cc6:	f7fa fa9b 	bl	800c200 <osSemaphoreRelease>
        return true;
 8011cca:	2601      	movs	r6, #1
}
 8011ccc:	4630      	mov	r0, r6
 8011cce:	b004      	add	sp, #16
 8011cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    index = GetRGBLED(ID, &success);
 8011cd4:	4620      	mov	r0, r4
 8011cd6:	f7ff fe3d 	bl	8011954 <_ZN4LEDS9GetRGBLEDEhPb>
	if (success) {
 8011cda:	f89d 800f 	ldrb.w	r8, [sp, #15]
 8011cde:	f1b8 0f00 	cmp.w	r8, #0
 8011ce2:	d00a      	beq.n	8011cfa <_ZN4LEDS8ClearLEDEh+0x70>
		osSemaphoreRelease(LEDsSemaphore);
 8011ce4:	6860      	ldr	r0, [r4, #4]
 8011ce6:	f7fa fa8b 	bl	800c200 <osSemaphoreRelease>
		SetRGB(ID, 0, 0, 0);
 8011cea:	4633      	mov	r3, r6
 8011cec:	4632      	mov	r2, r6
 8011cee:	4629      	mov	r1, r5
 8011cf0:	4620      	mov	r0, r4
 8011cf2:	9600      	str	r6, [sp, #0]
 8011cf4:	f7ff fe43 	bl	801197e <_ZN4LEDS6SetRGBEhhhh>
		return true;
 8011cf8:	e7e7      	b.n	8011cca <_ZN4LEDS8ClearLEDEh+0x40>
    index = GetI2CLED(ID, &success);
 8011cfa:	4620      	mov	r0, r4
 8011cfc:	f7ff fe66 	bl	80119cc <_ZN4LEDS9GetI2CLEDEhPb>
    if (success) {
 8011d00:	f89d 700f 	ldrb.w	r7, [sp, #15]
 8011d04:	b157      	cbz	r7, 8011d1c <_ZN4LEDS8ClearLEDEh+0x92>
    	osSemaphoreRelease(LEDsSemaphore);
 8011d06:	6860      	ldr	r0, [r4, #4]
 8011d08:	f7fa fa7a 	bl	800c200 <osSemaphoreRelease>
    	SetLED(ID, 0);
 8011d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8011d10:	4642      	mov	r2, r8
 8011d12:	4629      	mov	r1, r5
 8011d14:	4620      	mov	r0, r4
 8011d16:	f7ff fee2 	bl	8011ade <_ZN4LEDS6SetLEDEhhm>
    	return true;
 8011d1a:	e7d6      	b.n	8011cca <_ZN4LEDS8ClearLEDEh+0x40>
    index = GetI2CRGBLED(ID, &success);
 8011d1c:	4620      	mov	r0, r4
 8011d1e:	f7ff fe6a 	bl	80119f6 <_ZN4LEDS12GetI2CRGBLEDEhPb>
    if (success) {
 8011d22:	f89d 600f 	ldrb.w	r6, [sp, #15]
    	osSemaphoreRelease(LEDsSemaphore);
 8011d26:	6860      	ldr	r0, [r4, #4]
    if (success) {
 8011d28:	b166      	cbz	r6, 8011d44 <_ZN4LEDS8ClearLEDEh+0xba>
    	osSemaphoreRelease(LEDsSemaphore);
 8011d2a:	f7fa fa69 	bl	800c200 <osSemaphoreRelease>
		SetI2CRGB(ID, 0, 0, 0);
 8011d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8011d32:	463a      	mov	r2, r7
 8011d34:	4629      	mov	r1, r5
 8011d36:	4620      	mov	r0, r4
 8011d38:	e9cd 7300 	strd	r7, r3, [sp]
 8011d3c:	463b      	mov	r3, r7
 8011d3e:	f7ff ff61 	bl	8011c04 <_ZN4LEDS9SetI2CRGBEhhhhm>
		return true;
 8011d42:	e7c2      	b.n	8011cca <_ZN4LEDS8ClearLEDEh+0x40>
    osSemaphoreRelease(LEDsSemaphore);
 8011d44:	f7fa fa5c 	bl	800c200 <osSemaphoreRelease>
    return false;
 8011d48:	e7c0      	b.n	8011ccc <_ZN4LEDS8ClearLEDEh+0x42>

08011d4a <_ZN4LEDS11ExistingLEDEh>:
bool LEDS::ExistingLED(uint8_t ID) {
 8011d4a:	b513      	push	{r0, r1, r4, lr}
	GetLED(ID, &success);
 8011d4c:	f10d 0207 	add.w	r2, sp, #7
bool LEDS::ExistingLED(uint8_t ID) {
 8011d50:	4604      	mov	r4, r0
	GetLED(ID, &success);
 8011d52:	f7ff fd84 	bl	801185e <_ZN4LEDS6GetLEDEhPb>
	if (success) return true;
 8011d56:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011d5a:	b113      	cbz	r3, 8011d62 <_ZN4LEDS11ExistingLEDEh+0x18>
 8011d5c:	2001      	movs	r0, #1
}
 8011d5e:	b002      	add	sp, #8
 8011d60:	bd10      	pop	{r4, pc}
	GetRGBLED(ID, &success);
 8011d62:	4620      	mov	r0, r4
 8011d64:	f7ff fdf6 	bl	8011954 <_ZN4LEDS9GetRGBLEDEhPb>
	if (success) return true;
 8011d68:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d1f5      	bne.n	8011d5c <_ZN4LEDS11ExistingLEDEh+0x12>
	GetI2CLED(ID, &success);
 8011d70:	4620      	mov	r0, r4
 8011d72:	f7ff fe2b 	bl	80119cc <_ZN4LEDS9GetI2CLEDEhPb>
	if (success) return true;
 8011d76:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d1ee      	bne.n	8011d5c <_ZN4LEDS11ExistingLEDEh+0x12>
	GetI2CRGBLED(ID, &success);
 8011d7e:	4620      	mov	r0, r4
 8011d80:	f7ff fe39 	bl	80119f6 <_ZN4LEDS12GetI2CRGBLEDEhPb>
	if (success) return true;
 8011d84:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011d88:	e7e9      	b.n	8011d5e <_ZN4LEDS11ExistingLEDEh+0x14>

08011d8a <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t>:
			if (length != 4) return false;
 8011d8a:	2b04      	cmp	r3, #4
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8011d8c:	b530      	push	{r4, r5, lr}
 8011d8e:	4605      	mov	r5, r0
 8011d90:	b085      	sub	sp, #20
 8011d92:	4614      	mov	r4, r2
			if (length != 4) return false;
 8011d94:	d002      	beq.n	8011d9c <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x12>
 8011d96:	2000      	movs	r0, #0
		}
 8011d98:	b005      	add	sp, #20
 8011d9a:	bd30      	pop	{r4, r5, pc}
			self->GetRGBLED(ID, &success);
 8011d9c:	f10d 020f 	add.w	r2, sp, #15
 8011da0:	7821      	ldrb	r1, [r4, #0]
 8011da2:	f7ff fdd7 	bl	8011954 <_ZN4LEDS9GetRGBLEDEhPb>
			if (success) {
 8011da6:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8011daa:	b13b      	cbz	r3, 8011dbc <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x32>
				return self->SetRGB(ID, input[1], input[2], input[3]);
 8011dac:	78e3      	ldrb	r3, [r4, #3]
 8011dae:	4628      	mov	r0, r5
 8011db0:	9300      	str	r3, [sp, #0]
 8011db2:	78a3      	ldrb	r3, [r4, #2]
 8011db4:	7862      	ldrb	r2, [r4, #1]
 8011db6:	f7ff fde2 	bl	801197e <_ZN4LEDS6SetRGBEhhhh>
 8011dba:	e7ed      	b.n	8011d98 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0xe>
			self->GetI2CRGBLED(ID, &success);
 8011dbc:	4628      	mov	r0, r5
 8011dbe:	f7ff fe1a 	bl	80119f6 <_ZN4LEDS12GetI2CRGBLEDEhPb>
			if (success) {
 8011dc2:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d0e5      	beq.n	8011d96 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0xc>
				return self->SetI2CRGB(ID, input[1], input[2], input[3]) == HAL_OK;
 8011dca:	f04f 33ff 	mov.w	r3, #4294967295
 8011dce:	4628      	mov	r0, r5
 8011dd0:	9301      	str	r3, [sp, #4]
 8011dd2:	78e3      	ldrb	r3, [r4, #3]
 8011dd4:	9300      	str	r3, [sp, #0]
 8011dd6:	78a3      	ldrb	r3, [r4, #2]
 8011dd8:	7862      	ldrb	r2, [r4, #1]
 8011dda:	f7ff ff13 	bl	8011c04 <_ZN4LEDS9SetI2CRGBEhhhhm>
 8011dde:	fab0 f080 	clz	r0, r0
 8011de2:	0940      	lsrs	r0, r0, #5
 8011de4:	e7d8      	b.n	8011d98 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0xe>

08011de6 <_ZSt14__relocate_a_1IP3LEDS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 8011de6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011de8:	4604      	mov	r4, r0
 8011dea:	460e      	mov	r6, r1
 8011dec:	4615      	mov	r5, r2
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8011dee:	2700      	movs	r7, #0
      for (; __first != __last; ++__first, (void)++__cur)
 8011df0:	42b4      	cmp	r4, r6
 8011df2:	4628      	mov	r0, r5
 8011df4:	f105 0520 	add.w	r5, r5, #32
 8011df8:	d100      	bne.n	8011dfc <_ZSt14__relocate_a_1IP3LEDS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0+0x16>
    }
 8011dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
struct LED {
 8011dfc:	4622      	mov	r2, r4
 8011dfe:	f812 3b04 	ldrb.w	r3, [r2], #4
 8011e02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011e06:	f805 3c20 	strb.w	r3, [r5, #-32]
 8011e0a:	f1a5 031c 	sub.w	r3, r5, #28
 8011e0e:	e883 0003 	stmia.w	r3, {r0, r1}
 8011e12:	7b23      	ldrb	r3, [r4, #12]
      }
 8011e14:	f104 0010 	add.w	r0, r4, #16
 8011e18:	f805 3c14 	strb.w	r3, [r5, #-20]
 8011e1c:	7b63      	ldrb	r3, [r4, #13]
 8011e1e:	f805 3c13 	strb.w	r3, [r5, #-19]
 8011e22:	7ba3      	ldrb	r3, [r4, #14]
 8011e24:	f805 3c12 	strb.w	r3, [r5, #-18]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8011e28:	6923      	ldr	r3, [r4, #16]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8011e2a:	6127      	str	r7, [r4, #16]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8011e2c:	f845 3c10 	str.w	r3, [r5, #-16]
 8011e30:	6963      	ldr	r3, [r4, #20]
 8011e32:	f845 3c0c 	str.w	r3, [r5, #-12]
	  _M_end_of_storage(__x._M_end_of_storage)
 8011e36:	69a3      	ldr	r3, [r4, #24]
 8011e38:	f845 3c08 	str.w	r3, [r5, #-8]
 8011e3c:	7f23      	ldrb	r3, [r4, #28]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8011e3e:	e9c4 7705 	strd	r7, r7, [r4, #20]
 8011e42:	f805 3c04 	strb.w	r3, [r5, #-4]
      for (; __first != __last; ++__first, (void)++__cur)
 8011e46:	3420      	adds	r4, #32
      }
 8011e48:	f7ee fd28 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011e4c:	e7d0      	b.n	8011df0 <_ZSt14__relocate_a_1IP3LEDS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0+0xa>
	...

08011e50 <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8011e50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011e54:	e9d0 8900 	ldrd	r8, r9, [r0]
 8011e58:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 8011e5a:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011e5e:	eba9 0208 	sub.w	r2, r9, r8
 8011e62:	4607      	mov	r7, r0
 8011e64:	468a      	mov	sl, r1
	if (max_size() - size() < __n)
 8011e66:	ebb3 1f22 	cmp.w	r3, r2, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011e6a:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
 8011e6e:	d102      	bne.n	8011e76 <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8011e70:	4820      	ldr	r0, [pc, #128]	@ (8011ef4 <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa4>)
 8011e72:	f004 fc03 	bl	801667c <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 8011e76:	45c1      	cmp	r9, r8
 8011e78:	bf14      	ite	ne
 8011e7a:	4622      	movne	r2, r4
 8011e7c:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 8011e7e:	eba1 0508 	sub.w	r5, r1, r8
 8011e82:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8011e84:	d231      	bcs.n	8011eea <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8011e86:	b394      	cbz	r4, 8011eee <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9e>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8011e88:	429c      	cmp	r4, r3
 8011e8a:	bf28      	it	cs
 8011e8c:	461c      	movcs	r4, r3
 8011e8e:	0120      	lsls	r0, r4, #4
 8011e90:	f004 fb3f 	bl	8016512 <_Znwj>
 8011e94:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8011e96:	eb06 0c05 	add.w	ip, r6, r5
      if (__count > 0)
 8011e9a:	2d00      	cmp	r5, #0
 8011e9c:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8011ea0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8011ea4:	dd04      	ble.n	8011eb0 <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x60>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8011ea6:	462a      	mov	r2, r5
 8011ea8:	4641      	mov	r1, r8
 8011eaa:	4630      	mov	r0, r6
 8011eac:	f004 fcbe 	bl	801682c <memmove>
      ptrdiff_t __count = __last - __first;
 8011eb0:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
 8011eb4:	3510      	adds	r5, #16
      if (__count > 0)
 8011eb6:	f1b9 0f00 	cmp.w	r9, #0
 8011eba:	4435      	add	r5, r6
 8011ebc:	dd04      	ble.n	8011ec8 <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x78>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8011ebe:	464a      	mov	r2, r9
 8011ec0:	4651      	mov	r1, sl
 8011ec2:	4628      	mov	r0, r5
 8011ec4:	f004 fdaa 	bl	8016a1c <memcpy>
      return __result + __count;
 8011ec8:	444d      	add	r5, r9
	if (__p)
 8011eca:	f1b8 0f00 	cmp.w	r8, #0
 8011ece:	d005      	beq.n	8011edc <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
 8011ed0:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8011ed2:	4640      	mov	r0, r8
 8011ed4:	eba1 0108 	sub.w	r1, r1, r8
 8011ed8:	f004 faf6 	bl	80164c8 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8011edc:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8011ee0:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 8011ee4:	60be      	str	r6, [r7, #8]
    }
 8011ee6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8011eea:	461c      	mov	r4, r3
 8011eec:	e7cf      	b.n	8011e8e <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8011eee:	4626      	mov	r6, r4
 8011ef0:	e7d1      	b.n	8011e96 <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 8011ef2:	bf00      	nop
 8011ef4:	08016b36 	.word	0x08016b36

08011ef8 <_ZN4LEDS9AddRGBLEDEhPmS0_S0_>:
bool LEDS::AddRGBLED(uint8_t ID, uint32_t* pulse_red_, uint32_t* pulse_green_, uint32_t* pulse_blue_) {
 8011ef8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8011efc:	4604      	mov	r4, r0
 8011efe:	460d      	mov	r5, r1
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8011f00:	6840      	ldr	r0, [r0, #4]
 8011f02:	f04f 31ff 	mov.w	r1, #4294967295
bool LEDS::AddRGBLED(uint8_t ID, uint32_t* pulse_red_, uint32_t* pulse_green_, uint32_t* pulse_blue_) {
 8011f06:	4617      	mov	r7, r2
 8011f08:	461e      	mov	r6, r3
 8011f0a:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8011f0e:	f7fa f943 	bl	800c198 <osSemaphoreAcquire>
	if (ExistingLED(ID)) {
 8011f12:	4629      	mov	r1, r5
 8011f14:	4620      	mov	r0, r4
 8011f16:	f7ff ff18 	bl	8011d4a <_ZN4LEDS11ExistingLEDEh>
 8011f1a:	b130      	cbz	r0, 8011f2a <_ZN4LEDS9AddRGBLEDEhPmS0_S0_+0x32>
		osSemaphoreRelease(LEDsSemaphore);
 8011f1c:	6860      	ldr	r0, [r4, #4]
 8011f1e:	f7fa f96f 	bl	800c200 <osSemaphoreRelease>
		return false;
 8011f22:	2000      	movs	r0, #0
}
 8011f24:	b004      	add	sp, #16
 8011f26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	led.ID = ID;
 8011f2a:	f88d 5000 	strb.w	r5, [sp]
	led.pulse_red = pulse_red_;
 8011f2e:	466a      	mov	r2, sp
	led.pulse_blue = pulse_blue_;
 8011f30:	f8cd 800c 	str.w	r8, [sp, #12]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8011f34:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
	led.pulse_green = pulse_green_;
 8011f38:	e9cd 7601 	strd	r7, r6, [sp, #4]
 8011f3c:	429d      	cmp	r5, r3
 8011f3e:	d00e      	beq.n	8011f5e <_ZN4LEDS9AddRGBLEDEhPmS0_S0_+0x66>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8011f40:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8011f42:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8011f46:	3510      	adds	r5, #16
 8011f48:	61a5      	str	r5, [r4, #24]
    osSemaphoreRelease(LEDsSemaphore);
 8011f4a:	6860      	ldr	r0, [r4, #4]
 8011f4c:	f7fa f958 	bl	800c200 <osSemaphoreRelease>
    *pulse_red_ = 0;
 8011f50:	2300      	movs	r3, #0
    return true;
 8011f52:	2001      	movs	r0, #1
    *pulse_red_ = 0;
 8011f54:	603b      	str	r3, [r7, #0]
    *pulse_green_ = 0;
 8011f56:	6033      	str	r3, [r6, #0]
    *pulse_blue_ = 0;
 8011f58:	f8c8 3000 	str.w	r3, [r8]
    return true;
 8011f5c:	e7e2      	b.n	8011f24 <_ZN4LEDS9AddRGBLEDEhPmS0_S0_+0x2c>
	  _M_realloc_insert(end(), __x);
 8011f5e:	4629      	mov	r1, r5
 8011f60:	f104 0014 	add.w	r0, r4, #20
 8011f64:	f7ff ff74 	bl	8011e50 <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 8011f68:	e7ef      	b.n	8011f4a <_ZN4LEDS9AddRGBLEDEhPmS0_S0_+0x52>

08011f6a <_ZN9Registers11AddRegisterIhEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 8011f6a:	b570      	push	{r4, r5, r6, lr}
 8011f6c:	4604      	mov	r4, r0
 8011f6e:	b086      	sub	sp, #24
 8011f70:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8011f72:	6800      	ldr	r0, [r0, #0]
 8011f74:	f04f 31ff 	mov.w	r1, #4294967295
 8011f78:	f7fa f90e 	bl	800c198 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 8011f7c:	f10d 0207 	add.w	r2, sp, #7
 8011f80:	4631      	mov	r1, r6
 8011f82:	4620      	mov	r0, r4
 8011f84:	f002 fee9 	bl	8014d5a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 8011f88:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8011f8c:	b125      	cbz	r5, 8011f98 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 8011f8e:	6820      	ldr	r0, [r4, #0]
 8011f90:	f7fa f936 	bl	800c200 <osSemaphoreRelease>
}
 8011f94:	b006      	add	sp, #24
 8011f96:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8011f98:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 8011f9c:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8011fa0:	f7ff fbbe 	bl	8011720 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	configuration_.register_info = register_;
 8011fa4:	2301      	movs	r3, #1
 8011fa6:	f8ad 600a 	strh.w	r6, [sp, #10]
 8011faa:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 8011fae:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 8011fb2:	f88d 000c 	strb.w	r0, [sp, #12]
 8011fb6:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 8011fba:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d0e5      	beq.n	8011f8e <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
      push_back(const value_type& __x)
 8011fc2:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8011fc4:	e9d4 5302 	ldrd	r5, r3, [r4, #8]
 8011fc8:	429d      	cmp	r5, r3
 8011fca:	d005      	beq.n	8011fd8 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x6e>
 8011fcc:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8011fce:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8011fd2:	3510      	adds	r5, #16
 8011fd4:	60a5      	str	r5, [r4, #8]
 8011fd6:	e7da      	b.n	8011f8e <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
	  _M_realloc_insert(end(), __x);
 8011fd8:	4629      	mov	r1, r5
 8011fda:	1d20      	adds	r0, r4, #4
 8011fdc:	f7fc fdf6 	bl	800ebcc <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 8011fe0:	e7d5      	b.n	8011f8e <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
	...

08011fe4 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8011fe4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011fe8:	460c      	mov	r4, r1
 8011fea:	b087      	sub	sp, #28
 8011fec:	4606      	mov	r6, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8011fee:	f04f 31ff 	mov.w	r1, #4294967295
 8011ff2:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8011ff4:	4698      	mov	r8, r3
 8011ff6:	4691      	mov	r9, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8011ff8:	f7fa f8ce 	bl	800c198 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8011ffc:	4621      	mov	r1, r4
 8011ffe:	f10d 0207 	add.w	r2, sp, #7
 8012002:	4630      	mov	r0, r6
 8012004:	f002 fea9 	bl	8014d5a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8012008:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801200c:	4604      	mov	r4, r0
	if (!success) {
 801200e:	b92b      	cbnz	r3, 801201c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x38>
	osSemaphoreRelease(RegistersSemaphore);
 8012010:	6830      	ldr	r0, [r6, #0]
 8012012:	f7fa f8f5 	bl	800c200 <osSemaphoreRelease>
}
 8012016:	b007      	add	sp, #28
 8012018:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 801201c:	f10d 0007 	add.w	r0, sp, #7
 8012020:	f7ff fb7e 	bl	8011720 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 8012024:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012028:	2b00      	cmp	r3, #0
 801202a:	d0f1      	beq.n	8012010 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (target_register->register_info.type != registered_type) {
 801202c:	7923      	ldrb	r3, [r4, #4]
 801202e:	4298      	cmp	r0, r3
 8012030:	d1ee      	bne.n	8012010 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (callbacks[target_register->register_info.type] == NULL) {
 8012032:	3004      	adds	r0, #4
 8012034:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
 8012038:	2f00      	cmp	r7, #0
 801203a:	d0e9      	beq.n	8012010 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 801203c:	7821      	ldrb	r1, [r4, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801203e:	e9d7 3500 	ldrd	r3, r5, [r7]
 8012042:	1aea      	subs	r2, r5, r3
 8012044:	1112      	asrs	r2, r2, #4
 8012046:	b9b1      	cbnz	r1, 8012076 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x92>
 8012048:	7861      	ldrb	r1, [r4, #1]
 801204a:	b9a1      	cbnz	r1, 8012076 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x92>
		callback.read = NULL;
 801204c:	9105      	str	r1, [sp, #20]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801204e:	68b9      	ldr	r1, [r7, #8]
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8012050:	8162      	strh	r2, [r4, #10]
      push_back(const value_type& __x)
 8012052:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8012054:	42a9      	cmp	r1, r5
		callback.write = write;
 8012056:	e9cd 9803 	strd	r9, r8, [sp, #12]
 801205a:	d008      	beq.n	801206e <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x8a>
 801205c:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 801205e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8012062:	3510      	adds	r5, #16
 8012064:	607d      	str	r5, [r7, #4]
	target_register->mode.callbacks = true;
 8012066:	2301      	movs	r3, #1
 8012068:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 801206a:	7223      	strb	r3, [r4, #8]
 801206c:	e7d0      	b.n	8012010 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	  _M_realloc_insert(end(), __x);
 801206e:	4638      	mov	r0, r7
 8012070:	f7fc fe48 	bl	800ed04 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	} else {
 8012074:	e7f7      	b.n	8012066 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x82>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8012076:	8961      	ldrh	r1, [r4, #10]
	if (__n >= this->size())
 8012078:	4291      	cmp	r1, r2
 801207a:	d302      	bcc.n	8012082 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x9e>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 801207c:	4803      	ldr	r0, [pc, #12]	@ (801208c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0xa8>)
 801207e:	f004 fb00 	bl	8016682 <_ZSt24__throw_out_of_range_fmtPKcz>
	return *(this->_M_impl._M_start + __n);
 8012082:	eb03 1301 	add.w	r3, r3, r1, lsl #4
		callback->write = write;
 8012086:	e9c3 9801 	strd	r9, r8, [r3, #4]
 801208a:	e7ec      	b.n	8012066 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x82>
 801208c:	08016d78 	.word	0x08016d78

08012090 <_ZN4LEDS12AddRegistersEv>:
void LEDS::AddRegisters(void) {
 8012090:	b510      	push	{r4, lr}
 8012092:	4604      	mov	r4, r0
	registers->AddRegister<uint8_t>(REG_LEDS_SET);
 8012094:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8012098:	6800      	ldr	r0, [r0, #0]
 801209a:	f7ff ff66 	bl	8011f6a <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_LEDS_SET, 2);
 801209e:	2202      	movs	r2, #2
 80120a0:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80120a4:	6820      	ldr	r0, [r4, #0]
 80120a6:	f002 fead 	bl	8014e04 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_LEDS_SET, (void*) this,
 80120aa:	4622      	mov	r2, r4
 80120ac:	4b2f      	ldr	r3, [pc, #188]	@ (801216c <_ZN4LEDS12AddRegistersEv+0xdc>)
 80120ae:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80120b2:	6820      	ldr	r0, [r4, #0]
 80120b4:	f7ff ff96 	bl	8011fe4 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_LEDS_TIMINGS);
 80120b8:	6820      	ldr	r0, [r4, #0]
 80120ba:	f240 3101 	movw	r1, #769	@ 0x301
 80120be:	f7ff ff54 	bl	8011f6a <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsVector(REG_LEDS_TIMINGS);
 80120c2:	f240 3101 	movw	r1, #769	@ 0x301
 80120c6:	6820      	ldr	r0, [r4, #0]
 80120c8:	f002 feb8 	bl	8014e3c <_ZN9Registers19SetRegisterAsVectorEt>
	registers->AddWriteCallback<uint8_t>(REG_LEDS_TIMINGS, (void*) this,
 80120cc:	4622      	mov	r2, r4
 80120ce:	4b28      	ldr	r3, [pc, #160]	@ (8012170 <_ZN4LEDS12AddRegistersEv+0xe0>)
 80120d0:	f240 3101 	movw	r1, #769	@ 0x301
 80120d4:	6820      	ldr	r0, [r4, #0]
 80120d6:	f7ff ff85 	bl	8011fe4 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_LEDS_BLINK);
 80120da:	6820      	ldr	r0, [r4, #0]
 80120dc:	f240 3102 	movw	r1, #770	@ 0x302
 80120e0:	f7ff ff43 	bl	8011f6a <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_LEDS_BLINK);
 80120e4:	f240 3102 	movw	r1, #770	@ 0x302
 80120e8:	6820      	ldr	r0, [r4, #0]
 80120ea:	f002 fe6f 	bl	8014dcc <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_LEDS_BLINK, (void*) this,
 80120ee:	4622      	mov	r2, r4
 80120f0:	4b20      	ldr	r3, [pc, #128]	@ (8012174 <_ZN4LEDS12AddRegistersEv+0xe4>)
 80120f2:	f240 3102 	movw	r1, #770	@ 0x302
 80120f6:	6820      	ldr	r0, [r4, #0]
 80120f8:	f7ff ff74 	bl	8011fe4 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_LEDS_BLINK_ONCE);
 80120fc:	6820      	ldr	r0, [r4, #0]
 80120fe:	f240 3103 	movw	r1, #771	@ 0x303
 8012102:	f7ff ff32 	bl	8011f6a <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_LEDS_BLINK_ONCE);
 8012106:	f240 3103 	movw	r1, #771	@ 0x303
 801210a:	6820      	ldr	r0, [r4, #0]
 801210c:	f002 fe5e 	bl	8014dcc <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_LEDS_BLINK_ONCE, (void*) this,
 8012110:	4b19      	ldr	r3, [pc, #100]	@ (8012178 <_ZN4LEDS12AddRegistersEv+0xe8>)
 8012112:	4622      	mov	r2, r4
 8012114:	6820      	ldr	r0, [r4, #0]
 8012116:	f240 3103 	movw	r1, #771	@ 0x303
 801211a:	f7ff ff63 	bl	8011fe4 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_LEDS_SET_RGB);
 801211e:	6820      	ldr	r0, [r4, #0]
 8012120:	f44f 7141 	mov.w	r1, #772	@ 0x304
 8012124:	f7ff ff21 	bl	8011f6a <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_LEDS_SET_RGB, 4);
 8012128:	2204      	movs	r2, #4
 801212a:	f44f 7141 	mov.w	r1, #772	@ 0x304
 801212e:	6820      	ldr	r0, [r4, #0]
 8012130:	f002 fe68 	bl	8014e04 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_LEDS_SET_RGB, (void*) this,
 8012134:	4b11      	ldr	r3, [pc, #68]	@ (801217c <_ZN4LEDS12AddRegistersEv+0xec>)
 8012136:	4622      	mov	r2, r4
 8012138:	6820      	ldr	r0, [r4, #0]
 801213a:	f44f 7141 	mov.w	r1, #772	@ 0x304
 801213e:	f7ff ff51 	bl	8011fe4 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_LEDS_SET_BRIGHNESS);
 8012142:	6820      	ldr	r0, [r4, #0]
 8012144:	f240 3105 	movw	r1, #773	@ 0x305
 8012148:	f7ff ff0f 	bl	8011f6a <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_LEDS_SET_BRIGHNESS, 2);
 801214c:	2202      	movs	r2, #2
 801214e:	f240 3105 	movw	r1, #773	@ 0x305
 8012152:	6820      	ldr	r0, [r4, #0]
 8012154:	f002 fe56 	bl	8014e04 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_LEDS_SET_BRIGHNESS, (void*) this,
 8012158:	4622      	mov	r2, r4
 801215a:	6820      	ldr	r0, [r4, #0]
 801215c:	f240 3105 	movw	r1, #773	@ 0x305
 8012160:	4b07      	ldr	r3, [pc, #28]	@ (8012180 <_ZN4LEDS12AddRegistersEv+0xf0>)
}
 8012162:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	registers->AddWriteCallback<uint8_t>(REG_LEDS_SET_BRIGHNESS, (void*) this,
 8012166:	f7ff bf3d 	b.w	8011fe4 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
 801216a:	bf00      	nop
 801216c:	08011b35 	.word	0x08011b35
 8012170:	08012433 	.word	0x08012433
 8012174:	0801190b 	.word	0x0801190b
 8012178:	0801194f 	.word	0x0801194f
 801217c:	08011d8b 	.word	0x08011d8b
 8012180:	08011be5 	.word	0x08011be5

08012184 <_ZN3LEDC1ERKS_>:
 8012184:	460a      	mov	r2, r1
 8012186:	b538      	push	{r3, r4, r5, lr}
 8012188:	460d      	mov	r5, r1
 801218a:	4603      	mov	r3, r0
 801218c:	f812 1b04 	ldrb.w	r1, [r2], #4
 8012190:	4604      	mov	r4, r0
 8012192:	f803 1b04 	strb.w	r1, [r3], #4
 8012196:	e892 0003 	ldmia.w	r2, {r0, r1}
 801219a:	89aa      	ldrh	r2, [r5, #12]
 801219c:	e883 0003 	stmia.w	r3, {r0, r1}
 80121a0:	7bab      	ldrb	r3, [r5, #14]
 80121a2:	f105 0110 	add.w	r1, r5, #16
 80121a6:	f104 0010 	add.w	r0, r4, #16
 80121aa:	81a2      	strh	r2, [r4, #12]
 80121ac:	73a3      	strb	r3, [r4, #14]
 80121ae:	f7ee fc25 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80121b2:	7f2b      	ldrb	r3, [r5, #28]
 80121b4:	4620      	mov	r0, r4
 80121b6:	7723      	strb	r3, [r4, #28]
 80121b8:	bd38      	pop	{r3, r4, r5, pc}

080121ba <_ZN4LEDS8TestLEDsEv>:

/**
 * @brief Testing procedure of LEDs. Light them one after the other
 */
void LEDS::TestLEDs(void) {
 80121ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80121be:	4604      	mov	r4, r0
 80121c0:	b08b      	sub	sp, #44	@ 0x2c
 80121c2:	e9d0 5702 	ldrd	r5, r7, [r0, #8]
#ifdef USE_SMD_LEDs
	for (LED led : LEDs) {
 80121c6:	42af      	cmp	r7, r5
 80121c8:	d109      	bne.n	80121de <_ZN4LEDS8TestLEDsEv+0x24>
		SetLED(led.ID, GPIO_PIN_SET);
		HAL_Delay(100);
		SetLED(led.ID, GPIO_PIN_RESET);
	}
	for (RGBLED led : RGB_LEDs) {
		SetRGB(led.ID, 255, 0, 0);
 80121ca:	2700      	movs	r7, #0
 80121cc:	f04f 09ff 	mov.w	r9, #255	@ 0xff
 80121d0:	e9d4 6805 	ldrd	r6, r8, [r4, #20]
	for (RGBLED led : RGB_LEDs) {
 80121d4:	45b0      	cmp	r8, r6
 80121d6:	d11a      	bne.n	801220e <_ZN4LEDS8TestLEDsEv+0x54>
		SetI2CRGB(led.ID, 0, 0, 255);
		HAL_Delay(100);
		SetI2CRGB(led.ID, 0, 0, 0);
	}
#endif
}
 80121d8:	b00b      	add	sp, #44	@ 0x2c
 80121da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (LED led : LEDs) {
 80121de:	4629      	mov	r1, r5
 80121e0:	a802      	add	r0, sp, #8
 80121e2:	f7ff ffcf 	bl	8012184 <_ZN3LEDC1ERKS_>
		SetLED(led.ID, GPIO_PIN_SET);
 80121e6:	f89d 6008 	ldrb.w	r6, [sp, #8]
 80121ea:	2201      	movs	r2, #1
 80121ec:	4620      	mov	r0, r4
 80121ee:	4631      	mov	r1, r6
 80121f0:	3520      	adds	r5, #32
 80121f2:	f7ff fb49 	bl	8011888 <_ZN4LEDS6SetLEDEh13GPIO_PinState>
		HAL_Delay(100);
 80121f6:	2064      	movs	r0, #100	@ 0x64
 80121f8:	f7f0 ff78 	bl	80030ec <HAL_Delay>
		SetLED(led.ID, GPIO_PIN_RESET);
 80121fc:	2200      	movs	r2, #0
 80121fe:	4631      	mov	r1, r6
 8012200:	4620      	mov	r0, r4
 8012202:	f7ff fb41 	bl	8011888 <_ZN4LEDS6SetLEDEh13GPIO_PinState>
      }
 8012206:	a806      	add	r0, sp, #24
 8012208:	f7ee fb48 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return *this;
 801220c:	e7db      	b.n	80121c6 <_ZN4LEDS8TestLEDsEv+0xc>
	for (RGBLED led : RGB_LEDs) {
 801220e:	f816 5b10 	ldrb.w	r5, [r6], #16
		SetRGB(led.ID, 255, 0, 0);
 8012212:	2300      	movs	r3, #0
 8012214:	22ff      	movs	r2, #255	@ 0xff
 8012216:	4620      	mov	r0, r4
 8012218:	4629      	mov	r1, r5
 801221a:	9700      	str	r7, [sp, #0]
 801221c:	f7ff fbaf 	bl	801197e <_ZN4LEDS6SetRGBEhhhh>
		HAL_Delay(100);
 8012220:	2064      	movs	r0, #100	@ 0x64
 8012222:	f7f0 ff63 	bl	80030ec <HAL_Delay>
		SetRGB(led.ID, 0, 255, 0);
 8012226:	4629      	mov	r1, r5
 8012228:	23ff      	movs	r3, #255	@ 0xff
 801222a:	2200      	movs	r2, #0
 801222c:	4620      	mov	r0, r4
 801222e:	9700      	str	r7, [sp, #0]
 8012230:	f7ff fba5 	bl	801197e <_ZN4LEDS6SetRGBEhhhh>
		HAL_Delay(100);
 8012234:	2064      	movs	r0, #100	@ 0x64
 8012236:	f7f0 ff59 	bl	80030ec <HAL_Delay>
		SetRGB(led.ID, 0, 0, 255);
 801223a:	2300      	movs	r3, #0
 801223c:	4629      	mov	r1, r5
 801223e:	4620      	mov	r0, r4
 8012240:	461a      	mov	r2, r3
 8012242:	f8cd 9000 	str.w	r9, [sp]
 8012246:	f7ff fb9a 	bl	801197e <_ZN4LEDS6SetRGBEhhhh>
		HAL_Delay(100);
 801224a:	2064      	movs	r0, #100	@ 0x64
 801224c:	f7f0 ff4e 	bl	80030ec <HAL_Delay>
		SetRGB(led.ID, 0, 0, 0);
 8012250:	2300      	movs	r3, #0
 8012252:	4629      	mov	r1, r5
 8012254:	4620      	mov	r0, r4
 8012256:	461a      	mov	r2, r3
 8012258:	9700      	str	r7, [sp, #0]
 801225a:	f7ff fb90 	bl	801197e <_ZN4LEDS6SetRGBEhhhh>
 801225e:	e7b9      	b.n	80121d4 <_ZN4LEDS8TestLEDsEv+0x1a>

08012260 <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8012260:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012264:	e9d0 7900 	ldrd	r7, r9, [r0]
 8012268:	4692      	mov	sl, r2
	if (max_size() - size() < __n)
 801226a:	f06f 437c 	mvn.w	r3, #4227858432	@ 0xfc000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801226e:	eba9 0207 	sub.w	r2, r9, r7
 8012272:	4606      	mov	r6, r0
 8012274:	4688      	mov	r8, r1
	if (max_size() - size() < __n)
 8012276:	ebb3 1f62 	cmp.w	r3, r2, asr #5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801227a:	ea4f 1462 	mov.w	r4, r2, asr #5
	if (max_size() - size() < __n)
 801227e:	d102      	bne.n	8012286 <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8012280:	481a      	ldr	r0, [pc, #104]	@ (80122ec <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>)
 8012282:	f004 f9fb 	bl	801667c <_ZSt20__throw_length_errorPKc>
 8012286:	45b9      	cmp	r9, r7
 8012288:	bf14      	ite	ne
 801228a:	4622      	movne	r2, r4
 801228c:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 801228e:	eba1 0b07 	sub.w	fp, r1, r7
 8012292:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8012294:	d225      	bcs.n	80122e2 <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x82>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8012296:	b334      	cbz	r4, 80122e6 <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x86>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8012298:	429c      	cmp	r4, r3
 801229a:	bf28      	it	cs
 801229c:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801229e:	0160      	lsls	r0, r4, #5
 80122a0:	f004 f937 	bl	8016512 <_Znwj>
 80122a4:	4605      	mov	r5, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80122a6:	4651      	mov	r1, sl
 80122a8:	eb05 000b 	add.w	r0, r5, fp
 80122ac:	f7ff ff6a 	bl	8012184 <_ZN3LEDC1ERKS_>
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
 80122b0:	4641      	mov	r1, r8
 80122b2:	462a      	mov	r2, r5
 80122b4:	4638      	mov	r0, r7
 80122b6:	f7ff fd96 	bl	8011de6 <_ZSt14__relocate_a_1IP3LEDS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>
 80122ba:	4649      	mov	r1, r9
 80122bc:	f100 0220 	add.w	r2, r0, #32
 80122c0:	4640      	mov	r0, r8
 80122c2:	f7ff fd90 	bl	8011de6 <_ZSt14__relocate_a_1IP3LEDS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>
 80122c6:	4680      	mov	r8, r0
	if (__p)
 80122c8:	b127      	cbz	r7, 80122d4 <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x74>
		    this->_M_impl._M_end_of_storage - __old_start);
 80122ca:	68b1      	ldr	r1, [r6, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80122cc:	4638      	mov	r0, r7
 80122ce:	1bc9      	subs	r1, r1, r7
 80122d0:	f004 f8fa 	bl	80164c8 <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80122d4:	eb05 1444 	add.w	r4, r5, r4, lsl #5
      this->_M_impl._M_finish = __new_finish;
 80122d8:	e9c6 5800 	strd	r5, r8, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80122dc:	60b4      	str	r4, [r6, #8]
    }
 80122de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80122e2:	461c      	mov	r4, r3
 80122e4:	e7db      	b.n	801229e <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80122e6:	4625      	mov	r5, r4
 80122e8:	e7dd      	b.n	80122a6 <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 80122ea:	bf00      	nop
 80122ec:	08016b36 	.word	0x08016b36

080122f0 <_ZN4LEDS6AddLEDEh4GPIO>:
bool LEDS::AddLED(uint8_t ID, GPIO gpio) {
 80122f0:	b570      	push	{r4, r5, r6, lr}
 80122f2:	b08a      	sub	sp, #40	@ 0x28
 80122f4:	4604      	mov	r4, r0
 80122f6:	460e      	mov	r6, r1
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 80122f8:	6840      	ldr	r0, [r0, #4]
bool LEDS::AddLED(uint8_t ID, GPIO gpio) {
 80122fa:	466d      	mov	r5, sp
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 80122fc:	f04f 31ff 	mov.w	r1, #4294967295
bool LEDS::AddLED(uint8_t ID, GPIO gpio) {
 8012300:	e885 000c 	stmia.w	r5, {r2, r3}
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8012304:	f7f9 ff48 	bl	800c198 <osSemaphoreAcquire>
	if (ExistingLED(ID)) {
 8012308:	4631      	mov	r1, r6
 801230a:	4620      	mov	r0, r4
 801230c:	f7ff fd1d 	bl	8011d4a <_ZN4LEDS11ExistingLEDEh>
 8012310:	4603      	mov	r3, r0
 8012312:	b128      	cbz	r0, 8012320 <_ZN4LEDS6AddLEDEh4GPIO+0x30>
		osSemaphoreRelease(LEDsSemaphore);
 8012314:	6860      	ldr	r0, [r4, #4]
 8012316:	f7f9 ff73 	bl	800c200 <osSemaphoreRelease>
		return false;
 801231a:	2000      	movs	r0, #0
}
 801231c:	b00a      	add	sp, #40	@ 0x28
 801231e:	bd70      	pop	{r4, r5, r6, pc}
    led.gpio = gpio;
 8012320:	aa03      	add	r2, sp, #12
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012322:	9008      	str	r0, [sp, #32]
    led.ID = ID;
 8012324:	f88d 6008 	strb.w	r6, [sp, #8]
 8012328:	e9cd 0006 	strd	r0, r0, [sp, #24]
    led.gpio = gpio;
 801232c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012330:	e882 0003 	stmia.w	r2, {r0, r1}
    led.blink = false;
 8012334:	f8ad 3014 	strh.w	r3, [sp, #20]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8012338:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 801233c:	4298      	cmp	r0, r3
 801233e:	d013      	beq.n	8012368 <_ZN4LEDS6AddLEDEh4GPIO+0x78>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8012340:	a902      	add	r1, sp, #8
 8012342:	f7ff ff1f 	bl	8012184 <_ZN3LEDC1ERKS_>
	    ++this->_M_impl._M_finish;
 8012346:	68e3      	ldr	r3, [r4, #12]
 8012348:	3320      	adds	r3, #32
 801234a:	60e3      	str	r3, [r4, #12]
    osSemaphoreRelease(LEDsSemaphore);
 801234c:	6860      	ldr	r0, [r4, #4]
 801234e:	f7f9 ff57 	bl	800c200 <osSemaphoreRelease>
    HAL_GPIO_WritePin(led.gpio.port, led.gpio.pin, GPIO_PIN_RESET);
 8012352:	2200      	movs	r2, #0
 8012354:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8012358:	9803      	ldr	r0, [sp, #12]
 801235a:	f7f3 ff4d 	bl	80061f8 <HAL_GPIO_WritePin>
      }
 801235e:	a806      	add	r0, sp, #24
 8012360:	f7ee fa9c 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
    return true;
 8012364:	2001      	movs	r0, #1
 8012366:	e7d9      	b.n	801231c <_ZN4LEDS6AddLEDEh4GPIO+0x2c>
	  _M_realloc_insert(end(), __x);
 8012368:	4601      	mov	r1, r0
 801236a:	aa02      	add	r2, sp, #8
 801236c:	f104 0008 	add.w	r0, r4, #8
 8012370:	f7ff ff76 	bl	8012260 <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 8012374:	e7ea      	b.n	801234c <_ZN4LEDS6AddLEDEh4GPIO+0x5c>

08012376 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>:
bool LEDS::ConfigureTimings(uint8_t ID, std::vector<uint8_t> timings, uint8_t T) {
 8012376:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801237a:	4605      	mov	r5, r0
 801237c:	b085      	sub	sp, #20
 801237e:	460c      	mov	r4, r1
    osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8012380:	6840      	ldr	r0, [r0, #4]
 8012382:	f04f 31ff 	mov.w	r1, #4294967295
bool LEDS::ConfigureTimings(uint8_t ID, std::vector<uint8_t> timings, uint8_t T) {
 8012386:	4616      	mov	r6, r2
 8012388:	461f      	mov	r7, r3
    osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 801238a:	f7f9 ff05 	bl	800c198 <osSemaphoreAcquire>
    uint8_t index = GetLED(ID, &success);
 801238e:	f10d 020f 	add.w	r2, sp, #15
 8012392:	4621      	mov	r1, r4
 8012394:	4628      	mov	r0, r5
 8012396:	f7ff fa62 	bl	801185e <_ZN4LEDS6GetLEDEhPb>
    if (success) {
 801239a:	f89d 800f 	ldrb.w	r8, [sp, #15]
 801239e:	f1b8 0f00 	cmp.w	r8, #0
 80123a2:	d02b      	beq.n	80123fc <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh+0x86>
	return *(this->_M_impl._M_start + __n);
 80123a4:	b200      	sxth	r0, r0
 80123a6:	68ac      	ldr	r4, [r5, #8]
 80123a8:	eb04 1440 	add.w	r4, r4, r0, lsl #5
 80123ac:	ea4f 1940 	mov.w	r9, r0, lsl #5
        LEDs[index].timings = timings;
 80123b0:	f104 0310 	add.w	r3, r4, #16
      if (std::__addressof(__x) != this)
 80123b4:	429e      	cmp	r6, r3
 80123b6:	d01e      	beq.n	80123f6 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh+0x80>
			 - this->_M_impl._M_start); }
 80123b8:	6922      	ldr	r2, [r4, #16]
 80123ba:	69a3      	ldr	r3, [r4, #24]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80123bc:	e9d6 b100 	ldrd	fp, r1, [r6]
			 - this->_M_impl._M_start); }
 80123c0:	1a9b      	subs	r3, r3, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80123c2:	eba1 0a0b 	sub.w	sl, r1, fp
	  if (__xlen > capacity())
 80123c6:	459a      	cmp	sl, r3
 80123c8:	d91f      	bls.n	801240a <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh+0x94>
	  pointer __result = this->_M_allocate(__n);
 80123ca:	4650      	mov	r0, sl
 80123cc:	9101      	str	r1, [sp, #4]
 80123ce:	f7ff f99b 	bl	8011708 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
			      _Category>::__copy_m(__first, __last, __result);
 80123d2:	9901      	ldr	r1, [sp, #4]
 80123d4:	4602      	mov	r2, r0
 80123d6:	4606      	mov	r6, r0
 80123d8:	4658      	mov	r0, fp
 80123da:	f7ee fb03 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80123de:	6920      	ldr	r0, [r4, #16]
	if (__p)
 80123e0:	b118      	cbz	r0, 80123ea <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh+0x74>
			    - this->_M_impl._M_start);
 80123e2:	69a1      	ldr	r1, [r4, #24]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80123e4:	1a09      	subs	r1, r1, r0
 80123e6:	f004 f86f 	bl	80164c8 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
 80123ea:	6126      	str	r6, [r4, #16]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 80123ec:	4456      	add	r6, sl
 80123ee:	61a6      	str	r6, [r4, #24]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 80123f0:	6923      	ldr	r3, [r4, #16]
 80123f2:	4453      	add	r3, sl
 80123f4:	6163      	str	r3, [r4, #20]
        LEDs[index].T = T;
 80123f6:	68ab      	ldr	r3, [r5, #8]
 80123f8:	444b      	add	r3, r9
 80123fa:	771f      	strb	r7, [r3, #28]
    osSemaphoreRelease(LEDsSemaphore);
 80123fc:	6868      	ldr	r0, [r5, #4]
 80123fe:	f7f9 feff 	bl	800c200 <osSemaphoreRelease>
}
 8012402:	4640      	mov	r0, r8
 8012404:	b005      	add	sp, #20
 8012406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801240a:	6963      	ldr	r3, [r4, #20]
 801240c:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
 801240e:	459a      	cmp	sl, r3
 8012410:	d803      	bhi.n	801241a <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh+0xa4>
 8012412:	4658      	mov	r0, fp
 8012414:	f7ee fae6 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
      return std::uninitialized_copy(__first, __last, __result);
 8012418:	e7ea      	b.n	80123f0 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh+0x7a>
 801241a:	eb0b 0103 	add.w	r1, fp, r3
 801241e:	4658      	mov	r0, fp
 8012420:	f7ee fae0 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8012424:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 8012428:	e9d6 3100 	ldrd	r3, r1, [r6]
 801242c:	1a10      	subs	r0, r2, r0
 801242e:	4418      	add	r0, r3
 8012430:	e7f0      	b.n	8012414 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh+0x9e>

08012432 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t>:
			if (length < 3) return false;
 8012432:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8012434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012438:	4606      	mov	r6, r0
 801243a:	b086      	sub	sp, #24
 801243c:	4615      	mov	r5, r2
			if (length < 3) return false;
 801243e:	d925      	bls.n	801248c <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t+0x5a>
			std::vector<uint8_t> timings (&input[1], &input[length-1]);
 8012440:	1e9c      	subs	r4, r3, #2
 8012442:	1e5f      	subs	r7, r3, #1
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8012444:	4620      	mov	r0, r4
 8012446:	eb02 0807 	add.w	r8, r2, r7
 801244a:	f7ff f95d 	bl	8011708 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801244e:	4404      	add	r4, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8012450:	4602      	mov	r2, r0
 8012452:	4641      	mov	r1, r8
 8012454:	9000      	str	r0, [sp, #0]
 8012456:	1c68      	adds	r0, r5, #1
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8012458:	9402      	str	r4, [sp, #8]
 801245a:	f7ee fac3 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
			return self->ConfigureTimings(input[0], timings, input[length-1]);
 801245e:	782c      	ldrb	r4, [r5, #0]
 8012460:	4669      	mov	r1, sp
	  this->_M_impl._M_finish =
 8012462:	9001      	str	r0, [sp, #4]
 8012464:	a803      	add	r0, sp, #12
 8012466:	f7ee fac9 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 801246a:	4621      	mov	r1, r4
 801246c:	5deb      	ldrb	r3, [r5, r7]
 801246e:	aa03      	add	r2, sp, #12
 8012470:	4630      	mov	r0, r6
 8012472:	f7ff ff80 	bl	8012376 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
 8012476:	4604      	mov	r4, r0
      }
 8012478:	a803      	add	r0, sp, #12
 801247a:	f7ee fa0f 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801247e:	4668      	mov	r0, sp
 8012480:	f7ee fa0c 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		}
 8012484:	4620      	mov	r0, r4
 8012486:	b006      	add	sp, #24
 8012488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (length < 3) return false;
 801248c:	2400      	movs	r4, #0
 801248e:	e7f9      	b.n	8012484 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t+0x52>

08012490 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t>:
	registers->SetRegisterAsSingle(REG_GEN_CONFIGURE_MODULES);
	registers->AddRegisterSemaphore(REG_GEN_GENERATOR_STATUS, &GeneratorSemaphore);
	registers->AddWriteCallback<uint8_t>(REG_GEN_CONFIGURE_MODULES, (void*) this,
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
			MotionGenerator* self = (MotionGenerator*) context;
			self->request_module_configuration = true;
 8012490:	2301      	movs	r3, #1
 8012492:	f880 3064 	strb.w	r3, [r0, #100]	@ 0x64
			return true;
		}
 8012496:	4618      	mov	r0, r3
 8012498:	4770      	bx	lr

0801249a <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t>:
	registers->SetRegisterAsSingle(REG_GEN_MODULES_CONTROLLER_STATUS);
	registers->AddRegisterSemaphore(REG_GEN_GENERATOR_STATUS, &GeneratorSemaphore);
	registers->AddWriteCallback<uint8_t>(REG_GEN_MODULES_CONTROLLER_STATUS, (void*) this,
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
			MotionGenerator* self = (MotionGenerator*) context;
			if (*input > 0) {
 801249a:	7812      	ldrb	r2, [r2, #0]
 801249c:	2301      	movs	r3, #1
 801249e:	b11a      	cbz	r2, 80124a8 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t+0xe>
				self->request_module_controller_activation = true;
 80124a0:	f880 3065 	strb.w	r3, [r0, #101]	@ 0x65
			} else {
				self->request_module_controller_deactivation = true;
			}
			return true;
		}
 80124a4:	2001      	movs	r0, #1
 80124a6:	4770      	bx	lr
				self->request_module_controller_deactivation = true;
 80124a8:	f880 3066 	strb.w	r3, [r0, #102]	@ 0x66
 80124ac:	e7fa      	b.n	80124a4 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t+0xa>

080124ae <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPPhPtE3_4_FUNES0_tS2_S3_>:

	// Register to access the number of modules
	registers->AddRegister<uint8_t>(REG_GEN_NB_MODULES);
	registers->SetRegisterAsSingle(REG_GEN_NB_MODULES);
	registers->AddReadCallback<uint8_t>(REG_GEN_NB_MODULES, (void*) this,
		[](void* context, uint16_t register_id, uint8_t** output, uint16_t* length) -> bool {
 80124ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124b0:	4604      	mov	r4, r0
 80124b2:	4615      	mov	r5, r2
 80124b4:	461e      	mov	r6, r3
			MotionGenerator* self = (MotionGenerator*) context;
			osSemaphoreAcquire(self->GeneratorSemaphore, osWaitForever);
			*length = 1;
 80124b6:	2701      	movs	r7, #1
			osSemaphoreAcquire(self->GeneratorSemaphore, osWaitForever);
 80124b8:	f04f 31ff 	mov.w	r1, #4294967295
 80124bc:	6900      	ldr	r0, [r0, #16]
 80124be:	f7f9 fe6b 	bl	800c198 <osSemaphoreAcquire>
			*length = 1;
 80124c2:	8037      	strh	r7, [r6, #0]
			**output = self->number_of_modules;
 80124c4:	682b      	ldr	r3, [r5, #0]
 80124c6:	7f22      	ldrb	r2, [r4, #28]
 80124c8:	701a      	strb	r2, [r3, #0]
			osSemaphoreRelease(self->GeneratorSemaphore);
 80124ca:	6920      	ldr	r0, [r4, #16]
 80124cc:	f7f9 fe98 	bl	800c200 <osSemaphoreRelease>
			return true;
		}
 80124d0:	4638      	mov	r0, r7
 80124d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080124d4 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPPhPtE1_4_FUNES0_tS2_S3_>:
		[](void* context, uint16_t register_id, uint8_t** output, uint16_t* length) -> bool {
 80124d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124d6:	4604      	mov	r4, r0
 80124d8:	4615      	mov	r5, r2
			osSemaphoreAcquire(self->GeneratorSemaphore, osWaitForever);
 80124da:	f04f 31ff 	mov.w	r1, #4294967295
 80124de:	6900      	ldr	r0, [r0, #16]
		[](void* context, uint16_t register_id, uint8_t** output, uint16_t* length) -> bool {
 80124e0:	461e      	mov	r6, r3
			*length = 1;
 80124e2:	2701      	movs	r7, #1
			osSemaphoreAcquire(self->GeneratorSemaphore, osWaitForever);
 80124e4:	f7f9 fe58 	bl	800c198 <osSemaphoreAcquire>
			**output = self->active;
 80124e8:	682b      	ldr	r3, [r5, #0]
 80124ea:	7d22      	ldrb	r2, [r4, #20]
			*length = 1;
 80124ec:	8037      	strh	r7, [r6, #0]
			**output = self->active;
 80124ee:	701a      	strb	r2, [r3, #0]
			osSemaphoreRelease(self->GeneratorSemaphore);
 80124f0:	6920      	ldr	r0, [r4, #16]
 80124f2:	f7f9 fe85 	bl	800c200 <osSemaphoreRelease>
		}
 80124f6:	4638      	mov	r0, r7
 80124f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080124fa <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80124fa:	2800      	cmp	r0, #0
      _M_allocate(size_t __n)
 80124fc:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80124fe:	d006      	beq.n	801250e <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0x14>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8012500:	da01      	bge.n	8012506 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0xc>
	    std::__throw_bad_alloc();
 8012502:	f004 f8b5 	bl	8016670 <_ZSt17__throw_bad_allocv>
      }
 8012506:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801250a:	f004 b802 	b.w	8016512 <_Znwj>
 801250e:	bd08      	pop	{r3, pc}

08012510 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 8012510:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8012512:	491e      	ldr	r1, [pc, #120]	@ (801258c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 8012514:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8012516:	481e      	ldr	r0, [pc, #120]	@ (8012590 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8012518:	f004 f892 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 801251c:	bb40      	cbnz	r0, 8012570 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 801251e:	491d      	ldr	r1, [pc, #116]	@ (8012594 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x84>)
 8012520:	481b      	ldr	r0, [pc, #108]	@ (8012590 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8012522:	f004 f88d 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 8012526:	bb28      	cbnz	r0, 8012574 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8012528:	4919      	ldr	r1, [pc, #100]	@ (8012590 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 801252a:	4608      	mov	r0, r1
 801252c:	f004 f888 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 8012530:	bb10      	cbnz	r0, 8012578 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8012532:	4919      	ldr	r1, [pc, #100]	@ (8012598 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x88>)
 8012534:	4816      	ldr	r0, [pc, #88]	@ (8012590 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8012536:	f004 f883 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 801253a:	b9f8      	cbnz	r0, 801257c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 801253c:	4917      	ldr	r1, [pc, #92]	@ (801259c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x8c>)
 801253e:	4814      	ldr	r0, [pc, #80]	@ (8012590 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8012540:	f004 f87e 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 8012544:	b9e0      	cbnz	r0, 8012580 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8012546:	4916      	ldr	r1, [pc, #88]	@ (80125a0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x90>)
 8012548:	4811      	ldr	r0, [pc, #68]	@ (8012590 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 801254a:	f004 f879 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 801254e:	b9c8      	cbnz	r0, 8012584 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8012550:	4914      	ldr	r1, [pc, #80]	@ (80125a4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x94>)
 8012552:	480f      	ldr	r0, [pc, #60]	@ (8012590 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8012554:	f004 f874 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 8012558:	b9b0      	cbnz	r0, 8012588 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 801255a:	4913      	ldr	r1, [pc, #76]	@ (80125a8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x98>)
 801255c:	480c      	ldr	r0, [pc, #48]	@ (8012590 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 801255e:	f004 f86f 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 8012562:	2800      	cmp	r0, #0
 8012564:	bf14      	ite	ne
 8012566:	2309      	movne	r3, #9
 8012568:	2300      	moveq	r3, #0
 801256a:	7020      	strb	r0, [r4, #0]
}
 801256c:	4618      	mov	r0, r3
 801256e:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8012570:	2300      	movs	r3, #0
 8012572:	e7fa      	b.n	801256a <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8012574:	2301      	movs	r3, #1
 8012576:	e7f8      	b.n	801256a <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8012578:	2302      	movs	r3, #2
 801257a:	e7f6      	b.n	801256a <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 801257c:	2303      	movs	r3, #3
 801257e:	e7f4      	b.n	801256a <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8012580:	2304      	movs	r3, #4
 8012582:	e7f2      	b.n	801256a <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8012584:	2306      	movs	r3, #6
 8012586:	e7f0      	b.n	801256a <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8012588:	2308      	movs	r3, #8
 801258a:	e7ee      	b.n	801256a <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
 801258c:	08016f7c 	.word	0x08016f7c
 8012590:	08016f64 	.word	0x08016f64
 8012594:	08016f74 	.word	0x08016f74
 8012598:	08016f5c 	.word	0x08016f5c
 801259c:	08016f84 	.word	0x08016f84
 80125a0:	08016f6c 	.word	0x08016f6c
 80125a4:	08016f54 	.word	0x08016f54
 80125a8:	08016f4c 	.word	0x08016f4c

080125ac <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 80125ac:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80125ae:	491e      	ldr	r1, [pc, #120]	@ (8012628 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 80125b0:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80125b2:	481e      	ldr	r0, [pc, #120]	@ (801262c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 80125b4:	f004 f844 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 80125b8:	bb40      	cbnz	r0, 801260c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 80125ba:	491d      	ldr	r1, [pc, #116]	@ (8012630 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x84>)
 80125bc:	481b      	ldr	r0, [pc, #108]	@ (801262c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 80125be:	f004 f83f 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 80125c2:	bb28      	cbnz	r0, 8012610 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 80125c4:	491b      	ldr	r1, [pc, #108]	@ (8012634 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x88>)
 80125c6:	4819      	ldr	r0, [pc, #100]	@ (801262c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 80125c8:	f004 f83a 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 80125cc:	bb10      	cbnz	r0, 8012614 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 80125ce:	491a      	ldr	r1, [pc, #104]	@ (8012638 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x8c>)
 80125d0:	4816      	ldr	r0, [pc, #88]	@ (801262c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 80125d2:	f004 f835 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 80125d6:	b9f8      	cbnz	r0, 8012618 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 80125d8:	4918      	ldr	r1, [pc, #96]	@ (801263c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x90>)
 80125da:	4814      	ldr	r0, [pc, #80]	@ (801262c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 80125dc:	f004 f830 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 80125e0:	b9e0      	cbnz	r0, 801261c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 80125e2:	4917      	ldr	r1, [pc, #92]	@ (8012640 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x94>)
 80125e4:	4811      	ldr	r0, [pc, #68]	@ (801262c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 80125e6:	f004 f82b 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 80125ea:	b9c8      	cbnz	r0, 8012620 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 80125ec:	490f      	ldr	r1, [pc, #60]	@ (801262c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 80125ee:	4608      	mov	r0, r1
 80125f0:	f004 f826 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 80125f4:	b9b0      	cbnz	r0, 8012624 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 80125f6:	4913      	ldr	r1, [pc, #76]	@ (8012644 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x98>)
 80125f8:	480c      	ldr	r0, [pc, #48]	@ (801262c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 80125fa:	f004 f821 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 80125fe:	2800      	cmp	r0, #0
 8012600:	bf14      	ite	ne
 8012602:	2309      	movne	r3, #9
 8012604:	2300      	moveq	r3, #0
 8012606:	7020      	strb	r0, [r4, #0]
}
 8012608:	4618      	mov	r0, r3
 801260a:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801260c:	2300      	movs	r3, #0
 801260e:	e7fa      	b.n	8012606 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8012610:	2301      	movs	r3, #1
 8012612:	e7f8      	b.n	8012606 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8012614:	2302      	movs	r3, #2
 8012616:	e7f6      	b.n	8012606 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8012618:	2303      	movs	r3, #3
 801261a:	e7f4      	b.n	8012606 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 801261c:	2304      	movs	r3, #4
 801261e:	e7f2      	b.n	8012606 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8012620:	2306      	movs	r3, #6
 8012622:	e7f0      	b.n	8012606 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8012624:	2308      	movs	r3, #8
 8012626:	e7ee      	b.n	8012606 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
 8012628:	08016f7c 	.word	0x08016f7c
 801262c:	08016f54 	.word	0x08016f54
 8012630:	08016f74 	.word	0x08016f74
 8012634:	08016f64 	.word	0x08016f64
 8012638:	08016f5c 	.word	0x08016f5c
 801263c:	08016f84 	.word	0x08016f84
 8012640:	08016f6c 	.word	0x08016f6c
 8012644:	08016f4c 	.word	0x08016f4c

08012648 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>:
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8012648:	491e      	ldr	r1, [pc, #120]	@ (80126c4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 801264a:	b510      	push	{r4, lr}
 801264c:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801264e:	4608      	mov	r0, r1
 8012650:	f003 fff6 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 8012654:	bb40      	cbnz	r0, 80126a8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8012656:	491c      	ldr	r1, [pc, #112]	@ (80126c8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x80>)
 8012658:	481a      	ldr	r0, [pc, #104]	@ (80126c4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 801265a:	f003 fff1 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 801265e:	bb28      	cbnz	r0, 80126ac <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8012660:	491a      	ldr	r1, [pc, #104]	@ (80126cc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x84>)
 8012662:	4818      	ldr	r0, [pc, #96]	@ (80126c4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8012664:	f003 ffec 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 8012668:	bb10      	cbnz	r0, 80126b0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 801266a:	4919      	ldr	r1, [pc, #100]	@ (80126d0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x88>)
 801266c:	4815      	ldr	r0, [pc, #84]	@ (80126c4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 801266e:	f003 ffe7 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 8012672:	b9f8      	cbnz	r0, 80126b4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8012674:	4917      	ldr	r1, [pc, #92]	@ (80126d4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x8c>)
 8012676:	4813      	ldr	r0, [pc, #76]	@ (80126c4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8012678:	f003 ffe2 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 801267c:	b9e0      	cbnz	r0, 80126b8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 801267e:	4916      	ldr	r1, [pc, #88]	@ (80126d8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x90>)
 8012680:	4810      	ldr	r0, [pc, #64]	@ (80126c4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8012682:	f003 ffdd 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 8012686:	b9c8      	cbnz	r0, 80126bc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8012688:	4914      	ldr	r1, [pc, #80]	@ (80126dc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x94>)
 801268a:	480e      	ldr	r0, [pc, #56]	@ (80126c4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 801268c:	f003 ffd8 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 8012690:	b9b0      	cbnz	r0, 80126c0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 8012692:	4913      	ldr	r1, [pc, #76]	@ (80126e0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x98>)
 8012694:	480b      	ldr	r0, [pc, #44]	@ (80126c4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8012696:	f003 ffd3 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 801269a:	2800      	cmp	r0, #0
 801269c:	bf14      	ite	ne
 801269e:	2309      	movne	r3, #9
 80126a0:	2300      	moveq	r3, #0
 80126a2:	7020      	strb	r0, [r4, #0]
}
 80126a4:	4618      	mov	r0, r3
 80126a6:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80126a8:	2300      	movs	r3, #0
 80126aa:	e7fa      	b.n	80126a2 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 80126ac:	2301      	movs	r3, #1
 80126ae:	e7f8      	b.n	80126a2 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 80126b0:	2302      	movs	r3, #2
 80126b2:	e7f6      	b.n	80126a2 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 80126b4:	2303      	movs	r3, #3
 80126b6:	e7f4      	b.n	80126a2 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 80126b8:	2304      	movs	r3, #4
 80126ba:	e7f2      	b.n	80126a2 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 80126bc:	2306      	movs	r3, #6
 80126be:	e7f0      	b.n	80126a2 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 80126c0:	2308      	movs	r3, #8
 80126c2:	e7ee      	b.n	80126a2 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
 80126c4:	08016f7c 	.word	0x08016f7c
 80126c8:	08016f74 	.word	0x08016f74
 80126cc:	08016f64 	.word	0x08016f64
 80126d0:	08016f5c 	.word	0x08016f5c
 80126d4:	08016f84 	.word	0x08016f84
 80126d8:	08016f6c 	.word	0x08016f6c
 80126dc:	08016f54 	.word	0x08016f54
 80126e0:	08016f4c 	.word	0x08016f4c

080126e4 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE6_4_FUNES0_tS1_t>:
	*__first = __tmp;
 80126e4:	e9d0 0209 	ldrd	r0, r2, [r0, #36]	@ 0x24
 80126e8:	2100      	movs	r1, #0
 80126ea:	1a12      	subs	r2, r2, r0

	// Register to reset all generator offsets to 0
	registers->AddRegister<uint8_t>(REG_GEN_RESET_GENERATOR_OFFSETS);
	registers->SetRegisterAsSingle(REG_GEN_RESET_GENERATOR_OFFSETS);
	registers->AddWriteCallback<uint8_t>(REG_GEN_RESET_GENERATOR_OFFSETS, (void*) this,
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 80126ec:	b508      	push	{r3, lr}
 80126ee:	f004 f8b7 	bl	8016860 <memset>
			MotionGenerator* self = (MotionGenerator*) context;
			std::fill(self->generator_offsets.begin(), self->generator_offsets.end(), 0);
			return true;
		}
 80126f2:	2001      	movs	r0, #1
 80126f4:	bd08      	pop	{r3, pc}

080126f6 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE8_4_FUNES0_tS1_t>:
 80126f6:	e9d0 020c 	ldrd	r0, r2, [r0, #48]	@ 0x30
 80126fa:	2100      	movs	r1, #0
 80126fc:	1a12      	subs	r2, r2, r0

	// Register to reset all position offsets
	registers->AddRegister<uint8_t>(REG_GEN_RESET_POSITION_OFFSETS);
	registers->SetRegisterAsSingle(REG_GEN_RESET_POSITION_OFFSETS);
	registers->AddWriteCallback<uint8_t>(REG_GEN_RESET_POSITION_OFFSETS, (void*) this,
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 80126fe:	b508      	push	{r3, lr}
 8012700:	f004 f8ae 	bl	8016860 <memset>
			MotionGenerator* self = (MotionGenerator*) context;
			std::fill(self->position_offsets.begin(), self->position_offsets.end(), 0);
			return true;
		}
 8012704:	2001      	movs	r0, #1
 8012706:	bd08      	pop	{r3, pc}

08012708 <_ZN15MotionGeneratorC1Ev>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012708:	2200      	movs	r2, #0
 801270a:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 801270e:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 8012712:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 8012716:	e9c0 2214 	strd	r2, r2, [r0, #80]	@ 0x50
 801271a:	6582      	str	r2, [r0, #88]	@ 0x58
}
 801271c:	4770      	bx	lr

0801271e <_ZN15MotionGenerator18SetGeneratorPeriodEm>:
 * @brief Set the generator period
 *
 * @param input period_ms_: generator period in ms
 * @return whether successful
 */
bool MotionGenerator::SetGeneratorPeriod(uint32_t period_ms_) {
 801271e:	b538      	push	{r3, r4, r5, lr}
 8012720:	4604      	mov	r4, r0
 8012722:	460d      	mov	r5, r1
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 8012724:	6900      	ldr	r0, [r0, #16]
 8012726:	f04f 31ff 	mov.w	r1, #4294967295
 801272a:	f7f9 fd35 	bl	800c198 <osSemaphoreAcquire>
	period_ms = period_ms_;
	osSemaphoreRelease(GeneratorSemaphore);
 801272e:	6920      	ldr	r0, [r4, #16]
	period_ms = period_ms_;
 8012730:	61a5      	str	r5, [r4, #24]
	osSemaphoreRelease(GeneratorSemaphore);
 8012732:	f7f9 fd65 	bl	800c200 <osSemaphoreRelease>
	return true;
}
 8012736:	2001      	movs	r0, #1
 8012738:	bd38      	pop	{r3, r4, r5, pc}

0801273a <_ZN15MotionGenerator18SetGeneratorOffsetEhf>:
 *
 * @param input index: module index with 0 = module directly attached to head
 * @param input offset: the generator offset
 * @return whether successful
 */
bool MotionGenerator::SetGeneratorOffset(uint8_t index, float offset) {
 801273a:	b538      	push	{r3, r4, r5, lr}
 801273c:	4604      	mov	r4, r0
 801273e:	460d      	mov	r5, r1
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 8012740:	6900      	ldr	r0, [r0, #16]
 8012742:	f04f 31ff 	mov.w	r1, #4294967295
bool MotionGenerator::SetGeneratorOffset(uint8_t index, float offset) {
 8012746:	ed2d 8b02 	vpush	{d8}
 801274a:	eeb0 8a40 	vmov.f32	s16, s0
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 801274e:	f7f9 fd23 	bl	800c198 <osSemaphoreAcquire>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012752:	e9d4 3209 	ldrd	r3, r2, [r4, #36]	@ 0x24
 8012756:	1ad2      	subs	r2, r2, r3
	if (index >= generator_offsets.size()) {osSemaphoreRelease(GeneratorSemaphore); return false;}
 8012758:	ebb5 0fa2 	cmp.w	r5, r2, asr #2
 801275c:	d306      	bcc.n	801276c <_ZN15MotionGenerator18SetGeneratorOffsetEhf+0x32>
 801275e:	6920      	ldr	r0, [r4, #16]
 8012760:	f7f9 fd4e 	bl	800c200 <osSemaphoreRelease>
 8012764:	2000      	movs	r0, #0

	generator_offsets[index] = offset;
	osSemaphoreRelease(GeneratorSemaphore);
	return true;
}
 8012766:	ecbd 8b02 	vpop	{d8}
 801276a:	bd38      	pop	{r3, r4, r5, pc}
	generator_offsets[index] = offset;
 801276c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
	osSemaphoreRelease(GeneratorSemaphore);
 8012770:	6920      	ldr	r0, [r4, #16]
	generator_offsets[index] = offset;
 8012772:	ed83 8a00 	vstr	s16, [r3]
	osSemaphoreRelease(GeneratorSemaphore);
 8012776:	f7f9 fd43 	bl	800c200 <osSemaphoreRelease>
	return true;
 801277a:	2001      	movs	r0, #1
 801277c:	e7f3      	b.n	8012766 <_ZN15MotionGenerator18SetGeneratorOffsetEhf+0x2c>

0801277e <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPftE5_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 801277e:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, float* input, uint16_t length) -> bool {
 8012780:	b082      	sub	sp, #8
			if (length != 2) return false;
 8012782:	d10c      	bne.n	801279e <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPftE5_4_FUNES0_tS1_t+0x20>
			return self->SetGeneratorOffset((uint8_t) input[0], input[1]);
 8012784:	edd2 7a00 	vldr	s15, [r2]
 8012788:	ed92 0a01 	vldr	s0, [r2, #4]
 801278c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012790:	edcd 7a01 	vstr	s15, [sp, #4]
 8012794:	f89d 1004 	ldrb.w	r1, [sp, #4]
		}
 8012798:	b002      	add	sp, #8
			return self->SetGeneratorOffset((uint8_t) input[0], input[1]);
 801279a:	f7ff bfce 	b.w	801273a <_ZN15MotionGenerator18SetGeneratorOffsetEhf>
		}
 801279e:	2000      	movs	r0, #0
 80127a0:	b002      	add	sp, #8
 80127a2:	4770      	bx	lr

080127a4 <_ZN15MotionGenerator21ResetGeneratorOffsetsEv>:
/**
 * @brief Reset all generator offsets to 0
 *
 * @return whether successful
 */
bool MotionGenerator::ResetGeneratorOffsets(void) {
 80127a4:	b510      	push	{r4, lr}
 80127a6:	4604      	mov	r4, r0
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 80127a8:	f04f 31ff 	mov.w	r1, #4294967295
 80127ac:	6900      	ldr	r0, [r0, #16]
 80127ae:	f7f9 fcf3 	bl	800c198 <osSemaphoreAcquire>
	for (float &offset : generator_offsets) {
		offset = 0;
 80127b2:	2100      	movs	r1, #0
 80127b4:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	@ 0x24
 80127b8:	1a12      	subs	r2, r2, r0
 80127ba:	f004 f851 	bl	8016860 <memset>
	}
	osSemaphoreRelease(GeneratorSemaphore);
 80127be:	6920      	ldr	r0, [r4, #16]
 80127c0:	f7f9 fd1e 	bl	800c200 <osSemaphoreRelease>
	return true;
}
 80127c4:	2001      	movs	r0, #1
 80127c6:	bd10      	pop	{r4, pc}

080127c8 <_ZN15MotionGenerator17SetPositionOffsetEhf>:
 *
 * @param input index: module index with 0 = module directly attached to head
 * @param input offset: the position offset
 * @return whether successful
 */
bool MotionGenerator::SetPositionOffset(uint8_t index, float offset) {
 80127c8:	b538      	push	{r3, r4, r5, lr}
 80127ca:	4604      	mov	r4, r0
 80127cc:	460d      	mov	r5, r1
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 80127ce:	6900      	ldr	r0, [r0, #16]
 80127d0:	f04f 31ff 	mov.w	r1, #4294967295
bool MotionGenerator::SetPositionOffset(uint8_t index, float offset) {
 80127d4:	ed2d 8b02 	vpush	{d8}
 80127d8:	eeb0 8a40 	vmov.f32	s16, s0
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 80127dc:	f7f9 fcdc 	bl	800c198 <osSemaphoreAcquire>
 80127e0:	e9d4 320c 	ldrd	r3, r2, [r4, #48]	@ 0x30
 80127e4:	1ad2      	subs	r2, r2, r3
	if (index >= position_offsets.size()) {osSemaphoreRelease(GeneratorSemaphore); return false;}
 80127e6:	ebb5 0fa2 	cmp.w	r5, r2, asr #2
 80127ea:	d306      	bcc.n	80127fa <_ZN15MotionGenerator17SetPositionOffsetEhf+0x32>
 80127ec:	6920      	ldr	r0, [r4, #16]
 80127ee:	f7f9 fd07 	bl	800c200 <osSemaphoreRelease>
 80127f2:	2000      	movs	r0, #0

	position_offsets[index] = offset;
	osSemaphoreRelease(GeneratorSemaphore);
	return true;
}
 80127f4:	ecbd 8b02 	vpop	{d8}
 80127f8:	bd38      	pop	{r3, r4, r5, pc}
	position_offsets[index] = offset;
 80127fa:	eb03 0385 	add.w	r3, r3, r5, lsl #2
	osSemaphoreRelease(GeneratorSemaphore);
 80127fe:	6920      	ldr	r0, [r4, #16]
	position_offsets[index] = offset;
 8012800:	ed83 8a00 	vstr	s16, [r3]
	osSemaphoreRelease(GeneratorSemaphore);
 8012804:	f7f9 fcfc 	bl	800c200 <osSemaphoreRelease>
	return true;
 8012808:	2001      	movs	r0, #1
 801280a:	e7f3      	b.n	80127f4 <_ZN15MotionGenerator17SetPositionOffsetEhf+0x2c>

0801280c <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPftE7_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 801280c:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, float* input, uint16_t length) -> bool {
 801280e:	b082      	sub	sp, #8
			if (length != 2) return false;
 8012810:	d10c      	bne.n	801282c <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPftE7_4_FUNES0_tS1_t+0x20>
			return self->SetPositionOffset((uint8_t) input[0], input[1]);
 8012812:	edd2 7a00 	vldr	s15, [r2]
 8012816:	ed92 0a01 	vldr	s0, [r2, #4]
 801281a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801281e:	edcd 7a01 	vstr	s15, [sp, #4]
 8012822:	f89d 1004 	ldrb.w	r1, [sp, #4]
		}
 8012826:	b002      	add	sp, #8
			return self->SetPositionOffset((uint8_t) input[0], input[1]);
 8012828:	f7ff bfce 	b.w	80127c8 <_ZN15MotionGenerator17SetPositionOffsetEhf>
		}
 801282c:	2000      	movs	r0, #0
 801282e:	b002      	add	sp, #8
 8012830:	4770      	bx	lr

08012832 <_ZN15MotionGenerator15SetModuleLengthEf>:
 * @brief Set the module length
 *
 * @param input length: the module length
 * @return whether successful
 */
bool MotionGenerator::SetModuleLength(float length) {
 8012832:	b510      	push	{r4, lr}
 8012834:	ed2d 8b02 	vpush	{d8}
 8012838:	eeb0 8a40 	vmov.f32	s16, s0
 801283c:	4604      	mov	r4, r0
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 801283e:	f04f 31ff 	mov.w	r1, #4294967295
 8012842:	6900      	ldr	r0, [r0, #16]
 8012844:	f7f9 fca8 	bl	800c198 <osSemaphoreAcquire>
	module_length = length;
	osSemaphoreRelease(GeneratorSemaphore);
 8012848:	6920      	ldr	r0, [r4, #16]
	module_length = length;
 801284a:	ed84 8a08 	vstr	s16, [r4, #32]
	osSemaphoreRelease(GeneratorSemaphore);
 801284e:	f7f9 fcd7 	bl	800c200 <osSemaphoreRelease>
	return true;
}
 8012852:	2001      	movs	r0, #1
 8012854:	ecbd 8b02 	vpop	{d8}
 8012858:	bd10      	pop	{r4, pc}

0801285a <_ZN15MotionGenerator21SetGeneratorAmplitudeEf>:
 * @brief Set the generator amplitude
 *
 * @param input amplitude_: waveform amplitude A with Asin(...)
 * @return whether successful
 */
bool MotionGenerator::SetGeneratorAmplitude(float amplitude_) {
 801285a:	b510      	push	{r4, lr}
 801285c:	ed2d 8b02 	vpush	{d8}
 8012860:	eeb0 8a40 	vmov.f32	s16, s0
 8012864:	4604      	mov	r4, r0
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 8012866:	f04f 31ff 	mov.w	r1, #4294967295
 801286a:	6900      	ldr	r0, [r0, #16]
 801286c:	f7f9 fc94 	bl	800c198 <osSemaphoreAcquire>
	amplitude = amplitude_;
	osSemaphoreRelease(GeneratorSemaphore);
 8012870:	6920      	ldr	r0, [r4, #16]
	amplitude = amplitude_;
 8012872:	ed84 8a0f 	vstr	s16, [r4, #60]	@ 0x3c
	osSemaphoreRelease(GeneratorSemaphore);
 8012876:	f7f9 fcc3 	bl	800c200 <osSemaphoreRelease>
	return true;
}
 801287a:	2001      	movs	r0, #1
 801287c:	ecbd 8b02 	vpop	{d8}
 8012880:	bd10      	pop	{r4, pc}

08012882 <_ZN15MotionGenerator21SetGeneratorFrequencyEf>:
 * @brief Set the generator frequency
 *
 * @param input frequency_: waveform frequency
 * @return whether successful
 */
bool MotionGenerator::SetGeneratorFrequency(float frequency_) {
 8012882:	b510      	push	{r4, lr}
 8012884:	ed2d 8b02 	vpush	{d8}
 8012888:	eeb0 8a40 	vmov.f32	s16, s0
 801288c:	4604      	mov	r4, r0
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 801288e:	f04f 31ff 	mov.w	r1, #4294967295
 8012892:	6900      	ldr	r0, [r0, #16]
 8012894:	f7f9 fc80 	bl	800c198 <osSemaphoreAcquire>
	frequency = frequency_;
	osSemaphoreRelease(GeneratorSemaphore);
 8012898:	6920      	ldr	r0, [r4, #16]
	frequency = frequency_;
 801289a:	ed84 8a10 	vstr	s16, [r4, #64]	@ 0x40
	osSemaphoreRelease(GeneratorSemaphore);
 801289e:	f7f9 fcaf 	bl	800c200 <osSemaphoreRelease>
	return true;
}
 80128a2:	2001      	movs	r0, #1
 80128a4:	ecbd 8b02 	vpop	{d8}
 80128a8:	bd10      	pop	{r4, pc}

080128aa <_ZN15MotionGenerator29SetGeneratorWavelengthInverseEf>:
 * @brief Set the generator wavelength inverse
 *
 * @param input wavelength_inverse_: waveform wavelength inverse 1/l with Asin(.. + 2*pi*x/l)
 * @return whether successful
 */
bool MotionGenerator::SetGeneratorWavelengthInverse(float wavelength_inverse_) {
 80128aa:	b510      	push	{r4, lr}
 80128ac:	ed2d 8b02 	vpush	{d8}
 80128b0:	eeb0 8a40 	vmov.f32	s16, s0
 80128b4:	4604      	mov	r4, r0
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 80128b6:	f04f 31ff 	mov.w	r1, #4294967295
 80128ba:	6900      	ldr	r0, [r0, #16]
 80128bc:	f7f9 fc6c 	bl	800c198 <osSemaphoreAcquire>
	wavelength_inverse = wavelength_inverse_;
	osSemaphoreRelease(GeneratorSemaphore);
 80128c0:	6920      	ldr	r0, [r4, #16]
	wavelength_inverse = wavelength_inverse_;
 80128c2:	ed84 8a11 	vstr	s16, [r4, #68]	@ 0x44
	osSemaphoreRelease(GeneratorSemaphore);
 80128c6:	f7f9 fc9b 	bl	800c200 <osSemaphoreRelease>
	return true;
}
 80128ca:	2001      	movs	r0, #1
 80128cc:	ecbd 8b02 	vpop	{d8}
 80128d0:	bd10      	pop	{r4, pc}

080128d2 <_ZN15MotionGenerator17SetGeneratorPhaseEf>:
 * @brief Set the generator phase
 *
 * @param input wavelength_inverse_: waveform phase
 * @return whether successful
 */
bool MotionGenerator::SetGeneratorPhase(float phase_) {
 80128d2:	b510      	push	{r4, lr}
 80128d4:	ed2d 8b02 	vpush	{d8}
 80128d8:	eeb0 8a40 	vmov.f32	s16, s0
 80128dc:	4604      	mov	r4, r0
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 80128de:	f04f 31ff 	mov.w	r1, #4294967295
 80128e2:	6900      	ldr	r0, [r0, #16]
 80128e4:	f7f9 fc58 	bl	800c198 <osSemaphoreAcquire>
	phase = phase_;
	osSemaphoreRelease(GeneratorSemaphore);
 80128e8:	6920      	ldr	r0, [r4, #16]
	phase = phase_;
 80128ea:	ed84 8a12 	vstr	s16, [r4, #72]	@ 0x48
	osSemaphoreRelease(GeneratorSemaphore);
 80128ee:	f7f9 fc87 	bl	800c200 <osSemaphoreRelease>
	return true;
}
 80128f2:	2001      	movs	r0, #1
 80128f4:	ecbd 8b02 	vpop	{d8}
 80128f8:	bd10      	pop	{r4, pc}

080128fa <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
 80128fa:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80128fc:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
      push_back(const value_type& __x)
 8012900:	4605      	mov	r5, r0
 8012902:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8012904:	429c      	cmp	r4, r3
 8012906:	d005      	beq.n	8012914 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_+0x1a>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8012908:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 801290a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 801290e:	3410      	adds	r4, #16
 8012910:	606c      	str	r4, [r5, #4]
      }
 8012912:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
 8012914:	4621      	mov	r1, r4
 8012916:	f7fc f959 	bl	800ebcc <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 801291a:	e7fa      	b.n	8012912 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_+0x18>

0801291c <_ZN9Registers11AddRegisterIfEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 801291c:	b570      	push	{r4, r5, r6, lr}
 801291e:	4604      	mov	r4, r0
 8012920:	b086      	sub	sp, #24
 8012922:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8012924:	6800      	ldr	r0, [r0, #0]
 8012926:	f04f 31ff 	mov.w	r1, #4294967295
 801292a:	f7f9 fc35 	bl	800c198 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 801292e:	f10d 0207 	add.w	r2, sp, #7
 8012932:	4631      	mov	r1, r6
 8012934:	4620      	mov	r0, r4
 8012936:	f002 fa10 	bl	8014d5a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 801293a:	f89d 5007 	ldrb.w	r5, [sp, #7]
 801293e:	b125      	cbz	r5, 801294a <_ZN9Registers11AddRegisterIfEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 8012940:	6820      	ldr	r0, [r4, #0]
 8012942:	f7f9 fc5d 	bl	800c200 <osSemaphoreRelease>
}
 8012946:	b006      	add	sp, #24
 8012948:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 801294a:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 801294e:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8012952:	f7ff fe2b 	bl	80125ac <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>
	configuration_.register_info = register_;
 8012956:	2301      	movs	r3, #1
 8012958:	f8ad 600a 	strh.w	r6, [sp, #10]
 801295c:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 8012960:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 8012964:	f88d 000c 	strb.w	r0, [sp, #12]
 8012968:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 801296c:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 8012970:	2b00      	cmp	r3, #0
 8012972:	d0e5      	beq.n	8012940 <_ZN9Registers11AddRegisterIfEEbt.isra.0+0x24>
		registers.push_back(configuration_);
 8012974:	a902      	add	r1, sp, #8
 8012976:	1d20      	adds	r0, r4, #4
 8012978:	f7ff ffbf 	bl	80128fa <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 801297c:	e7e0      	b.n	8012940 <_ZN9Registers11AddRegisterIfEEbt.isra.0+0x24>

0801297e <_ZN9Registers11AddRegisterIhEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 801297e:	b570      	push	{r4, r5, r6, lr}
 8012980:	4604      	mov	r4, r0
 8012982:	b086      	sub	sp, #24
 8012984:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8012986:	6800      	ldr	r0, [r0, #0]
 8012988:	f04f 31ff 	mov.w	r1, #4294967295
 801298c:	f7f9 fc04 	bl	800c198 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 8012990:	f10d 0207 	add.w	r2, sp, #7
 8012994:	4631      	mov	r1, r6
 8012996:	4620      	mov	r0, r4
 8012998:	f002 f9df 	bl	8014d5a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 801299c:	f89d 5007 	ldrb.w	r5, [sp, #7]
 80129a0:	b125      	cbz	r5, 80129ac <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 80129a2:	6820      	ldr	r0, [r4, #0]
 80129a4:	f7f9 fc2c 	bl	800c200 <osSemaphoreRelease>
}
 80129a8:	b006      	add	sp, #24
 80129aa:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 80129ac:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 80129b0:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 80129b4:	f7ff fe48 	bl	8012648 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	configuration_.register_info = register_;
 80129b8:	2301      	movs	r3, #1
 80129ba:	f8ad 600a 	strh.w	r6, [sp, #10]
 80129be:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 80129c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 80129c6:	f88d 000c 	strb.w	r0, [sp, #12]
 80129ca:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 80129ce:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d0e5      	beq.n	80129a2 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
		registers.push_back(configuration_);
 80129d6:	a902      	add	r1, sp, #8
 80129d8:	1d20      	adds	r0, r4, #4
 80129da:	f7ff ff8e 	bl	80128fa <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 80129de:	e7e0      	b.n	80129a2 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>

080129e0 <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0>:
bool Registers::AddReadCallback(uint16_t ID, void* context, bool (*read)(void*, uint16_t, T**, uint16_t*)) {
 80129e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80129e2:	460c      	mov	r4, r1
 80129e4:	b087      	sub	sp, #28
 80129e6:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80129e8:	f04f 31ff 	mov.w	r1, #4294967295
 80129ec:	6800      	ldr	r0, [r0, #0]
bool Registers::AddReadCallback(uint16_t ID, void* context, bool (*read)(void*, uint16_t, T**, uint16_t*)) {
 80129ee:	461e      	mov	r6, r3
 80129f0:	4617      	mov	r7, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80129f2:	f7f9 fbd1 	bl	800c198 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80129f6:	4621      	mov	r1, r4
 80129f8:	f10d 0207 	add.w	r2, sp, #7
 80129fc:	4628      	mov	r0, r5
 80129fe:	f002 f9ac 	bl	8014d5a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8012a02:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8012a06:	4604      	mov	r4, r0
	if (!success) {
 8012a08:	b923      	cbnz	r3, 8012a14 <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0+0x34>
	osSemaphoreRelease(RegistersSemaphore);
 8012a0a:	6828      	ldr	r0, [r5, #0]
 8012a0c:	f7f9 fbf8 	bl	800c200 <osSemaphoreRelease>
}
 8012a10:	b007      	add	sp, #28
 8012a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8012a14:	f10d 0007 	add.w	r0, sp, #7
 8012a18:	f7ff fe16 	bl	8012648 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 8012a1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d0f2      	beq.n	8012a0a <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0+0x2a>
	if (target_register->register_info.type != registered_type) {
 8012a24:	7923      	ldrb	r3, [r4, #4]
 8012a26:	4298      	cmp	r0, r3
 8012a28:	d1ef      	bne.n	8012a0a <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0+0x2a>
	if (callbacks[target_register->register_info.type] == NULL) {
 8012a2a:	3004      	adds	r0, #4
 8012a2c:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8012a30:	2800      	cmp	r0, #0
 8012a32:	d0ea      	beq.n	8012a0a <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0+0x2a>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 8012a34:	7823      	ldrb	r3, [r4, #0]
 8012a36:	b983      	cbnz	r3, 8012a5a <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0+0x7a>
 8012a38:	7863      	ldrb	r3, [r4, #1]
 8012a3a:	b973      	cbnz	r3, 8012a5a <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0+0x7a>
		target_callback_list->push_back(callback);
 8012a3c:	a902      	add	r1, sp, #8
		callback.read = read;
 8012a3e:	9605      	str	r6, [sp, #20]
		callback.write = NULL;
 8012a40:	e9cd 7303 	strd	r7, r3, [sp, #12]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012a44:	e9d0 2300 	ldrd	r2, r3, [r0]
 8012a48:	1a9b      	subs	r3, r3, r2
 8012a4a:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8012a4c:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 8012a4e:	f7fc f9ad 	bl	800edac <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_>
	target_register->mode.callbacks = true;
 8012a52:	2301      	movs	r3, #1
 8012a54:	7063      	strb	r3, [r4, #1]
	target_register->access.read = true;
 8012a56:	7263      	strb	r3, [r4, #9]
 8012a58:	e7d7      	b.n	8012a0a <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0+0x2a>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8012a5a:	8961      	ldrh	r1, [r4, #10]
 8012a5c:	f7fc f80c 	bl	800ea78 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
		callback->context = context;
 8012a60:	6047      	str	r7, [r0, #4]
		callback->read = read;
 8012a62:	60c6      	str	r6, [r0, #12]
 8012a64:	e7f5      	b.n	8012a52 <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0+0x72>

08012a66 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8012a66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a68:	460c      	mov	r4, r1
 8012a6a:	b087      	sub	sp, #28
 8012a6c:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8012a6e:	f04f 31ff 	mov.w	r1, #4294967295
 8012a72:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8012a74:	461e      	mov	r6, r3
 8012a76:	4617      	mov	r7, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8012a78:	f7f9 fb8e 	bl	800c198 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8012a7c:	4621      	mov	r1, r4
 8012a7e:	f10d 0207 	add.w	r2, sp, #7
 8012a82:	4628      	mov	r0, r5
 8012a84:	f002 f969 	bl	8014d5a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8012a88:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8012a8c:	4604      	mov	r4, r0
	if (!success) {
 8012a8e:	b923      	cbnz	r3, 8012a9a <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x34>
	osSemaphoreRelease(RegistersSemaphore);
 8012a90:	6828      	ldr	r0, [r5, #0]
 8012a92:	f7f9 fbb5 	bl	800c200 <osSemaphoreRelease>
}
 8012a96:	b007      	add	sp, #28
 8012a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8012a9a:	f10d 0007 	add.w	r0, sp, #7
 8012a9e:	f7ff fdd3 	bl	8012648 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 8012aa2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d0f2      	beq.n	8012a90 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (target_register->register_info.type != registered_type) {
 8012aaa:	7923      	ldrb	r3, [r4, #4]
 8012aac:	4298      	cmp	r0, r3
 8012aae:	d1ef      	bne.n	8012a90 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (callbacks[target_register->register_info.type] == NULL) {
 8012ab0:	3004      	adds	r0, #4
 8012ab2:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8012ab6:	2800      	cmp	r0, #0
 8012ab8:	d0ea      	beq.n	8012a90 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 8012aba:	7823      	ldrb	r3, [r4, #0]
 8012abc:	b983      	cbnz	r3, 8012ae0 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
 8012abe:	7863      	ldrb	r3, [r4, #1]
 8012ac0:	b973      	cbnz	r3, 8012ae0 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
		callback.read = NULL;
 8012ac2:	9305      	str	r3, [sp, #20]
		target_callback_list->push_back(callback);
 8012ac4:	a902      	add	r1, sp, #8
 8012ac6:	e9d0 2300 	ldrd	r2, r3, [r0]
		callback.write = write;
 8012aca:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8012ace:	1a9b      	subs	r3, r3, r2
 8012ad0:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8012ad2:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 8012ad4:	f7fc f96a 	bl	800edac <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_>
	target_register->mode.callbacks = true;
 8012ad8:	2301      	movs	r3, #1
 8012ada:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 8012adc:	7223      	strb	r3, [r4, #8]
 8012ade:	e7d7      	b.n	8012a90 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8012ae0:	8961      	ldrh	r1, [r4, #10]
 8012ae2:	f7fb ffc9 	bl	800ea78 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
		callback->write = write;
 8012ae6:	e9c0 7601 	strd	r7, r6, [r0, #4]
 8012aea:	e7f5      	b.n	8012ad8 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x72>

08012aec <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8012aec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012af0:	e9d0 8900 	ldrd	r8, r9, [r0]
 8012af4:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 8012af6:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012afa:	eba9 0208 	sub.w	r2, r9, r8
 8012afe:	4607      	mov	r7, r0
 8012b00:	468a      	mov	sl, r1
	if (max_size() - size() < __n)
 8012b02:	ebb3 1f22 	cmp.w	r3, r2, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012b06:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
 8012b0a:	d102      	bne.n	8012b12 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8012b0c:	4820      	ldr	r0, [pc, #128]	@ (8012b90 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa4>)
 8012b0e:	f003 fdb5 	bl	801667c <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 8012b12:	45c1      	cmp	r9, r8
 8012b14:	bf14      	ite	ne
 8012b16:	4622      	movne	r2, r4
 8012b18:	2201      	moveq	r2, #1
 8012b1a:	eba1 0508 	sub.w	r5, r1, r8
 8012b1e:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8012b20:	d231      	bcs.n	8012b86 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8012b22:	b394      	cbz	r4, 8012b8a <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9e>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8012b24:	429c      	cmp	r4, r3
 8012b26:	bf28      	it	cs
 8012b28:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8012b2a:	0120      	lsls	r0, r4, #4
 8012b2c:	f003 fcf1 	bl	8016512 <_Znwj>
 8012b30:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8012b32:	eb06 0c05 	add.w	ip, r6, r5
      if (__count > 0)
 8012b36:	2d00      	cmp	r5, #0
 8012b38:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8012b3c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8012b40:	dd04      	ble.n	8012b4c <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x60>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8012b42:	462a      	mov	r2, r5
 8012b44:	4641      	mov	r1, r8
 8012b46:	4630      	mov	r0, r6
 8012b48:	f003 fe70 	bl	801682c <memmove>
      ptrdiff_t __count = __last - __first;
 8012b4c:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
 8012b50:	3510      	adds	r5, #16
      if (__count > 0)
 8012b52:	f1b9 0f00 	cmp.w	r9, #0
 8012b56:	4435      	add	r5, r6
 8012b58:	dd04      	ble.n	8012b64 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x78>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8012b5a:	464a      	mov	r2, r9
 8012b5c:	4651      	mov	r1, sl
 8012b5e:	4628      	mov	r0, r5
 8012b60:	f003 ff5c 	bl	8016a1c <memcpy>
      return __result + __count;
 8012b64:	444d      	add	r5, r9
	if (__p)
 8012b66:	f1b8 0f00 	cmp.w	r8, #0
 8012b6a:	d005      	beq.n	8012b78 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
 8012b6c:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8012b6e:	4640      	mov	r0, r8
 8012b70:	eba1 0108 	sub.w	r1, r1, r8
 8012b74:	f003 fca8 	bl	80164c8 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8012b78:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8012b7c:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 8012b80:	60be      	str	r6, [r7, #8]
    }
 8012b82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8012b86:	461c      	mov	r4, r3
 8012b88:	e7cf      	b.n	8012b2a <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8012b8a:	4626      	mov	r6, r4
 8012b8c:	e7d1      	b.n	8012b32 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
 8012b8e:	bf00      	nop
 8012b90:	08016b36 	.word	0x08016b36

08012b94 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8012b94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012b98:	e9d0 8900 	ldrd	r8, r9, [r0]
 8012b9c:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 8012b9e:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012ba2:	eba9 0208 	sub.w	r2, r9, r8
 8012ba6:	4607      	mov	r7, r0
 8012ba8:	468a      	mov	sl, r1
	if (max_size() - size() < __n)
 8012baa:	ebb3 1f22 	cmp.w	r3, r2, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012bae:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
 8012bb2:	d102      	bne.n	8012bba <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8012bb4:	4820      	ldr	r0, [pc, #128]	@ (8012c38 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa4>)
 8012bb6:	f003 fd61 	bl	801667c <_ZSt20__throw_length_errorPKc>
 8012bba:	45c1      	cmp	r9, r8
 8012bbc:	bf14      	ite	ne
 8012bbe:	4622      	movne	r2, r4
 8012bc0:	2201      	moveq	r2, #1
 8012bc2:	eba1 0508 	sub.w	r5, r1, r8
 8012bc6:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8012bc8:	d231      	bcs.n	8012c2e <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8012bca:	b394      	cbz	r4, 8012c32 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9e>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8012bcc:	429c      	cmp	r4, r3
 8012bce:	bf28      	it	cs
 8012bd0:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8012bd2:	0120      	lsls	r0, r4, #4
 8012bd4:	f003 fc9d 	bl	8016512 <_Znwj>
 8012bd8:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8012bda:	eb06 0c05 	add.w	ip, r6, r5
      if (__count > 0)
 8012bde:	2d00      	cmp	r5, #0
 8012be0:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8012be4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8012be8:	dd04      	ble.n	8012bf4 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x60>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8012bea:	462a      	mov	r2, r5
 8012bec:	4641      	mov	r1, r8
 8012bee:	4630      	mov	r0, r6
 8012bf0:	f003 fe1c 	bl	801682c <memmove>
      ptrdiff_t __count = __last - __first;
 8012bf4:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
 8012bf8:	3510      	adds	r5, #16
      if (__count > 0)
 8012bfa:	f1b9 0f00 	cmp.w	r9, #0
 8012bfe:	4435      	add	r5, r6
 8012c00:	dd04      	ble.n	8012c0c <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x78>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8012c02:	464a      	mov	r2, r9
 8012c04:	4651      	mov	r1, sl
 8012c06:	4628      	mov	r0, r5
 8012c08:	f003 ff08 	bl	8016a1c <memcpy>
      return __result + __count;
 8012c0c:	444d      	add	r5, r9
	if (__p)
 8012c0e:	f1b8 0f00 	cmp.w	r8, #0
 8012c12:	d005      	beq.n	8012c20 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
 8012c14:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8012c16:	4640      	mov	r0, r8
 8012c18:	eba1 0108 	sub.w	r1, r1, r8
 8012c1c:	f003 fc54 	bl	80164c8 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8012c20:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8012c24:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 8012c28:	60be      	str	r6, [r7, #8]
    }
 8012c2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8012c2e:	461c      	mov	r4, r3
 8012c30:	e7cf      	b.n	8012bd2 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8012c32:	4626      	mov	r6, r4
 8012c34:	e7d1      	b.n	8012bda <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
 8012c36:	bf00      	nop
 8012c38:	08016b36 	.word	0x08016b36

08012c3c <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 8012c3c:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8012c3e:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
      push_back(const value_type& __x)
 8012c42:	4605      	mov	r5, r0
 8012c44:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8012c46:	429c      	cmp	r4, r3
 8012c48:	d005      	beq.n	8012c56 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE9push_backERKS1_+0x1a>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8012c4a:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 8012c4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8012c50:	3410      	adds	r4, #16
 8012c52:	606c      	str	r4, [r5, #4]
      }
 8012c54:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
 8012c56:	4621      	mov	r1, r4
 8012c58:	f7ff ff9c 	bl	8012b94 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8012c5c:	e7fa      	b.n	8012c54 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE9push_backERKS1_+0x18>

08012c5e <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>:
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 8012c5e:	b570      	push	{r4, r5, r6, lr}
 8012c60:	460c      	mov	r4, r1
 8012c62:	b086      	sub	sp, #24
 8012c64:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8012c66:	f04f 31ff 	mov.w	r1, #4294967295
 8012c6a:	6800      	ldr	r0, [r0, #0]
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 8012c6c:	4616      	mov	r6, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8012c6e:	f7f9 fa93 	bl	800c198 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8012c72:	4621      	mov	r1, r4
 8012c74:	f10d 0207 	add.w	r2, sp, #7
 8012c78:	4628      	mov	r0, r5
 8012c7a:	f002 f86e 	bl	8014d5a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8012c7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8012c82:	4604      	mov	r4, r0
	if (!success) {
 8012c84:	b923      	cbnz	r3, 8012c90 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x32>
	osSemaphoreRelease(RegistersSemaphore);
 8012c86:	6828      	ldr	r0, [r5, #0]
 8012c88:	f7f9 faba 	bl	800c200 <osSemaphoreRelease>
}
 8012c8c:	b006      	add	sp, #24
 8012c8e:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8012c90:	f10d 0007 	add.w	r0, sp, #7
 8012c94:	f7ff fc8a 	bl	80125ac <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>
	if (!success) {
 8012c98:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d0f2      	beq.n	8012c86 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x28>
	if (target_register->register_info.type != registered_type) {
 8012ca0:	7923      	ldrb	r3, [r4, #4]
 8012ca2:	4298      	cmp	r0, r3
 8012ca4:	d1ef      	bne.n	8012c86 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x28>
	if (callbacks[target_register->register_info.type] == NULL) {
 8012ca6:	3004      	adds	r0, #4
 8012ca8:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8012cac:	2800      	cmp	r0, #0
 8012cae:	d0ea      	beq.n	8012c86 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x28>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 8012cb0:	7823      	ldrb	r3, [r4, #0]
 8012cb2:	b983      	cbnz	r3, 8012cd6 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x78>
 8012cb4:	7863      	ldrb	r3, [r4, #1]
 8012cb6:	b973      	cbnz	r3, 8012cd6 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x78>
		target_callback_list->push_back(callback);
 8012cb8:	a902      	add	r1, sp, #8
		callback.pointer = pointer;
 8012cba:	9602      	str	r6, [sp, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012cbc:	e9d0 2300 	ldrd	r2, r3, [r0]
 8012cc0:	1a9b      	subs	r3, r3, r2
 8012cc2:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8012cc4:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 8012cc6:	f7ff ffb9 	bl	8012c3c <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE9push_backERKS1_>
	target_register->mode.pointer = true;
 8012cca:	2301      	movs	r3, #1
 8012ccc:	7023      	strb	r3, [r4, #0]
	target_register->access.write = true;
 8012cce:	f240 1301 	movw	r3, #257	@ 0x101
 8012cd2:	8123      	strh	r3, [r4, #8]
 8012cd4:	e7d7      	b.n	8012c86 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x28>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8012cd6:	8961      	ldrh	r1, [r4, #10]
 8012cd8:	f7fc fa4c 	bl	800f174 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE2atEj>
		callback->pointer = pointer;
 8012cdc:	6006      	str	r6, [r0, #0]
 8012cde:	e7f4      	b.n	8012cca <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x6c>

08012ce0 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8012ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ce2:	460c      	mov	r4, r1
 8012ce4:	b087      	sub	sp, #28
 8012ce6:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8012ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8012cec:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8012cee:	461e      	mov	r6, r3
 8012cf0:	4617      	mov	r7, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8012cf2:	f7f9 fa51 	bl	800c198 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8012cf6:	4621      	mov	r1, r4
 8012cf8:	f10d 0207 	add.w	r2, sp, #7
 8012cfc:	4628      	mov	r0, r5
 8012cfe:	f002 f82c 	bl	8014d5a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8012d02:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8012d06:	4604      	mov	r4, r0
	if (!success) {
 8012d08:	b923      	cbnz	r3, 8012d14 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x34>
	osSemaphoreRelease(RegistersSemaphore);
 8012d0a:	6828      	ldr	r0, [r5, #0]
 8012d0c:	f7f9 fa78 	bl	800c200 <osSemaphoreRelease>
}
 8012d10:	b007      	add	sp, #28
 8012d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8012d14:	f10d 0007 	add.w	r0, sp, #7
 8012d18:	f7ff fc48 	bl	80125ac <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>
	if (!success) {
 8012d1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d0f2      	beq.n	8012d0a <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (target_register->register_info.type != registered_type) {
 8012d24:	7923      	ldrb	r3, [r4, #4]
 8012d26:	4298      	cmp	r0, r3
 8012d28:	d1ef      	bne.n	8012d0a <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (callbacks[target_register->register_info.type] == NULL) {
 8012d2a:	3004      	adds	r0, #4
 8012d2c:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8012d30:	2800      	cmp	r0, #0
 8012d32:	d0ea      	beq.n	8012d0a <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 8012d34:	7823      	ldrb	r3, [r4, #0]
 8012d36:	b983      	cbnz	r3, 8012d5a <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
 8012d38:	7863      	ldrb	r3, [r4, #1]
 8012d3a:	b973      	cbnz	r3, 8012d5a <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
		callback.read = NULL;
 8012d3c:	9305      	str	r3, [sp, #20]
		target_callback_list->push_back(callback);
 8012d3e:	a902      	add	r1, sp, #8
 8012d40:	e9d0 2300 	ldrd	r2, r3, [r0]
		callback.write = write;
 8012d44:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8012d48:	1a9b      	subs	r3, r3, r2
 8012d4a:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8012d4c:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 8012d4e:	f7ff ff75 	bl	8012c3c <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE9push_backERKS1_>
	target_register->mode.callbacks = true;
 8012d52:	2301      	movs	r3, #1
 8012d54:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 8012d56:	7223      	strb	r3, [r4, #8]
 8012d58:	e7d7      	b.n	8012d0a <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8012d5a:	8961      	ldrh	r1, [r4, #10]
 8012d5c:	f7fc fa0a 	bl	800f174 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE2atEj>
		callback->write = write;
 8012d60:	e9c0 7601 	strd	r7, r6, [r0, #4]
 8012d64:	e7f5      	b.n	8012d52 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x72>
	...

08012d68 <_ZN15MotionGenerator12AddRegistersEv>:
void MotionGenerator::AddRegisters(void) {
 8012d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d6c:	4604      	mov	r4, r0
 8012d6e:	b086      	sub	sp, #24
	registers->AddRegister<uint8_t>(REG_GEN_CONFIGURE_MODULES);
 8012d70:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8012d74:	6800      	ldr	r0, [r0, #0]
	registers->SetRegisterAsSingle(REG_GEN_CONFIGURE_MODULES);
 8012d76:	4625      	mov	r5, r4
	registers->AddRegister<uint8_t>(REG_GEN_CONFIGURE_MODULES);
 8012d78:	f7ff fe01 	bl	801297e <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_GEN_CONFIGURE_MODULES);
 8012d7c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
	registers->AddRegisterSemaphore(REG_GEN_SETPOINTS, &GeneratorSemaphore);
 8012d80:	4626      	mov	r6, r4
	registers->SetRegisterAsSingle(REG_GEN_CONFIGURE_MODULES);
 8012d82:	f855 0b10 	ldr.w	r0, [r5], #16
 8012d86:	f002 f821 	bl	8014dcc <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_GEN_GENERATOR_STATUS, &GeneratorSemaphore);
 8012d8a:	f240 4102 	movw	r1, #1026	@ 0x402
 8012d8e:	462a      	mov	r2, r5
 8012d90:	6820      	ldr	r0, [r4, #0]
 8012d92:	f002 f801 	bl	8014d98 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddWriteCallback<uint8_t>(REG_GEN_CONFIGURE_MODULES, (void*) this,
 8012d96:	4bc2      	ldr	r3, [pc, #776]	@ (80130a0 <_ZN15MotionGenerator12AddRegistersEv+0x338>)
 8012d98:	4622      	mov	r2, r4
 8012d9a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8012d9e:	6820      	ldr	r0, [r4, #0]
 8012da0:	f7ff fe61 	bl	8012a66 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_GEN_MODULES_CONTROLLER_STATUS);
 8012da4:	f240 4101 	movw	r1, #1025	@ 0x401
 8012da8:	6820      	ldr	r0, [r4, #0]
 8012daa:	f7ff fde8 	bl	801297e <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_GEN_MODULES_CONTROLLER_STATUS);
 8012dae:	f240 4101 	movw	r1, #1025	@ 0x401
 8012db2:	6820      	ldr	r0, [r4, #0]
 8012db4:	f002 f80a 	bl	8014dcc <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_GEN_GENERATOR_STATUS, &GeneratorSemaphore);
 8012db8:	462a      	mov	r2, r5
 8012dba:	f240 4102 	movw	r1, #1026	@ 0x402
 8012dbe:	6820      	ldr	r0, [r4, #0]
 8012dc0:	f001 ffea 	bl	8014d98 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddWriteCallback<uint8_t>(REG_GEN_MODULES_CONTROLLER_STATUS, (void*) this,
 8012dc4:	4bb7      	ldr	r3, [pc, #732]	@ (80130a4 <_ZN15MotionGenerator12AddRegistersEv+0x33c>)
 8012dc6:	4622      	mov	r2, r4
 8012dc8:	f240 4101 	movw	r1, #1025	@ 0x401
 8012dcc:	6820      	ldr	r0, [r4, #0]
 8012dce:	f7ff fe4a 	bl	8012a66 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_GEN_GENERATOR_STATUS);
 8012dd2:	f240 4102 	movw	r1, #1026	@ 0x402
 8012dd6:	6820      	ldr	r0, [r4, #0]
 8012dd8:	f7ff fdd1 	bl	801297e <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_GEN_GENERATOR_STATUS);
 8012ddc:	f240 4102 	movw	r1, #1026	@ 0x402
 8012de0:	6820      	ldr	r0, [r4, #0]
 8012de2:	f001 fff3 	bl	8014dcc <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_GEN_GENERATOR_STATUS, &GeneratorSemaphore);
 8012de6:	462a      	mov	r2, r5
 8012de8:	f240 4102 	movw	r1, #1026	@ 0x402
 8012dec:	6820      	ldr	r0, [r4, #0]
 8012dee:	f001 ffd3 	bl	8014d98 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddReadCallback<uint8_t>(REG_GEN_GENERATOR_STATUS, (void*) this,
 8012df2:	4bad      	ldr	r3, [pc, #692]	@ (80130a8 <_ZN15MotionGenerator12AddRegistersEv+0x340>)
 8012df4:	4622      	mov	r2, r4
 8012df6:	f240 4102 	movw	r1, #1026	@ 0x402
 8012dfa:	6820      	ldr	r0, [r4, #0]
 8012dfc:	f7ff fdf0 	bl	80129e0 <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0>
	registers->AddWriteCallback<uint8_t>(REG_GEN_GENERATOR_STATUS, (void*) this,
 8012e00:	4baa      	ldr	r3, [pc, #680]	@ (80130ac <_ZN15MotionGenerator12AddRegistersEv+0x344>)
 8012e02:	4622      	mov	r2, r4
 8012e04:	f240 4102 	movw	r1, #1026	@ 0x402
 8012e08:	6820      	ldr	r0, [r4, #0]
 8012e0a:	f7ff fe2c 	bl	8012a66 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<float>(REG_GEN_SETPOINTS);
 8012e0e:	f240 4103 	movw	r1, #1027	@ 0x403
 8012e12:	6820      	ldr	r0, [r4, #0]
 8012e14:	f7ff fd82 	bl	801291c <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsVector(REG_GEN_SETPOINTS);
 8012e18:	f240 4103 	movw	r1, #1027	@ 0x403
 8012e1c:	6820      	ldr	r0, [r4, #0]
 8012e1e:	f002 f80d 	bl	8014e3c <_ZN9Registers19SetRegisterAsVectorEt>
	registers->AddRegisterSemaphore(REG_GEN_SETPOINTS, &GeneratorSemaphore);
 8012e22:	f856 0b50 	ldr.w	r0, [r6], #80
 8012e26:	462a      	mov	r2, r5
 8012e28:	f240 4103 	movw	r1, #1027	@ 0x403
 8012e2c:	f001 ffb4 	bl	8014d98 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	return AddRegisterPointer(ID, reinterpreted_pointer);
 8012e30:	4632      	mov	r2, r6
 8012e32:	f240 4103 	movw	r1, #1027	@ 0x403
 8012e36:	6820      	ldr	r0, [r4, #0]
 8012e38:	f7ff ff11 	bl	8012c5e <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->SetRegisterPermissions(REG_GEN_SETPOINTS, READ_PERMISSION);
 8012e3c:	2202      	movs	r2, #2
 8012e3e:	f240 4103 	movw	r1, #1027	@ 0x403
 8012e42:	6820      	ldr	r0, [r4, #0]
 8012e44:	f001 fffd 	bl	8014e42 <_ZN9Registers22SetRegisterPermissionsEth>
	registers->AddRegister<uint32_t>(REG_GEN_PERIOD);
 8012e48:	6826      	ldr	r6, [r4, #0]
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8012e4a:	f04f 31ff 	mov.w	r1, #4294967295
 8012e4e:	6830      	ldr	r0, [r6, #0]
 8012e50:	f7f9 f9a2 	bl	800c198 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 8012e54:	f10d 0207 	add.w	r2, sp, #7
 8012e58:	f240 4104 	movw	r1, #1028	@ 0x404
 8012e5c:	4630      	mov	r0, r6
 8012e5e:	f001 ff7c 	bl	8014d5a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 8012e62:	f89d 7007 	ldrb.w	r7, [sp, #7]
 8012e66:	2f00      	cmp	r7, #0
 8012e68:	f000 8100 	beq.w	801306c <_ZN15MotionGenerator12AddRegistersEv+0x304>
	osSemaphoreRelease(RegistersSemaphore);
 8012e6c:	6830      	ldr	r0, [r6, #0]
 8012e6e:	f7f9 f9c7 	bl	800c200 <osSemaphoreRelease>
	registers->SetRegisterAsSingle(REG_GEN_PERIOD);
 8012e72:	f240 4104 	movw	r1, #1028	@ 0x404
 8012e76:	6820      	ldr	r0, [r4, #0]
 8012e78:	f001 ffa8 	bl	8014dcc <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_GEN_PERIOD, &GeneratorSemaphore);
 8012e7c:	462a      	mov	r2, r5
 8012e7e:	f240 4104 	movw	r1, #1028	@ 0x404
 8012e82:	6820      	ldr	r0, [r4, #0]
 8012e84:	f001 ff88 	bl	8014d98 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<uint32_t>(REG_GEN_PERIOD, &period_ms);
 8012e88:	f8d4 8000 	ldr.w	r8, [r4]
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8012e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8012e90:	f8d8 0000 	ldr.w	r0, [r8]
 8012e94:	f7f9 f980 	bl	800c198 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8012e98:	f10d 0207 	add.w	r2, sp, #7
 8012e9c:	f240 4104 	movw	r1, #1028	@ 0x404
 8012ea0:	4640      	mov	r0, r8
 8012ea2:	f001 ff5a 	bl	8014d5a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8012ea6:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8012eaa:	4606      	mov	r6, r0
	if (!success) {
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	f040 810d 	bne.w	80130cc <_ZN15MotionGenerator12AddRegistersEv+0x364>
	osSemaphoreRelease(RegistersSemaphore);
 8012eb2:	f8d8 0000 	ldr.w	r0, [r8]
	registers->AddRegisterSemaphore(REG_GEN_MODULE_LENGTH, &GeneratorSemaphore);
 8012eb6:	4626      	mov	r6, r4
 8012eb8:	f7f9 f9a2 	bl	800c200 <osSemaphoreRelease>
	registers->AddRegister<uint8_t>(REG_GEN_NB_MODULES);
 8012ebc:	6820      	ldr	r0, [r4, #0]
 8012ebe:	f240 4105 	movw	r1, #1029	@ 0x405
 8012ec2:	f7ff fd5c 	bl	801297e <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_GEN_NB_MODULES);
 8012ec6:	f240 4105 	movw	r1, #1029	@ 0x405
 8012eca:	6820      	ldr	r0, [r4, #0]
 8012ecc:	f001 ff7e 	bl	8014dcc <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddReadCallback<uint8_t>(REG_GEN_NB_MODULES, (void*) this,
 8012ed0:	4622      	mov	r2, r4
 8012ed2:	6820      	ldr	r0, [r4, #0]
 8012ed4:	f240 4105 	movw	r1, #1029	@ 0x405
 8012ed8:	4b75      	ldr	r3, [pc, #468]	@ (80130b0 <_ZN15MotionGenerator12AddRegistersEv+0x348>)
 8012eda:	f7ff fd81 	bl	80129e0 <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0>
	registers->AddWriteCallback<uint8_t>(REG_GEN_NB_MODULES, (void*) this,
 8012ede:	4b75      	ldr	r3, [pc, #468]	@ (80130b4 <_ZN15MotionGenerator12AddRegistersEv+0x34c>)
 8012ee0:	4622      	mov	r2, r4
 8012ee2:	6820      	ldr	r0, [r4, #0]
 8012ee4:	f240 4105 	movw	r1, #1029	@ 0x405
 8012ee8:	f7ff fdbd 	bl	8012a66 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<float>(REG_GEN_GENERATOR_OFFSET);
 8012eec:	6820      	ldr	r0, [r4, #0]
 8012eee:	f240 4106 	movw	r1, #1030	@ 0x406
 8012ef2:	f7ff fd13 	bl	801291c <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsArray(REG_GEN_GENERATOR_OFFSET, 2);
 8012ef6:	2202      	movs	r2, #2
 8012ef8:	f240 4106 	movw	r1, #1030	@ 0x406
 8012efc:	6820      	ldr	r0, [r4, #0]
 8012efe:	f001 ff81 	bl	8014e04 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<float>(REG_GEN_GENERATOR_OFFSET, (void*) this,
 8012f02:	4622      	mov	r2, r4
 8012f04:	4b6c      	ldr	r3, [pc, #432]	@ (80130b8 <_ZN15MotionGenerator12AddRegistersEv+0x350>)
 8012f06:	f240 4106 	movw	r1, #1030	@ 0x406
 8012f0a:	6820      	ldr	r0, [r4, #0]
 8012f0c:	f7ff fee8 	bl	8012ce0 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_GEN_RESET_GENERATOR_OFFSETS);
 8012f10:	6820      	ldr	r0, [r4, #0]
 8012f12:	f240 4107 	movw	r1, #1031	@ 0x407
 8012f16:	f7ff fd32 	bl	801297e <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_GEN_RESET_GENERATOR_OFFSETS);
 8012f1a:	f240 4107 	movw	r1, #1031	@ 0x407
 8012f1e:	6820      	ldr	r0, [r4, #0]
 8012f20:	f001 ff54 	bl	8014dcc <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_GEN_RESET_GENERATOR_OFFSETS, (void*) this,
 8012f24:	4b65      	ldr	r3, [pc, #404]	@ (80130bc <_ZN15MotionGenerator12AddRegistersEv+0x354>)
 8012f26:	4622      	mov	r2, r4
 8012f28:	6820      	ldr	r0, [r4, #0]
 8012f2a:	f240 4107 	movw	r1, #1031	@ 0x407
 8012f2e:	f7ff fd9a 	bl	8012a66 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<float>(REG_GEN_POSITION_OFFSET);
 8012f32:	6820      	ldr	r0, [r4, #0]
 8012f34:	f44f 6181 	mov.w	r1, #1032	@ 0x408
 8012f38:	f7ff fcf0 	bl	801291c <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsArray(REG_GEN_POSITION_OFFSET, 2);
 8012f3c:	2202      	movs	r2, #2
 8012f3e:	f44f 6181 	mov.w	r1, #1032	@ 0x408
 8012f42:	6820      	ldr	r0, [r4, #0]
 8012f44:	f001 ff5e 	bl	8014e04 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<float>(REG_GEN_POSITION_OFFSET, (void*) this,
 8012f48:	4622      	mov	r2, r4
 8012f4a:	4b5d      	ldr	r3, [pc, #372]	@ (80130c0 <_ZN15MotionGenerator12AddRegistersEv+0x358>)
 8012f4c:	f44f 6181 	mov.w	r1, #1032	@ 0x408
 8012f50:	6820      	ldr	r0, [r4, #0]
 8012f52:	f7ff fec5 	bl	8012ce0 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_GEN_RESET_POSITION_OFFSETS);
 8012f56:	6820      	ldr	r0, [r4, #0]
 8012f58:	f240 4109 	movw	r1, #1033	@ 0x409
 8012f5c:	f7ff fd0f 	bl	801297e <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_GEN_RESET_POSITION_OFFSETS);
 8012f60:	f240 4109 	movw	r1, #1033	@ 0x409
 8012f64:	6820      	ldr	r0, [r4, #0]
 8012f66:	f001 ff31 	bl	8014dcc <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_GEN_RESET_POSITION_OFFSETS, (void*) this,
 8012f6a:	4b56      	ldr	r3, [pc, #344]	@ (80130c4 <_ZN15MotionGenerator12AddRegistersEv+0x35c>)
 8012f6c:	4622      	mov	r2, r4
 8012f6e:	6820      	ldr	r0, [r4, #0]
 8012f70:	f240 4109 	movw	r1, #1033	@ 0x409
 8012f74:	f7ff fd77 	bl	8012a66 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<float>(REG_GEN_MODULE_LENGTH);
 8012f78:	6820      	ldr	r0, [r4, #0]
 8012f7a:	f240 410a 	movw	r1, #1034	@ 0x40a
 8012f7e:	f7ff fccd 	bl	801291c <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_GEN_MODULE_LENGTH);
 8012f82:	f240 410a 	movw	r1, #1034	@ 0x40a
 8012f86:	6820      	ldr	r0, [r4, #0]
 8012f88:	f001 ff20 	bl	8014dcc <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_GEN_MODULE_LENGTH, &GeneratorSemaphore);
 8012f8c:	f856 0b20 	ldr.w	r0, [r6], #32
 8012f90:	462a      	mov	r2, r5
 8012f92:	f240 410a 	movw	r1, #1034	@ 0x40a
 8012f96:	f001 feff 	bl	8014d98 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_GEN_MODULE_LENGTH, &module_length);
 8012f9a:	4632      	mov	r2, r6
 8012f9c:	6820      	ldr	r0, [r4, #0]
 8012f9e:	f240 410a 	movw	r1, #1034	@ 0x40a
 8012fa2:	f7ff fe5c 	bl	8012c5e <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->AddRegisterSemaphore(REG_GEN_AMPLITUDE, &GeneratorSemaphore);
 8012fa6:	4626      	mov	r6, r4
	registers->AddRegister<float>(REG_GEN_AMPLITUDE);
 8012fa8:	6820      	ldr	r0, [r4, #0]
 8012faa:	f240 410b 	movw	r1, #1035	@ 0x40b
 8012fae:	f7ff fcb5 	bl	801291c <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_GEN_AMPLITUDE);
 8012fb2:	f240 410b 	movw	r1, #1035	@ 0x40b
 8012fb6:	6820      	ldr	r0, [r4, #0]
 8012fb8:	f001 ff08 	bl	8014dcc <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_GEN_AMPLITUDE, &GeneratorSemaphore);
 8012fbc:	f856 0b3c 	ldr.w	r0, [r6], #60
 8012fc0:	462a      	mov	r2, r5
 8012fc2:	f240 410b 	movw	r1, #1035	@ 0x40b
 8012fc6:	f001 fee7 	bl	8014d98 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_GEN_AMPLITUDE, &amplitude);
 8012fca:	4632      	mov	r2, r6
 8012fcc:	6820      	ldr	r0, [r4, #0]
 8012fce:	f240 410b 	movw	r1, #1035	@ 0x40b
 8012fd2:	f7ff fe44 	bl	8012c5e <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->AddRegisterSemaphore(REG_GEN_FREQUENCY, &GeneratorSemaphore);
 8012fd6:	4626      	mov	r6, r4
	registers->AddRegister<float>(REG_GEN_FREQUENCY);
 8012fd8:	6820      	ldr	r0, [r4, #0]
 8012fda:	f240 410c 	movw	r1, #1036	@ 0x40c
 8012fde:	f7ff fc9d 	bl	801291c <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_GEN_FREQUENCY);
 8012fe2:	f240 410c 	movw	r1, #1036	@ 0x40c
 8012fe6:	6820      	ldr	r0, [r4, #0]
 8012fe8:	f001 fef0 	bl	8014dcc <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_GEN_FREQUENCY, &GeneratorSemaphore);
 8012fec:	f856 0b40 	ldr.w	r0, [r6], #64
 8012ff0:	462a      	mov	r2, r5
 8012ff2:	f240 410c 	movw	r1, #1036	@ 0x40c
 8012ff6:	f001 fecf 	bl	8014d98 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_GEN_FREQUENCY, &frequency);
 8012ffa:	4632      	mov	r2, r6
 8012ffc:	6820      	ldr	r0, [r4, #0]
 8012ffe:	f240 410c 	movw	r1, #1036	@ 0x40c
 8013002:	f7ff fe2c 	bl	8012c5e <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->AddRegisterSemaphore(REG_GEN_WAVELENGTH_INVERSE, &GeneratorSemaphore);
 8013006:	4626      	mov	r6, r4
	registers->AddRegister<float>(REG_GEN_WAVELENGTH_INVERSE);
 8013008:	6820      	ldr	r0, [r4, #0]
 801300a:	f240 410d 	movw	r1, #1037	@ 0x40d
 801300e:	f7ff fc85 	bl	801291c <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_GEN_WAVELENGTH_INVERSE);
 8013012:	f240 410d 	movw	r1, #1037	@ 0x40d
 8013016:	6820      	ldr	r0, [r4, #0]
 8013018:	f001 fed8 	bl	8014dcc <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_GEN_WAVELENGTH_INVERSE, &GeneratorSemaphore);
 801301c:	f856 0b44 	ldr.w	r0, [r6], #68
 8013020:	462a      	mov	r2, r5
 8013022:	f240 410d 	movw	r1, #1037	@ 0x40d
 8013026:	f001 feb7 	bl	8014d98 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_GEN_WAVELENGTH_INVERSE, &wavelength_inverse);
 801302a:	4632      	mov	r2, r6
 801302c:	6820      	ldr	r0, [r4, #0]
 801302e:	f240 410d 	movw	r1, #1037	@ 0x40d
 8013032:	f7ff fe14 	bl	8012c5e <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->AddRegister<float>(REG_GEN_PHASE);
 8013036:	6820      	ldr	r0, [r4, #0]
 8013038:	f240 410e 	movw	r1, #1038	@ 0x40e
 801303c:	f7ff fc6e 	bl	801291c <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_GEN_PHASE);
 8013040:	f240 410e 	movw	r1, #1038	@ 0x40e
 8013044:	6820      	ldr	r0, [r4, #0]
 8013046:	f001 fec1 	bl	8014dcc <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_GEN_PHASE, &GeneratorSemaphore);
 801304a:	462a      	mov	r2, r5
 801304c:	4625      	mov	r5, r4
 801304e:	f240 410e 	movw	r1, #1038	@ 0x40e
 8013052:	f855 0b48 	ldr.w	r0, [r5], #72
 8013056:	f001 fe9f 	bl	8014d98 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_GEN_PHASE, &phase);
 801305a:	f240 410e 	movw	r1, #1038	@ 0x40e
 801305e:	462a      	mov	r2, r5
 8013060:	6820      	ldr	r0, [r4, #0]
}
 8013062:	b006      	add	sp, #24
 8013064:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	registers->AddRegisterPointer<float>(REG_GEN_PHASE, &phase);
 8013068:	f7ff bdf9 	b.w	8012c5e <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 801306c:	f10d 0007 	add.w	r0, sp, #7
 8013070:	f7ff fa4e 	bl	8012510 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	configuration_.mode = mode;
 8013074:	4b14      	ldr	r3, [pc, #80]	@ (80130c8 <_ZN15MotionGenerator12AddRegistersEv+0x360>)
	configuration_.register_info = register_;
 8013076:	f88d 000c 	strb.w	r0, [sp, #12]
	configuration_.mode = mode;
 801307a:	9302      	str	r3, [sp, #8]
	configuration_.register_info = register_;
 801307c:	2301      	movs	r3, #1
 801307e:	f88d 700d 	strb.w	r7, [sp, #13]
 8013082:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 8013086:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_semaphore = NULL;
 801308a:	e9cd 7704 	strd	r7, r7, [sp, #16]
	if (success) {
 801308e:	2b00      	cmp	r3, #0
 8013090:	f43f aeec 	beq.w	8012e6c <_ZN15MotionGenerator12AddRegistersEv+0x104>
		registers.push_back(configuration_);
 8013094:	a902      	add	r1, sp, #8
 8013096:	1d30      	adds	r0, r6, #4
 8013098:	f7ff fc2f 	bl	80128fa <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 801309c:	e6e6      	b.n	8012e6c <_ZN15MotionGenerator12AddRegistersEv+0x104>
 801309e:	bf00      	nop
 80130a0:	08012491 	.word	0x08012491
 80130a4:	0801249b 	.word	0x0801249b
 80130a8:	080124d5 	.word	0x080124d5
 80130ac:	08013319 	.word	0x08013319
 80130b0:	080124af 	.word	0x080124af
 80130b4:	08013265 	.word	0x08013265
 80130b8:	0801277f 	.word	0x0801277f
 80130bc:	080126e5 	.word	0x080126e5
 80130c0:	0801280d 	.word	0x0801280d
 80130c4:	080126f7 	.word	0x080126f7
 80130c8:	04040000 	.word	0x04040000
	uint8_t registered_type = GetTypeID<T>(&success);
 80130cc:	f10d 0007 	add.w	r0, sp, #7
 80130d0:	f7ff fa1e 	bl	8012510 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	if (!success) {
 80130d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80130d8:	2b00      	cmp	r3, #0
 80130da:	f43f aeea 	beq.w	8012eb2 <_ZN15MotionGenerator12AddRegistersEv+0x14a>
	if (target_register->register_info.type != registered_type) {
 80130de:	7933      	ldrb	r3, [r6, #4]
 80130e0:	4298      	cmp	r0, r3
 80130e2:	f47f aee6 	bne.w	8012eb2 <_ZN15MotionGenerator12AddRegistersEv+0x14a>
	if (callbacks[target_register->register_info.type] == NULL) {
 80130e6:	3004      	adds	r0, #4
 80130e8:	f858 c020 	ldr.w	ip, [r8, r0, lsl #2]
 80130ec:	f1bc 0f00 	cmp.w	ip, #0
 80130f0:	f43f aedf 	beq.w	8012eb2 <_ZN15MotionGenerator12AddRegistersEv+0x14a>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 80130f4:	7831      	ldrb	r1, [r6, #0]
	registers->AddRegisterPointer<uint32_t>(REG_GEN_PERIOD, &period_ms);
 80130f6:	f104 0018 	add.w	r0, r4, #24
 80130fa:	e9dc 3700 	ldrd	r3, r7, [ip]
 80130fe:	1afa      	subs	r2, r7, r3
 8013100:	1112      	asrs	r2, r2, #4
 8013102:	b9c1      	cbnz	r1, 8013136 <_ZN15MotionGenerator12AddRegistersEv+0x3ce>
 8013104:	7871      	ldrb	r1, [r6, #1]
 8013106:	b9b1      	cbnz	r1, 8013136 <_ZN15MotionGenerator12AddRegistersEv+0x3ce>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8013108:	f8dc 1008 	ldr.w	r1, [ip, #8]
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 801310c:	8172      	strh	r2, [r6, #10]
 801310e:	aa02      	add	r2, sp, #8
 8013110:	42b9      	cmp	r1, r7
		callback.pointer = pointer;
 8013112:	9002      	str	r0, [sp, #8]
 8013114:	d00b      	beq.n	801312e <_ZN15MotionGenerator12AddRegistersEv+0x3c6>
 8013116:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8013118:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 801311c:	3710      	adds	r7, #16
 801311e:	f8cc 7004 	str.w	r7, [ip, #4]
	target_register->mode.pointer = true;
 8013122:	2301      	movs	r3, #1
 8013124:	7033      	strb	r3, [r6, #0]
	target_register->access.write = true;
 8013126:	f240 1301 	movw	r3, #257	@ 0x101
 801312a:	8133      	strh	r3, [r6, #8]
 801312c:	e6c1      	b.n	8012eb2 <_ZN15MotionGenerator12AddRegistersEv+0x14a>
	  _M_realloc_insert(end(), __x);
 801312e:	4660      	mov	r0, ip
 8013130:	f7ff fcdc 	bl	8012aec <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	} else {
 8013134:	e7f5      	b.n	8013122 <_ZN15MotionGenerator12AddRegistersEv+0x3ba>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8013136:	8971      	ldrh	r1, [r6, #10]
	if (__n >= this->size())
 8013138:	4291      	cmp	r1, r2
 801313a:	d302      	bcc.n	8013142 <_ZN15MotionGenerator12AddRegistersEv+0x3da>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 801313c:	4802      	ldr	r0, [pc, #8]	@ (8013148 <_ZN15MotionGenerator12AddRegistersEv+0x3e0>)
 801313e:	f003 faa0 	bl	8016682 <_ZSt24__throw_out_of_range_fmtPKcz>
		callback->pointer = pointer;
 8013142:	0109      	lsls	r1, r1, #4
 8013144:	5058      	str	r0, [r3, r1]
 8013146:	e7ec      	b.n	8013122 <_ZN15MotionGenerator12AddRegistersEv+0x3ba>
 8013148:	08016d78 	.word	0x08016d78

0801314c <_ZNSt6vectorIfSaIfEE6resizeEj>:
      resize(size_type __new_size)
 801314c:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801314e:	e9d0 2500 	ldrd	r2, r5, [r0]
 8013152:	1aac      	subs	r4, r5, r2
 8013154:	10a4      	asrs	r4, r4, #2
	if (__new_size > size())
 8013156:	42a1      	cmp	r1, r4
 8013158:	d903      	bls.n	8013162 <_ZNSt6vectorIfSaIfEE6resizeEj+0x16>
	  _M_default_append(__new_size - size());
 801315a:	1b09      	subs	r1, r1, r4
 801315c:	f7fd fd86 	bl	8010c6c <_ZNSt6vectorIfSaIfEE17_M_default_appendEj>
      }
 8013160:	bd38      	pop	{r3, r4, r5, pc}
	else if (__new_size < size())
 8013162:	d2fd      	bcs.n	8013160 <_ZNSt6vectorIfSaIfEE6resizeEj+0x14>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 8013164:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8013168:	42aa      	cmp	r2, r5
	    this->_M_impl._M_finish = __pos;
 801316a:	bf18      	it	ne
 801316c:	6042      	strne	r2, [r0, #4]
      }
 801316e:	e7f7      	b.n	8013160 <_ZNSt6vectorIfSaIfEE6resizeEj+0x14>

08013170 <_ZN15MotionGenerator18SetNumberOfModulesEh>:
bool MotionGenerator::SetNumberOfModules(uint8_t nb_modules) {
 8013170:	b570      	push	{r4, r5, r6, lr}
 8013172:	4604      	mov	r4, r0
 8013174:	460e      	mov	r6, r1
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 8013176:	6900      	ldr	r0, [r0, #16]
 8013178:	f04f 31ff 	mov.w	r1, #4294967295
 801317c:	f7f9 f80c 	bl	800c198 <osSemaphoreAcquire>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013180:	4620      	mov	r0, r4
 8013182:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
	generator_offsets.resize(nb_modules);
 8013184:	4631      	mov	r1, r6
	number_of_modules = nb_modules;
 8013186:	7726      	strb	r6, [r4, #28]
 8013188:	f850 2f24 	ldr.w	r2, [r0, #36]!
 801318c:	1a9b      	subs	r3, r3, r2
 801318e:	109d      	asrs	r5, r3, #2
	generator_offsets.resize(nb_modules);
 8013190:	f7ff ffdc 	bl	801314c <_ZNSt6vectorIfSaIfEE6resizeEj>
      { return __normal_iterator(_M_current + __n); }
 8013194:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8013196:	b2ed      	uxtb	r5, r5
	*__first = __tmp;
 8013198:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801319a:	2100      	movs	r1, #0
 801319c:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 80131a0:	1a12      	subs	r2, r2, r0
 80131a2:	f003 fb5d 	bl	8016860 <memset>
 80131a6:	4620      	mov	r0, r4
 80131a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
	position_offsets.resize(nb_modules);
 80131aa:	4631      	mov	r1, r6
 80131ac:	f850 2f30 	ldr.w	r2, [r0, #48]!
 80131b0:	1a9b      	subs	r3, r3, r2
 80131b2:	109d      	asrs	r5, r3, #2
 80131b4:	f7ff ffca 	bl	801314c <_ZNSt6vectorIfSaIfEE6resizeEj>
 80131b8:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80131ba:	b2ed      	uxtb	r5, r5
 80131bc:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80131be:	2100      	movs	r1, #0
 80131c0:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 80131c4:	1a12      	subs	r2, r2, r0
 80131c6:	f003 fb4b 	bl	8016860 <memset>
	osSemaphoreRelease(GeneratorSemaphore);
 80131ca:	6920      	ldr	r0, [r4, #16]
 80131cc:	f7f9 f818 	bl	800c200 <osSemaphoreRelease>
}
 80131d0:	2001      	movs	r0, #1
 80131d2:	bd70      	pop	{r4, r5, r6, pc}

080131d4 <_ZN15MotionGenerator4InitEP9RegistersP10PublishersP8ServicesP4LEDS>:
void MotionGenerator::Init(Registers* registers_, Publishers* publishers_, Services* services_, LEDS* leds_) {
 80131d4:	b538      	push	{r3, r4, r5, lr}
	publishers = publishers_;
 80131d6:	e9c0 1200 	strd	r1, r2, [r0]
	services = services_;
 80131da:	6083      	str	r3, [r0, #8]
	GeneratorSemaphore = osSemaphoreNew(1,1,NULL);
 80131dc:	2101      	movs	r1, #1
	leds = leds_;
 80131de:	9b04      	ldr	r3, [sp, #16]
void MotionGenerator::Init(Registers* registers_, Publishers* publishers_, Services* services_, LEDS* leds_) {
 80131e0:	4604      	mov	r4, r0
	GeneratorSemaphore = osSemaphoreNew(1,1,NULL);
 80131e2:	2200      	movs	r2, #0
	GeneratorInterface = ServiceInterface{.interface=GENERATOR_INTERFACE};
 80131e4:	2500      	movs	r5, #0
	leds = leds_;
 80131e6:	60c3      	str	r3, [r0, #12]
	GeneratorSemaphore = osSemaphoreNew(1,1,NULL);
 80131e8:	4608      	mov	r0, r1
 80131ea:	f7f8 ff79 	bl	800c0e0 <osSemaphoreNew>
 80131ee:	6120      	str	r0, [r4, #16]
	osSemaphoreRelease(GeneratorSemaphore);
 80131f0:	f7f9 f806 	bl	800c200 <osSemaphoreRelease>
	MoveToRegister = Register{.address=REG_MOTOR_MOVETO, .type=FLOAT_TYPE, .isArray=false, .length=1};
 80131f4:	4b18      	ldr	r3, [pc, #96]	@ (8013258 <_ZN15MotionGenerator4InitEP9RegistersP10PublishersP8ServicesP4LEDS+0x84>)
	SetGeneratorPeriod(DEFAULT_GENERATOR_PERIOD);
 80131f6:	210a      	movs	r1, #10
	GeneratorInterface = ServiceInterface{.interface=GENERATOR_INTERFACE};
 80131f8:	f8a4 5062 	strh.w	r5, [r4, #98]	@ 0x62
	MoveToRegister = Register{.address=REG_MOTOR_MOVETO, .type=FLOAT_TYPE, .isArray=false, .length=1};
 80131fc:	6818      	ldr	r0, [r3, #0]
 80131fe:	889b      	ldrh	r3, [r3, #4]
 8013200:	65e0      	str	r0, [r4, #92]	@ 0x5c
	SetGeneratorPeriod(DEFAULT_GENERATOR_PERIOD);
 8013202:	4620      	mov	r0, r4
	MoveToRegister = Register{.address=REG_MOTOR_MOVETO, .type=FLOAT_TYPE, .isArray=false, .length=1};
 8013204:	f8a4 3060 	strh.w	r3, [r4, #96]	@ 0x60
	SetGeneratorPeriod(DEFAULT_GENERATOR_PERIOD);
 8013208:	f7ff fa89 	bl	801271e <_ZN15MotionGenerator18SetGeneratorPeriodEm>
	SetNumberOfModules(DEFAULT_GENERATOR_NB_NODULES);
 801320c:	4629      	mov	r1, r5
 801320e:	4620      	mov	r0, r4
 8013210:	f7ff ffae 	bl	8013170 <_ZN15MotionGenerator18SetNumberOfModulesEh>
	ResetGeneratorOffsets();
 8013214:	4620      	mov	r0, r4
 8013216:	f7ff fac5 	bl	80127a4 <_ZN15MotionGenerator21ResetGeneratorOffsetsEv>
	SetModuleLength(DEFAULT_MODULE_LENGTH);
 801321a:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 801325c <_ZN15MotionGenerator4InitEP9RegistersP10PublishersP8ServicesP4LEDS+0x88>
 801321e:	4620      	mov	r0, r4
 8013220:	f7ff fb07 	bl	8012832 <_ZN15MotionGenerator15SetModuleLengthEf>
	SetGeneratorAmplitude(DEFAULT_GENERATOR_AMPLITUDE);
 8013224:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8013228:	4620      	mov	r0, r4
 801322a:	f7ff fb16 	bl	801285a <_ZN15MotionGenerator21SetGeneratorAmplitudeEf>
	SetGeneratorFrequency(DEFAULT_GENERATOR_FREQUENCY);
 801322e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8013232:	4620      	mov	r0, r4
 8013234:	f7ff fb25 	bl	8012882 <_ZN15MotionGenerator21SetGeneratorFrequencyEf>
	SetGeneratorWavelengthInverse(1 / DEFAULT_GENERATOR_WAVELENGTH);
 8013238:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 801323c:	4620      	mov	r0, r4
 801323e:	f7ff fb34 	bl	80128aa <_ZN15MotionGenerator29SetGeneratorWavelengthInverseEf>
	SetGeneratorPhase(DEFAULT_GENERATOR_PHASE);
 8013242:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8013260 <_ZN15MotionGenerator4InitEP9RegistersP10PublishersP8ServicesP4LEDS+0x8c>
 8013246:	4620      	mov	r0, r4
 8013248:	f7ff fb43 	bl	80128d2 <_ZN15MotionGenerator17SetGeneratorPhaseEf>
	request_module_configuration = false;
 801324c:	f8a4 5064 	strh.w	r5, [r4, #100]	@ 0x64
	request_module_controller_deactivation = false;
 8013250:	f884 5066 	strb.w	r5, [r4, #102]	@ 0x66
}
 8013254:	bd38      	pop	{r3, r4, r5, pc}
 8013256:	bf00      	nop
 8013258:	08016b30 	.word	0x08016b30
 801325c:	3dfbe76d 	.word	0x3dfbe76d
 8013260:	00000000 	.word	0x00000000

08013264 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE4_4_FUNES0_tS1_t>:
			return self->SetNumberOfModules(*input);
 8013264:	7811      	ldrb	r1, [r2, #0]
 8013266:	f7ff bf83 	b.w	8013170 <_ZN15MotionGenerator18SetNumberOfModulesEh>
	...

0801326c <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag.isra.0>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 801326c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 801326e:	1a57      	subs	r7, r2, r1
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8013270:	4604      	mov	r4, r0
 8013272:	460d      	mov	r5, r1
 8013274:	4616      	mov	r6, r2
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8013276:	d502      	bpl.n	801327e <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag.isra.0+0x12>
	  __throw_length_error(
 8013278:	4807      	ldr	r0, [pc, #28]	@ (8013298 <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag.isra.0+0x2c>)
 801327a:	f003 f9ff 	bl	801667c <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 801327e:	4638      	mov	r0, r7
 8013280:	f7ff f93b 	bl	80124fa <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8013284:	4407      	add	r7, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8013286:	4602      	mov	r2, r0
 8013288:	6020      	str	r0, [r4, #0]
			      _Category>::__copy_m(__first, __last, __result);
 801328a:	4631      	mov	r1, r6
 801328c:	4628      	mov	r0, r5
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801328e:	60a7      	str	r7, [r4, #8]
 8013290:	f7ed fba8 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	  this->_M_impl._M_finish =
 8013294:	6060      	str	r0, [r4, #4]
	}
 8013296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013298:	08016b50 	.word	0x08016b50

0801329c <_ZN15MotionGenerator18SetGeneratorStatusEb>:
bool MotionGenerator::SetGeneratorStatus(bool status) {
 801329c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801329e:	460d      	mov	r5, r1
 80132a0:	4604      	mov	r4, r0
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 80132a2:	f04f 31ff 	mov.w	r1, #4294967295
 80132a6:	6900      	ldr	r0, [r0, #16]
 80132a8:	f7f8 ff76 	bl	800c198 <osSemaphoreAcquire>
	if (status) {
 80132ac:	b30d      	cbz	r5, 80132f2 <_ZN15MotionGenerator18SetGeneratorStatusEb+0x56>
		leds->ConfigureTimings(LED_ACTIVITY, std::vector<uint8_t>{1}, 10);
 80132ae:	2301      	movs	r3, #1
 80132b0:	68e6      	ldr	r6, [r4, #12]
	_M_range_initialize(__l.begin(), __l.end(),
 80132b2:	f10d 0201 	add.w	r2, sp, #1
 80132b6:	4669      	mov	r1, sp
 80132b8:	f88d 3000 	strb.w	r3, [sp]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80132bc:	2300      	movs	r3, #0
	_M_range_initialize(__l.begin(), __l.end(),
 80132be:	a801      	add	r0, sp, #4
	: _M_start(), _M_finish(), _M_end_of_storage()
 80132c0:	9303      	str	r3, [sp, #12]
 80132c2:	e9cd 3301 	strd	r3, r3, [sp, #4]
	_M_range_initialize(__l.begin(), __l.end(),
 80132c6:	f7ff ffd1 	bl	801326c <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag.isra.0>
 80132ca:	2108      	movs	r1, #8
 80132cc:	230a      	movs	r3, #10
 80132ce:	aa01      	add	r2, sp, #4
 80132d0:	4630      	mov	r0, r6
 80132d2:	f7ff f850 	bl	8012376 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
      }
 80132d6:	a801      	add	r0, sp, #4
 80132d8:	f7ed fae0 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		leds->Blink(LED_ACTIVITY);
 80132dc:	2108      	movs	r1, #8
 80132de:	68e0      	ldr	r0, [r4, #12]
 80132e0:	f7fe faf3 	bl	80118ca <_ZN4LEDS5BlinkEh>
	osSemaphoreRelease(GeneratorSemaphore);
 80132e4:	6920      	ldr	r0, [r4, #16]
	active = status;
 80132e6:	7525      	strb	r5, [r4, #20]
	osSemaphoreRelease(GeneratorSemaphore);
 80132e8:	f7f8 ff8a 	bl	800c200 <osSemaphoreRelease>
}
 80132ec:	2001      	movs	r0, #1
 80132ee:	b004      	add	sp, #16
 80132f0:	bd70      	pop	{r4, r5, r6, pc}
		leds->ClearLED(LED_ACTIVITY);
 80132f2:	2108      	movs	r1, #8
 80132f4:	68e0      	ldr	r0, [r4, #12]
 80132f6:	f7fe fcc8 	bl	8011c8a <_ZN4LEDS8ClearLEDEh>
 80132fa:	e7f3      	b.n	80132e4 <_ZN15MotionGenerator18SetGeneratorStatusEb+0x48>

080132fc <_ZN15MotionGenerator17ActivateGeneratorEv>:
bool MotionGenerator::ActivateGenerator(void) {
 80132fc:	b510      	push	{r4, lr}
 80132fe:	4604      	mov	r4, r0
	start_time = HAL_GetTick();
 8013300:	f7ef feee 	bl	80030e0 <HAL_GetTick>
	return SetGeneratorStatus(true);
 8013304:	2101      	movs	r1, #1
	start_time = HAL_GetTick();
 8013306:	64e0      	str	r0, [r4, #76]	@ 0x4c
	return SetGeneratorStatus(true);
 8013308:	4620      	mov	r0, r4
}
 801330a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return SetGeneratorStatus(true);
 801330e:	f7ff bfc5 	b.w	801329c <_ZN15MotionGenerator18SetGeneratorStatusEb>

08013312 <_ZN15MotionGenerator19DeactivateGeneratorEv>:
	return SetGeneratorStatus(false);
 8013312:	2100      	movs	r1, #0
 8013314:	f7ff bfc2 	b.w	801329c <_ZN15MotionGenerator18SetGeneratorStatusEb>

08013318 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE2_4_FUNES0_tS1_t>:
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8013318:	b508      	push	{r3, lr}
			if (*input > 0)
 801331a:	7813      	ldrb	r3, [r2, #0]
 801331c:	b11b      	cbz	r3, 8013326 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE2_4_FUNES0_tS1_t+0xe>
				self->ActivateGenerator();
 801331e:	f7ff ffed 	bl	80132fc <_ZN15MotionGenerator17ActivateGeneratorEv>
		}
 8013322:	2001      	movs	r0, #1
 8013324:	bd08      	pop	{r3, pc}
				self->DeactivateGenerator();
 8013326:	f7ff fff4 	bl	8013312 <_ZN15MotionGenerator19DeactivateGeneratorEv>
 801332a:	e7fa      	b.n	8013322 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE2_4_FUNES0_tS1_t+0xa>

0801332c <_ZN21CommunicationProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb>:
 * @param input data: message to decode
 * @param output index: processed length in the data
 * @param output success: true if message decoded
 * @return the decoded and parsed message based on the custom protocol
 */
MessageHeader CommunicationProtocol::DecodeProtocol(uint8_t ID, std::vector<uint8_t> data, uint16_t* index, bool* success) {*success = false; MessageHeader empty_message; return empty_message;}
 801332c:	2200      	movs	r2, #0
 801332e:	9901      	ldr	r1, [sp, #4]
 8013330:	700a      	strb	r2, [r1, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013332:	60c2      	str	r2, [r0, #12]
 8013334:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8013338:	4770      	bx	lr

0801333a <_ZN21CommunicationProtocol17ActivateReceptionEh>:
 * @brief WEAK Activate reception of the associated hardware interface
 *
 * @param input ID: interface ID
 * @return the interface access status
 */
HAL_StatusTypeDef CommunicationProtocol::ActivateReception(uint8_t ID) {return HAL_ERROR;}
 801333a:	2001      	movs	r0, #1
 801333c:	4770      	bx	lr

0801333e <_ZN21CommunicationProtocol4SendE13MessageHeader>:
 * @brief WEAK Send a message over an interface with this protocol
 *
 * @param input ID: message to send
 * @return the interface access status
 */
HAL_StatusTypeDef CommunicationProtocol::Send(MessageHeader message) {return HAL_ERROR;}
 801333e:	2001      	movs	r0, #1
 8013340:	4770      	bx	lr

08013342 <_ZN21CommunicationProtocol5GetIDEPvPb>:
 *
 * @param input pointer: the hardware interface handle pointer
 * @param output success: whether successful
 * @return the interface ID associated to the input handle
 */
uint8_t CommunicationProtocol::GetID(void* pointer, bool* success) {*success = false; return 0;}
 8013342:	2000      	movs	r0, #0
 8013344:	7010      	strb	r0, [r2, #0]
 8013346:	4770      	bx	lr

08013348 <_ZN21CommunicationProtocol14AddInterfaceIDEh>:
void CommunicationProtocol::AddInterfaceID(uint8_t ID_) {
 8013348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801334c:	e9d0 4305 	ldrd	r4, r3, [r0, #20]
 8013350:	4606      	mov	r6, r0
 8013352:	4689      	mov	r9, r1
 8013354:	429c      	cmp	r4, r3
 8013356:	d005      	beq.n	8013364 <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x1c>
 8013358:	7021      	strb	r1, [r4, #0]
	    ++this->_M_impl._M_finish;
 801335a:	6943      	ldr	r3, [r0, #20]
 801335c:	3301      	adds	r3, #1
 801335e:	6143      	str	r3, [r0, #20]
}
 8013360:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013364:	f8d0 8010 	ldr.w	r8, [r0, #16]
	if (max_size() - size() < __n)
 8013368:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801336c:	eba4 0408 	sub.w	r4, r4, r8
	if (max_size() - size() < __n)
 8013370:	429c      	cmp	r4, r3
 8013372:	d102      	bne.n	801337a <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x32>
	  __throw_length_error(__N(__s));
 8013374:	4816      	ldr	r0, [pc, #88]	@ (80133d0 <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x88>)
 8013376:	f003 f981 	bl	801667c <_ZSt20__throw_length_errorPKc>
 801337a:	2c01      	cmp	r4, #1
 801337c:	4625      	mov	r5, r4
 801337e:	bf38      	it	cc
 8013380:	2501      	movcc	r5, #1
 8013382:	1965      	adds	r5, r4, r5
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8013384:	d220      	bcs.n	80133c8 <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x80>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8013386:	b30d      	cbz	r5, 80133cc <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x84>
 8013388:	429d      	cmp	r5, r3
 801338a:	bf28      	it	cs
 801338c:	461d      	movcs	r5, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801338e:	4628      	mov	r0, r5
 8013390:	f003 f8bf 	bl	8016512 <_Znwj>
 8013394:	4607      	mov	r7, r0
      if (__count > 0)
 8013396:	2c00      	cmp	r4, #0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8013398:	f807 9004 	strb.w	r9, [r7, r4]
 801339c:	dd04      	ble.n	80133a8 <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x60>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801339e:	4622      	mov	r2, r4
 80133a0:	4641      	mov	r1, r8
 80133a2:	4638      	mov	r0, r7
 80133a4:	f003 fa42 	bl	801682c <memmove>
	      ++__new_finish;
 80133a8:	3401      	adds	r4, #1
 80133aa:	443c      	add	r4, r7
	if (__p)
 80133ac:	f1b8 0f00 	cmp.w	r8, #0
 80133b0:	d005      	beq.n	80133be <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x76>
		    this->_M_impl._M_end_of_storage - __old_start);
 80133b2:	69b1      	ldr	r1, [r6, #24]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80133b4:	4640      	mov	r0, r8
 80133b6:	eba1 0108 	sub.w	r1, r1, r8
 80133ba:	f003 f885 	bl	80164c8 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 80133be:	e9c6 7404 	strd	r7, r4, [r6, #16]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80133c2:	442f      	add	r7, r5
 80133c4:	61b7      	str	r7, [r6, #24]
 80133c6:	e7cb      	b.n	8013360 <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x18>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80133c8:	461d      	mov	r5, r3
 80133ca:	e7e0      	b.n	801338e <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x46>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80133cc:	462f      	mov	r7, r5
 80133ce:	e7e2      	b.n	8013396 <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x4e>
 80133d0:	08016b36 	.word	0x08016b36

080133d4 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>:
uint8_t CommunicationProtocol::GetInterfaceIndex(uint8_t ID_, bool* success) {
 80133d4:	b570      	push	{r4, r5, r6, lr}
 80133d6:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
	for (uint8_t ID : interfaces_id) {
 80133da:	4620      	mov	r0, r4
 80133dc:	42a8      	cmp	r0, r5
 80133de:	d102      	bne.n	80133e6 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb+0x12>
 80133e0:	2300      	movs	r3, #0
	return 0;
 80133e2:	4618      	mov	r0, r3
 80133e4:	e007      	b.n	80133f6 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb+0x22>
 80133e6:	4603      	mov	r3, r0
		if (ID == ID_) {
 80133e8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80133ec:	428e      	cmp	r6, r1
 80133ee:	d104      	bne.n	80133fa <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb+0x26>
 80133f0:	1b00      	subs	r0, r0, r4
 80133f2:	2301      	movs	r3, #1
 80133f4:	b2c0      	uxtb	r0, r0
			*success = true;
 80133f6:	7013      	strb	r3, [r2, #0]
}
 80133f8:	bd70      	pop	{r4, r5, r6, pc}
 80133fa:	4618      	mov	r0, r3
 80133fc:	e7ee      	b.n	80133dc <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb+0x8>

080133fe <_ZN21CommunicationProtocol15InterfaceExistsEh>:
bool CommunicationProtocol::InterfaceExists(uint8_t ID) {
 80133fe:	b507      	push	{r0, r1, r2, lr}
	GetInterfaceIndex(ID, &success);
 8013400:	f10d 0207 	add.w	r2, sp, #7
 8013404:	f7ff ffe6 	bl	80133d4 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
}
 8013408:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801340c:	b003      	add	sp, #12
 801340e:	f85d fb04 	ldr.w	pc, [sp], #4

08013412 <_ZN21CommunicationProtocol14GetIDFromIndexEhPb>:
 *
 * @param input index: interface index in the vector
 * @param output success: whether successful
 * @return the associated interface ID
 */
uint8_t CommunicationProtocol::GetIDFromIndex(uint8_t index, bool* success) {
 8013412:	b510      	push	{r4, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013414:	e9d0 4304 	ldrd	r4, r3, [r0, #16]
 8013418:	1b1b      	subs	r3, r3, r4
	if (index < interfaces_id.size()) {
 801341a:	4299      	cmp	r1, r3
		*success = true;
 801341c:	bf35      	itete	cc
 801341e:	2301      	movcc	r3, #1
		return interfaces_id[index];
	} else {
		*success = false;
 8013420:	2000      	movcs	r0, #0
		*success = true;
 8013422:	7013      	strbcc	r3, [r2, #0]
		*success = false;
 8013424:	7010      	strbcs	r0, [r2, #0]
		return interfaces_id[index];
 8013426:	bf38      	it	cc
 8013428:	5c60      	ldrbcc	r0, [r4, r1]
		return 0;
	}
}
 801342a:	bd10      	pop	{r4, pc}

0801342c <_ZN21CommunicationProtocol9GetBufferEhPb>:
 *
 * @param input ID: interface ID
 * @param output success: whether successful
 * @return the associated buffer memory base pointer
 */
std::vector<uint8_t>* CommunicationProtocol::GetBuffer(uint8_t ID, bool* success) {
 801342c:	b538      	push	{r3, r4, r5, lr}
 801342e:	4604      	mov	r4, r0
	uint8_t index = GetInterfaceIndex(ID, success);
 8013430:	f7ff ffd0 	bl	80133d4 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
 8013434:	4603      	mov	r3, r0
	if (*success)
 8013436:	7810      	ldrb	r0, [r2, #0]
 8013438:	b128      	cbz	r0, 8013446 <_ZN21CommunicationProtocol9GetBufferEhPb+0x1a>
	return *(this->_M_impl._M_start + __n);
 801343a:	b21b      	sxth	r3, r3
 801343c:	6a20      	ldr	r0, [r4, #32]
 801343e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013442:	eb00 0083 	add.w	r0, r0, r3, lsl #2
		return &buffers[index];
	return NULL;
}
 8013446:	bd38      	pop	{r3, r4, r5, pc}

08013448 <_ZN21CommunicationProtocol14GetBufferIndexEhPb>:
 *
 * @param input ID: interface ID
 * @param output success: whether successful
 * @return the associated buffer index pointer
 */
uint16_t* CommunicationProtocol::GetBufferIndex(uint8_t ID, bool* success) {
 8013448:	b538      	push	{r3, r4, r5, lr}
 801344a:	4604      	mov	r4, r0
	uint8_t index = GetInterfaceIndex(ID, success);
 801344c:	f7ff ffc2 	bl	80133d4 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
 8013450:	4603      	mov	r3, r0
	if (*success)
 8013452:	7810      	ldrb	r0, [r2, #0]
 8013454:	b118      	cbz	r0, 801345e <_ZN21CommunicationProtocol14GetBufferIndexEhPb+0x16>
 8013456:	b21b      	sxth	r3, r3
 8013458:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801345a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
		return &buffers_index[index];
	return NULL;
}
 801345e:	bd38      	pop	{r3, r4, r5, pc}

08013460 <_ZN21CommunicationProtocol27SetProtocolPayloadMaxLengthEt>:
 * @brief Set the maximum payload length for the protocol
 *
 * @param input length: the maximum payload length
 */
void CommunicationProtocol::SetProtocolPayloadMaxLength(uint16_t length) {
	max_payload_length = length;
 8013460:	8381      	strh	r1, [r0, #28]
}
 8013462:	4770      	bx	lr

08013464 <_ZN21CommunicationProtocol27GetProtocolPayloadMaxLengthEv>:
 *
 * @return the maximum payload length of the protocol
 */
uint16_t CommunicationProtocol::GetProtocolPayloadMaxLength(void) {
	return max_payload_length;
}
 8013464:	8b80      	ldrh	r0, [r0, #28]
 8013466:	4770      	bx	lr

08013468 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8013468:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801346c:	e9d0 8a00 	ldrd	r8, sl, [r0]
 8013470:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 8013472:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013476:	ebaa 0208 	sub.w	r2, sl, r8
 801347a:	4607      	mov	r7, r0
 801347c:	4689      	mov	r9, r1
	if (max_size() - size() < __n)
 801347e:	ebb3 0f62 	cmp.w	r3, r2, asr #1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013482:	ea4f 0462 	mov.w	r4, r2, asr #1
	if (max_size() - size() < __n)
 8013486:	d102      	bne.n	801348e <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8013488:	481e      	ldr	r0, [pc, #120]	@ (8013504 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x9c>)
 801348a:	f003 f8f7 	bl	801667c <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 801348e:	45c2      	cmp	sl, r8
 8013490:	bf14      	ite	ne
 8013492:	4622      	movne	r2, r4
 8013494:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 8013496:	eba1 0508 	sub.w	r5, r1, r8
 801349a:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801349c:	d22e      	bcs.n	80134fc <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x94>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801349e:	b37c      	cbz	r4, 8013500 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x98>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80134a0:	429c      	cmp	r4, r3
 80134a2:	bf28      	it	cs
 80134a4:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80134a6:	0060      	lsls	r0, r4, #1
 80134a8:	f003 f833 	bl	8016512 <_Znwj>
 80134ac:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80134ae:	f8bb 3000 	ldrh.w	r3, [fp]
      if (__count > 0)
 80134b2:	2d00      	cmp	r5, #0
 80134b4:	5373      	strh	r3, [r6, r5]
 80134b6:	dd04      	ble.n	80134c2 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x5a>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80134b8:	462a      	mov	r2, r5
 80134ba:	4641      	mov	r1, r8
 80134bc:	4630      	mov	r0, r6
 80134be:	f003 f9b5 	bl	801682c <memmove>
      ptrdiff_t __count = __last - __first;
 80134c2:	ebaa 0a09 	sub.w	sl, sl, r9
	      ++__new_finish;
 80134c6:	3502      	adds	r5, #2
      if (__count > 0)
 80134c8:	f1ba 0f00 	cmp.w	sl, #0
 80134cc:	4435      	add	r5, r6
 80134ce:	dd04      	ble.n	80134da <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x72>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80134d0:	4652      	mov	r2, sl
 80134d2:	4649      	mov	r1, r9
 80134d4:	4628      	mov	r0, r5
 80134d6:	f003 faa1 	bl	8016a1c <memcpy>
      return __result + __count;
 80134da:	4455      	add	r5, sl
	if (__p)
 80134dc:	f1b8 0f00 	cmp.w	r8, #0
 80134e0:	d005      	beq.n	80134ee <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x86>
		    this->_M_impl._M_end_of_storage - __old_start);
 80134e2:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80134e4:	4640      	mov	r0, r8
 80134e6:	eba1 0108 	sub.w	r1, r1, r8
 80134ea:	f002 ffed 	bl	80164c8 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 80134ee:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80134f2:	eb06 0644 	add.w	r6, r6, r4, lsl #1
 80134f6:	60be      	str	r6, [r7, #8]
    }
 80134f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80134fc:	461c      	mov	r4, r3
 80134fe:	e7d2      	b.n	80134a6 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8013500:	4626      	mov	r6, r4
 8013502:	e7d4      	b.n	80134ae <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x46>
 8013504:	08016b36 	.word	0x08016b36

08013508 <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 8013508:	b538      	push	{r3, r4, r5, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801350a:	1e0c      	subs	r4, r1, #0
      _M_create_storage(size_t __n)
 801350c:	4605      	mov	r5, r0
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801350e:	d00a      	beq.n	8013526 <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj+0x1e>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8013510:	da01      	bge.n	8013516 <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj+0xe>
	    std::__throw_bad_alloc();
 8013512:	f003 f8ad 	bl	8016670 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8013516:	4620      	mov	r0, r4
 8013518:	f002 fffb 	bl	8016512 <_Znwj>
	this->_M_impl._M_finish = this->_M_impl._M_start;
 801351c:	e9c5 0000 	strd	r0, r0, [r5]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8013520:	4420      	add	r0, r4
 8013522:	60a8      	str	r0, [r5, #8]
      }
 8013524:	bd38      	pop	{r3, r4, r5, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8013526:	4620      	mov	r0, r4
 8013528:	e7f8      	b.n	801351c <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj+0x14>
	...

0801352c <_ZNSt6vectorIhSaIhEEC1EjRKS0_>:
      vector(size_type __n, const allocator_type& __a = allocator_type())
 801352c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 801352e:	1e0d      	subs	r5, r1, #0
      vector(size_type __n, const allocator_type& __a = allocator_type())
 8013530:	4604      	mov	r4, r0
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8013532:	da02      	bge.n	801353a <_ZNSt6vectorIhSaIhEEC1EjRKS0_+0xe>
	  __throw_length_error(
 8013534:	480c      	ldr	r0, [pc, #48]	@ (8013568 <_ZNSt6vectorIhSaIhEEC1EjRKS0_+0x3c>)
 8013536:	f003 f8a1 	bl	801667c <_ZSt20__throw_length_errorPKc>
	: _M_start(), _M_finish(), _M_end_of_storage()
 801353a:	2700      	movs	r7, #0
 801353c:	e9c0 7700 	strd	r7, r7, [r0]
 8013540:	6087      	str	r7, [r0, #8]
      { _M_create_storage(__n); }
 8013542:	f7ff ffe1 	bl	8013508 <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj>
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 8013546:	6826      	ldr	r6, [r4, #0]
	  if (__n > 0)
 8013548:	b14d      	cbz	r5, 801355e <_ZNSt6vectorIhSaIhEEC1EjRKS0_+0x32>
 801354a:	4630      	mov	r0, r6
      if (__n <= 0)
 801354c:	2d01      	cmp	r5, #1
 801354e:	f800 7b01 	strb.w	r7, [r0], #1
 8013552:	d007      	beq.n	8013564 <_ZNSt6vectorIhSaIhEEC1EjRKS0_+0x38>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 8013554:	1e6a      	subs	r2, r5, #1
 8013556:	4639      	mov	r1, r7
      std::__fill_a(__first, __first + __n, __value);
 8013558:	442e      	add	r6, r5
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 801355a:	f003 f981 	bl	8016860 <memset>
      { _M_default_initialize(__n); }
 801355e:	4620      	mov	r0, r4
	this->_M_impl._M_finish =
 8013560:	6066      	str	r6, [r4, #4]
      { _M_default_initialize(__n); }
 8013562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	      ++__first;
 8013564:	4606      	mov	r6, r0
 8013566:	e7fa      	b.n	801355e <_ZNSt6vectorIhSaIhEEC1EjRKS0_+0x32>
 8013568:	08016b50 	.word	0x08016b50

0801356c <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 801356c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013570:	e9d0 7900 	ldrd	r7, r9, [r0]
 8013574:	4b35      	ldr	r3, [pc, #212]	@ (801364c <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xe0>)
 8013576:	4606      	mov	r6, r0
 8013578:	eba9 0507 	sub.w	r5, r9, r7
 801357c:	4688      	mov	r8, r1
 801357e:	4614      	mov	r4, r2
 8013580:	10ad      	asrs	r5, r5, #2
 8013582:	435d      	muls	r5, r3
	if (max_size() - size() < __n)
 8013584:	4b32      	ldr	r3, [pc, #200]	@ (8013650 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xe4>)
 8013586:	429d      	cmp	r5, r3
 8013588:	d102      	bne.n	8013590 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
 801358a:	4832      	ldr	r0, [pc, #200]	@ (8013654 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xe8>)
 801358c:	f003 f876 	bl	801667c <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 8013590:	45b9      	cmp	r9, r7
 8013592:	bf14      	ite	ne
 8013594:	462a      	movne	r2, r5
 8013596:	2201      	moveq	r2, #1
 8013598:	eba1 0b07 	sub.w	fp, r1, r7
 801359c:	18ad      	adds	r5, r5, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801359e:	d22d      	bcs.n	80135fc <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x90>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80135a0:	b375      	cbz	r5, 8013600 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x94>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80135a2:	429d      	cmp	r5, r3
 80135a4:	bf28      	it	cs
 80135a6:	461d      	movcs	r5, r3
 80135a8:	200c      	movs	r0, #12
 80135aa:	4368      	muls	r0, r5
 80135ac:	f002 ffb1 	bl	8016512 <_Znwj>
 80135b0:	4682      	mov	sl, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80135b2:	4621      	mov	r1, r4
 80135b4:	eb0a 000b 	add.w	r0, sl, fp
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80135b8:	463c      	mov	r4, r7
      _ForwardIterator __cur = __result;
 80135ba:	46d3      	mov	fp, sl
 80135bc:	f7ed fa1e 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
      for (; __first != __last; ++__first, (void)++__cur)
 80135c0:	45a0      	cmp	r8, r4
 80135c2:	f04f 0300 	mov.w	r3, #0
 80135c6:	f10b 0b0c 	add.w	fp, fp, #12
 80135ca:	d11b      	bne.n	8013604 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x98>
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 80135cc:	f04f 0800 	mov.w	r8, #0
 80135d0:	454c      	cmp	r4, r9
 80135d2:	465b      	mov	r3, fp
 80135d4:	f10b 0b0c 	add.w	fp, fp, #12
 80135d8:	d125      	bne.n	8013626 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xba>
	if (__p)
 80135da:	b137      	cbz	r7, 80135ea <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x7e>
		    this->_M_impl._M_end_of_storage - __old_start);
 80135dc:	68b1      	ldr	r1, [r6, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80135de:	4638      	mov	r0, r7
 80135e0:	9301      	str	r3, [sp, #4]
 80135e2:	1bc9      	subs	r1, r1, r7
 80135e4:	f002 ff70 	bl	80164c8 <_ZdlPvj>
 80135e8:	9b01      	ldr	r3, [sp, #4]
      this->_M_impl._M_finish = __new_finish;
 80135ea:	e9c6 a300 	strd	sl, r3, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80135ee:	230c      	movs	r3, #12
 80135f0:	fb03 a305 	mla	r3, r3, r5, sl
 80135f4:	60b3      	str	r3, [r6, #8]
    }
 80135f6:	b003      	add	sp, #12
 80135f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135fc:	461d      	mov	r5, r3
 80135fe:	e7d3      	b.n	80135a8 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8013600:	46aa      	mov	sl, r5
 8013602:	e7d6      	b.n	80135b2 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8013604:	6822      	ldr	r2, [r4, #0]
      }
 8013606:	4620      	mov	r0, r4
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8013608:	6023      	str	r3, [r4, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 801360a:	f84b 2c0c 	str.w	r2, [fp, #-12]
 801360e:	6862      	ldr	r2, [r4, #4]
 8013610:	f84b 2c08 	str.w	r2, [fp, #-8]
	  _M_end_of_storage(__x._M_end_of_storage)
 8013614:	68a2      	ldr	r2, [r4, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8013616:	e9c4 3301 	strd	r3, r3, [r4, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 801361a:	f84b 2c04 	str.w	r2, [fp, #-4]
 801361e:	340c      	adds	r4, #12
      }
 8013620:	f7ed f93c 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8013624:	e7cc      	b.n	80135c0 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x54>
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8013626:	6823      	ldr	r3, [r4, #0]
      }
 8013628:	4620      	mov	r0, r4
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 801362a:	f8c4 8000 	str.w	r8, [r4]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 801362e:	f84b 3c0c 	str.w	r3, [fp, #-12]
 8013632:	6863      	ldr	r3, [r4, #4]
 8013634:	f84b 3c08 	str.w	r3, [fp, #-8]
	  _M_end_of_storage(__x._M_end_of_storage)
 8013638:	68a3      	ldr	r3, [r4, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 801363a:	e9c4 8801 	strd	r8, r8, [r4, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 801363e:	f84b 3c04 	str.w	r3, [fp, #-4]
 8013642:	340c      	adds	r4, #12
      }
 8013644:	f7ed f92a 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8013648:	e7c2      	b.n	80135d0 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x64>
 801364a:	bf00      	nop
 801364c:	aaaaaaab 	.word	0xaaaaaaab
 8013650:	0aaaaaaa 	.word	0x0aaaaaaa
 8013654:	08016b36 	.word	0x08016b36

08013658 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 8013658:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801365a:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
      push_back(const value_type& __x)
 801365e:	4604      	mov	r4, r0
 8013660:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8013662:	42ab      	cmp	r3, r5
 8013664:	d006      	beq.n	8013674 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE9push_backERKS1_+0x1c>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8013666:	4618      	mov	r0, r3
 8013668:	f7ed f9c8 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
	    ++this->_M_impl._M_finish;
 801366c:	6863      	ldr	r3, [r4, #4]
 801366e:	330c      	adds	r3, #12
 8013670:	6063      	str	r3, [r4, #4]
      }
 8013672:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
 8013674:	4619      	mov	r1, r3
 8013676:	f7ff ff79 	bl	801356c <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 801367a:	e7fa      	b.n	8013672 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE9push_backERKS1_+0x1a>

0801367c <_ZN21CommunicationProtocol18AddInterfaceBufferEv>:
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801367c:	e9d0 120c 	ldrd	r1, r2, [r0, #48]	@ 0x30
void CommunicationProtocol::AddInterfaceBuffer() {
 8013680:	b5f0      	push	{r4, r5, r6, r7, lr}
	buffers_index.push_back(0);
 8013682:	2300      	movs	r3, #0
void CommunicationProtocol::AddInterfaceBuffer() {
 8013684:	b089      	sub	sp, #36	@ 0x24
 8013686:	4291      	cmp	r1, r2
 8013688:	4604      	mov	r4, r0
	buffers_index.push_back(0);
 801368a:	f8ad 3014 	strh.w	r3, [sp, #20]
 801368e:	d036      	beq.n	80136fe <_ZN21CommunicationProtocol18AddInterfaceBufferEv+0x82>
 8013690:	f821 3b02 	strh.w	r3, [r1], #2
	    ++this->_M_impl._M_finish;
 8013694:	6301      	str	r1, [r0, #48]	@ 0x30
	std::vector<uint8_t> buffer(BUFFER_SIZE);
 8013696:	aa05      	add	r2, sp, #20
 8013698:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801369c:	a802      	add	r0, sp, #8
 801369e:	f7ff ff45 	bl	801352c <_ZNSt6vectorIhSaIhEEC1EjRKS0_>
	buffers.push_back(buffer);
 80136a2:	f104 0020 	add.w	r0, r4, #32
 80136a6:	a902      	add	r1, sp, #8
 80136a8:	f7ff ffd6 	bl	8013658 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE9push_backERKS1_>
	std::vector<uint8_t> data_to_send(BUFFER_SIZE);
 80136ac:	aa01      	add	r2, sp, #4
 80136ae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80136b2:	a805      	add	r0, sp, #20
 80136b4:	f7ff ff3a 	bl	801352c <_ZNSt6vectorIhSaIhEEC1EjRKS0_>
	buffers_to_transfer.push_back(data_to_send);
 80136b8:	1d20      	adds	r0, r4, #4
 80136ba:	a905      	add	r1, sp, #20
 80136bc:	f7ff ffcc 	bl	8013658 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE9push_backERKS1_>
      : _M_current(__i) { }
 80136c0:	68a4      	ldr	r4, [r4, #8]
			 - this->_M_impl._M_start); }
 80136c2:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 80136c6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80136ca:	1a9b      	subs	r3, r3, r2
      if (this->capacity() < __n)
 80136cc:	2bff      	cmp	r3, #255	@ 0xff
 80136ce:	d826      	bhi.n	801371e <_ZN21CommunicationProtocol18AddInterfaceBufferEv+0xa2>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80136d0:	f854 6c08 	ldr.w	r6, [r4, #-8]
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80136d4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80136d8:	1ab6      	subs	r6, r6, r2
 80136da:	f002 ff1a 	bl	8016512 <_Znwj>
 80136de:	4605      	mov	r5, r0
      ptrdiff_t __count = __last - __first;
 80136e0:	e954 7203 	ldrd	r7, r2, [r4, #-12]
 80136e4:	1bd2      	subs	r2, r2, r7
      if (__count > 0)
 80136e6:	2a00      	cmp	r2, #0
 80136e8:	dd0e      	ble.n	8013708 <_ZN21CommunicationProtocol18AddInterfaceBufferEv+0x8c>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80136ea:	4639      	mov	r1, r7
 80136ec:	f003 f89e 	bl	801682c <memmove>
			- this->_M_impl._M_start);
 80136f0:	f854 1c04 	ldr.w	r1, [r4, #-4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80136f4:	4638      	mov	r0, r7
 80136f6:	1bc9      	subs	r1, r1, r7
 80136f8:	f002 fee6 	bl	80164c8 <_ZdlPvj>
 80136fc:	e006      	b.n	801370c <_ZN21CommunicationProtocol18AddInterfaceBufferEv+0x90>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80136fe:	aa05      	add	r2, sp, #20
 8013700:	302c      	adds	r0, #44	@ 0x2c
 8013702:	f7ff feb1 	bl	8013468 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_>
 8013706:	e7c6      	b.n	8013696 <_ZN21CommunicationProtocol18AddInterfaceBufferEv+0x1a>
	if (__p)
 8013708:	2f00      	cmp	r7, #0
 801370a:	d1f1      	bne.n	80136f0 <_ZN21CommunicationProtocol18AddInterfaceBufferEv+0x74>
	  this->_M_impl._M_finish = __tmp + __old_size;
 801370c:	442e      	add	r6, r5
	  this->_M_impl._M_start = __tmp;
 801370e:	f844 5c0c 	str.w	r5, [r4, #-12]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8013712:	f505 7580 	add.w	r5, r5, #256	@ 0x100
	  this->_M_impl._M_finish = __tmp + __old_size;
 8013716:	f844 6c08 	str.w	r6, [r4, #-8]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801371a:	f844 5c04 	str.w	r5, [r4, #-4]
      }
 801371e:	a805      	add	r0, sp, #20
 8013720:	f7ed f8bc 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8013724:	a802      	add	r0, sp, #8
 8013726:	f7ed f8b9 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 801372a:	b009      	add	sp, #36	@ 0x24
 801372c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801372e <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801372e:	2800      	cmp	r0, #0
      _M_allocate(size_t __n)
 8013730:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8013732:	d006      	beq.n	8013742 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0x14>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8013734:	da01      	bge.n	801373a <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0xc>
	    std::__throw_bad_alloc();
 8013736:	f002 ff9b 	bl	8016670 <_ZSt17__throw_bad_allocv>
      }
 801373a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801373e:	f002 bee8 	b.w	8016512 <_Znwj>
 8013742:	bd08      	pop	{r3, pc}

08013744 <_ZN11CANProtocolC1Ev>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013744:	2200      	movs	r2, #0
#include <Protocols/Communication/FDCAN/CANProtocol.hpp>

/**
 * @brief Class constructor
 */
CANProtocol::CANProtocol() {
 8013746:	490b      	ldr	r1, [pc, #44]	@ (8013774 <_ZN11CANProtocolC1Ev+0x30>)
 8013748:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801374c:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8013750:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8013754:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8013758:	e9c0 220a 	strd	r2, r2, [r0, #40]	@ 0x28
 801375c:	e9c0 220c 	strd	r2, r2, [r0, #48]	@ 0x30
 8013760:	e9c0 220e 	strd	r2, r2, [r0, #56]	@ 0x38
 8013764:	6402      	str	r2, [r0, #64]	@ 0x40
 8013766:	6001      	str	r1, [r0, #0]
 8013768:	6502      	str	r2, [r0, #80]	@ 0x50
	marker = 0;
 801376a:	6442      	str	r2, [r0, #68]	@ 0x44
 801376c:	e9c0 2212 	strd	r2, r2, [r0, #72]	@ 0x48
}
 8013770:	4770      	bx	lr
 8013772:	bf00      	nop
 8013774:	08016e38 	.word	0x08016e38

08013778 <_ZN11CANProtocol17GetProtocolLengthEt>:
 *
 * @param input length: the CAN payload length
 * @return the minimum DLC value that fits the given length inside
 */
uint32_t CANProtocol::GetProtocolLength(uint16_t length) {
	if (length <= 0) return FDCAN_DLC_BYTES_0;
 8013778:	b301      	cbz	r1, 80137bc <_ZN11CANProtocol17GetProtocolLengthEt+0x44>
	if (length <= 1) return FDCAN_DLC_BYTES_1;
 801377a:	2901      	cmp	r1, #1
 801377c:	d020      	beq.n	80137c0 <_ZN11CANProtocol17GetProtocolLengthEt+0x48>
	if (length <= 2) return FDCAN_DLC_BYTES_2;
 801377e:	2902      	cmp	r1, #2
 8013780:	d021      	beq.n	80137c6 <_ZN11CANProtocol17GetProtocolLengthEt+0x4e>
	if (length <= 3) return FDCAN_DLC_BYTES_3;
 8013782:	2903      	cmp	r1, #3
 8013784:	d022      	beq.n	80137cc <_ZN11CANProtocol17GetProtocolLengthEt+0x54>
	if (length <= 4) return FDCAN_DLC_BYTES_4;
 8013786:	2904      	cmp	r1, #4
 8013788:	d023      	beq.n	80137d2 <_ZN11CANProtocol17GetProtocolLengthEt+0x5a>
	if (length <= 5) return FDCAN_DLC_BYTES_5;
 801378a:	2905      	cmp	r1, #5
 801378c:	d024      	beq.n	80137d8 <_ZN11CANProtocol17GetProtocolLengthEt+0x60>
	if (length <= 6) return FDCAN_DLC_BYTES_6;
 801378e:	2906      	cmp	r1, #6
 8013790:	d025      	beq.n	80137de <_ZN11CANProtocol17GetProtocolLengthEt+0x66>
	if (length <= 7) return FDCAN_DLC_BYTES_7;
 8013792:	2907      	cmp	r1, #7
 8013794:	d026      	beq.n	80137e4 <_ZN11CANProtocol17GetProtocolLengthEt+0x6c>
	if (length <= 8) return FDCAN_DLC_BYTES_8;
 8013796:	2908      	cmp	r1, #8
 8013798:	d027      	beq.n	80137ea <_ZN11CANProtocol17GetProtocolLengthEt+0x72>
	if (length <= 12) return FDCAN_DLC_BYTES_12;
 801379a:	290c      	cmp	r1, #12
 801379c:	d928      	bls.n	80137f0 <_ZN11CANProtocol17GetProtocolLengthEt+0x78>
	if (length <= 16) return FDCAN_DLC_BYTES_16;
 801379e:	2910      	cmp	r1, #16
 80137a0:	d929      	bls.n	80137f6 <_ZN11CANProtocol17GetProtocolLengthEt+0x7e>
	if (length <= 20) return FDCAN_DLC_BYTES_20;
 80137a2:	2914      	cmp	r1, #20
 80137a4:	d92a      	bls.n	80137fc <_ZN11CANProtocol17GetProtocolLengthEt+0x84>
	if (length <= 24) return FDCAN_DLC_BYTES_24;
 80137a6:	2918      	cmp	r1, #24
 80137a8:	d92b      	bls.n	8013802 <_ZN11CANProtocol17GetProtocolLengthEt+0x8a>
	if (length <= 32) return FDCAN_DLC_BYTES_32;
 80137aa:	2920      	cmp	r1, #32
 80137ac:	d92c      	bls.n	8013808 <_ZN11CANProtocol17GetProtocolLengthEt+0x90>
	if (length <= 48) return FDCAN_DLC_BYTES_48;
	if (length <= 64) return FDCAN_DLC_BYTES_64;
 80137ae:	2931      	cmp	r1, #49	@ 0x31
 80137b0:	bf34      	ite	cc
 80137b2:	f44f 2060 	movcc.w	r0, #917504	@ 0xe0000
 80137b6:	f44f 2070 	movcs.w	r0, #983040	@ 0xf0000
 80137ba:	4770      	bx	lr
	if (length <= 0) return FDCAN_DLC_BYTES_0;
 80137bc:	4608      	mov	r0, r1
 80137be:	4770      	bx	lr
	if (length <= 1) return FDCAN_DLC_BYTES_1;
 80137c0:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80137c4:	4770      	bx	lr
	if (length <= 2) return FDCAN_DLC_BYTES_2;
 80137c6:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80137ca:	4770      	bx	lr
	if (length <= 3) return FDCAN_DLC_BYTES_3;
 80137cc:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80137d0:	4770      	bx	lr
	if (length <= 4) return FDCAN_DLC_BYTES_4;
 80137d2:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80137d6:	4770      	bx	lr
	if (length <= 5) return FDCAN_DLC_BYTES_5;
 80137d8:	f44f 20a0 	mov.w	r0, #327680	@ 0x50000
 80137dc:	4770      	bx	lr
	if (length <= 6) return FDCAN_DLC_BYTES_6;
 80137de:	f44f 20c0 	mov.w	r0, #393216	@ 0x60000
 80137e2:	4770      	bx	lr
	if (length <= 7) return FDCAN_DLC_BYTES_7;
 80137e4:	f44f 20e0 	mov.w	r0, #458752	@ 0x70000
 80137e8:	4770      	bx	lr
	if (length <= 8) return FDCAN_DLC_BYTES_8;
 80137ea:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80137ee:	4770      	bx	lr
	if (length <= 12) return FDCAN_DLC_BYTES_12;
 80137f0:	f44f 2010 	mov.w	r0, #589824	@ 0x90000
 80137f4:	4770      	bx	lr
	if (length <= 16) return FDCAN_DLC_BYTES_16;
 80137f6:	f44f 2020 	mov.w	r0, #655360	@ 0xa0000
 80137fa:	4770      	bx	lr
	if (length <= 20) return FDCAN_DLC_BYTES_20;
 80137fc:	f44f 2030 	mov.w	r0, #720896	@ 0xb0000
 8013800:	4770      	bx	lr
	if (length <= 24) return FDCAN_DLC_BYTES_24;
 8013802:	f44f 2040 	mov.w	r0, #786432	@ 0xc0000
 8013806:	4770      	bx	lr
	if (length <= 32) return FDCAN_DLC_BYTES_32;
 8013808:	f44f 2050 	mov.w	r0, #851968	@ 0xd0000
	return FDCAN_DLC_BYTES_64;
}
 801380c:	4770      	bx	lr

0801380e <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE.isra.0>:
      // Constant-time move assignment when source object's memory can be
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      _GLIBCXX20_CONSTEXPR
      void
      _M_move_assign(vector&& __x, true_type) noexcept
 801380e:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 8013810:	680d      	ldr	r5, [r1, #0]
      _M_move_assign(vector&& __x, true_type) noexcept
 8013812:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 8013814:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 8013816:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 801381a:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 801381c:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 801381e:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 8013820:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 8013822:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8013824:	688d      	ldr	r5, [r1, #8]
 8013826:	6085      	str	r5, [r0, #8]
      }
 8013828:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 801382a:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 801382c:	e9c1 3300 	strd	r3, r3, [r1]
 8013830:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 8013834:	f7ed f832 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      {
	vector __tmp(get_allocator());
	this->_M_impl._M_swap_data(__x._M_impl);
	__tmp._M_impl._M_swap_data(__x._M_impl);
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
      }
 8013838:	b005      	add	sp, #20
 801383a:	bd30      	pop	{r4, r5, pc}

0801383c <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12GetInterfaceEhPb>:
H* TemplateCommunicationProtocol<H>::GetInterface(uint8_t ID, bool* success) {
 801383c:	b538      	push	{r3, r4, r5, lr}
 801383e:	4615      	mov	r5, r2
 8013840:	4604      	mov	r4, r0
	uint8_t index = GetInterfaceIndex(ID, success);
 8013842:	f7ff fdc7 	bl	80133d4 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
 8013846:	4603      	mov	r3, r0
	if (*success) {
 8013848:	7828      	ldrb	r0, [r5, #0]
 801384a:	b118      	cbz	r0, 8013854 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12GetInterfaceEhPb+0x18>
	return *(this->_M_impl._M_start + __n);
 801384c:	b21b      	sxth	r3, r3
		return interfaces[index];
 801384e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8013850:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
}
 8013854:	bd38      	pop	{r3, r4, r5, pc}

08013856 <_ZN11CANProtocol16ConfigureFiltersEh>:
HAL_StatusTypeDef CANProtocol::ConfigureFilters(uint8_t ID) {
 8013856:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	FDCAN_HandleTypeDef* handle = GetInterface(ID, &success);
 8013858:	f10d 020f 	add.w	r2, sp, #15
 801385c:	f7ff ffee 	bl	801383c <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12GetInterfaceEhPb>
	if (not success) return HAL_ERROR;
 8013860:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8013864:	2301      	movs	r3, #1
 8013866:	b13a      	cbz	r2, 8013878 <_ZN11CANProtocol16ConfigureFiltersEh+0x22>
	return HAL_FDCAN_ConfigGlobalFilter(handle, FDCAN_ACCEPT_IN_RX_FIFO0, FDCAN_ACCEPT_IN_RX_FIFO0, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);
 8013868:	2200      	movs	r2, #0
 801386a:	9300      	str	r3, [sp, #0]
 801386c:	4611      	mov	r1, r2
 801386e:	f7f2 f86f 	bl	8005950 <HAL_FDCAN_ConfigGlobalFilter>
}
 8013872:	b005      	add	sp, #20
 8013874:	f85d fb04 	ldr.w	pc, [sp], #4
	if (not success) return HAL_ERROR;
 8013878:	4618      	mov	r0, r3
 801387a:	e7fa      	b.n	8013872 <_ZN11CANProtocol16ConfigureFiltersEh+0x1c>

0801387c <_ZN11CANProtocol17ActivateReceptionEh>:
HAL_StatusTypeDef CANProtocol::ActivateReception(uint8_t ID) {
 801387c:	b507      	push	{r0, r1, r2, lr}
	FDCAN_HandleTypeDef* handle = GetInterface(ID, &success);
 801387e:	f10d 0207 	add.w	r2, sp, #7
 8013882:	f7ff ffdb 	bl	801383c <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12GetInterfaceEhPb>
	if (not success) return HAL_ERROR;
 8013886:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801388a:	b133      	cbz	r3, 801389a <_ZN11CANProtocol17ActivateReceptionEh+0x1e>
	return HAL_FDCAN_ActivateNotification(handle, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 801388c:	2200      	movs	r2, #0
 801388e:	2101      	movs	r1, #1
 8013890:	f7f2 f9bc 	bl	8005c0c <HAL_FDCAN_ActivateNotification>
}
 8013894:	b003      	add	sp, #12
 8013896:	f85d fb04 	ldr.w	pc, [sp], #4
	if (not success) return HAL_ERROR;
 801389a:	2001      	movs	r0, #1
 801389c:	e7fa      	b.n	8013894 <_ZN11CANProtocol17ActivateReceptionEh+0x18>

0801389e <_ZN11CANProtocol5StartEh>:
HAL_StatusTypeDef CANProtocol::Start(uint8_t ID) {
 801389e:	b507      	push	{r0, r1, r2, lr}
	FDCAN_HandleTypeDef* handle = GetInterface(ID, &success);
 80138a0:	f10d 0207 	add.w	r2, sp, #7
 80138a4:	f7ff ffca 	bl	801383c <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12GetInterfaceEhPb>
	if (not success) return HAL_ERROR;
 80138a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80138ac:	b123      	cbz	r3, 80138b8 <_ZN11CANProtocol5StartEh+0x1a>
	return HAL_FDCAN_Start(handle);
 80138ae:	f7f2 f86a 	bl	8005986 <HAL_FDCAN_Start>
}
 80138b2:	b003      	add	sp, #12
 80138b4:	f85d fb04 	ldr.w	pc, [sp], #4
	if (not success) return HAL_ERROR;
 80138b8:	2001      	movs	r0, #1
 80138ba:	e7fa      	b.n	80138b2 <_ZN11CANProtocol5StartEh+0x14>

080138bc <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 80138bc:	460a      	mov	r2, r1
 80138be:	b510      	push	{r4, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80138c0:	e9d0 1401 	ldrd	r1, r4, [r0, #4]
 80138c4:	42a1      	cmp	r1, r4
 80138c6:	d004      	beq.n	80138d2 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE9push_backERKS1_+0x16>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80138c8:	6812      	ldr	r2, [r2, #0]
 80138ca:	f841 2b04 	str.w	r2, [r1], #4
	    ++this->_M_impl._M_finish;
 80138ce:	6041      	str	r1, [r0, #4]
      }
 80138d0:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), __x);
 80138d2:	f7ee fa33 	bl	8001d3c <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 80138d6:	e7fb      	b.n	80138d0 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE9push_backERKS1_+0x14>

080138d8 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80138d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80138dc:	e9d0 9a00 	ldrd	r9, sl, [r0]
 80138e0:	4b2a      	ldr	r3, [pc, #168]	@ (801398c <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb4>)
 80138e2:	4680      	mov	r8, r0
 80138e4:	ebaa 0409 	sub.w	r4, sl, r9
 80138e8:	468b      	mov	fp, r1
 80138ea:	4615      	mov	r5, r2
 80138ec:	10a4      	asrs	r4, r4, #2
 80138ee:	435c      	muls	r4, r3
	if (max_size() - size() < __n)
 80138f0:	4b27      	ldr	r3, [pc, #156]	@ (8013990 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb8>)
 80138f2:	429c      	cmp	r4, r3
 80138f4:	d102      	bne.n	80138fc <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
 80138f6:	4827      	ldr	r0, [pc, #156]	@ (8013994 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xbc>)
 80138f8:	f002 fec0 	bl	801667c <_ZSt20__throw_length_errorPKc>
 80138fc:	45ca      	cmp	sl, r9
 80138fe:	bf14      	ite	ne
 8013900:	4622      	movne	r2, r4
 8013902:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 8013904:	eba1 0609 	sub.w	r6, r1, r9
 8013908:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801390a:	d23a      	bcs.n	8013982 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xaa>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801390c:	b3dc      	cbz	r4, 8013986 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xae>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801390e:	429c      	cmp	r4, r3
 8013910:	bf28      	it	cs
 8013912:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8013914:	2024      	movs	r0, #36	@ 0x24
 8013916:	4360      	muls	r0, r4
 8013918:	f002 fdfb 	bl	8016512 <_Znwj>
 801391c:	4607      	mov	r7, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801391e:	eb07 0c06 	add.w	ip, r7, r6
      if (__count > 0)
 8013922:	2e00      	cmp	r6, #0
 8013924:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013926:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801392a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801392c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013930:	682b      	ldr	r3, [r5, #0]
 8013932:	f8cc 3000 	str.w	r3, [ip]
 8013936:	dd04      	ble.n	8013942 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x6a>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8013938:	4632      	mov	r2, r6
 801393a:	4649      	mov	r1, r9
 801393c:	4638      	mov	r0, r7
 801393e:	f002 ff75 	bl	801682c <memmove>
      ptrdiff_t __count = __last - __first;
 8013942:	ebaa 0a0b 	sub.w	sl, sl, fp
	      ++__new_finish;
 8013946:	3624      	adds	r6, #36	@ 0x24
      if (__count > 0)
 8013948:	f1ba 0f00 	cmp.w	sl, #0
 801394c:	443e      	add	r6, r7
 801394e:	dd04      	ble.n	801395a <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x82>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8013950:	4652      	mov	r2, sl
 8013952:	4659      	mov	r1, fp
 8013954:	4630      	mov	r0, r6
 8013956:	f003 f861 	bl	8016a1c <memcpy>
      return __result + __count;
 801395a:	4456      	add	r6, sl
	if (__p)
 801395c:	f1b9 0f00 	cmp.w	r9, #0
 8013960:	d006      	beq.n	8013970 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x98>
		    this->_M_impl._M_end_of_storage - __old_start);
 8013962:	f8d8 1008 	ldr.w	r1, [r8, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8013966:	4648      	mov	r0, r9
 8013968:	eba1 0109 	sub.w	r1, r1, r9
 801396c:	f002 fdac 	bl	80164c8 <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8013970:	2324      	movs	r3, #36	@ 0x24
      this->_M_impl._M_finish = __new_finish;
 8013972:	e9c8 7600 	strd	r7, r6, [r8]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8013976:	fb03 7704 	mla	r7, r3, r4, r7
 801397a:	f8c8 7008 	str.w	r7, [r8, #8]
    }
 801397e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013982:	461c      	mov	r4, r3
 8013984:	e7c6      	b.n	8013914 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8013986:	4627      	mov	r7, r4
 8013988:	e7c9      	b.n	801391e <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 801398a:	bf00      	nop
 801398c:	38e38e39 	.word	0x38e38e39
 8013990:	038e38e3 	.word	0x038e38e3
 8013994:	08016b36 	.word	0x08016b36

08013998 <_ZN11CANProtocol12AddInterfaceEhP19FDCAN_HandleTypeDef>:
void CANProtocol::AddInterface(uint8_t ID, FDCAN_HandleTypeDef* interface) {
 8013998:	b5f0      	push	{r4, r5, r6, r7, lr}
 801399a:	4606      	mov	r6, r0
 801399c:	b08d      	sub	sp, #52	@ 0x34
 801399e:	9201      	str	r2, [sp, #4]
	AddInterfaceID(ID);
 80139a0:	f7ff fcd2 	bl	8013348 <_ZN21CommunicationProtocol14AddInterfaceIDEh>
	AddInterfaceBuffer();
 80139a4:	4630      	mov	r0, r6
 80139a6:	f7ff fe69 	bl	801367c <_ZN21CommunicationProtocol18AddInterfaceBufferEv>
	interfaces.push_back(interface);
 80139aa:	a901      	add	r1, sp, #4
 80139ac:	f106 0038 	add.w	r0, r6, #56	@ 0x38
 80139b0:	f7ff ff84 	bl	80138bc <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE9push_backERKS1_>
	FDCANTxHeader.BitRateSwitch = FDCAN_BRS_ON; 				// FDCAN_BRS_ON FDCAN_BRS_OFF
 80139b4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80139b8:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
	FDCANTxHeader.IdType = FDCAN_STANDARD_ID; 				// FDCAN_STANDARD_ID or FDCAN_CLASSIC_CAN
 80139bc:	2300      	movs	r3, #0
	FDCANTxHeader.BitRateSwitch = FDCAN_BRS_ON; 				// FDCAN_BRS_ON FDCAN_BRS_OFF
 80139be:	e9cd 1207 	strd	r1, r2, [sp, #28]
	FDCANTxHeader.FDFormat = FDCAN_FD_CAN; 					// FDCAN_FD_CAN or FDCAN_CLASSIC_CAN
 80139c2:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
	FDCANTxHeader.TxFrameType = FDCAN_DATA_FRAME; 			// FDCAN_DATA_FRAME or FDCAN_REMOTE_FRAME
 80139c6:	e9cd 3304 	strd	r3, r3, [sp, #16]
	FDCANTxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS; 	// FDCAN_NO_TX_EVENTS or FDCAN_STORE_TX_EVENTS
 80139ca:	e9cd 2309 	strd	r2, r3, [sp, #36]	@ 0x24
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80139ce:	e9d6 7313 	ldrd	r7, r3, [r6, #76]	@ 0x4c
 80139d2:	429f      	cmp	r7, r3
 80139d4:	d00b      	beq.n	80139ee <_ZN11CANProtocol12AddInterfaceEhP19FDCAN_HandleTypeDef+0x56>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80139d6:	ad03      	add	r5, sp, #12
 80139d8:	463c      	mov	r4, r7
	    ++this->_M_impl._M_finish;
 80139da:	3724      	adds	r7, #36	@ 0x24
 80139dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80139de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80139e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80139e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80139e4:	682b      	ldr	r3, [r5, #0]
 80139e6:	6023      	str	r3, [r4, #0]
 80139e8:	64f7      	str	r7, [r6, #76]	@ 0x4c
}
 80139ea:	b00d      	add	sp, #52	@ 0x34
 80139ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  _M_realloc_insert(end(), __x);
 80139ee:	aa03      	add	r2, sp, #12
 80139f0:	4639      	mov	r1, r7
 80139f2:	f106 0048 	add.w	r0, r6, #72	@ 0x48
 80139f6:	f7ff ff6f 	bl	80138d8 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 80139fa:	e7f6      	b.n	80139ea <_ZN11CANProtocol12AddInterfaceEhP19FDCAN_HandleTypeDef+0x52>

080139fc <_ZN11CANProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb>:
 * @param input data: message to decode
 * @param output index: processed length in the data
 * @param output success: true if message decoded
 * @return the decoded and parsed message based on the custom protocol
 */
MessageHeader CANProtocol::DecodeProtocol(uint8_t ID, std::vector<uint8_t> message, uint16_t* index, bool* success) {
 80139fc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8013a00:	461d      	mov	r5, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013a02:	2300      	movs	r3, #0
 8013a04:	4604      	mov	r4, r0
 8013a06:	60c3      	str	r3, [r0, #12]
 8013a08:	e9c0 3301 	strd	r3, r3, [r0, #4]
	return *(this->_M_impl._M_start + __n);
 8013a0c:	682b      	ldr	r3, [r5, #0]
	MessageHeader decoded_message;

	decoded_message.target_address = message[0];
 8013a0e:	781a      	ldrb	r2, [r3, #0]
      { return __normal_iterator(_M_current + __n); }
 8013a10:	1cdf      	adds	r7, r3, #3
 8013a12:	7402      	strb	r2, [r0, #16]
	decoded_message.source_address = message[1];
 8013a14:	785a      	ldrb	r2, [r3, #1]
 8013a16:	7442      	strb	r2, [r0, #17]
 8013a18:	789e      	ldrb	r6, [r3, #2]
 8013a1a:	eb07 0806 	add.w	r8, r7, r6
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8013a1e:	4630      	mov	r0, r6
 8013a20:	f7ff fe85 	bl	801372e <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8013a24:	4406      	add	r6, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8013a26:	4602      	mov	r2, r0
			      _Category>::__copy_m(__first, __last, __result);
 8013a28:	4641      	mov	r1, r8
 8013a2a:	9001      	str	r0, [sp, #4]
 8013a2c:	4638      	mov	r0, r7
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8013a2e:	9603      	str	r6, [sp, #12]
 8013a30:	f7ec ffd8 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8013a34:	a901      	add	r1, sp, #4
	  this->_M_impl._M_finish =
 8013a36:	9002      	str	r0, [sp, #8]
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8013a38:	1d20      	adds	r0, r4, #4
 8013a3a:	f7ff fee8 	bl	801380e <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE.isra.0>
      }
 8013a3e:	a801      	add	r0, sp, #4
 8013a40:	f7ec ff2c 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	uint16_t length = message[2];

	// Retrieve payload based on length byte
	decoded_message.payload = std::vector<uint8_t>(message.begin() + 3, message.begin() + 3 + length);

	*success = true;
 8013a44:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013a46:	2201      	movs	r2, #1
	*index = message.size();

	return decoded_message;
}
 8013a48:	4620      	mov	r0, r4
	*success = true;
 8013a4a:	701a      	strb	r2, [r3, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013a4c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013a50:	1a9b      	subs	r3, r3, r2
	*index = message.size();
 8013a52:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013a54:	8013      	strh	r3, [r2, #0]
}
 8013a56:	b004      	add	sp, #16
 8013a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013a5c <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef>:
std::vector<uint8_t> CANProtocol::CodeProtocol(MessageHeader message, FDCAN_TxHeaderTypeDef* TxHeader) {
 8013a5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a60:	4698      	mov	r8, r3
	TxHeader->Identifier = message.target_address;
 8013a62:	7c13      	ldrb	r3, [r2, #16]
std::vector<uint8_t> CANProtocol::CodeProtocol(MessageHeader message, FDCAN_TxHeaderTypeDef* TxHeader) {
 8013a64:	4617      	mov	r7, r2
 8013a66:	4689      	mov	r9, r1
	TxHeader->Identifier = message.target_address;
 8013a68:	f8c8 3000 	str.w	r3, [r8]
std::vector<uint8_t> CANProtocol::CodeProtocol(MessageHeader message, FDCAN_TxHeaderTypeDef* TxHeader) {
 8013a6c:	4604      	mov	r4, r0
	TxHeader->MessageMarker = marker;
 8013a6e:	6c4b      	ldr	r3, [r1, #68]	@ 0x44
	if (marker >= 4294967295)
 8013a70:	1c5a      	adds	r2, r3, #1
 8013a72:	f04f 0200 	mov.w	r2, #0
	TxHeader->MessageMarker = marker;
 8013a76:	f8c8 3020 	str.w	r3, [r8, #32]
		marker = 0;
 8013a7a:	bf0c      	ite	eq
 8013a7c:	4613      	moveq	r3, r2
		marker++;
 8013a7e:	3301      	addne	r3, #1
 8013a80:	644b      	str	r3, [r1, #68]	@ 0x44
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8013a82:	2101      	movs	r1, #1
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013a84:	6082      	str	r2, [r0, #8]
 8013a86:	e9c0 2200 	strd	r2, r2, [r0]
 8013a8a:	4a41      	ldr	r2, [pc, #260]	@ (8013b90 <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0x134>)
 8013a8c:	f7ec ff27 	bl	80008de <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8013a90:	4606      	mov	r6, r0
      pointer __new_start(this->_M_allocate(__len));
 8013a92:	f7ff fe4c 	bl	801372e <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
 8013a96:	7c7b      	ldrb	r3, [r7, #17]
 8013a98:	4601      	mov	r1, r0
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8013a9a:	4406      	add	r6, r0
      pointer __new_start(this->_M_allocate(__len));
 8013a9c:	4605      	mov	r5, r0
 8013a9e:	f801 3b01 	strb.w	r3, [r1], #1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8013aa2:	42b1      	cmp	r1, r6
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8013aa4:	60a6      	str	r6, [r4, #8]
      this->_M_impl._M_finish = __new_finish;
 8013aa6:	e9c4 0100 	strd	r0, r1, [r4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013aaa:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
 8013aae:	eba3 0302 	sub.w	r3, r3, r2
	coded_message.push_back((uint8_t) message.payload.size());
 8013ab2:	fa5f fa83 	uxtb.w	sl, r3
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8013ab6:	d02d      	beq.n	8013b14 <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0xb8>
	    ++this->_M_impl._M_finish;
 8013ab8:	3502      	adds	r5, #2
 8013aba:	f880 a001 	strb.w	sl, [r0, #1]
 8013abe:	6065      	str	r5, [r4, #4]
      : _M_current(__i) { }
 8013ac0:	e9d7 a301 	ldrd	sl, r3, [r7, #4]
	if (__first != __last)
 8013ac4:	4553      	cmp	r3, sl
 8013ac6:	d018      	beq.n	8013afa <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0x9e>
			  - this->_M_impl._M_finish) >= __n)
 8013ac8:	68a2      	ldr	r2, [r4, #8]
    { return __lhs.base() - __rhs.base(); }
 8013aca:	eba3 050a 	sub.w	r5, r3, sl
      : _M_current(__i) { }
 8013ace:	e9d4 7600 	ldrd	r7, r6, [r4]
 8013ad2:	1b92      	subs	r2, r2, r6
	    if (size_type(this->_M_impl._M_end_of_storage
 8013ad4:	4295      	cmp	r5, r2
 8013ad6:	d835      	bhi.n	8013b44 <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0xe8>
 8013ad8:	4619      	mov	r1, r3
 8013ada:	4632      	mov	r2, r6
 8013adc:	4650      	mov	r0, sl
 8013ade:	f7ec ff81 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		    this->_M_impl._M_finish += __n - __elems_after;
 8013ae2:	6862      	ldr	r2, [r4, #4]
 8013ae4:	4631      	mov	r1, r6
 8013ae6:	4630      	mov	r0, r6
 8013ae8:	442a      	add	r2, r5
 8013aea:	6062      	str	r2, [r4, #4]
 8013aec:	f7ed ff06 	bl	80018fc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8013af0:	4632      	mov	r2, r6
 8013af2:	4651      	mov	r1, sl
 8013af4:	4650      	mov	r0, sl
 8013af6:	f7ec ff75 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	TxHeader->DataLength = GetProtocolLength(coded_message.size());
 8013afa:	4648      	mov	r0, r9
 8013afc:	e9d4 3100 	ldrd	r3, r1, [r4]
 8013b00:	1ac9      	subs	r1, r1, r3
 8013b02:	b289      	uxth	r1, r1
 8013b04:	f7ff fe38 	bl	8013778 <_ZN11CANProtocol17GetProtocolLengthEt>
 8013b08:	f8c8 000c 	str.w	r0, [r8, #12]
}
 8013b0c:	4620      	mov	r0, r4
 8013b0e:	b003      	add	sp, #12
 8013b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8013b14:	4a1e      	ldr	r2, [pc, #120]	@ (8013b90 <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0x134>)
 8013b16:	2101      	movs	r1, #1
 8013b18:	4620      	mov	r0, r4
 8013b1a:	f7ec fee0 	bl	80008de <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8013b1e:	4683      	mov	fp, r0
      pointer __new_start(this->_M_allocate(__len));
 8013b20:	f7ff fe05 	bl	801372e <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8013b24:	782b      	ldrb	r3, [r5, #0]
		    this->_M_impl._M_end_of_storage - __old_start);
 8013b26:	68a1      	ldr	r1, [r4, #8]
      pointer __new_start(this->_M_allocate(__len));
 8013b28:	4606      	mov	r6, r0
 8013b2a:	7003      	strb	r3, [r0, #0]
 8013b2c:	f880 a001 	strb.w	sl, [r0, #1]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8013b30:	1b49      	subs	r1, r1, r5
 8013b32:	4628      	mov	r0, r5
 8013b34:	f002 fcc8 	bl	80164c8 <_ZdlPvj>
	      ++__new_finish;
 8013b38:	1cb3      	adds	r3, r6, #2
      this->_M_impl._M_start = __new_start;
 8013b3a:	6026      	str	r6, [r4, #0]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8013b3c:	445e      	add	r6, fp
      this->_M_impl._M_finish = __new_finish;
 8013b3e:	6063      	str	r3, [r4, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8013b40:	60a6      	str	r6, [r4, #8]
 8013b42:	e7bd      	b.n	8013ac0 <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0x64>
		  _M_check_len(__n, "vector::_M_range_insert");
 8013b44:	4629      	mov	r1, r5
 8013b46:	4a13      	ldr	r2, [pc, #76]	@ (8013b94 <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0x138>)
 8013b48:	4620      	mov	r0, r4
 8013b4a:	9301      	str	r3, [sp, #4]
 8013b4c:	f7ec fec7 	bl	80008de <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8013b50:	4683      	mov	fp, r0
		pointer __new_start(this->_M_allocate(__len));
 8013b52:	f7ff fdec 	bl	801372e <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
 8013b56:	4631      	mov	r1, r6
 8013b58:	4602      	mov	r2, r0
 8013b5a:	4605      	mov	r5, r0
 8013b5c:	4638      	mov	r0, r7
 8013b5e:	f7ed fecd 	bl	80018fc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8013b62:	9b01      	ldr	r3, [sp, #4]
 8013b64:	4602      	mov	r2, r0
 8013b66:	4650      	mov	r0, sl
 8013b68:	4619      	mov	r1, r3
 8013b6a:	f7ec ff3b 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8013b6e:	4631      	mov	r1, r6
 8013b70:	4602      	mov	r2, r0
 8013b72:	4630      	mov	r0, r6
 8013b74:	f7ed fec2 	bl	80018fc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8013b78:	4606      	mov	r6, r0
	if (__p)
 8013b7a:	b127      	cbz	r7, 8013b86 <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0x12a>
			      this->_M_impl._M_end_of_storage - __old_start);
 8013b7c:	68a1      	ldr	r1, [r4, #8]
 8013b7e:	4638      	mov	r0, r7
 8013b80:	1bc9      	subs	r1, r1, r7
 8013b82:	f002 fca1 	bl	80164c8 <_ZdlPvj>
		this->_M_impl._M_finish = __new_finish;
 8013b86:	e9c4 5600 	strd	r5, r6, [r4]
		this->_M_impl._M_end_of_storage = __new_start + __len;
 8013b8a:	445d      	add	r5, fp
 8013b8c:	60a5      	str	r5, [r4, #8]
 8013b8e:	e7b4      	b.n	8013afa <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0x9e>
 8013b90:	08016b36 	.word	0x08016b36
 8013b94:	08016b81 	.word	0x08016b81

08013b98 <_ZN11CANProtocol4SendE13MessageHeader>:
HAL_StatusTypeDef CANProtocol::Send(MessageHeader message) {
 8013b98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013b9c:	b093      	sub	sp, #76	@ 0x4c
 8013b9e:	460e      	mov	r6, r1
	FDCAN_HandleTypeDef* interface_ = GetInterface(message.interface, &success);
 8013ba0:	7809      	ldrb	r1, [r1, #0]
HAL_StatusTypeDef CANProtocol::Send(MessageHeader message) {
 8013ba2:	4680      	mov	r8, r0
	FDCAN_HandleTypeDef* interface_ = GetInterface(message.interface, &success);
 8013ba4:	f10d 0203 	add.w	r2, sp, #3
 8013ba8:	f7ff fe48 	bl	801383c <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12GetInterfaceEhPb>
	if (!success) return HAL_ERROR;
 8013bac:	f89d 3003 	ldrb.w	r3, [sp, #3]
	FDCAN_HandleTypeDef* interface_ = GetInterface(message.interface, &success);
 8013bb0:	4681      	mov	r9, r0
	if (!success) return HAL_ERROR;
 8013bb2:	b91b      	cbnz	r3, 8013bbc <_ZN11CANProtocol4SendE13MessageHeader+0x24>
 8013bb4:	2001      	movs	r0, #1
}
 8013bb6:	b013      	add	sp, #76	@ 0x4c
 8013bb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (interface_->State != HAL_FDCAN_STATE_BUSY) return HAL_ERROR;
 8013bbc:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 8013bc0:	2b02      	cmp	r3, #2
 8013bc2:	d1f7      	bne.n	8013bb4 <_ZN11CANProtocol4SendE13MessageHeader+0x1c>
	uint8_t index = GetInterfaceIndex(message.interface, &success);
 8013bc4:	f10d 0203 	add.w	r2, sp, #3
 8013bc8:	7831      	ldrb	r1, [r6, #0]
 8013bca:	4640      	mov	r0, r8
	FDCAN_TxHeaderTypeDef TxHeader = FDCANTxHeaders[index];
 8013bcc:	ad09      	add	r5, sp, #36	@ 0x24
	uint8_t index = GetInterfaceIndex(message.interface, &success);
 8013bce:	f7ff fc01 	bl	80133d4 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
	FDCAN_TxHeaderTypeDef TxHeader = FDCANTxHeaders[index];
 8013bd2:	f8d8 4048 	ldr.w	r4, [r8, #72]	@ 0x48
	return *(this->_M_impl._M_start + __n);
 8013bd6:	b207      	sxth	r7, r0
 8013bd8:	eb07 03c7 	add.w	r3, r7, r7, lsl #3
 8013bdc:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8013be0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8013be4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013be6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013be8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013bea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013bec:	6823      	ldr	r3, [r4, #0]
 8013bee:	602b      	str	r3, [r5, #0]
 8013bf0:	00bd      	lsls	r5, r7, #2
 8013bf2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013bf6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013bfa:	7833      	ldrb	r3, [r6, #0]
 8013bfc:	f88d 3010 	strb.w	r3, [sp, #16]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013c00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013c04:	1ae4      	subs	r4, r4, r3
	this->_M_impl._M_start = this->_M_allocate(__n);
 8013c06:	4620      	mov	r0, r4
 8013c08:	f7ff fd91 	bl	801372e <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8013c0c:	4404      	add	r4, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8013c0e:	4602      	mov	r2, r0
 8013c10:	9005      	str	r0, [sp, #20]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8013c12:	9407      	str	r4, [sp, #28]
 8013c14:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
 8013c18:	f7ec fee4 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8013c1c:	8a33      	ldrh	r3, [r6, #16]
	buffers_to_transfer[index] = CodeProtocol(message, &TxHeader);
 8013c1e:	aa04      	add	r2, sp, #16
 8013c20:	4641      	mov	r1, r8
	this->_M_impl._M_finish =
 8013c22:	9006      	str	r0, [sp, #24]
 8013c24:	a801      	add	r0, sp, #4
 8013c26:	f8ad 3020 	strh.w	r3, [sp, #32]
 8013c2a:	ab09      	add	r3, sp, #36	@ 0x24
 8013c2c:	f7ff ff16 	bl	8013a5c <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef>
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8013c30:	a901      	add	r1, sp, #4
 8013c32:	4638      	mov	r0, r7
 8013c34:	f7ff fdeb 	bl	801380e <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE.isra.0>
      }
 8013c38:	a801      	add	r0, sp, #4
 8013c3a:	f7ec fe2f 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8013c3e:	a805      	add	r0, sp, #20
 8013c40:	f7ec fe2c 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return *(this->_M_impl._M_start + __n);
 8013c44:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013c48:	1959      	adds	r1, r3, r5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013c4a:	595a      	ldr	r2, [r3, r5]
 8013c4c:	684b      	ldr	r3, [r1, #4]
 8013c4e:	1a9b      	subs	r3, r3, r2
	if (buffers_to_transfer[index].size() > 64) return HAL_ERROR;
 8013c50:	2b40      	cmp	r3, #64	@ 0x40
 8013c52:	d8af      	bhi.n	8013bb4 <_ZN11CANProtocol4SendE13MessageHeader+0x1c>
	return HAL_FDCAN_AddMessageToTxFifoQ(interface_, &TxHeader, &(buffers_to_transfer[index])[0]);
 8013c54:	a909      	add	r1, sp, #36	@ 0x24
 8013c56:	4648      	mov	r0, r9
 8013c58:	f7f1 feaf 	bl	80059ba <HAL_FDCAN_AddMessageToTxFifoQ>
 8013c5c:	e7ab      	b.n	8013bb6 <_ZN11CANProtocol4SendE13MessageHeader+0x1e>

08013c5e <_ZN12UARTProtocol17ActivateReceptionEh>:
 * @brief OVERRIDE Activate reception of the associated hardware interface
 *
 * @param input ID: interface ID
 * @return the interface access status
 */
HAL_StatusTypeDef UARTProtocol::ActivateReception(uint8_t ID) {
 8013c5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t index = GetInterfaceIndex(ID, success);
 8013c60:	f10d 0207 	add.w	r2, sp, #7
 8013c64:	4604      	mov	r4, r0
 8013c66:	460d      	mov	r5, r1
 8013c68:	f7ff fbb4 	bl	80133d4 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
	if (*success) {
 8013c6c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013c70:	b1d3      	cbz	r3, 8013ca8 <_ZN12UARTProtocol17ActivateReceptionEh+0x4a>
	return *(this->_M_impl._M_start + __n);
 8013c72:	b203      	sxth	r3, r0
		return interfaces[index];
 8013c74:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
	bool success;
	UART_HandleTypeDef* handle = GetInterface(ID, &success);
	if (not success) return HAL_ERROR;
	std::vector<uint8_t>* buffer = GetBuffer(ID, &success);
 8013c76:	4620      	mov	r0, r4
 8013c78:	4629      	mov	r1, r5
 8013c7a:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8013c7e:	f10d 0207 	add.w	r2, sp, #7
 8013c82:	f7ff fbd3 	bl	801342c <_ZN21CommunicationProtocol9GetBufferEhPb>
	if (not success) return HAL_ERROR;
 8013c86:	f89d 3007 	ldrb.w	r3, [sp, #7]
	std::vector<uint8_t>* buffer = GetBuffer(ID, &success);
 8013c8a:	4604      	mov	r4, r0
	if (not success) return HAL_ERROR;
 8013c8c:	b163      	cbz	r3, 8013ca8 <_ZN12UARTProtocol17ActivateReceptionEh+0x4a>

	HAL_StatusTypeDef status;
	status = UART_CheckIdleState(handle); // to reset UART RxState
 8013c8e:	4630      	mov	r0, r6
 8013c90:	f7f7 fc53 	bl	800b53a <UART_CheckIdleState>
	do {
		status = HAL_UARTEx_ReceiveToIdle_DMA(handle, buffer->data(), BUFFER_SIZE);
 8013c94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8013c98:	6821      	ldr	r1, [r4, #0]
 8013c9a:	4630      	mov	r0, r6
 8013c9c:	f7f7 fdea 	bl	800b874 <HAL_UARTEx_ReceiveToIdle_DMA>
	} while (status == HAL_BUSY);
 8013ca0:	2802      	cmp	r0, #2
 8013ca2:	d0f7      	beq.n	8013c94 <_ZN12UARTProtocol17ActivateReceptionEh+0x36>
	return status;
}
 8013ca4:	b002      	add	sp, #8
 8013ca6:	bd70      	pop	{r4, r5, r6, pc}
	if (not success) return HAL_ERROR;
 8013ca8:	2001      	movs	r0, #1
 8013caa:	e7fb      	b.n	8013ca4 <_ZN12UARTProtocol17ActivateReceptionEh+0x46>

08013cac <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8013cac:	2800      	cmp	r0, #0
      _M_allocate(size_t __n)
 8013cae:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8013cb0:	d006      	beq.n	8013cc0 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0x14>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8013cb2:	da01      	bge.n	8013cb8 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0xc>
	    std::__throw_bad_alloc();
 8013cb4:	f002 fcdc 	bl	8016670 <_ZSt17__throw_bad_allocv>
      }
 8013cb8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8013cbc:	f002 bc29 	b.w	8016512 <_Znwj>
 8013cc0:	bd08      	pop	{r3, pc}

08013cc2 <_ZN12UARTProtocol13DetectPatternESt6vectorIhSaIhEES2_tPb>:
 * @param input pattern: patter to detect
 * @param input start_index: the detection of the pattern starts at this index
 * @param output success: whether successful
 * @return the base index of the first iteration of the detected pattern in message
 */
uint16_t UARTProtocol::DetectPattern(std::vector<uint8_t> message, std::vector<uint8_t> pattern, uint16_t start_index, bool* success) {
 8013cc2:	b5f0      	push	{r4, r5, r6, r7, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013cc4:	e9d1 5000 	ldrd	r5, r0, [r1]
	uint8_t counter = 0;
 8013cc8:	2100      	movs	r1, #0
 8013cca:	1b40      	subs	r0, r0, r5
	for (uint16_t index = start_index; index < message.size(); index++) {
 8013ccc:	4283      	cmp	r3, r0
 8013cce:	d302      	bcc.n	8013cd6 <_ZN12UARTProtocol13DetectPatternESt6vectorIhSaIhEES2_tPb+0x14>
 8013cd0:	2300      	movs	r3, #0
			*success = true;
			return index - counter + 1;
		}
	}
	*success = false;
	return 0;
 8013cd2:	4618      	mov	r0, r3
 8013cd4:	e00e      	b.n	8013cf4 <_ZN12UARTProtocol13DetectPatternESt6vectorIhSaIhEES2_tPb+0x32>
	return *(this->_M_impl._M_start + __n);
 8013cd6:	6816      	ldr	r6, [r2, #0]
		if (message[index] != pattern[counter]) {
 8013cd8:	5cef      	ldrb	r7, [r5, r3]
 8013cda:	3301      	adds	r3, #1
 8013cdc:	5c74      	ldrb	r4, [r6, r1]
 8013cde:	42a7      	cmp	r7, r4
 8013ce0:	d10b      	bne.n	8013cfa <_ZN12UARTProtocol13DetectPatternESt6vectorIhSaIhEES2_tPb+0x38>
		counter++;
 8013ce2:	3101      	adds	r1, #1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013ce4:	6854      	ldr	r4, [r2, #4]
 8013ce6:	b2c9      	uxtb	r1, r1
 8013ce8:	1ba4      	subs	r4, r4, r6
		if (counter >= pattern.size()) {
 8013cea:	42a1      	cmp	r1, r4
 8013cec:	d306      	bcc.n	8013cfc <_ZN12UARTProtocol13DetectPatternESt6vectorIhSaIhEES2_tPb+0x3a>
			return index - counter + 1;
 8013cee:	1a5b      	subs	r3, r3, r1
 8013cf0:	b298      	uxth	r0, r3
 8013cf2:	2301      	movs	r3, #1
			*success = true;
 8013cf4:	9a05      	ldr	r2, [sp, #20]
 8013cf6:	7013      	strb	r3, [r2, #0]
}
 8013cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			counter = 0;
 8013cfa:	2100      	movs	r1, #0
	for (uint16_t index = start_index; index < message.size(); index++) {
 8013cfc:	b29b      	uxth	r3, r3
 8013cfe:	e7e5      	b.n	8013ccc <_ZN12UARTProtocol13DetectPatternESt6vectorIhSaIhEES2_tPb+0xa>

08013d00 <_ZN12UARTProtocol16PatternPresentAtEtSt6vectorIhSaIhEES2_>:
 * @param input start_index: the detection of the pattern starts at this index
 * @param input message: message used to find the pattern
 * @param input pattern: patter to detect
 * @param output success: true if pattern detected
 */
bool UARTProtocol::PatternPresentAt(uint16_t start_index, std::vector<uint8_t> message, std::vector<uint8_t> pattern) {
 8013d00:	b570      	push	{r4, r5, r6, lr}
    uint16_t index = start_index;
    for (uint8_t byte : pattern) {
 8013d02:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013d06:	1ac9      	subs	r1, r1, r3
 8013d08:	18c8      	adds	r0, r1, r3
 8013d0a:	42a3      	cmp	r3, r4
 8013d0c:	b280      	uxth	r0, r0
 8013d0e:	d101      	bne.n	8013d14 <_ZN12UARTProtocol16PatternPresentAtEtSt6vectorIhSaIhEES2_+0x14>
        if (byte != message[index])
            return false;
        index++;
    }
    return true;
 8013d10:	2001      	movs	r0, #1
}
 8013d12:	bd70      	pop	{r4, r5, r6, pc}
        if (byte != message[index])
 8013d14:	6816      	ldr	r6, [r2, #0]
    for (uint8_t byte : pattern) {
 8013d16:	f813 5b01 	ldrb.w	r5, [r3], #1
        if (byte != message[index])
 8013d1a:	5c30      	ldrb	r0, [r6, r0]
 8013d1c:	42a8      	cmp	r0, r5
 8013d1e:	d0f3      	beq.n	8013d08 <_ZN12UARTProtocol16PatternPresentAtEtSt6vectorIhSaIhEES2_+0x8>
            return false;
 8013d20:	2000      	movs	r0, #0
 8013d22:	e7f6      	b.n	8013d12 <_ZN12UARTProtocol16PatternPresentAtEtSt6vectorIhSaIhEES2_+0x12>

08013d24 <_ZN12UARTProtocol11GetChecksumESt6vectorIhSaIhEE>:
 8013d24:	e9d1 3200 	ldrd	r3, r2, [r1]
 *
 * @param input message: vector of bytes to derive the checksum
 * @return the 1-byte checksum
 */
uint8_t UARTProtocol::GetChecksum(std::vector<uint8_t> message) {
	uint8_t checksum = 0;
 8013d28:	2000      	movs	r0, #0
	for (uint8_t byte : message)
 8013d2a:	429a      	cmp	r2, r3
 8013d2c:	d102      	bne.n	8013d34 <_ZN12UARTProtocol11GetChecksumESt6vectorIhSaIhEE+0x10>
		checksum += byte;
	checksum = ~checksum + 1;
 8013d2e:	4240      	negs	r0, r0
	return checksum;
}
 8013d30:	b2c0      	uxtb	r0, r0
 8013d32:	4770      	bx	lr
		checksum += byte;
 8013d34:	f813 1b01 	ldrb.w	r1, [r3], #1
 8013d38:	4408      	add	r0, r1
 8013d3a:	b2c0      	uxtb	r0, r0
	return *this;
 8013d3c:	e7f5      	b.n	8013d2a <_ZN12UARTProtocol11GetChecksumESt6vectorIhSaIhEE+0x6>

08013d3e <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE>:
 8013d3e:	e9d3 0300 	ldrd	r0, r3, [r3]
 * @param input start_index: index (included) from which the checksum check is started
 * @param input end_index: index (excluded) from which the checksum check is finished
 * @param input message: byte vector message
 * @return true if the checksum is valid
 */
bool UARTProtocol::Checksum(uint16_t start_index, uint16_t end_index, std::vector<uint8_t> message) {
 8013d42:	b510      	push	{r4, lr}
 8013d44:	1a1b      	subs	r3, r3, r0
	uint8_t sum = 0;
	if (start_index > message.size()) return false;
 8013d46:	4299      	cmp	r1, r3
 8013d48:	d812      	bhi.n	8013d70 <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE+0x32>
	if (end_index > message.size()) return false;
 8013d4a:	429a      	cmp	r2, r3
 8013d4c:	d810      	bhi.n	8013d70 <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE+0x32>
	if (start_index > end_index) return false;
 8013d4e:	4291      	cmp	r1, r2
 8013d50:	d80e      	bhi.n	8013d70 <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE+0x32>
 8013d52:	1843      	adds	r3, r0, r1
	uint8_t sum = 0;
 8013d54:	2000      	movs	r0, #0
	for (uint16_t index = start_index; index < end_index; index++) {
 8013d56:	4291      	cmp	r1, r2
 8013d58:	d103      	bne.n	8013d62 <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE+0x24>
		sum += message[index];
	}
	return (sum == 0);
 8013d5a:	fab0 f080 	clz	r0, r0
 8013d5e:	0940      	lsrs	r0, r0, #5
}
 8013d60:	bd10      	pop	{r4, pc}
		sum += message[index];
 8013d62:	f813 4b01 	ldrb.w	r4, [r3], #1
	for (uint16_t index = start_index; index < end_index; index++) {
 8013d66:	3101      	adds	r1, #1
		sum += message[index];
 8013d68:	4420      	add	r0, r4
	for (uint16_t index = start_index; index < end_index; index++) {
 8013d6a:	b289      	uxth	r1, r1
		sum += message[index];
 8013d6c:	b2c0      	uxtb	r0, r0
	for (uint16_t index = start_index; index < end_index; index++) {
 8013d6e:	e7f2      	b.n	8013d56 <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE+0x18>
	if (start_index > message.size()) return false;
 8013d70:	2000      	movs	r0, #0
 8013d72:	e7f5      	b.n	8013d60 <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE+0x22>

08013d74 <_ZN12UARTProtocol7IsRS485Eh>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8013d74:	e9d0 3217 	ldrd	r3, r2, [r0, #92]	@ 0x5c
 *
 * @param input ID: interface ID
 * @return true if interface is RS485
 */
bool UARTProtocol::IsRS485(uint8_t ID) {
	for (uint8_t &RS485_interface : RS485_interfaces) {
 8013d78:	4293      	cmp	r3, r2
 8013d7a:	d101      	bne.n	8013d80 <_ZN12UARTProtocol7IsRS485Eh+0xc>
		if (RS485_interface == ID) return true;
	}
	return false;
 8013d7c:	2000      	movs	r0, #0
 8013d7e:	4770      	bx	lr
		if (RS485_interface == ID) return true;
 8013d80:	f813 0b01 	ldrb.w	r0, [r3], #1
 8013d84:	4288      	cmp	r0, r1
 8013d86:	d1f7      	bne.n	8013d78 <_ZN12UARTProtocol7IsRS485Eh+0x4>
 8013d88:	2001      	movs	r0, #1
}
 8013d8a:	4770      	bx	lr

08013d8c <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8013d8c:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 8013d8e:	680d      	ldr	r5, [r1, #0]
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8013d90:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 8013d92:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 8013d94:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 8013d98:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 8013d9a:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8013d9c:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 8013d9e:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 8013da0:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8013da2:	688d      	ldr	r5, [r1, #8]
 8013da4:	6085      	str	r5, [r0, #8]
      }
 8013da6:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 8013da8:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 8013daa:	e9c1 3300 	strd	r3, r3, [r1]
 8013dae:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 8013db2:	f7ec fd73 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      }
 8013db6:	b005      	add	sp, #20
 8013db8:	bd30      	pop	{r4, r5, pc}
	...

08013dbc <_ZNSt6vectorIhSaIhEE9push_backERKh>:
      push_back(const value_type& __x)
 8013dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8013dc0:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
      push_back(const value_type& __x)
 8013dc4:	4605      	mov	r5, r0
 8013dc6:	4689      	mov	r9, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8013dc8:	429c      	cmp	r4, r3
 8013dca:	d006      	beq.n	8013dda <_ZNSt6vectorIhSaIhEE9push_backERKh+0x1e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8013dcc:	780b      	ldrb	r3, [r1, #0]
 8013dce:	7023      	strb	r3, [r4, #0]
	    ++this->_M_impl._M_finish;
 8013dd0:	6843      	ldr	r3, [r0, #4]
 8013dd2:	3301      	adds	r3, #1
 8013dd4:	6043      	str	r3, [r0, #4]
      }
 8013dd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8013dda:	4a10      	ldr	r2, [pc, #64]	@ (8013e1c <_ZNSt6vectorIhSaIhEE9push_backERKh+0x60>)
 8013ddc:	2101      	movs	r1, #1
 8013dde:	f7ec fd7e 	bl	80008de <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
      pointer __old_start = this->_M_impl._M_start;
 8013de2:	682f      	ldr	r7, [r5, #0]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8013de4:	4680      	mov	r8, r0
      pointer __new_start(this->_M_allocate(__len));
 8013de6:	f7ff ff61 	bl	8013cac <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
    { return __lhs.base() - __rhs.base(); }
 8013dea:	1be4      	subs	r4, r4, r7
 8013dec:	f899 3000 	ldrb.w	r3, [r9]
 8013df0:	4606      	mov	r6, r0
      if (__count > 0)
 8013df2:	2c00      	cmp	r4, #0
 8013df4:	5503      	strb	r3, [r0, r4]
 8013df6:	dd03      	ble.n	8013e00 <_ZNSt6vectorIhSaIhEE9push_backERKh+0x44>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8013df8:	4622      	mov	r2, r4
 8013dfa:	4639      	mov	r1, r7
 8013dfc:	f002 fd16 	bl	801682c <memmove>
	      ++__new_finish;
 8013e00:	3401      	adds	r4, #1
 8013e02:	4434      	add	r4, r6
	if (__p)
 8013e04:	b127      	cbz	r7, 8013e10 <_ZNSt6vectorIhSaIhEE9push_backERKh+0x54>
		    this->_M_impl._M_end_of_storage - __old_start);
 8013e06:	68a9      	ldr	r1, [r5, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8013e08:	4638      	mov	r0, r7
 8013e0a:	1bc9      	subs	r1, r1, r7
 8013e0c:	f002 fb5c 	bl	80164c8 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8013e10:	e9c5 6400 	strd	r6, r4, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8013e14:	4446      	add	r6, r8
 8013e16:	60ae      	str	r6, [r5, #8]
      }
 8013e18:	e7dd      	b.n	8013dd6 <_ZNSt6vectorIhSaIhEE9push_backERKh+0x1a>
 8013e1a:	bf00      	nop
 8013e1c:	08016b36 	.word	0x08016b36

08013e20 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb>:
MessageHeader UARTProtocol::DecodeProtocol(uint8_t ID, std::vector<uint8_t> message, uint16_t* index, bool* success) {
 8013e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e24:	460c      	mov	r4, r1
 8013e26:	469a      	mov	sl, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013e28:	2300      	movs	r3, #0
 8013e2a:	b08d      	sub	sp, #52	@ 0x34
	if (IsRS485(ID)) RS485_offset = 1;
 8013e2c:	4611      	mov	r1, r2
MessageHeader UARTProtocol::DecodeProtocol(uint8_t ID, std::vector<uint8_t> message, uint16_t* index, bool* success) {
 8013e2e:	4605      	mov	r5, r0
 8013e30:	60c3      	str	r3, [r0, #12]
 8013e32:	4616      	mov	r6, r2
 8013e34:	e9c0 3301 	strd	r3, r3, [r0, #4]
	if (IsRS485(ID)) RS485_offset = 1;
 8013e38:	4620      	mov	r0, r4
 8013e3a:	f7ff ff9b 	bl	8013d74 <_ZN12UARTProtocol7IsRS485Eh>
	uint16_t start_index = DetectPattern(message, protocol_start, *index, success);
 8013e3e:	4651      	mov	r1, sl
	if (IsRS485(ID)) RS485_offset = 1;
 8013e40:	4607      	mov	r7, r0
	uint16_t start_index = DetectPattern(message, protocol_start, *index, success);
 8013e42:	a806      	add	r0, sp, #24
 8013e44:	f7ec fdda 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8013e48:	f104 0144 	add.w	r1, r4, #68	@ 0x44
 8013e4c:	a809      	add	r0, sp, #36	@ 0x24
 8013e4e:	f7ec fdd5 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8013e52:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013e54:	aa09      	add	r2, sp, #36	@ 0x24
 8013e56:	a906      	add	r1, sp, #24
 8013e58:	9300      	str	r3, [sp, #0]
 8013e5a:	4620      	mov	r0, r4
 8013e5c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8013e5e:	881b      	ldrh	r3, [r3, #0]
 8013e60:	f7ff ff2f 	bl	8013cc2 <_ZN12UARTProtocol13DetectPatternESt6vectorIhSaIhEES2_tPb>
 8013e64:	4680      	mov	r8, r0
      }
 8013e66:	a809      	add	r0, sp, #36	@ 0x24
 8013e68:	f7ec fd18 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8013e6c:	a806      	add	r0, sp, #24
 8013e6e:	f7ec fd15 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (*success) {
 8013e72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013e74:	781b      	ldrb	r3, [r3, #0]
 8013e76:	b193      	cbz	r3, 8013e9e <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x7e>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013e78:	e9da 3200 	ldrd	r3, r2, [sl]
 8013e7c:	1ad2      	subs	r2, r2, r3
 8013e7e:	9203      	str	r2, [sp, #12]
 8013e80:	e9d4 1211 	ldrd	r1, r2, [r4, #68]	@ 0x44
 8013e84:	1a52      	subs	r2, r2, r1
		if (message.size() <= start_index + protocol_start.size() + 1 + RS485_offset) {*success = false; return decoded_message;} // Error - discard message
 8013e86:	9903      	ldr	r1, [sp, #12]
 8013e88:	eb02 0b08 	add.w	fp, r2, r8
 8013e8c:	eb0b 0907 	add.w	r9, fp, r7
 8013e90:	f109 0201 	add.w	r2, r9, #1
 8013e94:	428a      	cmp	r2, r1
 8013e96:	d306      	bcc.n	8013ea6 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x86>
 8013e98:	2300      	movs	r3, #0
 8013e9a:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8013e9c:	7013      	strb	r3, [r2, #0]
}
 8013e9e:	4628      	mov	r0, r5
 8013ea0:	b00d      	add	sp, #52	@ 0x34
 8013ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (IsRS485(ID))
 8013ea6:	4631      	mov	r1, r6
 8013ea8:	4620      	mov	r0, r4
 8013eaa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013eae:	f7ff ff61 	bl	8013d74 <_ZN12UARTProtocol7IsRS485Eh>
 8013eb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013eb6:	2800      	cmp	r0, #0
 8013eb8:	d079      	beq.n	8013fae <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x18e>
			decoded_message.target_address = message[start_index + protocol_start.size()];
 8013eba:	f813 100b 	ldrb.w	r1, [r3, fp]
 8013ebe:	7429      	strb	r1, [r5, #16]
		decoded_message.source_address = message[start_index + protocol_start.size() + RS485_offset];
 8013ec0:	f813 1009 	ldrb.w	r1, [r3, r9]
 8013ec4:	7469      	strb	r1, [r5, #17]
		uint16_t length = message[start_index + protocol_start.size() + 1 + RS485_offset];
 8013ec6:	5c9e      	ldrb	r6, [r3, r2]
 8013ec8:	e9d4 1214 	ldrd	r1, r2, [r4, #80]	@ 0x50
 8013ecc:	1a52      	subs	r2, r2, r1
		if (message.size() <= start_index + protocol_start.size() + length + 2 + RS485_offset + protocol_end.size()) {*success = false; return decoded_message;} // Error - discard message
 8013ece:	9903      	ldr	r1, [sp, #12]
 8013ed0:	3202      	adds	r2, #2
 8013ed2:	443a      	add	r2, r7
 8013ed4:	445a      	add	r2, fp
 8013ed6:	4432      	add	r2, r6
 8013ed8:	428a      	cmp	r2, r1
 8013eda:	d2dd      	bcs.n	8013e98 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x78>
      { return __normal_iterator(_M_current + __n); }
 8013edc:	f109 0902 	add.w	r9, r9, #2
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8013ee0:	4630      	mov	r0, r6
 8013ee2:	4499      	add	r9, r3
 8013ee4:	f7ff fee2 	bl	8013cac <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8013ee8:	1983      	adds	r3, r0, r6
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8013eea:	4602      	mov	r2, r0
 8013eec:	eb09 0b06 	add.w	fp, r9, r6
 8013ef0:	9009      	str	r0, [sp, #36]	@ 0x24
 8013ef2:	4648      	mov	r0, r9
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8013ef4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013ef6:	4659      	mov	r1, fp
 8013ef8:	f7ec fd74 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		decoded_message.payload = std::vector<uint8_t>(message.begin() + start_index + protocol_start.size() + 2 + RS485_offset, message.begin() + start_index + protocol_start.size() + 2 + RS485_offset + length);
 8013efc:	a909      	add	r1, sp, #36	@ 0x24
	  this->_M_impl._M_finish =
 8013efe:	900a      	str	r0, [sp, #40]	@ 0x28
 8013f00:	1d28      	adds	r0, r5, #4
 8013f02:	f7ff ff43 	bl	8013d8c <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8013f06:	a809      	add	r0, sp, #36	@ 0x24
 8013f08:	f7ec fcc8 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (!Checksum(start_index, start_index + protocol_start.size() + length + 3 + RS485_offset, message)) {*success = false; return decoded_message;} // Checksum Error - discard message
 8013f0c:	4651      	mov	r1, sl
 8013f0e:	a809      	add	r0, sp, #36	@ 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013f10:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	@ 0x44
 8013f14:	eba3 0902 	sub.w	r9, r3, r2
 8013f18:	f7ec fd70 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8013f1c:	ab09      	add	r3, sp, #36	@ 0x24
 8013f1e:	4641      	mov	r1, r8
 8013f20:	f109 0903 	add.w	r9, r9, #3
 8013f24:	4620      	mov	r0, r4
 8013f26:	44c1      	add	r9, r8
 8013f28:	44b9      	add	r9, r7
 8013f2a:	44b1      	add	r9, r6
 8013f2c:	fa1f f989 	uxth.w	r9, r9
 8013f30:	464a      	mov	r2, r9
 8013f32:	f7ff ff04 	bl	8013d3e <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE>
 8013f36:	4681      	mov	r9, r0
      }
 8013f38:	a809      	add	r0, sp, #36	@ 0x24
 8013f3a:	f7ec fcaf 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8013f3e:	f1b9 0f00 	cmp.w	r9, #0
 8013f42:	d0a9      	beq.n	8013e98 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x78>
		if (!PatternPresentAt(start_index + protocol_start.size() + length + 3 + RS485_offset, message, protocol_end)) {*success = false; return decoded_message;} // Checksum Error - discard message
 8013f44:	4651      	mov	r1, sl
 8013f46:	a806      	add	r0, sp, #24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013f48:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	@ 0x44
 8013f4c:	eba3 0902 	sub.w	r9, r3, r2
 8013f50:	f7ec fd54 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8013f54:	f104 0150 	add.w	r1, r4, #80	@ 0x50
 8013f58:	a809      	add	r0, sp, #36	@ 0x24
 8013f5a:	f109 0903 	add.w	r9, r9, #3
 8013f5e:	f7ec fd4d 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8013f62:	ab09      	add	r3, sp, #36	@ 0x24
 8013f64:	aa06      	add	r2, sp, #24
 8013f66:	44c1      	add	r9, r8
 8013f68:	4620      	mov	r0, r4
 8013f6a:	44b9      	add	r9, r7
 8013f6c:	44b1      	add	r9, r6
 8013f6e:	fa1f f989 	uxth.w	r9, r9
 8013f72:	4649      	mov	r1, r9
 8013f74:	f7ff fec4 	bl	8013d00 <_ZN12UARTProtocol16PatternPresentAtEtSt6vectorIhSaIhEES2_>
 8013f78:	4681      	mov	r9, r0
      }
 8013f7a:	a809      	add	r0, sp, #36	@ 0x24
 8013f7c:	f7ec fc8e 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8013f80:	a806      	add	r0, sp, #24
 8013f82:	f7ec fc8b 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8013f86:	f1b9 0f00 	cmp.w	r9, #0
 8013f8a:	d085      	beq.n	8013e98 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x78>
		*success = true;
 8013f8c:	2301      	movs	r3, #1
 8013f8e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8013f90:	7013      	strb	r3, [r2, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013f92:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	@ 0x44
 8013f96:	1a9b      	subs	r3, r3, r2
 8013f98:	e9d4 1214 	ldrd	r1, r2, [r4, #80]	@ 0x50
 8013f9c:	1a52      	subs	r2, r2, r1
		*index = start_index + protocol_start.size() + length + 3 + RS485_offset + protocol_end.size();
 8013f9e:	4413      	add	r3, r2
 8013fa0:	3303      	adds	r3, #3
 8013fa2:	4498      	add	r8, r3
 8013fa4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8013fa6:	4447      	add	r7, r8
 8013fa8:	443e      	add	r6, r7
 8013faa:	801e      	strh	r6, [r3, #0]
 8013fac:	e777      	b.n	8013e9e <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x7e>
			decoded_message.target_address = ALL;
 8013fae:	21ff      	movs	r1, #255	@ 0xff
 8013fb0:	e785      	b.n	8013ebe <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x9e>
	...

08013fb4 <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag.isra.0>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8013fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8013fb6:	1a57      	subs	r7, r2, r1
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8013fb8:	4604      	mov	r4, r0
 8013fba:	460d      	mov	r5, r1
 8013fbc:	4616      	mov	r6, r2
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8013fbe:	d502      	bpl.n	8013fc6 <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag.isra.0+0x12>
	  __throw_length_error(
 8013fc0:	4807      	ldr	r0, [pc, #28]	@ (8013fe0 <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag.isra.0+0x2c>)
 8013fc2:	f002 fb5b 	bl	801667c <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8013fc6:	4638      	mov	r0, r7
 8013fc8:	f7ff fe70 	bl	8013cac <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8013fcc:	4407      	add	r7, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8013fce:	4602      	mov	r2, r0
 8013fd0:	6020      	str	r0, [r4, #0]
 8013fd2:	4631      	mov	r1, r6
 8013fd4:	4628      	mov	r0, r5
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8013fd6:	60a7      	str	r7, [r4, #8]
 8013fd8:	f7ec fd04 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	  this->_M_impl._M_finish =
 8013fdc:	6060      	str	r0, [r4, #4]
	}
 8013fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013fe0:	08016b50 	.word	0x08016b50

08013fe4 <_ZN12UARTProtocolC1Ev>:
UARTProtocol::UARTProtocol() {
 8013fe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013fe6:	4b17      	ldr	r3, [pc, #92]	@ (8014044 <_ZN12UARTProtocolC1Ev+0x60>)
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013fe8:	2500      	movs	r5, #0
	_M_range_initialize(__l.begin(), __l.end(),
 8013fea:	4a17      	ldr	r2, [pc, #92]	@ (8014048 <_ZN12UARTProtocolC1Ev+0x64>)
 8013fec:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013fee:	6405      	str	r5, [r0, #64]	@ 0x40
 8013ff0:	6003      	str	r3, [r0, #0]
	_M_range_initialize(__l.begin(), __l.end(),
 8013ff2:	1e91      	subs	r1, r2, #2
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013ff4:	64c5      	str	r5, [r0, #76]	@ 0x4c
 8013ff6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013ffa:	e9c0 5503 	strd	r5, r5, [r0, #12]
 8013ffe:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8014002:	e9c0 5508 	strd	r5, r5, [r0, #32]
 8014006:	e9c0 550a 	strd	r5, r5, [r0, #40]	@ 0x28
 801400a:	e9c0 550c 	strd	r5, r5, [r0, #48]	@ 0x30
 801400e:	e9c0 550e 	strd	r5, r5, [r0, #56]	@ 0x38
 8014012:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
	_M_range_initialize(__l.begin(), __l.end(),
 8014016:	3044      	adds	r0, #68	@ 0x44
 8014018:	f7ff ffcc 	bl	8013fb4 <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag.isra.0>
 801401c:	23ff      	movs	r3, #255	@ 0xff
 801401e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8014022:	f10d 0205 	add.w	r2, sp, #5
 8014026:	a901      	add	r1, sp, #4
	: _M_start(), _M_finish(), _M_end_of_storage()
 8014028:	65a5      	str	r5, [r4, #88]	@ 0x58
 801402a:	f88d 3004 	strb.w	r3, [sp, #4]
 801402e:	e9c4 5514 	strd	r5, r5, [r4, #80]	@ 0x50
	_M_range_initialize(__l.begin(), __l.end(),
 8014032:	f7ff ffbf 	bl	8013fb4 <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag.isra.0>
}
 8014036:	4620      	mov	r0, r4
	: _M_start(), _M_finish(), _M_end_of_storage()
 8014038:	6665      	str	r5, [r4, #100]	@ 0x64
 801403a:	e9c4 5517 	strd	r5, r5, [r4, #92]	@ 0x5c
 801403e:	b003      	add	sp, #12
 8014040:	bd30      	pop	{r4, r5, pc}
 8014042:	bf00      	nop
 8014044:	08016e74 	.word	0x08016e74
 8014048:	08016e4e 	.word	0x08016e4e

0801404c <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0>:
	if (__first != __last)
 801404c:	429a      	cmp	r2, r3
	insert(const_iterator __position, _InputIterator __first,
 801404e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014052:	4604      	mov	r4, r0
 8014054:	460d      	mov	r5, r1
 8014056:	4617      	mov	r7, r2
 8014058:	4699      	mov	r9, r3
 801405a:	d022      	beq.n	80140a2 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x56>
    { return __lhs.base() - __rhs.base(); }
 801405c:	eba3 0802 	sub.w	r8, r3, r2
      : _M_current(__i) { }
 8014060:	f8d0 a000 	ldr.w	sl, [r0]
			  - this->_M_impl._M_finish) >= __n)
 8014064:	e9d0 6301 	ldrd	r6, r3, [r0, #4]
 8014068:	1b9b      	subs	r3, r3, r6
	    if (size_type(this->_M_impl._M_end_of_storage
 801406a:	4598      	cmp	r8, r3
 801406c:	d831      	bhi.n	80140d2 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x86>
    { return __lhs.base() - __rhs.base(); }
 801406e:	eba6 0a01 	sub.w	sl, r6, r1
		if (__elems_after > __n)
 8014072:	45d0      	cmp	r8, sl
 8014074:	d217      	bcs.n	80140a6 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x5a>
		    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 8014076:	eba6 0a08 	sub.w	sl, r6, r8
 801407a:	4632      	mov	r2, r6
 801407c:	4631      	mov	r1, r6
 801407e:	4650      	mov	r0, sl
 8014080:	f7ed fc3c 	bl	80018fc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		    this->_M_impl._M_finish += __n;
 8014084:	6863      	ldr	r3, [r4, #4]
	  if (_Num)
 8014086:	ebba 0205 	subs.w	r2, sl, r5
 801408a:	4443      	add	r3, r8
 801408c:	6063      	str	r3, [r4, #4]
 801408e:	d003      	beq.n	8014098 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x4c>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8014090:	4629      	mov	r1, r5
 8014092:	1ab0      	subs	r0, r6, r2
 8014094:	f002 fbca 	bl	801682c <memmove>
			      _Category>::__copy_m(__first, __last, __result);
 8014098:	462a      	mov	r2, r5
 801409a:	4649      	mov	r1, r9
 801409c:	4638      	mov	r0, r7
 801409e:	f7ec fca1 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	}
 80140a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { _M_current += __n; return *this; }
 80140a6:	eb02 0b0a 	add.w	fp, r2, sl
 80140aa:	4649      	mov	r1, r9
 80140ac:	4632      	mov	r2, r6
		    this->_M_impl._M_finish += __n - __elems_after;
 80140ae:	eba8 080a 	sub.w	r8, r8, sl
 80140b2:	4658      	mov	r0, fp
 80140b4:	f7ec fc96 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 80140b8:	6862      	ldr	r2, [r4, #4]
 80140ba:	4631      	mov	r1, r6
 80140bc:	4628      	mov	r0, r5
 80140be:	4442      	add	r2, r8
 80140c0:	6062      	str	r2, [r4, #4]
 80140c2:	f7ed fc1b 	bl	80018fc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		    this->_M_impl._M_finish += __elems_after;
 80140c6:	6863      	ldr	r3, [r4, #4]
 80140c8:	462a      	mov	r2, r5
 80140ca:	4659      	mov	r1, fp
 80140cc:	4453      	add	r3, sl
 80140ce:	6063      	str	r3, [r4, #4]
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80140d0:	e7e4      	b.n	801409c <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x50>
		  _M_check_len(__n, "vector::_M_range_insert");
 80140d2:	4641      	mov	r1, r8
 80140d4:	4a12      	ldr	r2, [pc, #72]	@ (8014120 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0xd4>)
 80140d6:	f7ec fc02 	bl	80008de <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 80140da:	4683      	mov	fp, r0
		pointer __new_start(this->_M_allocate(__len));
 80140dc:	f7ff fde6 	bl	8013cac <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
			      _Category>::__copy_m(__first, __last, __result);
 80140e0:	4629      	mov	r1, r5
 80140e2:	4602      	mov	r2, r0
 80140e4:	4680      	mov	r8, r0
 80140e6:	4650      	mov	r0, sl
 80140e8:	f7ed fc08 	bl	80018fc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 80140ec:	4649      	mov	r1, r9
 80140ee:	4602      	mov	r2, r0
 80140f0:	4638      	mov	r0, r7
 80140f2:	f7ec fc77 	bl	80009e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 80140f6:	4631      	mov	r1, r6
 80140f8:	4602      	mov	r2, r0
 80140fa:	4628      	mov	r0, r5
 80140fc:	f7ed fbfe 	bl	80018fc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8014100:	4605      	mov	r5, r0
	if (__p)
 8014102:	f1ba 0f00 	cmp.w	sl, #0
 8014106:	d005      	beq.n	8014114 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0xc8>
			      this->_M_impl._M_end_of_storage - __old_start);
 8014108:	68a1      	ldr	r1, [r4, #8]
 801410a:	4650      	mov	r0, sl
 801410c:	eba1 010a 	sub.w	r1, r1, sl
 8014110:	f002 f9da 	bl	80164c8 <_ZdlPvj>
		this->_M_impl._M_end_of_storage = __new_start + __len;
 8014114:	eb08 000b 	add.w	r0, r8, fp
		this->_M_impl._M_finish = __new_finish;
 8014118:	e9c4 8500 	strd	r8, r5, [r4]
		this->_M_impl._M_end_of_storage = __new_start + __len;
 801411c:	60a0      	str	r0, [r4, #8]
	  return begin() + __offset;
 801411e:	e7c0      	b.n	80140a2 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x56>
 8014120:	08016b81 	.word	0x08016b81

08014124 <_ZN12UARTProtocol12CodeProtocolE13MessageHeader>:
std::vector<uint8_t> UARTProtocol::CodeProtocol(MessageHeader message) {
 8014124:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8014126:	460e      	mov	r6, r1
	: _M_start(), _M_finish(), _M_end_of_storage()
 8014128:	2100      	movs	r1, #0
 801412a:	4615      	mov	r5, r2
 801412c:	4604      	mov	r4, r0
 801412e:	6081      	str	r1, [r0, #8]
 8014130:	e9c0 1100 	strd	r1, r1, [r0]
	coded_message.insert(coded_message.end(), std::begin(protocol_start), std::end(protocol_start));
 8014134:	e9d6 2311 	ldrd	r2, r3, [r6, #68]	@ 0x44
 8014138:	f7ff ff88 	bl	801404c <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0>
	if (IsRS485(message.interface)) coded_message.push_back(message.target_address);
 801413c:	7829      	ldrb	r1, [r5, #0]
 801413e:	4630      	mov	r0, r6
 8014140:	f7ff fe18 	bl	8013d74 <_ZN12UARTProtocol7IsRS485Eh>
 8014144:	b120      	cbz	r0, 8014150 <_ZN12UARTProtocol12CodeProtocolE13MessageHeader+0x2c>
 8014146:	f105 0110 	add.w	r1, r5, #16
 801414a:	4620      	mov	r0, r4
 801414c:	f7ff fe36 	bl	8013dbc <_ZNSt6vectorIhSaIhEE9push_backERKh>
	coded_message.push_back(message.source_address);
 8014150:	f105 0111 	add.w	r1, r5, #17
 8014154:	4620      	mov	r0, r4
 8014156:	f7ff fe31 	bl	8013dbc <_ZNSt6vectorIhSaIhEE9push_backERKh>
      { emplace_back(std::move(__x)); }
 801415a:	a901      	add	r1, sp, #4
 801415c:	4620      	mov	r0, r4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801415e:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 8014162:	1a9b      	subs	r3, r3, r2
	coded_message.push_back((uint8_t) message.payload.size());
 8014164:	f88d 3004 	strb.w	r3, [sp, #4]
      { emplace_back(std::move(__x)); }
 8014168:	f7fa ff7c 	bl	800f064 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
	coded_message.insert(coded_message.end(), message.payload.begin(), message.payload.end());
 801416c:	6861      	ldr	r1, [r4, #4]
 801416e:	4620      	mov	r0, r4
 8014170:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 8014174:	f7ff ff6a 	bl	801404c <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0>
	coded_message.push_back(GetChecksum(coded_message));
 8014178:	4621      	mov	r1, r4
 801417a:	a801      	add	r0, sp, #4
 801417c:	f7ec fc3e 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8014180:	a901      	add	r1, sp, #4
 8014182:	4630      	mov	r0, r6
 8014184:	f7ff fdce 	bl	8013d24 <_ZN12UARTProtocol11GetChecksumESt6vectorIhSaIhEE>
 8014188:	f10d 0103 	add.w	r1, sp, #3
 801418c:	f88d 0003 	strb.w	r0, [sp, #3]
 8014190:	4620      	mov	r0, r4
 8014192:	f7fa ff67 	bl	800f064 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
      }
 8014196:	a801      	add	r0, sp, #4
 8014198:	f7ec fb80 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	coded_message.insert(coded_message.end(), std::begin(protocol_end), std::end(protocol_end));
 801419c:	4620      	mov	r0, r4
 801419e:	6861      	ldr	r1, [r4, #4]
 80141a0:	e9d6 2314 	ldrd	r2, r3, [r6, #80]	@ 0x50
 80141a4:	f7ff ff52 	bl	801404c <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0>
}
 80141a8:	4620      	mov	r0, r4
 80141aa:	b004      	add	sp, #16
 80141ac:	bd70      	pop	{r4, r5, r6, pc}

080141ae <_ZN12UARTProtocol4SendE13MessageHeader>:
HAL_StatusTypeDef UARTProtocol::Send(MessageHeader message) {
 80141ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141b2:	b08a      	sub	sp, #40	@ 0x28
 80141b4:	460d      	mov	r5, r1
	uint8_t index = GetInterfaceIndex(ID, success);
 80141b6:	7809      	ldrb	r1, [r1, #0]
 80141b8:	4604      	mov	r4, r0
 80141ba:	f10d 0207 	add.w	r2, sp, #7
 80141be:	f7ff f909 	bl	80133d4 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
	if (*success) {
 80141c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d042      	beq.n	8014250 <_ZN12UARTProtocol4SendE13MessageHeader+0xa2>
		return interfaces[index];
 80141ca:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
	return *(this->_M_impl._M_start + __n);
 80141cc:	b200      	sxth	r0, r0
 80141ce:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
	if (interface_->hdmatx->State != HAL_DMA_STATE_READY || interface_->gState != HAL_UART_STATE_READY) return HAL_BUSY;
 80141d2:	6fb3      	ldr	r3, [r6, #120]	@ 0x78
 80141d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80141d8:	2b01      	cmp	r3, #1
 80141da:	d13b      	bne.n	8014254 <_ZN12UARTProtocol4SendE13MessageHeader+0xa6>
 80141dc:	f8d6 3084 	ldr.w	r3, [r6, #132]	@ 0x84
 80141e0:	2b20      	cmp	r3, #32
 80141e2:	d137      	bne.n	8014254 <_ZN12UARTProtocol4SendE13MessageHeader+0xa6>
	uint8_t index = GetInterfaceIndex(message.interface, &success);
 80141e4:	f10d 0207 	add.w	r2, sp, #7
 80141e8:	7829      	ldrb	r1, [r5, #0]
 80141ea:	4620      	mov	r0, r4
 80141ec:	f7ff f8f2 	bl	80133d4 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
 80141f0:	4629      	mov	r1, r5
 80141f2:	b200      	sxth	r0, r0
 80141f4:	6867      	ldr	r7, [r4, #4]
 80141f6:	f811 3b04 	ldrb.w	r3, [r1], #4
 80141fa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80141fe:	f88d 3014 	strb.w	r3, [sp, #20]
 8014202:	ea4f 0880 	mov.w	r8, r0, lsl #2
 8014206:	eb07 0780 	add.w	r7, r7, r0, lsl #2
 801420a:	a806      	add	r0, sp, #24
 801420c:	f7ec fbf6 	bl	80009fc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8014210:	8a2b      	ldrh	r3, [r5, #16]
	buffers_to_transfer[index] = CodeProtocol(message); //std::vector<uint8_t>
 8014212:	aa05      	add	r2, sp, #20
 8014214:	4621      	mov	r1, r4
 8014216:	a802      	add	r0, sp, #8
 8014218:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 801421c:	f7ff ff82 	bl	8014124 <_ZN12UARTProtocol12CodeProtocolE13MessageHeader>
 8014220:	a902      	add	r1, sp, #8
 8014222:	4638      	mov	r0, r7
 8014224:	f7ff fdb2 	bl	8013d8c <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8014228:	a802      	add	r0, sp, #8
 801422a:	f7ec fb37 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801422e:	a806      	add	r0, sp, #24
 8014230:	f7ec fb34 	bl	800089c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return *(this->_M_impl._M_start + __n);
 8014234:	6863      	ldr	r3, [r4, #4]
	return HAL_UART_Transmit_DMA(interface_, &(buffers_to_transfer[index])[0], buffers_to_transfer[index].size());
 8014236:	4630      	mov	r0, r6
 8014238:	eb03 0208 	add.w	r2, r3, r8
 801423c:	f853 1008 	ldr.w	r1, [r3, r8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8014240:	6852      	ldr	r2, [r2, #4]
 8014242:	1a52      	subs	r2, r2, r1
 8014244:	b292      	uxth	r2, r2
 8014246:	f7f6 fab7 	bl	800a7b8 <HAL_UART_Transmit_DMA>
}
 801424a:	b00a      	add	sp, #40	@ 0x28
 801424c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!success) return HAL_ERROR;
 8014250:	2001      	movs	r0, #1
 8014252:	e7fa      	b.n	801424a <_ZN12UARTProtocol4SendE13MessageHeader+0x9c>
	if (interface_->hdmatx->State != HAL_DMA_STATE_READY || interface_->gState != HAL_UART_STATE_READY) return HAL_BUSY;
 8014254:	2002      	movs	r0, #2
 8014256:	e7f8      	b.n	801424a <_ZN12UARTProtocol4SendE13MessageHeader+0x9c>

08014258 <_ZN9Registers9GetTypeIDItEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 8014258:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801425a:	491e      	ldr	r1, [pc, #120]	@ (80142d4 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 801425c:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801425e:	481e      	ldr	r0, [pc, #120]	@ (80142d8 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 8014260:	f002 f9ee 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 8014264:	bb40      	cbnz	r0, 80142b8 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8014266:	491c      	ldr	r1, [pc, #112]	@ (80142d8 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 8014268:	4608      	mov	r0, r1
 801426a:	f002 f9e9 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 801426e:	bb28      	cbnz	r0, 80142bc <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8014270:	491a      	ldr	r1, [pc, #104]	@ (80142dc <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x84>)
 8014272:	4819      	ldr	r0, [pc, #100]	@ (80142d8 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 8014274:	f002 f9e4 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 8014278:	bb10      	cbnz	r0, 80142c0 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 801427a:	4919      	ldr	r1, [pc, #100]	@ (80142e0 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x88>)
 801427c:	4816      	ldr	r0, [pc, #88]	@ (80142d8 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 801427e:	f002 f9df 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 8014282:	b9f8      	cbnz	r0, 80142c4 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8014284:	4917      	ldr	r1, [pc, #92]	@ (80142e4 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x8c>)
 8014286:	4814      	ldr	r0, [pc, #80]	@ (80142d8 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 8014288:	f002 f9da 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 801428c:	b9e0      	cbnz	r0, 80142c8 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 801428e:	4916      	ldr	r1, [pc, #88]	@ (80142e8 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x90>)
 8014290:	4811      	ldr	r0, [pc, #68]	@ (80142d8 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 8014292:	f002 f9d5 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 8014296:	b9c8      	cbnz	r0, 80142cc <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8014298:	4914      	ldr	r1, [pc, #80]	@ (80142ec <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x94>)
 801429a:	480f      	ldr	r0, [pc, #60]	@ (80142d8 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 801429c:	f002 f9d0 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 80142a0:	b9b0      	cbnz	r0, 80142d0 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 80142a2:	4913      	ldr	r1, [pc, #76]	@ (80142f0 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x98>)
 80142a4:	480c      	ldr	r0, [pc, #48]	@ (80142d8 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 80142a6:	f002 f9cb 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 80142aa:	2800      	cmp	r0, #0
 80142ac:	bf14      	ite	ne
 80142ae:	2309      	movne	r3, #9
 80142b0:	2300      	moveq	r3, #0
 80142b2:	7020      	strb	r0, [r4, #0]
}
 80142b4:	4618      	mov	r0, r3
 80142b6:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80142b8:	2300      	movs	r3, #0
 80142ba:	e7fa      	b.n	80142b2 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 80142bc:	2301      	movs	r3, #1
 80142be:	e7f8      	b.n	80142b2 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 80142c0:	2302      	movs	r3, #2
 80142c2:	e7f6      	b.n	80142b2 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 80142c4:	2303      	movs	r3, #3
 80142c6:	e7f4      	b.n	80142b2 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 80142c8:	2304      	movs	r3, #4
 80142ca:	e7f2      	b.n	80142b2 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 80142cc:	2306      	movs	r3, #6
 80142ce:	e7f0      	b.n	80142b2 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 80142d0:	2308      	movs	r3, #8
 80142d2:	e7ee      	b.n	80142b2 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
 80142d4:	08016f7c 	.word	0x08016f7c
 80142d8:	08016f74 	.word	0x08016f74
 80142dc:	08016f64 	.word	0x08016f64
 80142e0:	08016f5c 	.word	0x08016f5c
 80142e4:	08016f84 	.word	0x08016f84
 80142e8:	08016f6c 	.word	0x08016f6c
 80142ec:	08016f54 	.word	0x08016f54
 80142f0:	08016f4c 	.word	0x08016f4c

080142f4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>:
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80142f4:	491e      	ldr	r1, [pc, #120]	@ (8014370 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 80142f6:	b510      	push	{r4, lr}
 80142f8:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80142fa:	4608      	mov	r0, r1
 80142fc:	f002 f9a0 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 8014300:	bb40      	cbnz	r0, 8014354 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8014302:	491c      	ldr	r1, [pc, #112]	@ (8014374 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x80>)
 8014304:	481a      	ldr	r0, [pc, #104]	@ (8014370 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8014306:	f002 f99b 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 801430a:	bb28      	cbnz	r0, 8014358 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 801430c:	491a      	ldr	r1, [pc, #104]	@ (8014378 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x84>)
 801430e:	4818      	ldr	r0, [pc, #96]	@ (8014370 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8014310:	f002 f996 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 8014314:	bb10      	cbnz	r0, 801435c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8014316:	4919      	ldr	r1, [pc, #100]	@ (801437c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x88>)
 8014318:	4815      	ldr	r0, [pc, #84]	@ (8014370 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 801431a:	f002 f991 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 801431e:	b9f8      	cbnz	r0, 8014360 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8014320:	4917      	ldr	r1, [pc, #92]	@ (8014380 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x8c>)
 8014322:	4813      	ldr	r0, [pc, #76]	@ (8014370 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8014324:	f002 f98c 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 8014328:	b9e0      	cbnz	r0, 8014364 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 801432a:	4916      	ldr	r1, [pc, #88]	@ (8014384 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x90>)
 801432c:	4810      	ldr	r0, [pc, #64]	@ (8014370 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 801432e:	f002 f987 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 8014332:	b9c8      	cbnz	r0, 8014368 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8014334:	4914      	ldr	r1, [pc, #80]	@ (8014388 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x94>)
 8014336:	480e      	ldr	r0, [pc, #56]	@ (8014370 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8014338:	f002 f982 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 801433c:	b9b0      	cbnz	r0, 801436c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 801433e:	4913      	ldr	r1, [pc, #76]	@ (801438c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x98>)
 8014340:	480b      	ldr	r0, [pc, #44]	@ (8014370 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8014342:	f002 f97d 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 8014346:	2800      	cmp	r0, #0
 8014348:	bf14      	ite	ne
 801434a:	2309      	movne	r3, #9
 801434c:	2300      	moveq	r3, #0
 801434e:	7020      	strb	r0, [r4, #0]
}
 8014350:	4618      	mov	r0, r3
 8014352:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8014354:	2300      	movs	r3, #0
 8014356:	e7fa      	b.n	801434e <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8014358:	2301      	movs	r3, #1
 801435a:	e7f8      	b.n	801434e <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 801435c:	2302      	movs	r3, #2
 801435e:	e7f6      	b.n	801434e <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8014360:	2303      	movs	r3, #3
 8014362:	e7f4      	b.n	801434e <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8014364:	2304      	movs	r3, #4
 8014366:	e7f2      	b.n	801434e <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8014368:	2306      	movs	r3, #6
 801436a:	e7f0      	b.n	801434e <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 801436c:	2308      	movs	r3, #8
 801436e:	e7ee      	b.n	801434e <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
 8014370:	08016f7c 	.word	0x08016f7c
 8014374:	08016f74 	.word	0x08016f74
 8014378:	08016f64 	.word	0x08016f64
 801437c:	08016f5c 	.word	0x08016f5c
 8014380:	08016f84 	.word	0x08016f84
 8014384:	08016f6c 	.word	0x08016f6c
 8014388:	08016f54 	.word	0x08016f54
 801438c:	08016f4c 	.word	0x08016f4c

08014390 <_ZN10Publishers4InitEP9RegistersP13Communication>:
 * @brief Initialize the class with references to other classes. Set default values.
 *
 * @param input registers_: the Registers instance
 * @param input communication_: the Communication instance
 */
void Publishers::Init(Registers* registers_, Communication* communication_) {
 8014390:	b510      	push	{r4, lr}
	registers = registers_;
	communication = communication_;
 8014392:	e9c0 1201 	strd	r1, r2, [r0, #4]

	PublishersSemaphore = osSemaphoreNew(1,1,NULL);
 8014396:	2101      	movs	r1, #1
void Publishers::Init(Registers* registers_, Communication* communication_) {
 8014398:	4604      	mov	r4, r0
	PublishersSemaphore = osSemaphoreNew(1,1,NULL);
 801439a:	2200      	movs	r2, #0
 801439c:	4608      	mov	r0, r1
 801439e:	f7f7 fe9f 	bl	800c0e0 <osSemaphoreNew>
 80143a2:	6020      	str	r0, [r4, #0]
	osSemaphoreRelease(PublishersSemaphore);
}
 80143a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSemaphoreRelease(PublishersSemaphore);
 80143a8:	f7f7 bf2a 	b.w	800c200 <osSemaphoreRelease>

080143ac <_ZN10Publishers13FindPublisherEhPb>:
 *
 * @param input ID: the publisher ID
 * @param output success: whether successful
 * @return the publisher pointer
 */
Publisher* Publishers::FindPublisher(uint8_t ID, bool* success) {
 80143ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143ae:	4604      	mov	r4, r0
 80143b0:	460f      	mov	r7, r1
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 80143b2:	6800      	ldr	r0, [r0, #0]
 80143b4:	f04f 31ff 	mov.w	r1, #4294967295
Publisher* Publishers::FindPublisher(uint8_t ID, bool* success) {
 80143b8:	4616      	mov	r6, r2
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 80143ba:	f7f7 feed 	bl	800c198 <osSemaphoreAcquire>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80143be:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
	for (Publisher &publisher : publishers) {
 80143c2:	429a      	cmp	r2, r3
 80143c4:	461d      	mov	r5, r3
 80143c6:	d105      	bne.n	80143d4 <_ZN10Publishers13FindPublisherEhPb+0x28>
			osSemaphoreRelease(PublishersSemaphore);
			*success = true;
			return publisher_pointer;
		}
	}
	osSemaphoreRelease(PublishersSemaphore);
 80143c8:	6820      	ldr	r0, [r4, #0]
 80143ca:	f7f7 ff19 	bl	800c200 <osSemaphoreRelease>
	*success = false;
	return NULL;
 80143ce:	2300      	movs	r3, #0
 80143d0:	461d      	mov	r5, r3
 80143d2:	e008      	b.n	80143e6 <_ZN10Publishers13FindPublisherEhPb+0x3a>
		if (publisher.ID == ID) {
 80143d4:	462b      	mov	r3, r5
 80143d6:	f813 1b20 	ldrb.w	r1, [r3], #32
 80143da:	42b9      	cmp	r1, r7
 80143dc:	d1f1      	bne.n	80143c2 <_ZN10Publishers13FindPublisherEhPb+0x16>
			osSemaphoreRelease(PublishersSemaphore);
 80143de:	6820      	ldr	r0, [r4, #0]
 80143e0:	f7f7 ff0e 	bl	800c200 <osSemaphoreRelease>
 80143e4:	2301      	movs	r3, #1
}
 80143e6:	4628      	mov	r0, r5
			*success = true;
 80143e8:	7033      	strb	r3, [r6, #0]
}
 80143ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080143ec <_ZN10Publishers18SetPublisherStatusEhb>:
bool Publishers::SetPublisherStatus(uint8_t ID, bool status) {
 80143ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80143ee:	4616      	mov	r6, r2
	Publisher* publisher = FindPublisher(ID, &success);
 80143f0:	f10d 0207 	add.w	r2, sp, #7
bool Publishers::SetPublisherStatus(uint8_t ID, bool status) {
 80143f4:	4604      	mov	r4, r0
	Publisher* publisher = FindPublisher(ID, &success);
 80143f6:	f7ff ffd9 	bl	80143ac <_ZN10Publishers13FindPublisherEhPb>
	if (!success) return false;
 80143fa:	f89d 7007 	ldrb.w	r7, [sp, #7]
	Publisher* publisher = FindPublisher(ID, &success);
 80143fe:	4605      	mov	r5, r0
	if (!success) return false;
 8014400:	b157      	cbz	r7, 8014418 <_ZN10Publishers18SetPublisherStatusEhb+0x2c>
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8014402:	f04f 31ff 	mov.w	r1, #4294967295
 8014406:	6820      	ldr	r0, [r4, #0]
 8014408:	f7f7 fec6 	bl	800c198 <osSemaphoreAcquire>
	publisher->counter = 0;
 801440c:	2300      	movs	r3, #0
	osSemaphoreRelease(PublishersSemaphore);
 801440e:	6820      	ldr	r0, [r4, #0]
	publisher->counter = 0;
 8014410:	80ab      	strh	r3, [r5, #4]
	publisher->activated = status;
 8014412:	706e      	strb	r6, [r5, #1]
	osSemaphoreRelease(PublishersSemaphore);
 8014414:	f7f7 fef4 	bl	800c200 <osSemaphoreRelease>
}
 8014418:	4638      	mov	r0, r7
 801441a:	b003      	add	sp, #12
 801441c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801441e <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 801441e:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8014420:	4611      	mov	r1, r2
 8014422:	b508      	push	{r3, lr}
			if (length != 2) return false;
 8014424:	d108      	bne.n	8014438 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x1a>
			self->SetPublisherStatus(input[0], (bool) input[1]);
 8014426:	7852      	ldrb	r2, [r2, #1]
 8014428:	7809      	ldrb	r1, [r1, #0]
 801442a:	3a00      	subs	r2, #0
 801442c:	bf18      	it	ne
 801442e:	2201      	movne	r2, #1
 8014430:	f7ff ffdc 	bl	80143ec <_ZN10Publishers18SetPublisherStatusEhb>
			return true;
 8014434:	2001      	movs	r0, #1
		}
 8014436:	bd08      	pop	{r3, pc}
			if (length != 2) return false;
 8014438:	2000      	movs	r0, #0
 801443a:	e7fc      	b.n	8014436 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x18>

0801443c <_ZN10Publishers21SetPublisherPrescalerEht>:
bool Publishers::SetPublisherPrescaler(uint8_t ID, uint16_t prescaler) {
 801443c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801443e:	4616      	mov	r6, r2
	Publisher* publisher = FindPublisher(ID, &success);
 8014440:	f10d 0207 	add.w	r2, sp, #7
bool Publishers::SetPublisherPrescaler(uint8_t ID, uint16_t prescaler) {
 8014444:	4604      	mov	r4, r0
	Publisher* publisher = FindPublisher(ID, &success);
 8014446:	f7ff ffb1 	bl	80143ac <_ZN10Publishers13FindPublisherEhPb>
	if (!success) return false;
 801444a:	f89d 7007 	ldrb.w	r7, [sp, #7]
	Publisher* publisher = FindPublisher(ID, &success);
 801444e:	4605      	mov	r5, r0
	if (!success) return false;
 8014450:	b147      	cbz	r7, 8014464 <_ZN10Publishers21SetPublisherPrescalerEht+0x28>
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8014452:	f04f 31ff 	mov.w	r1, #4294967295
 8014456:	6820      	ldr	r0, [r4, #0]
 8014458:	f7f7 fe9e 	bl	800c198 <osSemaphoreAcquire>
	osSemaphoreRelease(PublishersSemaphore);
 801445c:	6820      	ldr	r0, [r4, #0]
	publisher->prescaler = prescaler;
 801445e:	806e      	strh	r6, [r5, #2]
	osSemaphoreRelease(PublishersSemaphore);
 8014460:	f7f7 fece 	bl	800c200 <osSemaphoreRelease>
}
 8014464:	4638      	mov	r0, r7
 8014466:	b003      	add	sp, #12
 8014468:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801446a <_ZZN10Publishers12AddRegistersEvENUlPvtPttE1_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 801446a:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint16_t* input, uint16_t length) -> bool {
 801446c:	4611      	mov	r1, r2
 801446e:	b508      	push	{r3, lr}
			if (length != 2) return false;
 8014470:	d105      	bne.n	801447e <_ZZN10Publishers12AddRegistersEvENUlPvtPttE1_4_FUNES0_tS1_t+0x14>
			self->SetPublisherPrescaler((uint8_t) input[0], input[1]);
 8014472:	8852      	ldrh	r2, [r2, #2]
 8014474:	7809      	ldrb	r1, [r1, #0]
 8014476:	f7ff ffe1 	bl	801443c <_ZN10Publishers21SetPublisherPrescalerEht>
 801447a:	2001      	movs	r0, #1
		}
 801447c:	bd08      	pop	{r3, pc}
			if (length != 2) return false;
 801447e:	2000      	movs	r0, #0
 8014480:	e7fc      	b.n	801447c <_ZZN10Publishers12AddRegistersEvENUlPvtPttE1_4_FUNES0_tS1_t+0x12>

08014482 <_ZN10Publishers10StopTopicsEh>:
bool Publishers::StopTopics(uint8_t ID) {
 8014482:	b573      	push	{r0, r1, r4, r5, r6, lr}
	Publisher* publisher = FindPublisher(ID, &success);
 8014484:	f10d 0207 	add.w	r2, sp, #7
bool Publishers::StopTopics(uint8_t ID) {
 8014488:	4604      	mov	r4, r0
	Publisher* publisher = FindPublisher(ID, &success);
 801448a:	f7ff ff8f 	bl	80143ac <_ZN10Publishers13FindPublisherEhPb>
	if (!success) return false;
 801448e:	f89d 6007 	ldrb.w	r6, [sp, #7]
	Publisher* publisher = FindPublisher(ID, &success);
 8014492:	4605      	mov	r5, r0
	if (!success) return false;
 8014494:	b166      	cbz	r6, 80144b0 <_ZN10Publishers10StopTopicsEh+0x2e>
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8014496:	f04f 31ff 	mov.w	r1, #4294967295
 801449a:	6820      	ldr	r0, [r4, #0]
 801449c:	f7f7 fe7c 	bl	800c198 <osSemaphoreAcquire>
		topic.activated = false;
 80144a0:	2100      	movs	r1, #0
 80144a2:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
	for (Topic &topic : publisher->topics) {
 80144a6:	429a      	cmp	r2, r3
 80144a8:	d105      	bne.n	80144b6 <_ZN10Publishers10StopTopicsEh+0x34>
	osSemaphoreRelease(PublishersSemaphore);
 80144aa:	6820      	ldr	r0, [r4, #0]
 80144ac:	f7f7 fea8 	bl	800c200 <osSemaphoreRelease>
}
 80144b0:	4630      	mov	r0, r6
 80144b2:	b002      	add	sp, #8
 80144b4:	bd70      	pop	{r4, r5, r6, pc}
		topic.activated = false;
 80144b6:	f803 1b04 	strb.w	r1, [r3], #4
	return *this;
 80144ba:	e7f4      	b.n	80144a6 <_ZN10Publishers10StopTopicsEh+0x24>

080144bc <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE2_4_FUNES0_tS1_t>:
			self->StopTopics(*input);
 80144bc:	7811      	ldrb	r1, [r2, #0]
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 80144be:	b508      	push	{r3, lr}
			self->StopTopics(*input);
 80144c0:	f7ff ffdf 	bl	8014482 <_ZN10Publishers10StopTopicsEh>
		}
 80144c4:	2001      	movs	r0, #1
 80144c6:	bd08      	pop	{r3, pc}

080144c8 <_ZN10Publishers23UnlinkFromAllInterfacesEh>:
bool Publishers::UnlinkFromAllInterfaces(uint8_t ID) {
 80144c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	Publisher* publisher = FindPublisher(ID, &success);
 80144ca:	f10d 0207 	add.w	r2, sp, #7
bool Publishers::UnlinkFromAllInterfaces(uint8_t ID) {
 80144ce:	4605      	mov	r5, r0
	Publisher* publisher = FindPublisher(ID, &success);
 80144d0:	f7ff ff6c 	bl	80143ac <_ZN10Publishers13FindPublisherEhPb>
	if (!success) return false;
 80144d4:	f89d 6007 	ldrb.w	r6, [sp, #7]
	Publisher* publisher = FindPublisher(ID, &success);
 80144d8:	4604      	mov	r4, r0
	if (!success) return false;
 80144da:	b166      	cbz	r6, 80144f6 <_ZN10Publishers23UnlinkFromAllInterfacesEh+0x2e>
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 80144dc:	f04f 31ff 	mov.w	r1, #4294967295
 80144e0:	6828      	ldr	r0, [r5, #0]
 80144e2:	f7f7 fe59 	bl	800c198 <osSemaphoreAcquire>
	osSemaphoreRelease(PublishersSemaphore);
 80144e6:	6828      	ldr	r0, [r5, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 80144e8:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 80144ec:	4293      	cmp	r3, r2
	    this->_M_impl._M_finish = __pos;
 80144ee:	bf18      	it	ne
 80144f0:	60e3      	strne	r3, [r4, #12]
 80144f2:	f7f7 fe85 	bl	800c200 <osSemaphoreRelease>
}
 80144f6:	4630      	mov	r0, r6
 80144f8:	b002      	add	sp, #8
 80144fa:	bd70      	pop	{r4, r5, r6, pc}

080144fc <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE5_4_FUNES0_tS1_t>:
			self->UnlinkFromAllInterfaces(*input);
 80144fc:	7811      	ldrb	r1, [r2, #0]
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 80144fe:	b508      	push	{r3, lr}
			self->UnlinkFromAllInterfaces(*input);
 8014500:	f7ff ffe2 	bl	80144c8 <_ZN10Publishers23UnlinkFromAllInterfacesEh>
		}
 8014504:	2001      	movs	r0, #1
 8014506:	bd08      	pop	{r3, pc}

08014508 <_ZN10Publishers9FindTopicEhtPb>:
 * @param input ID: the publisher ID
 * @param input topic_ID: the topic ID / register address to find
 * @param output success: whether successful
 * @return the topic pointer
 */
Topic* Publishers::FindTopic(uint8_t ID, uint16_t topic_ID, bool* success) {
 8014508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801450a:	461c      	mov	r4, r3
 801450c:	4617      	mov	r7, r2
	Publisher* publisher = FindPublisher(ID, success);
 801450e:	461a      	mov	r2, r3
Topic* Publishers::FindTopic(uint8_t ID, uint16_t topic_ID, bool* success) {
 8014510:	4606      	mov	r6, r0
	Publisher* publisher = FindPublisher(ID, success);
 8014512:	f7ff ff4b 	bl	80143ac <_ZN10Publishers13FindPublisherEhPb>
	if (not *success)
 8014516:	7823      	ldrb	r3, [r4, #0]
	Publisher* publisher = FindPublisher(ID, success);
 8014518:	4605      	mov	r5, r0
	if (not *success)
 801451a:	b173      	cbz	r3, 801453a <_ZN10Publishers9FindTopicEhtPb+0x32>
		return NULL;

	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 801451c:	f04f 31ff 	mov.w	r1, #4294967295
 8014520:	6830      	ldr	r0, [r6, #0]
 8014522:	f7f7 fe39 	bl	800c198 <osSemaphoreAcquire>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8014526:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
	for (Topic &topic : publisher->topics) {
 801452a:	429a      	cmp	r2, r3
 801452c:	461d      	mov	r5, r3
 801452e:	d106      	bne.n	801453e <_ZN10Publishers9FindTopicEhtPb+0x36>
			osSemaphoreRelease(PublishersSemaphore);
			*success = true;
			return topic_pointer;
		}
	}
	osSemaphoreRelease(PublishersSemaphore);
 8014530:	6830      	ldr	r0, [r6, #0]
 8014532:	f7f7 fe65 	bl	800c200 <osSemaphoreRelease>
	*success = false;
 8014536:	2300      	movs	r3, #0
 8014538:	7023      	strb	r3, [r4, #0]
		return NULL;
 801453a:	2500      	movs	r5, #0
 801453c:	e008      	b.n	8014550 <_ZN10Publishers9FindTopicEhtPb+0x48>
		if (topic.ID == topic_ID) {
 801453e:	8869      	ldrh	r1, [r5, #2]
 8014540:	1d2b      	adds	r3, r5, #4
 8014542:	42b9      	cmp	r1, r7
 8014544:	d1f1      	bne.n	801452a <_ZN10Publishers9FindTopicEhtPb+0x22>
			osSemaphoreRelease(PublishersSemaphore);
 8014546:	6830      	ldr	r0, [r6, #0]
 8014548:	f7f7 fe5a 	bl	800c200 <osSemaphoreRelease>
			*success = true;
 801454c:	2301      	movs	r3, #1
 801454e:	7023      	strb	r3, [r4, #0]
	return NULL;
}
 8014550:	4628      	mov	r0, r5
 8014552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014554 <_ZN10Publishers14SetTopicStatusEhtb>:
bool Publishers::SetTopicStatus(uint8_t ID, uint16_t topic_ID, bool status) {
 8014554:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014556:	461e      	mov	r6, r3
	Topic* topic = FindTopic(ID, topic_ID, &success);
 8014558:	f10d 0307 	add.w	r3, sp, #7
bool Publishers::SetTopicStatus(uint8_t ID, uint16_t topic_ID, bool status) {
 801455c:	4604      	mov	r4, r0
	Topic* topic = FindTopic(ID, topic_ID, &success);
 801455e:	f7ff ffd3 	bl	8014508 <_ZN10Publishers9FindTopicEhtPb>
	if (!success) return false;
 8014562:	f89d 7007 	ldrb.w	r7, [sp, #7]
	Topic* topic = FindTopic(ID, topic_ID, &success);
 8014566:	4605      	mov	r5, r0
	if (!success) return false;
 8014568:	b147      	cbz	r7, 801457c <_ZN10Publishers14SetTopicStatusEhtb+0x28>
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 801456a:	f04f 31ff 	mov.w	r1, #4294967295
 801456e:	6820      	ldr	r0, [r4, #0]
 8014570:	f7f7 fe12 	bl	800c198 <osSemaphoreAcquire>
	osSemaphoreRelease(PublishersSemaphore);
 8014574:	6820      	ldr	r0, [r4, #0]
	topic->activated = status;
 8014576:	702e      	strb	r6, [r5, #0]
	osSemaphoreRelease(PublishersSemaphore);
 8014578:	f7f7 fe42 	bl	800c200 <osSemaphoreRelease>
}
 801457c:	4638      	mov	r0, r7
 801457e:	b003      	add	sp, #12
 8014580:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014582 <_ZZN10Publishers12AddRegistersEvENUlPvtPttE0_4_FUNES0_tS1_t>:
			if (length != 3) return false;
 8014582:	2b03      	cmp	r3, #3
		[](void* context, uint16_t register_id, uint16_t* input, uint16_t length) -> bool {
 8014584:	4611      	mov	r1, r2
 8014586:	b508      	push	{r3, lr}
			if (length != 3) return false;
 8014588:	d109      	bne.n	801459e <_ZZN10Publishers12AddRegistersEvENUlPvtPttE0_4_FUNES0_tS1_t+0x1c>
			self->SetTopicStatus((uint8_t) input[0], input[1], (bool) input[2]);
 801458a:	8893      	ldrh	r3, [r2, #4]
 801458c:	7809      	ldrb	r1, [r1, #0]
 801458e:	3b00      	subs	r3, #0
 8014590:	8852      	ldrh	r2, [r2, #2]
 8014592:	bf18      	it	ne
 8014594:	2301      	movne	r3, #1
 8014596:	f7ff ffdd 	bl	8014554 <_ZN10Publishers14SetTopicStatusEhtb>
			return true;
 801459a:	2001      	movs	r0, #1
		}
 801459c:	bd08      	pop	{r3, pc}
			if (length != 3) return false;
 801459e:	2000      	movs	r0, #0
 80145a0:	e7fc      	b.n	801459c <_ZZN10Publishers12AddRegistersEvENUlPvtPttE0_4_FUNES0_tS1_t+0x1a>

080145a2 <_ZN10Publishers20FindPublishInterfaceEhhPb>:
 * @param input ID: the publisher ID
 * @param input interface_ID: the interface ID to find
 * @param output success: whether successful
 * @return the interface information pointer
 */
PublishInterface* Publishers::FindPublishInterface(uint8_t ID, uint8_t interface_ID, bool* success) {
 80145a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145a4:	461c      	mov	r4, r3
 80145a6:	4617      	mov	r7, r2
	Publisher* publisher = FindPublisher(ID, success);
 80145a8:	461a      	mov	r2, r3
PublishInterface* Publishers::FindPublishInterface(uint8_t ID, uint8_t interface_ID, bool* success) {
 80145aa:	4605      	mov	r5, r0
	Publisher* publisher = FindPublisher(ID, success);
 80145ac:	f7ff fefe 	bl	80143ac <_ZN10Publishers13FindPublisherEhPb>
	if (not *success)
 80145b0:	7823      	ldrb	r3, [r4, #0]
	Publisher* publisher = FindPublisher(ID, success);
 80145b2:	4606      	mov	r6, r0
	if (not *success)
 80145b4:	b173      	cbz	r3, 80145d4 <_ZN10Publishers20FindPublishInterfaceEhhPb+0x32>
		return NULL;

	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 80145b6:	f04f 31ff 	mov.w	r1, #4294967295
 80145ba:	6828      	ldr	r0, [r5, #0]
 80145bc:	f7f7 fdec 	bl	800c198 <osSemaphoreAcquire>
 80145c0:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
	for (PublishInterface &interface : publisher->interfaces) {
 80145c4:	429a      	cmp	r2, r3
 80145c6:	461e      	mov	r6, r3
 80145c8:	d106      	bne.n	80145d8 <_ZN10Publishers20FindPublishInterfaceEhhPb+0x36>
			osSemaphoreRelease(PublishersSemaphore);
			*success = true;
			return publish_interface_pointer;
		}
	}
	osSemaphoreRelease(PublishersSemaphore);
 80145ca:	6828      	ldr	r0, [r5, #0]
 80145cc:	f7f7 fe18 	bl	800c200 <osSemaphoreRelease>
	*success = false;
 80145d0:	2300      	movs	r3, #0
 80145d2:	7023      	strb	r3, [r4, #0]
		return NULL;
 80145d4:	2600      	movs	r6, #0
 80145d6:	e009      	b.n	80145ec <_ZN10Publishers20FindPublishInterfaceEhhPb+0x4a>
		if (interface.interface == interface_ID) {
 80145d8:	4633      	mov	r3, r6
 80145da:	f813 1b02 	ldrb.w	r1, [r3], #2
 80145de:	42b9      	cmp	r1, r7
 80145e0:	d1f0      	bne.n	80145c4 <_ZN10Publishers20FindPublishInterfaceEhhPb+0x22>
			osSemaphoreRelease(PublishersSemaphore);
 80145e2:	6828      	ldr	r0, [r5, #0]
 80145e4:	f7f7 fe0c 	bl	800c200 <osSemaphoreRelease>
			*success = true;
 80145e8:	2301      	movs	r3, #1
 80145ea:	7023      	strb	r3, [r4, #0]
	return NULL;
}
 80145ec:	4630      	mov	r0, r6
 80145ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080145f0 <_ZN10Publishers17SetPublishAddressEhhh>:
bool Publishers::SetPublishAddress(uint8_t ID, uint8_t interface_ID, uint8_t address) {
 80145f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80145f2:	461e      	mov	r6, r3
	PublishInterface* interface = FindPublishInterface(ID, interface_ID, &success);
 80145f4:	f10d 0307 	add.w	r3, sp, #7
bool Publishers::SetPublishAddress(uint8_t ID, uint8_t interface_ID, uint8_t address) {
 80145f8:	4604      	mov	r4, r0
	PublishInterface* interface = FindPublishInterface(ID, interface_ID, &success);
 80145fa:	f7ff ffd2 	bl	80145a2 <_ZN10Publishers20FindPublishInterfaceEhhPb>
	if (success) return false;
 80145fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
	PublishInterface* interface = FindPublishInterface(ID, interface_ID, &success);
 8014602:	4605      	mov	r5, r0
	if (success) return false;
 8014604:	b95b      	cbnz	r3, 801461e <_ZN10Publishers17SetPublishAddressEhhh+0x2e>
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8014606:	f04f 31ff 	mov.w	r1, #4294967295
 801460a:	6820      	ldr	r0, [r4, #0]
 801460c:	f7f7 fdc4 	bl	800c198 <osSemaphoreAcquire>
	interface->address = address;
 8014610:	706e      	strb	r6, [r5, #1]
	osSemaphoreRelease(PublishersSemaphore);
 8014612:	6820      	ldr	r0, [r4, #0]
 8014614:	f7f7 fdf4 	bl	800c200 <osSemaphoreRelease>
	return true;
 8014618:	2001      	movs	r0, #1
}
 801461a:	b002      	add	sp, #8
 801461c:	bd70      	pop	{r4, r5, r6, pc}
	if (success) return false;
 801461e:	2000      	movs	r0, #0
 8014620:	e7fb      	b.n	801461a <_ZN10Publishers17SetPublishAddressEhhh+0x2a>

08014622 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE6_4_FUNES0_tS1_t>:
			if (length != 3) return false;
 8014622:	2b03      	cmp	r3, #3
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8014624:	4611      	mov	r1, r2
 8014626:	b508      	push	{r3, lr}
			if (length != 3) return false;
 8014628:	d106      	bne.n	8014638 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE6_4_FUNES0_tS1_t+0x16>
			self->SetPublishAddress(input[0], input[1], input[2]);
 801462a:	7893      	ldrb	r3, [r2, #2]
 801462c:	7809      	ldrb	r1, [r1, #0]
 801462e:	7852      	ldrb	r2, [r2, #1]
 8014630:	f7ff ffde 	bl	80145f0 <_ZN10Publishers17SetPublishAddressEhhh>
			return true;
 8014634:	2001      	movs	r0, #1
		}
 8014636:	bd08      	pop	{r3, pc}
			if (length != 3) return false;
 8014638:	2000      	movs	r0, #0
 801463a:	e7fc      	b.n	8014636 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE6_4_FUNES0_tS1_t+0x14>

0801463c <_ZN10Publishers25FindPublishInterfaceIndexEhhPb>:
 * @param input ID: the publisher ID
 * @param input interface_ID: the interface ID to find
 * @param output success: whether successful
 * @return the interface information index
 */
uint8_t Publishers::FindPublishInterfaceIndex(uint8_t ID, uint8_t interface_ID, bool* success) {
 801463c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801463e:	461d      	mov	r5, r3
 8014640:	4617      	mov	r7, r2
	Publisher* publisher = FindPublisher(ID, success);
 8014642:	461a      	mov	r2, r3
uint8_t Publishers::FindPublishInterfaceIndex(uint8_t ID, uint8_t interface_ID, bool* success) {
 8014644:	4606      	mov	r6, r0
	Publisher* publisher = FindPublisher(ID, success);
 8014646:	f7ff feb1 	bl	80143ac <_ZN10Publishers13FindPublisherEhPb>
	if (not *success)
 801464a:	782b      	ldrb	r3, [r5, #0]
	Publisher* publisher = FindPublisher(ID, success);
 801464c:	4604      	mov	r4, r0
	if (not *success)
 801464e:	b18b      	cbz	r3, 8014674 <_ZN10Publishers25FindPublishInterfaceIndexEhhPb+0x38>
		return 0;

	uint8_t index = 0;
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8014650:	f04f 31ff 	mov.w	r1, #4294967295
 8014654:	6830      	ldr	r0, [r6, #0]
 8014656:	f7f7 fd9f 	bl	800c198 <osSemaphoreAcquire>
	for (PublishInterface &interface : publisher->interfaces) {
 801465a:	2100      	movs	r1, #0
      : _M_current(__i) { }
 801465c:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
		if (interface.interface == interface_ID) {
 8014660:	1e9c      	subs	r4, r3, #2
	for (PublishInterface &interface : publisher->interfaces) {
 8014662:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8014666:	4290      	cmp	r0, r2
 8014668:	d106      	bne.n	8014678 <_ZN10Publishers25FindPublishInterfaceIndexEhhPb+0x3c>
			*success = true;
			return index;
		}
		index++;
	}
	osSemaphoreRelease(PublishersSemaphore);
 801466a:	6830      	ldr	r0, [r6, #0]
 801466c:	f7f7 fdc8 	bl	800c200 <osSemaphoreRelease>
	*success = false;
 8014670:	2300      	movs	r3, #0
 8014672:	702b      	strb	r3, [r5, #0]
		return 0;
 8014674:	2400      	movs	r4, #0
 8014676:	e00a      	b.n	801468e <_ZN10Publishers25FindPublishInterfaceIndexEhhPb+0x52>
		if (interface.interface == interface_ID) {
 8014678:	1c4a      	adds	r2, r1, #1
 801467a:	f814 c012 	ldrb.w	ip, [r4, r2, lsl #1]
 801467e:	45bc      	cmp	ip, r7
 8014680:	d107      	bne.n	8014692 <_ZN10Publishers25FindPublishInterfaceIndexEhhPb+0x56>
			osSemaphoreRelease(PublishersSemaphore);
 8014682:	6830      	ldr	r0, [r6, #0]
 8014684:	b2cc      	uxtb	r4, r1
 8014686:	f7f7 fdbb 	bl	800c200 <osSemaphoreRelease>
			*success = true;
 801468a:	2301      	movs	r3, #1
 801468c:	702b      	strb	r3, [r5, #0]
	return 0;
}
 801468e:	4620      	mov	r0, r4
 8014690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014692:	4611      	mov	r1, r2
 8014694:	e7e5      	b.n	8014662 <_ZN10Publishers25FindPublishInterfaceIndexEhhPb+0x26>

08014696 <_ZN10Publishers19UnlinkFromInterfaceEhh>:
bool Publishers::UnlinkFromInterface(uint8_t ID, uint8_t interface_ID) {
 8014696:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014698:	4617      	mov	r7, r2
	Publisher* publisher = FindPublisher(ID, &success);
 801469a:	f10d 0207 	add.w	r2, sp, #7
bool Publishers::UnlinkFromInterface(uint8_t ID, uint8_t interface_ID) {
 801469e:	4605      	mov	r5, r0
 80146a0:	460e      	mov	r6, r1
	Publisher* publisher = FindPublisher(ID, &success);
 80146a2:	f7ff fe83 	bl	80143ac <_ZN10Publishers13FindPublisherEhPb>
	if (!success) return false;
 80146a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
	Publisher* publisher = FindPublisher(ID, &success);
 80146aa:	4604      	mov	r4, r0
	if (!success) return false;
 80146ac:	b91b      	cbnz	r3, 80146b6 <_ZN10Publishers19UnlinkFromInterfaceEhh+0x20>
 80146ae:	2700      	movs	r7, #0
}
 80146b0:	4638      	mov	r0, r7
 80146b2:	b003      	add	sp, #12
 80146b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t index = FindPublishInterfaceIndex(ID, interface_ID, &success);
 80146b6:	463a      	mov	r2, r7
 80146b8:	4631      	mov	r1, r6
 80146ba:	f10d 0307 	add.w	r3, sp, #7
 80146be:	4628      	mov	r0, r5
 80146c0:	f7ff ffbc 	bl	801463c <_ZN10Publishers25FindPublishInterfaceIndexEhhPb>
	if (!success) return false;
 80146c4:	f89d 7007 	ldrb.w	r7, [sp, #7]
	uint8_t index = FindPublishInterfaceIndex(ID, interface_ID, &success);
 80146c8:	4606      	mov	r6, r0
	if (!success) return false;
 80146ca:	2f00      	cmp	r7, #0
 80146cc:	d0ef      	beq.n	80146ae <_ZN10Publishers19UnlinkFromInterfaceEhh+0x18>
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 80146ce:	f04f 31ff 	mov.w	r1, #4294967295
 80146d2:	6828      	ldr	r0, [r5, #0]
 80146d4:	f7f7 fd60 	bl	800c198 <osSemaphoreAcquire>
      { return __normal_iterator(_M_current + __n); }
 80146d8:	68a0      	ldr	r0, [r4, #8]
 80146da:	b236      	sxth	r6, r6
      : _M_current(__i) { }
 80146dc:	68e2      	ldr	r2, [r4, #12]
      { return __normal_iterator(_M_current + __n); }
 80146de:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 80146e2:	1c81      	adds	r1, r0, #2
      if (__position + 1 != end())
 80146e4:	4291      	cmp	r1, r2
 80146e6:	d002      	beq.n	80146ee <_ZN10Publishers19UnlinkFromInterfaceEhh+0x58>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80146e8:	1a52      	subs	r2, r2, r1
 80146ea:	f002 f89f 	bl	801682c <memmove>
      --this->_M_impl._M_finish;
 80146ee:	68e3      	ldr	r3, [r4, #12]
	osSemaphoreRelease(PublishersSemaphore);
 80146f0:	6828      	ldr	r0, [r5, #0]
 80146f2:	3b02      	subs	r3, #2
 80146f4:	60e3      	str	r3, [r4, #12]
 80146f6:	f7f7 fd83 	bl	800c200 <osSemaphoreRelease>
	return true;
 80146fa:	e7d9      	b.n	80146b0 <_ZN10Publishers19UnlinkFromInterfaceEhh+0x1a>

080146fc <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE4_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 80146fc:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 80146fe:	4611      	mov	r1, r2
 8014700:	b508      	push	{r3, lr}
			if (length != 2) return false;
 8014702:	d105      	bne.n	8014710 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE4_4_FUNES0_tS1_t+0x14>
			self->UnlinkFromInterface(input[0], input[1]);
 8014704:	7852      	ldrb	r2, [r2, #1]
 8014706:	7809      	ldrb	r1, [r1, #0]
 8014708:	f7ff ffc5 	bl	8014696 <_ZN10Publishers19UnlinkFromInterfaceEhh>
 801470c:	2001      	movs	r0, #1
		}
 801470e:	bd08      	pop	{r3, pc}
			if (length != 2) return false;
 8014710:	2000      	movs	r0, #0
 8014712:	e7fc      	b.n	801470e <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE4_4_FUNES0_tS1_t+0x12>

08014714 <_ZN10PublishersC1Ev>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 8014714:	2200      	movs	r2, #0
 8014716:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801471a:	6142      	str	r2, [r0, #20]
}
 801471c:	4770      	bx	lr
	...

08014720 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8014720:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8014724:	e9d0 8a00 	ldrd	r8, sl, [r0]
 8014728:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 801472a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801472e:	ebaa 0208 	sub.w	r2, sl, r8
 8014732:	4607      	mov	r7, r0
 8014734:	4689      	mov	r9, r1
	if (max_size() - size() < __n)
 8014736:	ebb3 0f62 	cmp.w	r3, r2, asr #1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801473a:	ea4f 0462 	mov.w	r4, r2, asr #1
	if (max_size() - size() < __n)
 801473e:	d102      	bne.n	8014746 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8014740:	481e      	ldr	r0, [pc, #120]	@ (80147bc <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9c>)
 8014742:	f001 ff9b 	bl	801667c <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 8014746:	45c2      	cmp	sl, r8
 8014748:	bf14      	ite	ne
 801474a:	4622      	movne	r2, r4
 801474c:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 801474e:	eba1 0508 	sub.w	r5, r1, r8
 8014752:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8014754:	d22e      	bcs.n	80147b4 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x94>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8014756:	b37c      	cbz	r4, 80147b8 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x98>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8014758:	429c      	cmp	r4, r3
 801475a:	bf28      	it	cs
 801475c:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801475e:	0060      	lsls	r0, r4, #1
 8014760:	f001 fed7 	bl	8016512 <_Znwj>
 8014764:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8014766:	f8bb 3000 	ldrh.w	r3, [fp]
      if (__count > 0)
 801476a:	2d00      	cmp	r5, #0
 801476c:	5373      	strh	r3, [r6, r5]
 801476e:	dd04      	ble.n	801477a <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x5a>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8014770:	462a      	mov	r2, r5
 8014772:	4641      	mov	r1, r8
 8014774:	4630      	mov	r0, r6
 8014776:	f002 f859 	bl	801682c <memmove>
      ptrdiff_t __count = __last - __first;
 801477a:	ebaa 0a09 	sub.w	sl, sl, r9
	      ++__new_finish;
 801477e:	3502      	adds	r5, #2
      if (__count > 0)
 8014780:	f1ba 0f00 	cmp.w	sl, #0
 8014784:	4435      	add	r5, r6
 8014786:	dd04      	ble.n	8014792 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x72>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8014788:	4652      	mov	r2, sl
 801478a:	4649      	mov	r1, r9
 801478c:	4628      	mov	r0, r5
 801478e:	f002 f945 	bl	8016a1c <memcpy>
      return __result + __count;
 8014792:	4455      	add	r5, sl
	if (__p)
 8014794:	f1b8 0f00 	cmp.w	r8, #0
 8014798:	d005      	beq.n	80147a6 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x86>
		    this->_M_impl._M_end_of_storage - __old_start);
 801479a:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801479c:	4640      	mov	r0, r8
 801479e:	eba1 0108 	sub.w	r1, r1, r8
 80147a2:	f001 fe91 	bl	80164c8 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 80147a6:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80147aa:	eb06 0644 	add.w	r6, r6, r4, lsl #1
 80147ae:	60be      	str	r6, [r7, #8]
    }
 80147b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80147b4:	461c      	mov	r4, r3
 80147b6:	e7d2      	b.n	801475e <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80147b8:	4626      	mov	r6, r4
 80147ba:	e7d4      	b.n	8014766 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 80147bc:	08016b36 	.word	0x08016b36

080147c0 <_ZN10Publishers15LinkToInterfaceEhh>:
bool Publishers::LinkToInterface(uint8_t ID, uint8_t interface_ID) {
 80147c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80147c4:	4616      	mov	r6, r2
	Publisher* publisher = FindPublisher(ID, &success);
 80147c6:	f10d 0203 	add.w	r2, sp, #3
bool Publishers::LinkToInterface(uint8_t ID, uint8_t interface_ID) {
 80147ca:	4605      	mov	r5, r0
 80147cc:	4688      	mov	r8, r1
	Publisher* publisher = FindPublisher(ID, &success);
 80147ce:	f7ff fded 	bl	80143ac <_ZN10Publishers13FindPublisherEhPb>
	if (!success) return false;
 80147d2:	f89d 7003 	ldrb.w	r7, [sp, #3]
	Publisher* publisher = FindPublisher(ID, &success);
 80147d6:	4604      	mov	r4, r0
	if (!success) return false;
 80147d8:	b927      	cbnz	r7, 80147e4 <_ZN10Publishers15LinkToInterfaceEhh+0x24>
 80147da:	2700      	movs	r7, #0
}
 80147dc:	4638      	mov	r0, r7
 80147de:	b002      	add	sp, #8
 80147e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	FindPublishInterface(ID, interface_ID, &success);
 80147e4:	f10d 0303 	add.w	r3, sp, #3
 80147e8:	4632      	mov	r2, r6
 80147ea:	4641      	mov	r1, r8
 80147ec:	4628      	mov	r0, r5
 80147ee:	f7ff fed8 	bl	80145a2 <_ZN10Publishers20FindPublishInterfaceEhhPb>
	if (success) return false;
 80147f2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d1ef      	bne.n	80147da <_ZN10Publishers15LinkToInterfaceEhh+0x1a>
	interface.address = ALL;
 80147fa:	23ff      	movs	r3, #255	@ 0xff
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 80147fc:	f04f 31ff 	mov.w	r1, #4294967295
 8014800:	6828      	ldr	r0, [r5, #0]
	interface.address = ALL;
 8014802:	f88d 3005 	strb.w	r3, [sp, #5]
	interface.interface = interface_ID;
 8014806:	f88d 6004 	strb.w	r6, [sp, #4]
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 801480a:	f7f7 fcc5 	bl	800c198 <osSemaphoreAcquire>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801480e:	e9d4 1303 	ldrd	r1, r3, [r4, #12]
 8014812:	4299      	cmp	r1, r3
 8014814:	d008      	beq.n	8014828 <_ZN10Publishers15LinkToInterfaceEhh+0x68>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8014816:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801481a:	f821 3b02 	strh.w	r3, [r1], #2
	    ++this->_M_impl._M_finish;
 801481e:	60e1      	str	r1, [r4, #12]
	osSemaphoreRelease(PublishersSemaphore);
 8014820:	6828      	ldr	r0, [r5, #0]
 8014822:	f7f7 fced 	bl	800c200 <osSemaphoreRelease>
	return true;
 8014826:	e7d9      	b.n	80147dc <_ZN10Publishers15LinkToInterfaceEhh+0x1c>
	  _M_realloc_insert(end(), __x);
 8014828:	aa01      	add	r2, sp, #4
 801482a:	f104 0008 	add.w	r0, r4, #8
 801482e:	f7ff ff77 	bl	8014720 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 8014832:	e7f5      	b.n	8014820 <_ZN10Publishers15LinkToInterfaceEhh+0x60>

08014834 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 8014834:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8014836:	4611      	mov	r1, r2
 8014838:	b508      	push	{r3, lr}
			if (length != 2) return false;
 801483a:	d105      	bne.n	8014848 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x14>
			self->LinkToInterface(input[0], input[1]);
 801483c:	7852      	ldrb	r2, [r2, #1]
 801483e:	7809      	ldrb	r1, [r1, #0]
 8014840:	f7ff ffbe 	bl	80147c0 <_ZN10Publishers15LinkToInterfaceEhh>
 8014844:	2001      	movs	r0, #1
		}
 8014846:	bd08      	pop	{r3, pc}
			if (length != 2) return false;
 8014848:	2000      	movs	r0, #0
 801484a:	e7fc      	b.n	8014846 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x12>

0801484c <_ZN9Registers11AddRegisterItEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 801484c:	b570      	push	{r4, r5, r6, lr}
 801484e:	4604      	mov	r4, r0
 8014850:	b086      	sub	sp, #24
 8014852:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8014854:	6800      	ldr	r0, [r0, #0]
 8014856:	f04f 31ff 	mov.w	r1, #4294967295
 801485a:	f7f7 fc9d 	bl	800c198 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 801485e:	f10d 0207 	add.w	r2, sp, #7
 8014862:	4631      	mov	r1, r6
 8014864:	4620      	mov	r0, r4
 8014866:	f000 fa78 	bl	8014d5a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 801486a:	f89d 5007 	ldrb.w	r5, [sp, #7]
 801486e:	b125      	cbz	r5, 801487a <_ZN9Registers11AddRegisterItEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 8014870:	6820      	ldr	r0, [r4, #0]
 8014872:	f7f7 fcc5 	bl	800c200 <osSemaphoreRelease>
}
 8014876:	b006      	add	sp, #24
 8014878:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 801487a:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 801487e:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8014882:	f7ff fce9 	bl	8014258 <_ZN9Registers9GetTypeIDItEEhPb.isra.0>
	configuration_.register_info = register_;
 8014886:	2301      	movs	r3, #1
 8014888:	f8ad 600a 	strh.w	r6, [sp, #10]
 801488c:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 8014890:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 8014894:	f88d 000c 	strb.w	r0, [sp, #12]
 8014898:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 801489c:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d0e5      	beq.n	8014870 <_ZN9Registers11AddRegisterItEEbt.isra.0+0x24>
		registers.push_back(configuration_);
 80148a4:	a902      	add	r1, sp, #8
 80148a6:	1d20      	adds	r0, r4, #4
 80148a8:	f7fe f827 	bl	80128fa <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 80148ac:	e7e0      	b.n	8014870 <_ZN9Registers11AddRegisterItEEbt.isra.0+0x24>

080148ae <_ZN9Registers11AddRegisterIhEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 80148ae:	b570      	push	{r4, r5, r6, lr}
 80148b0:	4604      	mov	r4, r0
 80148b2:	b086      	sub	sp, #24
 80148b4:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80148b6:	6800      	ldr	r0, [r0, #0]
 80148b8:	f04f 31ff 	mov.w	r1, #4294967295
 80148bc:	f7f7 fc6c 	bl	800c198 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 80148c0:	f10d 0207 	add.w	r2, sp, #7
 80148c4:	4631      	mov	r1, r6
 80148c6:	4620      	mov	r0, r4
 80148c8:	f000 fa47 	bl	8014d5a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 80148cc:	f89d 5007 	ldrb.w	r5, [sp, #7]
 80148d0:	b125      	cbz	r5, 80148dc <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 80148d2:	6820      	ldr	r0, [r4, #0]
 80148d4:	f7f7 fc94 	bl	800c200 <osSemaphoreRelease>
}
 80148d8:	b006      	add	sp, #24
 80148da:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 80148dc:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 80148e0:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 80148e4:	f7ff fd06 	bl	80142f4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	configuration_.register_info = register_;
 80148e8:	2301      	movs	r3, #1
 80148ea:	f8ad 600a 	strh.w	r6, [sp, #10]
 80148ee:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 80148f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 80148f6:	f88d 000c 	strb.w	r0, [sp, #12]
 80148fa:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 80148fe:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 8014902:	2b00      	cmp	r3, #0
 8014904:	d0e5      	beq.n	80148d2 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
		registers.push_back(configuration_);
 8014906:	a902      	add	r1, sp, #8
 8014908:	1d20      	adds	r0, r4, #4
 801490a:	f7fd fff6 	bl	80128fa <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 801490e:	e7e0      	b.n	80148d2 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>

08014910 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8014910:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014914:	460c      	mov	r4, r1
 8014916:	b087      	sub	sp, #28
 8014918:	4606      	mov	r6, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801491a:	f04f 31ff 	mov.w	r1, #4294967295
 801491e:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8014920:	4698      	mov	r8, r3
 8014922:	4691      	mov	r9, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8014924:	f7f7 fc38 	bl	800c198 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8014928:	4621      	mov	r1, r4
 801492a:	f10d 0207 	add.w	r2, sp, #7
 801492e:	4630      	mov	r0, r6
 8014930:	f000 fa13 	bl	8014d5a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8014934:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8014938:	4604      	mov	r4, r0
	if (!success) {
 801493a:	b92b      	cbnz	r3, 8014948 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x38>
	osSemaphoreRelease(RegistersSemaphore);
 801493c:	6830      	ldr	r0, [r6, #0]
 801493e:	f7f7 fc5f 	bl	800c200 <osSemaphoreRelease>
}
 8014942:	b007      	add	sp, #28
 8014944:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8014948:	f10d 0007 	add.w	r0, sp, #7
 801494c:	f7ff fcd2 	bl	80142f4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 8014950:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014954:	2b00      	cmp	r3, #0
 8014956:	d0f1      	beq.n	801493c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (target_register->register_info.type != registered_type) {
 8014958:	7923      	ldrb	r3, [r4, #4]
 801495a:	4298      	cmp	r0, r3
 801495c:	d1ee      	bne.n	801493c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (callbacks[target_register->register_info.type] == NULL) {
 801495e:	3004      	adds	r0, #4
 8014960:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
 8014964:	2f00      	cmp	r7, #0
 8014966:	d0e9      	beq.n	801493c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 8014968:	7821      	ldrb	r1, [r4, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801496a:	e9d7 3500 	ldrd	r3, r5, [r7]
 801496e:	1aea      	subs	r2, r5, r3
 8014970:	1112      	asrs	r2, r2, #4
 8014972:	b9b1      	cbnz	r1, 80149a2 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x92>
 8014974:	7861      	ldrb	r1, [r4, #1]
 8014976:	b9a1      	cbnz	r1, 80149a2 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x92>
		callback.read = NULL;
 8014978:	9105      	str	r1, [sp, #20]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801497a:	68b9      	ldr	r1, [r7, #8]
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 801497c:	8162      	strh	r2, [r4, #10]
      push_back(const value_type& __x)
 801497e:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8014980:	42a9      	cmp	r1, r5
		callback.write = write;
 8014982:	e9cd 9803 	strd	r9, r8, [sp, #12]
 8014986:	d008      	beq.n	801499a <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x8a>
 8014988:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 801498a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 801498e:	3510      	adds	r5, #16
 8014990:	607d      	str	r5, [r7, #4]
	target_register->mode.callbacks = true;
 8014992:	2301      	movs	r3, #1
 8014994:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 8014996:	7223      	strb	r3, [r4, #8]
 8014998:	e7d0      	b.n	801493c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	  _M_realloc_insert(end(), __x);
 801499a:	4638      	mov	r0, r7
 801499c:	f7fa f9b2 	bl	800ed04 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	} else {
 80149a0:	e7f7      	b.n	8014992 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x82>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 80149a2:	8961      	ldrh	r1, [r4, #10]
	if (__n >= this->size())
 80149a4:	4291      	cmp	r1, r2
 80149a6:	d302      	bcc.n	80149ae <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x9e>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 80149a8:	4803      	ldr	r0, [pc, #12]	@ (80149b8 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0xa8>)
 80149aa:	f001 fe6a 	bl	8016682 <_ZSt24__throw_out_of_range_fmtPKcz>
	return *(this->_M_impl._M_start + __n);
 80149ae:	eb03 1301 	add.w	r3, r3, r1, lsl #4
		callback->write = write;
 80149b2:	e9c3 9801 	strd	r9, r8, [r3, #4]
 80149b6:	e7ec      	b.n	8014992 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x82>
 80149b8:	08016d78 	.word	0x08016d78

080149bc <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80149bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80149c0:	e9d0 8900 	ldrd	r8, r9, [r0]
 80149c4:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 80149c6:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80149ca:	eba9 0208 	sub.w	r2, r9, r8
 80149ce:	4607      	mov	r7, r0
 80149d0:	468a      	mov	sl, r1
	if (max_size() - size() < __n)
 80149d2:	ebb3 1f22 	cmp.w	r3, r2, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80149d6:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
 80149da:	d102      	bne.n	80149e2 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 80149dc:	4820      	ldr	r0, [pc, #128]	@ (8014a60 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa4>)
 80149de:	f001 fe4d 	bl	801667c <_ZSt20__throw_length_errorPKc>
 80149e2:	45c1      	cmp	r9, r8
 80149e4:	bf14      	ite	ne
 80149e6:	4622      	movne	r2, r4
 80149e8:	2201      	moveq	r2, #1
 80149ea:	eba1 0508 	sub.w	r5, r1, r8
 80149ee:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80149f0:	d231      	bcs.n	8014a56 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80149f2:	b394      	cbz	r4, 8014a5a <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9e>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80149f4:	429c      	cmp	r4, r3
 80149f6:	bf28      	it	cs
 80149f8:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80149fa:	0120      	lsls	r0, r4, #4
 80149fc:	f001 fd89 	bl	8016512 <_Znwj>
 8014a00:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8014a02:	eb06 0c05 	add.w	ip, r6, r5
      if (__count > 0)
 8014a06:	2d00      	cmp	r5, #0
 8014a08:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8014a0c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8014a10:	dd04      	ble.n	8014a1c <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x60>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8014a12:	462a      	mov	r2, r5
 8014a14:	4641      	mov	r1, r8
 8014a16:	4630      	mov	r0, r6
 8014a18:	f001 ff08 	bl	801682c <memmove>
      ptrdiff_t __count = __last - __first;
 8014a1c:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
 8014a20:	3510      	adds	r5, #16
      if (__count > 0)
 8014a22:	f1b9 0f00 	cmp.w	r9, #0
 8014a26:	4435      	add	r5, r6
 8014a28:	dd04      	ble.n	8014a34 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x78>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8014a2a:	464a      	mov	r2, r9
 8014a2c:	4651      	mov	r1, sl
 8014a2e:	4628      	mov	r0, r5
 8014a30:	f001 fff4 	bl	8016a1c <memcpy>
      return __result + __count;
 8014a34:	444d      	add	r5, r9
	if (__p)
 8014a36:	f1b8 0f00 	cmp.w	r8, #0
 8014a3a:	d005      	beq.n	8014a48 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
 8014a3c:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8014a3e:	4640      	mov	r0, r8
 8014a40:	eba1 0108 	sub.w	r1, r1, r8
 8014a44:	f001 fd40 	bl	80164c8 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8014a48:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8014a4c:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 8014a50:	60be      	str	r6, [r7, #8]
    }
 8014a52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8014a56:	461c      	mov	r4, r3
 8014a58:	e7cf      	b.n	80149fa <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8014a5a:	4626      	mov	r6, r4
 8014a5c:	e7d1      	b.n	8014a02 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
 8014a5e:	bf00      	nop
 8014a60:	08016b36 	.word	0x08016b36

08014a64 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8014a64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014a68:	460c      	mov	r4, r1
 8014a6a:	b087      	sub	sp, #28
 8014a6c:	4606      	mov	r6, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8014a6e:	f04f 31ff 	mov.w	r1, #4294967295
 8014a72:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8014a74:	4698      	mov	r8, r3
 8014a76:	4691      	mov	r9, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8014a78:	f7f7 fb8e 	bl	800c198 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8014a7c:	4621      	mov	r1, r4
 8014a7e:	f10d 0207 	add.w	r2, sp, #7
 8014a82:	4630      	mov	r0, r6
 8014a84:	f000 f969 	bl	8014d5a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8014a88:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8014a8c:	4604      	mov	r4, r0
	if (!success) {
 8014a8e:	b92b      	cbnz	r3, 8014a9c <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x38>
	osSemaphoreRelease(RegistersSemaphore);
 8014a90:	6830      	ldr	r0, [r6, #0]
 8014a92:	f7f7 fbb5 	bl	800c200 <osSemaphoreRelease>
}
 8014a96:	b007      	add	sp, #28
 8014a98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8014a9c:	f10d 0007 	add.w	r0, sp, #7
 8014aa0:	f7ff fbda 	bl	8014258 <_ZN9Registers9GetTypeIDItEEhPb.isra.0>
	if (!success) {
 8014aa4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d0f1      	beq.n	8014a90 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (target_register->register_info.type != registered_type) {
 8014aac:	7923      	ldrb	r3, [r4, #4]
 8014aae:	4298      	cmp	r0, r3
 8014ab0:	d1ee      	bne.n	8014a90 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (callbacks[target_register->register_info.type] == NULL) {
 8014ab2:	3004      	adds	r0, #4
 8014ab4:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
 8014ab8:	2f00      	cmp	r7, #0
 8014aba:	d0e9      	beq.n	8014a90 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 8014abc:	7821      	ldrb	r1, [r4, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8014abe:	e9d7 3500 	ldrd	r3, r5, [r7]
 8014ac2:	1aea      	subs	r2, r5, r3
 8014ac4:	1112      	asrs	r2, r2, #4
 8014ac6:	b9b1      	cbnz	r1, 8014af6 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x92>
 8014ac8:	7861      	ldrb	r1, [r4, #1]
 8014aca:	b9a1      	cbnz	r1, 8014af6 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x92>
		callback.read = NULL;
 8014acc:	9105      	str	r1, [sp, #20]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8014ace:	68b9      	ldr	r1, [r7, #8]
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8014ad0:	8162      	strh	r2, [r4, #10]
      push_back(const value_type& __x)
 8014ad2:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8014ad4:	42a9      	cmp	r1, r5
		callback.write = write;
 8014ad6:	e9cd 9803 	strd	r9, r8, [sp, #12]
 8014ada:	d008      	beq.n	8014aee <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x8a>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8014adc:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8014ade:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8014ae2:	3510      	adds	r5, #16
 8014ae4:	607d      	str	r5, [r7, #4]
	target_register->mode.callbacks = true;
 8014ae6:	2301      	movs	r3, #1
 8014ae8:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 8014aea:	7223      	strb	r3, [r4, #8]
 8014aec:	e7d0      	b.n	8014a90 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	  _M_realloc_insert(end(), __x);
 8014aee:	4638      	mov	r0, r7
 8014af0:	f7ff ff64 	bl	80149bc <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	} else {
 8014af4:	e7f7      	b.n	8014ae6 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x82>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8014af6:	8961      	ldrh	r1, [r4, #10]
	if (__n >= this->size())
 8014af8:	4291      	cmp	r1, r2
 8014afa:	d302      	bcc.n	8014b02 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x9e>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8014afc:	4803      	ldr	r0, [pc, #12]	@ (8014b0c <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0xa8>)
 8014afe:	f001 fdc0 	bl	8016682 <_ZSt24__throw_out_of_range_fmtPKcz>
	return *(this->_M_impl._M_start + __n);
 8014b02:	eb03 1301 	add.w	r3, r3, r1, lsl #4
		callback->write = write;
 8014b06:	e9c3 9801 	strd	r9, r8, [r3, #4]
 8014b0a:	e7ec      	b.n	8014ae6 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x82>
 8014b0c:	08016d78 	.word	0x08016d78

08014b10 <_ZN10Publishers12AddRegistersEv>:
void Publishers::AddRegisters(void) {
 8014b10:	b510      	push	{r4, lr}
 8014b12:	4604      	mov	r4, r0
	registers->AddRegister<uint8_t>(REG_PUB_SET_STATUS);
 8014b14:	2110      	movs	r1, #16
 8014b16:	6840      	ldr	r0, [r0, #4]
 8014b18:	f7ff fec9 	bl	80148ae <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_PUB_SET_STATUS, 2);
 8014b1c:	2202      	movs	r2, #2
 8014b1e:	2110      	movs	r1, #16
 8014b20:	6860      	ldr	r0, [r4, #4]
 8014b22:	f000 f96f 	bl	8014e04 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_PUB_SET_STATUS, (void*) this,
 8014b26:	4b37      	ldr	r3, [pc, #220]	@ (8014c04 <_ZN10Publishers12AddRegistersEv+0xf4>)
 8014b28:	4622      	mov	r2, r4
 8014b2a:	6860      	ldr	r0, [r4, #4]
 8014b2c:	2110      	movs	r1, #16
 8014b2e:	f7ff feef 	bl	8014910 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint16_t>(REG_PUB_SET_TOPIC_STATUS);
 8014b32:	6860      	ldr	r0, [r4, #4]
 8014b34:	2111      	movs	r1, #17
 8014b36:	f7ff fe89 	bl	801484c <_ZN9Registers11AddRegisterItEEbt.isra.0>
	registers->SetRegisterAsArray(REG_PUB_SET_TOPIC_STATUS, 3);
 8014b3a:	2203      	movs	r2, #3
 8014b3c:	2111      	movs	r1, #17
 8014b3e:	6860      	ldr	r0, [r4, #4]
 8014b40:	f000 f960 	bl	8014e04 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint16_t>(REG_PUB_SET_TOPIC_STATUS, (void*) this,
 8014b44:	4b30      	ldr	r3, [pc, #192]	@ (8014c08 <_ZN10Publishers12AddRegistersEv+0xf8>)
 8014b46:	4622      	mov	r2, r4
 8014b48:	6860      	ldr	r0, [r4, #4]
 8014b4a:	2111      	movs	r1, #17
 8014b4c:	f7ff ff8a 	bl	8014a64 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint16_t>(REG_PUB_SET_PRESCALER);
 8014b50:	6860      	ldr	r0, [r4, #4]
 8014b52:	2112      	movs	r1, #18
 8014b54:	f7ff fe7a 	bl	801484c <_ZN9Registers11AddRegisterItEEbt.isra.0>
	registers->SetRegisterAsArray(REG_PUB_SET_PRESCALER, 2);
 8014b58:	2202      	movs	r2, #2
 8014b5a:	2112      	movs	r1, #18
 8014b5c:	6860      	ldr	r0, [r4, #4]
 8014b5e:	f000 f951 	bl	8014e04 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint16_t>(REG_PUB_SET_PRESCALER, (void*) this,
 8014b62:	4622      	mov	r2, r4
 8014b64:	4b29      	ldr	r3, [pc, #164]	@ (8014c0c <_ZN10Publishers12AddRegistersEv+0xfc>)
 8014b66:	2112      	movs	r1, #18
 8014b68:	6860      	ldr	r0, [r4, #4]
 8014b6a:	f7ff ff7b 	bl	8014a64 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_PUB_STOP_TOPICS);
 8014b6e:	6860      	ldr	r0, [r4, #4]
 8014b70:	2113      	movs	r1, #19
 8014b72:	f7ff fe9c 	bl	80148ae <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_PUB_STOP_TOPICS);
 8014b76:	2113      	movs	r1, #19
 8014b78:	6860      	ldr	r0, [r4, #4]
 8014b7a:	f000 f927 	bl	8014dcc <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_PUB_STOP_TOPICS, (void*) this,
 8014b7e:	4b24      	ldr	r3, [pc, #144]	@ (8014c10 <_ZN10Publishers12AddRegistersEv+0x100>)
 8014b80:	4622      	mov	r2, r4
 8014b82:	6860      	ldr	r0, [r4, #4]
 8014b84:	2113      	movs	r1, #19
 8014b86:	f7ff fec3 	bl	8014910 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_PUB_LINK_INTERFACE);
 8014b8a:	6860      	ldr	r0, [r4, #4]
 8014b8c:	2114      	movs	r1, #20
 8014b8e:	f7ff fe8e 	bl	80148ae <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_PUB_LINK_INTERFACE, 2);
 8014b92:	2202      	movs	r2, #2
 8014b94:	2114      	movs	r1, #20
 8014b96:	6860      	ldr	r0, [r4, #4]
 8014b98:	f000 f934 	bl	8014e04 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_PUB_LINK_INTERFACE, (void*) this,
 8014b9c:	4b1d      	ldr	r3, [pc, #116]	@ (8014c14 <_ZN10Publishers12AddRegistersEv+0x104>)
 8014b9e:	4622      	mov	r2, r4
 8014ba0:	6860      	ldr	r0, [r4, #4]
 8014ba2:	2114      	movs	r1, #20
 8014ba4:	f7ff feb4 	bl	8014910 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_PUB_UNLINK_INTERFACE);
 8014ba8:	6860      	ldr	r0, [r4, #4]
 8014baa:	2115      	movs	r1, #21
 8014bac:	f7ff fe7f 	bl	80148ae <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_PUB_UNLINK_INTERFACE, 2);
 8014bb0:	2202      	movs	r2, #2
 8014bb2:	2115      	movs	r1, #21
 8014bb4:	6860      	ldr	r0, [r4, #4]
 8014bb6:	f000 f925 	bl	8014e04 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_PUB_UNLINK_INTERFACE, (void*) this,
 8014bba:	4622      	mov	r2, r4
 8014bbc:	4b16      	ldr	r3, [pc, #88]	@ (8014c18 <_ZN10Publishers12AddRegistersEv+0x108>)
 8014bbe:	2115      	movs	r1, #21
 8014bc0:	6860      	ldr	r0, [r4, #4]
 8014bc2:	f7ff fea5 	bl	8014910 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_PUB_CLEAR_INTERFACES);
 8014bc6:	6860      	ldr	r0, [r4, #4]
 8014bc8:	2116      	movs	r1, #22
 8014bca:	f7ff fe70 	bl	80148ae <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_PUB_CLEAR_INTERFACES);
 8014bce:	2116      	movs	r1, #22
 8014bd0:	6860      	ldr	r0, [r4, #4]
 8014bd2:	f000 f8fb 	bl	8014dcc <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_PUB_CLEAR_INTERFACES, (void*) this,
 8014bd6:	4b11      	ldr	r3, [pc, #68]	@ (8014c1c <_ZN10Publishers12AddRegistersEv+0x10c>)
 8014bd8:	4622      	mov	r2, r4
 8014bda:	6860      	ldr	r0, [r4, #4]
 8014bdc:	2116      	movs	r1, #22
 8014bde:	f7ff fe97 	bl	8014910 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_PUB_SET_TARGET_ADDRESS);
 8014be2:	6860      	ldr	r0, [r4, #4]
 8014be4:	2117      	movs	r1, #23
 8014be6:	f7ff fe62 	bl	80148ae <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_PUB_SET_TARGET_ADDRESS, 3);
 8014bea:	2203      	movs	r2, #3
 8014bec:	2117      	movs	r1, #23
 8014bee:	6860      	ldr	r0, [r4, #4]
 8014bf0:	f000 f908 	bl	8014e04 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_PUB_SET_TARGET_ADDRESS, (void*) this,
 8014bf4:	4622      	mov	r2, r4
 8014bf6:	6860      	ldr	r0, [r4, #4]
 8014bf8:	2117      	movs	r1, #23
 8014bfa:	4b09      	ldr	r3, [pc, #36]	@ (8014c20 <_ZN10Publishers12AddRegistersEv+0x110>)
}
 8014bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	registers->AddWriteCallback<uint8_t>(REG_PUB_SET_TARGET_ADDRESS, (void*) this,
 8014c00:	f7ff be86 	b.w	8014910 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
 8014c04:	0801441f 	.word	0x0801441f
 8014c08:	08014583 	.word	0x08014583
 8014c0c:	0801446b 	.word	0x0801446b
 8014c10:	080144bd 	.word	0x080144bd
 8014c14:	08014835 	.word	0x08014835
 8014c18:	080146fd 	.word	0x080146fd
 8014c1c:	080144fd 	.word	0x080144fd
 8014c20:	08014623 	.word	0x08014623

08014c24 <_ZZN9Registers16AddBaseRegistersEvENUlPvtPPmPtE_4_FUNES0_tS2_S3_>:
void Registers::AddBaseRegisters(void) {
	// Register to get the timestamp in ms
	AddRegister<uint32_t>(REG_TIMEBASE);
	SetRegisterAsSingle(REG_TIMEBASE);
	AddReadCallback<uint32_t>(REG_TIMEBASE, NULL,
		[](void* context, uint16_t register_id, uint32_t** output, uint16_t* length) -> bool {
 8014c24:	b538      	push	{r3, r4, r5, lr}
			*length = 1;
 8014c26:	2401      	movs	r4, #1
			**output = HAL_GetTick();
 8014c28:	6815      	ldr	r5, [r2, #0]
			*length = 1;
 8014c2a:	801c      	strh	r4, [r3, #0]
			**output = HAL_GetTick();
 8014c2c:	f7ee fa58 	bl	80030e0 <HAL_GetTick>
 8014c30:	6028      	str	r0, [r5, #0]
			return true;
		}
 8014c32:	4620      	mov	r0, r4
 8014c34:	bd38      	pop	{r3, r4, r5, pc}
	...

08014c38 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 8014c38:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8014c3a:	491e      	ldr	r1, [pc, #120]	@ (8014cb4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 8014c3c:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8014c3e:	481e      	ldr	r0, [pc, #120]	@ (8014cb8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8014c40:	f001 fcfe 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 8014c44:	bb40      	cbnz	r0, 8014c98 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8014c46:	491d      	ldr	r1, [pc, #116]	@ (8014cbc <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x84>)
 8014c48:	481b      	ldr	r0, [pc, #108]	@ (8014cb8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8014c4a:	f001 fcf9 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 8014c4e:	bb28      	cbnz	r0, 8014c9c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8014c50:	4919      	ldr	r1, [pc, #100]	@ (8014cb8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8014c52:	4608      	mov	r0, r1
 8014c54:	f001 fcf4 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 8014c58:	bb10      	cbnz	r0, 8014ca0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8014c5a:	4919      	ldr	r1, [pc, #100]	@ (8014cc0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x88>)
 8014c5c:	4816      	ldr	r0, [pc, #88]	@ (8014cb8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8014c5e:	f001 fcef 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 8014c62:	b9f8      	cbnz	r0, 8014ca4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8014c64:	4917      	ldr	r1, [pc, #92]	@ (8014cc4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x8c>)
 8014c66:	4814      	ldr	r0, [pc, #80]	@ (8014cb8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8014c68:	f001 fcea 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 8014c6c:	b9e0      	cbnz	r0, 8014ca8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8014c6e:	4916      	ldr	r1, [pc, #88]	@ (8014cc8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x90>)
 8014c70:	4811      	ldr	r0, [pc, #68]	@ (8014cb8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8014c72:	f001 fce5 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 8014c76:	b9c8      	cbnz	r0, 8014cac <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8014c78:	4914      	ldr	r1, [pc, #80]	@ (8014ccc <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x94>)
 8014c7a:	480f      	ldr	r0, [pc, #60]	@ (8014cb8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8014c7c:	f001 fce0 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 8014c80:	b9b0      	cbnz	r0, 8014cb0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 8014c82:	4913      	ldr	r1, [pc, #76]	@ (8014cd0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x98>)
 8014c84:	480c      	ldr	r0, [pc, #48]	@ (8014cb8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8014c86:	f001 fcdb 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 8014c8a:	2800      	cmp	r0, #0
 8014c8c:	bf14      	ite	ne
 8014c8e:	2309      	movne	r3, #9
 8014c90:	2300      	moveq	r3, #0
 8014c92:	7020      	strb	r0, [r4, #0]
}
 8014c94:	4618      	mov	r0, r3
 8014c96:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8014c98:	2300      	movs	r3, #0
 8014c9a:	e7fa      	b.n	8014c92 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8014c9c:	2301      	movs	r3, #1
 8014c9e:	e7f8      	b.n	8014c92 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8014ca0:	2302      	movs	r3, #2
 8014ca2:	e7f6      	b.n	8014c92 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8014ca4:	2303      	movs	r3, #3
 8014ca6:	e7f4      	b.n	8014c92 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8014ca8:	2304      	movs	r3, #4
 8014caa:	e7f2      	b.n	8014c92 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8014cac:	2306      	movs	r3, #6
 8014cae:	e7f0      	b.n	8014c92 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8014cb0:	2308      	movs	r3, #8
 8014cb2:	e7ee      	b.n	8014c92 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
 8014cb4:	08016f7c 	.word	0x08016f7c
 8014cb8:	08016f64 	.word	0x08016f64
 8014cbc:	08016f74 	.word	0x08016f74
 8014cc0:	08016f5c 	.word	0x08016f5c
 8014cc4:	08016f84 	.word	0x08016f84
 8014cc8:	08016f6c 	.word	0x08016f6c
 8014ccc:	08016f54 	.word	0x08016f54
 8014cd0:	08016f4c 	.word	0x08016f4c

08014cd4 <_ZN9RegistersC1Ev>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 8014cd4:	2200      	movs	r2, #0
 8014cd6:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8014cda:	60c2      	str	r2, [r0, #12]
	callbacks[INT16_TYPE] = NULL;
 8014cdc:	6242      	str	r2, [r0, #36]	@ 0x24
	callbacks[INT64_TYPE] = NULL;
 8014cde:	62c2      	str	r2, [r0, #44]	@ 0x2c
 8014ce0:	e9c0 220e 	strd	r2, r2, [r0, #56]	@ 0x38
 8014ce4:	e9c0 2210 	strd	r2, r2, [r0, #64]	@ 0x40
 8014ce8:	e9c0 2212 	strd	r2, r2, [r0, #72]	@ 0x48
 8014cec:	e9c0 2214 	strd	r2, r2, [r0, #80]	@ 0x50
 8014cf0:	e9c0 2216 	strd	r2, r2, [r0, #88]	@ 0x58
 8014cf4:	e9c0 2218 	strd	r2, r2, [r0, #96]	@ 0x60
 8014cf8:	e9c0 221a 	strd	r2, r2, [r0, #104]	@ 0x68
 8014cfc:	e9c0 221c 	strd	r2, r2, [r0, #112]	@ 0x70
 8014d00:	e9c0 221e 	strd	r2, r2, [r0, #120]	@ 0x78
 8014d04:	e9c0 2220 	strd	r2, r2, [r0, #128]	@ 0x80
 8014d08:	e9c0 2222 	strd	r2, r2, [r0, #136]	@ 0x88
 8014d0c:	e9c0 2224 	strd	r2, r2, [r0, #144]	@ 0x90
Registers::Registers() {
 8014d10:	f100 0238 	add.w	r2, r0, #56	@ 0x38
	callbacks[UINT8_TYPE] = &uint8_t_callbacks;
 8014d14:	6102      	str	r2, [r0, #16]
Registers::Registers() {
 8014d16:	f100 0244 	add.w	r2, r0, #68	@ 0x44
	callbacks[UINT16_TYPE] = &uint16_t_callbacks;
 8014d1a:	6142      	str	r2, [r0, #20]
Registers::Registers() {
 8014d1c:	f100 0250 	add.w	r2, r0, #80	@ 0x50
	callbacks[UINT32_TYPE] = &uint32_t_callbacks;
 8014d20:	6182      	str	r2, [r0, #24]
Registers::Registers() {
 8014d22:	f100 025c 	add.w	r2, r0, #92	@ 0x5c
	callbacks[UINT64_TYPE] = &uint64_t_callbacks;
 8014d26:	61c2      	str	r2, [r0, #28]
Registers::Registers() {
 8014d28:	f100 0268 	add.w	r2, r0, #104	@ 0x68
	callbacks[INT8_TYPE] = &int8_t_callbacks;
 8014d2c:	6202      	str	r2, [r0, #32]
Registers::Registers() {
 8014d2e:	f100 0274 	add.w	r2, r0, #116	@ 0x74
	callbacks[INT32_TYPE] = &int32_t_callbacks;
 8014d32:	6282      	str	r2, [r0, #40]	@ 0x28
Registers::Registers() {
 8014d34:	f100 0280 	add.w	r2, r0, #128	@ 0x80
	callbacks[FLOAT_TYPE] = &float_callbacks;
 8014d38:	6302      	str	r2, [r0, #48]	@ 0x30
Registers::Registers() {
 8014d3a:	f100 028c 	add.w	r2, r0, #140	@ 0x8c
	callbacks[DOUBLE_TYPE] = &double_callbacks;
 8014d3e:	6342      	str	r2, [r0, #52]	@ 0x34
}
 8014d40:	4770      	bx	lr

08014d42 <_ZN9Registers4InitEv>:
	RegistersSemaphore = osSemaphoreNew(1,1,NULL);
 8014d42:	2101      	movs	r1, #1
 8014d44:	2200      	movs	r2, #0
void Registers::Init(void) {
 8014d46:	b510      	push	{r4, lr}
 8014d48:	4604      	mov	r4, r0
	RegistersSemaphore = osSemaphoreNew(1,1,NULL);
 8014d4a:	4608      	mov	r0, r1
 8014d4c:	f7f7 f9c8 	bl	800c0e0 <osSemaphoreNew>
 8014d50:	6020      	str	r0, [r4, #0]
}
 8014d52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSemaphoreRelease(RegistersSemaphore);
 8014d56:	f7f7 ba53 	b.w	800c200 <osSemaphoreRelease>

08014d5a <_ZN9Registers25FindRegisterConfigurationEtPb>:
 *
 * @param input ID: register address
 * @param output success: whether successful
 * @return the pointer to the register configuration
 */
RegisterConfiguration* Registers::FindRegisterConfiguration(uint16_t ID, bool* success) {
 8014d5a:	b530      	push	{r4, r5, lr}
 8014d5c:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
	for (RegisterConfiguration &register_configuration : registers) {
 8014d60:	429c      	cmp	r4, r3
 8014d62:	4618      	mov	r0, r3
 8014d64:	d103      	bne.n	8014d6e <_ZN9Registers25FindRegisterConfigurationEtPb+0x14>
 8014d66:	2300      	movs	r3, #0
			*success = true;
			return &register_configuration;
		}
	}
	*success = false;
	return NULL;
 8014d68:	4618      	mov	r0, r3
			*success = true;
 8014d6a:	7013      	strb	r3, [r2, #0]
}
 8014d6c:	bd30      	pop	{r4, r5, pc}
		if (register_configuration.register_info.address == ID) {
 8014d6e:	8845      	ldrh	r5, [r0, #2]
 8014d70:	f100 0310 	add.w	r3, r0, #16
 8014d74:	428d      	cmp	r5, r1
 8014d76:	d1f3      	bne.n	8014d60 <_ZN9Registers25FindRegisterConfigurationEtPb+0x6>
 8014d78:	2301      	movs	r3, #1
 8014d7a:	e7f6      	b.n	8014d6a <_ZN9Registers25FindRegisterConfigurationEtPb+0x10>

08014d7c <_ZN9Registers12FindRegisterEtPb>:
Register Registers::FindRegister(uint16_t ID, bool* success) {
 8014d7c:	b510      	push	{r4, lr}
 8014d7e:	4604      	mov	r4, r0
 8014d80:	4608      	mov	r0, r1
 8014d82:	4611      	mov	r1, r2
	RegisterConfiguration* register_configuration = FindRegisterConfiguration(ID, success);
 8014d84:	461a      	mov	r2, r3
 8014d86:	f7ff ffe8 	bl	8014d5a <_ZN9Registers25FindRegisterConfigurationEtPb>
	return register_configuration->register_info;
 8014d8a:	f8d0 3002 	ldr.w	r3, [r0, #2]
 8014d8e:	6023      	str	r3, [r4, #0]
 8014d90:	88c3      	ldrh	r3, [r0, #6]
}
 8014d92:	4620      	mov	r0, r4
	return register_configuration->register_info;
 8014d94:	80a3      	strh	r3, [r4, #4]
}
 8014d96:	bd10      	pop	{r4, pc}

08014d98 <_ZN9Registers20AddRegisterSemaphoreEtPPv>:
 *
 * @param input ID: register address
 * @param input register_semaphore: pointer to the semaphore to link
 * @return whether successful
 */
bool Registers::AddRegisterSemaphore(uint16_t ID, osSemaphoreId_t* register_semaphore) {
 8014d98:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014d9a:	460e      	mov	r6, r1
 8014d9c:	4604      	mov	r4, r0
	bool success;
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8014d9e:	f04f 31ff 	mov.w	r1, #4294967295
 8014da2:	6800      	ldr	r0, [r0, #0]
bool Registers::AddRegisterSemaphore(uint16_t ID, osSemaphoreId_t* register_semaphore) {
 8014da4:	4615      	mov	r5, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8014da6:	f7f7 f9f7 	bl	800c198 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8014daa:	4631      	mov	r1, r6
 8014dac:	f10d 0207 	add.w	r2, sp, #7
 8014db0:	4620      	mov	r0, r4
 8014db2:	f7ff ffd2 	bl	8014d5a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8014db6:	f89d 6007 	ldrb.w	r6, [sp, #7]
 8014dba:	b92e      	cbnz	r6, 8014dc8 <_ZN9Registers20AddRegisterSemaphoreEtPPv+0x30>
		osSemaphoreRelease(RegistersSemaphore);
		return false;
	}

	target_register->register_semaphore = register_semaphore;
	osSemaphoreRelease(RegistersSemaphore);
 8014dbc:	6820      	ldr	r0, [r4, #0]
 8014dbe:	f7f7 fa1f 	bl	800c200 <osSemaphoreRelease>
	return true;
}
 8014dc2:	4630      	mov	r0, r6
 8014dc4:	b002      	add	sp, #8
 8014dc6:	bd70      	pop	{r4, r5, r6, pc}
	target_register->register_semaphore = register_semaphore;
 8014dc8:	60c5      	str	r5, [r0, #12]
 8014dca:	e7f7      	b.n	8014dbc <_ZN9Registers20AddRegisterSemaphoreEtPPv+0x24>

08014dcc <_ZN9Registers19SetRegisterAsSingleEt>:
 * @brief Set the register as a single value (not an array nor a vector)
 *
 * @param input ID: register address
 * @return whether successful
 */
bool Registers::SetRegisterAsSingle(uint16_t ID) {
 8014dcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014dce:	460d      	mov	r5, r1
 8014dd0:	4604      	mov	r4, r0
	bool success;
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8014dd2:	f04f 31ff 	mov.w	r1, #4294967295
 8014dd6:	6800      	ldr	r0, [r0, #0]
 8014dd8:	f7f7 f9de 	bl	800c198 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8014ddc:	4629      	mov	r1, r5
 8014dde:	f10d 0207 	add.w	r2, sp, #7
 8014de2:	4620      	mov	r0, r4
 8014de4:	f7ff ffb9 	bl	8014d5a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8014de8:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8014dec:	b92d      	cbnz	r5, 8014dfa <_ZN9Registers19SetRegisterAsSingleEt+0x2e>
		return false;
	}

	target_register->register_info.isArray = false;
	target_register->register_info.length = 1;
	osSemaphoreRelease(RegistersSemaphore);
 8014dee:	6820      	ldr	r0, [r4, #0]
 8014df0:	f7f7 fa06 	bl	800c200 <osSemaphoreRelease>
	return true;
}
 8014df4:	4628      	mov	r0, r5
 8014df6:	b003      	add	sp, #12
 8014df8:	bd30      	pop	{r4, r5, pc}
	target_register->register_info.isArray = false;
 8014dfa:	2300      	movs	r3, #0
 8014dfc:	7143      	strb	r3, [r0, #5]
	target_register->register_info.length = 1;
 8014dfe:	2301      	movs	r3, #1
 8014e00:	80c3      	strh	r3, [r0, #6]
 8014e02:	e7f4      	b.n	8014dee <_ZN9Registers19SetRegisterAsSingleEt+0x22>

08014e04 <_ZN9Registers18SetRegisterAsArrayEtt>:
 *
 * @param input ID: register address
 * @param input length_: length of the array
 * @return whether successful
 */
bool Registers::SetRegisterAsArray(uint16_t ID, uint16_t length_) {
 8014e04:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014e06:	460e      	mov	r6, r1
 8014e08:	4604      	mov	r4, r0
	bool success;
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8014e0a:	f04f 31ff 	mov.w	r1, #4294967295
 8014e0e:	6800      	ldr	r0, [r0, #0]
bool Registers::SetRegisterAsArray(uint16_t ID, uint16_t length_) {
 8014e10:	4615      	mov	r5, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8014e12:	f7f7 f9c1 	bl	800c198 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8014e16:	4631      	mov	r1, r6
 8014e18:	f10d 0207 	add.w	r2, sp, #7
 8014e1c:	4620      	mov	r0, r4
 8014e1e:	f7ff ff9c 	bl	8014d5a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8014e22:	f89d 6007 	ldrb.w	r6, [sp, #7]
 8014e26:	b92e      	cbnz	r6, 8014e34 <_ZN9Registers18SetRegisterAsArrayEtt+0x30>
		return false;
	}

	target_register->register_info.isArray = true;
	target_register->register_info.length = length_;
	osSemaphoreRelease(RegistersSemaphore);
 8014e28:	6820      	ldr	r0, [r4, #0]
 8014e2a:	f7f7 f9e9 	bl	800c200 <osSemaphoreRelease>
	return true;
}
 8014e2e:	4630      	mov	r0, r6
 8014e30:	b002      	add	sp, #8
 8014e32:	bd70      	pop	{r4, r5, r6, pc}
	target_register->register_info.isArray = true;
 8014e34:	2301      	movs	r3, #1
	target_register->register_info.length = length_;
 8014e36:	80c5      	strh	r5, [r0, #6]
	target_register->register_info.isArray = true;
 8014e38:	7143      	strb	r3, [r0, #5]
	target_register->register_info.length = length_;
 8014e3a:	e7f5      	b.n	8014e28 <_ZN9Registers18SetRegisterAsArrayEtt+0x24>

08014e3c <_ZN9Registers19SetRegisterAsVectorEt>:
 *
 * @param input ID: register address
 * @return whether successful
 */
bool Registers::SetRegisterAsVector(uint16_t ID) {
	return SetRegisterAsArray(ID, 0);
 8014e3c:	2200      	movs	r2, #0
 8014e3e:	f7ff bfe1 	b.w	8014e04 <_ZN9Registers18SetRegisterAsArrayEtt>

08014e42 <_ZN9Registers22SetRegisterPermissionsEth>:
 *
 * @param input ID: register address
 * @param input permissions_: WRITE_PERMISSION or READ_PERMISSION
 * @return whether successful
 */
bool Registers::SetRegisterPermissions(uint16_t ID, uint8_t permissions_) {
 8014e42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014e44:	460e      	mov	r6, r1
 8014e46:	4604      	mov	r4, r0
	bool success;
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8014e48:	f04f 31ff 	mov.w	r1, #4294967295
 8014e4c:	6800      	ldr	r0, [r0, #0]
bool Registers::SetRegisterPermissions(uint16_t ID, uint8_t permissions_) {
 8014e4e:	4615      	mov	r5, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8014e50:	f7f7 f9a2 	bl	800c198 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8014e54:	4631      	mov	r1, r6
 8014e56:	f10d 0207 	add.w	r2, sp, #7
 8014e5a:	4620      	mov	r0, r4
 8014e5c:	f7ff ff7d 	bl	8014d5a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8014e60:	f89d 6007 	ldrb.w	r6, [sp, #7]
 8014e64:	b92e      	cbnz	r6, 8014e72 <_ZN9Registers22SetRegisterPermissionsEth+0x30>
		return false;
	}

	target_register->access.write = permissions_ & WRITE_PERMISSION;
	target_register->access.read = permissions_ & READ_PERMISSION;
	osSemaphoreRelease(RegistersSemaphore);
 8014e66:	6820      	ldr	r0, [r4, #0]
 8014e68:	f7f7 f9ca 	bl	800c200 <osSemaphoreRelease>
	return true;
}
 8014e6c:	4630      	mov	r0, r6
 8014e6e:	b002      	add	sp, #8
 8014e70:	bd70      	pop	{r4, r5, r6, pc}
	target_register->access.write = permissions_ & WRITE_PERMISSION;
 8014e72:	f005 0301 	and.w	r3, r5, #1
	target_register->access.read = permissions_ & READ_PERMISSION;
 8014e76:	f3c5 0540 	ubfx	r5, r5, #1, #1
	target_register->access.write = permissions_ & WRITE_PERMISSION;
 8014e7a:	7203      	strb	r3, [r0, #8]
	target_register->access.read = permissions_ & READ_PERMISSION;
 8014e7c:	7245      	strb	r5, [r0, #9]
 8014e7e:	e7f2      	b.n	8014e66 <_ZN9Registers22SetRegisterPermissionsEth+0x24>

08014e80 <_ZN9Registers12IsRegisteredEt>:
 * @brief Check the register exists
 *
 * @param input ID: register address to check
 * @return true if the register is found
 */
bool Registers::IsRegistered(uint16_t ID) {
 8014e80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014e82:	4604      	mov	r4, r0
 8014e84:	460d      	mov	r5, r1
	bool success;
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8014e86:	6800      	ldr	r0, [r0, #0]
 8014e88:	f04f 31ff 	mov.w	r1, #4294967295
 8014e8c:	f7f7 f984 	bl	800c198 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 8014e90:	f10d 0207 	add.w	r2, sp, #7
 8014e94:	4629      	mov	r1, r5
 8014e96:	4620      	mov	r0, r4
 8014e98:	f7ff ff5f 	bl	8014d5a <_ZN9Registers25FindRegisterConfigurationEtPb>
	osSemaphoreRelease(RegistersSemaphore);
 8014e9c:	6820      	ldr	r0, [r4, #0]
 8014e9e:	f7f7 f9af 	bl	800c200 <osSemaphoreRelease>
	return success;
}
 8014ea2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8014ea6:	b003      	add	sp, #12
 8014ea8:	bd30      	pop	{r4, r5, pc}
	...

08014eac <_ZN9Registers16AddBaseRegistersEv>:
void Registers::AddBaseRegisters(void) {
 8014eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014eae:	4604      	mov	r4, r0
 8014eb0:	b087      	sub	sp, #28
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8014eb2:	f04f 31ff 	mov.w	r1, #4294967295
 8014eb6:	6800      	ldr	r0, [r0, #0]
 8014eb8:	f7f7 f96e 	bl	800c198 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 8014ebc:	f10d 0207 	add.w	r2, sp, #7
 8014ec0:	2100      	movs	r1, #0
 8014ec2:	4620      	mov	r0, r4
 8014ec4:	f7ff ff49 	bl	8014d5a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 8014ec8:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8014ecc:	b1dd      	cbz	r5, 8014f06 <_ZN9Registers16AddBaseRegistersEv+0x5a>
	osSemaphoreRelease(RegistersSemaphore);
 8014ece:	6820      	ldr	r0, [r4, #0]
 8014ed0:	f7f7 f996 	bl	800c200 <osSemaphoreRelease>
	SetRegisterAsSingle(REG_TIMEBASE);
 8014ed4:	2100      	movs	r1, #0
 8014ed6:	4620      	mov	r0, r4
 8014ed8:	f7ff ff78 	bl	8014dcc <_ZN9Registers19SetRegisterAsSingleEt>
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8014edc:	f04f 31ff 	mov.w	r1, #4294967295
 8014ee0:	6820      	ldr	r0, [r4, #0]
 8014ee2:	f7f7 f959 	bl	800c198 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8014ee6:	f10d 0207 	add.w	r2, sp, #7
 8014eea:	2100      	movs	r1, #0
 8014eec:	4620      	mov	r0, r4
 8014eee:	f7ff ff34 	bl	8014d5a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8014ef2:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8014ef6:	4605      	mov	r5, r0
	if (!success) {
 8014ef8:	bb3b      	cbnz	r3, 8014f4a <_ZN9Registers16AddBaseRegistersEv+0x9e>
	osSemaphoreRelease(RegistersSemaphore);
 8014efa:	6820      	ldr	r0, [r4, #0]
}
 8014efc:	b007      	add	sp, #28
 8014efe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014f02:	f7f7 b97d 	b.w	800c200 <osSemaphoreRelease>
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8014f06:	f10d 0007 	add.w	r0, sp, #7
 8014f0a:	f7ff fe95 	bl	8014c38 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	configuration_.register_info = register_;
 8014f0e:	2301      	movs	r3, #1
	configuration_.mode = mode;
 8014f10:	9502      	str	r5, [sp, #8]
	configuration_.register_info = register_;
 8014f12:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 8014f16:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 8014f1a:	f88d 000c 	strb.w	r0, [sp, #12]
 8014f1e:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 8014f22:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d0d1      	beq.n	8014ece <_ZN9Registers16AddBaseRegistersEv+0x22>
      push_back(const value_type& __x)
 8014f2a:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8014f2c:	e9d4 5302 	ldrd	r5, r3, [r4, #8]
 8014f30:	429d      	cmp	r5, r3
 8014f32:	d005      	beq.n	8014f40 <_ZN9Registers16AddBaseRegistersEv+0x94>
 8014f34:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8014f36:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8014f3a:	3510      	adds	r5, #16
 8014f3c:	60a5      	str	r5, [r4, #8]
 8014f3e:	e7c6      	b.n	8014ece <_ZN9Registers16AddBaseRegistersEv+0x22>
	  _M_realloc_insert(end(), __x);
 8014f40:	4629      	mov	r1, r5
 8014f42:	1d20      	adds	r0, r4, #4
 8014f44:	f7f9 fe42 	bl	800ebcc <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 8014f48:	e7c1      	b.n	8014ece <_ZN9Registers16AddBaseRegistersEv+0x22>
	uint8_t registered_type = GetTypeID<T>(&success);
 8014f4a:	f10d 0007 	add.w	r0, sp, #7
 8014f4e:	f7ff fe73 	bl	8014c38 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	if (!success) {
 8014f52:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d0cf      	beq.n	8014efa <_ZN9Registers16AddBaseRegistersEv+0x4e>
	if (target_register->register_info.type != registered_type) {
 8014f5a:	792b      	ldrb	r3, [r5, #4]
 8014f5c:	4298      	cmp	r0, r3
 8014f5e:	d1cc      	bne.n	8014efa <_ZN9Registers16AddBaseRegistersEv+0x4e>
	if (callbacks[target_register->register_info.type] == NULL) {
 8014f60:	3004      	adds	r0, #4
 8014f62:	f854 7020 	ldr.w	r7, [r4, r0, lsl #2]
 8014f66:	2f00      	cmp	r7, #0
 8014f68:	d0c7      	beq.n	8014efa <_ZN9Registers16AddBaseRegistersEv+0x4e>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 8014f6a:	7829      	ldrb	r1, [r5, #0]
 8014f6c:	4814      	ldr	r0, [pc, #80]	@ (8014fc0 <_ZN9Registers16AddBaseRegistersEv+0x114>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8014f6e:	e9d7 3600 	ldrd	r3, r6, [r7]
 8014f72:	1af2      	subs	r2, r6, r3
 8014f74:	1112      	asrs	r2, r2, #4
 8014f76:	b9b1      	cbnz	r1, 8014fa6 <_ZN9Registers16AddBaseRegistersEv+0xfa>
 8014f78:	7869      	ldrb	r1, [r5, #1]
 8014f7a:	b9a1      	cbnz	r1, 8014fa6 <_ZN9Registers16AddBaseRegistersEv+0xfa>
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8014f7c:	816a      	strh	r2, [r5, #10]
 8014f7e:	aa02      	add	r2, sp, #8
		callback.read = read;
 8014f80:	9005      	str	r0, [sp, #20]
		callback.write = NULL;
 8014f82:	e9cd 1103 	strd	r1, r1, [sp, #12]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8014f86:	68b9      	ldr	r1, [r7, #8]
 8014f88:	42b1      	cmp	r1, r6
 8014f8a:	d008      	beq.n	8014f9e <_ZN9Registers16AddBaseRegistersEv+0xf2>
 8014f8c:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8014f8e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8014f92:	3610      	adds	r6, #16
 8014f94:	607e      	str	r6, [r7, #4]
	target_register->mode.callbacks = true;
 8014f96:	2301      	movs	r3, #1
 8014f98:	706b      	strb	r3, [r5, #1]
	target_register->access.read = true;
 8014f9a:	726b      	strb	r3, [r5, #9]
 8014f9c:	e7ad      	b.n	8014efa <_ZN9Registers16AddBaseRegistersEv+0x4e>
	  _M_realloc_insert(end(), __x);
 8014f9e:	4638      	mov	r0, r7
 8014fa0:	f7fd fda4 	bl	8012aec <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	} else {
 8014fa4:	e7f7      	b.n	8014f96 <_ZN9Registers16AddBaseRegistersEv+0xea>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8014fa6:	8969      	ldrh	r1, [r5, #10]
	if (__n >= this->size())
 8014fa8:	4291      	cmp	r1, r2
 8014faa:	d302      	bcc.n	8014fb2 <_ZN9Registers16AddBaseRegistersEv+0x106>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8014fac:	4805      	ldr	r0, [pc, #20]	@ (8014fc4 <_ZN9Registers16AddBaseRegistersEv+0x118>)
 8014fae:	f001 fb68 	bl	8016682 <_ZSt24__throw_out_of_range_fmtPKcz>
	return *(this->_M_impl._M_start + __n);
 8014fb2:	eb03 1301 	add.w	r3, r3, r1, lsl #4
		callback->context = context;
 8014fb6:	2200      	movs	r2, #0
		callback->read = read;
 8014fb8:	60d8      	str	r0, [r3, #12]
		callback->context = context;
 8014fba:	605a      	str	r2, [r3, #4]
 8014fbc:	e7eb      	b.n	8014f96 <_ZN9Registers16AddBaseRegistersEv+0xea>
 8014fbe:	bf00      	nop
 8014fc0:	08014c25 	.word	0x08014c25
 8014fc4:	08016d78 	.word	0x08016d78

08014fc8 <_ZZN7Sensors12AddRegistersEvENUlPvtPPhPtE_4_FUNES0_tS2_S3_>:
void Sensors::AddRegisters(void) {
	// Register to access the general sensor reading status
	registers->AddRegister<uint8_t>(REG_SENSORS_READING_STATUS);
	registers->SetRegisterAsSingle(REG_SENSORS_READING_STATUS);
	registers->AddReadCallback<uint8_t>(REG_SENSORS_READING_STATUS, (void*) this,
			[](void* context, uint16_t register_id, uint8_t** output, uint16_t* length) -> bool {
 8014fc8:	b538      	push	{r3, r4, r5, lr}
 8014fca:	4604      	mov	r4, r0
 8014fcc:	4615      	mov	r5, r2
			Sensors* self = (Sensors*) context;
			osSemaphoreAcquire(self->SensorsSemaphore, osWaitForever);
 8014fce:	f04f 31ff 	mov.w	r1, #4294967295
 8014fd2:	6800      	ldr	r0, [r0, #0]
 8014fd4:	f7f7 f8e0 	bl	800c198 <osSemaphoreAcquire>
			**output = (uint8_t) self->active;
 8014fd8:	682b      	ldr	r3, [r5, #0]
 8014fda:	7922      	ldrb	r2, [r4, #4]
 8014fdc:	701a      	strb	r2, [r3, #0]
			osSemaphoreRelease(self->SensorsSemaphore);
 8014fde:	6820      	ldr	r0, [r4, #0]
 8014fe0:	f7f7 f90e 	bl	800c200 <osSemaphoreRelease>
			return true;
		}
 8014fe4:	2001      	movs	r0, #1
 8014fe6:	bd38      	pop	{r3, r4, r5, pc}

08014fe8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 8014fe8:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8014fea:	491e      	ldr	r1, [pc, #120]	@ (8015064 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 8014fec:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8014fee:	481e      	ldr	r0, [pc, #120]	@ (8015068 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8014ff0:	f001 fb26 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 8014ff4:	bb40      	cbnz	r0, 8015048 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8014ff6:	491d      	ldr	r1, [pc, #116]	@ (801506c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x84>)
 8014ff8:	481b      	ldr	r0, [pc, #108]	@ (8015068 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8014ffa:	f001 fb21 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 8014ffe:	bb28      	cbnz	r0, 801504c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8015000:	4919      	ldr	r1, [pc, #100]	@ (8015068 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8015002:	4608      	mov	r0, r1
 8015004:	f001 fb1c 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 8015008:	bb10      	cbnz	r0, 8015050 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 801500a:	4919      	ldr	r1, [pc, #100]	@ (8015070 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x88>)
 801500c:	4816      	ldr	r0, [pc, #88]	@ (8015068 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 801500e:	f001 fb17 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 8015012:	b9f8      	cbnz	r0, 8015054 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8015014:	4917      	ldr	r1, [pc, #92]	@ (8015074 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x8c>)
 8015016:	4814      	ldr	r0, [pc, #80]	@ (8015068 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8015018:	f001 fb12 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 801501c:	b9e0      	cbnz	r0, 8015058 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 801501e:	4916      	ldr	r1, [pc, #88]	@ (8015078 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x90>)
 8015020:	4811      	ldr	r0, [pc, #68]	@ (8015068 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8015022:	f001 fb0d 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 8015026:	b9c8      	cbnz	r0, 801505c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8015028:	4914      	ldr	r1, [pc, #80]	@ (801507c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x94>)
 801502a:	480f      	ldr	r0, [pc, #60]	@ (8015068 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 801502c:	f001 fb08 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 8015030:	b9b0      	cbnz	r0, 8015060 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 8015032:	4913      	ldr	r1, [pc, #76]	@ (8015080 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x98>)
 8015034:	480c      	ldr	r0, [pc, #48]	@ (8015068 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8015036:	f001 fb03 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 801503a:	2800      	cmp	r0, #0
 801503c:	bf14      	ite	ne
 801503e:	2309      	movne	r3, #9
 8015040:	2300      	moveq	r3, #0
 8015042:	7020      	strb	r0, [r4, #0]
}
 8015044:	4618      	mov	r0, r3
 8015046:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8015048:	2300      	movs	r3, #0
 801504a:	e7fa      	b.n	8015042 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 801504c:	2301      	movs	r3, #1
 801504e:	e7f8      	b.n	8015042 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8015050:	2302      	movs	r3, #2
 8015052:	e7f6      	b.n	8015042 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8015054:	2303      	movs	r3, #3
 8015056:	e7f4      	b.n	8015042 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8015058:	2304      	movs	r3, #4
 801505a:	e7f2      	b.n	8015042 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 801505c:	2306      	movs	r3, #6
 801505e:	e7f0      	b.n	8015042 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8015060:	2308      	movs	r3, #8
 8015062:	e7ee      	b.n	8015042 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
 8015064:	08016f7c 	.word	0x08016f7c
 8015068:	08016f64 	.word	0x08016f64
 801506c:	08016f74 	.word	0x08016f74
 8015070:	08016f5c 	.word	0x08016f5c
 8015074:	08016f84 	.word	0x08016f84
 8015078:	08016f6c 	.word	0x08016f6c
 801507c:	08016f54 	.word	0x08016f54
 8015080:	08016f4c 	.word	0x08016f4c

08015084 <_ZN9Registers9GetTypeIDItEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 8015084:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8015086:	491e      	ldr	r1, [pc, #120]	@ (8015100 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 8015088:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801508a:	481e      	ldr	r0, [pc, #120]	@ (8015104 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 801508c:	f001 fad8 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 8015090:	bb40      	cbnz	r0, 80150e4 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8015092:	491c      	ldr	r1, [pc, #112]	@ (8015104 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 8015094:	4608      	mov	r0, r1
 8015096:	f001 fad3 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 801509a:	bb28      	cbnz	r0, 80150e8 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 801509c:	491a      	ldr	r1, [pc, #104]	@ (8015108 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x84>)
 801509e:	4819      	ldr	r0, [pc, #100]	@ (8015104 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 80150a0:	f001 face 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 80150a4:	bb10      	cbnz	r0, 80150ec <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 80150a6:	4919      	ldr	r1, [pc, #100]	@ (801510c <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x88>)
 80150a8:	4816      	ldr	r0, [pc, #88]	@ (8015104 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 80150aa:	f001 fac9 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 80150ae:	b9f8      	cbnz	r0, 80150f0 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 80150b0:	4917      	ldr	r1, [pc, #92]	@ (8015110 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x8c>)
 80150b2:	4814      	ldr	r0, [pc, #80]	@ (8015104 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 80150b4:	f001 fac4 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 80150b8:	b9e0      	cbnz	r0, 80150f4 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 80150ba:	4916      	ldr	r1, [pc, #88]	@ (8015114 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x90>)
 80150bc:	4811      	ldr	r0, [pc, #68]	@ (8015104 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 80150be:	f001 fabf 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 80150c2:	b9c8      	cbnz	r0, 80150f8 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 80150c4:	4914      	ldr	r1, [pc, #80]	@ (8015118 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x94>)
 80150c6:	480f      	ldr	r0, [pc, #60]	@ (8015104 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 80150c8:	f001 faba 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 80150cc:	b9b0      	cbnz	r0, 80150fc <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 80150ce:	4913      	ldr	r1, [pc, #76]	@ (801511c <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x98>)
 80150d0:	480c      	ldr	r0, [pc, #48]	@ (8015104 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 80150d2:	f001 fab5 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 80150d6:	2800      	cmp	r0, #0
 80150d8:	bf14      	ite	ne
 80150da:	2309      	movne	r3, #9
 80150dc:	2300      	moveq	r3, #0
 80150de:	7020      	strb	r0, [r4, #0]
}
 80150e0:	4618      	mov	r0, r3
 80150e2:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80150e4:	2300      	movs	r3, #0
 80150e6:	e7fa      	b.n	80150de <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 80150e8:	2301      	movs	r3, #1
 80150ea:	e7f8      	b.n	80150de <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 80150ec:	2302      	movs	r3, #2
 80150ee:	e7f6      	b.n	80150de <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 80150f0:	2303      	movs	r3, #3
 80150f2:	e7f4      	b.n	80150de <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 80150f4:	2304      	movs	r3, #4
 80150f6:	e7f2      	b.n	80150de <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 80150f8:	2306      	movs	r3, #6
 80150fa:	e7f0      	b.n	80150de <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 80150fc:	2308      	movs	r3, #8
 80150fe:	e7ee      	b.n	80150de <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
 8015100:	08016f7c 	.word	0x08016f7c
 8015104:	08016f74 	.word	0x08016f74
 8015108:	08016f64 	.word	0x08016f64
 801510c:	08016f5c 	.word	0x08016f5c
 8015110:	08016f84 	.word	0x08016f84
 8015114:	08016f6c 	.word	0x08016f6c
 8015118:	08016f54 	.word	0x08016f54
 801511c:	08016f4c 	.word	0x08016f4c

08015120 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>:
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8015120:	491e      	ldr	r1, [pc, #120]	@ (801519c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 8015122:	b510      	push	{r4, lr}
 8015124:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8015126:	4608      	mov	r0, r1
 8015128:	f001 fa8a 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 801512c:	bb40      	cbnz	r0, 8015180 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 801512e:	491c      	ldr	r1, [pc, #112]	@ (80151a0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x80>)
 8015130:	481a      	ldr	r0, [pc, #104]	@ (801519c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8015132:	f001 fa85 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 8015136:	bb28      	cbnz	r0, 8015184 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8015138:	491a      	ldr	r1, [pc, #104]	@ (80151a4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x84>)
 801513a:	4818      	ldr	r0, [pc, #96]	@ (801519c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 801513c:	f001 fa80 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 8015140:	bb10      	cbnz	r0, 8015188 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8015142:	4919      	ldr	r1, [pc, #100]	@ (80151a8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x88>)
 8015144:	4815      	ldr	r0, [pc, #84]	@ (801519c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8015146:	f001 fa7b 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 801514a:	b9f8      	cbnz	r0, 801518c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 801514c:	4917      	ldr	r1, [pc, #92]	@ (80151ac <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x8c>)
 801514e:	4813      	ldr	r0, [pc, #76]	@ (801519c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8015150:	f001 fa76 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 8015154:	b9e0      	cbnz	r0, 8015190 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8015156:	4916      	ldr	r1, [pc, #88]	@ (80151b0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x90>)
 8015158:	4810      	ldr	r0, [pc, #64]	@ (801519c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 801515a:	f001 fa71 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 801515e:	b9c8      	cbnz	r0, 8015194 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8015160:	4914      	ldr	r1, [pc, #80]	@ (80151b4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x94>)
 8015162:	480e      	ldr	r0, [pc, #56]	@ (801519c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8015164:	f001 fa6c 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 8015168:	b9b0      	cbnz	r0, 8015198 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 801516a:	4913      	ldr	r1, [pc, #76]	@ (80151b8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x98>)
 801516c:	480b      	ldr	r0, [pc, #44]	@ (801519c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 801516e:	f001 fa67 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 8015172:	2800      	cmp	r0, #0
 8015174:	bf14      	ite	ne
 8015176:	2309      	movne	r3, #9
 8015178:	2300      	moveq	r3, #0
 801517a:	7020      	strb	r0, [r4, #0]
}
 801517c:	4618      	mov	r0, r3
 801517e:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8015180:	2300      	movs	r3, #0
 8015182:	e7fa      	b.n	801517a <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8015184:	2301      	movs	r3, #1
 8015186:	e7f8      	b.n	801517a <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8015188:	2302      	movs	r3, #2
 801518a:	e7f6      	b.n	801517a <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 801518c:	2303      	movs	r3, #3
 801518e:	e7f4      	b.n	801517a <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8015190:	2304      	movs	r3, #4
 8015192:	e7f2      	b.n	801517a <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8015194:	2306      	movs	r3, #6
 8015196:	e7f0      	b.n	801517a <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8015198:	2308      	movs	r3, #8
 801519a:	e7ee      	b.n	801517a <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
 801519c:	08016f7c 	.word	0x08016f7c
 80151a0:	08016f74 	.word	0x08016f74
 80151a4:	08016f64 	.word	0x08016f64
 80151a8:	08016f5c 	.word	0x08016f5c
 80151ac:	08016f84 	.word	0x08016f84
 80151b0:	08016f6c 	.word	0x08016f6c
 80151b4:	08016f54 	.word	0x08016f54
 80151b8:	08016f4c 	.word	0x08016f4c

080151bc <_ZN7SensorsC1Ev>:
Sensors::Sensors() {
 80151bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
 80151be:	2300      	movs	r3, #0
 80151c0:	4604      	mov	r4, r0
 80151c2:	f100 0750 	add.w	r7, r0, #80	@ 0x50
 80151c6:	6583      	str	r3, [r0, #88]	@ 0x58
 80151c8:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80151cc:	e9c0 3306 	strd	r3, r3, [r0, #24]
 80151d0:	e9c0 3308 	strd	r3, r3, [r0, #32]
 80151d4:	e9c0 3314 	strd	r3, r3, [r0, #80]	@ 0x50
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80151d8:	2050      	movs	r0, #80	@ 0x50
 80151da:	f001 f99a 	bl	8016512 <_Znwj>
 80151de:	4605      	mov	r5, r0
      ptrdiff_t __count = __last - __first;
 80151e0:	e9d4 6207 	ldrd	r6, r2, [r4, #28]
 80151e4:	1b92      	subs	r2, r2, r6
      if (__count > 0)
 80151e6:	2a00      	cmp	r2, #0
 80151e8:	dd08      	ble.n	80151fc <_ZN7SensorsC1Ev+0x40>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80151ea:	4631      	mov	r1, r6
 80151ec:	f001 fb1e 	bl	801682c <memmove>
			- this->_M_impl._M_start);
 80151f0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80151f2:	4630      	mov	r0, r6
 80151f4:	1b89      	subs	r1, r1, r6
 80151f6:	f001 f967 	bl	80164c8 <_ZdlPvj>
      }
 80151fa:	e001      	b.n	8015200 <_ZN7SensorsC1Ev+0x44>
	if (__p)
 80151fc:	2e00      	cmp	r6, #0
 80151fe:	d1f7      	bne.n	80151f0 <_ZN7SensorsC1Ev+0x34>
	functions[UINT8_TYPE] = NULL;
 8015200:	2300      	movs	r3, #0
}
 8015202:	4620      	mov	r0, r4
	  this->_M_impl._M_finish = __tmp + __old_size;
 8015204:	e9c4 5507 	strd	r5, r5, [r4, #28]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8015208:	3550      	adds	r5, #80	@ 0x50
	functions[UINT16_TYPE] = NULL;
 801520a:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 801520e:	6265      	str	r5, [r4, #36]	@ 0x24
	functions[UINT64_TYPE] = NULL;
 8015210:	e9c4 330c 	strd	r3, r3, [r4, #48]	@ 0x30
	functions[INT16_TYPE] = NULL;
 8015214:	e9c4 330e 	strd	r3, r3, [r4, #56]	@ 0x38
	functions[INT64_TYPE] = NULL;
 8015218:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
	functions[FLOAT_TYPE] = &float_sensor_functions;
 801521c:	e9c4 7312 	strd	r7, r3, [r4, #72]	@ 0x48
}
 8015220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015222 <_ZN7Sensors4InitEP9RegistersP10PublishersP13HardwareDelayP4LEDS>:
void Sensors::Init(Registers* registers_, Publishers* publishers_, HardwareDelay* hardware_delay_, LEDS* leds_) {
 8015222:	b510      	push	{r4, lr}
	publishers = publishers_;
 8015224:	e9c0 1217 	strd	r1, r2, [r0, #92]	@ 0x5c
	hardware_delay = hardware_delay_;
 8015228:	6643      	str	r3, [r0, #100]	@ 0x64
	SensorsSemaphore = osSemaphoreNew(1, 1, NULL);
 801522a:	2101      	movs	r1, #1
	leds = leds_;
 801522c:	9b02      	ldr	r3, [sp, #8]
void Sensors::Init(Registers* registers_, Publishers* publishers_, HardwareDelay* hardware_delay_, LEDS* leds_) {
 801522e:	4604      	mov	r4, r0
	SensorsSemaphore = osSemaphoreNew(1, 1, NULL);
 8015230:	2200      	movs	r2, #0
	leds = leds_;
 8015232:	6683      	str	r3, [r0, #104]	@ 0x68
	SensorsSemaphore = osSemaphoreNew(1, 1, NULL);
 8015234:	4608      	mov	r0, r1
 8015236:	f7f6 ff53 	bl	800c0e0 <osSemaphoreNew>
 801523a:	6020      	str	r0, [r4, #0]
	osSemaphoreRelease(SensorsSemaphore);
 801523c:	f7f6 ffe0 	bl	800c200 <osSemaphoreRelease>
	active = false;
 8015240:	2300      	movs	r3, #0
 8015242:	7123      	strb	r3, [r4, #4]
	delayed_index = 0;
 8015244:	7363      	strb	r3, [r4, #13]
	period_ms = DEFAULT_SENSORS_PERIOD;
 8015246:	230a      	movs	r3, #10
 8015248:	60a3      	str	r3, [r4, #8]
}
 801524a:	bd10      	pop	{r4, pc}

0801524c <_ZN7Sensors16SetReadingStatusEb>:
 * @brief Set the reading status of the class
 *
 * @param input status: reading status. true = read sensors
 * @return whether successful
 */
bool Sensors::SetReadingStatus(bool status) {
 801524c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801524e:	4604      	mov	r4, r0
 8015250:	460d      	mov	r5, r1
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 8015252:	6800      	ldr	r0, [r0, #0]
 8015254:	f04f 31ff 	mov.w	r1, #4294967295
 8015258:	f7f6 ff9e 	bl	800c198 <osSemaphoreAcquire>
	active = status;
 801525c:	7125      	strb	r5, [r4, #4]

	// Reset all read indexes if reading is stopped to restart a new reading from zero
	if (!status) {
 801525e:	b91d      	cbnz	r5, 8015268 <_ZN7Sensors16SetReadingStatusEb+0x1c>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8015260:	e9d4 3004 	ldrd	r3, r0, [r4, #16]
		for (I2CInterface &interface : interfaces) {
 8015264:	4298      	cmp	r0, r3
 8015266:	d104      	bne.n	8015272 <_ZN7Sensors16SetReadingStatusEb+0x26>
				}
			}
		}
	}

	osSemaphoreRelease(SensorsSemaphore);
 8015268:	6820      	ldr	r0, [r4, #0]
 801526a:	f7f6 ffc9 	bl	800c200 <osSemaphoreRelease>
	return true;
}
 801526e:	2001      	movs	r0, #1
 8015270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			interface.read_index = 0;
 8015272:	e9d3 2616 	ldrd	r2, r6, [r3, #88]	@ 0x58
 8015276:	f883 5055 	strb.w	r5, [r3, #85]	@ 0x55
			for (SensorGroup &sensor_group : interface.sensor_groups) {
 801527a:	4296      	cmp	r6, r2
 801527c:	d101      	bne.n	8015282 <_ZN7Sensors16SetReadingStatusEb+0x36>
      operator++() _GLIBCXX_NOEXCEPT
 801527e:	337c      	adds	r3, #124	@ 0x7c
	return *this;
 8015280:	e7f0      	b.n	8015264 <_ZN7Sensors16SetReadingStatusEb+0x18>
				sensor_group.read_index = 0;
 8015282:	e9d2 1703 	ldrd	r1, r7, [r2, #12]
 8015286:	7215      	strb	r5, [r2, #8]
				for (Sensor &sensor : sensor_group.sensors) {
 8015288:	428f      	cmp	r7, r1
 801528a:	d101      	bne.n	8015290 <_ZN7Sensors16SetReadingStatusEb+0x44>
      operator++() _GLIBCXX_NOEXCEPT
 801528c:	3218      	adds	r2, #24
	return *this;
 801528e:	e7f4      	b.n	801527a <_ZN7Sensors16SetReadingStatusEb+0x2e>
					sensor.read_index = 0;
 8015290:	740d      	strb	r5, [r1, #16]
      operator++() _GLIBCXX_NOEXCEPT
 8015292:	3128      	adds	r1, #40	@ 0x28
	return *this;
 8015294:	e7f8      	b.n	8015288 <_ZN7Sensors16SetReadingStatusEb+0x3c>

08015296 <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t>:
			return self->SetReadingStatus((bool) *input);
 8015296:	7811      	ldrb	r1, [r2, #0]
 8015298:	3900      	subs	r1, #0
 801529a:	bf18      	it	ne
 801529c:	2101      	movne	r1, #1
 801529e:	f7ff bfd5 	b.w	801524c <_ZN7Sensors16SetReadingStatusEb>

080152a2 <_ZN7Sensors25DeactivateAllSensorGroupsEv>:
/**
 * @brief Deactivate all sensor groups on all interfaces
 *
 * @return whether successful
 */
bool Sensors::DeactivateAllSensorGroups(void) {
 80152a2:	b538      	push	{r3, r4, r5, lr}
 80152a4:	4604      	mov	r4, r0
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 80152a6:	f04f 31ff 	mov.w	r1, #4294967295
 80152aa:	6800      	ldr	r0, [r0, #0]
 80152ac:	f7f6 ff74 	bl	800c198 <osSemaphoreAcquire>
	for (I2CInterface &interface : interfaces) {
		for (SensorGroup &sensor_group : interface.sensor_groups) {
			sensor_group.active = false;
 80152b0:	2000      	movs	r0, #0
 80152b2:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
	for (I2CInterface &interface : interfaces) {
 80152b6:	4299      	cmp	r1, r3
 80152b8:	d104      	bne.n	80152c4 <_ZN7Sensors25DeactivateAllSensorGroupsEv+0x22>
		}
	}
	osSemaphoreRelease(SensorsSemaphore);
 80152ba:	6820      	ldr	r0, [r4, #0]
 80152bc:	f7f6 ffa0 	bl	800c200 <osSemaphoreRelease>
	return true;
}
 80152c0:	2001      	movs	r0, #1
 80152c2:	bd38      	pop	{r3, r4, r5, pc}
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80152c4:	e9d3 2516 	ldrd	r2, r5, [r3, #88]	@ 0x58
		for (SensorGroup &sensor_group : interface.sensor_groups) {
 80152c8:	4295      	cmp	r5, r2
 80152ca:	d101      	bne.n	80152d0 <_ZN7Sensors25DeactivateAllSensorGroupsEv+0x2e>
      operator++() _GLIBCXX_NOEXCEPT
 80152cc:	337c      	adds	r3, #124	@ 0x7c
	return *this;
 80152ce:	e7f2      	b.n	80152b6 <_ZN7Sensors25DeactivateAllSensorGroupsEv+0x14>
			sensor_group.active = false;
 80152d0:	f802 0b18 	strb.w	r0, [r2], #24
 80152d4:	e7f8      	b.n	80152c8 <_ZN7Sensors25DeactivateAllSensorGroupsEv+0x26>

080152d6 <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE2_4_FUNES0_tS1_t>:
			return self->DeactivateAllSensorGroups();
 80152d6:	f7ff bfe4 	b.w	80152a2 <_ZN7Sensors25DeactivateAllSensorGroupsEv>

080152da <_ZN7Sensors13DetectSensorsEmm>:
 * @brief Force a detection of I2C sensors to update presence flag. Can be useful if a sensor if plugged after creation
 *
 * @param input trials: number of trials used to detect the sensor
 * @param input timeout: maximum time in ms left to detect a sensor
 */
void Sensors::DetectSensors(uint32_t trials, uint32_t timeout) {
 80152da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152de:	4605      	mov	r5, r0
 80152e0:	9101      	str	r1, [sp, #4]
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 80152e2:	6800      	ldr	r0, [r0, #0]
 80152e4:	f04f 31ff 	mov.w	r1, #4294967295
void Sensors::DetectSensors(uint32_t trials, uint32_t timeout) {
 80152e8:	4690      	mov	r8, r2
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 80152ea:	f7f6 ff55 	bl	800c198 <osSemaphoreAcquire>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80152ee:	e9d5 4904 	ldrd	r4, r9, [r5, #16]
	HAL_StatusTypeDef status;
	for (I2CInterface &interface : interfaces) {
 80152f2:	45a1      	cmp	r9, r4
 80152f4:	d105      	bne.n	8015302 <_ZN7Sensors13DetectSensorsEmm+0x28>
					// If not I2C, force presence
					sensor.present = true;
			}
		}
	}
	osSemaphoreRelease(SensorsSemaphore);
 80152f6:	6828      	ldr	r0, [r5, #0]
}
 80152f8:	b003      	add	sp, #12
 80152fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	osSemaphoreRelease(SensorsSemaphore);
 80152fe:	f7f6 bf7f 	b.w	800c200 <osSemaphoreRelease>
 8015302:	e9d4 6a16 	ldrd	r6, sl, [r4, #88]	@ 0x58
		for (SensorGroup &sensor_group : interface.sensor_groups) {
 8015306:	45b2      	cmp	sl, r6
 8015308:	d101      	bne.n	801530e <_ZN7Sensors13DetectSensorsEmm+0x34>
      operator++() _GLIBCXX_NOEXCEPT
 801530a:	347c      	adds	r4, #124	@ 0x7c
	return *this;
 801530c:	e7f1      	b.n	80152f2 <_ZN7Sensors13DetectSensorsEmm+0x18>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801530e:	e9d6 7b03 	ldrd	r7, fp, [r6, #12]
			for (Sensor &sensor : sensor_group.sensors) {
 8015312:	45bb      	cmp	fp, r7
 8015314:	d101      	bne.n	801531a <_ZN7Sensors13DetectSensorsEmm+0x40>
      operator++() _GLIBCXX_NOEXCEPT
 8015316:	3618      	adds	r6, #24
	return *this;
 8015318:	e7f5      	b.n	8015306 <_ZN7Sensors13DetectSensorsEmm+0x2c>
				if (interface.ID != INTERNAL) {
 801531a:	7823      	ldrb	r3, [r4, #0]
 801531c:	2b0a      	cmp	r3, #10
 801531e:	d00b      	beq.n	8015338 <_ZN7Sensors13DetectSensorsEmm+0x5e>
					status = HAL_I2C_IsDeviceReady(interface.interface, sensor.address, trials, timeout);
 8015320:	4643      	mov	r3, r8
 8015322:	9a01      	ldr	r2, [sp, #4]
 8015324:	88f9      	ldrh	r1, [r7, #6]
 8015326:	68e0      	ldr	r0, [r4, #12]
 8015328:	f7f1 fa24 	bl	8006774 <HAL_I2C_IsDeviceReady>
					sensor.present = (status == HAL_OK);
 801532c:	fab0 f080 	clz	r0, r0
 8015330:	0940      	lsrs	r0, r0, #5
 8015332:	70b8      	strb	r0, [r7, #2]
      operator++() _GLIBCXX_NOEXCEPT
 8015334:	3728      	adds	r7, #40	@ 0x28
	return *this;
 8015336:	e7ec      	b.n	8015312 <_ZN7Sensors13DetectSensorsEmm+0x38>
 8015338:	2001      	movs	r0, #1
 801533a:	e7fa      	b.n	8015332 <_ZN7Sensors13DetectSensorsEmm+0x58>

0801533c <_ZZN7Sensors12AddRegistersEvENUlPvtPmtE8_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 801533c:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint32_t* input, uint16_t length) -> bool {
 801533e:	b508      	push	{r3, lr}
			if (length != 2) return false;
 8015340:	d105      	bne.n	801534e <_ZZN7Sensors12AddRegistersEvENUlPvtPmtE8_4_FUNES0_tS1_t+0x12>
			self->DetectSensors(input[0], input[1]);
 8015342:	e9d2 1200 	ldrd	r1, r2, [r2]
 8015346:	f7ff ffc8 	bl	80152da <_ZN7Sensors13DetectSensorsEmm>
 801534a:	2001      	movs	r0, #1
		}
 801534c:	bd08      	pop	{r3, pc}
			if (length != 2) return false;
 801534e:	2000      	movs	r0, #0
 8015350:	e7fc      	b.n	801534c <_ZZN7Sensors12AddRegistersEvENUlPvtPmtE8_4_FUNES0_tS1_t+0x10>

08015352 <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb>:
 * @param input group_ID: the group ID to find
 * @param output interface_: interface linked to the sensor group
 * @param output success: whether successful
 * @return the sensor group pointer
 */
SensorGroup* Sensors::FindSensorGroupPath(uint8_t group_ID, I2CInterface** interface_, bool* success) {
 8015352:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015354:	e9d0 4604 	ldrd	r4, r6, [r0, #16]
	for (I2CInterface &interface : interfaces) {
 8015358:	42a6      	cmp	r6, r4
 801535a:	d102      	bne.n	8015362 <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb+0x10>
 801535c:	2200      	movs	r2, #0
				return sensor_group_pointer;
			}
		}
	}
	*success = false;
	return NULL;
 801535e:	4610      	mov	r0, r2
 8015360:	e00f      	b.n	8015382 <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb+0x30>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8015362:	e9d4 5716 	ldrd	r5, r7, [r4, #88]	@ 0x58
		for (SensorGroup &sensor_group : interface.sensor_groups) {
 8015366:	42bd      	cmp	r5, r7
 8015368:	4628      	mov	r0, r5
 801536a:	d101      	bne.n	8015370 <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb+0x1e>
      operator++() _GLIBCXX_NOEXCEPT
 801536c:	347c      	adds	r4, #124	@ 0x7c
	return *this;
 801536e:	e7f3      	b.n	8015358 <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb+0x6>
			if (sensor_group.ID == group_ID) {
 8015370:	f890 c002 	ldrb.w	ip, [r0, #2]
 8015374:	f100 0518 	add.w	r5, r0, #24
 8015378:	458c      	cmp	ip, r1
 801537a:	d1f4      	bne.n	8015366 <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb+0x14>
				if (interface_ != NULL) *interface_ = &interface;
 801537c:	b102      	cbz	r2, 8015380 <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb+0x2e>
 801537e:	6014      	str	r4, [r2, #0]
SensorGroup* Sensors::FindSensorGroupPath(uint8_t group_ID, I2CInterface** interface_, bool* success) {
 8015380:	2201      	movs	r2, #1
				*success = true;
 8015382:	701a      	strb	r2, [r3, #0]
}
 8015384:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015386 <_ZN7Sensors15FindSensorGroupEhPb>:
SensorGroup* Sensors::FindSensorGroup(uint8_t group_ID, bool* success) {
 8015386:	4613      	mov	r3, r2
	return FindSensorGroupPath(group_ID, NULL, success);
 8015388:	2200      	movs	r2, #0
 801538a:	f7ff bfe2 	b.w	8015352 <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb>

0801538e <_ZN7Sensors23SetSensorGroupPrescalerEht>:
bool Sensors::SetSensorGroupPrescaler(uint8_t group_ID, uint16_t prescaler) {
 801538e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015390:	4616      	mov	r6, r2
	SensorGroup* sensor_group = FindSensorGroup(group_ID, &success);
 8015392:	f10d 0207 	add.w	r2, sp, #7
bool Sensors::SetSensorGroupPrescaler(uint8_t group_ID, uint16_t prescaler) {
 8015396:	4604      	mov	r4, r0
	SensorGroup* sensor_group = FindSensorGroup(group_ID, &success);
 8015398:	f7ff fff5 	bl	8015386 <_ZN7Sensors15FindSensorGroupEhPb>
	if (!success) return false;
 801539c:	f89d 7007 	ldrb.w	r7, [sp, #7]
	SensorGroup* sensor_group = FindSensorGroup(group_ID, &success);
 80153a0:	4605      	mov	r5, r0
	if (!success) return false;
 80153a2:	b147      	cbz	r7, 80153b6 <_ZN7Sensors23SetSensorGroupPrescalerEht+0x28>
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 80153a4:	f04f 31ff 	mov.w	r1, #4294967295
 80153a8:	6820      	ldr	r0, [r4, #0]
 80153aa:	f7f6 fef5 	bl	800c198 <osSemaphoreAcquire>
	osSemaphoreRelease(SensorsSemaphore);
 80153ae:	6820      	ldr	r0, [r4, #0]
	sensor_group->prescaler = prescaler;
 80153b0:	80ae      	strh	r6, [r5, #4]
	osSemaphoreRelease(SensorsSemaphore);
 80153b2:	f7f6 ff25 	bl	800c200 <osSemaphoreRelease>
}
 80153b6:	4638      	mov	r0, r7
 80153b8:	b003      	add	sp, #12
 80153ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080153bc <_ZZN7Sensors12AddRegistersEvENUlPvtPttE7_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 80153bc:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint16_t* input, uint16_t length) -> bool {
 80153be:	4611      	mov	r1, r2
			if (length != 2) return false;
 80153c0:	d103      	bne.n	80153ca <_ZZN7Sensors12AddRegistersEvENUlPvtPttE7_4_FUNES0_tS1_t+0xe>
			return self->SetSensorGroupPrescaler((uint8_t) input[0], input[1]);
 80153c2:	8852      	ldrh	r2, [r2, #2]
 80153c4:	7809      	ldrb	r1, [r1, #0]
 80153c6:	f7ff bfe2 	b.w	801538e <_ZN7Sensors23SetSensorGroupPrescalerEht>
		}
 80153ca:	2000      	movs	r0, #0
 80153cc:	4770      	bx	lr

080153ce <_ZN7Sensors20SetSensorGroupStatusEhb>:
bool Sensors::SetSensorGroupStatus(uint8_t group_ID, bool status) {
 80153ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80153d0:	4614      	mov	r4, r2
	SensorGroup* sensor_group = FindSensorGroup(group_ID, &success);
 80153d2:	f10d 0207 	add.w	r2, sp, #7
bool Sensors::SetSensorGroupStatus(uint8_t group_ID, bool status) {
 80153d6:	4606      	mov	r6, r0
	SensorGroup* sensor_group = FindSensorGroup(group_ID, &success);
 80153d8:	f7ff ffd5 	bl	8015386 <_ZN7Sensors15FindSensorGroupEhPb>
	if (!success) return false;
 80153dc:	f89d 7007 	ldrb.w	r7, [sp, #7]
	SensorGroup* sensor_group = FindSensorGroup(group_ID, &success);
 80153e0:	4605      	mov	r5, r0
	if (!success) return false;
 80153e2:	b14f      	cbz	r7, 80153f8 <_ZN7Sensors20SetSensorGroupStatusEhb+0x2a>
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 80153e4:	f04f 31ff 	mov.w	r1, #4294967295
 80153e8:	6830      	ldr	r0, [r6, #0]
 80153ea:	f7f6 fed5 	bl	800c198 <osSemaphoreAcquire>
	sensor_group->active = status;
 80153ee:	702c      	strb	r4, [r5, #0]
	if (!status) {
 80153f0:	b12c      	cbz	r4, 80153fe <_ZN7Sensors20SetSensorGroupStatusEhb+0x30>
	osSemaphoreRelease(SensorsSemaphore);
 80153f2:	6830      	ldr	r0, [r6, #0]
 80153f4:	f7f6 ff04 	bl	800c200 <osSemaphoreRelease>
}
 80153f8:	4638      	mov	r0, r7
 80153fa:	b003      	add	sp, #12
 80153fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sensor_group->read_index = 0;
 80153fe:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 8015402:	722c      	strb	r4, [r5, #8]
		for (Sensor &sensor : sensor_group->sensors) {
 8015404:	429a      	cmp	r2, r3
 8015406:	d0f4      	beq.n	80153f2 <_ZN7Sensors20SetSensorGroupStatusEhb+0x24>
			sensor.read_index = 0;
 8015408:	741c      	strb	r4, [r3, #16]
      operator++() _GLIBCXX_NOEXCEPT
 801540a:	3328      	adds	r3, #40	@ 0x28
	return *this;
 801540c:	e7fa      	b.n	8015404 <_ZN7Sensors20SetSensorGroupStatusEhb+0x36>

0801540e <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE1_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 801540e:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8015410:	4611      	mov	r1, r2
			if (length != 2) return false;
 8015412:	d106      	bne.n	8015422 <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE1_4_FUNES0_tS1_t+0x14>
			return self->SetSensorGroupStatus(input[0], (bool) input[1]);
 8015414:	7852      	ldrb	r2, [r2, #1]
 8015416:	7809      	ldrb	r1, [r1, #0]
 8015418:	3a00      	subs	r2, #0
 801541a:	bf18      	it	ne
 801541c:	2201      	movne	r2, #1
 801541e:	f7ff bfd6 	b.w	80153ce <_ZN7Sensors20SetSensorGroupStatusEhb>
		}
 8015422:	2000      	movs	r0, #0
 8015424:	4770      	bx	lr

08015426 <_ZN7Sensors20DeactivateAllSensorsEh>:
bool Sensors::DeactivateAllSensors(uint8_t group_ID) {
 8015426:	b573      	push	{r0, r1, r4, r5, r6, lr}
	SensorGroup* sensor_group = FindSensorGroupPath(group_ID, &interface, &success);
 8015428:	f10d 0303 	add.w	r3, sp, #3
 801542c:	aa01      	add	r2, sp, #4
bool Sensors::DeactivateAllSensors(uint8_t group_ID) {
 801542e:	4604      	mov	r4, r0
	SensorGroup* sensor_group = FindSensorGroupPath(group_ID, &interface, &success);
 8015430:	f7ff ff8f 	bl	8015352 <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb>
	if (!success) return false;
 8015434:	f89d 6003 	ldrb.w	r6, [sp, #3]
	SensorGroup* sensor_group = FindSensorGroupPath(group_ID, &interface, &success);
 8015438:	4605      	mov	r5, r0
	if (!success) return false;
 801543a:	b166      	cbz	r6, 8015456 <_ZN7Sensors20DeactivateAllSensorsEh+0x30>
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801543c:	f04f 31ff 	mov.w	r1, #4294967295
 8015440:	6820      	ldr	r0, [r4, #0]
 8015442:	f7f6 fea9 	bl	800c198 <osSemaphoreAcquire>
		sensor.active = false;
 8015446:	2100      	movs	r1, #0
 8015448:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
	for (Sensor &sensor : sensor_group->sensors) {
 801544c:	429a      	cmp	r2, r3
 801544e:	d105      	bne.n	801545c <_ZN7Sensors20DeactivateAllSensorsEh+0x36>
	osSemaphoreRelease(SensorsSemaphore);
 8015450:	6820      	ldr	r0, [r4, #0]
 8015452:	f7f6 fed5 	bl	800c200 <osSemaphoreRelease>
}
 8015456:	4630      	mov	r0, r6
 8015458:	b002      	add	sp, #8
 801545a:	bd70      	pop	{r4, r5, r6, pc}
		sensor.active = false;
 801545c:	f803 1b28 	strb.w	r1, [r3], #40
 8015460:	e7f4      	b.n	801544c <_ZN7Sensors20DeactivateAllSensorsEh+0x26>

08015462 <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE4_4_FUNES0_tS1_t>:
			return self->DeactivateAllSensors(*input);
 8015462:	7811      	ldrb	r1, [r2, #0]
 8015464:	f7ff bfdf 	b.w	8015426 <_ZN7Sensors20DeactivateAllSensorsEh>

08015468 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb>:
 * @param output interface_: interface linked to the sensor
 * @param output sensor_group_: the sensor group linked to the sensor
 * @param output success: whether successful
 * @return the sensor pointer
 */
Sensor* Sensors::FindSensorPath(uint8_t sensor_ID, I2CInterface** interface_, SensorGroup** sensor_group_, bool* success) {
 8015468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801546c:	e9d0 4704 	ldrd	r4, r7, [r0, #16]
	for (I2CInterface &interface : interfaces) {
 8015470:	42a7      	cmp	r7, r4
 8015472:	d102      	bne.n	801547a <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x12>
 8015474:	2300      	movs	r3, #0
				}
			}
		}
	}
	*success = false;
	return NULL;
 8015476:	4618      	mov	r0, r3
 8015478:	e017      	b.n	80154aa <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x42>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801547a:	e9d4 5c16 	ldrd	r5, ip, [r4, #88]	@ 0x58
		for (SensorGroup &sensor_group : interface.sensor_groups) {
 801547e:	4565      	cmp	r5, ip
 8015480:	d101      	bne.n	8015486 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x1e>
      operator++() _GLIBCXX_NOEXCEPT
 8015482:	347c      	adds	r4, #124	@ 0x7c
	return *this;
 8015484:	e7f4      	b.n	8015470 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x8>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8015486:	e9d5 6e03 	ldrd	r6, lr, [r5, #12]
			for (Sensor &sensor : sensor_group.sensors) {
 801548a:	45b6      	cmp	lr, r6
 801548c:	4630      	mov	r0, r6
 801548e:	d101      	bne.n	8015494 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x2c>
      operator++() _GLIBCXX_NOEXCEPT
 8015490:	3518      	adds	r5, #24
	return *this;
 8015492:	e7f4      	b.n	801547e <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x16>
				if (sensor.ID == sensor_ID) {
 8015494:	f890 8004 	ldrb.w	r8, [r0, #4]
 8015498:	f100 0628 	add.w	r6, r0, #40	@ 0x28
 801549c:	4588      	cmp	r8, r1
 801549e:	d1f4      	bne.n	801548a <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x22>
					if (interface_ != NULL) *interface_ = &interface;
 80154a0:	b102      	cbz	r2, 80154a4 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x3c>
 80154a2:	6014      	str	r4, [r2, #0]
					if (sensor_group_ != NULL) *sensor_group_ = &sensor_group;
 80154a4:	b103      	cbz	r3, 80154a8 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x40>
 80154a6:	601d      	str	r5, [r3, #0]
Sensor* Sensors::FindSensorPath(uint8_t sensor_ID, I2CInterface** interface_, SensorGroup** sensor_group_, bool* success) {
 80154a8:	2301      	movs	r3, #1
					*success = true;
 80154aa:	9a06      	ldr	r2, [sp, #24]
 80154ac:	7013      	strb	r3, [r2, #0]
}
 80154ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080154b2 <_ZN7Sensors10FindSensorEhPb>:
	return FindSensorPath(sensor_ID, NULL, NULL, success);
 80154b2:	2300      	movs	r3, #0
Sensor* Sensors::FindSensor(uint8_t sensor_ID, bool* success) {
 80154b4:	b507      	push	{r0, r1, r2, lr}
	return FindSensorPath(sensor_ID, NULL, NULL, success);
 80154b6:	9200      	str	r2, [sp, #0]
 80154b8:	461a      	mov	r2, r3
 80154ba:	f7ff ffd5 	bl	8015468 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb>
}
 80154be:	b003      	add	sp, #12
 80154c0:	f85d fb04 	ldr.w	pc, [sp], #4

080154c4 <_ZN7Sensors15SetSensorStatusEhb>:
bool Sensors::SetSensorStatus(uint8_t sensor_ID, bool status) {
 80154c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80154c6:	4616      	mov	r6, r2
	Sensor* sensor = FindSensor(sensor_ID, &success);
 80154c8:	f10d 0207 	add.w	r2, sp, #7
bool Sensors::SetSensorStatus(uint8_t sensor_ID, bool status) {
 80154cc:	4604      	mov	r4, r0
	Sensor* sensor = FindSensor(sensor_ID, &success);
 80154ce:	f7ff fff0 	bl	80154b2 <_ZN7Sensors10FindSensorEhPb>
	if (!success) return false;
 80154d2:	f89d 7007 	ldrb.w	r7, [sp, #7]
	Sensor* sensor = FindSensor(sensor_ID, &success);
 80154d6:	4605      	mov	r5, r0
	if (!success) return false;
 80154d8:	b147      	cbz	r7, 80154ec <_ZN7Sensors15SetSensorStatusEhb+0x28>
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 80154da:	f04f 31ff 	mov.w	r1, #4294967295
 80154de:	6820      	ldr	r0, [r4, #0]
 80154e0:	f7f6 fe5a 	bl	800c198 <osSemaphoreAcquire>
	osSemaphoreRelease(SensorsSemaphore);
 80154e4:	6820      	ldr	r0, [r4, #0]
	sensor->active = status;
 80154e6:	702e      	strb	r6, [r5, #0]
	osSemaphoreRelease(SensorsSemaphore);
 80154e8:	f7f6 fe8a 	bl	800c200 <osSemaphoreRelease>
}
 80154ec:	4638      	mov	r0, r7
 80154ee:	b003      	add	sp, #12
 80154f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080154f2 <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 80154f2:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 80154f4:	4611      	mov	r1, r2
			if (length != 2) return false;
 80154f6:	d106      	bne.n	8015506 <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x14>
			return self->SetSensorStatus(input[0], (bool) input[1]);
 80154f8:	7852      	ldrb	r2, [r2, #1]
 80154fa:	7809      	ldrb	r1, [r1, #0]
 80154fc:	3a00      	subs	r2, #0
 80154fe:	bf18      	it	ne
 8015500:	2201      	movne	r2, #1
 8015502:	f7ff bfdf 	b.w	80154c4 <_ZN7Sensors15SetSensorStatusEhb>
		}
 8015506:	2000      	movs	r0, #0
 8015508:	4770      	bx	lr

0801550a <_ZN7Sensors23DeactivateAllSensorDataEh>:
bool Sensors::DeactivateAllSensorData(uint8_t sensor_ID) {
 801550a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	Sensor* sensor = FindSensor(sensor_ID, &success);
 801550c:	f10d 0207 	add.w	r2, sp, #7
bool Sensors::DeactivateAllSensorData(uint8_t sensor_ID) {
 8015510:	4604      	mov	r4, r0
	Sensor* sensor = FindSensor(sensor_ID, &success);
 8015512:	f7ff ffce 	bl	80154b2 <_ZN7Sensors10FindSensorEhPb>
	if (!success) return false;
 8015516:	f89d 6007 	ldrb.w	r6, [sp, #7]
	Sensor* sensor = FindSensor(sensor_ID, &success);
 801551a:	4605      	mov	r5, r0
	if (!success) return false;
 801551c:	b166      	cbz	r6, 8015538 <_ZN7Sensors23DeactivateAllSensorDataEh+0x2e>
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801551e:	f04f 31ff 	mov.w	r1, #4294967295
 8015522:	6820      	ldr	r0, [r4, #0]
 8015524:	f7f6 fe38 	bl	800c198 <osSemaphoreAcquire>
		data.active = false;
 8015528:	2100      	movs	r1, #0
 801552a:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
	for (SensorData &data : sensor->data) {
 801552e:	429a      	cmp	r2, r3
 8015530:	d105      	bne.n	801553e <_ZN7Sensors23DeactivateAllSensorDataEh+0x34>
	osSemaphoreRelease(SensorsSemaphore);
 8015532:	6820      	ldr	r0, [r4, #0]
 8015534:	f7f6 fe64 	bl	800c200 <osSemaphoreRelease>
}
 8015538:	4630      	mov	r0, r6
 801553a:	b002      	add	sp, #8
 801553c:	bd70      	pop	{r4, r5, r6, pc}
		data.active = false;
 801553e:	f803 1b18 	strb.w	r1, [r3], #24
 8015542:	e7f4      	b.n	801552e <_ZN7Sensors23DeactivateAllSensorDataEh+0x24>

08015544 <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE6_4_FUNES0_tS1_t>:
			return self->DeactivateAllSensorData(*input);
 8015544:	7811      	ldrb	r1, [r2, #0]
 8015546:	f7ff bfe0 	b.w	801550a <_ZN7Sensors23DeactivateAllSensorDataEh>

0801554a <_ZN7Sensors14FindSensorDataEhtPb>:
SensorData* Sensors::FindSensorData(uint8_t sensor_ID, uint16_t sensor_register, bool* success) {
 801554a:	b538      	push	{r3, r4, r5, lr}
 801554c:	461c      	mov	r4, r3
 801554e:	4615      	mov	r5, r2
	Sensor* sensor = FindSensor(sensor_ID, success);
 8015550:	461a      	mov	r2, r3
 8015552:	f7ff ffae 	bl	80154b2 <_ZN7Sensors10FindSensorEhPb>
	if (not *success) return NULL;
 8015556:	7823      	ldrb	r3, [r4, #0]
 8015558:	b133      	cbz	r3, 8015568 <_ZN7Sensors14FindSensorDataEhtPb+0x1e>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801555a:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
	for (SensorData &data : sensor->data) {
 801555e:	429a      	cmp	r2, r3
 8015560:	4618      	mov	r0, r3
 8015562:	d103      	bne.n	801556c <_ZN7Sensors14FindSensorDataEhtPb+0x22>
	*success = false;
 8015564:	2300      	movs	r3, #0
 8015566:	7023      	strb	r3, [r4, #0]
	if (not *success) return NULL;
 8015568:	2000      	movs	r0, #0
 801556a:	e003      	b.n	8015574 <_ZN7Sensors14FindSensorDataEhtPb+0x2a>
		if (data.register_address == sensor_register) {
 801556c:	8899      	ldrh	r1, [r3, #4]
 801556e:	3318      	adds	r3, #24
 8015570:	42a9      	cmp	r1, r5
 8015572:	d1f4      	bne.n	801555e <_ZN7Sensors14FindSensorDataEhtPb+0x14>
}
 8015574:	bd38      	pop	{r3, r4, r5, pc}

08015576 <_ZN7Sensors19SetSensorDataStatusEhtb>:
bool Sensors::SetSensorDataStatus(uint8_t sensor_ID, uint16_t sensor_register, bool status) {
 8015576:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015578:	461e      	mov	r6, r3
	SensorData* sensor_data = FindSensorData(sensor_ID, sensor_register, &success);
 801557a:	f10d 0307 	add.w	r3, sp, #7
bool Sensors::SetSensorDataStatus(uint8_t sensor_ID, uint16_t sensor_register, bool status) {
 801557e:	4604      	mov	r4, r0
	SensorData* sensor_data = FindSensorData(sensor_ID, sensor_register, &success);
 8015580:	f7ff ffe3 	bl	801554a <_ZN7Sensors14FindSensorDataEhtPb>
	if (!success) return false;
 8015584:	f89d 7007 	ldrb.w	r7, [sp, #7]
	SensorData* sensor_data = FindSensorData(sensor_ID, sensor_register, &success);
 8015588:	4605      	mov	r5, r0
	if (!success) return false;
 801558a:	b147      	cbz	r7, 801559e <_ZN7Sensors19SetSensorDataStatusEhtb+0x28>
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801558c:	f04f 31ff 	mov.w	r1, #4294967295
 8015590:	6820      	ldr	r0, [r4, #0]
 8015592:	f7f6 fe01 	bl	800c198 <osSemaphoreAcquire>
	osSemaphoreRelease(SensorsSemaphore);
 8015596:	6820      	ldr	r0, [r4, #0]
	sensor_data->active = status;
 8015598:	702e      	strb	r6, [r5, #0]
	osSemaphoreRelease(SensorsSemaphore);
 801559a:	f7f6 fe31 	bl	800c200 <osSemaphoreRelease>
}
 801559e:	4638      	mov	r0, r7
 80155a0:	b003      	add	sp, #12
 80155a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080155a4 <_ZZN7Sensors12AddRegistersEvENUlPvtPttE5_4_FUNES0_tS1_t>:
			if (length != 3) return false;
 80155a4:	2b03      	cmp	r3, #3
		[](void* context, uint16_t register_id, uint16_t* input, uint16_t length) -> bool {
 80155a6:	4611      	mov	r1, r2
			if (length != 3) return false;
 80155a8:	d107      	bne.n	80155ba <_ZZN7Sensors12AddRegistersEvENUlPvtPttE5_4_FUNES0_tS1_t+0x16>
			return self->SetSensorDataStatus((uint8_t) input[0], input[1], (bool) input[2]);
 80155aa:	8893      	ldrh	r3, [r2, #4]
 80155ac:	7809      	ldrb	r1, [r1, #0]
 80155ae:	3b00      	subs	r3, #0
 80155b0:	8852      	ldrh	r2, [r2, #2]
 80155b2:	bf18      	it	ne
 80155b4:	2301      	movne	r3, #1
 80155b6:	f7ff bfde 	b.w	8015576 <_ZN7Sensors19SetSensorDataStatusEhtb>
		}
 80155ba:	2000      	movs	r0, #0
 80155bc:	4770      	bx	lr

080155be <_ZN9Registers11AddRegisterItEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 80155be:	b570      	push	{r4, r5, r6, lr}
 80155c0:	4604      	mov	r4, r0
 80155c2:	b086      	sub	sp, #24
 80155c4:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80155c6:	6800      	ldr	r0, [r0, #0]
 80155c8:	f04f 31ff 	mov.w	r1, #4294967295
 80155cc:	f7f6 fde4 	bl	800c198 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 80155d0:	f10d 0207 	add.w	r2, sp, #7
 80155d4:	4631      	mov	r1, r6
 80155d6:	4620      	mov	r0, r4
 80155d8:	f7ff fbbf 	bl	8014d5a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 80155dc:	f89d 5007 	ldrb.w	r5, [sp, #7]
 80155e0:	b125      	cbz	r5, 80155ec <_ZN9Registers11AddRegisterItEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 80155e2:	6820      	ldr	r0, [r4, #0]
 80155e4:	f7f6 fe0c 	bl	800c200 <osSemaphoreRelease>
}
 80155e8:	b006      	add	sp, #24
 80155ea:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 80155ec:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 80155f0:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 80155f4:	f7ff fd46 	bl	8015084 <_ZN9Registers9GetTypeIDItEEhPb.isra.0>
	configuration_.register_info = register_;
 80155f8:	2301      	movs	r3, #1
 80155fa:	f8ad 600a 	strh.w	r6, [sp, #10]
 80155fe:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 8015602:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 8015606:	f88d 000c 	strb.w	r0, [sp, #12]
 801560a:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 801560e:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 8015612:	2b00      	cmp	r3, #0
 8015614:	d0e5      	beq.n	80155e2 <_ZN9Registers11AddRegisterItEEbt.isra.0+0x24>
		registers.push_back(configuration_);
 8015616:	a902      	add	r1, sp, #8
 8015618:	1d20      	adds	r0, r4, #4
 801561a:	f7fd f96e 	bl	80128fa <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 801561e:	e7e0      	b.n	80155e2 <_ZN9Registers11AddRegisterItEEbt.isra.0+0x24>

08015620 <_ZN9Registers11AddRegisterIhEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 8015620:	b570      	push	{r4, r5, r6, lr}
 8015622:	4604      	mov	r4, r0
 8015624:	b086      	sub	sp, #24
 8015626:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8015628:	6800      	ldr	r0, [r0, #0]
 801562a:	f04f 31ff 	mov.w	r1, #4294967295
 801562e:	f7f6 fdb3 	bl	800c198 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 8015632:	f10d 0207 	add.w	r2, sp, #7
 8015636:	4631      	mov	r1, r6
 8015638:	4620      	mov	r0, r4
 801563a:	f7ff fb8e 	bl	8014d5a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 801563e:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8015642:	b125      	cbz	r5, 801564e <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 8015644:	6820      	ldr	r0, [r4, #0]
 8015646:	f7f6 fddb 	bl	800c200 <osSemaphoreRelease>
}
 801564a:	b006      	add	sp, #24
 801564c:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 801564e:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 8015652:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8015656:	f7ff fd63 	bl	8015120 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	configuration_.register_info = register_;
 801565a:	2301      	movs	r3, #1
 801565c:	f8ad 600a 	strh.w	r6, [sp, #10]
 8015660:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 8015664:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 8015668:	f88d 000c 	strb.w	r0, [sp, #12]
 801566c:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 8015670:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 8015674:	2b00      	cmp	r3, #0
 8015676:	d0e5      	beq.n	8015644 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
		registers.push_back(configuration_);
 8015678:	a902      	add	r1, sp, #8
 801567a:	1d20      	adds	r0, r4, #4
 801567c:	f7fd f93d 	bl	80128fa <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 8015680:	e7e0      	b.n	8015644 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>

08015682 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8015682:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015684:	460c      	mov	r4, r1
 8015686:	b087      	sub	sp, #28
 8015688:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801568a:	f04f 31ff 	mov.w	r1, #4294967295
 801568e:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8015690:	461e      	mov	r6, r3
 8015692:	4617      	mov	r7, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8015694:	f7f6 fd80 	bl	800c198 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8015698:	4621      	mov	r1, r4
 801569a:	f10d 0207 	add.w	r2, sp, #7
 801569e:	4628      	mov	r0, r5
 80156a0:	f7ff fb5b 	bl	8014d5a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80156a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80156a8:	4604      	mov	r4, r0
	if (!success) {
 80156aa:	b923      	cbnz	r3, 80156b6 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x34>
	osSemaphoreRelease(RegistersSemaphore);
 80156ac:	6828      	ldr	r0, [r5, #0]
 80156ae:	f7f6 fda7 	bl	800c200 <osSemaphoreRelease>
}
 80156b2:	b007      	add	sp, #28
 80156b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 80156b6:	f10d 0007 	add.w	r0, sp, #7
 80156ba:	f7ff fd31 	bl	8015120 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 80156be:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	d0f2      	beq.n	80156ac <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (target_register->register_info.type != registered_type) {
 80156c6:	7923      	ldrb	r3, [r4, #4]
 80156c8:	4298      	cmp	r0, r3
 80156ca:	d1ef      	bne.n	80156ac <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (callbacks[target_register->register_info.type] == NULL) {
 80156cc:	3004      	adds	r0, #4
 80156ce:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 80156d2:	2800      	cmp	r0, #0
 80156d4:	d0ea      	beq.n	80156ac <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 80156d6:	7823      	ldrb	r3, [r4, #0]
 80156d8:	b983      	cbnz	r3, 80156fc <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
 80156da:	7863      	ldrb	r3, [r4, #1]
 80156dc:	b973      	cbnz	r3, 80156fc <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
		callback.read = NULL;
 80156de:	9305      	str	r3, [sp, #20]
		target_callback_list->push_back(callback);
 80156e0:	a902      	add	r1, sp, #8
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80156e2:	e9d0 2300 	ldrd	r2, r3, [r0]
		callback.write = write;
 80156e6:	e9cd 7603 	strd	r7, r6, [sp, #12]
 80156ea:	1a9b      	subs	r3, r3, r2
 80156ec:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 80156ee:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 80156f0:	f7f9 fb5c 	bl	800edac <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_>
	target_register->mode.callbacks = true;
 80156f4:	2301      	movs	r3, #1
 80156f6:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 80156f8:	7223      	strb	r3, [r4, #8]
 80156fa:	e7d7      	b.n	80156ac <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 80156fc:	8961      	ldrh	r1, [r4, #10]
 80156fe:	f7f9 f9bb 	bl	800ea78 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
		callback->write = write;
 8015702:	e9c0 7601 	strd	r7, r6, [r0, #4]
 8015706:	e7f5      	b.n	80156f4 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x72>

08015708 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8015708:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801570c:	460c      	mov	r4, r1
 801570e:	b087      	sub	sp, #28
 8015710:	4606      	mov	r6, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8015712:	f04f 31ff 	mov.w	r1, #4294967295
 8015716:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8015718:	4698      	mov	r8, r3
 801571a:	4691      	mov	r9, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801571c:	f7f6 fd3c 	bl	800c198 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8015720:	4621      	mov	r1, r4
 8015722:	f10d 0207 	add.w	r2, sp, #7
 8015726:	4630      	mov	r0, r6
 8015728:	f7ff fb17 	bl	8014d5a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801572c:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8015730:	4604      	mov	r4, r0
	if (!success) {
 8015732:	b92b      	cbnz	r3, 8015740 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x38>
	osSemaphoreRelease(RegistersSemaphore);
 8015734:	6830      	ldr	r0, [r6, #0]
 8015736:	f7f6 fd63 	bl	800c200 <osSemaphoreRelease>
}
 801573a:	b007      	add	sp, #28
 801573c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8015740:	f10d 0007 	add.w	r0, sp, #7
 8015744:	f7ff fc9e 	bl	8015084 <_ZN9Registers9GetTypeIDItEEhPb.isra.0>
	if (!success) {
 8015748:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801574c:	2b00      	cmp	r3, #0
 801574e:	d0f1      	beq.n	8015734 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (target_register->register_info.type != registered_type) {
 8015750:	7923      	ldrb	r3, [r4, #4]
 8015752:	4298      	cmp	r0, r3
 8015754:	d1ee      	bne.n	8015734 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (callbacks[target_register->register_info.type] == NULL) {
 8015756:	3004      	adds	r0, #4
 8015758:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
 801575c:	2f00      	cmp	r7, #0
 801575e:	d0e9      	beq.n	8015734 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 8015760:	7821      	ldrb	r1, [r4, #0]
 8015762:	e9d7 3500 	ldrd	r3, r5, [r7]
 8015766:	1aea      	subs	r2, r5, r3
 8015768:	1112      	asrs	r2, r2, #4
 801576a:	b9b1      	cbnz	r1, 801579a <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x92>
 801576c:	7861      	ldrb	r1, [r4, #1]
 801576e:	b9a1      	cbnz	r1, 801579a <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x92>
		callback.read = NULL;
 8015770:	9105      	str	r1, [sp, #20]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8015772:	68b9      	ldr	r1, [r7, #8]
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8015774:	8162      	strh	r2, [r4, #10]
      push_back(const value_type& __x)
 8015776:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8015778:	42a9      	cmp	r1, r5
		callback.write = write;
 801577a:	e9cd 9803 	strd	r9, r8, [sp, #12]
 801577e:	d008      	beq.n	8015792 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x8a>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8015780:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8015782:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8015786:	3510      	adds	r5, #16
 8015788:	607d      	str	r5, [r7, #4]
	target_register->mode.callbacks = true;
 801578a:	2301      	movs	r3, #1
 801578c:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 801578e:	7223      	strb	r3, [r4, #8]
 8015790:	e7d0      	b.n	8015734 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	  _M_realloc_insert(end(), __x);
 8015792:	4638      	mov	r0, r7
 8015794:	f7ff f912 	bl	80149bc <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	} else {
 8015798:	e7f7      	b.n	801578a <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x82>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 801579a:	8961      	ldrh	r1, [r4, #10]
	if (__n >= this->size())
 801579c:	4291      	cmp	r1, r2
 801579e:	d302      	bcc.n	80157a6 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x9e>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 80157a0:	4803      	ldr	r0, [pc, #12]	@ (80157b0 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0xa8>)
 80157a2:	f000 ff6e 	bl	8016682 <_ZSt24__throw_out_of_range_fmtPKcz>
	return *(this->_M_impl._M_start + __n);
 80157a6:	eb03 1301 	add.w	r3, r3, r1, lsl #4
		callback->write = write;
 80157aa:	e9c3 9801 	strd	r9, r8, [r3, #4]
 80157ae:	e7ec      	b.n	801578a <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x82>
 80157b0:	08016d78 	.word	0x08016d78

080157b4 <_ZN7Sensors12AddRegistersEv>:
void Sensors::AddRegisters(void) {
 80157b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80157b6:	4604      	mov	r4, r0
 80157b8:	b087      	sub	sp, #28
	registers->AddRegister<uint8_t>(REG_SENSORS_READING_STATUS);
 80157ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80157be:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 80157c0:	f7ff ff2e 	bl	8015620 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_SENSORS_READING_STATUS);
 80157c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80157c8:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80157ca:	f7ff faff 	bl	8014dcc <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddReadCallback<uint8_t>(REG_SENSORS_READING_STATUS, (void*) this,
 80157ce:	6de6      	ldr	r6, [r4, #92]	@ 0x5c
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80157d0:	f04f 31ff 	mov.w	r1, #4294967295
 80157d4:	6830      	ldr	r0, [r6, #0]
 80157d6:	f7f6 fcdf 	bl	800c198 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80157da:	f10d 0207 	add.w	r2, sp, #7
 80157de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80157e2:	4630      	mov	r0, r6
 80157e4:	f7ff fab9 	bl	8014d5a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80157e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80157ec:	4605      	mov	r5, r0
	if (!success) {
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	f040 80b6 	bne.w	8015960 <_ZN7Sensors12AddRegistersEv+0x1ac>
	osSemaphoreRelease(RegistersSemaphore);
 80157f4:	6830      	ldr	r0, [r6, #0]
 80157f6:	f7f6 fd03 	bl	800c200 <osSemaphoreRelease>
	registers->AddWriteCallback<uint8_t>(REG_SENSORS_READING_STATUS, (void*) this,
 80157fa:	4b9a      	ldr	r3, [pc, #616]	@ (8015a64 <_ZN7Sensors12AddRegistersEv+0x2b0>)
 80157fc:	4622      	mov	r2, r4
 80157fe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8015802:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8015804:	f7ff ff3d 	bl	8015682 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_SENSORS_GROUP_STATUS);
 8015808:	f240 2101 	movw	r1, #513	@ 0x201
 801580c:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 801580e:	f7ff ff07 	bl	8015620 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_SENSORS_GROUP_STATUS, 2);
 8015812:	2202      	movs	r2, #2
 8015814:	f240 2101 	movw	r1, #513	@ 0x201
 8015818:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 801581a:	f7ff faf3 	bl	8014e04 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_SENSORS_GROUP_STATUS, (void*) this,
 801581e:	4b92      	ldr	r3, [pc, #584]	@ (8015a68 <_ZN7Sensors12AddRegistersEv+0x2b4>)
 8015820:	4622      	mov	r2, r4
 8015822:	f240 2101 	movw	r1, #513	@ 0x201
 8015826:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8015828:	f7ff ff2b 	bl	8015682 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_SENSORS_DEACTIVATE_GROUPS);
 801582c:	f240 2102 	movw	r1, #514	@ 0x202
 8015830:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8015832:	f7ff fef5 	bl	8015620 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_SENSORS_DEACTIVATE_GROUPS);
 8015836:	f240 2102 	movw	r1, #514	@ 0x202
 801583a:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 801583c:	f7ff fac6 	bl	8014dcc <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_SENSORS_DEACTIVATE_GROUPS, (void*) this,
 8015840:	4b8a      	ldr	r3, [pc, #552]	@ (8015a6c <_ZN7Sensors12AddRegistersEv+0x2b8>)
 8015842:	4622      	mov	r2, r4
 8015844:	f240 2102 	movw	r1, #514	@ 0x202
 8015848:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 801584a:	f7ff ff1a 	bl	8015682 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_SENSORS_SENSOR_STATUS);
 801584e:	f240 2103 	movw	r1, #515	@ 0x203
 8015852:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8015854:	f7ff fee4 	bl	8015620 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_SENSORS_SENSOR_STATUS, 2);
 8015858:	2202      	movs	r2, #2
 801585a:	f240 2103 	movw	r1, #515	@ 0x203
 801585e:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8015860:	f7ff fad0 	bl	8014e04 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_SENSORS_SENSOR_STATUS, (void*) this,
 8015864:	4b82      	ldr	r3, [pc, #520]	@ (8015a70 <_ZN7Sensors12AddRegistersEv+0x2bc>)
 8015866:	4622      	mov	r2, r4
 8015868:	f240 2103 	movw	r1, #515	@ 0x203
 801586c:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 801586e:	f7ff ff08 	bl	8015682 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_SENSORS_DEACTIVATE_SENSORS);
 8015872:	f44f 7101 	mov.w	r1, #516	@ 0x204
 8015876:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8015878:	f7ff fed2 	bl	8015620 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_SENSORS_DEACTIVATE_SENSORS);
 801587c:	f44f 7101 	mov.w	r1, #516	@ 0x204
 8015880:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8015882:	f7ff faa3 	bl	8014dcc <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_SENSORS_DEACTIVATE_SENSORS, (void*) this,
 8015886:	4b7b      	ldr	r3, [pc, #492]	@ (8015a74 <_ZN7Sensors12AddRegistersEv+0x2c0>)
 8015888:	4622      	mov	r2, r4
 801588a:	f44f 7101 	mov.w	r1, #516	@ 0x204
 801588e:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8015890:	f7ff fef7 	bl	8015682 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint16_t>(REG_SENSORS_DATA_STATUS);
 8015894:	f240 2105 	movw	r1, #517	@ 0x205
 8015898:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 801589a:	f7ff fe90 	bl	80155be <_ZN9Registers11AddRegisterItEEbt.isra.0>
	registers->SetRegisterAsArray(REG_SENSORS_DATA_STATUS, 3);
 801589e:	2203      	movs	r2, #3
 80158a0:	f240 2105 	movw	r1, #517	@ 0x205
 80158a4:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80158a6:	f7ff faad 	bl	8014e04 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint16_t>(REG_SENSORS_DATA_STATUS, (void*) this,
 80158aa:	4b73      	ldr	r3, [pc, #460]	@ (8015a78 <_ZN7Sensors12AddRegistersEv+0x2c4>)
 80158ac:	4622      	mov	r2, r4
 80158ae:	f240 2105 	movw	r1, #517	@ 0x205
 80158b2:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80158b4:	f7ff ff28 	bl	8015708 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_SENSORS_DEACTIVATE_ALL_DATA);
 80158b8:	f240 2106 	movw	r1, #518	@ 0x206
 80158bc:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80158be:	f7ff feaf 	bl	8015620 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_SENSORS_DEACTIVATE_ALL_DATA);
 80158c2:	f240 2106 	movw	r1, #518	@ 0x206
 80158c6:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80158c8:	f7ff fa80 	bl	8014dcc <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_SENSORS_DEACTIVATE_ALL_DATA, (void*) this,
 80158cc:	4b6b      	ldr	r3, [pc, #428]	@ (8015a7c <_ZN7Sensors12AddRegistersEv+0x2c8>)
 80158ce:	4622      	mov	r2, r4
 80158d0:	f240 2106 	movw	r1, #518	@ 0x206
 80158d4:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80158d6:	f7ff fed4 	bl	8015682 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint16_t>(REG_SENSORS_GROUP_PRESCALER);
 80158da:	f240 2107 	movw	r1, #519	@ 0x207
 80158de:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80158e0:	f7ff fe6d 	bl	80155be <_ZN9Registers11AddRegisterItEEbt.isra.0>
	registers->SetRegisterAsArray(REG_SENSORS_GROUP_PRESCALER, 2);
 80158e4:	2202      	movs	r2, #2
 80158e6:	f240 2107 	movw	r1, #519	@ 0x207
 80158ea:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80158ec:	f7ff fa8a 	bl	8014e04 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint16_t>(REG_SENSORS_GROUP_PRESCALER, (void*) this,
 80158f0:	4b63      	ldr	r3, [pc, #396]	@ (8015a80 <_ZN7Sensors12AddRegistersEv+0x2cc>)
 80158f2:	4622      	mov	r2, r4
 80158f4:	f240 2107 	movw	r1, #519	@ 0x207
 80158f8:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80158fa:	f7ff ff05 	bl	8015708 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint32_t>(REG_SENSORS_DETECT_SENSORS);
 80158fe:	6de5      	ldr	r5, [r4, #92]	@ 0x5c
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8015900:	f04f 31ff 	mov.w	r1, #4294967295
 8015904:	6828      	ldr	r0, [r5, #0]
 8015906:	f7f6 fc47 	bl	800c198 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 801590a:	f10d 0207 	add.w	r2, sp, #7
 801590e:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8015912:	4628      	mov	r0, r5
 8015914:	f7ff fa21 	bl	8014d5a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 8015918:	f89d 6007 	ldrb.w	r6, [sp, #7]
 801591c:	2e00      	cmp	r6, #0
 801591e:	d04c      	beq.n	80159ba <_ZN7Sensors12AddRegistersEv+0x206>
	osSemaphoreRelease(RegistersSemaphore);
 8015920:	6828      	ldr	r0, [r5, #0]
 8015922:	f7f6 fc6d 	bl	800c200 <osSemaphoreRelease>
	registers->SetRegisterAsArray(REG_SENSORS_DETECT_SENSORS, 2);
 8015926:	2202      	movs	r2, #2
 8015928:	f44f 7102 	mov.w	r1, #520	@ 0x208
 801592c:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 801592e:	f7ff fa69 	bl	8014e04 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint32_t>(REG_SENSORS_DETECT_SENSORS, (void*) this,
 8015932:	6de7      	ldr	r7, [r4, #92]	@ 0x5c
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8015934:	f04f 31ff 	mov.w	r1, #4294967295
 8015938:	6838      	ldr	r0, [r7, #0]
 801593a:	f7f6 fc2d 	bl	800c198 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801593e:	f10d 0207 	add.w	r2, sp, #7
 8015942:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8015946:	4638      	mov	r0, r7
 8015948:	f7ff fa07 	bl	8014d5a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801594c:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8015950:	4605      	mov	r5, r0
	if (!success) {
 8015952:	2b00      	cmp	r3, #0
 8015954:	d14a      	bne.n	80159ec <_ZN7Sensors12AddRegistersEv+0x238>
	osSemaphoreRelease(RegistersSemaphore);
 8015956:	6838      	ldr	r0, [r7, #0]
 8015958:	f7f6 fc52 	bl	800c200 <osSemaphoreRelease>
}
 801595c:	b007      	add	sp, #28
 801595e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8015960:	f10d 0007 	add.w	r0, sp, #7
 8015964:	f7ff fbdc 	bl	8015120 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 8015968:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801596c:	2b00      	cmp	r3, #0
 801596e:	f43f af41 	beq.w	80157f4 <_ZN7Sensors12AddRegistersEv+0x40>
	if (target_register->register_info.type != registered_type) {
 8015972:	792b      	ldrb	r3, [r5, #4]
 8015974:	4298      	cmp	r0, r3
 8015976:	f47f af3d 	bne.w	80157f4 <_ZN7Sensors12AddRegistersEv+0x40>
	if (callbacks[target_register->register_info.type] == NULL) {
 801597a:	3004      	adds	r0, #4
 801597c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8015980:	2800      	cmp	r0, #0
 8015982:	f43f af37 	beq.w	80157f4 <_ZN7Sensors12AddRegistersEv+0x40>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 8015986:	782b      	ldrb	r3, [r5, #0]
 8015988:	4f3e      	ldr	r7, [pc, #248]	@ (8015a84 <_ZN7Sensors12AddRegistersEv+0x2d0>)
 801598a:	b983      	cbnz	r3, 80159ae <_ZN7Sensors12AddRegistersEv+0x1fa>
 801598c:	786b      	ldrb	r3, [r5, #1]
 801598e:	b973      	cbnz	r3, 80159ae <_ZN7Sensors12AddRegistersEv+0x1fa>
		target_callback_list->push_back(callback);
 8015990:	a902      	add	r1, sp, #8
		callback.read = read;
 8015992:	9705      	str	r7, [sp, #20]
		callback.write = NULL;
 8015994:	e9cd 4303 	strd	r4, r3, [sp, #12]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015998:	e9d0 2300 	ldrd	r2, r3, [r0]
 801599c:	1a9b      	subs	r3, r3, r2
 801599e:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 80159a0:	816b      	strh	r3, [r5, #10]
		target_callback_list->push_back(callback);
 80159a2:	f7f9 fa03 	bl	800edac <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_>
	target_register->mode.callbacks = true;
 80159a6:	2301      	movs	r3, #1
 80159a8:	706b      	strb	r3, [r5, #1]
	target_register->access.read = true;
 80159aa:	726b      	strb	r3, [r5, #9]
 80159ac:	e722      	b.n	80157f4 <_ZN7Sensors12AddRegistersEv+0x40>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 80159ae:	8969      	ldrh	r1, [r5, #10]
 80159b0:	f7f9 f862 	bl	800ea78 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
		callback->context = context;
 80159b4:	6044      	str	r4, [r0, #4]
		callback->read = read;
 80159b6:	60c7      	str	r7, [r0, #12]
 80159b8:	e7f5      	b.n	80159a6 <_ZN7Sensors12AddRegistersEv+0x1f2>
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 80159ba:	f10d 0007 	add.w	r0, sp, #7
 80159be:	f7ff fb13 	bl	8014fe8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	configuration_.mode = mode;
 80159c2:	f04f 7302 	mov.w	r3, #34078720	@ 0x2080000
	configuration_.register_info = register_;
 80159c6:	f88d 000c 	strb.w	r0, [sp, #12]
	configuration_.mode = mode;
 80159ca:	9302      	str	r3, [sp, #8]
	configuration_.register_info = register_;
 80159cc:	2301      	movs	r3, #1
 80159ce:	f88d 600d 	strb.w	r6, [sp, #13]
 80159d2:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 80159d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_semaphore = NULL;
 80159da:	e9cd 6604 	strd	r6, r6, [sp, #16]
	if (success) {
 80159de:	2b00      	cmp	r3, #0
 80159e0:	d09e      	beq.n	8015920 <_ZN7Sensors12AddRegistersEv+0x16c>
		registers.push_back(configuration_);
 80159e2:	a902      	add	r1, sp, #8
 80159e4:	1d28      	adds	r0, r5, #4
 80159e6:	f7fc ff88 	bl	80128fa <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 80159ea:	e799      	b.n	8015920 <_ZN7Sensors12AddRegistersEv+0x16c>
	uint8_t registered_type = GetTypeID<T>(&success);
 80159ec:	f10d 0007 	add.w	r0, sp, #7
 80159f0:	f7ff fafa 	bl	8014fe8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	if (!success) {
 80159f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80159f8:	2b00      	cmp	r3, #0
 80159fa:	d0ac      	beq.n	8015956 <_ZN7Sensors12AddRegistersEv+0x1a2>
	if (target_register->register_info.type != registered_type) {
 80159fc:	792b      	ldrb	r3, [r5, #4]
 80159fe:	4298      	cmp	r0, r3
 8015a00:	d1a9      	bne.n	8015956 <_ZN7Sensors12AddRegistersEv+0x1a2>
	if (callbacks[target_register->register_info.type] == NULL) {
 8015a02:	3004      	adds	r0, #4
 8015a04:	f857 c020 	ldr.w	ip, [r7, r0, lsl #2]
 8015a08:	f1bc 0f00 	cmp.w	ip, #0
 8015a0c:	d0a3      	beq.n	8015956 <_ZN7Sensors12AddRegistersEv+0x1a2>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 8015a0e:	7829      	ldrb	r1, [r5, #0]
 8015a10:	481d      	ldr	r0, [pc, #116]	@ (8015a88 <_ZN7Sensors12AddRegistersEv+0x2d4>)
 8015a12:	e9dc 3600 	ldrd	r3, r6, [ip]
 8015a16:	1af2      	subs	r2, r6, r3
 8015a18:	1112      	asrs	r2, r2, #4
 8015a1a:	b9c1      	cbnz	r1, 8015a4e <_ZN7Sensors12AddRegistersEv+0x29a>
 8015a1c:	7869      	ldrb	r1, [r5, #1]
 8015a1e:	b9b1      	cbnz	r1, 8015a4e <_ZN7Sensors12AddRegistersEv+0x29a>
		callback.read = NULL;
 8015a20:	9105      	str	r1, [sp, #20]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8015a22:	f8dc 1008 	ldr.w	r1, [ip, #8]
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8015a26:	816a      	strh	r2, [r5, #10]
      push_back(const value_type& __x)
 8015a28:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8015a2a:	42b1      	cmp	r1, r6
		callback.write = write;
 8015a2c:	e9cd 4003 	strd	r4, r0, [sp, #12]
 8015a30:	d009      	beq.n	8015a46 <_ZN7Sensors12AddRegistersEv+0x292>
 8015a32:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8015a34:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8015a38:	3610      	adds	r6, #16
 8015a3a:	f8cc 6004 	str.w	r6, [ip, #4]
	target_register->mode.callbacks = true;
 8015a3e:	2301      	movs	r3, #1
 8015a40:	706b      	strb	r3, [r5, #1]
	target_register->access.write = true;
 8015a42:	722b      	strb	r3, [r5, #8]
 8015a44:	e787      	b.n	8015956 <_ZN7Sensors12AddRegistersEv+0x1a2>
	  _M_realloc_insert(end(), __x);
 8015a46:	4660      	mov	r0, ip
 8015a48:	f7fd f850 	bl	8012aec <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	} else {
 8015a4c:	e7f7      	b.n	8015a3e <_ZN7Sensors12AddRegistersEv+0x28a>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8015a4e:	8969      	ldrh	r1, [r5, #10]
	if (__n >= this->size())
 8015a50:	4291      	cmp	r1, r2
 8015a52:	d302      	bcc.n	8015a5a <_ZN7Sensors12AddRegistersEv+0x2a6>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8015a54:	480d      	ldr	r0, [pc, #52]	@ (8015a8c <_ZN7Sensors12AddRegistersEv+0x2d8>)
 8015a56:	f000 fe14 	bl	8016682 <_ZSt24__throw_out_of_range_fmtPKcz>
	return *(this->_M_impl._M_start + __n);
 8015a5a:	eb03 1301 	add.w	r3, r3, r1, lsl #4
		callback->write = write;
 8015a5e:	e9c3 4001 	strd	r4, r0, [r3, #4]
 8015a62:	e7ec      	b.n	8015a3e <_ZN7Sensors12AddRegistersEv+0x28a>
 8015a64:	08015297 	.word	0x08015297
 8015a68:	0801540f 	.word	0x0801540f
 8015a6c:	080152d7 	.word	0x080152d7
 8015a70:	080154f3 	.word	0x080154f3
 8015a74:	08015463 	.word	0x08015463
 8015a78:	080155a5 	.word	0x080155a5
 8015a7c:	08015545 	.word	0x08015545
 8015a80:	080153bd 	.word	0x080153bd
 8015a84:	08014fc9 	.word	0x08014fc9
 8015a88:	0801533d 	.word	0x0801533d
 8015a8c:	08016d78 	.word	0x08016d78

08015a90 <_ZN8Services4InitEP9RegistersP13CommunicationP4LEDS>:
 *
 * @param input registers_: the Registers instance
 * @param input communication_: the Communication instance
 * @param input leds_: the LEDS instance
 */
void Services::Init(Registers* registers_, Communication* communication_, LEDS* leds_) {
 8015a90:	b510      	push	{r4, lr}
	registers = registers_;
 8015a92:	f8c0 1c38 	str.w	r1, [r0, #3128]	@ 0xc38
	communication = communication_;
	leds = leds_;

	ServiceSemaphore = osSemaphoreNew(1,1,NULL);
 8015a96:	2101      	movs	r1, #1
void Services::Init(Registers* registers_, Communication* communication_, LEDS* leds_) {
 8015a98:	4604      	mov	r4, r0
	communication = communication_;
 8015a9a:	f8c0 2c3c 	str.w	r2, [r0, #3132]	@ 0xc3c
	leds = leds_;
 8015a9e:	f8c0 3c40 	str.w	r3, [r0, #3136]	@ 0xc40
	ServiceSemaphore = osSemaphoreNew(1,1,NULL);
 8015aa2:	2200      	movs	r2, #0
 8015aa4:	4608      	mov	r0, r1
 8015aa6:	f7f6 fb1b 	bl	800c0e0 <osSemaphoreNew>
 8015aaa:	6020      	str	r0, [r4, #0]
	osSemaphoreRelease(ServiceSemaphore);
}
 8015aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSemaphoreRelease(ServiceSemaphore);
 8015ab0:	f7f6 bba6 	b.w	800c200 <osSemaphoreRelease>

08015ab4 <_ZN8Services10ResetQueueEv>:

/**
 * @brief Reset the pending services
 */
void Services::ResetQueue(void) {
 8015ab4:	b538      	push	{r3, r4, r5, lr}
	queue_size = 0;
 8015ab6:	2500      	movs	r5, #0
void Services::ResetQueue(void) {
 8015ab8:	4604      	mov	r4, r0
	osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 8015aba:	f04f 31ff 	mov.w	r1, #4294967295
	queue_size = 0;
 8015abe:	7105      	strb	r5, [r0, #4]
	osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 8015ac0:	6800      	ldr	r0, [r0, #0]
 8015ac2:	f7f6 fb69 	bl	800c198 <osSemaphoreAcquire>
	for (uint8_t index = 0; index < NUMBER_OF_SERVICES; index++) {
		services[index].active = false;
		services[index].reception_flag = false;
		services[index].error = false;
	}
	osSemaphoreRelease(ServiceSemaphore);
 8015ac6:	6820      	ldr	r0, [r4, #0]
		services[index].active = false;
 8015ac8:	8125      	strh	r5, [r4, #8]
		services[index].error = false;
 8015aca:	7725      	strb	r5, [r4, #28]
		services[index].active = false;
 8015acc:	8425      	strh	r5, [r4, #32]
		services[index].error = false;
 8015ace:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
}
 8015ad2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	osSemaphoreRelease(ServiceSemaphore);
 8015ad6:	f7f6 bb93 	b.w	800c200 <osSemaphoreRelease>

08015ada <_ZN8ServicesC1Ev>:
Services::Services() {
 8015ada:	b510      	push	{r4, lr}
 8015adc:	4604      	mov	r4, r0
	ResetQueue();
 8015ade:	f7ff ffe9 	bl	8015ab4 <_ZN8Services10ResetQueueEv>
}
 8015ae2:	4620      	mov	r0, r4
 8015ae4:	bd10      	pop	{r4, pc}

08015ae6 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb>:
 * @param input interface: the interface from which the data comes from, used to find the service
 * @param input access: whether WRITE or READ
 * @param output success: whether successful
 * @return service index
 */
uint8_t Services::FindQueueIndex(uint8_t start_index, Register remote_register, ServiceInterface interface, bool access, bool* success) {
 8015ae6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015aea:	460c      	mov	r4, r1
 8015aec:	a902      	add	r1, sp, #8
 8015aee:	4605      	mov	r5, r0
	osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 8015af0:	6800      	ldr	r0, [r0, #0]
uint8_t Services::FindQueueIndex(uint8_t start_index, Register remote_register, ServiceInterface interface, bool access, bool* success) {
 8015af2:	f89d 8024 	ldrb.w	r8, [sp, #36]	@ 0x24
 8015af6:	e901 000c 	stmdb	r1, {r2, r3}
	osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 8015afa:	f04f 31ff 	mov.w	r1, #4294967295
 8015afe:	f89d 7021 	ldrb.w	r7, [sp, #33]	@ 0x21
 8015b02:	f7f6 fb49 	bl	800c198 <osSemaphoreAcquire>
		if (services[index].active) {
			Register registered_register = services[index].configuration.register_;
			ServiceInterface registered_interface =services[index].configuration.interface;

			// Check register address
			if (remote_register.address == registered_register.address) {
 8015b06:	f8bd 1000 	ldrh.w	r1, [sp]
 8015b0a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
				// Check interface
				if (interface.interface == registered_interface.interface) {
 8015b0e:	f89d 0020 	ldrb.w	r0, [sp, #32]
 8015b12:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
	for (uint8_t index = start_index; index < NUMBER_OF_SERVICES; index++) {
 8015b16:	2c01      	cmp	r4, #1
 8015b18:	d905      	bls.n	8015b26 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x40>
			}
		}
	}
	osSemaphoreRelease(ServiceSemaphore);
	*success = false;
	return 0;
 8015b1a:	2400      	movs	r4, #0
	osSemaphoreRelease(ServiceSemaphore);
 8015b1c:	6828      	ldr	r0, [r5, #0]
 8015b1e:	f7f6 fb6f 	bl	800c200 <osSemaphoreRelease>
	return 0;
 8015b22:	4626      	mov	r6, r4
 8015b24:	e014      	b.n	8015b50 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x6a>
		if (services[index].active) {
 8015b26:	7a1e      	ldrb	r6, [r3, #8]
 8015b28:	b1c6      	cbz	r6, 8015b5c <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x76>
			if (remote_register.address == registered_register.address) {
 8015b2a:	895a      	ldrh	r2, [r3, #10]
 8015b2c:	428a      	cmp	r2, r1
 8015b2e:	d115      	bne.n	8015b5c <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x76>
				if (interface.interface == registered_interface.interface) {
 8015b30:	7c9a      	ldrb	r2, [r3, #18]
 8015b32:	4282      	cmp	r2, r0
 8015b34:	d112      	bne.n	8015b5c <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x76>
			ServiceInterface registered_interface =services[index].configuration.interface;
 8015b36:	7cda      	ldrb	r2, [r3, #19]
					if (interface.address == registered_interface.address || registered_interface.address == ALL || interface.address == ALL) {
 8015b38:	4297      	cmp	r7, r2
 8015b3a:	d003      	beq.n	8015b44 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x5e>
 8015b3c:	2aff      	cmp	r2, #255	@ 0xff
 8015b3e:	d001      	beq.n	8015b44 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x5e>
 8015b40:	2fff      	cmp	r7, #255	@ 0xff
 8015b42:	d10b      	bne.n	8015b5c <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x76>
						if (access == services[index].configuration.access) { // check access type
 8015b44:	7d1a      	ldrb	r2, [r3, #20]
 8015b46:	4542      	cmp	r2, r8
 8015b48:	d108      	bne.n	8015b5c <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x76>
							osSemaphoreRelease(ServiceSemaphore);
 8015b4a:	6828      	ldr	r0, [r5, #0]
 8015b4c:	f7f6 fb58 	bl	800c200 <osSemaphoreRelease>
							*success = true;
 8015b50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
}
 8015b52:	4620      	mov	r0, r4
							*success = true;
 8015b54:	701e      	strb	r6, [r3, #0]
}
 8015b56:	b002      	add	sp, #8
 8015b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (uint8_t index = start_index; index < NUMBER_OF_SERVICES; index++) {
 8015b5c:	3401      	adds	r4, #1
 8015b5e:	3318      	adds	r3, #24
 8015b60:	b2e4      	uxtb	r4, r4
 8015b62:	e7d8      	b.n	8015b16 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x30>

08015b64 <_ZN8Services12ReceiveWriteE20ServiceConfigurationh>:
 * @brief Receive a write service access acknowledgment
 *
 * @param input information: service information associated to the write acknowledgment
 * @param input status: value returned by the remote module
 */
void Services::ReceiveWrite(ServiceConfiguration information, uint8_t status) {
 8015b64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015b68:	b08b      	sub	sp, #44	@ 0x2c
 8015b6a:	4605      	mov	r5, r0
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
		if (not success) return;

		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
		buffer_uint8[index][0] = status;
		services[index].reception_flag = true;
 8015b6c:	f04f 0918 	mov.w	r9, #24
void Services::ReceiveWrite(ServiceConfiguration information, uint8_t status) {
 8015b70:	ae05      	add	r6, sp, #20
 8015b72:	f89d 7048 	ldrb.w	r7, [sp, #72]	@ 0x48
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 8015b76:	f10d 0827 	add.w	r8, sp, #39	@ 0x27
void Services::ReceiveWrite(ServiceConfiguration information, uint8_t status) {
 8015b7a:	e886 000e 	stmia.w	r6, {r1, r2, r3}
	bool success = true;
 8015b7e:	2301      	movs	r3, #1
	uint8_t start_index = 0;
 8015b80:	2100      	movs	r1, #0
	bool success = true;
 8015b82:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
	while (success) {
 8015b86:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8015b8a:	b913      	cbnz	r3, 8015b92 <_ZN8Services12ReceiveWriteE20ServiceConfigurationh+0x2e>
		osSemaphoreRelease(ServiceSemaphore);

		start_index = index + 1;
	}
}
 8015b8c:	b00b      	add	sp, #44	@ 0x2c
 8015b8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 8015b92:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8015b96:	4628      	mov	r0, r5
 8015b98:	f8cd 8008 	str.w	r8, [sp, #8]
 8015b9c:	9301      	str	r3, [sp, #4]
 8015b9e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8015ba2:	f8ad 3000 	strh.w	r3, [sp]
 8015ba6:	e896 000c 	ldmia.w	r6, {r2, r3}
 8015baa:	f7ff ff9c 	bl	8015ae6 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb>
		if (not success) return;
 8015bae:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 8015bb2:	4604      	mov	r4, r0
		if (not success) return;
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d0e9      	beq.n	8015b8c <_ZN8Services12ReceiveWriteE20ServiceConfigurationh+0x28>
		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 8015bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8015bbc:	6828      	ldr	r0, [r5, #0]
 8015bbe:	f7f6 faeb 	bl	800c198 <osSemaphoreAcquire>
		services[index].reception_flag = true;
 8015bc2:	2201      	movs	r2, #1
		buffer_uint8[index][0] = status;
 8015bc4:	eb05 2304 	add.w	r3, r5, r4, lsl #8
 8015bc8:	f883 7038 	strb.w	r7, [r3, #56]	@ 0x38
		services[index].reception_flag = true;
 8015bcc:	fb09 5304 	mla	r3, r9, r4, r5
		osSemaphoreRelease(ServiceSemaphore);
 8015bd0:	6828      	ldr	r0, [r5, #0]
		services[index].reception_flag = true;
 8015bd2:	725a      	strb	r2, [r3, #9]
		osSemaphoreRelease(ServiceSemaphore);
 8015bd4:	f7f6 fb14 	bl	800c200 <osSemaphoreRelease>
		start_index = index + 1;
 8015bd8:	1c61      	adds	r1, r4, #1
 8015bda:	b2c9      	uxtb	r1, r1
 8015bdc:	e7d3      	b.n	8015b86 <_ZN8Services12ReceiveWriteE20ServiceConfigurationh+0x22>

08015bde <_ZN8Services12ReceiveErrorE20ServiceConfigurationh>:
 * @brief Receive an service access error
 *
 * @param input information: service information associated to the acknowledgment
 * @param input error: error flag returned by the remote module
 */
void Services::ReceiveError(ServiceConfiguration information, uint8_t error) {
 8015bde:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015be2:	b08a      	sub	sp, #40	@ 0x28
 8015be4:	4604      	mov	r4, r0
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
		if (not success) return;

		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
		buffer_uint8[index][0] = error;
		services[index].error = true;
 8015be6:	2718      	movs	r7, #24
void Services::ReceiveError(ServiceConfiguration information, uint8_t error) {
 8015be8:	ae05      	add	r6, sp, #20
 8015bea:	f89d 8048 	ldrb.w	r8, [sp, #72]	@ 0x48
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 8015bee:	f10d 0927 	add.w	r9, sp, #39	@ 0x27
void Services::ReceiveError(ServiceConfiguration information, uint8_t error) {
 8015bf2:	e886 000e 	stmia.w	r6, {r1, r2, r3}
	bool success = true;
 8015bf6:	2301      	movs	r3, #1
	uint8_t start_index = 0;
 8015bf8:	2100      	movs	r1, #0
	bool success = true;
 8015bfa:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
	while (success) {
 8015bfe:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8015c02:	b913      	cbnz	r3, 8015c0a <_ZN8Services12ReceiveErrorE20ServiceConfigurationh+0x2c>
		services[index].reception_flag = true;
		osSemaphoreRelease(ServiceSemaphore);

		start_index = index + 1;
	}
}
 8015c04:	b00a      	add	sp, #40	@ 0x28
 8015c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 8015c0a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8015c0e:	4620      	mov	r0, r4
 8015c10:	f8cd 9008 	str.w	r9, [sp, #8]
 8015c14:	9301      	str	r3, [sp, #4]
 8015c16:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8015c1a:	f8ad 3000 	strh.w	r3, [sp]
 8015c1e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8015c22:	f7ff ff60 	bl	8015ae6 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb>
		if (not success) return;
 8015c26:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 8015c2a:	4605      	mov	r5, r0
		if (not success) return;
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	d0e9      	beq.n	8015c04 <_ZN8Services12ReceiveErrorE20ServiceConfigurationh+0x26>
		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 8015c30:	f04f 31ff 	mov.w	r1, #4294967295
 8015c34:	6820      	ldr	r0, [r4, #0]
 8015c36:	f7f6 faaf 	bl	800c198 <osSemaphoreAcquire>
		services[index].error = true;
 8015c3a:	f105 0a01 	add.w	sl, r5, #1
		buffer_uint8[index][0] = error;
 8015c3e:	eb04 2305 	add.w	r3, r4, r5, lsl #8
		services[index].error = true;
 8015c42:	2201      	movs	r2, #1
		buffer_uint8[index][0] = error;
 8015c44:	f883 8038 	strb.w	r8, [r3, #56]	@ 0x38
		services[index].error = true;
 8015c48:	fb05 7307 	mla	r3, r5, r7, r7
		osSemaphoreRelease(ServiceSemaphore);
 8015c4c:	6820      	ldr	r0, [r4, #0]
		services[index].reception_flag = true;
 8015c4e:	fb07 4505 	mla	r5, r7, r5, r4
		services[index].error = true;
 8015c52:	4423      	add	r3, r4
 8015c54:	711a      	strb	r2, [r3, #4]
		services[index].reception_flag = true;
 8015c56:	726a      	strb	r2, [r5, #9]
		osSemaphoreRelease(ServiceSemaphore);
 8015c58:	f7f6 fad2 	bl	800c200 <osSemaphoreRelease>
		start_index = index + 1;
 8015c5c:	fa5f f18a 	uxtb.w	r1, sl
 8015c60:	e7cd      	b.n	8015bfe <_ZN8Services12ReceiveErrorE20ServiceConfigurationh+0x20>

08015c62 <_ZN8Services18FindRemoteRegisterE8Register16ServiceInterfacebPb>:
 * @param input interface: interface associated to the register to find
 * @param input access: access mode of the register to find
 * @param output success: whether successful
 * @return the Register complete configuration (type, isArray, length)
 */
Register Services::FindRemoteRegister(Register remote_register, ServiceInterface interface, bool access, bool* success) {
 8015c62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015c66:	b087      	sub	sp, #28
 8015c68:	460d      	mov	r5, r1
 8015c6a:	4604      	mov	r4, r0
 8015c6c:	a904      	add	r1, sp, #16
 8015c6e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
	uint8_t index;
	index = FindQueueIndex(0, remote_register, interface, access, success);
 8015c70:	4628      	mov	r0, r5
Register Services::FindRemoteRegister(Register remote_register, ServiceInterface interface, bool access, bool* success) {
 8015c72:	e881 000c 	stmia.w	r1, {r2, r3}
	index = FindQueueIndex(0, remote_register, interface, access, success);
 8015c76:	f89d 303c 	ldrb.w	r3, [sp, #60]	@ 0x3c
 8015c7a:	9702      	str	r7, [sp, #8]
 8015c7c:	9301      	str	r3, [sp, #4]
 8015c7e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8015c82:	f8ad 3000 	strh.w	r3, [sp]
 8015c86:	e891 000c 	ldmia.w	r1, {r2, r3}
 8015c8a:	2100      	movs	r1, #0
 8015c8c:	f7ff ff2b 	bl	8015ae6 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb>
	if (*success) {
 8015c90:	783b      	ldrb	r3, [r7, #0]
	index = FindQueueIndex(0, remote_register, interface, access, success);
 8015c92:	4606      	mov	r6, r0
	if (*success) {
 8015c94:	b1f3      	cbz	r3, 8015cd4 <_ZN8Services18FindRemoteRegisterE8Register16ServiceInterfacebPb+0x72>
		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 8015c96:	f04f 31ff 	mov.w	r1, #4294967295
 8015c9a:	6828      	ldr	r0, [r5, #0]
 8015c9c:	f7f6 fa7c 	bl	800c198 <osSemaphoreAcquire>
		Register found_register = services[index].configuration.register_;
 8015ca0:	2318      	movs	r3, #24
 8015ca2:	210a      	movs	r1, #10
		osSemaphoreRelease(ServiceSemaphore);
 8015ca4:	6828      	ldr	r0, [r5, #0]
		Register found_register = services[index].configuration.register_;
 8015ca6:	fb03 5206 	mla	r2, r3, r6, r5
 8015caa:	fb13 1306 	smlabb	r3, r3, r6, r1
 8015cae:	f8b2 900a 	ldrh.w	r9, [r2, #10]
 8015cb2:	442b      	add	r3, r5
 8015cb4:	f892 800c 	ldrb.w	r8, [r2, #12]
 8015cb8:	89d6      	ldrh	r6, [r2, #14]
 8015cba:	78df      	ldrb	r7, [r3, #3]
		osSemaphoreRelease(ServiceSemaphore);
 8015cbc:	f7f6 faa0 	bl	800c200 <osSemaphoreRelease>

		return found_register;
 8015cc0:	f8a4 9000 	strh.w	r9, [r4]
 8015cc4:	f884 8002 	strb.w	r8, [r4, #2]
 8015cc8:	70e7      	strb	r7, [r4, #3]
 8015cca:	80a6      	strh	r6, [r4, #4]
	}

	*success = false;
	return Register();
}
 8015ccc:	4620      	mov	r0, r4
 8015cce:	b007      	add	sp, #28
 8015cd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return Register();
 8015cd4:	6023      	str	r3, [r4, #0]
 8015cd6:	80a3      	strh	r3, [r4, #4]
 8015cd8:	e7f8      	b.n	8015ccc <_ZN8Services18FindRemoteRegisterE8Register16ServiceInterfacebPb+0x6a>
	...

08015cdc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>:
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8015cdc:	491e      	ldr	r1, [pc, #120]	@ (8015d58 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 8015cde:	b510      	push	{r4, lr}
 8015ce0:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8015ce2:	4608      	mov	r0, r1
 8015ce4:	f000 fcac 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 8015ce8:	bb40      	cbnz	r0, 8015d3c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8015cea:	491c      	ldr	r1, [pc, #112]	@ (8015d5c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x80>)
 8015cec:	481a      	ldr	r0, [pc, #104]	@ (8015d58 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8015cee:	f000 fca7 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 8015cf2:	bb28      	cbnz	r0, 8015d40 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8015cf4:	491a      	ldr	r1, [pc, #104]	@ (8015d60 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x84>)
 8015cf6:	4818      	ldr	r0, [pc, #96]	@ (8015d58 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8015cf8:	f000 fca2 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 8015cfc:	bb10      	cbnz	r0, 8015d44 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8015cfe:	4919      	ldr	r1, [pc, #100]	@ (8015d64 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x88>)
 8015d00:	4815      	ldr	r0, [pc, #84]	@ (8015d58 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8015d02:	f000 fc9d 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 8015d06:	b9f8      	cbnz	r0, 8015d48 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8015d08:	4917      	ldr	r1, [pc, #92]	@ (8015d68 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x8c>)
 8015d0a:	4813      	ldr	r0, [pc, #76]	@ (8015d58 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8015d0c:	f000 fc98 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 8015d10:	b9e0      	cbnz	r0, 8015d4c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8015d12:	4916      	ldr	r1, [pc, #88]	@ (8015d6c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x90>)
 8015d14:	4810      	ldr	r0, [pc, #64]	@ (8015d58 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8015d16:	f000 fc93 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 8015d1a:	b9c8      	cbnz	r0, 8015d50 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8015d1c:	4914      	ldr	r1, [pc, #80]	@ (8015d70 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x94>)
 8015d1e:	480e      	ldr	r0, [pc, #56]	@ (8015d58 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8015d20:	f000 fc8e 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 8015d24:	b9b0      	cbnz	r0, 8015d54 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 8015d26:	4913      	ldr	r1, [pc, #76]	@ (8015d74 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x98>)
 8015d28:	480b      	ldr	r0, [pc, #44]	@ (8015d58 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8015d2a:	f000 fc89 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 8015d2e:	2800      	cmp	r0, #0
 8015d30:	bf14      	ite	ne
 8015d32:	2309      	movne	r3, #9
 8015d34:	2300      	moveq	r3, #0
 8015d36:	7020      	strb	r0, [r4, #0]
}
 8015d38:	4618      	mov	r0, r3
 8015d3a:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8015d3c:	2300      	movs	r3, #0
 8015d3e:	e7fa      	b.n	8015d36 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8015d40:	2301      	movs	r3, #1
 8015d42:	e7f8      	b.n	8015d36 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8015d44:	2302      	movs	r3, #2
 8015d46:	e7f6      	b.n	8015d36 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8015d48:	2303      	movs	r3, #3
 8015d4a:	e7f4      	b.n	8015d36 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8015d4c:	2304      	movs	r3, #4
 8015d4e:	e7f2      	b.n	8015d36 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8015d50:	2306      	movs	r3, #6
 8015d52:	e7f0      	b.n	8015d36 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8015d54:	2308      	movs	r3, #8
 8015d56:	e7ee      	b.n	8015d36 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
 8015d58:	08016f7c 	.word	0x08016f7c
 8015d5c:	08016f74 	.word	0x08016f74
 8015d60:	08016f64 	.word	0x08016f64
 8015d64:	08016f5c 	.word	0x08016f5c
 8015d68:	08016f84 	.word	0x08016f84
 8015d6c:	08016f6c 	.word	0x08016f6c
 8015d70:	08016f54 	.word	0x08016f54
 8015d74:	08016f4c 	.word	0x08016f4c

08015d78 <_ZN17MasterSubscribersC1Ev>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 8015d78:	2200      	movs	r2, #0
 8015d7a:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8015d7e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8015d82:	e9c0 2207 	strd	r2, r2, [r0, #28]

/**
 * @brief Class constructor
 */
MasterSubscribers::MasterSubscribers() {
}
 8015d86:	4770      	bx	lr

08015d88 <_ZN17MasterSubscribers4InitEP9RegistersP4LEDS>:
 * @brief Initialize the class with references to other classes. Set default values.
 *
 * @param input registers_: the Registers instance
 * @param input leds_: the LEDS instance
 */
void MasterSubscribers::Init(Registers* registers_, LEDS* leds_) {
 8015d88:	b510      	push	{r4, lr}
	registers = registers_;
	leds = leds_;
 8015d8a:	e9c0 1200 	strd	r1, r2, [r0]

	SubscribersSemaphore = osSemaphoreNew(1,1,NULL);
 8015d8e:	2101      	movs	r1, #1
void MasterSubscribers::Init(Registers* registers_, LEDS* leds_) {
 8015d90:	4604      	mov	r4, r0
	SubscribersSemaphore = osSemaphoreNew(1,1,NULL);
 8015d92:	2200      	movs	r2, #0
 8015d94:	4608      	mov	r0, r1
 8015d96:	f7f6 f9a3 	bl	800c0e0 <osSemaphoreNew>
 8015d9a:	60a0      	str	r0, [r4, #8]
	osSemaphoreRelease(SubscribersSemaphore);
}
 8015d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSemaphoreRelease(SubscribersSemaphore);
 8015da0:	f7f6 ba2e 	b.w	800c200 <osSemaphoreRelease>

08015da4 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb>:
 *
 * @param input ID: subscriber ID
 * @param output success: whether successful
 * @return the subscriber index
 */
uint8_t MasterSubscribers::FindSubscriberIndex(uint8_t ID, bool* success) {
 8015da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015da6:	4604      	mov	r4, r0
 8015da8:	460d      	mov	r5, r1
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 8015daa:	6880      	ldr	r0, [r0, #8]
 8015dac:	f04f 31ff 	mov.w	r1, #4294967295
uint8_t MasterSubscribers::FindSubscriberIndex(uint8_t ID, bool* success) {
 8015db0:	4616      	mov	r6, r2
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 8015db2:	f7f6 f9f1 	bl	800c198 <osSemaphoreAcquire>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015db6:	4a10      	ldr	r2, [pc, #64]	@ (8015df8 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb+0x54>)
	for (uint8_t index = 0; index < configurations.size(); index++) {
		if (configurations[index].ID == ID) {
 8015db8:	2728      	movs	r7, #40	@ 0x28
 8015dba:	e9d4 1303 	ldrd	r1, r3, [r4, #12]
 8015dbe:	1a5b      	subs	r3, r3, r1
 8015dc0:	10db      	asrs	r3, r3, #3
 8015dc2:	4353      	muls	r3, r2
	for (uint8_t index = 0; index < configurations.size(); index++) {
 8015dc4:	2200      	movs	r2, #0
 8015dc6:	b2d0      	uxtb	r0, r2
 8015dc8:	4298      	cmp	r0, r3
 8015dca:	d305      	bcc.n	8015dd8 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb+0x34>
			osSemaphoreRelease(SubscribersSemaphore);
			*success = true;
			return index;
		}
	}
	osSemaphoreRelease(SubscribersSemaphore);
 8015dcc:	68a0      	ldr	r0, [r4, #8]
 8015dce:	f7f6 fa17 	bl	800c200 <osSemaphoreRelease>
	*success = false;
	return 0;
 8015dd2:	2300      	movs	r3, #0
 8015dd4:	461d      	mov	r5, r3
 8015dd6:	e00b      	b.n	8015df0 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb+0x4c>
		if (configurations[index].ID == ID) {
 8015dd8:	fb07 fc00 	mul.w	ip, r7, r0
 8015ddc:	3201      	adds	r2, #1
 8015dde:	f811 c00c 	ldrb.w	ip, [r1, ip]
 8015de2:	45ac      	cmp	ip, r5
 8015de4:	d1ef      	bne.n	8015dc6 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb+0x22>
 8015de6:	4605      	mov	r5, r0
			osSemaphoreRelease(SubscribersSemaphore);
 8015de8:	68a0      	ldr	r0, [r4, #8]
 8015dea:	f7f6 fa09 	bl	800c200 <osSemaphoreRelease>
			return index;
 8015dee:	2301      	movs	r3, #1
}
 8015df0:	4628      	mov	r0, r5
			*success = true;
 8015df2:	7033      	strb	r3, [r6, #0]
}
 8015df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015df6:	bf00      	nop
 8015df8:	cccccccd 	.word	0xcccccccd

08015dfc <_ZN17MasterSubscribers19SetSubscriberStatusEhb>:
bool MasterSubscribers::SetSubscriberStatus(uint8_t ID, bool status) {
 8015dfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015dfe:	4616      	mov	r6, r2
	uint8_t index = FindSubscriberIndex(ID, &success);
 8015e00:	f10d 0207 	add.w	r2, sp, #7
bool MasterSubscribers::SetSubscriberStatus(uint8_t ID, bool status) {
 8015e04:	4605      	mov	r5, r0
	uint8_t index = FindSubscriberIndex(ID, &success);
 8015e06:	f7ff ffcd 	bl	8015da4 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb>
	if (!success) return false;
 8015e0a:	f89d 7007 	ldrb.w	r7, [sp, #7]
	uint8_t index = FindSubscriberIndex(ID, &success);
 8015e0e:	4604      	mov	r4, r0
	if (!success) return false;
 8015e10:	b177      	cbz	r7, 8015e30 <_ZN17MasterSubscribers19SetSubscriberStatusEhb+0x34>
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 8015e12:	f04f 31ff 	mov.w	r1, #4294967295
 8015e16:	68a8      	ldr	r0, [r5, #8]
 8015e18:	f7f6 f9be 	bl	800c198 <osSemaphoreAcquire>
	configurations[index].activated = status;
 8015e1c:	68e9      	ldr	r1, [r5, #12]
	return *(this->_M_impl._M_start + __n);
 8015e1e:	b223      	sxth	r3, r4
	osSemaphoreRelease(SubscribersSemaphore);
 8015e20:	68a8      	ldr	r0, [r5, #8]
 8015e22:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	configurations[index].activated = status;
 8015e26:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015e2a:	704e      	strb	r6, [r1, #1]
	osSemaphoreRelease(SubscribersSemaphore);
 8015e2c:	f7f6 f9e8 	bl	800c200 <osSemaphoreRelease>
}
 8015e30:	4638      	mov	r0, r7
 8015e32:	b003      	add	sp, #12
 8015e34:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015e36 <_ZZN17MasterSubscribers12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 8015e36:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8015e38:	4611      	mov	r1, r2
 8015e3a:	b508      	push	{r3, lr}
			if (length != 2) return false;
 8015e3c:	d108      	bne.n	8015e50 <_ZZN17MasterSubscribers12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x1a>
			self->SetSubscriberStatus(input[0], (bool) input[1]);
 8015e3e:	7852      	ldrb	r2, [r2, #1]
 8015e40:	7809      	ldrb	r1, [r1, #0]
 8015e42:	3a00      	subs	r2, #0
 8015e44:	bf18      	it	ne
 8015e46:	2201      	movne	r2, #1
 8015e48:	f7ff ffd8 	bl	8015dfc <_ZN17MasterSubscribers19SetSubscriberStatusEhb>
			return true;
 8015e4c:	2001      	movs	r0, #1
		}
 8015e4e:	bd08      	pop	{r3, pc}
			if (length != 2) return false;
 8015e50:	2000      	movs	r0, #0
 8015e52:	e7fc      	b.n	8015e4e <_ZZN17MasterSubscribers12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x18>

08015e54 <_ZN17MasterSubscribers15AddressAcceptedEhh>:
bool MasterSubscribers::AddressAccepted(uint8_t ID, uint8_t address) {
 8015e54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015e56:	4616      	mov	r6, r2
	uint8_t index = FindSubscriberIndex(ID, &success);
 8015e58:	f10d 0207 	add.w	r2, sp, #7
bool MasterSubscribers::AddressAccepted(uint8_t ID, uint8_t address) {
 8015e5c:	4605      	mov	r5, r0
	uint8_t index = FindSubscriberIndex(ID, &success);
 8015e5e:	f7ff ffa1 	bl	8015da4 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb>
	if (!success) return false;
 8015e62:	f89d 7007 	ldrb.w	r7, [sp, #7]
	uint8_t index = FindSubscriberIndex(ID, &success);
 8015e66:	4604      	mov	r4, r0
	if (!success) return false;
 8015e68:	b1ef      	cbz	r7, 8015ea6 <_ZN17MasterSubscribers15AddressAcceptedEhh+0x52>
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 8015e6a:	f04f 31ff 	mov.w	r1, #4294967295
 8015e6e:	68a8      	ldr	r0, [r5, #8]
 8015e70:	f7f6 f992 	bl	800c198 <osSemaphoreAcquire>
 8015e74:	68ea      	ldr	r2, [r5, #12]
 8015e76:	b223      	sxth	r3, r4
 8015e78:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015e7c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015e80:	e9d3 3207 	ldrd	r3, r2, [r3, #28]
	if (configurations[index].filters.size() == 0) {
 8015e84:	429a      	cmp	r2, r3
 8015e86:	d109      	bne.n	8015e9c <_ZN17MasterSubscribers15AddressAcceptedEhh+0x48>
		osSemaphoreRelease(SubscribersSemaphore);
 8015e88:	68a8      	ldr	r0, [r5, #8]
 8015e8a:	f7f6 f9b9 	bl	800c200 <osSemaphoreRelease>
}
 8015e8e:	4638      	mov	r0, r7
 8015e90:	b003      	add	sp, #12
 8015e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (uint8_t filtered_address : configurations[index].filters) {
 8015e94:	f813 1b01 	ldrb.w	r1, [r3], #1
		if (filtered_address == address) {
 8015e98:	42b1      	cmp	r1, r6
 8015e9a:	e7f4      	b.n	8015e86 <_ZN17MasterSubscribers15AddressAcceptedEhh+0x32>
	for (uint8_t filtered_address : configurations[index].filters) {
 8015e9c:	4293      	cmp	r3, r2
 8015e9e:	d1f9      	bne.n	8015e94 <_ZN17MasterSubscribers15AddressAcceptedEhh+0x40>
	osSemaphoreRelease(SubscribersSemaphore);
 8015ea0:	68a8      	ldr	r0, [r5, #8]
 8015ea2:	f7f6 f9ad 	bl	800c200 <osSemaphoreRelease>
	if (!success) return false;
 8015ea6:	2700      	movs	r7, #0
 8015ea8:	e7f1      	b.n	8015e8e <_ZN17MasterSubscribers15AddressAcceptedEhh+0x3a>

08015eaa <_ZN17MasterSubscribers12ClearFiltersEh>:
bool MasterSubscribers::ClearFilters(uint8_t ID) {
 8015eaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t index = FindSubscriberIndex(ID, &success);
 8015eac:	f10d 0207 	add.w	r2, sp, #7
bool MasterSubscribers::ClearFilters(uint8_t ID) {
 8015eb0:	4605      	mov	r5, r0
	uint8_t index = FindSubscriberIndex(ID, &success);
 8015eb2:	f7ff ff77 	bl	8015da4 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb>
	if (!success) return false;
 8015eb6:	f89d 6007 	ldrb.w	r6, [sp, #7]
	uint8_t index = FindSubscriberIndex(ID, &success);
 8015eba:	4604      	mov	r4, r0
	if (!success) return false;
 8015ebc:	b196      	cbz	r6, 8015ee4 <_ZN17MasterSubscribers12ClearFiltersEh+0x3a>
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 8015ebe:	f04f 31ff 	mov.w	r1, #4294967295
 8015ec2:	68a8      	ldr	r0, [r5, #8]
 8015ec4:	f7f6 f968 	bl	800c198 <osSemaphoreAcquire>
	return *(this->_M_impl._M_start + __n);
 8015ec8:	68ea      	ldr	r2, [r5, #12]
 8015eca:	b223      	sxth	r3, r4
	osSemaphoreRelease(SubscribersSemaphore);
 8015ecc:	68a8      	ldr	r0, [r5, #8]
 8015ece:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015ed2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8015ed6:	e9d3 2107 	ldrd	r2, r1, [r3, #28]
 8015eda:	428a      	cmp	r2, r1
	    this->_M_impl._M_finish = __pos;
 8015edc:	bf18      	it	ne
 8015ede:	621a      	strne	r2, [r3, #32]
 8015ee0:	f7f6 f98e 	bl	800c200 <osSemaphoreRelease>
}
 8015ee4:	4630      	mov	r0, r6
 8015ee6:	b002      	add	sp, #8
 8015ee8:	bd70      	pop	{r4, r5, r6, pc}

08015eea <_ZZN17MasterSubscribers12AddRegistersEvENUlPvtPhtE1_4_FUNES0_tS1_t>:
			self->ClearFilters(*input);
 8015eea:	7811      	ldrb	r1, [r2, #0]
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8015eec:	b508      	push	{r3, lr}
			self->ClearFilters(*input);
 8015eee:	f7ff ffdc 	bl	8015eaa <_ZN17MasterSubscribers12ClearFiltersEh>
		}
 8015ef2:	2001      	movs	r0, #1
 8015ef4:	bd08      	pop	{r3, pc}
	...

08015ef8 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb>:
 * @param input remote_register: register configuration with only address filled
 * @param input interface: interface from which the published data comes from
 * @param output success: whether successful
 * @return the register configuration index from the subscriber
 */
uint8_t MasterSubscribers::FindRemoteRegisterIndex(uint8_t ID, Register remote_register, SubscriberInterface interface, bool* success) {
 8015ef8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8015efc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8015efe:	ac02      	add	r4, sp, #8
 8015f00:	4605      	mov	r5, r0
 8015f02:	e904 000c 	stmdb	r4, {r2, r3}
	uint8_t subscriber_index = FindSubscriberIndex(ID, success);
 8015f06:	4632      	mov	r2, r6
 8015f08:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 8015f0c:	f89d 7029 	ldrb.w	r7, [sp, #41]	@ 0x29
 8015f10:	f7ff ff48 	bl	8015da4 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb>
	if (not *success)
 8015f14:	7833      	ldrb	r3, [r6, #0]
	uint8_t subscriber_index = FindSubscriberIndex(ID, success);
 8015f16:	4604      	mov	r4, r0
	if (not *success)
 8015f18:	b1eb      	cbz	r3, 8015f56 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x5e>
		return 0;

	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 8015f1a:	f04f 31ff 	mov.w	r1, #4294967295
 8015f1e:	68a8      	ldr	r0, [r5, #8]
 8015f20:	f7f6 f93a 	bl	800c198 <osSemaphoreAcquire>
	return *(this->_M_impl._M_start + __n);
 8015f24:	68ea      	ldr	r2, [r5, #12]
 8015f26:	b223      	sxth	r3, r4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015f28:	4920      	ldr	r1, [pc, #128]	@ (8015fac <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0xb4>)
	for (uint8_t index = 0; index < configurations[subscriber_index].remote_registers.size(); index++) {
		Register subscribed_register = configurations[subscriber_index].remote_registers[index];
		SubscriberInterface subscribed_interface = configurations[subscriber_index].interfaces[index];

		if (remote_register.address == subscribed_register.address) {
 8015f2a:	f8bd e000 	ldrh.w	lr, [sp]
		Register subscribed_register = configurations[subscriber_index].remote_registers[index];
 8015f2e:	f04f 0906 	mov.w	r9, #6
	return *(this->_M_impl._M_start + __n);
 8015f32:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015f36:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015f3a:	e9d2 4301 	ldrd	r4, r3, [r2, #4]
 8015f3e:	1b1b      	subs	r3, r3, r4
 8015f40:	105b      	asrs	r3, r3, #1
 8015f42:	434b      	muls	r3, r1
	for (uint8_t index = 0; index < configurations[subscriber_index].remote_registers.size(); index++) {
 8015f44:	2100      	movs	r1, #0
 8015f46:	b2c8      	uxtb	r0, r1
 8015f48:	4298      	cmp	r0, r3
 8015f4a:	d306      	bcc.n	8015f5a <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x62>
//					}
				}
			}
		}
	}
	osSemaphoreRelease(SubscribersSemaphore);
 8015f4c:	68a8      	ldr	r0, [r5, #8]
 8015f4e:	f7f6 f957 	bl	800c200 <osSemaphoreRelease>
	*success = false;
 8015f52:	2300      	movs	r3, #0
 8015f54:	7033      	strb	r3, [r6, #0]
		return 0;
 8015f56:	2400      	movs	r4, #0
 8015f58:	e01d      	b.n	8015f96 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x9e>
		Register subscribed_register = configurations[subscriber_index].remote_registers[index];
 8015f5a:	fb09 fc00 	mul.w	ip, r9, r0
		if (remote_register.address == subscribed_register.address) {
 8015f5e:	f834 c00c 	ldrh.w	ip, [r4, ip]
 8015f62:	45f4      	cmp	ip, lr
 8015f64:	d120      	bne.n	8015fa8 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0xb0>
	return *(this->_M_impl._M_start + __n);
 8015f66:	f8d2 c010 	ldr.w	ip, [r2, #16]
 8015f6a:	eb0c 0a40 	add.w	sl, ip, r0, lsl #1
		SubscriberInterface subscribed_interface = configurations[subscriber_index].interfaces[index];
 8015f6e:	f81c c010 	ldrb.w	ip, [ip, r0, lsl #1]
			if (interface.interface == subscribed_interface.interface || subscribed_interface.interface == ALL_INTERFACES || interface.interface == ALL_INTERFACES) {
 8015f72:	45c4      	cmp	ip, r8
 8015f74:	d005      	beq.n	8015f82 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x8a>
 8015f76:	f1bc 0f07 	cmp.w	ip, #7
 8015f7a:	d002      	beq.n	8015f82 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x8a>
 8015f7c:	f1b8 0f07 	cmp.w	r8, #7
 8015f80:	d112      	bne.n	8015fa8 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0xb0>
		SubscriberInterface subscribed_interface = configurations[subscriber_index].interfaces[index];
 8015f82:	f89a c001 	ldrb.w	ip, [sl, #1]
				if (interface.address == subscribed_interface.address || subscribed_interface.address == ALL || interface.address == ALL) {
 8015f86:	4567      	cmp	r7, ip
 8015f88:	d109      	bne.n	8015f9e <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0xa6>
 8015f8a:	4604      	mov	r4, r0
					osSemaphoreRelease(SubscribersSemaphore);
 8015f8c:	68a8      	ldr	r0, [r5, #8]
 8015f8e:	f7f6 f937 	bl	800c200 <osSemaphoreRelease>
					*success = true;
 8015f92:	2301      	movs	r3, #1
 8015f94:	7033      	strb	r3, [r6, #0]
	return 0;

}
 8015f96:	4620      	mov	r0, r4
 8015f98:	b002      	add	sp, #8
 8015f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (interface.address == subscribed_interface.address || subscribed_interface.address == ALL || interface.address == ALL) {
 8015f9e:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8015fa2:	d0f2      	beq.n	8015f8a <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x92>
 8015fa4:	2fff      	cmp	r7, #255	@ 0xff
 8015fa6:	d0f0      	beq.n	8015f8a <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x92>
	for (uint8_t index = 0; index < configurations[subscriber_index].remote_registers.size(); index++) {
 8015fa8:	3101      	adds	r1, #1
 8015faa:	e7cc      	b.n	8015f46 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x4e>
 8015fac:	aaaaaaab 	.word	0xaaaaaaab

08015fb0 <_ZN17MasterSubscribers26SubscribedToRemoteRegisterEh8Register19SubscriberInterface>:
bool MasterSubscribers::SubscribedToRemoteRegister(uint8_t ID, Register remote_register, SubscriberInterface interface) {
 8015fb0:	b510      	push	{r4, lr}
 8015fb2:	b086      	sub	sp, #24
 8015fb4:	ac02      	add	r4, sp, #8
 8015fb6:	e884 000c 	stmia.w	r4, {r2, r3}
	FindRemoteRegisterIndex(ID, remote_register, interface, &success);
 8015fba:	f10d 0317 	add.w	r3, sp, #23
 8015fbe:	9301      	str	r3, [sp, #4]
 8015fc0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8015fc4:	f8ad 3000 	strh.w	r3, [sp]
 8015fc8:	e894 000c 	ldmia.w	r4, {r2, r3}
 8015fcc:	f7ff ff94 	bl	8015ef8 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb>
}
 8015fd0:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8015fd4:	b006      	add	sp, #24
 8015fd6:	bd10      	pop	{r4, pc}

08015fd8 <_ZN17MasterSubscribers18FindRemoteRegisterE8Register19SubscriberInterfacePb>:
Register MasterSubscribers::FindRemoteRegister(Register remote_register, SubscriberInterface interface, bool* success) {
 8015fd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015fdc:	460d      	mov	r5, r1
 8015fde:	af02      	add	r7, sp, #8
 8015fe0:	4604      	mov	r4, r0
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 8015fe2:	f04f 31ff 	mov.w	r1, #4294967295
 8015fe6:	68a8      	ldr	r0, [r5, #8]
Register MasterSubscribers::FindRemoteRegister(Register remote_register, SubscriberInterface interface, bool* success) {
 8015fe8:	f8dd 9034 	ldr.w	r9, [sp, #52]	@ 0x34
 8015fec:	e887 000c 	stmia.w	r7, {r2, r3}
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 8015ff0:	f7f6 f8d2 	bl	800c198 <osSemaphoreAcquire>
 8015ff4:	e9d5 6a03 	ldrd	r6, sl, [r5, #12]
	for (SubscriberConfiguration &configuration : configurations) {
 8015ff8:	4556      	cmp	r6, sl
 8015ffa:	46b0      	mov	r8, r6
 8015ffc:	d108      	bne.n	8016010 <_ZN17MasterSubscribers18FindRemoteRegisterE8Register19SubscriberInterfacePb+0x38>
	osSemaphoreRelease(SubscribersSemaphore);
 8015ffe:	68a8      	ldr	r0, [r5, #8]
 8016000:	f7f6 f8fe 	bl	800c200 <osSemaphoreRelease>
	*success = false;
 8016004:	2300      	movs	r3, #0
 8016006:	f889 3000 	strb.w	r3, [r9]
	return Register();
 801600a:	6023      	str	r3, [r4, #0]
 801600c:	80a3      	strh	r3, [r4, #4]
 801600e:	e022      	b.n	8016056 <_ZN17MasterSubscribers18FindRemoteRegisterE8Register19SubscriberInterfacePb+0x7e>
		index = FindRemoteRegisterIndex(configuration.ID, remote_register, interface, success);
 8016010:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 8016014:	4628      	mov	r0, r5
 8016016:	f816 1b28 	ldrb.w	r1, [r6], #40
 801601a:	f8cd 9004 	str.w	r9, [sp, #4]
 801601e:	f8ad 3000 	strh.w	r3, [sp]
 8016022:	e897 000c 	ldmia.w	r7, {r2, r3}
 8016026:	f7ff ff67 	bl	8015ef8 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb>
		if (*success) {
 801602a:	f899 2000 	ldrb.w	r2, [r9]
 801602e:	2a00      	cmp	r2, #0
 8016030:	d0e2      	beq.n	8015ff8 <_ZN17MasterSubscribers18FindRemoteRegisterE8Register19SubscriberInterfacePb+0x20>
 8016032:	b203      	sxth	r3, r0
 8016034:	f8d8 1004 	ldr.w	r1, [r8, #4]
			osSemaphoreRelease(SubscribersSemaphore);
 8016038:	68a8      	ldr	r0, [r5, #8]
 801603a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801603e:	eb01 0243 	add.w	r2, r1, r3, lsl #1
			Register found_register = configuration.remote_registers[index];
 8016042:	f831 8013 	ldrh.w	r8, [r1, r3, lsl #1]
 8016046:	8896      	ldrh	r6, [r2, #4]
 8016048:	8857      	ldrh	r7, [r2, #2]
			osSemaphoreRelease(SubscribersSemaphore);
 801604a:	f7f6 f8d9 	bl	800c200 <osSemaphoreRelease>
			return found_register;
 801604e:	f8a4 8000 	strh.w	r8, [r4]
 8016052:	8067      	strh	r7, [r4, #2]
 8016054:	80a6      	strh	r6, [r4, #4]
}
 8016056:	4620      	mov	r0, r4
 8016058:	b004      	add	sp, #16
 801605a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08016060 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8016060:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016064:	e9d0 8900 	ldrd	r8, r9, [r0]
	if (max_size() - size() < __n)
 8016068:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801606c:	4607      	mov	r7, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801606e:	eba9 0408 	sub.w	r4, r9, r8
 8016072:	468a      	mov	sl, r1
 8016074:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 8016076:	429c      	cmp	r4, r3
 8016078:	d102      	bne.n	8016080 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x20>
	  __throw_length_error(__N(__s));
 801607a:	481e      	ldr	r0, [pc, #120]	@ (80160f4 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x94>)
 801607c:	f000 fafe 	bl	801667c <_ZSt20__throw_length_errorPKc>
 8016080:	2c01      	cmp	r4, #1
 8016082:	4622      	mov	r2, r4
    { return __lhs.base() - __rhs.base(); }
 8016084:	eba1 0508 	sub.w	r5, r1, r8
 8016088:	bf38      	it	cc
 801608a:	2201      	movcc	r2, #1
 801608c:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801608e:	d22d      	bcs.n	80160ec <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x8c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8016090:	b374      	cbz	r4, 80160f0 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x90>
 8016092:	429c      	cmp	r4, r3
 8016094:	bf28      	it	cs
 8016096:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8016098:	4620      	mov	r0, r4
 801609a:	f000 fa3a 	bl	8016512 <_Znwj>
 801609e:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80160a0:	f89b 3000 	ldrb.w	r3, [fp]
      if (__count > 0)
 80160a4:	2d00      	cmp	r5, #0
 80160a6:	5573      	strb	r3, [r6, r5]
 80160a8:	dd04      	ble.n	80160b4 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x54>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80160aa:	462a      	mov	r2, r5
 80160ac:	4641      	mov	r1, r8
 80160ae:	4630      	mov	r0, r6
 80160b0:	f000 fbbc 	bl	801682c <memmove>
      ptrdiff_t __count = __last - __first;
 80160b4:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
 80160b8:	3501      	adds	r5, #1
      if (__count > 0)
 80160ba:	f1b9 0f00 	cmp.w	r9, #0
 80160be:	4435      	add	r5, r6
 80160c0:	dd04      	ble.n	80160cc <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x6c>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80160c2:	464a      	mov	r2, r9
 80160c4:	4651      	mov	r1, sl
 80160c6:	4628      	mov	r0, r5
 80160c8:	f000 fca8 	bl	8016a1c <memcpy>
      return __result + __count;
 80160cc:	444d      	add	r5, r9
	if (__p)
 80160ce:	f1b8 0f00 	cmp.w	r8, #0
 80160d2:	d005      	beq.n	80160e0 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x80>
		    this->_M_impl._M_end_of_storage - __old_start);
 80160d4:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80160d6:	4640      	mov	r0, r8
 80160d8:	eba1 0108 	sub.w	r1, r1, r8
 80160dc:	f000 f9f4 	bl	80164c8 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 80160e0:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80160e4:	4426      	add	r6, r4
 80160e6:	60be      	str	r6, [r7, #8]
    }
 80160e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80160ec:	461c      	mov	r4, r3
 80160ee:	e7d3      	b.n	8016098 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x38>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80160f0:	4626      	mov	r6, r4
 80160f2:	e7d5      	b.n	80160a0 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x40>
 80160f4:	08016b36 	.word	0x08016b36

080160f8 <_ZN17MasterSubscribers9AddFilterEhh>:
bool MasterSubscribers::AddFilter(uint8_t ID, uint8_t address) {
 80160f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80160fa:	f88d 2007 	strb.w	r2, [sp, #7]
	uint8_t index = FindSubscriberIndex(ID, &success);
 80160fe:	f10d 020f 	add.w	r2, sp, #15
bool MasterSubscribers::AddFilter(uint8_t ID, uint8_t address) {
 8016102:	4604      	mov	r4, r0
	uint8_t index = FindSubscriberIndex(ID, &success);
 8016104:	f7ff fe4e 	bl	8015da4 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb>
	if (!success) return false;
 8016108:	f89d 500f 	ldrb.w	r5, [sp, #15]
	uint8_t index = FindSubscriberIndex(ID, &success);
 801610c:	4601      	mov	r1, r0
	if (!success) return false;
 801610e:	b91d      	cbnz	r5, 8016118 <_ZN17MasterSubscribers9AddFilterEhh+0x20>
 8016110:	2500      	movs	r5, #0
}
 8016112:	4628      	mov	r0, r5
 8016114:	b004      	add	sp, #16
 8016116:	bd70      	pop	{r4, r5, r6, pc}
	return *(this->_M_impl._M_start + __n);
 8016118:	b203      	sxth	r3, r0
 801611a:	68e2      	ldr	r2, [r4, #12]
 801611c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8016120:	00de      	lsls	r6, r3, #3
 8016122:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	if (configurations[index].filters.size() > 0 && AddressAccepted(index, address)) // if address already filtered, return
 8016126:	e9d3 2307 	ldrd	r2, r3, [r3, #28]
 801612a:	429a      	cmp	r2, r3
 801612c:	d110      	bne.n	8016150 <_ZN17MasterSubscribers9AddFilterEhh+0x58>
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 801612e:	f04f 31ff 	mov.w	r1, #4294967295
 8016132:	68a0      	ldr	r0, [r4, #8]
 8016134:	f7f6 f830 	bl	800c198 <osSemaphoreAcquire>
 8016138:	68e0      	ldr	r0, [r4, #12]
 801613a:	4430      	add	r0, r6
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801613c:	e9d0 1308 	ldrd	r1, r3, [r0, #32]
 8016140:	4299      	cmp	r1, r3
 8016142:	d10d      	bne.n	8016160 <_ZN17MasterSubscribers9AddFilterEhh+0x68>
	  _M_realloc_insert(end(), __x);
 8016144:	f10d 0207 	add.w	r2, sp, #7
 8016148:	301c      	adds	r0, #28
 801614a:	f7ff ff89 	bl	8016060 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>
 801614e:	e00d      	b.n	801616c <_ZN17MasterSubscribers9AddFilterEhh+0x74>
	if (configurations[index].filters.size() > 0 && AddressAccepted(index, address)) // if address already filtered, return
 8016150:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8016154:	4620      	mov	r0, r4
 8016156:	f7ff fe7d 	bl	8015e54 <_ZN17MasterSubscribers15AddressAcceptedEhh>
 801615a:	2800      	cmp	r0, #0
 801615c:	d0e7      	beq.n	801612e <_ZN17MasterSubscribers9AddFilterEhh+0x36>
 801615e:	e7d7      	b.n	8016110 <_ZN17MasterSubscribers9AddFilterEhh+0x18>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8016160:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8016164:	700b      	strb	r3, [r1, #0]
	    ++this->_M_impl._M_finish;
 8016166:	6a03      	ldr	r3, [r0, #32]
 8016168:	3301      	adds	r3, #1
 801616a:	6203      	str	r3, [r0, #32]
	osSemaphoreRelease(SubscribersSemaphore);
 801616c:	68a0      	ldr	r0, [r4, #8]
 801616e:	f7f6 f847 	bl	800c200 <osSemaphoreRelease>
	return true;
 8016172:	e7ce      	b.n	8016112 <_ZN17MasterSubscribers9AddFilterEhh+0x1a>

08016174 <_ZZN17MasterSubscribers12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 8016174:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8016176:	4611      	mov	r1, r2
 8016178:	b508      	push	{r3, lr}
			if (length != 2) return false;
 801617a:	d105      	bne.n	8016188 <_ZZN17MasterSubscribers12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t+0x14>
			self->AddFilter(input[0], input[1]);
 801617c:	7852      	ldrb	r2, [r2, #1]
 801617e:	7809      	ldrb	r1, [r1, #0]
 8016180:	f7ff ffba 	bl	80160f8 <_ZN17MasterSubscribers9AddFilterEhh>
 8016184:	2001      	movs	r0, #1
		}
 8016186:	bd08      	pop	{r3, pc}
			if (length != 2) return false;
 8016188:	2000      	movs	r0, #0
 801618a:	e7fc      	b.n	8016186 <_ZZN17MasterSubscribers12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t+0x12>

0801618c <_ZN9Registers11AddRegisterIhEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 801618c:	b570      	push	{r4, r5, r6, lr}
 801618e:	4604      	mov	r4, r0
 8016190:	b086      	sub	sp, #24
 8016192:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8016194:	6800      	ldr	r0, [r0, #0]
 8016196:	f04f 31ff 	mov.w	r1, #4294967295
 801619a:	f7f5 fffd 	bl	800c198 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 801619e:	f10d 0207 	add.w	r2, sp, #7
 80161a2:	4631      	mov	r1, r6
 80161a4:	4620      	mov	r0, r4
 80161a6:	f7fe fdd8 	bl	8014d5a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 80161aa:	f89d 5007 	ldrb.w	r5, [sp, #7]
 80161ae:	b125      	cbz	r5, 80161ba <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 80161b0:	6820      	ldr	r0, [r4, #0]
 80161b2:	f7f6 f825 	bl	800c200 <osSemaphoreRelease>
}
 80161b6:	b006      	add	sp, #24
 80161b8:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 80161ba:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 80161be:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 80161c2:	f7ff fd8b 	bl	8015cdc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	configuration_.register_info = register_;
 80161c6:	2301      	movs	r3, #1
 80161c8:	f8ad 600a 	strh.w	r6, [sp, #10]
 80161cc:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 80161d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 80161d4:	f88d 000c 	strb.w	r0, [sp, #12]
 80161d8:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 80161dc:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d0e5      	beq.n	80161b0 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
      push_back(const value_type& __x)
 80161e4:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80161e6:	e9d4 5302 	ldrd	r5, r3, [r4, #8]
 80161ea:	429d      	cmp	r5, r3
 80161ec:	d005      	beq.n	80161fa <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x6e>
 80161ee:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 80161f0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 80161f4:	3510      	adds	r5, #16
 80161f6:	60a5      	str	r5, [r4, #8]
 80161f8:	e7da      	b.n	80161b0 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
	  _M_realloc_insert(end(), __x);
 80161fa:	4629      	mov	r1, r5
 80161fc:	1d20      	adds	r0, r4, #4
 80161fe:	f7f8 fce5 	bl	800ebcc <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 8016202:	e7d5      	b.n	80161b0 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>

08016204 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8016204:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016208:	460c      	mov	r4, r1
 801620a:	b087      	sub	sp, #28
 801620c:	4606      	mov	r6, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801620e:	f04f 31ff 	mov.w	r1, #4294967295
 8016212:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8016214:	4698      	mov	r8, r3
 8016216:	4691      	mov	r9, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8016218:	f7f5 ffbe 	bl	800c198 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801621c:	4621      	mov	r1, r4
 801621e:	f10d 0207 	add.w	r2, sp, #7
 8016222:	4630      	mov	r0, r6
 8016224:	f7fe fd99 	bl	8014d5a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8016228:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801622c:	4604      	mov	r4, r0
	if (!success) {
 801622e:	b92b      	cbnz	r3, 801623c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x38>
	osSemaphoreRelease(RegistersSemaphore);
 8016230:	6830      	ldr	r0, [r6, #0]
 8016232:	f7f5 ffe5 	bl	800c200 <osSemaphoreRelease>
}
 8016236:	b007      	add	sp, #28
 8016238:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 801623c:	f10d 0007 	add.w	r0, sp, #7
 8016240:	f7ff fd4c 	bl	8015cdc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 8016244:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8016248:	2b00      	cmp	r3, #0
 801624a:	d0f1      	beq.n	8016230 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (target_register->register_info.type != registered_type) {
 801624c:	7923      	ldrb	r3, [r4, #4]
 801624e:	4298      	cmp	r0, r3
 8016250:	d1ee      	bne.n	8016230 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (callbacks[target_register->register_info.type] == NULL) {
 8016252:	3004      	adds	r0, #4
 8016254:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
 8016258:	2f00      	cmp	r7, #0
 801625a:	d0e9      	beq.n	8016230 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 801625c:	7821      	ldrb	r1, [r4, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801625e:	e9d7 3500 	ldrd	r3, r5, [r7]
 8016262:	1aea      	subs	r2, r5, r3
 8016264:	1112      	asrs	r2, r2, #4
 8016266:	b9b1      	cbnz	r1, 8016296 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x92>
 8016268:	7861      	ldrb	r1, [r4, #1]
 801626a:	b9a1      	cbnz	r1, 8016296 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x92>
		callback.read = NULL;
 801626c:	9105      	str	r1, [sp, #20]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801626e:	68b9      	ldr	r1, [r7, #8]
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8016270:	8162      	strh	r2, [r4, #10]
      push_back(const value_type& __x)
 8016272:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8016274:	42a9      	cmp	r1, r5
		callback.write = write;
 8016276:	e9cd 9803 	strd	r9, r8, [sp, #12]
 801627a:	d008      	beq.n	801628e <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x8a>
 801627c:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 801627e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8016282:	3510      	adds	r5, #16
 8016284:	607d      	str	r5, [r7, #4]
	target_register->mode.callbacks = true;
 8016286:	2301      	movs	r3, #1
 8016288:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 801628a:	7223      	strb	r3, [r4, #8]
 801628c:	e7d0      	b.n	8016230 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	  _M_realloc_insert(end(), __x);
 801628e:	4638      	mov	r0, r7
 8016290:	f7f8 fd38 	bl	800ed04 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	} else {
 8016294:	e7f7      	b.n	8016286 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x82>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8016296:	8961      	ldrh	r1, [r4, #10]
	if (__n >= this->size())
 8016298:	4291      	cmp	r1, r2
 801629a:	d302      	bcc.n	80162a2 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x9e>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 801629c:	4803      	ldr	r0, [pc, #12]	@ (80162ac <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0xa8>)
 801629e:	f000 f9f0 	bl	8016682 <_ZSt24__throw_out_of_range_fmtPKcz>
	return *(this->_M_impl._M_start + __n);
 80162a2:	eb03 1301 	add.w	r3, r3, r1, lsl #4
		callback->write = write;
 80162a6:	e9c3 9801 	strd	r9, r8, [r3, #4]
 80162aa:	e7ec      	b.n	8016286 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x82>
 80162ac:	08016d78 	.word	0x08016d78

080162b0 <_ZN17MasterSubscribers12AddRegistersEv>:
void MasterSubscribers::AddRegisters(void) {
 80162b0:	b510      	push	{r4, lr}
 80162b2:	4604      	mov	r4, r0
	registers->AddRegister<uint8_t>(REG_SUB_SET_STATUS);
 80162b4:	2120      	movs	r1, #32
 80162b6:	6800      	ldr	r0, [r0, #0]
 80162b8:	f7ff ff68 	bl	801618c <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_SUB_SET_STATUS, 2);
 80162bc:	2202      	movs	r2, #2
 80162be:	2120      	movs	r1, #32
 80162c0:	6820      	ldr	r0, [r4, #0]
 80162c2:	f7fe fd9f 	bl	8014e04 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_SUB_SET_STATUS, (void*) this,
 80162c6:	4b12      	ldr	r3, [pc, #72]	@ (8016310 <_ZN17MasterSubscribers12AddRegistersEv+0x60>)
 80162c8:	4622      	mov	r2, r4
 80162ca:	6820      	ldr	r0, [r4, #0]
 80162cc:	2120      	movs	r1, #32
 80162ce:	f7ff ff99 	bl	8016204 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_SUB_ADD_FILTER);
 80162d2:	6820      	ldr	r0, [r4, #0]
 80162d4:	2121      	movs	r1, #33	@ 0x21
 80162d6:	f7ff ff59 	bl	801618c <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_SUB_ADD_FILTER, 2);
 80162da:	2202      	movs	r2, #2
 80162dc:	2121      	movs	r1, #33	@ 0x21
 80162de:	6820      	ldr	r0, [r4, #0]
 80162e0:	f7fe fd90 	bl	8014e04 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_SUB_ADD_FILTER, (void*) this,
 80162e4:	4622      	mov	r2, r4
 80162e6:	4b0b      	ldr	r3, [pc, #44]	@ (8016314 <_ZN17MasterSubscribers12AddRegistersEv+0x64>)
 80162e8:	2121      	movs	r1, #33	@ 0x21
 80162ea:	6820      	ldr	r0, [r4, #0]
 80162ec:	f7ff ff8a 	bl	8016204 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_SUB_CLEAR_FILTERS);
 80162f0:	6820      	ldr	r0, [r4, #0]
 80162f2:	2122      	movs	r1, #34	@ 0x22
 80162f4:	f7ff ff4a 	bl	801618c <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_SUB_CLEAR_FILTERS);
 80162f8:	2122      	movs	r1, #34	@ 0x22
 80162fa:	6820      	ldr	r0, [r4, #0]
 80162fc:	f7fe fd66 	bl	8014dcc <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_SUB_CLEAR_FILTERS, (void*) this,
 8016300:	4622      	mov	r2, r4
 8016302:	6820      	ldr	r0, [r4, #0]
 8016304:	2122      	movs	r1, #34	@ 0x22
 8016306:	4b04      	ldr	r3, [pc, #16]	@ (8016318 <_ZN17MasterSubscribers12AddRegistersEv+0x68>)
}
 8016308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	registers->AddWriteCallback<uint8_t>(REG_SUB_CLEAR_FILTERS, (void*) this,
 801630c:	f7ff bf7a 	b.w	8016204 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
 8016310:	08015e37 	.word	0x08015e37
 8016314:	08016175 	.word	0x08016175
 8016318:	08015eeb 	.word	0x08015eeb

0801631c <_ZL8UserTaskPv>:
		.priority = (osPriority_t) osPriorityLow,
	};
	osThreadNew(UserTask, &class_instances_argument, &UserTask_attributes);
}

static void UserTask(void *argument) {
 801631c:	b510      	push	{r4, lr}
	Communication* communication = class_instances_pointer->communication;
	Services* services = class_instances_pointer->services;
	Publishers* publishers = class_instances_pointer->publishers;
	HardwareDelay* hardware_delay = class_instances_pointer->hardware_delay;
	Sensors* sensors = class_instances_pointer->sensors;
	LEDS* leds = class_instances_pointer->leds;
 801631e:	69c4      	ldr	r4, [r0, #28]

	for(;;) {
		leds->SetLED(LED_USER3, GPIO_PIN_SET);
 8016320:	2201      	movs	r2, #1
 8016322:	210c      	movs	r1, #12
 8016324:	4620      	mov	r0, r4
 8016326:	f7fb faaf 	bl	8011888 <_ZN4LEDS6SetLEDEh13GPIO_PinState>
		osDelay(500);
 801632a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 801632e:	f7f5 fec9 	bl	800c0c4 <osDelay>
		leds->SetLED(LED_USER3, GPIO_PIN_RESET);
 8016332:	2200      	movs	r2, #0
 8016334:	210c      	movs	r1, #12
 8016336:	4620      	mov	r0, r4
 8016338:	f7fb faa6 	bl	8011888 <_ZN4LEDS6SetLEDEh13GPIO_PinState>
		osDelay(500);
 801633c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8016340:	f7f5 fec0 	bl	800c0c4 <osDelay>
	for(;;) {
 8016344:	e7ec      	b.n	8016320 <_ZL8UserTaskPv+0x4>

08016346 <_ZN4UserC1EP9RegistersP17MasterSubscribersP13CommunicationP8ServicesP10PublishersP13HardwareDelayP7SensorsP4LEDS>:
User::User(	Registers* registers_,
 8016346:	b510      	push	{r4, lr}
	communication = communication_;
 8016348:	6083      	str	r3, [r0, #8]
	services = services_;
 801634a:	9b02      	ldr	r3, [sp, #8]
 801634c:	60c3      	str	r3, [r0, #12]
	publishers = publishers_;
 801634e:	9b03      	ldr	r3, [sp, #12]
 8016350:	6103      	str	r3, [r0, #16]
	hardware_delay = hardware_delay_;
 8016352:	9b04      	ldr	r3, [sp, #16]
 8016354:	6143      	str	r3, [r0, #20]
	sensors = sensors_;
 8016356:	9b05      	ldr	r3, [sp, #20]
 8016358:	6183      	str	r3, [r0, #24]
	leds = leds_;
 801635a:	9b06      	ldr	r3, [sp, #24]
	subscribers = subscribers_;
 801635c:	e9c0 1200 	strd	r1, r2, [r0]
	leds = leds_;
 8016360:	61c3      	str	r3, [r0, #28]
}
 8016362:	bd10      	pop	{r4, pc}

08016364 <_ZN4User4InitEv>:
}
 8016364:	4770      	bx	lr
	...

08016368 <_ZN4User12AddOSThreadsEv>:
void User::AddOSThreads(void) {
 8016368:	b530      	push	{r4, r5, lr}
	};
 801636a:	4d19      	ldr	r5, [pc, #100]	@ (80163d0 <_ZN4User12AddOSThreadsEv+0x68>)
void User::AddOSThreads(void) {
 801636c:	b08b      	sub	sp, #44	@ 0x2c
 801636e:	4604      	mov	r4, r0
	};
 8016370:	682b      	ldr	r3, [r5, #0]
 8016372:	f3bf 8f5b 	dmb	ish
 8016376:	07d9      	lsls	r1, r3, #31
 8016378:	d417      	bmi.n	80163aa <_ZN4User12AddOSThreadsEv+0x42>
 801637a:	4628      	mov	r0, r5
 801637c:	f000 f8ba 	bl	80164f4 <__cxa_guard_acquire>
 8016380:	b198      	cbz	r0, 80163aa <_ZN4User12AddOSThreadsEv+0x42>
 8016382:	6822      	ldr	r2, [r4, #0]
 8016384:	4628      	mov	r0, r5
 8016386:	4b13      	ldr	r3, [pc, #76]	@ (80163d4 <_ZN4User12AddOSThreadsEv+0x6c>)
 8016388:	601a      	str	r2, [r3, #0]
 801638a:	6862      	ldr	r2, [r4, #4]
 801638c:	605a      	str	r2, [r3, #4]
 801638e:	68a2      	ldr	r2, [r4, #8]
 8016390:	609a      	str	r2, [r3, #8]
 8016392:	68e2      	ldr	r2, [r4, #12]
 8016394:	60da      	str	r2, [r3, #12]
 8016396:	6922      	ldr	r2, [r4, #16]
 8016398:	611a      	str	r2, [r3, #16]
 801639a:	6962      	ldr	r2, [r4, #20]
 801639c:	615a      	str	r2, [r3, #20]
 801639e:	69a2      	ldr	r2, [r4, #24]
 80163a0:	619a      	str	r2, [r3, #24]
 80163a2:	69e2      	ldr	r2, [r4, #28]
 80163a4:	61da      	str	r2, [r3, #28]
 80163a6:	f000 f8b1 	bl	801650c <__cxa_guard_release>
	const osThreadAttr_t UserTask_attributes = {
 80163aa:	2220      	movs	r2, #32
 80163ac:	2100      	movs	r1, #0
 80163ae:	a802      	add	r0, sp, #8
 80163b0:	f000 fa56 	bl	8016860 <memset>
 80163b4:	4b08      	ldr	r3, [pc, #32]	@ (80163d8 <_ZN4User12AddOSThreadsEv+0x70>)
 80163b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
	osThreadNew(UserTask, &class_instances_argument, &UserTask_attributes);
 80163ba:	4906      	ldr	r1, [pc, #24]	@ (80163d4 <_ZN4User12AddOSThreadsEv+0x6c>)
	const osThreadAttr_t UserTask_attributes = {
 80163bc:	9301      	str	r3, [sp, #4]
 80163be:	2308      	movs	r3, #8
	osThreadNew(UserTask, &class_instances_argument, &UserTask_attributes);
 80163c0:	4806      	ldr	r0, [pc, #24]	@ (80163dc <_ZN4User12AddOSThreadsEv+0x74>)
	const osThreadAttr_t UserTask_attributes = {
 80163c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
	osThreadNew(UserTask, &class_instances_argument, &UserTask_attributes);
 80163c6:	aa01      	add	r2, sp, #4
 80163c8:	f7f5 fe1e 	bl	800c008 <osThreadNew>
}
 80163cc:	b00b      	add	sp, #44	@ 0x2c
 80163ce:	bd30      	pop	{r4, r5, pc}
 80163d0:	24006974 	.word	0x24006974
 80163d4:	24006978 	.word	0x24006978
 80163d8:	08016e88 	.word	0x08016e88
 80163dc:	0801631d 	.word	0x0801631d

080163e0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 80163e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80163e2:	2400      	movs	r4, #0
 80163e4:	2310      	movs	r3, #16
 80163e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80163ea:	6803      	ldr	r3, [r0, #0]
 80163ec:	4615      	mov	r5, r2
 80163ee:	699e      	ldr	r6, [r3, #24]
 80163f0:	6812      	ldr	r2, [r2, #0]
 80163f2:	466b      	mov	r3, sp
 80163f4:	e9cd 4400 	strd	r4, r4, [sp]
 80163f8:	47b0      	blx	r6
 80163fa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80163fe:	f003 0306 	and.w	r3, r3, #6
 8016402:	2b06      	cmp	r3, #6
 8016404:	bf03      	ittte	eq
 8016406:	9b00      	ldreq	r3, [sp, #0]
 8016408:	602b      	streq	r3, [r5, #0]
 801640a:	2001      	moveq	r0, #1
 801640c:	4620      	movne	r0, r4
 801640e:	b004      	add	sp, #16
 8016410:	bd70      	pop	{r4, r5, r6, pc}

08016412 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8016412:	9800      	ldr	r0, [sp, #0]
 8016414:	4290      	cmp	r0, r2
 8016416:	bf0c      	ite	eq
 8016418:	2006      	moveq	r0, #6
 801641a:	2001      	movne	r0, #1
 801641c:	4770      	bx	lr
	...

08016420 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8016420:	b510      	push	{r4, lr}
 8016422:	4b03      	ldr	r3, [pc, #12]	@ (8016430 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8016424:	6003      	str	r3, [r0, #0]
 8016426:	4604      	mov	r4, r0
 8016428:	f000 f905 	bl	8016636 <_ZNSt9type_infoD1Ev>
 801642c:	4620      	mov	r0, r4
 801642e:	bd10      	pop	{r4, pc}
 8016430:	08016ec4 	.word	0x08016ec4

08016434 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8016434:	b510      	push	{r4, lr}
 8016436:	4604      	mov	r4, r0
 8016438:	f7ff fff2 	bl	8016420 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 801643c:	4620      	mov	r0, r4
 801643e:	2108      	movs	r1, #8
 8016440:	f000 f842 	bl	80164c8 <_ZdlPvj>
 8016444:	4620      	mov	r0, r4
 8016446:	bd10      	pop	{r4, pc}

08016448 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8016448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801644c:	461f      	mov	r7, r3
 801644e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8016452:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8016456:	4598      	cmp	r8, r3
 8016458:	4606      	mov	r6, r0
 801645a:	4615      	mov	r5, r2
 801645c:	d107      	bne.n	801646e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 801645e:	9907      	ldr	r1, [sp, #28]
 8016460:	f000 f8ee 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 8016464:	b118      	cbz	r0, 801646e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8016466:	7165      	strb	r5, [r4, #5]
 8016468:	2000      	movs	r0, #0
 801646a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801646e:	4639      	mov	r1, r7
 8016470:	4630      	mov	r0, r6
 8016472:	f000 f8e5 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 8016476:	2800      	cmp	r0, #0
 8016478:	d0f6      	beq.n	8016468 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 801647a:	2301      	movs	r3, #1
 801647c:	f8c4 8000 	str.w	r8, [r4]
 8016480:	7125      	strb	r5, [r4, #4]
 8016482:	71a3      	strb	r3, [r4, #6]
 8016484:	e7f0      	b.n	8016468 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

08016486 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8016486:	b538      	push	{r3, r4, r5, lr}
 8016488:	4615      	mov	r5, r2
 801648a:	461c      	mov	r4, r3
 801648c:	f000 f8d8 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 8016490:	b120      	cbz	r0, 801649c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8016492:	2308      	movs	r3, #8
 8016494:	60e3      	str	r3, [r4, #12]
 8016496:	2306      	movs	r3, #6
 8016498:	6025      	str	r5, [r4, #0]
 801649a:	7123      	strb	r3, [r4, #4]
 801649c:	bd38      	pop	{r3, r4, r5, pc}

0801649e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 801649e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80164a2:	4605      	mov	r5, r0
 80164a4:	460c      	mov	r4, r1
 80164a6:	4616      	mov	r6, r2
 80164a8:	461f      	mov	r7, r3
 80164aa:	f000 f8c9 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 80164ae:	b948      	cbnz	r0, 80164c4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80164b0:	2f03      	cmp	r7, #3
 80164b2:	d807      	bhi.n	80164c4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80164b4:	6823      	ldr	r3, [r4, #0]
 80164b6:	4632      	mov	r2, r6
 80164b8:	4629      	mov	r1, r5
 80164ba:	4620      	mov	r0, r4
 80164bc:	695b      	ldr	r3, [r3, #20]
 80164be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80164c2:	4718      	bx	r3
 80164c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080164c8 <_ZdlPvj>:
 80164c8:	f000 b8df 	b.w	801668a <_ZdlPv>

080164cc <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>:
 80164cc:	b510      	push	{r4, lr}
 80164ce:	4b03      	ldr	r3, [pc, #12]	@ (80164dc <_ZN10__cxxabiv123__fundamental_type_infoD1Ev+0x10>)
 80164d0:	6003      	str	r3, [r0, #0]
 80164d2:	4604      	mov	r4, r0
 80164d4:	f000 f8af 	bl	8016636 <_ZNSt9type_infoD1Ev>
 80164d8:	4620      	mov	r0, r4
 80164da:	bd10      	pop	{r4, pc}
 80164dc:	08016f34 	.word	0x08016f34

080164e0 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>:
 80164e0:	b510      	push	{r4, lr}
 80164e2:	4604      	mov	r4, r0
 80164e4:	f7ff fff2 	bl	80164cc <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>
 80164e8:	4620      	mov	r0, r4
 80164ea:	2108      	movs	r1, #8
 80164ec:	f7ff ffec 	bl	80164c8 <_ZdlPvj>
 80164f0:	4620      	mov	r0, r4
 80164f2:	bd10      	pop	{r4, pc}

080164f4 <__cxa_guard_acquire>:
 80164f4:	6802      	ldr	r2, [r0, #0]
 80164f6:	07d2      	lsls	r2, r2, #31
 80164f8:	4603      	mov	r3, r0
 80164fa:	d405      	bmi.n	8016508 <__cxa_guard_acquire+0x14>
 80164fc:	7842      	ldrb	r2, [r0, #1]
 80164fe:	b102      	cbz	r2, 8016502 <__cxa_guard_acquire+0xe>
 8016500:	deff      	udf	#255	@ 0xff
 8016502:	2001      	movs	r0, #1
 8016504:	7058      	strb	r0, [r3, #1]
 8016506:	4770      	bx	lr
 8016508:	2000      	movs	r0, #0
 801650a:	4770      	bx	lr

0801650c <__cxa_guard_release>:
 801650c:	2301      	movs	r3, #1
 801650e:	6003      	str	r3, [r0, #0]
 8016510:	4770      	bx	lr

08016512 <_Znwj>:
 8016512:	2801      	cmp	r0, #1
 8016514:	bf38      	it	cc
 8016516:	2001      	movcc	r0, #1
 8016518:	b510      	push	{r4, lr}
 801651a:	4604      	mov	r4, r0
 801651c:	4620      	mov	r0, r4
 801651e:	f000 f8c7 	bl	80166b0 <malloc>
 8016522:	b100      	cbz	r0, 8016526 <_Znwj+0x14>
 8016524:	bd10      	pop	{r4, pc}
 8016526:	f000 f8b3 	bl	8016690 <_ZSt15get_new_handlerv>
 801652a:	b908      	cbnz	r0, 8016530 <_Znwj+0x1e>
 801652c:	f000 f8b8 	bl	80166a0 <abort>
 8016530:	4780      	blx	r0
 8016532:	e7f3      	b.n	801651c <_Znwj+0xa>

08016534 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8016534:	b510      	push	{r4, lr}
 8016536:	4b03      	ldr	r3, [pc, #12]	@ (8016544 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8016538:	6003      	str	r3, [r0, #0]
 801653a:	4604      	mov	r4, r0
 801653c:	f7ff ff70 	bl	8016420 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8016540:	4620      	mov	r0, r4
 8016542:	bd10      	pop	{r4, pc}
 8016544:	08016fc8 	.word	0x08016fc8

08016548 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8016548:	b510      	push	{r4, lr}
 801654a:	4604      	mov	r4, r0
 801654c:	f7ff fff2 	bl	8016534 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8016550:	4620      	mov	r0, r4
 8016552:	210c      	movs	r1, #12
 8016554:	f7ff ffb8 	bl	80164c8 <_ZdlPvj>
 8016558:	4620      	mov	r0, r4
 801655a:	bd10      	pop	{r4, pc}

0801655c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 801655c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016560:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8016564:	4590      	cmp	r8, r2
 8016566:	4606      	mov	r6, r0
 8016568:	460f      	mov	r7, r1
 801656a:	4615      	mov	r5, r2
 801656c:	461c      	mov	r4, r3
 801656e:	d00b      	beq.n	8016588 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 8016570:	68b0      	ldr	r0, [r6, #8]
 8016572:	6803      	ldr	r3, [r0, #0]
 8016574:	f8cd 8018 	str.w	r8, [sp, #24]
 8016578:	6a1e      	ldr	r6, [r3, #32]
 801657a:	462a      	mov	r2, r5
 801657c:	4623      	mov	r3, r4
 801657e:	4639      	mov	r1, r7
 8016580:	46b4      	mov	ip, r6
 8016582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016586:	4760      	bx	ip
 8016588:	4619      	mov	r1, r3
 801658a:	f000 f859 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 801658e:	2800      	cmp	r0, #0
 8016590:	d0ee      	beq.n	8016570 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 8016592:	2006      	movs	r0, #6
 8016594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016598 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8016598:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801659c:	460d      	mov	r5, r1
 801659e:	4619      	mov	r1, r3
 80165a0:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	@ 0x28
 80165a4:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	@ 0x30
 80165a8:	4681      	mov	r9, r0
 80165aa:	4617      	mov	r7, r2
 80165ac:	4698      	mov	r8, r3
 80165ae:	f000 f847 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 80165b2:	b190      	cbz	r0, 80165da <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 80165b4:	2d00      	cmp	r5, #0
 80165b6:	6034      	str	r4, [r6, #0]
 80165b8:	7137      	strb	r7, [r6, #4]
 80165ba:	db09      	blt.n	80165d0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 80165bc:	442c      	add	r4, r5
 80165be:	45a2      	cmp	sl, r4
 80165c0:	bf14      	ite	ne
 80165c2:	2401      	movne	r4, #1
 80165c4:	2406      	moveq	r4, #6
 80165c6:	71b4      	strb	r4, [r6, #6]
 80165c8:	2000      	movs	r0, #0
 80165ca:	b001      	add	sp, #4
 80165cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165d0:	3502      	adds	r5, #2
 80165d2:	d1f9      	bne.n	80165c8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80165d4:	2301      	movs	r3, #1
 80165d6:	71b3      	strb	r3, [r6, #6]
 80165d8:	e7f6      	b.n	80165c8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80165da:	4554      	cmp	r4, sl
 80165dc:	d106      	bne.n	80165ec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80165de:	4659      	mov	r1, fp
 80165e0:	4648      	mov	r0, r9
 80165e2:	f000 f82d 	bl	8016640 <_ZNKSt9type_info7__equalERKS_>
 80165e6:	b108      	cbz	r0, 80165ec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80165e8:	7177      	strb	r7, [r6, #5]
 80165ea:	e7ed      	b.n	80165c8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80165ec:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80165f0:	6803      	ldr	r3, [r0, #0]
 80165f2:	e9cd a60c 	strd	sl, r6, [sp, #48]	@ 0x30
 80165f6:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	@ 0x28
 80165fa:	69dc      	ldr	r4, [r3, #28]
 80165fc:	463a      	mov	r2, r7
 80165fe:	4643      	mov	r3, r8
 8016600:	4629      	mov	r1, r5
 8016602:	46a4      	mov	ip, r4
 8016604:	b001      	add	sp, #4
 8016606:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801660a:	4760      	bx	ip

0801660c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 801660c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016610:	4607      	mov	r7, r0
 8016612:	460c      	mov	r4, r1
 8016614:	4615      	mov	r5, r2
 8016616:	461e      	mov	r6, r3
 8016618:	f7ff ff35 	bl	8016486 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 801661c:	b948      	cbnz	r0, 8016632 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 801661e:	68b8      	ldr	r0, [r7, #8]
 8016620:	6803      	ldr	r3, [r0, #0]
 8016622:	699f      	ldr	r7, [r3, #24]
 8016624:	462a      	mov	r2, r5
 8016626:	4633      	mov	r3, r6
 8016628:	4621      	mov	r1, r4
 801662a:	46bc      	mov	ip, r7
 801662c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016630:	4760      	bx	ip
 8016632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016636 <_ZNSt9type_infoD1Ev>:
 8016636:	4770      	bx	lr

08016638 <_ZNKSt9type_info14__is_pointer_pEv>:
 8016638:	2000      	movs	r0, #0
 801663a:	4770      	bx	lr

0801663c <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
 801663c:	2000      	movs	r0, #0
 801663e:	4770      	bx	lr

08016640 <_ZNKSt9type_info7__equalERKS_>:
 8016640:	4281      	cmp	r1, r0
 8016642:	b508      	push	{r3, lr}
 8016644:	d00e      	beq.n	8016664 <_ZNKSt9type_info7__equalERKS_+0x24>
 8016646:	6840      	ldr	r0, [r0, #4]
 8016648:	7803      	ldrb	r3, [r0, #0]
 801664a:	2b2a      	cmp	r3, #42	@ 0x2a
 801664c:	d00c      	beq.n	8016668 <_ZNKSt9type_info7__equalERKS_+0x28>
 801664e:	6849      	ldr	r1, [r1, #4]
 8016650:	780b      	ldrb	r3, [r1, #0]
 8016652:	2b2a      	cmp	r3, #42	@ 0x2a
 8016654:	bf08      	it	eq
 8016656:	3101      	addeq	r1, #1
 8016658:	f7e9 fe42 	bl	80002e0 <strcmp>
 801665c:	fab0 f080 	clz	r0, r0
 8016660:	0940      	lsrs	r0, r0, #5
 8016662:	bd08      	pop	{r3, pc}
 8016664:	2001      	movs	r0, #1
 8016666:	e7fc      	b.n	8016662 <_ZNKSt9type_info7__equalERKS_+0x22>
 8016668:	2000      	movs	r0, #0
 801666a:	e7fa      	b.n	8016662 <_ZNKSt9type_info7__equalERKS_+0x22>

0801666c <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
 801666c:	f7ff bfe8 	b.w	8016640 <_ZNKSt9type_info7__equalERKS_>

08016670 <_ZSt17__throw_bad_allocv>:
 8016670:	b508      	push	{r3, lr}
 8016672:	f000 f815 	bl	80166a0 <abort>

08016676 <_ZSt28__throw_bad_array_new_lengthv>:
 8016676:	b508      	push	{r3, lr}
 8016678:	f000 f812 	bl	80166a0 <abort>

0801667c <_ZSt20__throw_length_errorPKc>:
 801667c:	b508      	push	{r3, lr}
 801667e:	f000 f80f 	bl	80166a0 <abort>

08016682 <_ZSt24__throw_out_of_range_fmtPKcz>:
 8016682:	b40f      	push	{r0, r1, r2, r3}
 8016684:	b508      	push	{r3, lr}
 8016686:	f000 f80b 	bl	80166a0 <abort>

0801668a <_ZdlPv>:
 801668a:	f000 b819 	b.w	80166c0 <free>
	...

08016690 <_ZSt15get_new_handlerv>:
 8016690:	4b02      	ldr	r3, [pc, #8]	@ (801669c <_ZSt15get_new_handlerv+0xc>)
 8016692:	6818      	ldr	r0, [r3, #0]
 8016694:	f3bf 8f5b 	dmb	ish
 8016698:	4770      	bx	lr
 801669a:	bf00      	nop
 801669c:	24006998 	.word	0x24006998

080166a0 <abort>:
 80166a0:	b508      	push	{r3, lr}
 80166a2:	2006      	movs	r0, #6
 80166a4:	f000 f90c 	bl	80168c0 <raise>
 80166a8:	2001      	movs	r0, #1
 80166aa:	f7ec fc25 	bl	8002ef8 <_exit>
	...

080166b0 <malloc>:
 80166b0:	4b02      	ldr	r3, [pc, #8]	@ (80166bc <malloc+0xc>)
 80166b2:	4601      	mov	r1, r0
 80166b4:	6818      	ldr	r0, [r3, #0]
 80166b6:	f000 b82d 	b.w	8016714 <_malloc_r>
 80166ba:	bf00      	nop
 80166bc:	24000014 	.word	0x24000014

080166c0 <free>:
 80166c0:	4b02      	ldr	r3, [pc, #8]	@ (80166cc <free+0xc>)
 80166c2:	4601      	mov	r1, r0
 80166c4:	6818      	ldr	r0, [r3, #0]
 80166c6:	f000 b9b7 	b.w	8016a38 <_free_r>
 80166ca:	bf00      	nop
 80166cc:	24000014 	.word	0x24000014

080166d0 <sbrk_aligned>:
 80166d0:	b570      	push	{r4, r5, r6, lr}
 80166d2:	4e0f      	ldr	r6, [pc, #60]	@ (8016710 <sbrk_aligned+0x40>)
 80166d4:	460c      	mov	r4, r1
 80166d6:	6831      	ldr	r1, [r6, #0]
 80166d8:	4605      	mov	r5, r0
 80166da:	b911      	cbnz	r1, 80166e2 <sbrk_aligned+0x12>
 80166dc:	f000 f962 	bl	80169a4 <_sbrk_r>
 80166e0:	6030      	str	r0, [r6, #0]
 80166e2:	4621      	mov	r1, r4
 80166e4:	4628      	mov	r0, r5
 80166e6:	f000 f95d 	bl	80169a4 <_sbrk_r>
 80166ea:	1c43      	adds	r3, r0, #1
 80166ec:	d103      	bne.n	80166f6 <sbrk_aligned+0x26>
 80166ee:	f04f 34ff 	mov.w	r4, #4294967295
 80166f2:	4620      	mov	r0, r4
 80166f4:	bd70      	pop	{r4, r5, r6, pc}
 80166f6:	1cc4      	adds	r4, r0, #3
 80166f8:	f024 0403 	bic.w	r4, r4, #3
 80166fc:	42a0      	cmp	r0, r4
 80166fe:	d0f8      	beq.n	80166f2 <sbrk_aligned+0x22>
 8016700:	1a21      	subs	r1, r4, r0
 8016702:	4628      	mov	r0, r5
 8016704:	f000 f94e 	bl	80169a4 <_sbrk_r>
 8016708:	3001      	adds	r0, #1
 801670a:	d1f2      	bne.n	80166f2 <sbrk_aligned+0x22>
 801670c:	e7ef      	b.n	80166ee <sbrk_aligned+0x1e>
 801670e:	bf00      	nop
 8016710:	2400699c 	.word	0x2400699c

08016714 <_malloc_r>:
 8016714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016718:	1ccd      	adds	r5, r1, #3
 801671a:	f025 0503 	bic.w	r5, r5, #3
 801671e:	3508      	adds	r5, #8
 8016720:	2d0c      	cmp	r5, #12
 8016722:	bf38      	it	cc
 8016724:	250c      	movcc	r5, #12
 8016726:	2d00      	cmp	r5, #0
 8016728:	4606      	mov	r6, r0
 801672a:	db01      	blt.n	8016730 <_malloc_r+0x1c>
 801672c:	42a9      	cmp	r1, r5
 801672e:	d904      	bls.n	801673a <_malloc_r+0x26>
 8016730:	230c      	movs	r3, #12
 8016732:	6033      	str	r3, [r6, #0]
 8016734:	2000      	movs	r0, #0
 8016736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801673a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016810 <_malloc_r+0xfc>
 801673e:	f000 f869 	bl	8016814 <__malloc_lock>
 8016742:	f8d8 3000 	ldr.w	r3, [r8]
 8016746:	461c      	mov	r4, r3
 8016748:	bb44      	cbnz	r4, 801679c <_malloc_r+0x88>
 801674a:	4629      	mov	r1, r5
 801674c:	4630      	mov	r0, r6
 801674e:	f7ff ffbf 	bl	80166d0 <sbrk_aligned>
 8016752:	1c43      	adds	r3, r0, #1
 8016754:	4604      	mov	r4, r0
 8016756:	d158      	bne.n	801680a <_malloc_r+0xf6>
 8016758:	f8d8 4000 	ldr.w	r4, [r8]
 801675c:	4627      	mov	r7, r4
 801675e:	2f00      	cmp	r7, #0
 8016760:	d143      	bne.n	80167ea <_malloc_r+0xd6>
 8016762:	2c00      	cmp	r4, #0
 8016764:	d04b      	beq.n	80167fe <_malloc_r+0xea>
 8016766:	6823      	ldr	r3, [r4, #0]
 8016768:	4639      	mov	r1, r7
 801676a:	4630      	mov	r0, r6
 801676c:	eb04 0903 	add.w	r9, r4, r3
 8016770:	f000 f918 	bl	80169a4 <_sbrk_r>
 8016774:	4581      	cmp	r9, r0
 8016776:	d142      	bne.n	80167fe <_malloc_r+0xea>
 8016778:	6821      	ldr	r1, [r4, #0]
 801677a:	1a6d      	subs	r5, r5, r1
 801677c:	4629      	mov	r1, r5
 801677e:	4630      	mov	r0, r6
 8016780:	f7ff ffa6 	bl	80166d0 <sbrk_aligned>
 8016784:	3001      	adds	r0, #1
 8016786:	d03a      	beq.n	80167fe <_malloc_r+0xea>
 8016788:	6823      	ldr	r3, [r4, #0]
 801678a:	442b      	add	r3, r5
 801678c:	6023      	str	r3, [r4, #0]
 801678e:	f8d8 3000 	ldr.w	r3, [r8]
 8016792:	685a      	ldr	r2, [r3, #4]
 8016794:	bb62      	cbnz	r2, 80167f0 <_malloc_r+0xdc>
 8016796:	f8c8 7000 	str.w	r7, [r8]
 801679a:	e00f      	b.n	80167bc <_malloc_r+0xa8>
 801679c:	6822      	ldr	r2, [r4, #0]
 801679e:	1b52      	subs	r2, r2, r5
 80167a0:	d420      	bmi.n	80167e4 <_malloc_r+0xd0>
 80167a2:	2a0b      	cmp	r2, #11
 80167a4:	d917      	bls.n	80167d6 <_malloc_r+0xc2>
 80167a6:	1961      	adds	r1, r4, r5
 80167a8:	42a3      	cmp	r3, r4
 80167aa:	6025      	str	r5, [r4, #0]
 80167ac:	bf18      	it	ne
 80167ae:	6059      	strne	r1, [r3, #4]
 80167b0:	6863      	ldr	r3, [r4, #4]
 80167b2:	bf08      	it	eq
 80167b4:	f8c8 1000 	streq.w	r1, [r8]
 80167b8:	5162      	str	r2, [r4, r5]
 80167ba:	604b      	str	r3, [r1, #4]
 80167bc:	4630      	mov	r0, r6
 80167be:	f000 f82f 	bl	8016820 <__malloc_unlock>
 80167c2:	f104 000b 	add.w	r0, r4, #11
 80167c6:	1d23      	adds	r3, r4, #4
 80167c8:	f020 0007 	bic.w	r0, r0, #7
 80167cc:	1ac2      	subs	r2, r0, r3
 80167ce:	bf1c      	itt	ne
 80167d0:	1a1b      	subne	r3, r3, r0
 80167d2:	50a3      	strne	r3, [r4, r2]
 80167d4:	e7af      	b.n	8016736 <_malloc_r+0x22>
 80167d6:	6862      	ldr	r2, [r4, #4]
 80167d8:	42a3      	cmp	r3, r4
 80167da:	bf0c      	ite	eq
 80167dc:	f8c8 2000 	streq.w	r2, [r8]
 80167e0:	605a      	strne	r2, [r3, #4]
 80167e2:	e7eb      	b.n	80167bc <_malloc_r+0xa8>
 80167e4:	4623      	mov	r3, r4
 80167e6:	6864      	ldr	r4, [r4, #4]
 80167e8:	e7ae      	b.n	8016748 <_malloc_r+0x34>
 80167ea:	463c      	mov	r4, r7
 80167ec:	687f      	ldr	r7, [r7, #4]
 80167ee:	e7b6      	b.n	801675e <_malloc_r+0x4a>
 80167f0:	461a      	mov	r2, r3
 80167f2:	685b      	ldr	r3, [r3, #4]
 80167f4:	42a3      	cmp	r3, r4
 80167f6:	d1fb      	bne.n	80167f0 <_malloc_r+0xdc>
 80167f8:	2300      	movs	r3, #0
 80167fa:	6053      	str	r3, [r2, #4]
 80167fc:	e7de      	b.n	80167bc <_malloc_r+0xa8>
 80167fe:	230c      	movs	r3, #12
 8016800:	6033      	str	r3, [r6, #0]
 8016802:	4630      	mov	r0, r6
 8016804:	f000 f80c 	bl	8016820 <__malloc_unlock>
 8016808:	e794      	b.n	8016734 <_malloc_r+0x20>
 801680a:	6005      	str	r5, [r0, #0]
 801680c:	e7d6      	b.n	80167bc <_malloc_r+0xa8>
 801680e:	bf00      	nop
 8016810:	240069a0 	.word	0x240069a0

08016814 <__malloc_lock>:
 8016814:	4801      	ldr	r0, [pc, #4]	@ (801681c <__malloc_lock+0x8>)
 8016816:	f000 b8ff 	b.w	8016a18 <__retarget_lock_acquire_recursive>
 801681a:	bf00      	nop
 801681c:	24006ae0 	.word	0x24006ae0

08016820 <__malloc_unlock>:
 8016820:	4801      	ldr	r0, [pc, #4]	@ (8016828 <__malloc_unlock+0x8>)
 8016822:	f000 b8fa 	b.w	8016a1a <__retarget_lock_release_recursive>
 8016826:	bf00      	nop
 8016828:	24006ae0 	.word	0x24006ae0

0801682c <memmove>:
 801682c:	4288      	cmp	r0, r1
 801682e:	b510      	push	{r4, lr}
 8016830:	eb01 0402 	add.w	r4, r1, r2
 8016834:	d902      	bls.n	801683c <memmove+0x10>
 8016836:	4284      	cmp	r4, r0
 8016838:	4623      	mov	r3, r4
 801683a:	d807      	bhi.n	801684c <memmove+0x20>
 801683c:	1e43      	subs	r3, r0, #1
 801683e:	42a1      	cmp	r1, r4
 8016840:	d008      	beq.n	8016854 <memmove+0x28>
 8016842:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016846:	f803 2f01 	strb.w	r2, [r3, #1]!
 801684a:	e7f8      	b.n	801683e <memmove+0x12>
 801684c:	4402      	add	r2, r0
 801684e:	4601      	mov	r1, r0
 8016850:	428a      	cmp	r2, r1
 8016852:	d100      	bne.n	8016856 <memmove+0x2a>
 8016854:	bd10      	pop	{r4, pc}
 8016856:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801685a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801685e:	e7f7      	b.n	8016850 <memmove+0x24>

08016860 <memset>:
 8016860:	4402      	add	r2, r0
 8016862:	4603      	mov	r3, r0
 8016864:	4293      	cmp	r3, r2
 8016866:	d100      	bne.n	801686a <memset+0xa>
 8016868:	4770      	bx	lr
 801686a:	f803 1b01 	strb.w	r1, [r3], #1
 801686e:	e7f9      	b.n	8016864 <memset+0x4>

08016870 <_raise_r>:
 8016870:	291f      	cmp	r1, #31
 8016872:	b538      	push	{r3, r4, r5, lr}
 8016874:	4605      	mov	r5, r0
 8016876:	460c      	mov	r4, r1
 8016878:	d904      	bls.n	8016884 <_raise_r+0x14>
 801687a:	2316      	movs	r3, #22
 801687c:	6003      	str	r3, [r0, #0]
 801687e:	f04f 30ff 	mov.w	r0, #4294967295
 8016882:	bd38      	pop	{r3, r4, r5, pc}
 8016884:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8016886:	b112      	cbz	r2, 801688e <_raise_r+0x1e>
 8016888:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801688c:	b94b      	cbnz	r3, 80168a2 <_raise_r+0x32>
 801688e:	4628      	mov	r0, r5
 8016890:	f000 f886 	bl	80169a0 <_getpid_r>
 8016894:	4622      	mov	r2, r4
 8016896:	4601      	mov	r1, r0
 8016898:	4628      	mov	r0, r5
 801689a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801689e:	f000 b86d 	b.w	801697c <_kill_r>
 80168a2:	2b01      	cmp	r3, #1
 80168a4:	d00a      	beq.n	80168bc <_raise_r+0x4c>
 80168a6:	1c59      	adds	r1, r3, #1
 80168a8:	d103      	bne.n	80168b2 <_raise_r+0x42>
 80168aa:	2316      	movs	r3, #22
 80168ac:	6003      	str	r3, [r0, #0]
 80168ae:	2001      	movs	r0, #1
 80168b0:	e7e7      	b.n	8016882 <_raise_r+0x12>
 80168b2:	2100      	movs	r1, #0
 80168b4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80168b8:	4620      	mov	r0, r4
 80168ba:	4798      	blx	r3
 80168bc:	2000      	movs	r0, #0
 80168be:	e7e0      	b.n	8016882 <_raise_r+0x12>

080168c0 <raise>:
 80168c0:	4b02      	ldr	r3, [pc, #8]	@ (80168cc <raise+0xc>)
 80168c2:	4601      	mov	r1, r0
 80168c4:	6818      	ldr	r0, [r3, #0]
 80168c6:	f7ff bfd3 	b.w	8016870 <_raise_r>
 80168ca:	bf00      	nop
 80168cc:	24000014 	.word	0x24000014

080168d0 <_reclaim_reent>:
 80168d0:	4b29      	ldr	r3, [pc, #164]	@ (8016978 <_reclaim_reent+0xa8>)
 80168d2:	681b      	ldr	r3, [r3, #0]
 80168d4:	4283      	cmp	r3, r0
 80168d6:	b570      	push	{r4, r5, r6, lr}
 80168d8:	4604      	mov	r4, r0
 80168da:	d04b      	beq.n	8016974 <_reclaim_reent+0xa4>
 80168dc:	69c3      	ldr	r3, [r0, #28]
 80168de:	b1ab      	cbz	r3, 801690c <_reclaim_reent+0x3c>
 80168e0:	68db      	ldr	r3, [r3, #12]
 80168e2:	b16b      	cbz	r3, 8016900 <_reclaim_reent+0x30>
 80168e4:	2500      	movs	r5, #0
 80168e6:	69e3      	ldr	r3, [r4, #28]
 80168e8:	68db      	ldr	r3, [r3, #12]
 80168ea:	5959      	ldr	r1, [r3, r5]
 80168ec:	2900      	cmp	r1, #0
 80168ee:	d13b      	bne.n	8016968 <_reclaim_reent+0x98>
 80168f0:	3504      	adds	r5, #4
 80168f2:	2d80      	cmp	r5, #128	@ 0x80
 80168f4:	d1f7      	bne.n	80168e6 <_reclaim_reent+0x16>
 80168f6:	69e3      	ldr	r3, [r4, #28]
 80168f8:	4620      	mov	r0, r4
 80168fa:	68d9      	ldr	r1, [r3, #12]
 80168fc:	f000 f89c 	bl	8016a38 <_free_r>
 8016900:	69e3      	ldr	r3, [r4, #28]
 8016902:	6819      	ldr	r1, [r3, #0]
 8016904:	b111      	cbz	r1, 801690c <_reclaim_reent+0x3c>
 8016906:	4620      	mov	r0, r4
 8016908:	f000 f896 	bl	8016a38 <_free_r>
 801690c:	6961      	ldr	r1, [r4, #20]
 801690e:	b111      	cbz	r1, 8016916 <_reclaim_reent+0x46>
 8016910:	4620      	mov	r0, r4
 8016912:	f000 f891 	bl	8016a38 <_free_r>
 8016916:	69e1      	ldr	r1, [r4, #28]
 8016918:	b111      	cbz	r1, 8016920 <_reclaim_reent+0x50>
 801691a:	4620      	mov	r0, r4
 801691c:	f000 f88c 	bl	8016a38 <_free_r>
 8016920:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8016922:	b111      	cbz	r1, 801692a <_reclaim_reent+0x5a>
 8016924:	4620      	mov	r0, r4
 8016926:	f000 f887 	bl	8016a38 <_free_r>
 801692a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801692c:	b111      	cbz	r1, 8016934 <_reclaim_reent+0x64>
 801692e:	4620      	mov	r0, r4
 8016930:	f000 f882 	bl	8016a38 <_free_r>
 8016934:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8016936:	b111      	cbz	r1, 801693e <_reclaim_reent+0x6e>
 8016938:	4620      	mov	r0, r4
 801693a:	f000 f87d 	bl	8016a38 <_free_r>
 801693e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8016940:	b111      	cbz	r1, 8016948 <_reclaim_reent+0x78>
 8016942:	4620      	mov	r0, r4
 8016944:	f000 f878 	bl	8016a38 <_free_r>
 8016948:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801694a:	b111      	cbz	r1, 8016952 <_reclaim_reent+0x82>
 801694c:	4620      	mov	r0, r4
 801694e:	f000 f873 	bl	8016a38 <_free_r>
 8016952:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8016954:	b111      	cbz	r1, 801695c <_reclaim_reent+0x8c>
 8016956:	4620      	mov	r0, r4
 8016958:	f000 f86e 	bl	8016a38 <_free_r>
 801695c:	6a23      	ldr	r3, [r4, #32]
 801695e:	b14b      	cbz	r3, 8016974 <_reclaim_reent+0xa4>
 8016960:	4620      	mov	r0, r4
 8016962:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016966:	4718      	bx	r3
 8016968:	680e      	ldr	r6, [r1, #0]
 801696a:	4620      	mov	r0, r4
 801696c:	f000 f864 	bl	8016a38 <_free_r>
 8016970:	4631      	mov	r1, r6
 8016972:	e7bb      	b.n	80168ec <_reclaim_reent+0x1c>
 8016974:	bd70      	pop	{r4, r5, r6, pc}
 8016976:	bf00      	nop
 8016978:	24000014 	.word	0x24000014

0801697c <_kill_r>:
 801697c:	b538      	push	{r3, r4, r5, lr}
 801697e:	4d07      	ldr	r5, [pc, #28]	@ (801699c <_kill_r+0x20>)
 8016980:	2300      	movs	r3, #0
 8016982:	4604      	mov	r4, r0
 8016984:	4608      	mov	r0, r1
 8016986:	4611      	mov	r1, r2
 8016988:	602b      	str	r3, [r5, #0]
 801698a:	f7ec faad 	bl	8002ee8 <_kill>
 801698e:	1c43      	adds	r3, r0, #1
 8016990:	d102      	bne.n	8016998 <_kill_r+0x1c>
 8016992:	682b      	ldr	r3, [r5, #0]
 8016994:	b103      	cbz	r3, 8016998 <_kill_r+0x1c>
 8016996:	6023      	str	r3, [r4, #0]
 8016998:	bd38      	pop	{r3, r4, r5, pc}
 801699a:	bf00      	nop
 801699c:	24006adc 	.word	0x24006adc

080169a0 <_getpid_r>:
 80169a0:	f7ec baa0 	b.w	8002ee4 <_getpid>

080169a4 <_sbrk_r>:
 80169a4:	b538      	push	{r3, r4, r5, lr}
 80169a6:	4d06      	ldr	r5, [pc, #24]	@ (80169c0 <_sbrk_r+0x1c>)
 80169a8:	2300      	movs	r3, #0
 80169aa:	4604      	mov	r4, r0
 80169ac:	4608      	mov	r0, r1
 80169ae:	602b      	str	r3, [r5, #0]
 80169b0:	f7ec faa8 	bl	8002f04 <_sbrk>
 80169b4:	1c43      	adds	r3, r0, #1
 80169b6:	d102      	bne.n	80169be <_sbrk_r+0x1a>
 80169b8:	682b      	ldr	r3, [r5, #0]
 80169ba:	b103      	cbz	r3, 80169be <_sbrk_r+0x1a>
 80169bc:	6023      	str	r3, [r4, #0]
 80169be:	bd38      	pop	{r3, r4, r5, pc}
 80169c0:	24006adc 	.word	0x24006adc

080169c4 <__errno>:
 80169c4:	4b01      	ldr	r3, [pc, #4]	@ (80169cc <__errno+0x8>)
 80169c6:	6818      	ldr	r0, [r3, #0]
 80169c8:	4770      	bx	lr
 80169ca:	bf00      	nop
 80169cc:	24000014 	.word	0x24000014

080169d0 <__libc_init_array>:
 80169d0:	b570      	push	{r4, r5, r6, lr}
 80169d2:	4d0d      	ldr	r5, [pc, #52]	@ (8016a08 <__libc_init_array+0x38>)
 80169d4:	4c0d      	ldr	r4, [pc, #52]	@ (8016a0c <__libc_init_array+0x3c>)
 80169d6:	1b64      	subs	r4, r4, r5
 80169d8:	10a4      	asrs	r4, r4, #2
 80169da:	2600      	movs	r6, #0
 80169dc:	42a6      	cmp	r6, r4
 80169de:	d109      	bne.n	80169f4 <__libc_init_array+0x24>
 80169e0:	4d0b      	ldr	r5, [pc, #44]	@ (8016a10 <__libc_init_array+0x40>)
 80169e2:	4c0c      	ldr	r4, [pc, #48]	@ (8016a14 <__libc_init_array+0x44>)
 80169e4:	f000 f872 	bl	8016acc <_init>
 80169e8:	1b64      	subs	r4, r4, r5
 80169ea:	10a4      	asrs	r4, r4, #2
 80169ec:	2600      	movs	r6, #0
 80169ee:	42a6      	cmp	r6, r4
 80169f0:	d105      	bne.n	80169fe <__libc_init_array+0x2e>
 80169f2:	bd70      	pop	{r4, r5, r6, pc}
 80169f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80169f8:	4798      	blx	r3
 80169fa:	3601      	adds	r6, #1
 80169fc:	e7ee      	b.n	80169dc <__libc_init_array+0xc>
 80169fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8016a02:	4798      	blx	r3
 8016a04:	3601      	adds	r6, #1
 8016a06:	e7f2      	b.n	80169ee <__libc_init_array+0x1e>
 8016a08:	0801700c 	.word	0x0801700c
 8016a0c:	0801700c 	.word	0x0801700c
 8016a10:	0801700c 	.word	0x0801700c
 8016a14:	08017014 	.word	0x08017014

08016a18 <__retarget_lock_acquire_recursive>:
 8016a18:	4770      	bx	lr

08016a1a <__retarget_lock_release_recursive>:
 8016a1a:	4770      	bx	lr

08016a1c <memcpy>:
 8016a1c:	440a      	add	r2, r1
 8016a1e:	4291      	cmp	r1, r2
 8016a20:	f100 33ff 	add.w	r3, r0, #4294967295
 8016a24:	d100      	bne.n	8016a28 <memcpy+0xc>
 8016a26:	4770      	bx	lr
 8016a28:	b510      	push	{r4, lr}
 8016a2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016a2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016a32:	4291      	cmp	r1, r2
 8016a34:	d1f9      	bne.n	8016a2a <memcpy+0xe>
 8016a36:	bd10      	pop	{r4, pc}

08016a38 <_free_r>:
 8016a38:	b538      	push	{r3, r4, r5, lr}
 8016a3a:	4605      	mov	r5, r0
 8016a3c:	2900      	cmp	r1, #0
 8016a3e:	d041      	beq.n	8016ac4 <_free_r+0x8c>
 8016a40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016a44:	1f0c      	subs	r4, r1, #4
 8016a46:	2b00      	cmp	r3, #0
 8016a48:	bfb8      	it	lt
 8016a4a:	18e4      	addlt	r4, r4, r3
 8016a4c:	f7ff fee2 	bl	8016814 <__malloc_lock>
 8016a50:	4a1d      	ldr	r2, [pc, #116]	@ (8016ac8 <_free_r+0x90>)
 8016a52:	6813      	ldr	r3, [r2, #0]
 8016a54:	b933      	cbnz	r3, 8016a64 <_free_r+0x2c>
 8016a56:	6063      	str	r3, [r4, #4]
 8016a58:	6014      	str	r4, [r2, #0]
 8016a5a:	4628      	mov	r0, r5
 8016a5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016a60:	f7ff bede 	b.w	8016820 <__malloc_unlock>
 8016a64:	42a3      	cmp	r3, r4
 8016a66:	d908      	bls.n	8016a7a <_free_r+0x42>
 8016a68:	6820      	ldr	r0, [r4, #0]
 8016a6a:	1821      	adds	r1, r4, r0
 8016a6c:	428b      	cmp	r3, r1
 8016a6e:	bf01      	itttt	eq
 8016a70:	6819      	ldreq	r1, [r3, #0]
 8016a72:	685b      	ldreq	r3, [r3, #4]
 8016a74:	1809      	addeq	r1, r1, r0
 8016a76:	6021      	streq	r1, [r4, #0]
 8016a78:	e7ed      	b.n	8016a56 <_free_r+0x1e>
 8016a7a:	461a      	mov	r2, r3
 8016a7c:	685b      	ldr	r3, [r3, #4]
 8016a7e:	b10b      	cbz	r3, 8016a84 <_free_r+0x4c>
 8016a80:	42a3      	cmp	r3, r4
 8016a82:	d9fa      	bls.n	8016a7a <_free_r+0x42>
 8016a84:	6811      	ldr	r1, [r2, #0]
 8016a86:	1850      	adds	r0, r2, r1
 8016a88:	42a0      	cmp	r0, r4
 8016a8a:	d10b      	bne.n	8016aa4 <_free_r+0x6c>
 8016a8c:	6820      	ldr	r0, [r4, #0]
 8016a8e:	4401      	add	r1, r0
 8016a90:	1850      	adds	r0, r2, r1
 8016a92:	4283      	cmp	r3, r0
 8016a94:	6011      	str	r1, [r2, #0]
 8016a96:	d1e0      	bne.n	8016a5a <_free_r+0x22>
 8016a98:	6818      	ldr	r0, [r3, #0]
 8016a9a:	685b      	ldr	r3, [r3, #4]
 8016a9c:	6053      	str	r3, [r2, #4]
 8016a9e:	4408      	add	r0, r1
 8016aa0:	6010      	str	r0, [r2, #0]
 8016aa2:	e7da      	b.n	8016a5a <_free_r+0x22>
 8016aa4:	d902      	bls.n	8016aac <_free_r+0x74>
 8016aa6:	230c      	movs	r3, #12
 8016aa8:	602b      	str	r3, [r5, #0]
 8016aaa:	e7d6      	b.n	8016a5a <_free_r+0x22>
 8016aac:	6820      	ldr	r0, [r4, #0]
 8016aae:	1821      	adds	r1, r4, r0
 8016ab0:	428b      	cmp	r3, r1
 8016ab2:	bf04      	itt	eq
 8016ab4:	6819      	ldreq	r1, [r3, #0]
 8016ab6:	685b      	ldreq	r3, [r3, #4]
 8016ab8:	6063      	str	r3, [r4, #4]
 8016aba:	bf04      	itt	eq
 8016abc:	1809      	addeq	r1, r1, r0
 8016abe:	6021      	streq	r1, [r4, #0]
 8016ac0:	6054      	str	r4, [r2, #4]
 8016ac2:	e7ca      	b.n	8016a5a <_free_r+0x22>
 8016ac4:	bd38      	pop	{r3, r4, r5, pc}
 8016ac6:	bf00      	nop
 8016ac8:	240069a0 	.word	0x240069a0

08016acc <_init>:
 8016acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ace:	bf00      	nop
 8016ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016ad2:	bc08      	pop	{r3}
 8016ad4:	469e      	mov	lr, r3
 8016ad6:	4770      	bx	lr

08016ad8 <_fini>:
 8016ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ada:	bf00      	nop
 8016adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016ade:	bc08      	pop	{r3}
 8016ae0:	469e      	mov	lr, r3
 8016ae2:	4770      	bx	lr
